// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string KEY_STRING_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    static long[][] key_109 = new long[][]{new long[]{2, 5}, new long[]{1, 6}};
    public static long mod36(long n_1) {
        long r_2 = (n_1 % 36);
        if ((r_2 < 0)) {
            r_2 = (r_2 + 36);
        };
        return r_2;
    }

    public static long gcd(long a_3, long b_4) {
        long x_5 = a_3;
        long y_6 = b_4;
        while ((y_6 != 0)) {
            long t_7 = y_6;
            y_6 = (x_5 % y_6);
            x_5 = t_7;
        };
        if ((x_5 < 0)) {
            x_5 = -x_5;
        };
        return x_5;
    }

    public static long replace_letters(string letter_8) {
        long i_9 = 0;
        while ((i_9 < KEY_STRING_0.Length)) {
            if ((KEY_STRING_0.Substring((int)(i_9), 1) == letter_8)) {
                return i_9;
            }
            i_9 = (i_9 + 1);
        };
        return 0;
    }

    public static string replace_digits(long num_10) {
        long idx_11 = Program.mod36(num_10);
        return KEY_STRING_0.Substring((int)(idx_11), 1);
    }

    public static string to_upper(string c_12) {
        string lower_13 = "abcdefghijklmnopqrstuvwxyz";
        string upper_14 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        long i_15 = 0;
        while ((i_15 < lower_13.Length)) {
            if ((c_12 == lower_13.Substring((int)(i_15), 1))) {
                return upper_14.Substring((int)(i_15), 1);
            }
            i_15 = (i_15 + 1);
        };
        return c_12;
    }

    public static string process_text(string text_16, long break_key_17) {
        string[] chars_18 = new string[]{};
        long i_19 = 0;
        while ((i_19 < text_16.Length)) {
            string c_20 = Program.to_upper(text_16.Substring((int)(i_19), 1));
            long j_21 = 0;
            bool ok_22 = false;
            while ((j_21 < KEY_STRING_0.Length)) {
                if ((KEY_STRING_0.Substring((int)(j_21), 1) == c_20)) {
                    ok_22 = true;
                    break;
                }
                j_21 = (j_21 + 1);
            }
            if (ok_22) {
                chars_18 = (Enumerable.ToArray(Enumerable.Append(chars_18, c_20)));
            }
            i_19 = (i_19 + 1);
        };
        if ((chars_18.Length == 0)) {
            return "";
        };
        string last_23 = chars_18[(int)((chars_18.Length - 1))];
        while (((chars_18.Length % break_key_17) != 0)) {
            chars_18 = (Enumerable.ToArray(Enumerable.Append(chars_18, last_23)));
        };
        string res_24 = "";
        long k_25 = 0;
        while ((k_25 < chars_18.Length)) {
            res_24 = (res_24 + chars_18[(int)(k_25)]);
            k_25 = (k_25 + 1);
        };
        return res_24;
    }

    public static long[][] matrix_minor(long[][] m_26, long row_27, long col_28) {
        long[][] res_29 = new long[][]{};
        long i_30 = 0;
        while ((i_30 < m_26.Length)) {
            if ((i_30 != row_27)) {
                long[] r_31 = new long[]{};
                long j_32 = 0;
                while ((j_32 < m_26[(int)(i_30)].Length)) {
                    if ((j_32 != col_28)) {
                        r_31 = (Enumerable.ToArray(Enumerable.Append(r_31, m_26[(int)(i_30)][(int)(j_32)])));
                    }
                    j_32 = (j_32 + 1);
                }
                res_29 = (Enumerable.ToArray(Enumerable.Append(res_29, r_31)));
            }
            i_30 = (i_30 + 1);
        };
        return res_29;
    }

    public static long determinant(long[][] m_33) {
        long n_34 = m_33.Length;
        if ((n_34 == 1)) {
            return m_33[(int)(0)][(int)(0)];
        };
        if ((n_34 == 2)) {
            return ((m_33[(int)(0)][(int)(0)] * m_33[(int)(1)][(int)(1)]) - (m_33[(int)(0)][(int)(1)] * m_33[(int)(1)][(int)(0)]));
        };
        long det_35 = 0;
        long col_36 = 0;
        while ((col_36 < n_34)) {
            long[][] minor_mat_37 = Program.matrix_minor(m_33, 0, col_36);
            long sign_38 = 1;
            if (((col_36 % 2) == 1)) {
                sign_38 = -1;
            }
            det_35 = (det_35 + ((sign_38 * m_33[(int)(0)][(int)(col_36)]) * Program.determinant(minor_mat_37)));
            col_36 = (col_36 + 1);
        };
        return det_35;
    }

    public static long[][] cofactor_matrix(long[][] m_39) {
        long n_40 = m_39.Length;
        long[][] res_41 = new long[][]{};
        long i_42 = 0;
        while ((i_42 < n_40)) {
            long[] row_43 = new long[]{};
            long j_44 = 0;
            while ((j_44 < n_40)) {
                long[][] minor_mat_45 = Program.matrix_minor(m_39, i_42, j_44);
                long det_minor_46 = Program.determinant(minor_mat_45);
                long sign_47 = 1;
                if ((((i_42 + j_44) % 2) == 1)) {
                    sign_47 = -1;
                }
                row_43 = (Enumerable.ToArray(Enumerable.Append(row_43, (sign_47 * det_minor_46))));
                j_44 = (j_44 + 1);
            }
            res_41 = (Enumerable.ToArray(Enumerable.Append(res_41, row_43)));
            i_42 = (i_42 + 1);
        };
        return res_41;
    }

    public static long[][] transpose(long[][] m_48) {
        long rows_49 = m_48.Length;
        long cols_50 = m_48[(int)(0)].Length;
        long[][] res_51 = new long[][]{};
        long j_52 = 0;
        while ((j_52 < cols_50)) {
            long[] row_53 = new long[]{};
            long i_54 = 0;
            while ((i_54 < rows_49)) {
                row_53 = (Enumerable.ToArray(Enumerable.Append(row_53, m_48[(int)(i_54)][(int)(j_52)])));
                i_54 = (i_54 + 1);
            }
            res_51 = (Enumerable.ToArray(Enumerable.Append(res_51, row_53)));
            j_52 = (j_52 + 1);
        };
        return res_51;
    }

    public static long[][] matrix_mod(long[][] m_55) {
        long[][] res_56 = new long[][]{};
        long i_57 = 0;
        while ((i_57 < m_55.Length)) {
            long[] row_58 = new long[]{};
            long j_59 = 0;
            while ((j_59 < m_55[(int)(i_57)].Length)) {
                row_58 = (Enumerable.ToArray(Enumerable.Append(row_58, Program.mod36(m_55[(int)(i_57)][(int)(j_59)]))));
                j_59 = (j_59 + 1);
            }
            res_56 = (Enumerable.ToArray(Enumerable.Append(res_56, row_58)));
            i_57 = (i_57 + 1);
        };
        return res_56;
    }

    public static long[][] scalar_matrix_mult(long s_60, long[][] m_61) {
        long[][] res_62 = new long[][]{};
        long i_63 = 0;
        while ((i_63 < m_61.Length)) {
            long[] row_64 = new long[]{};
            long j_65 = 0;
            while ((j_65 < m_61[(int)(i_63)].Length)) {
                row_64 = (Enumerable.ToArray(Enumerable.Append(row_64, Program.mod36((s_60 * m_61[(int)(i_63)][(int)(j_65)])))));
                j_65 = (j_65 + 1);
            }
            res_62 = (Enumerable.ToArray(Enumerable.Append(res_62, row_64)));
            i_63 = (i_63 + 1);
        };
        return res_62;
    }

    public static long[][] adjugate(long[][] m_66) {
        long[][] cof_67 = Program.cofactor_matrix(m_66);
        long n_68 = cof_67.Length;
        long[][] res_69 = new long[][]{};
        long i_70 = 0;
        while ((i_70 < n_68)) {
            long[] row_71 = new long[]{};
            long j_72 = 0;
            while ((j_72 < n_68)) {
                row_71 = (Enumerable.ToArray(Enumerable.Append(row_71, cof_67[(int)(j_72)][(int)(i_70)])));
                j_72 = (j_72 + 1);
            }
            res_69 = (Enumerable.ToArray(Enumerable.Append(res_69, row_71)));
            i_70 = (i_70 + 1);
        };
        return res_69;
    }

    public static long[] multiply_matrix_vector(long[][] m_73, long[] v_74) {
        long n_75 = m_73.Length;
        long[] res_76 = new long[]{};
        long i_77 = 0;
        while ((i_77 < n_75)) {
            long sum_78 = 0;
            long j_79 = 0;
            while ((j_79 < n_75)) {
                sum_78 = (sum_78 + (m_73[(int)(i_77)][(int)(j_79)] * v_74[(int)(j_79)]));
                j_79 = (j_79 + 1);
            }
            res_76 = (Enumerable.ToArray(Enumerable.Append(res_76, Program.mod36(sum_78))));
            i_77 = (i_77 + 1);
        };
        return res_76;
    }

    public static long[][] inverse_key(long[][] key_80) {
        long det_val_81 = Program.determinant(key_80);
        long det_mod_82 = Program.mod36(det_val_81);
        long det_inv_83 = 0;
        long i_84 = 0;
        while ((i_84 < 36)) {
            if ((((det_mod_82 * i_84) % 36) == 1)) {
                det_inv_83 = i_84;
                break;
            }
            i_84 = (i_84 + 1);
        };
        long[][] adj_85 = Program.adjugate(key_80);
        long[][] tmp_86 = Program.scalar_matrix_mult(det_inv_83, adj_85);
        long[][] res_87 = Program.matrix_mod(tmp_86);
        return res_87;
    }

    public static string hill_encrypt(long[][] key_88, string text_89) {
        long break_key_90 = key_88.Length;
        string processed_91 = Program.process_text(text_89, break_key_90);
        string encrypted_92 = "";
        long i_93 = 0;
        while ((i_93 < processed_91.Length)) {
            long[] vec_94 = new long[]{};
            long j_95 = 0;
            while ((j_95 < break_key_90)) {
                vec_94 = (Enumerable.ToArray(Enumerable.Append(vec_94, Program.replace_letters(processed_91.Substring((int)((i_93 + j_95)), 1)))));
                j_95 = (j_95 + 1);
            }
            long[] enc_vec_96 = Program.multiply_matrix_vector(key_88, vec_94);
            long k_97 = 0;
            while ((k_97 < break_key_90)) {
                encrypted_92 = (encrypted_92 + Program.replace_digits(enc_vec_96[(int)(k_97)]));
                k_97 = (k_97 + 1);
            }
            i_93 = (i_93 + break_key_90);
        };
        return encrypted_92;
    }

    public static string hill_decrypt(long[][] key_98, string text_99) {
        long break_key_100 = key_98.Length;
        long[][] decrypt_key_101 = Program.inverse_key(key_98);
        string processed_102 = Program.process_text(text_99, break_key_100);
        string decrypted_103 = "";
        long i_104 = 0;
        while ((i_104 < processed_102.Length)) {
            long[] vec_105 = new long[]{};
            long j_106 = 0;
            while ((j_106 < break_key_100)) {
                vec_105 = (Enumerable.ToArray(Enumerable.Append(vec_105, Program.replace_letters(processed_102.Substring((int)((i_104 + j_106)), 1)))));
                j_106 = (j_106 + 1);
            }
            long[] dec_vec_107 = Program.multiply_matrix_vector(decrypt_key_101, vec_105);
            long k_108 = 0;
            while ((k_108 < break_key_100)) {
                decrypted_103 = (decrypted_103 + Program.replace_digits(dec_vec_107[(int)(k_108)]));
                k_108 = (k_108 + 1);
            }
            i_104 = (i_104 + break_key_100);
        };
        return decrypted_103;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.hill_encrypt(key_109, "testing hill cipher")));
            Console.WriteLine(Program._fmtTop(Program.hill_encrypt(key_109, "hello")));
            Console.WriteLine(Program._fmtTop(Program.hill_decrypt(key_109, "WHXYJOLM9C6XT085LL")));
            Console.WriteLine(Program._fmtTop(Program.hill_decrypt(key_109, "85FF00")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
