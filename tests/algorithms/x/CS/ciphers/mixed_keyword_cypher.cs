// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string UPPER_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string LOWER_1 = "abcdefghijklmnopqrstuvwxyz";
    public static string to_upper(string s_2) {
        string res_3 = "";
        long i_4 = 0;
        while ((i_4 < s_2.Length)) {
            string ch_5 = s_2.Substring((int)(i_4), 1);
            long j_6 = 0;
            bool found_7 = false;
            while ((j_6 < 26)) {
                if ((ch_5 == LOWER_1.Substring((int)(j_6), 1))) {
                    res_3 = (res_3 + UPPER_0.Substring((int)(j_6), 1));
                    found_7 = true;
                    break;
                }
                j_6 = (j_6 + 1);
            }
            if ((found_7 == false)) {
                res_3 = (res_3 + ch_5);
            }
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static bool contains(string[] xs_8, string x_9) {
        long i_10 = 0;
        while ((i_10 < xs_8.Length)) {
            if ((xs_8[(int)(i_10)] == x_9)) {
                return true;
            }
            i_10 = (i_10 + 1);
        };
        return false;
    }

    public static bool contains_char(string s_11, string ch_12) {
        long i_13 = 0;
        while ((i_13 < s_11.Length)) {
            if ((s_11.Substring((int)(i_13), 1) == ch_12)) {
                return true;
            }
            i_13 = (i_13 + 1);
        };
        return false;
    }

    public static string get_value(string[] keys_14, string[] values_15, string key_16) {
        long i_17 = 0;
        while ((i_17 < keys_14.Length)) {
            if ((keys_14[(int)(i_17)] == key_16)) {
                return values_15[(int)(i_17)];
            }
            i_17 = (i_17 + 1);
        };
        return (string)null;
    }

    public static void print_mapping(string[] keys_18, string[] values_19) {
        string s_20 = "{";
        long i_21 = 0;
        while ((i_21 < keys_18.Length)) {
            s_20 = (((((s_20 + "'") + keys_18[(int)(i_21)]) + "': '") + values_19[(int)(i_21)]) + "'");
            if (((i_21 + 1) < keys_18.Length)) {
                s_20 = (s_20 + ", ");
            }
            i_21 = (i_21 + 1);
        };
        s_20 = (s_20 + "}");
        Console.WriteLine(Program._fmtTop(s_20));
    }

    public static string mixed_keyword(string keyword_22, string plaintext_23, bool verbose_24) {
        string alphabet_25 = UPPER_0;
        string keyword_u_26 = Program.to_upper(keyword_22);
        string plaintext_u_27 = Program.to_upper(plaintext_23);
        string[] unique_28 = new string[]{};
        long i_29 = 0;
        while ((i_29 < keyword_u_26.Length)) {
            string ch_30 = keyword_u_26.Substring((int)(i_29), 1);
            if ((Program.contains_char(alphabet_25, ch_30) && (Program.contains(unique_28, ch_30) == false))) {
                unique_28 = (Enumerable.ToArray(Enumerable.Append(unique_28, ch_30)));
            }
            i_29 = (i_29 + 1);
        };
        long num_unique_31 = unique_28.Length;
        string[] shifted_32 = new string[]{};
        i_29 = 0;
        while ((i_29 < unique_28.Length)) {
            shifted_32 = (Enumerable.ToArray(Enumerable.Append(shifted_32, unique_28[(int)(i_29)])));
            i_29 = (i_29 + 1);
        };
        i_29 = 0;
        while ((i_29 < alphabet_25.Length)) {
            string ch_33 = alphabet_25.Substring((int)(i_29), 1);
            if ((Program.contains(unique_28, ch_33) == false)) {
                shifted_32 = (Enumerable.ToArray(Enumerable.Append(shifted_32, ch_33)));
            }
            i_29 = (i_29 + 1);
        };
        string[][] modified_34 = new string[][]{};
        long k_35 = 0;
        while ((k_35 < shifted_32.Length)) {
            string[] row_36 = new string[]{};
            long r_37 = 0;
            while (((r_37 < num_unique_31) && ((k_35 + r_37) < shifted_32.Length))) {
                row_36 = (Enumerable.ToArray(Enumerable.Append(row_36, shifted_32[(int)((k_35 + r_37))])));
                r_37 = (r_37 + 1);
            }
            modified_34 = (Enumerable.ToArray(Enumerable.Append(modified_34, row_36)));
            k_35 = (k_35 + num_unique_31);
        };
        string[] keys_38 = new string[]{};
        string[] values_39 = new string[]{};
        long column_40 = 0;
        long letter_index_41 = 0;
        while ((column_40 < num_unique_31)) {
            long row_idx_42 = 0;
            while ((row_idx_42 < modified_34.Length)) {
                string[] row_43 = modified_34[(int)(row_idx_42)];
                if ((row_43.Length <= column_40)) {
                    break;
                }
                keys_38 = (Enumerable.ToArray(Enumerable.Append(keys_38, alphabet_25.Substring((int)(letter_index_41), 1))));
                values_39 = (Enumerable.ToArray(Enumerable.Append(values_39, row_43[(int)(column_40)])));
                letter_index_41 = (letter_index_41 + 1);
                row_idx_42 = (row_idx_42 + 1);
            }
            column_40 = (column_40 + 1);
        };
        if (verbose_24) {
            Program.print_mapping(keys_38, values_39);
        };
        string result_44 = "";
        i_29 = 0;
        while ((i_29 < plaintext_u_27.Length)) {
            string ch_45 = plaintext_u_27.Substring((int)(i_29), 1);
            string mapped_46 = Program.get_value(keys_38, values_39, ch_45);
            if ((mapped_46 == null)) {
                result_44 = (result_44 + ch_45);
            } else {
                result_44 = (result_44 + mapped_46);
            }
            i_29 = (i_29 + 1);
        };
        return result_44;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.mixed_keyword("college", "UNIVERSITY", true)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
