// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string encrypt(string input_string_0, long key_1) {
        if ((key_1 <= 0)) {
            throw new Exception("Height of grid can't be 0 or negative");
        };
        if (((key_1 == 1) || (input_string_0.Length <= key_1))) {
            return input_string_0;
        };
        long lowest_2 = (key_1 - 1);
        string[][] temp_grid_3 = new string[][]{};
        long i_4 = 0;
        while ((i_4 < key_1)) {
            temp_grid_3 = (Enumerable.ToArray(Enumerable.Append(temp_grid_3, new string[]{})));
            i_4 = (i_4 + 1);
        };
        long position_5 = 0;
        while ((position_5 < input_string_0.Length)) {
            long num_6 = (position_5 % (lowest_2 * 2));
            long alt_7 = ((lowest_2 * 2) - num_6);
            if ((num_6 > alt_7)) {
                num_6 = alt_7;
            }
            string[] row_8 = temp_grid_3[(int)(num_6)];
            row_8 = (Enumerable.ToArray(Enumerable.Append(row_8, _substr(input_string_0, position_5, (position_5 + 1)))));
            temp_grid_3[num_6] = row_8;
            position_5 = (position_5 + 1);
        };
        string output_9 = "";
        i_4 = 0;
        while ((i_4 < key_1)) {
            string[] row_10 = temp_grid_3[(int)(i_4)];
            long j_11 = 0;
            while ((j_11 < row_10.Length)) {
                output_9 = (output_9 + row_10[(int)(j_11)]);
                j_11 = (j_11 + 1);
            }
            i_4 = (i_4 + 1);
        };
        return output_9;
    }

    public static string decrypt(string input_string_12, long key_13) {
        if ((key_13 <= 0)) {
            throw new Exception("Height of grid can't be 0 or negative");
        };
        if ((key_13 == 1)) {
            return input_string_12;
        };
        long lowest_14 = (key_13 - 1);
        long[] counts_15 = new long[]{};
        long i_16 = 0;
        while ((i_16 < key_13)) {
            counts_15 = (Enumerable.ToArray(Enumerable.Append(counts_15, 0)));
            i_16 = (i_16 + 1);
        };
        long pos_17 = 0;
        while ((pos_17 < input_string_12.Length)) {
            long num_18 = (pos_17 % (lowest_14 * 2));
            long alt_19 = ((lowest_14 * 2) - num_18);
            if ((num_18 > alt_19)) {
                num_18 = alt_19;
            }
            counts_15[num_18] = (counts_15[(int)(num_18)] + 1);
            pos_17 = (pos_17 + 1);
        };
        string[][] grid_20 = new string[][]{};
        long counter_21 = 0;
        i_16 = 0;
        while ((i_16 < key_13)) {
            long length_22 = counts_15[(int)(i_16)];
            string slice_23 = _substr(input_string_12, counter_21, (counter_21 + length_22));
            string[] row_24 = new string[]{};
            long j_25 = 0;
            while ((j_25 < slice_23.Length)) {
                row_24 = (Enumerable.ToArray(Enumerable.Append(row_24, slice_23.Substring((int)(j_25), 1))));
                j_25 = (j_25 + 1);
            }
            grid_20 = (Enumerable.ToArray(Enumerable.Append(grid_20, row_24)));
            counter_21 = (counter_21 + length_22);
            i_16 = (i_16 + 1);
        };
        long[] indices_26 = new long[]{};
        i_16 = 0;
        while ((i_16 < key_13)) {
            indices_26 = (Enumerable.ToArray(Enumerable.Append(indices_26, 0)));
            i_16 = (i_16 + 1);
        };
        string output_27 = "";
        pos_17 = 0;
        while ((pos_17 < input_string_12.Length)) {
            long num_28 = (pos_17 % (lowest_14 * 2));
            long alt_29 = ((lowest_14 * 2) - num_28);
            if ((num_28 > alt_29)) {
                num_28 = alt_29;
            }
            output_27 = (output_27 + grid_20[(int)(num_28)][(int)(indices_26[(int)(num_28)])]);
            indices_26[num_28] = (indices_26[(int)(num_28)] + 1);
            pos_17 = (pos_17 + 1);
        };
        return output_27;
    }

    public static Dictionary<long, string> bruteforce(string input_string_30) {
        Dictionary<long, string> results_31 = new Dictionary<long, string>{};
        long key_guess_32 = 1;
        while ((key_guess_32 < input_string_30.Length)) {
            results_31[key_guess_32] = Program.decrypt(input_string_30, key_guess_32);
            key_guess_32 = (key_guess_32 + 1);
        };
        return results_31;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.encrypt("Hello World", 4)));
            Console.WriteLine(Program._fmtTop(Program.decrypt("HWe olordll", 4)));
            Dictionary<long, string> bf_33 = Program.bruteforce("HWe olordll");
            Console.WriteLine(Program._fmtTop((bf_33.ContainsKey(4) ? bf_33[4] : "")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
