// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string B32_CHARSET_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
    public static long indexOfChar(string s_1, string ch_2) {
        long i_3 = 0;
        while ((i_3 < s_1.Length)) {
            if ((s_1.Substring((int)(i_3), 1) == ch_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static long ord(string ch_4) {
        string upper_5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_6 = "abcdefghijklmnopqrstuvwxyz";
        string digits_7 = "0123456789";
        long idx_8 = Program.indexOfChar(upper_5, ch_4);
        if ((idx_8 >= 0)) {
            return (65 + idx_8);
        };
        idx_8 = Program.indexOfChar(lower_6, ch_4);
        if ((idx_8 >= 0)) {
            return (97 + idx_8);
        };
        idx_8 = Program.indexOfChar(digits_7, ch_4);
        if ((idx_8 >= 0)) {
            return (48 + idx_8);
        };
        if ((ch_4 == " ")) {
            return 32;
        };
        if ((ch_4 == "!")) {
            return 33;
        };
        return 0;
    }

    public static string chr(long code_9) {
        string upper_10 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_11 = "abcdefghijklmnopqrstuvwxyz";
        string digits_12 = "0123456789";
        if ((code_9 == 32)) {
            return " ";
        };
        if ((code_9 == 33)) {
            return "!";
        };
        long idx_13 = (code_9 - 65);
        if (((idx_13 >= 0) && (idx_13 < upper_10.Length))) {
            return upper_10.Substring((int)(idx_13), 1);
        };
        idx_13 = (code_9 - 97);
        if (((idx_13 >= 0) && (idx_13 < lower_11.Length))) {
            return lower_11.Substring((int)(idx_13), 1);
        };
        idx_13 = (code_9 - 48);
        if (((idx_13 >= 0) && (idx_13 < digits_12.Length))) {
            return digits_12.Substring((int)(idx_13), 1);
        };
        return "";
    }

    public static string repeat(string s_14, long n_15) {
        string out_16 = "";
        long i_17 = 0;
        while ((i_17 < n_15)) {
            out_16 = (out_16 + s_14);
            i_17 = (i_17 + 1);
        };
        return out_16;
    }

    public static string to_binary(long n_18, long bits_19) {
        long v_20 = n_18;
        string out_21 = "";
        long i_22 = 0;
        while ((i_22 < bits_19)) {
            out_21 = (_fmtStr((v_20 % 2)) + out_21);
            v_20 = (v_20 / 2);
            i_22 = (i_22 + 1);
        };
        return out_21;
    }

    public static long binary_to_int(string bits_23) {
        long n_24 = 0;
        long i_25 = 0;
        while ((i_25 < bits_23.Length)) {
            n_24 = (n_24 * 2);
            if ((bits_23.Substring((int)(i_25), 1) == "1")) {
                n_24 = (n_24 + 1);
            }
            i_25 = (i_25 + 1);
        };
        return n_24;
    }

    public static string base32_encode(string data_26) {
        string binary_data_27 = "";
        long i_28 = 0;
        while ((i_28 < data_26.Length)) {
            binary_data_27 = (binary_data_27 + Program.to_binary(Program.ord(data_26.Substring((int)(i_28), 1)), 8));
            i_28 = (i_28 + 1);
        };
        long remainder_29 = (binary_data_27.Length % 5);
        if ((remainder_29 != 0)) {
            binary_data_27 = (binary_data_27 + Program.repeat("0", (5 - remainder_29)));
        };
        string b32_result_30 = "";
        long j_31 = 0;
        while ((j_31 < binary_data_27.Length)) {
            string chunk_32 = _substr(binary_data_27, j_31, (j_31 + 5));
            long index_33 = Program.binary_to_int(chunk_32);
            b32_result_30 = (b32_result_30 + B32_CHARSET_0.Substring((int)(index_33), 1));
            j_31 = (j_31 + 5);
        };
        long rem_34 = (b32_result_30.Length % 8);
        if ((rem_34 != 0)) {
            b32_result_30 = (b32_result_30 + Program.repeat("=", (8 - rem_34)));
        };
        return b32_result_30;
    }

    public static string base32_decode(string data_35) {
        string clean_36 = "";
        long i_37 = 0;
        while ((i_37 < data_35.Length)) {
            string ch_38 = data_35.Substring((int)(i_37), 1);
            if ((ch_38 != "=")) {
                clean_36 = (clean_36 + ch_38);
            }
            i_37 = (i_37 + 1);
        };
        string binary_chunks_39 = "";
        i_37 = 0;
        while ((i_37 < clean_36.Length)) {
            long idx_40 = Program.indexOfChar(B32_CHARSET_0, clean_36.Substring((int)(i_37), 1));
            binary_chunks_39 = (binary_chunks_39 + Program.to_binary(idx_40, 5));
            i_37 = (i_37 + 1);
        };
        string result_41 = "";
        long j_42 = 0;
        while (((j_42 + 8) <= binary_chunks_39.Length)) {
            string byte_bits_43 = _substr(binary_chunks_39, j_42, (j_42 + 8));
            long code_44 = Program.binary_to_int(byte_bits_43);
            result_41 = (result_41 + Program.chr(code_44));
            j_42 = (j_42 + 8);
        };
        return result_41;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.base32_encode("Hello World!")));
            Console.WriteLine(Program._fmtTop(Program.base32_encode("123456")));
            Console.WriteLine(Program._fmtTop(Program.base32_encode("some long complex string")));
            Console.WriteLine(Program._fmtTop(Program.base32_decode("JBSWY3DPEBLW64TMMQQQ====")));
            Console.WriteLine(Program._fmtTop(Program.base32_decode("GEZDGNBVGY======")));
            Console.WriteLine(Program._fmtTop(Program.base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
