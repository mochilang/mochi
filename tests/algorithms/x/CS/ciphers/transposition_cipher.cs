// Generated by Mochi 0.10.59 on 2025-08-06 21:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string join_strings(string[] xs_0) {
        string res_1 = "";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            res_1 = (res_1 + xs_0[(int)(i_2)]);
            i_2 = (i_2 + 1);
        };
        return res_1;
    }

    public static string encrypt_message(long key_3, string message_4) {
        string result_5 = "";
        long col_6 = 0;
        while ((col_6 < key_3)) {
            long pointer_7 = col_6;
            while ((pointer_7 < message_4.Length)) {
                result_5 = (result_5 + _substr(message_4, pointer_7, (pointer_7 + 1)));
                pointer_7 = (pointer_7 + key_3);
            }
            col_6 = (col_6 + 1);
        };
        return result_5;
    }

    public static string decrypt_message(long key_8, string message_9) {
        long num_cols_10 = (((message_9.Length + key_8) - 1) / key_8);
        long num_rows_11 = key_8;
        long num_shaded_boxes_12 = ((num_cols_10 * num_rows_11) - message_9.Length);
        string[] plain_text_13 = new string[]{};
        long i_14 = 0;
        while ((i_14 < num_cols_10)) {
            plain_text_13 = (Enumerable.ToArray(Enumerable.Append(plain_text_13, "")));
            i_14 = (i_14 + 1);
        };
        long col_15 = 0;
        long row_16 = 0;
        long index_17 = 0;
        while ((index_17 < message_9.Length)) {
            plain_text_13[col_15] = (plain_text_13[(int)(col_15)] + _substr(message_9, index_17, (index_17 + 1)));
            col_15 = (col_15 + 1);
            if (((col_15 == num_cols_10) || ((col_15 == (num_cols_10 - 1)) && (row_16 >= (num_rows_11 - num_shaded_boxes_12))))) {
                col_15 = 0;
                row_16 = (row_16 + 1);
            }
            index_17 = (index_17 + 1);
        };
        return Program.join_strings(plain_text_13);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop("Enter message: "));
        string message_18 = _input();
        long max_key_19 = (message_18.Length - 1);
        Console.WriteLine(Program._fmtTop((("Enter key [2-" + _fmtStr(max_key_19)) + "]: ")));
        long key_20 = Convert.ToInt64(_input());
        Console.WriteLine(Program._fmtTop("Encryption/Decryption [e/d]: "));
        string mode_21 = _input();
        string text_22 = "";
        string first_23 = _substr(mode_21, 0, 1);
        if (((first_23 == "e") || (first_23 == "E"))) {
            text_22 = Program.encrypt_message(key_20, message_18);
        } else if (((first_23 == "d") || (first_23 == "D"))) {
            text_22 = Program.decrypt_message(key_20, message_18);
        };
        Console.WriteLine(Program._fmtTop((("Output:\n" + text_22) + "|")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
