// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static Dictionary<string, string> MORSE_CODE_DICT_0 = new Dictionary<string, string>{{"A", ".-"}, {"B", "-..."}, {"C", "-.-."}, {"D", "-.."}, {"E", "."}, {"F", "..-."}, {"G", "--."}, {"H", "...."}, {"I", ".."}, {"J", ".---"}, {"K", "-.-"}, {"L", ".-.."}, {"M", "--"}, {"N", "-."}, {"O", "---"}, {"P", ".--."}, {"Q", "--.-"}, {"R", ".-."}, {"S", "..."}, {"T", "-"}, {"U", "..-"}, {"V", "...-"}, {"W", ".--"}, {"X", "-..-"}, {"Y", "-.--"}, {"Z", "--.."}, {" ", ""}};
    static string[] MORSE_COMBINATIONS_1 = new string[]{"...", "..-", "..x", ".-.", ".--", ".-x", ".x.", ".x-", ".xx", "-..", "-.-", "-.x", "--.", "---", "--x", "-x.", "-x-", "-xx", "x..", "x.-", "x.x", "x-.", "x--", "x-x", "xx.", "xx-", "xxx"};
    static Dictionary<string, string> REVERSE_DICT_2 = new Dictionary<string, string>{{".-", "A"}, {"-...", "B"}, {"-.-.", "C"}, {"-..", "D"}, {".", "E"}, {"..-.", "F"}, {"--.", "G"}, {"....", "H"}, {"..", "I"}, {".---", "J"}, {"-.-", "K"}, {".-..", "L"}, {"--", "M"}, {"-.", "N"}, {"---", "O"}, {".--.", "P"}, {"--.-", "Q"}, {".-.", "R"}, {"...", "S"}, {"-", "T"}, {"..-", "U"}, {"...-", "V"}, {".--", "W"}, {"-..-", "X"}, {"-.--", "Y"}, {"--..", "Z"}, {"", " "}};
    static string plaintext_45 = "defend the east";
    public static string encodeToMorse(string plaintext_3) {
        string morse_4 = "";
        long i_5 = 0;
        while ((i_5 < plaintext_3.Length)) {
            string ch_6 = _substr(plaintext_3, i_5, (i_5 + 1)).ToUpper();
            string code_7 = "";
            if ((MORSE_CODE_DICT_0.ContainsKey(ch_6))) {
                code_7 = (MORSE_CODE_DICT_0.ContainsKey(ch_6) ? MORSE_CODE_DICT_0[ch_6] : "");
            }
            if ((i_5 > 0)) {
                morse_4 = (morse_4 + "x");
            }
            morse_4 = (morse_4 + code_7);
            i_5 = (i_5 + 1);
        };
        return morse_4;
    }

    public static string encryptFractionatedMorse(string plaintext_8, string key_9) {
        string morseCode_10 = Program.encodeToMorse(plaintext_8);
        string combinedKey_11 = (key_9.ToUpper() + "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        string dedupKey_12 = "";
        long i_13 = 0;
        while ((i_13 < combinedKey_11.Length)) {
            string ch_14 = _substr(combinedKey_11, i_13, (i_13 + 1));
            if ((!(dedupKey_12.Contains(ch_14)))) {
                dedupKey_12 = (dedupKey_12 + ch_14);
            }
            i_13 = (i_13 + 1);
        };
        long paddingLength_15 = (3 - (morseCode_10.Length % 3));
        long p_16 = 0;
        while ((p_16 < paddingLength_15)) {
            morseCode_10 = (morseCode_10 + "x");
            p_16 = (p_16 + 1);
        };
        Dictionary<string, string> dict_17 = new Dictionary<string, string>{};
        long j_18 = 0;
        while ((j_18 < 26)) {
            string combo_19 = MORSE_COMBINATIONS_1[(int)(j_18)];
            string letter_20 = _substr(dedupKey_12, j_18, (j_18 + 1));
            dict_17[combo_19] = letter_20;
            j_18 = (j_18 + 1);
        };
        dict_17["xxx"] = "";
        string encrypted_21 = "";
        long k_22 = 0;
        while ((k_22 < morseCode_10.Length)) {
            string group_23 = _substr(morseCode_10, k_22, (k_22 + 3));
            encrypted_21 = (encrypted_21 + (dict_17.ContainsKey(group_23) ? dict_17[group_23] : ""));
            k_22 = (k_22 + 3);
        };
        return encrypted_21;
    }

    public static string decryptFractionatedMorse(string ciphertext_24, string key_25) {
        string combinedKey_26 = (key_25.ToUpper() + "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        string dedupKey_27 = "";
        long i_28 = 0;
        while ((i_28 < combinedKey_26.Length)) {
            string ch_29 = _substr(combinedKey_26, i_28, (i_28 + 1));
            if ((!(dedupKey_27.Contains(ch_29)))) {
                dedupKey_27 = (dedupKey_27 + ch_29);
            }
            i_28 = (i_28 + 1);
        };
        Dictionary<string, string> inv_30 = new Dictionary<string, string>{};
        long j_31 = 0;
        while ((j_31 < 26)) {
            string letter_32 = _substr(dedupKey_27, j_31, (j_31 + 1));
            inv_30[letter_32] = MORSE_COMBINATIONS_1[(int)(j_31)];
            j_31 = (j_31 + 1);
        };
        string morse_33 = "";
        long k_34 = 0;
        while ((k_34 < ciphertext_24.Length)) {
            string ch_35 = _substr(ciphertext_24, k_34, (k_34 + 1));
            if ((inv_30.ContainsKey(ch_35))) {
                morse_33 = (morse_33 + (inv_30.ContainsKey(ch_35) ? inv_30[ch_35] : ""));
            }
            k_34 = (k_34 + 1);
        };
        string[] codes_36 = new string[]{};
        string current_37 = "";
        long m_38 = 0;
        while ((m_38 < morse_33.Length)) {
            string ch_39 = _substr(morse_33, m_38, (m_38 + 1));
            if ((ch_39 == "x")) {
                codes_36 = (Enumerable.ToArray(Enumerable.Append(codes_36, current_37)));
                current_37 = "";
            } else {
                current_37 = (current_37 + ch_39);
            }
            m_38 = (m_38 + 1);
        };
        codes_36 = (Enumerable.ToArray(Enumerable.Append(codes_36, current_37)));
        string decrypted_40 = "";
        long idx_41 = 0;
        while ((idx_41 < codes_36.Length)) {
            string code_42 = codes_36[(int)(idx_41)];
            decrypted_40 = (decrypted_40 + (REVERSE_DICT_2.ContainsKey(code_42) ? REVERSE_DICT_2[code_42] : ""));
            idx_41 = (idx_41 + 1);
        };
        long start_43 = 0;
        while (true) {
            if ((start_43 < decrypted_40.Length)) {
                if ((_substr(decrypted_40, start_43, (start_43 + 1)) == " ")) {
                    start_43 = (start_43 + 1);
                    continue;
                }
            }
            break;
        };
        long end_44 = decrypted_40.Length;
        while (true) {
            if ((end_44 > start_43)) {
                if ((_substr(decrypted_40, (end_44 - 1), end_44) == " ")) {
                    end_44 = (end_44 - 1);
                    continue;
                }
            }
            break;
        };
        return _substr(decrypted_40, start_43, end_44);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Plain Text:"), Program._fmtTop(plaintext_45)}));
            string key_46 = "ROUNDTABLE";
            string ciphertext_47 = Program.encryptFractionatedMorse(plaintext_45, key_46);
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Encrypted:"), Program._fmtTop(ciphertext_47)}));
            string decrypted_48 = Program.decryptFractionatedMorse(ciphertext_47, key_46);
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("Decrypted:"), Program._fmtTop(decrypted_48)}));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
