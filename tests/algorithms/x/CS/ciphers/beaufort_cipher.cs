// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string ALPHABET_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string message_21 = "THE GERMAN ATTACK";
    static string key_22 = "SECRET";
    static string key_new_23 = Program.generate_key(message_21, key_22);
    static string encrypted_24 = Program.cipher_text(message_21, key_new_23);
    public static long index_of(string ch_1) {
        for (var i_2 = 0; i_2 < ALPHABET_0.Length; i_2++) {
            if ((ALPHABET_0.Substring((int)(i_2), 1) == ch_1)) {
                return i_2;
            }
        };
        return -1;
    }

    public static string generate_key(string message_3, string key_4) {
        string key_new_5 = key_4;
        long i_6 = 0;
        while ((key_new_5.Length < message_3.Length)) {
            key_new_5 = (key_new_5 + key_4.Substring((int)(i_6), 1));
            i_6 = (i_6 + 1);
            if ((i_6 == key_4.Length)) {
                i_6 = 0;
            }
        };
        return key_new_5;
    }

    public static string cipher_text(string message_7, string key_new_8) {
        string res_9 = "";
        long i_10 = 0;
        for (var idx_11 = 0; idx_11 < message_7.Length; idx_11++) {
            string ch_12 = message_7.Substring((int)(idx_11), 1);
            if ((ch_12 == " ")) {
                res_9 = (res_9 + " ");
            } else {
                long x_13 = (((Program.index_of(ch_12) - Program.index_of(key_new_8.Substring((int)(i_10), 1))) + 26) % 26);
                i_10 = (i_10 + 1);
                res_9 = (res_9 + ALPHABET_0.Substring((int)(x_13), 1));
            }
        };
        return res_9;
    }

    public static string original_text(string cipher_14, string key_new_15) {
        string res_16 = "";
        long i_17 = 0;
        for (var idx_18 = 0; idx_18 < cipher_14.Length; idx_18++) {
            string ch_19 = cipher_14.Substring((int)(idx_18), 1);
            if ((ch_19 == " ")) {
                res_16 = (res_16 + " ");
            } else {
                long x_20 = (((Program.index_of(ch_19) + Program.index_of(key_new_15.Substring((int)(i_17), 1))) + 26) % 26);
                i_17 = (i_17 + 1);
                res_16 = (res_16 + ALPHABET_0.Substring((int)(x_20), 1));
            }
        };
        return res_16;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Encrypted Text = " + encrypted_24)));
            Console.WriteLine(Program._fmtTop(("Original Text = " + Program.original_text(encrypted_24, key_new_23))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
