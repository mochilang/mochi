// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 1;
    static string ascii_chars_4 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    public static void set_seed(long s_1) {
        seed_0 = s_1;
    }

    public static long randint(long a_2, long b_3) {
        seed_0 = (((seed_0 * 1103515245) + 12345) % 2147483648L);
        return ((seed_0 % ((b_3 - a_2) + 1)) + a_2);
    }

    public static long ord(string ch_5) {
        long i_6 = 0;
        while ((i_6 < ascii_chars_4.Length)) {
            if ((ascii_chars_4.Substring((int)(i_6), 1) == ch_5)) {
                return (32 + i_6);
            }
            i_6 = (i_6 + 1);
        };
        return 0;
    }

    public static string chr(long code_7) {
        if (((code_7 < 32) || (code_7 > 126))) {
            return "";
        };
        return ascii_chars_4.Substring((int)((code_7 - 32)), 1);
    }

    public static Dictionary<string, long[]> encrypt(string text_8) {
        long[] cipher_9 = new long[]{};
        long[] key_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < text_8.Length)) {
            long p_12 = Program.ord(text_8.Substring((int)(i_11), 1));
            long k_13 = Program.randint(1, 300);
            long c_14 = ((p_12 + k_13) * k_13);
            cipher_9 = (Enumerable.ToArray(Enumerable.Append(cipher_9, c_14)));
            key_10 = (Enumerable.ToArray(Enumerable.Append(key_10, k_13)));
            i_11 = (i_11 + 1);
        };
        Dictionary<string, long[]> res_15 = new Dictionary<string, long[]>{};
        res_15["cipher"] = cipher_9;
        res_15["key"] = key_10;
        return res_15;
    }

    public static string decrypt(long[] cipher_16, long[] key_17) {
        string plain_18 = "";
        long i_19 = 0;
        while ((i_19 < key_17.Length)) {
            long p_20 = ((cipher_16[(int)(i_19)] - (key_17[(int)(i_19)] * key_17[(int)(i_19)])) / key_17[(int)(i_19)]);
            plain_18 = (plain_18 + Program.chr(p_20));
            i_19 = (i_19 + 1);
        };
        return plain_18;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.set_seed(1);
            Dictionary<string, long[]> res_21 = Program.encrypt("Hello");
            long[] cipher_22 = (res_21.ContainsKey("cipher") ? res_21["cipher"] : null);
            long[] key_23 = (res_21.ContainsKey("key") ? res_21["key"] : null);
            Console.WriteLine(Program._fmtTop(cipher_22));
            Console.WriteLine(Program._fmtTop(key_23));
            Console.WriteLine(Program._fmtTop(Program.decrypt(cipher_22, key_23)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
