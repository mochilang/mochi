// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string LOWER_0 = "abcdefghijklmnopqrstuvwxyz";
    static string UPPER_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static string to_lowercase(string s_2) {
        string res_3 = "";
        long i_4 = 0;
        while ((i_4 < s_2.Length)) {
            string c_5 = s_2.Substring((int)(i_4), 1);
            long j_6 = 0;
            bool found_7 = false;
            while ((j_6 < 26)) {
                if ((c_5 == UPPER_1.Substring((int)(j_6), 1))) {
                    res_3 = (res_3 + LOWER_0.Substring((int)(j_6), 1));
                    found_7 = true;
                    break;
                }
                j_6 = (j_6 + 1);
            }
            if ((!found_7)) {
                res_3 = (res_3 + c_5);
            }
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static long char_index(string c_8) {
        long i_9 = 0;
        while ((i_9 < 26)) {
            if ((c_8 == LOWER_0.Substring((int)(i_9), 1))) {
                return i_9;
            }
            i_9 = (i_9 + 1);
        };
        return -1;
    }

    public static string index_char(long i_10) {
        return LOWER_0.Substring((int)(i_10), 1);
    }

    public static string encrypt(string plaintext_11, string key_12) {
        if ((plaintext_11.Length == 0)) {
            throw new Exception("plaintext is empty");
        };
        if ((key_12.Length == 0)) {
            throw new Exception("key is empty");
        };
        string full_key_13 = (key_12 + plaintext_11);
        plaintext_11 = Program.to_lowercase(plaintext_11);
        full_key_13 = Program.to_lowercase(full_key_13);
        long p_i_14 = 0;
        long k_i_15 = 0;
        string ciphertext_16 = "";
        while ((p_i_14 < plaintext_11.Length)) {
            string p_char_17 = plaintext_11.Substring((int)(p_i_14), 1);
            long p_idx_18 = Program.char_index(p_char_17);
            if ((p_idx_18 < 0)) {
                ciphertext_16 = (ciphertext_16 + p_char_17);
                p_i_14 = (p_i_14 + 1);
            } else {
                string k_char_19 = full_key_13.Substring((int)(k_i_15), 1);
                long k_idx_20 = Program.char_index(k_char_19);
                if ((k_idx_20 < 0)) {
                    k_i_15 = (k_i_15 + 1);
                } else {
                    long c_idx_21 = ((p_idx_18 + k_idx_20) % 26);
                    ciphertext_16 = (ciphertext_16 + Program.index_char(c_idx_21));
                    k_i_15 = (k_i_15 + 1);
                    p_i_14 = (p_i_14 + 1);
                }
            }
        };
        return ciphertext_16;
    }

    public static string decrypt(string ciphertext_22, string key_23) {
        if ((ciphertext_22.Length == 0)) {
            throw new Exception("ciphertext is empty");
        };
        if ((key_23.Length == 0)) {
            throw new Exception("key is empty");
        };
        string current_key_24 = Program.to_lowercase(key_23);
        long c_i_25 = 0;
        long k_i_26 = 0;
        string plaintext_27 = "";
        while ((c_i_25 < ciphertext_22.Length)) {
            string c_char_28 = ciphertext_22.Substring((int)(c_i_25), 1);
            long c_idx_29 = Program.char_index(c_char_28);
            if ((c_idx_29 < 0)) {
                plaintext_27 = (plaintext_27 + c_char_28);
            } else {
                string k_char_30 = current_key_24.Substring((int)(k_i_26), 1);
                long k_idx_31 = Program.char_index(k_char_30);
                long p_idx_32 = (((c_idx_29 - k_idx_31) + 26) % 26);
                string p_char_33 = Program.index_char(p_idx_32);
                plaintext_27 = (plaintext_27 + p_char_33);
                current_key_24 = (current_key_24 + p_char_33);
                k_i_26 = (k_i_26 + 1);
            }
            c_i_25 = (c_i_25 + 1);
        };
        return plaintext_27;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.encrypt("hello world", "coffee")));
            Console.WriteLine(Program._fmtTop(Program.decrypt("jsqqs avvwo", "coffee")));
            Console.WriteLine(Program._fmtTop(Program.encrypt("coffee is good as python", "TheAlgorithms")));
            Console.WriteLine(Program._fmtTop(Program.decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
