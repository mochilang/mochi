// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string LETTERS_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static long find_char(string s_1, string ch_2) {
        long i_3 = 0;
        while ((i_3 < s_1.Length)) {
            if ((s_1.Substring((int)(i_3), 1) == ch_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return -1;
    }

    public static string encrypt_message(string key_4, string message_5) {
        string chars_a_6 = key_4;
        string chars_b_7 = LETTERS_0;
        string translated_8 = "";
        long i_9 = 0;
        while ((i_9 < message_5.Length)) {
            string symbol_10 = message_5.Substring((int)(i_9), 1);
            string upper_sym_11 = symbol_10.ToUpper();
            long sym_index_12 = Program.find_char(chars_a_6, upper_sym_11);
            if ((sym_index_12 >= 0)) {
                string sub_char_13 = chars_b_7.Substring((int)(sym_index_12), 1);
                if ((symbol_10 == upper_sym_11)) {
                    translated_8 = (translated_8 + sub_char_13.ToUpper());
                } else {
                    translated_8 = (translated_8 + sub_char_13.ToLower());
                }
            } else {
                translated_8 = (translated_8 + symbol_10);
            }
            i_9 = (i_9 + 1);
        };
        return translated_8;
    }

    public static string decrypt_message(string key_14, string message_15) {
        string chars_a_16 = LETTERS_0;
        string chars_b_17 = key_14;
        string translated_18 = "";
        long i_19 = 0;
        while ((i_19 < message_15.Length)) {
            string symbol_20 = message_15.Substring((int)(i_19), 1);
            string upper_sym_21 = symbol_20.ToUpper();
            long sym_index_22 = Program.find_char(chars_a_16, upper_sym_21);
            if ((sym_index_22 >= 0)) {
                string sub_char_23 = chars_b_17.Substring((int)(sym_index_22), 1);
                if ((symbol_20 == upper_sym_21)) {
                    translated_18 = (translated_18 + sub_char_23.ToUpper());
                } else {
                    translated_18 = (translated_18 + sub_char_23.ToLower());
                }
            } else {
                translated_18 = (translated_18 + symbol_20);
            }
            i_19 = (i_19 + 1);
        };
        return translated_18;
    }

    public static void main() {
        string message_24 = "Hello World";
        string key_25 = "QWERTYUIOPASDFGHJKLZXCVBNM";
        string mode_26 = "decrypt";
        string translated_27 = "";
        if ((mode_26 == "encrypt")) {
            translated_27 = Program.encrypt_message(key_25, message_24);
        } else if ((mode_26 == "decrypt")) {
            translated_27 = Program.decrypt_message(key_25, message_24);
        };
        Console.WriteLine(Program._fmtTop(((((("Using the key " + key_25) + ", the ") + mode_26) + "ed message is: ") + translated_27)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
