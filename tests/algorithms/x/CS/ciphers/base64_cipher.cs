// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string B64_CHARSET_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    public static string to_binary(long n_1) {
        if ((n_1 == 0)) {
            return "0";
        };
        long num_2 = n_1;
        string res_3 = "";
        while ((num_2 > 0)) {
            long bit_4 = (num_2 % 2);
            res_3 = (_fmtStr(bit_4) + res_3);
            num_2 = (num_2 / 2);
        };
        return res_3;
    }

    public static string zfill(string s_5, long width_6) {
        string res_7 = s_5;
        long pad_8 = (width_6 - s_5.Length);
        while ((pad_8 > 0)) {
            res_7 = ("0" + res_7);
            pad_8 = (pad_8 - 1);
        };
        return res_7;
    }

    public static long from_binary(string s_9) {
        long i_10 = 0;
        long result_11 = 0;
        while ((i_10 < s_9.Length)) {
            result_11 = (result_11 * 2);
            if ((_substr(s_9, i_10, (i_10 + 1)) == "1")) {
                result_11 = (result_11 + 1);
            }
            i_10 = (i_10 + 1);
        };
        return result_11;
    }

    public static string repeat(string ch_12, long times_13) {
        string res_14 = "";
        long i_15 = 0;
        while ((i_15 < times_13)) {
            res_14 = (res_14 + ch_12);
            i_15 = (i_15 + 1);
        };
        return res_14;
    }

    public static long char_index(string s_16, string c_17) {
        long i_18 = 0;
        while ((i_18 < s_16.Length)) {
            if ((_substr(s_16, i_18, (i_18 + 1)) == c_17)) {
                return i_18;
            }
            i_18 = (i_18 + 1);
        };
        return -1;
    }

    public static string base64_encode(long[] data_19) {
        string bits_20 = "";
        long i_21 = 0;
        while ((i_21 < data_19.Length)) {
            bits_20 = (bits_20 + Program.zfill(Program.to_binary(data_19[(int)(i_21)]), 8));
            i_21 = (i_21 + 1);
        };
        long pad_bits_22 = 0;
        if (((bits_20.Length % 6) != 0)) {
            pad_bits_22 = (6 - (bits_20.Length % 6));
            bits_20 = (bits_20 + Program.repeat("0", pad_bits_22));
        };
        long j_23 = 0;
        string encoded_24 = "";
        while ((j_23 < bits_20.Length)) {
            string chunk_25 = _substr(bits_20, j_23, (j_23 + 6));
            long idx_26 = Program.from_binary(chunk_25);
            encoded_24 = (encoded_24 + _substr(B64_CHARSET_0, idx_26, (idx_26 + 1)));
            j_23 = (j_23 + 6);
        };
        long pad_27 = (pad_bits_22 / 2);
        while ((pad_27 > 0)) {
            encoded_24 = (encoded_24 + "=");
            pad_27 = (pad_27 - 1);
        };
        return encoded_24;
    }

    public static long[] base64_decode(string s_28) {
        long padding_29 = 0;
        int end_30 = s_28.Length;
        while (((end_30 > 0) && (_substr(s_28, (end_30 - 1), end_30) == "="))) {
            padding_29 = (padding_29 + 1);
            end_30 = (end_30 - 1);
        };
        string bits_31 = "";
        long k_32 = 0;
        while ((k_32 < end_30)) {
            string c_33 = _substr(s_28, k_32, (k_32 + 1));
            long idx_34 = Program.char_index(B64_CHARSET_0, c_33);
            bits_31 = (bits_31 + Program.zfill(Program.to_binary(idx_34), 6));
            k_32 = (k_32 + 1);
        };
        if ((padding_29 > 0)) {
            bits_31 = _substr(bits_31, 0, (bits_31.Length - (padding_29 * 2)));
        };
        long[] bytes_35 = new long[]{};
        long m_36 = 0;
        while ((m_36 < bits_31.Length)) {
            long byte_37 = Program.from_binary(_substr(bits_31, m_36, (m_36 + 8)));
            bytes_35 = (Enumerable.ToArray(Enumerable.Append(bytes_35, byte_37)));
            m_36 = (m_36 + 8);
        };
        return bytes_35;
    }

    public static void main() {
        long[] data_38 = new long[]{77, 111, 99, 104, 105};
        string encoded_39 = Program.base64_encode(data_38);
        Console.WriteLine(Program._fmtTop(encoded_39));
        Console.WriteLine(JsonSerializer.Serialize(Program.base64_decode(encoded_39)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
