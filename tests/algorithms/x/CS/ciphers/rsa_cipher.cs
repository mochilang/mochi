// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long BYTE_SIZE_0 = 256;
    public static long pow_int(long base_1, long exp_2) {
        long result_3 = 1;
        long i_4 = 0;
        while ((i_4 < exp_2)) {
            result_3 = (result_3 * base_1);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static long mod_pow(long base_5, long exponent_6, long modulus_7) {
        long result_8 = 1;
        long b_9 = (base_5 % modulus_7);
        long e_10 = exponent_6;
        while ((e_10 > 0)) {
            if (((e_10 % 2) == 1)) {
                result_8 = ((result_8 * b_9) % modulus_7);
            }
            e_10 = (e_10 / 2);
            b_9 = ((b_9 * b_9) % modulus_7);
        };
        return result_8;
    }

    public static long ord(string ch_11) {
        if ((ch_11 == " ")) {
            return 32;
        };
        if ((ch_11 == "a")) {
            return 97;
        };
        if ((ch_11 == "b")) {
            return 98;
        };
        if ((ch_11 == "c")) {
            return 99;
        };
        if ((ch_11 == "d")) {
            return 100;
        };
        if ((ch_11 == "e")) {
            return 101;
        };
        if ((ch_11 == "f")) {
            return 102;
        };
        if ((ch_11 == "g")) {
            return 103;
        };
        if ((ch_11 == "h")) {
            return 104;
        };
        if ((ch_11 == "i")) {
            return 105;
        };
        if ((ch_11 == "j")) {
            return 106;
        };
        if ((ch_11 == "k")) {
            return 107;
        };
        if ((ch_11 == "l")) {
            return 108;
        };
        if ((ch_11 == "m")) {
            return 109;
        };
        if ((ch_11 == "n")) {
            return 110;
        };
        if ((ch_11 == "o")) {
            return 111;
        };
        if ((ch_11 == "p")) {
            return 112;
        };
        if ((ch_11 == "q")) {
            return 113;
        };
        if ((ch_11 == "r")) {
            return 114;
        };
        if ((ch_11 == "s")) {
            return 115;
        };
        if ((ch_11 == "t")) {
            return 116;
        };
        if ((ch_11 == "u")) {
            return 117;
        };
        if ((ch_11 == "v")) {
            return 118;
        };
        if ((ch_11 == "w")) {
            return 119;
        };
        if ((ch_11 == "x")) {
            return 120;
        };
        if ((ch_11 == "y")) {
            return 121;
        };
        if ((ch_11 == "z")) {
            return 122;
        };
        return 0;
    }

    public static string chr(long code_12) {
        if ((code_12 == 32)) {
            return " ";
        };
        if ((code_12 == 97)) {
            return "a";
        };
        if ((code_12 == 98)) {
            return "b";
        };
        if ((code_12 == 99)) {
            return "c";
        };
        if ((code_12 == 100)) {
            return "d";
        };
        if ((code_12 == 101)) {
            return "e";
        };
        if ((code_12 == 102)) {
            return "f";
        };
        if ((code_12 == 103)) {
            return "g";
        };
        if ((code_12 == 104)) {
            return "h";
        };
        if ((code_12 == 105)) {
            return "i";
        };
        if ((code_12 == 106)) {
            return "j";
        };
        if ((code_12 == 107)) {
            return "k";
        };
        if ((code_12 == 108)) {
            return "l";
        };
        if ((code_12 == 109)) {
            return "m";
        };
        if ((code_12 == 110)) {
            return "n";
        };
        if ((code_12 == 111)) {
            return "o";
        };
        if ((code_12 == 112)) {
            return "p";
        };
        if ((code_12 == 113)) {
            return "q";
        };
        if ((code_12 == 114)) {
            return "r";
        };
        if ((code_12 == 115)) {
            return "s";
        };
        if ((code_12 == 116)) {
            return "t";
        };
        if ((code_12 == 117)) {
            return "u";
        };
        if ((code_12 == 118)) {
            return "v";
        };
        if ((code_12 == 119)) {
            return "w";
        };
        if ((code_12 == 120)) {
            return "x";
        };
        if ((code_12 == 121)) {
            return "y";
        };
        if ((code_12 == 122)) {
            return "z";
        };
        return "";
    }

    public static long[] get_blocks_from_text(string message_13, long block_size_14) {
        long[] block_ints_15 = new long[]{};
        long block_start_16 = 0;
        while ((block_start_16 < message_13.Length)) {
            long block_int_17 = 0;
            long i_18 = block_start_16;
            while (((i_18 < (block_start_16 + block_size_14)) && (i_18 < message_13.Length))) {
                block_int_17 = (block_int_17 + (Program.ord(message_13.Substring((int)(i_18), 1)) * Program.pow_int(BYTE_SIZE_0, (i_18 - block_start_16))));
                i_18 = (i_18 + 1);
            }
            block_ints_15 = (Enumerable.ToArray(Enumerable.Append(block_ints_15, block_int_17)));
            block_start_16 = (block_start_16 + block_size_14);
        };
        return block_ints_15;
    }

    public static string get_text_from_blocks(long[] block_ints_19, long message_length_20, long block_size_21) {
        string message_22 = "";
        foreach (long block_int_23 in block_ints_19) {
            long block_24 = block_int_23;
            long i_25 = (block_size_21 - 1);
            string block_message_26 = "";
            while ((i_25 >= 0)) {
                if (((message_22.Length + i_25) < message_length_20)) {
                    long ascii_number_27 = (block_24 / Program.pow_int(BYTE_SIZE_0, i_25));
                    block_24 = (block_24 % Program.pow_int(BYTE_SIZE_0, i_25));
                    block_message_26 = (Program.chr(ascii_number_27) + block_message_26);
                }
                i_25 = (i_25 - 1);
            }
            message_22 = (message_22 + block_message_26);
        };
        return message_22;
    }

    public static long[] encrypt_message(string message_28, long n_29, long e_30, long block_size_31) {
        long[] encrypted_32 = new long[]{};
        long[] blocks_33 = Program.get_blocks_from_text(message_28, block_size_31);
        foreach (long block_34 in blocks_33) {
            encrypted_32 = (Enumerable.ToArray(Enumerable.Append(encrypted_32, Program.mod_pow(block_34, e_30, n_29))));
        };
        return encrypted_32;
    }

    public static string decrypt_message(long[] blocks_35, long message_length_36, long n_37, long d_38, long block_size_39) {
        long[] decrypted_blocks_40 = new long[]{};
        foreach (long block_41 in blocks_35) {
            decrypted_blocks_40 = (Enumerable.ToArray(Enumerable.Append(decrypted_blocks_40, Program.mod_pow(block_41, d_38, n_37))));
        };
        string message_42 = "";
        foreach (long num_43 in decrypted_blocks_40) {
            message_42 = (message_42 + Program.chr(num_43));
        };
        return message_42;
    }

    public static void main() {
        string message_44 = "hello world";
        long n_45 = 3233;
        long e_46 = 17;
        long d_47 = 2753;
        long block_size_48 = 1;
        long[] encrypted_49 = Program.encrypt_message(message_44, n_45, e_46, block_size_48);
        Console.WriteLine(Program._fmtTop(_fmtStr(encrypted_49)));
        string decrypted_50 = Program.decrypt_message(encrypted_49, message_44.Length, n_45, d_47, block_size_48);
        Console.WriteLine(Program._fmtTop(decrypted_50));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
