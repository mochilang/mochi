// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger get_greyscale(BigInteger blue_0, BigInteger green_1, BigInteger red_2) {
        double b_3 = (double)(blue_0);
        double g_4 = (double)(green_1);
        double r_5 = (double)(red_2);
        return (BigInteger)((long)((((0.114 * b_3) + (0.587 * g_4)) + (0.299 * r_5))));
    }

    public static BigInteger[][] zeros(BigInteger h_6, BigInteger w_7) {
        BigInteger[][] table_8 = new BigInteger[][]{};
        BigInteger i_9 = 0;
        while ((i_9 < h_6)) {
            BigInteger[] row_10 = new BigInteger[]{};
            BigInteger j_11 = 0;
            while ((j_11 < w_7)) {
                row_10 = ((Func<BigInteger[]>)(() => { var _tmp = row_10.Cast<BigInteger>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_11 = (j_11 + 1);
            }
            table_8 = ((Func<BigInteger[][]>)(() => { var _tmp = table_8.Cast<BigInteger[]>().ToList(); _tmp.Add(row_10); return _tmp.ToArray(); }))();
            i_9 = (i_9 + 1);
        };
        return table_8;
    }

    public static BigInteger[][] burkes_dither(BigInteger[][][] img_12, BigInteger threshold_13) {
        long height_14 = img_12.Length;
        long width_15 = _idx(img_12, (long)(0)).Length;
        BigInteger[][] error_table_16 = Program.zeros((height_14 + 1), (width_15 + 4));
        BigInteger[][] output_17 = new BigInteger[][]{};
        BigInteger y_18 = 0;
        while ((y_18 < height_14)) {
            BigInteger[] row_19 = new BigInteger[]{};
            BigInteger x_20 = 0;
            while ((x_20 < width_15)) {
                BigInteger[] px_21 = _idx(_idx(img_12, (long)(y_18)), (long)(x_20));
                BigInteger grey_22 = Program.get_greyscale(_idx(px_21, (long)(0)), _idx(px_21, (long)(1)), _idx(px_21, (long)(2)));
                BigInteger total_23 = (grey_22 + _idx(_idx(error_table_16, (long)(y_18)), (long)((x_20 + 2))));
                BigInteger new_val_24 = 0;
                BigInteger current_error_25 = 0;
                if ((threshold_13 > total_23)) {
                    new_val_24 = 0;
                    current_error_25 = total_23;
                } else {
                    new_val_24 = 255;
                    current_error_25 = (total_23 - 255);
                }
                row_19 = ((Func<BigInteger[]>)(() => { var _tmp = row_19.Cast<BigInteger>().ToList(); _tmp.Add(new_val_24); return _tmp.ToArray(); }))();
                _idx(error_table_16, (long)(y_18))[(int)((x_20 + 3))] = (_idx(_idx(error_table_16, (long)(y_18)), (long)((x_20 + 3))) + ((8 * current_error_25) / 32));
                _idx(error_table_16, (long)(y_18))[(int)((x_20 + 4))] = (_idx(_idx(error_table_16, (long)(y_18)), (long)((x_20 + 4))) + ((4 * current_error_25) / 32));
                _idx(error_table_16, (long)((y_18 + 1)))[(int)((x_20 + 2))] = (_idx(_idx(error_table_16, (long)((y_18 + 1))), (long)((x_20 + 2))) + ((8 * current_error_25) / 32));
                _idx(error_table_16, (long)((y_18 + 1)))[(int)((x_20 + 3))] = (_idx(_idx(error_table_16, (long)((y_18 + 1))), (long)((x_20 + 3))) + ((4 * current_error_25) / 32));
                _idx(error_table_16, (long)((y_18 + 1)))[(int)((x_20 + 4))] = (_idx(_idx(error_table_16, (long)((y_18 + 1))), (long)((x_20 + 4))) + ((2 * current_error_25) / 32));
                _idx(error_table_16, (long)((y_18 + 1)))[(int)((x_20 + 1))] = (_idx(_idx(error_table_16, (long)((y_18 + 1))), (long)((x_20 + 1))) + ((4 * current_error_25) / 32));
                _idx(error_table_16, (long)((y_18 + 1)))[(int)(x_20)] = (_idx(_idx(error_table_16, (long)((y_18 + 1))), (long)(x_20)) + ((2 * current_error_25) / 32));
                x_20 = (x_20 + 1);
            }
            output_17 = ((Func<BigInteger[][]>)(() => { var _tmp = output_17.Cast<BigInteger[]>().ToList(); _tmp.Add(row_19); return _tmp.ToArray(); }))();
            y_18 = (y_18 + 1);
        };
        return output_17;
    }

    public static void main() {
        BigInteger[][][] img_26 = new BigInteger[][][]{new BigInteger[][]{new BigInteger[]{0, 0, 0}, new BigInteger[]{64, 64, 64}, new BigInteger[]{128, 128, 128}, new BigInteger[]{192, 192, 192}}, new BigInteger[][]{new BigInteger[]{255, 255, 255}, new BigInteger[]{200, 200, 200}, new BigInteger[]{150, 150, 150}, new BigInteger[]{100, 100, 100}}, new BigInteger[][]{new BigInteger[]{30, 144, 255}, new BigInteger[]{255, 0, 0}, new BigInteger[]{0, 255, 0}, new BigInteger[]{0, 0, 255}}, new BigInteger[][]{new BigInteger[]{50, 100, 150}, new BigInteger[]{80, 160, 240}, new BigInteger[]{70, 140, 210}, new BigInteger[]{60, 120, 180}}};
        BigInteger[][] result_27 = Program.burkes_dither(img_26, 128);
        BigInteger y_28 = 0;
        while ((y_28 < result_27.Length)) {
            string line_29 = "";
            BigInteger x_30 = 0;
            while ((x_30 < _idx(result_27, (long)(y_28)).Length)) {
                line_29 = (line_29 + _fmtStr(_idx(_idx(result_27, (long)(y_28)), (long)(x_30))));
                if ((x_30 < (_idx(result_27, (long)(y_28)).Length - 1))) {
                    line_29 = (line_29 + " ");
                }
                x_30 = (x_30 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_29));
            y_28 = (y_28 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
