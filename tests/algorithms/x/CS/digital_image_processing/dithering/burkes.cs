// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long get_greyscale(long blue_0, long green_1, long red_2) {
        double b_3 = Convert.ToDouble(blue_0);
        double g_4 = Convert.ToDouble(green_1);
        double r_5 = Convert.ToDouble(red_2);
        return Convert.ToInt64((((0.114 * b_3) + (0.587 * g_4)) + (0.299 * r_5)));
    }

    public static long[][] zeros(long h_6, long w_7) {
        long[][] table_8 = new long[][]{};
        long i_9 = 0;
        while ((i_9 < h_6)) {
            long[] row_10 = new long[]{};
            long j_11 = 0;
            while ((j_11 < w_7)) {
                row_10 = (Enumerable.ToArray(Enumerable.Append<long>(row_10, 0)));
                j_11 = (j_11 + 1);
            }
            table_8 = (Enumerable.ToArray(Enumerable.Append<long[]>(table_8, row_10)));
            i_9 = (i_9 + 1);
        };
        return table_8;
    }

    public static long[][] burkes_dither(long[][][] img_12, long threshold_13) {
        long height_14 = img_12.Length;
        long width_15 = img_12[(int)(0)].Length;
        long[][] error_table_16 = Program.zeros((height_14 + 1), (width_15 + 4));
        long[][] output_17 = new long[][]{};
        long y_18 = 0;
        while ((y_18 < height_14)) {
            long[] row_19 = new long[]{};
            long x_20 = 0;
            while ((x_20 < width_15)) {
                long[] px_21 = img_12[(int)(y_18)][(int)(x_20)];
                long grey_22 = Program.get_greyscale(px_21[(int)(0)], px_21[(int)(1)], px_21[(int)(2)]);
                long total_23 = (grey_22 + error_table_16[(int)(y_18)][(int)((x_20 + 2))]);
                long new_val_24 = 0;
                long current_error_25 = 0;
                if ((threshold_13 > total_23)) {
                    new_val_24 = 0;
                    current_error_25 = total_23;
                } else {
                    new_val_24 = 255;
                    current_error_25 = (total_23 - 255);
                }
                row_19 = (Enumerable.ToArray(Enumerable.Append<long>(row_19, new_val_24)));
                error_table_16[(int)(y_18)][(x_20 + 3)] = (error_table_16[(int)(y_18)][(int)((x_20 + 3))] + ((8 * current_error_25) / 32));
                error_table_16[(int)(y_18)][(x_20 + 4)] = (error_table_16[(int)(y_18)][(int)((x_20 + 4))] + ((4 * current_error_25) / 32));
                error_table_16[(int)((y_18 + 1))][(x_20 + 2)] = (error_table_16[(int)((y_18 + 1))][(int)((x_20 + 2))] + ((8 * current_error_25) / 32));
                error_table_16[(int)((y_18 + 1))][(x_20 + 3)] = (error_table_16[(int)((y_18 + 1))][(int)((x_20 + 3))] + ((4 * current_error_25) / 32));
                error_table_16[(int)((y_18 + 1))][(x_20 + 4)] = (error_table_16[(int)((y_18 + 1))][(int)((x_20 + 4))] + ((2 * current_error_25) / 32));
                error_table_16[(int)((y_18 + 1))][(x_20 + 1)] = (error_table_16[(int)((y_18 + 1))][(int)((x_20 + 1))] + ((4 * current_error_25) / 32));
                error_table_16[(int)((y_18 + 1))][x_20] = (error_table_16[(int)((y_18 + 1))][(int)(x_20)] + ((2 * current_error_25) / 32));
                x_20 = (x_20 + 1);
            }
            output_17 = (Enumerable.ToArray(Enumerable.Append<long[]>(output_17, row_19)));
            y_18 = (y_18 + 1);
        };
        return output_17;
    }

    public static void main() {
        long[][][] img_26 = new long[][][]{new long[][]{new long[]{0, 0, 0}, new long[]{64, 64, 64}, new long[]{128, 128, 128}, new long[]{192, 192, 192}}, new long[][]{new long[]{255, 255, 255}, new long[]{200, 200, 200}, new long[]{150, 150, 150}, new long[]{100, 100, 100}}, new long[][]{new long[]{30, 144, 255}, new long[]{255, 0, 0}, new long[]{0, 255, 0}, new long[]{0, 0, 255}}, new long[][]{new long[]{50, 100, 150}, new long[]{80, 160, 240}, new long[]{70, 140, 210}, new long[]{60, 120, 180}}};
        long[][] result_27 = Program.burkes_dither(img_26, 128);
        long y_28 = 0;
        while ((y_28 < result_27.Length)) {
            string line_29 = "";
            long x_30 = 0;
            while ((x_30 < result_27[(int)(y_28)].Length)) {
                line_29 = (line_29 + _fmtStr(result_27[(int)(y_28)][(int)(x_30)]));
                if ((x_30 < (result_27[(int)(y_28)].Length - 1))) {
                    line_29 = (line_29 + " ");
                }
                x_30 = (x_30 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_29));
            y_28 = (y_28 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
