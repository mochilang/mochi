// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double[][] GAUSSIAN_KERNEL_9 = new double[][]{new double[]{0.0625, 0.125, 0.0625}, new double[]{0.125, 0.25, 0.125}, new double[]{0.0625, 0.125, 0.0625}};
    static double[][] SOBEL_GX_10 = new double[][]{new double[]{-1.0, 0.0, 1.0}, new double[]{-2.0, 0.0, 2.0}, new double[]{-1.0, 0.0, 1.0}};
    static double[][] SOBEL_GY_11 = new double[][]{new double[]{1.0, 2.0, 1.0}, new double[]{0.0, 0.0, 0.0}, new double[]{-1.0, -2.0, -1.0}};
    static double[][] image_87 = new double[][]{new double[]{0.0, 0.0, 0.0, 0.0, 0.0}, new double[]{0.0, 255.0, 255.0, 255.0, 0.0}, new double[]{0.0, 255.0, 255.0, 255.0, 0.0}, new double[]{0.0, 255.0, 255.0, 255.0, 0.0}, new double[]{0.0, 0.0, 0.0, 0.0, 0.0}};
    static double[][] edges_88 = Program.canny(image_87, 20.0, 40.0, 128.0, 255.0);
    public static double sqrtApprox(double x_1) {
        double guess_2 = (x_1 / 2.0);
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double atanApprox(double x_4) {
        if ((x_4 > 1.0)) {
            return ((PI_0 / 2.0) - (x_4 / ((x_4 * x_4) + 0.28)));
        };
        if ((x_4 < -1.0)) {
            return ((-PI_0 / 2.0) - (x_4 / ((x_4 * x_4) + 0.28)));
        };
        return (x_4 / (1.0 + ((0.28 * x_4) * x_4)));
    }

    public static double atan2Approx(double y_5, double x_6) {
        if ((x_6 > 0.0)) {
            double r_7 = Program.atanApprox((y_5 / x_6));
            return r_7;
        };
        if ((x_6 < 0.0)) {
            if ((y_5 >= 0.0)) {
                return (Program.atanApprox((y_5 / x_6)) + PI_0);
            }
            return (Program.atanApprox((y_5 / x_6)) - PI_0);
        };
        if ((y_5 > 0.0)) {
            return (PI_0 / 2.0);
        };
        if ((y_5 < 0.0)) {
            return (-PI_0 / 2.0);
        };
        return 0.0;
    }

    public static double deg(double rad_8) {
        return ((rad_8 * 180.0) / PI_0);
    }

    public static double[][] zero_matrix(long h_12, long w_13) {
        double[][] out_14 = new double[][]{};
        long i_15 = 0;
        while ((i_15 < h_12)) {
            double[] row_16 = new double[]{};
            long j_17 = 0;
            while ((j_17 < w_13)) {
                row_16 = (Enumerable.ToArray(Enumerable.Append<double>(row_16, 0.0)));
                j_17 = (j_17 + 1);
            }
            out_14 = (Enumerable.ToArray(Enumerable.Append<double[]>(out_14, row_16)));
            i_15 = (i_15 + 1);
        };
        return out_14;
    }

    public static double[][] convolve(double[][] img_18, double[][] kernel_19) {
        long h_20 = img_18.Length;
        long w_21 = img_18[(int)(0)].Length;
        long k_22 = kernel_19.Length;
        long pad_23 = (k_22 / 2);
        double[][] out_24 = Program.zero_matrix(h_20, w_21);
        long y_25 = pad_23;
        while ((y_25 < (h_20 - pad_23))) {
            long x_26 = pad_23;
            while ((x_26 < (w_21 - pad_23))) {
                double sum_27 = 0.0;
                long ky_28 = 0;
                while ((ky_28 < k_22)) {
                    long kx_29 = 0;
                    while ((kx_29 < k_22)) {
                        double pixel_30 = img_18[(int)(((y_25 - pad_23) + ky_28))][(int)(((x_26 - pad_23) + kx_29))];
                        double weight_31 = kernel_19[(int)(ky_28)][(int)(kx_29)];
                        sum_27 = (sum_27 + (pixel_30 * weight_31));
                        kx_29 = (kx_29 + 1);
                    }
                    ky_28 = (ky_28 + 1);
                }
                out_24[(int)(y_25)][x_26] = sum_27;
                x_26 = (x_26 + 1);
            }
            y_25 = (y_25 + 1);
        };
        return out_24;
    }

    public static double[][] gaussian_blur(double[][] img_32) {
        return Program.convolve(img_32, GAUSSIAN_KERNEL_9);
    }

    public static Dictionary<string, double[][]> sobel_filter(double[][] img_33) {
        double[][] gx_34 = Program.convolve(img_33, SOBEL_GX_10);
        double[][] gy_35 = Program.convolve(img_33, SOBEL_GY_11);
        long h_36 = img_33.Length;
        long w_37 = img_33[(int)(0)].Length;
        double[][] grad_38 = Program.zero_matrix(h_36, w_37);
        double[][] dir_39 = Program.zero_matrix(h_36, w_37);
        long i_40 = 0;
        while ((i_40 < h_36)) {
            long j_41 = 0;
            while ((j_41 < w_37)) {
                double gxx_42 = gx_34[(int)(i_40)][(int)(j_41)];
                double gyy_43 = gy_35[(int)(i_40)][(int)(j_41)];
                grad_38[(int)(i_40)][j_41] = Program.sqrtApprox(((gxx_42 * gxx_42) + (gyy_43 * gyy_43)));
                dir_39[(int)(i_40)][j_41] = (Program.deg(Program.atan2Approx(gyy_43, gxx_42)) + 180.0);
                j_41 = (j_41 + 1);
            }
            i_40 = (i_40 + 1);
        };
        return new Dictionary<string, double[][]>{{"grad", grad_38}, {"dir", dir_39}};
    }

    public static double[][] suppress_non_maximum(long h_44, long w_45, double[][] direction_46, double[][] grad_47) {
        double[][] dest_48 = Program.zero_matrix(h_44, w_45);
        long r_49 = 1;
        while ((r_49 < (h_44 - 1))) {
            long c_50 = 1;
            while ((c_50 < (w_45 - 1))) {
                double angle_51 = direction_46[(int)(r_49)][(int)(c_50)];
                double q_52 = 0.0;
                double p_53 = 0.0;
                if (((((angle_51 >= 0.0) && (angle_51 < 22.5)) || ((angle_51 >= 157.5) && (angle_51 <= 180.0))) || (angle_51 >= 337.5))) {
                    q_52 = grad_47[(int)(r_49)][(int)((c_50 + 1))];
                    p_53 = grad_47[(int)(r_49)][(int)((c_50 - 1))];
                } else if ((((angle_51 >= 22.5) && (angle_51 < 67.5)) || ((angle_51 >= 202.5) && (angle_51 < 247.5)))) {
                    q_52 = grad_47[(int)((r_49 + 1))][(int)((c_50 - 1))];
                    p_53 = grad_47[(int)((r_49 - 1))][(int)((c_50 + 1))];
                } else if ((((angle_51 >= 67.5) && (angle_51 < 112.5)) || ((angle_51 >= 247.5) && (angle_51 < 292.5)))) {
                    q_52 = grad_47[(int)((r_49 + 1))][(int)(c_50)];
                    p_53 = grad_47[(int)((r_49 - 1))][(int)(c_50)];
                } else {
                    q_52 = grad_47[(int)((r_49 - 1))][(int)((c_50 - 1))];
                    p_53 = grad_47[(int)((r_49 + 1))][(int)((c_50 + 1))];
                }
                if (((grad_47[(int)(r_49)][(int)(c_50)] >= q_52) && (grad_47[(int)(r_49)][(int)(c_50)] >= p_53))) {
                    dest_48[(int)(r_49)][c_50] = grad_47[(int)(r_49)][(int)(c_50)];
                }
                c_50 = (c_50 + 1);
            }
            r_49 = (r_49 + 1);
        };
        return dest_48;
    }

    public static void double_threshold(long h_54, long w_55, double[][] img_56, double low_57, double high_58, double weak_59, double strong_60) {
        long r_61 = 0;
        while ((r_61 < h_54)) {
            long c_62 = 0;
            while ((c_62 < w_55)) {
                double v_63 = img_56[(int)(r_61)][(int)(c_62)];
                if ((v_63 >= high_58)) {
                    img_56[(int)(r_61)][c_62] = strong_60;
                } else if ((v_63 < low_57)) {
                    img_56[(int)(r_61)][c_62] = 0.0;
                } else {
                    img_56[(int)(r_61)][c_62] = weak_59;
                }
                c_62 = (c_62 + 1);
            }
            r_61 = (r_61 + 1);
        };
    }

    public static void track_edge(long h_64, long w_65, double[][] img_66, double weak_67, double strong_68) {
        long r_69 = 1;
        while ((r_69 < (h_64 - 1))) {
            long c_70 = 1;
            while ((c_70 < (w_65 - 1))) {
                if ((img_66[(int)(r_69)][(int)(c_70)] == weak_67)) {
                    if (((((((((img_66[(int)((r_69 + 1))][(int)(c_70)] == strong_68) || (img_66[(int)((r_69 - 1))][(int)(c_70)] == strong_68)) || (img_66[(int)(r_69)][(int)((c_70 + 1))] == strong_68)) || (img_66[(int)(r_69)][(int)((c_70 - 1))] == strong_68)) || (img_66[(int)((r_69 - 1))][(int)((c_70 - 1))] == strong_68)) || (img_66[(int)((r_69 - 1))][(int)((c_70 + 1))] == strong_68)) || (img_66[(int)((r_69 + 1))][(int)((c_70 - 1))] == strong_68)) || (img_66[(int)((r_69 + 1))][(int)((c_70 + 1))] == strong_68))) {
                        img_66[(int)(r_69)][c_70] = strong_68;
                    } else {
                        img_66[(int)(r_69)][c_70] = 0.0;
                    }
                }
                c_70 = (c_70 + 1);
            }
            r_69 = (r_69 + 1);
        };
    }

    public static double[][] canny(double[][] image_71, double low_72, double high_73, double weak_74, double strong_75) {
        double[][] blurred_76 = Program.gaussian_blur(image_71);
        Dictionary<string, double[][]> sob_77 = Program.sobel_filter(blurred_76);
        double[][] grad_78 = (sob_77.ContainsKey("grad") ? sob_77["grad"] : null);
        double[][] direction_79 = (sob_77.ContainsKey("dir") ? sob_77["dir"] : null);
        long h_80 = image_71.Length;
        long w_81 = image_71[(int)(0)].Length;
        double[][] suppressed_82 = Program.suppress_non_maximum(h_80, w_81, direction_79, grad_78);
        Program.double_threshold(h_80, w_81, suppressed_82, low_72, high_73, weak_74, strong_75);
        Program.track_edge(h_80, w_81, suppressed_82, weak_74, strong_75);
        return suppressed_82;
    }

    public static void print_image(double[][] img_83) {
        long r_84 = 0;
        while ((r_84 < img_83.Length)) {
            long c_85 = 0;
            string line_86 = "";
            while ((c_85 < img_83[(int)(r_84)].Length)) {
                line_86 = ((line_86 + _fmtStr((long)(img_83[(int)(r_84)][(int)(c_85)]))) + " ");
                c_85 = (c_85 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_86));
            r_84 = (r_84 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_image(edges_88);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
