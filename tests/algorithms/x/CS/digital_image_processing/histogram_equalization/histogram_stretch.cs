// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] img_19 = new long[][]{new long[]{52, 55, 61}, new long[]{59, 79, 61}, new long[]{85, 76, 62}};
    static long[][] result_20 = Program.histogram_stretch(img_19);
    public static long[] make_list(long n_0, long value_1) {
        long[] res_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < n_0)) {
            res_2 = (Enumerable.ToArray(Enumerable.Append<long>(res_2, value_1)));
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    public static long[][] histogram_stretch(long[][] image_4) {
        long height_5 = image_4.Length;
        long width_6 = image_4[(int)(0)].Length;
        long[] hist_7 = Program.make_list(256, 0);
        long i_8 = 0;
        while ((i_8 < height_5)) {
            long j_9 = 0;
            while ((j_9 < width_6)) {
                long val_10 = image_4[(int)(i_8)][(int)(j_9)];
                hist_7[val_10] = (hist_7[(int)(val_10)] + 1);
                j_9 = (j_9 + 1);
            }
            i_8 = (i_8 + 1);
        };
        long[] mapping_11 = Program.make_list(256, 0);
        long cumulative_12 = 0;
        long total_13 = (height_5 * width_6);
        long h_14 = 0;
        while ((h_14 < 256)) {
            cumulative_12 = (cumulative_12 + hist_7[(int)(h_14)]);
            mapping_11[h_14] = ((255 * cumulative_12) / total_13);
            h_14 = (h_14 + 1);
        };
        i_8 = 0;
        while ((i_8 < height_5)) {
            long j_15 = 0;
            while ((j_15 < width_6)) {
                long val_16 = image_4[(int)(i_8)][(int)(j_15)];
                image_4[(int)(i_8)][j_15] = mapping_11[(int)(val_16)];
                j_15 = (j_15 + 1);
            }
            i_8 = (i_8 + 1);
        };
        return image_4;
    }

    public static void print_image(long[][] image_17) {
        long i_18 = 0;
        while ((i_18 < image_17.Length)) {
            Console.WriteLine(Program._fmtTop(image_17[(int)(i_18)]));
            i_18 = (i_18 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_image(result_20);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
