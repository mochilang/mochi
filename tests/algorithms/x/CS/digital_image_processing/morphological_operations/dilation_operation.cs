// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double[][] rgb_to_gray(long[][][] rgb_0) {
        double[][] result_1 = new double[][]{};
        long i_2 = 0;
        while ((i_2 < rgb_0.Length)) {
            double[] row_3 = new double[]{};
            long j_4 = 0;
            while ((j_4 < rgb_0[(int)(i_2)].Length)) {
                long r_5 = rgb_0[(int)(i_2)][(int)(j_4)][(int)(0)];
                long g_6 = rgb_0[(int)(i_2)][(int)(j_4)][(int)(1)];
                long b_7 = rgb_0[(int)(i_2)][(int)(j_4)][(int)(2)];
                double gray_8 = (((0.2989 * (1.0 * r_5)) + (0.587 * (1.0 * g_6))) + (0.114 * (1.0 * b_7)));
                row_3 = (Enumerable.ToArray(Enumerable.Append<double>(row_3, gray_8)));
                j_4 = (j_4 + 1);
            }
            result_1 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return result_1;
    }

    public static long[][] gray_to_binary(double[][] gray_9) {
        long[][] result_10 = new long[][]{};
        long i_11 = 0;
        while ((i_11 < gray_9.Length)) {
            long[] row_12 = new long[]{};
            long j_13 = 0;
            while ((j_13 < gray_9[(int)(i_11)].Length)) {
                double v_14 = gray_9[(int)(i_11)][(int)(j_13)];
                if (((v_14 > 127.0) && (v_14 <= 255.0))) {
                    row_12 = (Enumerable.ToArray(Enumerable.Append<long>(row_12, 1)));
                } else {
                    row_12 = (Enumerable.ToArray(Enumerable.Append<long>(row_12, 0)));
                }
                j_13 = (j_13 + 1);
            }
            result_10 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_10, row_12)));
            i_11 = (i_11 + 1);
        };
        return result_10;
    }

    public static long[][] dilation(long[][] image_15, long[][] kernel_16) {
        long img_h_17 = image_15.Length;
        long img_w_18 = image_15[(int)(0)].Length;
        long k_h_19 = kernel_16.Length;
        long k_w_20 = kernel_16[(int)(0)].Length;
        long pad_h_21 = (k_h_19 / 2);
        long pad_w_22 = (k_w_20 / 2);
        long p_h_23 = (img_h_17 + (2 * pad_h_21));
        long p_w_24 = (img_w_18 + (2 * pad_w_22));
        long[][] padded_25 = new long[][]{};
        long i_26 = 0;
        while ((i_26 < p_h_23)) {
            long[] row_27 = new long[]{};
            long j_28 = 0;
            while ((j_28 < p_w_24)) {
                row_27 = (Enumerable.ToArray(Enumerable.Append<long>(row_27, 0)));
                j_28 = (j_28 + 1);
            }
            padded_25 = (Enumerable.ToArray(Enumerable.Append<long[]>(padded_25, row_27)));
            i_26 = (i_26 + 1);
        };
        i_26 = 0;
        while ((i_26 < img_h_17)) {
            long j_29 = 0;
            while ((j_29 < img_w_18)) {
                padded_25[(int)((pad_h_21 + i_26))][(pad_w_22 + j_29)] = image_15[(int)(i_26)][(int)(j_29)];
                j_29 = (j_29 + 1);
            }
            i_26 = (i_26 + 1);
        };
        long[][] output_30 = new long[][]{};
        i_26 = 0;
        while ((i_26 < img_h_17)) {
            long[] row_31 = new long[]{};
            long j_32 = 0;
            while ((j_32 < img_w_18)) {
                long sum_33 = 0;
                long ky_34 = 0;
                while ((ky_34 < k_h_19)) {
                    long kx_35 = 0;
                    while ((kx_35 < k_w_20)) {
                        if ((kernel_16[(int)(ky_34)][(int)(kx_35)] == 1)) {
                            sum_33 = (sum_33 + padded_25[(int)((i_26 + ky_34))][(int)((j_32 + kx_35))]);
                        }
                        kx_35 = (kx_35 + 1);
                    }
                    ky_34 = (ky_34 + 1);
                }
                if ((sum_33 > 0)) {
                    row_31 = (Enumerable.ToArray(Enumerable.Append<long>(row_31, 1)));
                } else {
                    row_31 = (Enumerable.ToArray(Enumerable.Append<long>(row_31, 0)));
                }
                j_32 = (j_32 + 1);
            }
            output_30 = (Enumerable.ToArray(Enumerable.Append<long[]>(output_30, row_31)));
            i_26 = (i_26 + 1);
        };
        return output_30;
    }

    public static void print_float_matrix(double[][] mat_36) {
        long i_37 = 0;
        while ((i_37 < mat_36.Length)) {
            string line_38 = "";
            long j_39 = 0;
            while ((j_39 < mat_36[(int)(i_37)].Length)) {
                line_38 = (line_38 + _fmtStr(mat_36[(int)(i_37)][(int)(j_39)]));
                if ((j_39 < (mat_36[(int)(i_37)].Length - 1))) {
                    line_38 = (line_38 + " ");
                }
                j_39 = (j_39 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_38));
            i_37 = (i_37 + 1);
        };
    }

    public static void print_int_matrix(long[][] mat_40) {
        long i_41 = 0;
        while ((i_41 < mat_40.Length)) {
            string line_42 = "";
            long j_43 = 0;
            while ((j_43 < mat_40[(int)(i_41)].Length)) {
                line_42 = (line_42 + _fmtStr(mat_40[(int)(i_41)][(int)(j_43)]));
                if ((j_43 < (mat_40[(int)(i_41)].Length - 1))) {
                    line_42 = (line_42 + " ");
                }
                j_43 = (j_43 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_42));
            i_41 = (i_41 + 1);
        };
    }

    public static void main() {
        long[][][] rgb_example_44 = new long[][][]{new long[][]{new long[]{127, 255, 0}}};
        Program.print_float_matrix(Program.rgb_to_gray(rgb_example_44));
        double[][] gray_example_45 = new double[][]{new double[]{26.0, 255.0, 14.0}, new double[]{5.0, 147.0, 20.0}, new double[]{1.0, 200.0, 0.0}};
        Program.print_int_matrix(Program.gray_to_binary(gray_example_45));
        long[][] binary_image_46 = new long[][]{new long[]{0, 1, 0}, new long[]{0, 1, 0}, new long[]{0, 1, 0}};
        long[][] kernel_47 = new long[][]{new long[]{0, 1, 0}, new long[]{1, 1, 1}, new long[]{0, 1, 0}};
        Program.print_int_matrix(Program.dilation(binary_image_46, kernel_47));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
