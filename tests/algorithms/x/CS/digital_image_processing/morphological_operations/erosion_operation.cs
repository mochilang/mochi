// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][][] rgb_img_33 = new long[][][]{new long[][]{new long[]{127, 255, 0}}};
    public static double[][] rgb_to_gray(long[][][] rgb_0) {
        double[][] gray_1 = new double[][]{};
        long i_2 = 0;
        while ((i_2 < rgb_0.Length)) {
            double[] row_3 = new double[]{};
            long j_4 = 0;
            while ((j_4 < rgb_0[(int)(i_2)].Length)) {
                double r_5 = Convert.ToDouble(rgb_0[(int)(i_2)][(int)(j_4)][(int)(0)]);
                double g_6 = Convert.ToDouble(rgb_0[(int)(i_2)][(int)(j_4)][(int)(1)]);
                double b_7 = Convert.ToDouble(rgb_0[(int)(i_2)][(int)(j_4)][(int)(2)]);
                double value_8 = (((0.2989 * r_5) + (0.587 * g_6)) + (0.114 * b_7));
                row_3 = (Enumerable.ToArray(Enumerable.Append<double>(row_3, value_8)));
                j_4 = (j_4 + 1);
            }
            gray_1 = (Enumerable.ToArray(Enumerable.Append<double[]>(gray_1, row_3)));
            i_2 = (i_2 + 1);
        };
        return gray_1;
    }

    public static bool[][] gray_to_binary(double[][] gray_9) {
        bool[][] binary_10 = new bool[][]{};
        long i_11 = 0;
        while ((i_11 < gray_9.Length)) {
            bool[] row_12 = new bool[]{};
            long j_13 = 0;
            while ((j_13 < gray_9[(int)(i_11)].Length)) {
                row_12 = (Enumerable.ToArray(Enumerable.Append<bool>(row_12, ((gray_9[(int)(i_11)][(int)(j_13)] > 127.0) && (gray_9[(int)(i_11)][(int)(j_13)] <= 255.0)))));
                j_13 = (j_13 + 1);
            }
            binary_10 = (Enumerable.ToArray(Enumerable.Append<bool[]>(binary_10, row_12)));
            i_11 = (i_11 + 1);
        };
        return binary_10;
    }

    public static bool[][] erosion(bool[][] image_14, long[][] kernel_15) {
        long h_16 = image_14.Length;
        long w_17 = image_14[(int)(0)].Length;
        long k_h_18 = kernel_15.Length;
        long k_w_19 = kernel_15[(int)(0)].Length;
        long pad_y_20 = (k_h_18 / 2);
        long pad_x_21 = (k_w_19 / 2);
        bool[][] padded_22 = new bool[][]{};
        long y_23 = 0;
        while ((y_23 < (h_16 + (2 * pad_y_20)))) {
            bool[] row_24 = new bool[]{};
            long x_25 = 0;
            while ((x_25 < (w_17 + (2 * pad_x_21)))) {
                row_24 = (Enumerable.ToArray(Enumerable.Append<bool>(row_24, false)));
                x_25 = (x_25 + 1);
            }
            padded_22 = (Enumerable.ToArray(Enumerable.Append<bool[]>(padded_22, row_24)));
            y_23 = (y_23 + 1);
        };
        y_23 = 0;
        while ((y_23 < h_16)) {
            long x_26 = 0;
            while ((x_26 < w_17)) {
                padded_22[(int)((pad_y_20 + y_23))][(pad_x_21 + x_26)] = image_14[(int)(y_23)][(int)(x_26)];
                x_26 = (x_26 + 1);
            }
            y_23 = (y_23 + 1);
        };
        bool[][] output_27 = new bool[][]{};
        y_23 = 0;
        while ((y_23 < h_16)) {
            bool[] row_out_28 = new bool[]{};
            long x_29 = 0;
            while ((x_29 < w_17)) {
                long sum_30 = 0;
                long ky_31 = 0;
                while ((ky_31 < k_h_18)) {
                    long kx_32 = 0;
                    while ((kx_32 < k_w_19)) {
                        if (((kernel_15[(int)(ky_31)][(int)(kx_32)] == 1) && padded_22[(int)((y_23 + ky_31))][(int)((x_29 + kx_32))])) {
                            sum_30 = (sum_30 + 1);
                        }
                        kx_32 = (kx_32 + 1);
                    }
                    ky_31 = (ky_31 + 1);
                }
                row_out_28 = (Enumerable.ToArray(Enumerable.Append<bool>(row_out_28, (sum_30 == 5))));
                x_29 = (x_29 + 1);
            }
            output_27 = (Enumerable.ToArray(Enumerable.Append<bool[]>(output_27, row_out_28)));
            y_23 = (y_23 + 1);
        };
        return output_27;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.rgb_to_gray(rgb_img_33))));
            double[][] gray_img_34 = new double[][]{new double[]{127.0, 255.0, 0.0}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.gray_to_binary(gray_img_34))));
            bool[][] img1_35 = new bool[][]{new bool[]{true, true, false}};
            long[][] kernel1_36 = new long[][]{new long[]{0, 1, 0}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.erosion(img1_35, kernel1_36))));
            bool[][] img2_37 = new bool[][]{new bool[]{true, false, false}};
            long[][] kernel2_38 = new long[][]{new long[]{1, 1, 0}};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.erosion(img2_37, kernel2_38))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
