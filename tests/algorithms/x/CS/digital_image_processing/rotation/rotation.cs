// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] img_58 = new long[][]{new long[]{1, 2, 3}, new long[]{4, 5, 6}, new long[]{7, 8, 9}};
    static double[][] pts1_59 = new double[][]{new double[]{0.0, 0.0}, new double[]{2.0, 0.0}, new double[]{0.0, 2.0}};
    static double[][] pts2_60 = new double[][]{new double[]{0.0, 2.0}, new double[]{0.0, 0.0}, new double[]{2.0, 2.0}};
    static long[][] rotated_61 = Program.get_rotation(img_58, pts1_59, pts2_60, 3, 3);
    public static double[][] mat_inverse3(double[][] m_0) {
        double a_1 = m_0[(int)(0)][(int)(0)];
        double b_2 = m_0[(int)(0)][(int)(1)];
        double c_3 = m_0[(int)(0)][(int)(2)];
        double d_4 = m_0[(int)(1)][(int)(0)];
        double e_5 = m_0[(int)(1)][(int)(1)];
        double f_6 = m_0[(int)(1)][(int)(2)];
        double g_7 = m_0[(int)(2)][(int)(0)];
        double h_8 = m_0[(int)(2)][(int)(1)];
        double i_9 = m_0[(int)(2)][(int)(2)];
        double det_10 = (((a_1 * ((e_5 * i_9) - (f_6 * h_8))) - (b_2 * ((d_4 * i_9) - (f_6 * g_7)))) + (c_3 * ((d_4 * h_8) - (e_5 * g_7))));
        if ((det_10 == 0.0)) {
            throw new Exception("singular matrix");
        };
        double adj00_11 = ((e_5 * i_9) - (f_6 * h_8));
        double adj01_12 = ((c_3 * h_8) - (b_2 * i_9));
        double adj02_13 = ((b_2 * f_6) - (c_3 * e_5));
        double adj10_14 = ((f_6 * g_7) - (d_4 * i_9));
        double adj11_15 = ((a_1 * i_9) - (c_3 * g_7));
        double adj12_16 = ((c_3 * d_4) - (a_1 * f_6));
        double adj20_17 = ((d_4 * h_8) - (e_5 * g_7));
        double adj21_18 = ((b_2 * g_7) - (a_1 * h_8));
        double adj22_19 = ((a_1 * e_5) - (b_2 * d_4));
        double[][] inv_20 = new double[][]{};
        inv_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(inv_20, new double[]{(adj00_11 / det_10), (adj01_12 / det_10), (adj02_13 / det_10)})));
        inv_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(inv_20, new double[]{(adj10_14 / det_10), (adj11_15 / det_10), (adj12_16 / det_10)})));
        inv_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(inv_20, new double[]{(adj20_17 / det_10), (adj21_18 / det_10), (adj22_19 / det_10)})));
        return inv_20;
    }

    public static double[] mat_vec_mul(double[][] m_21, double[] v_22) {
        double[] res_23 = new double[]{};
        long i_24 = 0;
        while ((i_24 < 3)) {
            double val_25 = (((m_21[(int)(i_24)][(int)(0)] * v_22[(int)(0)]) + (m_21[(int)(i_24)][(int)(1)] * v_22[(int)(1)])) + (m_21[(int)(i_24)][(int)(2)] * v_22[(int)(2)]));
            res_23 = (Enumerable.ToArray(Enumerable.Append<double>(res_23, val_25)));
            i_24 = (i_24 + 1);
        };
        return res_23;
    }

    public static long[][] create_matrix(long rows_26, long cols_27, long value_28) {
        long[][] result_29 = new long[][]{};
        long r_30 = 0;
        while ((r_30 < rows_26)) {
            long[] row_31 = new long[]{};
            long c_32 = 0;
            while ((c_32 < cols_27)) {
                row_31 = (Enumerable.ToArray(Enumerable.Append<long>(row_31, value_28)));
                c_32 = (c_32 + 1);
            }
            result_29 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_29, row_31)));
            r_30 = (r_30 + 1);
        };
        return result_29;
    }

    public static long round_to_int(double x_33) {
        if ((x_33 >= 0.0)) {
            return _atoi((x_33 + 0.5));
        };
        return _atoi((x_33 - 0.5));
    }

    public static long[][] get_rotation(long[][] img_34, double[][] pt1_35, double[][] pt2_36, long rows_37, long cols_38) {
        double[][] src_39 = new double[][]{new double[]{pt1_35[(int)(0)][(int)(0)], pt1_35[(int)(0)][(int)(1)], 1.0}, new double[]{pt1_35[(int)(1)][(int)(0)], pt1_35[(int)(1)][(int)(1)], 1.0}, new double[]{pt1_35[(int)(2)][(int)(0)], pt1_35[(int)(2)][(int)(1)], 1.0}};
        double[][] inv_40 = Program.mat_inverse3(src_39);
        double[] vecx_41 = new double[]{pt2_36[(int)(0)][(int)(0)], pt2_36[(int)(1)][(int)(0)], pt2_36[(int)(2)][(int)(0)]};
        double[] vecy_42 = new double[]{pt2_36[(int)(0)][(int)(1)], pt2_36[(int)(1)][(int)(1)], pt2_36[(int)(2)][(int)(1)]};
        double[] avec_43 = Program.mat_vec_mul(inv_40, vecx_41);
        double[] bvec_44 = Program.mat_vec_mul(inv_40, vecy_42);
        double a0_45 = avec_43[(int)(0)];
        double a1_46 = avec_43[(int)(1)];
        double a2_47 = avec_43[(int)(2)];
        double b0_48 = bvec_44[(int)(0)];
        double b1_49 = bvec_44[(int)(1)];
        double b2_50 = bvec_44[(int)(2)];
        long[][] out_51 = Program.create_matrix(rows_37, cols_38, 0);
        long y_52 = 0;
        while ((y_52 < rows_37)) {
            long x_53 = 0;
            while ((x_53 < cols_38)) {
                double xf_54 = (((a0_45 * (1.0 * x_53)) + (a1_46 * (1.0 * y_52))) + a2_47);
                double yf_55 = (((b0_48 * (1.0 * x_53)) + (b1_49 * (1.0 * y_52))) + b2_50);
                long sx_56 = Program.round_to_int(xf_54);
                long sy_57 = Program.round_to_int(yf_55);
                if (((((sx_56 >= 0) && (sx_56 < cols_38)) && (sy_57 >= 0)) && (sy_57 < rows_37))) {
                    out_51[(int)(sy_57)][sx_56] = img_34[(int)(y_52)][(int)(x_53)];
                }
                x_53 = (x_53 + 1);
            }
            y_52 = (y_52 + 1);
        };
        return out_51;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(rotated_61)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
