// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] img_104 = new long[][]{new long[]{52, 55, 61}, new long[]{62, 59, 55}, new long[]{63, 65, 66}};
    static long[][] negative_105 = Program.convert_to_negative(img_104);
    static long[][] contrast_106 = Program.change_contrast(img_104, 110);
    static double[][] kernel_107 = Program.gen_gaussian_kernel(3, 1.0);
    static double[][] laplace_108 = new double[][]{new double[]{0.25, 0.5, 0.25}, new double[]{0.5, -3.0, 0.5}, new double[]{0.25, 0.5, 0.25}};
    static long[][] convolved_109 = Program.img_convolve(img_104, laplace_108);
    static long[][] medianed_110 = Program.median_filter(img_104, 3);
    static long[][] sobel_111 = Program.sobel_filter(img_104);
    static long[][] lbp_img_112 = Program.local_binary_pattern(img_104);
    public static long clamp_byte(long x_0) {
        if ((x_0 < 0)) {
            return 0;
        };
        if ((x_0 > 255)) {
            return 255;
        };
        return x_0;
    }

    public static long[][] convert_to_negative(long[][] img_1) {
        long h_2 = img_1.Length;
        long w_3 = img_1[(int)(0)].Length;
        long[][] out_4 = new long[][]{};
        long y_5 = 0;
        while ((y_5 < h_2)) {
            long[] row_6 = new long[]{};
            long x_7 = 0;
            while ((x_7 < w_3)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append<long>(row_6, (255 - img_1[(int)(y_5)][(int)(x_7)]))));
                x_7 = (x_7 + 1);
            }
            out_4 = (Enumerable.ToArray(Enumerable.Append<long[]>(out_4, row_6)));
            y_5 = (y_5 + 1);
        };
        return out_4;
    }

    public static long[][] change_contrast(long[][] img_8, long factor_9) {
        long h_10 = img_8.Length;
        long w_11 = img_8[(int)(0)].Length;
        long[][] out_12 = new long[][]{};
        long y_13 = 0;
        while ((y_13 < h_10)) {
            long[] row_14 = new long[]{};
            long x_15 = 0;
            while ((x_15 < w_11)) {
                long p_16 = img_8[(int)(y_13)][(int)(x_15)];
                long v_17 = ((((p_16 - 128) * factor_9) / 100) + 128);
                v_17 = Program.clamp_byte(v_17);
                row_14 = (Enumerable.ToArray(Enumerable.Append<long>(row_14, v_17)));
                x_15 = (x_15 + 1);
            }
            out_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(out_12, row_14)));
            y_13 = (y_13 + 1);
        };
        return out_12;
    }

    public static double[][] gen_gaussian_kernel(long n_18, double sigma_19) {
        if ((n_18 == 3)) {
            return new double[][]{new double[]{(1.0 / 16.0), (2.0 / 16.0), (1.0 / 16.0)}, new double[]{(2.0 / 16.0), (4.0 / 16.0), (2.0 / 16.0)}, new double[]{(1.0 / 16.0), (2.0 / 16.0), (1.0 / 16.0)}};
        };
        double[][] k_20 = new double[][]{};
        long i_21 = 0;
        while ((i_21 < n_18)) {
            double[] row_22 = new double[]{};
            long j_23 = 0;
            while ((j_23 < n_18)) {
                row_22 = (Enumerable.ToArray(Enumerable.Append<double>(row_22, 0.0)));
                j_23 = (j_23 + 1);
            }
            k_20 = (Enumerable.ToArray(Enumerable.Append<double[]>(k_20, row_22)));
            i_21 = (i_21 + 1);
        };
        return k_20;
    }

    public static long[][] img_convolve(long[][] img_24, double[][] kernel_25) {
        long h_26 = img_24.Length;
        long w_27 = img_24[(int)(0)].Length;
        long[][] out_28 = new long[][]{};
        long y_29 = 0;
        while ((y_29 < h_26)) {
            long[] row_30 = new long[]{};
            long x_31 = 0;
            while ((x_31 < w_27)) {
                double acc_32 = 0.0;
                long ky_33 = 0;
                while ((ky_33 < kernel_25.Length)) {
                    long kx_34 = 0;
                    while ((kx_34 < kernel_25[(int)(0)].Length)) {
                        long iy_35 = ((y_29 + ky_33) - 1);
                        long ix_36 = ((x_31 + kx_34) - 1);
                        long pixel_37 = 0;
                        if (((((iy_35 >= 0) && (iy_35 < h_26)) && (ix_36 >= 0)) && (ix_36 < w_27))) {
                            pixel_37 = img_24[(int)(iy_35)][(int)(ix_36)];
                        }
                        acc_32 = (acc_32 + (kernel_25[(int)(ky_33)][(int)(kx_34)] * (1.0 * pixel_37)));
                        kx_34 = (kx_34 + 1);
                    }
                    ky_33 = (ky_33 + 1);
                }
                row_30 = (Enumerable.ToArray(Enumerable.Append<long>(row_30, _atoi(acc_32))));
                x_31 = (x_31 + 1);
            }
            out_28 = (Enumerable.ToArray(Enumerable.Append<long[]>(out_28, row_30)));
            y_29 = (y_29 + 1);
        };
        return out_28;
    }

    public static long[] sort_ints(long[] xs_38) {
        long[] arr_39 = xs_38;
        long i_40 = 0;
        while ((i_40 < arr_39.Length)) {
            long j_41 = 0;
            while ((j_41 < ((arr_39.Length - 1) - i_40))) {
                if ((arr_39[(int)(j_41)] > arr_39[(int)((j_41 + 1))])) {
                    long tmp_42 = arr_39[(int)(j_41)];
                    arr_39[j_41] = arr_39[(int)((j_41 + 1))];
                    arr_39[(j_41 + 1)] = tmp_42;
                }
                j_41 = (j_41 + 1);
            }
            i_40 = (i_40 + 1);
        };
        return arr_39;
    }

    public static long[][] median_filter(long[][] img_43, long k_44) {
        long h_45 = img_43.Length;
        long w_46 = img_43[(int)(0)].Length;
        long offset_47 = (k_44 / 2);
        long[][] out_48 = new long[][]{};
        long y_49 = 0;
        while ((y_49 < h_45)) {
            long[] row_50 = new long[]{};
            long x_51 = 0;
            while ((x_51 < w_46)) {
                long[] vals_52 = new long[]{};
                long ky_53 = 0;
                while ((ky_53 < k_44)) {
                    long kx_54 = 0;
                    while ((kx_54 < k_44)) {
                        long iy_55 = ((y_49 + ky_53) - offset_47);
                        long ix_56 = ((x_51 + kx_54) - offset_47);
                        long pixel_57 = 0;
                        if (((((iy_55 >= 0) && (iy_55 < h_45)) && (ix_56 >= 0)) && (ix_56 < w_46))) {
                            pixel_57 = img_43[(int)(iy_55)][(int)(ix_56)];
                        }
                        vals_52 = (Enumerable.ToArray(Enumerable.Append<long>(vals_52, pixel_57)));
                        kx_54 = (kx_54 + 1);
                    }
                    ky_53 = (ky_53 + 1);
                }
                long[] sorted_58 = Program.sort_ints(vals_52);
                row_50 = (Enumerable.ToArray(Enumerable.Append<long>(row_50, sorted_58[(int)((sorted_58.Length / 2))])));
                x_51 = (x_51 + 1);
            }
            out_48 = (Enumerable.ToArray(Enumerable.Append<long[]>(out_48, row_50)));
            y_49 = (y_49 + 1);
        };
        return out_48;
    }

    public static long iabs(long x_59) {
        if ((x_59 < 0)) {
            return -x_59;
        };
        return x_59;
    }

    public static long[][] sobel_filter(long[][] img_60) {
        long[][] gx_61 = new long[][]{new long[]{1, 0, -1}, new long[]{2, 0, -2}, new long[]{1, 0, -1}};
        long[][] gy_62 = new long[][]{new long[]{1, 2, 1}, new long[]{0, 0, 0}, new long[]{-1, -2, -1}};
        long h_63 = img_60.Length;
        long w_64 = img_60[(int)(0)].Length;
        long[][] out_65 = new long[][]{};
        long y_66 = 0;
        while ((y_66 < h_63)) {
            long[] row_67 = new long[]{};
            long x_68 = 0;
            while ((x_68 < w_64)) {
                long sx_69 = 0;
                long sy_70 = 0;
                long ky_71 = 0;
                while ((ky_71 < 3)) {
                    long kx_72 = 0;
                    while ((kx_72 < 3)) {
                        long iy_73 = ((y_66 + ky_71) - 1);
                        long ix_74 = ((x_68 + kx_72) - 1);
                        long pixel_75 = 0;
                        if (((((iy_73 >= 0) && (iy_73 < h_63)) && (ix_74 >= 0)) && (ix_74 < w_64))) {
                            pixel_75 = img_60[(int)(iy_73)][(int)(ix_74)];
                        }
                        sx_69 = (sx_69 + (gx_61[(int)(ky_71)][(int)(kx_72)] * pixel_75));
                        sy_70 = (sy_70 + (gy_62[(int)(ky_71)][(int)(kx_72)] * pixel_75));
                        kx_72 = (kx_72 + 1);
                    }
                    ky_71 = (ky_71 + 1);
                }
                row_67 = (Enumerable.ToArray(Enumerable.Append<long>(row_67, (Program.iabs(sx_69) + Program.iabs(sy_70)))));
                x_68 = (x_68 + 1);
            }
            out_65 = (Enumerable.ToArray(Enumerable.Append<long[]>(out_65, row_67)));
            y_66 = (y_66 + 1);
        };
        return out_65;
    }

    public static long[] get_neighbors_pixel(long[][] img_76, long x_77, long y_78) {
        long h_79 = img_76.Length;
        long w_80 = img_76[(int)(0)].Length;
        long[] neighbors_81 = new long[]{};
        long dy_82 = -1;
        while ((dy_82 <= 1)) {
            long dx_83 = -1;
            while ((dx_83 <= 1)) {
                if ((!((dx_83 == 0) && (dy_82 == 0)))) {
                    long ny_84 = (y_78 + dy_82);
                    long nx_85 = (x_77 + dx_83);
                    long val_86 = 0;
                    if (((((ny_84 >= 0) && (ny_84 < h_79)) && (nx_85 >= 0)) && (nx_85 < w_80))) {
                        val_86 = img_76[(int)(ny_84)][(int)(nx_85)];
                    }
                    neighbors_81 = (Enumerable.ToArray(Enumerable.Append<long>(neighbors_81, val_86)));
                }
                dx_83 = (dx_83 + 1);
            }
            dy_82 = (dy_82 + 1);
        };
        return neighbors_81;
    }

    public static long pow2(long e_87) {
        long r_88 = 1;
        long i_89 = 0;
        while ((i_89 < e_87)) {
            r_88 = (r_88 * 2);
            i_89 = (i_89 + 1);
        };
        return r_88;
    }

    public static long local_binary_value(long[][] img_90, long x_91, long y_92) {
        long center_93 = img_90[(int)(y_92)][(int)(x_91)];
        long[] neighbors_94 = Program.get_neighbors_pixel(img_90, x_91, y_92);
        long v_95 = 0;
        long i_96 = 0;
        while ((i_96 < neighbors_94.Length)) {
            if ((neighbors_94[(int)(i_96)] >= center_93)) {
                v_95 = (v_95 + Program.pow2(i_96));
            }
            i_96 = (i_96 + 1);
        };
        return v_95;
    }

    public static long[][] local_binary_pattern(long[][] img_97) {
        long h_98 = img_97.Length;
        long w_99 = img_97[(int)(0)].Length;
        long[][] out_100 = new long[][]{};
        long y_101 = 0;
        while ((y_101 < h_98)) {
            long[] row_102 = new long[]{};
            long x_103 = 0;
            while ((x_103 < w_99)) {
                row_102 = (Enumerable.ToArray(Enumerable.Append<long>(row_102, Program.local_binary_value(img_97, x_103, y_101))));
                x_103 = (x_103 + 1);
            }
            out_100 = (Enumerable.ToArray(Enumerable.Append<long[]>(out_100, row_102)));
            y_101 = (y_101 + 1);
        };
        return out_100;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(negative_105));
            Console.WriteLine(Program._fmtTop(contrast_106));
            Console.WriteLine(Program._fmtTop(kernel_107));
            Console.WriteLine(Program._fmtTop(convolved_109));
            Console.WriteLine(Program._fmtTop(medianed_110));
            Console.WriteLine(Program._fmtTop(sobel_111));
            Console.WriteLine(Program._fmtTop(lbp_img_112));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
