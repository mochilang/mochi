// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] image_12 = new long[][]{new long[]{10, 10, 10, 10, 10}, new long[]{10, 20, 30, 20, 10}, new long[]{10, 30, 40, 30, 10}, new long[]{10, 20, 30, 20, 10}, new long[]{10, 10, 10, 10, 10}};
    static long i_13 = 0;
    public static long get_neighbors_pixel(long[][] image_0, long x_1, long y_2, long center_3) {
        if (((x_1 < 0) || (y_2 < 0))) {
            return 0;
        };
        if (((x_1 >= image_0.Length) || (y_2 >= image_0[(int)(0)].Length))) {
            return 0;
        };
        if ((image_0[(int)(x_1)][(int)(y_2)] >= center_3)) {
            return 1;
        };
        return 0;
    }

    public static long local_binary_value(long[][] image_4, long x_5, long y_6) {
        long center_7 = image_4[(int)(x_5)][(int)(y_6)];
        long[] powers_8 = new long[]{1, 2, 4, 8, 16, 32, 64, 128};
        long[] neighbors_9 = new long[]{Program.get_neighbors_pixel(image_4, (x_5 - 1), (y_6 + 1), center_7), Program.get_neighbors_pixel(image_4, x_5, (y_6 + 1), center_7), Program.get_neighbors_pixel(image_4, (x_5 - 1), y_6, center_7), Program.get_neighbors_pixel(image_4, (x_5 + 1), (y_6 + 1), center_7), Program.get_neighbors_pixel(image_4, (x_5 + 1), y_6, center_7), Program.get_neighbors_pixel(image_4, (x_5 + 1), (y_6 - 1), center_7), Program.get_neighbors_pixel(image_4, x_5, (y_6 - 1), center_7), Program.get_neighbors_pixel(image_4, (x_5 - 1), (y_6 - 1), center_7)};
        long sum_10 = 0;
        long i_11 = 0;
        while ((i_11 < neighbors_9.Length)) {
            sum_10 = (sum_10 + (neighbors_9[(int)(i_11)] * powers_8[(int)(i_11)]));
            i_11 = (i_11 + 1);
        };
        return sum_10;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_13 < image_12.Length)) {
                long j_14 = 0;
                string line_15 = "";
                while ((j_14 < image_12[(int)(0)].Length)) {
                    long value_16 = Program.local_binary_value(image_12, i_13, j_14);
                    line_15 = (line_15 + _fmtStr(value_16));
                    if ((j_14 < (image_12[(int)(0)].Length - 1))) {
                        line_15 = (line_15 + " ");
                    }
                    j_14 = (j_14 + 1);
                }
                Console.WriteLine(Program._fmtTop(line_15));
                i_13 = (i_13 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
