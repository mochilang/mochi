// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static long[][] img_33 = new long[][]{new long[]{52, 55, 61, 59, 79}, new long[]{62, 59, 55, 104, 94}, new long[]{63, 65, 66, 113, 144}, new long[]{68, 70, 70, 126, 154}, new long[]{70, 72, 69, 128, 155}};
    static long[][] gaussian3_34 = Program.gaussian_filter(img_33, 3, 1.0);
    static long[][] gaussian5_35 = Program.gaussian_filter(img_33, 5, 0.8);
    public static double expApprox(double x_1) {
        double sum_2 = 1.0;
        double term_3 = 1.0;
        long n_4 = 1;
        while ((n_4 < 10)) {
            term_3 = ((term_3 * x_1) / Convert.ToDouble(n_4));
            sum_2 = (sum_2 + term_3);
            n_4 = (n_4 + 1);
        };
        return sum_2;
    }

    public static double[][] gen_gaussian_kernel(long k_size_5, double sigma_6) {
        long center_7 = (k_size_5 / 2);
        double[][] kernel_8 = new double[][]{};
        long i_9 = 0;
        while ((i_9 < k_size_5)) {
            double[] row_10 = new double[]{};
            long j_11 = 0;
            while ((j_11 < k_size_5)) {
                double x_12 = Convert.ToDouble((i_9 - center_7));
                double y_13 = Convert.ToDouble((j_11 - center_7));
                double exponent_14 = -(((x_12 * x_12) + (y_13 * y_13)) / ((2.0 * sigma_6) * sigma_6));
                double value_15 = ((1.0 / ((2.0 * PI_0) * sigma_6)) * Program.expApprox(exponent_14));
                row_10 = (Enumerable.ToArray(Enumerable.Append<double>(row_10, value_15)));
                j_11 = (j_11 + 1);
            }
            kernel_8 = (Enumerable.ToArray(Enumerable.Append<double[]>(kernel_8, row_10)));
            i_9 = (i_9 + 1);
        };
        return kernel_8;
    }

    public static long[][] gaussian_filter(long[][] image_16, long k_size_17, double sigma_18) {
        long height_19 = image_16.Length;
        long width_20 = image_16[(int)(0)].Length;
        long dst_height_21 = ((height_19 - k_size_17) + 1);
        long dst_width_22 = ((width_20 - k_size_17) + 1);
        double[][] kernel_23 = Program.gen_gaussian_kernel(k_size_17, sigma_18);
        long[][] dst_24 = new long[][]{};
        long i_25 = 0;
        while ((i_25 < dst_height_21)) {
            long[] row_26 = new long[]{};
            long j_27 = 0;
            while ((j_27 < dst_width_22)) {
                double sum_28 = 0.0;
                long ki_29 = 0;
                while ((ki_29 < k_size_17)) {
                    long kj_30 = 0;
                    while ((kj_30 < k_size_17)) {
                        sum_28 = (sum_28 + (Convert.ToDouble(image_16[(int)((i_25 + ki_29))][(int)((j_27 + kj_30))]) * kernel_23[(int)(ki_29)][(int)(kj_30)]));
                        kj_30 = (kj_30 + 1);
                    }
                    ki_29 = (ki_29 + 1);
                }
                row_26 = (Enumerable.ToArray(Enumerable.Append<long>(row_26, Convert.ToInt64(sum_28))));
                j_27 = (j_27 + 1);
            }
            dst_24 = (Enumerable.ToArray(Enumerable.Append<long[]>(dst_24, row_26)));
            i_25 = (i_25 + 1);
        };
        return dst_24;
    }

    public static void print_image(long[][] image_31) {
        long i_32 = 0;
        while ((i_32 < image_31.Length)) {
            Console.WriteLine(Program._fmtTop(image_31[(int)(i_32)]));
            i_32 = (i_32 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_image(gaussian3_34);
            Program.print_image(gaussian5_35);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
