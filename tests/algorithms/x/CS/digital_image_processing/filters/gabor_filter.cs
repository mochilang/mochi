// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double[][] kernel_38 = Program.gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0);
    public static double to_radians(double deg_1) {
        return ((deg_1 * PI_0) / 180.0);
    }

    public static double sin_taylor(double x_2) {
        double term_3 = x_2;
        double sum_4 = x_2;
        long i_5 = 1;
        while ((i_5 < 10)) {
            double k1_6 = (2.0 * Convert.ToDouble(i_5));
            double k2_7 = (k1_6 + 1.0);
            term_3 = (((-term_3 * x_2) * x_2) / (k1_6 * k2_7));
            sum_4 = (sum_4 + term_3);
            i_5 = (i_5 + 1);
        };
        return sum_4;
    }

    public static double cos_taylor(double x_8) {
        double term_9 = 1.0;
        double sum_10 = 1.0;
        long i_11 = 1;
        while ((i_11 < 10)) {
            double k1_12 = ((2.0 * Convert.ToDouble(i_11)) - 1.0);
            double k2_13 = (2.0 * Convert.ToDouble(i_11));
            term_9 = (((-term_9 * x_8) * x_8) / (k1_12 * k2_13));
            sum_10 = (sum_10 + term_9);
            i_11 = (i_11 + 1);
        };
        return sum_10;
    }

    public static double exp_taylor(double x_14) {
        double term_15 = 1.0;
        double sum_16 = 1.0;
        double i_17 = 1.0;
        while ((i_17 < 20.0)) {
            term_15 = ((term_15 * x_14) / i_17);
            sum_16 = (sum_16 + term_15);
            i_17 = (i_17 + 1.0);
        };
        return sum_16;
    }

    public static double[][] gabor_filter_kernel(long ksize_18, double sigma_19, double theta_20, double lambd_21, double gamma_22, double psi_23) {
        long size_24 = ksize_18;
        if ((_mod(size_24, 2) == 0)) {
            size_24 = (size_24 + 1);
        };
        double[][] gabor_25 = new double[][]{};
        long y_26 = 0;
        while ((y_26 < size_24)) {
            double[] row_27 = new double[]{};
            long x_28 = 0;
            while ((x_28 < size_24)) {
                double px_29 = Convert.ToDouble((x_28 - (size_24 / 2)));
                double py_30 = Convert.ToDouble((y_26 - (size_24 / 2)));
                double rad_31 = Program.to_radians(theta_20);
                double cos_theta_32 = Program.cos_taylor(rad_31);
                double sin_theta_33 = Program.sin_taylor(rad_31);
                double x_rot_34 = ((cos_theta_32 * px_29) + (sin_theta_33 * py_30));
                double y_rot_35 = ((-sin_theta_33 * px_29) + (cos_theta_32 * py_30));
                double exponent_36 = (-((x_rot_34 * x_rot_34) + (((gamma_22 * gamma_22) * y_rot_35) * y_rot_35)) / ((2.0 * sigma_19) * sigma_19));
                double value_37 = (Program.exp_taylor(exponent_36) * Program.cos_taylor(((((2.0 * PI_0) * x_rot_34) / lambd_21) + psi_23)));
                row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, value_37)));
                x_28 = (x_28 + 1);
            }
            gabor_25 = (Enumerable.ToArray(Enumerable.Append<double[]>(gabor_25, row_27)));
            y_26 = (y_26 + 1);
        };
        return gabor_25;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(kernel_38));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
