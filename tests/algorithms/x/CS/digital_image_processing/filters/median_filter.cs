// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] insertion_sort(long[] a_0) {
        long i_1 = 1;
        while ((i_1 < a_0.Length)) {
            long key_2 = a_0[(int)(i_1)];
            long j_3 = (i_1 - 1);
            while (((j_3 >= 0) && (a_0[(int)(j_3)] > key_2))) {
                a_0[(j_3 + 1)] = a_0[(int)(j_3)];
                j_3 = (j_3 - 1);
            }
            a_0[(j_3 + 1)] = key_2;
            i_1 = (i_1 + 1);
        };
        return a_0;
    }

    public static long[][] median_filter(long[][] gray_img_4, long mask_5) {
        long rows_6 = gray_img_4.Length;
        long cols_7 = gray_img_4[(int)(0)].Length;
        long bd_8 = (mask_5 / 2);
        long[][] result_9 = new long[][]{};
        long i_10 = 0;
        while ((i_10 < rows_6)) {
            long[] row_11 = new long[]{};
            long j_12 = 0;
            while ((j_12 < cols_7)) {
                row_11 = (Enumerable.ToArray(Enumerable.Append<long>(row_11, 0)));
                j_12 = (j_12 + 1);
            }
            result_9 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_9, row_11)));
            i_10 = (i_10 + 1);
        };
        i_10 = bd_8;
        while ((i_10 < (rows_6 - bd_8))) {
            long j_13 = bd_8;
            while ((j_13 < (cols_7 - bd_8))) {
                long[] kernel_14 = new long[]{};
                long x_15 = (i_10 - bd_8);
                while ((x_15 <= (i_10 + bd_8))) {
                    long y_16 = (j_13 - bd_8);
                    while ((y_16 <= (j_13 + bd_8))) {
                        kernel_14 = (Enumerable.ToArray(Enumerable.Append<long>(kernel_14, gray_img_4[(int)(x_15)][(int)(y_16)])));
                        y_16 = (y_16 + 1);
                    }
                    x_15 = (x_15 + 1);
                }
                kernel_14 = Program.insertion_sort(kernel_14);
                long idx_17 = ((mask_5 * mask_5) / 2);
                result_9[(int)(i_10)][j_13] = kernel_14[(int)(idx_17)];
                j_13 = (j_13 + 1);
            }
            i_10 = (i_10 + 1);
        };
        return result_9;
    }

    public static void main() {
        long[][] img_18 = new long[][]{new long[]{10, 10, 10, 10, 10}, new long[]{10, 255, 10, 255, 10}, new long[]{10, 10, 10, 10, 10}, new long[]{10, 255, 10, 255, 10}, new long[]{10, 10, 10, 10, 10}};
        long[][] filtered_19 = Program.median_filter(img_18, 3);
        Console.WriteLine(Program._fmtTop(filtered_19));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
