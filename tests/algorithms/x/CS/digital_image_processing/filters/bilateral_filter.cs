// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double[][] img_64 = new double[][]{new double[]{0.2, 0.3, 0.4}, new double[]{0.3, 0.4, 0.5}, new double[]{0.4, 0.5, 0.6}};
    static double result_65 = Program.bilateral_filter(img_64, 1.0, 1.0, 3);
    public static double abs(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double sqrtApprox(double x_2) {
        if ((x_2 <= 0.0)) {
            return 0.0;
        };
        double guess_3 = x_2;
        long i_4 = 0;
        while ((i_4 < 10)) {
            guess_3 = ((guess_3 + (x_2 / guess_3)) / 2.0);
            i_4 = (i_4 + 1);
        };
        return guess_3;
    }

    public static double expApprox(double x_5) {
        double term_6 = 1.0;
        double sum_7 = 1.0;
        long n_8 = 1;
        while ((n_8 < 10)) {
            term_6 = ((term_6 * x_5) / Convert.ToDouble(n_8));
            sum_7 = (sum_7 + term_6);
            n_8 = (n_8 + 1);
        };
        return sum_7;
    }

    public static double[][] vec_gaussian(double[][] mat_9, double variance_10) {
        long i_11 = 0;
        double[][] out_12 = new double[][]{};
        while ((i_11 < mat_9.Length)) {
            double[] row_13 = new double[]{};
            long j_14 = 0;
            while ((j_14 < mat_9[(int)(i_11)].Length)) {
                double v_15 = mat_9[(int)(i_11)][(int)(j_14)];
                double e_16 = (-(v_15 * v_15) / (2.0 * variance_10));
                row_13 = (row_13.Concat(new double[]{Program.expApprox(e_16)}).ToArray());
                j_14 = (j_14 + 1);
            }
            out_12 = (out_12.Concat(new double[][]{row_13}).ToArray());
            i_11 = (i_11 + 1);
        };
        return out_12;
    }

    public static double[][] get_slice(double[][] img_17, long x_18, long y_19, long kernel_size_20) {
        long half_21 = (kernel_size_20 / 2);
        long i_22 = (x_18 - half_21);
        double[][] slice_23 = new double[][]{};
        while ((i_22 <= (x_18 + half_21))) {
            double[] row_24 = new double[]{};
            long j_25 = (y_19 - half_21);
            while ((j_25 <= (y_19 + half_21))) {
                row_24 = (row_24.Concat(new double[]{img_17[(int)(i_22)][(int)(j_25)]}).ToArray());
                j_25 = (j_25 + 1);
            }
            slice_23 = (slice_23.Concat(new double[][]{row_24}).ToArray());
            i_22 = (i_22 + 1);
        };
        return slice_23;
    }

    public static double[][] get_gauss_kernel(long kernel_size_26, double spatial_variance_27) {
        double[][] arr_28 = new double[][]{};
        long i_29 = 0;
        while ((i_29 < kernel_size_26)) {
            double[] row_30 = new double[]{};
            long j_31 = 0;
            while ((j_31 < kernel_size_26)) {
                double di_32 = Convert.ToDouble((i_29 - (kernel_size_26 / 2)));
                double dj_33 = Convert.ToDouble((j_31 - (kernel_size_26 / 2)));
                double dist_34 = Program.sqrtApprox(((di_32 * di_32) + (dj_33 * dj_33)));
                row_30 = (row_30.Concat(new double[]{dist_34}).ToArray());
                j_31 = (j_31 + 1);
            }
            arr_28 = (arr_28.Concat(new double[][]{row_30}).ToArray());
            i_29 = (i_29 + 1);
        };
        return Program.vec_gaussian(arr_28, spatial_variance_27);
    }

    public static double[][] elementwise_sub(double[][] mat_35, double value_36) {
        double[][] res_37 = new double[][]{};
        long i_38 = 0;
        while ((i_38 < mat_35.Length)) {
            double[] row_39 = new double[]{};
            long j_40 = 0;
            while ((j_40 < mat_35[(int)(i_38)].Length)) {
                row_39 = (row_39.Concat(new double[]{(mat_35[(int)(i_38)][(int)(j_40)] - value_36)}).ToArray());
                j_40 = (j_40 + 1);
            }
            res_37 = (res_37.Concat(new double[][]{row_39}).ToArray());
            i_38 = (i_38 + 1);
        };
        return res_37;
    }

    public static double[][] elementwise_mul(double[][] a_41, double[][] b_42) {
        double[][] res_43 = new double[][]{};
        long i_44 = 0;
        while ((i_44 < a_41.Length)) {
            double[] row_45 = new double[]{};
            long j_46 = 0;
            while ((j_46 < a_41[(int)(i_44)].Length)) {
                row_45 = (row_45.Concat(new double[]{(a_41[(int)(i_44)][(int)(j_46)] * b_42[(int)(i_44)][(int)(j_46)])}).ToArray());
                j_46 = (j_46 + 1);
            }
            res_43 = (res_43.Concat(new double[][]{row_45}).ToArray());
            i_44 = (i_44 + 1);
        };
        return res_43;
    }

    public static double matrix_sum(double[][] mat_47) {
        double total_48 = 0.0;
        long i_49 = 0;
        while ((i_49 < mat_47.Length)) {
            long j_50 = 0;
            while ((j_50 < mat_47[(int)(i_49)].Length)) {
                total_48 = (total_48 + mat_47[(int)(i_49)][(int)(j_50)]);
                j_50 = (j_50 + 1);
            }
            i_49 = (i_49 + 1);
        };
        return total_48;
    }

    public static double bilateral_filter(double[][] img_51, double spatial_variance_52, double intensity_variance_53, long kernel_size_54) {
        double[][] gauss_ker_55 = Program.get_gauss_kernel(kernel_size_54, spatial_variance_52);
        double[][] img_s_56 = img_51;
        double center_57 = img_s_56[(int)((kernel_size_54 / 2))][(int)((kernel_size_54 / 2))];
        double[][] img_i_58 = Program.elementwise_sub(img_s_56, center_57);
        double[][] img_ig_59 = Program.vec_gaussian(img_i_58, intensity_variance_53);
        double[][] weights_60 = Program.elementwise_mul(gauss_ker_55, img_ig_59);
        double[][] vals_61 = Program.elementwise_mul(img_s_56, weights_60);
        double sum_weights_62 = Program.matrix_sum(weights_60);
        double val_63 = 0.0;
        if ((sum_weights_62 != 0.0)) {
            val_63 = (Program.matrix_sum(vals_61) / sum_weights_62);
        };
        return val_63;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(result_65));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
