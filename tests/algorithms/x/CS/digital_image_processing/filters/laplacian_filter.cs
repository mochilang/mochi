// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] image_23 = new long[][]{new long[]{0, 0, 0, 0, 0}, new long[]{0, 10, 10, 10, 0}, new long[]{0, 10, 10, 10, 0}, new long[]{0, 10, 10, 10, 0}, new long[]{0, 0, 0, 0, 0}};
    static long[][] result_24 = Program.my_laplacian(image_23, 3);
    static long r_25 = 0;
    public static long[][] make_matrix(long rows_0, long cols_1, long value_2) {
        long[][] result_3 = new long[][]{};
        long i_4 = 0;
        while ((i_4 < rows_0)) {
            long[] row_5 = new long[]{};
            long j_6 = 0;
            while ((j_6 < cols_1)) {
                row_5 = (Enumerable.ToArray(Enumerable.Append<long>(row_5, value_2)));
                j_6 = (j_6 + 1);
            }
            result_3 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_3, row_5)));
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static long[][] my_laplacian(long[][] src_7, long ksize_8) {
        long[][] kernel_9 = new long[][]{};
        if ((ksize_8 == 1)) {
            kernel_9 = new long[][]{new long[]{0, -1, 0}, new long[]{-1, 4, -1}, new long[]{0, -1, 0}};
        } else if ((ksize_8 == 3)) {
            kernel_9 = new long[][]{new long[]{0, 1, 0}, new long[]{1, -4, 1}, new long[]{0, 1, 0}};
        } else if ((ksize_8 == 5)) {
            kernel_9 = new long[][]{new long[]{0, 0, -1, 0, 0}, new long[]{0, -1, -2, -1, 0}, new long[]{-1, -2, 16, -2, -1}, new long[]{0, -1, -2, -1, 0}, new long[]{0, 0, -1, 0, 0}};
        } else if ((ksize_8 == 7)) {
            kernel_9 = new long[][]{new long[]{0, 0, 0, -1, 0, 0, 0}, new long[]{0, 0, -2, -3, -2, 0, 0}, new long[]{0, -2, -7, -10, -7, -2, 0}, new long[]{-1, -3, -10, 68, -10, -3, -1}, new long[]{0, -2, -7, -10, -7, -2, 0}, new long[]{0, 0, -2, -3, -2, 0, 0}, new long[]{0, 0, 0, -1, 0, 0, 0}};
        } else {
            throw new Exception("ksize must be in (1, 3, 5, 7)");
        };
        long rows_10 = src_7.Length;
        long cols_11 = src_7[(int)(0)].Length;
        long k_12 = kernel_9.Length;
        long pad_13 = (k_12 / 2);
        long[][] output_14 = Program.make_matrix(rows_10, cols_11, 0);
        long i_15 = 0;
        while ((i_15 < rows_10)) {
            long j_16 = 0;
            while ((j_16 < cols_11)) {
                long sum_17 = 0;
                long ki_18 = 0;
                while ((ki_18 < k_12)) {
                    long kj_19 = 0;
                    while ((kj_19 < k_12)) {
                        long ii_20 = ((i_15 + ki_18) - pad_13);
                        long jj_21 = ((j_16 + kj_19) - pad_13);
                        long val_22 = 0;
                        if (((((ii_20 >= 0) && (ii_20 < rows_10)) && (jj_21 >= 0)) && (jj_21 < cols_11))) {
                            val_22 = src_7[(int)(ii_20)][(int)(jj_21)];
                        }
                        sum_17 = (sum_17 + (val_22 * kernel_9[(int)(ki_18)][(int)(kj_19)]));
                        kj_19 = (kj_19 + 1);
                    }
                    ki_18 = (ki_18 + 1);
                }
                output_14[(int)(i_15)][j_16] = sum_17;
                j_16 = (j_16 + 1);
            }
            i_15 = (i_15 + 1);
        };
        return output_14;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((r_25 < result_24.Length)) {
                string row_str_26 = "[";
                long c_27 = 0;
                while ((c_27 < result_24[(int)(r_25)].Length)) {
                    row_str_26 = (row_str_26 + _fmtStr(result_24[(int)(r_25)][(int)(c_27)]));
                    if (((c_27 + 1) < result_24[(int)(r_25)].Length)) {
                        row_str_26 = (row_str_26 + ", ");
                    }
                    c_27 = (c_27 + 1);
                }
                row_str_26 = (row_str_26 + "]");
                Console.WriteLine(Program._fmtTop(row_str_26));
                r_25 = (r_25 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
