// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] image_52 = new long[][]{new long[]{1, 2, 3, 0, 0}, new long[]{4, 5, 6, 0, 0}, new long[]{7, 8, 9, 0, 0}, new long[]{0, 0, 0, 0, 0}, new long[]{0, 0, 0, 0, 0}};
    static long[][] laplace_kernel_53 = new long[][]{new long[]{0, 1, 0}, new long[]{1, -4, 1}, new long[]{0, 1, 0}};
    static long[][] result_54 = Program.img_convolve(image_52, laplace_kernel_53);
    public static long[][] pad_edge(long[][] image_0, long pad_size_1) {
        long height_2 = image_0.Length;
        long width_3 = image_0[(int)(0)].Length;
        long new_height_4 = (height_2 + (pad_size_1 * 2));
        long new_width_5 = (width_3 + (pad_size_1 * 2));
        long[][] padded_6 = new long[][]{};
        long i_7 = 0;
        while ((i_7 < new_height_4)) {
            long[] row_8 = new long[]{};
            long src_i_9 = i_7;
            if ((src_i_9 < pad_size_1)) {
                src_i_9 = 0;
            }
            if ((src_i_9 >= (height_2 + pad_size_1))) {
                src_i_9 = (height_2 - 1);
            } else {
                src_i_9 = (src_i_9 - pad_size_1);
            }
            long j_10 = 0;
            while ((j_10 < new_width_5)) {
                long src_j_11 = j_10;
                if ((src_j_11 < pad_size_1)) {
                    src_j_11 = 0;
                }
                if ((src_j_11 >= (width_3 + pad_size_1))) {
                    src_j_11 = (width_3 - 1);
                } else {
                    src_j_11 = (src_j_11 - pad_size_1);
                }
                row_8 = (Enumerable.ToArray(Enumerable.Append<long>(row_8, image_0[(int)(src_i_9)][(int)(src_j_11)])));
                j_10 = (j_10 + 1);
            }
            padded_6 = (Enumerable.ToArray(Enumerable.Append<long[]>(padded_6, row_8)));
            i_7 = (i_7 + 1);
        };
        return padded_6;
    }

    public static long[][] im2col(long[][] image_12, long block_h_13, long block_w_14) {
        long rows_15 = image_12.Length;
        long cols_16 = image_12[(int)(0)].Length;
        long dst_height_17 = ((rows_15 - block_h_13) + 1);
        long dst_width_18 = ((cols_16 - block_w_14) + 1);
        long[][] image_array_19 = new long[][]{};
        long i_20 = 0;
        while ((i_20 < dst_height_17)) {
            long j_21 = 0;
            while ((j_21 < dst_width_18)) {
                long[] window_22 = new long[]{};
                long bi_23 = 0;
                while ((bi_23 < block_h_13)) {
                    long bj_24 = 0;
                    while ((bj_24 < block_w_14)) {
                        window_22 = (Enumerable.ToArray(Enumerable.Append<long>(window_22, image_12[(int)((i_20 + bi_23))][(int)((j_21 + bj_24))])));
                        bj_24 = (bj_24 + 1);
                    }
                    bi_23 = (bi_23 + 1);
                }
                image_array_19 = (Enumerable.ToArray(Enumerable.Append<long[]>(image_array_19, window_22)));
                j_21 = (j_21 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return image_array_19;
    }

    public static long[] flatten(long[][] matrix_25) {
        long[] out_26 = new long[]{};
        long i_27 = 0;
        while ((i_27 < matrix_25.Length)) {
            long j_28 = 0;
            while ((j_28 < matrix_25[(int)(i_27)].Length)) {
                out_26 = (Enumerable.ToArray(Enumerable.Append<long>(out_26, matrix_25[(int)(i_27)][(int)(j_28)])));
                j_28 = (j_28 + 1);
            }
            i_27 = (i_27 + 1);
        };
        return out_26;
    }

    public static long dot(long[] a_29, long[] b_30) {
        long sum_31 = 0;
        long i_32 = 0;
        while ((i_32 < a_29.Length)) {
            sum_31 = (sum_31 + (a_29[(int)(i_32)] * b_30[(int)(i_32)]));
            i_32 = (i_32 + 1);
        };
        return sum_31;
    }

    public static long[][] img_convolve(long[][] image_33, long[][] kernel_34) {
        long height_35 = image_33.Length;
        long width_36 = image_33[(int)(0)].Length;
        long k_size_37 = kernel_34.Length;
        long pad_size_38 = (k_size_37 / 2);
        long[][] padded_39 = Program.pad_edge(image_33, pad_size_38);
        long[][] image_array_40 = Program.im2col(padded_39, k_size_37, k_size_37);
        long[] kernel_flat_41 = Program.flatten(kernel_34);
        long[][] dst_42 = new long[][]{};
        long idx_43 = 0;
        long i_44 = 0;
        while ((i_44 < height_35)) {
            long[] row_45 = new long[]{};
            long j_46 = 0;
            while ((j_46 < width_36)) {
                long val_47 = Program.dot(image_array_40[(int)(idx_43)], kernel_flat_41);
                row_45 = (Enumerable.ToArray(Enumerable.Append<long>(row_45, val_47)));
                idx_43 = (idx_43 + 1);
                j_46 = (j_46 + 1);
            }
            dst_42 = (Enumerable.ToArray(Enumerable.Append<long[]>(dst_42, row_45)));
            i_44 = (i_44 + 1);
        };
        return dst_42;
    }

    public static void print_matrix(long[][] m_48) {
        long i_49 = 0;
        while ((i_49 < m_48.Length)) {
            string line_50 = "";
            long j_51 = 0;
            while ((j_51 < m_48[(int)(i_49)].Length)) {
                if ((j_51 > 0)) {
                    line_50 = (line_50 + " ");
                }
                line_50 = (line_50 + _fmtStr(m_48[(int)(i_49)][(int)(j_51)]));
                j_51 = (j_51 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_50));
            i_49 = (i_49 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_matrix(result_54);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
