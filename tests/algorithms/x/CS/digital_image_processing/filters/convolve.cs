// Generated by Mochi 0.10.72 (commit b9a682dda0) on 2025-08-24 22:16 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static BigInteger[][] image_52 = new BigInteger[][]{new BigInteger[]{1, 2, 3, 0, 0}, new BigInteger[]{4, 5, 6, 0, 0}, new BigInteger[]{7, 8, 9, 0, 0}, new BigInteger[]{0, 0, 0, 0, 0}, new BigInteger[]{0, 0, 0, 0, 0}};
    static BigInteger[][] laplace_kernel_53 = new BigInteger[][]{new BigInteger[]{0, 1, 0}, new BigInteger[]{1, -4, 1}, new BigInteger[]{0, 1, 0}};
    static BigInteger[][] result_54 = Program.img_convolve(image_52, laplace_kernel_53);
    public static BigInteger[][] pad_edge(BigInteger[][] image_0, BigInteger pad_size_1) {
        long height_2 = image_0.Length;
        long width_3 = _idx(image_0, (long)(0)).Length;
        BigInteger new_height_4 = (height_2 + (pad_size_1 * 2));
        BigInteger new_width_5 = (width_3 + (pad_size_1 * 2));
        BigInteger[][] padded_6 = new BigInteger[][]{};
        BigInteger i_7 = 0;
        while ((i_7 < new_height_4)) {
            BigInteger[] row_8 = new BigInteger[]{};
            BigInteger src_i_9 = i_7;
            if ((src_i_9 < pad_size_1)) {
                src_i_9 = 0;
            }
            if ((src_i_9 >= (height_2 + pad_size_1))) {
                src_i_9 = (height_2 - 1);
            } else {
                src_i_9 = (src_i_9 - pad_size_1);
            }
            BigInteger j_10 = 0;
            while ((j_10 < new_width_5)) {
                BigInteger src_j_11 = j_10;
                if ((src_j_11 < pad_size_1)) {
                    src_j_11 = 0;
                }
                if ((src_j_11 >= (width_3 + pad_size_1))) {
                    src_j_11 = (width_3 - 1);
                } else {
                    src_j_11 = (src_j_11 - pad_size_1);
                }
                row_8 = ((Func<BigInteger[]>)(() => { var _tmp = row_8.Cast<BigInteger>().ToList(); _tmp.Add(_idx(_idx(image_0, (long)(src_i_9)), (long)(src_j_11))); return _tmp.ToArray(); }))();
                j_10 = (j_10 + 1);
            }
            padded_6 = ((Func<BigInteger[][]>)(() => { var _tmp = padded_6.Cast<BigInteger[]>().ToList(); _tmp.Add(row_8); return _tmp.ToArray(); }))();
            i_7 = (i_7 + 1);
        };
        return padded_6;
    }

    public static BigInteger[][] im2col(BigInteger[][] image_12, BigInteger block_h_13, BigInteger block_w_14) {
        long rows_15 = image_12.Length;
        long cols_16 = _idx(image_12, (long)(0)).Length;
        BigInteger dst_height_17 = ((rows_15 - block_h_13) + 1);
        BigInteger dst_width_18 = ((cols_16 - block_w_14) + 1);
        BigInteger[][] image_array_19 = new BigInteger[][]{};
        BigInteger i_20 = 0;
        while ((i_20 < dst_height_17)) {
            BigInteger j_21 = 0;
            while ((j_21 < dst_width_18)) {
                BigInteger[] window_22 = new BigInteger[]{};
                BigInteger bi_23 = 0;
                while ((bi_23 < block_h_13)) {
                    BigInteger bj_24 = 0;
                    while ((bj_24 < block_w_14)) {
                        window_22 = ((Func<BigInteger[]>)(() => { var _tmp = window_22.Cast<BigInteger>().ToList(); _tmp.Add(_idx(_idx(image_12, (long)((i_20 + bi_23))), (long)((j_21 + bj_24)))); return _tmp.ToArray(); }))();
                        bj_24 = (bj_24 + 1);
                    }
                    bi_23 = (bi_23 + 1);
                }
                image_array_19 = ((Func<BigInteger[][]>)(() => { var _tmp = image_array_19.Cast<BigInteger[]>().ToList(); _tmp.Add(window_22); return _tmp.ToArray(); }))();
                j_21 = (j_21 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return image_array_19;
    }

    public static BigInteger[] flatten(BigInteger[][] matrix_25) {
        BigInteger[] out_26 = new BigInteger[]{};
        BigInteger i_27 = 0;
        while ((i_27 < matrix_25.Length)) {
            BigInteger j_28 = 0;
            while ((j_28 < _idx(matrix_25, (long)(i_27)).Length)) {
                out_26 = ((Func<BigInteger[]>)(() => { var _tmp = out_26.Cast<BigInteger>().ToList(); _tmp.Add(_idx(_idx(matrix_25, (long)(i_27)), (long)(j_28))); return _tmp.ToArray(); }))();
                j_28 = (j_28 + 1);
            }
            i_27 = (i_27 + 1);
        };
        return out_26;
    }

    public static BigInteger dot(BigInteger[] a_29, BigInteger[] b_30) {
        BigInteger sum_31 = 0;
        BigInteger i_32 = 0;
        while ((i_32 < a_29.Length)) {
            sum_31 = (sum_31 + (_idx(a_29, (long)(i_32)) * _idx(b_30, (long)(i_32))));
            i_32 = (i_32 + 1);
        };
        return sum_31;
    }

    public static BigInteger[][] img_convolve(BigInteger[][] image_33, BigInteger[][] kernel_34) {
        long height_35 = image_33.Length;
        long width_36 = _idx(image_33, (long)(0)).Length;
        long k_size_37 = kernel_34.Length;
        BigInteger pad_size_38 = (k_size_37 / 2);
        BigInteger[][] padded_39 = Program.pad_edge(image_33, pad_size_38);
        BigInteger[][] image_array_40 = Program.im2col(padded_39, k_size_37, k_size_37);
        BigInteger[] kernel_flat_41 = Program.flatten(kernel_34);
        BigInteger[][] dst_42 = new BigInteger[][]{};
        BigInteger idx_43 = 0;
        BigInteger i_44 = 0;
        while ((i_44 < height_35)) {
            BigInteger[] row_45 = new BigInteger[]{};
            BigInteger j_46 = 0;
            while ((j_46 < width_36)) {
                BigInteger val_47 = Program.dot(_idx(image_array_40, (long)(idx_43)), kernel_flat_41);
                row_45 = ((Func<BigInteger[]>)(() => { var _tmp = row_45.Cast<BigInteger>().ToList(); _tmp.Add(val_47); return _tmp.ToArray(); }))();
                idx_43 = (idx_43 + 1);
                j_46 = (j_46 + 1);
            }
            dst_42 = ((Func<BigInteger[][]>)(() => { var _tmp = dst_42.Cast<BigInteger[]>().ToList(); _tmp.Add(row_45); return _tmp.ToArray(); }))();
            i_44 = (i_44 + 1);
        };
        return dst_42;
    }

    public static void print_matrix(BigInteger[][] m_48) {
        BigInteger i_49 = 0;
        while ((i_49 < m_48.Length)) {
            string line_50 = "";
            BigInteger j_51 = 0;
            while ((j_51 < _idx(m_48, (long)(i_49)).Length)) {
                if ((j_51 > 0)) {
                    line_50 = (line_50 + " ");
                }
                line_50 = (line_50 + _fmtStr(_idx(_idx(m_48, (long)(i_49)), (long)(j_51))));
                j_51 = (j_51 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_50));
            i_49 = (i_49 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.print_matrix(result_54);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }

    }
}
