// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    public static double absf(double x_1) {
        if ((x_1 < 0.0)) {
            return -x_1;
        };
        return x_1;
    }

    public static double sqrtApprox(double x_2) {
        if ((x_2 <= 0.0)) {
            return 0.0;
        };
        double guess_3 = (x_2 / 2.0);
        long i_4 = 0;
        while ((i_4 < 20)) {
            guess_3 = ((guess_3 + (x_2 / guess_3)) / 2.0);
            i_4 = (i_4 + 1);
        };
        return guess_3;
    }

    public static double atanApprox(double x_5) {
        if ((x_5 > 1.0)) {
            return ((PI_0 / 2.0) - (x_5 / ((x_5 * x_5) + 0.28)));
        };
        if ((x_5 < -1.0)) {
            return ((-PI_0 / 2.0) - (x_5 / ((x_5 * x_5) + 0.28)));
        };
        return (x_5 / (1.0 + ((0.28 * x_5) * x_5)));
    }

    public static double atan2Approx(double y_6, double x_7) {
        if ((x_7 == 0.0)) {
            if ((y_6 > 0.0)) {
                return (PI_0 / 2.0);
            }
            if ((y_6 < 0.0)) {
                return (-PI_0 / 2.0);
            }
            return 0.0;
        };
        double a_8 = Program.atanApprox((y_6 / x_7));
        if ((x_7 > 0.0)) {
            return a_8;
        };
        if ((y_6 >= 0.0)) {
            return (a_8 + PI_0);
        };
        return (a_8 - PI_0);
    }

    public static double[][] zeros(long h_9, long w_10) {
        double[][] m_11 = new double[][]{};
        long y_12 = 0;
        while ((y_12 < h_9)) {
            double[] row_13 = new double[]{};
            long x_14 = 0;
            while ((x_14 < w_10)) {
                row_13 = (Enumerable.ToArray(Enumerable.Append<double>(row_13, 0.0)));
                x_14 = (x_14 + 1);
            }
            m_11 = (Enumerable.ToArray(Enumerable.Append<double[]>(m_11, row_13)));
            y_12 = (y_12 + 1);
        };
        return m_11;
    }

    public static double[][] pad_edge(double[][] img_15, long pad_16) {
        long h_17 = img_15.Length;
        long w_18 = img_15[(int)(0)].Length;
        double[][] out_19 = Program.zeros((h_17 + (pad_16 * 2)), (w_18 + (pad_16 * 2)));
        long y_20 = 0;
        while ((y_20 < (h_17 + (pad_16 * 2)))) {
            long x_21 = 0;
            while ((x_21 < (w_18 + (pad_16 * 2)))) {
                long sy_22 = (y_20 - pad_16);
                if ((sy_22 < 0)) {
                    sy_22 = 0;
                }
                if ((sy_22 >= h_17)) {
                    sy_22 = (h_17 - 1);
                }
                long sx_23 = (x_21 - pad_16);
                if ((sx_23 < 0)) {
                    sx_23 = 0;
                }
                if ((sx_23 >= w_18)) {
                    sx_23 = (w_18 - 1);
                }
                out_19[(int)(y_20)][x_21] = img_15[(int)(sy_22)][(int)(sx_23)];
                x_21 = (x_21 + 1);
            }
            y_20 = (y_20 + 1);
        };
        return out_19;
    }

    public static double[][] img_convolve(double[][] img_24, long[][] kernel_25) {
        long h_26 = img_24.Length;
        long w_27 = img_24[(int)(0)].Length;
        long k_28 = kernel_25.Length;
        long pad_29 = (k_28 / 2);
        double[][] padded_30 = Program.pad_edge(img_24, pad_29);
        double[][] out_31 = Program.zeros(h_26, w_27);
        long y_32 = 0;
        while ((y_32 < h_26)) {
            long x_33 = 0;
            while ((x_33 < w_27)) {
                double sum_34 = 0.0;
                long i_35 = 0;
                while ((i_35 < k_28)) {
                    long j_36 = 0;
                    while ((j_36 < k_28)) {
                        sum_34 = (sum_34 + (padded_30[(int)((y_32 + i_35))][(int)((x_33 + j_36))] * Convert.ToDouble(kernel_25[(int)(i_35)][(int)(j_36)])));
                        j_36 = (j_36 + 1);
                    }
                    i_35 = (i_35 + 1);
                }
                out_31[(int)(y_32)][x_33] = sum_34;
                x_33 = (x_33 + 1);
            }
            y_32 = (y_32 + 1);
        };
        return out_31;
    }

    public static double[][] abs_matrix(double[][] mat_37) {
        long h_38 = mat_37.Length;
        long w_39 = mat_37[(int)(0)].Length;
        double[][] out_40 = Program.zeros(h_38, w_39);
        long y_41 = 0;
        while ((y_41 < h_38)) {
            long x_42 = 0;
            while ((x_42 < w_39)) {
                double v_43 = mat_37[(int)(y_41)][(int)(x_42)];
                if ((v_43 < 0.0)) {
                    out_40[(int)(y_41)][x_42] = -v_43;
                } else {
                    out_40[(int)(y_41)][x_42] = v_43;
                }
                x_42 = (x_42 + 1);
            }
            y_41 = (y_41 + 1);
        };
        return out_40;
    }

    public static double max_matrix(double[][] mat_44) {
        double max_val_45 = mat_44[(int)(0)][(int)(0)];
        long y_46 = 0;
        while ((y_46 < mat_44.Length)) {
            long x_47 = 0;
            while ((x_47 < mat_44[(int)(0)].Length)) {
                if ((mat_44[(int)(y_46)][(int)(x_47)] > max_val_45)) {
                    max_val_45 = mat_44[(int)(y_46)][(int)(x_47)];
                }
                x_47 = (x_47 + 1);
            }
            y_46 = (y_46 + 1);
        };
        return max_val_45;
    }

    public static double[][] scale_matrix(double[][] mat_48, double factor_49) {
        long h_50 = mat_48.Length;
        long w_51 = mat_48[(int)(0)].Length;
        double[][] out_52 = Program.zeros(h_50, w_51);
        long y_53 = 0;
        while ((y_53 < h_50)) {
            long x_54 = 0;
            while ((x_54 < w_51)) {
                out_52[(int)(y_53)][x_54] = (mat_48[(int)(y_53)][(int)(x_54)] * factor_49);
                x_54 = (x_54 + 1);
            }
            y_53 = (y_53 + 1);
        };
        return out_52;
    }

    public static double[][][] sobel_filter(long[][] image_55) {
        long h_56 = image_55.Length;
        long w_57 = image_55[(int)(0)].Length;
        double[][] img_58 = new double[][]{};
        long y0_59 = 0;
        while ((y0_59 < h_56)) {
            double[] row_60 = new double[]{};
            long x0_61 = 0;
            while ((x0_61 < w_57)) {
                row_60 = (Enumerable.ToArray(Enumerable.Append<double>(row_60, Convert.ToDouble(image_55[(int)(y0_59)][(int)(x0_61)]))));
                x0_61 = (x0_61 + 1);
            }
            img_58 = (Enumerable.ToArray(Enumerable.Append<double[]>(img_58, row_60)));
            y0_59 = (y0_59 + 1);
        };
        long[][] kernel_x_62 = new long[][]{new long[]{-1, 0, 1}, new long[]{-2, 0, 2}, new long[]{-1, 0, 1}};
        long[][] kernel_y_63 = new long[][]{new long[]{1, 2, 1}, new long[]{0, 0, 0}, new long[]{-1, -2, -1}};
        double[][] dst_x_64 = Program.abs_matrix(Program.img_convolve(img_58, kernel_x_62));
        double[][] dst_y_65 = Program.abs_matrix(Program.img_convolve(img_58, kernel_y_63));
        double max_x_66 = Program.max_matrix(dst_x_64);
        double max_y_67 = Program.max_matrix(dst_y_65);
        dst_x_64 = Program.scale_matrix(dst_x_64, (255.0 / max_x_66));
        dst_y_65 = Program.scale_matrix(dst_y_65, (255.0 / max_y_67));
        double[][] mag_68 = Program.zeros(h_56, w_57);
        double[][] theta_69 = Program.zeros(h_56, w_57);
        long y_70 = 0;
        while ((y_70 < h_56)) {
            long x_71 = 0;
            while ((x_71 < w_57)) {
                double gx_72 = dst_x_64[(int)(y_70)][(int)(x_71)];
                double gy_73 = dst_y_65[(int)(y_70)][(int)(x_71)];
                mag_68[(int)(y_70)][x_71] = Program.sqrtApprox(((gx_72 * gx_72) + (gy_73 * gy_73)));
                theta_69[(int)(y_70)][x_71] = Program.atan2Approx(gy_73, gx_72);
                x_71 = (x_71 + 1);
            }
            y_70 = (y_70 + 1);
        };
        double max_m_74 = Program.max_matrix(mag_68);
        mag_68 = Program.scale_matrix(mag_68, (255.0 / max_m_74));
        return new double[][][]{mag_68, theta_69};
    }

    public static void print_matrix_int(double[][] mat_75) {
        long y_76 = 0;
        while ((y_76 < mat_75.Length)) {
            string line_77 = "";
            long x_78 = 0;
            while ((x_78 < mat_75[(int)(y_76)].Length)) {
                line_77 = (line_77 + _fmtStr(Convert.ToInt64(mat_75[(int)(y_76)][(int)(x_78)])));
                if ((x_78 < (mat_75[(int)(y_76)].Length - 1))) {
                    line_77 = (line_77 + " ");
                }
                x_78 = (x_78 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_77));
            y_76 = (y_76 + 1);
        };
    }

    public static void print_matrix_float(double[][] mat_79) {
        long y_80 = 0;
        while ((y_80 < mat_79.Length)) {
            string line_81 = "";
            long x_82 = 0;
            while ((x_82 < mat_79[(int)(y_80)].Length)) {
                line_81 = (line_81 + _fmtStr(mat_79[(int)(y_80)][(int)(x_82)]));
                if ((x_82 < (mat_79[(int)(y_80)].Length - 1))) {
                    line_81 = (line_81 + " ");
                }
                x_82 = (x_82 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_81));
            y_80 = (y_80 + 1);
        };
    }

    public static void main() {
        long[][] img_83 = new long[][]{new long[]{10, 10, 10, 10, 10}, new long[]{10, 50, 50, 50, 10}, new long[]{10, 50, 80, 50, 10}, new long[]{10, 50, 50, 50, 10}, new long[]{10, 10, 10, 10, 10}};
        double[][][] res_84 = Program.sobel_filter(img_83);
        double[][] mag_85 = res_84[(int)(0)];
        double[][] theta_86 = res_84[(int)(1)];
        Program.print_matrix_int(mag_85);
        Program.print_matrix_float(theta_86);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
