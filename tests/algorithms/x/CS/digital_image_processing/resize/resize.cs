// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[][][] zeros3d(long h_0, long w_1, long c_2) {
        long[][][] arr_3 = new long[][][]{};
        long y_4 = 0;
        while ((y_4 < h_0)) {
            long[][] row_5 = new long[][]{};
            long x_6 = 0;
            while ((x_6 < w_1)) {
                long[] pixel_7 = new long[]{};
                long k_8 = 0;
                while ((k_8 < c_2)) {
                    pixel_7 = (Enumerable.ToArray(Enumerable.Append<long>(pixel_7, 0)));
                    k_8 = (k_8 + 1);
                }
                row_5 = (Enumerable.ToArray(Enumerable.Append<long[]>(row_5, pixel_7)));
                x_6 = (x_6 + 1);
            }
            arr_3 = (Enumerable.ToArray(Enumerable.Append<long[][]>(arr_3, row_5)));
            y_4 = (y_4 + 1);
        };
        return arr_3;
    }

    public static long[][][] resize_nn(long[][][] img_9, long dst_w_10, long dst_h_11) {
        long src_h_12 = img_9.Length;
        long src_w_13 = img_9[(int)(0)].Length;
        long channels_14 = img_9[(int)(0)][(int)(0)].Length;
        double ratio_x_15 = (Convert.ToDouble(src_w_13) / Convert.ToDouble(dst_w_10));
        double ratio_y_16 = (Convert.ToDouble(src_h_12) / Convert.ToDouble(dst_h_11));
        long[][][] out_17 = Program.zeros3d(dst_h_11, dst_w_10, channels_14);
        long i_18 = 0;
        while ((i_18 < dst_h_11)) {
            long j_19 = 0;
            while ((j_19 < dst_w_10)) {
                long src_x_20 = Convert.ToInt64((ratio_x_15 * Convert.ToDouble(j_19)));
                long src_y_21 = Convert.ToInt64((ratio_y_16 * Convert.ToDouble(i_18)));
                out_17[(int)(i_18)][j_19] = img_9[(int)(src_y_21)][(int)(src_x_20)];
                j_19 = (j_19 + 1);
            }
            i_18 = (i_18 + 1);
        };
        return out_17;
    }

    public static void main() {
        long[][][] img_22 = new long[][][]{new long[][]{new long[]{0, 0, 0}, new long[]{255, 255, 255}}, new long[][]{new long[]{255, 0, 0}, new long[]{0, 255, 0}}};
        long[][][] resized_23 = Program.resize_nn(img_22, 4, 4);
        Console.WriteLine(Program._fmtTop(resized_23));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
