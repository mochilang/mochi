// Generated by Mochi 0.10.60 on 2025-08-08 10:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[][] image_16 = new long[][]{new long[]{100, 125, 150}, new long[]{175, 200, 225}, new long[]{50, 75, 100}};
    public static long[][] change_contrast(long[][] img_0, long level_1) {
        double factor_2 = ((259.0 * (Convert.ToDouble(level_1) + 255.0)) / (255.0 * (259.0 - Convert.ToDouble(level_1))));
        long[][] result_3 = new long[][]{};
        long i_4 = 0;
        while ((i_4 < img_0.Length)) {
            long[] row_5 = img_0[(int)(i_4)];
            long[] new_row_6 = new long[]{};
            long j_7 = 0;
            while ((j_7 < row_5.Length)) {
                long c_8 = row_5[(int)(j_7)];
                long contrasted_9 = (long)((128.0 + (factor_2 * (Convert.ToDouble(c_8) - 128.0))));
                long clamped_10 = ((contrasted_9 < 0) ? 0 : ((contrasted_9 > 255) ? 255 : contrasted_9));
                new_row_6 = (Enumerable.ToArray(Enumerable.Append<long>(new_row_6, clamped_10)));
                j_7 = (j_7 + 1);
            }
            result_3 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_3, new_row_6)));
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static void print_image(long[][] img_11) {
        long i_12 = 0;
        while ((i_12 < img_11.Length)) {
            long[] row_13 = img_11[(int)(i_12)];
            long j_14 = 0;
            string line_15 = "";
            while ((j_14 < row_13.Length)) {
                line_15 = ((line_15 + _fmtStr(row_13[(int)(j_14)])) + " ");
                j_14 = (j_14 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_15));
            i_12 = (i_12 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Original image:"));
            Program.print_image(image_16);
            long[][] contrasted_17 = Program.change_contrast(image_16, 170);
            Console.WriteLine(Program._fmtTop("After contrast:"));
            Program.print_image(contrasted_17);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
