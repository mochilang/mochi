// Generated by Mochi 0.10.59 on 2025-08-06 23:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double ndvi(double red_0, double nir_1) {
        return ((nir_1 - red_0) / (nir_1 + red_0));
    }

    public static double bndvi(double blue_2, double nir_3) {
        return ((nir_3 - blue_2) / (nir_3 + blue_2));
    }

    public static double gndvi(double green_4, double nir_5) {
        return ((nir_5 - green_4) / (nir_5 + green_4));
    }

    public static double ndre(double redEdge_6, double nir_7) {
        return ((nir_7 - redEdge_6) / (nir_7 + redEdge_6));
    }

    public static double ccci(double red_8, double redEdge_9, double nir_10) {
        return (Program.ndre(redEdge_9, nir_10) / Program.ndvi(red_8, nir_10));
    }

    public static double cvi(double red_11, double green_12, double nir_13) {
        return ((nir_13 * red_11) / (green_12 * green_12));
    }

    public static double gli(double red_14, double green_15, double blue_16) {
        return ((((2.0 * green_15) - red_14) - blue_16) / (((2.0 * green_15) + red_14) + blue_16));
    }

    public static double dvi(double red_17, double nir_18) {
        return (nir_18 / red_17);
    }

    public static double calc(string index_19, double red_20, double green_21, double blue_22, double redEdge_23, double nir_24) {
        if ((index_19 == "NDVI")) {
            return Program.ndvi(red_20, nir_24);
        };
        if ((index_19 == "BNDVI")) {
            return Program.bndvi(blue_22, nir_24);
        };
        if ((index_19 == "GNDVI")) {
            return Program.gndvi(green_21, nir_24);
        };
        if ((index_19 == "NDRE")) {
            return Program.ndre(redEdge_23, nir_24);
        };
        if ((index_19 == "CCCI")) {
            return Program.ccci(red_20, redEdge_23, nir_24);
        };
        if ((index_19 == "CVI")) {
            return Program.cvi(red_20, green_21, nir_24);
        };
        if ((index_19 == "GLI")) {
            return Program.gli(red_20, green_21, blue_22);
        };
        if ((index_19 == "DVI")) {
            return Program.dvi(red_20, nir_24);
        };
        return 0.0;
    }

    public static void main() {
        double red_25 = 50.0;
        double green_26 = 30.0;
        double blue_27 = 10.0;
        double redEdge_28 = 40.0;
        double nir_29 = 100.0;
        Console.WriteLine(Program._fmtTop(("NDVI=" + _fmtStr(Program.ndvi(red_25, nir_29)))));
        Console.WriteLine(Program._fmtTop(("CCCI=" + _fmtStr(Program.ccci(red_25, redEdge_28, nir_29)))));
        Console.WriteLine(Program._fmtTop(("CVI=" + _fmtStr(Program.cvi(red_25, green_26, nir_29)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
