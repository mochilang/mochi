// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] DIGIT_FACTORIALS_0 = new long[]{1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
    static Dictionary<long, long> cache_sum_digit_factorials_1 = new Dictionary<long, long>{{145, 145}};
    static Dictionary<long, long> chain_length_cache_2 = new Dictionary<long, long>{{145, 0}, {169, 3}, {36301, 3}, {1454, 3}, {871, 2}, {45361, 2}, {872, 2}};
    public static long sum_digit_factorials(long n_3) {
        if ((cache_sum_digit_factorials_1.ContainsKey(n_3))) {
            return (cache_sum_digit_factorials_1.ContainsKey(n_3) ? cache_sum_digit_factorials_1[n_3] : 0);
        };
        long m_4 = n_3;
        long ret_5 = 0;
        if ((m_4 == 0)) {
            ret_5 = DIGIT_FACTORIALS_0[(int)(0)];
        };
        while ((m_4 > 0)) {
            long digit_6 = _mod(m_4, 10);
            ret_5 = (ret_5 + DIGIT_FACTORIALS_0[(int)(digit_6)]);
            m_4 = (m_4 / 10);
        };
        cache_sum_digit_factorials_1[n_3] = ret_5;
        return ret_5;
    }

    public static long chain_length(long n_7) {
        if ((chain_length_cache_2.ContainsKey(n_7))) {
            return (chain_length_cache_2.ContainsKey(n_7) ? chain_length_cache_2[n_7] : 0);
        };
        long[] chain_8 = new long[]{};
        Dictionary<long, long> seen_9 = new Dictionary<long, long>{};
        long current_10 = n_7;
        while (true) {
            if ((chain_length_cache_2.ContainsKey(current_10))) {
                long known_11 = (chain_length_cache_2.ContainsKey(current_10) ? chain_length_cache_2[current_10] : 0);
                long total_12 = known_11;
                long i_13 = (chain_8.Length - 1);
                while ((i_13 >= 0)) {
                    total_12 = (total_12 + 1);
                    chain_length_cache_2[chain_8[(int)(i_13)]] = total_12;
                    i_13 = (i_13 - 1);
                }
                return (chain_length_cache_2.ContainsKey(n_7) ? chain_length_cache_2[n_7] : 0);
            }
            if ((seen_9.ContainsKey(current_10))) {
                long loop_start_14 = (seen_9.ContainsKey(current_10) ? seen_9[current_10] : 0);
                long loop_len_15 = (chain_8.Length - loop_start_14);
                long i_16 = (chain_8.Length - 1);
                long ahead_17 = 0;
                while ((i_16 >= 0)) {
                    if ((i_16 >= loop_start_14)) {
                        chain_length_cache_2[chain_8[(int)(i_16)]] = loop_len_15;
                    } else {
                        chain_length_cache_2[chain_8[(int)(i_16)]] = (loop_len_15 + (ahead_17 + 1));
                    }
                    ahead_17 = (ahead_17 + 1);
                    i_16 = (i_16 - 1);
                }
                return (chain_length_cache_2.ContainsKey(n_7) ? chain_length_cache_2[n_7] : 0);
            }
            seen_9[current_10] = chain_8.Length;
            chain_8 = (Enumerable.ToArray(Enumerable.Append<long>(chain_8, current_10)));
            current_10 = Program.sum_digit_factorials(current_10);
        };
        return default(long);
    }

    public static long solution(long num_terms_18, long max_start_19) {
        long count_20 = 0;
        long i_21 = 1;
        while ((i_21 < max_start_19)) {
            if ((Program.chain_length(i_21) == num_terms_18)) {
                count_20 = (count_20 + 1);
            }
            i_21 = (i_21 + 1);
        };
        return count_20;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(Program.solution(60, 1000)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
