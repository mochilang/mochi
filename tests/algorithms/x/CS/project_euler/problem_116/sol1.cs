// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long solution(long length_0) {
        long[][] ways_1 = new long[][]{};
        long i_2 = 0;
        while ((i_2 <= length_0)) {
            long[] row_3 = new long[]{};
            row_3 = (Enumerable.ToArray(Enumerable.Append<long>(row_3, 0)));
            row_3 = (Enumerable.ToArray(Enumerable.Append<long>(row_3, 0)));
            row_3 = (Enumerable.ToArray(Enumerable.Append<long>(row_3, 0)));
            ways_1 = (Enumerable.ToArray(Enumerable.Append<long[]>(ways_1, row_3)));
            i_2 = (i_2 + 1);
        };
        long row_length_4 = 0;
        while ((row_length_4 <= length_0)) {
            long tile_length_5 = 2;
            while ((tile_length_5 <= 4)) {
                long tile_start_6 = 0;
                while ((tile_start_6 <= (row_length_4 - tile_length_5))) {
                    long remaining_7 = ((row_length_4 - tile_start_6) - tile_length_5);
                    ways_1[(int)(row_length_4)][(tile_length_5 - 2)] = ((ways_1[(int)(row_length_4)][(int)((tile_length_5 - 2))] + ways_1[(int)(remaining_7)][(int)((tile_length_5 - 2))]) + 1);
                    tile_start_6 = (tile_start_6 + 1);
                }
                tile_length_5 = (tile_length_5 + 1);
            }
            row_length_4 = (row_length_4 + 1);
        };
        long total_8 = 0;
        long j_9 = 0;
        while ((j_9 < 3)) {
            total_8 = (total_8 + ways_1[(int)(length_0)][(int)(j_9)]);
            j_9 = (j_9 + 1);
        };
        return total_8;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.solution(5)));
            Console.WriteLine(Program._fmtTop(Program.solution(50)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
