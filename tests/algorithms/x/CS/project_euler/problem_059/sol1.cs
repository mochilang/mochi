// Generated by Mochi 0.10.70 (commit c7c603f902) on 2025-08-22 23:04 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string ascii_chars_8 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    static long[] LOWERCASE_INTS_13 = new long[]{};
    static long i_14 = 97;
    static string[] COMMON_WORDS_15 = new string[]{"the", "be", "to", "of", "and", "in", "that", "have"};
    static long[] ciphertext_48 = new long[]{17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11};
    public static long xor(long a_0, long b_1) {
        long res_2 = 0;
        long bit_3 = 1;
        long x_4 = a_0;
        long y_5 = b_1;
        while (((x_4 > 0) || (y_5 > 0))) {
            long abit_6 = _mod(x_4, 2);
            long bbit_7 = _mod(y_5, 2);
            if ((abit_6 != bbit_7)) {
                res_2 = (res_2 + bit_3);
            }
            x_4 = _floordiv(x_4, 2);
            y_5 = _floordiv(y_5, 2);
            bit_3 = (bit_3 * 2);
        };
        return res_2;
    }

    public static string chr(long code_9) {
        if ((code_9 == 10)) {
            return "\n";
        };
        if ((code_9 == 13)) {
            return "\r";
        };
        if ((code_9 == 9)) {
            return "\t";
        };
        if (((code_9 >= 32) && (code_9 < 127))) {
            return _substr(ascii_chars_8, (code_9 - 32), (code_9 - 31));
        };
        return "";
    }

    public static long ord(string ch_10) {
        if ((ch_10 == "\n")) {
            return 10;
        };
        if ((ch_10 == "\r")) {
            return 13;
        };
        if ((ch_10 == "\t")) {
            return 9;
        };
        long i_11 = 0;
        while ((i_11 < ascii_chars_8.Length)) {
            if ((_substr(ascii_chars_8, i_11, (i_11 + 1)) == ch_10)) {
                return (32 + i_11);
            }
            i_11 = (i_11 + 1);
        };
        return 0;
    }

    public static bool is_valid_ascii(long code_12) {
        if (((code_12 >= 32) && (code_12 <= 126))) {
            return true;
        };
        if ((((code_12 == 9) || (code_12 == 10)) || (code_12 == 13))) {
            return true;
        };
        return false;
    }

    public static string try_key(long[] ciphertext_16, long[] key_17) {
        string decoded_18 = "";
        long i_19 = 0;
        long klen_20 = key_17.Length;
        while ((i_19 < ciphertext_16.Length)) {
            long decodedchar_21 = Program.xor(_idx(ciphertext_16, i_19), _idx(key_17, _mod(i_19, klen_20)));
            if ((!Program.is_valid_ascii(decodedchar_21))) {
                return (string)null;
            }
            decoded_18 = (decoded_18 + Program.chr(decodedchar_21));
            i_19 = (i_19 + 1);
        };
        return decoded_18;
    }

    public static string[] filter_valid_chars(long[] ciphertext_22) {
        string[] possibles_23 = new string[]{};
        long i_24 = 0;
        while ((i_24 < LOWERCASE_INTS_13.Length)) {
            long j_25 = 0;
            while ((j_25 < LOWERCASE_INTS_13.Length)) {
                long k_26 = 0;
                while ((k_26 < LOWERCASE_INTS_13.Length)) {
                    long[] key_27 = new long[]{_idx(LOWERCASE_INTS_13, i_24), _idx(LOWERCASE_INTS_13, j_25), _idx(LOWERCASE_INTS_13, k_26)};
                    string decoded_28 = Program.try_key(ciphertext_22, key_27);
                    if ((decoded_28 != null)) {
                        possibles_23 = ((Func<string[]>)(() => { var _tmp = possibles_23.Cast<string>().ToList(); _tmp.Add(decoded_28); return _tmp.ToArray(); }))();
                    }
                    k_26 = (k_26 + 1);
                }
                j_25 = (j_25 + 1);
            }
            i_24 = (i_24 + 1);
        };
        return possibles_23;
    }

    public static bool contains(string s_29, string sub_30) {
        long n_31 = s_29.Length;
        long m_32 = sub_30.Length;
        if ((m_32 == 0)) {
            return true;
        };
        long i_33 = 0;
        while ((i_33 <= (n_31 - m_32))) {
            long j_34 = 0;
            bool is_match_35 = true;
            while ((j_34 < m_32)) {
                if ((s_29.Substring((int)((i_33 + j_34)), 1) != sub_30.Substring((int)(j_34), 1))) {
                    is_match_35 = false;
                    break;
                }
                j_34 = (j_34 + 1);
            }
            if (is_match_35) {
                return true;
            }
            i_33 = (i_33 + 1);
        };
        return false;
    }

    public static string[] filter_common_word(string[] possibles_36, string common_word_37) {
        string[] res_38 = new string[]{};
        long i_39 = 0;
        while ((i_39 < possibles_36.Length)) {
            string p_40 = _idx(possibles_36, i_39);
            if (Program.contains(p_40.ToLower(), common_word_37)) {
                res_38 = ((Func<string[]>)(() => { var _tmp = res_38.Cast<string>().ToList(); _tmp.Add(p_40); return _tmp.ToArray(); }))();
            }
            i_39 = (i_39 + 1);
        };
        return res_38;
    }

    public static long solution(long[] ciphertext_41) {
        string[] possibles_42 = Program.filter_valid_chars(ciphertext_41);
        long i_43 = 0;
        while ((i_43 < COMMON_WORDS_15.Length)) {
            string word_44 = _idx(COMMON_WORDS_15, i_43);
            possibles_42 = Program.filter_common_word(possibles_42, word_44);
            if ((possibles_42.Length == 1)) {
                break;
            }
            i_43 = (i_43 + 1);
        };
        string decoded_text_45 = _idx(possibles_42, 0);
        long sum_46 = 0;
        long j_47 = 0;
        while ((j_47 < decoded_text_45.Length)) {
            sum_46 = (sum_46 + Program.ord(_substr(decoded_text_45, j_47, (j_47 + 1))));
            j_47 = (j_47 + 1);
        };
        return sum_46;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_14 <= 122)) {
                LOWERCASE_INTS_13 = ((Func<long[]>)(() => { var _tmp = LOWERCASE_INTS_13.Cast<long>().ToList(); _tmp.Add(i_14); return _tmp.ToArray(); }))();
                i_14 = (i_14 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.solution(ciphertext_48))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
