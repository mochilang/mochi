// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] range_desc(long start_0, long end_1) {
        long[] res_2 = new long[]{};
        long i_3 = start_0;
        while ((i_3 >= end_1)) {
            res_2 = (Enumerable.ToArray(Enumerable.Append<long>(res_2, i_3)));
            i_3 = (i_3 - 1);
        };
        return res_2;
    }

    public static long[] range_asc(long start_4, long end_5) {
        long[] res_6 = new long[]{};
        long i_7 = start_4;
        while ((i_7 <= end_5)) {
            res_6 = (Enumerable.ToArray(Enumerable.Append<long>(res_6, i_7)));
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    public static long[] concat_lists(long[] a_8, long[] b_9) {
        long[] res_10 = a_8;
        long i_11 = 0;
        while ((i_11 < b_9.Length)) {
            res_10 = (Enumerable.ToArray(Enumerable.Append<long>(res_10, b_9[(int)(i_11)])));
            i_11 = (i_11 + 1);
        };
        return res_10;
    }

    public static long[] swap(long[] xs_12, long i_13, long j_14) {
        long[] res_15 = new long[]{};
        long k_16 = 0;
        while ((k_16 < xs_12.Length)) {
            if ((k_16 == i_13)) {
                res_15 = (Enumerable.ToArray(Enumerable.Append<long>(res_15, xs_12[(int)(j_14)])));
            } else if ((k_16 == j_14)) {
                res_15 = (Enumerable.ToArray(Enumerable.Append<long>(res_15, xs_12[(int)(i_13)])));
            } else {
                res_15 = (Enumerable.ToArray(Enumerable.Append<long>(res_15, xs_12[(int)(k_16)])));
            }
            k_16 = (k_16 + 1);
        };
        return res_15;
    }

    public static long[] generate_gon_ring(long gon_side_17, long[] perm_18) {
        long[] result_19 = new long[]{};
        result_19 = (Enumerable.ToArray(Enumerable.Append<long>(result_19, perm_18[(int)(0)])));
        result_19 = (Enumerable.ToArray(Enumerable.Append<long>(result_19, perm_18[(int)(1)])));
        result_19 = (Enumerable.ToArray(Enumerable.Append<long>(result_19, perm_18[(int)(2)])));
        long[] extended_20 = (Enumerable.ToArray(Enumerable.Append<long>(perm_18, perm_18[(int)(1)])));
        long magic_number_21 = ((gon_side_17 < 5) ? 1 : 2);
        long i_22 = 1;
        while ((i_22 < ((extended_20.Length / 3) + magic_number_21))) {
            result_19 = (Enumerable.ToArray(Enumerable.Append<long>(result_19, extended_20[(int)(((2 * i_22) + 1))])));
            result_19 = (Enumerable.ToArray(Enumerable.Append<long>(result_19, result_19[(int)(((3 * i_22) - 1))])));
            result_19 = (Enumerable.ToArray(Enumerable.Append<long>(result_19, extended_20[(int)(((2 * i_22) + 2))])));
            i_22 = (i_22 + 1);
        };
        return result_19;
    }

    public static long min_outer(long[] numbers_23) {
        long min_val_24 = numbers_23[(int)(0)];
        long i_25 = 3;
        while ((i_25 < numbers_23.Length)) {
            if ((numbers_23[(int)(i_25)] < min_val_24)) {
                min_val_24 = numbers_23[(int)(i_25)];
            }
            i_25 = (i_25 + 3);
        };
        return min_val_24;
    }

    public static bool is_magic_gon(long[] numbers_26) {
        if ((_mod(numbers_26.Length, 3) != 0)) {
            return false;
        };
        if ((Program.min_outer(numbers_26) != numbers_26[(int)(0)])) {
            return false;
        };
        long total_27 = ((numbers_26[(int)(0)] + numbers_26[(int)(1)]) + numbers_26[(int)(2)]);
        long i_28 = 3;
        while ((i_28 < numbers_26.Length)) {
            if ((((numbers_26[(int)(i_28)] + numbers_26[(int)((i_28 + 1))]) + numbers_26[(int)((i_28 + 2))]) != total_27)) {
                return false;
            }
            i_28 = (i_28 + 3);
        };
        return true;
    }

    public static string permute_search(long[] nums_29, long start_30, long gon_side_31, string current_max_32) {
        if ((start_30 == nums_29.Length)) {
            long[] ring_33 = Program.generate_gon_ring(gon_side_31, nums_29);
            if (Program.is_magic_gon(ring_33)) {
                string s_34 = "";
                long k_35 = 0;
                while ((k_35 < ring_33.Length)) {
                    s_34 = (s_34 + _fmtStr(ring_33[(int)(k_35)]));
                    k_35 = (k_35 + 1);
                }
                if ((string.Compare(s_34, current_max_32) > 0)) {
                    return s_34;
                }
            }
            return current_max_32;
        };
        string res_36 = current_max_32;
        long i_37 = start_30;
        while ((i_37 < nums_29.Length)) {
            long[] swapped_38 = Program.swap(nums_29, start_30, i_37);
            string candidate_39 = Program.permute_search(swapped_38, (start_30 + 1), gon_side_31, res_36);
            if ((string.Compare(candidate_39, res_36) > 0)) {
                res_36 = candidate_39;
            }
            i_37 = (i_37 + 1);
        };
        return res_36;
    }

    public static string solution(long gon_side_40) {
        if (((gon_side_40 < 3) || (gon_side_40 > 5))) {
            return "";
        };
        long[] small_41 = Program.range_desc((gon_side_40 + 1), 1);
        long[] big_42 = Program.range_asc((gon_side_40 + 2), (gon_side_40 * 2));
        long[] numbers_43 = Program.concat_lists(small_41, big_42);
        string max_str_44 = Program.permute_search(numbers_43, 0, gon_side_40, "");
        return max_str_44;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.solution(5)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
