// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class FractionPair {
    public long num;
    public long den;
    public override string ToString() => $"FractionPair {{num = {num}, den = {den}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long gcd(long a_0, long b_1) {
        long x_2 = ((a_0 < 0) ? -a_0 : a_0);
        long y_3 = ((b_1 < 0) ? -b_1 : b_1);
        while ((y_3 != 0)) {
            long t_4 = _mod(x_2, y_3);
            x_2 = y_3;
            y_3 = t_4;
        };
        return x_2;
    }

    public static bool is_digit_cancelling(long num_5, long den_6) {
        if ((num_5 >= den_6)) {
            return false;
        };
        long num_unit_7 = _mod(num_5, 10);
        long num_tens_8 = (num_5 / 10);
        long den_unit_9 = _mod(den_6, 10);
        long den_tens_10 = (den_6 / 10);
        if ((num_unit_7 != den_tens_10)) {
            return false;
        };
        if ((den_unit_9 == 0)) {
            return false;
        };
        return ((num_5 * den_unit_9) == (num_tens_8 * den_6));
    }

    public static FractionPair[] find_fractions() {
        FractionPair[] sols_11 = new FractionPair[]{};
        long num_12 = 10;
        while ((num_12 < 100)) {
            long den_13 = (num_12 + 1);
            while ((den_13 < 100)) {
                if (Program.is_digit_cancelling(num_12, den_13)) {
                    sols_11 = (Enumerable.ToArray(Enumerable.Append<FractionPair>(sols_11, new FractionPair{num = num_12, den = den_13})));
                }
                den_13 = (den_13 + 1);
            }
            num_12 = (num_12 + 1);
        };
        return sols_11;
    }

    public static long solution() {
        FractionPair[] fracs_14 = Program.find_fractions();
        long num_prod_15 = 1;
        long den_prod_16 = 1;
        long i_17 = 0;
        while ((i_17 < fracs_14.Length)) {
            FractionPair f_18 = fracs_14[(int)(i_17)];
            num_prod_15 = (num_prod_15 * f_18.num);
            den_prod_16 = (den_prod_16 * f_18.den);
            i_17 = (i_17 + 1);
        };
        long g_19 = Program.gcd(num_prod_15, den_prod_16);
        return (den_prod_16 / g_19);
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.solution())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
