// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long parse_int(string s_0) {
        long value_1 = 0;
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            value_1 = ((value_1 * 10) + long.Parse(s_0.Substring((int)(i_2), 1)));
            i_2 = (i_2 + 1);
        };
        return value_1;
    }

    public static long[][] digit_replacements(long number_3) {
        string num_str_4 = _fmtStr(number_3);
        long[] counts_5 = new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        long i_6 = 0;
        while ((i_6 < num_str_4.Length)) {
            long d_7 = long.Parse(num_str_4.Substring((int)(i_6), 1));
            counts_5[d_7] = (counts_5[(int)(d_7)] + 1);
            i_6 = (i_6 + 1);
        };
        long[][] result_8 = new long[][]{};
        string digits_9 = "0123456789";
        long digit_10 = 0;
        while ((digit_10 < 10)) {
            if ((counts_5[(int)(digit_10)] > 1)) {
                long[] family_11 = new long[]{};
                long repl_12 = 0;
                while ((repl_12 < 10)) {
                    string new_str_13 = "";
                    long j_14 = 0;
                    while ((j_14 < num_str_4.Length)) {
                        string c_15 = num_str_4.Substring((int)(j_14), 1);
                        if ((c_15 == digits_9.Substring((int)(digit_10), 1))) {
                            new_str_13 = (new_str_13 + digits_9.Substring((int)(repl_12), 1));
                        } else {
                            new_str_13 = (new_str_13 + c_15);
                        }
                        j_14 = (j_14 + 1);
                    }
                    family_11 = (Enumerable.ToArray(Enumerable.Append<long>(family_11, Program.parse_int(new_str_13))));
                    repl_12 = (repl_12 + 1);
                }
                result_8 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_8, family_11)));
            }
            digit_10 = (digit_10 + 1);
        };
        return result_8;
    }

    public static bool is_prime(long num_16) {
        if ((num_16 < 2)) {
            return false;
        };
        if ((_mod(num_16, 2) == 0)) {
            return (num_16 == 2);
        };
        long i_17 = 3;
        while (((i_17 * i_17) <= num_16)) {
            if ((_mod(num_16, i_17) == 0)) {
                return false;
            }
            i_17 = (i_17 + 2);
        };
        return true;
    }

    public static long solution(long family_length_18) {
        long candidate_19 = 121313;
        if ((!Program.is_prime(candidate_19))) {
            return -1;
        };
        long[][] reps_20 = Program.digit_replacements(candidate_19);
        long r_21 = 0;
        while ((r_21 < reps_20.Length)) {
            long[] family_22 = reps_20[(int)(r_21)];
            long count_23 = 0;
            long min_prime_24 = 0;
            bool first_25 = true;
            long i_26 = 0;
            while ((i_26 < family_22.Length)) {
                long num_27 = family_22[(int)(i_26)];
                if (Program.is_prime(num_27)) {
                    if (first_25) {
                        min_prime_24 = num_27;
                        first_25 = false;
                    } else if ((num_27 < min_prime_24)) {
                        min_prime_24 = num_27;
                    }
                    count_23 = (count_23 + 1);
                }
                i_26 = (i_26 + 1);
            }
            if ((count_23 == family_length_18)) {
                return min_prime_24;
            }
            r_21 = (r_21 + 1);
        };
        return -1;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.solution(8))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
