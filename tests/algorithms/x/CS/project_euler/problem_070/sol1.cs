// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] get_totients(long max_one_0) {
        long[] totients_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < max_one_0)) {
            totients_1 = (Enumerable.ToArray(Enumerable.Append<long>(totients_1, i_2)));
            i_2 = (i_2 + 1);
        };
        i_2 = 2;
        while ((i_2 < max_one_0)) {
            if ((totients_1[(int)(i_2)] == i_2)) {
                long x_3 = i_2;
                while ((x_3 < max_one_0)) {
                    totients_1[x_3] = (totients_1[(int)(x_3)] - (totients_1[(int)(x_3)] / i_2));
                    x_3 = (x_3 + i_2);
                }
            }
            i_2 = (i_2 + 1);
        };
        return totients_1;
    }

    public static bool has_same_digits(long num1_4, long num2_5) {
        long[] count1_6 = new long[]{};
        long[] count2_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 < 10)) {
            count1_6 = (Enumerable.ToArray(Enumerable.Append<long>(count1_6, 0)));
            count2_7 = (Enumerable.ToArray(Enumerable.Append<long>(count2_7, 0)));
            i_8 = (i_8 + 1);
        };
        long n1_9 = num1_4;
        long n2_10 = num2_5;
        if ((n1_9 == 0)) {
            count1_6[0] = (count1_6[(int)(0)] + 1);
        };
        if ((n2_10 == 0)) {
            count2_7[0] = (count2_7[(int)(0)] + 1);
        };
        while ((n1_9 > 0)) {
            long d1_11 = _mod(n1_9, 10);
            count1_6[d1_11] = (count1_6[(int)(d1_11)] + 1);
            n1_9 = (n1_9 / 10);
        };
        while ((n2_10 > 0)) {
            long d2_12 = _mod(n2_10, 10);
            count2_7[d2_12] = (count2_7[(int)(d2_12)] + 1);
            n2_10 = (n2_10 / 10);
        };
        i_8 = 0;
        while ((i_8 < 10)) {
            if ((count1_6[(int)(i_8)] != count2_7[(int)(i_8)])) {
                return false;
            }
            i_8 = (i_8 + 1);
        };
        return true;
    }

    public static long solution(long max_n_13) {
        long min_numerator_14 = 1;
        long min_denominator_15 = 0;
        long[] totients_16 = Program.get_totients((max_n_13 + 1));
        long i_17 = 2;
        while ((i_17 <= max_n_13)) {
            long t_18 = totients_16[(int)(i_17)];
            if ((((i_17 * min_denominator_15) < (min_numerator_14 * t_18)) && Program.has_same_digits(i_17, t_18))) {
                min_numerator_14 = i_17;
                min_denominator_15 = t_18;
            }
            i_17 = (i_17 + 1);
        };
        return min_numerator_14;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.solution(10000))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
