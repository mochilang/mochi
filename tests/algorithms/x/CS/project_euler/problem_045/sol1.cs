// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double to_float(long x_0) {
        return (x_0 * 1.0);
    }

    public static double sqrt(double x_1) {
        if ((x_1 <= 0.0)) {
            return 0.0;
        };
        double guess_2 = x_1;
        long i_3 = 0;
        while ((i_3 < 10)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static long floor(double x_4) {
        long n_5 = 0;
        double y_6 = x_4;
        while ((y_6 >= 1.0)) {
            y_6 = (y_6 - 1.0);
            n_5 = (n_5 + 1);
        };
        return n_5;
    }

    public static long hexagonal_num(long n_7) {
        return (n_7 * ((2 * n_7) - 1));
    }

    public static bool is_pentagonal(long n_8) {
        double root_9 = Program.sqrt((1.0 + (24.0 * Program.to_float(n_8))));
        double val_10 = ((1.0 + root_9) / 6.0);
        return (val_10 == Program.to_float(Program.floor(val_10)));
    }

    public static long solution(long start_11) {
        long idx_12 = start_11;
        long num_13 = Program.hexagonal_num(idx_12);
        while ((!Program.is_pentagonal(num_13))) {
            idx_12 = (idx_12 + 1);
            num_13 = Program.hexagonal_num(idx_12);
        };
        return num_13;
    }

    public static void test_hexagonal_num() {
        if ((Program.hexagonal_num(143) != 40755)) {
            throw new Exception("hexagonal_num(143) failed");
        };
        if ((Program.hexagonal_num(21) != 861)) {
            throw new Exception("hexagonal_num(21) failed");
        };
        if ((Program.hexagonal_num(10) != 190)) {
            throw new Exception("hexagonal_num(10) failed");
        };
    }

    public static void test_is_pentagonal() {
        if ((!Program.is_pentagonal(330))) {
            throw new Exception("330 should be pentagonal");
        };
        if (Program.is_pentagonal(7683)) {
            throw new Exception("7683 should not be pentagonal");
        };
        if ((!Program.is_pentagonal(2380))) {
            throw new Exception("2380 should be pentagonal");
        };
    }

    public static void test_solution() {
        if ((Program.solution(144) != 1533776805)) {
            throw new Exception("solution failed");
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.test_hexagonal_num();
            Program.test_is_pentagonal();
            Program.test_solution();
            Console.WriteLine(Program._fmtTop((_fmtStr(Program.solution(144)) + " = ")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
