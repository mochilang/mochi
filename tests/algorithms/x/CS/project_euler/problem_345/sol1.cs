// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string[] MATRIX_2_29 = new string[]{"7 53 183 439 863 497 383 563 79 973 287 63 343 169 583", "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913", "447 283 463 29 23 487 463 993 119 883 327 493 423 159 743", "217 623 3 399 853 407 103 983 89 463 290 516 212 462 350", "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350", "870 456 192 162 593 473 915 45 989 873 823 965 425 329 803", "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326", "322 148 972 962 286 255 941 541 265 323 925 281 601 95 973", "445 721 11 525 473 65 511 164 138 672 18 428 154 448 848", "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198", "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390", "821 461 843 513 17 901 711 993 293 157 274 94 192 156 574", "34 124 4 878 450 476 712 914 838 669 875 299 823 329 699", "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107", "813 883 451 509 615 77 281 613 459 205 380 274 302 35 805"};
    static long result_30 = Program.solution(MATRIX_2_29);
    public static long[] parse_row(string row_str_0) {
        long[] nums_1 = new long[]{};
        long current_2 = 0;
        bool has_digit_3 = false;
        long i_4 = 0;
        while ((i_4 < row_str_0.Length)) {
            string ch_5 = _substr(row_str_0, i_4, (i_4 + 1));
            if ((ch_5 == " ")) {
                if (has_digit_3) {
                    nums_1 = (Enumerable.ToArray(Enumerable.Append<long>(nums_1, current_2)));
                    current_2 = 0;
                    has_digit_3 = false;
                }
            } else {
                current_2 = ((current_2 * 10) + long.Parse(ch_5));
                has_digit_3 = true;
            }
            i_4 = (i_4 + 1);
        };
        if (has_digit_3) {
            nums_1 = (Enumerable.ToArray(Enumerable.Append<long>(nums_1, current_2)));
        };
        return nums_1;
    }

    public static long[][] parse_matrix(string[] matrix_str_6) {
        long[][] matrix_7 = new long[][]{};
        foreach (string row_str_8 in matrix_str_6) {
            long[] row_9 = Program.parse_row(row_str_8);
            matrix_7 = (Enumerable.ToArray(Enumerable.Append<long[]>(matrix_7, row_9)));
        };
        return matrix_7;
    }

    public static long bitcount(long x_10) {
        long count_11 = 0;
        long y_12 = x_10;
        while ((y_12 > 0)) {
            if ((_mod(y_12, 2) == 1)) {
                count_11 = (count_11 + 1);
            }
            y_12 = (y_12 / 2);
        };
        return count_11;
    }

    public static long[] build_powers(long n_13) {
        long[] powers_14 = new long[]{};
        long i_15 = 0;
        long current_16 = 1;
        while ((i_15 <= n_13)) {
            powers_14 = (Enumerable.ToArray(Enumerable.Append<long>(powers_14, current_16)));
            current_16 = (current_16 * 2);
            i_15 = (i_15 + 1);
        };
        return powers_14;
    }

    public static long solution(string[] matrix_str_17) {
        long[][] arr_18 = Program.parse_matrix(matrix_str_17);
        long n_19 = arr_18.Length;
        long[] powers_20 = Program.build_powers(n_19);
        long size_21 = _idx(powers_20, n_19);
        long[] dp_22 = new long[]{};
        long i_23 = 0;
        while ((i_23 < size_21)) {
            dp_22 = (Enumerable.ToArray(Enumerable.Append<long>(dp_22, 0)));
            i_23 = (i_23 + 1);
        };
        long mask_24 = 0;
        while ((mask_24 < size_21)) {
            long row_25 = Program.bitcount(mask_24);
            if ((row_25 < n_19)) {
                long col_26 = 0;
                while ((col_26 < n_19)) {
                    if ((_mod((mask_24 / _idx(powers_20, col_26)), 2) == 0)) {
                        long new_mask_27 = (mask_24 + _idx(powers_20, col_26));
                        long value_28 = (_idx(dp_22, mask_24) + _idx(_idx(arr_18, row_25), col_26));
                        if ((value_28 > _idx(dp_22, new_mask_27))) {
                            dp_22[(int)(new_mask_27)] = value_28;
                        }
                    }
                    col_26 = (col_26 + 1);
                }
            }
            mask_24 = (mask_24 + 1);
        };
        return _idx(dp_22, (size_21 - 1));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(result_30))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
