// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Hand {
    public long rank;
    public long[] values;
    public override string ToString() => $"Hand {{rank = {rank}, values = {values}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[] split(string s_0, string sep_1) {
        string[] parts_2 = new string[]{};
        string cur_3 = "";
        long i_4 = 0;
        while ((i_4 < s_0.Length)) {
            if ((((sep_1.Length > 0) && ((i_4 + sep_1.Length) <= s_0.Length)) && (_substr(s_0, i_4, (i_4 + sep_1.Length)) == sep_1))) {
                parts_2 = (Enumerable.ToArray(Enumerable.Append<string>(parts_2, cur_3)));
                cur_3 = "";
                i_4 = (i_4 + sep_1.Length);
            } else {
                cur_3 = (cur_3 + _substr(s_0, i_4, (i_4 + 1)));
                i_4 = (i_4 + 1);
            }
        };
        parts_2 = (Enumerable.ToArray(Enumerable.Append<string>(parts_2, cur_3)));
        return parts_2;
    }

    public static long card_value(string ch_5) {
        if ((ch_5 == "A")) {
            return 14;
        } else if ((ch_5 == "K")) {
            return 13;
        } else if ((ch_5 == "Q")) {
            return 12;
        } else if ((ch_5 == "J")) {
            return 11;
        } else if ((ch_5 == "T")) {
            return 10;
        } else if ((ch_5 == "9")) {
            return 9;
        } else if ((ch_5 == "8")) {
            return 8;
        } else if ((ch_5 == "7")) {
            return 7;
        } else if ((ch_5 == "6")) {
            return 6;
        } else if ((ch_5 == "5")) {
            return 5;
        } else if ((ch_5 == "4")) {
            return 4;
        } else if ((ch_5 == "3")) {
            return 3;
        } else {
            return 2;
        };
        return default(long);
    }

    public static Hand parse_hand(string hand_6) {
        long[] counts_7 = new long[]{};
        long i_8 = 0;
        while ((i_8 <= 14)) {
            counts_7 = (Enumerable.ToArray(Enumerable.Append<long>(counts_7, 0)));
            i_8 = (i_8 + 1);
        };
        string[] suits_9 = new string[]{};
        foreach (string card_10 in Program.split(hand_6, " ")) {
            long v_11 = Program.card_value(_substr(card_10, 0, 1));
            counts_7[v_11] = (counts_7[(int)(v_11)] + 1);
            suits_9 = (Enumerable.ToArray(Enumerable.Append<string>(suits_9, _substr(card_10, 1, 2))));
        };
        long[] vals_12 = new long[]{};
        long v_13 = 14;
        while ((v_13 >= 2)) {
            long c_14 = counts_7[(int)(v_13)];
            long k_15 = 0;
            while ((k_15 < c_14)) {
                vals_12 = (Enumerable.ToArray(Enumerable.Append<long>(vals_12, v_13)));
                k_15 = (k_15 + 1);
            }
            v_13 = (v_13 - 1);
        };
        bool is_straight_16 = false;
        if (((((((vals_12.Length == 5) && (vals_12[(int)(0)] == 14)) && (vals_12[(int)(1)] == 5)) && (vals_12[(int)(2)] == 4)) && (vals_12[(int)(3)] == 3)) && (vals_12[(int)(4)] == 2))) {
            is_straight_16 = true;
            vals_12[0] = 5;
            vals_12[1] = 4;
            vals_12[2] = 3;
            vals_12[3] = 2;
            vals_12[4] = 14;
        } else {
            is_straight_16 = true;
            long j_17 = 0;
            while ((j_17 < 4)) {
                if (((vals_12[(int)(j_17)] - vals_12[(int)((j_17 + 1))]) != 1)) {
                    is_straight_16 = false;
                }
                j_17 = (j_17 + 1);
            }
        };
        bool is_flush_18 = true;
        string s0_19 = suits_9[(int)(0)];
        long t_20 = 1;
        while ((t_20 < suits_9.Length)) {
            if ((suits_9[(int)(t_20)] != s0_19)) {
                is_flush_18 = false;
            }
            t_20 = (t_20 + 1);
        };
        long four_val_21 = 0;
        long three_val_22 = 0;
        long[] pair_vals_23 = new long[]{};
        v_13 = 14;
        while ((v_13 >= 2)) {
            if ((counts_7[(int)(v_13)] == 4)) {
                four_val_21 = v_13;
            } else if ((counts_7[(int)(v_13)] == 3)) {
                three_val_22 = v_13;
            } else if ((counts_7[(int)(v_13)] == 2)) {
                pair_vals_23 = (Enumerable.ToArray(Enumerable.Append<long>(pair_vals_23, v_13)));
            }
            v_13 = (v_13 - 1);
        };
        long rank_24 = 1;
        if ((((is_flush_18 && is_straight_16) && (vals_12[(int)(0)] == 14)) && (vals_12[(int)(4)] == 10))) {
            rank_24 = 10;
        } else if ((is_flush_18 && is_straight_16)) {
            rank_24 = 9;
        } else if ((four_val_21 != 0)) {
            rank_24 = 8;
        } else if (((three_val_22 != 0) && (pair_vals_23.Length == 1))) {
            rank_24 = 7;
        } else if (is_flush_18) {
            rank_24 = 6;
        } else if (is_straight_16) {
            rank_24 = 5;
        } else if ((three_val_22 != 0)) {
            rank_24 = 4;
        } else if ((pair_vals_23.Length == 2)) {
            rank_24 = 3;
        } else if ((pair_vals_23.Length == 1)) {
            rank_24 = 2;
        } else {
            rank_24 = 1;
        };
        return new Hand{rank = rank_24, values = vals_12};
    }

    public static string compare(Hand a_25, Hand b_26) {
        if ((a_25.rank > b_26.rank)) {
            return "Win";
        };
        if ((a_25.rank < b_26.rank)) {
            return "Loss";
        };
        long i_27 = 0;
        while ((i_27 < a_25.values.Length)) {
            if ((a_25.values[(int)(i_27)] > b_26.values[(int)(i_27)])) {
                return "Win";
            }
            if ((a_25.values[(int)(i_27)] < b_26.values[(int)(i_27)])) {
                return "Loss";
            }
            i_27 = (i_27 + 1);
        };
        return "Tie";
    }

    public static void main() {
        string[][] tests_28 = new string[][]{new string[]{"2H 3H 4H 5H 6H", "KS AS TS QS JS", "Loss"}, new string[]{"2H 3H 4H 5H 6H", "AS AD AC AH JD", "Win"}, new string[]{"AS AH 2H AD AC", "JS JD JC JH 3D", "Win"}, new string[]{"2S AH 2H AS AC", "JS JD JC JH AD", "Loss"}, new string[]{"2S AH 2H AS AC", "2H 3H 5H 6H 7H", "Win"}};
        foreach (string[] t_29 in tests_28) {
            string res_30 = Program.compare(Program.parse_hand(t_29[(int)(0)]), Program.parse_hand(t_29[(int)(1)]));
            Console.WriteLine(Program._fmtTop(((res_30 + " expected ") + t_29[(int)(2)])));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
