// Generated by Mochi 0.10.71 (commit afa9f5164f) on 2025-08-23 15:31 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _ord(object v) {
        if (v is string s && s.Length > 0) return (long)s[0];
        return 0;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static BigInteger _floordiv(BigInteger a, BigInteger b) {
        if (b == 0) return BigInteger.Zero;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q -= 1;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static BigInteger[] triangular_numbers(BigInteger limit_0) {
        BigInteger[] res_1 = new BigInteger[]{};
        BigInteger n_2 = 1;
        while ((n_2 <= limit_0)) {
            res_1 = ((Func<BigInteger[]>)(() => { var _tmp = res_1.Cast<BigInteger>().ToList(); _tmp.Add(((n_2 * (n_2 + 1)) / 2)); return _tmp.ToArray(); }))();
            n_2 = (n_2 + 1);
        };
        return res_1;
    }

    public static string[] parse_words(string text_3) {
        string[] words_4 = new string[]{};
        string current_5 = "";
        BigInteger i_6 = 0;
        while ((i_6 < text_3.Length)) {
            string c_7 = _substr(text_3, (long)(i_6), (long)((i_6 + 1)));
            if ((c_7 == ",")) {
                words_4 = ((Func<string[]>)(() => { var _tmp = words_4.Cast<string>().ToList(); _tmp.Add(current_5); return _tmp.ToArray(); }))();
                current_5 = "";
            } else if ((c_7 == "\"")) {
            } else if (((c_7 == "\r") || (c_7 == "\n"))) {
            } else {
                current_5 = (current_5 + c_7);
            }
            i_6 = (i_6 + 1);
        };
        if ((current_5.Length > 0)) {
            words_4 = ((Func<string[]>)(() => { var _tmp = words_4.Cast<string>().ToList(); _tmp.Add(current_5); return _tmp.ToArray(); }))();
        };
        return words_4;
    }

    public static BigInteger word_value(string word_8) {
        BigInteger total_9 = 0;
        BigInteger i_10 = 0;
        while ((i_10 < word_8.Length)) {
            total_9 = ((((dynamic)(total_9)) + ((dynamic)(_ord(_substr(word_8, (long)(i_10), (long)((i_10 + 1))))))) - 64);
            i_10 = (i_10 + 1);
        };
        return total_9;
    }

    public static bool contains(BigInteger[] xs_11, BigInteger target_12) {
        foreach (BigInteger x_13 in xs_11) {
            if ((x_13 == target_12)) {
                return true;
            }
        };
        return false;
    }

    public static BigInteger solution() {
        var text_14 = File.ReadAllText("words.txt");
        string[] words_15 = Program.parse_words(text_14);
        BigInteger[] tri_16 = Program.triangular_numbers(100);
        BigInteger count_17 = 0;
        foreach (string w_18 in words_15) {
            BigInteger v_19 = Program.word_value(w_18);
            if (Program.contains(tri_16, v_19)) {
                count_17 = (count_17 + 1);
            }
        };
        return count_17;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.solution())));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
