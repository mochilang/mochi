// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_9_pandigital(long n_0) {
        long[] digits_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < 10)) {
            digits_1 = (Enumerable.ToArray(Enumerable.Append<long>(digits_1, 0)));
            i_2 = (i_2 + 1);
        };
        long count_3 = 0;
        long x_4 = n_0;
        while ((x_4 > 0)) {
            long digit_5 = _mod(x_4, 10);
            if ((digit_5 == 0)) {
                return false;
            }
            if ((digits_1[(int)(digit_5)] == 1)) {
                return false;
            }
            digits_1[digit_5] = 1;
            x_4 = (x_4 / 10);
            count_3 = (count_3 + 1);
        };
        return ((((((((((count_3 == 9) && (digits_1[(int)(1)] == 1)) && (digits_1[(int)(2)] == 1)) && (digits_1[(int)(3)] == 1)) && (digits_1[(int)(4)] == 1)) && (digits_1[(int)(5)] == 1)) && (digits_1[(int)(6)] == 1)) && (digits_1[(int)(7)] == 1)) && (digits_1[(int)(8)] == 1)) && (digits_1[(int)(9)] == 1));
    }

    public static long solution() {
        long base_num_6 = 9999;
        while ((base_num_6 >= 5000)) {
            long candidate_7 = (100002 * base_num_6);
            if (Program.is_9_pandigital(candidate_7)) {
                return candidate_7;
            }
            base_num_6 = (base_num_6 - 1);
        };
        base_num_6 = 333;
        while ((base_num_6 >= 100)) {
            long candidate_8 = (1002003 * base_num_6);
            if (Program.is_9_pandigital(candidate_8)) {
                return candidate_8;
            }
            base_num_6 = (base_num_6 - 1);
        };
        return 0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(Program.solution()))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
