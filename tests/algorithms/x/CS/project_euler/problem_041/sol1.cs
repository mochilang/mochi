// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_prime(long number_0) {
        if (((1 < number_0) && (number_0 < 4))) {
            return true;
        } else if ((((number_0 < 2) || (_mod(number_0, 2) == 0)) || (_mod(number_0, 3) == 0))) {
            return false;
        };
        long i_1 = 5;
        while (((i_1 * i_1) <= number_0)) {
            if (((_mod(number_0, i_1) == 0) || (_mod(number_0, (i_1 + 2)) == 0))) {
                return false;
            }
            i_1 = (i_1 + 6);
        };
        return true;
    }

    public static long[] remove_at(long[] xs_2, long index_3) {
        long[] res_4 = new long[]{};
        long i_5 = 0;
        while ((i_5 < xs_2.Length)) {
            if ((i_5 != index_3)) {
                res_4 = (Enumerable.ToArray(Enumerable.Append<long>(res_4, xs_2[(int)(i_5)])));
            }
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static long[] collect_primes(long[] nums_6, long current_7, long[] primes_8) {
        if ((nums_6.Length == 0)) {
            if (Program.is_prime(current_7)) {
                primes_8 = (Enumerable.ToArray(Enumerable.Append<long>(primes_8, current_7)));
            }
            return primes_8;
        };
        long i_9 = 0;
        long[] res_10 = primes_8;
        while ((i_9 < nums_6.Length)) {
            long digit_11 = nums_6[(int)(i_9)];
            long[] remaining_12 = Program.remove_at(nums_6, i_9);
            res_10 = Program.collect_primes(remaining_12, ((current_7 * 10) + digit_11), res_10);
            i_9 = (i_9 + 1);
        };
        return res_10;
    }

    public static long max_list(long[] nums_13) {
        long m_14 = 0;
        long i_15 = 0;
        while ((i_15 < nums_13.Length)) {
            if ((nums_13[(int)(i_15)] > m_14)) {
                m_14 = nums_13[(int)(i_15)];
            }
            i_15 = (i_15 + 1);
        };
        return m_14;
    }

    public static long solution(long n_16) {
        long[] digits_17 = new long[]{};
        long i_18 = 1;
        while ((i_18 <= n_16)) {
            digits_17 = (Enumerable.ToArray(Enumerable.Append<long>(digits_17, i_18)));
            i_18 = (i_18 + 1);
        };
        long[] primes_19 = Program.collect_primes(digits_17, 0, new long[]{});
        if ((primes_19.Length == 0)) {
            return 0;
        };
        return Program.max_list(primes_19);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(Program.solution(7)))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
