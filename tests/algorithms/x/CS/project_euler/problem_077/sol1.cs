// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long NUM_PRIMES_0 = 100;
    static long[] primes_6 = Program.generate_primes(NUM_PRIMES_0);
    static Dictionary<long, long[]> partition_cache_10 = new Dictionary<long, long[]>{};
    static long result_20 = Program.solution(5000);
    public static long[] generate_primes(long limit_1) {
        bool[] is_prime_2 = new bool[]{};
        long i_3 = 0;
        while ((i_3 <= limit_1)) {
            is_prime_2 = (Enumerable.ToArray(Enumerable.Append<bool>(is_prime_2, true)));
            i_3 = (i_3 + 1);
        };
        is_prime_2[0] = false;
        is_prime_2[1] = false;
        i_3 = 2;
        while (((i_3 * i_3) <= limit_1)) {
            if (is_prime_2[(int)(i_3)]) {
                long j_4 = (i_3 * i_3);
                while ((j_4 <= limit_1)) {
                    is_prime_2[j_4] = false;
                    j_4 = (j_4 + i_3);
                }
            }
            i_3 = (i_3 + 1);
        };
        long[] primes_5 = new long[]{};
        i_3 = 2;
        while ((i_3 <= limit_1)) {
            if (is_prime_2[(int)(i_3)]) {
                primes_5 = (Enumerable.ToArray(Enumerable.Append<long>(primes_5, i_3)));
            }
            i_3 = (i_3 + 1);
        };
        return primes_5;
    }

    public static bool contains(long[] xs_7, long value_8) {
        long i_9 = 0;
        while ((i_9 < xs_7.Length)) {
            if ((xs_7[(int)(i_9)] == value_8)) {
                return true;
            }
            i_9 = (i_9 + 1);
        };
        return false;
    }

    public static long[] partition(long n_11) {
        if ((n_11 < 0)) {
            return new long[]{};
        };
        if ((n_11 == 0)) {
            return new long[]{1};
        };
        if ((partition_cache_10.ContainsKey(n_11))) {
            return (partition_cache_10.ContainsKey(n_11) ? partition_cache_10[n_11] : null);
        };
        long[] ret_12 = new long[]{};
        foreach (long prime_13 in primes_6) {
            if ((prime_13 > n_11)) {
                continue;
            }
            long[] subs_14 = Program.partition((n_11 - prime_13));
            foreach (long sub_15 in subs_14) {
                long prod_16 = (sub_15 * prime_13);
                if ((!Program.contains(ret_12, prod_16))) {
                    ret_12 = (Enumerable.ToArray(Enumerable.Append<long>(ret_12, prod_16)));
                }
            }
        };
        partition_cache_10[n_11] = ret_12;
        return ret_12;
    }

    public static long solution(long threshold_17) {
        long number_to_partition_18 = 1;
        while ((number_to_partition_18 < NUM_PRIMES_0)) {
            long[] parts_19 = Program.partition(number_to_partition_18);
            if ((parts_19.Length > threshold_17)) {
                return number_to_partition_18;
            }
            number_to_partition_18 = (number_to_partition_18 + 1);
        };
        return 0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(result_20))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
