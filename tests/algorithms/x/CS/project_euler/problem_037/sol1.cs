// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_prime(long number_0) {
        if (((1 < number_0) && (number_0 < 4))) {
            return true;
        };
        if ((((number_0 < 2) || (_mod(number_0, 2) == 0)) || (_mod(number_0, 3) == 0))) {
            return false;
        };
        long i_1 = 5;
        while (((i_1 * i_1) <= number_0)) {
            if (((_mod(number_0, i_1) == 0) || (_mod(number_0, (i_1 + 2)) == 0))) {
                return false;
            }
            i_1 = (i_1 + 6);
        };
        return true;
    }

    public static long[] list_truncated_nums(long n_2) {
        string str_num_3 = _fmtStr(n_2);
        long[] list_nums_4 = new long[]{n_2};
        long i_5 = 1;
        long length_6 = str_num_3.Length;
        while ((i_5 < length_6)) {
            long right_7 = _atoi(_substr(str_num_3, i_5, length_6));
            long left_8 = _atoi(_substr(str_num_3, 0, (length_6 - i_5)));
            list_nums_4 = (Enumerable.ToArray(Enumerable.Append<long>(list_nums_4, right_7)));
            list_nums_4 = (Enumerable.ToArray(Enumerable.Append<long>(list_nums_4, left_8)));
            i_5 = (i_5 + 1);
        };
        return list_nums_4;
    }

    public static bool validate(long n_9) {
        string s_10 = _fmtStr(n_9);
        long length_11 = s_10.Length;
        if ((length_11 > 3)) {
            long last3_12 = _atoi(_substr(s_10, (length_11 - 3), length_11));
            long first3_13 = _atoi(_substr(s_10, 0, 3));
            if ((!(Program.is_prime(last3_12) && Program.is_prime(first3_13)))) {
                return false;
            }
        };
        return true;
    }

    public static long[] compute_truncated_primes(long count_14) {
        long[] list_truncated_primes_15 = new long[]{};
        long num_16 = 13;
        while ((list_truncated_primes_15.Length != count_14)) {
            if (Program.validate(num_16)) {
                long[] list_nums_17 = Program.list_truncated_nums(num_16);
                bool all_prime_18 = true;
                long j_19 = 0;
                while ((j_19 < list_nums_17.Length)) {
                    if ((!Program.is_prime(list_nums_17[(int)(j_19)]))) {
                        all_prime_18 = false;
                        break;
                    }
                    j_19 = (j_19 + 1);
                }
                if (all_prime_18) {
                    list_truncated_primes_15 = (Enumerable.ToArray(Enumerable.Append<long>(list_truncated_primes_15, num_16)));
                }
            }
            num_16 = (num_16 + 2);
        };
        return list_truncated_primes_15;
    }

    public static long solution() {
        long[] primes_20 = Program.compute_truncated_primes(11);
        long total_21 = 0;
        long i_22 = 0;
        while ((i_22 < primes_20.Length)) {
            total_21 = (total_21 + primes_20[(int)(i_22)]);
            i_22 = (i_22 + 1);
        };
        return total_21;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("sum(compute_truncated_primes(11)) = " + _fmtStr(Program.solution()))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
