// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_substring_divisible(long[] num_0) {
        if ((_mod(num_0[(int)(3)], 2) != 0)) {
            return false;
        };
        if ((_mod(((num_0[(int)(2)] + num_0[(int)(3)]) + num_0[(int)(4)]), 3) != 0)) {
            return false;
        };
        if ((_mod(num_0[(int)(5)], 5) != 0)) {
            return false;
        };
        long[] primes_1 = new long[]{7, 11, 13, 17};
        long i_2 = 0;
        while ((i_2 < primes_1.Length)) {
            long p_3 = primes_1[(int)(i_2)];
            long idx_4 = (i_2 + 4);
            long val_5 = (((num_0[(int)(idx_4)] * 100) + (num_0[(int)((idx_4 + 1))] * 10)) + num_0[(int)((idx_4 + 2))]);
            if ((_mod(val_5, p_3) != 0)) {
                return false;
            }
            i_2 = (i_2 + 1);
        };
        return true;
    }

    public static long[] remove_at(long[] xs_6, long idx_7) {
        long[] res_8 = new long[]{};
        long i_9 = 0;
        while ((i_9 < xs_6.Length)) {
            if ((i_9 != idx_7)) {
                res_8 = (Enumerable.ToArray(Enumerable.Append<long>(res_8, xs_6[(int)(i_9)])));
            }
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static long digits_to_number(long[] xs_10) {
        long value_11 = 0;
        long i_12 = 0;
        while ((i_12 < xs_10.Length)) {
            value_11 = ((value_11 * 10) + xs_10[(int)(i_12)]);
            i_12 = (i_12 + 1);
        };
        return value_11;
    }

    public static long search(long[] prefix_13, long[] remaining_14) {
        if ((remaining_14.Length == 0)) {
            if (Program.is_substring_divisible(prefix_13)) {
                return Program.digits_to_number(prefix_13);
            }
            return 0;
        };
        long total_15 = 0;
        long i_16 = 0;
        while ((i_16 < remaining_14.Length)) {
            long d_17 = remaining_14[(int)(i_16)];
            long[] next_prefix_18 = (Enumerable.ToArray(Enumerable.Append<long>(prefix_13, d_17)));
            long[] next_remaining_19 = Program.remove_at(remaining_14, i_16);
            total_15 = (total_15 + Program.search(next_prefix_18, next_remaining_19));
            i_16 = (i_16 + 1);
        };
        return total_15;
    }

    public static long solution(long n_20) {
        long[] digits_21 = new long[]{};
        long i_22 = 0;
        while ((i_22 < n_20)) {
            digits_21 = (Enumerable.ToArray(Enumerable.Append<long>(digits_21, i_22)));
            i_22 = (i_22 + 1);
        };
        return Program.search(new long[]{}, digits_21);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(string.Join(" ", new string[]{Program._fmtTop("solution() ="), Program._fmtTop(Program.solution(10))}));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
