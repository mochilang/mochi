// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string[] digits_24 = new string[]{"1", "2", "3", "4", "5", "6", "7", "8", "9"};
    static long[] products_25 = new long[]{};
    public static string join_digits(string[] xs_0) {
        string s_1 = "";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + xs_0[(int)(i_2)]);
            i_2 = (i_2 + 1);
        };
        return s_1;
    }

    public static long digits_to_int(string[] xs_3) {
        return _atoi(Program.join_digits(xs_3));
    }

    public static bool contains_int(long[] xs_4, long value_5) {
        long i_6 = 0;
        while ((i_6 < xs_4.Length)) {
            if ((xs_4[(int)(i_6)] == value_5)) {
                return true;
            }
            i_6 = (i_6 + 1);
        };
        return false;
    }

    public static string[] remove_at(string[] xs_7, long idx_8) {
        string[] res_9 = new string[]{};
        long i_10 = 0;
        while ((i_10 < xs_7.Length)) {
            if ((i_10 != idx_8)) {
                res_9 = (Enumerable.ToArray(Enumerable.Append<string>(res_9, xs_7[(int)(i_10)])));
            }
            i_10 = (i_10 + 1);
        };
        return res_9;
    }

    public static bool is_combination_valid(string[] comb_11) {
        long prod_12 = Program.digits_to_int(_slice<string>(comb_11, 5, 9));
        long mul2_13 = Program.digits_to_int(_slice<string>(comb_11, 0, 2));
        long mul3_14 = Program.digits_to_int(_slice<string>(comb_11, 2, 5));
        if (((mul2_13 * mul3_14) == prod_12)) {
            return true;
        };
        long mul1_15 = Program.digits_to_int(_slice<string>(comb_11, 0, 1));
        long mul4_16 = Program.digits_to_int(_slice<string>(comb_11, 1, 5));
        return ((mul1_15 * mul4_16) == prod_12);
    }

    public static long[] search(string[] prefix_17, string[] remaining_18, long[] products_19) {
        if ((remaining_18.Length == 0)) {
            if (Program.is_combination_valid(prefix_17)) {
                long p_20 = Program.digits_to_int(_slice<string>(prefix_17, 5, 9));
                if ((!Program.contains_int(products_19, p_20))) {
                    products_19 = (Enumerable.ToArray(Enumerable.Append<long>(products_19, p_20)));
                }
            }
            return products_19;
        };
        long i_21 = 0;
        while ((i_21 < remaining_18.Length)) {
            string[] next_prefix_22 = (Enumerable.ToArray(Enumerable.Append<string>(prefix_17, remaining_18[(int)(i_21)])));
            string[] next_remaining_23 = Program.remove_at(remaining_18, i_21);
            products_19 = Program.search(next_prefix_22, next_remaining_23, products_19);
            i_21 = (i_21 + 1);
        };
        return products_19;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            products_25 = Program.search(new string[]{}, digits_24, products_25);
            long total_26 = 0;
            long i_27 = 0;
            while ((i_27 < products_25.Length)) {
                total_26 = (total_26 + products_25[(int)(i_27)]);
                i_27 = (i_27 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(total_26)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
