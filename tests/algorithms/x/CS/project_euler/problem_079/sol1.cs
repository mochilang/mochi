// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string[] logins1_41 = new string[]{"135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"};
    public static long parse_int(string s_0) {
        long value_1 = 0;
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            string c_3 = s_0.Substring((int)(i_2), 1);
            value_1 = ((value_1 * 10) + long.Parse(c_3));
            i_2 = (i_2 + 1);
        };
        return value_1;
    }

    public static string join(string[] xs_4) {
        string s_5 = "";
        long i_6 = 0;
        while ((i_6 < xs_4.Length)) {
            s_5 = (s_5 + _idx(xs_4, i_6));
            i_6 = (i_6 + 1);
        };
        return s_5;
    }

    public static bool contains(string[] xs_7, string c_8) {
        long i_9 = 0;
        while ((i_9 < xs_7.Length)) {
            if ((_idx(xs_7, i_9) == c_8)) {
                return true;
            }
            i_9 = (i_9 + 1);
        };
        return false;
    }

    public static long index_of(string[] xs_10, string c_11) {
        long i_12 = 0;
        while ((i_12 < xs_10.Length)) {
            if ((_idx(xs_10, i_12) == c_11)) {
                return i_12;
            }
            i_12 = (i_12 + 1);
        };
        return -1;
    }

    public static string[] remove_at(string[] xs_13, long idx_14) {
        string[] res_15 = new string[]{};
        long i_16 = 0;
        while ((i_16 < xs_13.Length)) {
            if ((i_16 != idx_14)) {
                res_15 = (Enumerable.ToArray(Enumerable.Append<string>(res_15, _idx(xs_13, i_16))));
            }
            i_16 = (i_16 + 1);
        };
        return res_15;
    }

    public static string[] unique_chars(string[] logins_17) {
        string[] chars_18 = new string[]{};
        long i_19 = 0;
        while ((i_19 < logins_17.Length)) {
            string login_20 = _idx(logins_17, i_19);
            long j_21 = 0;
            while ((j_21 < login_20.Length)) {
                string c_22 = login_20.Substring((int)(j_21), 1);
                if ((!Program.contains(chars_18, c_22))) {
                    chars_18 = (Enumerable.ToArray(Enumerable.Append<string>(chars_18, c_22)));
                }
                j_21 = (j_21 + 1);
            }
            i_19 = (i_19 + 1);
        };
        return chars_18;
    }

    public static bool satisfies(string[] permutation_23, string[] logins_24) {
        long i_25 = 0;
        while ((i_25 < logins_24.Length)) {
            string login_26 = _idx(logins_24, i_25);
            long i0_27 = Program.index_of(permutation_23, login_26.Substring((int)(0), 1));
            long i1_28 = Program.index_of(permutation_23, login_26.Substring((int)(1), 1));
            long i2_29 = Program.index_of(permutation_23, login_26.Substring((int)(2), 1));
            if ((!((i0_27 < i1_28) && (i1_28 < i2_29)))) {
                return false;
            }
            i_25 = (i_25 + 1);
        };
        return true;
    }

    public static string search(string[] chars_30, string[] current_31, string[] logins_32) {
        if ((chars_30.Length == 0)) {
            if (Program.satisfies(current_31, logins_32)) {
                return Program.join(current_31);
            }
            return "";
        };
        long i_33 = 0;
        while ((i_33 < chars_30.Length)) {
            string c_34 = _idx(chars_30, i_33);
            string[] rest_35 = Program.remove_at(chars_30, i_33);
            string[] next_36 = (Enumerable.ToArray(Enumerable.Append<string>(current_31, c_34)));
            string res_37 = Program.search(rest_35, next_36, logins_32);
            if ((res_37 != "")) {
                return res_37;
            }
            i_33 = (i_33 + 1);
        };
        return "";
    }

    public static long find_secret_passcode(string[] logins_38) {
        string[] chars_39 = Program.unique_chars(logins_38);
        string s_40 = Program.search(chars_39, new string[]{}, logins_38);
        if ((s_40 == "")) {
            return -1;
        };
        return Program.parse_int(s_40);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_secret_passcode(logins1_41))));
            string[] logins2_42 = new string[]{"426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.find_secret_passcode(logins2_42))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
