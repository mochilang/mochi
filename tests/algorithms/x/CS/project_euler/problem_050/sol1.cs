// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long ans_16 = Program.solution(1000000);
    public static long[] prime_sieve(long limit_0) {
        if ((limit_0 <= 2)) {
            return new long[]{};
        };
        bool[] is_prime_1 = new bool[]{};
        long i_2 = 0;
        while ((i_2 < limit_0)) {
            is_prime_1 = (Enumerable.ToArray(Enumerable.Append<bool>(is_prime_1, true)));
            i_2 = (i_2 + 1);
        };
        is_prime_1[0] = false;
        is_prime_1[1] = false;
        long p_3 = 3;
        while (((p_3 * p_3) < limit_0)) {
            long index_4 = (p_3 * 2);
            while ((index_4 < limit_0)) {
                is_prime_1[index_4] = false;
                index_4 = (index_4 + p_3);
            }
            p_3 = (p_3 + 2);
        };
        long[] primes_5 = new long[]{2};
        long n_6 = 3;
        while ((n_6 < limit_0)) {
            if (is_prime_1[(int)(n_6)]) {
                primes_5 = (Enumerable.ToArray(Enumerable.Append<long>(primes_5, n_6)));
            }
            n_6 = (n_6 + 2);
        };
        return primes_5;
    }

    public static long solution(long ceiling_7) {
        long[] primes_8 = Program.prime_sieve(ceiling_7);
        Dictionary<long, bool> prime_map_9 = new Dictionary<long, bool>{};
        long i_10 = 0;
        while ((i_10 < primes_8.Length)) {
            prime_map_9[primes_8[(int)(i_10)]] = true;
            i_10 = (i_10 + 1);
        };
        long[] prefix_11 = new long[]{0};
        i_10 = 0;
        while ((i_10 < primes_8.Length)) {
            prefix_11 = (Enumerable.ToArray(Enumerable.Append<long>(prefix_11, (prefix_11[(int)(i_10)] + primes_8[(int)(i_10)]))));
            i_10 = (i_10 + 1);
        };
        long max_len_12 = 0;
        while (((max_len_12 < prefix_11.Length) && (prefix_11[(int)(max_len_12)] < ceiling_7))) {
            max_len_12 = (max_len_12 + 1);
        };
        long L_13 = max_len_12;
        while ((L_13 > 0)) {
            long start_14 = 0;
            while (((start_14 + L_13) <= primes_8.Length)) {
                long s_15 = (prefix_11[(int)((start_14 + L_13))] - prefix_11[(int)(start_14)]);
                if ((s_15 >= ceiling_7)) {
                    break;
                }
                if ((prime_map_9.ContainsKey(s_15) ? prime_map_9[s_15] : false)) {
                    return s_15;
                }
                start_14 = (start_14 + 1);
            }
            L_13 = (L_13 - 1);
        };
        return 0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(ans_16))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
