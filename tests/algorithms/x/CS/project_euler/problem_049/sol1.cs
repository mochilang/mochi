// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool is_prime(long number_0) {
        if (((1 < number_0) && (number_0 < 4))) {
            return true;
        };
        if ((((number_0 < 2) || (_mod(number_0, 2) == 0)) || (_mod(number_0, 3) == 0))) {
            return false;
        };
        long i_1 = 5;
        while (((i_1 * i_1) <= number_0)) {
            if (((_mod(number_0, i_1) == 0) || (_mod(number_0, (i_1 + 2)) == 0))) {
                return false;
            }
            i_1 = (i_1 + 6);
        };
        return true;
    }

    public static bool search(long target_2, long[] arr_3) {
        long left_4 = 0;
        long right_5 = (arr_3.Length - 1);
        while ((left_4 <= right_5)) {
            long middle_6 = ((left_4 + right_5) / 2);
            if ((arr_3[(int)(middle_6)] == target_2)) {
                return true;
            }
            if ((arr_3[(int)(middle_6)] < target_2)) {
                left_4 = (middle_6 + 1);
            } else {
                right_5 = (middle_6 - 1);
            }
        };
        return false;
    }

    public static long[] sort_int(long[] xs_7) {
        long[] arr_8 = xs_7;
        long i_9 = 0;
        while ((i_9 < arr_8.Length)) {
            long j_10 = (i_9 + 1);
            while ((j_10 < arr_8.Length)) {
                if ((arr_8[(int)(j_10)] < arr_8[(int)(i_9)])) {
                    long tmp_11 = arr_8[(int)(i_9)];
                    arr_8[i_9] = arr_8[(int)(j_10)];
                    arr_8[j_10] = tmp_11;
                }
                j_10 = (j_10 + 1);
            }
            i_9 = (i_9 + 1);
        };
        return arr_8;
    }

    public static long[] permutations_of_number(long n_12) {
        string s_13 = _fmtStr(n_12);
        long[] d_14 = new long[]{};
        long i_15 = 0;
        while ((i_15 < s_13.Length)) {
            d_14 = (Enumerable.ToArray(Enumerable.Append<long>(d_14, _atoi(s_13.Substring((int)(i_15), 1)))));
            i_15 = (i_15 + 1);
        };
        long[] res_16 = new long[]{};
        long a_17 = 0;
        while ((a_17 < d_14.Length)) {
            long b_18 = 0;
            while ((b_18 < d_14.Length)) {
                if ((b_18 != a_17)) {
                    long c_19 = 0;
                    while ((c_19 < d_14.Length)) {
                        if (((c_19 != a_17) && (c_19 != b_18))) {
                            long e_20 = 0;
                            while ((e_20 < d_14.Length)) {
                                if ((((e_20 != a_17) && (e_20 != b_18)) && (e_20 != c_19))) {
                                    long val_21 = ((((d_14[(int)(a_17)] * 1000) + (d_14[(int)(b_18)] * 100)) + (d_14[(int)(c_19)] * 10)) + d_14[(int)(e_20)]);
                                    res_16 = (Enumerable.ToArray(Enumerable.Append<long>(res_16, val_21)));
                                }
                                e_20 = (e_20 + 1);
                            }
                        }
                        c_19 = (c_19 + 1);
                    }
                }
                b_18 = (b_18 + 1);
            }
            a_17 = (a_17 + 1);
        };
        return res_16;
    }

    public static long abs_int(long x_22) {
        if ((x_22 < 0)) {
            return -x_22;
        };
        return x_22;
    }

    public static bool contains_int(long[] xs_23, long v_24) {
        long i_25 = 0;
        while ((i_25 < xs_23.Length)) {
            if ((xs_23[(int)(i_25)] == v_24)) {
                return true;
            }
            i_25 = (i_25 + 1);
        };
        return false;
    }

    public static long solution() {
        long[] prime_list_26 = new long[]{};
        long n_27 = 1001;
        while ((n_27 < 10000)) {
            if (Program.is_prime(n_27)) {
                prime_list_26 = (Enumerable.ToArray(Enumerable.Append<long>(prime_list_26, n_27)));
            }
            n_27 = (n_27 + 2);
        };
        long[][] candidates_28 = new long[][]{};
        long i_29 = 0;
        while ((i_29 < prime_list_26.Length)) {
            long number_30 = prime_list_26[(int)(i_29)];
            long[] tmp_31 = new long[]{};
            long[] perms_32 = Program.permutations_of_number(number_30);
            long j_33 = 0;
            while ((j_33 < perms_32.Length)) {
                long prime_34 = perms_32[(int)(j_33)];
                if (((_mod(prime_34, 2) != 0) && Program.search(prime_34, prime_list_26))) {
                    tmp_31 = (Enumerable.ToArray(Enumerable.Append<long>(tmp_31, prime_34)));
                }
                j_33 = (j_33 + 1);
            }
            tmp_31 = Program.sort_int(tmp_31);
            if ((tmp_31.Length >= 3)) {
                candidates_28 = (Enumerable.ToArray(Enumerable.Append<long[]>(candidates_28, tmp_31)));
            }
            i_29 = (i_29 + 1);
        };
        long[][] passed_35 = new long[][]{};
        i_29 = 0;
        while ((i_29 < candidates_28.Length)) {
            long[] candidate_36 = candidates_28[(int)(i_29)];
            bool found_37 = false;
            long a_38 = 0;
            while ((a_38 < candidate_36.Length)) {
                long b_39 = (a_38 + 1);
                while ((b_39 < candidate_36.Length)) {
                    long c_40 = (b_39 + 1);
                    while ((c_40 < candidate_36.Length)) {
                        long x_41 = candidate_36[(int)(a_38)];
                        long y_42 = candidate_36[(int)(b_39)];
                        long z_43 = candidate_36[(int)(c_40)];
                        if (((((Program.abs_int((x_41 - y_42)) == Program.abs_int((y_42 - z_43))) && (x_41 != y_42)) && (x_41 != z_43)) && (y_42 != z_43))) {
                            long[] triple_44 = Program.sort_int(new long[]{x_41, y_42, z_43});
                            passed_35 = (Enumerable.ToArray(Enumerable.Append<long[]>(passed_35, triple_44)));
                            found_37 = true;
                            break;
                        }
                        c_40 = (c_40 + 1);
                    }
                    if (found_37) {
                        break;
                    }
                    b_39 = (b_39 + 1);
                }
                if (found_37) {
                    break;
                }
                a_38 = (a_38 + 1);
            }
            i_29 = (i_29 + 1);
        };
        long[] answer_nums_45 = new long[]{};
        i_29 = 0;
        while ((i_29 < passed_35.Length)) {
            long[] seq_46 = passed_35[(int)(i_29)];
            long val_47 = _atoi(((_fmtStr(seq_46[(int)(0)]) + _fmtStr(seq_46[(int)(1)])) + _fmtStr(seq_46[(int)(2)])));
            if ((!Program.contains_int(answer_nums_45, val_47))) {
                answer_nums_45 = (Enumerable.ToArray(Enumerable.Append<long>(answer_nums_45, val_47)));
            }
            i_29 = (i_29 + 1);
        };
        long max_val_48 = answer_nums_45[(int)(0)];
        i_29 = 1;
        while ((i_29 < answer_nums_45.Length)) {
            if ((answer_nums_45[(int)(i_29)] > max_val_48)) {
                max_val_48 = answer_nums_45[(int)(i_29)];
            }
            i_29 = (i_29 + 1);
        };
        return max_val_48;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.solution()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
