// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long int_sqrt(long n_0) {
        long low_1 = 0;
        long high_2 = n_0;
        while ((low_1 <= high_2)) {
            long mid_3 = ((low_1 + high_2) / 2);
            long sq_4 = (mid_3 * mid_3);
            if ((sq_4 == n_0)) {
                return mid_3;
            }
            if ((sq_4 < n_0)) {
                low_1 = (mid_3 + 1);
            } else {
                high_2 = (mid_3 - 1);
            }
        };
        return high_2;
    }

    public static Dictionary<long, long> pythagorean_triple(long max_perimeter_5) {
        Dictionary<long, long> triplets_6 = new Dictionary<long, long>{};
        long base_7 = 1;
        while ((base_7 <= max_perimeter_5)) {
            long perpendicular_8 = base_7;
            while ((perpendicular_8 <= max_perimeter_5)) {
                long hyp_sq_9 = ((base_7 * base_7) + (perpendicular_8 * perpendicular_8));
                long hyp_10 = Program.int_sqrt(hyp_sq_9);
                if (((hyp_10 * hyp_10) == hyp_sq_9)) {
                    long perimeter_11 = ((base_7 + perpendicular_8) + hyp_10);
                    if ((perimeter_11 <= max_perimeter_5)) {
                        if ((triplets_6.ContainsKey(perimeter_11))) {
                            triplets_6[perimeter_11] = ((triplets_6.ContainsKey(perimeter_11) ? triplets_6[perimeter_11] : 0) + 1);
                        } else {
                            triplets_6[perimeter_11] = 1;
                        }
                    }
                }
                perpendicular_8 = (perpendicular_8 + 1);
            }
            base_7 = (base_7 + 1);
        };
        return triplets_6;
    }

    public static long max_perimeter(Dictionary<long, long> counts_12) {
        long best_p_13 = 0;
        long max_count_14 = 0;
        foreach (long p_15 in counts_12.Keys) {
            long count_16 = (counts_12.ContainsKey(p_15) ? counts_12[p_15] : 0);
            if (((count_16 > max_count_14) || ((count_16 == max_count_14) && (p_15 > best_p_13)))) {
                max_count_14 = count_16;
                best_p_13 = p_15;
            }
        };
        return best_p_13;
    }

    public static long solution(long n_17) {
        Dictionary<long, long> triplets_18 = Program.pythagorean_triple(n_17);
        return Program.max_perimeter(triplets_18);
    }

    public static void main() {
        long s200_19 = Program.max_perimeter(Program.pythagorean_triple(200));
        long s100_20 = Program.max_perimeter(Program.pythagorean_triple(100));
        Console.WriteLine(Program._fmtTop(_fmtStr(s100_20)));
        Console.WriteLine(Program._fmtTop(_fmtStr(s200_19)));
        long best_21 = Program.max_perimeter(Program.pythagorean_triple(1000));
        Console.WriteLine(Program._fmtTop(_fmtStr(best_21)));
        Console.WriteLine(Program._fmtTop((("Perimeter " + _fmtStr(best_21)) + " has maximum solutions")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
