// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long solution() {
        long[][] triangle_0 = new long[][]{new long[]{75}, new long[]{95, 64}, new long[]{17, 47, 82}, new long[]{18, 35, 87, 10}, new long[]{20, 4, 82, 47, 65}, new long[]{19, 1, 23, 75, 3, 34}, new long[]{88, 2, 77, 73, 7, 63, 67}, new long[]{99, 65, 4, 28, 6, 16, 70, 92}, new long[]{41, 41, 26, 56, 83, 40, 80, 70, 33}, new long[]{41, 48, 72, 33, 47, 32, 37, 16, 94, 29}, new long[]{53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14}, new long[]{70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57}, new long[]{91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48}, new long[]{63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31}, new long[]{4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23}};
        long i_1 = 1;
        while ((i_1 < triangle_0.Length)) {
            long j_2 = 0;
            while ((j_2 < triangle_0[(int)(i_1)].Length)) {
                long[] prev_row_3 = triangle_0[(int)((i_1 - 1))];
                long number1_4 = ((j_2 != prev_row_3.Length) ? prev_row_3[(int)(j_2)] : 0);
                long number2_5 = ((j_2 > 0) ? prev_row_3[(int)((j_2 - 1))] : 0);
                long max_val_6 = ((number1_4 > number2_5) ? number1_4 : number2_5);
                triangle_0[(int)(i_1)][j_2] = (triangle_0[(int)(i_1)][(int)(j_2)] + max_val_6);
                j_2 = (j_2 + 1);
            }
            i_1 = (i_1 + 1);
        };
        long[] last_7 = triangle_0[(int)((triangle_0.Length - 1))];
        long k_8 = 0;
        long best_9 = 0;
        while ((k_8 < last_7.Length)) {
            if ((last_7[(int)(k_8)] > best_9)) {
                best_9 = last_7[(int)(k_8)];
            }
            k_8 = (k_8 + 1);
        };
        return best_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.solution())));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
