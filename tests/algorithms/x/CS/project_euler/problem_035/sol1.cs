// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long LIMIT_0 = 10000;
    static bool[] sieve_1 = new bool[]{};
    static long i_2 = 0;
    public static bool is_prime(long n_5) {
        return sieve_1[(int)(n_5)];
    }

    public static bool contains_an_even_digit(long n_6) {
        string s_7 = _fmtStr(n_6);
        long idx_8 = 0;
        while ((idx_8 < s_7.Length)) {
            string c_9 = s_7.Substring((int)(idx_8), 1);
            if ((((((c_9 == "0") || (c_9 == "2")) || (c_9 == "4")) || (c_9 == "6")) || (c_9 == "8"))) {
                return true;
            }
            idx_8 = (idx_8 + 1);
        };
        return false;
    }

    public static long parse_int(string s_10) {
        long value_11 = 0;
        long k_12 = 0;
        while ((k_12 < s_10.Length)) {
            string ch_13 = s_10.Substring((int)(k_12), 1);
            value_11 = ((value_11 * 10) + long.Parse(ch_13));
            k_12 = (k_12 + 1);
        };
        return value_11;
    }

    public static long[] find_circular_primes(long limit_14) {
        long[] result_15 = new long[]{2};
        long num_16 = 3;
        while ((num_16 <= limit_14)) {
            if ((Program.is_prime(num_16) && (Program.contains_an_even_digit(num_16) == false))) {
                string s_17 = _fmtStr(num_16);
                bool all_prime_18 = true;
                long j_19 = 0;
                while ((j_19 < s_17.Length)) {
                    string rotated_str_20 = (_substr(s_17, j_19, s_17.Length) + _substr(s_17, 0, j_19));
                    long rotated_21 = Program.parse_int(rotated_str_20);
                    if ((!Program.is_prime(rotated_21))) {
                        all_prime_18 = false;
                        break;
                    }
                    j_19 = (j_19 + 1);
                }
                if (all_prime_18) {
                    result_15 = (Enumerable.ToArray(Enumerable.Append<long>(result_15, num_16)));
                }
            }
            num_16 = (num_16 + 2);
        };
        return result_15;
    }

    public static long solution() {
        return Program.find_circular_primes(LIMIT_0).Length;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_2 <= LIMIT_0)) {
                sieve_1 = (Enumerable.ToArray(Enumerable.Append<bool>(sieve_1, true)));
                i_2 = (i_2 + 1);
            }
            long p_3 = 2;
            while (((p_3 * p_3) <= LIMIT_0)) {
                if (sieve_1[(int)(p_3)]) {
                    long j_4 = (p_3 * p_3);
                    while ((j_4 <= LIMIT_0)) {
                        sieve_1[j_4] = false;
                        j_4 = (j_4 + p_3);
                    }
                }
                p_3 = (p_3 + 1);
            }
            Console.WriteLine(Program._fmtTop(("len(find_circular_primes()) = " + _fmtStr(Program.solution()))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
