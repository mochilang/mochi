// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static string[] parse_names(string line_0) {
        string[] names_1 = new string[]{};
        string current_2 = "";
        long i_3 = 0;
        while ((i_3 < line_0.Length)) {
            string ch_4 = _substr(line_0, i_3, (i_3 + 1));
            if ((ch_4 == ",")) {
                names_1 = (Enumerable.ToArray(Enumerable.Append<string>(names_1, current_2)));
                current_2 = "";
            } else if ((ch_4 != "\"")) {
                current_2 = (current_2 + ch_4);
            }
            i_3 = (i_3 + 1);
        };
        names_1 = (Enumerable.ToArray(Enumerable.Append<string>(names_1, current_2)));
        return names_1;
    }

    public static string[] insertion_sort(string[] arr_5) {
        string[] a_6 = arr_5;
        long i_7 = 1;
        while ((i_7 < a_6.Length)) {
            string key_8 = a_6[(int)(i_7)];
            long j_9 = (i_7 - 1);
            while (((j_9 >= 0) && (string.Compare(a_6[(int)(j_9)], key_8) > 0))) {
                a_6[(j_9 + 1)] = a_6[(int)(j_9)];
                j_9 = (j_9 - 1);
            }
            a_6[(j_9 + 1)] = key_8;
            i_7 = (i_7 + 1);
        };
        return a_6;
    }

    public static long letter_value(string ch_10) {
        string alphabet_11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        long idx_12 = 0;
        while ((idx_12 < alphabet_11.Length)) {
            if ((_substr(alphabet_11, idx_12, (idx_12 + 1)) == ch_10)) {
                return (idx_12 + 1);
            }
            idx_12 = (idx_12 + 1);
        };
        return 0;
    }

    public static long name_score(string name_13) {
        long score_14 = 0;
        long i_15 = 0;
        while ((i_15 < name_13.Length)) {
            score_14 = (score_14 + Program.letter_value(_substr(name_13, i_15, (i_15 + 1))));
            i_15 = (i_15 + 1);
        };
        return score_14;
    }

    public static void main() {
        string line_16 = _input();
        string[] names_17 = Program.insertion_sort(Program.parse_names(line_16));
        long total_18 = 0;
        long i_19 = 0;
        while ((i_19 < names_17.Length)) {
            total_18 = (total_18 + ((i_19 + 1) * Program.name_score(names_17[(int)(i_19)])));
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(Program._fmtTop(_fmtStr(total_18)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
