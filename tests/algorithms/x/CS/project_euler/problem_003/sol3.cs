// Generated by Mochi 0.10.60 on 2025-08-08 11:10 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static long largest_prime_factor(long n_0) {
        if ((n_0 <= 1)) {
            return n_0;
        };
        long i_1 = 2;
        long ans_2 = 0;
        long m_3 = n_0;
        if ((m_3 == 2)) {
            return 2;
        };
        while ((m_3 > 2)) {
            while ((_mod(m_3, i_1) != 0)) {
                i_1 = (i_1 + 1);
            }
            ans_2 = i_1;
            while ((_mod(m_3, i_1) == 0)) {
                m_3 = (m_3 / i_1);
            }
            i_1 = (i_1 + 1);
        };
        return ans_2;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(JsonSerializer.Serialize(Program.largest_prime_factor(13195)));
            Console.WriteLine(JsonSerializer.Serialize(Program.largest_prime_factor(10)));
            Console.WriteLine(JsonSerializer.Serialize(Program.largest_prime_factor(17)));
            Console.WriteLine(JsonSerializer.Serialize(Program.largest_prime_factor(600851475143L)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
