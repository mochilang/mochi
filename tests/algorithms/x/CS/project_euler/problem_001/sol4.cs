// Generated by Mochi 0.10.59 on 2025-08-07 12:01 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static bool contains(long[] xs_0, long value_1) {
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((xs_0[(int)(i_2)] == value_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static long solution(long n_3) {
        long[] zmulti_4 = new long[]{};
        long[] xmulti_5 = new long[]{};
        long temp_6 = 1;
        while (true) {
            long result_7 = (3 * temp_6);
            if ((result_7 < n_3)) {
                zmulti_4 = (Enumerable.ToArray(Enumerable.Append<long>(zmulti_4, result_7)));
                temp_6 = (temp_6 + 1);
            } else {
                break;
            }
        };
        temp_6 = 1;
        while (true) {
            long result_8 = (5 * temp_6);
            if ((result_8 < n_3)) {
                xmulti_5 = (Enumerable.ToArray(Enumerable.Append<long>(xmulti_5, result_8)));
                temp_6 = (temp_6 + 1);
            } else {
                break;
            }
        };
        long[] collection_9 = new long[]{};
        long i_10 = 0;
        while ((i_10 < zmulti_4.Length)) {
            long v_11 = zmulti_4[(int)(i_10)];
            if ((!Program.contains(collection_9, v_11))) {
                collection_9 = (Enumerable.ToArray(Enumerable.Append<long>(collection_9, v_11)));
            }
            i_10 = (i_10 + 1);
        };
        i_10 = 0;
        while ((i_10 < xmulti_5.Length)) {
            long v_12 = xmulti_5[(int)(i_10)];
            if ((!Program.contains(collection_9, v_12))) {
                collection_9 = (Enumerable.ToArray(Enumerable.Append<long>(collection_9, v_12)));
            }
            i_10 = (i_10 + 1);
        };
        long total_13 = 0;
        i_10 = 0;
        while ((i_10 < collection_9.Length)) {
            total_13 = (total_13 + collection_9[(int)(i_10)]);
            i_10 = (i_10 + 1);
        };
        return total_13;
    }

    public static void test_solution() {
        if ((Program.solution(3) != 0)) {
            throw new Exception("solution(3) failed");
        };
        if ((Program.solution(4) != 3)) {
            throw new Exception("solution(4) failed");
        };
        if ((Program.solution(10) != 23)) {
            throw new Exception("solution(10) failed");
        };
        if ((Program.solution(600) != 83700)) {
            throw new Exception("solution(600) failed");
        };
    }

    public static void main() {
        Program.test_solution();
        Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(Program.solution(1000)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
