// Generated by Mochi 0.10.70 (commit ccc5351ed8) on 2025-08-23 14:49 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        if (v is BigInteger bi) return bi.ToString(CultureInfo.InvariantCulture);

        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool contains(BigInteger[] xs_0, BigInteger value_1) {
        BigInteger i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            if ((_idx(xs_0, (long)(i_2)) == value_1)) {
                return true;
            }
            i_2 = (i_2 + 1);
        };
        return false;
    }

    public static BigInteger solution(BigInteger n_3) {
        BigInteger[] zmulti_4 = new BigInteger[]{};
        BigInteger[] xmulti_5 = new BigInteger[]{};
        BigInteger temp_6 = 1;
        while (true) {
            BigInteger result_7 = (3 * temp_6);
            if ((result_7 < n_3)) {
                zmulti_4 = ((Func<BigInteger[]>)(() => { var _tmp = zmulti_4.Cast<BigInteger>().ToList(); _tmp.Add(result_7); return _tmp.ToArray(); }))();
                temp_6 = (temp_6 + 1);
            } else {
                break;
            }
        };
        temp_6 = 1;
        while (true) {
            BigInteger result_8 = (5 * temp_6);
            if ((result_8 < n_3)) {
                xmulti_5 = ((Func<BigInteger[]>)(() => { var _tmp = xmulti_5.Cast<BigInteger>().ToList(); _tmp.Add(result_8); return _tmp.ToArray(); }))();
                temp_6 = (temp_6 + 1);
            } else {
                break;
            }
        };
        BigInteger[] collection_9 = new BigInteger[]{};
        BigInteger i_10 = 0;
        while ((i_10 < zmulti_4.Length)) {
            BigInteger v_11 = _idx(zmulti_4, (long)(i_10));
            if ((!Program.contains(collection_9, v_11))) {
                collection_9 = ((Func<BigInteger[]>)(() => { var _tmp = collection_9.Cast<BigInteger>().ToList(); _tmp.Add(v_11); return _tmp.ToArray(); }))();
            }
            i_10 = (i_10 + 1);
        };
        i_10 = 0;
        while ((i_10 < xmulti_5.Length)) {
            BigInteger v_12 = _idx(xmulti_5, (long)(i_10));
            if ((!Program.contains(collection_9, v_12))) {
                collection_9 = ((Func<BigInteger[]>)(() => { var _tmp = collection_9.Cast<BigInteger>().ToList(); _tmp.Add(v_12); return _tmp.ToArray(); }))();
            }
            i_10 = (i_10 + 1);
        };
        BigInteger total_13 = 0;
        i_10 = 0;
        while ((i_10 < collection_9.Length)) {
            total_13 = (total_13 + _idx(collection_9, (long)(i_10)));
            i_10 = (i_10 + 1);
        };
        return total_13;
    }

    public static void test_solution() {
        if ((Program.solution(3) != 0)) {
            throw new Exception("solution(3) failed");
        };
        if ((Program.solution(4) != 3)) {
            throw new Exception("solution(4) failed");
        };
        if ((Program.solution(10) != 23)) {
            throw new Exception("solution(10) failed");
        };
        if ((Program.solution(600) != 83700)) {
            throw new Exception("solution(600) failed");
        };
    }

    public static void main() {
        Program.test_solution();
        Console.WriteLine(Program._fmtTop(("solution() = " + _fmtStr(Program.solution(1000)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
