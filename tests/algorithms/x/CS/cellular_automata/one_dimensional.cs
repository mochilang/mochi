// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] initial_19 = new long[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    static long[][] cells_20 = new long[][]{initial_19};
    static long[] rules_21 = Program.format_ruleset(30);
    static long time_22 = 0;
    public static long[] format_ruleset(long ruleset_0) {
        long rs_1 = ruleset_0;
        long[] bits_rev_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < 8)) {
            bits_rev_2 = (Enumerable.ToArray(Enumerable.Append(bits_rev_2, (rs_1 % 2))));
            rs_1 = (rs_1 / 2);
            i_3 = (i_3 + 1);
        };
        long[] bits_4 = new long[]{};
        long j_5 = (bits_rev_2.Length - 1);
        while ((j_5 >= 0)) {
            bits_4 = (Enumerable.ToArray(Enumerable.Append(bits_4, bits_rev_2[(int)(j_5)])));
            j_5 = (j_5 - 1);
        };
        return bits_4;
    }

    public static long[] new_generation(long[][] cells_6, long[] rules_7, long time_8) {
        int population_9 = cells_6[(int)(0)].Length;
        long[] next_generation_10 = new long[]{};
        long i_11 = 0;
        while ((i_11 < population_9)) {
            long left_neighbor_12 = ((i_11 == 0) ? 0 : cells_6[(int)(time_8)][(int)((i_11 - 1))]);
            long right_neighbor_13 = ((i_11 == (population_9 - 1)) ? 0 : cells_6[(int)(time_8)][(int)((i_11 + 1))]);
            long center_14 = cells_6[(int)(time_8)][(int)(i_11)];
            long idx_15 = (7 - (((left_neighbor_12 * 4) + (center_14 * 2)) + right_neighbor_13));
            next_generation_10 = (Enumerable.ToArray(Enumerable.Append(next_generation_10, rules_7[(int)(idx_15)])));
            i_11 = (i_11 + 1);
        };
        return next_generation_10;
    }

    public static string cells_to_string(long[] row_16) {
        string result_17 = "";
        long i_18 = 0;
        while ((i_18 < row_16.Length)) {
            if ((row_16[(int)(i_18)] == 1)) {
                result_17 = (result_17 + "#");
            } else {
                result_17 = (result_17 + ".");
            }
            i_18 = (i_18 + 1);
        };
        return result_17;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((time_22 < 16)) {
                long[] next_23 = Program.new_generation(cells_20, rules_21, time_22);
                cells_20 = (Enumerable.ToArray(Enumerable.Append(cells_20, next_23)));
                time_22 = (time_22 + 1);
            }
            long t_24 = 0;
            while ((t_24 < cells_20.Length)) {
                Console.WriteLine(Program._fmtTop(Program.cells_to_string(cells_20[(int)(t_24)])));
                t_24 = (t_24 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
