// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long seed_0 = 1;
    static long NEG_ONE_1 = -1;
    public static long rand() {
        seed_0 = (((seed_0 * 1103515245) + 12345) % 2147483648L);
        return seed_0;
    }

    public static long randint(long a_2, long b_3) {
        long r_4 = Program.rand();
        return (a_2 + (r_4 % ((b_3 - a_2) + 1)));
    }

    public static double random() {
        return ((1.0 * Program.rand()) / 2.147483648e+09);
    }

    public static long[][] construct_highway(long number_of_cells_5, long frequency_6, long initial_speed_7, bool random_frequency_8, bool random_speed_9, long max_speed_10) {
        long[] row_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < number_of_cells_5)) {
            row_11 = (Enumerable.ToArray(Enumerable.Append(row_11, -1)));
            i_12 = (i_12 + 1);
        };
        long[][] highway_13 = new long[][]{};
        highway_13 = (Enumerable.ToArray(Enumerable.Append(highway_13, row_11)));
        i_12 = 0;
        if ((initial_speed_7 < 0)) {
            initial_speed_7 = 0;
        };
        while ((i_12 < number_of_cells_5)) {
            long speed_14 = initial_speed_7;
            if (random_speed_9) {
                speed_14 = Program.randint(0, max_speed_10);
            }
            highway_13[(int)(0)][i_12] = speed_14;
            long step_15 = frequency_6;
            if (random_frequency_8) {
                step_15 = Program.randint(1, (max_speed_10 * 2));
            }
            i_12 = (i_12 + step_15);
        };
        return highway_13;
    }

    public static long get_distance(long[] highway_now_16, long car_index_17) {
        long distance_18 = 0;
        long i_19 = (car_index_17 + 1);
        while ((i_19 < highway_now_16.Length)) {
            if ((highway_now_16[(int)(i_19)] > NEG_ONE_1)) {
                return distance_18;
            }
            distance_18 = (distance_18 + 1);
            i_19 = (i_19 + 1);
        };
        return (distance_18 + Program.get_distance(highway_now_16, -1));
    }

    public static long[] update(long[] highway_now_20, double probability_21, long max_speed_22) {
        int number_of_cells_23 = highway_now_20.Length;
        long[] next_highway_24 = new long[]{};
        long i_25 = 0;
        while ((i_25 < number_of_cells_23)) {
            next_highway_24 = (Enumerable.ToArray(Enumerable.Append(next_highway_24, -1)));
            i_25 = (i_25 + 1);
        };
        long car_index_26 = 0;
        while ((car_index_26 < number_of_cells_23)) {
            long speed_27 = highway_now_20[(int)(car_index_26)];
            if ((speed_27 > NEG_ONE_1)) {
                long new_speed_28 = (speed_27 + 1);
                if ((new_speed_28 > max_speed_22)) {
                    new_speed_28 = max_speed_22;
                }
                long dn_29 = (Program.get_distance(highway_now_20, car_index_26) - 1);
                if ((new_speed_28 > dn_29)) {
                    new_speed_28 = dn_29;
                }
                if ((Program.random() < probability_21)) {
                    new_speed_28 = (new_speed_28 - 1);
                    if ((new_speed_28 < 0)) {
                        new_speed_28 = 0;
                    }
                }
                next_highway_24[car_index_26] = new_speed_28;
            }
            car_index_26 = (car_index_26 + 1);
        };
        return next_highway_24;
    }

    public static long[][] simulate(long[][] highway_30, long number_of_update_31, double probability_32, long max_speed_33) {
        int number_of_cells_34 = highway_30[(int)(0)].Length;
        long i_35 = 0;
        while ((i_35 < number_of_update_31)) {
            long[] next_speeds_36 = Program.update(highway_30[(int)(i_35)], probability_32, max_speed_33);
            long[] real_next_37 = new long[]{};
            long j_38 = 0;
            while ((j_38 < number_of_cells_34)) {
                real_next_37 = (Enumerable.ToArray(Enumerable.Append(real_next_37, -1)));
                j_38 = (j_38 + 1);
            }
            long k_39 = 0;
            while ((k_39 < number_of_cells_34)) {
                long speed_40 = next_speeds_36[(int)(k_39)];
                if ((speed_40 > NEG_ONE_1)) {
                    long index_41 = ((k_39 + speed_40) % number_of_cells_34);
                    real_next_37[index_41] = speed_40;
                }
                k_39 = (k_39 + 1);
            }
            highway_30 = (Enumerable.ToArray(Enumerable.Append(highway_30, real_next_37)));
            i_35 = (i_35 + 1);
        };
        return highway_30;
    }

    public static void main() {
        long[][] ex1_42 = Program.simulate(Program.construct_highway(6, 3, 0, false, false, 2), 2, 0.0, 2);
        Console.WriteLine(Program._fmtTop(_fmtStr(ex1_42)));
        long[][] ex2_43 = Program.simulate(Program.construct_highway(5, 2, -2, false, false, 2), 3, 0.0, 2);
        Console.WriteLine(Program._fmtTop(_fmtStr(ex2_43)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
