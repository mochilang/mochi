// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static bool[][] glider_25 = new bool[][]{new bool[]{false, true, false, false, false}, new bool[]{false, false, true, false, false}, new bool[]{true, true, true, false, false}, new bool[]{false, false, false, false, false}, new bool[]{false, false, false, false, false}};
    static bool[][] board_26 = glider_25;
    public static long count_alive_neighbours(bool[][] board_0, long row_1, long col_2) {
        int size_3 = board_0.Length;
        long alive_4 = 0;
        long dr_5 = -1;
        while ((dr_5 < 2)) {
            long dc_6 = -1;
            while ((dc_6 < 2)) {
                long nr_7 = (row_1 + dr_5);
                long nc_8 = (col_2 + dc_6);
                if ((((((!((dr_5 == 0) && (dc_6 == 0))) && (nr_7 >= 0)) && (nr_7 < size_3)) && (nc_8 >= 0)) && (nc_8 < size_3))) {
                    if (board_0[(int)(nr_7)][(int)(nc_8)]) {
                        alive_4 = (alive_4 + 1);
                    }
                }
                dc_6 = (dc_6 + 1);
            }
            dr_5 = (dr_5 + 1);
        };
        return alive_4;
    }

    public static bool next_state(bool current_9, long alive_10) {
        bool state_11 = current_9;
        if (current_9) {
            if ((alive_10 < 2)) {
                state_11 = false;
            } else if (((alive_10 == 2) || (alive_10 == 3))) {
                state_11 = true;
            } else {
                state_11 = false;
            }
        } else if ((alive_10 == 3)) {
            state_11 = true;
        };
        return state_11;
    }

    public static bool[][] step(bool[][] board_12) {
        int size_13 = board_12.Length;
        bool[][] new_board_14 = new bool[][]{};
        long r_15 = 0;
        while ((r_15 < size_13)) {
            bool[] new_row_16 = new bool[]{};
            long c_17 = 0;
            while ((c_17 < size_13)) {
                long alive_18 = Program.count_alive_neighbours(board_12, r_15, c_17);
                bool cell_19 = board_12[(int)(r_15)][(int)(c_17)];
                bool updated_20 = Program.next_state(cell_19, alive_18);
                new_row_16 = (Enumerable.ToArray(Enumerable.Append(new_row_16, updated_20)));
                c_17 = (c_17 + 1);
            }
            new_board_14 = (Enumerable.ToArray(Enumerable.Append(new_board_14, new_row_16)));
            r_15 = (r_15 + 1);
        };
        return new_board_14;
    }

    public static void show(bool[][] board_21) {
        long r_22 = 0;
        while ((r_22 < board_21.Length)) {
            string line_23 = "";
            long c_24 = 0;
            while ((c_24 < board_21[(int)(r_22)].Length)) {
                if (board_21[(int)(r_22)][(int)(c_24)]) {
                    line_23 = (line_23 + "#");
                } else {
                    line_23 = (line_23 + ".");
                }
                c_24 = (c_24 + 1);
            }
            Console.WriteLine(Program._fmtTop(line_23));
            r_22 = (r_22 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Initial"));
            Program.show(board_26);
            long i_27 = 0;
            while ((i_27 < 4)) {
                board_26 = Program.step(board_26);
                Console.WriteLine(Program._fmtTop(("\nStep " + _fmtStr((i_27 + 1)))));
                Program.show(board_26);
                i_27 = (i_27 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
