// Generated by Mochi 0.10.59 on 2025-08-06 21:24 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    public static bool[][] create_board(long width_0, long height_1) {
        bool[][] board_2 = new bool[][]{};
        long i_3 = 0;
        while ((i_3 < height_1)) {
            bool[] row_4 = new bool[]{};
            long j_5 = 0;
            while ((j_5 < width_0)) {
                row_4 = (Enumerable.ToArray(Enumerable.Append(row_4, true)));
                j_5 = (j_5 + 1);
            }
            board_2 = (Enumerable.ToArray(Enumerable.Append(board_2, row_4)));
            i_3 = (i_3 + 1);
        };
        return board_2;
    }

    public static long[] move_ant(bool[][] board_6, long x_7, long y_8, long direction_9) {
        if (board_6[(int)(x_7)][(int)(y_8)]) {
            direction_9 = ((direction_9 + 1) % 4);
        } else {
            direction_9 = ((direction_9 + 3) % 4);
        };
        long old_x_10 = x_7;
        long old_y_11 = y_8;
        if ((direction_9 == 0)) {
            x_7 = (x_7 - 1);
        } else if ((direction_9 == 1)) {
            y_8 = (y_8 + 1);
        } else if ((direction_9 == 2)) {
            x_7 = (x_7 + 1);
        } else {
            y_8 = (y_8 - 1);
        };
        board_6[(int)(old_x_10)][old_y_11] = (!board_6[(int)(old_x_10)][(int)(old_y_11)]);
        return new long[]{x_7, y_8, direction_9};
    }

    public static bool[][] langtons_ant(long width_12, long height_13, long steps_14) {
        bool[][] board_15 = Program.create_board(width_12, height_13);
        long x_16 = (width_12 / 2);
        long y_17 = (height_13 / 2);
        long dir_18 = 3;
        long s_19 = 0;
        while ((s_19 < steps_14)) {
            long[] state_20 = Program.move_ant(board_15, x_16, y_17, dir_18);
            x_16 = state_20[(int)(0)];
            y_17 = state_20[(int)(1)];
            dir_18 = state_20[(int)(2)];
            s_19 = (s_19 + 1);
        };
        return board_15;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
