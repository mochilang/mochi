// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SMAValue {
    public double value;
    public bool ok;
    public override string ToString() => $"SMAValue {{value = {value.ToString("0.0")}, ok = {ok}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[] data_6 = new double[]{10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0};
    static long window_size_7 = 3;
    static SMAValue[] sma_values_8 = Program.simple_moving_average(data_6, window_size_7);
    static long idx_9 = 0;
    public static SMAValue[] simple_moving_average(double[] data_0, long window_size_1) {
        if ((window_size_1 < 1)) {
            throw new Exception("Window size must be a positive integer");
        };
        SMAValue[] result_2 = new SMAValue[]{};
        double window_sum_3 = 0.0;
        long i_4 = 0;
        while ((i_4 < data_0.Length)) {
            window_sum_3 = (window_sum_3 + data_0[(int)(i_4)]);
            if ((i_4 >= window_size_1)) {
                window_sum_3 = (window_sum_3 - data_0[(int)((i_4 - window_size_1))]);
            }
            if ((i_4 >= (window_size_1 - 1))) {
                double avg_5 = (window_sum_3 / window_size_1);
                result_2 = (Enumerable.ToArray(Enumerable.Append<SMAValue>(result_2, new SMAValue{value = avg_5, ok = true})));
            } else {
                result_2 = (Enumerable.ToArray(Enumerable.Append<SMAValue>(result_2, new SMAValue{value = 0.0, ok = false})));
            }
            i_4 = (i_4 + 1);
        };
        return result_2;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_9 < sma_values_8.Length)) {
                SMAValue item_10 = sma_values_8[(int)(idx_9)];
                if (item_10.ok) {
                    Console.WriteLine(Program._fmtTop(((("Day " + _fmtStr((idx_9 + 1))) + ": ") + _fmtStr(item_10.value))));
                } else {
                    Console.WriteLine(Program._fmtTop((("Day " + _fmtStr((idx_9 + 1))) + ": Not enough data for SMA")));
                }
                idx_9 = (idx_9 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
