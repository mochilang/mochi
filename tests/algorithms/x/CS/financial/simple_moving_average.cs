// Generated by Mochi 0.10.65 (commit 7675ac6ff5) on 2025-08-14 09:57 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class SMAValue {
    public double value;
    public bool ok;
    public override string ToString() => $"SMAValue {{value = {value.ToString("0.0")}, ok = {ok}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[] data_6 = new double[]{10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0};
    static long window_size_7 = 3;
    static SMAValue[] sma_values_8 = Program.simple_moving_average(data_6, window_size_7);
    static long idx_9 = 0;
    public static SMAValue[] simple_moving_average(double[] data_0, long window_size_1) {
        if ((window_size_1 < 1)) {
            throw new Exception("Window size must be a positive integer");
        };
        SMAValue[] result_2 = new SMAValue[]{};
        double window_sum_3 = 0.0;
        long i_4 = 0;
        while ((i_4 < data_0.Length)) {
            window_sum_3 = (window_sum_3 + _idx(data_0, i_4));
            if ((i_4 >= window_size_1)) {
                window_sum_3 = (window_sum_3 - _idx(data_0, (i_4 - window_size_1)));
            }
            if ((i_4 >= (window_size_1 - 1))) {
                double avg_5 = (window_sum_3 / window_size_1);
                result_2 = ((Func<SMAValue[]>)(() => { var _tmp = result_2.ToList(); _tmp.Add(new SMAValue{value = avg_5, ok = true}); return _tmp.ToArray(); }))();
            } else {
                result_2 = ((Func<SMAValue[]>)(() => { var _tmp = result_2.ToList(); _tmp.Add(new SMAValue{value = 0.0, ok = false}); return _tmp.ToArray(); }))();
            }
            i_4 = (i_4 + 1);
        };
        return result_2;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((idx_9 < sma_values_8.Length)) {
                SMAValue item_10 = _idx(sma_values_8, idx_9);
                if (item_10.ok) {
                    Console.WriteLine(Program._fmtTop(((("Day " + _fmtStr((idx_9 + 1))) + ": ") + _fmtStr(item_10.value))));
                } else {
                    Console.WriteLine(Program._fmtTop((("Day " + _fmtStr((idx_9 + 1))) + ": Not enough data for SMA")));
                }
                idx_9 = (idx_9 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
