// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static void panic(string msg_0) {
        Console.WriteLine(Program._fmtTop(msg_0));
    }

    public static double powf(double base_1, double exp_2) {
        double result_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < Convert.ToInt64(exp_2))) {
            result_3 = (result_3 * base_1);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static double simple_interest(double principal_5, double daily_rate_6, double days_7) {
        if ((days_7 <= 0.0)) {
            Program.panic("days_between_payments must be > 0");
            return 0.0;
        };
        if ((daily_rate_6 < 0.0)) {
            Program.panic("daily_interest_rate must be >= 0");
            return 0.0;
        };
        if ((principal_5 <= 0.0)) {
            Program.panic("principal must be > 0");
            return 0.0;
        };
        return ((principal_5 * daily_rate_6) * days_7);
    }

    public static double compound_interest(double principal_8, double nominal_rate_9, double periods_10) {
        if ((periods_10 <= 0.0)) {
            Program.panic("number_of_compounding_periods must be > 0");
            return 0.0;
        };
        if ((nominal_rate_9 < 0.0)) {
            Program.panic("nominal_annual_interest_rate_percentage must be >= 0");
            return 0.0;
        };
        if ((principal_8 <= 0.0)) {
            Program.panic("principal must be > 0");
            return 0.0;
        };
        return (principal_8 * (Program.powf((1.0 + nominal_rate_9), periods_10) - 1.0));
    }

    public static double apr_interest(double principal_11, double apr_12, double years_13) {
        if ((years_13 <= 0.0)) {
            Program.panic("number_of_years must be > 0");
            return 0.0;
        };
        if ((apr_12 < 0.0)) {
            Program.panic("nominal_annual_percentage_rate must be >= 0");
            return 0.0;
        };
        if ((principal_11 <= 0.0)) {
            Program.panic("principal must be > 0");
            return 0.0;
        };
        return Program.compound_interest(principal_11, (apr_12 / 365.0), (years_13 * 365.0));
    }

    public static void main() {
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_interest(18000.0, 0.06, 3.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_interest(0.5, 0.06, 3.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.simple_interest(18000.0, 0.01, 10.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.compound_interest(10000.0, 0.05, 3.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.compound_interest(10000.0, 0.05, 1.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.apr_interest(10000.0, 0.05, 3.0))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.apr_interest(10000.0, 0.05, 1.0))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
