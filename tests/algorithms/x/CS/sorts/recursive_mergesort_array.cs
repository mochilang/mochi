// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] subarray(long[] xs_0, long start_1, long end_2) {
        long[] result_3 = new long[]{};
        long k_4 = start_1;
        while ((k_4 < end_2)) {
            result_3 = (Enumerable.ToArray(Enumerable.Append<long>(result_3, _idx(xs_0, k_4))));
            k_4 = (k_4 + 1);
        };
        return result_3;
    }

    public static long[] merge(long[] arr_5) {
        if ((arr_5.Length > 1)) {
            long middle_length_6 = (arr_5.Length / 2);
            long[] left_array_7 = Program.subarray(arr_5, 0, middle_length_6);
            long[] right_array_8 = Program.subarray(arr_5, middle_length_6, arr_5.Length);
            long left_size_9 = left_array_7.Length;
            long right_size_10 = right_array_8.Length;
            Program.merge(left_array_7);
            Program.merge(right_array_8);
            long left_index_11 = 0;
            long right_index_12 = 0;
            long index_13 = 0;
            while (((left_index_11 < left_size_9) && (right_index_12 < right_size_10))) {
                if ((_idx(left_array_7, left_index_11) < _idx(right_array_8, right_index_12))) {
                    arr_5[(int)(index_13)] = _idx(left_array_7, left_index_11);
                    left_index_11 = (left_index_11 + 1);
                } else {
                    arr_5[(int)(index_13)] = _idx(right_array_8, right_index_12);
                    right_index_12 = (right_index_12 + 1);
                }
                index_13 = (index_13 + 1);
            }
            while ((left_index_11 < left_size_9)) {
                arr_5[(int)(index_13)] = _idx(left_array_7, left_index_11);
                left_index_11 = (left_index_11 + 1);
                index_13 = (index_13 + 1);
            }
            while ((right_index_12 < right_size_10)) {
                arr_5[(int)(index_13)] = _idx(right_array_8, right_index_12);
                right_index_12 = (right_index_12 + 1);
                index_13 = (index_13 + 1);
            }
        };
        return arr_5;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge(new long[]{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge(new long[]{10, 22, 1, 2, 3, 9, 15, 23}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge(new long[]{100}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge(new long[]{}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
