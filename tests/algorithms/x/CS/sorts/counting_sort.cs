// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string ascii_chars_18 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    static long[] example1_27 = Program.counting_sort(new long[]{0, 5, 3, 2, 2});
    public static long max_val(long[] arr_0) {
        long m_1 = _idx(arr_0, 0);
        long i_2 = 1;
        while ((i_2 < arr_0.Length)) {
            if ((_idx(arr_0, i_2) > m_1)) {
                m_1 = _idx(arr_0, i_2);
            }
            i_2 = (i_2 + 1);
        };
        return m_1;
    }

    public static long min_val(long[] arr_3) {
        long m_4 = _idx(arr_3, 0);
        long i_5 = 1;
        while ((i_5 < arr_3.Length)) {
            if ((_idx(arr_3, i_5) < m_4)) {
                m_4 = _idx(arr_3, i_5);
            }
            i_5 = (i_5 + 1);
        };
        return m_4;
    }

    public static long[] counting_sort(long[] collection_6) {
        if ((collection_6.Length == 0)) {
            return new long[]{};
        };
        long coll_len_7 = collection_6.Length;
        long coll_max_8 = Program.max_val(collection_6);
        long coll_min_9 = Program.min_val(collection_6);
        long counting_arr_length_10 = ((coll_max_8 + 1) - coll_min_9);
        long[] counting_arr_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < counting_arr_length_10)) {
            counting_arr_11 = (Enumerable.ToArray(Enumerable.Append<long>(counting_arr_11, 0)));
            i_12 = (i_12 + 1);
        };
        i_12 = 0;
        while ((i_12 < coll_len_7)) {
            long number_13 = _idx(collection_6, i_12);
            counting_arr_11[(int)((number_13 - coll_min_9))] = (_idx(counting_arr_11, (number_13 - coll_min_9)) + 1);
            i_12 = (i_12 + 1);
        };
        i_12 = 1;
        while ((i_12 < counting_arr_length_10)) {
            counting_arr_11[(int)(i_12)] = (_idx(counting_arr_11, i_12) + _idx(counting_arr_11, (i_12 - 1)));
            i_12 = (i_12 + 1);
        };
        long[] ordered_14 = new long[]{};
        i_12 = 0;
        while ((i_12 < coll_len_7)) {
            ordered_14 = (Enumerable.ToArray(Enumerable.Append<long>(ordered_14, 0)));
            i_12 = (i_12 + 1);
        };
        long idx_15 = (coll_len_7 - 1);
        while ((idx_15 >= 0)) {
            long number_16 = _idx(collection_6, idx_15);
            long pos_17 = (_idx(counting_arr_11, (number_16 - coll_min_9)) - 1);
            ordered_14[(int)(pos_17)] = number_16;
            counting_arr_11[(int)((number_16 - coll_min_9))] = (_idx(counting_arr_11, (number_16 - coll_min_9)) - 1);
            idx_15 = (idx_15 - 1);
        };
        return ordered_14;
    }

    public static string chr(long code_19) {
        if ((code_19 == 10)) {
            return "\n";
        };
        if ((code_19 == 13)) {
            return "\r";
        };
        if ((code_19 == 9)) {
            return "\t";
        };
        if (((code_19 >= 32) && (code_19 < 127))) {
            return _substr(ascii_chars_18, (code_19 - 32), (code_19 - 31));
        };
        return "";
    }

    public static long ord(string ch_20) {
        if ((ch_20 == "\n")) {
            return 10;
        };
        if ((ch_20 == "\r")) {
            return 13;
        };
        if ((ch_20 == "\t")) {
            return 9;
        };
        long i_21 = 0;
        while ((i_21 < ascii_chars_18.Length)) {
            if ((_substr(ascii_chars_18, i_21, (i_21 + 1)) == ch_20)) {
                return (32 + i_21);
            }
            i_21 = (i_21 + 1);
        };
        return 0;
    }

    public static string counting_sort_string(string s_22) {
        long[] codes_23 = new long[]{};
        long i_24 = 0;
        while ((i_24 < s_22.Length)) {
            codes_23 = (Enumerable.ToArray(Enumerable.Append<long>(codes_23, Program.ord(_substr(s_22, i_24, (i_24 + 1))))));
            i_24 = (i_24 + 1);
        };
        long[] sorted_codes_25 = Program.counting_sort(codes_23);
        string res_26 = "";
        i_24 = 0;
        while ((i_24 < sorted_codes_25.Length)) {
            res_26 = (res_26 + Program.chr(_idx(sorted_codes_25, i_24)));
            i_24 = (i_24 + 1);
        };
        return res_26;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(example1_27)));
            long[] example2_28 = Program.counting_sort(new long[]{});
            Console.WriteLine(Program._fmtTop(_fmtStr(example2_28)));
            long[] example3_29 = Program.counting_sort(new long[]{-2, -5, -45});
            Console.WriteLine(Program._fmtTop(_fmtStr(example3_29)));
            Console.WriteLine(Program._fmtTop(Program.counting_sort_string("thisisthestring")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
