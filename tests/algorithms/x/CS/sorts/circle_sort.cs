// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static bool circle_sort_util(long[] collection_0, long low_1, long high_2) {
        bool swapped_3 = false;
        if ((low_1 == high_2)) {
            return swapped_3;
        };
        long left_4 = low_1;
        long right_5 = high_2;
        while ((left_4 < right_5)) {
            if ((_idx(collection_0, left_4) > _idx(collection_0, right_5))) {
                long tmp_6 = _idx(collection_0, left_4);
                collection_0[(int)(left_4)] = _idx(collection_0, right_5);
                collection_0[(int)(right_5)] = tmp_6;
                swapped_3 = true;
            }
            left_4 = (left_4 + 1);
            right_5 = (right_5 - 1);
        };
        if (((left_4 == right_5) && (_idx(collection_0, left_4) > _idx(collection_0, (right_5 + 1))))) {
            long tmp2_7 = _idx(collection_0, left_4);
            collection_0[(int)(left_4)] = _idx(collection_0, (right_5 + 1));
            collection_0[(int)((right_5 + 1))] = tmp2_7;
            swapped_3 = true;
        };
        long mid_8 = (low_1 + ((high_2 - low_1) / 2));
        bool left_swap_9 = Program.circle_sort_util(collection_0, low_1, mid_8);
        bool right_swap_10 = Program.circle_sort_util(collection_0, (mid_8 + 1), high_2);
        if (((swapped_3 || left_swap_9) || right_swap_10)) {
            return true;
        } else {
            return false;
        };
        return default(bool);
    }

    public static long[] circle_sort(long[] collection_11) {
        if ((collection_11.Length < 2)) {
            return collection_11;
        };
        bool is_not_sorted_12 = true;
        while (is_not_sorted_12) {
            is_not_sorted_12 = Program.circle_sort_util(collection_11, 0, (collection_11.Length - 1));
        };
        return collection_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.circle_sort(new long[]{0, 5, 3, 2, 2}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.circle_sort(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.circle_sort(new long[]{-2, 5, 0, -45}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
