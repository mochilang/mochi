// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] seq1_9 = new long[]{1, 6, 2, 5, 3, 4, 4, 5};
    public static object swap(long[] seq_0, long i_1, long j_2) {
        long temp_3 = seq_0[(int)(i_1)];
        seq_0[(int)(i_1)] = seq_0[(int)(j_2)];
        seq_0[(int)(j_2)] = temp_3;
        return default(object);
    }

    public static object slowsort_recursive(long[] seq_4, long start_5, long end_index_6) {
        if ((start_5 >= end_index_6)) {
            return default(object);
        };
        long mid_7 = ((start_5 + end_index_6) / 2);
        Program.slowsort_recursive(seq_4, start_5, mid_7);
        Program.slowsort_recursive(seq_4, (mid_7 + 1), end_index_6);
        if ((seq_4[(int)(end_index_6)] < seq_4[(int)(mid_7)])) {
            Program.swap(seq_4, end_index_6, mid_7);
        };
        Program.slowsort_recursive(seq_4, start_5, (end_index_6 - 1));
        return default(object);
    }

    public static long[] slow_sort(long[] seq_8) {
        if ((seq_8.Length > 0)) {
            Program.slowsort_recursive(seq_8, 0, (seq_8.Length - 1));
        };
        return seq_8;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.slow_sort(seq1_9))));
            long[] seq2_10 = new long[]{};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.slow_sort(seq2_10))));
            long[] seq3_11 = new long[]{2};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.slow_sort(seq3_11))));
            long[] seq4_12 = new long[]{1, 2, 3, 4};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.slow_sort(seq4_12))));
            long[] seq5_13 = new long[]{4, 3, 2, 1};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.slow_sort(seq5_13))));
            long[] seq6_14 = new long[]{9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
            Program.slowsort_recursive(seq6_14, 2, 7);
            Console.WriteLine(Program._fmtTop(_fmtStr(seq6_14)));
            long[] seq7_15 = new long[]{9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
            Program.slowsort_recursive(seq7_15, 0, 4);
            Console.WriteLine(Program._fmtTop(_fmtStr(seq7_15)));
            long[] seq8_16 = new long[]{9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
            Program.slowsort_recursive(seq8_16, 5, (seq8_16.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(seq8_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
