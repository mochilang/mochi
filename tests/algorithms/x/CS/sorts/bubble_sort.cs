// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] bubble_sort_iterative(long[] collection_0) {
        long n_1 = collection_0.Length;
        while ((n_1 > 0)) {
            bool swapped_2 = false;
            long j_3 = 0;
            while ((j_3 < (n_1 - 1))) {
                if ((_idx(collection_0, j_3) > _idx(collection_0, (j_3 + 1)))) {
                    long temp_4 = _idx(collection_0, j_3);
                    collection_0[(int)(j_3)] = _idx(collection_0, (j_3 + 1));
                    collection_0[(int)((j_3 + 1))] = temp_4;
                    swapped_2 = true;
                }
                j_3 = (j_3 + 1);
            }
            if ((!swapped_2)) {
                break;
            }
            n_1 = (n_1 - 1);
        };
        return collection_0;
    }

    public static long[] bubble_sort_recursive(long[] collection_5) {
        long n_6 = collection_5.Length;
        bool swapped_7 = false;
        long i_8 = 0;
        while ((i_8 < (n_6 - 1))) {
            if ((_idx(collection_5, i_8) > _idx(collection_5, (i_8 + 1)))) {
                long temp_9 = _idx(collection_5, i_8);
                collection_5[(int)(i_8)] = _idx(collection_5, (i_8 + 1));
                collection_5[(int)((i_8 + 1))] = temp_9;
                swapped_7 = true;
            }
            i_8 = (i_8 + 1);
        };
        if (swapped_7) {
            return Program.bubble_sort_recursive(collection_5);
        };
        return collection_5;
    }

    public static long[] copy_list(long[] xs_10) {
        long[] out_11 = new long[]{};
        long i_12 = 0;
        while ((i_12 < xs_10.Length)) {
            out_11 = (Enumerable.ToArray(Enumerable.Append<long>(out_11, _idx(xs_10, i_12))));
            i_12 = (i_12 + 1);
        };
        return out_11;
    }

    public static bool list_eq(long[] a_13, long[] b_14) {
        if ((a_13.Length != b_14.Length)) {
            return false;
        };
        long k_15 = 0;
        while ((k_15 < a_13.Length)) {
            if ((_idx(a_13, k_15) != _idx(b_14, k_15))) {
                return false;
            }
            k_15 = (k_15 + 1);
        };
        return true;
    }

    public static void test_bubble_sort() {
        long[] example_16 = new long[]{0, 5, 2, 3, 2};
        long[] expected_17 = new long[]{0, 2, 2, 3, 5};
        if ((!Program.list_eq(Program.bubble_sort_iterative(Program.copy_list(example_16)), expected_17))) {
            throw new Exception("iterative failed");
        };
        if ((!Program.list_eq(Program.bubble_sort_recursive(Program.copy_list(example_16)), expected_17))) {
            throw new Exception("recursive failed");
        };
        long[] empty_18 = new long[]{};
        if ((Program.bubble_sort_iterative(Program.copy_list(empty_18)).Length != 0)) {
            throw new Exception("empty iterative failed");
        };
        if ((Program.bubble_sort_recursive(Program.copy_list(empty_18)).Length != 0)) {
            throw new Exception("empty recursive failed");
        };
    }

    public static void main() {
        Program.test_bubble_sort();
        long[] arr_19 = new long[]{5, 1, 4, 2, 8};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bubble_sort_iterative(Program.copy_list(arr_19)))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.bubble_sort_recursive(Program.copy_list(arr_19)))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
