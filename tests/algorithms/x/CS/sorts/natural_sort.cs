// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string DIGITS_0 = "0123456789";
    static string LOWER_1 = "abcdefghijklmnopqrstuvwxyz";
    static string UPPER_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string[] example1_29 = new string[]{"2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"};
    public static long index_of(string s_3, string ch_4) {
        long i_5 = 0;
        while ((i_5 < s_3.Length)) {
            if ((s_3.Substring((int)(i_5), 1) == ch_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    public static bool is_digit(string ch_6) {
        return (Program.index_of(DIGITS_0, ch_6) >= 0);
    }

    public static string to_lower(string ch_7) {
        long idx_8 = Program.index_of(UPPER_2, ch_7);
        if ((idx_8 >= 0)) {
            return _substr(LOWER_1, idx_8, (idx_8 + 1));
        };
        return ch_7;
    }

    public static string pad_left(string s_9, long width_10) {
        string res_11 = s_9;
        while ((res_11.Length < width_10)) {
            res_11 = ("0" + res_11);
        };
        return res_11;
    }

    public static string[] alphanum_key(string s_12) {
        string[] key_13 = new string[]{};
        long i_14 = 0;
        while ((i_14 < s_12.Length)) {
            if (Program.is_digit(s_12.Substring((int)(i_14), 1))) {
                string num_15 = "";
                while (((i_14 < s_12.Length) && Program.is_digit(s_12.Substring((int)(i_14), 1)))) {
                    num_15 = (num_15 + s_12.Substring((int)(i_14), 1));
                    i_14 = (i_14 + 1);
                }
                string len_str_16 = Program.pad_left(_fmtStr(num_15.Length), 3);
                key_13 = (Enumerable.ToArray(Enumerable.Append<string>(key_13, (("#" + len_str_16) + num_15))));
            } else {
                string seg_17 = "";
                while ((i_14 < s_12.Length)) {
                    if (Program.is_digit(s_12.Substring((int)(i_14), 1))) {
                        break;
                    }
                    seg_17 = (seg_17 + Program.to_lower(s_12.Substring((int)(i_14), 1)));
                    i_14 = (i_14 + 1);
                }
                key_13 = (Enumerable.ToArray(Enumerable.Append<string>(key_13, seg_17)));
            }
        };
        return key_13;
    }

    public static long compare_keys(string[] a_18, string[] b_19) {
        long i_20 = 0;
        while (((i_20 < a_18.Length) && (i_20 < b_19.Length))) {
            if ((string.Compare(a_18[(int)(i_20)], b_19[(int)(i_20)]) < 0)) {
                return -1;
            }
            if ((string.Compare(a_18[(int)(i_20)], b_19[(int)(i_20)]) > 0)) {
                return 1;
            }
            i_20 = (i_20 + 1);
        };
        if ((a_18.Length < b_19.Length)) {
            return -1;
        };
        if ((a_18.Length > b_19.Length)) {
            return 1;
        };
        return 0;
    }

    public static string[] natural_sort(string[] arr_21) {
        string[] res_22 = new string[]{};
        string[][] keys_23 = new string[][]{};
        long k_24 = 0;
        while ((k_24 < arr_21.Length)) {
            res_22 = (Enumerable.ToArray(Enumerable.Append<string>(res_22, arr_21[(int)(k_24)])));
            keys_23 = (Enumerable.ToArray(Enumerable.Append<string[]>(keys_23, Program.alphanum_key(arr_21[(int)(k_24)]))));
            k_24 = (k_24 + 1);
        };
        long i_25 = 1;
        while ((i_25 < res_22.Length)) {
            string current_26 = res_22[(int)(i_25)];
            string[] current_key_27 = keys_23[(int)(i_25)];
            long j_28 = (i_25 - 1);
            while (((j_28 >= 0) && (Program.compare_keys(keys_23[(int)(j_28)], current_key_27) > 0))) {
                res_22[(int)((j_28 + 1))] = res_22[(int)(j_28)];
                keys_23[(int)((j_28 + 1))] = keys_23[(int)(j_28)];
                j_28 = (j_28 - 1);
            }
            res_22[(int)((j_28 + 1))] = current_26;
            keys_23[(int)((j_28 + 1))] = current_key_27;
            i_25 = (i_25 + 1);
        };
        return res_22;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.natural_sort(example1_29))));
            string[] example2_30 = new string[]{"Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"};
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.natural_sort(example2_30))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
