// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] ex1_23 = new long[]{40, 12, 1, 100, 4};
    static long[] sorted1_24 = Program.msd_radix_sort(ex1_23);
    public static long get_bit_length(long n_0) {
        if ((n_0 == 0)) {
            return 1;
        };
        long length_1 = 0;
        long num_2 = n_0;
        while ((num_2 > 0)) {
            length_1 = (length_1 + 1);
            num_2 = (num_2 / 2);
        };
        return length_1;
    }

    public static long max_bit_length(long[] nums_3) {
        long i_4 = 0;
        long max_len_5 = 0;
        while ((i_4 < nums_3.Length)) {
            long l_6 = Program.get_bit_length(nums_3[(int)(i_4)]);
            if ((l_6 > max_len_5)) {
                max_len_5 = l_6;
            }
            i_4 = (i_4 + 1);
        };
        return max_len_5;
    }

    public static long get_bit(long num_7, long pos_8) {
        long n_9 = num_7;
        long i_10 = 0;
        while ((i_10 < pos_8)) {
            n_9 = (n_9 / 2);
            i_10 = (i_10 + 1);
        };
        return _mod(n_9, 2);
    }

    public static long[] _msd_radix_sort(long[] nums_11, long bit_position_12) {
        if (((bit_position_12 == 0) || (nums_11.Length <= 1))) {
            return nums_11;
        };
        long[] zeros_13 = new long[]{};
        long[] ones_14 = new long[]{};
        long i_15 = 0;
        while ((i_15 < nums_11.Length)) {
            long num_16 = nums_11[(int)(i_15)];
            if ((Program.get_bit(num_16, (bit_position_12 - 1)) == 1)) {
                ones_14 = (Enumerable.ToArray(Enumerable.Append<long>(ones_14, num_16)));
            } else {
                zeros_13 = (Enumerable.ToArray(Enumerable.Append<long>(zeros_13, num_16)));
            }
            i_15 = (i_15 + 1);
        };
        zeros_13 = Program._msd_radix_sort(zeros_13, (bit_position_12 - 1));
        ones_14 = Program._msd_radix_sort(ones_14, (bit_position_12 - 1));
        long[] res_17 = zeros_13;
        i_15 = 0;
        while ((i_15 < ones_14.Length)) {
            res_17 = (Enumerable.ToArray(Enumerable.Append<long>(res_17, ones_14[(int)(i_15)])));
            i_15 = (i_15 + 1);
        };
        return res_17;
    }

    public static long[] msd_radix_sort(long[] nums_18) {
        if ((nums_18.Length == 0)) {
            return new long[]{};
        };
        long i_19 = 0;
        while ((i_19 < nums_18.Length)) {
            if ((nums_18[(int)(i_19)] < 0)) {
                throw new Exception("All numbers must be positive");
            }
            i_19 = (i_19 + 1);
        };
        long bits_20 = Program.max_bit_length(nums_18);
        long[] result_21 = Program._msd_radix_sort(nums_18, bits_20);
        return result_21;
    }

    public static long[] msd_radix_sort_inplace(long[] nums_22) {
        return Program.msd_radix_sort(nums_22);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(sorted1_24)));
            long[] ex2_25 = new long[]{};
            long[] sorted2_26 = Program.msd_radix_sort(ex2_25);
            Console.WriteLine(Program._fmtTop(_fmtStr(sorted2_26)));
            long[] ex3_27 = new long[]{123, 345, 123, 80};
            long[] sorted3_28 = Program.msd_radix_sort(ex3_27);
            Console.WriteLine(Program._fmtTop(_fmtStr(sorted3_28)));
            long[] ex4_29 = new long[]{1209, 834598, 1, 540402, 45};
            long[] sorted4_30 = Program.msd_radix_sort(ex4_29);
            Console.WriteLine(Program._fmtTop(_fmtStr(sorted4_30)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
