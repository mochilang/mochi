// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long list_min(long[] xs_0) {
        long i_1 = 1;
        long m_2 = xs_0[(int)(0)];
        while ((i_1 < xs_0.Length)) {
            if ((xs_0[(int)(i_1)] < m_2)) {
                m_2 = xs_0[(int)(i_1)];
            }
            i_1 = (i_1 + 1);
        };
        return m_2;
    }

    public static long list_max(long[] xs_3) {
        long i_4 = 1;
        long m_5 = xs_3[(int)(0)];
        while ((i_4 < xs_3.Length)) {
            if ((xs_3[(int)(i_4)] > m_5)) {
                m_5 = xs_3[(int)(i_4)];
            }
            i_4 = (i_4 + 1);
        };
        return m_5;
    }

    public static long[] remove_once(long[] xs_6, long value_7) {
        long[] res_8 = new long[]{};
        bool removed_9 = false;
        long i_10 = 0;
        while ((i_10 < xs_6.Length)) {
            if (((!removed_9) && (xs_6[(int)(i_10)] == value_7))) {
                removed_9 = true;
            } else {
                res_8 = (Enumerable.ToArray(Enumerable.Append<long>(res_8, xs_6[(int)(i_10)])));
            }
            i_10 = (i_10 + 1);
        };
        return res_8;
    }

    public static long[] reverse_list(long[] xs_11) {
        long[] res_12 = new long[]{};
        long i_13 = (xs_11.Length - 1);
        while ((i_13 >= 0)) {
            res_12 = (Enumerable.ToArray(Enumerable.Append<long>(res_12, xs_11[(int)(i_13)])));
            i_13 = (i_13 - 1);
        };
        return res_12;
    }

    public static long[] merge_sort(long[] collection_14) {
        long[] start_15 = new long[]{};
        long[] end_16 = new long[]{};
        long[] coll_17 = collection_14;
        while ((coll_17.Length > 1)) {
            long mn_18 = Program.list_min(coll_17);
            long mx_19 = Program.list_max(coll_17);
            start_15 = (Enumerable.ToArray(Enumerable.Append<long>(start_15, mn_18)));
            end_16 = (Enumerable.ToArray(Enumerable.Append<long>(end_16, mx_19)));
            coll_17 = Program.remove_once(coll_17, mn_18);
            coll_17 = Program.remove_once(coll_17, mx_19);
        };
        end_16 = Program.reverse_list(end_16);
        return (Enumerable.ToArray(Enumerable.Concat((Enumerable.ToArray(Enumerable.Concat(start_15, coll_17))), end_16)));
    }

    public static void test_merge_sort() {
        if ((!Enumerable.SequenceEqual<long>(Program.merge_sort(new long[]{0, 5, 3, 2, 2}), new long[]{0, 2, 2, 3, 5}))) {
            throw new Exception("case1 failed");
        };
        if ((!Enumerable.SequenceEqual<long>(Program.merge_sort(new long[]{}), new long[]{}))) {
            throw new Exception("case2 failed");
        };
        if ((!Enumerable.SequenceEqual<long>(Program.merge_sort(new long[]{-2, -5, -45}), new long[]{-45, -5, -2}))) {
            throw new Exception("case3 failed");
        };
    }

    public static void main() {
        Program.test_merge_sort();
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_sort(new long[]{0, 5, 3, 2, 2}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
