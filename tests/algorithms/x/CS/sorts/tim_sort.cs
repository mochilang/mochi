// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] sample_24 = new long[]{5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7};
    static long[] sorted_sample_25 = Program.tim_sort(sample_24);
    public static long[] copy_list(long[] xs_0) {
        long[] res_1 = new long[]{};
        long k_2 = 0;
        while ((k_2 < xs_0.Length)) {
            res_1 = (Enumerable.ToArray(Enumerable.Append<long>(res_1, xs_0[(int)(k_2)])));
            k_2 = (k_2 + 1);
        };
        return res_1;
    }

    public static long[] insertion_sort(long[] xs_3) {
        long[] arr_4 = Program.copy_list(xs_3);
        long idx_5 = 1;
        while ((idx_5 < arr_4.Length)) {
            long value_6 = arr_4[(int)(idx_5)];
            long jdx_7 = (idx_5 - 1);
            while (((jdx_7 >= 0) && (arr_4[(int)(jdx_7)] > value_6))) {
                arr_4[(int)((jdx_7 + 1))] = arr_4[(int)(jdx_7)];
                jdx_7 = (jdx_7 - 1);
            }
            arr_4[(int)((jdx_7 + 1))] = value_6;
            idx_5 = (idx_5 + 1);
        };
        return arr_4;
    }

    public static long[] merge(long[] left_8, long[] right_9) {
        long[] result_10 = new long[]{};
        long i_11 = 0;
        long j_12 = 0;
        while (((i_11 < left_8.Length) && (j_12 < right_9.Length))) {
            if ((left_8[(int)(i_11)] < right_9[(int)(j_12)])) {
                result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, left_8[(int)(i_11)])));
                i_11 = (i_11 + 1);
            } else {
                result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, right_9[(int)(j_12)])));
                j_12 = (j_12 + 1);
            }
        };
        while ((i_11 < left_8.Length)) {
            result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, left_8[(int)(i_11)])));
            i_11 = (i_11 + 1);
        };
        while ((j_12 < right_9.Length)) {
            result_10 = (Enumerable.ToArray(Enumerable.Append<long>(result_10, right_9[(int)(j_12)])));
            j_12 = (j_12 + 1);
        };
        return result_10;
    }

    public static long[] tim_sort(long[] xs_13) {
        long n_14 = xs_13.Length;
        long[][] runs_15 = new long[][]{};
        long[][] sorted_runs_16 = new long[][]{};
        long[] current_17 = new long[]{};
        current_17 = (Enumerable.ToArray(Enumerable.Append<long>(current_17, xs_13[(int)(0)])));
        long i_18 = 1;
        while ((i_18 < n_14)) {
            if ((xs_13[(int)(i_18)] < xs_13[(int)((i_18 - 1))])) {
                runs_15 = (Enumerable.ToArray(Enumerable.Append<long[]>(runs_15, Program.copy_list(current_17))));
                current_17 = new long[]{};
                current_17 = (Enumerable.ToArray(Enumerable.Append<long>(current_17, xs_13[(int)(i_18)])));
            } else {
                current_17 = (Enumerable.ToArray(Enumerable.Append<long>(current_17, xs_13[(int)(i_18)])));
            }
            i_18 = (i_18 + 1);
        };
        runs_15 = (Enumerable.ToArray(Enumerable.Append<long[]>(runs_15, Program.copy_list(current_17))));
        long r_19 = 0;
        while ((r_19 < runs_15.Length)) {
            sorted_runs_16 = (Enumerable.ToArray(Enumerable.Append<long[]>(sorted_runs_16, Program.insertion_sort(runs_15[(int)(r_19)]))));
            r_19 = (r_19 + 1);
        };
        long[] result_20 = new long[]{};
        r_19 = 0;
        while ((r_19 < sorted_runs_16.Length)) {
            result_20 = Program.merge(result_20, sorted_runs_16[(int)(r_19)]);
            r_19 = (r_19 + 1);
        };
        return result_20;
    }

    public static string list_to_string(long[] xs_21) {
        string s_22 = "[";
        long k_23 = 0;
        while ((k_23 < xs_21.Length)) {
            s_22 = (s_22 + _fmtStr(xs_21[(int)(k_23)]));
            if ((k_23 < (xs_21.Length - 1))) {
                s_22 = (s_22 + ", ");
            }
            k_23 = (k_23 + 1);
        };
        return (s_22 + "]");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(sorted_sample_25)));
            long[] sample2_26 = new long[]{3, 2, 1};
            long[] sorted_sample2_27 = Program.tim_sort(sample2_26);
            Console.WriteLine(Program._fmtTop(Program.list_to_string(sorted_sample2_27)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
