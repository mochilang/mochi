// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] subarray(long[] xs_0, long start_1, long end_2) {
        long[] result_3 = new long[]{};
        long k_4 = start_1;
        while ((k_4 < end_2)) {
            result_3 = (Enumerable.ToArray(Enumerable.Append<long>(result_3, xs_0[(int)(k_4)])));
            k_4 = (k_4 + 1);
        };
        return result_3;
    }

    public static long[] merge(long[] left_half_5, long[] right_half_6) {
        long[] result_7 = new long[]{};
        long i_8 = 0;
        long j_9 = 0;
        while (((i_8 < left_half_5.Length) && (j_9 < right_half_6.Length))) {
            if ((left_half_5[(int)(i_8)] < right_half_6[(int)(j_9)])) {
                result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, left_half_5[(int)(i_8)])));
                i_8 = (i_8 + 1);
            } else {
                result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, right_half_6[(int)(j_9)])));
                j_9 = (j_9 + 1);
            }
        };
        while ((i_8 < left_half_5.Length)) {
            result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, left_half_5[(int)(i_8)])));
            i_8 = (i_8 + 1);
        };
        while ((j_9 < right_half_6.Length)) {
            result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, right_half_6[(int)(j_9)])));
            j_9 = (j_9 + 1);
        };
        return result_7;
    }

    public static long[] merge_sort(long[] array_10) {
        if ((array_10.Length <= 1)) {
            return array_10;
        };
        long middle_11 = (array_10.Length / 2);
        long[] left_half_12 = Program.subarray(array_10, 0, middle_11);
        long[] right_half_13 = Program.subarray(array_10, middle_11, array_10.Length);
        long[] sorted_left_14 = Program.merge_sort(left_half_12);
        long[] sorted_right_15 = Program.merge_sort(right_half_13);
        return Program.merge(sorted_left_14, sorted_right_15);
    }

    public static long[][] split_into_blocks(long[] data_16, long block_size_17) {
        long[][] blocks_18 = new long[][]{};
        long i_19 = 0;
        while ((i_19 < data_16.Length)) {
            long end_20 = (((i_19 + block_size_17) < data_16.Length) ? (i_19 + block_size_17) : data_16.Length);
            long[] block_21 = Program.subarray(data_16, i_19, end_20);
            long[] sorted_block_22 = Program.merge_sort(block_21);
            blocks_18 = (Enumerable.ToArray(Enumerable.Append<long[]>(blocks_18, sorted_block_22)));
            i_19 = end_20;
        };
        return blocks_18;
    }

    public static long[] merge_blocks(long[][] blocks_23) {
        long num_blocks_24 = blocks_23.Length;
        long[] indices_25 = new long[]{};
        long i_26 = 0;
        while ((i_26 < num_blocks_24)) {
            indices_25 = (Enumerable.ToArray(Enumerable.Append<long>(indices_25, 0)));
            i_26 = (i_26 + 1);
        };
        long[] result_27 = new long[]{};
        bool done_28 = false;
        while ((!done_28)) {
            done_28 = true;
            long min_val_29 = 0;
            long min_block_30 = (0 - 1);
            long j_31 = 0;
            while ((j_31 < num_blocks_24)) {
                long idx_32 = indices_25[(int)(j_31)];
                if ((idx_32 < blocks_23[(int)(j_31)].Length)) {
                    long val_33 = blocks_23[(int)(j_31)][(int)(idx_32)];
                    if (((min_block_30 == (0 - 1)) || (val_33 < min_val_29))) {
                        min_val_29 = val_33;
                        min_block_30 = j_31;
                    }
                    done_28 = false;
                }
                j_31 = (j_31 + 1);
            }
            if ((!done_28)) {
                result_27 = (Enumerable.ToArray(Enumerable.Append<long>(result_27, min_val_29)));
                indices_25[(int)(min_block_30)] = (indices_25[(int)(min_block_30)] + 1);
            }
        };
        return result_27;
    }

    public static long[] external_sort(long[] data_34, long block_size_35) {
        long[][] blocks_36 = Program.split_into_blocks(data_34, block_size_35);
        return Program.merge_blocks(blocks_36);
    }

    public static void main() {
        long[] data_37 = new long[]{7, 1, 5, 3, 9, 2, 6, 4, 8, 0};
        long[] sorted_data_38 = Program.external_sort(data_37, 3);
        Console.WriteLine(Program._fmtTop(sorted_data_38));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
