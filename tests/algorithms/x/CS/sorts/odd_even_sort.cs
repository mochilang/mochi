// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] odd_even_sort(long[] xs_0) {
        long[] arr_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append<long>(arr_1, _idx(xs_0, i_2))));
            i_2 = (i_2 + 1);
        };
        long n_3 = arr_1.Length;
        bool sorted_4 = false;
        while ((sorted_4 == false)) {
            sorted_4 = true;
            long j_5 = 0;
            while ((j_5 < (n_3 - 1))) {
                if ((_idx(arr_1, j_5) > _idx(arr_1, (j_5 + 1)))) {
                    long tmp_6 = _idx(arr_1, j_5);
                    arr_1[(int)(j_5)] = _idx(arr_1, (j_5 + 1));
                    arr_1[(int)((j_5 + 1))] = tmp_6;
                    sorted_4 = false;
                }
                j_5 = (j_5 + 2);
            }
            j_5 = 1;
            while ((j_5 < (n_3 - 1))) {
                if ((_idx(arr_1, j_5) > _idx(arr_1, (j_5 + 1)))) {
                    long tmp_7 = _idx(arr_1, j_5);
                    arr_1[(int)(j_5)] = _idx(arr_1, (j_5 + 1));
                    arr_1[(int)((j_5 + 1))] = tmp_7;
                    sorted_4 = false;
                }
                j_5 = (j_5 + 2);
            }
        };
        return arr_1;
    }

    public static void print_list(long[] xs_8) {
        long i_9 = 0;
        string out_10 = "";
        while ((i_9 < xs_8.Length)) {
            if ((i_9 > 0)) {
                out_10 = (out_10 + " ");
            }
            out_10 = (out_10 + _fmtStr(_idx(xs_8, i_9)));
            i_9 = (i_9 + 1);
        };
        Console.WriteLine(Program._fmtTop(out_10));
    }

    public static void test_odd_even_sort() {
        long[] a_11 = new long[]{5, 4, 3, 2, 1};
        long[] r1_12 = Program.odd_even_sort(a_11);
        if ((((((_idx(r1_12, 0) != 1) || (_idx(r1_12, 1) != 2)) || (_idx(r1_12, 2) != 3)) || (_idx(r1_12, 3) != 4)) || (_idx(r1_12, 4) != 5))) {
            throw new Exception("case1 failed");
        };
        long[] b_13 = new long[]{};
        long[] r2_14 = Program.odd_even_sort(b_13);
        if ((r2_14.Length != 0)) {
            throw new Exception("case2 failed");
        };
        long[] c_15 = new long[]{-10, -1, 10, 2};
        long[] r3_16 = Program.odd_even_sort(c_15);
        if (((((_idx(r3_16, 0) != -10) || (_idx(r3_16, 1) != -1)) || (_idx(r3_16, 2) != 2)) || (_idx(r3_16, 3) != 10))) {
            throw new Exception("case3 failed");
        };
        long[] d_17 = new long[]{1, 2, 3, 4};
        long[] r4_18 = Program.odd_even_sort(d_17);
        if (((((_idx(r4_18, 0) != 1) || (_idx(r4_18, 1) != 2)) || (_idx(r4_18, 2) != 3)) || (_idx(r4_18, 3) != 4))) {
            throw new Exception("case4 failed");
        };
    }

    public static void main() {
        Program.test_odd_even_sort();
        long[] sample_19 = new long[]{5, 4, 3, 2, 1};
        long[] sorted_20 = Program.odd_even_sort(sample_19);
        Program.print_list(sorted_20);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
