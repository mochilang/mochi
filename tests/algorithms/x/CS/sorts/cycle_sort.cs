// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] cycle_sort(long[] arr_0) {
        long n_1 = arr_0.Length;
        long cycle_start_2 = 0;
        while ((cycle_start_2 < (n_1 - 1))) {
            long item_3 = _idx(arr_0, cycle_start_2);
            long pos_4 = cycle_start_2;
            long i_5 = (cycle_start_2 + 1);
            while ((i_5 < n_1)) {
                if ((_idx(arr_0, i_5) < item_3)) {
                    pos_4 = (pos_4 + 1);
                }
                i_5 = (i_5 + 1);
            }
            if ((pos_4 == cycle_start_2)) {
                cycle_start_2 = (cycle_start_2 + 1);
                continue;
            }
            while ((item_3 == _idx(arr_0, pos_4))) {
                pos_4 = (pos_4 + 1);
            }
            long temp_6 = _idx(arr_0, pos_4);
            arr_0[(int)(pos_4)] = item_3;
            item_3 = temp_6;
            while ((pos_4 != cycle_start_2)) {
                pos_4 = cycle_start_2;
                i_5 = (cycle_start_2 + 1);
                while ((i_5 < n_1)) {
                    if ((_idx(arr_0, i_5) < item_3)) {
                        pos_4 = (pos_4 + 1);
                    }
                    i_5 = (i_5 + 1);
                }
                while ((item_3 == _idx(arr_0, pos_4))) {
                    pos_4 = (pos_4 + 1);
                }
                long temp2_7 = _idx(arr_0, pos_4);
                arr_0[(int)(pos_4)] = item_3;
                item_3 = temp2_7;
            }
            cycle_start_2 = (cycle_start_2 + 1);
        };
        return arr_0;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.cycle_sort(new long[]{4, 3, 2, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.cycle_sort(new long[]{-4, 20, 0, -50, 100, -1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.cycle_sort(new long[]{}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
