// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] array1_31 = new long[]{5, -1, -1, 5, 5, 24, 0};
    public static long[] quick_sort_3partition(long[] arr_0, long left_1, long right_2) {
        if ((right_2 <= left_1)) {
            return arr_0;
        };
        long a_3 = left_1;
        long i_4 = left_1;
        long b_5 = right_2;
        long pivot_6 = arr_0[(int)(left_1)];
        while ((i_4 <= b_5)) {
            if ((arr_0[(int)(i_4)] < pivot_6)) {
                long temp_7 = arr_0[(int)(a_3)];
                arr_0[(int)(a_3)] = arr_0[(int)(i_4)];
                arr_0[(int)(i_4)] = temp_7;
                a_3 = (a_3 + 1);
                i_4 = (i_4 + 1);
            } else if ((arr_0[(int)(i_4)] > pivot_6)) {
                long temp_8 = arr_0[(int)(b_5)];
                arr_0[(int)(b_5)] = arr_0[(int)(i_4)];
                arr_0[(int)(i_4)] = temp_8;
                b_5 = (b_5 - 1);
            } else {
                i_4 = (i_4 + 1);
            }
        };
        arr_0 = Program.quick_sort_3partition(arr_0, left_1, (a_3 - 1));
        arr_0 = Program.quick_sort_3partition(arr_0, (b_5 + 1), right_2);
        return arr_0;
    }

    public static long[] quick_sort_lomuto_partition(long[] arr_9, long left_10, long right_11) {
        if ((left_10 < right_11)) {
            long pivot_index_12 = Program.lomuto_partition(arr_9, left_10, right_11);
            arr_9 = Program.quick_sort_lomuto_partition(arr_9, left_10, (pivot_index_12 - 1));
            arr_9 = Program.quick_sort_lomuto_partition(arr_9, (pivot_index_12 + 1), right_11);
        };
        return arr_9;
    }

    public static long lomuto_partition(long[] arr_13, long left_14, long right_15) {
        long pivot_16 = arr_13[(int)(right_15)];
        long store_index_17 = left_14;
        long i_18 = left_14;
        while ((i_18 < right_15)) {
            if ((arr_13[(int)(i_18)] < pivot_16)) {
                long temp_19 = arr_13[(int)(store_index_17)];
                arr_13[(int)(store_index_17)] = arr_13[(int)(i_18)];
                arr_13[(int)(i_18)] = temp_19;
                store_index_17 = (store_index_17 + 1);
            }
            i_18 = (i_18 + 1);
        };
        long temp_20 = arr_13[(int)(right_15)];
        arr_13[(int)(right_15)] = arr_13[(int)(store_index_17)];
        arr_13[(int)(store_index_17)] = temp_20;
        return store_index_17;
    }

    public static long[] three_way_radix_quicksort(long[] arr_21) {
        if ((arr_21.Length <= 1)) {
            return arr_21;
        };
        long pivot_22 = arr_21[(int)(0)];
        long[] less_23 = new long[]{};
        long[] equal_24 = new long[]{};
        long[] greater_25 = new long[]{};
        long i_26 = 0;
        while ((i_26 < arr_21.Length)) {
            long val_27 = arr_21[(int)(i_26)];
            if ((val_27 < pivot_22)) {
                less_23 = (Enumerable.ToArray(Enumerable.Append<long>(less_23, val_27)));
            } else if ((val_27 > pivot_22)) {
                greater_25 = (Enumerable.ToArray(Enumerable.Append<long>(greater_25, val_27)));
            } else {
                equal_24 = (Enumerable.ToArray(Enumerable.Append<long>(equal_24, val_27)));
            }
            i_26 = (i_26 + 1);
        };
        long[] sorted_less_28 = Program.three_way_radix_quicksort(less_23);
        long[] sorted_greater_29 = Program.three_way_radix_quicksort(greater_25);
        var result_30 = (Enumerable.ToArray(Enumerable.Concat(sorted_less_28, equal_24)));
        result_30 = (Enumerable.ToArray(Enumerable.Concat(result_30, sorted_greater_29)));
        return result_30;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            array1_31 = Program.quick_sort_3partition(array1_31, 0, (array1_31.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(array1_31)));
            long[] array2_32 = new long[]{9, 0, 2, 6};
            array2_32 = Program.quick_sort_3partition(array2_32, 0, (array2_32.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(array2_32)));
            long[] array3_33 = new long[]{};
            array3_33 = Program.quick_sort_3partition(array3_33, 0, (array3_33.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(array3_33)));
            long[] nums1_34 = new long[]{0, 5, 3, 1, 2};
            nums1_34 = Program.quick_sort_lomuto_partition(nums1_34, 0, (nums1_34.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(nums1_34)));
            long[] nums2_35 = new long[]{};
            nums2_35 = Program.quick_sort_lomuto_partition(nums2_35, 0, (nums2_35.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(nums2_35)));
            long[] nums3_36 = new long[]{-2, 5, 0, -4};
            nums3_36 = Program.quick_sort_lomuto_partition(nums3_36, 0, (nums3_36.Length - 1));
            Console.WriteLine(Program._fmtTop(_fmtStr(nums3_36)));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.three_way_radix_quicksort(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.three_way_radix_quicksort(new long[]{1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.three_way_radix_quicksort(new long[]{-5, -2, 1, -2, 0, 1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.three_way_radix_quicksort(new long[]{1, 2, 5, 1, 2, 0, 0, 5, 2, -1}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
