// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long RADIX_0 = 10;
    public static long[][] make_buckets() {
        long[][] buckets_1 = new long[][]{};
        long i_2 = 0;
        while ((i_2 < RADIX_0)) {
            buckets_1 = (Enumerable.ToArray(Enumerable.Append<long[]>(buckets_1, new long[]{})));
            i_2 = (i_2 + 1);
        };
        return buckets_1;
    }

    public static long max_value(long[] xs_3) {
        long max_val_4 = xs_3[(int)(0)];
        long i_5 = 1;
        while ((i_5 < xs_3.Length)) {
            if ((xs_3[(int)(i_5)] > max_val_4)) {
                max_val_4 = xs_3[(int)(i_5)];
            }
            i_5 = (i_5 + 1);
        };
        return max_val_4;
    }

    public static long[] radix_sort(long[] list_of_ints_6) {
        long placement_7 = 1;
        long max_digit_8 = Program.max_value(list_of_ints_6);
        while ((placement_7 <= max_digit_8)) {
            long[][] buckets_9 = Program.make_buckets();
            long i_10 = 0;
            while ((i_10 < list_of_ints_6.Length)) {
                long value_11 = list_of_ints_6[(int)(i_10)];
                long tmp_12 = _mod((value_11 / placement_7), RADIX_0);
                buckets_9[(int)(tmp_12)] = (Enumerable.ToArray(Enumerable.Append<long>(buckets_9[(int)(tmp_12)], value_11)));
                i_10 = (i_10 + 1);
            }
            long a_13 = 0;
            long b_14 = 0;
            while ((b_14 < RADIX_0)) {
                long[] bucket_15 = buckets_9[(int)(b_14)];
                long j_16 = 0;
                while ((j_16 < bucket_15.Length)) {
                    list_of_ints_6[(int)(a_13)] = bucket_15[(int)(j_16)];
                    a_13 = (a_13 + 1);
                    j_16 = (j_16 + 1);
                }
                b_14 = (b_14 + 1);
            }
            placement_7 = (placement_7 * RADIX_0);
        };
        return list_of_ints_6;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.radix_sort(new long[]{0, 5, 3, 2, 2}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.radix_sort(new long[]{1, 100, 10, 1000}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.radix_sort(new long[]{15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
