// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double int_to_float(long x_0) {
        return (x_0 * 1.0);
    }

    public static long floor_int(double x_1) {
        long i_2 = 0;
        while ((Program.int_to_float((i_2 + 1)) <= x_1)) {
            i_2 = (i_2 + 1);
        };
        return i_2;
    }

    public static double[] set_at_float(double[] xs_3, long idx_4, double value_5) {
        long i_6 = 0;
        double[] res_7 = new double[]{};
        while ((i_6 < xs_3.Length)) {
            if ((i_6 == idx_4)) {
                res_7 = (Enumerable.ToArray(Enumerable.Append<double>(res_7, value_5)));
            } else {
                res_7 = (Enumerable.ToArray(Enumerable.Append<double>(res_7, _idx(xs_3, i_6))));
            }
            i_6 = (i_6 + 1);
        };
        return res_7;
    }

    public static double[][] set_at_list_float(double[][] xs_8, long idx_9, double[] value_10) {
        long i_11 = 0;
        double[][] res_12 = new double[][]{};
        while ((i_11 < xs_8.Length)) {
            if ((i_11 == idx_9)) {
                res_12 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_12, value_10)));
            } else {
                res_12 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_12, _idx(xs_8, i_11))));
            }
            i_11 = (i_11 + 1);
        };
        return res_12;
    }

    public static double[] sort_float(double[] xs_13) {
        double[] res_14 = xs_13;
        long i_15 = 1;
        while ((i_15 < res_14.Length)) {
            double key_16 = _idx(res_14, i_15);
            long j_17 = (i_15 - 1);
            while (((j_17 >= 0) && (_idx(res_14, j_17) > key_16))) {
                res_14 = Program.set_at_float(res_14, (j_17 + 1), _idx(res_14, j_17));
                j_17 = (j_17 - 1);
            }
            res_14 = Program.set_at_float(res_14, (j_17 + 1), key_16);
            i_15 = (i_15 + 1);
        };
        return res_14;
    }

    public static double[] bucket_sort_with_count(double[] xs_18, long bucket_count_19) {
        if (((xs_18.Length == 0) || (bucket_count_19 <= 0))) {
            return new double[]{};
        };
        double min_value_20 = _idx(xs_18, 0);
        double max_value_21 = _idx(xs_18, 0);
        long i_22 = 1;
        while ((i_22 < xs_18.Length)) {
            if ((_idx(xs_18, i_22) < min_value_20)) {
                min_value_20 = _idx(xs_18, i_22);
            }
            if ((_idx(xs_18, i_22) > max_value_21)) {
                max_value_21 = _idx(xs_18, i_22);
            }
            i_22 = (i_22 + 1);
        };
        if ((max_value_21 == min_value_20)) {
            return xs_18;
        };
        double bucket_size_23 = ((max_value_21 - min_value_20) / Program.int_to_float(bucket_count_19));
        double[][] buckets_24 = new double[][]{};
        i_22 = 0;
        while ((i_22 < bucket_count_19)) {
            buckets_24 = (Enumerable.ToArray(Enumerable.Append<double[]>(buckets_24, new double[]{})));
            i_22 = (i_22 + 1);
        };
        i_22 = 0;
        while ((i_22 < xs_18.Length)) {
            double val_25 = _idx(xs_18, i_22);
            long idx_26 = Program.floor_int(((val_25 - min_value_20) / bucket_size_23));
            if ((idx_26 < 0)) {
                idx_26 = 0;
            }
            if ((idx_26 >= bucket_count_19)) {
                idx_26 = (bucket_count_19 - 1);
            }
            double[] bucket_27 = _idx(buckets_24, idx_26);
            bucket_27 = (Enumerable.ToArray(Enumerable.Append<double>(bucket_27, val_25)));
            buckets_24 = Program.set_at_list_float(buckets_24, idx_26, bucket_27);
            i_22 = (i_22 + 1);
        };
        double[] result_28 = new double[]{};
        i_22 = 0;
        while ((i_22 < buckets_24.Length)) {
            double[] sorted_bucket_29 = Program.sort_float(_idx(buckets_24, i_22));
            long j_30 = 0;
            while ((j_30 < sorted_bucket_29.Length)) {
                result_28 = (Enumerable.ToArray(Enumerable.Append<double>(result_28, _idx(sorted_bucket_29, j_30))));
                j_30 = (j_30 + 1);
            }
            i_22 = (i_22 + 1);
        };
        return result_28;
    }

    public static double[] bucket_sort(double[] xs_31) {
        return Program.bucket_sort_with_count(xs_31, 10);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bucket_sort(new double[]{-1.0, 2.0, -5.0, 0.0}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bucket_sort(new double[]{9.0, 8.0, 7.0, 6.0, -12.0}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bucket_sort(new double[]{0.4, 1.2, 0.1, 0.2, -0.9}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bucket_sort(new double[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.bucket_sort(new double[]{-1e10, 1e10}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
