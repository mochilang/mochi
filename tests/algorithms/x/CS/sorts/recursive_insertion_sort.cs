// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] insert_next(long[] collection_0, long index_1) {
        long[] arr_2 = collection_0;
        if (((index_1 >= arr_2.Length) || (_idx(arr_2, (index_1 - 1)) <= _idx(arr_2, index_1)))) {
            return arr_2;
        };
        long j_3 = (index_1 - 1);
        long temp_4 = _idx(arr_2, j_3);
        arr_2[(int)(j_3)] = _idx(arr_2, index_1);
        arr_2[(int)(index_1)] = temp_4;
        return Program.insert_next(arr_2, (index_1 + 1));
    }

    public static long[] rec_insertion_sort(long[] collection_5, long n_6) {
        long[] arr_7 = collection_5;
        if (((arr_7.Length <= 1) || (n_6 <= 1))) {
            return arr_7;
        };
        arr_7 = Program.insert_next(arr_7, (n_6 - 1));
        return Program.rec_insertion_sort(arr_7, (n_6 - 1));
    }

    public static void test_rec_insertion_sort() {
        long[] col1_8 = new long[]{1, 2, 1};
        col1_8 = Program.rec_insertion_sort(col1_8, col1_8.Length);
        if ((((_idx(col1_8, 0) != 1) || (_idx(col1_8, 1) != 1)) || (_idx(col1_8, 2) != 2))) {
            throw new Exception("test1 failed");
        };
        long[] col2_9 = new long[]{2, 1, 0, -1, -2};
        col2_9 = Program.rec_insertion_sort(col2_9, col2_9.Length);
        if ((_idx(col2_9, 0) != (0 - 2))) {
            throw new Exception("test2 failed");
        };
        if ((_idx(col2_9, 1) != (0 - 1))) {
            throw new Exception("test2 failed");
        };
        if ((_idx(col2_9, 2) != 0)) {
            throw new Exception("test2 failed");
        };
        if ((_idx(col2_9, 3) != 1)) {
            throw new Exception("test2 failed");
        };
        if ((_idx(col2_9, 4) != 2)) {
            throw new Exception("test2 failed");
        };
        long[] col3_10 = new long[]{1};
        col3_10 = Program.rec_insertion_sort(col3_10, col3_10.Length);
        if ((_idx(col3_10, 0) != 1)) {
            throw new Exception("test3 failed");
        };
    }

    public static void main() {
        Program.test_rec_insertion_sort();
        long[] numbers_11 = new long[]{5, 3, 4, 1, 2};
        numbers_11 = Program.rec_insertion_sort(numbers_11, numbers_11.Length);
        Console.WriteLine(Program._fmtTop(_fmtStr(numbers_11)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
