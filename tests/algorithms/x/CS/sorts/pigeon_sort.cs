// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] make_list(long n_0, long value_1) {
        long[] result_2 = new long[]{};
        long i_3 = 0;
        while ((i_3 < n_0)) {
            result_2 = (Enumerable.ToArray(Enumerable.Append<long>(result_2, value_1)));
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    public static long min_value(long[] arr_4) {
        long m_5 = _idx(arr_4, 0);
        long i_6 = 1;
        while ((i_6 < arr_4.Length)) {
            if ((_idx(arr_4, i_6) < m_5)) {
                m_5 = _idx(arr_4, i_6);
            }
            i_6 = (i_6 + 1);
        };
        return m_5;
    }

    public static long max_value(long[] arr_7) {
        long m_8 = _idx(arr_7, 0);
        long i_9 = 1;
        while ((i_9 < arr_7.Length)) {
            if ((_idx(arr_7, i_9) > m_8)) {
                m_8 = _idx(arr_7, i_9);
            }
            i_9 = (i_9 + 1);
        };
        return m_8;
    }

    public static long[] pigeon_sort(long[] array_10) {
        if ((array_10.Length == 0)) {
            return array_10;
        };
        long mn_11 = Program.min_value(array_10);
        long mx_12 = Program.max_value(array_10);
        long holes_range_13 = ((mx_12 - mn_11) + 1);
        long[] holes_14 = Program.make_list(holes_range_13, 0);
        long[] holes_repeat_15 = Program.make_list(holes_range_13, 0);
        long i_16 = 0;
        while ((i_16 < array_10.Length)) {
            long index_17 = (_idx(array_10, i_16) - mn_11);
            holes_14[(int)(index_17)] = _idx(array_10, i_16);
            holes_repeat_15[(int)(index_17)] = (_idx(holes_repeat_15, index_17) + 1);
            i_16 = (i_16 + 1);
        };
        long array_index_18 = 0;
        long h_19 = 0;
        while ((h_19 < holes_range_13)) {
            while ((_idx(holes_repeat_15, h_19) > 0)) {
                array_10[(int)(array_index_18)] = _idx(holes_14, h_19);
                array_index_18 = (array_index_18 + 1);
                holes_repeat_15[(int)(h_19)] = (_idx(holes_repeat_15, h_19) - 1);
            }
            h_19 = (h_19 + 1);
        };
        return array_10;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pigeon_sort(new long[]{0, 5, 3, 2, 2}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pigeon_sort(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.pigeon_sort(new long[]{-2, -5, -45}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
