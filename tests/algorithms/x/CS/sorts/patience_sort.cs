// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long bisect_left(long[][] stacks_0, long value_1) {
        long low_2 = 0;
        long high_3 = stacks_0.Length;
        while ((low_2 < high_3)) {
            long mid_4 = ((low_2 + high_3) / 2);
            long[] stack_5 = _idx(stacks_0, mid_4);
            long top_idx_6 = (stack_5.Length - 1);
            long top_7 = _idx(stack_5, top_idx_6);
            if ((top_7 < value_1)) {
                low_2 = (mid_4 + 1);
            } else {
                high_3 = mid_4;
            }
        };
        return low_2;
    }

    public static long[] reverse_list(long[] src_8) {
        long[] res_9 = new long[]{};
        long i_10 = (src_8.Length - 1);
        while ((i_10 >= 0)) {
            res_9 = (Enumerable.ToArray(Enumerable.Append<long>(res_9, _idx(src_8, i_10))));
            i_10 = (i_10 - 1);
        };
        return res_9;
    }

    public static long[] patience_sort(long[] collection_11) {
        long[][] stacks_12 = new long[][]{};
        long i_13 = 0;
        while ((i_13 < collection_11.Length)) {
            long element_14 = _idx(collection_11, i_13);
            long idx_15 = Program.bisect_left(stacks_12, element_14);
            if ((idx_15 != stacks_12.Length)) {
                long[] stack_16 = _idx(stacks_12, idx_15);
                stacks_12[(int)(idx_15)] = (Enumerable.ToArray(Enumerable.Append<long>(stack_16, element_14)));
            } else {
                long[] new_stack_17 = new long[]{element_14};
                stacks_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(stacks_12, new_stack_17)));
            }
            i_13 = (i_13 + 1);
        };
        i_13 = 0;
        while ((i_13 < stacks_12.Length)) {
            stacks_12[(int)(i_13)] = Program.reverse_list(_idx(stacks_12, i_13));
            i_13 = (i_13 + 1);
        };
        long[] indices_18 = new long[]{};
        i_13 = 0;
        while ((i_13 < stacks_12.Length)) {
            indices_18 = (Enumerable.ToArray(Enumerable.Append<long>(indices_18, 0)));
            i_13 = (i_13 + 1);
        };
        long total_19 = 0;
        i_13 = 0;
        while ((i_13 < stacks_12.Length)) {
            total_19 = (total_19 + _idx(stacks_12, i_13).Length);
            i_13 = (i_13 + 1);
        };
        long[] result_20 = new long[]{};
        long count_21 = 0;
        while ((count_21 < total_19)) {
            long min_val_22 = 0;
            long min_stack_23 = -1;
            long j_24 = 0;
            while ((j_24 < stacks_12.Length)) {
                long idx_25 = _idx(indices_18, j_24);
                if ((idx_25 < _idx(stacks_12, j_24).Length)) {
                    long val_26 = _idx(_idx(stacks_12, j_24), idx_25);
                    if ((min_stack_23 < 0)) {
                        min_val_22 = val_26;
                        min_stack_23 = j_24;
                    } else if ((val_26 < min_val_22)) {
                        min_val_22 = val_26;
                        min_stack_23 = j_24;
                    }
                }
                j_24 = (j_24 + 1);
            }
            result_20 = (Enumerable.ToArray(Enumerable.Append<long>(result_20, min_val_22)));
            indices_18[(int)(min_stack_23)] = (_idx(indices_18, min_stack_23) + 1);
            count_21 = (count_21 + 1);
        };
        i_13 = 0;
        while ((i_13 < result_20.Length)) {
            collection_11[(int)(i_13)] = _idx(result_20, i_13);
            i_13 = (i_13 + 1);
        };
        return collection_11;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.patience_sort(new long[]{1, 9, 5, 21, 17, 6}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.patience_sort(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.patience_sort(new long[]{-3, -17, -48}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
