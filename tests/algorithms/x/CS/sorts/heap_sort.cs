// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static long[] data_11 = new long[]{3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4};
    static long[] result_12 = Program.heap_sort(data_11);
    public static void heapify(long[] arr_0, long index_1, long heap_size_2) {
        long largest_3 = index_1;
        long left_index_4 = ((2 * index_1) + 1);
        long right_index_5 = ((2 * index_1) + 2);
        if (((left_index_4 < heap_size_2) && (arr_0[(int)(left_index_4)] > arr_0[(int)(largest_3)]))) {
            largest_3 = left_index_4;
        };
        if (((right_index_5 < heap_size_2) && (arr_0[(int)(right_index_5)] > arr_0[(int)(largest_3)]))) {
            largest_3 = right_index_5;
        };
        if ((largest_3 != index_1)) {
            long temp_6 = arr_0[(int)(largest_3)];
            arr_0[(int)(largest_3)] = arr_0[(int)(index_1)];
            arr_0[(int)(index_1)] = temp_6;
            Program.heapify(arr_0, largest_3, heap_size_2);
        };
    }

    public static long[] heap_sort(long[] arr_7) {
        long n_8 = arr_7.Length;
        long i_9 = ((n_8 / 2) - 1);
        while ((i_9 >= 0)) {
            Program.heapify(arr_7, i_9, n_8);
            i_9 = (i_9 - 1);
        };
        i_9 = (n_8 - 1);
        while ((i_9 > 0)) {
            long temp_10 = arr_7[(int)(0)];
            arr_7[(int)(0)] = arr_7[(int)(i_9)];
            arr_7[(int)(i_9)] = temp_10;
            Program.heapify(arr_7, 0, i_9);
            i_9 = (i_9 - 1);
        };
        return arr_7;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(result_12));
            if ((_fmtStr(result_12) != _fmtStr(new long[]{-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123}))) {
                throw new Exception("Assertion error");
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
