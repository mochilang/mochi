// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Node {
    public long value;
    public long left;
    public long right;
    public override string ToString() => $"Node {{value = {value}, left = {left}, right = {right}}}";
}
class TreeState {
    public Node[] nodes;
    public long root;
    public override string ToString() => $"TreeState {{nodes = {nodes}, root = {root}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long new_node(TreeState state_0, long value_1) {
        state_0.nodes = (Enumerable.ToArray(Enumerable.Append<Node>(state_0.nodes, new Node{value = value_1, left = -1, right = -1})));
        return (state_0.nodes.Length - 1);
    }

    public static void insert(TreeState state_2, long value_3) {
        if ((state_2.root == -1)) {
            state_2.root = Program.new_node(state_2, value_3);
            return;
        };
        long current_4 = state_2.root;
        Node[] nodes_5 = state_2.nodes;
        while (true) {
            Node node_6 = _idx(nodes_5, current_4);
            if ((value_3 < node_6.value)) {
                if ((node_6.left == -1)) {
                    long idx_7 = Program.new_node(state_2, value_3);
                    nodes_5 = state_2.nodes;
                    node_6.left = idx_7;
                    nodes_5[(int)(current_4)] = node_6;
                    state_2.nodes = nodes_5;
                    return;
                }
                current_4 = node_6.left;
            } else if ((value_3 > node_6.value)) {
                if ((node_6.right == -1)) {
                    long idx_8 = Program.new_node(state_2, value_3);
                    nodes_5 = state_2.nodes;
                    node_6.right = idx_8;
                    nodes_5[(int)(current_4)] = node_6;
                    state_2.nodes = nodes_5;
                    return;
                }
                current_4 = node_6.right;
            } else {
                return;
            }
        };
    }

    public static long[] inorder(TreeState state_9, long idx_10) {
        if ((idx_10 == -1)) {
            return new long[]{};
        };
        Node node_11 = _idx(state_9.nodes, idx_10);
        long[] result_12 = Program.inorder(state_9, node_11.left);
        result_12 = (Enumerable.ToArray(Enumerable.Append<long>(result_12, node_11.value)));
        long[] right_part_13 = Program.inorder(state_9, node_11.right);
        long i_14 = 0;
        while ((i_14 < right_part_13.Length)) {
            result_12 = (Enumerable.ToArray(Enumerable.Append<long>(result_12, _idx(right_part_13, i_14))));
            i_14 = (i_14 + 1);
        };
        return result_12;
    }

    public static long[] tree_sort(long[] arr_15) {
        TreeState state_16 = new TreeState{nodes = new Node[]{}, root = -1};
        long i_17 = 0;
        while ((i_17 < arr_15.Length)) {
            Program.insert(state_16, _idx(arr_15, i_17));
            i_17 = (i_17 + 1);
        };
        if ((state_16.root == -1)) {
            return new long[]{};
        };
        return Program.inorder(state_16, state_16.root);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.tree_sort(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.tree_sort(new long[]{1}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.tree_sort(new long[]{1, 2}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.tree_sort(new long[]{5, 2, 7}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.tree_sort(new long[]{5, -4, 9, 2, 7}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.tree_sort(new long[]{5, 6, 1, -1, 4, 37, 2, 7}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
