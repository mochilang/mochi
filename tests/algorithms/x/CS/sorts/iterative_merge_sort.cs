// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] merge(long[] a_0, long low_1, long mid_2, long high_3) {
        long[] left_4 = _slice<long>(a_0, low_1, mid_2);
        long[] right_5 = _slice<long>(a_0, mid_2, (high_3 + 1));
        long[] result_6 = new long[]{};
        while (((left_4.Length > 0) && (right_5.Length > 0))) {
            if ((_idx(left_4, 0) <= _idx(right_5, 0))) {
                result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, _idx(left_4, 0))));
                left_4 = _slice<long>(left_4, 1, left_4.Length);
            } else {
                result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, _idx(right_5, 0))));
                right_5 = _slice<long>(right_5, 1, right_5.Length);
            }
        };
        long i_7 = 0;
        while ((i_7 < left_4.Length)) {
            result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, _idx(left_4, i_7))));
            i_7 = (i_7 + 1);
        };
        i_7 = 0;
        while ((i_7 < right_5.Length)) {
            result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, _idx(right_5, i_7))));
            i_7 = (i_7 + 1);
        };
        i_7 = 0;
        while ((i_7 < result_6.Length)) {
            a_0[(int)((low_1 + i_7))] = _idx(result_6, i_7);
            i_7 = (i_7 + 1);
        };
        return a_0;
    }

    public static long[] iter_merge_sort(long[] items_8) {
        long n_9 = items_8.Length;
        if ((n_9 <= 1)) {
            return items_8;
        };
        long[] arr_10 = _slice<long>(items_8, 0, items_8.Length);
        long p_11 = 2;
        while ((p_11 <= n_9)) {
            long i_12 = 0;
            while ((i_12 < n_9)) {
                long high_13 = ((i_12 + p_11) - 1);
                if ((high_13 >= n_9)) {
                    high_13 = (n_9 - 1);
                }
                long low_14 = i_12;
                long mid_15 = (((low_14 + high_13) + 1) / 2);
                arr_10 = Program.merge(arr_10, low_14, mid_15, high_13);
                i_12 = (i_12 + p_11);
            }
            if (((p_11 * 2) >= n_9)) {
                long mid2_16 = (i_12 - p_11);
                arr_10 = Program.merge(arr_10, 0, mid2_16, (n_9 - 1));
                break;
            }
            p_11 = (p_11 * 2);
        };
        return arr_10;
    }

    public static string list_to_string(long[] arr_17) {
        string s_18 = "[";
        long i_19 = 0;
        while ((i_19 < arr_17.Length)) {
            s_18 = (s_18 + _fmtStr(_idx(arr_17, i_19)));
            if ((i_19 < (arr_17.Length - 1))) {
                s_18 = (s_18 + ", ");
            }
            i_19 = (i_19 + 1);
        };
        return (s_18 + "]");
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{5, 9, 8, 7, 1, 2, 7}))));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{1}))));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{2, 1}))));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{4, 3, 2, 1}))));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{5, 4, 3, 2, 1}))));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{-2, -9, -1, -4}))));
            Console.WriteLine(Program._fmtTop(Program.list_to_string(Program.iter_merge_sort(new long[]{}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
