// Generated by Mochi 0.10.63 on 2025-08-11 16:20 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long[] example1_53 = new long[]{4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12};
    public static long[] insertion_sort(long[] a_0, long start_1, long end__2) {
        long[] arr_3 = a_0;
        long i_4 = start_1;
        while ((i_4 < end__2)) {
            long key_5 = _idx(arr_3, i_4);
            long j_6 = i_4;
            while (((j_6 > start_1) && (_idx(arr_3, (j_6 - 1)) > key_5))) {
                arr_3[(int)(j_6)] = _idx(arr_3, (j_6 - 1));
                j_6 = (j_6 - 1);
            }
            arr_3[(int)(j_6)] = key_5;
            i_4 = (i_4 + 1);
        };
        return arr_3;
    }

    public static long[] heapify(long[] a_7, long index_8, long heap_size_9) {
        long[] arr_10 = a_7;
        long largest_11 = index_8;
        long left_12 = ((2 * index_8) + 1);
        long right_13 = ((2 * index_8) + 2);
        if (((left_12 < heap_size_9) && (_idx(arr_10, left_12) > _idx(arr_10, largest_11)))) {
            largest_11 = left_12;
        };
        if (((right_13 < heap_size_9) && (_idx(arr_10, right_13) > _idx(arr_10, largest_11)))) {
            largest_11 = right_13;
        };
        if ((largest_11 != index_8)) {
            long temp_14 = _idx(arr_10, index_8);
            arr_10[(int)(index_8)] = _idx(arr_10, largest_11);
            arr_10[(int)(largest_11)] = temp_14;
            arr_10 = Program.heapify(arr_10, largest_11, heap_size_9);
        };
        return arr_10;
    }

    public static long[] heap_sort(long[] a_15) {
        long[] arr_16 = a_15;
        long n_17 = arr_16.Length;
        if ((n_17 <= 1)) {
            return arr_16;
        };
        long i_18 = (n_17 / 2);
        while (true) {
            arr_16 = Program.heapify(arr_16, i_18, n_17);
            if ((i_18 == 0)) {
                break;
            }
            i_18 = (i_18 - 1);
        };
        i_18 = (n_17 - 1);
        while ((i_18 > 0)) {
            long temp_19 = _idx(arr_16, 0);
            arr_16[(int)(0)] = _idx(arr_16, i_18);
            arr_16[(int)(i_18)] = temp_19;
            arr_16 = Program.heapify(arr_16, 0, i_18);
            i_18 = (i_18 - 1);
        };
        return arr_16;
    }

    public static long median_of_3(long[] arr_20, long first_21, long middle_22, long last_23) {
        long a_24 = _idx(arr_20, first_21);
        long b_25 = _idx(arr_20, middle_22);
        long c_26 = _idx(arr_20, last_23);
        if ((((a_24 > b_25) && (a_24 < c_26)) || ((a_24 < b_25) && (a_24 > c_26)))) {
            return a_24;
        } else if ((((b_25 > a_24) && (b_25 < c_26)) || ((b_25 < a_24) && (b_25 > c_26)))) {
            return b_25;
        } else {
            return c_26;
        };
        return default(long);
    }

    public static long partition(long[] arr_27, long low_28, long high_29, long pivot_30) {
        long i_31 = low_28;
        long j_32 = high_29;
        while (true) {
            while ((_idx(arr_27, i_31) < pivot_30)) {
                i_31 = (i_31 + 1);
            }
            j_32 = (j_32 - 1);
            while ((pivot_30 < _idx(arr_27, j_32))) {
                j_32 = (j_32 - 1);
            }
            if ((i_31 >= j_32)) {
                return i_31;
            }
            long temp_33 = _idx(arr_27, i_31);
            arr_27[(int)(i_31)] = _idx(arr_27, j_32);
            arr_27[(int)(j_32)] = temp_33;
            i_31 = (i_31 + 1);
        };
        return default(long);
    }

    public static long int_log2(long n_34) {
        long v_35 = n_34;
        long r_36 = 0;
        while ((v_35 > 1)) {
            v_35 = (v_35 / 2);
            r_36 = (r_36 + 1);
        };
        return r_36;
    }

    public static long[] intro_sort(long[] arr_37, long start_38, long end__39, long size_threshold_40, long max_depth_41) {
        long[] array_42 = arr_37;
        long s_43 = start_38;
        long e_44 = end__39;
        long depth_45 = max_depth_41;
        while (((e_44 - s_43) > size_threshold_40)) {
            if ((depth_45 == 0)) {
                return Program.heap_sort(array_42);
            }
            depth_45 = (depth_45 - 1);
            long pivot_46 = Program.median_of_3(array_42, s_43, ((s_43 + ((e_44 - s_43) / 2)) + 1), (e_44 - 1));
            long p_47 = Program.partition(array_42, s_43, e_44, pivot_46);
            array_42 = Program.intro_sort(array_42, p_47, e_44, size_threshold_40, depth_45);
            e_44 = p_47;
        };
        long[] res_48 = Program.insertion_sort(array_42, s_43, e_44);
        long __49 = res_48.Length;
        return res_48;
    }

    public static void intro_sort_main(long[] arr_50) {
        if ((arr_50.Length == 0)) {
            Console.WriteLine(Program._fmtTop(arr_50));
            return;
        };
        long max_depth_51 = (2 * Program.int_log2(arr_50.Length));
        long[] sorted_52 = Program.intro_sort(arr_50, 0, arr_50.Length, 16, max_depth_51);
        Console.WriteLine(Program._fmtTop(sorted_52));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.intro_sort_main(example1_53);
            long[] example2_54 = new long[]{21, 15, 11, 45, -2, -11, 46};
            Program.intro_sort_main(example2_54);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
