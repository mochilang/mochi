// Generated by Mochi 0.10.61 on 2025-08-08 17:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] subarray(long[] xs_0, long start_1, long end_2) {
        long[] result_3 = new long[]{};
        long i_4 = start_1;
        while ((i_4 < end_2)) {
            result_3 = (Enumerable.ToArray(Enumerable.Append<long>(result_3, xs_0[(int)(i_4)])));
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static long[] merge(long[] left_5, long[] right_6) {
        long[] result_7 = new long[]{};
        long i_8 = 0;
        long j_9 = 0;
        while (((i_8 < left_5.Length) && (j_9 < right_6.Length))) {
            if ((left_5[(int)(i_8)] <= right_6[(int)(j_9)])) {
                result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, left_5[(int)(i_8)])));
                i_8 = (i_8 + 1);
            } else {
                result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, right_6[(int)(j_9)])));
                j_9 = (j_9 + 1);
            }
        };
        while ((i_8 < left_5.Length)) {
            result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, left_5[(int)(i_8)])));
            i_8 = (i_8 + 1);
        };
        while ((j_9 < right_6.Length)) {
            result_7 = (Enumerable.ToArray(Enumerable.Append<long>(result_7, right_6[(int)(j_9)])));
            j_9 = (j_9 + 1);
        };
        return result_7;
    }

    public static long[] merge_sort(long[] collection_10) {
        if ((collection_10.Length <= 1)) {
            return collection_10;
        };
        long mid_index_11 = (collection_10.Length / 2);
        long[] left_12 = Program.subarray(collection_10, 0, mid_index_11);
        long[] right_13 = Program.subarray(collection_10, mid_index_11, collection_10.Length);
        long[] sorted_left_14 = Program.merge_sort(left_12);
        long[] sorted_right_15 = Program.merge_sort(right_13);
        return Program.merge(sorted_left_14, sorted_right_15);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_sort(new long[]{0, 5, 3, 2, 2}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_sort(new long[]{}))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_sort(new long[]{-2, -5, -45}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
