// Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long[] binary_search_insertion_from(long[] sorted_list_0, long item_1, long start_2) {
        long left_3 = start_2;
        long right_4 = (sorted_list_0.Length - 1);
        while ((left_3 <= right_4)) {
            long middle_5 = ((left_3 + right_4) / 2);
            if ((left_3 == right_4)) {
                if ((_idx(sorted_list_0, middle_5) < item_1)) {
                    left_3 = (middle_5 + 1);
                }
                break;
            } else if ((_idx(sorted_list_0, middle_5) < item_1)) {
                left_3 = (middle_5 + 1);
            } else {
                right_4 = (middle_5 - 1);
            }
        };
        long[] result_6 = new long[]{};
        long i_7 = 0;
        while ((i_7 < left_3)) {
            result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, _idx(sorted_list_0, i_7))));
            i_7 = (i_7 + 1);
        };
        result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, item_1)));
        while ((i_7 < sorted_list_0.Length)) {
            result_6 = (Enumerable.ToArray(Enumerable.Append<long>(result_6, _idx(sorted_list_0, i_7))));
            i_7 = (i_7 + 1);
        };
        return result_6;
    }

    public static long[] binary_search_insertion(long[] sorted_list_8, long item_9) {
        return Program.binary_search_insertion_from(sorted_list_8, item_9, 0);
    }

    public static long[][] merge(long[][] left_10, long[][] right_11) {
        long[][] result_12 = new long[][]{};
        long i_13 = 0;
        long j_14 = 0;
        while (((i_13 < left_10.Length) && (j_14 < right_11.Length))) {
            if ((_idx(_idx(left_10, i_13), 0) < _idx(_idx(right_11, j_14), 0))) {
                result_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_12, _idx(left_10, i_13))));
                i_13 = (i_13 + 1);
            } else {
                result_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_12, _idx(right_11, j_14))));
                j_14 = (j_14 + 1);
            }
        };
        while ((i_13 < left_10.Length)) {
            result_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_12, _idx(left_10, i_13))));
            i_13 = (i_13 + 1);
        };
        while ((j_14 < right_11.Length)) {
            result_12 = (Enumerable.ToArray(Enumerable.Append<long[]>(result_12, _idx(right_11, j_14))));
            j_14 = (j_14 + 1);
        };
        return result_12;
    }

    public static long[][] sortlist_2d(long[][] list_2d_15) {
        long length_16 = list_2d_15.Length;
        if ((length_16 <= 1)) {
            return list_2d_15;
        };
        long middle_17 = (length_16 / 2);
        long[][] left_18 = new long[][]{};
        long i_19 = 0;
        while ((i_19 < middle_17)) {
            left_18 = (Enumerable.ToArray(Enumerable.Append<long[]>(left_18, _idx(list_2d_15, i_19))));
            i_19 = (i_19 + 1);
        };
        long[][] right_20 = new long[][]{};
        long j_21 = middle_17;
        while ((j_21 < length_16)) {
            right_20 = (Enumerable.ToArray(Enumerable.Append<long[]>(right_20, _idx(list_2d_15, j_21))));
            j_21 = (j_21 + 1);
        };
        return Program.merge(Program.sortlist_2d(left_18), Program.sortlist_2d(right_20));
    }

    public static long[] merge_insertion_sort(long[] collection_22) {
        if ((collection_22.Length <= 1)) {
            return collection_22;
        };
        long[][] two_paired_list_23 = new long[][]{};
        bool has_last_odd_item_24 = false;
        long i_25 = 0;
        while ((i_25 < collection_22.Length)) {
            if ((i_25 == (collection_22.Length - 1))) {
                has_last_odd_item_24 = true;
            } else {
                long a_26 = _idx(collection_22, i_25);
                long b_27 = _idx(collection_22, (i_25 + 1));
                if ((a_26 < b_27)) {
                    two_paired_list_23 = (Enumerable.ToArray(Enumerable.Append<long[]>(two_paired_list_23, new long[]{a_26, b_27})));
                } else {
                    two_paired_list_23 = (Enumerable.ToArray(Enumerable.Append<long[]>(two_paired_list_23, new long[]{b_27, a_26})));
                }
            }
            i_25 = (i_25 + 2);
        };
        long[][] sorted_list_2d_28 = Program.sortlist_2d(two_paired_list_23);
        long[] result_29 = new long[]{};
        i_25 = 0;
        while ((i_25 < sorted_list_2d_28.Length)) {
            result_29 = (Enumerable.ToArray(Enumerable.Append<long>(result_29, _idx(_idx(sorted_list_2d_28, i_25), 0))));
            i_25 = (i_25 + 1);
        };
        result_29 = (Enumerable.ToArray(Enumerable.Append<long>(result_29, _idx(_idx(sorted_list_2d_28, (sorted_list_2d_28.Length - 1)), 1))));
        if (has_last_odd_item_24) {
            result_29 = Program.binary_search_insertion(result_29, _idx(collection_22, (collection_22.Length - 1)));
        };
        bool inserted_before_30 = false;
        long idx_31 = 0;
        while ((idx_31 < (sorted_list_2d_28.Length - 1))) {
            if ((has_last_odd_item_24 && (_idx(result_29, idx_31) == _idx(collection_22, (collection_22.Length - 1))))) {
                inserted_before_30 = true;
            }
            long pivot_32 = _idx(_idx(sorted_list_2d_28, idx_31), 1);
            if (inserted_before_30) {
                result_29 = Program.binary_search_insertion_from(result_29, pivot_32, (idx_31 + 2));
            } else {
                result_29 = Program.binary_search_insertion_from(result_29, pivot_32, (idx_31 + 1));
            }
            idx_31 = (idx_31 + 1);
        };
        return result_29;
    }

    public static void main() {
        long[] example1_33 = new long[]{0, 5, 3, 2, 2};
        long[] example2_34 = new long[]{99};
        long[] example3_35 = new long[]{-2, -5, -45};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_insertion_sort(example1_33))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_insertion_sort(example2_34))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.merge_insertion_sort(example3_35))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
