// Generated by Mochi 0.10.61 on 2025-08-08 15:53 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static long[] set_at_int(long[] xs_0, long idx_1, long value_2) {
        long[] res_3 = new long[]{};
        long i_4 = 0;
        while ((i_4 < xs_0.Length)) {
            if ((i_4 == idx_1)) {
                res_3 = (Enumerable.ToArray(Enumerable.Append<long>(res_3, value_2)));
            } else {
                res_3 = (Enumerable.ToArray(Enumerable.Append<long>(res_3, xs_0[(int)(i_4)])));
            }
            i_4 = (i_4 + 1);
        };
        return res_3;
    }

    public static long[] comp_and_swap(long[] arr_5, long i_6, long j_7, long dir_8) {
        long[] res_9 = arr_5;
        long xi_10 = arr_5[(int)(i_6)];
        long xj_11 = arr_5[(int)(j_7)];
        if ((((dir_8 == 1) && (xi_10 > xj_11)) || ((dir_8 == 0) && (xi_10 < xj_11)))) {
            res_9 = Program.set_at_int(res_9, i_6, xj_11);
            res_9 = Program.set_at_int(res_9, j_7, xi_10);
        };
        return res_9;
    }

    public static long[] bitonic_merge(long[] arr_12, long low_13, long length_14, long dir_15) {
        long[] res_16 = arr_12;
        if ((length_14 > 1)) {
            long mid_17 = (length_14 / 2);
            long k_18 = low_13;
            while ((k_18 < (low_13 + mid_17))) {
                res_16 = Program.comp_and_swap(res_16, k_18, (k_18 + mid_17), dir_15);
                k_18 = (k_18 + 1);
            }
            res_16 = Program.bitonic_merge(res_16, low_13, mid_17, dir_15);
            res_16 = Program.bitonic_merge(res_16, (low_13 + mid_17), mid_17, dir_15);
        };
        return res_16;
    }

    public static long[] bitonic_sort(long[] arr_19, long low_20, long length_21, long dir_22) {
        long[] res_23 = arr_19;
        if ((length_21 > 1)) {
            long mid_24 = (length_21 / 2);
            res_23 = Program.bitonic_sort(res_23, low_20, mid_24, 1);
            res_23 = Program.bitonic_sort(res_23, (low_20 + mid_24), mid_24, 0);
            res_23 = Program.bitonic_merge(res_23, low_20, length_21, dir_22);
        };
        return res_23;
    }

    public static void main() {
        long[] data_25 = new long[]{12, 34, 92, -23, 0, -121, -167, 145};
        long[] asc_26 = Program.bitonic_sort(data_25, 0, data_25.Length, 1);
        Console.WriteLine(Program._fmtTop(_fmtStr(asc_26)));
        long[] desc_27 = Program.bitonic_merge(asc_26, 0, asc_26.Length, 0);
        Console.WriteLine(Program._fmtTop(_fmtStr(desc_27)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
