// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static long get_winner(double[][] weights_0, long[] sample_1) {
        double d0_2 = 0.0;
        double d1_3 = 0.0;
        for (var i_4 = 0; i_4 < sample_1.Length; i_4++) {
            double diff0_5 = (_idx(sample_1, i_4) - _idx(_idx(weights_0, 0), i_4));
            double diff1_6 = (_idx(sample_1, i_4) - _idx(_idx(weights_0, 1), i_4));
            d0_2 = (d0_2 + (diff0_5 * diff0_5));
            d1_3 = (d1_3 + (diff1_6 * diff1_6));
            return ((d0_2 > d1_3) ? 0 : 1);
        };
        return 0;
    }

    public static double[][] update(double[][] weights_7, long[] sample_8, long j_9, double alpha_10) {
        for (var i_11 = 0; i_11 < weights_7.Length; i_11++) {
            _idx(weights_7, j_9)[(int)(i_11)] = (_idx(_idx(weights_7, j_9), i_11) + (alpha_10 * (_idx(sample_8, i_11) - _idx(_idx(weights_7, j_9), i_11))));
        };
        return weights_7;
    }

    public static string list_to_string(double[] xs_12) {
        string s_13 = "[";
        long i_14 = 0;
        while ((i_14 < xs_12.Length)) {
            s_13 = (s_13 + _fmtStr(_idx(xs_12, i_14)));
            if ((i_14 < (xs_12.Length - 1))) {
                s_13 = (s_13 + ", ");
            }
            i_14 = (i_14 + 1);
        };
        s_13 = (s_13 + "]");
        return s_13;
    }

    public static string matrix_to_string(double[][] m_15) {
        string s_16 = "[";
        long i_17 = 0;
        while ((i_17 < m_15.Length)) {
            s_16 = (s_16 + Program.list_to_string(_idx(m_15, i_17)));
            if ((i_17 < (m_15.Length - 1))) {
                s_16 = (s_16 + ", ");
            }
            i_17 = (i_17 + 1);
        };
        s_16 = (s_16 + "]");
        return s_16;
    }

    public static void main() {
        long[][] training_samples_18 = new long[][]{new long[]{1, 1, 0, 0}, new long[]{0, 0, 0, 1}, new long[]{1, 0, 0, 0}, new long[]{0, 0, 1, 1}};
        double[][] weights_19 = new double[][]{new double[]{0.2, 0.6, 0.5, 0.9}, new double[]{0.8, 0.4, 0.7, 0.3}};
        long epochs_20 = 3;
        double alpha_21 = 0.5;
        for (var __22 = 0; __22 < epochs_20; __22++) {
            for (var j_23 = 0; j_23 < training_samples_18.Length; j_23++) {
                long[] sample_24 = _idx(training_samples_18, j_23);
                long winner_25 = Program.get_winner(weights_19, sample_24);
                weights_19 = Program.update(weights_19, sample_24, winner_25, alpha_21);
            }
        };
        long[] sample_26 = new long[]{0, 0, 0, 1};
        long winner_27 = Program.get_winner(weights_19, sample_26);
        Console.WriteLine(Program._fmtTop(("Clusters that the test sample belongs to : " + _fmtStr(winner_27))));
        Console.WriteLine(Program._fmtTop(("Weights that have been trained : " + Program.matrix_to_string(weights_19))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
