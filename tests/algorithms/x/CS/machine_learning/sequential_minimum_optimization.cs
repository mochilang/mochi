// Generated by Mochi 0.10.67 (commit c7612b9c83) on 2025-08-16 19:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] samples_45 = new double[][]{new double[]{2.0, 2.0}, new double[]{1.5, 1.5}, new double[]{0.0, 0.0}, new double[]{0.5, 0.0}};
    static double[] labels_46 = new double[]{1.0, 1.0, -1.0, -1.0};
    static double[][] model_47 = Program.smo_train(samples_45, labels_46, 1.0, 0.001, 10);
    public static double dot(double[] a_0, double[] b_1) {
        double sum_2 = 0.0;
        long i_3 = 0;
        while ((i_3 < a_0.Length)) {
            sum_2 = (sum_2 + (_idx(a_0, i_3) * _idx(b_1, i_3)));
            i_3 = (i_3 + 1);
        };
        return sum_2;
    }

    public static double maxf(double a_4, double b_5) {
        if ((a_4 > b_5)) {
            return a_4;
        };
        return b_5;
    }

    public static double minf(double a_6, double b_7) {
        if ((a_6 < b_7)) {
            return a_6;
        };
        return b_7;
    }

    public static double absf(double x_8) {
        if ((x_8 >= 0.0)) {
            return x_8;
        };
        return (0.0 - x_8);
    }

    public static double predict_raw(double[][] samples_9, double[] labels_10, double[] alphas_11, double b_12, double[] x_13) {
        double res_14 = 0.0;
        long i_15 = 0;
        while ((i_15 < samples_9.Length)) {
            res_14 = (res_14 + ((_idx(alphas_11, i_15) * _idx(labels_10, i_15)) * Program.dot(_idx(samples_9, i_15), x_13)));
            i_15 = (i_15 + 1);
        };
        return (res_14 + b_12);
    }

    public static double[][] smo_train(double[][] samples_16, double[] labels_17, double c_18, double tol_19, long max_passes_20) {
        long m_21 = samples_16.Length;
        double[] alphas_22 = new double[]{};
        long i_23 = 0;
        while ((i_23 < m_21)) {
            alphas_22 = ((Func<double[]>)(() => { var _tmp = alphas_22.Cast<double>().ToList(); _tmp.Add(0.0); return _tmp.ToArray(); }))();
            i_23 = (i_23 + 1);
        };
        double b_24 = 0.0;
        long passes_25 = 0;
        while ((passes_25 < max_passes_20)) {
            long num_changed_26 = 0;
            long i1_27 = 0;
            while ((i1_27 < m_21)) {
                double Ei_28 = (Program.predict_raw(samples_16, labels_17, alphas_22, b_24, _idx(samples_16, i1_27)) - _idx(labels_17, i1_27));
                if (((((_idx(labels_17, i1_27) * Ei_28) < (0.0 - tol_19)) && (_idx(alphas_22, i1_27) < c_18)) || (((_idx(labels_17, i1_27) * Ei_28) > tol_19) && (_idx(alphas_22, i1_27) > 0.0)))) {
                    long i2_29 = _mod((i1_27 + 1), m_21);
                    double Ej_30 = (Program.predict_raw(samples_16, labels_17, alphas_22, b_24, _idx(samples_16, i2_29)) - _idx(labels_17, i2_29));
                    double alpha1_old_31 = _idx(alphas_22, i1_27);
                    double alpha2_old_32 = _idx(alphas_22, i2_29);
                    double L_33 = 0.0;
                    double H_34 = 0.0;
                    if ((_idx(labels_17, i1_27) != _idx(labels_17, i2_29))) {
                        L_33 = Program.maxf(0.0, (alpha2_old_32 - alpha1_old_31));
                        H_34 = Program.minf(c_18, ((c_18 + alpha2_old_32) - alpha1_old_31));
                    } else {
                        L_33 = Program.maxf(0.0, ((alpha2_old_32 + alpha1_old_31) - c_18));
                        H_34 = Program.minf(c_18, (alpha2_old_32 + alpha1_old_31));
                    }
                    if ((L_33 == H_34)) {
                        i1_27 = (i1_27 + 1);
                        continue;
                    }
                    double eta_35 = (((2.0 * Program.dot(_idx(samples_16, i1_27), _idx(samples_16, i2_29))) - Program.dot(_idx(samples_16, i1_27), _idx(samples_16, i1_27))) - Program.dot(_idx(samples_16, i2_29), _idx(samples_16, i2_29)));
                    if ((eta_35 >= 0.0)) {
                        i1_27 = (i1_27 + 1);
                        continue;
                    }
                    alphas_22[(int)(i2_29)] = (alpha2_old_32 - ((_idx(labels_17, i2_29) * (Ei_28 - Ej_30)) / eta_35));
                    if ((_idx(alphas_22, i2_29) > H_34)) {
                        alphas_22[(int)(i2_29)] = H_34;
                    }
                    if ((_idx(alphas_22, i2_29) < L_33)) {
                        alphas_22[(int)(i2_29)] = L_33;
                    }
                    if ((Program.absf((_idx(alphas_22, i2_29) - alpha2_old_32)) < 1.0000000000000001e-05)) {
                        i1_27 = (i1_27 + 1);
                        continue;
                    }
                    alphas_22[(int)(i1_27)] = (alpha1_old_31 + ((_idx(labels_17, i1_27) * _idx(labels_17, i2_29)) * (alpha2_old_32 - _idx(alphas_22, i2_29))));
                    double b1_36 = (((b_24 - Ei_28) - ((_idx(labels_17, i1_27) * (_idx(alphas_22, i1_27) - alpha1_old_31)) * Program.dot(_idx(samples_16, i1_27), _idx(samples_16, i1_27)))) - ((_idx(labels_17, i2_29) * (_idx(alphas_22, i2_29) - alpha2_old_32)) * Program.dot(_idx(samples_16, i1_27), _idx(samples_16, i2_29))));
                    double b2_37 = (((b_24 - Ej_30) - ((_idx(labels_17, i1_27) * (_idx(alphas_22, i1_27) - alpha1_old_31)) * Program.dot(_idx(samples_16, i1_27), _idx(samples_16, i2_29)))) - ((_idx(labels_17, i2_29) * (_idx(alphas_22, i2_29) - alpha2_old_32)) * Program.dot(_idx(samples_16, i2_29), _idx(samples_16, i2_29))));
                    if (((_idx(alphas_22, i1_27) > 0.0) && (_idx(alphas_22, i1_27) < c_18))) {
                        b_24 = b1_36;
                    } else if (((_idx(alphas_22, i2_29) > 0.0) && (_idx(alphas_22, i2_29) < c_18))) {
                        b_24 = b2_37;
                    } else {
                        b_24 = ((b1_36 + b2_37) / 2.0);
                    }
                    num_changed_26 = (num_changed_26 + 1);
                }
                i1_27 = (i1_27 + 1);
            }
            if ((num_changed_26 == 0)) {
                passes_25 = (passes_25 + 1);
            } else {
                passes_25 = 0;
            }
        };
        return new double[][]{alphas_22, new double[]{b_24}};
    }

    public static double predict(double[][] samples_38, double[] labels_39, double[][] model_40, double[] x_41) {
        double[] alphas_42 = _idx(model_40, 0);
        double b_43 = _idx(_idx(model_40, 1), 0);
        double val_44 = Program.predict_raw(samples_38, labels_39, alphas_42, b_43, x_41);
        if ((val_44 >= 0.0)) {
            return 1.0;
        };
        return -1.0;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.predict(samples_45, labels_46, model_47, new double[]{1.5, 1.0})));
            Console.WriteLine(Program._fmtTop(Program.predict(samples_45, labels_46, model_47, new double[]{0.20000000000000001, 0.10000000000000001})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
