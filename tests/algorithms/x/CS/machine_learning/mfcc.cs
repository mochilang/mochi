// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.141592653589793;
    static long sample_rate_71 = 8000;
    static long size_72 = 16;
    static double[] audio_73 = new double[]{};
    static long n_74 = 0;
    public static double sinApprox(double x_1) {
        double term_2 = x_1;
        double sum_3 = x_1;
        long n_4 = 1;
        while ((n_4 <= 10)) {
            double denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((-term_2 * x_1) * x_1) / denom_5);
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    public static double cosApprox(double x_6) {
        double term_7 = 1.0;
        double sum_8 = 1.0;
        long n_9 = 1;
        while ((n_9 <= 10)) {
            double denom_10 = Convert.ToDouble((((2 * n_9) - 1) * (2 * n_9)));
            term_7 = (((-term_7 * x_6) * x_6) / denom_10);
            sum_8 = (sum_8 + term_7);
            n_9 = (n_9 + 1);
        };
        return sum_8;
    }

    public static double expApprox(double x_11) {
        double sum_12 = 1.0;
        double term_13 = 1.0;
        long n_14 = 1;
        while ((n_14 < 10)) {
            term_13 = ((term_13 * x_11) / Convert.ToDouble(n_14));
            sum_12 = (sum_12 + term_13);
            n_14 = (n_14 + 1);
        };
        return sum_12;
    }

    public static double ln(double x_15) {
        double t_16 = ((x_15 - 1.0) / (x_15 + 1.0));
        double term_17 = t_16;
        double sum_18 = 0.0;
        long n_19 = 1;
        while ((n_19 <= 19)) {
            sum_18 = (sum_18 + (term_17 / Convert.ToDouble(n_19)));
            term_17 = ((term_17 * t_16) * t_16);
            n_19 = (n_19 + 2);
        };
        return (2.0 * sum_18);
    }

    public static double log10(double x_20) {
        return (Program.ln(x_20) / Program.ln(10.0));
    }

    public static double sqrtApprox(double x_21) {
        if ((x_21 <= 0.0)) {
            return 0.0;
        };
        double guess_22 = x_21;
        long i_23 = 0;
        while ((i_23 < 10)) {
            guess_22 = ((guess_22 + (x_21 / guess_22)) / 2.0);
            i_23 = (i_23 + 1);
        };
        return guess_22;
    }

    public static double absf(double x_24) {
        if ((x_24 < 0.0)) {
            return -x_24;
        };
        return x_24;
    }

    public static double[] normalize(double[] audio_25) {
        double max_val_26 = 0.0;
        long i_27 = 0;
        while ((i_27 < audio_25.Length)) {
            double v_28 = Program.absf(_idx(audio_25, i_27));
            if ((v_28 > max_val_26)) {
                max_val_26 = v_28;
            }
            i_27 = (i_27 + 1);
        };
        double[] res_29 = new double[]{};
        i_27 = 0;
        while ((i_27 < audio_25.Length)) {
            res_29 = (Enumerable.ToArray(Enumerable.Append<double>(res_29, (_idx(audio_25, i_27) / max_val_26))));
            i_27 = (i_27 + 1);
        };
        return res_29;
    }

    public static double[] dft(double[] frame_30, long bins_31) {
        long N_32 = frame_30.Length;
        double[] spec_33 = new double[]{};
        long k_34 = 0;
        while ((k_34 < bins_31)) {
            double real_35 = 0.0;
            double imag_36 = 0.0;
            long n_37 = 0;
            while ((n_37 < N_32)) {
                double angle_38 = ((((-2.0 * PI_0) * Convert.ToDouble(k_34)) * Convert.ToDouble(n_37)) / Convert.ToDouble(N_32));
                real_35 = (real_35 + (_idx(frame_30, n_37) * Program.cosApprox(angle_38)));
                imag_36 = (imag_36 + (_idx(frame_30, n_37) * Program.sinApprox(angle_38)));
                n_37 = (n_37 + 1);
            }
            spec_33 = (Enumerable.ToArray(Enumerable.Append<double>(spec_33, ((real_35 * real_35) + (imag_36 * imag_36)))));
            k_34 = (k_34 + 1);
        };
        return spec_33;
    }

    public static double[][] triangular_filters(long bins_39, long spectrum_size_40) {
        double[][] filters_41 = new double[][]{};
        long b_42 = 0;
        while ((b_42 < bins_39)) {
            long center_43 = (((b_42 + 1) * spectrum_size_40) / (bins_39 + 1));
            double[] filt_44 = new double[]{};
            long i_45 = 0;
            while ((i_45 < spectrum_size_40)) {
                double v_46 = 0.0;
                if ((i_45 <= center_43)) {
                    v_46 = (Convert.ToDouble(i_45) / Convert.ToDouble(center_43));
                } else {
                    v_46 = (Convert.ToDouble((spectrum_size_40 - i_45)) / Convert.ToDouble((spectrum_size_40 - center_43)));
                }
                filt_44 = (Enumerable.ToArray(Enumerable.Append<double>(filt_44, v_46)));
                i_45 = (i_45 + 1);
            }
            filters_41 = (Enumerable.ToArray(Enumerable.Append<double[]>(filters_41, filt_44)));
            b_42 = (b_42 + 1);
        };
        return filters_41;
    }

    public static double[] dot(double[][] mat_47, double[] vec_48) {
        double[] res_49 = new double[]{};
        long i_50 = 0;
        while ((i_50 < mat_47.Length)) {
            double sum_51 = 0.0;
            long j_52 = 0;
            while ((j_52 < vec_48.Length)) {
                sum_51 = (sum_51 + (_idx(_idx(mat_47, i_50), j_52) * _idx(vec_48, j_52)));
                j_52 = (j_52 + 1);
            }
            res_49 = (Enumerable.ToArray(Enumerable.Append<double>(res_49, sum_51)));
            i_50 = (i_50 + 1);
        };
        return res_49;
    }

    public static double[][] discrete_cosine_transform(long dct_filter_num_53, long filter_num_54) {
        double[][] basis_55 = new double[][]{};
        long i_56 = 0;
        while ((i_56 < dct_filter_num_53)) {
            double[] row_57 = new double[]{};
            long j_58 = 0;
            while ((j_58 < filter_num_54)) {
                if ((i_56 == 0)) {
                    row_57 = (Enumerable.ToArray(Enumerable.Append<double>(row_57, (1.0 / Program.sqrtApprox(Convert.ToDouble(filter_num_54))))));
                } else {
                    double angle_59 = (((Convert.ToDouble(((2 * j_58) + 1)) * Convert.ToDouble(i_56)) * PI_0) / (2.0 * Convert.ToDouble(filter_num_54)));
                    row_57 = (Enumerable.ToArray(Enumerable.Append<double>(row_57, (Program.cosApprox(angle_59) * Program.sqrtApprox((2.0 / Convert.ToDouble(filter_num_54)))))));
                }
                j_58 = (j_58 + 1);
            }
            basis_55 = (Enumerable.ToArray(Enumerable.Append<double[]>(basis_55, row_57)));
            i_56 = (i_56 + 1);
        };
        return basis_55;
    }

    public static double[] mfcc(double[] audio_60, long bins_61, long dct_num_62) {
        double[] norm_63 = Program.normalize(audio_60);
        double[] spec_64 = Program.dft(norm_63, (bins_61 + 2));
        double[][] filters_65 = Program.triangular_filters(bins_61, spec_64.Length);
        double[] energies_66 = Program.dot(filters_65, spec_64);
        double[] logfb_67 = new double[]{};
        long i_68 = 0;
        while ((i_68 < energies_66.Length)) {
            logfb_67 = (Enumerable.ToArray(Enumerable.Append<double>(logfb_67, (10.0 * Program.log10((_idx(energies_66, i_68) + 1e-10))))));
            i_68 = (i_68 + 1);
        };
        double[][] dct_basis_69 = Program.discrete_cosine_transform(dct_num_62, bins_61);
        double[] res_70 = Program.dot(dct_basis_69, logfb_67);
        if ((res_70.Length == 0)) {
            res_70 = new double[]{0.0, 0.0, 0.0};
        };
        return res_70;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((n_74 < size_72)) {
                double t_75 = (Convert.ToDouble(n_74) / Convert.ToDouble(sample_rate_71));
                audio_73 = (Enumerable.ToArray(Enumerable.Append<double>(audio_73, Program.sinApprox((((2.0 * PI_0) * 440.0) * t_75)))));
                n_74 = (n_74 + 1);
            }
            double[] coeffs_76 = Program.mfcc(audio_73, 5, 3);
            foreach (double c_77 in coeffs_76) {
                Console.WriteLine(Program._fmtTop(c_77));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
