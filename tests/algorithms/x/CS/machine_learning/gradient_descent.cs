// Generated by Mochi 0.10.67 (commit c7612b9c83) on 2025-08-16 19:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class DataPoint {
    public double[] x;
    public double y;
    public override string ToString() => $"DataPoint {{x = {x}, y = {y.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static DataPoint[] train_data_38 = new DataPoint[]{new DataPoint{x = new double[]{5.0, 2.0, 3.0}, y = 15.0}, new DataPoint{x = new double[]{6.0, 5.0, 9.0}, y = 25.0}, new DataPoint{x = new double[]{11.0, 12.0, 13.0}, y = 41.0}, new DataPoint{x = new double[]{1.0, 1.0, 1.0}, y = 8.0}, new DataPoint{x = new double[]{11.0, 12.0, 13.0}, y = 41.0}};
    static DataPoint[] test_data_39 = new DataPoint[]{new DataPoint{x = new double[]{515.0, 22.0, 13.0}, y = 555.0}, new DataPoint{x = new double[]{61.0, 35.0, 49.0}, y = 150.0}};
    static double[] parameter_vector_40 = new double[]{2.0, 4.0, 1.0, 5.0};
    public static double absf(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    public static double hypothesis_value(double[] input_1, double[] params_2) {
        double value_3 = _idx(params_2, 0);
        long i_4 = 0;
        while ((i_4 < input_1.Length)) {
            value_3 = (value_3 + (_idx(input_1, i_4) * _idx(params_2, (i_4 + 1))));
            i_4 = (i_4 + 1);
        };
        return value_3;
    }

    public static double calc_error(DataPoint dp_5, double[] params_6) {
        return (Program.hypothesis_value(dp_5.x, params_6) - dp_5.y);
    }

    public static double summation_of_cost_derivative(long index_7, double[] params_8, DataPoint[] data_9) {
        double sum_10 = 0.0;
        long i_11 = 0;
        while ((i_11 < data_9.Length)) {
            DataPoint dp_12 = _idx(data_9, i_11);
            double e_13 = Program.calc_error(dp_12, params_8);
            if ((index_7 == -1)) {
                sum_10 = (sum_10 + e_13);
            } else {
                sum_10 = (sum_10 + (e_13 * _idx(dp_12.x, index_7)));
            }
            i_11 = (i_11 + 1);
        };
        return sum_10;
    }

    public static double get_cost_derivative(long index_14, double[] params_15, DataPoint[] data_16) {
        return (Program.summation_of_cost_derivative(index_14, params_15, data_16) / Convert.ToDouble(data_16.Length));
    }

    public static bool allclose(double[] a_17, double[] b_18, double atol_19, double rtol_20) {
        long i_21 = 0;
        while ((i_21 < a_17.Length)) {
            double diff_22 = Program.absf((_idx(a_17, i_21) - _idx(b_18, i_21)));
            double limit_23 = (atol_19 + (rtol_20 * Program.absf(_idx(b_18, i_21))));
            if ((diff_22 > limit_23)) {
                return false;
            }
            i_21 = (i_21 + 1);
        };
        return true;
    }

    public static double[] run_gradient_descent(DataPoint[] train_data_24, double[] initial_params_25) {
        double learning_rate_26 = 0.0089999999999999993;
        double absolute_error_limit_27 = 1.9999999999999999e-06;
        double relative_error_limit_28 = 0.0;
        long j_29 = 0;
        double[] params_30 = initial_params_25;
        while (true) {
            j_29 = (j_29 + 1);
            double[] temp_31 = new double[]{};
            long i_32 = 0;
            while ((i_32 < params_30.Length)) {
                double deriv_33 = Program.get_cost_derivative((i_32 - 1), params_30, train_data_24);
                temp_31 = ((Func<double[]>)(() => { var _tmp = temp_31.Cast<double>().ToList(); _tmp.Add((_idx(params_30, i_32) - (learning_rate_26 * deriv_33))); return _tmp.ToArray(); }))();
                i_32 = (i_32 + 1);
            }
            if (Program.allclose(params_30, temp_31, absolute_error_limit_27, relative_error_limit_28)) {
                Console.WriteLine(Program._fmtTop(("Number of iterations:" + _fmtStr(j_29))));
                break;
            }
            params_30 = temp_31;
        };
        return params_30;
    }

    public static void test_gradient_descent(DataPoint[] test_data_34, double[] params_35) {
        long i_36 = 0;
        while ((i_36 < test_data_34.Length)) {
            DataPoint dp_37 = _idx(test_data_34, i_36);
            Console.WriteLine(Program._fmtTop(("Actual output value:" + _fmtStr(dp_37.y))));
            Console.WriteLine(Program._fmtTop(("Hypothesis output:" + _fmtStr(Program.hypothesis_value(dp_37.x, params_35)))));
            i_36 = (i_36 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            parameter_vector_40 = Program.run_gradient_descent(train_data_38, parameter_vector_40);
            Console.WriteLine(Program._fmtTop("\nTesting gradient descent for a linear hypothesis function.\n"));
            Program.test_gradient_descent(test_data_39, parameter_vector_40);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
