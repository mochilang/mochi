// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] X_5 = new double[][]{new double[]{0.0, 0.0}, new double[]{1.0, 1.0}, new double[]{1.0, 0.0}, new double[]{0.0, 1.0}};
    static double[] Y_6 = new double[]{0.0, 1.0, 0.0, 0.0};
    static double[][] test_data_7 = new double[][]{new double[]{0.0, 0.0}, new double[]{0.0, 1.0}, new double[]{1.0, 1.0}};
    static double[][] w1_8 = new double[][]{new double[]{0.5, -0.5}, new double[]{0.5, 0.5}};
    static double[] b1_9 = new double[]{0.0, 0.0};
    static double[] w2_10 = new double[]{0.5, -0.5};
    static double b2_11 = 0.0;
    public static double exp_taylor(double x_0) {
        double term_1 = 1.0;
        double sum_2 = 1.0;
        double i_3 = 1.0;
        while ((i_3 < 20.0)) {
            term_1 = ((term_1 * x_0) / i_3);
            sum_2 = (sum_2 + term_1);
            i_3 = (i_3 + 1.0);
        };
        return sum_2;
    }

    public static double sigmoid(double x_4) {
        return (1.0 / (1.0 + Program.exp_taylor(-x_4)));
    }

    public static void train(long epochs_12, double lr_13) {
        long e_14 = 0;
        while ((e_14 < epochs_12)) {
            long i_15 = 0;
            while ((i_15 < X_5.Length)) {
                double x0_16 = X_5[(int)(i_15)][(int)(0)];
                double x1_17 = X_5[(int)(i_15)][(int)(1)];
                double target_18 = Y_6[(int)(i_15)];
                double z1_19 = (((w1_8[(int)(0)][(int)(0)] * x0_16) + (w1_8[(int)(1)][(int)(0)] * x1_17)) + b1_9[(int)(0)]);
                double z2_20 = (((w1_8[(int)(0)][(int)(1)] * x0_16) + (w1_8[(int)(1)][(int)(1)] * x1_17)) + b1_9[(int)(1)]);
                double h1_21 = Program.sigmoid(z1_19);
                double h2_22 = Program.sigmoid(z2_20);
                double z3_23 = (((w2_10[(int)(0)] * h1_21) + (w2_10[(int)(1)] * h2_22)) + b2_11);
                double out_24 = Program.sigmoid(z3_23);
                double error_25 = (out_24 - target_18);
                double d1_26 = (((h1_21 * (1.0 - h1_21)) * w2_10[(int)(0)]) * error_25);
                double d2_27 = (((h2_22 * (1.0 - h2_22)) * w2_10[(int)(1)]) * error_25);
                w2_10[0] = (w2_10[(int)(0)] - ((lr_13 * error_25) * h1_21));
                w2_10[1] = (w2_10[(int)(1)] - ((lr_13 * error_25) * h2_22));
                b2_11 = (b2_11 - (lr_13 * error_25));
                w1_8[(int)(0)][0] = (w1_8[(int)(0)][(int)(0)] - ((lr_13 * d1_26) * x0_16));
                w1_8[(int)(1)][0] = (w1_8[(int)(1)][(int)(0)] - ((lr_13 * d1_26) * x1_17));
                b1_9[0] = (b1_9[(int)(0)] - (lr_13 * d1_26));
                w1_8[(int)(0)][1] = (w1_8[(int)(0)][(int)(1)] - ((lr_13 * d2_27) * x0_16));
                w1_8[(int)(1)][1] = (w1_8[(int)(1)][(int)(1)] - ((lr_13 * d2_27) * x1_17));
                b1_9[1] = (b1_9[(int)(1)] - (lr_13 * d2_27));
                i_15 = (i_15 + 1);
            }
            e_14 = (e_14 + 1);
        };
    }

    public static long[] predict(double[][] samples_28) {
        long[] preds_29 = new long[]{};
        long i_30 = 0;
        while ((i_30 < samples_28.Length)) {
            double x0_31 = samples_28[(int)(i_30)][(int)(0)];
            double x1_32 = samples_28[(int)(i_30)][(int)(1)];
            double z1_33 = (((w1_8[(int)(0)][(int)(0)] * x0_31) + (w1_8[(int)(1)][(int)(0)] * x1_32)) + b1_9[(int)(0)]);
            double z2_34 = (((w1_8[(int)(0)][(int)(1)] * x0_31) + (w1_8[(int)(1)][(int)(1)] * x1_32)) + b1_9[(int)(1)]);
            double h1_35 = Program.sigmoid(z1_33);
            double h2_36 = Program.sigmoid(z2_34);
            double z3_37 = (((w2_10[(int)(0)] * h1_35) + (w2_10[(int)(1)] * h2_36)) + b2_11);
            double out_38 = Program.sigmoid(z3_37);
            long label_39 = 0;
            if ((out_38 >= 0.5)) {
                label_39 = 1;
            }
            preds_29 = (Enumerable.ToArray(Enumerable.Append<long>(preds_29, label_39)));
            i_30 = (i_30 + 1);
        };
        return preds_29;
    }

    public static long[] wrapper(long[] y_40) {
        return y_40;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.train(4000, 0.5);
            long[] preds_41 = Program.wrapper(Program.predict(test_data_7));
            Console.WriteLine(Program._fmtTop(_fmtStr(preds_41)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
