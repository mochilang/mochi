// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static long seed_2 = 1;
    public static long rand() {
        seed_2 = _mod(((seed_2 * 1103515245) + 12345), 2147483648L);
        return seed_2;
    }

    public static double random() {
        return (Convert.ToDouble(Program.rand()) / 2.147483648e+09);
    }

    public static double _mod(double x_3, double m_4) {
        return (x_3 - (Convert.ToDouble(Convert.ToInt64((x_3 / m_4))) * m_4));
    }

    public static double cos(double x_5) {
        double y_6 = (Program._mod((x_5 + PI_0), TWO_PI_1) - PI_0);
        double y2_7 = (y_6 * y_6);
        double y4_8 = (y2_7 * y2_7);
        double y6_9 = (y4_8 * y2_7);
        return (((1.0 - (y2_7 / 2.0)) + (y4_8 / 24.0)) - (y6_9 / 720.0));
    }

    public static double sqrtApprox(double x_10) {
        if ((x_10 <= 0.0)) {
            return 0.0;
        };
        double guess_11 = x_10;
        long i_12 = 0;
        while ((i_12 < 10)) {
            guess_11 = ((guess_11 + (x_10 / guess_11)) / 2.0);
            i_12 = (i_12 + 1);
        };
        return guess_11;
    }

    public static double ln(double x_13) {
        double t_14 = ((x_13 - 1.0) / (x_13 + 1.0));
        double term_15 = t_14;
        double sum_16 = 0.0;
        long n_17 = 1;
        while ((n_17 <= 19)) {
            sum_16 = (sum_16 + (term_15 / Convert.ToDouble(n_17)));
            term_15 = ((term_15 * t_14) * t_14);
            n_17 = (n_17 + 2);
        };
        return (2.0 * sum_16);
    }

    public static double[] gaussian_distribution(double mean_18, double std_dev_19, long instance_count_20) {
        double[] res_21 = new double[]{};
        long i_22 = 0;
        while ((i_22 < instance_count_20)) {
            double u1_23 = Program.random();
            double u2_24 = Program.random();
            double r_25 = Program.sqrtApprox((-2.0 * Program.ln(u1_23)));
            double theta_26 = (TWO_PI_1 * u2_24);
            double z_27 = (r_25 * Program.cos(theta_26));
            res_21 = (Enumerable.ToArray(Enumerable.Append<double>(res_21, (mean_18 + (z_27 * std_dev_19)))));
            i_22 = (i_22 + 1);
        };
        return res_21;
    }

    public static long[] y_generator(long class_count_28, long[] instance_count_29) {
        long[] res_30 = new long[]{};
        long k_31 = 0;
        while ((k_31 < class_count_28)) {
            long i_32 = 0;
            while ((i_32 < instance_count_29[(int)(k_31)])) {
                res_30 = (Enumerable.ToArray(Enumerable.Append<long>(res_30, k_31)));
                i_32 = (i_32 + 1);
            }
            k_31 = (k_31 + 1);
        };
        return res_30;
    }

    public static double calculate_mean(long instance_count_33, double[] items_34) {
        double total_35 = 0.0;
        long i_36 = 0;
        while ((i_36 < instance_count_33)) {
            total_35 = (total_35 + items_34[(int)(i_36)]);
            i_36 = (i_36 + 1);
        };
        return (total_35 / Convert.ToDouble(instance_count_33));
    }

    public static double calculate_probabilities(long instance_count_37, long total_count_38) {
        return (Convert.ToDouble(instance_count_37) / Convert.ToDouble(total_count_38));
    }

    public static double calculate_variance(double[][] items_39, double[] means_40, long total_count_41) {
        double[] squared_diff_42 = new double[]{};
        long i_43 = 0;
        while ((i_43 < items_39.Length)) {
            long j_44 = 0;
            while ((j_44 < items_39[(int)(i_43)].Length)) {
                double diff_45 = (items_39[(int)(i_43)][(int)(j_44)] - means_40[(int)(i_43)]);
                squared_diff_42 = (Enumerable.ToArray(Enumerable.Append<double>(squared_diff_42, (diff_45 * diff_45))));
                j_44 = (j_44 + 1);
            }
            i_43 = (i_43 + 1);
        };
        double sum_sq_46 = 0.0;
        long k_47 = 0;
        while ((k_47 < squared_diff_42.Length)) {
            sum_sq_46 = (sum_sq_46 + squared_diff_42[(int)(k_47)]);
            k_47 = (k_47 + 1);
        };
        long n_classes_48 = means_40.Length;
        return ((1.0 / Convert.ToDouble((total_count_41 - n_classes_48))) * sum_sq_46);
    }

    public static long[] predict_y_values(double[][] x_items_49, double[] means_50, double variance_51, double[] probabilities_52) {
        long[] results_53 = new long[]{};
        long i_54 = 0;
        while ((i_54 < x_items_49.Length)) {
            long j_55 = 0;
            while ((j_55 < x_items_49[(int)(i_54)].Length)) {
                double[] temp_56 = new double[]{};
                long k_57 = 0;
                while ((k_57 < x_items_49.Length)) {
                    double discr_58 = (((x_items_49[(int)(i_54)][(int)(j_55)] * (means_50[(int)(k_57)] / variance_51)) - ((means_50[(int)(k_57)] * means_50[(int)(k_57)]) / (2.0 * variance_51))) + Program.ln(probabilities_52[(int)(k_57)]));
                    temp_56 = (Enumerable.ToArray(Enumerable.Append<double>(temp_56, discr_58)));
                    k_57 = (k_57 + 1);
                }
                long max_idx_59 = 0;
                double max_val_60 = temp_56[(int)(0)];
                long t_61 = 1;
                while ((t_61 < temp_56.Length)) {
                    if ((temp_56[(int)(t_61)] > max_val_60)) {
                        max_val_60 = temp_56[(int)(t_61)];
                        max_idx_59 = t_61;
                    }
                    t_61 = (t_61 + 1);
                }
                results_53 = (Enumerable.ToArray(Enumerable.Append<long>(results_53, max_idx_59)));
                j_55 = (j_55 + 1);
            }
            i_54 = (i_54 + 1);
        };
        return results_53;
    }

    public static double accuracy(long[] actual_y_62, long[] predicted_y_63) {
        long correct_64 = 0;
        long i_65 = 0;
        while ((i_65 < actual_y_62.Length)) {
            if ((actual_y_62[(int)(i_65)] == predicted_y_63[(int)(i_65)])) {
                correct_64 = (correct_64 + 1);
            }
            i_65 = (i_65 + 1);
        };
        return ((Convert.ToDouble(correct_64) / Convert.ToDouble(actual_y_62.Length)) * 100.0);
    }

    public static void main() {
        seed_2 = 1;
        long[] counts_66 = new long[]{20, 20, 20};
        double[] means_67 = new double[]{5.0, 10.0, 15.0};
        double std_dev_68 = 1.0;
        double[][] x_69 = new double[][]{};
        long i_70 = 0;
        while ((i_70 < counts_66.Length)) {
            x_69 = (Enumerable.ToArray(Enumerable.Append<double[]>(x_69, Program.gaussian_distribution(means_67[(int)(i_70)], std_dev_68, counts_66[(int)(i_70)]))));
            i_70 = (i_70 + 1);
        };
        long[] y_71 = Program.y_generator(counts_66.Length, counts_66);
        double[] actual_means_72 = new double[]{};
        i_70 = 0;
        while ((i_70 < counts_66.Length)) {
            actual_means_72 = (Enumerable.ToArray(Enumerable.Append<double>(actual_means_72, Program.calculate_mean(counts_66[(int)(i_70)], x_69[(int)(i_70)]))));
            i_70 = (i_70 + 1);
        };
        long total_count_73 = 0;
        i_70 = 0;
        while ((i_70 < counts_66.Length)) {
            total_count_73 = (total_count_73 + counts_66[(int)(i_70)]);
            i_70 = (i_70 + 1);
        };
        double[] probabilities_74 = new double[]{};
        i_70 = 0;
        while ((i_70 < counts_66.Length)) {
            probabilities_74 = (Enumerable.ToArray(Enumerable.Append<double>(probabilities_74, Program.calculate_probabilities(counts_66[(int)(i_70)], total_count_73))));
            i_70 = (i_70 + 1);
        };
        double variance_75 = Program.calculate_variance(x_69, actual_means_72, total_count_73);
        long[] predicted_76 = Program.predict_y_values(x_69, actual_means_72, variance_75, probabilities_74);
        Console.WriteLine(Program._fmtTop(predicted_76));
        Console.WriteLine(Program._fmtTop(Program.accuracy(y_71, predicted_76)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
