// Generated by Mochi 0.10.66 (commit a542f729f9) on 2025-08-16 12:43 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static object make_node(string name_0, long count_1, object parent_2) {
        return (object)new Dictionary<string, object>{{"name", name_0}, {"count", count_1}, {"parent", parent_2}, {"children", new Dictionary<object, object>{}}, {"node_link", null}};
    }

    public static void update_header(object node_to_test_3, object target_node_4) {
        object current_5 = node_to_test_3;
        while ((((dynamic)current_5)["node_link"] != null)) {
            current_5 = ((dynamic)current_5)["node_link"];
        };
        ((dynamic)current_5)["node_link"] = target_node_4;
    }

    public static void update_tree(string[] items_6, object in_tree_7, object header_table_8, long count_9) {
        string first_10 = _idx(items_6, 0);
        var children_11 = ((dynamic)in_tree_7)["children"];
        if ((children_11.ContainsKey(first_10))) {
            var child_12 = ((dynamic)children_11)[first_10];
            ((dynamic)child_12)["count"] = (((dynamic)(((dynamic)child_12)["count"])) + ((dynamic)(count_9)));
            ((dynamic)children_11)[first_10] = child_12;
            ((dynamic)in_tree_7)["children"] = children_11;
        } else {
            object new_node_13 = Program.make_node(first_10, count_9, (object)in_tree_7);
            ((dynamic)children_11)[first_10] = new_node_13;
            ((dynamic)in_tree_7)["children"] = children_11;
            var entry_14 = ((dynamic)header_table_8)[first_10];
            if ((((dynamic)entry_14)["node"] == null)) {
                ((dynamic)entry_14)["node"] = new_node_13;
            } else {
                Program.update_header(((dynamic)entry_14)["node"], (object)new_node_13);
            }
            ((dynamic)header_table_8)[first_10] = entry_14;
        };
        if ((items_6.Length > 1)) {
            string[] rest_15 = _slice<string>(items_6, 1, items_6.Length);
            Program.update_tree(rest_15, ((dynamic)children_11)[first_10], (object)header_table_8, count_9);
        };
    }

    public static string[] sort_items(string[] items_16, object header_table_17) {
        string[] arr_18 = items_16;
        long i_19 = 0;
        while ((i_19 < arr_18.Length)) {
            long j_20 = (i_19 + 1);
            while ((j_20 < arr_18.Length)) {
                if ((Convert.ToDouble(((dynamic)((dynamic)header_table_17)[_idx(arr_18, i_19)])["count"]) < Convert.ToDouble(((dynamic)((dynamic)header_table_17)[_idx(arr_18, j_20)])["count"]))) {
                    string tmp_21 = _idx(arr_18, i_19);
                    arr_18[(int)(i_19)] = _idx(arr_18, j_20);
                    arr_18[(int)(j_20)] = tmp_21;
                }
                j_20 = (j_20 + 1);
            }
            i_19 = (i_19 + 1);
        };
        return arr_18;
    }

    public static object create_tree(string[][] data_set_22, long min_sup_23) {
        Dictionary<object, object> counts_24 = new Dictionary<object, object>{};
        long i_25 = 0;
        while ((i_25 < data_set_22.Length)) {
            string[] trans_26 = _idx(data_set_22, i_25);
            long j_27 = 0;
            while ((j_27 < trans_26.Length)) {
                string item_28 = _idx(trans_26, j_27);
                if ((counts_24.ContainsKey(item_28))) {
                    counts_24[item_28] = (((dynamic)((counts_24.ContainsKey(item_28) ? counts_24[item_28] : null))) + ((dynamic)(1)));
                } else {
                    counts_24[item_28] = 1;
                }
                j_27 = (j_27 + 1);
            }
            i_25 = (i_25 + 1);
        };
        Dictionary<object, object> header_table_29 = new Dictionary<object, object>{};
        foreach (object k_30 in counts_24.Keys) {
            object cnt_31 = (counts_24.ContainsKey(k_30) ? counts_24[k_30] : null);
            if ((Convert.ToDouble(cnt_31) >= Convert.ToDouble(min_sup_23))) {
                header_table_29[k_30] = new Dictionary<string, object>{{"count", cnt_31}, {"node", null}};
            }
        };
        object[] freq_items_32 = new object[]{};
        foreach (object k_33 in header_table_29.Keys) {
            freq_items_32 = ((Func<object[]>)(() => { var _tmp = freq_items_32.Cast<object>().ToList(); _tmp.Add((object)k_33); return _tmp.ToArray(); }))();
        };
        if ((freq_items_32.Length == 0)) {
            return (object)new Dictionary<string, object>{{"tree", Program.make_node("Null Set", 1, (object)null)}, {"header", new Dictionary<object, object>{}}};
        };
        object fp_tree_34 = Program.make_node("Null Set", 1, (object)null);
        i_25 = 0;
        while ((i_25 < data_set_22.Length)) {
            string[] tran_35 = _idx(data_set_22, i_25);
            string[] local_items_36 = new string[]{};
            long j_37 = 0;
            while ((j_37 < tran_35.Length)) {
                string item_38 = _idx(tran_35, j_37);
                if ((header_table_29.ContainsKey(item_38))) {
                    local_items_36 = ((Func<string[]>)(() => { var _tmp = local_items_36.Cast<string>().ToList(); _tmp.Add(item_38); return _tmp.ToArray(); }))();
                }
                j_37 = (j_37 + 1);
            }
            if ((local_items_36.Length > 0)) {
                local_items_36 = Program.sort_items(Enumerable.ToArray(local_items_36.Cast<string>()), header_table_29);
                Program.update_tree(local_items_36, (object)fp_tree_34, header_table_29, 1);
            }
            i_25 = (i_25 + 1);
        };
        return (object)new Dictionary<string, object>{{"tree", fp_tree_34}, {"header", header_table_29}};
    }

    public static string[] ascend_tree(object leaf_node_39, string[] path_40) {
        string[] prefix_41 = path_40;
        if ((((dynamic)leaf_node_39)["parent"] != null)) {
            prefix_41 = ((Func<string[]>)(() => { var _tmp = prefix_41.Cast<string>().ToList(); _tmp.Add(((dynamic)leaf_node_39)["name"]); return _tmp.ToArray(); }))();
            prefix_41 = Program.ascend_tree(((dynamic)leaf_node_39)["parent"], prefix_41);
        } else {
            prefix_41 = ((Func<string[]>)(() => { var _tmp = prefix_41.Cast<string>().ToList(); _tmp.Add(((dynamic)leaf_node_39)["name"]); return _tmp.ToArray(); }))();
        };
        return prefix_41;
    }

    public static object[] find_prefix_path(string base_pat_42, object tree_node_43) {
        object[] cond_pats_44 = new object[]{};
        object node_45 = tree_node_43;
        while ((node_45 != null)) {
            string[] prefix_46 = Program.ascend_tree((object)node_45, new string[]{});
            if ((prefix_46.Length > 1)) {
                string[] items_47 = _slice<string>(prefix_46, 1, prefix_46.Length);
                cond_pats_44 = ((Func<Dictionary<string, object>[]>)(() => { var _tmp = cond_pats_44.Cast<Dictionary<string, object>>().ToList(); _tmp.Add(new Dictionary<string, object>{{"items", items_47}, {"count", ((dynamic)node_45)["count"]}}); return _tmp.ToArray(); }))();
            }
            node_45 = ((dynamic)node_45)["node_link"];
        };
        return cond_pats_44;
    }

    public static string[][] mine_tree(object in_tree_48, object header_table_49, long min_sup_50, string[] pre_fix_51, string[][] freq_item_list_52) {
        string[][] freq_list_53 = freq_item_list_52;
        object[] items_54 = new object[]{};
        foreach (var k_55 in ((dynamic)(header_table_49)).Keys) {
            items_54 = ((Func<object[]>)(() => { var _tmp = items_54.Cast<object>().ToList(); _tmp.Add(k_55); return _tmp.ToArray(); }))();
        };
        object[] sorted_items_56 = items_54;
        long i_57 = 0;
        while ((i_57 < sorted_items_56.Length)) {
            long j_58 = (i_57 + 1);
            while ((j_58 < sorted_items_56.Length)) {
                if ((Convert.ToDouble(((dynamic)((dynamic)header_table_49)[((dynamic)sorted_items_56)[i_57]])["count"]) > Convert.ToDouble(((dynamic)((dynamic)header_table_49)[((dynamic)sorted_items_56)[j_58]])["count"]))) {
                    object tmp_59 = ((dynamic)sorted_items_56)[i_57];
                    sorted_items_56[(int)(i_57)] = ((dynamic)sorted_items_56)[j_58];
                    sorted_items_56[(int)(j_58)] = tmp_59;
                }
                j_58 = (j_58 + 1);
            }
            i_57 = (i_57 + 1);
        };
        long idx_60 = 0;
        while ((idx_60 < sorted_items_56.Length)) {
            object base_pat_61 = ((dynamic)sorted_items_56)[idx_60];
            string[] new_freq_62 = pre_fix_51;
            new_freq_62 = ((Func<string[]>)(() => { var _tmp = new_freq_62.Cast<string>().ToList(); _tmp.Add((string)(object)base_pat_61); return _tmp.ToArray(); }))();
            freq_list_53 = ((Func<string[][]>)(() => { var _tmp = freq_list_53.Cast<string[]>().ToList(); _tmp.Add(new_freq_62); return _tmp.ToArray(); }))();
            object[] cond_pats_63 = Program.find_prefix_path(Convert.ToString(base_pat_61), ((dynamic)((dynamic)header_table_49)[base_pat_61])["node"]);
            object[] cond_dataset_64 = new object[]{};
            long p_65 = 0;
            while ((p_65 < cond_pats_63.Length)) {
                object pat_66 = ((dynamic)cond_pats_63)[p_65];
                long r_67 = 0;
                while ((Convert.ToDouble(r_67) < Convert.ToDouble(((dynamic)pat_66)["count"]))) {
                    cond_dataset_64 = ((Func<object[]>)(() => { var _tmp = cond_dataset_64.Cast<object>().ToList(); _tmp.Add(((dynamic)pat_66)["items"]); return _tmp.ToArray(); }))();
                    r_67 = (r_67 + 1);
                }
                p_65 = (p_65 + 1);
            }
            object res2_68 = Program.create_tree(Enumerable.ToArray(cond_dataset_64.Cast<string[]>()), min_sup_50);
            var my_tree_69 = ((dynamic)res2_68)["tree"];
            var my_head_70 = ((dynamic)res2_68)["header"];
            if ((_len(my_head_70) > 0)) {
                freq_list_53 = Program.mine_tree(my_tree_69, my_head_70, min_sup_50, new_freq_62, freq_list_53);
            }
            idx_60 = (idx_60 + 1);
        };
        return freq_list_53;
    }

    public static string list_to_string(string[] xs_71) {
        string s_72 = "[";
        long i_73 = 0;
        while ((i_73 < xs_71.Length)) {
            s_72 = (s_72 + _idx(xs_71, i_73));
            if ((i_73 < (xs_71.Length - 1))) {
                s_72 = (s_72 + ", ");
            }
            i_73 = (i_73 + 1);
        };
        return (s_72 + "]");
    }

    public static void main() {
        string[][] data_set_74 = new string[][]{new string[]{"bread", "milk", "cheese"}, new string[]{"bread", "milk"}, new string[]{"bread", "diapers"}, new string[]{"bread", "milk", "diapers"}, new string[]{"milk", "diapers"}, new string[]{"milk", "cheese"}, new string[]{"diapers", "cheese"}, new string[]{"bread", "milk", "cheese", "diapers"}};
        object res_75 = Program.create_tree(data_set_74, 3);
        var fp_tree_76 = ((dynamic)res_75)["tree"];
        var header_table_77 = ((dynamic)res_75)["header"];
        string[][] freq_items_78 = new string[][]{};
        freq_items_78 = Program.mine_tree(fp_tree_76, header_table_77, 3, new string[]{}, Enumerable.ToArray(freq_items_78.Cast<string[]>()));
        Console.WriteLine(Program._fmtTop(data_set_74.Length));
        Console.WriteLine(Program._fmtTop(_len(header_table_77)));
        long i_79 = 0;
        while ((i_79 < freq_items_78.Length)) {
            Console.WriteLine(Program._fmtTop(Program.list_to_string(_idx(freq_items_78, i_79))));
            i_79 = (i_79 + 1);
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
