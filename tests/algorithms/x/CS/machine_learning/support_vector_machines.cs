// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SVC {
    public double[] weights;
    public double bias;
    public double lr;
    public double lambda;
    public long epochs;
    public override string ToString() => $"SVC {{weights = {weights}, bias = {bias.ToString("0.0")}, lr = {lr.ToString("0.0")}, lambda = {lambda.ToString("0.0")}, epochs = {epochs}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] xs_24 = new double[][]{new double[]{0.0, 1.0}, new double[]{0.0, 2.0}, new double[]{1.0, 1.0}, new double[]{1.0, 2.0}};
    static long[] ys_25 = new long[]{1, 1, -1, -1};
    static SVC base_26 = Program.new_svc(0.01, 0.01, 1000);
    static SVC model_27 = Program.fit(base_26, xs_24, ys_25);
    public static double dot(double[] a_0, double[] b_1) {
        double s_2 = 0.0;
        long i_3 = 0;
        while ((i_3 < a_0.Length)) {
            s_2 = (s_2 + (_idx(a_0, i_3) * _idx(b_1, i_3)));
            i_3 = (i_3 + 1);
        };
        return s_2;
    }

    public static SVC new_svc(double lr_4, double lambda_5, long epochs_6) {
        return new SVC{weights = new double[]{}, bias = 0.0, lr = lr_4, lambda = lambda_5, epochs = epochs_6};
    }

    public static SVC fit(SVC model_7, double[][] xs_8, long[] ys_9) {
        long n_features_10 = _idx(xs_8, 0).Length;
        double[] w_11 = new double[]{};
        long i_12 = 0;
        while ((i_12 < n_features_10)) {
            w_11 = (Enumerable.ToArray(Enumerable.Append<double>(w_11, 0.0)));
            i_12 = (i_12 + 1);
        };
        double b_13 = 0.0;
        long epoch_14 = 0;
        while ((epoch_14 < model_7.epochs)) {
            long j_15 = 0;
            while ((j_15 < xs_8.Length)) {
                double[] x_16 = _idx(xs_8, j_15);
                double y_17 = Convert.ToDouble(_idx(ys_9, j_15));
                double prod_18 = (Program.dot(w_11, x_16) + b_13);
                if (((y_17 * prod_18) < 1.0)) {
                    long k_19 = 0;
                    while ((k_19 < w_11.Length)) {
                        w_11[(int)(k_19)] = (_idx(w_11, k_19) + (model_7.lr * ((y_17 * _idx(x_16, k_19)) - ((2.0 * model_7.lambda) * _idx(w_11, k_19)))));
                        k_19 = (k_19 + 1);
                    }
                    b_13 = (b_13 + (model_7.lr * y_17));
                } else {
                    long k_20 = 0;
                    while ((k_20 < w_11.Length)) {
                        w_11[(int)(k_20)] = (_idx(w_11, k_20) - (model_7.lr * ((2.0 * model_7.lambda) * _idx(w_11, k_20))));
                        k_20 = (k_20 + 1);
                    }
                }
                j_15 = (j_15 + 1);
            }
            epoch_14 = (epoch_14 + 1);
        };
        return new SVC{weights = w_11, bias = b_13, lr = model_7.lr, lambda = model_7.lambda, epochs = model_7.epochs};
    }

    public static long predict(SVC model_21, double[] x_22) {
        double s_23 = (Program.dot(model_21.weights, x_22) + model_21.bias);
        if ((s_23 >= 0.0)) {
            return 1;
        } else {
            return -1;
        };
        return default(long);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.predict(model_27, new double[]{0.0, 1.0})));
            Console.WriteLine(Program._fmtTop(Program.predict(model_27, new double[]{1.0, 1.0})));
            Console.WriteLine(Program._fmtTop(Program.predict(model_27, new double[]{2.0, 2.0})));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
