// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Leaf {
    public double prediction;
    public override string ToString() => $"Leaf {{prediction = {prediction.ToString("0.0")}}}";
}
class Branch {
    public double decision_boundary;
    public object left;
    public object right;
    public override string ToString() => $"Branch {{decision_boundary = {decision_boundary.ToString("0.0")}, left = {left}, right = {right}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static long _atoi(object v) {
        if (v == null) return 0;
        if (v is long l) return l;
        if (v is int i) return i;
        if (v is double d) return (long)d;
        if (v is bool b) return b ? 1L : 0L;
        if (v is string s) {
            if (long.TryParse(s, out var n)) return n;
            if (double.TryParse(s, out var f)) return (long)f;
            return 0;
        }
        try { return Convert.ToInt64(v); } catch { return 0; }
    }
    static long _mod(long a, long b) {
        if (b == 0) return 0;
        var r = a % b;
        if ((r < 0 && b > 0) || (r > 0 && b < 0)) r += b;
        return r;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double PI_0 = 3.141592653589793;
    static double TWO_PI_1 = 6.283185307179586;
    static long seed_10 = 123456789;
    public static double _mod(double x_2, double m_3) {
        return (x_2 - (Convert.ToDouble(_atoi((x_2 / m_3))) * m_3));
    }

    public static double sin(double x_4) {
        double y_5 = (Program._mod((x_4 + PI_0), TWO_PI_1) - PI_0);
        double y2_6 = (y_5 * y_5);
        double y3_7 = (y2_6 * y_5);
        double y5_8 = (y3_7 * y2_6);
        double y7_9 = (y5_8 * y2_6);
        return (((y_5 - (y3_7 / 6.0)) + (y5_8 / 120.0)) - (y7_9 / 5040.0));
    }

    public static double rand() {
        seed_10 = _mod(((1103515245 * seed_10) + 12345), 2147483648L);
        return (Convert.ToDouble(seed_10) / 2.147483648e09);
    }

    public static double mean(double[] vals_11) {
        double sum_12 = 0.0;
        long i_13 = 0;
        while ((i_13 < vals_11.Length)) {
            sum_12 = (sum_12 + _idx(vals_11, i_13));
            i_13 = (i_13 + 1);
        };
        return (sum_12 / vals_11.Length);
    }

    public static double mean_squared_error(double[] labels_14, double prediction_15) {
        double total_16 = 0.0;
        long i_17 = 0;
        while ((i_17 < labels_14.Length)) {
            double diff_18 = (_idx(labels_14, i_17) - prediction_15);
            total_16 = (total_16 + (diff_18 * diff_18));
            i_17 = (i_17 + 1);
        };
        return (total_16 / labels_14.Length);
    }

    public static object train_tree(double[] x_19, double[] y_20, long depth_21, long min_leaf_size_22) {
        if ((x_19.Length < (2 * min_leaf_size_22))) {
            return (object)new Leaf{prediction = Program.mean(y_20)};
        };
        if ((depth_21 == 1)) {
            return (object)new Leaf{prediction = Program.mean(y_20)};
        };
        long best_split_23 = 0;
        double min_error_24 = (Program.mean_squared_error(x_19, Program.mean(y_20)) * 2.0);
        long i_25 = 0;
        while ((i_25 < x_19.Length)) {
            if ((_slice<double>(x_19, 0, i_25).Length < min_leaf_size_22)) {
                ;
            } else if ((_slice<double>(x_19, i_25, x_19.Length).Length < min_leaf_size_22)) {
                ;
            } else {
                double err_left_26 = Program.mean_squared_error(_slice<double>(x_19, 0, i_25), Program.mean(_slice<double>(y_20, 0, i_25)));
                double err_right_27 = Program.mean_squared_error(_slice<double>(x_19, i_25, x_19.Length), Program.mean(_slice<double>(y_20, i_25, y_20.Length)));
                double err_28 = (err_left_26 + err_right_27);
                if ((err_28 < min_error_24)) {
                    best_split_23 = i_25;
                    min_error_24 = err_28;
                }
            }
            i_25 = (i_25 + 1);
        };
        if ((best_split_23 != 0)) {
            double[] left_x_29 = _slice<double>(x_19, 0, best_split_23);
            double[] left_y_30 = _slice<double>(y_20, 0, best_split_23);
            double[] right_x_31 = _slice<double>(x_19, best_split_23, x_19.Length);
            double[] right_y_32 = _slice<double>(y_20, best_split_23, y_20.Length);
            double boundary_33 = _idx(x_19, best_split_23);
            object left_tree_34 = Program.train_tree(left_x_29, left_y_30, (depth_21 - 1), min_leaf_size_22);
            object right_tree_35 = Program.train_tree(right_x_31, right_y_32, (depth_21 - 1), min_leaf_size_22);
            return (object)new Branch{decision_boundary = boundary_33, left = left_tree_34, right = right_tree_35};
        };
        return (object)new Leaf{prediction = Program.mean(y_20)};
    }

    public static double predict(object tree_36, double value_37) {
        return ((Func<double>)(() => { var __t = tree_36; if (__t is Leaf _p0) { var p = _p0.prediction; return p; } else if (__t is Branch _p1) { var b = _p1.decision_boundary; var l = _p1.left; var r = _p1.right; return ((Convert.ToDouble(value_37) >= Convert.ToDouble(b)) ? predict((object)r, value_37) : predict((object)l, value_37)); } return default(double); }))();
    }

    public static void main() {
        double[] x_38 = new double[]{};
        double v_39 = -1.0;
        while ((v_39 < 1.0)) {
            x_38 = (Enumerable.ToArray(Enumerable.Append<double>(x_38, v_39)));
            v_39 = (v_39 + 0.005);
        };
        double[] y_40 = new double[]{};
        long i_41 = 0;
        while ((i_41 < x_38.Length)) {
            y_40 = (Enumerable.ToArray(Enumerable.Append<double>(y_40, Program.sin(_idx(x_38, i_41)))));
            i_41 = (i_41 + 1);
        };
        object tree_42 = Program.train_tree(x_38, y_40, 10, 10);
        double[] test_cases_43 = new double[]{};
        i_41 = 0;
        while ((i_41 < 10)) {
            test_cases_43 = (Enumerable.ToArray(Enumerable.Append<double>(test_cases_43, ((Program.rand() * 2.0) - 1.0))));
            i_41 = (i_41 + 1);
        };
        double[] predictions_44 = new double[]{};
        i_41 = 0;
        while ((i_41 < test_cases_43.Length)) {
            predictions_44 = (Enumerable.ToArray(Enumerable.Append<double>(predictions_44, Program.predict((object)tree_42, _idx(test_cases_43, i_41)))));
            i_41 = (i_41 + 1);
        };
        double sum_err_45 = 0.0;
        i_41 = 0;
        while ((i_41 < test_cases_43.Length)) {
            double diff_46 = (_idx(predictions_44, i_41) - _idx(test_cases_43, i_41));
            sum_err_45 = (sum_err_45 + (diff_46 * diff_46));
            i_41 = (i_41 + 1);
        };
        double avg_error_47 = (sum_err_45 / test_cases_43.Length);
        Console.WriteLine(Program._fmtTop(("Test values: " + _fmtStr(test_cases_43))));
        Console.WriteLine(Program._fmtTop(("Predictions: " + _fmtStr(predictions_44))));
        Console.WriteLine(Program._fmtTop(("Average error: " + _fmtStr(avg_error_47))));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
