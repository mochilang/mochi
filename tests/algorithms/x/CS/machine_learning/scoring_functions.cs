// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double absf(double x_0) {
        if ((x_0 < 0.0)) {
            return (0.0 - x_0);
        };
        return x_0;
    }

    public static double sqrtApprox(double x_1) {
        if ((x_1 <= 0.0)) {
            return 0.0;
        };
        double guess_2 = x_1;
        long i_3 = 0;
        while ((i_3 < 20)) {
            guess_2 = ((guess_2 + (x_1 / guess_2)) / 2.0);
            i_3 = (i_3 + 1);
        };
        return guess_2;
    }

    public static double ln_series(double x_4) {
        double t_5 = ((x_4 - 1.0) / (x_4 + 1.0));
        double term_6 = t_5;
        double sum_7 = 0.0;
        long n_8 = 1;
        while ((n_8 <= 19)) {
            sum_7 = (sum_7 + (term_6 / Convert.ToDouble(n_8)));
            term_6 = ((term_6 * t_5) * t_5);
            n_8 = (n_8 + 2);
        };
        return (2.0 * sum_7);
    }

    public static double ln(double x_9) {
        double y_10 = x_9;
        long k_11 = 0;
        while ((y_10 >= 10.0)) {
            y_10 = (y_10 / 10.0);
            k_11 = (k_11 + 1);
        };
        while ((y_10 < 1.0)) {
            y_10 = (y_10 * 10.0);
            k_11 = (k_11 - 1);
        };
        return (Program.ln_series(y_10) + (Convert.ToDouble(k_11) * Program.ln_series(10.0)));
    }

    public static double mae(double[] predict_12, double[] actual_13) {
        double sum_14 = 0.0;
        long i_15 = 0;
        while ((i_15 < predict_12.Length)) {
            double diff_16 = (predict_12[(int)(i_15)] - actual_13[(int)(i_15)]);
            sum_14 = (sum_14 + Program.absf(diff_16));
            i_15 = (i_15 + 1);
        };
        return (sum_14 / Convert.ToDouble(predict_12.Length));
    }

    public static double mse(double[] predict_17, double[] actual_18) {
        double sum_19 = 0.0;
        long i_20 = 0;
        while ((i_20 < predict_17.Length)) {
            double diff_21 = (predict_17[(int)(i_20)] - actual_18[(int)(i_20)]);
            sum_19 = (sum_19 + (diff_21 * diff_21));
            i_20 = (i_20 + 1);
        };
        return (sum_19 / Convert.ToDouble(predict_17.Length));
    }

    public static double rmse(double[] predict_22, double[] actual_23) {
        return Program.sqrtApprox(Program.mse(predict_22, actual_23));
    }

    public static double rmsle(double[] predict_24, double[] actual_25) {
        double sum_26 = 0.0;
        long i_27 = 0;
        while ((i_27 < predict_24.Length)) {
            double lp_28 = Program.ln((predict_24[(int)(i_27)] + 1.0));
            double la_29 = Program.ln((actual_25[(int)(i_27)] + 1.0));
            double diff_30 = (lp_28 - la_29);
            sum_26 = (sum_26 + (diff_30 * diff_30));
            i_27 = (i_27 + 1);
        };
        return Program.sqrtApprox((sum_26 / Convert.ToDouble(predict_24.Length)));
    }

    public static double mbd(double[] predict_31, double[] actual_32) {
        double diff_sum_33 = 0.0;
        double actual_sum_34 = 0.0;
        long i_35 = 0;
        while ((i_35 < predict_31.Length)) {
            diff_sum_33 = (diff_sum_33 + (predict_31[(int)(i_35)] - actual_32[(int)(i_35)]));
            actual_sum_34 = (actual_sum_34 + actual_32[(int)(i_35)]);
            i_35 = (i_35 + 1);
        };
        double n_36 = Convert.ToDouble(predict_31.Length);
        double numerator_37 = (diff_sum_33 / n_36);
        double denominator_38 = (actual_sum_34 / n_36);
        return ((numerator_37 / denominator_38) * 100.0);
    }

    public static double manual_accuracy(double[] predict_39, double[] actual_40) {
        long correct_41 = 0;
        long i_42 = 0;
        while ((i_42 < predict_39.Length)) {
            if ((predict_39[(int)(i_42)] == actual_40[(int)(i_42)])) {
                correct_41 = (correct_41 + 1);
            }
            i_42 = (i_42 + 1);
        };
        return (Convert.ToDouble(correct_41) / Convert.ToDouble(predict_39.Length));
    }

    public static void main() {
        double[] actual_43 = new double[]{1.0, 2.0, 3.0};
        double[] predict_44 = new double[]{1.0, 4.0, 3.0};
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mae(predict_44, actual_43))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mse(predict_44, actual_43))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.rmse(predict_44, actual_43))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.rmsle(new double[]{10.0, 2.0, 30.0}, new double[]{10.0, 10.0, 30.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mbd(new double[]{2.0, 3.0, 4.0}, new double[]{1.0, 2.0, 3.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.mbd(new double[]{0.0, 1.0, 1.0}, new double[]{1.0, 2.0, 3.0}))));
        Console.WriteLine(Program._fmtTop(_fmtStr(Program.manual_accuracy(predict_44, actual_43))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
