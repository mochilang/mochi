// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class LSTMWeights {
    public double w_i;
    public double u_i;
    public double b_i;
    public double w_f;
    public double u_f;
    public double b_f;
    public double w_o;
    public double u_o;
    public double b_o;
    public double w_c;
    public double u_c;
    public double b_c;
    public double w_y;
    public double b_y;
    public override string ToString() => $"LSTMWeights {{w_i = {w_i.ToString("0.0")}, u_i = {u_i.ToString("0.0")}, b_i = {b_i.ToString("0.0")}, w_f = {w_f.ToString("0.0")}, u_f = {u_f.ToString("0.0")}, b_f = {b_f.ToString("0.0")}, w_o = {w_o.ToString("0.0")}, u_o = {u_o.ToString("0.0")}, b_o = {b_o.ToString("0.0")}, w_c = {w_c.ToString("0.0")}, u_c = {u_c.ToString("0.0")}, b_c = {b_c.ToString("0.0")}, w_y = {w_y.ToString("0.0")}, b_y = {b_y.ToString("0.0")}}}";
}
class LSTMState {
    public double[] i;
    public double[] f;
    public double[] o;
    public double[] g;
    public double[] c;
    public double[] h;
    public override string ToString() => $"LSTMState {{i = {i}, f = {f}, o = {o}, g = {g}, c = {c}, h = {h}}}";
}
class Samples {
    public double[][] x;
    public double[] y;
    public override string ToString() => $"Samples {{x = {x}, y = {y}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static T[] _slice<T>(T[] arr, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > arr.Length) start = arr.Length;
        if (end > arr.Length) end = arr.Length;
        if (start > end) start = end;
        var len = end - start;
        var res = new T[len];
        Array.Copy(arr, (int)start, res, 0, (int)len);
        return res;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[] data_89 = new double[]{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8};
    static long look_back_90 = 3;
    static long epochs_91 = 200;
    static double lr_92 = 0.1;
    static LSTMWeights w_93 = Program.train(data_89, look_back_90, epochs_91, lr_92);
    static double[] test_seq_94 = new double[]{0.6, 0.7, 0.8};
    static double pred_95 = Program.predict(test_seq_94, w_93);
    public static double exp_approx(double x_0) {
        double sum_1 = 1.0;
        double term_2 = 1.0;
        long n_3 = 1;
        while ((n_3 < 20)) {
            term_2 = ((term_2 * x_0) / Convert.ToDouble(n_3));
            sum_1 = (sum_1 + term_2);
            n_3 = (n_3 + 1);
        };
        return sum_1;
    }

    public static double sigmoid(double x_4) {
        return (1.0 / (1.0 + Program.exp_approx(-x_4)));
    }

    public static double tanh_approx(double x_5) {
        double e_6 = Program.exp_approx((2.0 * x_5));
        return ((e_6 - 1.0) / (e_6 + 1.0));
    }

    public static LSTMState forward(double[] seq_7, LSTMWeights w_8) {
        double[] i_arr_9 = new double[]{};
        double[] f_arr_10 = new double[]{};
        double[] o_arr_11 = new double[]{};
        double[] g_arr_12 = new double[]{};
        double[] c_arr_13 = new double[]{0.0};
        double[] h_arr_14 = new double[]{0.0};
        long t_15 = 0;
        while ((t_15 < seq_7.Length)) {
            double x_16 = _idx(seq_7, t_15);
            double h_prev_17 = _idx(h_arr_14, t_15);
            double c_prev_18 = _idx(c_arr_13, t_15);
            double i_t_19 = Program.sigmoid((((w_8.w_i * x_16) + (w_8.u_i * h_prev_17)) + w_8.b_i));
            double f_t_20 = Program.sigmoid((((w_8.w_f * x_16) + (w_8.u_f * h_prev_17)) + w_8.b_f));
            double o_t_21 = Program.sigmoid((((w_8.w_o * x_16) + (w_8.u_o * h_prev_17)) + w_8.b_o));
            double g_t_22 = Program.tanh_approx((((w_8.w_c * x_16) + (w_8.u_c * h_prev_17)) + w_8.b_c));
            double c_t_23 = ((f_t_20 * c_prev_18) + (i_t_19 * g_t_22));
            double h_t_24 = (o_t_21 * Program.tanh_approx(c_t_23));
            i_arr_9 = (Enumerable.ToArray(Enumerable.Append<double>(i_arr_9, i_t_19)));
            f_arr_10 = (Enumerable.ToArray(Enumerable.Append<double>(f_arr_10, f_t_20)));
            o_arr_11 = (Enumerable.ToArray(Enumerable.Append<double>(o_arr_11, o_t_21)));
            g_arr_12 = (Enumerable.ToArray(Enumerable.Append<double>(g_arr_12, g_t_22)));
            c_arr_13 = (Enumerable.ToArray(Enumerable.Append<double>(c_arr_13, c_t_23)));
            h_arr_14 = (Enumerable.ToArray(Enumerable.Append<double>(h_arr_14, h_t_24)));
            t_15 = (t_15 + 1);
        };
        return new LSTMState{i = i_arr_9, f = f_arr_10, o = o_arr_11, g = g_arr_12, c = c_arr_13, h = h_arr_14};
    }

    public static LSTMWeights backward(double[] seq_25, double target_26, LSTMWeights w_27, LSTMState s_28, double lr_29) {
        double dw_i_30 = 0.0;
        double du_i_31 = 0.0;
        double db_i_32 = 0.0;
        double dw_f_33 = 0.0;
        double du_f_34 = 0.0;
        double db_f_35 = 0.0;
        double dw_o_36 = 0.0;
        double du_o_37 = 0.0;
        double db_o_38 = 0.0;
        double dw_c_39 = 0.0;
        double du_c_40 = 0.0;
        double db_c_41 = 0.0;
        double dw_y_42 = 0.0;
        double db_y_43 = 0.0;
        long T_44 = seq_25.Length;
        double h_last_45 = _idx(s_28.h, T_44);
        double y_46 = ((w_27.w_y * h_last_45) + w_27.b_y);
        double dy_47 = (y_46 - target_26);
        dw_y_42 = (dy_47 * h_last_45);
        db_y_43 = dy_47;
        double dh_next_48 = (dy_47 * w_27.w_y);
        double dc_next_49 = 0.0;
        long t_50 = (T_44 - 1);
        while ((t_50 >= 0)) {
            double i_t_51 = _idx(s_28.i, t_50);
            double f_t_52 = _idx(s_28.f, t_50);
            double o_t_53 = _idx(s_28.o, t_50);
            double g_t_54 = _idx(s_28.g, t_50);
            double c_t_55 = _idx(s_28.c, (t_50 + 1));
            double c_prev_56 = _idx(s_28.c, t_50);
            double h_prev_57 = _idx(s_28.h, t_50);
            double tanh_c_58 = Program.tanh_approx(c_t_55);
            double do_t_59 = (dh_next_48 * tanh_c_58);
            double da_o_60 = ((do_t_59 * o_t_53) * (1.0 - o_t_53));
            double dc_61 = (((dh_next_48 * o_t_53) * (1.0 - (tanh_c_58 * tanh_c_58))) + dc_next_49);
            double di_t_62 = (dc_61 * g_t_54);
            double da_i_63 = ((di_t_62 * i_t_51) * (1.0 - i_t_51));
            double dg_t_64 = (dc_61 * i_t_51);
            double da_g_65 = (dg_t_64 * (1.0 - (g_t_54 * g_t_54)));
            double df_t_66 = (dc_61 * c_prev_56);
            double da_f_67 = ((df_t_66 * f_t_52) * (1.0 - f_t_52));
            dw_i_30 = (dw_i_30 + (da_i_63 * _idx(seq_25, t_50)));
            du_i_31 = (du_i_31 + (da_i_63 * h_prev_57));
            db_i_32 = (db_i_32 + da_i_63);
            dw_f_33 = (dw_f_33 + (da_f_67 * _idx(seq_25, t_50)));
            du_f_34 = (du_f_34 + (da_f_67 * h_prev_57));
            db_f_35 = (db_f_35 + da_f_67);
            dw_o_36 = (dw_o_36 + (da_o_60 * _idx(seq_25, t_50)));
            du_o_37 = (du_o_37 + (da_o_60 * h_prev_57));
            db_o_38 = (db_o_38 + da_o_60);
            dw_c_39 = (dw_c_39 + (da_g_65 * _idx(seq_25, t_50)));
            du_c_40 = (du_c_40 + (da_g_65 * h_prev_57));
            db_c_41 = (db_c_41 + da_g_65);
            dh_next_48 = ((((da_i_63 * w_27.u_i) + (da_f_67 * w_27.u_f)) + (da_o_60 * w_27.u_o)) + (da_g_65 * w_27.u_c));
            dc_next_49 = (dc_61 * f_t_52);
            t_50 = (t_50 - 1);
        };
        w_27.w_y = (w_27.w_y - (lr_29 * dw_y_42));
        w_27.b_y = (w_27.b_y - (lr_29 * db_y_43));
        w_27.w_i = (w_27.w_i - (lr_29 * dw_i_30));
        w_27.u_i = (w_27.u_i - (lr_29 * du_i_31));
        w_27.b_i = (w_27.b_i - (lr_29 * db_i_32));
        w_27.w_f = (w_27.w_f - (lr_29 * dw_f_33));
        w_27.u_f = (w_27.u_f - (lr_29 * du_f_34));
        w_27.b_f = (w_27.b_f - (lr_29 * db_f_35));
        w_27.w_o = (w_27.w_o - (lr_29 * dw_o_36));
        w_27.u_o = (w_27.u_o - (lr_29 * du_o_37));
        w_27.b_o = (w_27.b_o - (lr_29 * db_o_38));
        w_27.w_c = (w_27.w_c - (lr_29 * dw_c_39));
        w_27.u_c = (w_27.u_c - (lr_29 * du_c_40));
        w_27.b_c = (w_27.b_c - (lr_29 * db_c_41));
        return w_27;
    }

    public static Samples make_samples(double[] data_68, long look_back_69) {
        double[][] X_70 = new double[][]{};
        double[] Y_71 = new double[]{};
        long i_72 = 0;
        while (((i_72 + look_back_69) < data_68.Length)) {
            double[] seq_73 = _slice<double>(data_68, i_72, (i_72 + look_back_69));
            X_70 = (Enumerable.ToArray(Enumerable.Append<double[]>(X_70, seq_73)));
            Y_71 = (Enumerable.ToArray(Enumerable.Append<double>(Y_71, _idx(data_68, (i_72 + look_back_69)))));
            i_72 = (i_72 + 1);
        };
        return new Samples{x = X_70, y = Y_71};
    }

    public static LSTMWeights init_weights() {
        return new LSTMWeights{w_i = 0.1, u_i = 0.2, b_i = 0.0, w_f = 0.1, u_f = 0.2, b_f = 0.0, w_o = 0.1, u_o = 0.2, b_o = 0.0, w_c = 0.1, u_c = 0.2, b_c = 0.0, w_y = 0.1, b_y = 0.0};
    }

    public static LSTMWeights train(double[] data_74, long look_back_75, long epochs_76, double lr_77) {
        Samples samples_78 = Program.make_samples(data_74, look_back_75);
        LSTMWeights w_79 = Program.init_weights();
        long ep_80 = 0;
        while ((ep_80 < epochs_76)) {
            long j_81 = 0;
            while ((j_81 < samples_78.x.Length)) {
                double[] seq_82 = _idx(samples_78.x, j_81);
                double target_83 = _idx(samples_78.y, j_81);
                LSTMState state_84 = Program.forward(seq_82, w_79);
                w_79 = Program.backward(seq_82, target_83, w_79, state_84, lr_77);
                j_81 = (j_81 + 1);
            }
            ep_80 = (ep_80 + 1);
        };
        return w_79;
    }

    public static double predict(double[] seq_85, LSTMWeights w_86) {
        LSTMState state_87 = Program.forward(seq_85, w_86);
        double h_last_88 = _idx(state_87.h, (state_87.h.Length - 1));
        return ((w_86.w_y * h_last_88) + w_86.b_y);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Predicted value: " + _fmtStr(pred_95))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
