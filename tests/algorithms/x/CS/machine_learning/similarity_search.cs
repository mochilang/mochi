// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Neighbor {
    public double[] vector;
    public double distance;
    public override string ToString() => $"Neighbor {{vector = {vector}, distance = {distance.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] dataset_26 = new double[][]{new double[]{0.0, 0.0, 0.0}, new double[]{1.0, 1.0, 1.0}, new double[]{2.0, 2.0, 2.0}};
    static double[][] value_array_27 = new double[][]{new double[]{0.0, 0.0, 0.0}, new double[]{0.0, 0.0, 1.0}};
    static Neighbor[] neighbors_28 = Program.similarity_search(dataset_26, value_array_27);
    static long k_29 = 0;
    public static double sqrt(double x_0) {
        if ((x_0 <= 0.0)) {
            return 0.0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 10)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double euclidean(double[] a_3, double[] b_4) {
        double sum_5 = 0.0;
        long i_6 = 0;
        while ((i_6 < a_3.Length)) {
            double diff_7 = (_idx(a_3, i_6) - _idx(b_4, i_6));
            sum_5 = (sum_5 + (diff_7 * diff_7));
            i_6 = (i_6 + 1);
        };
        double res_8 = Program.sqrt(sum_5);
        return res_8;
    }

    public static Neighbor[] similarity_search(double[][] dataset_9, double[][] value_array_10) {
        long dim_11 = _idx(dataset_9, 0).Length;
        if ((dim_11 != _idx(value_array_10, 0).Length)) {
            return new Neighbor[]{};
        };
        Neighbor[] result_12 = new Neighbor[]{};
        long i_13 = 0;
        while ((i_13 < value_array_10.Length)) {
            double[] value_14 = _idx(value_array_10, i_13);
            double dist_15 = Program.euclidean(value_14, _idx(dataset_9, 0));
            double[] vec_16 = _idx(dataset_9, 0);
            long j_17 = 1;
            while ((j_17 < dataset_9.Length)) {
                double d_18 = Program.euclidean(value_14, _idx(dataset_9, j_17));
                if ((d_18 < dist_15)) {
                    dist_15 = d_18;
                    vec_16 = _idx(dataset_9, j_17);
                }
                j_17 = (j_17 + 1);
            }
            Neighbor nb_19 = new Neighbor{vector = vec_16, distance = dist_15};
            result_12 = (Enumerable.ToArray(Enumerable.Append<Neighbor>(result_12, nb_19)));
            i_13 = (i_13 + 1);
        };
        return result_12;
    }

    public static double cosine_similarity(double[] a_20, double[] b_21) {
        double dot_22 = 0.0;
        double norm_a_23 = 0.0;
        double norm_b_24 = 0.0;
        long i_25 = 0;
        while ((i_25 < a_20.Length)) {
            dot_22 = (dot_22 + (_idx(a_20, i_25) * _idx(b_21, i_25)));
            norm_a_23 = (norm_a_23 + (_idx(a_20, i_25) * _idx(a_20, i_25)));
            norm_b_24 = (norm_b_24 + (_idx(b_21, i_25) * _idx(b_21, i_25)));
            i_25 = (i_25 + 1);
        };
        if (((norm_a_23 == 0.0) || (norm_b_24 == 0.0))) {
            return 0.0;
        };
        return (dot_22 / (Program.sqrt(norm_a_23) * Program.sqrt(norm_b_24)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            while ((k_29 < neighbors_28.Length)) {
                Neighbor n_30 = _idx(neighbors_28, k_29);
                Console.WriteLine(Program._fmtTop((((("[" + _fmtStr(n_30.vector)) + ", ") + _fmtStr(n_30.distance)) + "]")));
                k_29 = (k_29 + 1);
            }
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.cosine_similarity(new double[]{1.0, 2.0}, new double[]{6.0, 32.0}))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
