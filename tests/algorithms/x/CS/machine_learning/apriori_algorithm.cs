// Generated by Mochi 0.10.66 (commit fa2dc5e881) on 2025-08-16 11:48 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Itemset {
    public string[] items;
    public long support;
    public override string ToString() => $"Itemset {{items = {items}, support = {support}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static Itemset[] frequent_itemsets_67 = Program.apriori(Program.load_data(), 2);
    public static string[][] load_data() {
        return new string[][]{new string[]{"milk"}, new string[]{"milk", "butter"}, new string[]{"milk", "bread"}, new string[]{"milk", "bread", "chips"}};
    }

    public static bool contains_string(string[] xs_0, string s_1) {
        foreach (string v_2 in xs_0) {
            if ((v_2 == s_1)) {
                return true;
            }
        };
        return false;
    }

    public static bool is_subset(string[] candidate_3, string[] transaction_4) {
        foreach (string it_5 in candidate_3) {
            if ((!Program.contains_string(transaction_4, it_5))) {
                return false;
            }
        };
        return true;
    }

    public static bool lists_equal(string[] a_6, string[] b_7) {
        if ((a_6.Length != b_7.Length)) {
            return false;
        };
        long i_8 = 0;
        while ((i_8 < a_6.Length)) {
            if ((_idx(a_6, i_8) != _idx(b_7, i_8))) {
                return false;
            }
            i_8 = (i_8 + 1);
        };
        return true;
    }

    public static bool contains_list(string[][] itemset_9, string[] item_10) {
        foreach (string[] l_11 in itemset_9) {
            if (Program.lists_equal(l_11, item_10)) {
                return true;
            }
        };
        return false;
    }

    public static long count_list(string[][] itemset_12, string[] item_13) {
        long c_14 = 0;
        foreach (string[] l_15 in itemset_12) {
            if (Program.lists_equal(l_15, item_13)) {
                c_14 = (c_14 + 1);
            }
        };
        return c_14;
    }

    public static string[][] slice_list(string[][] xs_16, long start_17) {
        string[][] res_18 = new string[][]{};
        long i_19 = start_17;
        while ((i_19 < xs_16.Length)) {
            res_18 = ((Func<string[][]>)(() => { var _tmp = res_18.Cast<string[]>().ToList(); _tmp.Add(_idx(xs_16, i_19)); return _tmp.ToArray(); }))();
            i_19 = (i_19 + 1);
        };
        return res_18;
    }

    public static string[][][] combinations_lists(string[][] xs_20, long k_21) {
        string[][][] result_22 = new string[][][]{};
        if ((k_21 == 0)) {
            result_22 = ((Func<string[][][]>)(() => { var _tmp = result_22.Cast<string[][]>().ToList(); _tmp.Add(new string[][]{}); return _tmp.ToArray(); }))();
            return (string[][][])result_22;
        };
        long i_23 = 0;
        while ((i_23 < xs_20.Length)) {
            string[] head_24 = _idx(xs_20, i_23);
            string[][] tail_25 = Program.slice_list(xs_20, (i_23 + 1));
            string[][][] tail_combos_26 = Program.combinations_lists(tail_25, (k_21 - 1));
            foreach (string[][] combo_27 in tail_combos_26) {
                string[][] new_combo_28 = new string[][]{};
                new_combo_28 = ((Func<string[][]>)(() => { var _tmp = new_combo_28.Cast<string[]>().ToList(); _tmp.Add(head_24); return _tmp.ToArray(); }))();
                foreach (string[] c_29 in combo_27) {
                    new_combo_28 = ((Func<string[][]>)(() => { var _tmp = new_combo_28.Cast<string[]>().ToList(); _tmp.Add(c_29); return _tmp.ToArray(); }))();
                }
                result_22 = ((Func<string[][][]>)(() => { var _tmp = result_22.Cast<string[][]>().ToList(); _tmp.Add(new_combo_28); return _tmp.ToArray(); }))();
            }
            i_23 = (i_23 + 1);
        };
        return result_22;
    }

    public static string[][] prune(string[][] itemset_30, string[][][] candidates_31, long length_32) {
        string[][] pruned_33 = new string[][]{};
        foreach (string[][] candidate_34 in candidates_31) {
            bool is_subsequence_35 = true;
            foreach (string[] item_36 in candidate_34) {
                if (((!Program.contains_list(itemset_30, item_36)) || (Program.count_list(itemset_30, item_36) < (length_32 - 1)))) {
                    is_subsequence_35 = false;
                    break;
                }
            }
            if (is_subsequence_35) {
                string[] merged_37 = new string[]{};
                foreach (string[] item_38 in candidate_34) {
                    foreach (string s_39 in item_38) {
                        if ((!Program.contains_string(merged_37, s_39))) {
                            merged_37 = ((Func<string[]>)(() => { var _tmp = merged_37.Cast<string>().ToList(); _tmp.Add(s_39); return _tmp.ToArray(); }))();
                        }
                    }
                }
                pruned_33 = ((Func<string[][]>)(() => { var _tmp = pruned_33.Cast<string[]>().ToList(); _tmp.Add(merged_37); return _tmp.ToArray(); }))();
            }
        };
        return pruned_33;
    }

    public static string[] sort_strings(string[] xs_40) {
        string[] res_41 = new string[]{};
        foreach (string s_42 in xs_40) {
            res_41 = ((Func<string[]>)(() => { var _tmp = res_41.Cast<string>().ToList(); _tmp.Add(s_42); return _tmp.ToArray(); }))();
        };
        long i_43 = 0;
        while ((i_43 < res_41.Length)) {
            long j_44 = (i_43 + 1);
            while ((j_44 < res_41.Length)) {
                if ((string.Compare(_idx(res_41, j_44), _idx(res_41, i_43)) < 0)) {
                    string tmp_45 = _idx(res_41, i_43);
                    res_41[(int)(i_43)] = _idx(res_41, j_44);
                    res_41[(int)(j_44)] = tmp_45;
                }
                j_44 = (j_44 + 1);
            }
            i_43 = (i_43 + 1);
        };
        return res_41;
    }

    public static string itemset_to_string(string[] xs_46) {
        string s_47 = "[";
        long i_48 = 0;
        while ((i_48 < xs_46.Length)) {
            if ((i_48 > 0)) {
                s_47 = (s_47 + ", ");
            }
            s_47 = (((s_47 + "'") + _idx(xs_46, i_48)) + "'");
            i_48 = (i_48 + 1);
        };
        s_47 = (s_47 + "]");
        return s_47;
    }

    public static Itemset[] apriori(string[][] data_49, long min_support_50) {
        string[][] itemset_51 = new string[][]{};
        foreach (string[] transaction_52 in data_49) {
            string[] t_53 = new string[]{};
            foreach (string v_54 in transaction_52) {
                t_53 = ((Func<string[]>)(() => { var _tmp = t_53.Cast<string>().ToList(); _tmp.Add(v_54); return _tmp.ToArray(); }))();
            }
            itemset_51 = ((Func<string[][]>)(() => { var _tmp = itemset_51.Cast<string[]>().ToList(); _tmp.Add(t_53); return _tmp.ToArray(); }))();
        };
        Itemset[] frequent_55 = new Itemset[]{};
        long length_56 = 1;
        while ((itemset_51.Length > 0)) {
            long[] counts_57 = new long[]{};
            long idx_58 = 0;
            while ((idx_58 < itemset_51.Length)) {
                counts_57 = ((Func<long[]>)(() => { var _tmp = counts_57.Cast<long>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                idx_58 = (idx_58 + 1);
            }
            foreach (string[] transaction_59 in data_49) {
                long j_60 = 0;
                while ((j_60 < itemset_51.Length)) {
                    string[] candidate_61 = _idx(itemset_51, j_60);
                    if (Program.is_subset(candidate_61, transaction_59)) {
                        counts_57[(int)(j_60)] = (_idx(counts_57, j_60) + 1);
                    }
                    j_60 = (j_60 + 1);
                }
            }
            string[][] new_itemset_62 = new string[][]{};
            long k_63 = 0;
            while ((k_63 < itemset_51.Length)) {
                if ((_idx(counts_57, k_63) >= min_support_50)) {
                    new_itemset_62 = ((Func<string[][]>)(() => { var _tmp = new_itemset_62.Cast<string[]>().ToList(); _tmp.Add(_idx(itemset_51, k_63)); return _tmp.ToArray(); }))();
                }
                k_63 = (k_63 + 1);
            }
            itemset_51 = new_itemset_62;
            long m_64 = 0;
            while ((m_64 < itemset_51.Length)) {
                string[] sorted_item_65 = Program.sort_strings(_idx(itemset_51, m_64));
                frequent_55 = ((Func<Itemset[]>)(() => { var _tmp = frequent_55.Cast<Itemset>().ToList(); _tmp.Add(new Itemset{items = sorted_item_65, support = _idx(counts_57, m_64)}); return _tmp.ToArray(); }))();
                m_64 = (m_64 + 1);
            }
            length_56 = (length_56 + 1);
            string[][][] combos_66 = Program.combinations_lists(itemset_51, length_56);
            itemset_51 = Program.prune(itemset_51, combos_66, length_56);
        };
        return frequent_55;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (Itemset fi_68 in frequent_itemsets_67) {
                Console.WriteLine(Program._fmtTop(((Program.itemset_to_string(fi_68.items) + ": ") + _fmtStr(fi_68.support))));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
