// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double floor(double x_0) {
        long i_1 = Convert.ToInt64(x_0);
        if ((Convert.ToDouble(i_1) > x_0)) {
            i_1 = (i_1 - 1);
        };
        return Convert.ToDouble(i_1);
    }

    public static double pow10(long n_2) {
        double result_3 = 1.0;
        long i_4 = 0;
        while ((i_4 < n_2)) {
            result_3 = (result_3 * 10.0);
            i_4 = (i_4 + 1);
        };
        return result_3;
    }

    public static double round(double x_5, long n_6) {
        double m_7 = Program.pow10(n_6);
        double y_8 = Convert.ToDouble(Program.floor(((x_5 * m_7) + 0.5)));
        return (y_8 / m_7);
    }

    public static double sqrtApprox(double x_9) {
        double guess_10 = x_9;
        long i_11 = 0;
        while ((i_11 < 20)) {
            guess_10 = ((guess_10 + (x_9 / guess_10)) / 2.0);
            i_11 = (i_11 + 1);
        };
        return guess_10;
    }

    public static double mean(double[] data_12) {
        double total_13 = 0.0;
        long i_14 = 0;
        long n_15 = data_12.Length;
        while ((i_14 < n_15)) {
            total_13 = (total_13 + data_12[(int)(i_14)]);
            i_14 = (i_14 + 1);
        };
        return (total_13 / Convert.ToDouble(n_15));
    }

    public static double stdev(double[] data_16) {
        long n_17 = data_16.Length;
        if ((n_17 <= 1)) {
            throw new Exception("data length must be > 1");
        };
        double m_18 = Program.mean(data_16);
        double sum_sq_19 = 0.0;
        long i_20 = 0;
        while ((i_20 < n_17)) {
            double diff_21 = (data_16[(int)(i_20)] - m_18);
            sum_sq_19 = (sum_sq_19 + (diff_21 * diff_21));
            i_20 = (i_20 + 1);
        };
        return Program.sqrtApprox((sum_sq_19 / Convert.ToDouble((n_17 - 1))));
    }

    public static double[] normalization(double[] data_22, long ndigits_23) {
        double x_min_24 = Convert.ToDouble((data_22.Min()));
        double x_max_25 = Convert.ToDouble((data_22.Max()));
        double denom_26 = (x_max_25 - x_min_24);
        double[] result_27 = new double[]{};
        long i_28 = 0;
        long n_29 = data_22.Length;
        while ((i_28 < n_29)) {
            double norm_30 = ((data_22[(int)(i_28)] - x_min_24) / denom_26);
            result_27 = (Enumerable.ToArray(Enumerable.Append<double>(result_27, Program.round(norm_30, ndigits_23))));
            i_28 = (i_28 + 1);
        };
        return result_27;
    }

    public static double[] standardization(double[] data_31, long ndigits_32) {
        double mu_33 = Program.mean(data_31);
        double sigma_34 = Program.stdev(data_31);
        double[] result_35 = new double[]{};
        long i_36 = 0;
        long n_37 = data_31.Length;
        while ((i_36 < n_37)) {
            double z_38 = ((data_31[(int)(i_36)] - mu_33) / sigma_34);
            result_35 = (Enumerable.ToArray(Enumerable.Append<double>(result_35, Program.round(z_38, ndigits_32))));
            i_36 = (i_36 + 1);
        };
        return result_35;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.normalization(new double[]{2.0, 7.0, 10.0, 20.0, 30.0, 50.0}, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.normalization(new double[]{5.0, 10.0, 15.0, 20.0, 25.0}, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.standardization(new double[]{2.0, 7.0, 10.0, 20.0, 30.0, 50.0}, 3))));
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.standardization(new double[]{5.0, 10.0, 15.0, 20.0, 25.0}, 3))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
