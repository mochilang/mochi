// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class KMeansResult {
    public double[][] centroids;
    public long[] assignments;
    public double[] heterogeneity;
    public override string ToString() => $"KMeansResult {{centroids = {centroids}, assignments = {assignments}, heterogeneity = {heterogeneity}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] data_49 = new double[][]{new double[]{1.0, 2.0}, new double[]{1.5, 1.8}, new double[]{5.0, 8.0}, new double[]{8.0, 8.0}, new double[]{1.0, 0.6}, new double[]{9.0, 11.0}};
    static long k_50 = 3;
    static double[][] initial_centroids_51 = new double[][]{_idx(data_49, 0), _idx(data_49, 2), _idx(data_49, 5)};
    static KMeansResult result_52 = Program.kmeans(data_49, k_50, initial_centroids_51, 10);
    public static double distance_sq(double[] a_0, double[] b_1) {
        double sum_2 = 0.0;
        for (var i_3 = 0; i_3 < a_0.Length; i_3++) {
            double diff_4 = (_idx(a_0, i_3) - _idx(b_1, i_3));
            sum_2 = (sum_2 + (diff_4 * diff_4));
        };
        return sum_2;
    }

    public static long[] assign_clusters(double[][] data_5, double[][] centroids_6) {
        long[] assignments_7 = new long[]{};
        for (var i_8 = 0; i_8 < data_5.Length; i_8++) {
            long best_idx_9 = 0;
            double best_10 = Program.distance_sq(_idx(data_5, i_8), _idx(centroids_6, 0));
            for (var j_11 = 1; j_11 < centroids_6.Length; j_11++) {
                double dist_12 = Program.distance_sq(_idx(data_5, i_8), _idx(centroids_6, j_11));
                if ((dist_12 < best_10)) {
                    best_10 = dist_12;
                    best_idx_9 = j_11;
                }
            }
            assignments_7 = (Enumerable.ToArray(Enumerable.Append<long>(assignments_7, best_idx_9)));
        };
        return assignments_7;
    }

    public static double[][] revise_centroids(double[][] data_13, long k_14, long[] assignment_15) {
        long dim_16 = _idx(data_13, 0).Length;
        double[][] sums_17 = new double[][]{};
        long[] counts_18 = new long[]{};
        for (var i_19 = 0; i_19 < k_14; i_19++) {
            double[] row_20 = new double[]{};
            for (var j_21 = 0; j_21 < dim_16; j_21++) {
                row_20 = (Enumerable.ToArray(Enumerable.Append<double>(row_20, 0.0)));
            }
            sums_17 = (Enumerable.ToArray(Enumerable.Append<double[]>(sums_17, row_20)));
            counts_18 = (Enumerable.ToArray(Enumerable.Append<long>(counts_18, 0)));
        };
        for (var i_22 = 0; i_22 < data_13.Length; i_22++) {
            long c_23 = _idx(assignment_15, i_22);
            counts_18[(int)(c_23)] = (_idx(counts_18, c_23) + 1);
            for (var j_24 = 0; j_24 < dim_16; j_24++) {
                _idx(sums_17, c_23)[(int)(j_24)] = (_idx(_idx(sums_17, c_23), j_24) + _idx(_idx(data_13, i_22), j_24));
            }
        };
        double[][] centroids_25 = new double[][]{};
        for (var i_26 = 0; i_26 < k_14; i_26++) {
            double[] row_27 = new double[]{};
            if ((_idx(counts_18, i_26) > 0)) {
                for (var j_28 = 0; j_28 < dim_16; j_28++) {
                    row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, (_idx(_idx(sums_17, i_26), j_28) / Convert.ToDouble(_idx(counts_18, i_26))))));
                }
            } else {
                for (var j_29 = 0; j_29 < dim_16; j_29++) {
                    row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, 0.0)));
                }
            }
            centroids_25 = (Enumerable.ToArray(Enumerable.Append<double[]>(centroids_25, row_27)));
        };
        return centroids_25;
    }

    public static double compute_heterogeneity(double[][] data_30, double[][] centroids_31, long[] assignment_32) {
        double total_33 = 0.0;
        for (var i_34 = 0; i_34 < data_30.Length; i_34++) {
            long c_35 = _idx(assignment_32, i_34);
            total_33 = (total_33 + Program.distance_sq(_idx(data_30, i_34), _idx(centroids_31, c_35)));
        };
        return total_33;
    }

    public static bool lists_equal(long[] a_36, long[] b_37) {
        if ((a_36.Length != b_37.Length)) {
            return false;
        };
        for (var i_38 = 0; i_38 < a_36.Length; i_38++) {
            if ((_idx(a_36, i_38) != _idx(b_37, i_38))) {
                return false;
            }
        };
        return true;
    }

    public static KMeansResult kmeans(double[][] data_39, long k_40, double[][] initial_centroids_41, long max_iter_42) {
        double[][] centroids_43 = initial_centroids_41;
        long[] assignment_44 = new long[]{};
        long[] prev_45 = new long[]{};
        double[] heterogeneity_46 = new double[]{};
        long iter_47 = 0;
        while ((iter_47 < max_iter_42)) {
            assignment_44 = Program.assign_clusters(data_39, centroids_43);
            centroids_43 = Program.revise_centroids(data_39, k_40, assignment_44);
            double h_48 = Program.compute_heterogeneity(data_39, centroids_43, assignment_44);
            heterogeneity_46 = (Enumerable.ToArray(Enumerable.Append<double>(heterogeneity_46, h_48)));
            if (((iter_47 > 0) && Program.lists_equal(prev_45, assignment_44))) {
                break;
            }
            prev_45 = assignment_44;
            iter_47 = (iter_47 + 1);
        };
        return new KMeansResult{centroids = centroids_43, assignments = assignment_44, heterogeneity = heterogeneity_46};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(result_52.centroids)));
            Console.WriteLine(Program._fmtTop(_fmtStr(result_52.assignments)));
            Console.WriteLine(Program._fmtTop(_fmtStr(result_52.heterogeneity)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
