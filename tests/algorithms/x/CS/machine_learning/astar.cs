// Generated by Mochi 0.10.66 (commit 49663b8c77) on 2025-08-16 12:11 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Point {
    public long x;
    public long y;
    public override string ToString() => $"Point {{x = {x}, y = {y}}}";
}
class Node {
    public Point pos;
    public Point parent;
    public long g;
    public long h;
    public long f;
    public override string ToString() => $"Node {{pos = {pos}, parent = {parent}, g = {g}, h = {h}, f = {f}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static long world_x_48 = 5;
    static long world_y_49 = 5;
    static Point start_50 = new Point{x = 0, y = 0};
    static Point goal_51 = new Point{x = 4, y = 4};
    static Point[] path_52 = Program.astar(world_x_48, world_y_49, start_50, goal_51);
    public static Point[] get_neighbours(Point p_0, long x_limit_1, long y_limit_2) {
        Point[] deltas_3 = new Point[]{new Point{x = (0 - 1), y = (0 - 1)}, new Point{x = (0 - 1), y = 0}, new Point{x = (0 - 1), y = 1}, new Point{x = 0, y = (0 - 1)}, new Point{x = 0, y = 1}, new Point{x = 1, y = (0 - 1)}, new Point{x = 1, y = 0}, new Point{x = 1, y = 1}};
        Point[] neighbours_4 = new Point[]{};
        foreach (Point d_5 in deltas_3) {
            long nx_6 = (p_0.x + d_5.x);
            long ny_7 = (p_0.y + d_5.y);
            if (((((0 <= nx_6) && (nx_6 < x_limit_1)) && (0 <= ny_7)) && (ny_7 < y_limit_2))) {
                neighbours_4 = ((Func<Point[]>)(() => { var _tmp = neighbours_4.Cast<Point>().ToList(); _tmp.Add(new Point{x = nx_6, y = ny_7}); return _tmp.ToArray(); }))();
            }
        };
        return neighbours_4;
    }

    public static bool contains(Node[] nodes_8, Point p_9) {
        foreach (Node n_10 in nodes_8) {
            if (((n_10.pos.x == p_9.x) && (n_10.pos.y == p_9.y))) {
                return true;
            }
        };
        return false;
    }

    public static Node get_node(Node[] nodes_11, Point p_12) {
        foreach (Node n_13 in nodes_11) {
            if (((n_13.pos.x == p_12.x) && (n_13.pos.y == p_12.y))) {
                return n_13;
            }
        };
        return new Node{pos = p_12, parent = new Point{x = (0 - 1), y = (0 - 1)}, g = 0, h = 0, f = 0};
    }

    public static Point[] astar(long x_limit_14, long y_limit_15, Point start_16, Point goal_17) {
        Node[] open_18 = new Node[]{};
        Node[] closed_19 = new Node[]{};
        open_18 = ((Func<Node[]>)(() => { var _tmp = open_18.Cast<Node>().ToList(); _tmp.Add(new Node{pos = start_16, parent = new Point{x = (0 - 1), y = (0 - 1)}, g = 0, h = 0, f = 0}); return _tmp.ToArray(); }))();
        Node current_20 = _idx(open_18, 0);
        while ((open_18.Length > 0)) {
            long min_index_21 = 0;
            long i_22 = 1;
            while ((i_22 < open_18.Length)) {
                if ((_idx(open_18, i_22).f < _idx(open_18, min_index_21).f)) {
                    min_index_21 = i_22;
                }
                i_22 = (i_22 + 1);
            }
            current_20 = _idx(open_18, min_index_21);
            Node[] new_open_23 = new Node[]{};
            long j_24 = 0;
            while ((j_24 < open_18.Length)) {
                if ((j_24 != min_index_21)) {
                    new_open_23 = ((Func<Node[]>)(() => { var _tmp = new_open_23.Cast<Node>().ToList(); _tmp.Add(_idx(open_18, j_24)); return _tmp.ToArray(); }))();
                }
                j_24 = (j_24 + 1);
            }
            open_18 = new_open_23;
            closed_19 = ((Func<Node[]>)(() => { var _tmp = closed_19.Cast<Node>().ToList(); _tmp.Add(current_20); return _tmp.ToArray(); }))();
            if (((current_20.pos.x == goal_17.x) && (current_20.pos.y == goal_17.y))) {
                break;
            }
            Point[] neighbours_25 = Program.get_neighbours(current_20.pos, x_limit_14, y_limit_15);
            foreach (Point np_26 in neighbours_25) {
                if (Program.contains(closed_19, np_26)) {
                    continue;
                }
                long g_27 = (current_20.g + 1);
                long dx_28 = (goal_17.x - np_26.x);
                long dy_29 = (goal_17.y - np_26.y);
                long h_30 = ((dx_28 * dx_28) + (dy_29 * dy_29));
                long f_31 = (g_27 + h_30);
                bool skip_32 = false;
                foreach (Node node_33 in open_18) {
                    if ((((node_33.pos.x == np_26.x) && (node_33.pos.y == np_26.y)) && (node_33.f < f_31))) {
                        skip_32 = true;
                    }
                }
                if (skip_32) {
                    continue;
                }
                open_18 = ((Func<Node[]>)(() => { var _tmp = open_18.Cast<Node>().ToList(); _tmp.Add(new Node{pos = np_26, parent = current_20.pos, g = g_27, h = h_30, f = f_31}); return _tmp.ToArray(); }))();
            }
        };
        Point[] path_34 = new Point[]{};
        path_34 = ((Func<Point[]>)(() => { var _tmp = path_34.Cast<Point>().ToList(); _tmp.Add(current_20.pos); return _tmp.ToArray(); }))();
        while ((!((current_20.parent.x == (0 - 1)) && (current_20.parent.y == (0 - 1))))) {
            current_20 = Program.get_node(closed_19, current_20.parent);
            path_34 = ((Func<Point[]>)(() => { var _tmp = path_34.Cast<Point>().ToList(); _tmp.Add(current_20.pos); return _tmp.ToArray(); }))();
        };
        Point[] rev_35 = new Point[]{};
        long k_36 = (path_34.Length - 1);
        while ((k_36 >= 0)) {
            rev_35 = ((Func<Point[]>)(() => { var _tmp = rev_35.Cast<Point>().ToList(); _tmp.Add(_idx(path_34, k_36)); return _tmp.ToArray(); }))();
            k_36 = (k_36 - 1);
        };
        return rev_35;
    }

    public static long[][] create_world(long x_limit_37, long y_limit_38) {
        long[][] world_39 = new long[][]{};
        long i_40 = 0;
        while ((i_40 < x_limit_37)) {
            long[] row_41 = new long[]{};
            long j_42 = 0;
            while ((j_42 < y_limit_38)) {
                row_41 = ((Func<long[]>)(() => { var _tmp = row_41.Cast<long>().ToList(); _tmp.Add(0); return _tmp.ToArray(); }))();
                j_42 = (j_42 + 1);
            }
            world_39 = ((Func<long[][]>)(() => { var _tmp = world_39.Cast<long[]>().ToList(); _tmp.Add(row_41); return _tmp.ToArray(); }))();
            i_40 = (i_40 + 1);
        };
        return world_39;
    }

    public static void mark_path(long[][] world_43, Point[] path_44) {
        foreach (Point p_45 in path_44) {
            _idx(world_43, p_45.x)[(int)(p_45.y)] = 1;
        };
    }

    public static void print_world(long[][] world_46) {
        foreach (long[] row_47 in world_46) {
            Console.WriteLine(Program._fmtTop(_fmtStr(row_47)));
        };
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop((((((((("path from (" + _fmtStr(start_50.x)) + ", ") + _fmtStr(start_50.y)) + ") to (") + _fmtStr(goal_51.x)) + ", ") + _fmtStr(goal_51.y)) + ")")));
            long[][] world_53 = Program.create_world(world_x_48, world_y_49);
            Program.mark_path(world_53, path_52);
            Program.print_world(world_53);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
