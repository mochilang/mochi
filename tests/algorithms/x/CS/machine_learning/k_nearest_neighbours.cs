// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class PointLabel {
    public double[] point;
    public long label;
    public override string ToString() => $"PointLabel {{point = {point}, label = {label}}}";
}
class KNN {
    public PointLabel[] data;
    public string[] labels;
    public override string ToString() => $"KNN {{data = {data}, labels = {labels}}}";
}
class DistLabel {
    public double dist;
    public long label;
    public override string ToString() => $"DistLabel {{dist = {dist.ToString("0.0")}, label = {label}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] train_X_30 = new double[][]{new double[]{0.0, 0.0}, new double[]{1.0, 0.0}, new double[]{0.0, 1.0}, new double[]{0.5, 0.5}, new double[]{3.0, 3.0}, new double[]{2.0, 3.0}, new double[]{3.0, 2.0}};
    static long[] train_y_31 = new long[]{0, 0, 0, 0, 1, 1, 1};
    static string[] classes_32 = new string[]{"A", "B"};
    static KNN knn_33 = Program.make_knn(train_X_30, train_y_31, classes_32);
    static double[] point_34 = new double[]{1.2, 1.2};
    public static double sqrtApprox(double x_0) {
        if ((x_0 <= 0.0)) {
            return 0.0;
        };
        double guess_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = ((guess_1 + (x_0 / guess_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static KNN make_knn(double[][] train_data_3, long[] train_target_4, string[] class_labels_5) {
        PointLabel[] items_6 = new PointLabel[]{};
        long i_7 = 0;
        while ((i_7 < train_data_3.Length)) {
            PointLabel pl_8 = new PointLabel{point = _idx(train_data_3, i_7), label = _idx(train_target_4, i_7)};
            items_6 = (Enumerable.ToArray(Enumerable.Append<PointLabel>(items_6, pl_8)));
            i_7 = (i_7 + 1);
        };
        return new KNN{data = items_6, labels = class_labels_5};
    }

    public static double euclidean_distance(double[] a_9, double[] b_10) {
        double sum_11 = 0.0;
        long i_12 = 0;
        while ((i_12 < a_9.Length)) {
            double diff_13 = (_idx(a_9, i_12) - _idx(b_10, i_12));
            sum_11 = (sum_11 + (diff_13 * diff_13));
            i_12 = (i_12 + 1);
        };
        return Program.sqrtApprox(sum_11);
    }

    public static string classify(KNN knn_14, double[] pred_point_15, long k_16) {
        DistLabel[] distances_17 = new DistLabel[]{};
        long i_18 = 0;
        while ((i_18 < knn_14.data.Length)) {
            double d_19 = Program.euclidean_distance(_idx(knn_14.data, i_18).point, pred_point_15);
            distances_17 = (Enumerable.ToArray(Enumerable.Append<DistLabel>(distances_17, new DistLabel{dist = d_19, label = _idx(knn_14.data, i_18).label})));
            i_18 = (i_18 + 1);
        };
        long[] votes_20 = new long[]{};
        long count_21 = 0;
        while ((count_21 < k_16)) {
            long min_index_22 = 0;
            long j_23 = 1;
            while ((j_23 < distances_17.Length)) {
                if ((_idx(distances_17, j_23).dist < _idx(distances_17, min_index_22).dist)) {
                    min_index_22 = j_23;
                }
                j_23 = (j_23 + 1);
            }
            votes_20 = (Enumerable.ToArray(Enumerable.Append<long>(votes_20, _idx(distances_17, min_index_22).label)));
            _idx(distances_17, min_index_22).dist = 1e18;
            count_21 = (count_21 + 1);
        };
        long[] tally_24 = new long[]{};
        long t_25 = 0;
        while ((t_25 < knn_14.labels.Length)) {
            tally_24 = (Enumerable.ToArray(Enumerable.Append<long>(tally_24, 0)));
            t_25 = (t_25 + 1);
        };
        long v_26 = 0;
        while ((v_26 < votes_20.Length)) {
            long lbl_27 = _idx(votes_20, v_26);
            tally_24[(int)(lbl_27)] = (_idx(tally_24, lbl_27) + 1);
            v_26 = (v_26 + 1);
        };
        long max_idx_28 = 0;
        long m_29 = 1;
        while ((m_29 < tally_24.Length)) {
            if ((_idx(tally_24, m_29) > _idx(tally_24, max_idx_28))) {
                max_idx_28 = m_29;
            }
            m_29 = (m_29 + 1);
        };
        return _idx(knn_14.labels, max_idx_28);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.classify(knn_33, point_34, 5)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
