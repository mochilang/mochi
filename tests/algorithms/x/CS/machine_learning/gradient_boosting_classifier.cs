// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Stump {
    public long feature;
    public double threshold;
    public double left;
    public double right;
    public override string ToString() => $"Stump {{feature = {feature}, threshold = {threshold.ToString("0.0")}, left = {left.ToString("0.0")}, right = {right.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] features_67 = new double[][]{new double[]{1.0}, new double[]{2.0}, new double[]{3.0}, new double[]{4.0}};
    static double[] target_68 = new double[]{-1.0, -1.0, 1.0, 1.0};
    static Stump[] models_69 = Program.fit(5, 0.5, features_67, target_68);
    static double[] predictions_70 = Program.predict(models_69, features_67, 0.5);
    static double acc_71 = Program.accuracy(predictions_70, target_68);
    public static double exp_approx(double x_0) {
        double term_1 = 1.0;
        double sum_2 = 1.0;
        long i_3 = 1;
        while ((i_3 < 10)) {
            term_1 = ((term_1 * x_0) / Convert.ToDouble(i_3));
            sum_2 = (sum_2 + term_1);
            i_3 = (i_3 + 1);
        };
        return sum_2;
    }

    public static double signf(double x_4) {
        if ((x_4 >= 0.0)) {
            return 1.0;
        };
        return -1.0;
    }

    public static double[] gradient(double[] target_5, double[] preds_6) {
        long n_7 = target_5.Length;
        double[] residuals_8 = new double[]{};
        long i_9 = 0;
        while ((i_9 < n_7)) {
            double t_10 = target_5[(int)(i_9)];
            double y_11 = preds_6[(int)(i_9)];
            double exp_val_12 = Program.exp_approx((t_10 * y_11));
            double res_13 = (-t_10 / (1.0 + exp_val_12));
            residuals_8 = (Enumerable.ToArray(Enumerable.Append<double>(residuals_8, res_13)));
            i_9 = (i_9 + 1);
        };
        return residuals_8;
    }

    public static double[] predict_raw(Stump[] models_14, double[][] features_15, double learning_rate_16) {
        long n_17 = features_15.Length;
        double[] preds_18 = new double[]{};
        long i_19 = 0;
        while ((i_19 < n_17)) {
            preds_18 = (Enumerable.ToArray(Enumerable.Append<double>(preds_18, 0.0)));
            i_19 = (i_19 + 1);
        };
        long m_20 = 0;
        while ((m_20 < models_14.Length)) {
            Stump stump_21 = models_14[(int)(m_20)];
            i_19 = 0;
            while ((i_19 < n_17)) {
                double value_22 = features_15[(int)(i_19)][(int)(stump_21.feature)];
                if ((value_22 <= stump_21.threshold)) {
                    preds_18[i_19] = (preds_18[(int)(i_19)] + (learning_rate_16 * stump_21.left));
                } else {
                    preds_18[i_19] = (preds_18[(int)(i_19)] + (learning_rate_16 * stump_21.right));
                }
                i_19 = (i_19 + 1);
            }
            m_20 = (m_20 + 1);
        };
        return preds_18;
    }

    public static double[] predict(Stump[] models_23, double[][] features_24, double learning_rate_25) {
        double[] raw_26 = Program.predict_raw(models_23, features_24, learning_rate_25);
        double[] result_27 = new double[]{};
        long i_28 = 0;
        while ((i_28 < raw_26.Length)) {
            result_27 = (Enumerable.ToArray(Enumerable.Append<double>(result_27, Program.signf(raw_26[(int)(i_28)]))));
            i_28 = (i_28 + 1);
        };
        return result_27;
    }

    public static Stump train_stump(double[][] features_29, double[] residuals_30) {
        long n_samples_31 = features_29.Length;
        long n_features_32 = features_29[(int)(0)].Length;
        long best_feature_33 = 0;
        double best_threshold_34 = 0.0;
        double best_error_35 = 1e+09;
        double best_left_36 = 0.0;
        double best_right_37 = 0.0;
        long j_38 = 0;
        while ((j_38 < n_features_32)) {
            long t_index_39 = 0;
            while ((t_index_39 < n_samples_31)) {
                double t_40 = features_29[(int)(t_index_39)][(int)(j_38)];
                double sum_left_41 = 0.0;
                long count_left_42 = 0;
                double sum_right_43 = 0.0;
                long count_right_44 = 0;
                long i_45 = 0;
                while ((i_45 < n_samples_31)) {
                    if ((features_29[(int)(i_45)][(int)(j_38)] <= t_40)) {
                        sum_left_41 = (sum_left_41 + residuals_30[(int)(i_45)]);
                        count_left_42 = (count_left_42 + 1);
                    } else {
                        sum_right_43 = (sum_right_43 + residuals_30[(int)(i_45)]);
                        count_right_44 = (count_right_44 + 1);
                    }
                    i_45 = (i_45 + 1);
                }
                double left_val_46 = 0.0;
                if ((count_left_42 != 0)) {
                    left_val_46 = (sum_left_41 / Convert.ToDouble(count_left_42));
                }
                double right_val_47 = 0.0;
                if ((count_right_44 != 0)) {
                    right_val_47 = (sum_right_43 / Convert.ToDouble(count_right_44));
                }
                double error_48 = 0.0;
                i_45 = 0;
                while ((i_45 < n_samples_31)) {
                    double pred_49 = ((features_29[(int)(i_45)][(int)(j_38)] <= t_40) ? left_val_46 : right_val_47);
                    double diff_50 = (residuals_30[(int)(i_45)] - pred_49);
                    error_48 = (error_48 + (diff_50 * diff_50));
                    i_45 = (i_45 + 1);
                }
                if ((error_48 < best_error_35)) {
                    best_error_35 = error_48;
                    best_feature_33 = j_38;
                    best_threshold_34 = t_40;
                    best_left_36 = left_val_46;
                    best_right_37 = right_val_47;
                }
                t_index_39 = (t_index_39 + 1);
            }
            j_38 = (j_38 + 1);
        };
        return new Stump{feature = best_feature_33, threshold = best_threshold_34, left = best_left_36, right = best_right_37};
    }

    public static Stump[] fit(long n_estimators_51, double learning_rate_52, double[][] features_53, double[] target_54) {
        Stump[] models_55 = new Stump[]{};
        long m_56 = 0;
        while ((m_56 < n_estimators_51)) {
            double[] preds_57 = Program.predict_raw(models_55, features_53, learning_rate_52);
            double[] grad_58 = Program.gradient(target_54, preds_57);
            double[] residuals_59 = new double[]{};
            long i_60 = 0;
            while ((i_60 < grad_58.Length)) {
                residuals_59 = (Enumerable.ToArray(Enumerable.Append<double>(residuals_59, -grad_58[(int)(i_60)])));
                i_60 = (i_60 + 1);
            }
            Stump stump_61 = Program.train_stump(features_53, residuals_59);
            models_55 = (Enumerable.ToArray(Enumerable.Append<Stump>(models_55, stump_61)));
            m_56 = (m_56 + 1);
        };
        return models_55;
    }

    public static double accuracy(double[] preds_62, double[] target_63) {
        long n_64 = target_63.Length;
        long correct_65 = 0;
        long i_66 = 0;
        while ((i_66 < n_64)) {
            if ((preds_62[(int)(i_66)] == target_63[(int)(i_66)])) {
                correct_65 = (correct_65 + 1);
            }
            i_66 = (i_66 + 1);
        };
        return (Convert.ToDouble(correct_65) / Convert.ToDouble(n_64));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("Accuracy: " + _fmtStr(acc_71))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
