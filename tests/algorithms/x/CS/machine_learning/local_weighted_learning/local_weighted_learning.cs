// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string __name__ = "__main__";
    static double[][] x_train_72 = new double[][]{new double[]{16.99, 10.34}, new double[]{21.01, 23.68}, new double[]{24.59, 25.69}};
    static double[] y_train_73 = new double[]{1.01, 1.66, 3.5};
    static double[] preds_74 = Program.local_weight_regression(x_train_72, y_train_73, 0.6);
    public static double expApprox(double x_0) {
        if ((x_0 < 0.0)) {
            return (1.0 / Program.expApprox(-x_0));
        };
        if ((x_0 > 1.0)) {
            double half_1 = Program.expApprox((x_0 / 2.0));
            return (half_1 * half_1);
        };
        double sum_2 = 1.0;
        double term_3 = 1.0;
        long n_4 = 1;
        while ((n_4 < 20)) {
            term_3 = ((term_3 * x_0) / Convert.ToDouble(n_4));
            sum_2 = (sum_2 + term_3);
            n_4 = (n_4 + 1);
        };
        return sum_2;
    }

    public static double[][] transpose(double[][] mat_5) {
        long rows_6 = mat_5.Length;
        long cols_7 = _idx(mat_5, 0).Length;
        double[][] res_8 = new double[][]{};
        long i_9 = 0;
        while ((i_9 < cols_7)) {
            double[] row_10 = new double[]{};
            long j_11 = 0;
            while ((j_11 < rows_6)) {
                row_10 = (Enumerable.ToArray(Enumerable.Append<double>(row_10, _idx(_idx(mat_5, j_11), i_9))));
                j_11 = (j_11 + 1);
            }
            res_8 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_8, row_10)));
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    public static double[][] matMul(double[][] a_12, double[][] b_13) {
        long a_rows_14 = a_12.Length;
        long a_cols_15 = _idx(a_12, 0).Length;
        long b_cols_16 = _idx(b_13, 0).Length;
        double[][] res_17 = new double[][]{};
        long i_18 = 0;
        while ((i_18 < a_rows_14)) {
            double[] row_19 = new double[]{};
            long j_20 = 0;
            while ((j_20 < b_cols_16)) {
                double sum_21 = 0.0;
                long k_22 = 0;
                while ((k_22 < a_cols_15)) {
                    sum_21 = (sum_21 + (_idx(_idx(a_12, i_18), k_22) * _idx(_idx(b_13, k_22), j_20)));
                    k_22 = (k_22 + 1);
                }
                row_19 = (Enumerable.ToArray(Enumerable.Append<double>(row_19, sum_21)));
                j_20 = (j_20 + 1);
            }
            res_17 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_17, row_19)));
            i_18 = (i_18 + 1);
        };
        return res_17;
    }

    public static double[][] matInv(double[][] mat_23) {
        long n_24 = mat_23.Length;
        double[][] aug_25 = new double[][]{};
        long i_26 = 0;
        while ((i_26 < n_24)) {
            double[] row_27 = new double[]{};
            long j_28 = 0;
            while ((j_28 < n_24)) {
                row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, _idx(_idx(mat_23, i_26), j_28))));
                j_28 = (j_28 + 1);
            }
            j_28 = 0;
            while ((j_28 < n_24)) {
                if ((i_26 == j_28)) {
                    row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, 1.0)));
                } else {
                    row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, 0.0)));
                }
                j_28 = (j_28 + 1);
            }
            aug_25 = (Enumerable.ToArray(Enumerable.Append<double[]>(aug_25, row_27)));
            i_26 = (i_26 + 1);
        };
        long col_29 = 0;
        while ((col_29 < n_24)) {
            double pivot_30 = _idx(_idx(aug_25, col_29), col_29);
            if ((pivot_30 == 0.0)) {
                throw new Exception("Matrix is singular");
            }
            long j_31 = 0;
            while ((j_31 < (2 * n_24))) {
                _idx(aug_25, col_29)[(int)(j_31)] = (_idx(_idx(aug_25, col_29), j_31) / pivot_30);
                j_31 = (j_31 + 1);
            }
            long r_32 = 0;
            while ((r_32 < n_24)) {
                if ((r_32 != col_29)) {
                    double factor_33 = _idx(_idx(aug_25, r_32), col_29);
                    j_31 = 0;
                    while ((j_31 < (2 * n_24))) {
                        _idx(aug_25, r_32)[(int)(j_31)] = (_idx(_idx(aug_25, r_32), j_31) - (factor_33 * _idx(_idx(aug_25, col_29), j_31)));
                        j_31 = (j_31 + 1);
                    }
                }
                r_32 = (r_32 + 1);
            }
            col_29 = (col_29 + 1);
        };
        double[][] inv_34 = new double[][]{};
        i_26 = 0;
        while ((i_26 < n_24)) {
            double[] row_35 = new double[]{};
            long j_36 = 0;
            while ((j_36 < n_24)) {
                row_35 = (Enumerable.ToArray(Enumerable.Append<double>(row_35, _idx(_idx(aug_25, i_26), (j_36 + n_24)))));
                j_36 = (j_36 + 1);
            }
            inv_34 = (Enumerable.ToArray(Enumerable.Append<double[]>(inv_34, row_35)));
            i_26 = (i_26 + 1);
        };
        return inv_34;
    }

    public static double[][] weight_matrix(double[] point_37, double[][] x_train_38, double tau_39) {
        long m_40 = x_train_38.Length;
        double[][] weights_41 = new double[][]{};
        long i_42 = 0;
        while ((i_42 < m_40)) {
            double[] row_43 = new double[]{};
            long j_44 = 0;
            while ((j_44 < m_40)) {
                if ((i_42 == j_44)) {
                    row_43 = (Enumerable.ToArray(Enumerable.Append<double>(row_43, 1.0)));
                } else {
                    row_43 = (Enumerable.ToArray(Enumerable.Append<double>(row_43, 0.0)));
                }
                j_44 = (j_44 + 1);
            }
            weights_41 = (Enumerable.ToArray(Enumerable.Append<double[]>(weights_41, row_43)));
            i_42 = (i_42 + 1);
        };
        long j_45 = 0;
        while ((j_45 < m_40)) {
            double diff_sq_46 = 0.0;
            long k_47 = 0;
            while ((k_47 < point_37.Length)) {
                double diff_48 = (_idx(point_37, k_47) - _idx(_idx(x_train_38, j_45), k_47));
                diff_sq_46 = (diff_sq_46 + (diff_48 * diff_48));
                k_47 = (k_47 + 1);
            }
            _idx(weights_41, j_45)[(int)(j_45)] = Program.expApprox((-diff_sq_46 / ((2.0 * tau_39) * tau_39)));
            j_45 = (j_45 + 1);
        };
        return weights_41;
    }

    public static double[][] local_weight(double[] point_49, double[][] x_train_50, double[] y_train_51, double tau_52) {
        double[][] w_53 = Program.weight_matrix(point_49, x_train_50, tau_52);
        double[][] x_t_54 = Program.transpose(x_train_50);
        double[][] x_t_w_55 = Program.matMul(x_t_54, w_53);
        double[][] x_t_w_x_56 = Program.matMul(x_t_w_55, x_train_50);
        double[][] inv_part_57 = Program.matInv(x_t_w_x_56);
        double[][] y_col_58 = new double[][]{};
        long i_59 = 0;
        while ((i_59 < y_train_51.Length)) {
            y_col_58 = (Enumerable.ToArray(Enumerable.Append<double[]>(y_col_58, new double[]{_idx(y_train_51, i_59)})));
            i_59 = (i_59 + 1);
        };
        double[][] x_t_w_y_60 = Program.matMul(x_t_w_55, y_col_58);
        return Program.matMul(inv_part_57, x_t_w_y_60);
    }

    public static double[] local_weight_regression(double[][] x_train_61, double[] y_train_62, double tau_63) {
        long m_64 = x_train_61.Length;
        double[] preds_65 = new double[]{};
        long i_66 = 0;
        while ((i_66 < m_64)) {
            double[][] theta_67 = Program.local_weight(_idx(x_train_61, i_66), x_train_61, y_train_62, tau_63);
            double[] weights_vec_68 = new double[]{};
            long k_69 = 0;
            while ((k_69 < theta_67.Length)) {
                weights_vec_68 = (Enumerable.ToArray(Enumerable.Append<double>(weights_vec_68, _idx(_idx(theta_67, k_69), 0))));
                k_69 = (k_69 + 1);
            }
            double pred_70 = 0.0;
            long j_71 = 0;
            while ((j_71 < _idx(x_train_61, i_66).Length)) {
                pred_70 = (pred_70 + (_idx(_idx(x_train_61, i_66), j_71) * _idx(weights_vec_68, j_71)));
                j_71 = (j_71 + 1);
            }
            preds_65 = (Enumerable.ToArray(Enumerable.Append<double>(preds_65, pred_70)));
            i_66 = (i_66 + 1);
        };
        return preds_65;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(JsonSerializer.Serialize(preds_74));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
