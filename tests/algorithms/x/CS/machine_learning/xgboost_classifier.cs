// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Stump {
    public long feature;
    public double threshold;
    public double left;
    public double right;
    public override string ToString() => $"Stump {{feature = {feature}, threshold = {threshold.ToString("0.0")}, left = {left.ToString("0.0")}, right = {right.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static double mean(double[] xs_0) {
        double sum_1 = 0.0;
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            sum_1 = (sum_1 + _idx(xs_0, i_2));
            i_2 = (i_2 + 1);
        };
        return (sum_1 / (xs_0.Length * 1.0));
    }

    public static double stump_predict(Stump s_3, double[] x_4) {
        if ((_idx(x_4, s_3.feature) < s_3.threshold)) {
            return s_3.left;
        };
        return s_3.right;
    }

    public static Stump train_stump(double[][] features_5, double[] residuals_6) {
        long best_feature_7 = 0;
        double best_threshold_8 = 0.0;
        double best_error_9 = 1e09;
        double best_left_10 = 0.0;
        double best_right_11 = 0.0;
        long num_features_12 = _idx(features_5, 0).Length;
        long f_13 = 0;
        while ((f_13 < num_features_12)) {
            long i_14 = 0;
            while ((i_14 < features_5.Length)) {
                double threshold_15 = _idx(_idx(features_5, i_14), f_13);
                double[] left_16 = new double[]{};
                double[] right_17 = new double[]{};
                long j_18 = 0;
                while ((j_18 < features_5.Length)) {
                    if ((_idx(_idx(features_5, j_18), f_13) < threshold_15)) {
                        left_16 = (Enumerable.ToArray(Enumerable.Concat(left_16, new double[]{_idx(residuals_6, j_18)})));
                    } else {
                        right_17 = (Enumerable.ToArray(Enumerable.Concat(right_17, new double[]{_idx(residuals_6, j_18)})));
                    }
                    j_18 = (j_18 + 1);
                }
                if (((left_16.Length != 0) && (right_17.Length != 0))) {
                    double left_mean_19 = Program.mean(left_16);
                    double right_mean_20 = Program.mean(right_17);
                    double err_21 = 0.0;
                    j_18 = 0;
                    while ((j_18 < features_5.Length)) {
                        double pred_22 = ((_idx(_idx(features_5, j_18), f_13) < threshold_15) ? left_mean_19 : right_mean_20);
                        double diff_23 = (_idx(residuals_6, j_18) - pred_22);
                        err_21 = (err_21 + (diff_23 * diff_23));
                        j_18 = (j_18 + 1);
                    }
                    if ((err_21 < best_error_9)) {
                        best_error_9 = err_21;
                        best_feature_7 = f_13;
                        best_threshold_8 = threshold_15;
                        best_left_10 = left_mean_19;
                        best_right_11 = right_mean_20;
                    }
                }
                i_14 = (i_14 + 1);
            }
            f_13 = (f_13 + 1);
        };
        return new Stump{feature = best_feature_7, threshold = best_threshold_8, left = best_left_10, right = best_right_11};
    }

    public static Stump[] boost(double[][] features_24, long[] targets_25, long rounds_26) {
        Stump[] model_27 = new Stump[]{};
        double[] preds_28 = new double[]{};
        long i_29 = 0;
        while ((i_29 < targets_25.Length)) {
            preds_28 = (Enumerable.ToArray(Enumerable.Concat(preds_28, new double[]{0.0})));
            i_29 = (i_29 + 1);
        };
        long r_30 = 0;
        while ((r_30 < rounds_26)) {
            double[] residuals_31 = new double[]{};
            long j_32 = 0;
            while ((j_32 < targets_25.Length)) {
                residuals_31 = (Enumerable.ToArray(Enumerable.Concat(residuals_31, new double[]{(_idx(targets_25, j_32) - _idx(preds_28, j_32))})));
                j_32 = (j_32 + 1);
            }
            Stump stump_33 = Program.train_stump(features_24, residuals_31);
            model_27 = (Enumerable.ToArray(Enumerable.Concat(model_27, new Stump[]{stump_33})));
            j_32 = 0;
            while ((j_32 < preds_28.Length)) {
                preds_28[(int)(j_32)] = (_idx(preds_28, j_32) + Program.stump_predict(stump_33, _idx(features_24, j_32)));
                j_32 = (j_32 + 1);
            }
            r_30 = (r_30 + 1);
        };
        return model_27;
    }

    public static double predict(Stump[] model_34, double[] x_35) {
        double score_36 = 0.0;
        long i_37 = 0;
        while ((i_37 < model_34.Length)) {
            Stump s_38 = _idx(model_34, i_37);
            if ((_idx(x_35, s_38.feature) < s_38.threshold)) {
                score_36 = (score_36 + s_38.left);
            } else {
                score_36 = (score_36 + s_38.right);
            }
            i_37 = (i_37 + 1);
        };
        return score_36;
    }

    public static void main() {
        double[][] features_39 = new double[][]{new double[]{5.1, 3.5}, new double[]{4.9, 3.0}, new double[]{6.2, 3.4}, new double[]{5.9, 3.0}};
        long[] targets_40 = new long[]{0, 0, 1, 1};
        Stump[] model_41 = Program.boost(features_39, targets_40, 3);
        string out_42 = "";
        long i_43 = 0;
        while ((i_43 < features_39.Length)) {
            double s_44 = Program.predict(model_41, _idx(features_39, i_43));
            long label_45 = ((s_44 >= 0.5) ? 1 : 0);
            if ((i_43 == 0)) {
                out_42 = _fmtStr(label_45);
            } else {
                out_42 = ((out_42 + " ") + _fmtStr(label_45));
            }
            i_43 = (i_43 + 1);
        };
        Console.WriteLine(Program._fmtTop(out_42));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
