// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class PCAResult {
    public double[][] transformed;
    public double[] variance_ratio;
    public override string ToString() => $"PCAResult {{transformed = {transformed}, variance_ratio = {variance_ratio}}}";
}
class Eigen {
    public double[] values;
    public double[][] vectors;
    public override string ToString() => $"Eigen {{values = {values}, vectors = {vectors}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] data_82 = new double[][]{new double[]{2.5, 2.4}, new double[]{0.5, 0.7}, new double[]{2.2, 2.9}, new double[]{1.9, 2.2}, new double[]{3.1, 3.0}, new double[]{2.3, 2.7}, new double[]{2.0, 1.6}, new double[]{1.0, 1.1}, new double[]{1.5, 1.6}, new double[]{1.1, 0.9}};
    static PCAResult result_83 = Program.apply_pca(data_82, 2);
    public static double sqrt(double x_0) {
        double guess_1 = ((x_0 > 1.0) ? (x_0 / 2.0) : 1.0);
        long i_2 = 0;
        while ((i_2 < 20)) {
            guess_1 = (0.5 * (guess_1 + (x_0 / guess_1)));
            i_2 = (i_2 + 1);
        };
        return guess_1;
    }

    public static double mean(double[] xs_3) {
        double sum_4 = 0.0;
        long i_5 = 0;
        while ((i_5 < xs_3.Length)) {
            sum_4 = (sum_4 + _idx(xs_3, i_5));
            i_5 = (i_5 + 1);
        };
        return (sum_4 / xs_3.Length);
    }

    public static double[][] standardize(double[][] data_6) {
        long n_samples_7 = data_6.Length;
        long n_features_8 = _idx(data_6, 0).Length;
        double[] means_9 = new double[]{};
        double[] stds_10 = new double[]{};
        long j_11 = 0;
        while ((j_11 < n_features_8)) {
            double[] column_12 = new double[]{};
            long i_13 = 0;
            while ((i_13 < n_samples_7)) {
                column_12 = (Enumerable.ToArray(Enumerable.Append<double>(column_12, _idx(_idx(data_6, i_13), j_11))));
                i_13 = (i_13 + 1);
            }
            double m_14 = Program.mean(column_12);
            means_9 = (Enumerable.ToArray(Enumerable.Append<double>(means_9, m_14)));
            double variance_15 = 0.0;
            long k_16 = 0;
            while ((k_16 < n_samples_7)) {
                double diff_17 = (_idx(column_12, k_16) - m_14);
                variance_15 = (variance_15 + (diff_17 * diff_17));
                k_16 = (k_16 + 1);
            }
            stds_10 = (Enumerable.ToArray(Enumerable.Append<double>(stds_10, Program.sqrt((variance_15 / (n_samples_7 - 1))))));
            j_11 = (j_11 + 1);
        };
        double[][] standardized_18 = new double[][]{};
        long r_19 = 0;
        while ((r_19 < n_samples_7)) {
            double[] row_20 = new double[]{};
            long c_21 = 0;
            while ((c_21 < n_features_8)) {
                row_20 = (Enumerable.ToArray(Enumerable.Append<double>(row_20, ((_idx(_idx(data_6, r_19), c_21) - _idx(means_9, c_21)) / _idx(stds_10, c_21)))));
                c_21 = (c_21 + 1);
            }
            standardized_18 = (Enumerable.ToArray(Enumerable.Append<double[]>(standardized_18, row_20)));
            r_19 = (r_19 + 1);
        };
        return standardized_18;
    }

    public static double[][] covariance_matrix(double[][] data_22) {
        long n_samples_23 = data_22.Length;
        long n_features_24 = _idx(data_22, 0).Length;
        double[][] cov_25 = new double[][]{};
        long i_26 = 0;
        while ((i_26 < n_features_24)) {
            double[] row_27 = new double[]{};
            long j_28 = 0;
            while ((j_28 < n_features_24)) {
                double sum_29 = 0.0;
                long k_30 = 0;
                while ((k_30 < n_samples_23)) {
                    sum_29 = (sum_29 + (_idx(_idx(data_22, k_30), i_26) * _idx(_idx(data_22, k_30), j_28)));
                    k_30 = (k_30 + 1);
                }
                row_27 = (Enumerable.ToArray(Enumerable.Append<double>(row_27, (sum_29 / (n_samples_23 - 1)))));
                j_28 = (j_28 + 1);
            }
            cov_25 = (Enumerable.ToArray(Enumerable.Append<double[]>(cov_25, row_27)));
            i_26 = (i_26 + 1);
        };
        return cov_25;
    }

    public static double[] normalize(double[] vec_31) {
        double sum_32 = 0.0;
        long i_33 = 0;
        while ((i_33 < vec_31.Length)) {
            sum_32 = (sum_32 + (_idx(vec_31, i_33) * _idx(vec_31, i_33)));
            i_33 = (i_33 + 1);
        };
        double n_34 = Program.sqrt(sum_32);
        double[] res_35 = new double[]{};
        long j_36 = 0;
        while ((j_36 < vec_31.Length)) {
            res_35 = (Enumerable.ToArray(Enumerable.Append<double>(res_35, (_idx(vec_31, j_36) / n_34))));
            j_36 = (j_36 + 1);
        };
        return res_35;
    }

    public static Eigen eigen_decomposition_2x2(double[][] matrix_37) {
        double a_38 = _idx(_idx(matrix_37, 0), 0);
        double b_39 = _idx(_idx(matrix_37, 0), 1);
        double c_40 = _idx(_idx(matrix_37, 1), 1);
        double diff_41 = (a_38 - c_40);
        double discriminant_42 = Program.sqrt(((diff_41 * diff_41) + ((4.0 * b_39) * b_39)));
        double lambda1_43 = (((a_38 + c_40) + discriminant_42) / 2.0);
        double lambda2_44 = (((a_38 + c_40) - discriminant_42) / 2.0);
        double[] v1_45 = new double[]{};
        double[] v2_46 = new double[]{};
        if ((b_39 != 0.0)) {
            v1_45 = Program.normalize(new double[]{(lambda1_43 - c_40), b_39});
            v2_46 = Program.normalize(new double[]{(lambda2_44 - c_40), b_39});
        } else {
            v1_45 = new double[]{1.0, 0.0};
            v2_46 = new double[]{0.0, 1.0};
        };
        double[] eigenvalues_47 = new double[]{lambda1_43, lambda2_44};
        double[][] eigenvectors_48 = new double[][]{v1_45, v2_46};
        if ((_idx(eigenvalues_47, 0) < _idx(eigenvalues_47, 1))) {
            double tmp_val_49 = _idx(eigenvalues_47, 0);
            eigenvalues_47[(int)(0)] = _idx(eigenvalues_47, 1);
            eigenvalues_47[(int)(1)] = tmp_val_49;
            double[] tmp_vec_50 = _idx(eigenvectors_48, 0);
            eigenvectors_48[(int)(0)] = _idx(eigenvectors_48, 1);
            eigenvectors_48[(int)(1)] = tmp_vec_50;
        };
        return new Eigen{values = eigenvalues_47, vectors = eigenvectors_48};
    }

    public static double[][] transpose(double[][] matrix_51) {
        long rows_52 = matrix_51.Length;
        long cols_53 = _idx(matrix_51, 0).Length;
        double[][] trans_54 = new double[][]{};
        long i_55 = 0;
        while ((i_55 < cols_53)) {
            double[] row_56 = new double[]{};
            long j_57 = 0;
            while ((j_57 < rows_52)) {
                row_56 = (Enumerable.ToArray(Enumerable.Append<double>(row_56, _idx(_idx(matrix_51, j_57), i_55))));
                j_57 = (j_57 + 1);
            }
            trans_54 = (Enumerable.ToArray(Enumerable.Append<double[]>(trans_54, row_56)));
            i_55 = (i_55 + 1);
        };
        return trans_54;
    }

    public static double[][] matrix_multiply(double[][] a_58, double[][] b_59) {
        long rows_a_60 = a_58.Length;
        long cols_a_61 = _idx(a_58, 0).Length;
        long rows_b_62 = b_59.Length;
        long cols_b_63 = _idx(b_59, 0).Length;
        if ((cols_a_61 != rows_b_62)) {
            throw new Exception("Incompatible matrices");
        };
        double[][] result_64 = new double[][]{};
        long i_65 = 0;
        while ((i_65 < rows_a_60)) {
            double[] row_66 = new double[]{};
            long j_67 = 0;
            while ((j_67 < cols_b_63)) {
                double sum_68 = 0.0;
                long k_69 = 0;
                while ((k_69 < cols_a_61)) {
                    sum_68 = (sum_68 + (_idx(_idx(a_58, i_65), k_69) * _idx(_idx(b_59, k_69), j_67)));
                    k_69 = (k_69 + 1);
                }
                row_66 = (Enumerable.ToArray(Enumerable.Append<double>(row_66, sum_68)));
                j_67 = (j_67 + 1);
            }
            result_64 = (Enumerable.ToArray(Enumerable.Append<double[]>(result_64, row_66)));
            i_65 = (i_65 + 1);
        };
        return result_64;
    }

    public static PCAResult apply_pca(double[][] data_70, long n_components_71) {
        double[][] standardized_72 = Program.standardize(data_70);
        double[][] cov_73 = Program.covariance_matrix(standardized_72);
        Eigen eig_74 = Program.eigen_decomposition_2x2(cov_73);
        double[] eigenvalues_75 = eig_74.values;
        double[][] eigenvectors_76 = eig_74.vectors;
        double[][] components_77 = Program.transpose(eigenvectors_76);
        double[][] transformed_78 = Program.matrix_multiply(standardized_72, components_77);
        double total_79 = (_idx(eigenvalues_75, 0) + _idx(eigenvalues_75, 1));
        double[] ratios_80 = new double[]{};
        long i_81 = 0;
        while ((i_81 < n_components_71)) {
            ratios_80 = (Enumerable.ToArray(Enumerable.Append<double>(ratios_80, (_idx(eigenvalues_75, i_81) / total_79))));
            i_81 = (i_81 + 1);
        };
        return new PCAResult{transformed = transformed_78, variance_ratio = ratios_80};
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Transformed Data (first 5 rows):"));
            long idx_84 = 0;
            while ((idx_84 < 5)) {
                Console.WriteLine(Program._fmtTop(_idx(result_83.transformed, idx_84)));
                idx_84 = (idx_84 + 1);
            }
            Console.WriteLine(Program._fmtTop("Explained Variance Ratio:"));
            Console.WriteLine(Program._fmtTop(result_83.variance_ratio));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
