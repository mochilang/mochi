// Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static double[][] data_x_41 = new double[][]{new double[]{1.0, 1.0}, new double[]{1.0, 2.0}, new double[]{1.0, 3.0}};
    static double[] data_y_42 = new double[]{1.0, 2.0, 3.0};
    static double[] theta_43 = Program.run_linear_regression(data_x_41, data_y_42);
    public static double dot(double[] x_0, double[] y_1) {
        double sum_2 = 0.0;
        long i_3 = 0;
        while ((i_3 < x_0.Length)) {
            sum_2 = (sum_2 + (_idx(x_0, i_3) * _idx(y_1, i_3)));
            i_3 = (i_3 + 1);
        };
        return sum_2;
    }

    public static double[] run_steep_gradient_descent(double[][] data_x_4, double[] data_y_5, long len_data_6, double alpha_7, double[] theta_8) {
        double[] gradients_9 = new double[]{};
        long j_10 = 0;
        while ((j_10 < theta_8.Length)) {
            gradients_9 = (Enumerable.ToArray(Enumerable.Append<double>(gradients_9, 0.0)));
            j_10 = (j_10 + 1);
        };
        long i_11 = 0;
        while ((i_11 < len_data_6)) {
            double prediction_12 = Program.dot(theta_8, _idx(data_x_4, i_11));
            double error_13 = (prediction_12 - _idx(data_y_5, i_11));
            long k_14 = 0;
            while ((k_14 < theta_8.Length)) {
                gradients_9[(int)(k_14)] = (_idx(gradients_9, k_14) + (error_13 * _idx(_idx(data_x_4, i_11), k_14)));
                k_14 = (k_14 + 1);
            }
            i_11 = (i_11 + 1);
        };
        double[] t_15 = new double[]{};
        long g_16 = 0;
        while ((g_16 < theta_8.Length)) {
            t_15 = (Enumerable.ToArray(Enumerable.Append<double>(t_15, (_idx(theta_8, g_16) - ((alpha_7 / len_data_6) * _idx(gradients_9, g_16))))));
            g_16 = (g_16 + 1);
        };
        return t_15;
    }

    public static double sum_of_square_error(double[][] data_x_17, double[] data_y_18, long len_data_19, double[] theta_20) {
        double total_21 = 0.0;
        long i_22 = 0;
        while ((i_22 < len_data_19)) {
            double prediction_23 = Program.dot(theta_20, _idx(data_x_17, i_22));
            double diff_24 = (prediction_23 - _idx(data_y_18, i_22));
            total_21 = (total_21 + (diff_24 * diff_24));
            i_22 = (i_22 + 1);
        };
        return (total_21 / (2.0 * len_data_19));
    }

    public static double[] run_linear_regression(double[][] data_x_25, double[] data_y_26) {
        long iterations_27 = 10;
        double alpha_28 = 0.01;
        long no_features_29 = _idx(data_x_25, 0).Length;
        long len_data_30 = data_x_25.Length;
        double[] theta_31 = new double[]{};
        long i_32 = 0;
        while ((i_32 < no_features_29)) {
            theta_31 = (Enumerable.ToArray(Enumerable.Append<double>(theta_31, 0.0)));
            i_32 = (i_32 + 1);
        };
        long iter_33 = 0;
        while ((iter_33 < iterations_27)) {
            theta_31 = Program.run_steep_gradient_descent(data_x_25, data_y_26, len_data_30, alpha_28, theta_31);
            double error_34 = Program.sum_of_square_error(data_x_25, data_y_26, len_data_30, theta_31);
            Console.WriteLine(Program._fmtTop(((("At Iteration " + _fmtStr((iter_33 + 1))) + " - Error is ") + _fmtStr(error_34))));
            iter_33 = (iter_33 + 1);
        };
        return theta_31;
    }

    public static double absf(double x_35) {
        if ((x_35 < 0.0)) {
            return -x_35;
        } else {
            return x_35;
        };
        return default(double);
    }

    public static double mean_absolute_error(double[] predicted_y_36, double[] original_y_37) {
        double total_38 = 0.0;
        long i_39 = 0;
        while ((i_39 < predicted_y_36.Length)) {
            double diff_40 = Program.absf((_idx(predicted_y_36, i_39) - _idx(original_y_37, i_39)));
            total_38 = (total_38 + diff_40);
            i_39 = (i_39 + 1);
        };
        return (total_38 / predicted_y_36.Length);
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop("Resultant Feature vector :"));
            long i_44 = 0;
            while ((i_44 < theta_43.Length)) {
                Console.WriteLine(Program._fmtTop(_fmtStr(_idx(theta_43, i_44))));
                i_44 = (i_44 + 1);
            }
            double[] predicted_y_45 = new double[]{3.0, -0.5, 2.0, 7.0};
            double[] original_y_46 = new double[]{2.5, 0.0, 2.0, 8.0};
            double mae_47 = Program.mean_absolute_error(predicted_y_45, original_y_46);
            Console.WriteLine(Program._fmtTop(("Mean Absolute Error : " + _fmtStr(mae_47))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
