// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static double int_to_float(long x_0) {
        return (x_0 * 1.0);
    }

    public static double abs_float(double x_1) {
        if ((x_1 < 0.0)) {
            return (0.0 - x_1);
        };
        return x_1;
    }

    public static double exp_approx(double x_2) {
        double term_3 = 1.0;
        double sum_4 = 1.0;
        long i_5 = 1;
        while ((i_5 < 10)) {
            term_3 = ((term_3 * x_2) / Program.int_to_float(i_5));
            sum_4 = (sum_4 + term_3);
            i_5 = (i_5 + 1);
        };
        return sum_4;
    }

    public static long floor_int(double x_6) {
        long i_7 = 0;
        while ((Program.int_to_float((i_7 + 1)) <= x_6)) {
            i_7 = (i_7 + 1);
        };
        return i_7;
    }

    public static double dot(double[] a_8, double[] b_9) {
        double s_10 = 0.0;
        long i_11 = 0;
        while ((i_11 < a_8.Length)) {
            s_10 = (s_10 + (a_8[(int)(i_11)] * b_9[(int)(i_11)]));
            i_11 = (i_11 + 1);
        };
        return s_10;
    }

    public static double[][] transpose(double[][] m_12) {
        long rows_13 = m_12.Length;
        long cols_14 = m_12[(int)(0)].Length;
        double[][] res_15 = new double[][]{};
        long j_16 = 0;
        while ((j_16 < cols_14)) {
            double[] row_17 = new double[]{};
            long i_18 = 0;
            while ((i_18 < rows_13)) {
                row_17 = (Enumerable.ToArray(Enumerable.Append<double>(row_17, m_12[(int)(i_18)][(int)(j_16)])));
                i_18 = (i_18 + 1);
            }
            res_15 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_15, row_17)));
            j_16 = (j_16 + 1);
        };
        return res_15;
    }

    public static double[][] matmul(double[][] a_19, double[][] b_20) {
        long n_21 = a_19.Length;
        long m_22 = b_20[(int)(0)].Length;
        long p_23 = b_20.Length;
        double[][] res_24 = new double[][]{};
        long i_25 = 0;
        while ((i_25 < n_21)) {
            double[] row_26 = new double[]{};
            long j_27 = 0;
            while ((j_27 < m_22)) {
                double s_28 = 0.0;
                long k_29 = 0;
                while ((k_29 < p_23)) {
                    s_28 = (s_28 + (a_19[(int)(i_25)][(int)(k_29)] * b_20[(int)(k_29)][(int)(j_27)]));
                    k_29 = (k_29 + 1);
                }
                row_26 = (Enumerable.ToArray(Enumerable.Append<double>(row_26, s_28)));
                j_27 = (j_27 + 1);
            }
            res_24 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_24, row_26)));
            i_25 = (i_25 + 1);
        };
        return res_24;
    }

    public static double[] matvec(double[][] a_30, double[] b_31) {
        double[] res_32 = new double[]{};
        long i_33 = 0;
        while ((i_33 < a_30.Length)) {
            res_32 = (Enumerable.ToArray(Enumerable.Append<double>(res_32, Program.dot(a_30[(int)(i_33)], b_31))));
            i_33 = (i_33 + 1);
        };
        return res_32;
    }

    public static double[][] identity(long n_34) {
        double[][] res_35 = new double[][]{};
        long i_36 = 0;
        while ((i_36 < n_34)) {
            double[] row_37 = new double[]{};
            long j_38 = 0;
            while ((j_38 < n_34)) {
                row_37 = (Enumerable.ToArray(Enumerable.Append<double>(row_37, ((i_36 == j_38) ? 1.0 : 0.0))));
                j_38 = (j_38 + 1);
            }
            res_35 = (Enumerable.ToArray(Enumerable.Append<double[]>(res_35, row_37)));
            i_36 = (i_36 + 1);
        };
        return res_35;
    }

    public static double[][] invert(double[][] mat_39) {
        long n_40 = mat_39.Length;
        double[][] a_41 = mat_39;
        double[][] inv_42 = Program.identity(n_40);
        long i_43 = 0;
        while ((i_43 < n_40)) {
            double pivot_44 = a_41[(int)(i_43)][(int)(i_43)];
            long j_45 = 0;
            while ((j_45 < n_40)) {
                a_41[(int)(i_43)][j_45] = (a_41[(int)(i_43)][(int)(j_45)] / pivot_44);
                inv_42[(int)(i_43)][j_45] = (inv_42[(int)(i_43)][(int)(j_45)] / pivot_44);
                j_45 = (j_45 + 1);
            }
            long k_46 = 0;
            while ((k_46 < n_40)) {
                if ((k_46 != i_43)) {
                    double factor_47 = a_41[(int)(k_46)][(int)(i_43)];
                    j_45 = 0;
                    while ((j_45 < n_40)) {
                        a_41[(int)(k_46)][j_45] = (a_41[(int)(k_46)][(int)(j_45)] - (factor_47 * a_41[(int)(i_43)][(int)(j_45)]));
                        inv_42[(int)(k_46)][j_45] = (inv_42[(int)(k_46)][(int)(j_45)] - (factor_47 * inv_42[(int)(i_43)][(int)(j_45)]));
                        j_45 = (j_45 + 1);
                    }
                }
                k_46 = (k_46 + 1);
            }
            i_43 = (i_43 + 1);
        };
        return inv_42;
    }

    public static double[] normal_equation(double[][] X_48, double[] y_49) {
        double[][] Xt_50 = Program.transpose(X_48);
        double[][] XtX_51 = Program.matmul(Xt_50, X_48);
        double[][] XtX_inv_52 = Program.invert(XtX_51);
        double[] Xty_53 = Program.matvec(Xt_50, y_49);
        return Program.matvec(XtX_inv_52, Xty_53);
    }

    public static double linear_regression_prediction(double[] train_dt_54, double[] train_usr_55, double[] train_mtch_56, double[] test_dt_57, double[] test_mtch_58) {
        double[][] X_59 = new double[][]{};
        long i_60 = 0;
        while ((i_60 < train_dt_54.Length)) {
            X_59 = (Enumerable.ToArray(Enumerable.Append<double[]>(X_59, new double[]{1.0, train_dt_54[(int)(i_60)], train_mtch_56[(int)(i_60)]})));
            i_60 = (i_60 + 1);
        };
        double[] beta_61 = Program.normal_equation(X_59, train_usr_55);
        return Program.abs_float(((beta_61[(int)(0)] + (test_dt_57[(int)(0)] * beta_61[(int)(1)])) + (test_mtch_58[(int)(0)] * beta_61[(int)(2)])));
    }

    public static double sarimax_predictor(double[] train_user_62, double[] train_match_63, double[] test_match_64) {
        long n_65 = train_user_62.Length;
        double[][] X_66 = new double[][]{};
        double[] y_67 = new double[]{};
        long i_68 = 1;
        while ((i_68 < n_65)) {
            X_66 = (Enumerable.ToArray(Enumerable.Append<double[]>(X_66, new double[]{1.0, train_user_62[(int)((i_68 - 1))], train_match_63[(int)(i_68)]})));
            y_67 = (Enumerable.ToArray(Enumerable.Append<double>(y_67, train_user_62[(int)(i_68)])));
            i_68 = (i_68 + 1);
        };
        double[] beta_69 = Program.normal_equation(X_66, y_67);
        return ((beta_69[(int)(0)] + (beta_69[(int)(1)] * train_user_62[(int)((n_65 - 1))])) + (beta_69[(int)(2)] * test_match_64[(int)(0)]));
    }

    public static double rbf_kernel(double[] a_70, double[] b_71, double gamma_72) {
        double sum_73 = 0.0;
        long i_74 = 0;
        while ((i_74 < a_70.Length)) {
            double diff_75 = (a_70[(int)(i_74)] - b_71[(int)(i_74)]);
            sum_73 = (sum_73 + (diff_75 * diff_75));
            i_74 = (i_74 + 1);
        };
        return Program.exp_approx((-gamma_72 * sum_73));
    }

    public static double support_vector_regressor(double[][] x_train_76, double[][] x_test_77, double[] train_user_78) {
        double gamma_79 = 0.1;
        double[] weights_80 = new double[]{};
        long i_81 = 0;
        while ((i_81 < x_train_76.Length)) {
            weights_80 = (Enumerable.ToArray(Enumerable.Append<double>(weights_80, Program.rbf_kernel(x_train_76[(int)(i_81)], x_test_77[(int)(0)], gamma_79))));
            i_81 = (i_81 + 1);
        };
        double num_82 = 0.0;
        double den_83 = 0.0;
        i_81 = 0;
        while ((i_81 < train_user_78.Length)) {
            num_82 = (num_82 + (weights_80[(int)(i_81)] * train_user_78[(int)(i_81)]));
            den_83 = (den_83 + weights_80[(int)(i_81)]);
            i_81 = (i_81 + 1);
        };
        return (num_82 / den_83);
    }

    public static double[] set_at_float(double[] xs_84, long idx_85, double value_86) {
        long i_87 = 0;
        double[] res_88 = new double[]{};
        while ((i_87 < xs_84.Length)) {
            if ((i_87 == idx_85)) {
                res_88 = (Enumerable.ToArray(Enumerable.Append<double>(res_88, value_86)));
            } else {
                res_88 = (Enumerable.ToArray(Enumerable.Append<double>(res_88, xs_84[(int)(i_87)])));
            }
            i_87 = (i_87 + 1);
        };
        return res_88;
    }

    public static double[] sort_float(double[] xs_89) {
        double[] res_90 = xs_89;
        long i_91 = 1;
        while ((i_91 < res_90.Length)) {
            double key_92 = res_90[(int)(i_91)];
            long j_93 = (i_91 - 1);
            while (((j_93 >= 0) && (res_90[(int)(j_93)] > key_92))) {
                res_90 = Program.set_at_float(res_90, (j_93 + 1), res_90[(int)(j_93)]);
                j_93 = (j_93 - 1);
            }
            res_90 = Program.set_at_float(res_90, (j_93 + 1), key_92);
            i_91 = (i_91 + 1);
        };
        return res_90;
    }

    public static double percentile(double[] data_94, double q_95) {
        double[] sorted_96 = Program.sort_float(data_94);
        long n_97 = sorted_96.Length;
        double pos_98 = ((q_95 / 100.0) * Program.int_to_float((n_97 - 1)));
        long idx_99 = Program.floor_int(pos_98);
        double frac_100 = (pos_98 - Program.int_to_float(idx_99));
        if (((idx_99 + 1) < n_97)) {
            return ((sorted_96[(int)(idx_99)] * (1.0 - frac_100)) + (sorted_96[(int)((idx_99 + 1))] * frac_100));
        };
        return sorted_96[(int)(idx_99)];
    }

    public static double interquartile_range_checker(double[] train_user_101) {
        double q1_102 = Program.percentile(train_user_101, 25.0);
        double q3_103 = Program.percentile(train_user_101, 75.0);
        double iqr_104 = (q3_103 - q1_102);
        return (q1_102 - (iqr_104 * 0.1));
    }

    public static bool data_safety_checker(double[] list_vote_105, double actual_result_106) {
        long safe_107 = 0;
        long not_safe_108 = 0;
        long i_109 = 0;
        while ((i_109 < list_vote_105.Length)) {
            double v_110 = list_vote_105[(int)(i_109)];
            if ((v_110 > actual_result_106)) {
                safe_107 = (not_safe_108 + 1);
            } else if ((Program.abs_float((Program.abs_float(v_110) - Program.abs_float(actual_result_106))) <= 0.1)) {
                safe_107 = (safe_107 + 1);
            } else {
                not_safe_108 = (not_safe_108 + 1);
            }
            i_109 = (i_109 + 1);
        };
        return (safe_107 > not_safe_108);
    }

    public static void main() {
        double[] vote_111 = new double[]{Program.linear_regression_prediction(new double[]{2.0, 3.0, 4.0, 5.0}, new double[]{5.0, 3.0, 4.0, 6.0}, new double[]{3.0, 1.0, 2.0, 4.0}, new double[]{2.0}, new double[]{2.0}), Program.sarimax_predictor(new double[]{4.0, 2.0, 6.0, 8.0}, new double[]{3.0, 1.0, 2.0, 4.0}, new double[]{2.0}), Program.support_vector_regressor(new double[][]{new double[]{5.0, 2.0}, new double[]{1.0, 5.0}, new double[]{6.0, 2.0}}, new double[][]{new double[]{3.0, 2.0}}, new double[]{2.0, 1.0, 4.0})};
        Console.WriteLine(Program._fmtTop(vote_111[(int)(0)]));
        Console.WriteLine(Program._fmtTop(vote_111[(int)(1)]));
        Console.WriteLine(Program._fmtTop(vote_111[(int)(2)]));
        Console.WriteLine(Program._fmtTop(Program.data_safety_checker(vote_111, 5.0)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
