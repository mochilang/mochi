// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] x_28 = new double[][]{new double[]{0.5, 1.5}, new double[]{1.0, 1.0}, new double[]{1.5, 0.5}, new double[]{3.0, 3.5}, new double[]{3.5, 3.0}, new double[]{4.0, 4.0}};
    static double[] y_29 = new double[]{0.0, 0.0, 0.0, 1.0, 1.0, 1.0};
    static double alpha_30 = 0.1;
    static long iterations_31 = 1000;
    static double[] theta_32 = Program.logistic_reg(alpha_30, x_28, y_29, iterations_31);
    public static double expApprox(double x_0) {
        double y_1 = x_0;
        bool is_neg_2 = false;
        if ((x_0 < 0.0)) {
            is_neg_2 = true;
            y_1 = -x_0;
        };
        double term_3 = 1.0;
        double sum_4 = 1.0;
        long n_5 = 1;
        while ((n_5 < 30)) {
            term_3 = ((term_3 * y_1) / Convert.ToDouble(n_5));
            sum_4 = (sum_4 + term_3);
            n_5 = (n_5 + 1);
        };
        if (is_neg_2) {
            return (1.0 / sum_4);
        };
        return sum_4;
    }

    public static double sigmoid(double z_6) {
        return (1.0 / (1.0 + Program.expApprox(-z_6)));
    }

    public static double dot(double[] a_7, double[] b_8) {
        double s_9 = 0.0;
        long i_10 = 0;
        while ((i_10 < a_7.Length)) {
            s_9 = (s_9 + (a_7[(int)(i_10)] * b_8[(int)(i_10)]));
            i_10 = (i_10 + 1);
        };
        return s_9;
    }

    public static double[] zeros(long n_11) {
        double[] res_12 = new double[]{};
        long i_13 = 0;
        while ((i_13 < n_11)) {
            res_12 = (Enumerable.ToArray(Enumerable.Append<double>(res_12, 0.0)));
            i_13 = (i_13 + 1);
        };
        return res_12;
    }

    public static double[] logistic_reg(double alpha_14, double[][] x_15, double[] y_16, long iterations_17) {
        long m_18 = x_15.Length;
        long n_19 = x_15[(int)(0)].Length;
        double[] theta_20 = Program.zeros(n_19);
        long iter_21 = 0;
        while ((iter_21 < iterations_17)) {
            double[] grad_22 = Program.zeros(n_19);
            long i_23 = 0;
            while ((i_23 < m_18)) {
                double z_24 = Program.dot(x_15[(int)(i_23)], theta_20);
                double h_25 = Program.sigmoid(z_24);
                long k_26 = 0;
                while ((k_26 < n_19)) {
                    grad_22[k_26] = (grad_22[(int)(k_26)] + ((h_25 - y_16[(int)(i_23)]) * x_15[(int)(i_23)][(int)(k_26)]));
                    k_26 = (k_26 + 1);
                }
                i_23 = (i_23 + 1);
            }
            long k2_27 = 0;
            while ((k2_27 < n_19)) {
                theta_20[k2_27] = (theta_20[(int)(k2_27)] - ((alpha_14 * grad_22[(int)(k2_27)]) / Convert.ToDouble(m_18)));
                k2_27 = (k2_27 + 1);
            }
            iter_21 = (iter_21 + 1);
        };
        return theta_20;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var i_33 = 0; i_33 < theta_32.Length; i_33++) {
                Console.WriteLine(Program._fmtTop(theta_32[(int)(i_33)]));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
