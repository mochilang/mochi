// Generated by Mochi 0.10.59 on 2025-08-07 09:39 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Dataset {
    public double[][] data;
    public double[] target;
    public override string ToString() => $"Dataset {{data = {data}, target = {target}}}";
}
class Tree {
    public double threshold;
    public double left_value;
    public double right_value;
    public override string ToString() => $"Tree {{threshold = {threshold.ToString("0.0")}, left_value = {left_value.ToString("0.0")}, right_value = {right_value.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    public static Dataset data_handling(Dataset dataset_0) {
        return dataset_0;
    }

    public static double[] xgboost(double[][] features_1, double[] target_2, double[][] test_features_3) {
        double learning_rate_4 = 0.5;
        long n_estimators_5 = 3;
        Tree[] trees_6 = new Tree[]{};
        double[] predictions_7 = new double[]{};
        long i_8 = 0;
        while ((i_8 < target_2.Length)) {
            predictions_7 = (Enumerable.ToArray(Enumerable.Append<double>(predictions_7, 0.0)));
            i_8 = (i_8 + 1);
        };
        long est_9 = 0;
        while ((est_9 < n_estimators_5)) {
            double[] residuals_10 = new double[]{};
            long j_11 = 0;
            while ((j_11 < target_2.Length)) {
                residuals_10 = (Enumerable.ToArray(Enumerable.Append<double>(residuals_10, (target_2[(int)(j_11)] - predictions_7[(int)(j_11)]))));
                j_11 = (j_11 + 1);
            }
            double sum_feat_12 = 0.0;
            j_11 = 0;
            while ((j_11 < features_1.Length)) {
                sum_feat_12 = (sum_feat_12 + features_1[(int)(j_11)][(int)(0)]);
                j_11 = (j_11 + 1);
            }
            double threshold_13 = (sum_feat_12 / Convert.ToDouble(features_1.Length));
            double left_sum_14 = 0.0;
            long left_count_15 = 0;
            double right_sum_16 = 0.0;
            long right_count_17 = 0;
            j_11 = 0;
            while ((j_11 < features_1.Length)) {
                if ((features_1[(int)(j_11)][(int)(0)] <= threshold_13)) {
                    left_sum_14 = (left_sum_14 + residuals_10[(int)(j_11)]);
                    left_count_15 = (left_count_15 + 1);
                } else {
                    right_sum_16 = (right_sum_16 + residuals_10[(int)(j_11)]);
                    right_count_17 = (right_count_17 + 1);
                }
                j_11 = (j_11 + 1);
            }
            double left_value_18 = 0.0;
            if ((left_count_15 > 0)) {
                left_value_18 = (left_sum_14 / Convert.ToDouble(left_count_15));
            }
            double right_value_19 = 0.0;
            if ((right_count_17 > 0)) {
                right_value_19 = (right_sum_16 / Convert.ToDouble(right_count_17));
            }
            j_11 = 0;
            while ((j_11 < features_1.Length)) {
                if ((features_1[(int)(j_11)][(int)(0)] <= threshold_13)) {
                    predictions_7[j_11] = (predictions_7[(int)(j_11)] + (learning_rate_4 * left_value_18));
                } else {
                    predictions_7[j_11] = (predictions_7[(int)(j_11)] + (learning_rate_4 * right_value_19));
                }
                j_11 = (j_11 + 1);
            }
            trees_6 = (Enumerable.ToArray(Enumerable.Append<Tree>(trees_6, new Tree{threshold = threshold_13, left_value = left_value_18, right_value = right_value_19})));
            est_9 = (est_9 + 1);
        };
        double[] preds_20 = new double[]{};
        long t_21 = 0;
        while ((t_21 < test_features_3.Length)) {
            double pred_22 = 0.0;
            long k_23 = 0;
            while ((k_23 < trees_6.Length)) {
                if ((test_features_3[(int)(t_21)][(int)(0)] <= trees_6[(int)(k_23)].threshold)) {
                    pred_22 = (pred_22 + (learning_rate_4 * trees_6[(int)(k_23)].left_value));
                } else {
                    pred_22 = (pred_22 + (learning_rate_4 * trees_6[(int)(k_23)].right_value));
                }
                k_23 = (k_23 + 1);
            }
            preds_20 = (Enumerable.ToArray(Enumerable.Append<double>(preds_20, pred_22)));
            t_21 = (t_21 + 1);
        };
        return preds_20;
    }

    public static double mean_absolute_error(double[] y_true_24, double[] y_pred_25) {
        double sum_26 = 0.0;
        long i_27 = 0;
        while ((i_27 < y_true_24.Length)) {
            double diff_28 = (y_true_24[(int)(i_27)] - y_pred_25[(int)(i_27)]);
            if ((diff_28 < 0.0)) {
                diff_28 = -diff_28;
            }
            sum_26 = (sum_26 + diff_28);
            i_27 = (i_27 + 1);
        };
        return (sum_26 / Convert.ToDouble(y_true_24.Length));
    }

    public static double mean_squared_error(double[] y_true_29, double[] y_pred_30) {
        double sum_31 = 0.0;
        long i_32 = 0;
        while ((i_32 < y_true_29.Length)) {
            double diff_33 = (y_true_29[(int)(i_32)] - y_pred_30[(int)(i_32)]);
            sum_31 = (sum_31 + (diff_33 * diff_33));
            i_32 = (i_32 + 1);
        };
        return (sum_31 / Convert.ToDouble(y_true_29.Length));
    }

    public static void main() {
        Dataset california_34 = new Dataset{data = new double[][]{new double[]{1.0}, new double[]{2.0}, new double[]{3.0}, new double[]{4.0}}, target = new double[]{2.0, 3.0, 4.0, 5.0}};
        Dataset ds_35 = Program.data_handling(california_34);
        double[][] x_train_36 = ds_35.data;
        double[] y_train_37 = ds_35.target;
        double[][] x_test_38 = new double[][]{new double[]{1.5}, new double[]{3.5}};
        double[] y_test_39 = new double[]{2.5, 4.5};
        double[] predictions_40 = Program.xgboost(x_train_36, y_train_37, x_test_38);
        Console.WriteLine(Program._fmtTop("Predictions:"));
        Console.WriteLine(Program._fmtTop(predictions_40));
        Console.WriteLine(Program._fmtTop("Mean Absolute Error:"));
        Console.WriteLine(Program._fmtTop(Program.mean_absolute_error(y_test_39, predictions_40)));
        Console.WriteLine(Program._fmtTop("Mean Square Error:"));
        Console.WriteLine(Program._fmtTop(Program.mean_squared_error(y_test_39, predictions_40)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
