// Generated by Mochi 0.10.67 (commit c7612b9c83) on 2025-08-16 19:42 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;
using System.Globalization;

#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    static string LOWER_0 = "abcdefghijklmnopqrstuvwxyz";
    static string UPPER_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static string PUNCT_2 = "!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~";
    public static string to_lowercase(string s_3) {
        string res_4 = "";
        long i_5 = 0;
        while ((i_5 < s_3.Length)) {
            string c_6 = s_3.Substring((int)(i_5), 1);
            long j_7 = 0;
            bool found_8 = false;
            while ((j_7 < UPPER_1.Length)) {
                if ((c_6 == UPPER_1.Substring((int)(j_7), 1))) {
                    res_4 = (res_4 + LOWER_0.Substring((int)(j_7), 1));
                    found_8 = true;
                    break;
                }
                j_7 = (j_7 + 1);
            }
            if ((!found_8)) {
                res_4 = (res_4 + c_6);
            }
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static bool is_punct(string c_9) {
        long i_10 = 0;
        while ((i_10 < PUNCT_2.Length)) {
            if ((c_9 == PUNCT_2.Substring((int)(i_10), 1))) {
                return true;
            }
            i_10 = (i_10 + 1);
        };
        return false;
    }

    public static string clean_text(string text_11, bool keep_newlines_12) {
        string lower_13 = Program.to_lowercase(text_11);
        string res_14 = "";
        long i_15 = 0;
        while ((i_15 < lower_13.Length)) {
            string ch_16 = lower_13.Substring((int)(i_15), 1);
            if (Program.is_punct(ch_16)) {
            } else if ((ch_16 == "\n")) {
                if (keep_newlines_12) {
                    res_14 = (res_14 + "\n");
                }
            } else {
                res_14 = (res_14 + ch_16);
            }
            i_15 = (i_15 + 1);
        };
        return res_14;
    }

    public static string[] split(string s_17, string sep_18) {
        string[] res_19 = new string[]{};
        string current_20 = "";
        long i_21 = 0;
        while ((i_21 < s_17.Length)) {
            string ch_22 = s_17.Substring((int)(i_21), 1);
            if ((ch_22 == sep_18)) {
                res_19 = ((Func<string[]>)(() => { var _tmp = res_19.Cast<string>().ToList(); _tmp.Add(current_20); return _tmp.ToArray(); }))();
                current_20 = "";
            } else {
                current_20 = (current_20 + ch_22);
            }
            i_21 = (i_21 + 1);
        };
        res_19 = ((Func<string[]>)(() => { var _tmp = res_19.Cast<string>().ToList(); _tmp.Add(current_20); return _tmp.ToArray(); }))();
        return res_19;
    }

    public static bool contains(string s_23, string sub_24) {
        long n_25 = s_23.Length;
        long m_26 = sub_24.Length;
        if ((m_26 == 0)) {
            return true;
        };
        long i_27 = 0;
        while ((i_27 <= (n_25 - m_26))) {
            long j_28 = 0;
            bool is_match_29 = true;
            while ((j_28 < m_26)) {
                if ((s_23.Substring((int)((i_27 + j_28)), 1) != sub_24.Substring((int)(j_28), 1))) {
                    is_match_29 = false;
                    break;
                }
                j_28 = (j_28 + 1);
            }
            if (is_match_29) {
                return true;
            }
            i_27 = (i_27 + 1);
        };
        return false;
    }

    public static double floor(double x_30) {
        long i_31 = (long)(x_30);
        if ((Convert.ToDouble(i_31) > x_30)) {
            i_31 = (i_31 - 1);
        };
        return Convert.ToDouble(i_31);
    }

    public static double round3(double x_32) {
        return (Program.floor(((x_32 * 1000.0) + 0.5)) / 1000.0);
    }

    public static double ln(double x_33) {
        double t_34 = ((x_33 - 1.0) / (x_33 + 1.0));
        double term_35 = t_34;
        double sum_36 = 0.0;
        long k_37 = 1;
        while ((k_37 <= 99)) {
            sum_36 = (sum_36 + (term_35 / Convert.ToDouble(k_37)));
            term_35 = ((term_35 * t_34) * t_34);
            k_37 = (k_37 + 2);
        };
        return (2.0 * sum_36);
    }

    public static double log10(double x_38) {
        return (Program.ln(x_38) / Program.ln(10.0));
    }

    public static long term_frequency(string term_39, string document_40) {
        string clean_41 = Program.clean_text(document_40, false);
        string[] tokens_42 = Program.split(clean_41, " ");
        string t_43 = Program.to_lowercase(term_39);
        long count_44 = 0;
        long i_45 = 0;
        while ((i_45 < tokens_42.Length)) {
            if (((_idx(tokens_42, i_45) != "") && (_idx(tokens_42, i_45) == t_43))) {
                count_44 = (count_44 + 1);
            }
            i_45 = (i_45 + 1);
        };
        return count_44;
    }

    public static long[] document_frequency(string term_46, string corpus_47) {
        string clean_48 = Program.clean_text(corpus_47, true);
        string[] docs_49 = Program.split(clean_48, "\n");
        string t_50 = Program.to_lowercase(term_46);
        long matches_51 = 0;
        long i_52 = 0;
        while ((i_52 < docs_49.Length)) {
            if (Program.contains(_idx(docs_49, i_52), t_50)) {
                matches_51 = (matches_51 + 1);
            }
            i_52 = (i_52 + 1);
        };
        return new long[]{matches_51, docs_49.Length};
    }

    public static double inverse_document_frequency(long df_53, long n_54, bool smoothing_55) {
        if (smoothing_55) {
            if ((n_54 == 0)) {
                throw new Exception("log10(0) is undefined.");
            }
            double ratio_56 = (Convert.ToDouble(n_54) / (1.0 + Convert.ToDouble(df_53)));
            double l_57 = Program.log10(ratio_56);
            double result_58 = Program.round3((1.0 + l_57));
            Console.WriteLine(Program._fmtTop(result_58));
            return result_58;
        };
        if ((df_53 == 0)) {
            throw new Exception("df must be > 0");
        };
        if ((n_54 == 0)) {
            throw new Exception("log10(0) is undefined.");
        };
        double ratio_59 = (Convert.ToDouble(n_54) / Convert.ToDouble(df_53));
        double l_60 = Program.log10(ratio_59);
        double result_61 = Program.round3(l_60);
        Console.WriteLine(Program._fmtTop(result_61));
        return result_61;
    }

    public static double tf_idf(long tf_62, double idf_63) {
        double prod_64 = (Convert.ToDouble(tf_62) * idf_63);
        double result_65 = Program.round3(prod_64);
        Console.WriteLine(Program._fmtTop(result_65));
        return result_65;
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.term_frequency("to", "To be, or not to be")));
            string corpus_66 = "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus.";
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.document_frequency("first", corpus_66))));
            double idf_val_67 = Program.inverse_document_frequency(1, 3, false);
            Program.tf_idf(2, idf_val_67);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
