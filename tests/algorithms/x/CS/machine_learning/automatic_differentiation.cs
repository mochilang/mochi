// Generated by Mochi 0.10.66 (commit 49663b8c77) on 2025-08-16 12:11 +0700
#pragma warning disable 0169, 0649
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;
using System.Globalization;

class Dual {
    public double value;
    public double deriv;
    public override string ToString() => $"Dual {{value = {value.ToString("0.0")}, deriv = {deriv.ToString("0.0")}}}";
}
#pragma warning disable CS0162
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            } else if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MOCHI_BENCHMARK"))) {
                nowSeed = 1170750916L;
                seededNow = true;
            }
        }
        var r = nowSeed;
        nowSeed++;
        return r;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static T _idx<T>(T[] arr, long i) {
        if (arr == null) return default(T);
        if (i < 0) i += arr.Length;
        if (i < 0 || i >= arr.Length) return default(T);
        return arr[(int)i];
    }
    static long _floordiv(long a, long b) {
        if (b == 0) return 0;
        var q = a / b;
        var r = a % b;
        if ((r > 0 && b < 0) || (r < 0 && b > 0)) q--;
        return q;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        if (v is double dv) return dv.ToString("R", CultureInfo.InvariantCulture);
        if (v is float fv) return fv.ToString("R", CultureInfo.InvariantCulture);
        return Convert.ToString(v, CultureInfo.InvariantCulture);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static string __name__ = "__main__";
    public static Dual dual(double v_0, double d_1) {
        return new Dual{value = v_0, deriv = d_1};
    }

    public static double pow_float(double base_2, long exp_3) {
        double res_4 = 1.0;
        long i_5 = 0;
        while ((i_5 < exp_3)) {
            res_4 = (res_4 * base_2);
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    public static Dual add(Dual a_6, Dual b_7) {
        return new Dual{value = (a_6.value + b_7.value), deriv = (a_6.deriv + b_7.deriv)};
    }

    public static Dual sub(Dual a_8, Dual b_9) {
        return new Dual{value = (a_8.value - b_9.value), deriv = (a_8.deriv - b_9.deriv)};
    }

    public static Dual mul(Dual a_10, Dual b_11) {
        return new Dual{value = (a_10.value * b_11.value), deriv = ((a_10.deriv * b_11.value) + (b_11.deriv * a_10.value))};
    }

    public static Dual div(Dual a_12, Dual b_13) {
        return new Dual{value = (a_12.value / b_13.value), deriv = (((a_12.deriv * b_13.value) - (b_13.deriv * a_12.value)) / (b_13.value * b_13.value))};
    }

    public static Dual power(Dual a_14, long p_15) {
        return new Dual{value = Program.pow_float(a_14.value, p_15), deriv = (((1.0 * p_15) * Program.pow_float(a_14.value, (p_15 - 1))) * a_14.deriv)};
    }

    public static void main() {
        Dual a_16 = Program.dual(2.0, 1.0);
        Dual b_17 = Program.dual(1.0, 0.0);
        Dual c_18 = Program.add(a_16, b_17);
        Dual d_19 = Program.mul(a_16, b_17);
        Dual e_20 = Program.div(c_18, d_19);
        Console.WriteLine(Program._fmtTop(_fmtStr(e_20.deriv)));
        Dual x_21 = Program.dual(2.0, 1.0);
        Dual y_22 = Program.power(x_21, 3);
        Console.WriteLine(Program._fmtTop(_fmtStr(y_22.deriv)));
    }

    static void Main() {
        _ = __name__;
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            var __bench = new Dictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}};
            Console.WriteLine(JsonSerializer.Serialize(__bench));
        }
    }
}
