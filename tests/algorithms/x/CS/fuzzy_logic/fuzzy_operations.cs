// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class FuzzySet {
    public string name;
    public double left_boundary;
    public double peak;
    public double right_boundary;
    public override string ToString() => $"FuzzySet {{name = \"{name}\", left_boundary = {left_boundary.ToString("0.0")}, peak = {peak.ToString("0.0")}, right_boundary = {right_boundary.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static FuzzySet sheru_12 = new FuzzySet{name = "Sheru", left_boundary = 0.4, peak = 1.0, right_boundary = 0.6};
    static FuzzySet siya_13 = new FuzzySet{name = "Siya", left_boundary = 0.5, peak = 1.0, right_boundary = 0.7};
    public static string stringify(FuzzySet fs_0) {
        return (((((((fs_0.name + ": [") + _fmtStr(fs_0.left_boundary)) + ", ") + _fmtStr(fs_0.peak)) + ", ") + _fmtStr(fs_0.right_boundary)) + "]");
    }

    public static double max2(double a_1, double b_2) {
        if ((a_1 > b_2)) {
            return a_1;
        };
        return b_2;
    }

    public static double min2(double a_3, double b_4) {
        if ((a_3 < b_4)) {
            return a_3;
        };
        return b_4;
    }

    public static FuzzySet complement(FuzzySet fs_5) {
        return new FuzzySet{name = ("¬" + fs_5.name), left_boundary = (1.0 - fs_5.right_boundary), peak = (1.0 - fs_5.left_boundary), right_boundary = (1.0 - fs_5.peak)};
    }

    public static FuzzySet intersection(FuzzySet a_6, FuzzySet b_7) {
        return new FuzzySet{name = ((a_6.name + " ∩ ") + b_7.name), left_boundary = Program.max2(a_6.left_boundary, b_7.left_boundary), peak = Program.min2(a_6.right_boundary, b_7.right_boundary), right_boundary = ((a_6.peak + b_7.peak) / 2.0)};
    }

    public static FuzzySet union(FuzzySet a_8, FuzzySet b_9) {
        return new FuzzySet{name = ((a_8.name + " U ") + b_9.name), left_boundary = Program.min2(a_8.left_boundary, b_9.left_boundary), peak = Program.max2(a_8.right_boundary, b_9.right_boundary), right_boundary = ((a_8.peak + b_9.peak) / 2.0)};
    }

    public static double membership(FuzzySet fs_10, double x_11) {
        if (((x_11 <= fs_10.left_boundary) || (x_11 >= fs_10.right_boundary))) {
            return 0.0;
        };
        if (((fs_10.left_boundary < x_11) && (x_11 <= fs_10.peak))) {
            return ((x_11 - fs_10.left_boundary) / (fs_10.peak - fs_10.left_boundary));
        };
        if (((fs_10.peak < x_11) && (x_11 < fs_10.right_boundary))) {
            return ((fs_10.right_boundary - x_11) / (fs_10.right_boundary - fs_10.peak));
        };
        return 0.0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.stringify(sheru_12)));
            Console.WriteLine(Program._fmtTop(Program.stringify(siya_13)));
            FuzzySet sheru_comp_14 = Program.complement(sheru_12);
            Console.WriteLine(Program._fmtTop(Program.stringify(sheru_comp_14)));
            FuzzySet inter_15 = Program.intersection(siya_13, sheru_12);
            Console.WriteLine(Program._fmtTop(Program.stringify(inter_15)));
            Console.WriteLine(Program._fmtTop(("Sheru membership 0.5: " + _fmtStr(Program.membership(sheru_12, 0.5)))));
            Console.WriteLine(Program._fmtTop(("Sheru membership 0.6: " + _fmtStr(Program.membership(sheru_12, 0.6)))));
            FuzzySet uni_16 = Program.union(siya_13, sheru_12);
            Console.WriteLine(Program._fmtTop(Program.stringify(uni_16)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
