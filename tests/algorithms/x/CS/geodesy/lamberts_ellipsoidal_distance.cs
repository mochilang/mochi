// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double EQUATORIAL_RADIUS_1 = 6.378137e+06;
    public static double to_radians(double deg_2) {
        return ((deg_2 * PI_0) / 180.0);
    }

    public static double sin_approx(double x_3) {
        double term_4 = x_3;
        double sum_5 = x_3;
        long i_6 = 1;
        while ((i_6 < 10)) {
            double k1_7 = (2.0 * Convert.ToDouble(i_6));
            double k2_8 = (k1_7 + 1.0);
            term_4 = (((-term_4 * x_3) * x_3) / (k1_7 * k2_8));
            sum_5 = (sum_5 + term_4);
            i_6 = (i_6 + 1);
        };
        return sum_5;
    }

    public static double cos_approx(double x_9) {
        double term_10 = 1.0;
        double sum_11 = 1.0;
        long i_12 = 1;
        while ((i_12 < 10)) {
            double k1_13 = ((2.0 * Convert.ToDouble(i_12)) - 1.0);
            double k2_14 = (2.0 * Convert.ToDouble(i_12));
            term_10 = (((-term_10 * x_9) * x_9) / (k1_13 * k2_14));
            sum_11 = (sum_11 + term_10);
            i_12 = (i_12 + 1);
        };
        return sum_11;
    }

    public static double sqrt_approx(double x_15) {
        if ((x_15 <= 0.0)) {
            return 0.0;
        };
        double guess_16 = (x_15 / 2.0);
        long i_17 = 0;
        while ((i_17 < 20)) {
            guess_16 = ((guess_16 + (x_15 / guess_16)) / 2.0);
            i_17 = (i_17 + 1);
        };
        return guess_16;
    }

    public static double lamberts_ellipsoidal_distance(double lat1_18, double lon1_19, double lat2_20, double lon2_21) {
        double phi1_22 = Program.to_radians(lat1_18);
        double phi2_23 = Program.to_radians(lat2_20);
        double lambda1_24 = Program.to_radians(lon1_19);
        double lambda2_25 = Program.to_radians(lon2_21);
        double x_26 = ((lambda2_25 - lambda1_24) * Program.cos_approx(((phi1_22 + phi2_23) / 2.0)));
        double y_27 = (phi2_23 - phi1_22);
        return (EQUATORIAL_RADIUS_1 * Program.sqrt_approx(((x_26 * x_26) + (y_27 * y_27))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(Program.lamberts_ellipsoidal_distance(37.774856, -122.424227, 37.864742, -119.537521)));
            Console.WriteLine(Program._fmtTop(Program.lamberts_ellipsoidal_distance(37.774856, -122.424227, 40.713019, -74.012647)));
            Console.WriteLine(Program._fmtTop(Program.lamberts_ellipsoidal_distance(37.774856, -122.424227, 45.443012, 12.313071)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
