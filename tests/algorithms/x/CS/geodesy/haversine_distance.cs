// Generated by Mochi 0.10.59 on 2025-08-07 00:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double AXIS_A_1 = 6.378137e+06;
    static double AXIS_B_2 = 6.356752314245e+06;
    static double RADIUS_3 = 6.378137e+06;
    static double[] SAN_FRANCISCO_40 = new double[]{37.774856, -122.424227};
    static double[] YOSEMITE_41 = new double[]{37.864742, -119.537521};
    public static double to_radians(double deg_4) {
        return ((deg_4 * PI_0) / 180.0);
    }

    public static double sin_taylor(double x_5) {
        double term_6 = x_5;
        double sum_7 = x_5;
        long i_8 = 1;
        while ((i_8 < 10)) {
            double k1_9 = (2.0 * Convert.ToDouble(i_8));
            double k2_10 = (k1_9 + 1.0);
            term_6 = (((-term_6 * x_5) * x_5) / (k1_9 * k2_10));
            sum_7 = (sum_7 + term_6);
            i_8 = (i_8 + 1);
        };
        return sum_7;
    }

    public static double cos_taylor(double x_11) {
        double term_12 = 1.0;
        double sum_13 = 1.0;
        long i_14 = 1;
        while ((i_14 < 10)) {
            double k1_15 = ((2.0 * Convert.ToDouble(i_14)) - 1.0);
            double k2_16 = (2.0 * Convert.ToDouble(i_14));
            term_12 = (((-term_12 * x_11) * x_11) / (k1_15 * k2_16));
            sum_13 = (sum_13 + term_12);
            i_14 = (i_14 + 1);
        };
        return sum_13;
    }

    public static double tan_approx(double x_17) {
        return (Program.sin_taylor(x_17) / Program.cos_taylor(x_17));
    }

    public static double sqrtApprox(double x_18) {
        double guess_19 = (x_18 / 2.0);
        long i_20 = 0;
        while ((i_20 < 20)) {
            guess_19 = ((guess_19 + (x_18 / guess_19)) / 2.0);
            i_20 = (i_20 + 1);
        };
        return guess_19;
    }

    public static double atanApprox(double x_21) {
        if ((x_21 > 1.0)) {
            return ((PI_0 / 2.0) - (x_21 / ((x_21 * x_21) + 0.28)));
        };
        if ((x_21 < -1.0)) {
            return ((-PI_0 / 2.0) - (x_21 / ((x_21 * x_21) + 0.28)));
        };
        return (x_21 / (1.0 + ((0.28 * x_21) * x_21)));
    }

    public static double atan2Approx(double y_22, double x_23) {
        if ((x_23 > 0.0)) {
            double val_24 = Program.atanApprox((y_22 / x_23));
            return val_24;
        };
        if ((x_23 < 0.0)) {
            if ((y_22 >= 0.0)) {
                return (Program.atanApprox((y_22 / x_23)) + PI_0);
            }
            return (Program.atanApprox((y_22 / x_23)) - PI_0);
        };
        if ((y_22 > 0.0)) {
            return (PI_0 / 2.0);
        };
        if ((y_22 < 0.0)) {
            return (-PI_0 / 2.0);
        };
        return 0.0;
    }

    public static double asinApprox(double x_25) {
        double denom_26 = Program.sqrtApprox((1.0 - (x_25 * x_25)));
        double res_27 = Program.atan2Approx(x_25, denom_26);
        return res_27;
    }

    public static double haversine_distance(double lat1_28, double lon1_29, double lat2_30, double lon2_31) {
        double flattening_32 = ((AXIS_A_1 - AXIS_B_2) / AXIS_A_1);
        double phi_1_33 = Program.atanApprox(((1.0 - flattening_32) * Program.tan_approx(Program.to_radians(lat1_28))));
        double phi_2_34 = Program.atanApprox(((1.0 - flattening_32) * Program.tan_approx(Program.to_radians(lat2_30))));
        double lambda_1_35 = Program.to_radians(lon1_29);
        double lambda_2_36 = Program.to_radians(lon2_31);
        double sin_sq_phi_37 = Program.sin_taylor(((phi_2_34 - phi_1_33) / 2.0));
        double sin_sq_lambda_38 = Program.sin_taylor(((lambda_2_36 - lambda_1_35) / 2.0));
        sin_sq_phi_37 = (sin_sq_phi_37 * sin_sq_phi_37);
        sin_sq_lambda_38 = (sin_sq_lambda_38 * sin_sq_lambda_38);
        double h_value_39 = Program.sqrtApprox((sin_sq_phi_37 + ((Program.cos_taylor(phi_1_33) * Program.cos_taylor(phi_2_34)) * sin_sq_lambda_38)));
        return ((2.0 * RADIUS_3) * Program.asinApprox(h_value_39));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(_fmtStr(Program.haversine_distance(SAN_FRANCISCO_40[(int)(0)], SAN_FRANCISCO_40[(int)(1)], YOSEMITE_41[(int)(0)], YOSEMITE_41[(int)(1)]))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
