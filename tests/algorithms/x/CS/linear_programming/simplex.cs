// Generated by Mochi 0.10.60 on 2025-08-07 16:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _substr(string s, long start, long end) {
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start > s.Length) start = s.Length;
        if (end > s.Length) end = s.Length;
        if (start > end) start = end;
        return s.Substring((int)start, (int)(end - start));
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(", ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(", ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtStr(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmtStr(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmtStr(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmtStr(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return "\"" + s.Replace("\"", "\\\"") + "\"";
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is string s) return s;
        return _fmt(v);
    }
    static double[][] tableau_38 = new double[][]{new double[]{-1.0, -1.0, 0.0, 0.0, 0.0}, new double[]{1.0, 3.0, 1.0, 0.0, 4.0}, new double[]{3.0, 1.0, 0.0, 1.0, 4.0}};
    static double[][] finalTab_39 = Program.simplex(tableau_38);
    static Dictionary<string, double> res_40 = Program.interpret(finalTab_39, 2);
    public static double[][] pivot(double[][] t_0, long row_1, long col_2) {
        double[] pivotRow_3 = new double[]{};
        double pivotVal_4 = t_0[(int)(row_1)][(int)(col_2)];
        for (var j_5 = 0; j_5 < t_0[(int)(row_1)].Length; j_5++) {
            pivotRow_3 = (Enumerable.ToArray(Enumerable.Append<double>(pivotRow_3, (t_0[(int)(row_1)][(int)(j_5)] / pivotVal_4))));
        };
        t_0[row_1] = pivotRow_3;
        for (var i_6 = 0; i_6 < t_0.Length; i_6++) {
            if ((i_6 != row_1)) {
                double factor_7 = t_0[(int)(i_6)][(int)(col_2)];
                double[] newRow_8 = new double[]{};
                for (var j_9 = 0; j_9 < t_0[(int)(i_6)].Length; j_9++) {
                    double value_10 = (t_0[(int)(i_6)][(int)(j_9)] - (factor_7 * pivotRow_3[(int)(j_9)]));
                    newRow_8 = (Enumerable.ToArray(Enumerable.Append<double>(newRow_8, value_10)));
                }
                t_0[i_6] = newRow_8;
            }
        };
        return t_0;
    }

    public static long[] findPivot(double[][] t_11) {
        long col_12 = 0;
        double minVal_13 = 0.0;
        for (var j_14 = 0; j_14 < (t_11[(int)(0)].Length - 1); j_14++) {
            double v_15 = t_11[(int)(0)][(int)(j_14)];
            if ((v_15 < minVal_13)) {
                minVal_13 = v_15;
                col_12 = j_14;
            }
        };
        if ((minVal_13 >= 0.0)) {
            return new long[]{-1, -1};
        };
        long row_16 = -1;
        double minRatio_17 = 0.0;
        bool first_18 = true;
        for (var i_19 = 1; i_19 < t_11.Length; i_19++) {
            double coeff_20 = t_11[(int)(i_19)][(int)(col_12)];
            if ((coeff_20 > 0.0)) {
                double rhs_21 = t_11[(int)(i_19)][(int)((t_11[(int)(i_19)].Length - 1))];
                double ratio_22 = (rhs_21 / coeff_20);
                if ((first_18 || (ratio_22 < minRatio_17))) {
                    minRatio_17 = ratio_22;
                    row_16 = i_19;
                    first_18 = false;
                }
            }
        };
        return new long[]{row_16, col_12};
    }

    public static Dictionary<string, double> interpret(double[][] t_23, long nVars_24) {
        long lastCol_25 = (t_23[(int)(0)].Length - 1);
        double p_26 = t_23[(int)(0)][(int)(lastCol_25)];
        if ((p_26 < 0.0)) {
            p_26 = -p_26;
        };
        Dictionary<string, double> result_27 = new Dictionary<string, double>{};
        result_27["P"] = p_26;
        for (var i_28 = 0; i_28 < nVars_24; i_28++) {
            long nzRow_29 = -1;
            long nzCount_30 = 0;
            for (var r_31 = 0; r_31 < t_23.Length; r_31++) {
                double val_32 = t_23[(int)(r_31)][(int)(i_28)];
                if ((val_32 != 0.0)) {
                    nzCount_30 = (nzCount_30 + 1);
                    nzRow_29 = r_31;
                }
            }
            if (((nzCount_30 == 1) && (t_23[(int)(nzRow_29)][(int)(i_28)] == 1.0))) {
                result_27[("x" + _fmtStr((i_28 + 1)))] = t_23[(int)(nzRow_29)][(int)(lastCol_25)];
            }
        };
        return result_27;
    }

    public static double[][] simplex(double[][] tab_33) {
        double[][] t_34 = tab_33;
        while (true) {
            long[] p_35 = Program.findPivot(t_34);
            long row_36 = p_35[(int)(0)];
            long col_37 = p_35[(int)(1)];
            if ((row_36 < 0)) {
                break;
            }
            t_34 = Program.pivot(t_34, row_36, col_37);
        };
        return t_34;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(Program._fmtTop(("P: " + _fmtStr((res_40.ContainsKey("P") ? res_40["P"] : 0.0)))));
            for (var i_41 = 0; i_41 < 2; i_41++) {
                string key_42 = ("x" + _fmtStr((i_41 + 1)));
                if ((res_40.ContainsKey(key_42))) {
                    Console.WriteLine(Program._fmtTop(((key_42 + ": ") + _fmtStr((res_40.ContainsKey(key_42) ? res_40[key_42] : 0.0)))));
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
