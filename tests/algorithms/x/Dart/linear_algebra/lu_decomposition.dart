// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

class LU {
  List<List<double>> lower;
  List<List<double>> upper;
  LU({required this.lower, required this.upper});
}

LU lu_decomposition(List<List<double>> mat) {
  int n = mat.length;
  if (n == 0) {
    return LU(lower: [], upper: []);
  }
  int m = mat[0].length;
  if (n != m) {
    _error("Matrix must be square");
  }
  List<List<double>> lower = <List<double>>[];
  List<List<double>> upper = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> lrow = <double>[];
    List<double> urow = <double>[];
    int j = 0;
    while (j < n) {
    lrow = [...lrow, 0.0];
    urow = [...urow, 0.0];
    j = j + 1;
  }
    lower = ([...lower, lrow] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    upper = ([...upper, urow] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    int j1 = 0;
    while (j1 < i) {
    double total = 0.0;
    int k = 0;
    while (k < i) {
    total = total + lower[i][k] * upper[k][j1];
    k = k + 1;
  }
    if (upper[j1][j1] == 0.0) {
    _error("No LU decomposition exists");
  }
    while (lower[i]!.length <= j1) { lower[i]!.add(0); } lower[i]![j1] = (mat[i][j1] - total) / upper[j1][j1];
    j1 = j1 + 1;
  }
    while (lower[i]!.length <= i) { lower[i]!.add(0); } lower[i]![i] = 1.0;
    int j2 = i;
    while (j2 < n) {
    double total2 = 0.0;
    int k2 = 0;
    while (k2 < i) {
    total2 = total2 + lower[i][k2] * upper[k2][j2];
    k2 = k2 + 1;
  }
    while (upper[i]!.length <= j2) { upper[i]!.add(0); } upper[i]![j2] = mat[i][j2] - total2;
    j2 = j2 + 1;
  }
    i = i + 1;
  }
  return LU(lower: lower, upper: upper);
}

void print_matrix(List<List<double>> mat) {
  int i = 0;
  while (i < mat.length) {
    String line = "";
    int j = 0;
    while (j < mat[i].length) {
    line = line + _str(mat[i][j]);
    if (j + 1 < mat[i].length) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

List<List<double>> matrix = [[2.0, -2.0, 1.0], [0.0, 1.0, 2.0], [5.0, 3.0, 1.0]];
LU result = lu_decomposition(matrix);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_matrix(result.lower);
  print_matrix(result.upper);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
