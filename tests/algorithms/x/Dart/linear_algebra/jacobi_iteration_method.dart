// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

double absf(double x) {
  return (x < 0.0 ? -x : x);
}

bool strictly_diagonally_dominant(List<List<double>> matrix) {
  int n = matrix.length;
  int i = 0;
  while (i < n) {
    double sum = 0.0;
    int j = 0;
    while (j < n) {
    if (i != j) {
    sum = sum + absf(matrix[i][j]);
  }
    j = j + 1;
  }
    if (absf(matrix[i][i]) <= sum) {
    _error("Coefficient matrix is not strictly diagonally dominant");
  }
    i = i + 1;
  }
  return true;
}

List<double> jacobi_iteration_method(List<List<double>> coefficient, List<double> constant, List<double> init_val, int iterations) {
  int n = coefficient.length;
  if (n == 0) {
    _error("Coefficient matrix cannot be empty");
  }
  if (constant.length != n) {
    _error("Constant vector length must equal number of rows in coefficient matrix");
  }
  if (init_val.length != n) {
    _error("Initial values count must match matrix size");
  }
  int r = 0;
  while (r < n) {
    if (coefficient[r].length != n) {
    _error("Coefficient matrix must be square");
  }
    r = r + 1;
  }
  if (iterations <= 0) {
    _error("Iterations must be at least 1");
  }
  strictly_diagonally_dominant(coefficient);
  List<double> x = init_val;
  int k = 0;
  while (k < iterations) {
    List<double> new_x = <double>[];
    int i = 0;
    while (i < n) {
    double sum = 0.0;
    int j = 0;
    while (j < n) {
    if (i != j) {
    sum = sum + coefficient[i][j] * x[j];
  }
    j = j + 1;
  }
    double value = (constant[i] - sum) / coefficient[i][i];
    new_x = [...new_x, value];
    i = i + 1;
  }
    x = new_x;
    k = k + 1;
  }
  return x;
}

List<List<double>> coefficient = [[4.0, 1.0, 1.0], [1.0, 5.0, 2.0], [1.0, 2.0, 4.0]];
List<double> constant = [2.0, -6.0, -4.0];
List<double> init_val = [0.5, -0.5, -0.5];
int iterations = 3;
List<double> result = jacobi_iteration_method(coefficient, constant, init_val, iterations);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + result.join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
