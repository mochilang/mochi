// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<double>> invert_matrix(List<List<double>> matrix) {
  int n = matrix.length;
  List<List<double>> aug = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    row = [...row, matrix[i][j]];
    j = j + 1;
  }
    int k = 0;
    while (k < n) {
    if (i == k) {
    row = [...row, 1.0];
  } else {
    row = [...row, 0.0];
  }
    k = k + 1;
  }
    aug = ([...aug, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int col = 0;
  while (col < n) {
    int pivot_row = col;
    int r = col;
    while (r < n) {
    if (aug[r][col] != 0.0) {
    pivot_row = r;
    break;
  }
    r = r + 1;
  }
    if (aug[pivot_row][col] == 0.0) {
    throw Exception("Matrix is not invertible");
  }
    if (pivot_row != col) {
    List<double> temp = aug[col];
    while (aug.length <= col) { aug.add(<double>[]); } aug[col] = aug[pivot_row];
    while (aug.length <= pivot_row) { aug.add(<double>[]); } aug[pivot_row] = temp;
  }
    double pivot = aug[col][col];
    int c = 0;
    while (c < 2 * n) {
    while (aug[col]!.length <= c) { aug[col]!.add(0); } aug[col]![c] = aug[col][c] / pivot;
    c = c + 1;
  }
    int r2 = 0;
    while (r2 < n) {
    if (r2 != col) {
    double factor = aug[r2][col];
    int c2 = 0;
    while (c2 < 2 * n) {
    while (aug[r2]!.length <= c2) { aug[r2]!.add(0); } aug[r2]![c2] = aug[r2][c2] - factor * aug[col][c2];
    c2 = c2 + 1;
  };
  }
    r2 = r2 + 1;
  }
    col = col + 1;
  }
  List<List<double>> inv = <List<double>>[];
  int r3 = 0;
  while (r3 < n) {
    List<double> row = <double>[];
    int c3 = 0;
    while (c3 < n) {
    row = [...row, aug[r3][c3 + n]];
    c3 = c3 + 1;
  }
    inv = ([...inv, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    r3 = r3 + 1;
  }
  return inv;
}

List<List<double>> mat = [[4.0, 7.0], [2.0, 6.0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Original Matrix:");
  print("[" + mat.join(', ') + "]");
  print("Inverted Matrix:");
  print("[" + invert_matrix(mat).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
