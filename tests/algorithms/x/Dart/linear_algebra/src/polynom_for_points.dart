// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool contains_int(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> split(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

double pow_int_float(int base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * (base as double);
    i = i + 1;
  }
  return result;
}

String points_to_polynomial(List<List<int>> coordinates) {
  if (coordinates.length == 0) {
    throw Exception("The program cannot work out a fitting polynomial.");
  }
  int i = 0;
  while (i < coordinates.length) {
    if (coordinates[i].length != 2) {
    throw Exception("The program cannot work out a fitting polynomial.");
  }
    i = i + 1;
  }
  int j = 0;
  while (j < coordinates.length) {
    int k = j + 1;
    while (k < coordinates.length) {
    if (coordinates[j][0] == coordinates[k][0] && coordinates[j][1] == coordinates[k][1]) {
    throw Exception("The program cannot work out a fitting polynomial.");
  }
    k = k + 1;
  }
    j = j + 1;
  }
  List<int> set_x = <int>[];
  i = 0;
  while (i < coordinates.length) {
    int x_val = coordinates[i][0];
    if (!contains_int(set_x, x_val)) {
    set_x = [...set_x, x_val];
  }
    i = i + 1;
  }
  if (set_x.length == 1) {
    return "x=" + (coordinates[0][0]).toString();
  }
  if (set_x.length != coordinates.length) {
    throw Exception("The program cannot work out a fitting polynomial.");
  }
  int n = coordinates.length;
  List<List<double>> matrix = <List<double>>[];
  int row = 0;
  while (row < n) {
    List<double> line = <double>[];
    int col = 0;
    while (col < n) {
    double power = pow_int_float(coordinates[row][0], n - (col + 1));
    line = [...line, power];
    col = col + 1;
  }
    matrix = ([...matrix, line] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    row = row + 1;
  }
  List<double> vector = <double>[];
  row = 0;
  while (row < n) {
    vector = [...vector, coordinates[row][1] as double];
    row = row + 1;
  }
  int count = 0;
  while (count < n) {
    int number = 0;
    while (number < n) {
    if (count != number) {
    double fraction = matrix[number][count] / matrix[count][count];
    int cc = 0;
    while (cc < n) {
    while (matrix[number]!.length <= cc) { matrix[number]!.add(0); } matrix[number]![cc] = matrix[number][cc] - matrix[count][cc] * fraction;
    cc = cc + 1;
  };
    while (vector.length <= number) { vector.add(0); } vector[number] = vector[number] - vector[count] * fraction;
  }
    number = number + 1;
  }
    count = count + 1;
  }
  List<String> solution = <String>[];
  count = 0;
  while (count < n) {
    double value = vector[count] / matrix[count][count];
    solution = [...solution, (value).toString()];
    count = count + 1;
  }
  String solved = "f(x)=";
  count = 0;
  while (count < n) {
    dynamic parts = solution[count].split("e");
    String coeff = solution[count];
    if (parts.length > 1) {
    coeff = parts[0] + "*10^" + parts[1];
  }
    solved = solved + "x^" + (n - (count + 1)).toString() + "*" + coeff;
    if (count + 1 != n) {
    solved = solved + "+";
  }
    count = count + 1;
  }
  return solved;
}

void _main() {
  print(points_to_polynomial([[1, 0], [2, 0], [3, 0]]));
  print(points_to_polynomial([[1, 1], [2, 1], [3, 1]]));
  print(points_to_polynomial([[1, 1], [2, 4], [3, 9]]));
  print(points_to_polynomial([[1, 3], [2, 6], [3, 11]]));
  print(points_to_polynomial([[1, -3], [2, -6], [3, -11]]));
  print(points_to_polynomial([[1, 1], [1, 2], [1, 3]]));
  print(points_to_polynomial([[1, 5], [2, 2], [3, 9]]));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
