// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class OptionMatrix {
  List<List<double>> value;
  bool ok;
  OptionMatrix({required this.value, required this.ok});
}

List<List<double>> identity(int n) {
  List<List<double>> mat = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 1.0];
  } else {
    row = [...row, 0.0];
  }
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return mat;
}

List<List<double>> transpose(List<List<double>> mat) {
  int rows = mat.length;
  int cols = mat[0].length;
  List<List<double>> res = <List<double>>[];
  int j = 0;
  while (j < cols) {
    List<double> row = <double>[];
    int i = 0;
    while (i < rows) {
    row = [...row, mat[i][j]];
    i = i + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    j = j + 1;
  }
  return res;
}

List<List<double>> matmul(List<List<double>> a, List<List<double>> b) {
  int rows = a.length;
  int cols = b[0].length;
  int inner = a[0].length;
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    double sum = 0.0;
    int k = 0;
    while (k < inner) {
    sum = sum + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = [...row, sum];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<double>> mat_sub(List<List<double>> a, List<List<double>> b) {
  int rows = a.length;
  int cols = a[0].length;
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    row = [...row, a[i][j] - b[i][j]];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<double>> inverse(List<List<double>> mat) {
  int n = mat.length;
  List<List<double>> id = identity(n);
  List<List<double>> aug = <List<double>>[];
  int i = 0;
  while (i < n) {
    dynamic row = [...mat[i], ...id[i]];
    aug = [...aug, row];
    i = i + 1;
  }
  int col = 0;
  while (col < n) {
    List<double> pivot_row = aug[col];
    double pivot = pivot_row[col];
    if (pivot == 0.0) {
    throw Exception("matrix is singular");
  }
    int j = 0;
    while (j < 2 * n) {
    while (pivot_row.length <= j) { pivot_row.add(0); } pivot_row[j] = pivot_row[j] / pivot;
    j = j + 1;
  }
    while (aug.length <= col) { aug.add(<double>[]); } aug[col] = pivot_row;
    int r = 0;
    while (r < n) {
    if (r != col) {
    List<double> row_r = aug[r];
    double factor = row_r[col];
    j = 0;
    while (j < 2 * n) {
    while (row_r.length <= j) { row_r.add(0); } row_r[j] = row_r[j] - factor * pivot_row[j];
    j = j + 1;
  };
    while (aug.length <= r) { aug.add(<double>[]); } aug[r] = row_r;
  }
    r = r + 1;
  }
    col = col + 1;
  }
  List<List<double>> inv = <List<double>>[];
  int r = 0;
  while (r < n) {
    List<double> row = <double>[];
    int c = n;
    while (c < 2 * n) {
    row = [...row, aug[r][c]];
    c = c + 1;
  }
    inv = ([...inv, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    r = r + 1;
  }
  return inv;
}

List<List<double>> schur_complement(List<List<double>> mat_a, List<List<double>> mat_b, List<List<double>> mat_c, OptionMatrix pseudo_inv) {
  int a_rows = mat_a.length;
  int a_cols = mat_a[0].length;
  if (a_rows != a_cols) {
    throw Exception("Matrix A must be square");
  }
  if (a_rows != mat_b.length) {
    throw Exception("Expected the same number of rows for A and B");
  }
  if (mat_b[0].length != mat_c[0].length) {
    throw Exception("Expected the same number of columns for B and C");
  }
  List<List<double>> a_inv = <List<double>>[];
  if (pseudo_inv.ok) {
    a_inv = pseudo_inv.value;
  } else {
    a_inv = inverse(mat_a);
  }
  List<List<double>> bt = transpose(mat_b);
  List<List<double>> a_inv_b = matmul(a_inv, mat_b);
  List<List<double>> bt_a_inv_b = matmul(bt, a_inv_b);
  return mat_sub(mat_c, bt_a_inv_b);
}

void print_matrix(List<List<double>> mat) {
  int i = 0;
  while (i < mat.length) {
    String line = "";
    int j = 0;
    List<double> row = mat[i];
    while (j < row.length) {
    line = line + (row[j]).toString();
    if (j + 1 < row.length) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

void _main() {
  List<List<double>> a = [[1.0, 2.0], [2.0, 1.0]];
  List<List<double>> b = [[0.0, 3.0], [3.0, 0.0]];
  List<List<double>> c = [[2.0, 1.0], [6.0, 3.0]];
  OptionMatrix none = OptionMatrix(value: [], ok: false);
  List<List<double>> s = schur_complement(a, b, c, none);
  print_matrix(s);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
