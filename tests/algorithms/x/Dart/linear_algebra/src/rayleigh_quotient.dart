// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class Complex {
  double re;
  double im;
  Complex({required this.re, required this.im});
}

Complex complex_conj(Complex z) {
  return Complex(re: z.re, im: -z.im);
}

bool complex_eq(Complex a, Complex b) {
  return a.re == b.re && a.im == b.im;
}

Complex complex_add(Complex a, Complex b) {
  return Complex(re: a.re + b.re, im: a.im + b.im);
}

Complex complex_mul(Complex a, Complex b) {
  double real = a.re * b.re - a.im * b.im;
  double imag = a.re * b.im + a.im * b.re;
  return Complex(re: real, im: imag);
}

List<Complex> conj_vector(List<Complex> v) {
  List<Complex> res = <Complex>[];
  int i = 0;
  while (i < v.length) {
    res = [...res, complex_conj(v[i])];
    i = i + 1;
  }
  return res;
}

List<Complex> vec_mat_mul(List<Complex> v, List<List<Complex>> m) {
  List<Complex> result = <Complex>[];
  int col = 0;
  while (col < m[0].length) {
    Complex sum = Complex(re: 0.0, im: 0.0);
    int row = 0;
    while (row < v.length) {
    sum = complex_add(sum, complex_mul(v[row], m[row][col]));
    row = row + 1;
  }
    result = [...result, sum];
    col = col + 1;
  }
  return result;
}

Complex dot(List<Complex> a, List<Complex> b) {
  Complex sum = Complex(re: 0.0, im: 0.0);
  int i = 0;
  while (i < a.length) {
    sum = complex_add(sum, complex_mul(a[i], b[i]));
    i = i + 1;
  }
  return sum;
}

bool is_hermitian(List<List<Complex>> m) {
  int i = 0;
  while (i < m.length) {
    int j = 0;
    while (j < m.length) {
    if (!complex_eq(m[i][j], complex_conj(m[j][i]))) {
    return false;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return true;
}

double rayleigh_quotient(List<List<Complex>> a, List<Complex> v) {
  List<Complex> v_star = conj_vector(v);
  List<Complex> v_star_dot = vec_mat_mul(v_star, a);
  Complex _num = dot(v_star_dot, v);
  Complex den = dot(v_star, v);
  return _num.re / den.re;
}

List<List<Complex>> a = [[Complex(re: 2.0, im: 0.0), Complex(re: 2.0, im: 1.0), Complex(re: 4.0, im: 0.0)], [Complex(re: 2.0, im: -1.0), Complex(re: 3.0, im: 0.0), Complex(re: 0.0, im: 1.0)], [Complex(re: 4.0, im: 0.0), Complex(re: 0.0, im: -1.0), Complex(re: 1.0, im: 0.0)]];
List<Complex> v = [Complex(re: 1.0, im: 0.0), Complex(re: 2.0, im: 0.0), Complex(re: 3.0, im: 0.0)];
List<List<Complex>> b = [[Complex(re: 1.0, im: 0.0), Complex(re: 2.0, im: 0.0), Complex(re: 4.0, im: 0.0)], [Complex(re: 2.0, im: 0.0), Complex(re: 3.0, im: 0.0), Complex(re: -1.0, im: 0.0)], [Complex(re: 4.0, im: 0.0), Complex(re: -1.0, im: 0.0), Complex(re: 1.0, im: 0.0)]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  if (is_hermitian(a)) {
    double r1 = rayleigh_quotient(a, v);
    print(r1);
    print("\n");
  }
  if (is_hermitian(b)) {
    double r2 = rayleigh_quotient(b, v);
    print(r2);
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
