// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

double PI = 3.141592653589793;
double floor(double x) {
  int i = (x).toInt();
  if (((i).toDouble()) > x) {
    i = i - 1;
  }
  return (i).toDouble();
}

double modf(double x, double m) {
  return x - floor(x / m) * m;
}

double sin_taylor(double angle) {
  double x = modf(angle, 2.0 * PI);
  if (x > PI) {
    x = x - 2.0 * PI;
  }
  double term = x;
  double sum = x;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * ((i).toDouble());
    double k2 = k1 + 1.0;
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

double cos_taylor(double angle) {
  double x = modf(angle, 2.0 * PI);
  if (x > PI) {
    x = x - 2.0 * PI;
  }
  double term = 1.0;
  double sum = 1.0;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * ((i).toDouble()) - 1.0;
    double k2 = 2.0 * ((i).toDouble());
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

String matrix_to_string(List<List<double>> m) {
  String s = "[";
  int i = 0;
  while (i < m.length) {
    List<double> row = m[i];
    s = s + "[";
    int j = 0;
    while (j < row.length) {
    s = s + _str(row[j]);
    if (j < row.length - 1) {
    s = s + ", ";
  }
    j = j + 1;
  }
    s = s + "]";
    if (i < m.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<List<double>> scaling(double f) {
  return [[f, 0.0], [0.0, f]];
}

List<List<double>> rotation(double angle) {
  double c = cos_taylor(angle);
  double s = sin_taylor(angle);
  return ([[c, -s], [s, c]] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
}

List<List<double>> projection(double angle) {
  double c = cos_taylor(angle);
  double s = sin_taylor(angle);
  double cs = c * s;
  return [[c * c, cs], [cs, s * s]];
}

List<List<double>> reflection(double angle) {
  double c = cos_taylor(angle);
  double s = sin_taylor(angle);
  double cs = c * s;
  return [[2.0 * c - 1.0, 2.0 * cs], [2.0 * cs, 2.0 * s - 1.0]];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("    scaling(5) = " + matrix_to_string(scaling(5.0)));
  print("  rotation(45) = " + matrix_to_string(rotation(45.0)));
  print("projection(45) = " + matrix_to_string(projection(45.0)));
  print("reflection(45) = " + matrix_to_string(reflection(45.0)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
