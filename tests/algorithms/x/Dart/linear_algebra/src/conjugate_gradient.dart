// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

List<double> zeros(int n) {
  List<double> res = <double>[];
  int i = 0;
  while (i < n) {
    res = [...res, 0.0];
    i = i + 1;
  }
  return res;
}

double dot(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    sum = sum + a[i] * b[i];
    i = i + 1;
  }
  return sum;
}

List<double> mat_vec_mul(List<List<double>> m, List<double> v) {
  List<double> res = <double>[];
  int i = 0;
  while (i < m.length) {
    double s = 0.0;
    int j = 0;
    while (j < m[i].length) {
    s = s + m[i][j] * v[j];
    j = j + 1;
  }
    res = [...res, s];
    i = i + 1;
  }
  return res;
}

List<double> vec_add(List<double> a, List<double> b) {
  List<double> res = <double>[];
  int i = 0;
  while (i < a.length) {
    res = [...res, a[i] + b[i]];
    i = i + 1;
  }
  return res;
}

List<double> vec_sub(List<double> a, List<double> b) {
  List<double> res = <double>[];
  int i = 0;
  while (i < a.length) {
    res = [...res, a[i] - b[i]];
    i = i + 1;
  }
  return res;
}

List<double> scalar_mul(double s, List<double> v) {
  List<double> res = <double>[];
  int i = 0;
  while (i < v.length) {
    res = [...res, s * v[i]];
    i = i + 1;
  }
  return res;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double norm(List<double> v) {
  return sqrtApprox(dot(v, v));
}

List<double> conjugate_gradient(List<List<double>> A, List<double> b, int max_iterations, double tol) {
  int n = b.length;
  List<double> x = zeros(n);
  List<double> r = vec_sub(b, mat_vec_mul(A, x));
  List<double> p = r;
  double rs_old = dot(r, r);
  int i = 0;
  while (i < max_iterations) {
    List<double> Ap = mat_vec_mul(A, p);
    double alpha = rs_old / dot(p, Ap);
    x = vec_add(x, scalar_mul(alpha, p));
    r = vec_sub(r, scalar_mul(alpha, Ap));
    double rs_new = dot(r, r);
    if (sqrtApprox(rs_new) < tol) {
    break;
  }
    double beta = rs_new / rs_old;
    p = vec_add(r, scalar_mul(beta, p));
    rs_old = rs_new;
    i = i + 1;
  }
  return x;
}

List<List<double>> A = [[8.73256573, -5.02034289, -2.68709226], [-5.02034289, 3.78188322, 0.91980451], [-2.68709226, 0.91980451, 1.94746467]];
List<double> b = [-5.80872761, 3.23807431, 1.95381422];
List<double> x = conjugate_gradient(A, b, 1000, 0.00000001);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(x[0]));
  print(_str(x[1]));
  print(_str(x[2]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
