// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String int_to_string(int n) {
  if (n == 0) {
    return "0";
  }
  int _num = n;
  bool neg = false;
  if (_num < 0) {
    neg = true;
    _num = -_num;
  }
  String res = "";
  while (_num > 0) {
    int digit = _num % 10;
    String ch = _substr("0123456789", digit, digit + 1);
    res = ch + res;
    _num = _num ~/ 10;
  }
  if (neg) {
    res = "-" + res;
  }
  return res;
}

String float_to_string(double x, int dec) {
  bool neg = false;
  double _num = x;
  if (_num < 0.0) {
    neg = true;
    _num = -_num;
  }
  int int_part = _num as int;
  String res = int_to_string(int_part);
  if (dec > 0) {
    res = res + ".";
    double frac = _num - (int_part as double);
    int i = 0;
    while (i < dec) {
    frac = frac * 10.0;
    int digit = frac as int;
    res = res + _substr("0123456789", digit, digit + 1);
    frac = frac - (digit as double);
    i = i + 1;
  };
  }
  if (neg) {
    res = "-" + res;
  }
  return res;
}

int vector_component(List<int> v, int i) {
  return v[i];
}

String vector_str_int(List<int> v) {
  String s = "(";
  int i = 0;
  while (i < v.length) {
    s = s + int_to_string(v[i]);
    if (i + 1 < v.length) {
    s = s + ",";
  }
    i = i + 1;
  }
  s = s + ")";
  return s;
}

String vector_str_float(List<double> v, int dec) {
  String s = "(";
  int i = 0;
  while (i < v.length) {
    s = s + float_to_string(v[i], dec);
    if (i + 1 < v.length) {
    s = s + ",";
  }
    i = i + 1;
  }
  s = s + ")";
  return s;
}

List<int> vector_add(List<int> a, List<int> b) {
  List<int> res = <int>[];
  int i = 0;
  while (i < a.length) {
    res = [...res, a[i] + b[i]];
    i = i + 1;
  }
  return res;
}

List<int> vector_sub(List<int> a, List<int> b) {
  List<int> res = <int>[];
  int i = 0;
  while (i < a.length) {
    res = [...res, a[i] - b[i]];
    i = i + 1;
  }
  return res;
}

List<double> vector_scalar_mul(List<int> v, double s) {
  List<double> res = <double>[];
  int i = 0;
  while (i < v.length) {
    res = [...res, (v[i] as double) * s];
    i = i + 1;
  }
  return res;
}

int vector_dot(List<int> a, List<int> b) {
  int sum = 0;
  int i = 0;
  while (i < a.length) {
    sum = sum + a[i] * b[i];
    i = i + 1;
  }
  return sum;
}

double sqrt_newton(double x) {
  if (x == 0.0) {
    return 0.0;
  }
  double low = 0.0;
  double high = x;
  if (x < 1.0) {
    high = 1.0;
  }
  double mid = 0.0;
  int i = 0;
  while (i < 40) {
    mid = (low + high) / 2.0;
    if (mid * mid > x) {
    high = mid;
  } else {
    low = mid;
  }
    i = i + 1;
  }
  return mid;
}

double euclidean_length(List<int> v) {
  double sum = 0.0;
  int i = 0;
  while (i < v.length) {
    double val = v[i] as double;
    sum = sum + val * val;
    i = i + 1;
  }
  return sqrt_newton(sum);
}

List<int> zero_vector(int n) {
  List<int> v = <int>[];
  int i = 0;
  while (i < n) {
    v = [...v, 0];
    i = i + 1;
  }
  return v;
}

List<int> unit_basis_vector(int n, int idx) {
  List<int> v = zero_vector(n);
  while (v.length <= idx) { v.add(0); } v[idx] = 1;
  return v;
}

List<int> axpy(int a, List<int> x, List<int> y) {
  List<int> res = <int>[];
  int i = 0;
  while (i < x.length) {
    res = [...res, a * x[i] + y[i]];
    i = i + 1;
  }
  return res;
}

List<int> copy_vector(List<int> x) {
  List<int> res = <int>[];
  int i = 0;
  while (i < x.length) {
    res = [...res, x[i]];
    i = i + 1;
  }
  return res;
}

void change_component(List<int> v, int idx, int val) {
  while (v.length <= idx) { v.add(0); } v[idx] = val;
}

String matrix_str(List<List<int>> m) {
  String s = "";
  int i = 0;
  while (i < m.length) {
    s = s + "|";
    int j = 0;
    while (j < m[0].length) {
    s = s + int_to_string(m[i][j]);
    if (j + 1 < m[0].length) {
    s = s + ",";
  }
    j = j + 1;
  }
    s = s + "|\n";
    i = i + 1;
  }
  return s;
}

List<List<int>> submatrix(List<List<int>> m, int row, int col) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < m.length) {
    if (i != row) {
    List<int> r = <int>[];
    int j = 0;
    while (j < m[0].length) {
    if (j != col) {
    r = [...r, m[i][j]];
  }
    j = j + 1;
  };
    res = ([...res, r] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    i = i + 1;
  }
  return res;
}

int determinant(List<List<int>> m) {
  int n = m.length;
  if (n == 1) {
    return m[0][0];
  }
  if (n == 2) {
    return m[0][0] * m[1][1] - m[0][1] * m[1][0];
  }
  int det = 0;
  int c = 0;
  while (c < n) {
    List<List<int>> sub = submatrix(m, 0, c);
    int sign = 1;
    if (c % 2 == 1) {
    sign = -1;
  }
    det = det + sign * m[0][c] * determinant(sub);
    c = c + 1;
  }
  return det;
}

int matrix_minor(List<List<int>> m, int row, int col) {
  return determinant(submatrix(m, row, col));
}

int matrix_cofactor(List<List<int>> m, int row, int col) {
  int sign = 1;
  if ((row + col) % 2 == 1) {
    sign = -1;
  }
  return sign * matrix_minor(m, row, col);
}

List<int> matrix_mul_vector(List<List<int>> m, List<int> v) {
  List<int> res = <int>[];
  int i = 0;
  while (i < m.length) {
    int sum = 0;
    int j = 0;
    while (j < m[0].length) {
    sum = sum + m[i][j] * v[j];
    j = j + 1;
  }
    res = [...res, sum];
    i = i + 1;
  }
  return res;
}

List<List<int>> matrix_mul_scalar(List<List<int>> m, int s) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < m.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < m[0].length) {
    row = [...row, m[i][j] * s];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

void matrix_change_component(List<List<int>> m, int i, int j, int val) {
  while (m[i]!.length <= j) { m[i]!.add(0); } m[i]![j] = val;
}

int matrix_component(List<List<int>> m, int i, int j) {
  return m[i][j];
}

List<List<int>> matrix_add(List<List<int>> a, List<List<int>> b) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < a.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < a[0].length) {
    row = [...row, a[i][j] + b[i][j]];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<int>> matrix_sub(List<List<int>> a, List<List<int>> b) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < a.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < a[0].length) {
    row = [...row, a[i][j] - b[i][j]];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<int>> square_zero_matrix(int n) {
  List<List<int>> m = <List<int>>[];
  int i = 0;
  while (i < n) {
    m = ([...m, zero_vector(n)] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return m;
}

void assert_int(String name, int actual, int expected) {
  if (actual == expected) {
    print(name + " ok");
  } else {
    print(name + " fail " + int_to_string(actual) + " != " + int_to_string(expected));
  }
}

void assert_str(String name, String actual, String expected) {
  if (actual == expected) {
    print(name + " ok");
  } else {
    print(name + " fail");
    print(actual);
    print(expected);
  }
}

void assert_float(String name, double actual, double expected, double eps) {
  double diff = actual - expected;
  if (diff < 0.0) {
    diff = -diff;
  }
  if (diff <= eps) {
    print(name + " ok");
  } else {
    print(name + " fail");
  }
}

List<int> vx = [1, 2, 3];
List<int> vs = [0, 0, 0, 0, 0, 1];
List<int> vsize = [1, 2, 3, 4];
List<int> va = [1, 2, 3];
List<int> vb = [1, 1, 1];
List<int> vsum = vector_add(va, vb);
List<int> vsub = vector_sub(va, vb);
List<double> vmul = vector_scalar_mul(va, 3.0);
List<int> zvec = zero_vector(10);
String zstr = vector_str_int(zvec);
int zcount = 0;
int zi = 0;
List<int> vcopy = copy_vector([1, 0, 0, 0, 0, 0]);
List<int> vchange = [1, 0, 0];
List<List<int>> ma = [[1, 2, 3], [2, 4, 5], [6, 7, 8]];
List<List<int>> mb = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
List<int> mv = matrix_mul_vector(mb, [1, 2, 3]);
List<List<int>> msc = matrix_mul_scalar(mb, 2);
List<List<int>> mc = [[1, 2, 3], [2, 4, 5], [6, 7, 8]];
List<List<int>> madd = matrix_add([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]]);
List<List<int>> msub = matrix_sub([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]]);
List<List<int>> mzero = square_zero_matrix(5);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  assert_int("component0", vector_component(vx, 0), 1);
  assert_int("component2", vector_component(vx, 2), 3);
  assert_str("str_vector", vector_str_int(vs), "(0,0,0,0,0,1)");
  assert_int("size", vsize.length, 4);
  assert_int("add0", vector_component(vsum, 0), 2);
  assert_int("add1", vector_component(vsum, 1), 3);
  assert_int("add2", vector_component(vsum, 2), 4);
  assert_int("sub0", vector_component(vsub, 0), 0);
  assert_int("sub1", vector_component(vsub, 1), 1);
  assert_int("sub2", vector_component(vsub, 2), 2);
  assert_str("scalar_mul", vector_str_float(vmul, 1), "(3.0,6.0,9.0)");
  assert_int("dot_product", vector_dot([2, -1, 4], [1, -2, -1]), 0);
  while (zi < zstr.length) {
    if (_substr(zstr, zi, zi + 1) == "0") {
    zcount = zcount + 1;
  }
    zi = zi + 1;
  }
  assert_int("zero_vector", zcount, 10);
  assert_str("unit_basis", vector_str_int(unit_basis_vector(3, 1)), "(0,1,0)");
  assert_str("axpy", vector_str_int(axpy(2, [1, 2, 3], [1, 0, 1])), "(3,4,7)");
  assert_str("copy", vector_str_int(vcopy), "(1,0,0,0,0,0)");
  change_component(vchange, 0, 0);
  change_component(vchange, 1, 1);
  assert_str("change_component", vector_str_int(vchange), "(0,1,0)");
  assert_str("matrix_str", matrix_str(ma), "|1,2,3|\n|2,4,5|\n|6,7,8|\n");
  assert_int("determinant", determinant(ma), -5);
  assert_str("matrix_vec_mul", vector_str_int(mv), "(14,32,50)");
  assert_str("matrix_scalar_mul", matrix_str(msc), "|2,4,6|\n|8,10,12|\n|14,16,18|\n");
  matrix_change_component(mc, 0, 2, 5);
  assert_str("change_component_matrix", matrix_str(mc), "|1,2,5|\n|2,4,5|\n|6,7,8|\n");
  assert_int("matrix_component", matrix_component(mc, 2, 1), 7);
  assert_str("matrix_add", matrix_str(madd), "|2,4,10|\n|4,8,10|\n|12,14,18|\n");
  assert_str("matrix_sub", matrix_str(msub), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n");
  assert_str("square_zero_matrix", matrix_str(mzero), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
