// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class PowerResult {
  double eigenvalue;
  List<double> eigenvector;
  PowerResult({required this.eigenvalue, required this.eigenvector});
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrtApprox(double x) {
  if (x == 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double dot(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    sum = sum + a[i] * b[i];
    i = i + 1;
  }
  return sum;
}

List<double> mat_vec_mult(List<List<double>> mat, List<double> vec) {
  List<double> res = <double>[];
  int i = 0;
  while (i < mat.length) {
    res = [...res, dot(mat[i], vec)];
    i = i + 1;
  }
  return res;
}

double norm(List<double> vec) {
  double sum = 0.0;
  int i = 0;
  while (i < vec.length) {
    sum = sum + vec[i] * vec[i];
    i = i + 1;
  }
  double root = sqrtApprox(sum);
  return root;
}

List<double> normalize(List<double> vec) {
  double n = norm(vec);
  List<double> res = <double>[];
  int i = 0;
  while (i < vec.length) {
    res = [...res, vec[i] / n];
    i = i + 1;
  }
  return res;
}

PowerResult power_iteration(List<List<double>> matrix, List<double> vector, double error_tol, int max_iterations) {
  List<double> v = normalize(vector);
  double lambda_prev = 0.0;
  double lambda = 0.0;
  double err = 1000000000000.0;
  int iterations = 0;
  while (err > error_tol && iterations < max_iterations) {
    List<double> w = mat_vec_mult(matrix, v);
    v = normalize(w);
    List<double> mv = mat_vec_mult(matrix, v);
    lambda = dot(v, mv);
    dynamic denom = (lambda != 0.0 ? lambda.abs() : 1.0);
    err = (lambda - lambda_prev).abs() ~/ denom;
    lambda_prev = lambda;
    iterations = iterations + 1;
  }
  return PowerResult(eigenvalue: lambda, eigenvector: v);
}

List<List<double>> input_matrix = [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]];
List<double> vector = [41.0, 4.0, 20.0];
PowerResult result = power_iteration(input_matrix, vector, 0.000000000001, 100);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((result.eigenvalue).toString());
  print((result.eigenvector).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
