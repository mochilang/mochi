// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

void panic(String msg) {
  print(msg);
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

List<List<double>> copy_matrix(List<List<double>> src) {
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < src.length) {
    List<double> row_src = src[i];
    List<double> row = <double>[];
    int j = 0;
    while (j < row_src.length) {
    row = [...row, row_src[j]];
    j = j + 1;
  }
    res = ([...res, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<double> solve_linear_system(List<List<double>> matrix) {
  List<List<double>> ab = copy_matrix(matrix);
  int num_rows = ab.length;
  int num_cols = ab[0].length - 1;
  if (num_rows != num_cols) {
    _error("Matrix is not square");
    return List<double>.from([]);
  }
  int column_num = 0;
  while (column_num < num_rows) {
    int i = column_num;
    while (i < num_cols) {
    if (abs_float(ab[i][column_num]) > abs_float(ab[column_num][column_num])) {
    List<double> temp = ab[column_num];
    while (ab.length <= column_num) { ab.add(<double>[]); } ab[column_num] = ab[i];
    while (ab.length <= i) { ab.add(<double>[]); } ab[i] = temp;
  }
    i = i + 1;
  }
    if (abs_float(ab[column_num][column_num]) < 0.00000001) {
    _error("Matrix is singular");
    return List<double>.from([]);
  }
    if (column_num != 0) {
    i = column_num;
    while (i < num_rows) {
    double factor = ab[i][column_num - 1] / ab[column_num - 1][column_num - 1];
    int j = 0;
    while (j < ab[i].length) {
    while (ab[i]!.length <= j) { ab[i]!.add(0); } ab[i]![j] = ab[i][j] - factor * ab[column_num - 1][j];
    j = j + 1;
  }
    i = i + 1;
  };
  }
    column_num = column_num + 1;
  }
  List<double> x_lst = <double>[];
  int t = 0;
  while (t < num_rows) {
    x_lst = [...x_lst, 0.0];
    t = t + 1;
  }
  column_num = num_rows - 1;
  while (column_num >= 0) {
    double x = ab[column_num][num_cols] / ab[column_num][column_num];
    while (x_lst.length <= column_num) { x_lst.add(0); } x_lst[column_num] = x;
    int i = column_num - 1;
    while (i >= 0) {
    while (ab[i]!.length <= num_cols) { ab[i]!.add(0); } ab[i]![num_cols] = ab[i][num_cols] - ab[i][column_num] * x;
    i = i - 1;
  }
    column_num = column_num - 1;
  }
  return x_lst;
}

List<List<double>> example_matrix = [[5.0, -5.0, -3.0, 4.0, -11.0], [1.0, -4.0, 6.0, -4.0, -10.0], [-2.0, -5.0, 4.0, -5.0, -12.0], [-3.0, -3.0, 5.0, -5.0, 8.0]];
List<double> solution = solve_linear_system(example_matrix);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Matrix:");
  print(_str(example_matrix));
  print(_str(solution));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
