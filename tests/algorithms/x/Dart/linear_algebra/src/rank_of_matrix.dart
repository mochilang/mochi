// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int rank_of_matrix(List<List<double>> matrix) {
  int rows = matrix.length;
  if (rows == 0) {
    return 0;
  }
  int columns = (matrix[0].length > 0 ? matrix[0].length : 0);
  int rank = (rows < columns ? rows : columns);
  int row = 0;
  while (row < rank) {
    if (matrix[row][row] != 0.0) {
    int col = row + 1;
    while (col < rows) {
    double mult = matrix[col][row] / matrix[row][row];
    int i = row;
    while (i < columns) {
    while (matrix[col]!.length <= i) { matrix[col]!.add(0); } matrix[col]![i] = matrix[col][i] - mult * matrix[row][i];
    i = i + 1;
  }
    col = col + 1;
  };
  } else {
    bool reduce = true;
    int i = row + 1;
    while (i < rows) {
    if (matrix[i][row] != 0.0) {
    List<double> temp = matrix[row];
    while (matrix.length <= row) { matrix.add(<double>[]); } matrix[row] = matrix[i];
    while (matrix.length <= i) { matrix.add(<double>[]); } matrix[i] = temp;
    reduce = false;
    break;
  }
    i = i + 1;
  };
    if (reduce) {
    rank = rank - 1;
    int j = 0;
    while (j < rows) {
    while (matrix[j]!.length <= row) { matrix[j]!.add(0); } matrix[j]![row] = matrix[j][rank];
    j = j + 1;
  };
  };
    row = row - 1;
  }
    row = row + 1;
  }
  return rank;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
