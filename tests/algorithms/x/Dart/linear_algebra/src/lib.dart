// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Vector {
  List<double> components;
  Vector({required this.components});
}

class Matrix {
  List<List<double>> data;
  int width;
  int height;
  Matrix({required this.data, required this.width, required this.height});
}

double PI = 3.141592653589793;
int seed = 123456789;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

int random_int(int a, int b) {
  int r = rand() % (b - a + 1);
  return a + r;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double arcsin_taylor(double x) {
  double term = x;
  double sum = x;
  int n = 1;
  while (n < 10) {
    double _num = (2.0 * (n as double) - 1.0) * (2.0 * (n as double) - 1.0) * x * x * term;
    double den = 2.0 * (n as double) * (2.0 * (n as double) + 1.0);
    term = _num / den;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

double acos_taylor(double x) {
  return PI / 2.0 - arcsin_taylor(x);
}

int vector_len(Vector v) {
  return v.components.length;
}

String vector_to_string(Vector v) {
  String s = "(";
  int i = 0;
  while (i < v.components.length) {
    s = s + (v.components[i]).toString();
    if (i < v.components.length - 1) {
    s = s + ",";
  }
    i = i + 1;
  }
  s = s + ")";
  return s;
}

Vector vector_add(Vector a, Vector b) {
  int size = vector_len(a);
  if (size != vector_len(b)) {
    return Vector(components: []);
  }
  List<double> res = <double>[];
  int i = 0;
  while (i < size) {
    res = [...res, a.components[i] + b.components[i]];
    i = i + 1;
  }
  return Vector(components: res);
}

Vector vector_sub(Vector a, Vector b) {
  int size = vector_len(a);
  if (size != vector_len(b)) {
    return Vector(components: []);
  }
  List<double> res = <double>[];
  int i = 0;
  while (i < size) {
    res = [...res, a.components[i] - b.components[i]];
    i = i + 1;
  }
  return Vector(components: res);
}

bool vector_eq(Vector a, Vector b) {
  if (vector_len(a) != vector_len(b)) {
    return false;
  }
  int i = 0;
  while (i < vector_len(a)) {
    if (a.components[i] != b.components[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

Vector vector_mul_scalar(Vector v, double s) {
  List<double> res = <double>[];
  int i = 0;
  while (i < vector_len(v)) {
    res = [...res, v.components[i] * s];
    i = i + 1;
  }
  return Vector(components: res);
}

double vector_dot(Vector a, Vector b) {
  int size = vector_len(a);
  if (size != vector_len(b)) {
    return 0.0;
  }
  double sum = 0.0;
  int i = 0;
  while (i < size) {
    sum = sum + a.components[i] * b.components[i];
    i = i + 1;
  }
  return sum;
}

Vector vector_copy(Vector v) {
  List<double> res = <double>[];
  int i = 0;
  while (i < vector_len(v)) {
    res = [...res, v.components[i]];
    i = i + 1;
  }
  return Vector(components: res);
}

double vector_component(Vector v, int idx) {
  return v.components[idx];
}

Vector vector_change_component(Vector v, int pos, double value) {
  List<double> comps = v.components;
  while (comps.length <= pos) { comps.add(0); } comps[pos] = value;
  return Vector(components: comps);
}

double vector_euclidean_length(Vector v) {
  double sum = 0.0;
  int i = 0;
  while (i < v.components.length) {
    sum = sum + v.components[i] * v.components[i];
    i = i + 1;
  }
  double result = sqrtApprox(sum);
  return result;
}

double vector_angle(Vector a, Vector b, bool deg) {
  double _num = vector_dot(a, b);
  double den = vector_euclidean_length(a) * vector_euclidean_length(b);
  double ang = acos_taylor(_num / den);
  if (deg) {
    ang = ang * 180.0 / PI;
  }
  return ang;
}

Vector zero_vector(int d) {
  List<double> res = <double>[];
  int i = 0;
  while (i < d) {
    res = [...res, 0.0];
    i = i + 1;
  }
  return Vector(components: res);
}

Vector unit_basis_vector(int d, int pos) {
  List<double> res = <double>[];
  int i = 0;
  while (i < d) {
    if (i == pos) {
    res = [...res, 1.0];
  } else {
    res = [...res, 0.0];
  }
    i = i + 1;
  }
  return Vector(components: res);
}

Vector axpy(double s, Vector x, Vector y) {
  return vector_add(vector_mul_scalar(x, s), y);
}

Vector random_vector(int n, int a, int b) {
  List<double> res = <double>[];
  int i = 0;
  while (i < n) {
    res = [...res, random_int(a, b) as double];
    i = i + 1;
  }
  return Vector(components: res);
}

String matrix_to_string(Matrix m) {
  String ans = "";
  int i = 0;
  while (i < m.height) {
    ans = ans + "|";
    int j = 0;
    while (j < m.width) {
    ans = ans + (m.data[i][j]).toString();
    if (j < m.width - 1) {
    ans = ans + ",";
  }
    j = j + 1;
  }
    ans = ans + "|\n";
    i = i + 1;
  }
  return ans;
}

Matrix matrix_add(Matrix a, Matrix b) {
  if (a.width != b.width || a.height != b.height) {
    return Matrix(data: [], width: 0, height: 0);
  }
  List<List<double>> mat = <List<double>>[];
  int i = 0;
  while (i < a.height) {
    List<double> row = <double>[];
    int j = 0;
    while (j < a.width) {
    row = [...row, a.data[i][j] + b.data[i][j]];
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: mat, width: a.width, height: a.height);
}

Matrix matrix_sub(Matrix a, Matrix b) {
  if (a.width != b.width || a.height != b.height) {
    return Matrix(data: [], width: 0, height: 0);
  }
  List<List<double>> mat = <List<double>>[];
  int i = 0;
  while (i < a.height) {
    List<double> row = <double>[];
    int j = 0;
    while (j < a.width) {
    row = [...row, a.data[i][j] - b.data[i][j]];
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: mat, width: a.width, height: a.height);
}

Vector matrix_mul_vector(Matrix m, Vector v) {
  if (v.components.length != m.width) {
    return Vector(components: []);
  }
  Vector res = zero_vector(m.height);
  int i = 0;
  while (i < m.height) {
    double sum = 0.0;
    int j = 0;
    while (j < m.width) {
    sum = sum + m.data[i][j] * v.components[j];
    j = j + 1;
  }
    res = vector_change_component(res, i, sum);
    i = i + 1;
  }
  return res;
}

Matrix matrix_mul_scalar(Matrix m, double s) {
  List<List<double>> mat = <List<double>>[];
  int i = 0;
  while (i < m.height) {
    List<double> row = <double>[];
    int j = 0;
    while (j < m.width) {
    row = [...row, m.data[i][j] * s];
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: mat, width: m.width, height: m.height);
}

double matrix_component(Matrix m, int x, int y) {
  return m.data[x][y];
}

Matrix matrix_change_component(Matrix m, int x, int y, double value) {
  List<List<double>> data = m.data;
  while (data[x]!.length <= y) { data[x]!.add(0); } data[x]![y] = value;
  return Matrix(data: data, width: m.width, height: m.height);
}

double matrix_minor(Matrix m, int x, int y) {
  if (m.height != m.width) {
    return 0.0;
  }
  List<List<double>> minor = <List<double>>[];
  int i = 0;
  while (i < m.height) {
    if (i != x) {
    List<double> row = <double>[];
    int j = 0;
    while (j < m.width) {
    if (j != y) {
    row = [...row, m.data[i][j]];
  }
    j = j + 1;
  };
    minor = ([...minor, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
    i = i + 1;
  }
  Matrix sub = Matrix(data: minor, width: m.width - 1, height: m.height - 1);
  return matrix_determinant(sub);
}

double matrix_cofactor(Matrix m, int x, int y) {
  dynamic sign = ((x + y) % 2 == 0 ? 1.0 : -1.0);
  return sign * matrix_minor(m, x, y);
}

double matrix_determinant(Matrix m) {
  if (m.height != m.width) {
    return 0.0;
  }
  if (m.height == 0) {
    return 0.0;
  }
  if (m.height == 1) {
    return m.data[0][0];
  }
  if (m.height == 2) {
    return m.data[0][0] * m.data[1][1] - m.data[0][1] * m.data[1][0];
  }
  double sum = 0.0;
  int y = 0;
  while (y < m.width) {
    sum = sum + m.data[0][y] * matrix_cofactor(m, 0, y);
    y = y + 1;
  }
  return sum;
}

Matrix square_zero_matrix(int n) {
  List<List<double>> mat = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0.0];
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: mat, width: n, height: n);
}

Matrix random_matrix(int w, int h, int a, int b) {
  List<List<double>> mat = <List<double>>[];
  int i = 0;
  while (i < h) {
    List<double> row = <double>[];
    int j = 0;
    while (j < w) {
    row = [...row, random_int(a, b) as double];
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: mat, width: w, height: h);
}

void _main() {
  Vector v1 = Vector(components: [1.0, 2.0, 3.0]);
  Vector v2 = Vector(components: [4.0, 5.0, 6.0]);
  print(vector_to_string(vector_add(v1, v2)));
  print((vector_dot(v1, v2)).toString());
  print((vector_euclidean_length(v1)).toString());
  Matrix m = Matrix(data: [[1.0, 2.0], [3.0, 4.0]], width: 2, height: 2);
  print((matrix_determinant(m)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
