// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<List<double>> retroactive_resolution(List<List<double>> coefficients, List<List<double>> vector) {
  int rows = coefficients.length;
  List<List<double>> x = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> inner = <double>[];
    inner = [...inner, 0.0];
    x = ([...x, inner] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int r = rows - 1;
  while (r >= 0) {
    double total = 0.0;
    int c = r + 1;
    while (c < rows) {
    total = total + coefficients[r][c] * x[c][0];
    c = c + 1;
  }
    while (x[r]!.length <= 0) { x[r]!.add(0); } x[r]![0] = (vector[r][0] - total) / coefficients[r][r];
    r = r - 1;
  }
  return x;
}

List<List<double>> gaussian_elimination(List<List<double>> coefficients, List<List<double>> vector) {
  int rows = coefficients.length;
  int columns = coefficients[0].length;
  if (rows != columns) {
    return ([] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
  List<List<double>> augmented = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < columns) {
    row = [...row, coefficients[i][j]];
    j = j + 1;
  }
    row = [...row, vector[i][0]];
    augmented = ([...augmented, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int row_idx = 0;
  while (row_idx < rows - 1) {
    double pivot = augmented[row_idx][row_idx];
    int col = row_idx + 1;
    while (col < rows) {
    double factor = augmented[col][row_idx] / pivot;
    int k = row_idx;
    while (k < columns + 1) {
    while (augmented[col]!.length <= k) { augmented[col]!.add(0); } augmented[col]![k] = augmented[col][k] - factor * augmented[row_idx][k];
    k = k + 1;
  }
    col = col + 1;
  }
    row_idx = row_idx + 1;
  }
  List<List<double>> coeffs = <List<double>>[];
  List<List<double>> vec = <List<double>>[];
  int r = 0;
  while (r < rows) {
    List<double> row = <double>[];
    int c = 0;
    while (c < columns) {
    row = [...row, augmented[r][c]];
    c = c + 1;
  }
    coeffs = ([...coeffs, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    vec = ([...vec, [augmented[r][columns]]] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    r = r + 1;
  }
  List<List<double>> x = retroactive_resolution(coeffs, vec);
  return x;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + gaussian_elimination([[1.0, -4.0, -2.0], [5.0, 2.0, -2.0], [1.0, -1.0, 0.0]], List<List<double>>.from([[-2.0], [-3.0], [4.0]])).join(', ') + "]");
  print("[" + gaussian_elimination([[1.0, 2.0], [5.0, 2.0]], [[5.0], [5.0]]).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
