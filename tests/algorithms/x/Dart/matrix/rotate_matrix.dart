// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

List<List<int>> make_matrix(int row_size) {
  int size = abs_int(row_size);
  if (size == 0) {
    size = 4;
  }
  List<List<int>> mat = <List<int>>[];
  int y = 0;
  while (y < size) {
    List<int> row = <int>[];
    int x = 0;
    while (x < size) {
    row = [...row, 1 + x + y * size];
    x = x + 1;
  }
    mat = ([...mat, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    y = y + 1;
  }
  return mat;
}

List<List<int>> transpose(List<List<int>> mat) {
  int n = mat.length;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, mat[j][i]];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> reverse_row(List<List<int>> mat) {
  List<List<int>> result = <List<int>>[];
  int i = mat.length - 1;
  while (i >= 0) {
    result = ([...result, mat[i]] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i - 1;
  }
  return result;
}

List<List<int>> reverse_column(List<List<int>> mat) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < mat.length) {
    List<int> row = <int>[];
    int j = mat[i].length - 1;
    while (j >= 0) {
    row = [...row, mat[i][j]];
    j = j - 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> rotate_90(List<List<int>> mat) {
  List<List<int>> t = transpose(mat);
  List<List<int>> rr = reverse_row(t);
  return rr;
}

List<List<int>> rotate_180(List<List<int>> mat) {
  List<List<int>> rc = reverse_column(mat);
  List<List<int>> rr = reverse_row(rc);
  return rr;
}

List<List<int>> rotate_270(List<List<int>> mat) {
  List<List<int>> t = transpose(mat);
  List<List<int>> rc = reverse_column(t);
  return rc;
}

String row_to_string(List<int> row) {
  String line = "";
  int i = 0;
  while (i < row.length) {
    if (i == 0) {
    line = (row[i]).toString();
  } else {
    line = line + " " + (row[i]).toString();
  }
    i = i + 1;
  }
  return line;
}

void print_matrix(List<List<int>> mat) {
  int i = 0;
  while (i < mat.length) {
    print(row_to_string(mat[i]));
    i = i + 1;
  }
}

List<List<int>> mat = make_matrix(4);
List<List<int>> r90 = rotate_90(mat);
List<List<int>> r180 = rotate_180(mat);
List<List<int>> r270 = rotate_270(mat);
void main() {
  print("\norigin:\n");
  print_matrix(mat);
  print("\nrotate 90 counterclockwise:\n");
  print_matrix(r90);
  mat = make_matrix(4);
  print("\norigin:\n");
  print_matrix(mat);
  print("\nrotate 180:\n");
  print_matrix(r180);
  mat = make_matrix(4);
  print("\norigin:\n");
  print_matrix(mat);
  print("\nrotate 270 counterclockwise:\n");
  print_matrix(r270);
}
