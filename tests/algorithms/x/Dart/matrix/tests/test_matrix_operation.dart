// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

void check_matrix(List<List<double>> mat) {
  if (mat.length < 2 || mat[0].length < 2) {
    throw Exception("Expected a matrix with at least 2x2 dimensions");
  }
}

List<List<double>> add(List<List<double>> a, List<List<double>> b) {
  check_matrix(a);
  check_matrix(b);
  if (a.length != b.length || a[0].length != b[0].length) {
    throw Exception("Matrices must have the same dimensions");
  }
  int rows = a.length;
  int cols = a[0].length;
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    row = (row..add(a[i][j] + b[i][j]));
    j = j + 1;
  }
    result = ((result..add(row)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> subtract(List<List<double>> a, List<List<double>> b) {
  check_matrix(a);
  check_matrix(b);
  if (a.length != b.length || a[0].length != b[0].length) {
    throw Exception("Matrices must have the same dimensions");
  }
  int rows = a.length;
  int cols = a[0].length;
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    row = (row..add(a[i][j] - b[i][j]));
    j = j + 1;
  }
    result = ((result..add(row)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> scalar_multiply(List<List<double>> a, double s) {
  check_matrix(a);
  int rows = a.length;
  int cols = a[0].length;
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    row = (row..add(a[i][j] * s));
    j = j + 1;
  }
    result = ((result..add(row)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> multiply(List<List<double>> a, List<List<double>> b) {
  check_matrix(a);
  check_matrix(b);
  if (a[0].length != b.length) {
    throw Exception("Invalid dimensions for matrix multiplication");
  }
  int rows = a.length;
  int cols = b[0].length;
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    double sum = 0.0;
    int k = 0;
    while (k < b.length) {
    sum = sum + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = (row..add(sum));
    j = j + 1;
  }
    result = ((result..add(row)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> identity(int n) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = (row..add(1.0));
  } else {
    row = (row..add(0.0));
  }
    j = j + 1;
  }
    result = ((result..add(row)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> transpose(List<List<double>> a) {
  check_matrix(a);
  int rows = a.length;
  int cols = a[0].length;
  List<List<double>> result = <List<double>>[];
  int j = 0;
  while (j < cols) {
    List<double> row = <double>[];
    int i = 0;
    while (i < rows) {
    row = (row..add(a[i][j]));
    i = i + 1;
  }
    result = ((result..add(row)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    j = j + 1;
  }
  return result;
}

void _main() {
  List<List<double>> mat_a = [[12.0, 10.0], [3.0, 9.0]];
  List<List<double>> mat_b = [[3.0, 4.0], [7.0, 4.0]];
  List<dynamic> mat_c = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]];
  print(_str(add(mat_a, mat_b)));
  print(_str(subtract(mat_a, mat_b)));
  print(_str(multiply(mat_a, mat_b)));
  print(_str(scalar_multiply(mat_a, 3.5)));
  print(_str(identity(5)));
  print(_str(transpose(List<List<double>>.from(mat_c))));
}

void _start() {
  _main();
}

void main() => _start();
