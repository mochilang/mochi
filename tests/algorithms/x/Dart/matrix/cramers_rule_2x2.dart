// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}


Never _error(String msg) {
  throw Exception(msg);
}

List<double> cramers_rule_2x2(List<double> eq1, List<double> eq2) {
  if (eq1.length != 3 || eq2.length != 3) {
    _error("Please enter a valid equation.");
  }
  if (eq1[0] == 0.0 && eq1[1] == 0.0 && eq2[0] == 0.0 && eq2[1] == 0.0) {
    _error("Both a & b of two equations can't be zero.");
  }
  double a1 = eq1[0];
  double b1 = eq1[1];
  double c1 = eq1[2];
  double a2 = eq2[0];
  double b2 = eq2[1];
  double c2 = eq2[2];
  double determinant = a1 * b2 - a2 * b1;
  double determinant_x = c1 * b2 - c2 * b1;
  double determinant_y = a1 * c2 - a2 * c1;
  if (determinant == 0.0) {
    if (determinant_x == 0.0 && determinant_y == 0.0) {
    _error("Infinite solutions. (Consistent system)");
  };
    _error("No solution. (Inconsistent system)");
  }
  if (determinant_x == 0.0 && determinant_y == 0.0) {
    return [0.0, 0.0];
  }
  double x = determinant_x / determinant;
  double y = determinant_y / determinant;
  return [x, y];
}

void test_cramers_rule_2x2() {
  List<double> r1 = cramers_rule_2x2([2.0, 3.0, 0.0], [5.0, 1.0, 0.0]);
  if (r1[0] != 0.0 || r1[1] != 0.0) {
    _error("Test1 failed");
  }
  List<double> r2 = cramers_rule_2x2([0.0, 4.0, 50.0], [2.0, 0.0, 26.0]);
  if (r2[0] != 13.0 || r2[1] != 12.5) {
    _error("Test2 failed");
  }
}

void _main() {
  test_cramers_rule_2x2();
  print("[" + cramers_rule_2x2([11.0, 2.0, 30.0], [1.0, 0.0, 4.0]).join(', ') + "]");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
