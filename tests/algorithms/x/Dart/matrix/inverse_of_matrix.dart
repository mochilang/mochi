// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<double>> inverse_of_matrix(List<List<double>> matrix) {
  if (matrix.length == 2 && matrix[0].length == 2 && matrix[1].length == 2) {
    double det = matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1];
    if (det == 0.0) {
    print("This matrix has no inverse.");
    return ([] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  };
    return [[matrix[1][1] / det, -matrix[0][1] / det], [-matrix[1][0] / det, matrix[0][0] / det]];
  } else {
    if (matrix.length == 3 && matrix[0].length == 3 && matrix[1].length == 3 && matrix[2].length == 3) {
    double det = matrix[0][0] * matrix[1][1] * matrix[2][2] + matrix[0][1] * matrix[1][2] * matrix[2][0] + matrix[0][2] * matrix[1][0] * matrix[2][1] - (matrix[0][2] * matrix[1][1] * matrix[2][0] + matrix[0][1] * matrix[1][0] * matrix[2][2] + matrix[0][0] * matrix[1][2] * matrix[2][1]);
    if (det == 0.0) {
    print("This matrix has no inverse.");
    return ([] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  };
    List<List<double>> cof = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
    while (cof[0]!.length <= 0) { cof[0]!.add(0); } cof[0]![0] = matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1];
    while (cof[0]!.length <= 1) { cof[0]!.add(0); } cof[0]![1] = -(matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]);
    while (cof[0]!.length <= 2) { cof[0]!.add(0); } cof[0]![2] = matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0];
    while (cof[1]!.length <= 0) { cof[1]!.add(0); } cof[1]![0] = -(matrix[0][1] * matrix[2][2] - matrix[0][2] * matrix[2][1]);
    while (cof[1]!.length <= 1) { cof[1]!.add(0); } cof[1]![1] = matrix[0][0] * matrix[2][2] - matrix[0][2] * matrix[2][0];
    while (cof[1]!.length <= 2) { cof[1]!.add(0); } cof[1]![2] = -(matrix[0][0] * matrix[2][1] - matrix[0][1] * matrix[2][0]);
    while (cof[2]!.length <= 0) { cof[2]!.add(0); } cof[2]![0] = matrix[0][1] * matrix[1][2] - matrix[0][2] * matrix[1][1];
    while (cof[2]!.length <= 1) { cof[2]!.add(0); } cof[2]![1] = -(matrix[0][0] * matrix[1][2] - matrix[0][2] * matrix[1][0]);
    while (cof[2]!.length <= 2) { cof[2]!.add(0); } cof[2]![2] = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    List<List<double>> inv = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
    int i = 0;
    while (i < 3) {
    int j = 0;
    while (j < 3) {
    while (inv[i]!.length <= j) { inv[i]!.add(0); } inv[i]![j] = cof[j][i] / det;
    j = j + 1;
  }
    i = i + 1;
  };
    return inv;
  };
  }
  print("Please provide a matrix of size 2x2 or 3x3.");
  return ([] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
}

List<List<double>> m2 = [[2.0, 5.0], [2.0, 0.0]];
List<List<double>> m3 = [[2.0, 5.0, 7.0], [2.0, 0.0, 1.0], [1.0, 2.0, 3.0]];
void main() {
  print("[" + inverse_of_matrix(m2).join(', ') + "]");
  print("[" + inverse_of_matrix(m3).join(', ') + "]");
}
