// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_safe(List<List<int>> grid, List<List<bool>> visited, int row, int col) {
  int rows = grid.length;
  int cols = grid[0].length;
  bool visited_cell = visited[row][col];
  bool within_bounds = row >= 0 && row < rows && col >= 0 && col < cols;
  bool not_visited = visited_cell == false;
  return within_bounds && not_visited && grid[row][col] == 1;
}

void dfs(List<List<int>> grid, List<List<bool>> visited, int row, int col) {
  List<int> row_nbr = [-1, -1, -1, 0, 0, 1, 1, 1];
  List<int> col_nbr = [-1, 0, 1, -1, 1, -1, 0, 1];
  while (visited[row]!.length <= col) { visited[row]!.add(false); } visited[row]![col] = true;
  int k = 0;
  while (k < 8) {
    int new_row = row + row_nbr[k];
    int new_col = col + col_nbr[k];
    if (is_safe(grid, visited, new_row, new_col)) {
    dfs(grid, visited, new_row, new_col);
  }
    k = k + 1;
  }
}

int count_islands(List<List<int>> grid) {
  int rows = grid.length;
  int cols = grid[0].length;
  List<List<bool>> visited = <List<bool>>[];
  int i = 0;
  while (i < rows) {
    List<bool> row_list = <bool>[];
    int j = 0;
    while (j < cols) {
    row_list = [...row_list, false];
    j = j + 1;
  }
    visited = ([...visited, row_list] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  int count = 0;
  i = 0;
  while (i < rows) {
    int j = 0;
    while (j < cols) {
    if (!visited[i][j] && grid[i][j] == 1) {
    dfs(grid, visited, i, j);
    count = count + 1;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return count;
}

List<List<int>> grid = [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]];
void main() {
  print(count_islands(grid));
}
