// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> bubble_sort(List<int> a) {
  List<int> arr = a;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j + 1 < n - i) {
    if (arr[j] > arr[j + 1]) {
    int temp = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = temp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

int median(List<List<int>> matrix) {
  List<int> linear = <int>[];
  int i = 0;
  while (i < matrix.length) {
    List<int> row = matrix[i];
    int j = 0;
    while (j < row.length) {
    linear = [...linear, row[j]];
    j = j + 1;
  }
    i = i + 1;
  }
  List<int> sorted = bubble_sort(linear);
  int mid = (sorted.length - 1) ~/ 2;
  return sorted[mid];
}

List<List<int>> matrix1 = [[1, 3, 5], [2, 6, 9], [3, 6, 9]];
List<List<int>> matrix2 = [[1, 2, 3], [4, 5, 6]];
void main() {
  print((median(matrix1)).toString());
  print((median(matrix2)).toString());
}
