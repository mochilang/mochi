// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int NUM_SQUARES = 9;
String EMPTY_CELL = ".";
bool is_valid_sudoku_board(List<List<String>> board) {
  if (board.length != NUM_SQUARES) {
    return false;
  }
  int i = 0;
  while (i < NUM_SQUARES) {
    if (board[i].length != NUM_SQUARES) {
    return false;
  }
    i = i + 1;
  }
  List<List<String>> rows = <List<String>>[];
  List<List<String>> cols = <List<String>>[];
  List<List<String>> boxes = <List<String>>[];
  i = 0;
  while (i < NUM_SQUARES) {
    rows = [...rows, []];
    cols = [...cols, []];
    boxes = [...boxes, []];
    i = i + 1;
  }
  for (int r = 0; r < NUM_SQUARES; r++) {
    for (int c = 0; c < NUM_SQUARES; c++) {
    String value = board[r][c];
    if (value == EMPTY_CELL) {
    continue;
  }
    int box = (r ~/ 3 as int) * 3 + (c ~/ 3 as int);
    if (rows[r].contains(value) || cols[c].contains(value) || boxes[box].contains(value)) {
    return false;
  }
    while (rows.length <= r) { rows.add(<String>[]); } rows[r] = [...rows[r], value];
    while (cols.length <= c) { cols.add(<String>[]); } cols[c] = [...cols[c], value];
    while (boxes.length <= box) { boxes.add(<String>[]); } boxes[box] = [...boxes[box], value];
  }
  }
  return true;
}

List<List<String>> valid_board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]];
List<List<String>> invalid_board = [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(is_valid_sudoku_board(valid_board));
  print(is_valid_sudoku_board(invalid_board));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
