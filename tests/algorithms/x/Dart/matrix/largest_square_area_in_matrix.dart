// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

int update_area_of_max_square(int row, int col, int rows, int cols, List<List<int>> mat, List<int> largest_square_area) {
  if (row >= rows || col >= cols) {
    return 0;
  }
  int right = update_area_of_max_square(row, col + 1, rows, cols, mat, largest_square_area);
  int diagonal = update_area_of_max_square(row + 1, col + 1, rows, cols, mat, largest_square_area);
  int down = update_area_of_max_square(row + 1, col, rows, cols, mat, largest_square_area);
  if (mat[row][col] == 1) {
    int sub = 1 + [right, diagonal, down].reduce((a, b) => a < b ? a : b);
    if (sub > largest_square_area[0]) {
    while (largest_square_area.length <= 0) { largest_square_area.add(0); } largest_square_area[0] = sub;
  };
    return sub;
  } else {
    return 0;
  }
}

int largest_square_area_in_matrix_top_down(int rows, int cols, List<List<int>> mat) {
  List<int> largest = [0];
  update_area_of_max_square(0, 0, rows, cols, mat, largest);
  return largest[0];
}

int update_area_of_max_square_with_dp(int row, int col, int rows, int cols, List<List<int>> mat, List<List<int>> dp_array, List<int> largest_square_area) {
  if (row >= rows || col >= cols) {
    return 0;
  }
  if (dp_array[row][col] != -1) {
    return dp_array[row][col];
  }
  int right = update_area_of_max_square_with_dp(row, col + 1, rows, cols, mat, dp_array, largest_square_area);
  int diagonal = update_area_of_max_square_with_dp(row + 1, col + 1, rows, cols, mat, dp_array, largest_square_area);
  int down = update_area_of_max_square_with_dp(row + 1, col, rows, cols, mat, dp_array, largest_square_area);
  if (mat[row][col] == 1) {
    int sub = 1 + [right, diagonal, down].reduce((a, b) => a < b ? a : b);
    if (sub > largest_square_area[0]) {
    while (largest_square_area.length <= 0) { largest_square_area.add(0); } largest_square_area[0] = sub;
  };
    while (dp_array[row]!.length <= col) { dp_array[row]!.add(0); } dp_array[row]![col] = sub;
    return sub;
  } else {
    while (dp_array[row]!.length <= col) { dp_array[row]!.add(0); } dp_array[row]![col] = 0;
    return 0;
  }
}

int largest_square_area_in_matrix_top_down_with_dp(int rows, int cols, List<List<int>> mat) {
  List<int> largest = [0];
  List<List<int>> dp_array = <List<int>>[];
  int r = 0;
  while (r < rows) {
    List<int> row_list = <int>[];
    int c = 0;
    while (c < cols) {
    row_list = [...row_list, -1];
    c = c + 1;
  }
    dp_array = ([...dp_array, row_list] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    r = r + 1;
  }
  update_area_of_max_square_with_dp(0, 0, rows, cols, mat, dp_array, largest);
  return largest[0];
}

int largest_square_area_in_matrix_bottom_up(int rows, int cols, List<List<int>> mat) {
  List<List<int>> dp_array = <List<int>>[];
  int r = 0;
  while (r <= rows) {
    List<int> row_list = <int>[];
    int c = 0;
    while (c <= cols) {
    row_list = [...row_list, 0];
    c = c + 1;
  }
    dp_array = ([...dp_array, row_list] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    r = r + 1;
  }
  int largest = 0;
  int row = rows - 1;
  while (row >= 0) {
    int col = cols - 1;
    while (col >= 0) {
    int right = dp_array[row][col + 1];
    int diagonal = dp_array[row + 1][col + 1];
    int bottom = dp_array[row + 1][col];
    if (mat[row][col] == 1) {
    int value = 1 + [right, diagonal, bottom].reduce((a, b) => a < b ? a : b);
    while (dp_array[row]!.length <= col) { dp_array[row]!.add(0); } dp_array[row]![col] = value;
    if (value > largest) {
    largest = value;
  };
  } else {
    while (dp_array[row]!.length <= col) { dp_array[row]!.add(0); } dp_array[row]![col] = 0;
  }
    col = col - 1;
  }
    row = row - 1;
  }
  return largest;
}

int largest_square_area_in_matrix_bottom_up_space_optimization(int rows, int cols, List<List<int>> mat) {
  List<int> current_row = <int>[];
  int i = 0;
  while (i <= cols) {
    current_row = [...current_row, 0];
    i = i + 1;
  }
  List<int> next_row = <int>[];
  int j = 0;
  while (j <= cols) {
    next_row = [...next_row, 0];
    j = j + 1;
  }
  int largest = 0;
  int row = rows - 1;
  while (row >= 0) {
    int col = cols - 1;
    while (col >= 0) {
    int right = current_row[col + 1];
    int diagonal = next_row[col + 1];
    int bottom = next_row[col];
    if (mat[row][col] == 1) {
    int value = 1 + [right, diagonal, bottom].reduce((a, b) => a < b ? a : b);
    while (current_row.length <= col) { current_row.add(0); } current_row[col] = value;
    if (value > largest) {
    largest = value;
  };
  } else {
    while (current_row.length <= col) { current_row.add(0); } current_row[col] = 0;
  }
    col = col - 1;
  }
    next_row = current_row;
    current_row = ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    int t = 0;
    while (t <= cols) {
    current_row = [...current_row, 0];
    t = t + 1;
  }
    row = row - 1;
  }
  return largest;
}

List<List<int>> sample = [[1, 1], [1, 1]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(largest_square_area_in_matrix_top_down(2, 2, sample));
  print(largest_square_area_in_matrix_top_down_with_dp(2, 2, sample));
  print(largest_square_area_in_matrix_bottom_up(2, 2, sample));
  print(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, sample));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
