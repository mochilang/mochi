// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String encode(int row, int col) {
  return (row).toString() + "," + (col).toString();
}

bool is_safe(int row, int col, int rows, int cols) {
  return row >= 0 && row < rows && col >= 0 && col < cols;
}

bool has(Map<String, bool> seen, String key) {
  return seen.containsKey(key);
}

int depth_first_search(int row, int col, Map<String, bool> seen, List<List<int>> mat) {
  int rows = mat.length;
  int cols = mat[0].length;
  String key = encode(row, col);
  if (is_safe(row, col, rows, cols) && !has(seen, key) && mat[row][col] == 1) {
    seen[key] = true;
    return 1 + depth_first_search(row + 1, col, seen, mat) + depth_first_search(row - 1, col, seen, mat) + depth_first_search(row, col + 1, seen, mat) + depth_first_search(row, col - 1, seen, mat);
  } else {
    return 0;
  }
}

int find_max_area(List<List<int>> mat) {
  Map<String, bool> seen = <String, bool>{};
  int rows = mat.length;
  int max_area = 0;
  int r = 0;
  while (r < rows) {
    List<int> line = mat[r];
    int cols = line.length;
    int c = 0;
    while (c < cols) {
    if (line[c] == 1) {
    String key = encode(r, c);
    if (!seen.containsKey(key)) {
    int area = depth_first_search(r, c, seen, mat);
    if (area > max_area) {
    max_area = area;
  };
  };
  }
    c = c + 1;
  }
    r = r + 1;
  }
  return max_area;
}

List<List<int>> matrix = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]];
void main() {
  print(find_max_area(matrix));
}
