// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int binary_search(List<int> arr, int lower_bound, int upper_bound, int value) {
  int r = (lower_bound + upper_bound) ~/ 2;
  if (arr[r] == value) {
    return r;
  }
  if (lower_bound >= upper_bound) {
    return -1;
  }
  if (arr[r] < value) {
    return binary_search(arr, r + 1, upper_bound, value);
  }
  return binary_search(arr, lower_bound, r - 1, value);
}

List<int> mat_bin_search(int value, List<List<int>> matrix) {
  int index = 0;
  if (matrix[index][0] == value) {
    return [index, 0];
  }
  while (index < matrix.length && matrix[index][0] < value) {
    int r = binary_search(matrix[index], 0, matrix[index].length - 1, value);
    if (r != -1) {
    return [index, r];
  }
    index = index + 1;
  }
  return [-1, -1];
}

void _main() {
  List<int> row = [1, 4, 7, 11, 15];
  print((binary_search(row, 0, row.length - 1, 1)).toString());
  print((binary_search(row, 0, row.length - 1, 23)).toString());
  List<List<int>> matrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]];
  print((mat_bin_search(1, matrix)).toString());
  print((mat_bin_search(34, matrix)).toString());
}

void _start() {
  _main();
}

void main() => _start();
