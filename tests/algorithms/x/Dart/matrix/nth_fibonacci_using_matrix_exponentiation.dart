// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<int>> multiply(List<List<int>> matrix_a, List<List<int>> matrix_b) {
  int n = matrix_a.length;
  List<List<int>> matrix_c = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    int val = 0;
    int k = 0;
    while (k < n) {
    val = val + matrix_a[i][k] * matrix_b[k][j];
    k = k + 1;
  }
    row = [...row, val];
    j = j + 1;
  }
    matrix_c = ([...matrix_c, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return matrix_c;
}

List<List<int>> identity(int n) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 1];
  } else {
    row = [...row, 0];
  }
    j = j + 1;
  }
    res = ([...res, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

int nth_fibonacci_matrix(int n) {
  if (n <= 1) {
    return n;
  }
  List<List<int>> res_matrix = identity(2);
  List<List<int>> fib_matrix = [[1, 1], [1, 0]];
  int m = n - 1;
  while (m > 0) {
    if (m % 2 == 1) {
    res_matrix = multiply(res_matrix, fib_matrix);
  }
    fib_matrix = multiply(fib_matrix, fib_matrix);
    m = m ~/ 2;
  }
  return res_matrix[0][0];
}

int nth_fibonacci_bruteforce(int n) {
  if (n <= 1) {
    return n;
  }
  int fib0 = 0;
  int fib1 = 1;
  int i = 2;
  while (i <= n) {
    int next = fib0 + fib1;
    fib0 = fib1;
    fib1 = next;
    i = i + 1;
  }
  return fib1;
}

int parse_number(String s) {
  int result = 0;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch.compareTo("0") >= 0 && ch.compareTo("9") <= 0) {
    result = result * 10 + (int.parse(ch));
  }
    i = i + 1;
  }
  return result;
}

void _main() {
  List<String> ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"];
  int i = 0;
  while (i < ordinals.length) {
    String ordinal = ordinals[i];
    int n = parse_number(ordinal);
    String msg = ordinal + " fibonacci number using matrix exponentiation is " + _str(nth_fibonacci_matrix(n)) + " and using bruteforce is " + _str(nth_fibonacci_bruteforce(n));
    print(msg);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
