// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int depth_first_search(List<List<int>> grid, int row, int col, List<List<bool>> visit) {
  int row_length = grid.length;
  int col_length = grid[0].length;
  if (row < 0 || col < 0 || row == row_length || col == col_length) {
    return 0;
  }
  if (visit[row][col]) {
    return 0;
  }
  if (grid[row][col] == 1) {
    return 0;
  }
  if (row == row_length - 1 && col == col_length - 1) {
    return 1;
  }
  while (visit[row]!.length <= col) { visit[row]!.add(false); } visit[row]![col] = true;
  int count = 0;
  count = count + depth_first_search(grid, row + 1, col, visit);
  count = count + depth_first_search(grid, row - 1, col, visit);
  count = count + depth_first_search(grid, row, col + 1, visit);
  count = count + depth_first_search(grid, row, col - 1, visit);
  while (visit[row]!.length <= col) { visit[row]!.add(false); } visit[row]![col] = false;
  return count;
}

int count_paths(List<List<int>> grid) {
  int rows = grid.length;
  int cols = grid[0].length;
  List<List<bool>> visit = <List<bool>>[];
  int i = 0;
  while (i < rows) {
    List<bool> row_visit = <bool>[];
    int j = 0;
    while (j < cols) {
    row_visit = [...row_visit, false];
    j = j + 1;
  }
    visit = ([...visit, row_visit] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return depth_first_search(grid, 0, 0, visit);
}

void _main() {
  List<List<int>> grid1 = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]];
  print((count_paths(grid1)).toString());
  List<List<int>> grid2 = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]];
  print((count_paths(grid2)).toString());
}

void _start() {
  _main();
}

void main() => _start();
