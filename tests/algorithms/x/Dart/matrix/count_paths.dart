// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int depth_first_search(List<List<int>> grid, int row, int col, List<List<bool>> visit) {
  int row_length = grid.length;
  int col_length = grid[0].length;
  if (row < 0 || col < 0 || row == row_length || col == col_length) {
    return 0;
  }
  if (visit[row][col]) {
    return 0;
  }
  if (grid[row][col] == 1) {
    return 0;
  }
  if (row == row_length - 1 && col == col_length - 1) {
    return 1;
  }
  while (visit[row]!.length <= col) { visit[row]!.add(false); } visit[row]![col] = true;
  int count = 0;
  count = count + depth_first_search(grid, row + 1, col, visit);
  count = count + depth_first_search(grid, row - 1, col, visit);
  count = count + depth_first_search(grid, row, col + 1, visit);
  count = count + depth_first_search(grid, row, col - 1, visit);
  while (visit[row]!.length <= col) { visit[row]!.add(false); } visit[row]![col] = false;
  return count;
}

int count_paths(List<List<int>> grid) {
  int rows = grid.length;
  int cols = grid[0].length;
  List<List<bool>> visit = <List<bool>>[];
  int i = 0;
  while (i < rows) {
    List<bool> row_visit = <bool>[];
    int j = 0;
    while (j < cols) {
    row_visit = [...row_visit, false];
    j = j + 1;
  }
    visit = ([...visit, row_visit] as List<dynamic>).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return depth_first_search(grid, 0, 0, visit);
}

void _main() {
  List<List<int>> grid1 = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]];
  print(_str(count_paths(grid1)));
  List<List<int>> grid2 = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]];
  print(_str(count_paths(grid2)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
