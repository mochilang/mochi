// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> generate_large_matrix() {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < 1000) {
    List<int> row = <int>[];
    int j = 1000 - i;
    while (j > -1000 - i) {
    row = [...row, j];
    j = j - 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

int find_negative_index(List<int> arr) {
  int left = 0;
  int right = arr.length - 1;
  if (arr.length == 0) {
    return 0;
  }
  if (arr[0] < 0) {
    return 0;
  }
  while (left <= right) {
    int mid = (left + right) ~/ 2;
    int _num = arr[mid];
    if (_num < 0) {
    if (mid == 0) {
    return 0;
  };
    if (arr[mid - 1] >= 0) {
    return mid;
  };
    right = mid - 1;
  } else {
    left = mid + 1;
  }
  }
  return arr.length;
}

int count_negatives_binary_search(List<List<int>> grid) {
  int total = 0;
  int bound = grid[0].length;
  int i = 0;
  while (i < grid.length) {
    List<int> row = grid[i];
    int idx = find_negative_index(row.sublist(0, bound));
    bound = idx;
    total = total + idx;
    i = i + 1;
  }
  return grid.length * grid[0].length - total;
}

int count_negatives_brute_force(List<List<int>> grid) {
  int count = 0;
  int i = 0;
  while (i < grid.length) {
    List<int> row = grid[i];
    int j = 0;
    while (j < row.length) {
    if (row[j] < 0) {
    count = count + 1;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return count;
}

int count_negatives_brute_force_with_break(List<List<int>> grid) {
  int total = 0;
  int i = 0;
  while (i < grid.length) {
    List<int> row = grid[i];
    int j = 0;
    while (j < row.length) {
    int number = row[j];
    if (number < 0) {
    total = total + (row.length - j);
    break;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return total;
}

List<List<int>> grid = generate_large_matrix();
List<List<List<int>>> test_grids = [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], grid];
List<int> results_bin = <int>[];
int i = 0;
List<int> results_brute = <int>[];
List<int> results_break = <int>[];
void main() {
  while (i < test_grids.length) {
    results_bin = [...results_bin, count_negatives_binary_search(test_grids[i])];
    i = i + 1;
  }
  print((results_bin).toString());
  i = 0;
  while (i < test_grids.length) {
    results_brute = [...results_brute, count_negatives_brute_force(test_grids[i])];
    i = i + 1;
  }
  print((results_brute).toString());
  i = 0;
  while (i < test_grids.length) {
    results_break = [...results_break, count_negatives_brute_force_with_break(test_grids[i])];
    i = i + 1;
  }
  print((results_break).toString());
}
