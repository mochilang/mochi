// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Matrix {
  List<List<double>> data;
  int rows;
  int cols;
  Matrix({required this.data, required this.rows, required this.cols});
}

Matrix make_matrix(int rows, int cols, double value) {
  List<List<double>> arr = <List<double>>[];
  int r = 0;
  while (r < rows) {
    List<double> row = <double>[];
    int c = 0;
    while (c < cols) {
    row = [...row, value];
    c = c + 1;
  }
    arr = ([...arr, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    r = r + 1;
  }
  return Matrix(data: arr, rows: rows, cols: cols);
}

Matrix matrix_from_lists(List<List<double>> vals) {
  int r = vals.length;
  int c = (r == 0 ? 0 : vals[0].length);
  return Matrix(data: vals, rows: r, cols: c);
}

String matrix_to_string(Matrix m) {
  String s = "";
  int i = 0;
  while (i < m.rows) {
    s = s + "[";
    int j = 0;
    while (j < m.cols) {
    s = s + _str(m.data[i][j]);
    if (j < m.cols - 1) {
    s = s + ", ";
  }
    j = j + 1;
  }
    s = s + "]";
    if (i < m.rows - 1) {
    s = s + "\n";
  }
    i = i + 1;
  }
  return s;
}

Matrix matrix_add(Matrix a, Matrix b) {
  if (a.rows != b.rows || a.cols != b.cols) {
    return Matrix(data: [], rows: 0, cols: 0);
  }
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < a.rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < a.cols) {
    row = [...row, a.data[i][j] + b.data[i][j]];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: res, rows: a.rows, cols: a.cols);
}

Matrix matrix_sub(Matrix a, Matrix b) {
  if (a.rows != b.rows || a.cols != b.cols) {
    return Matrix(data: [], rows: 0, cols: 0);
  }
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < a.rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < a.cols) {
    row = [...row, a.data[i][j] - b.data[i][j]];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: res, rows: a.rows, cols: a.cols);
}

Matrix matrix_mul_scalar(Matrix m, double k) {
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < m.rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < m.cols) {
    row = [...row, m.data[i][j] * k];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: res, rows: m.rows, cols: m.cols);
}

Matrix matrix_mul(Matrix a, Matrix b) {
  if (a.cols != b.rows) {
    return Matrix(data: [], rows: 0, cols: 0);
  }
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < a.rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < b.cols) {
    double sum = 0.0;
    int k = 0;
    while (k < a.cols) {
    sum = sum + a.data[i][k] * b.data[k][j];
    k = k + 1;
  }
    row = [...row, sum];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return Matrix(data: res, rows: a.rows, cols: b.cols);
}

Matrix matrix_transpose(Matrix m) {
  List<List<double>> res = <List<double>>[];
  int c = 0;
  while (c < m.cols) {
    List<double> row = <double>[];
    int r = 0;
    while (r < m.rows) {
    row = [...row, m.data[r][c]];
    r = r + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    c = c + 1;
  }
  return Matrix(data: res, rows: m.cols, cols: m.rows);
}

Matrix sherman_morrison(Matrix ainv, Matrix u, Matrix v) {
  Matrix vt = matrix_transpose(v);
  Matrix vu = matrix_mul(matrix_mul(vt, ainv), u);
  double factor = vu.data[0][0] + 1.0;
  if (factor == 0.0) {
    return Matrix(data: [], rows: 0, cols: 0);
  }
  Matrix term1 = matrix_mul(ainv, u);
  Matrix term2 = matrix_mul(vt, ainv);
  Matrix numerator = matrix_mul(term1, term2);
  Matrix scaled = matrix_mul_scalar(numerator, 1.0 / factor);
  return matrix_sub(ainv, scaled);
}

void _main() {
  Matrix ainv = matrix_from_lists([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]);
  Matrix u = matrix_from_lists(List<List<double>>.from([[1.0], [2.0], [-3.0]]));
  Matrix v = matrix_from_lists(List<List<double>>.from([[4.0], [-2.0], [5.0]]));
  Matrix result = sherman_morrison(ainv, u, v);
  print(matrix_to_string(result));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
