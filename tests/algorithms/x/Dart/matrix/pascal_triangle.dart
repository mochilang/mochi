// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> populate_current_row(List<List<int>> triangle, int current_row_idx) {
  List<int> row = <int>[];
  int i = 0;
  while (i <= current_row_idx) {
    if (i == 0 || i == current_row_idx) {
    row = [...row, 1];
  } else {
    int left = triangle[current_row_idx - 1][i - 1];
    int right = triangle[current_row_idx - 1][i];
    row = [...row, left + right];
  }
    i = i + 1;
  }
  return row;
}

List<List<int>> generate_pascal_triangle(int num_rows) {
  if (num_rows <= 0) {
    return ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  List<List<int>> triangle = <List<int>>[];
  int row_idx = 0;
  while (row_idx < num_rows) {
    List<int> row = populate_current_row(triangle, row_idx);
    triangle = ([...triangle, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    row_idx = row_idx + 1;
  }
  return triangle;
}

String row_to_string(List<int> row, int total_rows, int row_idx) {
  String line = "";
  int spaces = total_rows - row_idx - 1;
  int s = 0;
  while (s < spaces) {
    line = line + " ";
    s = s + 1;
  }
  int c = 0;
  while (c <= row_idx) {
    line = line + (row[c]).toString();
    if (c != row_idx) {
    line = line + " ";
  }
    c = c + 1;
  }
  return line;
}

void print_pascal_triangle(int num_rows) {
  List<List<int>> triangle = generate_pascal_triangle(num_rows);
  int r = 0;
  while (r < num_rows) {
    String line = row_to_string(triangle[r], num_rows, r);
    print(line);
    r = r + 1;
  }
}

void _main() {
  print_pascal_triangle(5);
  print((generate_pascal_triangle(5)).toString());
}

void _start() {
  _main();
}

void main() => _start();
