// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> unique(List<int> nums) {
  List<int> res = <int>[];
  int i = 0;
  while (i < nums.length) {
    int v = nums[i];
    bool found = false;
    int j = 0;
    while (j < res.length) {
    if (res[j] == v) {
    found = true;
    break;
  }
    j = j + 1;
  }
    if (!found) {
    res = [...res, v];
  }
    i = i + 1;
  }
  return res;
}

int array_equalization(List<int> vector, int step_size) {
  if (step_size <= 0) {
    error("Step size must be positive and non-zero.");
  }
  List<int> elems = unique(vector);
  int min_updates = vector.length;
  int i = 0;
  while (i < elems.length) {
    int target = elems[i];
    int idx = 0;
    int updates = 0;
    while (idx < vector.length) {
    if (vector[idx] != target) {
    updates = updates + 1;
    idx = idx + step_size;
  } else {
    idx = idx + 1;
  }
  }
    if (updates < min_updates) {
    min_updates = updates;
  }
    i = i + 1;
  }
  return min_updates;
}

void main() {
  print((array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4)).toString());
  print((array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2)).toString());
  print((array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5)).toString());
  print((array_equalization([22, 22, 22, 33, 33, 33], 2)).toString());
  print((array_equalization([1, 2, 3], 2147483647)).toString());
}
