// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

List<int> unique(List<int> nums) {
  List<int> res = <int>[];
  int i = 0;
  while (i < nums.length) {
    int v = nums[i];
    bool found = false;
    int j = 0;
    while (j < res.length) {
    if (res[j] == v) {
    found = true;
    break;
  }
    j = j + 1;
  }
    if (!found) {
    res = [...res, v];
  }
    i = i + 1;
  }
  return res;
}

int array_equalization(List<int> vector, int step_size) {
  if (step_size <= 0) {
    _error("Step size must be positive and non-zero.");
  }
  List<int> elems = unique(vector);
  int min_updates = vector.length;
  int i = 0;
  while (i < elems.length) {
    int target = elems[i];
    int idx = 0;
    int updates = 0;
    while (idx < vector.length) {
    if (vector[idx] != target) {
    updates = updates + 1;
    idx = idx + step_size;
  } else {
    idx = idx + 1;
  }
  }
    if (updates < min_updates) {
    min_updates = updates;
  }
    i = i + 1;
  }
  return min_updates;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4)));
  print(_str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2)));
  print(_str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5)));
  print(_str(array_equalization([22, 22, 22, 33, 33, 33], 2)));
  print(_str(array_equalization([1, 2, 3], 2147483647)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
