// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_valid_matrix(List<List<int>> matrix) {
  if (matrix.length == 0) {
    return false;
  }
  int cols = matrix[0].length;
  for (List<int> row in matrix) {
    if (row.length != cols) {
    return false;
  }
  }
  return true;
}

List<int> spiral_traversal(List<List<int>> matrix) {
  if (!is_valid_matrix(matrix)) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  int rows = matrix.length;
  int cols = matrix[0].length;
  int top = 0;
  int bottom = rows - 1;
  int left = 0;
  int right = cols - 1;
  List<int> result = <int>[];
  while (left <= right && top <= bottom) {
    int i = left;
    while (i <= right) {
    result = (result..add(matrix[top][i]));
    i = i + 1;
  }
    top = top + 1;
    i = top;
    while (i <= bottom) {
    result = (result..add(matrix[i][right]));
    i = i + 1;
  }
    right = right - 1;
    if (top <= bottom) {
    i = right;
    while (i >= left) {
    result = (result..add(matrix[bottom][i]));
    i = i - 1;
  };
    bottom = bottom - 1;
  }
    if (left <= right) {
    i = bottom;
    while (i >= top) {
    result = (result..add(matrix[i][left]));
    i = i - 1;
  };
    left = left + 1;
  }
  }
  return result;
}

void spiral_print_clockwise(List<List<int>> matrix) {
  for (int value in spiral_traversal(matrix)) {
    print(_str(value));
  }
}

void _main() {
  List<List<int>> a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];
  spiral_print_clockwise(a);
  print(_str(spiral_traversal(a)));
}

void _start() {
  _main();
}

void main() => _start();
