// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}


Never _error(String msg) {
  throw Exception(msg);
}

bool is_square(List<List<int>> matrix) {
  int n = matrix.length;
  int i = 0;
  while (i < n) {
    if (matrix[i].length != n) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

List<List<int>> matrix_multiply(List<List<int>> a, List<List<int>> b) {
  int rows = a.length;
  int cols = b[0].length;
  int inner = b.length;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j < cols) {
    int sum = 0;
    int k = 0;
    while (k < inner) {
    sum = sum + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = [...row, sum];
    j = j + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

void multiply(int i, int j, int k, List<List<int>> a, List<List<int>> b, List<List<int>> result, int n, int m) {
  if (i >= n) {
    return;
  }
  if (j >= m) {
    multiply(i + 1, 0, 0, a, b, result, n, m);
    return;
  }
  if (k >= b.length) {
    multiply(i, j + 1, 0, a, b, result, n, m);
    return;
  }
  while (result[i]!.length <= j) { result[i]!.add(0); } result[i]![j] = result[i][j] + a[i][k] * b[k][j];
  multiply(i, j, k + 1, a, b, result, n, m);
}

List<List<int>> matrix_multiply_recursive(List<List<int>> a, List<List<int>> b) {
  if (a.length == 0 || b.length == 0) {
    return ([] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  if (a.length != b.length || !is_square(a) || !is_square(b)) {
    _error("Invalid matrix dimensions");
  }
  int n = a.length;
  int m = b[0].length;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < m) {
    row = [...row, 0];
    j = j + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  multiply(0, 0, 0, a, b, result, n, m);
  return result;
}

List<List<int>> matrix_1_to_4 = [[1, 2], [3, 4]];
List<List<int>> matrix_5_to_8 = [[5, 6], [7, 8]];
List<List<int>> matrix_count_up = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];
List<List<int>> matrix_unordered = [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + matrix_multiply_recursive(matrix_1_to_4, matrix_5_to_8).join(', ') + "]");
  print("[" + matrix_multiply_recursive(matrix_count_up, matrix_unordered).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
