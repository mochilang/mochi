// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_square(List<List<int>> matrix) {
  int n = matrix.length;
  int i = 0;
  while (i < n) {
    if (matrix[i].length != n) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

List<List<int>> matrix_multiply(List<List<int>> a, List<List<int>> b) {
  int rows = a.length;
  int cols = b[0].length;
  int inner = b.length;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j < cols) {
    int sum = 0;
    int k = 0;
    while (k < inner) {
    sum = sum + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = [...row, sum];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

void multiply(int i, int j, int k, List<List<int>> a, List<List<int>> b, List<List<int>> result, int n, int m) {
  if (i >= n) {
    return;
  }
  if (j >= m) {
    multiply(i + 1, 0, 0, a, b, result, n, m);
    return;
  }
  if (k >= b.length) {
    multiply(i, j + 1, 0, a, b, result, n, m);
    return;
  }
  while (result[i]!.length <= j) { result[i]!.add(0); } result[i]![j] = result[i][j] + a[i][k] * b[k][j];
  multiply(i, j, k + 1, a, b, result, n, m);
}

List<List<int>> matrix_multiply_recursive(List<List<int>> a, List<List<int>> b) {
  if (a.length == 0 || b.length == 0) {
    return ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  if (a.length != b.length || !is_square(a) || !is_square(b)) {
    throw Exception("Invalid matrix dimensions");
  }
  int n = a.length;
  int m = b[0].length;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < m) {
    row = [...row, 0];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  multiply(0, 0, 0, a, b, result, n, m);
  return result;
}

List<List<int>> matrix_1_to_4 = [[1, 2], [3, 4]];
List<List<int>> matrix_5_to_8 = [[5, 6], [7, 8]];
List<List<int>> matrix_count_up = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];
List<List<int>> matrix_unordered = [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]];
void main() {
  print("[" + matrix_multiply_recursive(matrix_1_to_4, matrix_5_to_8).join(', ') + "]");
  print("[" + matrix_multiply_recursive(matrix_count_up, matrix_unordered).join(', ') + "]");
}
