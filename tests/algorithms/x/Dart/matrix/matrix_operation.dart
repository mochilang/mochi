// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<double>> add(List<List<List<double>>> matrices) {
  int rows = matrices[0].length;
  int cols = matrices[0][0].length;
  int r = 0;
  List<List<double>> result = <List<double>>[];
  while (r < rows) {
    List<double> row = <double>[];
    int c = 0;
    while (c < cols) {
    double sum = 0.0;
    int m = 0;
    while (m < matrices.length) {
    sum = sum + matrices[m][r][c];
    m = m + 1;
  }
    row = [...row, sum];
    c = c + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    r = r + 1;
  }
  return result;
}

List<List<double>> subtract(List<List<double>> a, List<List<double>> b) {
  int rows = a.length;
  int cols = a[0].length;
  int r = 0;
  List<List<double>> result = <List<double>>[];
  while (r < rows) {
    List<double> row = <double>[];
    int c = 0;
    while (c < cols) {
    row = [...row, a[r][c] - b[r][c]];
    c = c + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    r = r + 1;
  }
  return result;
}

List<List<double>> scalar_multiply(List<List<double>> matrix, double n) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < matrix.length) {
    List<double> row = <double>[];
    int j = 0;
    while (j < matrix[i].length) {
    row = [...row, matrix[i][j] * n];
    j = j + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> multiply(List<List<double>> a, List<List<double>> b) {
  int rowsA = a.length;
  int colsA = a[0].length;
  int rowsB = b.length;
  int colsB = b[0].length;
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < rowsA) {
    List<double> row = <double>[];
    int j = 0;
    while (j < colsB) {
    double sum = 0.0;
    int k = 0;
    while (k < colsA) {
    sum = sum + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = [...row, sum];
    j = j + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> identity(int n) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 1.0];
  } else {
    row = [...row, 0.0];
  }
    j = j + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> transpose(List<List<double>> matrix) {
  int rows = matrix.length;
  int cols = matrix[0].length;
  List<List<double>> result = <List<double>>[];
  int c = 0;
  while (c < cols) {
    List<double> row = <double>[];
    int r = 0;
    while (r < rows) {
    row = [...row, matrix[r][c]];
    r = r + 1;
  }
    result = ([...result, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    c = c + 1;
  }
  return result;
}

List<List<double>> minor(List<List<double>> matrix, int row, int column) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < matrix.length) {
    if (i != row) {
    List<double> new_row = <double>[];
    int j = 0;
    while (j < matrix[i].length) {
    if (j != column) {
    new_row = [...new_row, matrix[i][j]];
  }
    j = j + 1;
  };
    result = ([...result, new_row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
    i = i + 1;
  }
  return result;
}

double determinant(List<List<double>> matrix) {
  if (matrix.length == 1) {
    return matrix[0][0];
  }
  double det = 0.0;
  int c = 0;
  while (c < matrix[0].length) {
    List<List<double>> sub = minor(matrix, 0, c);
    dynamic sign = (c % 2 == 0 ? 1.0 : -1.0);
    det = det + matrix[0][c] * determinant(sub) * sign;
    c = c + 1;
  }
  return det;
}

List<List<double>> inverse(List<List<double>> matrix) {
  double det = determinant(matrix);
  if (det == 0.0) {
    return ([] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
  int size = matrix.length;
  List<List<double>> matrix_minor = <List<double>>[];
  int i = 0;
  while (i < size) {
    List<double> row = <double>[];
    int j = 0;
    while (j < size) {
    List<List<double>> m = minor(matrix, i, j);
    row = [...row, determinant(m)];
    j = j + 1;
  }
    matrix_minor = ([...matrix_minor, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  List<List<double>> cofactors = <List<double>>[];
  i = 0;
  while (i < size) {
    List<double> row = <double>[];
    int j = 0;
    while (j < size) {
    dynamic sign = ((i + j) % 2 == 0 ? 1.0 : -1.0);
    row = [...row, matrix_minor[i][j] * sign];
    j = j + 1;
  }
    cofactors = ([...cofactors, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  List<List<double>> adjugate = transpose(cofactors);
  return scalar_multiply(adjugate, 1.0 / det);
}

void _main() {
  List<List<double>> matrix_a = [[12.0, 10.0], [3.0, 9.0]];
  List<List<double>> matrix_b = [[3.0, 4.0], [7.0, 4.0]];
  List<List<double>> matrix_c = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]];
  List<dynamic> matrix_d = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]];
  print("Add Operation, add(matrix_a, matrix_b) = " + _str(add([matrix_a, matrix_b])) + " \n");
  print("Multiply Operation, multiply(matrix_a, matrix_b) = " + _str(multiply(matrix_a, matrix_b)) + " \n");
  print("Identity: " + _str(identity(5)) + "\n");
  print("Minor of " + _str(matrix_c) + " = " + _str(minor(matrix_c, 1, 2)) + " \n");
  print("Determinant of " + _str(matrix_b) + " = " + _str(determinant(matrix_b)) + " \n");
  print("Inverse of " + _str(matrix_d) + " = " + _str(inverse(List<List<double>>.from(matrix_d))) + "\n");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
