// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

void search_in_sorted_matrix(List<List<double>> mat, int m, int n, double key) {
  int i = m - 1;
  int j = 0;
  while (i >= 0 && j < n) {
    if (key == mat[i][j]) {
    print("Key " + _str(key) + " found at row- " + _str(i + 1) + " column- " + _str(j + 1));
    return;
  }
    if (key < mat[i][j]) {
    i = i - 1;
  } else {
    j = j + 1;
  }
  }
  print("Key " + _str(key) + " not found");
}

void _main() {
  List<List<double>> mat = [[2.0, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]];
  search_in_sorted_matrix(mat, mat.length, mat[0].length, 5.0);
  search_in_sorted_matrix(mat, mat.length, mat[0].length, 21.0);
  List<List<double>> mat2 = [[2.1, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]];
  search_in_sorted_matrix(mat2, mat2.length, mat2[0].length, 2.1);
  search_in_sorted_matrix(mat2, mat2.length, mat2[0].length, 2.2);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
