// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

class Result {
  String kind;
  double value;
  Result({required this.kind, required this.value});
}

double ELECTRON_CHARGE = 0.00000000000000000016021;
Result electric_conductivity(double conductivity, double electron_conc, double mobility) {
  int zero_count = 0;
  if (conductivity == 0.0) {
    zero_count = zero_count + 1;
  }
  if (electron_conc == 0.0) {
    zero_count = zero_count + 1;
  }
  if (mobility == 0.0) {
    zero_count = zero_count + 1;
  }
  if (zero_count != 1) {
    _error("You cannot supply more or less than 2 values");
  }
  if (conductivity < 0.0) {
    _error("Conductivity cannot be negative");
  }
  if (electron_conc < 0.0) {
    _error("Electron concentration cannot be negative");
  }
  if (mobility < 0.0) {
    _error("mobility cannot be negative");
  }
  if (conductivity == 0.0) {
    return Result(kind: "conductivity", value: mobility * electron_conc * ELECTRON_CHARGE);
  }
  if (electron_conc == 0.0) {
    return Result(kind: "electron_conc", value: conductivity / (mobility * ELECTRON_CHARGE));
  }
  return Result(kind: "mobility", value: conductivity / (electron_conc * ELECTRON_CHARGE));
}

Result r1 = electric_conductivity(25.0, 100.0, 0.0);
Result r2 = electric_conductivity(0.0, 1600.0, 200.0);
Result r3 = electric_conductivity(1000.0, 0.0, 1200.0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(r1.kind + " " + _str(r1.value));
  print(r2.kind + " " + _str(r2.value));
  print(r3.kind + " " + _str(r3.value));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
