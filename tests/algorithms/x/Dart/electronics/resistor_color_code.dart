// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> valid_colors = ["Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"];
Map<String, int> significant_figures_color_values = {"Black": 0, "Brown": 1, "Red": 2, "Orange": 3, "Yellow": 4, "Green": 5, "Blue": 6, "Violet": 7, "Grey": 8, "White": 9};
Map<String, double> multiplier_color_values = {"Black": 1.0, "Brown": 10.0, "Red": 100.0, "Orange": 1000.0, "Yellow": 10000.0, "Green": 100000.0, "Blue": 1000000.0, "Violet": 10000000.0, "Grey": 100000000.0, "White": 1000000000.0, "Gold": 0.1, "Silver": 0.01};
Map<String, double> tolerance_color_values = {"Brown": 1.0, "Red": 2.0, "Orange": 0.05, "Yellow": 0.02, "Green": 0.5, "Blue": 0.25, "Violet": 0.1, "Grey": 0.01, "Gold": 5.0, "Silver": 10.0};
Map<String, int> temperature_coeffecient_color_values = {"Black": 250, "Brown": 100, "Red": 50, "Orange": 15, "Yellow": 25, "Green": 20, "Blue": 10, "Violet": 5, "Grey": 1};
bool contains(List<String> list, String value) {
  for (String c in list) {
    if (c == value) {
    return true;
  }
  }
  return false;
}

int get_significant_digits(List<String> colors) {
  int digit = 0;
  for (String color in colors) {
    if (!significant_figures_color_values.containsKey(color)) {
    throw Exception(color + " is not a valid color for significant figure bands");
  }
    digit = (digit * 10 + significant_figures_color_values[color]!).toInt();
  }
  return digit;
}

double get_multiplier(String color) {
  if (!multiplier_color_values.containsKey(color)) {
    throw Exception(color + " is not a valid color for multiplier band");
  }
  return (multiplier_color_values[color])!;
}

double get_tolerance(String color) {
  if (!tolerance_color_values.containsKey(color)) {
    throw Exception(color + " is not a valid color for tolerance band");
  }
  return (tolerance_color_values[color])!;
}

int get_temperature_coeffecient(String color) {
  if (!temperature_coeffecient_color_values.containsKey(color)) {
    throw Exception(color + " is not a valid color for temperature coeffecient band");
  }
  return (temperature_coeffecient_color_values[color])!;
}

int get_band_type_count(int total, String typ) {
  if (total == 3) {
    if (typ == "significant") {
    return 2;
  };
    if (typ == "multiplier") {
    return 1;
  };
    throw Exception(typ + " is not valid for a 3 band resistor");
  } else {
    if (total == 4) {
    if (typ == "significant") {
    return 2;
  };
    if (typ == "multiplier") {
    return 1;
  };
    if (typ == "tolerance") {
    return 1;
  };
    throw Exception(typ + " is not valid for a 4 band resistor");
  } else {
    if (total == 5) {
    if (typ == "significant") {
    return 3;
  };
    if (typ == "multiplier") {
    return 1;
  };
    if (typ == "tolerance") {
    return 1;
  };
    throw Exception(typ + " is not valid for a 5 band resistor");
  } else {
    if (total == 6) {
    if (typ == "significant") {
    return 3;
  };
    if (typ == "multiplier") {
    return 1;
  };
    if (typ == "tolerance") {
    return 1;
  };
    if (typ == "temp_coeffecient") {
    return 1;
  };
    throw Exception(typ + " is not valid for a 6 band resistor");
  } else {
    throw Exception((total).toString() + " is not a valid number of bands");
  };
  };
  };
  }
}

bool check_validity(int number_of_bands, List<String> colors) {
  if (number_of_bands < 3 || number_of_bands > 6) {
    throw Exception("Invalid number of bands. Resistor bands must be 3 to 6");
  }
  if (number_of_bands != colors.length) {
    throw Exception("Expecting " + (number_of_bands).toString() + " colors, provided " + (colors.length).toString() + " colors");
  }
  for (String color in colors) {
    if (!valid_colors.contains(color)) {
    throw Exception(color + " is not a valid color");
  }
  }
  return true;
}

String calculate_resistance(int number_of_bands, List<String> color_code_list) {
  check_validity(number_of_bands, color_code_list);
  int sig_count = get_band_type_count(number_of_bands, "significant");
  List<String> significant_colors = color_code_list.sublist(0, sig_count);
  int significant_digits = get_significant_digits(significant_colors);
  String multiplier_color = color_code_list[sig_count];
  double multiplier = get_multiplier(multiplier_color);
  double tolerance = 20.0;
  if (number_of_bands >= 4) {
    String tolerance_color = color_code_list[sig_count + 1];
    tolerance = get_tolerance(tolerance_color);
  }
  int temp_coeff = 0;
  if (number_of_bands == 6) {
    String temp_color = color_code_list[sig_count + 2];
    temp_coeff = get_temperature_coeffecient(temp_color);
  }
  double resistance_value = multiplier * significant_digits;
  String resistance_str = (resistance_value).toString();
  if (resistance_value == (resistance_value as int)) {
    resistance_str = (resistance_value as int).toString();
  }
  String answer = resistance_str + "Ω ±" + (tolerance).toString() + "% ";
  if (temp_coeff != 0) {
    answer = answer + (temp_coeff).toString() + " ppm/K";
  }
  return answer;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
