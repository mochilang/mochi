// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

double expApprox(double x) {
  double y = x;
  bool is_neg = false;
  if (x < 0.0) {
    is_neg = true;
    y = -x;
  }
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 30) {
    term = term * y / (n.toDouble());
    sum = sum + term;
    n = n + 1;
  }
  if (is_neg) {
    return 1.0 / sum;
  }
  return sum;
}

double round3(double x) {
  double scaled = x * 1000.0;
  if (scaled >= 0.0) {
    scaled = scaled + 0.5;
  } else {
    scaled = scaled - 0.5;
  }
  int scaled_int = (scaled).toInt();
  return (scaled_int.toDouble()) / 1000.0;
}

double charging_capacitor(double source_voltage, double resistance, double capacitance, double time_sec) {
  if (source_voltage <= 0.0) {
    _error("Source voltage must be positive.");
  }
  if (resistance <= 0.0) {
    _error("Resistance must be positive.");
  }
  if (capacitance <= 0.0) {
    _error("Capacitance must be positive.");
  }
  double exponent = -time_sec / (resistance * capacitance);
  double voltage = source_voltage * (1.0 - expApprox(exponent));
  return round3(voltage);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(charging_capacitor(0.2, 0.9, 8.4, 0.5));
  print(charging_capacitor(2.2, 3.5, 2.4, 9.0));
  print(charging_capacitor(15.0, 200.0, 20.0, 2.0));
  print(charging_capacitor(20.0, 2000.0, 0.0003, 4.0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
