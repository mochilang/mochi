// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

double expApprox(double x) {
  if (x < 0.0) {
    return 1.0 / expApprox(-x);
  }
  if (x > 1.0) {
    double half = expApprox(x / 2.0);
    return half * half;
  }
  double sum = 1.0;
  double term = 1.0;
  int n = 1;
  while (n < 20) {
    term = term * x / (n.toDouble());
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

double floor(double x) {
  int i = (x).toInt();
  if ((i.toDouble()) > x) {
    i = i - 1;
  }
  return i.toDouble();
}

double pow10(int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double round(double x, int n) {
  double m = pow10(n);
  return floor(x * m + 0.5) / m;
}

double charging_inductor(double source_voltage, double resistance, double inductance, double time) {
  if (source_voltage <= 0.0) {
    _error("Source voltage must be positive.");
  }
  if (resistance <= 0.0) {
    _error("Resistance must be positive.");
  }
  if (inductance <= 0.0) {
    _error("Inductance must be positive.");
  }
  double exponent = -time * resistance / inductance;
  double current = source_voltage / resistance * (1.0 - expApprox(exponent));
  return round(current, 3);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(charging_inductor(5.8, 1.5, 2.3, 2.0));
  print(charging_inductor(8.0, 5.0, 3.0, 2.0));
  print(charging_inductor(8.0, 5.0 * pow10(2), 3.0, 2.0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
