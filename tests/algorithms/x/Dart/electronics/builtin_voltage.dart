// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v.abs() <= 9007199254740991 && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

double pow10(int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double BOLTZMANN = 1.380649 / pow10(23);
double ELECTRON_VOLT = 1.602176634 / pow10(19);
double TEMPERATURE = 300.0;
double ln_series(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int n = 1;
  while (n <= 19) {
    sum = sum + term / (n.toDouble());
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * sum;
}

double ln(double x) {
  double y = x;
  int k = 0;
  while (y >= 10.0) {
    y = y / 10.0;
    k = k + 1;
  }
  while (y < 1.0) {
    y = y * 10.0;
    k = k - 1;
  }
  return ln_series(y) + (k.toDouble()) * ln_series(10.0);
}

double builtin_voltage(double donor_conc, double acceptor_conc, double intrinsic_conc) {
  if (donor_conc <= 0.0) {
    _error("Donor concentration should be positive");
  }
  if (acceptor_conc <= 0.0) {
    _error("Acceptor concentration should be positive");
  }
  if (intrinsic_conc <= 0.0) {
    _error("Intrinsic concentration should be positive");
  }
  if (donor_conc <= intrinsic_conc) {
    _error("Donor concentration should be greater than intrinsic concentration");
  }
  if (acceptor_conc <= intrinsic_conc) {
    _error("Acceptor concentration should be greater than intrinsic concentration");
  }
  return BOLTZMANN * TEMPERATURE * ln(donor_conc * acceptor_conc / (intrinsic_conc * intrinsic_conc)) / ELECTRON_VOLT;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(builtin_voltage(pow10(17), pow10(17), pow10(10))));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
