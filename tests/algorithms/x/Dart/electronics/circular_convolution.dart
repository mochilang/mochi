// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) => v.toString();

double floor(double x) {
  int i = (x).toInt();
  if ((i.toDouble()) > x) {
    i = i - 1;
  }
  return i.toDouble();
}

double pow10(int n) {
  double p = 1.0;
  int i = 0;
  while (i < n) {
    p = p * 10.0;
    i = i + 1;
  }
  return p;
}

double roundn(double x, int n) {
  double m = pow10(n);
  return floor(x * m + 0.5) / m;
}

List<double> pad(List<double> signal, int target) {
  List<double> s = signal;
  while (s.length < target) {
    s = [...s, 0.0];
  }
  return s;
}

List<double> circular_convolution(List<double> a, List<double> b) {
  int n1 = a.length;
  int n2 = b.length;
  int n = (n1 > n2 ? n1 : n2);
  List<double> x = pad(a, n);
  List<double> y = pad(b, n);
  List<double> res = <double>[];
  int i = 0;
  while (i < n) {
    double sum = 0.0;
    int k = 0;
    while (k < n) {
    int j = (i - k) % n;
    int idx = (j < 0 ? j + n : j);
    sum = sum + x[k] * y[idx];
    k = k + 1;
  }
    res = [...res, roundn(sum, 2)];
    i = i + 1;
  }
  return res;
}

List<double> example1 = circular_convolution(List<double>.from([2.0, 1.0, 2.0, -1.0]), [1.0, 2.0, 3.0, 4.0]);
List<double> example2 = circular_convolution([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6], [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]);
List<double> example3 = circular_convolution(List<double>.from([-1.0, 1.0, 2.0, -2.0]), List<double>.from([0.5, 1.0, -1.0, 2.0, 0.75]));
List<double> example4 = circular_convolution(List<double>.from([1.0, -1.0, 2.0, 3.0, -1.0]), [1.0, 2.0, 3.0]);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(example1));
  print(_str(example2));
  print(_str(example3));
  print(_str(example4));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
