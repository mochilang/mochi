// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}


void _json(dynamic v) {
  print(jsonEncode(v));
}

Map<String, double> ohms_law(double voltage, double current, double resistance) {
  int zeros = 0;
  if (voltage == 0.0) {
    zeros = zeros + 1;
  }
  if (current == 0.0) {
    zeros = zeros + 1;
  }
  if (resistance == 0.0) {
    zeros = zeros + 1;
  }
  if (zeros != 1) {
    print("One and only one argument must be 0");
    return {};
  }
  if (resistance < 0.0) {
    print("Resistance cannot be negative");
    return {};
  }
  if (voltage == 0.0) {
    return {"voltage": current * resistance};
  }
  if (current == 0.0) {
    return {"current": voltage / resistance};
  }
  return {"resistance": voltage / current};
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _json(ohms_law(10.0, 0.0, 5.0));
  _json(ohms_law(-10.0, 1.0, 0.0));
  _json(ohms_law(0.0, -1.5, 2.0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
