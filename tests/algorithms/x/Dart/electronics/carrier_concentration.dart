// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v.abs() <= 9007199254740991 && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

class CarrierResult {
  String name;
  double value;
  CarrierResult({required this.name, required this.value});
}

double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

CarrierResult carrier_concentration(double electron_conc, double hole_conc, double intrinsic_conc) {
  int zero_count = 0;
  if (electron_conc == 0.0) {
    zero_count = zero_count + 1;
  }
  if (hole_conc == 0.0) {
    zero_count = zero_count + 1;
  }
  if (intrinsic_conc == 0.0) {
    zero_count = zero_count + 1;
  }
  if (zero_count != 1) {
    _error("You cannot supply more or less than 2 values");
  }
  if (electron_conc < 0.0) {
    _error("Electron concentration cannot be negative in a semiconductor");
  }
  if (hole_conc < 0.0) {
    _error("Hole concentration cannot be negative in a semiconductor");
  }
  if (intrinsic_conc < 0.0) {
    _error("Intrinsic concentration cannot be negative in a semiconductor");
  }
  if (electron_conc == 0.0) {
    return CarrierResult(name: "electron_conc", value: intrinsic_conc * intrinsic_conc / hole_conc);
  }
  if (hole_conc == 0.0) {
    return CarrierResult(name: "hole_conc", value: intrinsic_conc * intrinsic_conc / electron_conc);
  }
  if (intrinsic_conc == 0.0) {
    return CarrierResult(name: "intrinsic_conc", value: sqrtApprox(electron_conc * hole_conc));
  }
  return CarrierResult(name: "", value: -1.0);
}

CarrierResult r1 = carrier_concentration(25.0, 100.0, 0.0);
CarrierResult r2 = carrier_concentration(0.0, 1600.0, 200.0);
CarrierResult r3 = carrier_concentration(1000.0, 0.0, 1200.0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(r1.name + ", " + _str(r1.value));
  print(r2.name + ", " + _str(r2.value));
  print(r3.name + ", " + _str(r3.value));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
