// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double capacitor_parallel(List<double> capacitors) {
  double sum_c = 0.0;
  int i = 0;
  while (i < capacitors.length) {
    double c = capacitors[i];
    if (c < 0.0) {
    throw Exception("Capacitor at index " + (i).toString() + " has a negative value!");
    return 0.0;
  }
    sum_c = sum_c + c;
    i = i + 1;
  }
  return sum_c;
}

double capacitor_series(List<double> capacitors) {
  double first_sum = 0.0;
  int i = 0;
  while (i < capacitors.length) {
    double c = capacitors[i];
    if (c <= 0.0) {
    throw Exception("Capacitor at index " + (i).toString() + " has a negative or zero value!");
    return 0.0;
  }
    first_sum = first_sum + 1.0 / c;
    i = i + 1;
  }
  return 1.0 / first_sum;
}

void _main() {
  double parallel = capacitor_parallel([5.71389, 12.0, 3.0]);
  double series = capacitor_series([5.71389, 12.0, 3.0]);
  print((parallel).toString());
  print((series).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
