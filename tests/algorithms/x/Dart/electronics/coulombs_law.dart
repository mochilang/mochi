// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

double COULOMBS_CONSTANT = 8988000000.0;
double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

Map<String, double> coulombs_law(double force, double charge1, double charge2, double distance) {
  dynamic charge_product = (charge1 * charge2).abs();
  int zero_count = 0;
  if (force == 0.0) {
    zero_count = zero_count + 1;
  }
  if (charge1 == 0.0) {
    zero_count = zero_count + 1;
  }
  if (charge2 == 0.0) {
    zero_count = zero_count + 1;
  }
  if (distance == 0.0) {
    zero_count = zero_count + 1;
  }
  if (zero_count != 1) {
    _error("One and only one argument must be 0");
  }
  if (distance < 0.0) {
    _error("Distance cannot be negative");
  }
  if (force == 0.0) {
    double f = COULOMBS_CONSTANT * charge_product / (distance * distance);
    return {"force": f};
  }
  if (charge1 == 0.0) {
    double c1 = force.abs() * (distance * distance) / (COULOMBS_CONSTANT * charge2);
    return {"charge1": c1};
  }
  if (charge2 == 0.0) {
    double c2 = force.abs() * (distance * distance) / (COULOMBS_CONSTANT * charge1);
    return {"charge2": c2};
  }
  double d = sqrtApprox(COULOMBS_CONSTANT * charge_product ~/ force.abs());
  return {"distance": d};
}

void print_map(Map<String, double> m) {
  for (String k in m.keys) {
    print("{\"" + k + "\": " + _str((m[k]!)) + "}");
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0));
  print_map(coulombs_law(10.0, 3.0, 5.0, 0.0));
  print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
