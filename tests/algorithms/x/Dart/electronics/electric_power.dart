// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double floor(num x) => x.floor().toDouble();

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

class Result {
  String name;
  double value;
  Result({required this.name, required this.value});
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double pow10(int n) {
  double p = 1.0;
  int i = 0;
  while (i < n) {
    p = p * 10.0;
    i = i + 1;
  }
  return p;
}

double round_to(double x, int n) {
  double m = pow10(n);
  return floor(x * m + 0.5) / m;
}

Result electric_power(double voltage, double current, double power) {
  int zeros = 0;
  if (voltage == 0.0) {
    zeros = zeros + 1;
  }
  if (current == 0.0) {
    zeros = zeros + 1;
  }
  if (power == 0.0) {
    zeros = zeros + 1;
  }
  if (zeros != 1) {
    _error("Exactly one argument must be 0");
  } else {
    if (power < 0.0) {
    _error("Power cannot be negative in any electrical/electronics system");
  } else {
    if (voltage == 0.0) {
    return Result(name: "voltage", value: power / current);
  } else {
    if (current == 0.0) {
    return Result(name: "current", value: power / voltage);
  } else {
    if (power == 0.0) {
    double p = absf(voltage * current);
    return Result(name: "power", value: round_to(p, 2));
  } else {
    _error("Unhandled case");
  };
  };
  };
  };
  }
}

String str_result(Result r) {
  return "Result(name='" + r.name + "', value=" + _str(r.value) + ")";
}

Result r1 = electric_power(0.0, 2.0, 5.0);
Result r2 = electric_power(2.0, 2.0, 0.0);
Result r3 = electric_power(-2.0, 3.0, 0.0);
Result r4 = electric_power(2.2, 2.2, 0.0);
Result r5 = electric_power(2.0, 0.0, 6.0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(str_result(r1));
  print(str_result(r2));
  print(str_result(r3));
  print(str_result(r4));
  print(str_result(r5));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
