// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

Map<String, String> UNIT_SYMBOL = {"meter": "m", "kilometer": "km", "megametre": "Mm", "gigametre": "Gm", "terametre": "Tm", "petametre": "Pm", "exametre": "Em", "zettametre": "Zm", "yottametre": "Ym"};
Map<String, int> METRIC_CONVERSION = {"m": 0, "km": 3, "Mm": 6, "Gm": 9, "Tm": 12, "Pm": 15, "Em": 18, "Zm": 21, "Ym": 24};
String ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym";
String sanitize(String unit) {
  String res = unit.toLowerCase();
  if (res.length > 0) {
    String last = _substr(res, res.length - 1, res.length);
    if (last == "s") {
    res = _substr(res, 0, res.length - 1);
  };
  }
  if (UNIT_SYMBOL.containsKey(res)) {
    return (UNIT_SYMBOL[res])!;
  }
  return res;
}

double pow10(int exp) {
  if (exp == 0) {
    return 1.0;
  }
  int e = exp;
  double res = 1.0;
  if (e < 0) {
    e = -e;
  }
  int i = 0;
  while (i < e) {
    res = res * 10.0;
    i = i + 1;
  }
  if (exp < 0) {
    return 1.0 / res;
  }
  return res;
}

double length_conversion(double value, String from_type, String to_type) {
  String from_sanitized = sanitize(from_type);
  String to_sanitized = sanitize(to_type);
  if (!METRIC_CONVERSION.containsKey(from_sanitized)) {
    throw Exception("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS);
  }
  if (!METRIC_CONVERSION.containsKey(to_sanitized)) {
    throw Exception("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS);
  }
  int from_exp = METRIC_CONVERSION[from_sanitized]!;
  int to_exp = METRIC_CONVERSION[to_sanitized]!;
  int exponent = 0;
  if (from_exp > to_exp) {
    exponent = from_exp - to_exp;
  } else {
    exponent = -(to_exp - from_exp);
  }
  return value * pow10(exponent);
}

void main() {
  print((length_conversion(1.0, "meter", "kilometer")).toString());
  print((length_conversion(1.0, "meter", "megametre")).toString());
  print((length_conversion(1.0, "gigametre", "meter")).toString());
  print((length_conversion(1.0, "terametre", "zettametre")).toString());
  print((length_conversion(1.0, "yottametre", "zettametre")).toString());
}
