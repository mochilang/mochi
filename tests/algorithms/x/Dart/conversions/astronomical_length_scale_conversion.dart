// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

Map<String, String> UNIT_SYMBOL = {"meter": "m", "kilometer": "km", "megametre": "Mm", "gigametre": "Gm", "terametre": "Tm", "petametre": "Pm", "exametre": "Em", "zettametre": "Zm", "yottametre": "Ym"};
Map<String, int> METRIC_CONVERSION = {"m": 0, "km": 3, "Mm": 6, "Gm": 9, "Tm": 12, "Pm": 15, "Em": 18, "Zm": 21, "Ym": 24};
String ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym";
String sanitize(String unit) {
  String res = unit.toLowerCase();
  if (res.length > 0) {
    String last = _substr(res, res.length - 1, res.length);
    if (last == "s") {
    res = _substr(res, 0, res.length - 1);
  };
  }
  if (UNIT_SYMBOL.containsKey(res)) {
    return (UNIT_SYMBOL[res] ?? "");
  }
  return res;
}

double pow10(int exp) {
  if (exp == 0) {
    return 1.0;
  }
  int e = exp;
  double res = 1.0;
  if (e < 0) {
    e = -e;
  }
  int i = 0;
  while (i < e) {
    res = res * 10.0;
    i = i + 1;
  }
  if (exp < 0) {
    return 1.0 / res;
  }
  return res;
}

double length_conversion(double value, String from_type, String to_type) {
  String from_sanitized = sanitize(from_type);
  String to_sanitized = sanitize(to_type);
  if (!METRIC_CONVERSION.containsKey(from_sanitized)) {
    _error("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS);
  }
  if (!METRIC_CONVERSION.containsKey(to_sanitized)) {
    _error("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS);
  }
  int from_exp = METRIC_CONVERSION[from_sanitized]!;
  int to_exp = METRIC_CONVERSION[to_sanitized]!;
  int exponent = 0;
  if (from_exp > to_exp) {
    exponent = from_exp - to_exp;
  } else {
    exponent = -(to_exp - from_exp);
  }
  return value * pow10(exponent);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(length_conversion(1.0, "meter", "kilometer")));
  print(_str(length_conversion(1.0, "meter", "megametre")));
  print(_str(length_conversion(1.0, "gigametre", "meter")));
  print(_str(length_conversion(1.0, "terametre", "zettametre")));
  print(_str(length_conversion(1.0, "yottametre", "zettametre")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
