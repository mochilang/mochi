// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

Map<String, int> SI_UNITS = {"yotta": 24, "zetta": 21, "exa": 18, "peta": 15, "tera": 12, "giga": 9, "mega": 6, "kilo": 3, "hecto": 2, "deca": 1, "deci": -1, "centi": -2, "milli": -3, "micro": -6, "nano": -9, "pico": -12, "femto": -15, "atto": -18, "zepto": -21, "yocto": -24};
Map<String, int> BINARY_UNITS = {"yotta": 8, "zetta": 7, "exa": 6, "peta": 5, "tera": 4, "giga": 3, "mega": 2, "kilo": 1};
double pow(double base, int exp) {
  if (exp == 0) {
    return 1.0;
  }
  int e = exp;
  if (e < 0) {
    e = -e;
  }
  double result = 1.0;
  int i = 0;
  while (i < e) {
    result = result * base;
    i = i + 1;
  }
  if (exp < 0) {
    return 1.0 / result;
  }
  return result;
}

double convert_si_prefix(double known_amount, String known_prefix, String unknown_prefix) {
  String kp = known_prefix.toLowerCase();
  String up = unknown_prefix.toLowerCase();
  if (!SI_UNITS.containsKey(kp)) {
    _error("unknown prefix: " + known_prefix);
  }
  if (!SI_UNITS.containsKey(up)) {
    _error("unknown prefix: " + unknown_prefix);
  }
  int diff = (SI_UNITS[kp] ?? 0) - (SI_UNITS[up] ?? 0);
  return known_amount * pow(10.0, diff);
}

double convert_binary_prefix(double known_amount, String known_prefix, String unknown_prefix) {
  String kp = known_prefix.toLowerCase();
  String up = unknown_prefix.toLowerCase();
  if (!BINARY_UNITS.containsKey(kp)) {
    _error("unknown prefix: " + known_prefix);
  }
  if (!BINARY_UNITS.containsKey(up)) {
    _error("unknown prefix: " + unknown_prefix);
  }
  int diff = ((BINARY_UNITS[kp] ?? 0) - (BINARY_UNITS[up] ?? 0)) * 10;
  return known_amount * pow(2.0, diff);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(convert_si_prefix(1.0, "giga", "mega")));
  print(_str(convert_si_prefix(1.0, "mega", "giga")));
  print(_str(convert_si_prefix(1.0, "kilo", "kilo")));
  print(_str(convert_binary_prefix(1.0, "giga", "mega")));
  print(_str(convert_binary_prefix(1.0, "mega", "giga")));
  print(_str(convert_binary_prefix(1.0, "kilo", "kilo")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
