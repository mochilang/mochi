// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String trim(String s) {
  int start = 0;
  while (start < s.length) {
    String ch = _substr(s, start, start + 1);
    if (ch != " " && ch != "\n" && ch != "	" && ch != "\r") {
    break;
  }
    start = start + 1;
  }
  int end = s.length;
  while (end > start) {
    String ch = _substr(s, end - 1, end);
    if (ch != " " && ch != "\n" && ch != "	" && ch != "\r") {
    break;
  }
    end = end - 1;
  }
  return _substr(s, start, end);
}

int bin_to_decimal(String bin_string) {
  String trimmed = trim(bin_string);
  if (trimmed == "") {
    throw Exception("Empty string was passed to the function");
  }
  bool is_negative = false;
  String s = trimmed;
  if (_substr(s, 0, 1) == "-") {
    is_negative = true;
    s = _substr(s, 1, s.length);
  }
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c != "0" && c != "1") {
    throw Exception("Non-binary value was passed to the function");
  }
    i = i + 1;
  }
  int decimal_number = 0;
  i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    int digit = (c).codeUnitAt(0);
    decimal_number = 2 * decimal_number + digit;
    i = i + 1;
  }
  if (is_negative) {
    return -decimal_number;
  }
  return decimal_number;
}

void main() {
  print((bin_to_decimal("101")).toString());
  print((bin_to_decimal(" 1010   ")).toString());
  print((bin_to_decimal("-11101")).toString());
  print((bin_to_decimal("0")).toString());
}
