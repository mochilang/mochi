// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

String trim(String s) {
  int start = 0;
  while (start < s.length) {
    String ch = _substr(s, start, start + 1);
    if (ch != " " && ch != "\n" && ch != "	" && ch != "\r") {
    break;
  }
    start = start + 1;
  }
  int end = s.length;
  while (end > start) {
    String ch = _substr(s, end - 1, end);
    if (ch != " " && ch != "\n" && ch != "	" && ch != "\r") {
    break;
  }
    end = end - 1;
  }
  return _substr(s, start, end);
}

int bin_to_decimal(String bin_string) {
  String trimmed = trim(bin_string);
  if (trimmed == "") {
    _error("Empty string was passed to the function");
  }
  bool is_negative = false;
  String s = trimmed;
  if (_substr(s, 0, 1) == "-") {
    is_negative = true;
    s = _substr(s, 1, s.length);
  }
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c != "0" && c != "1") {
    _error("Non-binary value was passed to the function");
  }
    i = i + 1;
  }
  int decimal_number = 0;
  i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    int digit = (c).codeUnitAt(0);
    decimal_number = 2 * decimal_number + digit;
    i = i + 1;
  }
  if (is_negative) {
    return -decimal_number;
  }
  return decimal_number;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(bin_to_decimal("101")));
  print(_str(bin_to_decimal(" 1010   ")));
  print(_str(bin_to_decimal("-11101")));
  print(_str(bin_to_decimal("0")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
