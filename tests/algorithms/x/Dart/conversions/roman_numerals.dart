// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> roman_values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
List<String> roman_symbols = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
int char_value(String c) {
  if (c == "I") {
    return 1;
  }
  if (c == "V") {
    return 5;
  }
  if (c == "X") {
    return 10;
  }
  if (c == "L") {
    return 50;
  }
  if (c == "C") {
    return 100;
  }
  if (c == "D") {
    return 500;
  }
  if (c == "M") {
    return 1000;
  }
  return 0;
}

int roman_to_int(String roman) {
  int total = 0;
  int i = 0;
  while (i < roman.length) {
    if (i + 1 < roman.length && char_value(roman.substring(i, i + 1)) < char_value(roman.substring(i + 1, i + 1 + 1))) {
    total = total + char_value(roman.substring(i + 1, i + 1 + 1)) - char_value(roman.substring(i, i + 1));
    i = i + 2;
  } else {
    total = total + char_value(roman.substring(i, i + 1));
    i = i + 1;
  }
  }
  return total;
}

String int_to_roman(int number) {
  int _num = number;
  String res = "";
  int i = 0;
  while (i < roman_values.length) {
    int value = roman_values[i];
    String symbol = roman_symbols[i];
    int factor = _num ~/ value;
    _num = _num % value;
    int j = 0;
    while (j < factor) {
    res = res + symbol;
    j = j + 1;
  }
    if (_num == 0) {
    break;
  }
    i = i + 1;
  }
  return res;
}

void main() {
}
