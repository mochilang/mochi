// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

void panic(String msg) {
  print(msg);
}

String trim_spaces(String s) {
  int start = 0;
  int end = s.length;
  while (start < end && _substr(s, start, start + 1) == " ") {
    start = start + 1;
  }
  while (end > start && _substr(s, end - 1, end) == " ") {
    end = end - 1;
  }
  return _substr(s, start, end);
}

int hex_digit_value(String ch) {
  if (ch == "0") {
    return 0;
  }
  if (ch == "1") {
    return 1;
  }
  if (ch == "2") {
    return 2;
  }
  if (ch == "3") {
    return 3;
  }
  if (ch == "4") {
    return 4;
  }
  if (ch == "5") {
    return 5;
  }
  if (ch == "6") {
    return 6;
  }
  if (ch == "7") {
    return 7;
  }
  if (ch == "8") {
    return 8;
  }
  if (ch == "9") {
    return 9;
  }
  if (ch == "a" || ch == "A") {
    return 10;
  }
  if (ch == "b" || ch == "B") {
    return 11;
  }
  if (ch == "c" || ch == "C") {
    return 12;
  }
  if (ch == "d" || ch == "D") {
    return 13;
  }
  if (ch == "e" || ch == "E") {
    return 14;
  }
  if (ch == "f" || ch == "F") {
    return 15;
  }
  throw Exception("Invalid value was passed to the function");
}

int hex_to_bin(String hex_num) {
  String trimmed = trim_spaces(hex_num);
  if (trimmed.length == 0) {
    throw Exception("No value was passed to the function");
  }
  String s = trimmed;
  bool is_negative = false;
  if (_substr(s, 0, 1) == "-") {
    is_negative = true;
    s = _substr(s, 1, s.length);
  }
  int int_num = 0;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    int val = hex_digit_value(ch);
    int_num = int_num * 16 + val;
    i = i + 1;
  }
  String bin_str = "";
  int n = int_num;
  if (n == 0) {
    bin_str = "0";
  }
  while (n > 0) {
    bin_str = (n % 2).toString() + bin_str;
    n = n ~/ 2;
  }
  int result = (bin_str).codeUnitAt(0);
  if (is_negative) {
    result = -result;
  }
  return result;
}

void main() {
  print((hex_to_bin("AC")).toString());
  print((hex_to_bin("9A4")).toString());
  print((hex_to_bin("   12f   ")).toString());
  print((hex_to_bin("FfFf")).toString());
  print((hex_to_bin("-fFfF")).toString());
}
