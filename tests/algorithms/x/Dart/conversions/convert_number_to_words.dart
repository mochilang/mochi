// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> ones = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
List<String> teens = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
List<String> tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
List<int> short_powers = [15, 12, 9, 6, 3, 2];
List<String> short_units = ["quadrillion", "trillion", "billion", "million", "thousand", "hundred"];
List<int> long_powers = [15, 9, 6, 3, 2];
List<String> long_units = ["billiard", "milliard", "million", "thousand", "hundred"];
List<int> indian_powers = [14, 12, 7, 5, 3, 2];
List<String> indian_units = ["crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"];
int pow10(int exp) {
  int res = 1;
  int i = 0;
  while (i < exp) {
    res = res * 10;
    i = i + 1;
  }
  return res;
}

int max_value(String system) {
  if (system == "short") {
    return pow10(18) - 1;
  }
  if (system == "long") {
    return pow10(21) - 1;
  }
  if (system == "indian") {
    return pow10(19) - 1;
  }
  return 0;
}

String join_words(List<String> words) {
  String res = "";
  int i = 0;
  while (i < words.length) {
    if (i > 0) {
    res = res + " ";
  }
    res = res + words[i];
    i = i + 1;
  }
  return res;
}

String convert_small_number(int _num) {
  if (_num < 0) {
    return "";
  }
  if (_num >= 100) {
    return "";
  }
  int tens_digit = _num ~/ 10;
  int ones_digit = _num % 10;
  if (tens_digit == 0) {
    return ones[ones_digit];
  }
  if (tens_digit == 1) {
    return teens[ones_digit];
  }
  String hyphen = (ones_digit > 0 ? "-" : "");
  String tail = (ones_digit > 0 ? ones[ones_digit] : "");
  return tens[tens_digit] + hyphen + tail;
}

String convert_number(int _num, String system) {
  List<String> word_groups = <String>[];
  int n = _num;
  if (n < 0) {
    word_groups = [...word_groups, "negative"];
    n = -n;
  }
  if (n > max_value(system)) {
    return "";
  }
  List<int> powers = <int>[];
  List<String> units = <String>[];
  if (system == "short") {
    powers = short_powers;
    units = short_units;
  } else {
    if (system == "long") {
    powers = long_powers;
    units = long_units;
  } else {
    if (system == "indian") {
    powers = indian_powers;
    units = indian_units;
  } else {
    return "";
  };
  };
  }
  int i = 0;
  while (i < powers.length) {
    int power = powers[i];
    String unit = units[i];
    int divisor = pow10(power);
    int digit_group = n ~/ divisor;
    n = n % divisor;
    if (digit_group > 0) {
    String word_group = (digit_group >= 100 ? convert_number(digit_group, system) : convert_small_number(digit_group));
    word_groups = [...word_groups, word_group + " " + unit];
  }
    i = i + 1;
  }
  if (n > 0 || word_groups.length == 0) {
    word_groups = [...word_groups, convert_small_number(n)];
  }
  String joined = join_words(word_groups);
  return joined;
}

void main() {
  print(convert_number(123456789012345, "short"));
  print(convert_number(123456789012345, "long"));
  print(convert_number(123456789012345, "indian"));
}
