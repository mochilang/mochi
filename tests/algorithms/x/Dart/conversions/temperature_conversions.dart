// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double floor(double x) {
  int i = (x).toInt();
  if ((i.toDouble()) > x) {
    i = i - 1;
  }
  return i.toDouble();
}

double pow10(int n) {
  double p = 1.0;
  int i = 0;
  while (i < n) {
    p = p * 10.0;
    i = i + 1;
  }
  return p;
}

double round_to(double x, int ndigits) {
  double m = pow10(ndigits);
  return floor(x * m + 0.5) / m;
}

double celsius_to_fahrenheit(double c, int ndigits) {
  return round_to(c * 9.0 / 5.0 + 32.0, ndigits);
}

double celsius_to_kelvin(double c, int ndigits) {
  return round_to(c + 273.15, ndigits);
}

double celsius_to_rankine(double c, int ndigits) {
  return round_to(c * 9.0 / 5.0 + 491.67, ndigits);
}

double fahrenheit_to_celsius(double f, int ndigits) {
  return round_to((f - 32.0) * 5.0 / 9.0, ndigits);
}

double fahrenheit_to_kelvin(double f, int ndigits) {
  return round_to((f - 32.0) * 5.0 / 9.0 + 273.15, ndigits);
}

double fahrenheit_to_rankine(double f, int ndigits) {
  return round_to(f + 459.67, ndigits);
}

double kelvin_to_celsius(double k, int ndigits) {
  return round_to(k - 273.15, ndigits);
}

double kelvin_to_fahrenheit(double k, int ndigits) {
  return round_to((k - 273.15) * 9.0 / 5.0 + 32.0, ndigits);
}

double kelvin_to_rankine(double k, int ndigits) {
  return round_to(k * 9.0 / 5.0, ndigits);
}

double rankine_to_celsius(double r, int ndigits) {
  return round_to((r - 491.67) * 5.0 / 9.0, ndigits);
}

double rankine_to_fahrenheit(double r, int ndigits) {
  return round_to(r - 459.67, ndigits);
}

double rankine_to_kelvin(double r, int ndigits) {
  return round_to(r * 5.0 / 9.0, ndigits);
}

double reaumur_to_kelvin(double r, int ndigits) {
  return round_to(r * 1.25 + 273.15, ndigits);
}

double reaumur_to_fahrenheit(double r, int ndigits) {
  return round_to(r * 2.25 + 32.0, ndigits);
}

double reaumur_to_celsius(double r, int ndigits) {
  return round_to(r * 1.25, ndigits);
}

double reaumur_to_rankine(double r, int ndigits) {
  return round_to(r * 2.25 + 32.0 + 459.67, ndigits);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(celsius_to_fahrenheit(0.0, 2));
  print(celsius_to_kelvin(0.0, 2));
  print(celsius_to_rankine(0.0, 2));
  print(fahrenheit_to_celsius(32.0, 2));
  print(fahrenheit_to_kelvin(32.0, 2));
  print(fahrenheit_to_rankine(32.0, 2));
  print(kelvin_to_celsius(273.15, 2));
  print(kelvin_to_fahrenheit(273.15, 2));
  print(kelvin_to_rankine(273.15, 2));
  print(rankine_to_celsius(491.67, 2));
  print(rankine_to_fahrenheit(491.67, 2));
  print(rankine_to_kelvin(491.67, 2));
  print(reaumur_to_kelvin(80.0, 2));
  print(reaumur_to_fahrenheit(80.0, 2));
  print(reaumur_to_celsius(80.0, 2));
  print(reaumur_to_rankine(80.0, 2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
