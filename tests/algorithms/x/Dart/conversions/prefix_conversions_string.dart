// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class Prefix {
  String name;
  int exp;
  Prefix({required this.name, required this.exp});
}

List<Prefix> si_positive = [Prefix(name: "yotta", exp: 24), Prefix(name: "zetta", exp: 21), Prefix(name: "exa", exp: 18), Prefix(name: "peta", exp: 15), Prefix(name: "tera", exp: 12), Prefix(name: "giga", exp: 9), Prefix(name: "mega", exp: 6), Prefix(name: "kilo", exp: 3), Prefix(name: "hecto", exp: 2), Prefix(name: "deca", exp: 1)];
List<Prefix> si_negative = [Prefix(name: "deci", exp: -1), Prefix(name: "centi", exp: -2), Prefix(name: "milli", exp: -3), Prefix(name: "micro", exp: -6), Prefix(name: "nano", exp: -9), Prefix(name: "pico", exp: -12), Prefix(name: "femto", exp: -15), Prefix(name: "atto", exp: -18), Prefix(name: "zepto", exp: -21), Prefix(name: "yocto", exp: -24)];
List<Prefix> binary_prefixes = [Prefix(name: "yotta", exp: 80), Prefix(name: "zetta", exp: 70), Prefix(name: "exa", exp: 60), Prefix(name: "peta", exp: 50), Prefix(name: "tera", exp: 40), Prefix(name: "giga", exp: 30), Prefix(name: "mega", exp: 20), Prefix(name: "kilo", exp: 10)];
double pow(double base, int exp) {
  double result = 1.0;
  int e = exp;
  if (e < 0) {
    e = -e;
    int i = 0;
    while (i < e) {
    result = result * base;
    i = i + 1;
  };
    return 1.0 / result;
  }
  int i = 0;
  while (i < e) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

String add_si_prefix(double value) {
  List<Prefix> prefixes = <Prefix>[];
  if (value > 0.0) {
    prefixes = si_positive;
  } else {
    prefixes = si_negative;
  }
  int i = 0;
  while (i < prefixes.length) {
    Prefix p = prefixes[i];
    double _num = value / pow(10.0, p.exp);
    if (_num > 1.0) {
    return _str(_num) + " " + p.name;
  }
    i = i + 1;
  }
  return _str(value);
}

String add_binary_prefix(double value) {
  int i = 0;
  while (i < binary_prefixes.length) {
    Prefix p = binary_prefixes[i];
    double _num = value / pow(2.0, p.exp);
    if (_num > 1.0) {
    return _str(_num) + " " + p.name;
  }
    i = i + 1;
  }
  return _str(value);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(add_si_prefix(10000.0));
  print(add_si_prefix(0.005));
  print(add_binary_prefix(65536.0));
  print(add_binary_prefix(512.0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
