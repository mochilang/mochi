// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

String hex_digits = "0123456789abcdef";
List<String> split_by_dot(String s) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c == ".") {
    res = [...res, current];
    current = "";
  } else {
    current = current + c;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

int parse_decimal(String s) {
  if (s.length == 0) {
    _error("Invalid IPv4 address format");
  }
  int value = 0;
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c.compareTo("0") < 0 || c.compareTo("9") > 0) {
    _error("Invalid IPv4 address format");
  }
    value = value * 10 + ((int.tryParse(c.toString()) ?? c.toString().codeUnitAt(0)));
    i = i + 1;
  }
  return value;
}

String to_hex2(int n) {
  int x = n;
  String res = "";
  while (x > 0) {
    int d = x % 16;
    res = _substr(hex_digits, d, d + 1) + res;
    x = x ~/ 16;
  }
  while (res.length < 2) {
    res = "0" + res;
  }
  return res;
}

int ipv4_to_decimal(String ipv4_address) {
  List<String> parts = split_by_dot(ipv4_address);
  if (parts.length != 4) {
    _error("Invalid IPv4 address format");
  }
  int result = 0;
  int i = 0;
  while (i < 4) {
    int oct = parse_decimal(parts[i]);
    if (oct < 0 || oct > 255) {
    _error("Invalid IPv4 octet " + _str(oct));
  }
    result = result * 256 + oct;
    i = i + 1;
  }
  return result;
}

int alt_ipv4_to_decimal(String ipv4_address) {
  List<String> parts = split_by_dot(ipv4_address);
  if (parts.length != 4) {
    _error("Invalid IPv4 address format");
  }
  String hex_str = "";
  int i = 0;
  while (i < 4) {
    int oct = parse_decimal(parts[i]);
    if (oct < 0 || oct > 255) {
    _error("Invalid IPv4 octet " + _str(oct));
  }
    hex_str = hex_str + to_hex2(oct);
    i = i + 1;
  }
  int value = 0;
  int k = 0;
  while (k < hex_str.length) {
    String c = _substr(hex_str, k, k + 1);
    int digit = 0 - 1;
    int j = 0;
    while (j < hex_digits.length) {
    if (_substr(hex_digits, j, j + 1) == c) {
    digit = j;
  }
    j = j + 1;
  }
    if (digit < 0) {
    _error("Invalid hex digit");
  }
    value = value * 16 + digit;
    k = k + 1;
  }
  return value;
}

String decimal_to_ipv4(int decimal_ipv4) {
  if (decimal_ipv4 < 0 || decimal_ipv4 > 4294967295) {
    _error("Invalid decimal IPv4 address");
  }
  int n = decimal_ipv4;
  List<String> parts = <String>[];
  int i = 0;
  while (i < 4) {
    int octet = n % 256;
    parts = [...parts, _str(octet)];
    n = n ~/ 256;
    i = i + 1;
  }
  String res = "";
  int j = parts.length - 1;
  while (j >= 0) {
    res = res + parts[j];
    if (j > 0) {
    res = res + ".";
  }
    j = j - 1;
  }
  return res;
}

void main() {
  print(ipv4_to_decimal("192.168.0.1"));
  print(ipv4_to_decimal("10.0.0.255"));
  print(alt_ipv4_to_decimal("192.168.0.1"));
  print(alt_ipv4_to_decimal("10.0.0.255"));
  print(decimal_to_ipv4(3232235521));
  print(decimal_to_ipv4(167772415));
}
