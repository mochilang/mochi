// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

String octal_to_hex(String octal) {
  String s = octal;
  if (s.length >= 2 && s.substring(0, 0 + 1) == "0" && s.substring(1, 1 + 1) == "o") {
    s = _substr(s, 2, s.length);
  }
  if (s.length == 0) {
    _error("Empty string was passed to the function");
  }
  int j = 0;
  while (j < s.length) {
    String c = s.substring(j, j + 1);
    if (c != "0" && c != "1" && c != "2" && c != "3" && c != "4" && c != "5" && c != "6" && c != "7") {
    _error("Not a Valid Octal Number");
  }
    j = j + 1;
  }
  int decimal = 0;
  int k = 0;
  while (k < s.length) {
    int d = (s.substring(k, k + 1)).codeUnitAt(0);
    decimal = decimal * 8 + d;
    k = k + 1;
  }
  String hex_chars = "0123456789ABCDEF";
  if (decimal == 0) {
    return "0x";
  }
  String hex = "";
  while (decimal > 0) {
    int idx = decimal % 16;
    hex = hex_chars.substring(idx, idx + 1) + hex;
    decimal = decimal ~/ 16;
  }
  return "0x" + hex;
}

List<String> nums = ["030", "100", "247", "235", "007"];
int t = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (t < nums.length) {
    dynamic _num = nums[t];
    print(octal_to_hex(_num));
    t = t + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
