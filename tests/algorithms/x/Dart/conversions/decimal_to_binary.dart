// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

String decimal_to_binary_iterative(int _num) {
  if (_num == 0) {
    return "0b0";
  }
  bool negative = false;
  int n = _num;
  if (n < 0) {
    negative = true;
    n = -n;
  }
  String result = "";
  while (n > 0) {
    result = _str(n % 2) + result;
    n = n ~/ 2;
  }
  if (negative) {
    return "-0b" + result;
  }
  return "0b" + result;
}

String decimal_to_binary_recursive_helper(int n) {
  if (n == 0) {
    return "0";
  }
  if (n == 1) {
    return "1";
  }
  int div = n ~/ 2;
  int mod = n % 2;
  return decimal_to_binary_recursive_helper(div) + _str(mod);
}

String decimal_to_binary_recursive(int _num) {
  if (_num == 0) {
    return "0b0";
  }
  if (_num < 0) {
    return "-0b" + decimal_to_binary_recursive_helper(-_num);
  }
  return "0b" + decimal_to_binary_recursive_helper(_num);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(decimal_to_binary_iterative(0));
  print(decimal_to_binary_iterative(2));
  print(decimal_to_binary_iterative(7));
  print(decimal_to_binary_iterative(35));
  print(decimal_to_binary_iterative(-2));
  print(decimal_to_binary_recursive(0));
  print(decimal_to_binary_recursive(40));
  print(decimal_to_binary_recursive(-40));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
