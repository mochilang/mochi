// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String decimal_to_binary_iterative(int _num) {
  if (_num == 0) {
    return "0b0";
  }
  bool negative = false;
  int n = _num;
  if (n < 0) {
    negative = true;
    n = -n;
  }
  String result = "";
  while (n > 0) {
    result = (n % 2).toString() + result;
    n = n ~/ 2;
  }
  if (negative) {
    return "-0b" + result;
  }
  return "0b" + result;
}

String decimal_to_binary_recursive_helper(int n) {
  if (n == 0) {
    return "0";
  }
  if (n == 1) {
    return "1";
  }
  int div = n ~/ 2;
  int mod = n % 2;
  return decimal_to_binary_recursive_helper(div) + (mod).toString();
}

String decimal_to_binary_recursive(int _num) {
  if (_num == 0) {
    return "0b0";
  }
  if (_num < 0) {
    return "-0b" + decimal_to_binary_recursive_helper(-_num);
  }
  return "0b" + decimal_to_binary_recursive_helper(_num);
}

void main() {
  print(decimal_to_binary_iterative(0));
  print(decimal_to_binary_iterative(2));
  print(decimal_to_binary_iterative(7));
  print(decimal_to_binary_iterative(35));
  print(decimal_to_binary_iterative(-2));
  print(decimal_to_binary_recursive(0));
  print(decimal_to_binary_recursive(40));
  print(decimal_to_binary_recursive(-40));
}
