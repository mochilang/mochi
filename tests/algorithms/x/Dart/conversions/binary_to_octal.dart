// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String bin_to_octal(String bin_string) {
  int i = 0;
  while (i < bin_string.length) {
    String c = bin_string.substring(i, i + 1);
    if (!(c == "0" || c == "1")) {
    throw Exception("Non-binary value was passed to the function");
  }
    i = i + 1;
  }
  if (bin_string.length == 0) {
    throw Exception("Empty string was passed to the function");
  }
  String padded = bin_string;
  while (padded.length % 3 != 0) {
    padded = "0" + padded;
  }
  String oct_string = "";
  int index = 0;
  while (index < padded.length) {
    String group = _substr(padded, index, index + 3);
    int b0 = (group.substring(0, 0 + 1) == "1" ? 1 : 0);
    int b1 = (group.substring(1, 1 + 1) == "1" ? 1 : 0);
    int b2 = (group.substring(2, 2 + 1) == "1" ? 1 : 0);
    int oct_val = b0 * 4 + b1 * 2 + b2;
    oct_string = oct_string + (oct_val).toString();
    index = index + 3;
  }
  return oct_string;
}

void main() {
  print(bin_to_octal("1111"));
  print(bin_to_octal("101010101010011"));
}
