// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

String strip_spaces(String s) {
  int start = 0;
  int end = s.length - 1;
  while (start < s.length && s.substring(start, start + 1) == " ") {
    start = start + 1;
  }
  while (end >= start && s.substring(end, end + 1) == " ") {
    end = end - 1;
  }
  String res = "";
  int i = start;
  while (i <= end) {
    res = res + s.substring(i, i + 1);
    i = i + 1;
  }
  return res;
}

String repeat_char(String ch, int count) {
  String res = "";
  int i = 0;
  while (i < count) {
    res = res + ch;
    i = i + 1;
  }
  return res;
}

String slice(String s, int start, int end) {
  String res = "";
  int i = start;
  while (i < end) {
    res = res + s.substring(i, i + 1);
    i = i + 1;
  }
  return res;
}

int bits_to_int(String bits) {
  int value = 0;
  int i = 0;
  while (i < bits.length) {
    value = value * 2;
    if (bits.substring(i, i + 1) == "1") {
    value = value + 1;
  }
    i = i + 1;
  }
  return value;
}

String bin_to_hexadecimal(String binary_str) {
  String s = strip_spaces(binary_str);
  if (s.length == 0) {
    _error("Empty string was passed to the function");
  }
  bool is_negative = false;
  if (s.substring(0, 0 + 1) == "-") {
    is_negative = true;
    s = s.sublist(1, s.length);
  }
  int i = 0;
  while (i < s.length) {
    String c = s.substring(i, i + 1);
    if (c != "0" && c != "1") {
    _error("Non-binary value was passed to the function");
  }
    i = i + 1;
  }
  int groups = s.length ~/ 4 + 1;
  int pad_len = groups * 4 - s.length;
  s = repeat_char("0", pad_len) + s;
  String digits = "0123456789abcdef";
  String res = "0x";
  int j = 0;
  while (j < s.length) {
    dynamic chunk = s.sublist(j, j + 4);
    int val = bits_to_int(chunk);
    res = res + digits.substring(val, val + 1);
    j = j + 4;
  }
  if (is_negative) {
    return "-" + res;
  }
  return res;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(bin_to_hexadecimal("101011111"));
  print(bin_to_hexadecimal(" 1010   "));
  print(bin_to_hexadecimal("-11101"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
