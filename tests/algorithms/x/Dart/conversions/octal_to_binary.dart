// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String octal_to_binary(String octal_number) {
  if (octal_number.length == 0) {
    throw Exception("Empty string was passed to the function");
  }
  String octal_digits = "01234567";
  String binary_number = "";
  int i = 0;
  while (i < octal_number.length) {
    String digit = octal_number.substring(i, i + 1);
    bool valid = false;
    int j = 0;
    while (j < octal_digits.length) {
    if (digit == octal_digits.substring(j, j + 1)) {
    valid = true;
    break;
  }
    j = j + 1;
  }
    if (!valid) {
    throw Exception("Non-octal value was passed to the function");
  }
    int value = (digit).codeUnitAt(0);
    int k = 0;
    String binary_digit = "";
    while (k < 3) {
    binary_digit = (value % 2).toString() + binary_digit;
    value = value ~/ 2;
    k = k + 1;
  }
    binary_number = binary_number + binary_digit;
    i = i + 1;
  }
  return binary_number;
}

void main() {
  print(octal_to_binary("17"));
  print(octal_to_binary("7"));
}
