// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

String octal_to_binary(String octal_number) {
  if (octal_number.length == 0) {
    _error("Empty string was passed to the function");
  }
  String octal_digits = "01234567";
  String binary_number = "";
  int i = 0;
  while (i < octal_number.length) {
    String digit = octal_number.substring(i, i + 1);
    bool valid = false;
    int j = 0;
    while (j < octal_digits.length) {
    if (digit == octal_digits.substring(j, j + 1)) {
    valid = true;
    break;
  }
    j = j + 1;
  }
    if (!valid) {
    _error("Non-octal value was passed to the function");
  }
    int value = (digit).codeUnitAt(0);
    int k = 0;
    String binary_digit = "";
    while (k < 3) {
    binary_digit = _str(value % 2) + binary_digit;
    value = value ~/ 2;
    k = k + 1;
  }
    binary_number = binary_number + binary_digit;
    i = i + 1;
  }
  return binary_number;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(octal_to_binary("17"));
  print(octal_to_binary("7"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
