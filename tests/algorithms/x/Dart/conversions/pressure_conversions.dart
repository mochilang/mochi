// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

class FromTo {
  double from_factor;
  double to_factor;
  FromTo({required this.from_factor, required this.to_factor});
}

Map<String, FromTo> PRESSURE_CONVERSION = {"atm": FromTo(from_factor: 1.0, to_factor: 1.0), "pascal": FromTo(from_factor: 0.0000098, to_factor: 101325.0), "bar": FromTo(from_factor: 0.986923, to_factor: 1.01325), "kilopascal": FromTo(from_factor: 0.00986923, to_factor: 101.325), "megapascal": FromTo(from_factor: 9.86923, to_factor: 0.101325), "psi": FromTo(from_factor: 0.068046, to_factor: 14.6959), "inHg": FromTo(from_factor: 0.0334211, to_factor: 29.9213), "torr": FromTo(from_factor: 0.00131579, to_factor: 760.0)};
double pressure_conversion(double value, String from_type, String to_type) {
  if (!PRESSURE_CONVERSION.containsKey(from_type)) {
    dynamic keys = Object.keys(PRESSURE_CONVERSION).join(", ");
    _error("Invalid 'from_type' value: '" + from_type + "'  Supported values are:\n" + keys);
  }
  if (!PRESSURE_CONVERSION.containsKey(to_type)) {
    dynamic keys = Object.keys(PRESSURE_CONVERSION).join(", ");
    _error("Invalid 'to_type' value: '" + to_type + ".  Supported values are:\n" + keys);
  }
  FromTo from = PRESSURE_CONVERSION[from_type]!;
  FromTo to = PRESSURE_CONVERSION[to_type]!;
  return value * from.from_factor * to.to_factor;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(pressure_conversion(4.0, "atm", "pascal"));
  print(pressure_conversion(1.0, "pascal", "psi"));
  print(pressure_conversion(1.0, "bar", "atm"));
  print(pressure_conversion(3.0, "kilopascal", "bar"));
  print(pressure_conversion(2.0, "megapascal", "psi"));
  print(pressure_conversion(4.0, "psi", "torr"));
  print(pressure_conversion(1.0, "inHg", "atm"));
  print(pressure_conversion(1.0, "torr", "psi"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
