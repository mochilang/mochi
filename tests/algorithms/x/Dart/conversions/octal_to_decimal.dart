// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

void panic(String msg) {
  print(msg);
}

String trim_spaces(String s) {
  int start = 0;
  int end = s.length - 1;
  while (start <= end && _substr(s, start, start + 1) == " ") {
    start = start + 1;
  }
  while (end >= start && _substr(s, end, end + 1) == " ") {
    end = end - 1;
  }
  if (start > end) {
    return "";
  }
  return _substr(s, start, end + 1);
}

int char_to_digit(String ch) {
  if (ch == "0") {
    return 0;
  }
  if (ch == "1") {
    return 1;
  }
  if (ch == "2") {
    return 2;
  }
  if (ch == "3") {
    return 3;
  }
  if (ch == "4") {
    return 4;
  }
  if (ch == "5") {
    return 5;
  }
  if (ch == "6") {
    return 6;
  }
  if (ch == "7") {
    return 7;
  }
  throw Exception("Non-octal value was passed to the function");
  return 0;
}

int oct_to_decimal(String oct_string) {
  String s = trim_spaces(oct_string);
  if (s.length == 0) {
    throw Exception("Empty string was passed to the function");
    return 0;
  }
  bool is_negative = false;
  if (_substr(s, 0, 1) == "-") {
    is_negative = true;
    s = _substr(s, 1, s.length);
  }
  if (s.length == 0) {
    throw Exception("Non-octal value was passed to the function");
    return 0;
  }
  int decimal_number = 0;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    int digit = char_to_digit(ch);
    decimal_number = 8 * decimal_number + digit;
    i = i + 1;
  }
  if (is_negative) {
    decimal_number = -decimal_number;
  }
  return decimal_number;
}

void _main() {
  print((oct_to_decimal("1")).toString());
  print((oct_to_decimal("-1")).toString());
  print((oct_to_decimal("12")).toString());
  print((oct_to_decimal(" 12   ")).toString());
  print((oct_to_decimal("-45")).toString());
  print((oct_to_decimal("0")).toString());
}

void _start() {
  _main();
}

void main() => _start();
