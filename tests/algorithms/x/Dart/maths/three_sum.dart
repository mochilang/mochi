// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> bubble_sort(List<int> nums) {
  List<int> arr = nums;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - 1) {
    if (arr[j] > arr[j + 1]) {
    int temp = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = temp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<List<int>> three_sum(List<int> nums) {
  List<int> sorted = bubble_sort(nums);
  List<List<int>> res = <List<int>>[];
  int n = sorted.length;
  int i = 0;
  while (i < n - 2) {
    if (i == 0 || sorted[i] != sorted[i - 1]) {
    int low = i + 1;
    int high = n - 1;
    int c = 0 - sorted[i];
    while (low < high) {
    int s = sorted[low] + sorted[high];
    if (s == c) {
    List<int> triple = [sorted[i], sorted[low], sorted[high]];
    res = ([...res, triple] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    while (low < high && sorted[low] == sorted[low + 1]) {
    low = low + 1;
  };
    while (low < high && sorted[high] == sorted[high - 1]) {
    high = high - 1;
  };
    low = low + 1;
    high = high - 1;
  } else {
    if (s < c) {
    low = low + 1;
  } else {
    high = high - 1;
  };
  }
  };
  }
    i = i + 1;
  }
  return res;
}

void main() {
  print((three_sum([-1, 0, 1, 2, -1, -4])).toString());
  print((three_sum([1, 2, 3, 4])).toString());
}
