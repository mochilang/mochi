// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String key(int x, int y) {
  return (x).toString() + "," + (y).toString();
}

Map<String, double> joint_probability_distribution(List<int> x_values, List<int> y_values, List<double> x_probabilities, List<double> y_probabilities) {
  Map<String, double> result = <String, double>{};
  int i = 0;
  while (i < x_values.length) {
    int j = 0;
    while (j < y_values.length) {
    String k = key(x_values[i], y_values[j]);
    result[k] = x_probabilities[i] * y_probabilities[j];
    j = j + 1;
  }
    i = i + 1;
  }
  return result;
}

double expectation(List<int> values, List<double> probabilities) {
  double total = 0.0;
  int i = 0;
  while (i < values.length) {
    total = total + (values[i] as double) * probabilities[i];
    i = i + 1;
  }
  return total;
}

double variance(List<int> values, List<double> probabilities) {
  double mean = expectation(values, probabilities);
  double total = 0.0;
  int i = 0;
  while (i < values.length) {
    double diff = (values[i] as double) - mean;
    total = total + diff * diff * probabilities[i];
    i = i + 1;
  }
  return total;
}

double covariance(List<int> x_values, List<int> y_values, List<double> x_probabilities, List<double> y_probabilities) {
  double mean_x = expectation(x_values, x_probabilities);
  double mean_y = expectation(y_values, y_probabilities);
  double total = 0.0;
  int i = 0;
  while (i < x_values.length) {
    int j = 0;
    while (j < y_values.length) {
    double diff_x = (x_values[i] as double) - mean_x;
    double diff_y = (y_values[j] as double) - mean_y;
    total = total + diff_x * diff_y * x_probabilities[i] * y_probabilities[j];
    j = j + 1;
  }
    i = i + 1;
  }
  return total;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double standard_deviation(double v) {
  return sqrtApprox(v);
}

void _main() {
  List<int> x_values = [1, 2];
  List<int> y_values = [-2, 5, 8];
  List<double> x_probabilities = [0.7, 0.3];
  List<double> y_probabilities = [0.3, 0.5, 0.2];
  Map<String, double> jpd = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities);
  int i = 0;
  while (i < x_values.length) {
    int j = 0;
    while (j < y_values.length) {
    String k = key(x_values[i], y_values[j]);
    double prob = jpd[k]!;
    print(k + "=" + (prob).toString());
    j = j + 1;
  }
    i = i + 1;
  }
  double ex = expectation(x_values, x_probabilities);
  double ey = expectation(y_values, y_probabilities);
  double vx = variance(x_values, x_probabilities);
  double vy = variance(y_values, y_probabilities);
  double cov = covariance(x_values, y_values, x_probabilities, y_probabilities);
  print("Ex=" + (ex).toString());
  print("Ey=" + (ey).toString());
  print("Vx=" + (vx).toString());
  print("Vy=" + (vy).toString());
  print("Cov=" + (cov).toString());
  print("Sx=" + (standard_deviation(vx)).toString());
  print("Sy=" + (standard_deviation(vy)).toString());
}

void _start() {
  _main();
}

void main() => _start();
