// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double ln(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int k = 1;
  while (k <= 99) {
    sum = sum + term / k.toDouble();
    term = term * t * t;
    k = k + 2;
  }
  return 2.0 * sum;
}

double log10(double x) {
  return ln(x) / ln(10.0);
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double res(int x, int y) {
  if (x == 0) {
    return 0.0;
  }
  if (y == 0) {
    return 1.0;
  }
  if (x < 0) {
    _error("math domain error");
  }
  return y.toDouble() * log10(x.toDouble());
}

void test_res() {
  if (absf(res(5, 7) - 4.892790030352132) > 0.0000001) {
    _error("res(5,7) failed");
  }
  if (res(0, 5) != 0.0) {
    _error("res(0,5) failed");
  }
  if (res(3, 0) != 1.0) {
    _error("res(3,0) failed");
  }
}

String compare(int x1, int y1, int x2, int y2) {
  double r1 = res(x1, y1);
  double r2 = res(x2, y2);
  if (r1 > r2) {
    return "Largest number is " + _str(x1) + " ^ " + _str(y1);
  }
  if (r2 > r1) {
    return "Largest number is " + _str(x2) + " ^ " + _str(y2);
  }
  return "Both are equal";
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  test_res();
  print(compare(5, 7, 4, 8));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
