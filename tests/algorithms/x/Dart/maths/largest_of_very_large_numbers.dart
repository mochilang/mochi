// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double ln(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int k = 1;
  while (k <= 99) {
    sum = sum + term / (k as double);
    term = term * t * t;
    k = k + 2;
  }
  return 2.0 * sum;
}

double log10(double x) {
  return ln(x) / ln(10.0);
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double res(int x, int y) {
  if (x == 0) {
    return 0.0;
  }
  if (y == 0) {
    return 1.0;
  }
  if (x < 0) {
    throw Exception("math domain error");
  }
  return (y as double) * log10(x as double);
}

void test_res() {
  if (absf(res(5, 7) - 4.892790030352132) > 0.0000001) {
    throw Exception("res(5,7) failed");
  }
  if (res(0, 5) != 0.0) {
    throw Exception("res(0,5) failed");
  }
  if (res(3, 0) != 1.0) {
    throw Exception("res(3,0) failed");
  }
}

String compare(int x1, int y1, int x2, int y2) {
  double r1 = res(x1, y1);
  double r2 = res(x2, y2);
  if (r1 > r2) {
    return "Largest number is " + (x1).toString() + " ^ " + (y1).toString();
  }
  if (r2 > r1) {
    return "Largest number is " + (x2).toString() + " ^ " + (y2).toString();
  }
  return "Both are equal";
}

void main() {
  test_res();
  print(compare(5, 7, 4, 8));
}
