// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class EuclidResult {
  int x;
  int y;
  EuclidResult({required this.x, required this.y});
}

EuclidResult extended_euclid(int a, int b) {
  if (b == 0) {
    return EuclidResult(x: 1, y: 0);
  }
  EuclidResult res = extended_euclid(b, a % b);
  int k = a ~/ b;
  return EuclidResult(x: res.y, y: res.x - k * res.y);
}

int chinese_remainder_theorem(int n1, int r1, int n2, int r2) {
  EuclidResult res = extended_euclid(n1, n2);
  int x = res.x;
  int y = res.y;
  int m = n1 * n2;
  int n = r2 * x * n1 + r1 * y * n2;
  return (n % m + m) % m;
}

int invert_modulo(int a, int n) {
  EuclidResult res = extended_euclid(a, n);
  int b = res.x;
  if (b < 0) {
    b = (b % n + n) % n;
  }
  return b;
}

int chinese_remainder_theorem2(int n1, int r1, int n2, int r2) {
  int x = invert_modulo(n1, n2);
  int y = invert_modulo(n2, n1);
  int m = n1 * n2;
  int n = r2 * x * n1 + r1 * y * n2;
  return (n % m + m) % m;
}

EuclidResult e1 = extended_euclid(10, 6);
EuclidResult e2 = extended_euclid(7, 5);
void main() {
  print((e1.x).toString() + "," + (e1.y).toString());
  print((e2.x).toString() + "," + (e2.y).toString());
  print((chinese_remainder_theorem(5, 1, 7, 3)).toString());
  print((chinese_remainder_theorem(6, 1, 4, 3)).toString());
  print((invert_modulo(2, 5)).toString());
  print((invert_modulo(8, 7)).toString());
  print((chinese_remainder_theorem2(5, 1, 7, 3)).toString());
  print((chinese_remainder_theorem2(6, 1, 4, 3)).toString());
}
