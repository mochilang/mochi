// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int ceil_int(double x) {
  int n = x as int;
  if (((n).toDouble()) < x) {
    n = n + 1;
  }
  return n;
}

List<double> explicit_euler(dynamic ode_func, double y0, double x0, double step_size, double x_end) {
  int n = ceil_int((x_end - x0) / step_size);
  List<double> y = <double>[];
  int i = 0;
  while (i <= n) {
    y = [...y, 0.0];
    i = i + 1;
  }
  while (y.length <= 0) { y.add(0); } y[0] = y0;
  double x = x0;
  int k = 0;
  while (k < n) {
    while (y.length <= k + 1) { y.add(0); } y[k + 1] = y[k] + step_size * ode_func(x, y[k]);
    x = x + step_size;
    k = k + 1;
  }
  return y;
}

double abs_float(double a) {
  if (a < 0.0) {
    return -a;
  }
  return a;
}

void test_explicit_euler() {
  dynamic f = ((x, y) => y);
  List<double> ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0);
  double last = ys[ys.length - 1];
  if (abs_float(last - 144.77277243257308) > 0.001) {
    throw Exception("explicit_euler failed");
  }
}

void _main() {
  test_explicit_euler();
  dynamic f = ((x, y) => y);
  List<double> ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0);
  print(ys[ys.length - 1]);
}

void _start() {
  _main();
}

void main() => _start();
