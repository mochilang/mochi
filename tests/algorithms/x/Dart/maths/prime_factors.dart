// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> prime_factors(int n) {
  if (n < 2) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  int _num = n;
  int i = 2;
  List<int> factors = <int>[];
  while (i * i <= _num) {
    if (_num % i == 0) {
    factors = [...factors, i];
    _num = _num ~/ i;
  } else {
    i = i + 1;
  }
  }
  if (_num > 1) {
    factors = [...factors, _num];
  }
  return factors;
}

bool list_eq(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_prime_factors() {
  if (!list_eq(prime_factors(0), <int>[])) {
    throw Exception("prime_factors(0) failed");
  }
  if (!list_eq(prime_factors(100), [2, 2, 5, 5])) {
    throw Exception("prime_factors(100) failed");
  }
  if (!list_eq(prime_factors(2560), [2, 2, 2, 2, 2, 2, 2, 2, 2, 5])) {
    throw Exception("prime_factors(2560) failed");
  }
  if (!list_eq(prime_factors(97), [97])) {
    throw Exception("prime_factors(97) failed");
  }
}

void _main() {
  test_prime_factors();
  print((prime_factors(100)).toString());
  print((prime_factors(2560)).toString());
  print((prime_factors(97)).toString());
}

void _start() {
  _main();
}

void main() => _start();
