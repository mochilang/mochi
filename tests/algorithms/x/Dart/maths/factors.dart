// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> reverse(List<int> xs) {
  List<int> res = <int>[];
  int i = xs.length - 1;
  while (i >= 0) {
    res = [...res, xs[i]];
    i = i - 1;
  }
  return res;
}

List<int> factors_of_a_number(int _num) {
  List<int> facs = <int>[];
  if (_num < 1) {
    return facs;
  }
  List<int> small = <int>[];
  List<int> large = <int>[];
  int i = 1;
  while (i * i <= _num) {
    if (_num % i == 0) {
    small = [...small, i];
    int d = _num ~/ i;
    if (d != i) {
    large = [...large, d];
  };
  }
    i = i + 1;
  }
  facs = ([...small, ...reverse(large)] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  return facs;
}

void run_tests() {
  if (factors_of_a_number(1) != [1]) {
    throw Exception("case1 failed");
  }
  if (factors_of_a_number(5) != [1, 5]) {
    throw Exception("case2 failed");
  }
  if (factors_of_a_number(24) != [1, 2, 3, 4, 6, 8, 12, 24]) {
    throw Exception("case3 failed");
  }
  if (factors_of_a_number(-24) != []) {
    throw Exception("case4 failed");
  }
}

void _main() {
  run_tests();
  print((factors_of_a_number(24)).toString());
}

void _start() {
  _main();
}

void main() => _start();
