// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<int> reverse(List<int> xs) {
  List<int> res = <int>[];
  int i = xs.length - 1;
  while (i >= 0) {
    res = [...res, xs[i]];
    i = i - 1;
  }
  return res;
}

List<int> factors_of_a_number(int _num) {
  List<int> facs = <int>[];
  if (_num < 1) {
    return facs;
  }
  List<int> small = <int>[];
  List<int> large = <int>[];
  int i = 1;
  while (i * i <= _num) {
    if (_num % i == 0) {
    small = [...small, i];
    int d = _num ~/ i;
    if (d != i) {
    large = [...large, d];
  };
  }
    i = i + 1;
  }
  facs = ([...small, ...reverse(large)] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  return facs;
}

void run_tests() {
  if (!_listEq(factors_of_a_number(1), [1])) {
    _error("case1 failed");
  }
  if (!_listEq(factors_of_a_number(5), [1, 5])) {
    _error("case2 failed");
  }
  if (!_listEq(factors_of_a_number(24), [1, 2, 3, 4, 6, 8, 12, 24])) {
    _error("case3 failed");
  }
  if (!_listEq(factors_of_a_number(-24), [])) {
    _error("case4 failed");
  }
}

void _main() {
  run_tests();
  print(_str(factors_of_a_number(24)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

