// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int mod_pow(int base, int exponent, int modulus) {
  int result = 1;
  int b = base % modulus;
  int e = exponent;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % modulus;
  }
    b = b * b % modulus;
    e = e ~/ 2;
  }
  return result;
}

double pow_float(double base, int exponent) {
  int exp = exponent;
  double result = 1.0;
  if (exp < 0) {
    exp = -exp;
  }
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  if (exponent < 0) {
    result = 1.0 / result;
  }
  return result;
}

String hex_digit(int n) {
  if (n < 10) {
    return _str(n);
  }
  List<String> letters = ["a", "b", "c", "d", "e", "f"];
  return letters[n - 10];
}

double floor_float(double x) {
  int i = x.toInt();
  if (i.toDouble() > x) {
    i = i - 1;
  }
  return i.toDouble();
}

double subsum(int digit_pos_to_extract, int denominator_addend, int precision) {
  double total = 0.0;
  int sum_index = 0;
  while (sum_index < digit_pos_to_extract + precision) {
    int denominator = 8 * sum_index + denominator_addend;
    if (sum_index < digit_pos_to_extract) {
    int exponent = digit_pos_to_extract - 1 - sum_index;
    int exponential_term = mod_pow(16, exponent, denominator);
    total = total + exponential_term.toDouble() / denominator.toDouble();
  } else {
    int exponent = digit_pos_to_extract - 1 - sum_index;
    double exponential_term = pow_float(16.0, exponent);
    total = total + exponential_term / denominator.toDouble();
  }
    sum_index = sum_index + 1;
  }
  return total;
}

String bailey_borwein_plouffe(int digit_position, int precision) {
  if (digit_position <= 0) {
    _error("Digit position must be a positive integer");
  }
  if (precision < 0) {
    _error("Precision must be a nonnegative integer");
  }
  double sum_result = 4.0 * subsum(digit_position, 1, precision) - 2.0 * subsum(digit_position, 4, precision) - 1.0 * subsum(digit_position, 5, precision) - 1.0 * subsum(digit_position, 6, precision);
  double fraction = sum_result - floor_float(sum_result);
  int digit = (fraction * 16.0).toInt();
  String hd = hex_digit(digit);
  return hd;
}

String digits = "";
int i = 1;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (i <= 10) {
    digits = digits + bailey_borwein_plouffe(i, 1000);
    i = i + 1;
  }
  print(digits);
  print(bailey_borwein_plouffe(5, 10000));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
