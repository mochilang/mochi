// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool perfect_square(int _num) {
  if (_num < 0) {
    return false;
  }
  int i = 0;
  while (i * i <= _num) {
    if (i * i == _num) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool perfect_square_binary_search(int n) {
  if (n < 0) {
    return false;
  }
  int left = 0;
  int right = n;
  while (left <= right) {
    int mid = (left + right) ~/ 2;
    int sq = mid * mid;
    if (sq == n) {
    return true;
  }
    if (sq > n) {
    right = mid - 1;
  } else {
    left = mid + 1;
  }
  }
  return false;
}

void main() {
  print((perfect_square(9)).toString());
  print((perfect_square(10)).toString());
  print((perfect_square_binary_search(16)).toString());
  print((perfect_square_binary_search(10)).toString());
  print((perfect_square_binary_search(-1)).toString());
}
