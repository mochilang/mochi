// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<int> odd_sieve(int _num) {
  if (_num <= 2) {
    return ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  if (_num == 3) {
    return [2];
  }
  int size = _num ~/ 2 - 1;
  List<bool> sieve = <bool>[];
  int idx = 0;
  while (idx < size) {
    sieve = [...sieve, true];
    idx = idx + 1;
  }
  int i = 3;
  while (i * i <= _num) {
    int s_idx = i ~/ 2 - 1;
    if ((sieve[s_idx] ?? false)) {
    int j = i * i;
    while (j < _num) {
    int j_idx = j ~/ 2 - 1;
    while (sieve.length <= j_idx) { sieve.add(false); } sieve[j_idx] = false;
    j = j + 2 * i;
  };
  }
    i = i + 2;
  }
  List<int> primes = [2];
  int n = 3;
  int k = 0;
  while (n < _num) {
    if ((sieve[k] ?? false)) {
    primes = [...primes, n];
  }
    n = n + 2;
    k = k + 1;
  }
  return primes;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + odd_sieve(2).join(', ') + "]");
  print("[" + odd_sieve(3).join(', ') + "]");
  print("[" + odd_sieve(10).join(', ') + "]");
  print("[" + odd_sieve(20).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
