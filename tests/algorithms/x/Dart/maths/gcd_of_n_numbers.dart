// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int r = x % y;
    x = y;
    y = r;
  }
  if (x < 0) {
    return -x;
  }
  return x;
}

int get_greatest_common_divisor(List<int> nums) {
  if (nums.length == 0) {
    _error("at least one number is required");
  }
  int g = nums[0];
  if (g <= 0) {
    _error("numbers must be integer and greater than zero");
  }
  int i = 1;
  while (i < nums.length) {
    int n = nums[i];
    if (n <= 0) {
    _error("numbers must be integer and greater than zero");
  }
    g = gcd(g, n);
    i = i + 1;
  }
  return g;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(get_greatest_common_divisor([18, 45])));
  print(_str(get_greatest_common_divisor([23, 37])));
  print(_str(get_greatest_common_divisor([2520, 8350])));
  print(_str(get_greatest_common_divisor([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
