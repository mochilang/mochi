// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> two_sum(List<int> nums, int target) {
  Map<int, int> chk_map = <int, int>{};
  int idx = 0;
  while (idx < nums.length) {
    int val = nums[idx];
    int compl = target - val;
    if (chk_map.containsKey(compl)) {
    return ([(chk_map[compl] ?? 0) - 1, idx] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    chk_map[val] = idx + 1;
    idx = idx + 1;
  }
  return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void main() {
  print((two_sum([2, 7, 11, 15], 9)).toString());
}
