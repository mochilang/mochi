// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool contains_int(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool contains_string(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int count_int(List<int> xs, int x) {
  int cnt = 0;
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

int count_string(List<String> xs, String x) {
  int cnt = 0;
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

List<int> sort_int(List<int> xs) {
  List<int> arr = xs;
  int i = 0;
  while (i < arr.length) {
    int j = i + 1;
    while (j < arr.length) {
    if (arr[j] < arr[i]) {
    int tmp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<String> sort_string(List<String> xs) {
  List<String> arr = xs;
  int i = 0;
  while (i < arr.length) {
    int j = i + 1;
    while (j < arr.length) {
    if (arr[j].compareTo(arr[i]) < 0) {
    String tmp = arr[i];
    while (arr.length <= i) { arr.add(""); } arr[i] = arr[j];
    while (arr.length <= j) { arr.add(""); } arr[j] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<int> mode_int(List<int> lst) {
  if (lst.length == 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> counts = <int>[];
  int i = 0;
  while (i < lst.length) {
    counts = [...counts, count_int(lst, lst[i])];
    i = i + 1;
  }
  int max_count = 0;
  i = 0;
  while (i < counts.length) {
    if (counts[i] > max_count) {
    max_count = counts[i];
  }
    i = i + 1;
  }
  List<int> modes = <int>[];
  i = 0;
  while (i < lst.length) {
    if (counts[i] == max_count) {
    int v = lst[i];
    if (!contains_int(modes, v)) {
    modes = [...modes, v];
  };
  }
    i = i + 1;
  }
  return sort_int(modes);
}

List<String> mode_string(List<String> lst) {
  if (lst.length == 0) {
    return List<String>.from([]);
  }
  List<int> counts = <int>[];
  int i = 0;
  while (i < lst.length) {
    counts = [...counts, count_string(lst, lst[i])];
    i = i + 1;
  }
  int max_count = 0;
  i = 0;
  while (i < counts.length) {
    if (counts[i] > max_count) {
    max_count = counts[i];
  }
    i = i + 1;
  }
  List<String> modes = <String>[];
  i = 0;
  while (i < lst.length) {
    if (counts[i] == max_count) {
    String v = lst[i];
    if (!contains_string(modes, v)) {
    modes = [...modes, v];
  };
  }
    i = i + 1;
  }
  return sort_string(modes);
}

void main() {
  print("[" + mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2]).join(', ') + "]");
  print("[" + mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2]).join(', ') + "]");
  print("[" + mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2]).join(', ') + "]");
  print("[" + mode_string(["x", "y", "y", "z"]).join(', ') + "]");
  print("[" + mode_string(["x", "x", "y", "y", "z"]).join(', ') + "]");
}
