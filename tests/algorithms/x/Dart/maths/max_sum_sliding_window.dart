// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int max_sum_sliding_window(List<int> arr, int k) {
  if (k < 0 || arr.length < k) {
    _error("Invalid Input");
  }
  int idx = 0;
  int current_sum = 0;
  while (idx < k) {
    current_sum = current_sum + arr[idx];
    idx = idx + 1;
  }
  int max_sum = current_sum;
  int i = 0;
  while (i < arr.length - k) {
    current_sum = current_sum - arr[i] + arr[i + k];
    if (current_sum > max_sum) {
    max_sum = current_sum;
  }
    i = i + 1;
  }
  return max_sum;
}

void test_max_sum_sliding_window() {
  List<int> arr1 = [1, 4, 2, 10, 2, 3, 1, 0, 20];
  if (max_sum_sliding_window(arr1, 4) != 24) {
    _error("test1 failed");
  }
  List<int> arr2 = [1, 4, 2, 10, 2, 13, 1, 0, 2];
  if (max_sum_sliding_window(arr2, 4) != 27) {
    _error("test2 failed");
  }
}

void _main() {
  test_max_sum_sliding_window();
  List<int> sample = [1, 4, 2, 10, 2, 3, 1, 0, 20];
  print(_str(max_sum_sliding_window(sample, 4)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
