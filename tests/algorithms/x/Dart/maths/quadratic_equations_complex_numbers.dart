// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class Complex {
  double re;
  double im;
  Complex({required this.re, required this.im});
}

Complex add(Complex a, Complex b) {
  return Complex(re: a.re + b.re, im: a.im + b.im);
}

Complex sub(Complex a, Complex b) {
  return Complex(re: a.re - b.re, im: a.im - b.im);
}

Complex div_real(Complex a, double r) {
  return Complex(re: a.re / r, im: a.im / r);
}

double sqrt_newton(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

Complex sqrt_to_complex(double d) {
  if (d >= 0.0) {
    return Complex(re: sqrt_newton(d), im: 0.0);
  }
  return Complex(re: 0.0, im: sqrt_newton(-d));
}

List<Complex> quadratic_roots(double a, double b, double c) {
  if (a == 0.0) {
    print("ValueError: coefficient 'a' must not be zero");
    return List<Complex>.from([]);
  }
  double delta = b * b - 4.0 * a * c;
  Complex sqrt_d = sqrt_to_complex(delta);
  Complex minus_b = Complex(re: -b, im: 0.0);
  double two_a = 2.0 * a;
  Complex root1 = div_real(add(minus_b, sqrt_d), two_a);
  Complex root2 = div_real(sub(minus_b, sqrt_d), two_a);
  return [root1, root2];
}

String root_str(Complex r) {
  if (r.im == 0.0) {
    return _str(r.re);
  }
  String s = _str(r.re);
  if (r.im >= 0.0) {
    s = s + "+" + _str(r.im) + "i";
  } else {
    s = s + _str(r.im) + "i";
  }
  return s;
}

void _main() {
  List<Complex> roots = quadratic_roots(5.0, 6.0, 1.0);
  if (roots.length == 2) {
    print("The solutions are: " + root_str(roots[0]) + " and " + root_str(roots[1]));
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
