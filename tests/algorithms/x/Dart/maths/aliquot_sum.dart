// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int aliquot_sum(int n) {
  if (n <= 0) {
    throw Exception("Input must be positive");
  }
  int total = 0;
  int divisor = 1;
  while (divisor <= n ~/ 2) {
    if (n % divisor == 0) {
    total = total + divisor;
  }
    divisor = divisor + 1;
  }
  return total;
}

void main() {
  print((aliquot_sum(15)).toString());
  print((aliquot_sum(6)).toString());
  print((aliquot_sum(12)).toString());
  print((aliquot_sum(1)).toString());
  print((aliquot_sum(19)).toString());
}
