// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String pow_string(int base, int exp) {
  if (exp >= 0) {
    int res = 1;
    int i = 0;
    while (i < exp) {
    res = res * base;
    i = i + 1;
  };
    return (res).toString();
  }
  int e = -exp;
  double res = 1.0;
  double b = base * 1.0;
  int i = 0;
  while (i < e) {
    res = res * b;
    i = i + 1;
  }
  double value = 1.0 / res;
  return (value).toString();
}

List<String> p_series(int nth_term, int power) {
  List<String> series = <String>[];
  if (nth_term <= 0) {
    return series;
  }
  int i = 1;
  while (i <= nth_term) {
    if (i == 1) {
    series = [...series, "1"];
  } else {
    series = [...series, "1 / " + pow_string(i, power)];
  }
    i = i + 1;
  }
  return series;
}

void main() {
  print("[" + p_series(5, 2).join(', ') + "]");
  print("[" + p_series(-5, 2).join(', ') + "]");
  print("[" + p_series(5, -2).join(', ') + "]");
  print("[" + p_series(0, 0).join(', ') + "]");
  print("[" + p_series(1, 1).join(', ') + "]");
}
