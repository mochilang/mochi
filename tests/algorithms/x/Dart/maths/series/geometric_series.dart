// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<double> geometric_series(double nth_term, double start_term_a, double common_ratio_r) {
  int n = nth_term as int;
  if (n <= 0 || start_term_a == 0.0 || common_ratio_r == 0.0) {
    return List<double>.from([]);
  }
  List<double> series = <double>[];
  double current = start_term_a;
  int i = 0;
  while (i < n) {
    series = [...series, current];
    current = current * common_ratio_r;
    i = i + 1;
  }
  return series;
}

void main() {
  print("[" + geometric_series(4.0, 2.0, 2.0).join(', ') + "]");
  print("[" + geometric_series(4.0, 2.0, -2.0).join(', ') + "]");
  print("[" + geometric_series(4.0, -2.0, 2.0).join(', ') + "]");
  print("[" + geometric_series(-4.0, 2.0, 2.0).join(', ') + "]");
  print("[" + geometric_series(0.0, 100.0, 500.0).join(', ') + "]");
  print("[" + geometric_series(1.0, 1.0, 1.0).join(', ') + "]");
}
