// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

bool is_harmonic_series(List<double> series) {
  if (series.length == 0) {
    _error("Input list must be a non empty list");
  }
  if (series.length == 1) {
    if (series[0] == 0.0) {
    _error("Input series cannot have 0 as an element");
  };
    return true;
  }
  List<double> rec_series = <double>[];
  int i = 0;
  while (i < series.length) {
    double val = series[i];
    if (val == 0.0) {
    _error("Input series cannot have 0 as an element");
  }
    rec_series = [...rec_series, 1.0 / val];
    i = i + 1;
  }
  double common_diff = rec_series[1] - rec_series[0];
  int idx = 2;
  while (idx < rec_series.length) {
    if (rec_series[idx] - rec_series[idx - 1] != common_diff) {
    return false;
  }
    idx = idx + 1;
  }
  return true;
}

double harmonic_mean(List<double> series) {
  if (series.length == 0) {
    _error("Input list must be a non empty list");
  }
  double total = 0.0;
  int i = 0;
  while (i < series.length) {
    total = total + 1.0 / series[i];
    i = i + 1;
  }
  return series.length.toDouble() / total;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(is_harmonic_series([1.0, 2.0 / 3.0, 1.0 / 2.0, 2.0 / 5.0, 1.0 / 3.0]));
  print(is_harmonic_series([1.0, 2.0 / 3.0, 2.0 / 5.0, 1.0 / 3.0]));
  print(harmonic_mean([1.0, 4.0, 4.0]));
  print(harmonic_mean([3.0, 6.0, 9.0, 12.0]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
