// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_harmonic_series(List<double> series) {
  if (series.length == 0) {
    throw Exception("Input list must be a non empty list");
  }
  if (series.length == 1) {
    if (series[0] == 0.0) {
    throw Exception("Input series cannot have 0 as an element");
  };
    return true;
  }
  List<double> rec_series = <double>[];
  int i = 0;
  while (i < series.length) {
    double val = series[i];
    if (val == 0.0) {
    throw Exception("Input series cannot have 0 as an element");
  }
    rec_series = [...rec_series, 1.0 / val];
    i = i + 1;
  }
  double common_diff = rec_series[1] - rec_series[0];
  int idx = 2;
  while (idx < rec_series.length) {
    if (rec_series[idx] - rec_series[idx - 1] != common_diff) {
    return false;
  }
    idx = idx + 1;
  }
  return true;
}

double harmonic_mean(List<double> series) {
  if (series.length == 0) {
    throw Exception("Input list must be a non empty list");
  }
  double total = 0.0;
  int i = 0;
  while (i < series.length) {
    total = total + 1.0 / series[i];
    i = i + 1;
  }
  return (series.length as double) / total;
}

void main() {
  print(is_harmonic_series([1.0, 2.0 / 3.0, 1.0 / 2.0, 2.0 / 5.0, 1.0 / 3.0]));
  print(is_harmonic_series([1.0, 2.0 / 3.0, 2.0 / 5.0, 1.0 / 3.0]));
  print(harmonic_mean([1.0, 4.0, 4.0]));
  print(harmonic_mean([3.0, 6.0, 9.0, 12.0]));
}
