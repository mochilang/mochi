// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

bool is_geometric_series(List<double> series) {
  if (series.length == 0) {
    _error("Input list must be a non empty list");
  }
  if (series.length == 1) {
    return true;
  }
  if (series[0] == 0.0) {
    return false;
  }
  double ratio = series[1] / series[0];
  int i = 0;
  while (i < series.length - 1) {
    if (series[i] == 0.0) {
    return false;
  }
    if (series[i + 1] / series[i] != ratio) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

double geometric_mean(List<double> series) {
  if (series.length == 0) {
    _error("Input list must be a non empty list");
  }
  double product = 1.0;
  int i = 0;
  while (i < series.length) {
    product = product * series[i];
    i = i + 1;
  }
  int n = series.length;
  return nth_root(product, n);
}

double pow_float(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double nth_root(double value, int n) {
  if (value == 0.0) {
    return 0.0;
  }
  double low = 0.0;
  double high = value;
  if (value < 1.0) {
    high = 1.0;
  }
  double mid = (low + high) / 2.0;
  int i = 0;
  while (i < 40) {
    double mp = pow_float(mid, n);
    if (mp > value) {
    high = mid;
  } else {
    low = mid;
  }
    mid = (low + high) / 2.0;
    i = i + 1;
  }
  return mid;
}

void test_geometric() {
  List<double> a = [2.0, 4.0, 8.0];
  if (!is_geometric_series(a)) {
    _error("expected geometric series");
  }
  List<double> b = [1.0, 2.0, 3.0];
  if (is_geometric_series(b)) {
    _error("expected non geometric series");
  }
}

void _main() {
  test_geometric();
  print(geometric_mean([2.0, 4.0, 8.0]));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
