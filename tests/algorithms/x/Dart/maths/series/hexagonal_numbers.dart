// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<int> hexagonal_numbers(int length) {
  if (length <= 0) {
    _error("Length must be a positive integer.");
  }
  List<int> res = <int>[];
  int n = 0;
  while (n < length) {
    res = [...res, n * (2 * n - 1)];
    n = n + 1;
  }
  return res;
}

void test_hexagonal_numbers() {
  List<int> expected5 = [0, 1, 6, 15, 28];
  List<int> result5 = hexagonal_numbers(5);
  if (!_listEq(result5, expected5)) {
    _error("hexagonal_numbers(5) failed");
  }
  List<int> expected10 = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153];
  List<int> result10 = hexagonal_numbers(10);
  if (!_listEq(result10, expected10)) {
    _error("hexagonal_numbers(10) failed");
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  test_hexagonal_numbers();
  print(_str(hexagonal_numbers(5)));
  print(_str(hexagonal_numbers(10)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

