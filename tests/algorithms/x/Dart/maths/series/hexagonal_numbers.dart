// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> hexagonal_numbers(int length) {
  if (length <= 0) {
    throw Exception("Length must be a positive integer.");
  }
  List<int> res = <int>[];
  int n = 0;
  while (n < length) {
    res = [...res, n * (2 * n - 1)];
    n = n + 1;
  }
  return res;
}

void test_hexagonal_numbers() {
  List<int> expected5 = [0, 1, 6, 15, 28];
  List<int> result5 = hexagonal_numbers(5);
  if (jsonEncode(result5) != jsonEncode(expected5)) {
    throw Exception("hexagonal_numbers(5) failed");
  }
  List<int> expected10 = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153];
  List<int> result10 = hexagonal_numbers(10);
  if (jsonEncode(result10) != jsonEncode(expected10)) {
    throw Exception("hexagonal_numbers(10) failed");
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  test_hexagonal_numbers();
  print(_str(hexagonal_numbers(5)));
  print(_str(hexagonal_numbers(10)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
