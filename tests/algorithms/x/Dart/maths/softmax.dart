// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double exp_approx(double x) {
  double term = 1.0;
  double sum = 1.0;
  int i = 1;
  while (i < 20) {
    term = term * x / (i as double);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

List<double> softmax(List<double> vec) {
  List<double> exps = <double>[];
  int i = 0;
  while (i < vec.length) {
    exps = [...exps, exp_approx(vec[i])];
    i = i + 1;
  }
  double total = 0.0;
  i = 0;
  while (i < exps.length) {
    total = total + exps[i];
    i = i + 1;
  }
  List<double> result = <double>[];
  i = 0;
  while (i < exps.length) {
    result = [...result, exps[i] / total];
    i = i + 1;
  }
  return result;
}

double abs_val(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

bool approx_equal(double a, double b) {
  return abs_val(a - b) < 0.0001;
}

void test_softmax() {
  List<double> s1 = softmax([1.0, 2.0, 3.0, 4.0]);
  double sum1 = 0.0;
  int i = 0;
  while (i < s1.length) {
    sum1 = sum1 + s1[i];
    i = i + 1;
  }
  if (!approx_equal(sum1, 1.0)) {
    throw Exception("sum test failed");
  }
  List<double> s2 = softmax([5.0, 5.0]);
  if (!(approx_equal(s2[0], 0.5) && approx_equal(s2[1], 0.5))) {
    throw Exception("equal elements test failed");
  }
  List<double> s3 = softmax([0.0]);
  if (!approx_equal(s3[0], 1.0)) {
    throw Exception("zero vector test failed");
  }
}

void _main() {
  test_softmax();
  print((softmax([1.0, 2.0, 3.0, 4.0])).toString());
}

void _start() {
  _main();
}

void main() => _start();
