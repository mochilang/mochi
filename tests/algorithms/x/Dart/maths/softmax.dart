// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double exp_approx(double x) {
  double term = 1.0;
  double sum = 1.0;
  int i = 1;
  while (i < 20) {
    term = term * x / i.toDouble();
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

List<double> softmax(List<double> vec) {
  List<double> exps = <double>[];
  int i = 0;
  while (i < vec.length) {
    exps = [...exps, exp_approx(vec[i])];
    i = i + 1;
  }
  double total = 0.0;
  i = 0;
  while (i < exps.length) {
    total = total + exps[i];
    i = i + 1;
  }
  List<double> result = <double>[];
  i = 0;
  while (i < exps.length) {
    result = [...result, exps[i] / total];
    i = i + 1;
  }
  return result;
}

double abs_val(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

bool approx_equal(double a, double b) {
  return abs_val(a - b) < 0.0001;
}

void test_softmax() {
  List<double> s1 = softmax([1.0, 2.0, 3.0, 4.0]);
  double sum1 = 0.0;
  int i = 0;
  while (i < s1.length) {
    sum1 = sum1 + s1[i];
    i = i + 1;
  }
  if (!approx_equal(sum1, 1.0)) {
    _error("sum test failed");
  }
  List<double> s2 = softmax([5.0, 5.0]);
  if (!(approx_equal(s2[0], 0.5) && approx_equal(s2[1], 0.5))) {
    _error("equal elements test failed");
  }
  List<double> s3 = softmax([0.0]);
  if (!approx_equal(s3[0], 1.0)) {
    _error("zero vector test failed");
  }
}

void _main() {
  test_softmax();
  print(_str(softmax([1.0, 2.0, 3.0, 4.0])));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
