// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double find_min_iterative(List<double> nums) {
  if (nums.length == 0) {
    _error("find_min_iterative() arg is an empty sequence");
  }
  double min_num = nums[0];
  int i = 0;
  while (i < nums.length) {
    double _num = nums[i];
    if (_num < min_num) {
    min_num = _num;
  }
    i = i + 1;
  }
  return min_num;
}

double find_min_recursive(List<double> nums, int left, int right) {
  int n = nums.length;
  if (n == 0) {
    _error("find_min_recursive() arg is an empty sequence");
  }
  if (left >= n || left < 0 - n || right >= n || right < 0 - n) {
    _error("list index out of range");
  }
  int l = left;
  int r = right;
  if (l < 0) {
    l = n + l;
  }
  if (r < 0) {
    r = n + r;
  }
  if (l == r) {
    return nums[l];
  }
  int mid = (l + r) ~/ 2;
  double left_min = find_min_recursive(nums, l, mid);
  double right_min = find_min_recursive(nums, mid + 1, r);
  if (left_min <= right_min) {
    return left_min;
  }
  return right_min;
}

void test_find_min() {
  List<double> a = [3.0, 2.0, 1.0];
  if (find_min_iterative(a) != 1.0) {
    _error("iterative test1 failed");
  }
  if (find_min_recursive(a, 0, a.length - 1) != 1.0) {
    _error("recursive test1 failed");
  }
  List<double> b = [-3.0, -2.0, -1.0];
  if (find_min_iterative(b) != -3.0) {
    _error("iterative test2 failed");
  }
  if (find_min_recursive(b, 0, b.length - 1) != -3.0) {
    _error("recursive test2 failed");
  }
  List<double> c = [3.0, -3.0, 0.0];
  if (find_min_iterative(c) != -3.0) {
    _error("iterative test3 failed");
  }
  if (find_min_recursive(c, 0, c.length - 1) != -3.0) {
    _error("recursive test3 failed");
  }
  List<double> d = [1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0];
  if (find_min_recursive(d, 0 - d.length, 0 - 1) != 1.0) {
    _error("negative index test failed");
  }
}

void _main() {
  test_find_min();
  List<double> sample = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0];
  print(_str(find_min_iterative(sample)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
