// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class Coeffs {
  int x;
  int y;
  Coeffs({required this.x, required this.y});
}

int abs_val(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

Coeffs extended_euclidean_algorithm(int a, int b) {
  if (abs_val(a) == 1) {
    return Coeffs(x: a, y: 0);
  }
  if (abs_val(b) == 1) {
    return Coeffs(x: 0, y: b);
  }
  int old_remainder = a;
  int remainder = b;
  int old_coeff_a = 1;
  int coeff_a = 0;
  int old_coeff_b = 0;
  int coeff_b = 1;
  while (remainder != 0) {
    int quotient = old_remainder ~/ remainder;
    int temp_remainder = old_remainder - quotient * remainder;
    old_remainder = remainder;
    remainder = temp_remainder;
    int temp_a = old_coeff_a - quotient * coeff_a;
    old_coeff_a = coeff_a;
    coeff_a = temp_a;
    int temp_b = old_coeff_b - quotient * coeff_b;
    old_coeff_b = coeff_b;
    coeff_b = temp_b;
  }
  if (a < 0) {
    old_coeff_a = -old_coeff_a;
  }
  if (b < 0) {
    old_coeff_b = -old_coeff_b;
  }
  return Coeffs(x: old_coeff_a, y: old_coeff_b);
}

void test_extended_euclidean_algorithm() {
  Coeffs r1 = extended_euclidean_algorithm(1, 24);
  if (r1.x != 1 || r1.y != 0) {
    _error("test1 failed");
  }
  Coeffs r2 = extended_euclidean_algorithm(8, 14);
  if (r2.x != 2 || r2.y != -1) {
    _error("test2 failed");
  }
  Coeffs r3 = extended_euclidean_algorithm(240, 46);
  if (r3.x != -9 || r3.y != 47) {
    _error("test3 failed");
  }
  Coeffs r4 = extended_euclidean_algorithm(1, -4);
  if (r4.x != 1 || r4.y != 0) {
    _error("test4 failed");
  }
  Coeffs r5 = extended_euclidean_algorithm(-2, -4);
  if (r5.x != -1 || r5.y != 0) {
    _error("test5 failed");
  }
  Coeffs r6 = extended_euclidean_algorithm(0, -4);
  if (r6.x != 0 || r6.y != -1) {
    _error("test6 failed");
  }
  Coeffs r7 = extended_euclidean_algorithm(2, 0);
  if (r7.x != 1 || r7.y != 0) {
    _error("test7 failed");
  }
}

void _main() {
  test_extended_euclidean_algorithm();
  Coeffs res = extended_euclidean_algorithm(240, 46);
  print("(" + _str(res.x) + ", " + _str(res.y) + ")");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
