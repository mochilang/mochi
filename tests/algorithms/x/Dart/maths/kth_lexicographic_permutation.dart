// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<int> remove_at(List<int> xs, int idx) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> kth_permutation(int k, int n) {
  if (n <= 0) {
    _error("n must be positive");
  }
  List<int> factorials = [1];
  int i = 2;
  while (i < n) {
    factorials = [...factorials, factorials[factorials.length - 1] * i];
    i = i + 1;
  }
  int total = factorials[factorials.length - 1] * n;
  if (k < 0 || k >= total) {
    _error("k out of bounds");
  }
  List<int> elements = <int>[];
  int e = 0;
  while (e < n) {
    elements = [...elements, e];
    e = e + 1;
  }
  List<int> permutation = <int>[];
  int idx = factorials.length - 1;
  while (idx >= 0) {
    int factorial = factorials[idx];
    int number = k ~/ factorial;
    k = k % factorial;
    permutation = [...permutation, elements[number]];
    elements = remove_at(elements, number);
    idx = idx - 1;
  }
  permutation = [...permutation, elements[0]];
  return permutation;
}

bool list_equal(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

String list_to_string(List<int> xs) {
  if (xs.length == 0) {
    return "[]";
  }
  String s = "[" + _str(xs[0]);
  int i = 1;
  while (i < xs.length) {
    s = s + ", " + _str(xs[i]);
    i = i + 1;
  }
  s = s + "]";
  return s;
}

void test_kth_permutation() {
  List<int> expected1 = [0, 1, 2, 3, 4];
  List<int> res1 = kth_permutation(0, 5);
  if (!list_equal(res1, expected1)) {
    _error("test case 1 failed");
  }
  List<int> expected2 = [1, 3, 0, 2];
  List<int> res2 = kth_permutation(10, 4);
  if (!list_equal(res2, expected2)) {
    _error("test case 2 failed");
  }
}

void _main() {
  test_kth_permutation();
  List<int> res = kth_permutation(10, 4);
  print(list_to_string(res));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
