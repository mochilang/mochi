// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class TextCounts {
  Map<String, int> single;
  Map<String, int> double;
  TextCounts({required this.single, required this.double});
}

double log2(double x) {
  double k = 0.0;
  double v = x;
  while (v >= 2.0) {
    v = v / 2.0;
    k = k + 1.0;
  }
  while (v < 1.0) {
    v = v * 2.0;
    k = k - 1.0;
  }
  double z = (v - 1.0) / (v + 1.0);
  double zpow = z;
  double sum = z;
  int i = 3;
  while (i <= 9) {
    zpow = zpow * z * z;
    sum = sum + zpow / i.toDouble();
    i = i + 2;
  }
  double ln2 = 0.6931471805599453;
  return k + 2.0 * sum / ln2;
}

TextCounts analyze_text(String text) {
  Map<String, int> single = <String, int>{};
  Map<String, int> double = <String, int>{};
  int n = text.length;
  if (n == 0) {
    return TextCounts(single: single, double: double);
  }
  String last = _substr(text, n - 1, n);
  if (single.containsKey(last)) {
    single[last] = (single[last] ?? 0) + 1;
  } else {
    single[last] = 1;
  }
  String first = _substr(text, 0, 1);
  String pair0 = " " + first;
  double[pair0] = 1;
  int i = 0;
  while (i < n - 1) {
    String ch = _substr(text, i, i + 1);
    if (single.containsKey(ch)) {
    single[ch] = (single[ch] ?? 0) + 1;
  } else {
    single[ch] = 1;
  }
    String seq = _substr(text, i, i + 2);
    if (double.containsKey(seq)) {
    double[seq] = (double[seq] ?? 0) + 1;
  } else {
    double[seq] = 1;
  }
    i = i + 1;
  }
  return TextCounts(single: single, double: double);
}

int round_to_int(double x) {
  if (x < 0.0) {
    return (x - 0.5).toInt();
  }
  return (x + 0.5).toInt();
}

void calculate_entropy(String text) {
  TextCounts counts = analyze_text(text);
  String alphas = " abcdefghijklmnopqrstuvwxyz";
  int total1 = 0;
  for (String ch in counts.single.keys) {
    total1 = total1 + (counts.single[ch] ?? 0);
  }
  double h1 = 0.0;
  int i = 0;
  while (i < alphas.length) {
    String ch = _substr(alphas, i, i + 1);
    if (counts.single.containsKey(ch)) {
    double prob = counts.single[ch]!.toDouble() / total1.toDouble();
    h1 = h1 + prob * log2(prob);
  }
    i = i + 1;
  }
  double first_entropy = -h1;
  print(_str(round_to_int(first_entropy)) + ".0");
  int total2 = 0;
  for (String seq in counts.double.keys) {
    total2 = total2 + (counts.double[seq] ?? 0);
  }
  double h2 = 0.0;
  int a0 = 0;
  while (a0 < alphas.length) {
    String ch0 = _substr(alphas, a0, a0 + 1);
    int a1 = 0;
    while (a1 < alphas.length) {
    String ch1 = _substr(alphas, a1, a1 + 1);
    String seq = ch0 + ch1;
    if (counts.double.containsKey(seq)) {
    double prob = counts.double[seq]!.toDouble() / total2.toDouble();
    h2 = h2 + prob * log2(prob);
  }
    a1 = a1 + 1;
  }
    a0 = a0 + 1;
  }
  double second_entropy = -h2;
  print(_str(round_to_int(second_entropy)) + ".0");
  double diff = second_entropy - first_entropy;
  print(_str(round_to_int(diff)) + ".0");
}

String text1 = "Behind Winston's back the voice " + "from the telescreen was still " + "babbling and the overfulfilment";
String text3 = "Had repulsive dashwoods suspicion sincerity but advantage now him. " + "Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. " + "You greatest jointure saw horrible. He private he on be imagine " + "suppose. Fertile beloved evident through no service elderly is. Blind " + "there if every no so at. Own neglected you preferred way sincerity " + "delivered his attempted. To of message cottage windows do besides " + "against uncivil.  Delightful unreserved impossible few estimating " + "men favourable see entreaties. She propriety immediate was improving. " + "He or entrance humoured likewise moderate. Much nor game son say " + "feel. Fat make met can must form into gate. Me we offending prevailed " + "discovery.";
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  calculate_entropy(text1);
  calculate_entropy(text3);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
