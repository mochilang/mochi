// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int lcg_seed = 1;
int lcg_rand() {
  lcg_seed = (lcg_seed * 1103515245 + 12345) % 2147483648;
  return lcg_seed;
}

int roll() {
  double rv = lcg_rand() as double;
  double r = rv * 6.0 / 2147483648.0;
  return 1 + (r as int);
}

double round2(double x) {
  double y = x * 100.0 + 0.5;
  int z = y as int;
  return (z as double) / 100.0;
}

List<double> throw_dice(int num_throws, int num_dice) {
  List<int> count_of_sum = <int>[];
  int max_sum = num_dice * 6 + 1;
  int i = 0;
  while (i < max_sum) {
    count_of_sum = [...count_of_sum, 0];
    i = i + 1;
  }
  int t = 0;
  while (t < num_throws) {
    int s = 0;
    int d = 0;
    while (d < num_dice) {
    s = s + roll();
    d = d + 1;
  }
    while (count_of_sum.length <= s) { count_of_sum.add(0); } count_of_sum[s] = count_of_sum[s] + 1;
    t = t + 1;
  }
  List<double> probability = <double>[];
  i = num_dice;
  while (i < max_sum) {
    double p = (count_of_sum[i] as double) * 100.0 / (num_throws as double);
    probability = [...probability, round2(p)];
    i = i + 1;
  }
  return probability;
}

void _main() {
  lcg_seed = 1;
  List<double> result = throw_dice(10000, 2);
  print((result).toString());
}

void _start() {
  _main();
}

void main() => _start();
