// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int lcg_seed = 1;
int lcg_rand() {
  lcg_seed = (lcg_seed * 1103515245 + 12345) % 2147483648;
  return lcg_seed;
}

int roll() {
  double rv = lcg_rand().toDouble();
  double r = rv * 6.0 / 2147483648.0;
  return 1 + r.toInt();
}

double round2(double x) {
  double y = x * 100.0 + 0.5;
  dynamic z = y.toInt();
  return z.toDouble() / 100.0;
}

List<double> throw_dice(int num_throws, int num_dice) {
  List<int> count_of_sum = <int>[];
  int max_sum = num_dice * 6 + 1;
  int i = 0;
  while (i < max_sum) {
    count_of_sum = [...count_of_sum, 0];
    i = i + 1;
  }
  int t = 0;
  while (t < num_throws) {
    int s = 0;
    int d = 0;
    while (d < num_dice) {
    s = s + roll();
    d = d + 1;
  }
    while (count_of_sum.length <= s) { count_of_sum.add(0); } count_of_sum[s] = count_of_sum[s] + 1;
    t = t + 1;
  }
  List<double> probability = <double>[];
  i = num_dice;
  while (i < max_sum) {
    double p = count_of_sum[i].toDouble() * 100.0 / num_throws.toDouble();
    probability = [...probability, round2(p)];
    i = i + 1;
  }
  return probability;
}

void _main() {
  lcg_seed = 1;
  List<double> result = throw_dice(10000, 2);
  print(_str(result));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
