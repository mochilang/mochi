// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> slow_primes(int max_n) {
  List<int> result = <int>[];
  int i = 2;
  while (i <= max_n) {
    int j = 2;
    bool is_prime = true;
    while (j < i) {
    if (i % j == 0) {
    is_prime = false;
    break;
  }
    j = j + 1;
  }
    if (is_prime) {
    result = [...result, i];
  }
    i = i + 1;
  }
  return result;
}

List<int> primes(int max_n) {
  List<int> result = <int>[];
  int i = 2;
  while (i <= max_n) {
    int j = 2;
    bool is_prime = true;
    while (j * j <= i) {
    if (i % j == 0) {
    is_prime = false;
    break;
  }
    j = j + 1;
  }
    if (is_prime) {
    result = [...result, i];
  }
    i = i + 1;
  }
  return result;
}

List<int> fast_primes(int max_n) {
  List<int> result = <int>[];
  if (max_n >= 2) {
    result = [...result, 2];
  }
  int i = 3;
  while (i <= max_n) {
    int j = 3;
    bool is_prime = true;
    while (j * j <= i) {
    if (i % j == 0) {
    is_prime = false;
    break;
  }
    j = j + 2;
  }
    if (is_prime) {
    result = [...result, i];
  }
    i = i + 2;
  }
  return result;
}

void main() {
  print((slow_primes(25)).toString());
  print((primes(25)).toString());
  print((fast_primes(25)).toString());
}
