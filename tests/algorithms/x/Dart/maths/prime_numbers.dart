// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

List<int> slow_primes(int max_n) {
  List<int> result = <int>[];
  int i = 2;
  while (i <= max_n) {
    int j = 2;
    bool is_prime = true;
    while (j < i) {
    if (i % j == 0) {
    is_prime = false;
    break;
  }
    j = j + 1;
  }
    if (is_prime) {
    result = [...result, i];
  }
    i = i + 1;
  }
  return result;
}

List<int> primes(int max_n) {
  List<int> result = <int>[];
  int i = 2;
  while (i <= max_n) {
    int j = 2;
    bool is_prime = true;
    while (j * j <= i) {
    if (i % j == 0) {
    is_prime = false;
    break;
  }
    j = j + 1;
  }
    if (is_prime) {
    result = [...result, i];
  }
    i = i + 1;
  }
  return result;
}

List<int> fast_primes(int max_n) {
  List<int> result = <int>[];
  if (max_n >= 2) {
    result = [...result, 2];
  }
  int i = 3;
  while (i <= max_n) {
    int j = 3;
    bool is_prime = true;
    while (j * j <= i) {
    if (i % j == 0) {
    is_prime = false;
    break;
  }
    j = j + 2;
  }
    if (is_prime) {
    result = [...result, i];
  }
    i = i + 2;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(slow_primes(25)));
  print(_str(primes(25)));
  print(_str(fast_primes(25)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
