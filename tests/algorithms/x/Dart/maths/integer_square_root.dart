// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int integer_square_root(int _num) {
  if (_num < 0) {
    throw Exception("num must be non-negative integer");
  }
  if (_num < 2) {
    return _num;
  }
  int left_bound = 0;
  int right_bound = _num ~/ 2;
  while (left_bound <= right_bound) {
    int mid = left_bound + (right_bound - left_bound) ~/ 2;
    int mid_squared = mid * mid;
    if (mid_squared == _num) {
    return mid;
  }
    if (mid_squared < _num) {
    left_bound = mid + 1;
  } else {
    right_bound = mid - 1;
  }
  }
  return right_bound;
}

void test_integer_square_root() {
  List<int> expected = [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4];
  int i = 0;
  while (i < expected.length) {
    int result = integer_square_root(i);
    if (result != expected[i]) {
    throw Exception("test failed at index " + (i).toString());
  }
    i = i + 1;
  }
  if (integer_square_root(625) != 25) {
    throw Exception("sqrt of 625 incorrect");
  }
  if (integer_square_root(2147483647) != 46340) {
    throw Exception("sqrt of max int incorrect");
  }
}

void _main() {
  test_integer_square_root();
  print((integer_square_root(625)).toString());
}

void _start() {
  _main();
}

void main() => _start();
