// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int integer_square_root(int _num) {
  if (_num < 0) {
    _error("num must be non-negative integer");
  }
  if (_num < 2) {
    return _num;
  }
  int left_bound = 0;
  int right_bound = _num ~/ 2;
  while (left_bound <= right_bound) {
    int mid = left_bound + (right_bound - left_bound) ~/ 2;
    int mid_squared = mid * mid;
    if (mid_squared == _num) {
    return mid;
  }
    if (mid_squared < _num) {
    left_bound = mid + 1;
  } else {
    right_bound = mid - 1;
  }
  }
  return right_bound;
}

void test_integer_square_root() {
  List<int> expected = [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4];
  int i = 0;
  while (i < expected.length) {
    int result = integer_square_root(i);
    if (result != expected[i]) {
    _error("test failed at index " + _str(i));
  }
    i = i + 1;
  }
  if (integer_square_root(625) != 25) {
    _error("sqrt of 625 incorrect");
  }
  if (integer_square_root(2147483647) != 46340) {
    _error("sqrt of max int incorrect");
  }
}

void _main() {
  test_integer_square_root();
  print(_str(integer_square_root(625)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
