// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double abs_val(double _num) {
  if (_num < 0.0) {
    return -_num;
  }
  return _num;
}

bool approx_equal(double a, double b, double eps) {
  return abs_val(a - b) < eps;
}

double dodecahedron_surface_area(int edge) {
  if (edge <= 0) {
    _error("Length must be a positive.");
  }
  double term = sqrtApprox(25.0 + 10.0 * sqrtApprox(5.0));
  double e = edge.toDouble();
  return 3.0 * term * e * e;
}

double dodecahedron_volume(int edge) {
  if (edge <= 0) {
    _error("Length must be a positive.");
  }
  double term = (15.0 + 7.0 * sqrtApprox(5.0)) / 4.0;
  double e = edge.toDouble();
  return term * e * e * e;
}

void test_dodecahedron() {
  if (!approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001)) {
    _error("surface area 5 failed");
  }
  if (!approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001)) {
    _error("surface area 10 failed");
  }
  if (!approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001)) {
    _error("volume 5 failed");
  }
  if (!approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001)) {
    _error("volume 10 failed");
  }
}

void _main() {
  test_dodecahedron();
  print(dodecahedron_surface_area(5));
  print(dodecahedron_volume(5));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
