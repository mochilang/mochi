// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int MAX = 4294967296;
int HALF = 2147483648;
int to_unsigned(int n) {
  if (n < 0) {
    return MAX + n;
  }
  return n;
}

int from_unsigned(int n) {
  if (n >= HALF) {
    return n - MAX;
  }
  return n;
}

int bit_and(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  int i = 0;
  while (i < 32) {
    if (x % 2 == 1 && y % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
    i = i + 1;
  }
  return res;
}

int bit_xor(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  int i = 0;
  while (i < 32) {
    int abit = x % 2;
    int bbit = y % 2;
    if ((abit + bbit) % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
    i = i + 1;
  }
  return res;
}

int lshift1(int _num) {
  return _num * 2 % MAX;
}

int add(int a, int b) {
  int first = to_unsigned(a);
  int second = to_unsigned(b);
  while (second != 0) {
    int carry = bit_and(first, second);
    first = bit_xor(first, second);
    second = lshift1(carry);
  }
  int result = from_unsigned(first);
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(add(3, 5)));
  print(_str(add(13, 5)));
  print(_str(add(-7, 2)));
  print(_str(add(0, -7)));
  print(_str(add(-321, 0)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
