// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<double> bubble_sort(List<double> nums) {
  List<double> arr = <double>[];
  int i = 0;
  while (i < nums.length) {
    arr = [...arr, nums[i]];
    i = i + 1;
  }
  int n = arr.length;
  int a = 0;
  while (a < n) {
    int b = 0;
    while (b < n - a - 1) {
    if (arr[b] > arr[b + 1]) {
    double temp = arr[b];
    while (arr.length <= b) { arr.add(0); } arr[b] = arr[b + 1];
    while (arr.length <= b + 1) { arr.add(0); } arr[b + 1] = temp;
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return arr;
}

double find_median(List<double> nums) {
  int length = nums.length;
  int div = length ~/ 2;
  int mod = length % 2;
  if (mod != 0) {
    return nums[div];
  }
  return (nums[div] + nums[div - 1]) / 2.0;
}

double interquartile_range(List<double> nums) {
  if (nums.length == 0) {
    _error("The list is empty. Provide a non-empty list.");
  }
  List<double> sorted = bubble_sort(nums);
  int length = sorted.length;
  int div = length ~/ 2;
  int mod = length % 2;
  List<double> lower = <double>[];
  int i = 0;
  while (i < div) {
    lower = [...lower, sorted[i]];
    i = i + 1;
  }
  List<double> upper = <double>[];
  int j = div + mod;
  while (j < length) {
    upper = [...upper, sorted[j]];
    j = j + 1;
  }
  double q1 = find_median(lower);
  double q3 = find_median(upper);
  return q3 - q1;
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

bool float_equal(double a, double b) {
  double diff = absf(a - b);
  return diff < 0.0000001;
}

void test_interquartile_range() {
  if (!float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0)) {
    _error("interquartile_range case1 failed");
  }
  if (!float_equal(interquartile_range(List<double>.from([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0])), 17.0)) {
    _error("interquartile_range case2 failed");
  }
  if (!float_equal(interquartile_range(List<double>.from([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1])), 17.2)) {
    _error("interquartile_range case3 failed");
  }
  if (!float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0)) {
    _error("interquartile_range case4 failed");
  }
}

void _main() {
  test_interquartile_range();
  print(_str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0])));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
