// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int ceil_float(double x) {
  dynamic i = x.toInt();
  if (x > i.toDouble()) {
    return i + 1;
  }
  return i;
}

double exp_approx(double x) {
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 20) {
    term = term * x / n.toDouble();
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

List<double> euler_modified(dynamic ode_func, double y0, double x0, double step, double x_end) {
  int n = ceil_float((x_end - x0) / step);
  List<double> y = [y0];
  double x = x0;
  int k = 0;
  while (k < n) {
    double y_predict = y[k] + step * ode_func(x, y[k]);
    dynamic slope1 = ode_func(x, y[k]);
    dynamic slope2 = ode_func(x + step, y_predict);
    double y_next = y[k] + step / 2.0 * (slope1 + slope2);
    y = [...y, y_next];
    x = x + step;
    k = k + 1;
  }
  return y;
}

double f1(double x, double y) {
  return -2.0 * x * y * y;
}

double f2(double x, double y) {
  return -2.0 * y + x * x * x * exp_approx(-2.0 * x);
}

void _main() {
  List<double> y1 = euler_modified(f1, 1.0, 0.0, 0.2, 1.0);
  print(y1[y1.length - 1]);
  List<double> y2 = euler_modified(f2, 1.0, 0.0, 0.1, 0.3);
  print(y2[y2.length - 1]);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
