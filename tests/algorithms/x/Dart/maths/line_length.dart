// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double sqrt_newton(double n) {
  if (n == 0.0) {
    return 0.0;
  }
  double x = n;
  int i = 0;
  while (i < 20) {
    x = (x + n / x) / 2.0;
    i = i + 1;
  }
  return x;
}

double hypot(double a, double b) {
  return sqrt_newton(a * a + b * b);
}

double line_length(dynamic fnc, double x_start, double x_end, int steps) {
  double x1 = x_start;
  dynamic fx1 = fnc(x_start);
  double length = 0.0;
  int i = 0;
  double step = (x_end - x_start) / (1.0 * steps);
  while (i < steps) {
    double x2 = step + x1;
    dynamic fx2 = fnc(x2);
    length = length + hypot(x2 - x1, fx2 - fx1);
    x1 = x2;
    fx1 = fx2;
    i = i + 1;
  }
  return length;
}

double f1(double x) {
  return x;
}

double f2(double x) {
  return 1.0;
}

double f3(double x) {
  return x * x / 10.0;
}

void main() {
  print(line_length(f1, 0.0, 1.0, 10));
  print(line_length(f2, -5.5, 4.5, 100));
  print(line_length(f3, 0.0, 10.0, 1000));
}
