// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> primeFactors(int n) {
  int i = 2;
  List<int> factors = <int>[];
  while (i * i <= n) {
    if (n % i == 0) {
    factors = [...factors, i];
    n = n ~/ i;
  } else {
    i = i + 1;
  }
  }
  if (n > 1) {
    factors = [...factors, n];
  }
  return factors;
}

bool isSquareFree(List<int> factors) {
  Map<int, bool> seen = <int, bool>{};
  for (int f in factors) {
    if (seen.containsKey(f)) {
    return false;
  }
    seen[f] = true;
  }
  return true;
}

int mobius(int n) {
  List<int> factors = primeFactors(n);
  if (isSquareFree(factors)) {
    return (factors.length % 2 == 0 ? 1 : -1);
  }
  return 0;
}

void main() {
  print(mobius(24));
  print(mobius(-1));
}
