// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs_val(double _num) {
  if (_num < 0.0) {
    return -_num;
  }
  return _num;
}

int abs_min(List<int> x) {
  if (x.length == 0) {
    throw Exception("abs_min() arg is an empty sequence");
  }
  int j = x[0];
  int idx = 0;
  while (idx < x.length) {
    int i = x[idx];
    if (abs_val((i).toDouble()) < abs_val((j).toDouble())) {
    j = i;
  }
    idx = idx + 1;
  }
  return j;
}

int abs_max(List<int> x) {
  if (x.length == 0) {
    throw Exception("abs_max() arg is an empty sequence");
  }
  int j = x[0];
  int idx = 0;
  while (idx < x.length) {
    int i = x[idx];
    if (abs_val((i).toDouble()) > abs_val((j).toDouble())) {
    j = i;
  }
    idx = idx + 1;
  }
  return j;
}

int abs_max_sort(List<int> x) {
  if (x.length == 0) {
    throw Exception("abs_max_sort() arg is an empty sequence");
  }
  List<int> arr = <int>[];
  int i = 0;
  while (i < x.length) {
    arr = [...arr, x[i]];
    i = i + 1;
  }
  int n = arr.length;
  int a = 0;
  while (a < n) {
    int b = 0;
    while (b < n - a - 1) {
    if (abs_val((arr[b]).toDouble()) > abs_val((arr[b + 1]).toDouble())) {
    int temp = arr[b];
    while (arr.length <= b) { arr.add(0); } arr[b] = arr[b + 1];
    while (arr.length <= b + 1) { arr.add(0); } arr[b + 1] = temp;
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return arr[n - 1];
}

void test_abs_val() {
  if (abs_val(0.0) != 0.0) {
    throw Exception("abs_val(0) failed");
  }
  if (abs_val(34.0) != 34.0) {
    throw Exception("abs_val(34) failed");
  }
  if (abs_val(-100000000000.0) != 100000000000.0) {
    throw Exception("abs_val large failed");
  }
  List<int> a = [-3, -1, 2, -11];
  if (abs_max(a) != -11) {
    throw Exception("abs_max failed");
  }
  if (abs_max_sort(a) != -11) {
    throw Exception("abs_max_sort failed");
  }
  if (abs_min(a) != -1) {
    throw Exception("abs_min failed");
  }
}

void _main() {
  test_abs_val();
  print(abs_val(-34.0));
}

void _start() {
  _main();
}

void main() => _start();
