// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double f(double x) {
  return (x - 0.0) * (x - 0.0);
}

List<double> make_points(double a, double b, double h) {
  List<double> points = <double>[];
  double x = a + h;
  while (x < b - h) {
    points = [...points, x];
    x = x + h;
  }
  return points;
}

double simpson_rule(List<double> boundary, int steps) {
  if (steps <= 0) {
    throw Exception("Number of steps must be greater than zero");
  }
  double a = boundary[0];
  double b = boundary[1];
  double h = (b - a) / (steps as double);
  List<double> pts = make_points(a, b, h);
  double y = h / 3.0 * f(a);
  int cnt = 2;
  int i = 0;
  while (i < pts.length) {
    double coeff = 4.0 - 2.0 * (cnt % 2 as double);
    y = y + h / 3.0 * coeff * f(pts[i]);
    cnt = cnt + 1;
    i = i + 1;
  }
  y = y + h / 3.0 * f(b);
  return y;
}

double result = simpson_rule([0.0, 1.0], 10);
void main() {
  print((result).toString());
}
