// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double fx(double x, double a) {
  return x * x - a;
}

double fx_derivative(double x) {
  return 2.0 * x;
}

double get_initial_point(double a) {
  double start = 2.0;
  while (start <= a) {
    start = start * start;
  }
  return start;
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double square_root_iterative(double a, int max_iter, double tolerance) {
  if (a < 0.0) {
    throw Exception("math domain error");
  }
  double value = get_initial_point(a);
  int i = 0;
  while (i < max_iter) {
    double prev_value = value;
    value = value - fx(value, a) / fx_derivative(value);
    if (abs_float(prev_value - value) < tolerance) {
    return value;
  }
    i = i + 1;
  }
  return value;
}

double r1 = square_root_iterative(4.0, 9999, 0.00000000000001);
double r2 = square_root_iterative(3.2, 9999, 0.00000000000001);
double r3 = square_root_iterative(140.0, 9999, 0.00000000000001);
void main() {
  print((r1).toString());
  print((r2).toString());
  print((r3).toString());
}
