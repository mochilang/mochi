// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  if (x < 0) {
    return -x;
  }
  return x;
}

List<String> proper_fractions(int den) {
  if (den < 0) {
    _error("The Denominator Cannot be less than 0");
  }
  List<String> res = <String>[];
  int n = 1;
  while (n < den) {
    if (gcd(n, den) == 1) {
    res = [...res, _str(n) + "/" + _str(den)];
  }
    n = n + 1;
  }
  return res;
}

void test_proper_fractions() {
  List<String> a = proper_fractions(10);
  if (!_listEq(a, ["1/10", "3/10", "7/10", "9/10"])) {
    _error("test 10 failed");
  }
  List<String> b = proper_fractions(5);
  if (!_listEq(b, ["1/5", "2/5", "3/5", "4/5"])) {
    _error("test 5 failed");
  }
  List<String> c = proper_fractions(0);
  if (!_listEq(c, [])) {
    _error("test 0 failed");
  }
}

void _main() {
  test_proper_fractions();
  print(_str(proper_fractions(10)));
  print(_str(proper_fractions(5)));
  print(_str(proper_fractions(0)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
