// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class NRResult {
  double root;
  double error;
  List<double> steps;
  NRResult({required this.root, required this.error, required this.steps});
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  } else {
    return x;
  }
}

void fail(String msg) {
  print("error: " + msg);
}

double calc_derivative(dynamic f, double x, double delta_x) {
  return (f(x + delta_x / 2.0) - f(x - delta_x / 2.0)) / delta_x;
}

NRResult newton_raphson(dynamic f, double x0, int max_iter, double step, double max_error, bool log_steps) {
  double a = x0;
  List<double> steps = <double>[];
  int i = 0;
  while (i < max_iter) {
    if (log_steps) {
    steps = [...steps, a];
  }
    double err = abs_float(f(a));
    if (err < max_error) {
    return NRResult(root: a, error: err, steps: steps);
  }
    double der = calc_derivative(f, a, step);
    if (der == 0.0) {
    fail("No converging solution found, zero derivative");
    return NRResult(root: a, error: err, steps: steps);
  }
    a = a - f(a) ~/ der;
    i = i + 1;
  }
  fail("No converging solution found, iteration limit reached");
  return NRResult(root: a, error: abs_float(f(a)), steps: steps);
}

double poly(double x) {
  return x * x - 5.0 * x + 2.0;
}

NRResult result = newton_raphson(poly, 0.4, 20, 0.000001, 0.000001, false);
void main() {
  print("root = " + (result.root).toString() + ", error = " + (result.error).toString());
}
