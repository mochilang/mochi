// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double intersection(dynamic function, double x0, double x1) {
  double x_n = x0;
  double x_n1 = x1;
  while (true) {
    if (x_n == x_n1 || function(x_n1) == function(x_n)) {
    throw Exception("float division by zero, could not find root");
  }
    dynamic numerator = function(x_n1);
    double denominator = (function(x_n1) - function(x_n)) / (x_n1 - x_n);
    double x_n2 = x_n1 - numerator ~/ denominator;
    if (abs_float(x_n2 - x_n1) < 0.00001) {
    return x_n2;
  }
    x_n = x_n1;
    x_n1 = x_n2;
  }
}

double f(double x) {
  return x * x * x - 2.0 * x - 5.0;
}

void _main() {
  print((intersection(f, 3.0, 3.5)).toString());
}

void _start() {
  _main();
}

void main() => _start();
