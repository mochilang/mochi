// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<double> runge_kutta(dynamic f, double y0, double x0, double h, double x_end) {
  double span = (x_end - x0) / h;
  int n = span as int;
  if (((n).toDouble()) < span) {
    n = n + 1;
  }
  List<double> y = <double>[];
  int i = 0;
  while (i < n + 1) {
    y = [...y, 0.0];
    i = i + 1;
  }
  while (y.length <= 0) { y.add(0); } y[0] = y0;
  double x = x0;
  int k = 0;
  while (k < n) {
    double k1 = f(x, y[k]);
    double k2 = f(x + 0.5 * h, y[k] + 0.5 * h * k1);
    double k3 = f(x + 0.5 * h, y[k] + 0.5 * h * k2);
    double k4 = f(x + h, y[k] + h * k3);
    while (y.length <= k + 1) { y.add(0); } y[k + 1] = y[k] + 1.0 / 6.0 * h * (k1 + 2.0 * k2 + 2.0 * k3 + k4);
    x = x + h;
    k = k + 1;
  }
  return y;
}

void test_runge_kutta() {
  double f(double x, double y) {
  return y;
}
  List<double> result = runge_kutta(f, 1.0, 0.0, 0.01, 5.0);
  double last = result[result.length - 1];
  double expected = 148.41315904125113;
  double diff = last - expected;
  if (diff < 0.0) {
    diff = -diff;
  }
  if (diff > 0.000001) {
    throw Exception("runge_kutta failed");
  }
}

void _main() {
  test_runge_kutta();
  double f(double x, double y) {
  return y;
}
  List<double> r = runge_kutta(f, 1.0, 0.0, 0.1, 1.0);
  print((r[r.length - 1]).toString());
}

void _start() {
  _main();
}

void main() => _start();
