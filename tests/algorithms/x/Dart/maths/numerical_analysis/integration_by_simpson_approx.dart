// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int N_STEPS = 1000;
double floor(double x) {
  int i = x as int;
  if ((i as double) > x) {
    i = i - 1;
  }
  return i as double;
}

double pow10(int n) {
  double p = 1.0;
  int i = 0;
  while (i < n) {
    p = p * 10.0;
    i = i + 1;
  }
  return p;
}

double round(double x, int n) {
  double m = pow10(n);
  return floor(x * m + 0.5) / m;
}

double simpson_integration(dynamic f, double a, double b, int precision) {
  if (precision <= 0) {
    throw Exception("precision should be positive");
  }
  double h = (b - a) / (N_STEPS as double);
  num result = f(a) + f(b);
  int i = 1;
  while (i < N_STEPS) {
    double x = a + h * (i as double);
    if (i % 2 == 1) {
    result = result + 4.0 * f(x);
  } else {
    result = result + 2.0 * f(x);
  }
    i = i + 1;
  }
  result = result * (h / 3.0);
  double r = round(result, precision);
  return r;
}

double square(double x) {
  return x * x;
}

void main() {
  print((simpson_integration(square, 1.0, 2.0, 3)).toString());
  print((simpson_integration(square, 3.45, 3.2, 1)).toString());
}
