// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double sqrt(double x) {
  double guess = (x > 1.0 ? x / 2.0 : 1.0);
  int i = 0;
  while (i < 20) {
    guess = 0.5 * (guess + x / guess);
    i = i + 1;
  }
  return guess;
}

List<double> runge_kutta_gills(dynamic func, double x_initial, double y_initial, double step_size, double x_final) {
  if (x_initial >= x_final) {
    throw Exception("The final value of x must be greater than initial value of x.");
  }
  if (step_size <= 0.0) {
    throw Exception("Step size must be positive.");
  }
  int n = (x_final - x_initial) / step_size as int;
  List<double> y = <double>[];
  int i = 0;
  while (i <= n) {
    y = [...y, 0.0];
    i = i + 1;
  }
  while (y.length <= 0) { y.add(0); } y[0] = y_initial;
  double xi = x_initial;
  int idx = 0;
  double root2 = sqrt(2.0);
  while (idx < n) {
    double k1 = step_size * func(xi, y[idx]);
    double k2 = step_size * func(xi + step_size / 2.0, y[idx] + k1 / 2.0);
    double k3 = step_size * func(xi + step_size / 2.0, y[idx] + (-0.5 + 1.0 / root2) * k1 + (1.0 - 1.0 / root2) * k2);
    double k4 = step_size * func(xi + step_size, y[idx] - 1.0 / root2 * k2 + (1.0 + 1.0 / root2) * k3);
    while (y.length <= idx + 1) { y.add(0); } y[idx + 1] = y[idx] + (k1 + (2.0 - root2) * k2 + (2.0 + root2) * k3 + k4) / 6.0;
    xi = xi + step_size;
    idx = idx + 1;
  }
  return y;
}

double f1(double x, double y) {
  return (x - y) / 2.0;
}

List<double> y1 = runge_kutta_gills(f1, 0.0, 3.0, 0.2, 5.0);
double f2(double x, double y) {
  return x;
}

List<double> y2 = runge_kutta_gills(f2, -1.0, 0.0, 0.2, 0.0);
void main() {
  print((y1[y1.length - 1]).toString());
  print((y2).toString());
}
