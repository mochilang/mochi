// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  } else {
    return x;
  }
}

void validate_inputs(List<double> x_initials, double step_size, double x_final) {
  if (x_initials[x_initials.length - 1] >= x_final) {
    throw Exception("The final value of x must be greater than the initial values of x.");
  }
  if (step_size <= 0.0) {
    throw Exception("Step size must be positive.");
  }
  int i = 0;
  while (i < x_initials.length - 1) {
    double diff = x_initials[i + 1] - x_initials[i];
    if (abs_float(diff - step_size) > 0.0000000001) {
    throw Exception("x-values must be equally spaced according to step size.");
  }
    i = i + 1;
  }
}

String list_to_string(List<double> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    s = s + (xs[i]).toString();
    if (i + 1 < xs.length) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<double> adams_bashforth_step2(dynamic f, List<double> x_initials, List<double> y_initials, double step_size, double x_final) {
  validate_inputs(x_initials, step_size, x_final);
  if (x_initials.length != 2 || y_initials.length != 2) {
    throw Exception("Insufficient initial points information.");
  }
  double x0 = x_initials[0];
  double x1 = x_initials[1];
  List<double> y = <double>[];
  y = [...y, y_initials[0]];
  y = [...y, y_initials[1]];
  int n = (x_final - x1) / step_size as int;
  int i = 0;
  while (i < n) {
    double term = 3.0 * f(x1, y[i + 1]) - f(x0, y[i]);
    double y_next = y[i + 1] + step_size / 2.0 * term;
    y = [...y, y_next];
    x0 = x1;
    x1 = x1 + step_size;
    i = i + 1;
  }
  return y;
}

List<double> adams_bashforth_step3(dynamic f, List<double> x_initials, List<double> y_initials, double step_size, double x_final) {
  validate_inputs(x_initials, step_size, x_final);
  if (x_initials.length != 3 || y_initials.length != 3) {
    throw Exception("Insufficient initial points information.");
  }
  double x0 = x_initials[0];
  double x1 = x_initials[1];
  double x2 = x_initials[2];
  List<double> y = <double>[];
  y = [...y, y_initials[0]];
  y = [...y, y_initials[1]];
  y = [...y, y_initials[2]];
  int n = (x_final - x2) / step_size as int;
  int i = 0;
  while (i <= n) {
    double term = 23.0 * f(x2, y[i + 2]) - 16.0 * f(x1, y[i + 1]) + 5.0 * f(x0, y[i]);
    double y_next = y[i + 2] + step_size / 12.0 * term;
    y = [...y, y_next];
    x0 = x1;
    x1 = x2;
    x2 = x2 + step_size;
    i = i + 1;
  }
  return y;
}

List<double> adams_bashforth_step4(dynamic f, List<double> x_initials, List<double> y_initials, double step_size, double x_final) {
  validate_inputs(x_initials, step_size, x_final);
  if (x_initials.length != 4 || y_initials.length != 4) {
    throw Exception("Insufficient initial points information.");
  }
  double x0 = x_initials[0];
  double x1 = x_initials[1];
  double x2 = x_initials[2];
  double x3 = x_initials[3];
  List<double> y = <double>[];
  y = [...y, y_initials[0]];
  y = [...y, y_initials[1]];
  y = [...y, y_initials[2]];
  y = [...y, y_initials[3]];
  int n = (x_final - x3) / step_size as int;
  int i = 0;
  while (i < n) {
    double term = 55.0 * f(x3, y[i + 3]) - 59.0 * f(x2, y[i + 2]) + 37.0 * f(x1, y[i + 1]) - 9.0 * f(x0, y[i]);
    double y_next = y[i + 3] + step_size / 24.0 * term;
    y = [...y, y_next];
    x0 = x1;
    x1 = x2;
    x2 = x3;
    x3 = x3 + step_size;
    i = i + 1;
  }
  return y;
}

List<double> adams_bashforth_step5(dynamic f, List<double> x_initials, List<double> y_initials, double step_size, double x_final) {
  validate_inputs(x_initials, step_size, x_final);
  if (x_initials.length != 5 || y_initials.length != 5) {
    throw Exception("Insufficient initial points information.");
  }
  double x0 = x_initials[0];
  double x1 = x_initials[1];
  double x2 = x_initials[2];
  double x3 = x_initials[3];
  double x4 = x_initials[4];
  List<double> y = <double>[];
  y = [...y, y_initials[0]];
  y = [...y, y_initials[1]];
  y = [...y, y_initials[2]];
  y = [...y, y_initials[3]];
  y = [...y, y_initials[4]];
  int n = (x_final - x4) / step_size as int;
  int i = 0;
  while (i <= n) {
    double term = 1901.0 * f(x4, y[i + 4]) - 2774.0 * f(x3, y[i + 3]) - 2616.0 * f(x2, y[i + 2]) - 1274.0 * f(x1, y[i + 1]) + 251.0 * f(x0, y[i]);
    double y_next = y[i + 4] + step_size / 720.0 * term;
    y = [...y, y_next];
    x0 = x1;
    x1 = x2;
    x2 = x3;
    x3 = x4;
    x4 = x4 + step_size;
    i = i + 1;
  }
  return y;
}

double f_x(double x, double y) {
  return x;
}

double f_xy(double x, double y) {
  return x + y;
}

List<double> y2 = adams_bashforth_step2(f_x, [0.0, 0.2], [0.0, 0.0], 0.2, 1.0);
List<double> y3 = adams_bashforth_step3(f_xy, [0.0, 0.2, 0.4], [0.0, 0.0, 0.04], 0.2, 1.0);
List<double> y4 = adams_bashforth_step4(f_xy, [0.0, 0.2, 0.4, 0.6], [0.0, 0.0, 0.04, 0.128], 0.2, 1.0);
List<double> y5 = adams_bashforth_step5(f_xy, [0.0, 0.2, 0.4, 0.6, 0.8], [0.0, 0.0214, 0.0214, 0.22211, 0.42536], 0.2, 1.0);
void main() {
  print(list_to_string(y2));
  print((y3[3]).toString());
  print((y4[4]).toString());
  print((y4[5]).toString());
  print((y5[y5.length - 1]).toString());
}
