// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class NevilleResult {
  double value;
  List<List<double>> table;
  NevilleResult({required this.value, required this.table});
}

NevilleResult neville_interpolate(List<double> x_points, List<double> y_points, double x0) {
  int n = x_points.length;
  List<List<double>> q = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0.0];
    j = j + 1;
  }
    q = ([...q, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    while (q[i]!.length <= 1) { q[i]!.add(0); } q[i]![1] = y_points[i];
    i = i + 1;
  }
  int col = 2;
  while (col < n) {
    int row_idx = col;
    while (row_idx < n) {
    while (q[row_idx]!.length <= col) { q[row_idx]!.add(0); } q[row_idx]![col] = ((x0 - x_points[row_idx - col + 1]) * q[row_idx][col - 1] - (x0 - x_points[row_idx]) * q[row_idx - 1][col - 1]) / (x_points[row_idx] - x_points[row_idx - col + 1]);
    row_idx = row_idx + 1;
  }
    col = col + 1;
  }
  return NevilleResult(value: q[n - 1][n - 1], table: q);
}

void test_neville() {
  List<double> xs = [1.0, 2.0, 3.0, 4.0, 6.0];
  List<double> ys = [6.0, 7.0, 8.0, 9.0, 11.0];
  NevilleResult r1 = neville_interpolate(xs, ys, 5.0);
  if (r1.value != 10.0) {
    _error("neville_interpolate at 5 failed");
  }
  NevilleResult r2 = neville_interpolate(xs, ys, 99.0);
  if (r2.value != 104.0) {
    _error("neville_interpolate at 99 failed");
  }
}

void _main() {
  test_neville();
  List<double> xs = [1.0, 2.0, 3.0, 4.0, 6.0];
  List<double> ys = [6.0, 7.0, 8.0, 9.0, 11.0];
  NevilleResult r = neville_interpolate(xs, ys, 5.0);
  print(r.value);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
