// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int josephus_recursive(int num_people, int step_size) {
  if (num_people <= 0 || step_size <= 0) {
    throw Exception("num_people or step_size is not a positive integer.");
  }
  if (num_people == 1) {
    return 0;
  }
  return (josephus_recursive(num_people - 1, step_size) + step_size) % num_people;
}

int find_winner(int num_people, int step_size) {
  return josephus_recursive(num_people, step_size) + 1;
}

List<int> remove_at(List<int> xs, int idx) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

int josephus_iterative(int num_people, int step_size) {
  if (num_people <= 0 || step_size <= 0) {
    throw Exception("num_people or step_size is not a positive integer.");
  }
  List<int> circle = <int>[];
  int i = 1;
  while (i <= num_people) {
    circle = [...circle, i];
    i = i + 1;
  }
  int current = 0;
  while (circle.length > 1) {
    current = (current + step_size - 1) % circle.length;
    circle = remove_at(circle, current);
  }
  return circle[0];
}

int r = josephus_recursive(7, 3);
void main() {
  print((r).toString());
  print((find_winner(7, 3)).toString());
  print((josephus_iterative(7, 3)).toString());
}
