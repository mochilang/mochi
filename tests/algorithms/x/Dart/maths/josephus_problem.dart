// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int josephus_recursive(int num_people, int step_size) {
  if (num_people <= 0 || step_size <= 0) {
    _error("num_people or step_size is not a positive integer.");
  }
  if (num_people == 1) {
    return 0;
  }
  return (josephus_recursive(num_people - 1, step_size) + step_size) % num_people;
}

int find_winner(int num_people, int step_size) {
  return josephus_recursive(num_people, step_size) + 1;
}

List<int> remove_at(List<int> xs, int idx) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

int josephus_iterative(int num_people, int step_size) {
  if (num_people <= 0 || step_size <= 0) {
    _error("num_people or step_size is not a positive integer.");
  }
  List<int> circle = <int>[];
  int i = 1;
  while (i <= num_people) {
    circle = [...circle, i];
    i = i + 1;
  }
  int current = 0;
  while (circle.length > 1) {
    current = (current + step_size - 1) % circle.length;
    circle = remove_at(circle, current);
  }
  return circle[0];
}

int r = josephus_recursive(7, 3);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(r));
  print(_str(find_winner(7, 3)));
  print(_str(josephus_iterative(7, 3)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
