// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double exp_approx(double x) {
  double sum = 1.0;
  double term = 1.0;
  int i = 1;
  while (i <= 10) {
    term = term * x / (i as double);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

List<double> sigmoid(List<double> vector) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double v = vector[i];
    double s = 1.0 / (1.0 + exp_approx(-v));
    result = [...result, s];
    i = i + 1;
  }
  return result;
}

void main() {
  print((sigmoid(List<double>.from([-1.0, 1.0, 2.0]))).toString());
  print((sigmoid([0.0])).toString());
}
