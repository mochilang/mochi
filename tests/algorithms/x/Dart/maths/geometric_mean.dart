// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double pow_int(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double nth_root(double x, int n) {
  if (x == 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    double denom = pow_int(guess, n - 1);
    guess = ((n - 1).toDouble() * guess + x / denom) / n.toDouble();
    i = i + 1;
  }
  return guess;
}

double round_nearest(double x) {
  if (x >= 0.0) {
    dynamic n = (x + 0.5).toInt();
    return n.toDouble();
  }
  dynamic n = (x - 0.5).toInt();
  return n.toDouble();
}

double compute_geometric_mean(List<double> nums) {
  if (nums.length == 0) {
    _error("no numbers");
  }
  double product = 1.0;
  int i = 0;
  while (i < nums.length) {
    product = product * nums[i];
    i = i + 1;
  }
  if (product < 0.0 && nums.length % 2 == 0) {
    _error("Cannot Compute Geometric Mean for these numbers.");
  }
  double mean = nth_root(product.abs(), nums.length);
  if (product < 0.0) {
    mean = -mean;
  }
  double possible = round_nearest(mean);
  if (pow_int(possible, nums.length) == product) {
    mean = possible;
  }
  return mean;
}

void test_compute_geometric_mean() {
  double eps = 0.0001;
  double m1 = compute_geometric_mean([2.0, 8.0]);
  if ((m1 - 4.0).abs().compareTo(eps) > 0) {
    _error("test1 failed");
  }
  double m2 = compute_geometric_mean([5.0, 125.0]);
  if ((m2 - 25.0).abs().compareTo(eps) > 0) {
    _error("test2 failed");
  }
  double m3 = compute_geometric_mean([1.0, 0.0]);
  if ((m3 - 0.0).abs().compareTo(eps) > 0) {
    _error("test3 failed");
  }
  double m4 = compute_geometric_mean([1.0, 5.0, 25.0, 5.0]);
  if ((m4 - 5.0).abs().compareTo(eps) > 0) {
    _error("test4 failed");
  }
  double m5 = compute_geometric_mean(List<double>.from([-5.0, 25.0, 1.0]));
  if ((m5 + 5.0).abs().compareTo(eps) > 0) {
    _error("test5 failed");
  }
}

void _main() {
  test_compute_geometric_mean();
  print(compute_geometric_mean([-3.0, -27.0]));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
