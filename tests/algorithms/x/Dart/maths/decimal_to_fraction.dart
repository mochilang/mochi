// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Fraction {
  int numerator;
  int denominator;
  Fraction({required this.numerator, required this.denominator});
}

int pow10(int n) {
  int result = 1;
  int i = 0;
  while (i < n) {
    result = result * 10;
    i = i + 1;
  }
  return result;
}

int gcd(int a, int b) {
  int x = a;
  int y = b;
  if (x < 0) {
    x = -x;
  }
  if (y < 0) {
    y = -y;
  }
  while (y != 0) {
    int r = x % y;
    x = y;
    y = r;
  }
  return x;
}

Fraction parse_decimal(String s) {
  if (s.length == 0) {
    throw Exception("invalid number");
  }
  int idx = 0;
  int sign = 1;
  String first = _substr(s, 0, 1);
  if (first == "-") {
    sign = -1;
    idx = 1;
  } else {
    if (first == "+") {
    idx = 1;
  };
  }
  String int_part = "";
  while (idx < s.length) {
    String c = _substr(s, idx, idx + 1);
    if (c.compareTo("0") >= 0 && c.compareTo("9") <= 0) {
    int_part = int_part + c;
    idx = idx + 1;
  } else {
    break;
  }
  }
  String frac_part = "";
  if (idx < s.length && _substr(s, idx, idx + 1) == ".") {
    idx = idx + 1;
    while (idx < s.length) {
    String c = _substr(s, idx, idx + 1);
    if (c.compareTo("0") >= 0 && c.compareTo("9") <= 0) {
    frac_part = frac_part + c;
    idx = idx + 1;
  } else {
    break;
  }
  };
  }
  int exp = 0;
  if (idx < s.length && (_substr(s, idx, idx + 1) == "e" || _substr(s, idx, idx + 1) == "E")) {
    idx = idx + 1;
    int exp_sign = 1;
    if (idx < s.length && _substr(s, idx, idx + 1) == "-") {
    exp_sign = -1;
    idx = idx + 1;
  } else {
    if (idx < s.length && _substr(s, idx, idx + 1) == "+") {
    idx = idx + 1;
  };
  };
    String exp_str = "";
    while (idx < s.length) {
    String c = _substr(s, idx, idx + 1);
    if (c.compareTo("0") >= 0 && c.compareTo("9") <= 0) {
    exp_str = exp_str + c;
    idx = idx + 1;
  } else {
    throw Exception("invalid number");
  }
  };
    if (exp_str.length == 0) {
    throw Exception("invalid number");
  };
    exp = exp_sign * int.parse(exp_str);
  }
  if (idx != s.length) {
    throw Exception("invalid number");
  }
  if (int_part.length == 0) {
    int_part = "0";
  }
  String num_str = int_part + frac_part;
  int numerator = int.parse(num_str);
  if (sign == 0 - 1) {
    numerator = 0 - numerator;
  }
  int denominator = pow10(frac_part.length);
  if (exp > 0) {
    numerator = numerator * pow10(exp);
  } else {
    if (exp < 0) {
    denominator = denominator * pow10(-exp);
  };
  }
  return Fraction(numerator: numerator, denominator: denominator);
}

Fraction reduce(Fraction fr) {
  int g = gcd(fr.numerator, fr.denominator);
  return Fraction(numerator: fr.numerator ~/ g, denominator: fr.denominator ~/ g);
}

Fraction decimal_to_fraction_str(String s) {
  return reduce(parse_decimal(s));
}

Fraction decimal_to_fraction(double x) {
  return decimal_to_fraction_str((x).toString());
}

void assert_fraction(String name, Fraction fr, int _num, int den) {
  if (fr.numerator != _num || fr.denominator != den) {
    throw Exception(name);
  }
}

void test_decimal_to_fraction() {
  assert_fraction("case1", decimal_to_fraction(2.0), 2, 1);
  assert_fraction("case2", decimal_to_fraction(89.0), 89, 1);
  assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1);
  assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1);
  assert_fraction("case5", decimal_to_fraction(1.5), 3, 2);
  assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4);
  assert_fraction("case7", decimal_to_fraction(0.0), 0, 1);
  assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2);
  assert_fraction("case9", decimal_to_fraction(0.125), 1, 8);
  assert_fraction("case10", decimal_to_fraction(1000000.25), 4000001, 4);
  assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000);
  assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1);
  assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2);
}

void _main() {
  test_decimal_to_fraction();
  Fraction fr = decimal_to_fraction(1.5);
  print((fr.numerator).toString() + "/" + (fr.denominator).toString());
}

void _start() {
  _main();
}

void main() => _start();
