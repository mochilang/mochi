// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool perfect_cube(int n) {
  int m = n;
  if (m < 0) {
    m = -m;
  }
  int i = 0;
  while (i * i * i < m) {
    i = i + 1;
  }
  return i * i * i == m;
}

bool perfect_cube_binary_search(int n) {
  int m = n;
  if (m < 0) {
    m = -m;
  }
  int left = 0;
  int right = m;
  while (left <= right) {
    int mid = left + (right - left) ~/ 2;
    int cube = mid * mid * mid;
    if (cube == m) {
    return true;
  }
    if (cube < m) {
    left = mid + 1;
  } else {
    right = mid - 1;
  }
  }
  return false;
}

void main() {
  print((perfect_cube(27)).toString());
  print((perfect_cube(4)).toString());
  print((perfect_cube_binary_search(27)).toString());
  print((perfect_cube_binary_search(64)).toString());
  print((perfect_cube_binary_search(4)).toString());
}
