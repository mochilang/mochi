// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> totient(int n) {
  List<bool> is_prime = <bool>[];
  List<int> totients = <int>[];
  List<int> primes = <int>[];
  int i = 0;
  while (i <= n) {
    is_prime = [...is_prime, true];
    totients = [...totients, i - 1];
    i = i + 1;
  }
  i = 2;
  while (i <= n) {
    if (is_prime[i]) {
    primes = [...primes, i];
  }
    int j = 0;
    while (j < primes.length) {
    int p = primes[j];
    if (i * p >= n) {
    break;
  }
    while (is_prime.length <= i * p) { is_prime.add(false); } is_prime[i * p] = false;
    if (i % p == 0) {
    while (totients.length <= i * p) { totients.add(0); } totients[i * p] = totients[i] * p;
    break;
  }
    while (totients.length <= i * p) { totients.add(0); } totients[i * p] = totients[i] * (p - 1);
    j = j + 1;
  }
    i = i + 1;
  }
  return totients;
}

void test_totient() {
  List<int> expected = [-1, 0, 1, 2, 2, 4, 2, 6, 4, 6, 9];
  List<int> res = totient(10);
  int idx = 0;
  while (idx < expected.length) {
    if (res[idx] != expected[idx]) {
    throw Exception("totient mismatch at " + (idx).toString());
  }
    idx = idx + 1;
  }
}

void _main() {
  test_totient();
  int n = 10;
  List<int> res = totient(n);
  int i = 1;
  while (i < n) {
    print((i).toString() + " has " + (res[i]).toString() + " relative primes.");
    i = i + 1;
  }
}

void _start() {
  _main();
}

void main() => _start();
