// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int sock_merchant(List<int> colors) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < colors.length) {
    arr = [...arr, colors[i]];
    i = i + 1;
  }
  int n = arr.length;
  int a = 0;
  while (a < n) {
    int min_idx = a;
    int b = a + 1;
    while (b < n) {
    if (arr[b] < arr[min_idx]) {
    min_idx = b;
  }
    b = b + 1;
  }
    int temp = arr[a];
    while (arr.length <= a) { arr.add(0); } arr[a] = arr[min_idx];
    while (arr.length <= min_idx) { arr.add(0); } arr[min_idx] = temp;
    a = a + 1;
  }
  int pairs = 0;
  i = 0;
  while (i < n) {
    int count = 1;
    while (i + 1 < n && arr[i] == arr[i + 1]) {
    count = count + 1;
    i = i + 1;
  }
    pairs = pairs + count ~/ 2;
    i = i + 1;
  }
  return pairs;
}

void test_sock_merchant() {
  List<int> example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20];
  if (sock_merchant(example1) != 3) {
    _error("example1 failed");
  }
  List<int> example2 = [1, 1, 3, 3];
  if (sock_merchant(example2) != 2) {
    _error("example2 failed");
  }
}

void _main() {
  test_sock_merchant();
  List<int> example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20];
  print(_str(sock_merchant(example1)));
  List<int> example2 = [1, 1, 3, 3];
  print(_str(sock_merchant(example2)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
