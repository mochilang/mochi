// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Point {
  double x;
  double y;
  Point({required this.x, required this.y});
}

double PI = 3.141592653589793;
int seed = 1;
int next_seed(int x) {
  return (x * 1103515245 + 12345) % 2147483648;
}

double rand_unit() {
  seed = next_seed(seed);
  return (seed as double) / 2147483648.0;
}

bool is_in_unit_circle(Point p) {
  return p.x * p.x + p.y * p.y <= 1.0;
}

Point random_unit_square() {
  return Point(x: rand_unit(), y: rand_unit());
}

double estimate_pi(int simulations) {
  if (simulations < 1) {
    throw Exception("At least one simulation is necessary to estimate PI.");
  }
  int inside = 0;
  int i = 0;
  while (i < simulations) {
    Point p = random_unit_square();
    if (is_in_unit_circle(p)) {
    inside = inside + 1;
  }
    i = i + 1;
  }
  return 4.0 * (inside as double) / (simulations as double);
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

void _main() {
  int n = 10000;
  double my_pi = estimate_pi(n);
  double error = abs_float(my_pi - PI);
  print("An estimate of PI is " + (my_pi).toString() + " with an error of " + (error).toString());
}

void _start() {
  _main();
}

void main() => _start();
