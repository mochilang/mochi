// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class Point {
  double x;
  double y;
  Point({required this.x, required this.y});
}

double PI = 3.141592653589793;
int seed = 1;
int next_seed(int x) {
  return (x * 1103515245 + 12345) % 2147483648;
}

double rand_unit() {
  seed = next_seed(seed);
  return seed.toDouble() / 2147483648.0;
}

bool is_in_unit_circle(Point p) {
  return p.x * p.x + p.y * p.y <= 1.0;
}

Point random_unit_square() {
  return Point(x: rand_unit(), y: rand_unit());
}

double estimate_pi(int simulations) {
  if (simulations < 1) {
    _error("At least one simulation is necessary to estimate PI.");
  }
  int inside = 0;
  int i = 0;
  while (i < simulations) {
    Point p = random_unit_square();
    if (is_in_unit_circle(p)) {
    inside = inside + 1;
  }
    i = i + 1;
  }
  return 4.0 * inside.toDouble() / simulations.toDouble();
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

void _main() {
  int n = 10000;
  double my_pi = estimate_pi(n);
  double error = abs_float(my_pi - PI);
  print("An estimate of PI is " + _str(my_pi) + " with an error of " + _str(_error));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
