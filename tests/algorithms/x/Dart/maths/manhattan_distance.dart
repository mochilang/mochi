// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs_val(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

void validate_point(List<double> p) {
  if (p.length == 0) {
    throw Exception("Missing an input");
  }
}

double manhattan_distance(List<double> a, List<double> b) {
  validate_point(a);
  validate_point(b);
  if (a.length != b.length) {
    throw Exception("Both points must be in the same n-dimensional space");
  }
  double total = 0.0;
  int i = 0;
  while (i < a.length) {
    total = total + abs_val(a[i] - b[i]);
    i = i + 1;
  }
  return total;
}

double manhattan_distance_one_liner(List<double> a, List<double> b) {
  return manhattan_distance(a, b);
}

void main() {
  print((manhattan_distance([1.0, 1.0], [2.0, 2.0])).toString());
  print((manhattan_distance([1.5, 1.5], [2.0, 2.0])).toString());
  print((manhattan_distance_one_liner([1.5, 1.5], [2.5, 2.0])).toString());
  print((manhattan_distance_one_liner([-3.0, -3.0, -3.0], [0.0, 0.0, 0.0])).toString());
}
