// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int normalize_index(int index, int n) {
  if (index < 0) {
    return n + index;
  }
  return index;
}

double find_max_iterative(List<double> nums) {
  if (nums.length == 0) {
    throw Exception("find_max_iterative() arg is an empty sequence");
  }
  double max_num = nums[0];
  int i = 0;
  while (i < nums.length) {
    double x = nums[i];
    if (x > max_num) {
    max_num = x;
  }
    i = i + 1;
  }
  return max_num;
}

double find_max_recursive(List<double> nums, int left, int right) {
  int n = nums.length;
  if (n == 0) {
    throw Exception("find_max_recursive() arg is an empty sequence");
  }
  if (left >= n || left < 0 - n || right >= n || right < 0 - n) {
    throw Exception("list index out of range");
  }
  int l = normalize_index(left, n);
  int r = normalize_index(right, n);
  if (l == r) {
    return nums[l];
  }
  int mid = (l + r) ~/ 2;
  double left_max = find_max_recursive(nums, l, mid);
  double right_max = find_max_recursive(nums, mid + 1, r);
  if (left_max >= right_max) {
    return left_max;
  }
  return right_max;
}

void test_find_max() {
  List<double> arr = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0];
  if (find_max_iterative(arr) != 94.0) {
    throw Exception("find_max_iterative failed");
  }
  if (find_max_recursive(arr, 0, arr.length - 1) != 94.0) {
    throw Exception("find_max_recursive failed");
  }
  if (find_max_recursive(arr, -arr.length, -1) != 94.0) {
    throw Exception("negative index handling failed");
  }
}

void _main() {
  test_find_max();
  List<double> nums = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0];
  print(find_max_iterative(nums));
  print(find_max_recursive(nums, 0, nums.length - 1));
}

void _start() {
  _main();
}

void main() => _start();
