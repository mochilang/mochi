// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> hamming(int n) {
  if (n < 1) {
    throw Exception("n_element should be a positive number");
  }
  List<int> hamming_list = [1];
  int i = 0;
  int j = 0;
  int k = 0;
  int index = 1;
  while (index < n) {
    while (hamming_list[i] * 2 <= hamming_list[hamming_list.length - 1]) {
    i = i + 1;
  }
    while (hamming_list[j] * 3 <= hamming_list[hamming_list.length - 1]) {
    j = j + 1;
  }
    while (hamming_list[k] * 5 <= hamming_list[hamming_list.length - 1]) {
    k = k + 1;
  }
    int m1 = hamming_list[i] * 2;
    int m2 = hamming_list[j] * 3;
    int m3 = hamming_list[k] * 5;
    int next = m1;
    if (m2 < next) {
    next = m2;
  }
    if (m3 < next) {
    next = m3;
  }
    hamming_list = [...hamming_list, next];
    index = index + 1;
  }
  return hamming_list;
}

void main() {
  print("[" + hamming(5).join(', ') + "]");
  print("[" + hamming(10).join(', ') + "]");
  print("[" + hamming(15).join(', ') + "]");
}
