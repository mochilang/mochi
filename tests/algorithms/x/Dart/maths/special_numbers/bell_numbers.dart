// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int binomial_coefficient(int total_elements, int elements_to_choose) {
  if (elements_to_choose == 0 || elements_to_choose == total_elements) {
    return 1;
  }
  int k = elements_to_choose;
  if (k > total_elements - k) {
    k = total_elements - k;
  }
  int coefficient = 1;
  int i = 0;
  while (i < k) {
    coefficient = coefficient * (total_elements - i);
    coefficient = coefficient ~/ (i + 1);
    i = i + 1;
  }
  return coefficient;
}

List<int> bell_numbers(int max_set_length) {
  if (max_set_length < 0) {
    throw Exception("max_set_length must be non-negative");
  }
  List<int> bell = <int>[];
  int i = 0;
  while (i <= max_set_length) {
    bell = [...bell, 0];
    i = i + 1;
  }
  while (bell.length <= 0) { bell.add(0); } bell[0] = 1;
  i = 1;
  while (i <= max_set_length) {
    int j = 0;
    while (j < i) {
    while (bell.length <= i) { bell.add(0); } bell[i] = bell[i] + binomial_coefficient(i - 1, j) * bell[j];
    j = j + 1;
  }
    i = i + 1;
  }
  return bell;
}

void _main() {
  print((bell_numbers(5)).toString());
}

void _start() {
  _main();
}

void main() => _start();
