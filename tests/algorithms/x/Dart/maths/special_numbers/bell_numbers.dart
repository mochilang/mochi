// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int binomial_coefficient(int total_elements, int elements_to_choose) {
  if (elements_to_choose == 0 || elements_to_choose == total_elements) {
    return 1;
  }
  int k = elements_to_choose;
  if (k > total_elements - k) {
    k = total_elements - k;
  }
  int coefficient = 1;
  int i = 0;
  while (i < k) {
    coefficient = coefficient * (total_elements - i);
    coefficient = coefficient ~/ (i + 1);
    i = i + 1;
  }
  return coefficient;
}

List<int> bell_numbers(int max_set_length) {
  if (max_set_length < 0) {
    _error("max_set_length must be non-negative");
  }
  List<int> bell = <int>[];
  int i = 0;
  while (i <= max_set_length) {
    bell = [...bell, 0];
    i = i + 1;
  }
  while (bell.length <= 0) { bell.add(0); } bell[0] = 1;
  i = 1;
  while (i <= max_set_length) {
    int j = 0;
    while (j < i) {
    while (bell.length <= i) { bell.add(0); } bell[i] = bell[i] + binomial_coefficient(i - 1, j) * bell[j];
    j = j + 1;
  }
    i = i + 1;
  }
  return bell;
}

void _main() {
  print(_str(bell_numbers(5)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
