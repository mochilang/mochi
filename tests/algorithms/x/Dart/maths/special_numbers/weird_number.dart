// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<int> bubble_sort(List<int> xs) {
  List<int> arr = xs;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - i - 1) {
    if (arr[j] > arr[j + 1]) {
    int tmp = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<int> factors(int _num) {
  List<int> values = [1];
  int i = 2;
  while (i * i <= _num) {
    if (_num % i == 0) {
    values = [...values, i];
    int d = _num ~/ i;
    if (d != i) {
    values = [...values, d];
  };
  }
    i = i + 1;
  }
  return bubble_sort(values);
}

int sum_list(List<int> xs) {
  int total = 0;
  int i = 0;
  while (i < xs.length) {
    total = total + xs[i];
    i = i + 1;
  }
  return total;
}

bool abundant(int n) {
  return sum_list(factors(n)) > n;
}

bool semi_perfect(int number) {
  if (number <= 0) {
    return true;
  }
  List<int> values = factors(number);
  List<bool> possible = <bool>[];
  int j = 0;
  while (j <= number) {
    possible = [...possible, j == 0];
    j = j + 1;
  }
  int idx = 0;
  while (idx < values.length) {
    int v = values[idx];
    int s = number;
    while (s >= v) {
    if ((possible[s - v] ?? false)) {
    while (possible.length <= s) { possible.add(false); } possible[s] = true;
  }
    s = s - 1;
  }
    idx = idx + 1;
  }
  return possible[number];
}

bool weird(int number) {
  return abundant(number) && semi_perfect(number) == false;
}

void run_tests() {
  if (!_listEq(factors(12), [1, 2, 3, 4, 6])) {
    _error("factors 12 failed");
  }
  if (!_listEq(factors(1), [1])) {
    _error("factors 1 failed");
  }
  if (!_listEq(factors(100), [1, 2, 4, 5, 10, 20, 25, 50])) {
    _error("factors 100 failed");
  }
  if (abundant(0) != true) {
    _error("abundant 0 failed");
  }
  if (abundant(1) != false) {
    _error("abundant 1 failed");
  }
  if (abundant(12) != true) {
    _error("abundant 12 failed");
  }
  if (abundant(13) != false) {
    _error("abundant 13 failed");
  }
  if (abundant(20) != true) {
    _error("abundant 20 failed");
  }
  if (semi_perfect(0) != true) {
    _error("semi_perfect 0 failed");
  }
  if (semi_perfect(1) != true) {
    _error("semi_perfect 1 failed");
  }
  if (semi_perfect(12) != true) {
    _error("semi_perfect 12 failed");
  }
  if (semi_perfect(13) != false) {
    _error("semi_perfect 13 failed");
  }
  if (weird(0) != false) {
    _error("weird 0 failed");
  }
  if (weird(70) != true) {
    _error("weird 70 failed");
  }
  if (weird(77) != false) {
    _error("weird 77 failed");
  }
}

void _main() {
  run_tests();
  List<int> nums = [69, 70, 71];
  int i = 0;
  while (i < nums.length) {
    int n = nums[i];
    if (weird(n)) {
    print(_str(n) + " is weird.");
  } else {
    print(_str(n) + " is not weird.");
  }
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

