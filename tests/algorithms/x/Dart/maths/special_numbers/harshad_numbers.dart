// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

dynamic panic(String msg) {
}

int char_to_value(String c) {
  String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  int i = 0;
  while (i < digits.length) {
    if (digits.substring(i, i + 1) == c) {
    return i;
  }
    i = i + 1;
  }
  throw Exception("invalid digit");
}

String int_to_base(int number, int base) {
  if (base < 2 || base > 36) {
    throw Exception("'base' must be between 2 and 36 inclusive");
  }
  if (number < 0) {
    throw Exception("number must be a positive integer");
  }
  String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  int n = number;
  String result = "";
  while (n > 0) {
    int remainder = n % base;
    result = digits.substring(remainder, remainder + 1) + result;
    n = n ~/ base;
  }
  if (result == "") {
    result = "0";
  }
  return result;
}

int base_to_int(String num_str, int base) {
  int value = 0;
  int i = 0;
  while (i < num_str.length) {
    String c = num_str.substring(i, i + 1);
    value = value * base + char_to_value(c);
    i = i + 1;
  }
  return value;
}

String sum_of_digits(int _num, int base) {
  if (base < 2 || base > 36) {
    throw Exception("'base' must be between 2 and 36 inclusive");
  }
  String num_str = int_to_base(_num, base);
  int total = 0;
  int i = 0;
  while (i < num_str.length) {
    String c = num_str.substring(i, i + 1);
    total = total + char_to_value(c);
    i = i + 1;
  }
  return int_to_base(total, base);
}

List<String> harshad_numbers_in_base(int limit, int base) {
  if (base < 2 || base > 36) {
    throw Exception("'base' must be between 2 and 36 inclusive");
  }
  if (limit < 0) {
    return List<String>.from([]);
  }
  List<String> numbers = <String>[];
  int i = 1;
  while (i < limit) {
    String s = sum_of_digits(i, base);
    int divisor = base_to_int(s, base);
    if (i % divisor == 0) {
    numbers = [...numbers, int_to_base(i, base)];
  }
    i = i + 1;
  }
  return numbers;
}

bool is_harshad_number_in_base(int _num, int base) {
  if (base < 2 || base > 36) {
    throw Exception("'base' must be between 2 and 36 inclusive");
  }
  if (_num < 0) {
    return false;
  }
  String n = int_to_base(_num, base);
  String d = sum_of_digits(_num, base);
  int n_val = base_to_int(n, base);
  int d_val = base_to_int(d, base);
  return n_val % d_val == 0;
}

void _main() {
  print(int_to_base(0, 21));
  print(int_to_base(23, 2));
  print(int_to_base(58, 5));
  print(int_to_base(167, 16));
  print(sum_of_digits(103, 12));
  print(sum_of_digits(1275, 4));
  print(sum_of_digits(6645, 2));
  print("[" + harshad_numbers_in_base(15, 2).join(', ') + "]");
  print("[" + harshad_numbers_in_base(12, 34).join(', ') + "]");
  print("[" + harshad_numbers_in_base(12, 4).join(', ') + "]");
  print(is_harshad_number_in_base(18, 10));
  print(is_harshad_number_in_base(21, 10));
  print(is_harshad_number_in_base(-21, 5));
}

void _start() {
  _main();
}

void main() => _start();
