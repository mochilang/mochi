// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int pow2(int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

int proth(int number) {
  if (number < 1) {
    _error("Input value must be > 0");
  }
  if (number == 1) {
    return 3;
  }
  if (number == 2) {
    return 5;
  }
  int temp = (number ~/ 3).toInt();
  int pow = 1;
  int block_index = 1;
  while (pow <= temp) {
    pow = pow * 2;
    block_index = block_index + 1;
  }
  List<int> proth_list = [3, 5];
  int proth_index = 2;
  int increment = 3;
  int block = 1;
  while (block < block_index) {
    int i = 0;
    while (i < increment) {
    int next_val = pow2(block + 1) + proth_list[proth_index - 1];
    proth_list = [...proth_list, next_val];
    proth_index = proth_index + 1;
    i = i + 1;
  }
    increment = increment * 2;
    block = block + 1;
  }
  return proth_list[number - 1];
}

void _main() {
  int n = 1;
  while (n <= 10) {
    int value = proth(n);
    print("The " + _str(n) + "th Proth number: " + _str(value));
    n = n + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
