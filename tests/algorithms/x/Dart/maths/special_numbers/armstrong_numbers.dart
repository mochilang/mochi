// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

int pow_int(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

bool armstrong_number(int n) {
  if (n < 1) {
    return false;
  }
  int digits = 0;
  int temp = n;
  while (temp > 0) {
    temp = temp ~/ 10;
    digits = digits + 1;
  }
  int total = 0;
  temp = n;
  while (temp > 0) {
    int rem = temp % 10;
    total = total + pow_int(rem, digits);
    temp = temp ~/ 10;
  }
  return total == n;
}

bool pluperfect_number(int n) {
  if (n < 1) {
    return false;
  }
  List<int> digit_histogram = <int>[];
  int i = 0;
  while (i < 10) {
    digit_histogram = [...digit_histogram, 0];
    i = i + 1;
  }
  int digit_total = 0;
  int temp = n;
  while (temp > 0) {
    int rem = temp % 10;
    while (digit_histogram.length <= rem) { digit_histogram.add(0); } digit_histogram[rem] = digit_histogram[rem] + 1;
    digit_total = digit_total + 1;
    temp = temp ~/ 10;
  }
  int total = 0;
  i = 0;
  while (i < 10) {
    if (digit_histogram[i] > 0) {
    total = total + digit_histogram[i] * pow_int(i, digit_total);
  }
    i = i + 1;
  }
  return total == n;
}

bool narcissistic_number(int n) {
  if (n < 1) {
    return false;
  }
  int digits = 0;
  int temp = n;
  while (temp > 0) {
    temp = temp ~/ 10;
    digits = digits + 1;
  }
  temp = n;
  int total = 0;
  while (temp > 0) {
    int rem = temp % 10;
    total = total + pow_int(rem, digits);
    temp = temp ~/ 10;
  }
  return total == n;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(armstrong_number(371));
  print(armstrong_number(200));
  print(pluperfect_number(371));
  print(pluperfect_number(200));
  print(narcissistic_number(371));
  print(narcissistic_number(200));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
