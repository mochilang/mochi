// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int pow_int(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

bool armstrong_number(int n) {
  if (n < 1) {
    return false;
  }
  int digits = 0;
  int temp = n;
  while (temp > 0) {
    temp = temp ~/ 10;
    digits = digits + 1;
  }
  int total = 0;
  temp = n;
  while (temp > 0) {
    int rem = temp % 10;
    total = total + pow_int(rem, digits);
    temp = temp ~/ 10;
  }
  return total == n;
}

bool pluperfect_number(int n) {
  if (n < 1) {
    return false;
  }
  List<int> digit_histogram = <int>[];
  int i = 0;
  while (i < 10) {
    digit_histogram = [...digit_histogram, 0];
    i = i + 1;
  }
  int digit_total = 0;
  int temp = n;
  while (temp > 0) {
    int rem = temp % 10;
    while (digit_histogram.length <= rem) { digit_histogram.add(0); } digit_histogram[rem] = digit_histogram[rem] + 1;
    digit_total = digit_total + 1;
    temp = temp ~/ 10;
  }
  int total = 0;
  i = 0;
  while (i < 10) {
    if (digit_histogram[i] > 0) {
    total = total + digit_histogram[i] * pow_int(i, digit_total);
  }
    i = i + 1;
  }
  return total == n;
}

bool narcissistic_number(int n) {
  if (n < 1) {
    return false;
  }
  int digits = 0;
  int temp = n;
  while (temp > 0) {
    temp = temp ~/ 10;
    digits = digits + 1;
  }
  temp = n;
  int total = 0;
  while (temp > 0) {
    int rem = temp % 10;
    total = total + pow_int(rem, digits);
    temp = temp ~/ 10;
  }
  return total == n;
}

void main() {
  print(armstrong_number(371));
  print(armstrong_number(200));
  print(pluperfect_number(371));
  print(pluperfect_number(200));
  print(narcissistic_number(371));
  print(narcissistic_number(200));
}
