// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int int_sqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

bool is_pronic(int n) {
  if (n < 0) {
    return false;
  }
  if (n % 2 != 0) {
    return false;
  }
  int root = int_sqrt(n);
  return n == root * (root + 1);
}

void test_is_pronic() {
  if (is_pronic(-1)) {
    throw Exception("-1 should not be pronic");
  }
  if (!is_pronic(0)) {
    throw Exception("0 should be pronic");
  }
  if (!is_pronic(2)) {
    throw Exception("2 should be pronic");
  }
  if (is_pronic(5)) {
    throw Exception("5 should not be pronic");
  }
  if (!is_pronic(6)) {
    throw Exception("6 should be pronic");
  }
  if (is_pronic(8)) {
    throw Exception("8 should not be pronic");
  }
  if (!is_pronic(30)) {
    throw Exception("30 should be pronic");
  }
  if (is_pronic(32)) {
    throw Exception("32 should not be pronic");
  }
  if (!is_pronic(2147441940)) {
    throw Exception("2147441940 should be pronic");
  }
}

void _main() {
  test_is_pronic();
  print(is_pronic(56));
}

void _start() {
  _main();
}

void main() => _start();
