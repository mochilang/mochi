// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int int_sqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

bool is_pronic(int n) {
  if (n < 0) {
    return false;
  }
  if (n % 2 != 0) {
    return false;
  }
  int root = int_sqrt(n);
  return n == root * (root + 1);
}

void test_is_pronic() {
  if (is_pronic(-1)) {
    _error("-1 should not be pronic");
  }
  if (!is_pronic(0)) {
    _error("0 should be pronic");
  }
  if (!is_pronic(2)) {
    _error("2 should be pronic");
  }
  if (is_pronic(5)) {
    _error("5 should not be pronic");
  }
  if (!is_pronic(6)) {
    _error("6 should be pronic");
  }
  if (is_pronic(8)) {
    _error("8 should not be pronic");
  }
  if (!is_pronic(30)) {
    _error("30 should be pronic");
  }
  if (is_pronic(32)) {
    _error("32 should not be pronic");
  }
  if (!is_pronic(2147441940)) {
    _error("2147441940 should be pronic");
  }
}

void _main() {
  test_is_pronic();
  print(is_pronic(56));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
