// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

bool is_happy_number(int _num) {
  if (_num <= 0) {
    _error("num must be a positive integer");
  }
  List<int> seen = <int>[];
  int n = _num;
  while (n != 1) {
    int i = 0;
    while (i < seen.length) {
    if (seen[i] == n) {
    return false;
  }
    i = i + 1;
  }
    seen = [...seen, n];
    int total = 0;
    int temp = n;
    while (temp > 0) {
    int digit = temp % 10;
    total = total + digit * digit;
    temp = temp ~/ 10;
  }
    n = total;
  }
  return true;
}

void test_is_happy_number() {
  if (!is_happy_number(19)) {
    _error("19 should be happy");
  }
  if (is_happy_number(2)) {
    _error("2 should be unhappy");
  }
  if (!is_happy_number(23)) {
    _error("23 should be happy");
  }
  if (!is_happy_number(1)) {
    _error("1 should be happy");
  }
}

void _main() {
  test_is_happy_number();
  print(is_happy_number(19));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
