// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class Polynomial {
  int degree;
  List<double> coefficients;
  Polynomial({required this.degree, required this.coefficients});
}

List<double> copy_list(List<double> xs) {
  List<double> res = <double>[];
  int i = 0;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

Polynomial polynomial_new(int degree, List<double> coeffs) {
  if (coeffs.length != degree + 1) {
    _error("The number of coefficients should be equal to the degree + 1.");
  }
  return Polynomial(degree: degree, coefficients: copy_list(coeffs));
}

Polynomial add(Polynomial p, Polynomial q) {
  if (p.degree > q.degree) {
    List<double> coeffs = copy_list(p.coefficients);
    int i = 0;
    while (i <= q.degree) {
    while (coeffs.length <= i) { coeffs.add(0); } coeffs[i] = coeffs[i] + q.coefficients[i];
    i = i + 1;
  };
    return Polynomial(degree: p.degree, coefficients: coeffs);
  } else {
    List<double> coeffs = copy_list(q.coefficients);
    int i = 0;
    while (i <= p.degree) {
    while (coeffs.length <= i) { coeffs.add(0); } coeffs[i] = coeffs[i] + p.coefficients[i];
    i = i + 1;
  };
    return Polynomial(degree: q.degree, coefficients: coeffs);
  }
}

Polynomial neg(Polynomial p) {
  List<double> coeffs = <double>[];
  int i = 0;
  while (i <= p.degree) {
    coeffs = [...coeffs, -p.coefficients[i]];
    i = i + 1;
  }
  return Polynomial(degree: p.degree, coefficients: coeffs);
}

Polynomial sub(Polynomial p, Polynomial q) {
  return add(p, neg(q));
}

Polynomial mul(Polynomial p, Polynomial q) {
  int size = p.degree + q.degree + 1;
  List<double> coeffs = <double>[];
  int i = 0;
  while (i < size) {
    coeffs = [...coeffs, 0.0];
    i = i + 1;
  }
  i = 0;
  while (i <= p.degree) {
    int j = 0;
    while (j <= q.degree) {
    while (coeffs.length <= i + j) { coeffs.add(0); } coeffs[i + j] = coeffs[i + j] + p.coefficients[i] * q.coefficients[j];
    j = j + 1;
  }
    i = i + 1;
  }
  return Polynomial(degree: p.degree + q.degree, coefficients: coeffs);
}

double power(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double evaluate(Polynomial p, double x) {
  double result = 0.0;
  int i = 0;
  while (i <= p.degree) {
    result = result + p.coefficients[i] * power(x, i);
    i = i + 1;
  }
  return result;
}

String poly_to_string(Polynomial p) {
  String s = "";
  int i = p.degree;
  while (i >= 0) {
    double coeff = p.coefficients[i];
    if (coeff != 0.0) {
    if (s.length > 0) {
    if (coeff > 0.0) {
    s = s + " + ";
  } else {
    s = s + " - ";
  };
  } else {
    if (coeff < 0.0) {
    s = s + "-";
  };
  };
    double abs_coeff = (coeff < 0.0 ? -coeff : coeff);
    if (i == 0) {
    s = s + _str(abs_coeff);
  } else {
    if (i == 1) {
    s = s + _str(abs_coeff) + "x";
  } else {
    s = s + _str(abs_coeff) + "x^" + _str(i);
  };
  };
  }
    i = i - 1;
  }
  if (s == "") {
    s = "0";
  }
  return s;
}

Polynomial derivative(Polynomial p) {
  if (p.degree == 0) {
    return Polynomial(degree: 0, coefficients: [0.0]);
  }
  List<double> coeffs = <double>[];
  int i = 0;
  while (i < p.degree) {
    coeffs = [...coeffs, p.coefficients[i + 1] * ((i + 1).toDouble())];
    i = i + 1;
  }
  return Polynomial(degree: p.degree - 1, coefficients: coeffs);
}

Polynomial integral(Polynomial p, double constant) {
  List<double> coeffs = [constant];
  int i = 0;
  while (i <= p.degree) {
    coeffs = [...coeffs, p.coefficients[i] / ((i + 1).toDouble())];
    i = i + 1;
  }
  return Polynomial(degree: p.degree + 1, coefficients: coeffs);
}

bool equals(Polynomial p, Polynomial q) {
  if (p.degree != q.degree) {
    return false;
  }
  int i = 0;
  while (i <= p.degree) {
    if (p.coefficients[i] != q.coefficients[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

bool not_equals(Polynomial p, Polynomial q) {
  return !equals(p, q);
}

void test_polynomial() {
  Polynomial p = polynomial_new(2, [1.0, 2.0, 3.0]);
  Polynomial q = polynomial_new(2, [1.0, 2.0, 3.0]);
  if (poly_to_string(add(p, q)) != "6x^2 + 4x + 2") {
    _error("add failed");
  }
  if (poly_to_string(sub(p, q)) != "0") {
    _error("sub failed");
  }
  if (evaluate(p, 2.0) != 17.0) {
    _error("evaluate failed");
  }
  if (poly_to_string(derivative(p)) != "6x + 2") {
    _error("derivative failed");
  }
  String integ = poly_to_string(integral(p, 0.0));
  if (integ != "1x^3 + 1x^2 + 1x") {
    _error("integral failed");
  }
  if (!equals(p, q)) {
    _error("equals failed");
  }
  if (not_equals(p, q)) {
    _error("not_equals failed");
  }
}

void _main() {
  test_polynomial();
  Polynomial p = polynomial_new(2, [1.0, 2.0, 3.0]);
  Polynomial d = derivative(p);
  print(poly_to_string(d));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
