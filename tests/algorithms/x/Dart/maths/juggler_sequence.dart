// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double to_float(int x) {
  return x * 1.0;
}

double sqrt(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

int floor(double x) {
  int n = 0;
  double y = x;
  while (y >= 1.0) {
    y = y - 1.0;
    n = n + 1;
  }
  return n;
}

List<int> juggler_sequence(int n) {
  if (n < 1) {
    throw Exception("number must be a positive integer");
  }
  List<int> seq = [n];
  int current = n;
  while (current != 1) {
    if (current % 2 == 0) {
    current = floor(sqrt(to_float(current)));
  } else {
    double r = sqrt(to_float(current));
    current = floor(r * r * r);
  }
    seq = [...seq, current];
  }
  return seq;
}

void main() {
  print((juggler_sequence(3)).toString());
  print((juggler_sequence(10)).toString());
}
