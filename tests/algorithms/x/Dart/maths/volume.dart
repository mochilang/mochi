// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double PI = 3.141592653589793;
double SQRT5 = 2.23606797749979;
double minf(double a, double b) {
  if (a < b) {
    return a;
  }
  return b;
}

double maxf(double a, double b) {
  if (a > b) {
    return a;
  }
  return b;
}

double vol_cube(double side_length) {
  if (side_length < 0.0) {
    throw Exception("vol_cube() only accepts non-negative values");
  }
  return side_length * side_length * side_length;
}

double vol_spherical_cap(double height, double radius) {
  if (height < 0.0 || radius < 0.0) {
    throw Exception("vol_spherical_cap() only accepts non-negative values");
  }
  return 1.0 / 3.0 * PI * height * height * (3.0 * radius - height);
}

double vol_sphere(double radius) {
  if (radius < 0.0) {
    throw Exception("vol_sphere() only accepts non-negative values");
  }
  return 4.0 / 3.0 * PI * radius * radius * radius;
}

double vol_spheres_intersect(double radius_1, double radius_2, double centers_distance) {
  if (radius_1 < 0.0 || radius_2 < 0.0 || centers_distance < 0.0) {
    throw Exception("vol_spheres_intersect() only accepts non-negative values");
  }
  if (centers_distance == 0.0) {
    return vol_sphere(minf(radius_1, radius_2));
  }
  double h1 = (radius_1 - radius_2 + centers_distance) * (radius_1 + radius_2 - centers_distance) / (2.0 * centers_distance);
  double h2 = (radius_2 - radius_1 + centers_distance) * (radius_2 + radius_1 - centers_distance) / (2.0 * centers_distance);
  return vol_spherical_cap(h1, radius_2) + vol_spherical_cap(h2, radius_1);
}

double vol_spheres_union(double radius_1, double radius_2, double centers_distance) {
  if (radius_1 <= 0.0 || radius_2 <= 0.0 || centers_distance < 0.0) {
    throw Exception("vol_spheres_union() only accepts non-negative values, non-zero radius");
  }
  if (centers_distance == 0.0) {
    return vol_sphere(maxf(radius_1, radius_2));
  }
  return vol_sphere(radius_1) + vol_sphere(radius_2) - vol_spheres_intersect(radius_1, radius_2, centers_distance);
}

double vol_cuboid(double width, double height, double length) {
  if (width < 0.0 || height < 0.0 || length < 0.0) {
    throw Exception("vol_cuboid() only accepts non-negative values");
  }
  return width * height * length;
}

double vol_cone(double area_of_base, double height) {
  if (height < 0.0 || area_of_base < 0.0) {
    throw Exception("vol_cone() only accepts non-negative values");
  }
  return area_of_base * height / 3.0;
}

double vol_right_circ_cone(double radius, double height) {
  if (height < 0.0 || radius < 0.0) {
    throw Exception("vol_right_circ_cone() only accepts non-negative values");
  }
  return PI * radius * radius * height / 3.0;
}

double vol_prism(double area_of_base, double height) {
  if (height < 0.0 || area_of_base < 0.0) {
    throw Exception("vol_prism() only accepts non-negative values");
  }
  return area_of_base * height;
}

double vol_pyramid(double area_of_base, double height) {
  if (height < 0.0 || area_of_base < 0.0) {
    throw Exception("vol_pyramid() only accepts non-negative values");
  }
  return area_of_base * height / 3.0;
}

double vol_hemisphere(double radius) {
  if (radius < 0.0) {
    throw Exception("vol_hemisphere() only accepts non-negative values");
  }
  return radius * radius * radius * PI * 2.0 / 3.0;
}

double vol_circular_cylinder(double radius, double height) {
  if (height < 0.0 || radius < 0.0) {
    throw Exception("vol_circular_cylinder() only accepts non-negative values");
  }
  return radius * radius * height * PI;
}

double vol_hollow_circular_cylinder(double inner_radius, double outer_radius, double height) {
  if (inner_radius < 0.0 || outer_radius < 0.0 || height < 0.0) {
    throw Exception("vol_hollow_circular_cylinder() only accepts non-negative values");
  }
  if (outer_radius <= inner_radius) {
    throw Exception("outer_radius must be greater than inner_radius");
  }
  return PI * (outer_radius * outer_radius - inner_radius * inner_radius) * height;
}

double vol_conical_frustum(double height, double radius_1, double radius_2) {
  if (radius_1 < 0.0 || radius_2 < 0.0 || height < 0.0) {
    throw Exception("vol_conical_frustum() only accepts non-negative values");
  }
  return 1.0 / 3.0 * PI * height * (radius_1 * radius_1 + radius_2 * radius_2 + radius_1 * radius_2);
}

double vol_torus(double torus_radius, double tube_radius) {
  if (torus_radius < 0.0 || tube_radius < 0.0) {
    throw Exception("vol_torus() only accepts non-negative values");
  }
  return 2.0 * PI * PI * torus_radius * tube_radius * tube_radius;
}

double vol_icosahedron(double tri_side) {
  if (tri_side < 0.0) {
    throw Exception("vol_icosahedron() only accepts non-negative values");
  }
  return tri_side * tri_side * tri_side * (3.0 + SQRT5) * 5.0 / 12.0;
}

void _main() {
  print("Volumes:");
  print("Cube: " + (vol_cube(2.0)).toString());
  print("Cuboid: " + (vol_cuboid(2.0, 2.0, 2.0)).toString());
  print("Cone: " + (vol_cone(2.0, 2.0)).toString());
  print("Right Circular Cone: " + (vol_right_circ_cone(2.0, 2.0)).toString());
  print("Prism: " + (vol_prism(2.0, 2.0)).toString());
  print("Pyramid: " + (vol_pyramid(2.0, 2.0)).toString());
  print("Sphere: " + (vol_sphere(2.0)).toString());
  print("Hemisphere: " + (vol_hemisphere(2.0)).toString());
  print("Circular Cylinder: " + (vol_circular_cylinder(2.0, 2.0)).toString());
  print("Torus: " + (vol_torus(2.0, 2.0)).toString());
  print("Conical Frustum: " + (vol_conical_frustum(2.0, 2.0, 4.0)).toString());
  print("Spherical cap: " + (vol_spherical_cap(1.0, 2.0)).toString());
  print("Spheres intersection: " + (vol_spheres_intersect(2.0, 2.0, 1.0)).toString());
  print("Spheres union: " + (vol_spheres_union(2.0, 2.0, 1.0)).toString());
  print("Hollow Circular Cylinder: " + (vol_hollow_circular_cylinder(1.0, 2.0, 3.0)).toString());
  print("Icosahedron: " + (vol_icosahedron(2.5)).toString());
}

void _start() {
  _main();
}

void main() => _start();
