// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

int factorial(int n) {
  if (n < 0) {
    _error("factorial is undefined for negative numbers");
  }
  int result = 1;
  int i = 2;
  while (i <= n) {
    result = result * i;
    i = i + 1;
  }
  return result;
}

double pow_float(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double binomial_distribution(int successes, int trials, double prob) {
  if (successes > trials) {
    _error("successes must be lower or equal to trials");
  }
  if (trials < 0 || successes < 0) {
    _error("the function is defined for non-negative integers");
  }
  if (!(0.0 < prob && prob < 1.0)) {
    _error("prob has to be in range of 1 - 0");
  }
  double probability = pow_float(prob, successes) * pow_float(1.0 - prob, trials - successes);
  double numerator = factorial(trials).toDouble();
  double denominator = (factorial(successes) * factorial(trials - successes)).toDouble();
  double coefficient = numerator / denominator;
  return probability * coefficient;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
