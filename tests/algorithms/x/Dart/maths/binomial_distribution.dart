// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

int factorial(int n) {
  if (n < 0) {
    throw Exception("factorial is undefined for negative numbers");
  }
  int result = 1;
  int i = 2;
  while (i <= n) {
    result = result * i;
    i = i + 1;
  }
  return result;
}

double pow_float(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double binomial_distribution(int successes, int trials, double prob) {
  if (successes > trials) {
    throw Exception("successes must be lower or equal to trials");
  }
  if (trials < 0 || successes < 0) {
    throw Exception("the function is defined for non-negative integers");
  }
  if (!(0.0 < prob && prob < 1.0)) {
    throw Exception("prob has to be in range of 1 - 0");
  }
  double probability = pow_float(prob, successes) * pow_float(1.0 - prob, trials - successes);
  double numerator = factorial(trials) as double;
  double denominator = factorial(successes) * factorial(trials - successes) as double;
  double coefficient = numerator / denominator;
  return probability * coefficient;
}

void main() {
}
