// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  } else {
    return x;
  }
}

double trapezoidal_area(dynamic f, double x_start, double x_end, int steps) {
  double step = (x_end - x_start) / steps.toDouble();
  double x1 = x_start;
  double fx1 = f(x_start);
  double area = 0.0;
  int i = 0;
  while (i < steps) {
    double x2 = x1 + step;
    double fx2 = f(x2);
    area = area + abs_float(fx2 + fx1) * step / 2.0;
    x1 = x2;
    fx1 = fx2;
    i = i + 1;
  }
  return area;
}

double f(double x) {
  return x * x * x + x * x;
}

int i = 10;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("f(x) = x^3 + x^2");
  print("The area between the curve, x = -5, x = 5 and the x axis is:");
  while (i <= 100000) {
    double result = trapezoidal_area(f, -5.0, 5.0, i);
    print("with " + _str(i) + " steps: " + _str(result));
    i = i * 10;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
