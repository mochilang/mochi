// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class PollardResult {
  int factor;
  bool ok;
  PollardResult({required this.factor, required this.ok});
}

int gcd(int a, int b) {
  int x = (a < 0 ? -a : a);
  int y = (b < 0 ? -b : b);
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

int rand_fn(int value, int step, int modulus) {
  return (value * value + step) % modulus;
}

PollardResult pollard_rho(int _num, int seed, int step, int attempts) {
  if (_num < 2) {
    throw Exception("The input value cannot be less than 2");
  }
  if (_num > 2 && _num % 2 == 0) {
    return PollardResult(factor: 2, ok: true);
  }
  int s = seed;
  int st = step;
  int i = 0;
  while (i < attempts) {
    int tortoise = s;
    int hare = s;
    while (true) {
    tortoise = rand_fn(tortoise, st, _num);
    hare = rand_fn(hare, st, _num);
    hare = rand_fn(hare, st, _num);
    int divisor = gcd(hare - tortoise, _num);
    if (divisor == 1) {
    continue;
  } else {
    if (divisor == _num) {
    break;
  } else {
    return PollardResult(factor: divisor, ok: true);
  };
  }
  }
    s = hare;
    st = st + 1;
    i = i + 1;
  }
  return PollardResult(factor: 0, ok: false);
}

void test_pollard_rho() {
  PollardResult r1 = pollard_rho(8051, 2, 1, 5);
  if (!r1.ok || r1.factor != 83 && r1.factor != 97) {
    throw Exception("test1 failed");
  }
  PollardResult r2 = pollard_rho(10403, 2, 1, 5);
  if (!r2.ok || r2.factor != 101 && r2.factor != 103) {
    throw Exception("test2 failed");
  }
  PollardResult r3 = pollard_rho(100, 2, 1, 3);
  if (!r3.ok || r3.factor != 2) {
    throw Exception("test3 failed");
  }
  PollardResult r4 = pollard_rho(17, 2, 1, 3);
  if (r4.ok) {
    throw Exception("test4 failed");
  }
  PollardResult r5 = pollard_rho(17 * 17 * 17, 2, 1, 3);
  if (!r5.ok || r5.factor != 17) {
    throw Exception("test5 failed");
  }
  PollardResult r6 = pollard_rho(17 * 17 * 17, 2, 1, 1);
  if (r6.ok) {
    throw Exception("test6 failed");
  }
  PollardResult r7 = pollard_rho(3 * 5 * 7, 2, 1, 3);
  if (!r7.ok || r7.factor != 21) {
    throw Exception("test7 failed");
  }
}

void _main() {
  test_pollard_rho();
  PollardResult a = pollard_rho(100, 2, 1, 3);
  if (a.ok) {
    print((a.factor).toString());
  } else {
    print("None");
  }
  PollardResult b = pollard_rho(17, 2, 1, 3);
  if (b.ok) {
    print((b.factor).toString());
  } else {
    print("None");
  }
}

void _start() {
  _main();
}

void main() => _start();
