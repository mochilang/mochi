// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int mod(int a, int n) {
  int r = a % n;
  if (r < 0) {
    return r + n;
  }
  return r;
}

int greatest_common_divisor(int a, int b) {
  int x = (a < 0 ? -a : a);
  int y = (b < 0 ? -b : b);
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

List<int> extended_gcd(int a, int b) {
  if (b == 0) {
    return [a, 1, 0];
  }
  List<int> res = extended_gcd(b, a % b);
  int d = res[0];
  int p = res[1];
  int q = res[2];
  int x = q;
  int y = p - q * (a ~/ b);
  return [d, x, y];
}

List<int> extended_euclid(int a, int b) {
  if (b == 0) {
    return [1, 0];
  }
  List<int> res = extended_euclid(b, a % b);
  int x = res[1];
  int y = res[0] - a ~/ b * res[1];
  return [x, y];
}

int invert_modulo(int a, int n) {
  List<int> res = extended_euclid(a, n);
  int inv = res[0];
  return mod(inv, n);
}

int modular_division(int a, int b, int n) {
  if (n <= 1) {
    throw Exception("n must be > 1");
  }
  if (a <= 0) {
    throw Exception("a must be > 0");
  }
  if (greatest_common_divisor(a, n) != 1) {
    throw Exception("gcd(a,n) != 1");
  }
  List<int> eg = extended_gcd(n, a);
  int s = eg[2];
  return mod(b * s, n);
}

int modular_division2(int a, int b, int n) {
  int s = invert_modulo(a, n);
  return mod(b * s, n);
}

void tests() {
  if (modular_division(4, 8, 5) != 2) {
    throw Exception("md1");
  }
  if (modular_division(3, 8, 5) != 1) {
    throw Exception("md2");
  }
  if (modular_division(4, 11, 5) != 4) {
    throw Exception("md3");
  }
  if (modular_division2(4, 8, 5) != 2) {
    throw Exception("md21");
  }
  if (modular_division2(3, 8, 5) != 1) {
    throw Exception("md22");
  }
  if (modular_division2(4, 11, 5) != 4) {
    throw Exception("md23");
  }
  if (invert_modulo(2, 5) != 3) {
    throw Exception("inv");
  }
  List<int> eg = extended_gcd(10, 6);
  if (eg[0] != 2 || eg[1] != -1 || eg[2] != 2) {
    throw Exception("eg");
  }
  List<int> eu = extended_euclid(10, 6);
  if (eu[0] != -1 || eu[1] != 2) {
    throw Exception("eu");
  }
  if (greatest_common_divisor(121, 11) != 11) {
    throw Exception("gcd");
  }
}

void _main() {
  tests();
  print((modular_division(4, 8, 5)).toString());
}

void _start() {
  _main();
}

void main() => _start();
