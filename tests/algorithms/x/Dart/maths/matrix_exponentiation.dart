// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> identity(int n) {
  int i = 0;
  List<List<int>> mat = <List<int>>[];
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 1];
  } else {
    row = [...row, 0];
  }
    j = j + 1;
  }
    mat = ([...mat, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return mat;
}

List<List<int>> matrix_mul(List<List<int>> a, List<List<int>> b) {
  int n = a.length;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    int cell = 0;
    int k = 0;
    while (k < n) {
    cell = cell + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = [...row, cell];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> matrix_pow(List<List<int>> base, int exp) {
  List<List<int>> result = identity(base.length);
  List<List<int>> b = base;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = matrix_mul(result, b);
  }
    b = matrix_mul(b, b);
    e = e ~/ 2;
  }
  return result;
}

int fibonacci_with_matrix_exponentiation(int n, int f1, int f2) {
  if (n == 1) {
    return f1;
  }
  if (n == 2) {
    return f2;
  }
  List<List<int>> base = [[1, 1], [1, 0]];
  List<List<int>> m = matrix_pow(base, n - 2);
  return f2 * m[0][0] + f1 * m[0][1];
}

int simple_fibonacci(int n, int f1, int f2) {
  if (n == 1) {
    return f1;
  }
  if (n == 2) {
    return f2;
  }
  int a = f1;
  int b = f2;
  int count = n - 2;
  while (count > 0) {
    int tmp = a + b;
    a = b;
    b = tmp;
    count = count - 1;
  }
  return b;
}

void main() {
  print((fibonacci_with_matrix_exponentiation(1, 5, 6)).toString());
  print((fibonacci_with_matrix_exponentiation(2, 10, 11)).toString());
  print((fibonacci_with_matrix_exponentiation(13, 0, 1)).toString());
  print((fibonacci_with_matrix_exponentiation(10, 5, 9)).toString());
  print((fibonacci_with_matrix_exponentiation(9, 2, 3)).toString());
  print((simple_fibonacci(1, 5, 6)).toString());
  print((simple_fibonacci(2, 10, 11)).toString());
  print((simple_fibonacci(13, 0, 1)).toString());
  print((simple_fibonacci(10, 5, 9)).toString());
  print((simple_fibonacci(9, 2, 3)).toString());
}
