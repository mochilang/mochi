// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double pow_float(double base, int exponent) {
  int exp = exponent;
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double evaluate_poly(List<double> poly, double x) {
  double total = 0.0;
  int i = 0;
  while (i < poly.length) {
    total = total + poly[i] * pow_float(x, i);
    i = i + 1;
  }
  return total;
}

double horner(List<double> poly, double x) {
  double result = 0.0;
  int i = poly.length - 1;
  while (i >= 0) {
    result = result * x + poly[i];
    i = i - 1;
  }
  return result;
}

void test_polynomial_evaluation() {
  List<double> poly = [0.0, 0.0, 5.0, 9.3, 7.0];
  double x = 10.0;
  if (evaluate_poly(poly, x) != 79800.0) {
    _error("evaluate_poly failed");
  }
  if (horner(poly, x) != 79800.0) {
    _error("horner failed");
  }
}

void _main() {
  test_polynomial_evaluation();
  List<double> poly = [0.0, 0.0, 5.0, 9.3, 7.0];
  double x = 10.0;
  print(evaluate_poly(poly, x));
  print(horner(poly, x));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
