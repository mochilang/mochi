// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_prime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  int i = 3;
  while (i * i <= n) {
    if (n % i == 0) {
    return false;
  }
    i = i + 2;
  }
  return true;
}

int twin_prime(int number) {
  if (is_prime(number) && is_prime(number + 2)) {
    return number + 2;
  }
  return -1;
}

void test_twin_prime() {
  if (twin_prime(3) != 5) {
    throw Exception("twin_prime(3) failed");
  }
  if (twin_prime(4) != -1) {
    throw Exception("twin_prime(4) failed");
  }
  if (twin_prime(5) != 7) {
    throw Exception("twin_prime(5) failed");
  }
  if (twin_prime(17) != 19) {
    throw Exception("twin_prime(17) failed");
  }
  if (twin_prime(0) != -1) {
    throw Exception("twin_prime(0) failed");
  }
}

void _main() {
  test_twin_prime();
  print(twin_prime(3));
}

void _start() {
  _main();
}

void main() => _start();
