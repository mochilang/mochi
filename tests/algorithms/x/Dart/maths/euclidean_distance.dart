// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double euclidean_distance(List<double> v1, List<double> v2) {
  double sum = 0.0;
  int i = 0;
  while (i < v1.length) {
    double diff = v1[i] - v2[i];
    sum = sum + diff * diff;
    i = i + 1;
  }
  return sqrtApprox(sum);
}

double euclidean_distance_no_np(List<double> v1, List<double> v2) {
  return euclidean_distance(v1, v2);
}

void _main() {
  print((euclidean_distance([0.0, 0.0], [2.0, 2.0])).toString());
  print((euclidean_distance([0.0, 0.0, 0.0], [2.0, 2.0, 2.0])).toString());
  print((euclidean_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])).toString());
  print((euclidean_distance_no_np([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])).toString());
  print((euclidean_distance_no_np([0.0, 0.0], [2.0, 2.0])).toString());
}

void _start() {
  _main();
}

void main() => _start();
