// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int factorial(int n) {
  if (n < 0) {
    throw Exception("factorial() not defined for negative values");
  }
  int value = 1;
  int i = 1;
  while (i <= n) {
    value = value * i;
    i = i + 1;
  }
  return value;
}

int factorial_recursive(int n) {
  if (n < 0) {
    throw Exception("factorial() not defined for negative values");
  }
  if (n <= 1) {
    return 1;
  }
  return n * factorial_recursive(n - 1);
}

void test_zero() {
  if (factorial(0) != 1) {
    throw Exception("factorial(0) failed");
  }
  if (factorial_recursive(0) != 1) {
    throw Exception("factorial_recursive(0) failed");
  }
}

void test_positive_integers() {
  if (factorial(1) != 1) {
    throw Exception("factorial(1) failed");
  }
  if (factorial_recursive(1) != 1) {
    throw Exception("factorial_recursive(1) failed");
  }
  if (factorial(5) != 120) {
    throw Exception("factorial(5) failed");
  }
  if (factorial_recursive(5) != 120) {
    throw Exception("factorial_recursive(5) failed");
  }
  if (factorial(7) != 5040) {
    throw Exception("factorial(7) failed");
  }
  if (factorial_recursive(7) != 5040) {
    throw Exception("factorial_recursive(7) failed");
  }
}

void test_large_number() {
  if (factorial(10) != 3628800) {
    throw Exception("factorial(10) failed");
  }
  if (factorial_recursive(10) != 3628800) {
    throw Exception("factorial_recursive(10) failed");
  }
}

void run_tests() {
  test_zero();
  test_positive_integers();
  test_large_number();
}

void _main() {
  run_tests();
  print(factorial(6));
}

void _start() {
  _main();
}

void main() => _start();
