// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

double PI = 3.141592653589793;
double floor(double x) {
  int i = x.toInt();
  if (i.toDouble() > x) {
    i = i - 1;
  }
  return i.toDouble();
}

double pow(double x, int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * x;
    i = i + 1;
  }
  return result;
}

double factorial(int n) {
  double result = 1.0;
  int i = 2;
  while (i <= n) {
    result = result * i.toDouble();
    i = i + 1;
  }
  return result;
}

double maclaurin_sin(double theta, int accuracy) {
  double t = theta;
  double div = floor(t / (2.0 * PI));
  t = t - 2.0 * div * PI;
  double sum = 0.0;
  int r = 0;
  while (r < accuracy) {
    int power = 2 * r + 1;
    dynamic sign = (r % 2 == 0 ? 1.0 : -1.0);
    sum = sum + sign * pow(t, power) / factorial(power);
    r = r + 1;
  }
  return sum;
}

double maclaurin_cos(double theta, int accuracy) {
  double t = theta;
  double div = floor(t / (2.0 * PI));
  t = t - 2.0 * div * PI;
  double sum = 0.0;
  int r = 0;
  while (r < accuracy) {
    int power = 2 * r;
    dynamic sign = (r % 2 == 0 ? 1.0 : -1.0);
    sum = sum + sign * pow(t, power) / factorial(power);
    r = r + 1;
  }
  return sum;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(maclaurin_sin(10.0, 30)));
  print(_str(maclaurin_sin(-10.0, 30)));
  print(_str(maclaurin_sin(10.0, 15)));
  print(_str(maclaurin_sin(-10.0, 15)));
  print(_str(maclaurin_cos(5.0, 30)));
  print(_str(maclaurin_cos(-5.0, 30)));
  print(_str(maclaurin_cos(10.0, 15)));
  print(_str(maclaurin_cos(-10.0, 15)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
