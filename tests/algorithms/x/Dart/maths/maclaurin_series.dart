// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double PI = 3.141592653589793;
double floor(double x) {
  int i = x as int;
  if ((i as double) > x) {
    i = i - 1;
  }
  return i as double;
}

double pow(double x, int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * x;
    i = i + 1;
  }
  return result;
}

double factorial(int n) {
  double result = 1.0;
  int i = 2;
  while (i <= n) {
    result = result * (i as double);
    i = i + 1;
  }
  return result;
}

double maclaurin_sin(double theta, int accuracy) {
  double t = theta;
  double div = floor(t / (2.0 * PI));
  t = t - 2.0 * div * PI;
  double sum = 0.0;
  int r = 0;
  while (r < accuracy) {
    int power = 2 * r + 1;
    dynamic sign = (r % 2 == 0 ? 1.0 : -1.0);
    sum = sum + sign * pow(t, power) / factorial(power);
    r = r + 1;
  }
  return sum;
}

double maclaurin_cos(double theta, int accuracy) {
  double t = theta;
  double div = floor(t / (2.0 * PI));
  t = t - 2.0 * div * PI;
  double sum = 0.0;
  int r = 0;
  while (r < accuracy) {
    int power = 2 * r;
    dynamic sign = (r % 2 == 0 ? 1.0 : -1.0);
    sum = sum + sign * pow(t, power) / factorial(power);
    r = r + 1;
  }
  return sum;
}

void main() {
  print((maclaurin_sin(10.0, 30)).toString());
  print((maclaurin_sin(-10.0, 30)).toString());
  print((maclaurin_sin(10.0, 15)).toString());
  print((maclaurin_sin(-10.0, 15)).toString());
  print((maclaurin_cos(5.0, 30)).toString());
  print((maclaurin_cos(-5.0, 30)).toString());
  print((maclaurin_cos(10.0, 15)).toString());
  print((maclaurin_cos(-10.0, 15)).toString());
}
