// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<int> prime_sieve_eratosthenes(int _num) {
  if (_num <= 0) {
    _error("Input must be a positive integer");
  }
  List<bool> primes = <bool>[];
  int i = 0;
  while (i <= _num) {
    primes = [...primes, true];
    i = i + 1;
  }
  int p = 2;
  while (p * p <= _num) {
    if ((primes[p] ?? false)) {
    int j = p * p;
    while (j <= _num) {
    while (primes.length <= j) { primes.add(false); } primes[j] = false;
    j = j + p;
  };
  }
    p = p + 1;
  }
  List<int> result = <int>[];
  int k = 2;
  while (k <= _num) {
    if ((primes[k] ?? false)) {
    result = [...result, k];
  }
    k = k + 1;
  }
  return result;
}

bool list_eq(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_prime_sieve_eratosthenes() {
  if (!list_eq(prime_sieve_eratosthenes(10), [2, 3, 5, 7])) {
    _error("test 10 failed");
  }
  if (!list_eq(prime_sieve_eratosthenes(20), [2, 3, 5, 7, 11, 13, 17, 19])) {
    _error("test 20 failed");
  }
  if (!list_eq(prime_sieve_eratosthenes(2), [2])) {
    _error("test 2 failed");
  }
  if (prime_sieve_eratosthenes(1).length != 0) {
    _error("test 1 failed");
  }
}

void _main() {
  test_prime_sieve_eratosthenes();
  print(_str(prime_sieve_eratosthenes(20)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
