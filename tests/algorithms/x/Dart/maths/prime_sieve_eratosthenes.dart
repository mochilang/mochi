// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> prime_sieve_eratosthenes(int _num) {
  if (_num <= 0) {
    throw Exception("Input must be a positive integer");
  }
  List<bool> primes = <bool>[];
  int i = 0;
  while (i <= _num) {
    primes = [...primes, true];
    i = i + 1;
  }
  int p = 2;
  while (p * p <= _num) {
    if (primes[p]) {
    int j = p * p;
    while (j <= _num) {
    while (primes.length <= j) { primes.add(false); } primes[j] = false;
    j = j + p;
  };
  }
    p = p + 1;
  }
  List<int> result = <int>[];
  int k = 2;
  while (k <= _num) {
    if (primes[k]) {
    result = [...result, k];
  }
    k = k + 1;
  }
  return result;
}

bool list_eq(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_prime_sieve_eratosthenes() {
  if (!list_eq(prime_sieve_eratosthenes(10), [2, 3, 5, 7])) {
    throw Exception("test 10 failed");
  }
  if (!list_eq(prime_sieve_eratosthenes(20), [2, 3, 5, 7, 11, 13, 17, 19])) {
    throw Exception("test 20 failed");
  }
  if (!list_eq(prime_sieve_eratosthenes(2), [2])) {
    throw Exception("test 2 failed");
  }
  if (prime_sieve_eratosthenes(1).length != 0) {
    throw Exception("test 1 failed");
  }
}

void _main() {
  test_prime_sieve_eratosthenes();
  print((prime_sieve_eratosthenes(20)).toString());
}

void _start() {
  _main();
}

void main() => _start();
