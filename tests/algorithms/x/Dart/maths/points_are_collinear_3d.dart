// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Point3d {
  double x;
  double y;
  double z;
  Point3d({required this.x, required this.y, required this.z});
}

class Vector3d {
  double x;
  double y;
  double z;
  Vector3d({required this.x, required this.y, required this.z});
}

Vector3d create_vector(Point3d p1, Point3d p2) {
  double vx = p2.x - p1.x;
  double vy = p2.y - p1.y;
  double vz = p2.z - p1.z;
  return Vector3d(x: vx, y: vy, z: vz);
}

Vector3d get_3d_vectors_cross(Vector3d ab, Vector3d ac) {
  double cx = ab.y * ac.z - ab.z * ac.y;
  double cy = ab.z * ac.x - ab.x * ac.z;
  double cz = ab.x * ac.y - ab.y * ac.x;
  return Vector3d(x: cx, y: cy, z: cz);
}

double pow10(int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double round_float(double x, int digits) {
  double factor = pow10(digits);
  double v = x * factor;
  if (v >= 0.0) {
    v = v + 0.5;
  } else {
    v = v - 0.5;
  }
  int t = v as int;
  return (t as double) / factor;
}

bool is_zero_vector(Vector3d v, int accuracy) {
  return round_float(v.x, accuracy) == 0.0 && round_float(v.y, accuracy) == 0.0 && round_float(v.z, accuracy) == 0.0;
}

bool are_collinear(Point3d a, Point3d b, Point3d c, int accuracy) {
  Vector3d ab = create_vector(a, b);
  Vector3d ac = create_vector(a, c);
  Vector3d cross = get_3d_vectors_cross(ab, ac);
  return is_zero_vector(cross, accuracy);
}

void test_are_collinear() {
  Point3d p1 = Point3d(x: 0.0, y: 0.0, z: 0.0);
  Point3d p2 = Point3d(x: 1.0, y: 1.0, z: 1.0);
  Point3d p3 = Point3d(x: 2.0, y: 2.0, z: 2.0);
  if (!are_collinear(p1, p2, p3, 10)) {
    throw Exception("collinear test failed");
  }
  Point3d q3 = Point3d(x: 1.0, y: 2.0, z: 3.0);
  if (are_collinear(p1, p2, q3, 10)) {
    throw Exception("non-collinear test failed");
  }
}

void _main() {
  test_are_collinear();
  Point3d a = Point3d(x: 4.802293498137402, y: 3.536233125455244, z: 0.0);
  Point3d b = Point3d(x: -2.186788107953106, y: -9.24561398001649, z: 7.141509524846482);
  Point3d c = Point3d(x: 1.530169574640268, y: -2.447927606600034, z: 3.343487096469054);
  print((are_collinear(a, b, c, 10)).toString());
  Point3d d = Point3d(x: 2.399001826862445, y: -2.452009976680793, z: 4.464656666157666);
  Point3d e = Point3d(x: -3.682816335934376, y: 5.753788986533145, z: 9.490993909044244);
  Point3d f = Point3d(x: 1.962903518985307, y: 3.741415730125627, z: 7.0);
  print((are_collinear(d, e, f, 10)).toString());
}

void _start() {
  _main();
}

void main() => _start();
