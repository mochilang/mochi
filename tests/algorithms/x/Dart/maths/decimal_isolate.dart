// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double floor(double x) {
  int i = x as int;
  if ((i as double) > x) {
    i = i - 1;
  }
  return i as double;
}

double pow10(int n) {
  double p = 1.0;
  int i = 0;
  while (i < n) {
    p = p * 10.0;
    i = i + 1;
  }
  return p;
}

double round(double x, int n) {
  double m = pow10(n);
  return floor(x * m + 0.5) / m;
}

double decimal_isolate(double number, int digit_amount) {
  int whole = number as int;
  double frac = number - (whole as double);
  if (digit_amount > 0) {
    return round(frac, digit_amount);
  }
  return frac;
}

void _main() {
  print((decimal_isolate(1.53, 0)).toString());
  print((decimal_isolate(35.345, 1)).toString());
  print((decimal_isolate(35.345, 2)).toString());
  print((decimal_isolate(35.345, 3)).toString());
  print((decimal_isolate(-14.789, 3)).toString());
  print((decimal_isolate(0.0, 2)).toString());
  print((decimal_isolate(-14.123, 1)).toString());
  print((decimal_isolate(-14.123, 2)).toString());
  print((decimal_isolate(-14.123, 3)).toString());
}

void _start() {
  _main();
}

void main() => _start();
