// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int multiplicative_persistence(int _num) {
  if (_num < 0) {
    throw Exception("multiplicative_persistence() does not accept negative values");
  }
  int steps = 0;
  int n = _num;
  while (n >= 10) {
    int product = 1;
    int temp = n;
    while (temp > 0) {
    int digit = temp % 10;
    product = product * digit;
    temp = temp ~/ 10;
  }
    n = product;
    steps = steps + 1;
  }
  return steps;
}

int additive_persistence(int _num) {
  if (_num < 0) {
    throw Exception("additive_persistence() does not accept negative values");
  }
  int steps = 0;
  int n = _num;
  while (n >= 10) {
    int total = 0;
    int temp = n;
    while (temp > 0) {
    int digit = temp % 10;
    total = total + digit;
    temp = temp ~/ 10;
  }
    n = total;
    steps = steps + 1;
  }
  return steps;
}

void test_persistence() {
  if (multiplicative_persistence(217) != 2) {
    throw Exception("multiplicative_persistence failed");
  }
  if (additive_persistence(199) != 3) {
    throw Exception("additive_persistence failed");
  }
}

void _main() {
  test_persistence();
  print((multiplicative_persistence(217)).toString());
  print((additive_persistence(199)).toString());
}

void _start() {
  _main();
}

void main() => _start();
