// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int multiplicative_persistence(int _num) {
  if (_num < 0) {
    _error("multiplicative_persistence() does not accept negative values");
  }
  int steps = 0;
  int n = _num;
  while (n >= 10) {
    int product = 1;
    int temp = n;
    while (temp > 0) {
    int digit = temp % 10;
    product = product * digit;
    temp = temp ~/ 10;
  }
    n = product;
    steps = steps + 1;
  }
  return steps;
}

int additive_persistence(int _num) {
  if (_num < 0) {
    _error("additive_persistence() does not accept negative values");
  }
  int steps = 0;
  int n = _num;
  while (n >= 10) {
    int total = 0;
    int temp = n;
    while (temp > 0) {
    int digit = temp % 10;
    total = total + digit;
    temp = temp ~/ 10;
  }
    n = total;
    steps = steps + 1;
  }
  return steps;
}

void test_persistence() {
  if (multiplicative_persistence(217) != 2) {
    _error("multiplicative_persistence failed");
  }
  if (additive_persistence(199) != 3) {
    _error("additive_persistence failed");
  }
}

void _main() {
  test_persistence();
  print(_str(multiplicative_persistence(217)));
  print(_str(additive_persistence(199)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
