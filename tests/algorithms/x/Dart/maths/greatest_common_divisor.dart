// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

int greatest_common_divisor(int a, int b) {
  int x = abs_int(a);
  int y = abs_int(b);
  if (x == 0) {
    return y;
  }
  return greatest_common_divisor(y % x, x);
}

int gcd_by_iterative(int x, int y) {
  int a = abs_int(x);
  int b = abs_int(y);
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(greatest_common_divisor(24, 40)));
  print(_str(greatest_common_divisor(1, 1)));
  print(_str(greatest_common_divisor(1, 800)));
  print(_str(greatest_common_divisor(11, 37)));
  print(_str(greatest_common_divisor(3, 5)));
  print(_str(greatest_common_divisor(16, 4)));
  print(_str(greatest_common_divisor(-3, 9)));
  print(_str(greatest_common_divisor(9, -3)));
  print(_str(greatest_common_divisor(3, -9)));
  print(_str(greatest_common_divisor(-3, -9)));
  print(_str(gcd_by_iterative(24, 40)));
  print(_str(greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)));
  print(_str(gcd_by_iterative(-3, -9)));
  print(_str(gcd_by_iterative(3, -9)));
  print(_str(gcd_by_iterative(1, -800)));
  print(_str(gcd_by_iterative(11, 37)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
