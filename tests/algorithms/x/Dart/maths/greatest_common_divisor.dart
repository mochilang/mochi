// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

int greatest_common_divisor(int a, int b) {
  int x = abs_int(a);
  int y = abs_int(b);
  if (x == 0) {
    return y;
  }
  return greatest_common_divisor(y % x, x);
}

int gcd_by_iterative(int x, int y) {
  int a = abs_int(x);
  int b = abs_int(y);
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

void main() {
  print((greatest_common_divisor(24, 40)).toString());
  print((greatest_common_divisor(1, 1)).toString());
  print((greatest_common_divisor(1, 800)).toString());
  print((greatest_common_divisor(11, 37)).toString());
  print((greatest_common_divisor(3, 5)).toString());
  print((greatest_common_divisor(16, 4)).toString());
  print((greatest_common_divisor(-3, 9)).toString());
  print((greatest_common_divisor(9, -3)).toString());
  print((greatest_common_divisor(3, -9)).toString());
  print((greatest_common_divisor(-3, -9)).toString());
  print((gcd_by_iterative(24, 40)).toString());
  print((greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)).toString());
  print((gcd_by_iterative(-3, -9)).toString());
  print((gcd_by_iterative(3, -9)).toString());
  print((gcd_by_iterative(1, -800)).toString());
  print((gcd_by_iterative(11, 37)).toString());
}
