// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> prime_factors(int n) {
  int i = 2;
  int x = n;
  List<int> factors = <int>[];
  while (i * i <= x) {
    if (x % i == 0) {
    factors = [...factors, i];
    x = x ~/ i as int;
  } else {
    i = i + 1;
  }
  }
  if (x > 1) {
    factors = [...factors, x];
  }
  return factors;
}

int liouville_lambda(int n) {
  if (n < 1) {
    throw Exception("Input must be a positive integer");
  }
  int cnt = prime_factors(n).length;
  if (cnt % 2 == 0) {
    return 1;
  }
  return 0 - 1;
}

void main() {
  print(liouville_lambda(10));
  print(liouville_lambda(11));
}
