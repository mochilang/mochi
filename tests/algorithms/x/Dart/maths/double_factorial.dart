// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int double_factorial_recursive(int n) {
  if (n < 0) {
    _error("double_factorial_recursive() not defined for negative values");
  }
  if (n <= 1) {
    return 1;
  }
  return n * double_factorial_recursive(n - 2);
}

int double_factorial_iterative(int n) {
  if (n < 0) {
    _error("double_factorial_iterative() not defined for negative values");
  }
  int result = 1;
  int i = n;
  while (i > 0) {
    result = result * i;
    i = i - 2;
  }
  return result;
}

void test_double_factorial() {
  if (double_factorial_recursive(0) != 1) {
    _error("0!! recursive failed");
  }
  if (double_factorial_iterative(0) != 1) {
    _error("0!! iterative failed");
  }
  if (double_factorial_recursive(1) != 1) {
    _error("1!! recursive failed");
  }
  if (double_factorial_iterative(1) != 1) {
    _error("1!! iterative failed");
  }
  if (double_factorial_recursive(5) != 15) {
    _error("5!! recursive failed");
  }
  if (double_factorial_iterative(5) != 15) {
    _error("5!! iterative failed");
  }
  if (double_factorial_recursive(6) != 48) {
    _error("6!! recursive failed");
  }
  if (double_factorial_iterative(6) != 48) {
    _error("6!! iterative failed");
  }
  int n = 0;
  while (n <= 10) {
    if (double_factorial_recursive(n) != double_factorial_iterative(n)) {
    _error("double factorial mismatch");
  }
    n = n + 1;
  }
}

void _main() {
  test_double_factorial();
  print(double_factorial_iterative(10));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
