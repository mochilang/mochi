// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

bool is_prime(int n) {
  if (n <= 1) {
    return false;
  }
  if (n <= 3) {
    return true;
  }
  if (n % 2 == 0) {
    return false;
  }
  int i = 3;
  while (i * i <= n) {
    if (n % i == 0) {
    return false;
  }
    i = i + 2;
  }
  return true;
}

bool is_germain_prime(int number) {
  if (number < 1) {
    _error("Input value must be a positive integer");
  }
  return is_prime(number) && is_prime(2 * number + 1);
}

bool is_safe_prime(int number) {
  if (number < 1) {
    _error("Input value must be a positive integer");
  }
  if ((number - 1) % 2 != 0) {
    return false;
  }
  return is_prime(number) && is_prime((number - 1) ~/ 2);
}

void test_is_germain_prime() {
  if (!is_germain_prime(3)) {
    _error("is_germain_prime(3) failed");
  }
  if (!is_germain_prime(11)) {
    _error("is_germain_prime(11) failed");
  }
  if (is_germain_prime(4)) {
    _error("is_germain_prime(4) failed");
  }
  if (!is_germain_prime(23)) {
    _error("is_germain_prime(23) failed");
  }
  if (is_germain_prime(13)) {
    _error("is_germain_prime(13) failed");
  }
  if (is_germain_prime(20)) {
    _error("is_germain_prime(20) failed");
  }
}

void test_is_safe_prime() {
  if (!is_safe_prime(5)) {
    _error("is_safe_prime(5) failed");
  }
  if (!is_safe_prime(11)) {
    _error("is_safe_prime(11) failed");
  }
  if (is_safe_prime(1)) {
    _error("is_safe_prime(1) failed");
  }
  if (is_safe_prime(2)) {
    _error("is_safe_prime(2) failed");
  }
  if (is_safe_prime(3)) {
    _error("is_safe_prime(3) failed");
  }
  if (!is_safe_prime(47)) {
    _error("is_safe_prime(47) failed");
  }
}

void _main() {
  test_is_germain_prime();
  test_is_safe_prime();
  print(is_germain_prime(23));
  print(is_safe_prime(47));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
