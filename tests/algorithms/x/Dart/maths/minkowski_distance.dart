// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double abs_val(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double pow_float(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double nth_root(double value, int n) {
  if (value == 0.0) {
    return 0.0;
  }
  double x = value / n.toDouble();
  int i = 0;
  while (i < 20) {
    double _num = (n - 1).toDouble() * x + value / pow_float(x, n - 1);
    x = _num / n.toDouble();
    i = i + 1;
  }
  return x;
}

double minkowski_distance(List<double> point_a, List<double> point_b, int order) {
  if (order < 1) {
    _error("The order must be greater than or equal to 1.");
  }
  if (point_a.length != point_b.length) {
    _error("Both points must have the same dimension.");
  }
  double total = 0.0;
  int idx = 0;
  while (idx < point_a.length) {
    double diff = abs_val(point_a[idx] - point_b[idx]);
    total = total + pow_float(diff, order);
    idx = idx + 1;
  }
  return nth_root(total, order);
}

void test_minkowski() {
  if (abs_val(minkowski_distance([1.0, 1.0], [2.0, 2.0], 1) - 2.0) > 0.0001) {
    _error("minkowski_distance test1 failed");
  }
  if (abs_val(minkowski_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], 2) - 8.0) > 0.0001) {
    _error("minkowski_distance test2 failed");
  }
}

void _main() {
  test_minkowski();
  print(minkowski_distance([5.0], [0.0], 3));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
