// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double PI = 3.141592653589793;
int rand_seed = 123456789;
double rand_float() {
  rand_seed = (1103515245 * rand_seed + 12345) % 2147483648;
  return rand_seed.toDouble() / 2147483648.0;
}

double rand_range(double min_val, double max_val) {
  return rand_float() * (max_val - min_val) + min_val;
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrtApprox(double x) {
  if (x == 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

void pi_estimator(int iterations) {
  double inside = 0.0;
  int i = 0;
  while (i < iterations) {
    double x = rand_range(-1.0, 1.0);
    double y = rand_range(-1.0, 1.0);
    if (x * x + y * y <= 1.0) {
    inside = inside + 1.0;
  }
    i = i + 1;
  }
  double proportion = inside / iterations.toDouble();
  double pi_estimate = proportion * 4.0;
  print(["The estimated value of pi is", pi_estimate].join(" "));
  print(["The numpy value of pi is", PI].join(" "));
  print(["The total error is", abs_float(PI - pi_estimate)].join(" "));
}

double area_under_curve_estimator(int iterations, dynamic f, double min_value, double max_value) {
  double sum = 0.0;
  int i = 0;
  while (i < iterations) {
    double x = rand_range(min_value, max_value);
    sum = sum + f(x);
    i = i + 1;
  }
  double expected = sum / iterations.toDouble();
  return expected * (max_value - min_value);
}

void area_under_line_estimator_check(int iterations, double min_value, double max_value) {
  double identity_function(double x) {
  return x;
}
  double estimated_value = area_under_curve_estimator(iterations, identity_function, min_value, max_value);
  double expected_value = (max_value * max_value - min_value * min_value) / 2.0;
  print("******************");
  print(["Estimating area under y=x where x varies from", min_value].join(" "));
  print(["Estimated value is", estimated_value].join(" "));
  print(["Expected value is", expected_value].join(" "));
  print(["Total error is", abs_float(estimated_value - expected_value)].join(" "));
  print("******************");
}

void pi_estimator_using_area_under_curve(int iterations) {
  double semi_circle(double x) {
  double y = 4.0 - x * x;
  double s = sqrtApprox(y);
  return s;
}
  double estimated_value = area_under_curve_estimator(iterations, semi_circle, 0.0, 2.0);
  print("******************");
  print("Estimating pi using area_under_curve_estimator");
  print(["Estimated value is", estimated_value].join(" "));
  print(["Expected value is", PI].join(" "));
  print(["Total error is", abs_float(estimated_value - PI)].join(" "));
  print("******************");
}

void _main() {
  pi_estimator(1000);
  area_under_line_estimator_check(1000, 0.0, 1.0);
  pi_estimator_using_area_under_curve(1000);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
