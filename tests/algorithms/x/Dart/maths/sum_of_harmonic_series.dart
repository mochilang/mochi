// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double sum_of_harmonic_progression(double first_term, double common_difference, int number_of_terms) {
  List<double> arithmetic_progression = [1.0 / first_term];
  double term = 1.0 / first_term;
  int i = 0;
  while (i < number_of_terms - 1) {
    term = term + common_difference;
    arithmetic_progression = [...arithmetic_progression, term];
    i = i + 1;
  }
  double total = 0.0;
  int j = 0;
  while (j < arithmetic_progression.length) {
    total = total + 1.0 / arithmetic_progression[j];
    j = j + 1;
  }
  return total;
}

double abs_val(double _num) {
  if (_num < 0.0) {
    return -_num;
  }
  return _num;
}

void test_sum_of_harmonic_progression() {
  double result1 = sum_of_harmonic_progression(0.5, 2.0, 2);
  if (abs_val(result1 - 0.75) > 0.0000001) {
    throw Exception("test1 failed");
  }
  double result2 = sum_of_harmonic_progression(0.2, 5.0, 5);
  if (abs_val(result2 - 0.45666666666666667) > 0.0000001) {
    throw Exception("test2 failed");
  }
}

void _main() {
  test_sum_of_harmonic_progression();
  print(sum_of_harmonic_progression(0.5, 2.0, 2));
}

void _start() {
  _main();
}

void main() => _start();
