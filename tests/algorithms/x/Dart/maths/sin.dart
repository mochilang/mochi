// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double PI = 3.141592653589793;
double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double floor(double x) {
  int i = x as int;
  if ((i as double) > x) {
    i = i - 1;
  }
  return i as double;
}

double pow(double x, int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * x;
    i = i + 1;
  }
  return result;
}

double factorial(int n) {
  double result = 1.0;
  int i = 2;
  while (i <= n) {
    result = result * (i as double);
    i = i + 1;
  }
  return result;
}

double radians(double deg) {
  return deg * PI / 180.0;
}

double taylor_sin(double angle_in_degrees, int accuracy, int rounded_values_count) {
  double k = floor(angle_in_degrees / 360.0);
  double angle = angle_in_degrees - k * 360.0;
  double angle_in_radians = radians(angle);
  double result = angle_in_radians;
  int a = 3;
  num sign = -1.0;
  int i = 0;
  while (i < accuracy) {
    result = result + sign * pow(angle_in_radians, a) / factorial(a);
    sign = -sign;
    a = a + 2;
    i = i + 1;
  }
  return result;
}

void test_sin() {
  double eps = 0.0000001;
  if ((taylor_sin(0.0, 18, 10) - 0.0).abs().compareTo(eps) > 0) {
    throw Exception("sin(0) failed");
  }
  if ((taylor_sin(90.0, 18, 10) - 1.0).abs().compareTo(eps) > 0) {
    throw Exception("sin(90) failed");
  }
  if ((taylor_sin(180.0, 18, 10) - 0.0).abs().compareTo(eps) > 0) {
    throw Exception("sin(180) failed");
  }
  if ((taylor_sin(270.0, 18, 10) - -1.0).abs().compareTo(eps) > 0) {
    throw Exception("sin(270) failed");
  }
}

void _main() {
  test_sin();
  double res = taylor_sin(64.0, 18, 10);
  print(res);
}

void _start() {
  _main();
}

void main() => _start();
