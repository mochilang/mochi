// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double binary_exp_recursive(double base, int exponent) {
  if (exponent < 0) {
    _error("exponent must be non-negative");
  }
  if (exponent == 0) {
    return 1.0;
  }
  if (exponent % 2 == 1) {
    return binary_exp_recursive(base, exponent - 1) * base;
  }
  double half = binary_exp_recursive(base, exponent ~/ 2);
  return half * half;
}

double binary_exp_iterative(double base, int exponent) {
  if (exponent < 0) {
    _error("exponent must be non-negative");
  }
  double result = 1.0;
  double b = base;
  int e = exponent;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b;
  }
    b = b * b;
    e = e ~/ 2;
  }
  return result;
}

int binary_exp_mod_recursive(int base, int exponent, int modulus) {
  if (exponent < 0) {
    _error("exponent must be non-negative");
  }
  if (modulus <= 0) {
    _error("modulus must be positive");
  }
  if (exponent == 0) {
    return 1 % modulus;
  }
  if (exponent % 2 == 1) {
    return binary_exp_mod_recursive(base, exponent - 1, modulus) * (base % modulus) % modulus;
  }
  int r = binary_exp_mod_recursive(base, exponent ~/ 2, modulus);
  return r * r % modulus;
}

int binary_exp_mod_iterative(int base, int exponent, int modulus) {
  if (exponent < 0) {
    _error("exponent must be non-negative");
  }
  if (modulus <= 0) {
    _error("modulus must be positive");
  }
  int result = 1 % modulus;
  int b = base % modulus;
  int e = exponent;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % modulus;
  }
    b = b * b % modulus;
    e = e ~/ 2;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(binary_exp_recursive(3.0, 5));
  print(binary_exp_iterative(1.5, 4));
  print(binary_exp_mod_recursive(3, 4, 5));
  print(binary_exp_mod_iterative(11, 13, 7));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
