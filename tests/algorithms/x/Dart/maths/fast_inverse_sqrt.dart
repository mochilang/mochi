// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int pow2_int(int n) {
  int result = 1;
  int i = 0;
  while (i < n) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

double pow2_float(int n) {
  double result = 1.0;
  if (n >= 0) {
    int i = 0;
    while (i < n) {
    result = result * 2.0;
    i = i + 1;
  };
  } else {
    int i = 0;
    int m = 0 - n;
    while (i < m) {
    result = result / 2.0;
    i = i + 1;
  };
  }
  return result;
}

int lshift(int _num, int k) {
  int result = _num;
  int i = 0;
  while (i < k) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

int rshift(int _num, int k) {
  int result = _num;
  int i = 0;
  while (i < k) {
    result = (result - result % 2) ~/ 2;
    i = i + 1;
  }
  return result;
}

int log2_floor(double x) {
  double n = x;
  int e = 0;
  while (n >= 2.0) {
    n = n / 2.0;
    e = e + 1;
  }
  while (n < 1.0) {
    n = n * 2.0;
    e = e - 1;
  }
  return e;
}

int float_to_bits(double x) {
  double _num = x;
  int sign = 0;
  if (_num < 0.0) {
    sign = 1;
    _num = -_num;
  }
  int exp = log2_floor(_num);
  double pow = pow2_float(exp);
  double normalized = _num / pow;
  double frac = normalized - 1.0;
  int mantissa = frac * pow2_float(23) as int;
  int exp_bits = exp + 127;
  return lshift(sign, 31) + lshift(exp_bits, 23) + mantissa;
}

double bits_to_float(int bits) {
  int sign_bit = rshift(bits, 31) % 2;
  double sign = 1.0;
  if (sign_bit == 1) {
    sign = -1.0;
  }
  int exp_bits = rshift(bits, 23) % 256;
  int exp = exp_bits - 127;
  int mantissa_bits = bits % pow2_int(23);
  double mantissa = 1.0 + (mantissa_bits as double) / pow2_float(23);
  return sign * mantissa * pow2_float(exp);
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

bool is_close(double a, double b, double rel_tol) {
  return absf(a - b) <= rel_tol * absf(b);
}

double fast_inverse_sqrt(double number) {
  if (number <= 0.0) {
    throw Exception("Input must be a positive number.");
  }
  int i = float_to_bits(number);
  int magic = 1597463007;
  int y_bits = magic - rshift(i, 1);
  double y = bits_to_float(y_bits);
  y = y * (1.5 - 0.5 * number * y * y);
  return y;
}

void test_fast_inverse_sqrt() {
  if (absf(fast_inverse_sqrt(10.0) - 0.3156857923527257) > 0.0001) {
    throw Exception("fast_inverse_sqrt(10) failed");
  }
  if (absf(fast_inverse_sqrt(4.0) - 0.49915357479239103) > 0.0001) {
    throw Exception("fast_inverse_sqrt(4) failed");
  }
  if (absf(fast_inverse_sqrt(4.1) - 0.4932849504615651) > 0.0001) {
    throw Exception("fast_inverse_sqrt(4.1) failed");
  }
  int i = 50;
  while (i < 60) {
    double y = fast_inverse_sqrt(i as double);
    double actual = 1.0 / sqrtApprox(i as double);
    if (!is_close(y, actual, 0.00132)) {
    throw Exception("relative error too high");
  }
    i = i + 1;
  }
}

void _main() {
  test_fast_inverse_sqrt();
  int i = 5;
  while (i <= 100) {
    double diff = 1.0 / sqrtApprox(i as double) - fast_inverse_sqrt(i as double);
    print((i).toString() + ": " + (diff).toString());
    i = i + 5;
  }
}

void _start() {
  _main();
}

void main() => _start();
