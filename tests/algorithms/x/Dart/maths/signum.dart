// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int signum(double _num) {
  if (_num < 0.0) {
    return -1;
  }
  if (_num > 0.0) {
    return 1;
  }
  return 0;
}

void test_signum() {
  if (signum(5.0) != 1) {
    _error("signum(5) failed");
  }
  if (signum(-5.0) != -1) {
    _error("signum(-5) failed");
  }
  if (signum(0.0) != 0) {
    _error("signum(0) failed");
  }
  if (signum(10.5) != 1) {
    _error("signum(10.5) failed");
  }
  if (signum(-10.5) != -1) {
    _error("signum(-10.5) failed");
  }
  if (signum(0.000001) != 1) {
    _error("signum(1e-6) failed");
  }
  if (signum(-0.000001) != -1) {
    _error("signum(-1e-6) failed");
  }
  if (signum(123456789.0) != 1) {
    _error("signum(123456789) failed");
  }
  if (signum(-123456789.0) != -1) {
    _error("signum(-123456789) failed");
  }
}

void _main() {
  test_signum();
  print(signum(12.0));
  print(signum(-12.0));
  print(signum(0.0));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
