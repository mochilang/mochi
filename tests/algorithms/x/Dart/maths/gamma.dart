// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double PI = 3.141592653589793;
double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrt(double x) {
  if (x < 0.0) {
    throw Exception("sqrt domain error");
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double ln(double x) {
  if (x <= 0.0) {
    throw Exception("ln domain error");
  }
  double y = (x - 1.0) / (x + 1.0);
  double y2 = y * y;
  double term = y;
  double sum = 0.0;
  int k = 0;
  while (k < 10) {
    double denom = 2 * k + 1 as double;
    sum = sum + term / denom;
    term = term * y2;
    k = k + 1;
  }
  return 2.0 * sum;
}

double exp_series(double x) {
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 20) {
    term = term * x / (n as double);
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

double powf(double base, double exponent) {
  if (base <= 0.0) {
    return 0.0;
  }
  return exp_series(exponent * ln(base));
}

double integrand(double x, double z) {
  return powf(x, z - 1.0) * exp_series(-x);
}

double gamma_iterative(double _num) {
  if (_num <= 0.0) {
    throw Exception("math domain error");
  }
  double step = 0.001;
  double limit = 100.0;
  double x = step;
  double total = 0.0;
  while (x < limit) {
    total = total + integrand(x, _num) * step;
    x = x + step;
  }
  return total;
}

double gamma_recursive(double _num) {
  if (_num <= 0.0) {
    throw Exception("math domain error");
  }
  if (_num > 171.5) {
    throw Exception("math range error");
  }
  int int_part = _num as int;
  double frac = _num - (int_part as double);
  if (!(absf(frac) < 0.000001 || absf(frac - 0.5) < 0.000001)) {
    throw Exception("num must be an integer or a half-integer");
  }
  if (absf(_num - 0.5) < 0.000001) {
    return sqrt(PI);
  }
  if (absf(_num - 1.0) < 0.000001) {
    return 1.0;
  }
  return (_num - 1.0) * gamma_recursive(_num - 1.0);
}

void _main() {
  print(gamma_iterative(5.0));
  print(gamma_recursive(5.0));
  print(gamma_recursive(0.5));
}

void _start() {
  _main();
}

void main() => _start();
