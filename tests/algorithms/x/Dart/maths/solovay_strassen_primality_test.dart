// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int seed = 1;
void set_seed(int s) {
  seed = s;
}

int randint(int a, int b) {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed % (b - a + 1) + a;
}

int jacobi_symbol(int random_a, int number) {
  if (random_a == 0 || random_a == 1) {
    return random_a;
  }
  random_a = random_a % number;
  int t = 1;
  while (random_a != 0) {
    while (random_a % 2 == 0) {
    random_a = random_a ~/ 2;
    int r = number % 8;
    if (r == 3 || r == 5) {
    t = -t;
  }
  }
    int temp = random_a;
    random_a = number;
    number = temp;
    if (random_a % 4 == 3 && number % 4 == 3) {
    t = -t;
  }
    random_a = random_a % number;
  }
  if (number == 1) {
    return t;
  }
  return 0;
}

int pow_mod(int base, int exp, int mod) {
  int result = 1;
  int b = base % mod;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % mod;
  }
    b = b * b % mod;
    e = e ~/ 2;
  }
  return result;
}

bool solovay_strassen(int number, int iterations) {
  if (number <= 1) {
    return false;
  }
  if (number <= 3) {
    return true;
  }
  int i = 0;
  while (i < iterations) {
    int a = randint(2, number - 2);
    int x = jacobi_symbol(a, number);
    int y = pow_mod(a, (number - 1) ~/ 2, number);
    int mod_x = x % number;
    if (mod_x < 0) {
    mod_x = mod_x + number;
  }
    if (x == 0 || y != mod_x) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void _main() {
  set_seed(10);
  print((solovay_strassen(13, 5)).toString());
  print((solovay_strassen(9, 10)).toString());
  print((solovay_strassen(17, 15)).toString());
}

void _start() {
  _main();
}

void main() => _start();
