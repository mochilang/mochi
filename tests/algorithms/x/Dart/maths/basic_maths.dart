// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int pow_int(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

List<int> prime_factors(int n) {
  if (n <= 0) {
    throw Exception("Only positive integers have prime factors");
  }
  int _num = n;
  List<int> pf = <int>[];
  while (_num % 2 == 0) {
    pf = [...pf, 2];
    _num = _num ~/ 2;
  }
  int i = 3;
  while (i * i <= _num) {
    while (_num % i == 0) {
    pf = [...pf, i];
    _num = _num ~/ i;
  }
    i = i + 2;
  }
  if (_num > 2) {
    pf = [...pf, _num];
  }
  return pf;
}

int number_of_divisors(int n) {
  if (n <= 0) {
    throw Exception("Only positive numbers are accepted");
  }
  int _num = n;
  int div = 1;
  int temp = 1;
  while (_num % 2 == 0) {
    temp = temp + 1;
    _num = _num ~/ 2;
  }
  div = div * temp;
  int i = 3;
  while (i * i <= _num) {
    temp = 1;
    while (_num % i == 0) {
    temp = temp + 1;
    _num = _num ~/ i;
  }
    div = div * temp;
    i = i + 2;
  }
  if (_num > 1) {
    div = div * 2;
  }
  return div;
}

int sum_of_divisors(int n) {
  if (n <= 0) {
    throw Exception("Only positive numbers are accepted");
  }
  int _num = n;
  int s = 1;
  int temp = 1;
  while (_num % 2 == 0) {
    temp = temp + 1;
    _num = _num ~/ 2;
  }
  if (temp > 1) {
    s = s * ((pow_int(2, temp) - 1) ~/ (2 - 1));
  }
  int i = 3;
  while (i * i <= _num) {
    temp = 1;
    while (_num % i == 0) {
    temp = temp + 1;
    _num = _num ~/ i;
  }
    if (temp > 1) {
    s = s * ((pow_int(i, temp) - 1) ~/ (i - 1));
  }
    i = i + 2;
  }
  return s;
}

bool contains(List<int> arr, int x) {
  int idx = 0;
  while (idx < arr.length) {
    if (arr[idx] == x) {
    return true;
  }
    idx = idx + 1;
  }
  return false;
}

List<int> unique(List<int> arr) {
  List<int> result = <int>[];
  int idx = 0;
  while (idx < arr.length) {
    int v = arr[idx];
    if (!result.contains(v)) {
    result = [...result, v];
  }
    idx = idx + 1;
  }
  return result;
}

int euler_phi(int n) {
  if (n <= 0) {
    throw Exception("Only positive numbers are accepted");
  }
  int s = n;
  List<int> factors = unique(prime_factors(n));
  int idx = 0;
  while (idx < factors.length) {
    int x = factors[idx];
    s = s ~/ x * (x - 1);
    idx = idx + 1;
  }
  return s;
}

void main() {
  print((prime_factors(100)).toString());
  print((number_of_divisors(100)).toString());
  print((sum_of_divisors(100)).toString());
  print((euler_phi(100)).toString());
}
