// Generated by Mochi transpiler
import 'dart:math' as math;
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double sqrt(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double powf(double x, int n) {
  double res = 1.0;
  int i = 0;
  while (i < n) {
    res = res * x;
    i = i + 1;
  }
  return res;
}

int roundf(double x) {
  if (x >= 0.0) {
    return (x + 0.5).toInt();
  }
  return (x - 0.5).toInt();
}

List<int> fib_iterative(int n) {
  if (n < 0) {
    _error("n is negative");
  }
  if (n == 0) {
    return [0];
  }
  List<int> fib = [0, 1];
  int i = 2;
  while (i <= n) {
    fib = [...fib, fib[i - 1] + fib[i - 2]];
    i = i + 1;
  }
  return fib;
}

int fib_recursive_term(int i) {
  if (i < 0) {
    _error("n is negative");
  }
  if (i < 2) {
    return i;
  }
  return fib_recursive_term(i - 1) + fib_recursive_term(i - 2);
}

List<int> fib_recursive(int n) {
  if (n < 0) {
    _error("n is negative");
  }
  List<int> res = <int>[];
  int i = 0;
  while (i <= n) {
    res = [...res, fib_recursive_term(i)];
    i = i + 1;
  }
  return res;
}

Map<int, int> fib_cache_global = <int, int>{};
int fib_recursive_cached_term(int i) {
  if (i < 0) {
    _error("n is negative");
  }
  if (i < 2) {
    return i;
  }
  if (fib_cache_global.containsKey(i)) {
    return (fib_cache_global[i] ?? 0);
  }
  int val = fib_recursive_cached_term(i - 1) + fib_recursive_cached_term(i - 2);
  fib_cache_global[i] = val;
  return val;
}

List<int> fib_recursive_cached(int n) {
  if (n < 0) {
    _error("n is negative");
  }
  List<int> res = <int>[];
  int j = 0;
  while (j <= n) {
    res = [...res, fib_recursive_cached_term(j)];
    j = j + 1;
  }
  return res;
}

Map<int, int> fib_memo_cache = {0: 0, 1: 1, 2: 1};
int fib_memoization_term(int _num) {
  if (fib_memo_cache.containsKey(_num)) {
    return (fib_memo_cache[_num] ?? 0);
  }
  int value = fib_memoization_term(_num - 1) + fib_memoization_term(_num - 2);
  fib_memo_cache[_num] = value;
  return value;
}

List<int> fib_memoization(int n) {
  if (n < 0) {
    _error("n is negative");
  }
  List<int> out = <int>[];
  int i = 0;
  while (i <= n) {
    out = [...out, fib_memoization_term(i)];
    i = i + 1;
  }
  return out;
}

List<int> fib_binet(int n) {
  if (n < 0) {
    _error("n is negative");
  }
  if (n >= 1475) {
    _error("n is too large");
  }
  double sqrt5 = sqrt(5.0);
  double phi = (1.0 + sqrt5) / 2.0;
  List<int> res = <int>[];
  int i = 0;
  while (i <= n) {
    int val = roundf(powf(phi, i) / sqrt5);
    res = [...res, val];
    i = i + 1;
  }
  return res;
}

List<List<int>> matrix_mul(List<List<int>> a, List<List<int>> b) {
  int a00 = a[0][0] * b[0][0] + a[0][1] * b[1][0];
  int a01 = a[0][0] * b[0][1] + a[0][1] * b[1][1];
  int a10 = a[1][0] * b[0][0] + a[1][1] * b[1][0];
  int a11 = a[1][0] * b[0][1] + a[1][1] * b[1][1];
  return [[a00, a01], [a10, a11]];
}

List<List<int>> matrix_pow(List<List<int>> m, int power) {
  if (power < 0) {
    _error("power is negative");
  }
  List<List<int>> result = [[1, 0], [0, 1]];
  List<List<int>> base = m;
  int p = power;
  while (p > 0) {
    if (p % 2 == 1) {
    result = matrix_mul(result, base);
  }
    base = matrix_mul(base, base);
    p = (p ~/ 2).toInt();
  }
  return result;
}

int fib_matrix(int n) {
  if (n < 0) {
    _error("n is negative");
  }
  if (n == 0) {
    return 0;
  }
  List<List<int>> m = [[1, 1], [1, 0]];
  List<List<int>> res = matrix_pow(m, n - 1);
  return res[0][0];
}

int run_tests() {
  List<int> expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];
  List<int> it = fib_iterative(10);
  List<int> rec = fib_recursive(10);
  List<int> cache = fib_recursive_cached(10);
  List<int> memo = fib_memoization(10);
  List<int> bin = fib_binet(10);
  int m = fib_matrix(10);
  if (!_listEq(it, expected)) {
    _error("iterative failed");
  }
  if (!_listEq(rec, expected)) {
    _error("recursive failed");
  }
  if (!_listEq(cache, expected)) {
    _error("cached failed");
  }
  if (!_listEq(memo, expected)) {
    _error("memoization failed");
  }
  if (!_listEq(bin, expected)) {
    _error("binet failed");
  }
  if (m != 55) {
    _error("matrix failed");
  }
  return m;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(run_tests()));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

