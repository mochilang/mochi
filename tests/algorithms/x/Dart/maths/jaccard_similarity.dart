// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

bool contains(List<String> xs, String value) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

double jaccard_similarity(List<String> set_a, List<String> set_b, bool alternative_union) {
  int intersection_len = 0;
  int i = 0;
  while (i < set_a.length) {
    if (contains(set_b, set_a[i])) {
    intersection_len = intersection_len + 1;
  }
    i = i + 1;
  }
  int union_len = 0;
  if (alternative_union) {
    union_len = set_a.length + set_b.length;
  } else {
    List<String> union_list = <String>[];
    i = 0;
    while (i < set_a.length) {
    String val_a = set_a[i];
    if (!contains(union_list, val_a)) {
    union_list = [...union_list, val_a];
  }
    i = i + 1;
  };
    i = 0;
    while (i < set_b.length) {
    String val_b = set_b[i];
    if (!contains(union_list, val_b)) {
    union_list = [...union_list, val_b];
  }
    i = i + 1;
  };
    union_len = union_list.length;
  }
  return 1.0 * intersection_len / union_len;
}

void _main() {
  List<String> set_a = ["a", "b", "c", "d", "e"];
  List<String> set_b = ["c", "d", "e", "f", "h", "i"];
  print(jaccard_similarity(set_a, set_b, false));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
