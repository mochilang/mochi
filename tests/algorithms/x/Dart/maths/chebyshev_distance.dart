// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs(double x) {
  if (x >= 0.0) {
    return x;
  } else {
    return -x;
  }
}

double chebyshev_distance(List<double> point_a, List<double> point_b) {
  if (point_a.length != point_b.length) {
    throw Exception("Both points must have the same dimension.");
  }
  double max_diff = 0.0;
  int i = 0;
  while (i < point_a.length) {
    dynamic diff = (point_a[i] - point_b[i]).abs();
    if (diff.compareTo(max_diff) > 0) {
    max_diff = diff;
  }
    i = i + 1;
  }
  return max_diff;
}

void main() {
  print(chebyshev_distance([1.0, 1.0], [2.0, 2.0]));
  print(chebyshev_distance([1.0, 1.0, 9.0], List<double>.from([2.0, 2.0, -5.2])));
}
