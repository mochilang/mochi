// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double factorial_float(int n) {
  double result = 1.0;
  int i = 2;
  while (i <= n) {
    result = result * (i as double);
    i = i + 1;
  }
  return result;
}

double pi(int n) {
  if (n < 1) {
    throw Exception("Undefined for non-natural numbers");
  }
  int iterations = (n + 13) ~/ 14;
  double constant_term = 426880.0 * sqrtApprox(10005.0);
  double exponential_term = 1.0;
  double linear_term = 13591409.0;
  double partial_sum = linear_term;
  int k = 1;
  while (k < iterations) {
    int k6 = 6 * k;
    int k3 = 3 * k;
    double fact6k = factorial_float(k6);
    double fact3k = factorial_float(k3);
    double factk = factorial_float(k);
    double multinomial = fact6k / (fact3k * factk * factk * factk);
    linear_term = linear_term + 545140134.0;
    exponential_term = exponential_term * -262537412640768000.0;
    partial_sum = partial_sum + multinomial * linear_term / exponential_term;
    k = k + 1;
  }
  return constant_term / partial_sum;
}

int n = 50;
void main() {
  print("The first " + (n).toString() + " digits of pi is: " + (pi(n)).toString());
}
