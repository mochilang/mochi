// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

int num_digits(int n) {
  int x = abs_int(n);
  int digits = 1;
  while (x >= 10) {
    x = x ~/ 10;
    digits = digits + 1;
  }
  return digits;
}

int num_digits_fast(int n) {
  int x = abs_int(n);
  int digits = 1;
  int power = 10;
  while (x >= power) {
    power = power * 10;
    digits = digits + 1;
  }
  return digits;
}

int num_digits_faster(int n) {
  String s = _str(abs_int(n));
  return s.length;
}

void test_num_digits() {
  if (num_digits(12345) != 5) {
    _error("num_digits 12345 failed");
  }
  if (num_digits(123) != 3) {
    _error("num_digits 123 failed");
  }
  if (num_digits(0) != 1) {
    _error("num_digits 0 failed");
  }
  if (num_digits(-1) != 1) {
    _error("num_digits -1 failed");
  }
  if (num_digits(-123456) != 6) {
    _error("num_digits -123456 failed");
  }
  if (num_digits_fast(12345) != 5) {
    _error("num_digits_fast 12345 failed");
  }
  if (num_digits_fast(123) != 3) {
    _error("num_digits_fast 123 failed");
  }
  if (num_digits_fast(0) != 1) {
    _error("num_digits_fast 0 failed");
  }
  if (num_digits_fast(-1) != 1) {
    _error("num_digits_fast -1 failed");
  }
  if (num_digits_fast(-123456) != 6) {
    _error("num_digits_fast -123456 failed");
  }
  if (num_digits_faster(12345) != 5) {
    _error("num_digits_faster 12345 failed");
  }
  if (num_digits_faster(123) != 3) {
    _error("num_digits_faster 123 failed");
  }
  if (num_digits_faster(0) != 1) {
    _error("num_digits_faster 0 failed");
  }
  if (num_digits_faster(-1) != 1) {
    _error("num_digits_faster -1 failed");
  }
  if (num_digits_faster(-123456) != 6) {
    _error("num_digits_faster -123456 failed");
  }
}

void _main() {
  test_num_digits();
  print(_str(num_digits(12345)));
  print(_str(num_digits_fast(12345)));
  print(_str(num_digits_faster(12345)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
