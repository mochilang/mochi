// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> allocation_num(int number_of_bytes, int partitions) {
  if (partitions <= 0) {
    throw Exception("partitions must be a positive number!");
  }
  if (partitions > number_of_bytes) {
    throw Exception("partitions can not > number_of_bytes!");
  }
  int bytes_per_partition = number_of_bytes ~/ partitions;
  List<String> allocation_list = <String>[];
  int i = 0;
  while (i < partitions) {
    int start_bytes = i * bytes_per_partition + 1;
    int end_bytes = (i == partitions - 1 ? number_of_bytes : (i + 1) * bytes_per_partition);
    allocation_list = [...allocation_list, (start_bytes).toString() + "-" + (end_bytes).toString()];
    i = i + 1;
  }
  return allocation_list;
}

void main() {
  print((allocation_num(16647, 4)).toString());
  print((allocation_num(50000, 5)).toString());
}
