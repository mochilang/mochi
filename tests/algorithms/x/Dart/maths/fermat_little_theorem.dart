// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int binary_exponentiation(int a, int n, int mod) {
  if (n == 0) {
    return 1;
  }
  if (n % 2 == 1) {
    return binary_exponentiation(a, n - 1, mod) * a % mod;
  }
  int b = binary_exponentiation(a, n ~/ 2, mod);
  return b * b % mod;
}

int naive_exponent_mod(int a, int n, int mod) {
  int result = 1;
  int i = 0;
  while (i < n) {
    result = result * a % mod;
    i = i + 1;
  }
  return result;
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

int p = 701;
int a = 1000000000;
int b = 10;
BigInt left = BigInt.from(a ~/ b % p);
BigInt right_fast = BigInt.from(a * binary_exponentiation(b, p - 2, p) % p);
BigInt right_naive = BigInt.from(a * naive_exponent_mod(b, p - 2, p) % p);
void main() {
  print_bool(left == right_fast);
  print_bool(left == right_naive);
}
