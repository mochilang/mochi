// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> bubble_sort(List<int> nums) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < nums.length) {
    arr = [...arr, nums[i]];
    i = i + 1;
  }
  int n = arr.length;
  int a = 0;
  while (a < n) {
    int b = 0;
    while (b < n - a - 1) {
    if (arr[b] > arr[b + 1]) {
    int tmp = arr[b];
    while (arr.length <= b) { arr.add(0); } arr[b] = arr[b + 1];
    while (arr.length <= b + 1) { arr.add(0); } arr[b + 1] = tmp;
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return arr;
}

List<int> sort3(List<int> xs) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < xs.length) {
    arr = [...arr, xs[i]];
    i = i + 1;
  }
  int n = arr.length;
  int a = 0;
  while (a < n) {
    int b = 0;
    while (b < n - a - 1) {
    if (arr[b] > arr[b + 1]) {
    int tmp = arr[b];
    while (arr.length <= b) { arr.add(0); } arr[b] = arr[b + 1];
    while (arr.length <= b + 1) { arr.add(0); } arr[b + 1] = tmp;
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return arr;
}

List<int> triplet_sum1(List<int> arr, int target) {
  int i = 0;
  while (i < arr.length - 2) {
    int j = i + 1;
    while (j < arr.length - 1) {
    int k = j + 1;
    while (k < arr.length) {
    if (arr[i] + arr[j] + arr[k] == target) {
    return sort3([arr[i], arr[j], arr[k]]);
  }
    k = k + 1;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return [0, 0, 0];
}

List<int> triplet_sum2(List<int> arr, int target) {
  List<int> sorted = bubble_sort(arr);
  int n = sorted.length;
  int i = 0;
  while (i < n - 2) {
    int left = i + 1;
    int right = n - 1;
    while (left < right) {
    int s = sorted[i] + sorted[left] + sorted[right];
    if (s == target) {
    return [sorted[i], sorted[left], sorted[right]];
  }
    if (s < target) {
    left = left + 1;
  } else {
    right = right - 1;
  }
  }
    i = i + 1;
  }
  return [0, 0, 0];
}

bool list_equal(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_triplet_sum() {
  List<int> arr1 = [13, 29, 7, 23, 5];
  if (!list_equal(triplet_sum1(arr1, 35), [5, 7, 23])) {
    throw Exception("ts1 case1 failed");
  }
  if (!list_equal(triplet_sum2(arr1, 35), [5, 7, 23])) {
    throw Exception("ts2 case1 failed");
  }
  List<int> arr2 = [37, 9, 19, 50, 44];
  if (!list_equal(triplet_sum1(arr2, 65), [9, 19, 37])) {
    throw Exception("ts1 case2 failed");
  }
  if (!list_equal(triplet_sum2(arr2, 65), [9, 19, 37])) {
    throw Exception("ts2 case2 failed");
  }
  List<int> arr3 = [6, 47, 27, 1, 15];
  if (!list_equal(triplet_sum1(arr3, 11), [0, 0, 0])) {
    throw Exception("ts1 case3 failed");
  }
  if (!list_equal(triplet_sum2(arr3, 11), [0, 0, 0])) {
    throw Exception("ts2 case3 failed");
  }
}

void _main() {
  test_triplet_sum();
  List<int> sample = [13, 29, 7, 23, 5];
  List<int> res = triplet_sum2(sample, 35);
  print((res[0]).toString() + " " + (res[1]).toString() + " " + (res[2]).toString());
}

void _start() {
  _main();
}

void main() => _start();
