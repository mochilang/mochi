// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class Point {
  double x;
  double y;
  double z;
  Point({required this.x, required this.y, required this.z});
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrt_approx(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double distance(Point a, Point b) {
  double dx = b.x - a.x;
  double dy = b.y - a.y;
  double dz = b.z - a.z;
  return sqrt_approx(absf(dx * dx + dy * dy + dz * dz));
}

String point_to_string(Point p) {
  return "Point(" + _str(p.x) + ", " + _str(p.y) + ", " + _str(p.z) + ")";
}

void test_distance() {
  Point p1 = Point(x: 2.0, y: -1.0, z: 7.0);
  Point p2 = Point(x: 1.0, y: -3.0, z: 5.0);
  double d = distance(p1, p2);
  if (absf(d - 3.0) > 0.0001) {
    _error("distance test failed");
  }
  print("Distance from " + point_to_string(p1) + " to " + point_to_string(p2) + " is " + _str(d));
}

void _main() {
  test_distance();
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
