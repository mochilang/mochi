// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int isqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

List<int> prime_sieve(int _num) {
  if (_num <= 0) {
    throw Exception("Invalid input, please enter a positive integer.");
  }
  List<bool> sieve = <bool>[];
  int i = 0;
  while (i <= _num) {
    sieve = [...sieve, true];
    i = i + 1;
  }
  List<int> prime = <int>[];
  int start = 2;
  int end = isqrt(_num);
  while (start <= end) {
    if (sieve[start]) {
    prime = [...prime, start];
    int j = start * start;
    while (j <= _num) {
    if (sieve[j]) {
    while (sieve.length <= j) { sieve.add(false); } sieve[j] = false;
  }
    j = j + start;
  };
  }
    start = start + 1;
  }
  int k = end + 1;
  while (k <= _num) {
    if (sieve[k]) {
    prime = [...prime, k];
  }
    k = k + 1;
  }
  return prime;
}

void main() {
  print((prime_sieve(50)).toString());
  print((prime_sieve(25)).toString());
  print((prime_sieve(10)).toString());
  print((prime_sieve(9)).toString());
  print((prime_sieve(2)).toString());
  print((prime_sieve(1)).toString());
}
