// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int isqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

List<int> prime_sieve(int _num) {
  if (_num <= 0) {
    _error("Invalid input, please enter a positive integer.");
  }
  List<bool> sieve = <bool>[];
  int i = 0;
  while (i <= _num) {
    sieve = [...sieve, true];
    i = i + 1;
  }
  List<int> prime = <int>[];
  int start = 2;
  int end = isqrt(_num);
  while (start <= end) {
    if ((sieve[start] ?? false)) {
    prime = [...prime, start];
    int j = start * start;
    while (j <= _num) {
    if ((sieve[j] ?? false)) {
    while (sieve.length <= j) { sieve.add(false); } sieve[j] = false;
  }
    j = j + start;
  };
  }
    start = start + 1;
  }
  int k = end + 1;
  while (k <= _num) {
    if ((sieve[k] ?? false)) {
    prime = [...prime, k];
  }
    k = k + 1;
  }
  return prime;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(prime_sieve(50)));
  print(_str(prime_sieve(25)));
  print(_str(prime_sieve(10)));
  print(_str(prime_sieve(9)));
  print(_str(prime_sieve(2)));
  print(_str(prime_sieve(1)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
