// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

int remove_digit(int _num) {
  int n = _num;
  if (n < 0) {
    n = -n;
  }
  int max_val = 0;
  int divisor = 1;
  while (divisor <= n) {
    int higher = n ~/ (divisor * 10);
    int lower = n % divisor;
    int candidate = higher * divisor + lower;
    if (candidate > max_val) {
    max_val = candidate;
  }
    divisor = divisor * 10;
  }
  return max_val;
}

void test_remove_digit() {
  if (remove_digit(152) != 52) {
    _error("remove_digit(152) failed");
  }
  if (remove_digit(6385) != 685) {
    _error("remove_digit(6385) failed");
  }
  if (remove_digit(-11) != 1) {
    _error("remove_digit(-11) failed");
  }
  if (remove_digit(2222222) != 222222) {
    _error("remove_digit(2222222) failed");
  }
}

void _main() {
  test_remove_digit();
  print(remove_digit(152));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
