// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> make_list(int n, int value) {
  List<int> result = <int>[];
  int i = 0;
  while (i < n) {
    result = (result..add(value));
    i = i + 1;
  }
  return result;
}

int min_value(List<int> arr) {
  int m = arr[0];
  int i = 1;
  while (i < arr.length) {
    if (arr[i] < m) {
    m = arr[i];
  }
    i = i + 1;
  }
  return m;
}

int max_value(List<int> arr) {
  int m = arr[0];
  int i = 1;
  while (i < arr.length) {
    if (arr[i] > m) {
    m = arr[i];
  }
    i = i + 1;
  }
  return m;
}

List<int> pigeon_sort(List<int> array) {
  if (array.length == 0) {
    return array;
  }
  int mn = min_value(array);
  int mx = max_value(array);
  int holes_range = mx - mn + 1;
  List<int> holes = make_list(holes_range, 0);
  List<int> holes_repeat = make_list(holes_range, 0);
  int i = 0;
  while (i < array.length) {
    int index = array[i] - mn;
    while (holes.length <= index) { holes.add(0); } holes[index] = array[i];
    while (holes_repeat.length <= index) { holes_repeat.add(0); } holes_repeat[index] = holes_repeat[index] + 1;
    i = i + 1;
  }
  int array_index = 0;
  int h = 0;
  while (h < holes_range) {
    while (holes_repeat[h] > 0) {
    while (array.length <= array_index) { array.add(0); } array[array_index] = holes[h];
    array_index = array_index + 1;
    while (holes_repeat.length <= h) { holes_repeat.add(0); } holes_repeat[h] = holes_repeat[h] - 1;
  }
    h = h + 1;
  }
  return array;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(pigeon_sort([0, 5, 3, 2, 2])));
  print(_str(pigeon_sort(<int>[])));
  print(_str(pigeon_sort([-2, -5, -45])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
