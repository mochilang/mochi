// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> merge(List<int> xs, List<int> ys, bool reverse) {
  List<int> result = <int>[];
  int i = 0;
  int j = 0;
  while (i < xs.length && j < ys.length) {
    if (reverse) {
    if (xs[i] > ys[j]) {
    result = [...result, xs[i]];
    i = i + 1;
  } else {
    result = [...result, ys[j]];
    j = j + 1;
  };
  } else {
    if (xs[i] < ys[j]) {
    result = [...result, xs[i]];
    i = i + 1;
  } else {
    result = [...result, ys[j]];
    j = j + 1;
  };
  }
  }
  while (i < xs.length) {
    result = [...result, xs[i]];
    i = i + 1;
  }
  while (j < ys.length) {
    result = [...result, ys[j]];
    j = j + 1;
  }
  return result;
}

List<int> strand_sort_rec(List<int> arr, bool reverse, List<int> solution) {
  if (arr.length == 0) {
    return solution;
  }
  List<int> sublist = <int>[];
  List<int> remaining = <int>[];
  sublist = [...sublist, arr[0]];
  int last = arr[0];
  int k = 1;
  while (k < arr.length) {
    int item = arr[k];
    if (reverse) {
    if (item < last) {
    sublist = [...sublist, item];
    last = item;
  } else {
    remaining = [...remaining, item];
  };
  } else {
    if (item > last) {
    sublist = [...sublist, item];
    last = item;
  } else {
    remaining = [...remaining, item];
  };
  }
    k = k + 1;
  }
  solution = merge(solution, sublist, reverse);
  return strand_sort_rec(remaining, reverse, solution);
}

List<int> strand_sort(List<int> arr, bool reverse) {
  return strand_sort_rec(arr, reverse, <int>[]);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(strand_sort([4, 3, 5, 1, 2], false)));
  print(_str(strand_sort([4, 3, 5, 1, 2], true)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
