// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> bead_sort(List<int> sequence) {
  int n = sequence.length;
  int i = 0;
  while (i < n) {
    if (sequence[i] < 0) {
    ;
  }
    i = i + 1;
  }
  int pass = 0;
  while (pass < n) {
    int j = 0;
    while (j < n - 1) {
    int upper = sequence[j];
    int lower = sequence[j + 1];
    if (upper.compareTo(lower) > 0) {
    int diff = upper - lower;
    while (sequence.length <= j) { sequence.add(0); } sequence[j] = upper - diff;
    while (sequence.length <= j + 1) { sequence.add(0); } sequence[j + 1] = lower + diff;
  }
    j = j + 1;
  }
    pass = pass + 1;
  }
  return sequence;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(bead_sort([6, 11, 12, 4, 1, 5])));
  print(_str(bead_sort([9, 8, 7, 6, 5, 4, 3, 2, 1])));
  print(_str(bead_sort([5, 0, 4, 3])));
  print(_str(bead_sort([8, 2, 1])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
