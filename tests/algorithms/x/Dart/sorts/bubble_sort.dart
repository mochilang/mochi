// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> bubble_sort_iterative(List<int> collection) {
  int n = collection.length;
  while (n > 0) {
    bool swapped = false;
    int j = 0;
    while (j < n - 1) {
    if (collection[j] > collection[j + 1]) {
    int temp = collection[j];
    while (collection.length <= j) { collection.add(0); } collection[j] = collection[j + 1];
    while (collection.length <= j + 1) { collection.add(0); } collection[j + 1] = temp;
    swapped = true;
  }
    j = j + 1;
  }
    if (!swapped) {
    break;
  }
    n = n - 1;
  }
  return collection;
}

List<int> bubble_sort_recursive(List<int> collection) {
  int n = collection.length;
  bool swapped = false;
  int i = 0;
  while (i < n - 1) {
    if (collection[i] > collection[i + 1]) {
    int temp = collection[i];
    while (collection.length <= i) { collection.add(0); } collection[i] = collection[i + 1];
    while (collection.length <= i + 1) { collection.add(0); } collection[i + 1] = temp;
    swapped = true;
  }
    i = i + 1;
  }
  if (swapped) {
    return bubble_sort_recursive(collection);
  }
  return collection;
}

List<int> copy_list(List<int> xs) {
  List<int> out = <int>[];
  int i = 0;
  while (i < xs.length) {
    out = (out..add(xs[i]));
    i = i + 1;
  }
  return out;
}

bool list_eq(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int k = 0;
  while (k < a.length) {
    if (a[k] != b[k]) {
    return false;
  }
    k = k + 1;
  }
  return true;
}

void test_bubble_sort() {
  List<int> example = [0, 5, 2, 3, 2];
  List<int> expected = [0, 2, 2, 3, 5];
  if (!list_eq(bubble_sort_iterative(copy_list(example)), expected)) {
    ;
  }
  if (!list_eq(bubble_sort_recursive(copy_list(example)), expected)) {
    ;
  }
  List<int> empty = [];
  if (bubble_sort_iterative(copy_list(empty)).length != 0) {
    ;
  }
  if (bubble_sort_recursive(copy_list(empty)).length != 0) {
    ;
  }
}

void _main() {
  test_bubble_sort();
  List<int> arr = [5, 1, 4, 2, 8];
  print(_str(bubble_sort_iterative(copy_list(arr))));
  print(_str(bubble_sort_recursive(copy_list(arr))));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
