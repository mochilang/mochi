// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int seed = 1;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

int rand_range(int max) {
  return rand() % max;
}

List<int> shuffle(List<int> list_int) {
  int i = list_int.length - 1;
  while (i > 0) {
    int j = rand_range(i + 1);
    int tmp = list_int[i];
    while (list_int.length <= i) { list_int.add(0); } list_int[i] = list_int[j];
    while (list_int.length <= j) { list_int.add(0); } list_int[j] = tmp;
    i = i - 1;
  }
  return list_int;
}

bool is_sorted(List<int> list_int) {
  int i = 0;
  while (i < list_int.length - 1) {
    if (list_int[i] > list_int[i + 1]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

List<int> bogo_sort(List<int> list_int) {
  List<int> res = list_int;
  while (!is_sorted(res)) {
    res = shuffle(res);
  }
  return res;
}

List<int> data = [3, 2, 1];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(bogo_sort(data)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
