// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

List<int> insert_next(List<int> collection, int index) {
  List<int> arr = collection;
  if (index >= arr.length || arr[index - 1] <= arr[index]) {
    return arr;
  }
  int j = index - 1;
  int temp = arr[j];
  while (arr.length <= j) { arr.add(0); } arr[j] = arr[index];
  while (arr.length <= index) { arr.add(0); } arr[index] = temp;
  return insert_next(arr, index + 1);
}

List<int> rec_insertion_sort(List<int> collection, int n) {
  List<int> arr = collection;
  if (arr.length <= 1 || n <= 1) {
    return arr;
  }
  arr = insert_next(arr, n - 1);
  return rec_insertion_sort(arr, n - 1);
}

void test_rec_insertion_sort() {
  List<int> col1 = [1, 2, 1];
  col1 = rec_insertion_sort(col1, col1.length);
  if (col1[0] != 1 || col1[1] != 1 || col1[2] != 2) {
    _error("test1 failed");
  }
  List<int> col2 = [2, 1, 0, -1, -2];
  col2 = rec_insertion_sort(col2, col2.length);
  if (col2[0] != 0 - 2) {
    _error("test2 failed");
  }
  if (col2[1] != 0 - 1) {
    _error("test2 failed");
  }
  if (col2[2] != 0) {
    _error("test2 failed");
  }
  if (col2[3] != 1) {
    _error("test2 failed");
  }
  if (col2[4] != 2) {
    _error("test2 failed");
  }
  List<int> col3 = [1];
  col3 = rec_insertion_sort(col3, col3.length);
  if (col3[0] != 1) {
    _error("test3 failed");
  }
}

void _main() {
  test_rec_insertion_sort();
  List<int> numbers = [5, 3, 4, 1, 2];
  numbers = rec_insertion_sort(numbers, numbers.length);
  print(_str(numbers));
}

void _start() {
  _main();
}

void main() => _start();
