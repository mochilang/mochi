// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int bisect_left(List<List<int>> stacks, int value) {
  int low = 0;
  int high = stacks.length;
  while (low < high) {
    int mid = (low + high) ~/ 2;
    List<int> stack = stacks[mid];
    int top_idx = stack.length - 1;
    int top = stack[top_idx];
    if (top < value) {
    low = mid + 1;
  } else {
    high = mid;
  }
  }
  return low;
}

List<int> reverse_list(List<int> src) {
  List<int> res = <int>[];
  int i = src.length - 1;
  while (i >= 0) {
    res = (res..add(src[i]));
    i = i - 1;
  }
  return res;
}

List<int> patience_sort(List<int> collection) {
  List<List<int>> stacks = <List<int>>[];
  int i = 0;
  while (i < collection.length) {
    int element = collection[i];
    int idx = bisect_left(stacks, element);
    if (idx != stacks.length) {
    List<int> stack = stacks[idx];
    while (stacks.length <= idx) { stacks.add(<int>[]); } stacks[idx] = (stack..add(element));
  } else {
    List<int> new_stack = [element];
    stacks = ((stacks..add(new_stack)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    i = i + 1;
  }
  i = 0;
  while (i < stacks.length) {
    while (stacks.length <= i) { stacks.add(<int>[]); } stacks[i] = reverse_list(stacks[i]);
    i = i + 1;
  }
  List<int> indices = <int>[];
  i = 0;
  while (i < stacks.length) {
    indices = (indices..add(0));
    i = i + 1;
  }
  int total = 0;
  i = 0;
  while (i < stacks.length) {
    total = total + stacks[i].length;
    i = i + 1;
  }
  List<int> result = <int>[];
  int count = 0;
  while (count < total) {
    int min_val = 0;
    int min_stack = -1;
    int j = 0;
    while (j < stacks.length) {
    int idx = indices[j];
    if (idx < stacks[j].length) {
    int val = stacks[j][idx];
    if (min_stack < 0) {
    min_val = val;
    min_stack = j;
  } else {
    if (val < min_val) {
    min_val = val;
    min_stack = j;
  };
  };
  }
    j = j + 1;
  }
    result = (result..add(min_val));
    while (indices.length <= min_stack) { indices.add(0); } indices[min_stack] = indices[min_stack] + 1;
    count = count + 1;
  }
  i = 0;
  while (i < result.length) {
    while (collection.length <= i) { collection.add(0); } collection[i] = result[i];
    i = i + 1;
  }
  return collection;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(patience_sort([1, 9, 5, 21, 17, 6])));
  print(_str(patience_sort(<int>[])));
  print(_str(patience_sort([-3, -17, -48])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
