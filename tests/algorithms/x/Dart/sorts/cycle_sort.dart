// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> cycle_sort(List<int> arr) {
  int n = arr.length;
  int cycle_start = 0;
  while (cycle_start < n - 1) {
    int item = arr[cycle_start];
    int pos = cycle_start;
    int i = cycle_start + 1;
    while (i < n) {
    if (arr[i] < item) {
    pos = pos + 1;
  }
    i = i + 1;
  }
    if (pos == cycle_start) {
    cycle_start = cycle_start + 1;
    continue;
  }
    while (item == arr[pos]) {
    pos = pos + 1;
  }
    int temp = arr[pos];
    while (arr.length <= pos) { arr.add(0); } arr[pos] = item;
    item = temp;
    while (pos != cycle_start) {
    pos = cycle_start;
    i = cycle_start + 1;
    while (i < n) {
    if (arr[i] < item) {
    pos = pos + 1;
  }
    i = i + 1;
  }
    while (item == arr[pos]) {
    pos = pos + 1;
  }
    int temp2 = arr[pos];
    while (arr.length <= pos) { arr.add(0); } arr[pos] = item;
    item = temp2;
  }
    cycle_start = cycle_start + 1;
  }
  return arr;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(cycle_sort([4, 3, 2, 1])));
  print(_str(cycle_sort([-4, 20, 0, -50, 100, -1])));
  print(_str(cycle_sort(<int>[])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
