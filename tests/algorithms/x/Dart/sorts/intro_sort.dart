// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> insertion_sort(List<int> a, int start, int end_) {
  List<int> arr = a;
  int i = start;
  while (i < end_) {
    int key = arr[i];
    int j = i;
    while (j > start && arr[j - 1] > key) {
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j - 1];
    j = j - 1;
  }
    while (arr.length <= j) { arr.add(0); } arr[j] = key;
    i = i + 1;
  }
  return arr;
}

List<int> heapify(List<int> a, int index, int heap_size) {
  List<int> arr = a;
  int largest = index;
  int left = 2 * index + 1;
  int right = 2 * index + 2;
  if (left < heap_size && arr[left] > arr[largest]) {
    largest = left;
  }
  if (right < heap_size && arr[right] > arr[largest]) {
    largest = right;
  }
  if (largest != index) {
    int temp = arr[index];
    while (arr.length <= index) { arr.add(0); } arr[index] = arr[largest];
    while (arr.length <= largest) { arr.add(0); } arr[largest] = temp;
    arr = heapify(arr, largest, heap_size);
  }
  return arr;
}

List<int> heap_sort(List<int> a) {
  List<int> arr = a;
  int n = arr.length;
  if (n <= 1) {
    return arr;
  }
  int i = n ~/ 2;
  while (true) {
    arr = heapify(arr, i, n);
    if (i == 0) {
    break;
  }
    i = i - 1;
  }
  i = n - 1;
  while (i > 0) {
    int temp = arr[0];
    while (arr.length <= 0) { arr.add(0); } arr[0] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
    arr = heapify(arr, 0, i);
    i = i - 1;
  }
  return arr;
}

int median_of_3(List<int> arr, int first, int middle, int last) {
  int a = arr[first];
  int b = arr[middle];
  int c = arr[last];
  if (a > b && a < c || a < b && a > c) {
    return a;
  } else {
    if (b > a && b < c || b < a && b > c) {
    return b;
  } else {
    return c;
  };
  }
}

int partition(List<int> arr, int low, int high, int pivot) {
  int i = low;
  int j = high;
  while (true) {
    while (arr[i] < pivot) {
    i = i + 1;
  }
    j = j - 1;
    while (pivot < arr[j]) {
    j = j - 1;
  }
    if (i >= j) {
    return i;
  }
    int temp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = temp;
    i = i + 1;
  }
}

int int_log2(int n) {
  int v = n;
  int r = 0;
  while (v > 1) {
    v = v ~/ 2;
    r = r + 1;
  }
  return r;
}

List<int> intro_sort(List<int> arr, int start, int end_, int size_threshold, int max_depth) {
  List<int> array = arr;
  int s = start;
  int e = end_;
  int depth = max_depth;
  while (e - s > size_threshold) {
    if (depth == 0) {
    return heap_sort(array);
  }
    depth = depth - 1;
    int pivot = median_of_3(array, s, s + (e - s) ~/ 2 + 1, e - 1);
    int p = partition(array, s, e, pivot);
    array = intro_sort(array, p, e, size_threshold, depth);
    e = p;
  }
  List<int> res = insertion_sort(array, s, e);
  int __ = res.length;
  return res;
}

void intro_sort_main(List<int> arr) {
  if (arr.length == 0) {
    print(arr);
    return;
  }
  int max_depth = 2 * int_log2(arr.length);
  List<int> sorted = intro_sort(arr, 0, arr.length, 16, max_depth);
  print(sorted);
}

List<int> example1 = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12];
List<int> example2 = [21, 15, 11, 45, -2, -11, 46];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  intro_sort_main(example1);
  intro_sort_main(example2);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
