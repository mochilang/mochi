// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> subarray(List<int> xs, int start, int end) {
  List<int> result = <int>[];
  int i = start;
  while (i < end) {
    result = (result..add(xs[i]));
    i = i + 1;
  }
  return result;
}

List<int> merge(List<int> left, List<int> right) {
  List<int> result = <int>[];
  int i = 0;
  int j = 0;
  while (i < left.length && j < right.length) {
    if (left[i] <= right[j]) {
    result = (result..add(left[i]));
    i = i + 1;
  } else {
    result = (result..add(right[j]));
    j = j + 1;
  }
  }
  while (i < left.length) {
    result = (result..add(left[i]));
    i = i + 1;
  }
  while (j < right.length) {
    result = (result..add(right[j]));
    j = j + 1;
  }
  return result;
}

List<int> merge_sort(List<int> collection) {
  if (collection.length <= 1) {
    return collection;
  }
  int mid_index = collection.length ~/ 2;
  List<int> left = subarray(collection, 0, mid_index);
  List<int> right = subarray(collection, mid_index, collection.length);
  List<int> sorted_left = merge_sort(left);
  List<int> sorted_right = merge_sort(right);
  return merge(sorted_left, sorted_right);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(merge_sort([0, 5, 3, 2, 2])));
  print(_str(merge_sort(<int>[])));
  print(_str(merge_sort([-2, -5, -45])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
