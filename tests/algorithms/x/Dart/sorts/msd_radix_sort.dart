// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int get_bit_length(int n) {
  if (n == 0) {
    return 1;
  }
  int length = 0;
  int _num = n;
  while (_num > 0) {
    length = length + 1;
    _num = _num ~/ 2;
  }
  return length;
}

int max_bit_length(List<int> nums) {
  int i = 0;
  int max_len = 0;
  while (i < nums.length) {
    int l = get_bit_length(nums[i]);
    if (l > max_len) {
    max_len = l;
  }
    i = i + 1;
  }
  return max_len;
}

int get_bit(int _num, int pos) {
  int n = _num;
  int i = 0;
  while (i < pos) {
    n = n ~/ 2;
    i = i + 1;
  }
  return n % 2;
}

List<int> _msd_radix_sort(List<int> nums, int bit_position) {
  if (bit_position == 0 || nums.length <= 1) {
    return nums;
  }
  List<int> zeros = <int>[];
  List<int> ones = <int>[];
  int i = 0;
  while (i < nums.length) {
    int _num = nums[i];
    if (get_bit(_num, bit_position - 1) == 1) {
    ones = [...ones, _num];
  } else {
    zeros = [...zeros, _num];
  }
    i = i + 1;
  }
  zeros = _msd_radix_sort(zeros, bit_position - 1);
  ones = _msd_radix_sort(ones, bit_position - 1);
  List<int> res = zeros;
  i = 0;
  while (i < ones.length) {
    res = [...res, ones[i]];
    i = i + 1;
  }
  return res;
}

List<int> msd_radix_sort(List<int> nums) {
  if (nums.length == 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  int i = 0;
  while (i < nums.length) {
    if (nums[i] < 0) {
    throw Exception("All numbers must be positive");
  }
    i = i + 1;
  }
  int bits = max_bit_length(nums);
  List<int> result = _msd_radix_sort(nums, bits);
  return result;
}

List<int> msd_radix_sort_inplace(List<int> nums) {
  return msd_radix_sort(nums);
}

List<int> ex1 = [40, 12, 1, 100, 4];
List<int> sorted1 = msd_radix_sort(ex1);
List<int> ex2 = <int>[];
List<int> sorted2 = msd_radix_sort(ex2);
List<int> ex3 = [123, 345, 123, 80];
List<int> sorted3 = msd_radix_sort(ex3);
List<int> ex4 = [1209, 834598, 1, 540402, 45];
List<int> sorted4 = msd_radix_sort(ex4);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(sorted1));
  print(_str(sorted2));
  print(_str(sorted3));
  print(_str(sorted4));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
