// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> binary_search_insertion_from(List<int> sorted_list, int item, int start) {
  int left = start;
  int right = sorted_list.length - 1;
  while (left <= right) {
    int middle = (left + right) ~/ 2;
    if (left == right) {
    if (sorted_list[middle] < item) {
    left = middle + 1;
  };
    break;
  } else {
    if (sorted_list[middle] < item) {
    left = middle + 1;
  } else {
    right = middle - 1;
  };
  }
  }
  List<int> result = <int>[];
  int i = 0;
  while (i < left) {
    result = (result..add(sorted_list[i]));
    i = i + 1;
  }
  result = (result..add(item));
  while (i < sorted_list.length) {
    result = (result..add(sorted_list[i]));
    i = i + 1;
  }
  return result;
}

List<int> binary_search_insertion(List<int> sorted_list, int item) {
  return binary_search_insertion_from(sorted_list, item, 0);
}

List<List<int>> merge(List<List<int>> left, List<List<int>> right) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  int j = 0;
  while (i < left.length && j < right.length) {
    if (left[i][0] < right[j][0]) {
    result = ((result..add(left[i])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  } else {
    result = ((result..add(right[j])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
  }
  while (i < left.length) {
    result = ((result..add(left[i])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  while (j < right.length) {
    result = ((result..add(right[j])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
  return result;
}

List<List<int>> sortlist_2d(List<List<int>> list_2d) {
  int length = list_2d.length;
  if (length <= 1) {
    return list_2d;
  }
  int middle = length ~/ 2;
  List<List<int>> left = <List<int>>[];
  int i = 0;
  while (i < middle) {
    left = ((left..add(list_2d[i])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  List<List<int>> right = <List<int>>[];
  int j = middle;
  while (j < length) {
    right = ((right..add(list_2d[j])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
  return merge(sortlist_2d(left), sortlist_2d(right));
}

List<int> merge_insertion_sort(List<int> collection) {
  if (collection.length <= 1) {
    return collection;
  }
  List<List<int>> two_paired_list = <List<int>>[];
  bool has_last_odd_item = false;
  int i = 0;
  while (i < collection.length) {
    if (i == collection.length - 1) {
    has_last_odd_item = true;
  } else {
    int a = collection[i];
    int b = collection[i + 1];
    if (a < b) {
    two_paired_list = ((two_paired_list..add([a, b])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  } else {
    two_paired_list = ((two_paired_list..add([b, a])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  };
  }
    i = i + 2;
  }
  List<List<int>> sorted_list_2d = sortlist_2d(two_paired_list);
  List<int> result = <int>[];
  i = 0;
  while (i < sorted_list_2d.length) {
    result = (result..add(sorted_list_2d[i][0]));
    i = i + 1;
  }
  result = (result..add(sorted_list_2d[sorted_list_2d.length - 1][1]));
  if (has_last_odd_item) {
    result = binary_search_insertion(result, collection[collection.length - 1]);
  }
  bool inserted_before = false;
  int idx = 0;
  while (idx < sorted_list_2d.length - 1) {
    if (has_last_odd_item && result[idx] == collection[collection.length - 1]) {
    inserted_before = true;
  }
    int pivot = sorted_list_2d[idx][1];
    if (inserted_before) {
    result = binary_search_insertion_from(result, pivot, idx + 2);
  } else {
    result = binary_search_insertion_from(result, pivot, idx + 1);
  }
    idx = idx + 1;
  }
  return result;
}

void _main() {
  List<int> example1 = [0, 5, 3, 2, 2];
  List<int> example2 = [99];
  List<int> example3 = [-2, -5, -45];
  print(_str(merge_insertion_sort(example1)));
  print(_str(merge_insertion_sort(example2)));
  print(_str(merge_insertion_sort(example3)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
