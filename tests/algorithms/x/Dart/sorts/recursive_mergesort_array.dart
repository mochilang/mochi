// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> subarray(List<int> xs, int start, int end) {
  List<int> result = <int>[];
  int k = start;
  while (k < end) {
    result = [...result, xs[k]];
    k = k + 1;
  }
  return result;
}

List<int> merge(List<int> arr) {
  if (arr.length > 1) {
    int middle_length = arr.length ~/ 2;
    List<int> left_array = subarray(arr, 0, middle_length);
    List<int> right_array = subarray(arr, middle_length, arr.length);
    int left_size = left_array.length;
    int right_size = right_array.length;
    merge(left_array);
    merge(right_array);
    int left_index = 0;
    int right_index = 0;
    int index = 0;
    while (left_index < left_size && right_index < right_size) {
    if (left_array[left_index] < right_array[right_index]) {
    while (arr.length <= index) { arr.add(0); } arr[index] = left_array[left_index];
    left_index = left_index + 1;
  } else {
    while (arr.length <= index) { arr.add(0); } arr[index] = right_array[right_index];
    right_index = right_index + 1;
  }
    index = index + 1;
  };
    while (left_index < left_size) {
    while (arr.length <= index) { arr.add(0); } arr[index] = left_array[left_index];
    left_index = left_index + 1;
    index = index + 1;
  };
    while (right_index < right_size) {
    while (arr.length <= index) { arr.add(0); } arr[index] = right_array[right_index];
    right_index = right_index + 1;
    index = index + 1;
  };
  }
  return arr;
}

void main() {
  print(_str(merge([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])));
  print(_str(merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])));
  print(_str(merge([10, 22, 1, 2, 3, 9, 15, 23])));
  print(_str(merge([100])));
  print(_str(merge(<int>[])));
}
