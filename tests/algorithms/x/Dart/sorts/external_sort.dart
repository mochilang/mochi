// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> subarray(List<int> xs, int start, int end) {
  List<int> result = <int>[];
  int k = start;
  while (k < end) {
    result = [...result, xs[k]];
    k = k + 1;
  }
  return result;
}

List<int> merge(List<int> left_half, List<int> right_half) {
  List<int> result = <int>[];
  int i = 0;
  int j = 0;
  while (i < left_half.length && j < right_half.length) {
    if (left_half[i] < right_half[j]) {
    result = [...result, left_half[i]];
    i = i + 1;
  } else {
    result = [...result, right_half[j]];
    j = j + 1;
  }
  }
  while (i < left_half.length) {
    result = [...result, left_half[i]];
    i = i + 1;
  }
  while (j < right_half.length) {
    result = [...result, right_half[j]];
    j = j + 1;
  }
  return result;
}

List<int> merge_sort(List<int> array) {
  if (array.length <= 1) {
    return array;
  }
  int middle = array.length ~/ 2;
  List<int> left_half = subarray(array, 0, middle);
  List<int> right_half = subarray(array, middle, array.length);
  List<int> sorted_left = merge_sort(left_half);
  List<int> sorted_right = merge_sort(right_half);
  return merge(sorted_left, sorted_right);
}

List<List<int>> split_into_blocks(List<int> data, int block_size) {
  List<List<int>> blocks = <List<int>>[];
  int i = 0;
  while (i < data.length) {
    int end = (i + block_size < data.length ? i + block_size : data.length);
    List<int> block = subarray(data, i, end);
    List<int> sorted_block = merge_sort(block);
    blocks = ([...blocks, sorted_block] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = end;
  }
  return blocks;
}

List<int> merge_blocks(List<List<int>> blocks) {
  int num_blocks = blocks.length;
  List<int> indices = <int>[];
  int i = 0;
  while (i < num_blocks) {
    indices = [...indices, 0];
    i = i + 1;
  }
  List<int> result = <int>[];
  bool done = false;
  while (!done) {
    done = true;
    int min_val = 0;
    int min_block = 0 - 1;
    int j = 0;
    while (j < num_blocks) {
    int idx = indices[j];
    if (idx < blocks[j].length) {
    int val = blocks[j][idx];
    if (min_block == 0 - 1 || val < min_val) {
    min_val = val;
    min_block = j;
  };
    done = false;
  }
    j = j + 1;
  }
    if (!done) {
    result = [...result, min_val];
    while (indices.length <= min_block) { indices.add(0); } indices[min_block] = indices[min_block] + 1;
  }
  }
  return result;
}

List<int> external_sort(List<int> data, int block_size) {
  List<List<int>> blocks = split_into_blocks(data, block_size);
  return merge_blocks(blocks);
}

void _main() {
  List<int> data = [7, 1, 5, 3, 9, 2, 6, 4, 8, 0];
  List<int> sorted_data = external_sort(data, 3);
  print(sorted_data);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
