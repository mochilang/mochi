// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> quick_sort_3partition(List<int> arr, int left, int right) {
  if (right <= left) {
    return arr;
  }
  int a = left;
  int i = left;
  int b = right;
  int pivot = arr[left];
  while (i <= b) {
    if (arr[i] < pivot) {
    int temp = arr[a];
    while (arr.length <= a) { arr.add(0); } arr[a] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
    a = a + 1;
    i = i + 1;
  } else {
    if (arr[i] > pivot) {
    int temp = arr[b];
    while (arr.length <= b) { arr.add(0); } arr[b] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
    b = b - 1;
  } else {
    i = i + 1;
  };
  }
  }
  arr = quick_sort_3partition(arr, left, a - 1);
  arr = quick_sort_3partition(arr, b + 1, right);
  return arr;
}

List<int> quick_sort_lomuto_partition(List<int> arr, int left, int right) {
  if (left < right) {
    int pivot_index = lomuto_partition(arr, left, right);
    arr = quick_sort_lomuto_partition(arr, left, pivot_index - 1);
    arr = quick_sort_lomuto_partition(arr, pivot_index + 1, right);
  }
  return arr;
}

int lomuto_partition(List<int> arr, int left, int right) {
  int pivot = arr[right];
  int store_index = left;
  int i = left;
  while (i < right) {
    if (arr[i] < pivot) {
    int temp = arr[store_index];
    while (arr.length <= store_index) { arr.add(0); } arr[store_index] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
    store_index = store_index + 1;
  }
    i = i + 1;
  }
  int temp = arr[right];
  while (arr.length <= right) { arr.add(0); } arr[right] = arr[store_index];
  while (arr.length <= store_index) { arr.add(0); } arr[store_index] = temp;
  return store_index;
}

List<int> three_way_radix_quicksort(List<int> arr) {
  if (arr.length <= 1) {
    return arr;
  }
  int pivot = arr[0];
  List<int> less = <int>[];
  List<int> equal = <int>[];
  List<int> greater = <int>[];
  int i = 0;
  while (i < arr.length) {
    int val = arr[i];
    if (val < pivot) {
    less = [...less, val];
  } else {
    if (val > pivot) {
    greater = [...greater, val];
  } else {
    equal = [...equal, val];
  };
  }
    i = i + 1;
  }
  List<int> sorted_less = three_way_radix_quicksort(less);
  List<int> sorted_greater = three_way_radix_quicksort(greater);
  dynamic result = [...sorted_less, ...equal];
  result = [...result, ...sorted_greater];
  return (result as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

List<int> array1 = [5, -1, -1, 5, 5, 24, 0];
List<int> array2 = [9, 0, 2, 6];
List<int> array3 = <int>[];
List<int> nums1 = [0, 5, 3, 1, 2];
List<int> nums2 = <int>[];
List<int> nums3 = [-2, 5, 0, -4];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  array1 = quick_sort_3partition(array1, 0, array1.length - 1);
  print(_str(array1));
  array2 = quick_sort_3partition(array2, 0, array2.length - 1);
  print(_str(array2));
  array3 = quick_sort_3partition(array3, 0, array3.length - 1);
  print(_str(array3));
  nums1 = quick_sort_lomuto_partition(nums1, 0, nums1.length - 1);
  print(_str(nums1));
  nums2 = quick_sort_lomuto_partition(nums2, 0, nums2.length - 1);
  print(_str(nums2));
  nums3 = quick_sort_lomuto_partition(nums3, 0, nums3.length - 1);
  print(_str(nums3));
  print(_str(three_way_radix_quicksort(<int>[])));
  print(_str(three_way_radix_quicksort([1])));
  print(_str(three_way_radix_quicksort([-5, -2, 1, -2, 0, 1])));
  print(_str(three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
