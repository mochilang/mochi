// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<double> odd_even_transposition(List<double> arr) {
  int n = arr.length;
  int pass = 0;
  while (pass < n) {
    int i = pass % 2;
    while (i < n - 1) {
    if (arr[i + 1] < arr[i]) {
    double tmp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[i + 1];
    while (arr.length <= i + 1) { arr.add(0); } arr[i + 1] = tmp;
  }
    i = i + 2;
  }
    pass = pass + 1;
  }
  return arr;
}

void main() {
  print(_str(odd_even_transposition([5.0, 4.0, 3.0, 2.0, 1.0])));
  print(_str(odd_even_transposition(List<double>.from([13.0, 11.0, 18.0, 0.0, -1.0]))));
  print(_str(odd_even_transposition(List<double>.from([-0.1, 1.1, 0.1, -2.9]))));
}
