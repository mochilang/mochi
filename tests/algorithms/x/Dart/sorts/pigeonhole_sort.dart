// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> pigeonhole_sort(List<int> arr) {
  if (arr.length == 0) {
    return arr;
  }
  int min_val = (arr.reduce((a, b) => a < b ? a : b)).toInt();
  int max_val = (arr.reduce((a, b) => a > b ? a : b)).toInt();
  int size = max_val - min_val + 1;
  List<int> holes = <int>[];
  int i = 0;
  while (i < size) {
    holes = [...holes, 0];
    i = i + 1;
  }
  i = 0;
  while (i < arr.length) {
    int x = arr[i];
    int index = x - min_val;
    while (holes.length <= index) { holes.add(0); } holes[index] = holes[index] + 1;
    i = i + 1;
  }
  int sorted_index = 0;
  int count = 0;
  while (count < size) {
    while (holes[count] > 0) {
    while (arr.length <= sorted_index) { arr.add(0); } arr[sorted_index] = count + min_val;
    while (holes.length <= count) { holes.add(0); } holes[count] = holes[count] - 1;
    sorted_index = sorted_index + 1;
  }
    count = count + 1;
  }
  return arr;
}

List<int> example = [8, 3, 2, 7, 4, 6, 8];
List<int> result = pigeonhole_sort(example);
String output = "Sorted order is:";
int j = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (j < result.length) {
    output = output + " " + _str(result[j]);
    j = j + 1;
  }
  print(output);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
