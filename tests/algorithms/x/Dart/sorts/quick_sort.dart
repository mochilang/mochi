// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<int> quick_sort(List<int> items) {
  if (items.length < 2) {
    return items;
  }
  int pivot = items[0];
  List<int> lesser = <int>[];
  List<int> greater = <int>[];
  int i = 1;
  while (i < items.length) {
    int item = items[i];
    if (item <= pivot) {
    lesser = [...lesser, item];
  } else {
    greater = [...greater, item];
  }
    i = i + 1;
  }
  return ([...[...quick_sort(lesser), ...[pivot]], ...quick_sort(greater)] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void main() {
  print(["sorted1:", "[" + quick_sort([0, 5, 3, 2, 2]).join(', ') + "]"].join(" "));
  print(["sorted2:", "[" + quick_sort(<int>[]).join(', ') + "]"].join(" "));
  print(["sorted3:", "[" + quick_sort([-2, 5, 0, -45]).join(', ') + "]"].join(" "));
}
