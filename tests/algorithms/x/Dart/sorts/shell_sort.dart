// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> shell_sort(List<int> collection) {
  List<int> arr = collection;
  List<int> gaps = [701, 301, 132, 57, 23, 10, 4, 1];
  int g = 0;
  while (g < gaps.length) {
    int gap = gaps[g];
    int i = gap;
    while (i < arr.length) {
    int insert_value = arr[i];
    int j = i;
    while (j >= gap && arr[j - gap] > insert_value) {
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j - gap];
    j = j - gap;
  }
    if (j != i) {
    while (arr.length <= j) { arr.add(0); } arr[j] = insert_value;
  }
    i = i + 1;
  }
    g = g + 1;
  }
  return arr;
}

void main() {
  print(_str(shell_sort([0, 5, 3, 2, 2])));
  print(_str(shell_sort(<int>[])));
  print(_str(shell_sort([-2, -5, -45])));
}
