// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> flip(List<int> arr, int k) {
  int start = 0;
  int end = k;
  while (start < end) {
    int temp = arr[start];
    while (arr.length <= start) { arr.add(0); } arr[start] = arr[end];
    while (arr.length <= end) { arr.add(0); } arr[end] = temp;
    start = start + 1;
    end = end - 1;
  }
  return arr;
}

int find_max_index(List<int> arr, int n) {
  int mi = 0;
  int i = 1;
  while (i < n) {
    if (arr[i] > arr[mi]) {
    mi = i;
  }
    i = i + 1;
  }
  return mi;
}

List<int> pancake_sort(List<int> arr) {
  int cur = arr.length;
  while (cur > 1) {
    int mi = find_max_index(arr, cur);
    arr = flip(arr, mi);
    arr = flip(arr, cur - 1);
    cur = cur - 1;
  }
  return arr;
}

dynamic _main() {
  List<int> data = [3, 6, 1, 10, 2];
  List<int> sorted = pancake_sort(data);
  print(_str(sorted));
}

void _start() {
  _main();
}

void main() => _start();
