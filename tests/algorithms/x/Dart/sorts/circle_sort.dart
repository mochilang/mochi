// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool circle_sort_util(List<int> collection, int low, int high) {
  bool swapped = false;
  if (low == high) {
    return swapped;
  }
  int left = low;
  int right = high;
  while (left < right) {
    if (collection[left] > collection[right]) {
    int tmp = collection[left];
    while (collection.length <= left) { collection.add(0); } collection[left] = collection[right];
    while (collection.length <= right) { collection.add(0); } collection[right] = tmp;
    swapped = true;
  }
    left = left + 1;
    right = right - 1;
  }
  if (left == right && collection[left] > collection[right + 1]) {
    int tmp2 = collection[left];
    while (collection.length <= left) { collection.add(0); } collection[left] = collection[right + 1];
    while (collection.length <= right + 1) { collection.add(0); } collection[right + 1] = tmp2;
    swapped = true;
  }
  int mid = low + (high - low) ~/ 2;
  bool left_swap = circle_sort_util(collection, low, mid);
  bool right_swap = circle_sort_util(collection, mid + 1, high);
  if (swapped || left_swap || right_swap) {
    return true;
  } else {
    return false;
  }
}

List<int> circle_sort(List<int> collection) {
  if (collection.length < 2) {
    return collection;
  }
  bool is_not_sorted = true;
  while (is_not_sorted) {
    is_not_sorted = circle_sort_util(collection, 0, collection.length - 1);
  }
  return collection;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(circle_sort([0, 5, 3, 2, 2])));
  print(_str(circle_sort(<int>[])));
  print(_str(circle_sort([-2, 5, 0, -45])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
