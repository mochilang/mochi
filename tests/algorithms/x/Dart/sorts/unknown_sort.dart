// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int list_min(List<int> xs) {
  int i = 1;
  int m = xs[0];
  while (i < xs.length) {
    if (xs[i] < m) {
    m = xs[i];
  }
    i = i + 1;
  }
  return m;
}

int list_max(List<int> xs) {
  int i = 1;
  int m = xs[0];
  while (i < xs.length) {
    if (xs[i] > m) {
    m = xs[i];
  }
    i = i + 1;
  }
  return m;
}

List<int> remove_once(List<int> xs, int value) {
  List<int> res = <int>[];
  bool removed = false;
  int i = 0;
  while (i < xs.length) {
    if (!removed && xs[i] == value) {
    removed = true;
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> reverse_list(List<int> xs) {
  List<int> res = <int>[];
  int i = xs.length - 1;
  while (i >= 0) {
    res = [...res, xs[i]];
    i = i - 1;
  }
  return res;
}

List<int> merge_sort(List<int> collection) {
  List<int> start = <int>[];
  List<int> end = <int>[];
  List<int> coll = collection;
  while (coll.length > 1) {
    int mn = list_min(coll);
    int mx = list_max(coll);
    start = [...start, mn];
    end = [...end, mx];
    coll = remove_once(coll, mn);
    coll = remove_once(coll, mx);
  }
  end = reverse_list(end);
  return ([...[...start, ...coll], ...end] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void test_merge_sort() {
  if (merge_sort([0, 5, 3, 2, 2]) != [0, 2, 2, 3, 5]) {
    throw Exception("case1 failed");
  }
  if (merge_sort(<int>[]) != []) {
    throw Exception("case2 failed");
  }
  if (merge_sort([-2, -5, -45]) != [-45, -5, -2]) {
    throw Exception("case3 failed");
  }
}

void _main() {
  test_merge_sort();
  print(_str(merge_sort([0, 5, 3, 2, 2])));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
