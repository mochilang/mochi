// Generated by Mochi transpiler
import 'dart:convert';

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int list_min(List<int> xs) {
  int i = 1;
  int m = xs[0];
  while (i < xs.length) {
    if (xs[i] < m) {
    m = xs[i];
  }
    i = i + 1;
  }
  return m;
}

int list_max(List<int> xs) {
  int i = 1;
  int m = xs[0];
  while (i < xs.length) {
    if (xs[i] > m) {
    m = xs[i];
  }
    i = i + 1;
  }
  return m;
}

List<int> remove_once(List<int> xs, int value) {
  List<int> res = <int>[];
  bool removed = false;
  int i = 0;
  while (i < xs.length) {
    if (!removed && xs[i] == value) {
    removed = true;
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> reverse_list(List<int> xs) {
  List<int> res = <int>[];
  int i = xs.length - 1;
  while (i >= 0) {
    res = [...res, xs[i]];
    i = i - 1;
  }
  return res;
}

List<int> merge_sort(List<int> collection) {
  List<int> start = <int>[];
  List<int> end = <int>[];
  List<int> coll = collection;
  while (coll.length > 1) {
    int mn = list_min(coll);
    int mx = list_max(coll);
    start = [...start, mn];
    end = [...end, mx];
    coll = remove_once(coll, mn);
    coll = remove_once(coll, mx);
  }
  end = reverse_list(end);
  return ([...[...start, ...coll], ...end] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void test_merge_sort() {
  if (jsonEncode(merge_sort([0, 5, 3, 2, 2])) != jsonEncode([0, 2, 2, 3, 5])) {
    _error("case1 failed");
  }
  if (jsonEncode(merge_sort(<int>[])) != jsonEncode([])) {
    _error("case2 failed");
  }
  if (jsonEncode(merge_sort([-2, -5, -45])) != jsonEncode([-45, -5, -2])) {
    _error("case3 failed");
  }
}

void _main() {
  test_merge_sort();
  print(_str(merge_sort([0, 5, 3, 2, 2])));
}

void _start() {
  _main();
}

void main() => _start();
