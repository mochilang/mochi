// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double int_to_float(int x) {
  return x * 1.0;
}

int floor_int(double x) {
  int i = 0;
  while (int_to_float(i + 1) <= x) {
    i = i + 1;
  }
  return i;
}

List<double> set_at_float(List<double> xs, int idx, double value) {
  int i = 0;
  List<double> res = <double>[];
  while (i < xs.length) {
    if (i == idx) {
    res = (res..add(value));
  } else {
    res = (res..add(xs[i]));
  }
    i = i + 1;
  }
  return res;
}

List<List<double>> set_at_list_float(List<List<double>> xs, int idx, List<double> value) {
  int i = 0;
  List<List<double>> res = <List<double>>[];
  while (i < xs.length) {
    if (i == idx) {
    res = ((res..add(value)) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  } else {
    res = ((res..add(xs[i])) as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
    i = i + 1;
  }
  return res;
}

List<double> sort_float(List<double> xs) {
  List<double> res = xs;
  int i = 1;
  while (i < res.length) {
    double key = res[i];
    int j = i - 1;
    while (j >= 0 && res[j] > key) {
    res = set_at_float(res, j + 1, res[j]);
    j = j - 1;
  }
    res = set_at_float(res, j + 1, key);
    i = i + 1;
  }
  return res;
}

List<double> bucket_sort_with_count(List<double> xs, int bucket_count) {
  if (xs.length == 0 || bucket_count <= 0) {
    return List<double>.from([]);
  }
  double min_value = xs[0];
  double max_value = xs[0];
  int i = 1;
  while (i < xs.length) {
    if (xs[i] < min_value) {
    min_value = xs[i];
  }
    if (xs[i] > max_value) {
    max_value = xs[i];
  }
    i = i + 1;
  }
  if (max_value == min_value) {
    return xs;
  }
  double bucket_size = (max_value - min_value) / int_to_float(bucket_count);
  List<List<double>> buckets = <List<double>>[];
  i = 0;
  while (i < bucket_count) {
    buckets = (buckets..add([]));
    i = i + 1;
  }
  i = 0;
  while (i < xs.length) {
    double val = xs[i];
    int idx = floor_int((val - min_value) / bucket_size);
    if (idx < 0) {
    idx = 0;
  }
    if (idx >= bucket_count) {
    idx = bucket_count - 1;
  }
    List<double> bucket = buckets[idx];
    bucket = (bucket..add(val));
    buckets = set_at_list_float(buckets, idx, bucket);
    i = i + 1;
  }
  List<double> result = <double>[];
  i = 0;
  while (i < buckets.length) {
    List<double> sorted_bucket = sort_float(buckets[i]);
    int j = 0;
    while (j < sorted_bucket.length) {
    result = (result..add(sorted_bucket[j]));
    j = j + 1;
  }
    i = i + 1;
  }
  return result;
}

List<double> bucket_sort(List<double> xs) {
  return bucket_sort_with_count(xs, 10);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(bucket_sort(List<double>.from([-1.0, 2.0, -5.0, 0.0]))));
  print(_str(bucket_sort(List<double>.from([9.0, 8.0, 7.0, 6.0, -12.0]))));
  print(_str(bucket_sort(List<double>.from([0.4, 1.2, 0.1, 0.2, -0.9]))));
  print(_str(bucket_sort(<double>[])));
  print(_str(bucket_sort(List<double>.from([-10000000000.0, 10000000000.0]))));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
