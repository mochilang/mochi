// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

dynamic swap(List<int> seq, int i, int j) {
  int temp = seq[i];
  while (seq.length <= i) { seq.add(0); } seq[i] = seq[j];
  while (seq.length <= j) { seq.add(0); } seq[j] = temp;
}

dynamic slowsort_recursive(List<int> seq, int start, int end_index) {
  if (start >= end_index) {
    return;
  }
  int mid = (start + end_index) ~/ 2;
  slowsort_recursive(seq, start, mid);
  slowsort_recursive(seq, mid + 1, end_index);
  if (seq[end_index] < seq[mid]) {
    swap(seq, end_index, mid);
  }
  slowsort_recursive(seq, start, end_index - 1);
}

List<int> slow_sort(List<int> seq) {
  if (seq.length > 0) {
    slowsort_recursive(seq, 0, seq.length - 1);
  }
  return seq;
}

List<int> seq1 = [1, 6, 2, 5, 3, 4, 4, 5];
List<int> seq2 = <int>[];
List<int> seq3 = [2];
List<int> seq4 = [1, 2, 3, 4];
List<int> seq5 = [4, 3, 2, 1];
List<int> seq6 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
List<int> seq7 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
List<int> seq8 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
void main() {
  print(_str(slow_sort(seq1)));
  print(_str(slow_sort(seq2)));
  print(_str(slow_sort(seq3)));
  print(_str(slow_sort(seq4)));
  print(_str(slow_sort(seq5)));
  slowsort_recursive(seq6, 2, 7);
  print(_str(seq6));
  slowsort_recursive(seq7, 0, 4);
  print(_str(seq7));
  slowsort_recursive(seq8, 5, seq8.length - 1);
  print(_str(seq8));
}
