// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> set_at_int(List<int> xs, int idx, int value) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> comp_and_swap(List<int> arr, int i, int j, int dir) {
  List<int> res = arr;
  int xi = arr[i];
  int xj = arr[j];
  if (dir == 1 && xi > xj || dir == 0 && xi < xj) {
    res = set_at_int(res, i, xj);
    res = set_at_int(res, j, xi);
  }
  return res;
}

List<int> bitonic_merge(List<int> arr, int low, int length, int dir) {
  List<int> res = arr;
  if (length > 1) {
    int mid = length ~/ 2;
    int k = low;
    while (k < low + mid) {
    res = comp_and_swap(res, k, k + mid, dir);
    k = k + 1;
  };
    res = bitonic_merge(res, low, mid, dir);
    res = bitonic_merge(res, low + mid, mid, dir);
  }
  return res;
}

List<int> bitonic_sort(List<int> arr, int low, int length, int dir) {
  List<int> res = arr;
  if (length > 1) {
    int mid = length ~/ 2;
    res = bitonic_sort(res, low, mid, 1);
    res = bitonic_sort(res, low + mid, mid, 0);
    res = bitonic_merge(res, low, length, dir);
  }
  return res;
}

void _main() {
  List<int> data = [12, 34, 92, -23, 0, -121, -167, 145];
  List<int> asc = bitonic_sort(data, 0, data.length, 1);
  print(_str(asc));
  List<int> desc = bitonic_merge(asc, 0, asc.length, 0);
  print(_str(desc));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
