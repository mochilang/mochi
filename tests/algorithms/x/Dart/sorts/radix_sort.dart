// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int RADIX = 10;
List<List<int>> make_buckets() {
  List<List<int>> buckets = <List<int>>[];
  int i = 0;
  while (i < RADIX) {
    buckets = [...buckets, []];
    i = i + 1;
  }
  return buckets;
}

int max_value(List<int> xs) {
  int max_val = xs[0];
  int i = 1;
  while (i < xs.length) {
    if (xs[i] > max_val) {
    max_val = xs[i];
  }
    i = i + 1;
  }
  return max_val;
}

List<int> radix_sort(List<int> list_of_ints) {
  int placement = 1;
  int max_digit = max_value(list_of_ints);
  while (placement <= max_digit) {
    List<List<int>> buckets = make_buckets();
    int i = 0;
    while (i < list_of_ints.length) {
    int value = list_of_ints[i];
    int tmp = value ~/ placement % RADIX;
    while (buckets.length <= tmp) { buckets.add(<int>[]); } buckets[tmp] = [...buckets[tmp], value];
    i = i + 1;
  }
    int a = 0;
    int b = 0;
    while (b < RADIX) {
    List<int> bucket = buckets[b];
    int j = 0;
    while (j < bucket.length) {
    while (list_of_ints.length <= a) { list_of_ints.add(0); } list_of_ints[a] = bucket[j];
    a = a + 1;
    j = j + 1;
  }
    b = b + 1;
  }
    placement = placement * RADIX;
  }
  return list_of_ints;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(radix_sort([0, 5, 3, 2, 2])));
  print(_str(radix_sort([1, 100, 10, 1000])));
  print(_str(radix_sort([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
