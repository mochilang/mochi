// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

dynamic stooge(List<int> arr, int i, int h) {
  if (i >= h) {
    return;
  }
  if (arr[i] > arr[h]) {
    int tmp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[h];
    while (arr.length <= h) { arr.add(0); } arr[h] = tmp;
  }
  if (h - i + 1 > 2) {
    int t = (h - i + 1) ~/ 3 as int;
    stooge(arr, i, h - t);
    stooge(arr, i + t, h);
    stooge(arr, i, h - t);
  }
}

List<int> stooge_sort(List<int> arr) {
  stooge(arr, 0, arr.length - 1);
  return arr;
}

void main() {
  print(_str(stooge_sort([18, 0, -7, -1, 2, 2])));
}
