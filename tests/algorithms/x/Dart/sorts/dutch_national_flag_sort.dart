// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> dutch_national_flag_sort(List<int> seq) {
  List<int> a = seq;
  int low = 0;
  int mid = 0;
  int high = a.length - 1;
  while (mid <= high) {
    int v = a[mid];
    if (v == 0) {
    int tmp = a[low];
    while (a.length <= low) { a.add(0); } a[low] = v;
    while (a.length <= mid) { a.add(0); } a[mid] = tmp;
    low = low + 1;
    mid = mid + 1;
  } else {
    if (v == 1) {
    mid = mid + 1;
  } else {
    if (v == 2) {
    int tmp2 = a[high];
    while (a.length <= high) { a.add(0); } a[high] = v;
    while (a.length <= mid) { a.add(0); } a[mid] = tmp2;
    high = high - 1;
  } else {
    throw Exception("The elements inside the sequence must contains only (0, 1, 2) values");
  };
  };
  }
  }
  return a;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + dutch_national_flag_sort(<int>[]).join(', ') + "]");
  print("[" + dutch_national_flag_sort([0]).join(', ') + "]");
  print("[" + dutch_national_flag_sort([2, 1, 0, 0, 1, 2]).join(', ') + "]");
  print("[" + dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
