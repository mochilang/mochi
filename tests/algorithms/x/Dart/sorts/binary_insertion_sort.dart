// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> binary_insertion_sort(List<int> arr) {
  int i = 1;
  while (i < arr.length) {
    int value = arr[i];
    int low = 0;
    int high = i - 1;
    while (low <= high) {
    int mid = (low + high) ~/ 2;
    if (value < arr[mid]) {
    high = mid - 1;
  } else {
    low = mid + 1;
  }
  }
    int j = i;
    while (j > low) {
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j - 1];
    j = j - 1;
  }
    while (arr.length <= low) { arr.add(0); } arr[low] = value;
    i = i + 1;
  }
  return arr;
}

void _main() {
  List<int> example1 = [5, 2, 4, 6, 1, 3];
  print(_str(binary_insertion_sort(example1)));
  List<int> example2 = [];
  print(_str(binary_insertion_sort(example2)));
  List<int> example3 = [4, 2, 4, 1, 3];
  print(_str(binary_insertion_sort(example3)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
