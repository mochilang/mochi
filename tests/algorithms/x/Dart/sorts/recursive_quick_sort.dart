// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> concat(List<int> a, List<int> b) {
  List<int> result = <int>[];
  for (int x in a) {
    result = [...result, x];
  }
  for (int x in b) {
    result = [...result, x];
  }
  return result;
}

List<int> quick_sort(List<int> data) {
  if (data.length <= 1) {
    return data;
  }
  int pivot = data[0];
  List<int> left = <int>[];
  List<int> right = <int>[];
  int i = 1;
  while (i < data.length) {
    int e = data[i];
    if (e <= pivot) {
    left = [...left, e];
  } else {
    right = [...right, e];
  }
    i = i + 1;
  }
  List<int> sorted_left = quick_sort(left);
  List<int> sorted_right = quick_sort(right);
  List<int> left_pivot = [...sorted_left, pivot];
  return ([...left_pivot, ...sorted_right] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(quick_sort([2, 1, 0])));
  print(_str(quick_sort([3, 5, 2, 4, 1])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
