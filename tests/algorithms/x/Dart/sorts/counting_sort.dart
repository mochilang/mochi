// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int max_val(List<int> arr) {
  int m = arr[0];
  int i = 1;
  while (i < arr.length) {
    if (arr[i] > m) {
    m = arr[i];
  }
    i = i + 1;
  }
  return m;
}

int min_val(List<int> arr) {
  int m = arr[0];
  int i = 1;
  while (i < arr.length) {
    if (arr[i] < m) {
    m = arr[i];
  }
    i = i + 1;
  }
  return m;
}

List<int> counting_sort(List<int> collection) {
  if (collection.length == 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  int coll_len = collection.length;
  int coll_max = max_val(collection);
  int coll_min = min_val(collection);
  int counting_arr_length = coll_max + 1 - coll_min;
  List<int> counting_arr = <int>[];
  int i = 0;
  while (i < counting_arr_length) {
    counting_arr = (counting_arr..add(0));
    i = i + 1;
  }
  i = 0;
  while (i < coll_len) {
    int number = collection[i];
    while (counting_arr.length <= number - coll_min) { counting_arr.add(0); } counting_arr[number - coll_min] = counting_arr[number - coll_min] + 1;
    i = i + 1;
  }
  i = 1;
  while (i < counting_arr_length) {
    while (counting_arr.length <= i) { counting_arr.add(0); } counting_arr[i] = counting_arr[i] + counting_arr[i - 1];
    i = i + 1;
  }
  List<int> ordered = <int>[];
  i = 0;
  while (i < coll_len) {
    ordered = (ordered..add(0));
    i = i + 1;
  }
  int idx = coll_len - 1;
  while (idx >= 0) {
    int number = collection[idx];
    int pos = counting_arr[number - coll_min] - 1;
    while (ordered.length <= pos) { ordered.add(0); } ordered[pos] = number;
    while (counting_arr.length <= number - coll_min) { counting_arr.add(0); } counting_arr[number - coll_min] = counting_arr[number - coll_min] - 1;
    idx = idx - 1;
  }
  return ordered;
}

String ascii_chars = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
String chr(int code) {
  if (code == 10) {
    return "\n";
  }
  if (code == 13) {
    return "\r";
  }
  if (code == 9) {
    return "	";
  }
  if (code >= 32 && code < 127) {
    return _substr(ascii_chars, code - 32, code - 31);
  }
  return "";
}

int ord(String ch) {
  if (ch == "\n") {
    return 10;
  }
  if (ch == "\r") {
    return 13;
  }
  if (ch == "	") {
    return 9;
  }
  int i = 0;
  while (i < ascii_chars.length) {
    if (_substr(ascii_chars, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

String counting_sort_string(String s) {
  List<int> codes = <int>[];
  int i = 0;
  while (i < s.length) {
    codes = (codes..add(ord(_substr(s, i, i + 1))));
    i = i + 1;
  }
  List<int> sorted_codes = counting_sort(codes);
  String res = "";
  i = 0;
  while (i < sorted_codes.length) {
    res = res + chr(sorted_codes[i]);
    i = i + 1;
  }
  return res;
}

List<int> example1 = counting_sort([0, 5, 3, 2, 2]);
List<int> example2 = counting_sort(<int>[]);
List<int> example3 = counting_sort([-2, -5, -45]);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(example1));
  print(_str(example2));
  print(_str(example3));
  print(counting_sort_string("thisisthestring"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
