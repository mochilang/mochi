// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> comb_sort(List<int> data) {
  double shrink_factor = 1.3;
  int gap = data.length;
  bool completed = false;
  while (!completed) {
    gap = (gap / shrink_factor).toInt();
    if (gap <= 1) {
    gap = 1;
    completed = true;
  }
    int index = 0;
    while (index + gap < data.length) {
    if (data[index] > data[index + gap]) {
    int tmp = data[index];
    while (data.length <= index) { data.add(0); } data[index] = data[index + gap];
    while (data.length <= index + gap) { data.add(0); } data[index + gap] = tmp;
    completed = false;
  }
    index = index + 1;
  }
  }
  return data;
}

void _main() {
  print("[" + comb_sort([0, 5, 3, 2, 2]).join(', ') + "]");
  print("[" + comb_sort(<int>[]).join(', ') + "]");
  print("[" + comb_sort([99, 45, -7, 8, 2, 0, -15, 3]).join(', ') + "]");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
