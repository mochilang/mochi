// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> merge(List<int> a, int low, int mid, int high) {
  List<int> left = a.sublist(low, mid);
  List<int> right = a.sublist(mid, high + 1);
  List<int> result = <int>[];
  while (left.length > 0 && right.length > 0) {
    if (left[0] <= right[0]) {
    result = (result..add(left[0]));
    left = left.sublist(1, left.length);
  } else {
    result = (result..add(right[0]));
    right = right.sublist(1, right.length);
  }
  }
  int i = 0;
  while (i < left.length) {
    result = (result..add(left[i]));
    i = i + 1;
  }
  i = 0;
  while (i < right.length) {
    result = (result..add(right[i]));
    i = i + 1;
  }
  i = 0;
  while (i < result.length) {
    while (a.length <= low + i) { a.add(0); } a[low + i] = result[i];
    i = i + 1;
  }
  return a;
}

List<int> iter_merge_sort(List<int> items) {
  int n = items.length;
  if (n <= 1) {
    return items;
  }
  List<int> arr = items.sublist(0, items.length);
  int p = 2;
  while (p <= n) {
    int i = 0;
    while (i < n) {
    int high = i + p - 1;
    if (high >= n) {
    high = n - 1;
  }
    int low = i;
    int mid = (low + high + 1) ~/ 2;
    arr = merge(arr, low, mid, high);
    i = i + p;
  }
    if (p * 2 >= n) {
    int mid2 = i - p;
    arr = merge(arr, 0, mid2, n - 1);
    break;
  }
    p = p * 2;
  }
  return arr;
}

String list_to_string(List<int> arr) {
  String s = "[";
  int i = 0;
  while (i < arr.length) {
    s = s + _str(arr[i]);
    if (i < arr.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  return s + "]";
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7])));
  print(list_to_string(iter_merge_sort([1])));
  print(list_to_string(iter_merge_sort([2, 1])));
  print(list_to_string(iter_merge_sort([4, 3, 2, 1])));
  print(list_to_string(iter_merge_sort([5, 4, 3, 2, 1])));
  print(list_to_string(iter_merge_sort([-2, -9, -1, -4])));
  print(list_to_string(iter_merge_sort(<int>[])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
