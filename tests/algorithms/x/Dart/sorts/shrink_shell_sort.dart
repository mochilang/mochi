// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> shell_sort(List<int> collection) {
  int gap = collection.length;
  int ten = 10;
  int thirteen = 13;
  while (gap > 1) {
    gap = gap * ten ~/ thirteen;
    int i = gap;
    while (i < collection.length) {
    int temp = collection[i];
    int j = i;
    while (j >= gap && collection[j - gap] > temp) {
    while (collection.length <= j) { collection.add(0); } collection[j] = collection[j - gap];
    j = j - gap;
  }
    while (collection.length <= j) { collection.add(0); } collection[j] = temp;
    i = i + 1;
  }
  }
  return collection;
}

void _main() {
  print(_str(shell_sort([3, 2, 1])));
  print(_str(shell_sort(<int>[])));
  print(_str(shell_sort([1])));
}

void _start() {
  _main();
}

void main() => _start();
