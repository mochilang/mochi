// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

void heapify(List<int> arr, int index, int heap_size) {
  int largest = index;
  int left_index = 2 * index + 1;
  int right_index = 2 * index + 2;
  if (left_index < heap_size && arr[left_index] > arr[largest]) {
    largest = left_index;
  }
  if (right_index < heap_size && arr[right_index] > arr[largest]) {
    largest = right_index;
  }
  if (largest != index) {
    int temp = arr[largest];
    while (arr.length <= largest) { arr.add(0); } arr[largest] = arr[index];
    while (arr.length <= index) { arr.add(0); } arr[index] = temp;
    heapify(arr, largest, heap_size);
  }
}

List<int> heap_sort(List<int> arr) {
  int n = arr.length;
  int i = n ~/ 2 - 1;
  while (i >= 0) {
    heapify(arr, i, n);
    i = i - 1;
  }
  i = n - 1;
  while (i > 0) {
    int temp = arr[0];
    while (arr.length <= 0) { arr.add(0); } arr[0] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
    heapify(arr, 0, i);
    i = i - 1;
  }
  return arr;
}

List<int> data = [3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4];
List<int> result = heap_sort(data);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + result.join(', ') + "]");
  if (_str(result) != _str([-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123])) {
    throw Exception("Assertion error");
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
