// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String DIGITS = "0123456789";
String LOWER = "abcdefghijklmnopqrstuvwxyz";
String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

bool is_digit(String ch) {
  return index_of(DIGITS, ch) >= 0;
}

String to_lower(String ch) {
  int idx = index_of(UPPER, ch);
  if (idx >= 0) {
    return _substr(LOWER, idx, idx + 1);
  }
  return ch;
}

String pad_left(String s, int width) {
  String res = s;
  while (res.length < width) {
    res = "0" + res;
  }
  return res;
}

List<String> alphanum_key(String s) {
  List<String> key = <String>[];
  int i = 0;
  while (i < s.length) {
    if (is_digit(s.substring(i, i + 1))) {
    String _num = "";
    while (i < s.length && is_digit(s.substring(i, i + 1))) {
    _num = _num + s.substring(i, i + 1);
    i = i + 1;
  };
    String len_str = pad_left(_str(_num.length), 3);
    key = [...key, "#" + len_str + _num];
  } else {
    String seg = "";
    while (i < s.length) {
    if (is_digit(s.substring(i, i + 1))) {
    break;
  }
    seg = seg + to_lower(s.substring(i, i + 1));
    i = i + 1;
  };
    key = [...key, seg];
  }
  }
  return key;
}

int compare_keys(List<String> a, List<String> b) {
  int i = 0;
  while (i < a.length && i < b.length) {
    if (a[i].compareTo(b[i]) < 0) {
    return -1;
  }
    if (a[i].compareTo(b[i]) > 0) {
    return 1;
  }
    i = i + 1;
  }
  if (a.length < b.length) {
    return -1;
  }
  if (a.length > b.length) {
    return 1;
  }
  return 0;
}

List<String> natural_sort(List<String> arr) {
  List<String> res = <String>[];
  List<List<String>> keys = <List<String>>[];
  int k = 0;
  while (k < arr.length) {
    res = [...res, arr[k]];
    keys = ([...keys, alphanum_key(arr[k])] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    k = k + 1;
  }
  int i = 1;
  while (i < res.length) {
    String current = res[i];
    List<String> current_key = keys[i];
    int j = i - 1;
    while (j >= 0 && compare_keys(keys[j], current_key) > 0) {
    while (res.length <= j + 1) { res.add(""); } res[j + 1] = res[j];
    while (keys.length <= j + 1) { keys.add(<String>[]); } keys[j + 1] = keys[j];
    j = j - 1;
  }
    while (res.length <= j + 1) { res.add(""); } res[j + 1] = current;
    while (keys.length <= j + 1) { keys.add(<String>[]); } keys[j + 1] = current_key;
    i = i + 1;
  }
  return res;
}

List<String> example1 = ["2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"];
List<String> example2 = ["Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(natural_sort(example1)));
  print(_str(natural_sort(example2)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
