// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> copy_list(List<int> xs) {
  List<int> res = <int>[];
  int k = 0;
  while (k < xs.length) {
    res = [...res, xs[k]];
    k = k + 1;
  }
  return res;
}

List<int> insertion_sort(List<int> xs) {
  List<int> arr = copy_list(xs);
  int idx = 1;
  while (idx < arr.length) {
    int value = arr[idx];
    int jdx = idx - 1;
    while (jdx >= 0 && arr[jdx] > value) {
    while (arr.length <= jdx + 1) { arr.add(0); } arr[jdx + 1] = arr[jdx];
    jdx = jdx - 1;
  }
    while (arr.length <= jdx + 1) { arr.add(0); } arr[jdx + 1] = value;
    idx = idx + 1;
  }
  return arr;
}

List<int> merge(List<int> left, List<int> right) {
  List<int> result = <int>[];
  int i = 0;
  int j = 0;
  while (i < left.length && j < right.length) {
    if (left[i] < right[j]) {
    result = [...result, left[i]];
    i = i + 1;
  } else {
    result = [...result, right[j]];
    j = j + 1;
  }
  }
  while (i < left.length) {
    result = [...result, left[i]];
    i = i + 1;
  }
  while (j < right.length) {
    result = [...result, right[j]];
    j = j + 1;
  }
  return result;
}

List<int> tim_sort(List<int> xs) {
  int n = xs.length;
  List<List<int>> runs = <List<int>>[];
  List<List<int>> sorted_runs = <List<int>>[];
  List<int> current = <int>[];
  current = [...current, xs[0]];
  int i = 1;
  while (i < n) {
    if (xs[i] < xs[i - 1]) {
    runs = ([...runs, copy_list(current)] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    current = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    current = [...current, xs[i]];
  } else {
    current = [...current, xs[i]];
  }
    i = i + 1;
  }
  runs = ([...runs, copy_list(current)] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  int r = 0;
  while (r < runs.length) {
    sorted_runs = ([...sorted_runs, insertion_sort(runs[r])] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    r = r + 1;
  }
  List<int> result = <int>[];
  r = 0;
  while (r < sorted_runs.length) {
    result = merge(result, sorted_runs[r]);
    r = r + 1;
  }
  return result;
}

String list_to_string(List<int> xs) {
  String s = "[";
  int k = 0;
  while (k < xs.length) {
    s = s + _str(xs[k]);
    if (k < xs.length - 1) {
    s = s + ", ";
  }
    k = k + 1;
  }
  return s + "]";
}

List<int> sample = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7];
List<int> sorted_sample = tim_sort(sample);
List<int> sample2 = [3, 2, 1];
List<int> sorted_sample2 = tim_sort(sample2);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(list_to_string(sorted_sample));
  print(list_to_string(sorted_sample2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
