// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> odd_even_sort(List<int> xs) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < xs.length) {
    arr = [...arr, xs[i]];
    i = i + 1;
  }
  int n = arr.length;
  bool sorted = false;
  while (sorted == false) {
    sorted = true;
    int j = 0;
    while (j < n - 1) {
    if (arr[j] > arr[j + 1]) {
    int tmp = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = tmp;
    sorted = false;
  }
    j = j + 2;
  }
    j = 1;
    while (j < n - 1) {
    if (arr[j] > arr[j + 1]) {
    int tmp = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = tmp;
    sorted = false;
  }
    j = j + 2;
  }
  }
  return arr;
}

void print_list(List<int> xs) {
  int i = 0;
  String out = "";
  while (i < xs.length) {
    if (i > 0) {
    out = out + " ";
  }
    out = out + _str(xs[i]);
    i = i + 1;
  }
  print(out);
}

void test_odd_even_sort() {
  List<int> a = [5, 4, 3, 2, 1];
  List<int> r1 = odd_even_sort(a);
  if (r1[0] != 1 || r1[1] != 2 || r1[2] != 3 || r1[3] != 4 || r1[4] != 5) {
    throw Exception("case1 failed");
  }
  List<int> b = [];
  List<int> r2 = odd_even_sort(b);
  if (r2.length != 0) {
    throw Exception("case2 failed");
  }
  List<int> c = [-10, -1, 10, 2];
  List<int> r3 = odd_even_sort(c);
  if (r3[0] != -10 || r3[1] != -1 || r3[2] != 2 || r3[3] != 10) {
    throw Exception("case3 failed");
  }
  List<int> d = [1, 2, 3, 4];
  List<int> r4 = odd_even_sort(d);
  if (r4[0] != 1 || r4[1] != 2 || r4[2] != 3 || r4[3] != 4) {
    throw Exception("case4 failed");
  }
}

void _main() {
  test_odd_even_sort();
  List<int> sample = [5, 4, 3, 2, 1];
  List<int> sorted = odd_even_sort(sample);
  print_list(sorted);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
