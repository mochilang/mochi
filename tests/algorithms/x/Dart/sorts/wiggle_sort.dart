// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<double> swap(List<double> xs, int i, int j) {
  List<double> res = <double>[];
  int k = 0;
  while (k < xs.length) {
    if (k == i) {
    res = [...res, xs[j]];
  } else {
    if (k == j) {
    res = [...res, xs[i]];
  } else {
    res = [...res, xs[k]];
  };
  }
    k = k + 1;
  }
  return res;
}

List<double> wiggle_sort(List<double> nums) {
  int i = 0;
  List<double> res = nums;
  while (i < res.length) {
    int j = (i == 0 ? res.length - 1 : i - 1);
    double prev = res[j];
    double curr = res[i];
    if ((i % 2 == 1) == (prev > curr)) {
    res = swap(res, j, i);
  }
    i = i + 1;
  }
  return res;
}

void main() {
  print(_str(wiggle_sort([3.0, 5.0, 2.0, 1.0, 6.0, 4.0])));
  print(_str(wiggle_sort([0.0, 5.0, 3.0, 2.0, 2.0])));
  print(_str(wiggle_sort(List<double>.from([]))));
  print(_str(wiggle_sort([-2.0, -5.0, -45.0])));
  print(_str(wiggle_sort([-2.1, -5.68, -45.11])));
}
