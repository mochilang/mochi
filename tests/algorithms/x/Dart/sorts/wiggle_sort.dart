// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<double> swap(List<double> xs, int i, int j) {
  List<double> res = <double>[];
  int k = 0;
  while (k < xs.length) {
    if (k == i) {
    res = [...res, xs[j]];
  } else {
    if (k == j) {
    res = [...res, xs[i]];
  } else {
    res = [...res, xs[k]];
  };
  }
    k = k + 1;
  }
  return res;
}

List<double> wiggle_sort(List<double> nums) {
  int i = 0;
  List<double> res = nums;
  while (i < res.length) {
    int j = (i == 0 ? res.length - 1 : i - 1);
    double prev = res[j];
    double curr = res[i];
    if (i % 2 == 1 == prev > curr) {
    res = swap(res, j, i);
  }
    i = i + 1;
  }
  return res;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(wiggle_sort([3.0, 5.0, 2.0, 1.0, 6.0, 4.0])));
  print(_str(wiggle_sort([0.0, 5.0, 3.0, 2.0, 2.0])));
  print(_str(wiggle_sort(List<double>.from([]))));
  print(_str(wiggle_sort([-2.0, -5.0, -45.0])));
  print(_str(wiggle_sort([-2.1, -5.68, -45.11])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
