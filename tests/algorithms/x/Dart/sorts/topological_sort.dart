// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

Map<String, List<String>> edges = {"a": ["c", "b"], "b": ["d", "e"], "c": [], "d": [], "e": []};
List<String> vertices = ["a", "b", "c", "d", "e"];
List<String> topological_sort(String start, Map<String, bool> visited, List<String> sort) {
  visited[start] = true;
  List<String> neighbors = edges[start]!;
  int i = 0;
  while (i < neighbors.length) {
    String neighbor = neighbors[i];
    if (!visited.containsKey(neighbor)) {
    sort = topological_sort(neighbor, visited, sort);
  }
    i = i + 1;
  }
  sort = [...sort, start];
  if (visited.length != vertices.length) {
    int j = 0;
    while (j < vertices.length) {
    String v = vertices[j];
    if (!visited.containsKey(v)) {
    sort = topological_sort(v, visited, sort);
  }
    j = j + 1;
  };
  }
  return sort;
}

void _main() {
  List<String> result = topological_sort("a", {}, <String>[]);
  print(_str(result));
}

void _start() {
  _main();
}

void main() => _start();
