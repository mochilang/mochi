// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

double powf(double base, int exponent) {
  double result = 1.0;
  int i = 0;
  while (i < exponent) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double round2(double value) {
  if (value >= 0.0) {
    int scaled = (value * 100.0 + 0.5).toInt();
    return (scaled.toDouble()) / 100.0;
  }
  int scaled = (value * 100.0 - 0.5).toInt();
  return (scaled.toDouble()) / 100.0;
}

double present_value(double discount_rate, List<double> cash_flows) {
  if (discount_rate < 0.0) {
    _error("Discount rate cannot be negative");
  }
  if (cash_flows.length == 0) {
    _error("Cash flows list cannot be empty");
  }
  double pv = 0.0;
  int i = 0;
  double factor = 1.0 + discount_rate;
  while (i < cash_flows.length) {
    double cf = cash_flows[i];
    pv = pv + cf / powf(factor, i);
    i = i + 1;
  }
  return round2(pv);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(present_value(0.13, List<double>.from([10.0, 20.7, -293.0, 297.0]))));
  print(_str(present_value(0.07, List<double>.from([-109129.39, 30923.23, 15098.93, 29734.0, 39.0]))));
  print(_str(present_value(0.07, [109129.39, 30923.23, 15098.93, 29734.0, 39.0])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
