// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

void panic(String msg) {
  print(msg);
}

double powf(double base, double exp) {
  double result = 1.0;
  int i = 0;
  while (i < ((exp).toInt())) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double simple_interest(double principal, double daily_rate, double days) {
  if (days <= 0.0) {
    _error("days_between_payments must be > 0");
    return 0.0;
  }
  if (daily_rate < 0.0) {
    _error("daily_interest_rate must be >= 0");
    return 0.0;
  }
  if (principal <= 0.0) {
    _error("principal must be > 0");
    return 0.0;
  }
  return principal * daily_rate * days;
}

double compound_interest(double principal, double nominal_rate, double periods) {
  if (periods <= 0.0) {
    _error("number_of_compounding_periods must be > 0");
    return 0.0;
  }
  if (nominal_rate < 0.0) {
    _error("nominal_annual_interest_rate_percentage must be >= 0");
    return 0.0;
  }
  if (principal <= 0.0) {
    _error("principal must be > 0");
    return 0.0;
  }
  return principal * (powf(1.0 + nominal_rate, periods) - 1.0);
}

double apr_interest(double principal, double apr, double years) {
  if (years <= 0.0) {
    _error("number_of_years must be > 0");
    return 0.0;
  }
  if (apr < 0.0) {
    _error("nominal_annual_percentage_rate must be >= 0");
    return 0.0;
  }
  if (principal <= 0.0) {
    _error("principal must be > 0");
    return 0.0;
  }
  return compound_interest(principal, apr / 365.0, years * 365.0);
}

void _main() {
  print(_str(simple_interest(18000.0, 0.06, 3.0)));
  print(_str(simple_interest(0.5, 0.06, 3.0)));
  print(_str(simple_interest(18000.0, 0.01, 10.0)));
  print(_str(compound_interest(10000.0, 0.05, 3.0)));
  print(_str(compound_interest(10000.0, 0.05, 1.0)));
  print(_str(apr_interest(10000.0, 0.05, 3.0)));
  print(_str(apr_interest(10000.0, 0.05, 1.0)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
