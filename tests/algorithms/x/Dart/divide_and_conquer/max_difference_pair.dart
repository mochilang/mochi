// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int min_slice(List<int> a, int start, int end) {
  int m = a[start];
  int i = start + 1;
  while (i < end) {
    if (a[i] < m) {
    m = a[i];
  }
    i = i + 1;
  }
  return m;
}

int max_slice(List<int> a, int start, int end) {
  int m = a[start];
  int i = start + 1;
  while (i < end) {
    if (a[i] > m) {
    m = a[i];
  }
    i = i + 1;
  }
  return m;
}

List<int> max_diff_range(List<int> a, int start, int end) {
  if (end - start == 1) {
    int v = a[start];
    return [v, v];
  }
  int mid = (start + end) ~/ 2;
  List<int> left = max_diff_range(a, start, mid);
  List<int> right = max_diff_range(a, mid, end);
  int small1 = left[0];
  int big1 = left[1];
  int small2 = right[0];
  int big2 = right[1];
  int min_left = min_slice(a, start, mid);
  int max_right = max_slice(a, mid, end);
  int cross_diff = max_right - min_left;
  int left_diff = big1 - small1;
  int right_diff = big2 - small2;
  if (right_diff > cross_diff && right_diff > left_diff) {
    return [small2, big2];
  } else {
    if (left_diff > cross_diff) {
    return [small1, big1];
  } else {
    return [min_left, max_right];
  };
  }
}

List<int> max_difference(List<int> a) {
  return max_diff_range(a, 0, a.length);
}

void _main() {
  List<int> result = max_difference([5, 11, 2, 1, 7, 9, 0, 7]);
  print(_str(result));
}

void _start() {
  _main();
}

void main() => _start();
