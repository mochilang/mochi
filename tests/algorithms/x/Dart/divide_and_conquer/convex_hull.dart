// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Point {
  int x;
  int y;
  Point({required this.x, required this.y});
}

int cross(Point o, Point a, Point b) {
  return (a.x - o.x) * (b.y - o.y) - (a.y - o.y) * (b.x - o.x);
}

List<Point> sortPoints(List<Point> ps) {
  List<Point> arr = ps;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n - 1) {
    Point p = arr[j];
    Point q = arr[j + 1];
    if (p.x > q.x || p.x == q.x && p.y > q.y) {
    while (arr.length <= j) { arr.add(null); } arr[j] = q;
    while (arr.length <= j + 1) { arr.add(null); } arr[j + 1] = p;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<Point> convex_hull(List<Point> ps) {
  ps = sortPoints(ps);
  List<Point> lower = <Point>[];
  for (Point p in ps) {
    while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], p) <= 0) {
    lower = _substr(lower, 0, lower.length - 1);
  }
    lower = [...lower, p];
  }
  List<Point> upper = <Point>[];
  int i = ps.length - 1;
  while (i >= 0) {
    Point p = ps[i];
    while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], p) <= 0) {
    upper = _substr(upper, 0, upper.length - 1);
  }
    upper = [...upper, p];
    i = i - 1;
  }
  List<Point> hull = _substr(lower, 0, lower.length - 1);
  int j = 0;
  while (j < upper.length - 1) {
    hull = [...hull, upper[j]];
    j = j + 1;
  }
  return hull;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
