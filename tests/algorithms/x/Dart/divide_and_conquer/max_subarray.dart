// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Result {
  int start;
  int end;
  double sum;
  Result({required this.start, required this.end, required this.sum});
}

Result max_cross_sum(List<double> arr, int low, int mid, int high) {
  double left_sum = -1000000000000000000.0;
  int max_left = -1;
  double sum = 0.0;
  int i = mid;
  while (i >= low) {
    sum = sum + arr[i];
    if (sum > left_sum) {
    left_sum = sum;
    max_left = i;
  }
    i = i - 1;
  }
  double right_sum = -1000000000000000000.0;
  int max_right = -1;
  sum = 0.0;
  i = mid + 1;
  while (i <= high) {
    sum = sum + arr[i];
    if (sum > right_sum) {
    right_sum = sum;
    max_right = i;
  }
    i = i + 1;
  }
  return Result(start: max_left, end: max_right, sum: left_sum + right_sum);
}

Result max_subarray(List<double> arr, int low, int high) {
  if (arr.length == 0) {
    return Result(start: -1, end: -1, sum: 0.0);
  }
  if (low == high) {
    return Result(start: low, end: high, sum: arr[low]);
  }
  int mid = (low + high) ~/ 2;
  Result left = max_subarray(arr, low, mid);
  Result right = max_subarray(arr, mid + 1, high);
  Result cross = max_cross_sum(arr, low, mid, high);
  if (left.sum >= right.sum && left.sum >= cross.sum) {
    return left;
  }
  if (right.sum >= left.sum && right.sum >= cross.sum) {
    return right;
  }
  return cross;
}

void show(Result res) {
  print("[" + _str(res.start) + ", " + _str(res.end) + ", " + _str(res.sum) + "]");
}

void _main() {
  List<double> nums1 = [-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0];
  Result res1 = max_subarray(nums1, 0, nums1.length - 1);
  show(res1);
  List<double> nums2 = [2.0, 8.0, 9.0];
  Result res2 = max_subarray(nums2, 0, nums2.length - 1);
  show(res2);
  List<double> nums3 = [0.0, 0.0];
  Result res3 = max_subarray(nums3, 0, nums3.length - 1);
  show(res3);
  List<double> nums4 = [-1.0, 0.0, 1.0];
  Result res4 = max_subarray(nums4, 0, nums4.length - 1);
  show(res4);
  List<double> nums5 = [-2.0, -3.0, -1.0, -4.0, -6.0];
  Result res5 = max_subarray(nums5, 0, nums5.length - 1);
  show(res5);
  List<double> nums6 = [];
  Result res6 = max_subarray(nums6, 0, 0);
  show(res6);
}

void _start() {
  _main();
}

void main() => _start();
