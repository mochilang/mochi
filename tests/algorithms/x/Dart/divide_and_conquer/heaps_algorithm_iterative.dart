// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> copy_list(List<int> arr) {
  List<int> result = <int>[];
  int i = 0;
  while (i < arr.length) {
    result = (result..add(arr[i]));
    i = i + 1;
  }
  return result;
}

List<List<int>> heaps(List<int> arr) {
  if (arr.length <= 1) {
    List<List<int>> single = [];
    return ((single..add(copy_list(arr))) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  int n = arr.length;
  List<int> c = <int>[];
  int i = 0;
  while (i < n) {
    c = (c..add(0));
    i = i + 1;
  }
  List<List<int>> res = <List<int>>[];
  res = ((res..add(copy_list(arr))) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  i = 0;
  while (i < n) {
    if (c[i] < i) {
    if (i % 2 == 0) {
    int temp = arr[0];
    while (arr.length <= 0) { arr.add(0); } arr[0] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
  } else {
    int temp = arr[c[i]];
    while (arr.length <= c[i]) { arr.add(0); } arr[c[i]] = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = temp;
  };
    res = ((res..add(copy_list(arr))) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    while (c.length <= i) { c.add(0); } c[i] = c[i] + 1;
    i = 0;
  } else {
    while (c.length <= i) { c.add(0); } c[i] = 0;
    i = i + 1;
  }
  }
  return res;
}

void main() {
  print(_str(heaps([1, 2, 3])));
}
