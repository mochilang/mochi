// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<List<int>> default_matrix_multiplication(List<List<int>> a, List<List<int>> b) {
  return [[a[0][0] * b[0][0] + a[0][1] * b[1][0], a[0][0] * b[0][1] + a[0][1] * b[1][1]], [a[1][0] * b[0][0] + a[1][1] * b[1][0], a[1][0] * b[0][1] + a[1][1] * b[1][1]]];
}

List<List<int>> matrix_addition(List<List<int>> matrix_a, List<List<int>> matrix_b) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < matrix_a.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < matrix_a[i].length) {
    row = [...row, matrix_a[i][j] + matrix_b[i][j]];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> matrix_subtraction(List<List<int>> matrix_a, List<List<int>> matrix_b) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < matrix_a.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < matrix_a[i].length) {
    row = [...row, matrix_a[i][j] - matrix_b[i][j]];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<List<int>>> split_matrix(List<List<int>> a) {
  int n = a.length;
  int mid = n ~/ 2;
  List<List<int>> top_left = <List<int>>[];
  List<List<int>> top_right = <List<int>>[];
  List<List<int>> bot_left = <List<int>>[];
  List<List<int>> bot_right = <List<int>>[];
  int i = 0;
  while (i < mid) {
    List<int> left_row = <int>[];
    List<int> right_row = <int>[];
    int j = 0;
    while (j < mid) {
    left_row = [...left_row, a[i][j]];
    right_row = [...right_row, a[i][j + mid]];
    j = j + 1;
  }
    top_left = ([...top_left, left_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    top_right = ([...top_right, right_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = mid;
  while (i < n) {
    left_row = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    right_row = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    int j = 0;
    while (j < mid) {
    left_row = [...left_row, a[i][j]];
    right_row = [...right_row, a[i][j + mid]];
    j = j + 1;
  }
    bot_left = ([...bot_left, left_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    bot_right = ([...bot_right, right_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return [top_left, top_right, bot_left, bot_right];
}

List<int> matrix_dimensions(List<List<int>> matrix) {
  return [matrix.length, matrix[0].length];
}

int next_power_of_two(int n) {
  int p = 1;
  while (p < n) {
    p = p * 2;
  }
  return p;
}

List<List<int>> pad_matrix(List<List<int>> mat, int rows, int cols) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j < cols) {
    int v = 0;
    if (i < mat.length && j < mat[0].length) {
    v = mat[i][j];
  }
    row = [...row, v];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<int>> actual_strassen(List<List<int>> matrix_a, List<List<int>> matrix_b) {
  if (matrix_dimensions(matrix_a)[0] == 2) {
    return default_matrix_multiplication(matrix_a, matrix_b);
  }
  List<List<List<int>>> parts_a = split_matrix(matrix_a);
  List<List<int>> a = parts_a[0];
  List<List<int>> b = parts_a[1];
  List<List<int>> c = parts_a[2];
  List<List<int>> d = parts_a[3];
  List<List<List<int>>> parts_b = split_matrix(matrix_b);
  List<List<int>> e = parts_b[0];
  List<List<int>> f = parts_b[1];
  List<List<int>> g = parts_b[2];
  List<List<int>> h = parts_b[3];
  List<List<int>> t1 = actual_strassen(a, matrix_subtraction(f, h));
  List<List<int>> t2 = actual_strassen(matrix_addition(a, b), h);
  List<List<int>> t3 = actual_strassen(matrix_addition(c, d), e);
  List<List<int>> t4 = actual_strassen(d, matrix_subtraction(g, e));
  List<List<int>> t5 = actual_strassen(matrix_addition(a, d), matrix_addition(e, h));
  List<List<int>> t6 = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h));
  List<List<int>> t7 = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f));
  List<List<int>> top_left = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6);
  List<List<int>> top_right = matrix_addition(t1, t2);
  List<List<int>> bot_left = matrix_addition(t3, t4);
  List<List<int>> bot_right = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7);
  List<List<int>> new_matrix = <List<int>>[];
  int i = 0;
  while (i < top_right.length) {
    new_matrix = [...new_matrix, [...top_left[i], ...top_right[i]]];
    i = i + 1;
  }
  i = 0;
  while (i < bot_right.length) {
    new_matrix = [...new_matrix, [...bot_left[i], ...bot_right[i]]];
    i = i + 1;
  }
  return new_matrix;
}

List<List<int>> strassen(List<List<int>> matrix1, List<List<int>> matrix2) {
  List<int> dims1 = matrix_dimensions(matrix1);
  List<int> dims2 = matrix_dimensions(matrix2);
  if (dims1[1] != dims2[0]) {
    return ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  int maximum = ([dims1[0], dims1[1], dims2[0], dims2[1]].reduce((a, b) => a > b ? a : b)).toInt();
  int size = next_power_of_two(maximum);
  List<List<int>> new_matrix1 = pad_matrix(matrix1, size, size);
  List<List<int>> new_matrix2 = pad_matrix(matrix2, size, size);
  List<List<int>> result_padded = actual_strassen(new_matrix1, new_matrix2);
  List<List<int>> final_matrix = <List<int>>[];
  int i = 0;
  while (i < dims1[0]) {
    List<int> row = <int>[];
    int j = 0;
    while (j < dims2[1]) {
    row = [...row, result_padded[i][j]];
    j = j + 1;
  }
    final_matrix = ([...final_matrix, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return final_matrix;
}

void _main() {
  List<List<int>> matrix1 = [[2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 2, 3, 1]];
  List<List<int>> matrix2 = [[0, 2, 1, 1], [16, 2, 3, 3], [2, 2, 7, 7], [13, 11, 22, 4]];
  List<List<int>> res = strassen(matrix1, matrix2);
  print(res);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
