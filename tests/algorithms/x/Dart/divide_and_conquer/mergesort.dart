// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> subarray(List<int> xs, int start, int end) {
  List<int> result = <int>[];
  int k = start;
  while (k < end) {
    result = [...result, xs[k]];
    k = k + 1;
  }
  return result;
}

List<int> merge(List<int> left_half, List<int> right_half) {
  List<int> result = <int>[];
  int i = 0;
  int j = 0;
  while (i < left_half.length && j < right_half.length) {
    if (left_half[i] < right_half[j]) {
    result = [...result, left_half[i]];
    i = i + 1;
  } else {
    result = [...result, right_half[j]];
    j = j + 1;
  }
  }
  while (i < left_half.length) {
    result = [...result, left_half[i]];
    i = i + 1;
  }
  while (j < right_half.length) {
    result = [...result, right_half[j]];
    j = j + 1;
  }
  return result;
}

List<int> merge_sort(List<int> array) {
  if (array.length <= 1) {
    return array;
  }
  int middle = array.length ~/ 2;
  List<int> left_half = subarray(array, 0, middle);
  List<int> right_half = subarray(array, middle, array.length);
  List<int> sorted_left = merge_sort(left_half);
  List<int> sorted_right = merge_sort(right_half);
  return merge(sorted_left, sorted_right);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(merge_sort([5, 3, 1, 4, 2])));
  print(_str(merge_sort([-2, 3, -10, 11, 99, 100000, 100, -200])));
  print(_str(merge_sort([-200])));
  print(_str(merge_sort(<int>[])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
