// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

double abs(double x) {
  if (x < 0.0) {
    return 0.0 - x;
  }
  return x;
}

double sqrtApprox(double x) {
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double euclidean_distance_sqr(List<double> p1, List<double> p2) {
  double dx = p1[0] - p2[0];
  double dy = p1[1] - p2[1];
  return dx * dx + dy * dy;
}

List<List<double>> column_based_sort(List<List<double>> arr, int column) {
  List<List<double>> points = arr;
  int i = 0;
  while (i < points.length) {
    int j = 0;
    while (j < points.length - 1) {
    if (points[j][column] > points[j + 1][column]) {
    List<double> tmp = points[j];
    while (points.length <= j) { points.add(<double>[]); } points[j] = points[j + 1];
    while (points.length <= j + 1) { points.add(<double>[]); } points[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return points;
}

double dis_between_closest_pair(List<List<double>> points, int count, double min_dis) {
  int i = 0;
  while (i < count - 1) {
    int j = i + 1;
    while (j < count) {
    double current = euclidean_distance_sqr(points[i], points[j]);
    if (current < min_dis) {
    min_dis = current;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return min_dis;
}

double dis_between_closest_in_strip(List<List<double>> points, int count, double min_dis) {
  int i_start = 0;
  if (6 < count - 1) {
    i_start = 6;
  } else {
    i_start = count - 1;
  }
  int i = i_start;
  while (i < count) {
    int j_start = 0;
    if (i - 6 > 0) {
    j_start = i - 6;
  }
    int j = j_start;
    while (j < i) {
    double current = euclidean_distance_sqr(points[i], points[j]);
    if (current < min_dis) {
    min_dis = current;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return min_dis;
}

double closest_pair_of_points_sqr(List<List<double>> px, List<List<double>> py, int count) {
  if (count <= 3) {
    return dis_between_closest_pair(px, count, 1000000000000000000.0);
  }
  int mid = count ~/ 2;
  double left = closest_pair_of_points_sqr(px, py.sublist(0, mid), mid);
  double right = closest_pair_of_points_sqr(py, py.sublist(mid, count), count - mid);
  double best = left;
  if (right < best) {
    best = right;
  }
  List<List<double>> strip = <List<double>>[];
  int i = 0;
  while (i < px.length) {
    if ((px[i][0] - px[mid][0]).abs().compareTo(best) < 0) {
    strip = ([...strip, px[i]] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
    i = i + 1;
  }
  double strip_best = dis_between_closest_in_strip(strip, strip.length, best);
  if (strip_best < best) {
    best = strip_best;
  }
  return best;
}

double closest_pair_of_points(List<List<double>> points, int count) {
  List<List<double>> points_sorted_on_x = column_based_sort(points, 0);
  List<List<double>> points_sorted_on_y = column_based_sort(points, 1);
  double dist_sqr = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count);
  return sqrtApprox(dist_sqr);
}

List<List<double>> points = [[2.0, 3.0], [12.0, 30.0], [40.0, 50.0], [5.0, 1.0], [12.0, 10.0], [3.0, 4.0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Distance: " + _str(closest_pair_of_points(points, points.length)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
