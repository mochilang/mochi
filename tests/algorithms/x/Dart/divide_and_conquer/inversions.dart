// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class InvResult {
  List<int> arr;
  int inv;
  InvResult({required this.arr, required this.inv});
}

List<int> slice_list(List<int> arr, int start, int end) {
  List<int> res = <int>[];
  int k = start;
  while (k < end) {
    res = (res..add(arr[k]));
    k = k + 1;
  }
  return res;
}

int count_inversions_bf(List<int> arr) {
  int n = arr.length;
  int inv = 0;
  int i = 0;
  while (i < n - 1) {
    int j = i + 1;
    while (j < n) {
    if (arr[i] > arr[j]) {
    inv = inv + 1;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return inv;
}

InvResult count_cross_inversions(List<int> p, List<int> q) {
  List<int> r = <int>[];
  int i = 0;
  int j = 0;
  int inv = 0;
  while (i < p.length && j < q.length) {
    if (p[i] > q[j]) {
    inv = inv + (p.length - i);
    r = (r..add(q[j]));
    j = j + 1;
  } else {
    r = (r..add(p[i]));
    i = i + 1;
  }
  }
  if (i < p.length) {
    r = ([...r, ...slice_list(p, i, p.length)] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  } else {
    r = ([...r, ...slice_list(q, j, q.length)] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  return InvResult(arr: r, inv: inv);
}

InvResult count_inversions_recursive(List<int> arr) {
  if (arr.length <= 1) {
    return InvResult(arr: arr, inv: 0);
  }
  int mid = arr.length ~/ 2;
  List<int> p = slice_list(arr, 0, mid);
  List<int> q = slice_list(arr, mid, arr.length);
  InvResult res_p = count_inversions_recursive(p);
  InvResult res_q = count_inversions_recursive(q);
  InvResult res_cross = count_cross_inversions(res_p.arr, res_q.arr);
  int total = res_p.inv + res_q.inv + res_cross.inv;
  return InvResult(arr: res_cross.arr, inv: total);
}

List<int> arr_1 = [10, 2, 1, 5, 5, 2, 11];
int nbf = count_inversions_bf(arr_1);
InvResult nrec = count_inversions_recursive(arr_1).inv;
int nbf2 = count_inversions_bf(arr_1);
InvResult nrec2 = count_inversions_recursive(arr_1).inv;
int nbf3 = count_inversions_bf(arr_1);
InvResult nrec3 = count_inversions_recursive(arr_1).inv;
void main() {
  print(["number of inversions = ", nbf].join(" "));
  arr_1 = [1, 2, 2, 5, 5, 10, 11];
  print(["number of inversions = ", nbf2].join(" "));
  arr_1 = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  print(["number of inversions = ", nbf3].join(" "));
}
