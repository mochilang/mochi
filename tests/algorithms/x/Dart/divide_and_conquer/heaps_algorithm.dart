// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> permute(int k, List<int> arr, List<List<int>> res) {
  if (k == 1) {
    List<int> copy = arr.sublist(0, arr.length);
    return ((res..add(copy)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  res = permute(k - 1, arr, res);
  int i = 0;
  while (i < k - 1) {
    if (k % 2 == 0) {
    int temp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[k - 1];
    while (arr.length <= k - 1) { arr.add(0); } arr[k - 1] = temp;
  } else {
    int temp = arr[0];
    while (arr.length <= 0) { arr.add(0); } arr[0] = arr[k - 1];
    while (arr.length <= k - 1) { arr.add(0); } arr[k - 1] = temp;
  }
    res = permute(k - 1, arr, res);
    i = i + 1;
  }
  return res;
}

List<List<int>> heaps(List<int> arr) {
  if (arr.length <= 1) {
    return [arr.sublist(0, arr.length)];
  }
  List<List<int>> res = ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  res = permute(arr.length, arr, res);
  return res;
}

void _main() {
  List<List<int>> perms = heaps([1, 2, 3]);
  print(perms);
}

void _start() {
  _main();
}

void main() => _start();
