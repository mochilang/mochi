// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> permute(int k, List<int> arr, List<List<int>> res) {
  if (k == 1) {
    List<int> copy = arr.sublist(0, arr.length);
    return ([...res, copy] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  res = permute(k - 1, arr, res);
  int i = 0;
  while (i < k - 1) {
    if (k % 2 == 0) {
    int temp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[k - 1];
    while (arr.length <= k - 1) { arr.add(0); } arr[k - 1] = temp;
  } else {
    int temp = arr[0];
    while (arr.length <= 0) { arr.add(0); } arr[0] = arr[k - 1];
    while (arr.length <= k - 1) { arr.add(0); } arr[k - 1] = temp;
  }
    res = permute(k - 1, arr, res);
    i = i + 1;
  }
  return res;
}

List<List<int>> heaps(List<int> arr) {
  if (arr.length <= 1) {
    return [arr.sublist(0, arr.length)];
  }
  List<List<int>> res = ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  res = permute(arr.length, arr, res);
  return res;
}

void _main() {
  List<List<int>> perms = heaps([1, 2, 3]);
  print(perms);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
