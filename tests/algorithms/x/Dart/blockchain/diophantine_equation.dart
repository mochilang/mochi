// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int gcd(int a, int b) {
  int x = (a < 0 ? -a : a);
  int y = (b < 0 ? -b : b);
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

List<int> extended_gcd(int a, int b) {
  if (b == 0) {
    return [a, 1, 0];
  }
  List<int> res = extended_gcd(b, a % b);
  int d = res[0];
  int p = res[1];
  int q = res[2];
  int x = q;
  int y = p - q * (a ~/ b);
  return [d, x, y];
}

List<int> diophantine(int a, int b, int c) {
  int d = gcd(a, b);
  if (c % d != 0) {
    throw Exception("No solution");
  }
  List<int> eg = extended_gcd(a, b);
  int r = c ~/ d;
  int x = eg[1] * r;
  int y = eg[2] * r;
  return [x, y];
}

List<List<int>> diophantine_all_soln(int a, int b, int c, int n) {
  List<int> base = diophantine(a, b, c);
  int x0 = base[0];
  int y0 = base[1];
  int d = gcd(a, b);
  int p = a ~/ d;
  int q = b ~/ d;
  List<List<int>> sols = <List<int>>[];
  int i = 0;
  while (i < n) {
    int x = x0 + i * q;
    int y = y0 - i * p;
    sols = ([...sols, [x, y]] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return sols;
}

List<int> s1 = diophantine(10, 6, 14);
List<List<int>> sols = diophantine_all_soln(10, 6, 14, 4);
int j = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(s1));
  while (j < sols.length) {
    print(_str(sols[j]));
    j = j + 1;
  }
  print(_str(diophantine(391, 299, -69)));
  print(_str(extended_gcd(10, 6)));
  print(_str(extended_gcd(7, 5)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
