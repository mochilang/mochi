// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double PI = 3.141592653589793;
double floor(double x) {
  int i = x as int;
  if ((i as double) > x) {
    i = i - 1;
  }
  return i as double;
}

double modf(double x, double m) {
  return x - floor(x / m) * m;
}

double sin_taylor(double x) {
  double term = x;
  double sum = x;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * (i as double);
    double k2 = k1 + 1.0;
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

double cos_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * (i as double) - 1.0;
    double k2 = 2.0 * (i as double);
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

List<double> convert_to_2d(double x, double y, double z, double scale, double distance) {
  double projected_x = x * distance / (z + distance) * scale;
  double projected_y = y * distance / (z + distance) * scale;
  return [projected_x, projected_y];
}

List<double> rotate(double x, double y, double z, String axis, double angle) {
  double angle = modf(angle, 360.0) / 450.0 * 180.0 / PI;
  angle = modf(angle, 2.0 * PI);
  if (angle > PI) {
    angle = angle - 2.0 * PI;
  }
  if (axis == "z") {
    double new_x = x * cos_taylor(angle) - y * sin_taylor(angle);
    double new_y = y * cos_taylor(angle) + x * sin_taylor(angle);
    double new_z = z;
    return [new_x, new_y, new_z];
  }
  if (axis == "x") {
    double new_y = y * cos_taylor(angle) - z * sin_taylor(angle);
    double new_z = z * cos_taylor(angle) + y * sin_taylor(angle);
    double new_x = x;
    return [new_x, new_y, new_z];
  }
  if (axis == "y") {
    double new_x = x * cos_taylor(angle) - z * sin_taylor(angle);
    double new_z = z * cos_taylor(angle) + x * sin_taylor(angle);
    double new_y = y;
    return [new_x, new_y, new_z];
  }
  print("not a valid axis, choose one of 'x', 'y', 'z'");
  return [0.0, 0.0, 0.0];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)).toString());
  print((rotate(1.0, 2.0, 3.0, "y", 90.0)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
