// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String repeat_char(String ch, int count) {
  String result = "";
  int i = 0;
  while (i < count) {
    result = result + ch;
    i = i + 1;
  }
  return result;
}

String butterfly_pattern(int n) {
  List<String> lines = <String>[];
  int i = 1;
  while (i < n) {
    String left = repeat_char("*", i);
    String mid = repeat_char(" ", 2 * (n - i) - 1);
    String right = repeat_char("*", i);
    lines = [...lines, left + mid + right];
    i = i + 1;
  }
  lines = [...lines, repeat_char("*", 2 * n - 1)];
  int j = n - 1;
  while (j > 0) {
    String left = repeat_char("*", j);
    String mid = repeat_char(" ", 2 * (n - j) - 1);
    String right = repeat_char("*", j);
    lines = [...lines, left + mid + right];
    j = j - 1;
  }
  String out = "";
  int k = 0;
  while (k < lines.length) {
    if (k > 0) {
    out = out + "\n";
  }
    out = out + lines[k];
    k = k + 1;
  }
  return out;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(butterfly_pattern(3));
  print(butterfly_pattern(5));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
