// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Point {
  int x;
  int y;
  Point({required this.x, required this.y});
}

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

int round_int(double x) {
  return x + 0.5 as int;
}

List<Point> digital_differential_analyzer_line(Point p1, Point p2) {
  int dx = p2.x - p1.x;
  int dy = p2.y - p1.y;
  int abs_dx = abs_int(dx);
  int abs_dy = abs_int(dy);
  int steps = (abs_dx > abs_dy ? abs_dx : abs_dy);
  double x_increment = (dx as double) / (steps as double);
  double y_increment = (dy as double) / (steps as double);
  List<Point> coordinates = <Point>[];
  double x = p1.x as double;
  double y = p1.y as double;
  int i = 0;
  while (i < steps) {
    x = x + x_increment;
    y = y + y_increment;
    Point point = Point(x: round_int(x), y: round_int(y));
    coordinates = [...coordinates, point];
    i = i + 1;
  }
  return coordinates;
}

void _main() {
  List<Point> result = digital_differential_analyzer_line(Point(x: 1, y: 1), Point(x: 4, y: 4));
  print(result);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
