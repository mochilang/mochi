// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

int MOD = 4294967296;
String ASCII = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int ord(String ch) {
  int i = 0;
  while (i < ASCII.length) {
    if (_substr(ASCII, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

String to_little_endian(String s) {
  if (s.length != 32) {
    _error("Input must be of length 32");
  }
  return _substr(s, 24, 32) + _substr(s, 16, 24) + _substr(s, 8, 16) + _substr(s, 0, 8);
}

String int_to_bits(int n, int width) {
  String bits = "";
  int _num = n;
  while (_num > 0) {
    bits = _str(_num % 2) + bits;
    _num = _num ~/ 2;
  }
  while (bits.length < width) {
    bits = "0" + bits;
  }
  if (bits.length > width) {
    bits = _substr(bits, bits.length - width, bits.length);
  }
  return bits;
}

int bits_to_int(String bits) {
  int _num = 0;
  int i = 0;
  while (i < bits.length) {
    if (_substr(bits, i, i + 1) == "1") {
    _num = _num * 2 + 1;
  } else {
    _num = _num * 2;
  }
    i = i + 1;
  }
  return _num;
}

String to_hex(int n) {
  String digits = "0123456789abcdef";
  if (n == 0) {
    return "0";
  }
  int _num = n;
  String s = "";
  while (_num > 0) {
    int d = _num % 16;
    s = _substr(digits, d, d + 1) + s;
    _num = _num ~/ 16;
  }
  return s;
}

String reformat_hex(int i) {
  if (i < 0) {
    _error("Input must be non-negative");
  }
  String hex = to_hex(i);
  while (hex.length < 8) {
    hex = "0" + hex;
  }
  if (hex.length > 8) {
    hex = _substr(hex, hex.length - 8, hex.length);
  }
  String le = "";
  int j = hex.length - 2;
  while (j >= 0) {
    le = le + _substr(hex, j, j + 2);
    j = j - 2;
  }
  return le;
}

String preprocess(String message) {
  String bit_string = "";
  int i = 0;
  while (i < message.length) {
    String ch = _substr(message, i, i + 1);
    bit_string = bit_string + int_to_bits(ord(ch), 8);
    i = i + 1;
  }
  String start_len = int_to_bits(bit_string.length, 64);
  bit_string = bit_string + "1";
  while (bit_string.length % 512 != 448) {
    bit_string = bit_string + "0";
  }
  bit_string = bit_string + to_little_endian(_substr(start_len, 32, 64)) + to_little_endian(_substr(start_len, 0, 32));
  return bit_string;
}

List<List<int>> get_block_words(String bit_string) {
  if (bit_string.length % 512 != 0) {
    _error("Input must have length that's a multiple of 512");
  }
  List<List<int>> blocks = <List<int>>[];
  int pos = 0;
  while (pos < bit_string.length) {
    List<int> block = <int>[];
    int i = 0;
    while (i < 512) {
    String _part = _substr(bit_string, pos + i, pos + i + 32);
    int word = bits_to_int(to_little_endian(_part));
    block = [...block, word];
    i = i + 32;
  }
    blocks = ([...blocks, block] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    pos = pos + 512;
  }
  return blocks;
}

int bit_and(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  int i = 0;
  while (i < 32) {
    if (x % 2 == 1 && y % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
    i = i + 1;
  }
  return res;
}

int bit_or(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  int i = 0;
  while (i < 32) {
    int abit = x % 2;
    int bbit = y % 2;
    if (abit == 1 || bbit == 1) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
    i = i + 1;
  }
  return res;
}

int bit_xor(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  int i = 0;
  while (i < 32) {
    int abit = x % 2;
    int bbit = y % 2;
    if ((abit + bbit) % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
    i = i + 1;
  }
  return res;
}

int not_32(int i) {
  if (i < 0) {
    _error("Input must be non-negative");
  }
  return 4294967295 - i;
}

int sum_32(int a, int b) {
  return (a + b) % MOD;
}

int lshift(int _num, int k) {
  int result = _num % MOD;
  int i = 0;
  while (i < k) {
    result = result * 2 % MOD;
    i = i + 1;
  }
  return result;
}

int rshift(int _num, int k) {
  int result = _num;
  int i = 0;
  while (i < k) {
    result = result ~/ 2;
    i = i + 1;
  }
  return result;
}

int left_rotate_32(int i, int shift) {
  if (i < 0) {
    _error("Input must be non-negative");
  }
  if (shift < 0) {
    _error("Shift must be non-negative");
  }
  int left = lshift(i, shift);
  int right = rshift(i, 32 - shift);
  return (left + right) % MOD;
}

String md5_me(String message) {
  String bit_string = preprocess(message);
  List<int> added_consts = [3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745];
  List<int> shift_amounts = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21];
  int a0 = 1732584193;
  int b0 = 4023233417;
  int c0 = 2562383102;
  int d0 = 271733878;
  List<List<int>> blocks = get_block_words(bit_string);
  int bi = 0;
  while (bi < blocks.length) {
    List<int> block = blocks[bi];
    int a = a0;
    int b = b0;
    int c = c0;
    int d = d0;
    int i = 0;
    while (i < 64) {
    int f = 0;
    int g = 0;
    if (i <= 15) {
    f = bit_xor(d, bit_and(b, bit_xor(c, d)));
    g = i;
  } else {
    if (i <= 31) {
    f = bit_xor(c, bit_and(d, bit_xor(b, c)));
    g = (5 * i + 1) % 16;
  } else {
    if (i <= 47) {
    f = bit_xor(bit_xor(b, c), d);
    g = (3 * i + 5) % 16;
  } else {
    f = bit_xor(c, bit_or(b, not_32(d)));
    g = 7 * i % 16;
  };
  };
  }
    f = sum_32(f, a);
    f = sum_32(f, added_consts[i]);
    f = sum_32(f, block[g]);
    int rotated = left_rotate_32(f, shift_amounts[i]);
    int new_b = sum_32(b, rotated);
    a = d;
    d = c;
    c = b;
    b = new_b;
    i = i + 1;
  }
    a0 = sum_32(a0, a);
    b0 = sum_32(b0, b);
    c0 = sum_32(c0, c);
    d0 = sum_32(d0, d);
    bi = bi + 1;
  }
  String digest = reformat_hex(a0) + reformat_hex(b0) + reformat_hex(c0) + reformat_hex(d0);
  return digest;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
