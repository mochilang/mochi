// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Machine {
  List<double> buffer;
  List<double> params;
  int time;
  Machine({required this.buffer, required this.params, required this.time});
}

class PullResult {
  int value;
  Machine machine;
  PullResult({required this.value, required this.machine});
}

List<double> K = [0.33, 0.44, 0.55, 0.44, 0.33];
int t = 3;
int size = 5;
double round_dec(double x, int n) {
  double m10 = 1.0;
  int i = 0;
  while (i < n) {
    m10 = m10 * 10.0;
    i = i + 1;
  }
  double y = x * m10 + 0.5;
  return 1.0 * (y as int) / m10;
}

Machine reset() {
  return Machine(buffer: K, params: [0.0, 0.0, 0.0, 0.0, 0.0], time: 0);
}

Machine push(Machine m, int seed) {
  List<double> buf = m.buffer;
  List<double> par = m.params;
  int i = 0;
  while (i < buf.length) {
    double value = buf[i];
    double e = 1.0 * seed / value;
    double next_value = buf[(i + 1) % size] + e;
    next_value = next_value - 1.0 * int.parse(next_value);
    double r = par[i] + e;
    r = r - 1.0 * int.parse(r);
    r = r + 3.0;
    while (buf.length <= i) { buf.add(0); } buf[i] = round_dec(r * next_value * (1.0 - next_value), 10);
    while (par.length <= i) { par.add(0); } par[i] = r;
    i = i + 1;
  }
  return Machine(buffer: buf, params: par, time: m.time + 1);
}

int xor(int a, int b) {
  int aa = a;
  int bb = b;
  int res = 0;
  int bit = 1;
  while (aa > 0 || bb > 0) {
    int abit = aa % 2;
    int bbit = bb % 2;
    if (abit != bbit) {
    res = res + bit;
  }
    aa = aa ~/ 2;
    bb = bb ~/ 2;
    bit = bit * 2;
  }
  return res;
}

int xorshift(int x, int y) {
  int xv = x;
  int yv = y;
  xv = xor(xv, yv ~/ 8192);
  yv = xor(yv, xv * 131072);
  xv = xor(xv, yv ~/ 32);
  return xv;
}

PullResult pull(Machine m) {
  List<double> buf = m.buffer;
  List<double> par = m.params;
  int key = m.time % size;
  int i = 0;
  while (i < t) {
    double r = par[key];
    double value = buf[key];
    while (buf.length <= key) { buf.add(0); } buf[key] = round_dec(r * value * (1.0 - value), 10);
    double new_r = 1.0 * m.time * 0.01 + r * 1.01;
    new_r = new_r - 1.0 * int.parse(new_r);
    while (par.length <= key) { par.add(0); } par[key] = new_r + 3.0;
    i = i + 1;
  }
  int x = buf[(key + 2) % size] * 10000000000.0 as int;
  int y = buf[(key + size - 2) % size] * 10000000000.0 as int;
  Machine new_machine = Machine(buffer: buf, params: par, time: m.time + 1);
  int value = xorshift(x, y) % 4294967295;
  return PullResult(value: value, machine: new_machine);
}

Machine machine = reset();
int i = 0;
PullResult res = pull(machine);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (i < 100) {
    machine = push(machine, i);
    i = i + 1;
  }
  print(res.value);
  print("[" + res.machine.buffer.join(', ') + "]");
  print("[" + res.machine.params.join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
