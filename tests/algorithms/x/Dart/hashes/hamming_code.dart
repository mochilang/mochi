// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class DecodeResult {
  List<int> data;
  bool ack;
  DecodeResult({required this.data, required this.ack});
}

int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = index_of(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = index_of(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return 0;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  return "?";
}

String text_to_bits(String text) {
  String bits = "";
  int i = 0;
  while (i < text.length) {
    int code = ord(text.substring(i, i + 1));
    int j = 7;
    while (j >= 0) {
    int p = pow2(j);
    if (code ~/ p % 2 == 1) {
    bits = bits + "1";
  } else {
    bits = bits + "0";
  }
    j = j - 1;
  }
    i = i + 1;
  }
  return bits;
}

String text_from_bits(String bits) {
  String text = "";
  int i = 0;
  while (i < bits.length) {
    int code = 0;
    int j = 0;
    while (j < 8 && i + j < bits.length) {
    code = code * 2;
    if (bits.substring(i + j, i + j + 1) == "1") {
    code = code + 1;
  }
    j = j + 1;
  }
    text = text + chr(code);
    i = i + 8;
  }
  return text;
}

String bool_to_string(bool b) {
  if (b) {
    return "True";
  }
  return "False";
}

List<int> string_to_bitlist(String s) {
  List<int> res = <int>[];
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == "1") {
    res = [...res, 1];
  } else {
    res = [...res, 0];
  }
    i = i + 1;
  }
  return res;
}

String bitlist_to_string(List<int> bits) {
  String s = "";
  int i = 0;
  while (i < bits.length) {
    if (bits[i] == 1) {
    s = s + "1";
  } else {
    s = s + "0";
  }
    i = i + 1;
  }
  return s;
}

bool is_power_of_two(int x) {
  if (x < 1) {
    return false;
  }
  int p = 1;
  while (p < x) {
    p = p * 2;
  }
  return p == x;
}

bool list_eq(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int pow2(int e) {
  int res = 1;
  int i = 0;
  while (i < e) {
    res = res * 2;
    i = i + 1;
  }
  return res;
}

bool has_bit(int n, int b) {
  int p = pow2(b);
  if (n ~/ p % 2 == 1) {
    return true;
  }
  return false;
}

List<int> hamming_encode(int r, List<int> data_bits) {
  int total = r + data_bits.length;
  List<int> data_ord = <int>[];
  int cont_data = 0;
  int x = 1;
  while (x <= total) {
    if (is_power_of_two(x)) {
    data_ord = [...data_ord, -1];
  } else {
    data_ord = [...data_ord, data_bits[cont_data]];
    cont_data = cont_data + 1;
  }
    x = x + 1;
  }
  List<int> parity = <int>[];
  int bp = 0;
  while (bp < r) {
    int cont_bo = 0;
    int j = 0;
    while (j < data_ord.length) {
    int bit = data_ord[j];
    if (bit >= 0) {
    int pos = j + 1;
    if (has_bit(pos, bp) && bit == 1) {
    cont_bo = cont_bo + 1;
  };
  }
    j = j + 1;
  }
    parity = [...parity, cont_bo % 2];
    bp = bp + 1;
  }
  List<int> result = <int>[];
  int cont_bp = 0;
  int i = 0;
  while (i < data_ord.length) {
    if (data_ord[i] < 0) {
    result = [...result, parity[cont_bp]];
    cont_bp = cont_bp + 1;
  } else {
    result = [...result, data_ord[i]];
  }
    i = i + 1;
  }
  return result;
}

DecodeResult hamming_decode(int r, List<int> code) {
  List<int> data_output = <int>[];
  List<int> parity_received = <int>[];
  int i = 1;
  int idx = 0;
  while (i <= code.length) {
    if (is_power_of_two(i)) {
    parity_received = [...parity_received, code[idx]];
  } else {
    data_output = [...data_output, code[idx]];
  }
    idx = idx + 1;
    i = i + 1;
  }
  List<int> recomputed = hamming_encode(r, data_output);
  List<int> parity_calc = <int>[];
  int j = 0;
  while (j < recomputed.length) {
    if (is_power_of_two(j + 1)) {
    parity_calc = [...parity_calc, recomputed[j]];
  }
    j = j + 1;
  }
  bool ack = list_eq(parity_received, parity_calc);
  return DecodeResult(data: data_output, ack: ack);
}

void _main() {
  int sizePari = 4;
  int be = 2;
  String text = "Message01";
  String binary = text_to_bits(text);
  print("Text input in binary is '" + binary + "'");
  List<int> data_bits = string_to_bitlist(binary);
  List<int> encoded = hamming_encode(sizePari, data_bits);
  print("Data converted ----------> " + bitlist_to_string(encoded));
  DecodeResult decoded = hamming_decode(sizePari, encoded);
  print("Data receive ------------> " + bitlist_to_string(decoded.data) + " -- Data integrity: " + bool_to_string(decoded.ack));
  List<int> corrupted = <int>[];
  int i = 0;
  while (i < encoded.length) {
    corrupted = [...corrupted, encoded[i]];
    i = i + 1;
  }
  int pos = be - 1;
  if (corrupted[pos] == 0) {
    while (corrupted.length <= pos) { corrupted.add(0); } corrupted[pos] = 1;
  } else {
    while (corrupted.length <= pos) { corrupted.add(0); } corrupted[pos] = 0;
  }
  DecodeResult decoded_err = hamming_decode(sizePari, corrupted);
  print("Data receive (error) ----> " + bitlist_to_string(decoded_err.data) + " -- Data integrity: " + bool_to_string(decoded_err.ack));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
