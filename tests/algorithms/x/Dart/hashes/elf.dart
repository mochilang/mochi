// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

String ascii = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int ord(String ch) {
  int i = 0;
  while (i < ascii.length) {
    if (_substr(ascii, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

int bit_and(int a, int b) {
  int ua = a;
  int ub = b;
  int res = 0;
  int bit = 1;
  while (ua > 0 || ub > 0) {
    if (ua % 2 == 1 && ub % 2 == 1) {
    res = res + bit;
  }
    ua = ua ~/ 2 as int;
    ub = ub ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int bit_xor(int a, int b) {
  int ua = a;
  int ub = b;
  int res = 0;
  int bit = 1;
  while (ua > 0 || ub > 0) {
    int abit = ua % 2;
    int bbit = ub % 2;
    if (abit != bbit) {
    res = res + bit;
  }
    ua = ua ~/ 2 as int;
    ub = ub ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int bit_not32(int x) {
  int ux = x;
  int res = 0;
  int bit = 1;
  int count = 0;
  while (count < 32) {
    if (ux % 2 == 0) {
    res = res + bit;
  }
    ux = ux ~/ 2 as int;
    bit = bit * 2;
    count = count + 1;
  }
  return res;
}

int elf_hash(String data) {
  int hash_ = 0;
  int i = 0;
  while (i < data.length) {
    int c = ord(_substr(data, i, i + 1));
    hash_ = hash_ * 16 + c;
    int x = bit_and(hash_, 4026531840);
    if (x != 0) {
    hash_ = bit_xor(hash_, x ~/ 16777216 as int);
  }
    hash_ = bit_and(hash_, bit_not32(x));
    i = i + 1;
  }
  return hash_;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(elf_hash("lorem ipsum")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
