// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String ASCII = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
List<String> build_alphabet() {
  List<String> result = <String>[];
  int i = 0;
  while (i < ASCII.length) {
    result = [...result, ASCII.substring(i, i + 1)];
    i = i + 1;
  }
  return result;
}

List<int> range_list(int n) {
  List<int> lst = <int>[];
  int i = 0;
  while (i < n) {
    lst = [...lst, i];
    i = i + 1;
  }
  return lst;
}

List<int> reversed_range_list(int n) {
  List<int> lst = <int>[];
  int i = n - 1;
  while (i >= 0) {
    lst = [...lst, i];
    i = i - 1;
  }
  return lst;
}

int index_of_char(List<String> lst, String ch) {
  int i = 0;
  while (i < lst.length) {
    if (lst[i] == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int index_of_int(List<int> lst, int value) {
  int i = 0;
  while (i < lst.length) {
    if (lst[i] == value) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String enigma_encrypt(String message, int token) {
  List<String> alphabets = build_alphabet();
  int n = alphabets.length;
  List<int> gear_one = range_list(n);
  List<int> gear_two = range_list(n);
  List<int> gear_three = range_list(n);
  List<int> reflector = reversed_range_list(n);
  int gear_one_pos = 0;
  int gear_two_pos = 0;
  int gear_three_pos = 0;
  void rotator() {
  int i = gear_one[0];
  gear_one = gear_one.sublist(1, gear_one.length);
  gear_one = [...gear_one, i];
  gear_one_pos = gear_one_pos + 1;
  if (gear_one_pos % n == 0) {
    i = gear_two[0];
    gear_two = gear_two.sublist(1, gear_two.length);
    gear_two = [...gear_two, i];
    gear_two_pos = gear_two_pos + 1;
    if (gear_two_pos % n == 0) {
    i = gear_three[0];
    gear_three = gear_three.sublist(1, gear_three.length);
    gear_three = [...gear_three, i];
    gear_three_pos = gear_three_pos + 1;
  };
  }
}
  String engine(String ch) {
  int target = index_of_char(alphabets, ch);
  target = gear_one[target];
  target = gear_two[target];
  target = gear_three[target];
  target = reflector[target];
  target = index_of_int(gear_three, target);
  target = index_of_int(gear_two, target);
  target = index_of_int(gear_one, target);
  rotator();
  return alphabets[target];
}
  int t = 0;
  while (t < token) {
    rotator();
    t = t + 1;
  }
  String result = "";
  int idx = 0;
  while (idx < message.length) {
    result = result + engine(message.substring(idx, idx + 1));
    idx = idx + 1;
  }
  return result;
}

String message = "HELLO WORLD";
int token = 123;
String encoded = enigma_encrypt(message, token);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(encoded);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
