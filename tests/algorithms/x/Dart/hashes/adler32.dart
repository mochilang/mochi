// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int MOD_ADLER = 65521;
int ord(String ch) {
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String digits = "0123456789";
  int i = 0;
  while (i < lower.length) {
    if (lower.substring(i, i + 1) == ch) {
    return 97 + i;
  }
    i = i + 1;
  }
  i = 0;
  while (i < upper.length) {
    if (upper.substring(i, i + 1) == ch) {
    return 65 + i;
  }
    i = i + 1;
  }
  i = 0;
  while (i < digits.length) {
    if (digits.substring(i, i + 1) == ch) {
    return 48 + i;
  }
    i = i + 1;
  }
  if (ch == " ") {
    return 32;
  }
  return 0;
}

int adler32(String plain_text) {
  int a = 1;
  int b = 0;
  int i = 0;
  while (i < plain_text.length) {
    int code = ord(plain_text.substring(i, i + 1));
    a = (a + code) % MOD_ADLER;
    b = (b + a) % MOD_ADLER;
    i = i + 1;
  }
  return b * 65536 + a;
}

void _main() {
  print((adler32("Algorithms")).toString());
  print((adler32("go adler em all")).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
