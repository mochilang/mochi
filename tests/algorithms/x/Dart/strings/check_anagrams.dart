// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String strip_and_remove_spaces(String s) {
  int start = 0;
  int end = s.length - 1;
  while (start < s.length && _substr(s, start, start + 1) == " ") {
    start = start + 1;
  }
  while (end >= start && _substr(s, end, end + 1) == " ") {
    end = end - 1;
  }
  String res = "";
  int i = start;
  while (i <= end) {
    String ch = _substr(s, i, i + 1);
    if (ch != " ") {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

bool check_anagrams(String a, String b) {
  String s1 = a.toLowerCase();
  String s2 = b.toLowerCase();
  s1 = strip_and_remove_spaces(s1);
  s2 = strip_and_remove_spaces(s2);
  if (s1.length != s2.length) {
    return false;
  }
  Map<String, int> count = <String, int>{};
  int i = 0;
  while (i < s1.length) {
    String c1 = _substr(s1, i, i + 1);
    String c2 = _substr(s2, i, i + 1);
    if (count.containsKey(c1)) {
    count[c1] = (count[c1] ?? 0) + 1;
  } else {
    count[c1] = 1;
  }
    if (count.containsKey(c2)) {
    count[c2] = (count[c2] ?? 0) - 1;
  } else {
    count[c2] = -1;
  }
    i = i + 1;
  }
  for (String ch in count.keys) {
    if ((count[ch] ?? 0) != 0) {
    return false;
  }
  }
  return true;
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

void main() {
  print_bool(check_anagrams("Silent", "Listen"));
  print_bool(check_anagrams("This is a string", "Is this a string"));
  print_bool(check_anagrams("This is    a      string", "Is     this a string"));
  print_bool(check_anagrams("There", "Their"));
}
