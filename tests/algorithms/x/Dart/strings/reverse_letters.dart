// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

List<String> split(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

String join_with_space(List<String> xs) {
  String s = "";
  int i = 0;
  while (i < xs.length) {
    s = s + xs[i];
    if (i + 1 < xs.length) {
    s = s + " ";
  }
    i = i + 1;
  }
  return s;
}

String reverse_str(String s) {
  String res = "";
  int i = s.length - 1;
  while (i >= 0) {
    res = res + _substr(s, i, i + 1);
    i = i - 1;
  }
  return res;
}

String reverse_letters(String sentence, int length) {
  dynamic words = sentence.split(" ");
  List<String> result = <String>[];
  int i = 0;
  while (i < words.length) {
    dynamic word = words[i];
    if (word.length > length) {
    result = [...result, reverse_str(word)];
  } else {
    result = [...result, word];
  }
    i = i + 1;
  }
  return join_with_space(result);
}

void test_reverse_letters() {
  if (reverse_letters("Hey wollef sroirraw", 3) != "Hey fellow warriors") {
    _error("test1 failed");
  }
  if (reverse_letters("nohtyP is nohtyP", 2) != "Python is Python") {
    _error("test2 failed");
  }
  if (reverse_letters("1 12 123 1234 54321 654321", 0) != "1 21 321 4321 12345 123456") {
    _error("test3 failed");
  }
  if (reverse_letters("racecar", 0) != "racecar") {
    _error("test4 failed");
  }
}

void _main() {
  test_reverse_letters();
  print(reverse_letters("Hey wollef sroirraw", 3));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
