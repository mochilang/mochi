// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> z_function(String s) {
  List<int> z = <int>[];
  int i = 0;
  while (i < s.length) {
    z = [...z, 0];
    i = i + 1;
  }
  int l = 0;
  int r = 0;
  i = 1;
  while (i < s.length) {
    if (i <= r) {
    int min_edge = r - i + 1;
    int zi = z[i - l];
    if (zi < min_edge) {
    min_edge = zi;
  };
    while (z.length <= i) { z.add(0); } z[i] = min_edge;
  }
    while (go_next(i, z, s)) {
    while (z.length <= i) { z.add(0); } z[i] = z[i] + 1;
  }
    if (i + z[i] - 1 > r) {
    l = i;
    r = i + z[i] - 1;
  }
    i = i + 1;
  }
  return z;
}

bool go_next(int i, List<int> z, String s) {
  return i + z[i] < s.length && s.substring(z[i], z[i] + 1) == s.substring(i + z[i], i + z[i] + 1);
}

int find_pattern(String pattern, String input_str) {
  int answer = 0;
  List<int> z_res = z_function(pattern + input_str);
  int i = 0;
  while (i < z_res.length) {
    if (z_res[i] >= pattern.length) {
    answer = answer + 1;
  }
    i = i + 1;
  }
  return answer;
}

bool list_eq_int(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_z_function() {
  String s1 = "abracadabra";
  List<int> expected1 = [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1];
  List<int> r1 = z_function(s1);
  if (!list_eq_int(r1, expected1)) {
    throw Exception("z_function abracadabra failed");
  }
  String s2 = "aaaa";
  List<int> expected2 = [0, 3, 2, 1];
  List<int> r2 = z_function(s2);
  if (!list_eq_int(r2, expected2)) {
    throw Exception("z_function aaaa failed");
  }
  String s3 = "zxxzxxz";
  List<int> expected3 = [0, 0, 0, 4, 0, 0, 1];
  List<int> r3 = z_function(s3);
  if (!list_eq_int(r3, expected3)) {
    throw Exception("z_function zxxzxxz failed");
  }
}

void test_find_pattern() {
  if (find_pattern("abr", "abracadabra") != 2) {
    throw Exception("find_pattern abr failed");
  }
  if (find_pattern("a", "aaaa") != 4) {
    throw Exception("find_pattern aaaa failed");
  }
  if (find_pattern("xz", "zxxzxxz") != 2) {
    throw Exception("find_pattern xz failed");
  }
}

void _main() {
  test_z_function();
  test_find_pattern();
  List<int> r1 = z_function("abracadabra");
  List<int> r2 = z_function("aaaa");
  List<int> r3 = z_function("zxxzxxz");
  print(_str(r1));
  print(_str(r2));
  print(_str(r3));
  print(_str(find_pattern("abr", "abracadabra")));
  print(_str(find_pattern("a", "aaaa")));
  print(_str(find_pattern("xz", "zxxzxxz")));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
