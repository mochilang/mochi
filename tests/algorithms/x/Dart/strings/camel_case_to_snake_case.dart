// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String LOWER = "abcdefghijklmnopqrstuvwxyz";
String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String DIGITS = "0123456789";
bool is_lower(String ch) {
  int i = 0;
  while (i < LOWER.length) {
    if (_substr(LOWER, i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool is_upper(String ch) {
  int i = 0;
  while (i < UPPER.length) {
    if (_substr(UPPER, i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool is_digit(String ch) {
  int i = 0;
  while (i < DIGITS.length) {
    if (_substr(DIGITS, i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool is_alpha(String ch) {
  if (is_lower(ch)) {
    return true;
  }
  if (is_upper(ch)) {
    return true;
  }
  return false;
}

bool is_alnum(String ch) {
  if (is_alpha(ch)) {
    return true;
  }
  if (is_digit(ch)) {
    return true;
  }
  return false;
}

String to_lower(String ch) {
  int i = 0;
  while (i < UPPER.length) {
    if (_substr(UPPER, i, i + 1) == ch) {
    return _substr(LOWER, i, i + 1);
  }
    i = i + 1;
  }
  return ch;
}

String camel_to_snake_case(String input_str) {
  String snake_str = "";
  int i = 0;
  bool prev_is_digit = false;
  bool prev_is_alpha = false;
  while (i < input_str.length) {
    String ch = _substr(input_str, i, i + 1);
    if (is_upper(ch)) {
    snake_str = snake_str + "_" + to_lower(ch);
  } else {
    if (prev_is_digit && is_lower(ch)) {
    snake_str = snake_str + "_" + ch;
  } else {
    if (prev_is_alpha && is_digit(ch)) {
    snake_str = snake_str + "_" + ch;
  } else {
    if (!is_alnum(ch)) {
    snake_str = snake_str + "_";
  } else {
    snake_str = snake_str + ch;
  };
  };
  };
  }
    prev_is_digit = is_digit(ch);
    prev_is_alpha = is_alpha(ch);
    i = i + 1;
  }
  if (snake_str.length > 0 && _substr(snake_str, 0, 0 + 1) == "_") {
    snake_str = _substr(snake_str, 1, snake_str.length);
  }
  return snake_str;
}

void _main() {
  print(camel_to_snake_case("someRandomString"));
  print(camel_to_snake_case("SomeRandomStr#ng"));
  print(camel_to_snake_case("123SomeRandom123String123"));
}

void _start() {
  _main();
}

void main() => _start();
