// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<String> split_words(String s) {
  List<String> words = <String>[];
  String current = "";
  for (String ch in s.split('')) {
    if (ch == " ") {
    if (current != "") {
    words = [...words, current];
    current = "";
  };
  } else {
    current = current + ch;
  }
  }
  if (current != "") {
    words = [...words, current];
  }
  return words;
}

bool is_alnum(String c) {
  return "0123456789".contains(c) || "abcdefghijklmnopqrstuvwxyz".contains(c) || "ABCDEFGHIJKLMNOPQRSTUVWXYZ".contains(c) || c == " ";
}

List<List<String>> split_input(String text) {
  List<List<String>> result = <List<String>>[];
  String current = "";
  for (String ch in text.split('')) {
    if (is_alnum(ch)) {
    current = current + ch;
  } else {
    if (current != "") {
    result = ([...result, split_words(current)] as List<dynamic>).map((e) => (List<String>.from(e) as List<String>)).toList();
    current = "";
  };
  }
  }
  if (current != "") {
    result = ([...result, split_words(current)] as List<dynamic>).map((e) => (List<String>.from(e) as List<String>)).toList();
  }
  return result;
}

String capitalize(String word) {
  if (word.length == 0) {
    return "";
  }
  if (word.length == 1) {
    return word.toUpperCase();
  }
  return _substr(word, 0, 1).toUpperCase() + _substr(word, 1, word.length).toLowerCase();
}

String to_simple_case(String text) {
  List<List<String>> parts = split_input(text);
  String res = "";
  for (List<String> sub in parts) {
    for (String w in sub) {
    res = res + capitalize(w);
  }
  }
  return res;
}

String to_complex_case(String text, bool upper_flag, String sep) {
  List<List<String>> parts = split_input(text);
  String res = "";
  for (List<String> sub in parts) {
    bool first = true;
    for (String w in sub) {
    String word = (upper_flag ? w.toUpperCase() : w.toLowerCase());
    if (first) {
    res = res + word;
    first = false;
  } else {
    res = res + sep + word;
  }
  }
  }
  return res;
}

String to_pascal_case(String text) {
  return to_simple_case(text);
}

String to_camel_case(String text) {
  String s = to_simple_case(text);
  if (s.length == 0) {
    return "";
  }
  return _substr(s, 0, 1).toLowerCase() + _substr(s, 1, s.length);
}

String to_snake_case(String text, bool upper_flag) {
  return to_complex_case(text, upper_flag, "_");
}

String to_kebab_case(String text, bool upper_flag) {
  return to_complex_case(text, upper_flag, "-");
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(to_pascal_case("one two 31235three4four"));
  print(to_camel_case("one two 31235three4four"));
  print(to_snake_case("one two 31235three4four", true));
  print(to_snake_case("one two 31235three4four", false));
  print(to_kebab_case("one two 31235three4four", true));
  print(to_kebab_case("one two 31235three4four", false));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
