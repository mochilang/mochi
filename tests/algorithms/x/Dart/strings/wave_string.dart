// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

String lowercase = "abcdefghijklmnopqrstuvwxyz";
String uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int index_of(String s, String c) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == c) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

bool is_alpha(String c) {
  return index_of(lowercase, c) >= 0 || index_of(uppercase, c) >= 0;
}

String to_upper(String c) {
  int idx = index_of(lowercase, c);
  if (idx >= 0) {
    return _substr(uppercase, idx, idx + 1);
  }
  return c;
}

List<String> wave(String txt) {
  List<String> result = <String>[];
  int i = 0;
  while (i < txt.length) {
    String ch = _substr(txt, i, i + 1);
    if (is_alpha(ch)) {
    String prefix = _substr(txt, 0, i);
    String suffix = _substr(txt, i + 1, txt.length);
    result = [...result, prefix + to_upper(ch) + suffix];
  }
    i = i + 1;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(wave("cat")));
  print(_str(wave("one")));
  print(_str(wave("book")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
