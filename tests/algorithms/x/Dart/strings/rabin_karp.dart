// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int alphabet_size = 256;
int modulus = 1000003;
int index_of_char(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String digits = "0123456789";
  int idx = index_of_char(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = index_of_char(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  idx = index_of_char(digits, ch);
  if (idx >= 0) {
    return 48 + idx;
  }
  if (ch == "ü") {
    return 252;
  }
  if (ch == "Ü") {
    return 220;
  }
  if (ch == " ") {
    return 32;
  }
  return 0;
}

bool rabin_karp(String pattern, String text) {
  int p_len = pattern.length;
  int t_len = text.length;
  if (p_len > t_len) {
    return false;
  }
  int p_hash = 0;
  int t_hash = 0;
  int modulus_power = 1;
  int i = 0;
  while (i < p_len) {
    p_hash = (ord(pattern.substring(i, i + 1)) + p_hash * alphabet_size) % modulus;
    t_hash = (ord(text.substring(i, i + 1)) + t_hash * alphabet_size) % modulus;
    if (i != p_len - 1) {
    modulus_power = modulus_power * alphabet_size % modulus;
  }
    i = i + 1;
  }
  int j = 0;
  while (j <= t_len - p_len) {
    if (t_hash == p_hash && _substr(text, j, j + p_len) == pattern) {
    return true;
  }
    if (j == t_len - p_len) {
    j = j + 1;
    continue;
  }
    t_hash = ((t_hash - ord(text.substring(j, j + 1)) * modulus_power) * alphabet_size + ord(text.substring(j + p_len, j + p_len + 1))) % modulus;
    if (t_hash < 0) {
    t_hash = t_hash + modulus;
  }
    j = j + 1;
  }
  return false;
}

dynamic test_rabin_karp() {
  String pattern1 = "abc1abc12";
  String text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc";
  String text2 = "alskfjaldsk23adsfabcabc";
  if (!rabin_karp(pattern1, text1) || rabin_karp(pattern1, text2)) {
    print("Failure");
    return;
  }
  String pattern2 = "ABABX";
  String text3 = "ABABZABABYABABX";
  if (!rabin_karp(pattern2, text3)) {
    print("Failure");
    return;
  }
  String pattern3 = "AAAB";
  String text4 = "ABAAAAAB";
  if (!rabin_karp(pattern3, text4)) {
    print("Failure");
    return;
  }
  String pattern4 = "abcdabcy";
  String text5 = "abcxabcdabxabcdabcdabcy";
  if (!rabin_karp(pattern4, text5)) {
    print("Failure");
    return;
  }
  String pattern5 = "Lü";
  String text6 = "Lüsai";
  if (!rabin_karp(pattern5, text6)) {
    print("Failure");
    return;
  }
  String pattern6 = "Lue";
  if (rabin_karp(pattern6, text6)) {
    print("Failure");
    return;
  }
  print("Success.");
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  test_rabin_karp();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
