// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int MAX_LOCAL_PART_OCTETS = 64;
int MAX_DOMAIN_OCTETS = 255;
String ASCII_LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
String DIGITS = "0123456789";
String LOCAL_EXTRA = ".(!#\$%&'*+-/=?^_`{|}~)";
String DOMAIN_EXTRA = ".-";
int count_char(String s, String target) {
  int cnt = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == target) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

bool char_in(String c, String allowed) {
  int i = 0;
  while (i < allowed.length) {
    if (_substr(allowed, i, i + 1) == c) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool starts_with_char(String s, String c) {
  return s.length > 0 && _substr(s, 0, 1) == c;
}

bool ends_with_char(String s, String c) {
  return s.length > 0 && _substr(s, s.length - 1, s.length) == c;
}

bool contains_double_dot(String s) {
  if (s.length < 2) {
    return false;
  }
  int i = 0;
  while (i < s.length - 1) {
    if (_substr(s, i, i + 2) == "..") {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool is_valid_email_address(String email) {
  if (count_char(email, "@") != 1) {
    return false;
  }
  int at_idx = 0;
  int i = 0;
  while (i < email.length) {
    if (_substr(email, i, i + 1) == "@") {
    at_idx = i;
    break;
  }
    i = i + 1;
  }
  String local_part = _substr(email, 0, at_idx);
  String domain = _substr(email, at_idx + 1, email.length);
  if (local_part.length > MAX_LOCAL_PART_OCTETS || domain.length > MAX_DOMAIN_OCTETS) {
    return false;
  }
  int i = 0;
  while (i < local_part.length) {
    String ch = _substr(local_part, i, i + 1);
    if (!char_in(ch, ASCII_LETTERS + DIGITS + LOCAL_EXTRA)) {
    return false;
  }
    i = i + 1;
  }
  if (starts_with_char(local_part, ".") || ends_with_char(local_part, ".") || contains_double_dot(local_part)) {
    return false;
  }
  i = 0;
  while (i < domain.length) {
    String ch = _substr(domain, i, i + 1);
    if (!char_in(ch, ASCII_LETTERS + DIGITS + DOMAIN_EXTRA)) {
    return false;
  }
    i = i + 1;
  }
  if (starts_with_char(domain, "-") || ends_with_char(domain, ".")) {
    return false;
  }
  if (starts_with_char(domain, ".") || ends_with_char(domain, ".") || contains_double_dot(domain)) {
    return false;
  }
  return true;
}

List<String> email_tests = ["simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", ""];
int idx = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (idx < email_tests.length) {
    String email = email_tests[idx];
    print(_str(is_valid_email_address(email)));
    idx = idx + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
