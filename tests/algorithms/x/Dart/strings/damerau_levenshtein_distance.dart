// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int damerau_levenshtein_distance(String first_string, String second_string) {
  int len1 = first_string.length;
  int len2 = second_string.length;
  List<List<int>> dp_matrix = <List<int>>[];
  for (int __ = 0; __ < len1 + 1; __++) {
    List<int> row = <int>[];
    for (int _2 = 0; _2 < len2 + 1; _2++) {
    row = [...row, 0];
  }
    dp_matrix = ([...dp_matrix, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  for (int i = 0; i < len1 + 1; i++) {
    List<int> row = dp_matrix[i];
    while (row.length <= 0) { row.add(0); } row[0] = i;
    while (dp_matrix.length <= i) { dp_matrix.add(<int>[]); } dp_matrix[i] = row;
  }
  List<int> first_row = dp_matrix[0];
  for (int j = 0; j < len2 + 1; j++) {
    while (first_row.length <= j) { first_row.add(0); } first_row[j] = j;
  }
  while (dp_matrix.length <= 0) { dp_matrix.add(<int>[]); } dp_matrix[0] = first_row;
  for (int i = 1; i < len1 + 1; i++) {
    List<int> row = dp_matrix[i];
    String first_char = _substr(first_string, i - 1, i);
    for (int j = 1; j < len2 + 1; j++) {
    String second_char = _substr(second_string, j - 1, j);
    int cost = (first_char == second_char ? 0 : 1);
    int value = dp_matrix[i - 1][j] + 1;
    int insertion = row[j - 1] + 1;
    if (insertion < value) {
    value = insertion;
  }
    int substitution = dp_matrix[i - 1][j - 1] + cost;
    if (substitution < value) {
    value = substitution;
  }
    while (row.length <= j) { row.add(0); } row[j] = value;
    if (i > 1 && j > 1 && _substr(first_string, i - 1, i) == _substr(second_string, j - 2, j - 1) && _substr(first_string, i - 2, i - 1) == _substr(second_string, j - 1, j)) {
    int transposition = dp_matrix[i - 2][j - 2] + cost;
    if (transposition < row[j]) {
    while (row.length <= j) { row.add(0); } row[j] = transposition;
  };
  }
  }
    while (dp_matrix.length <= i) { dp_matrix.add(<int>[]); } dp_matrix[i] = row;
  }
  return dp_matrix[len1][len2];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(damerau_levenshtein_distance("cat", "cut")));
  print(_str(damerau_levenshtein_distance("kitten", "sitting")));
  print(_str(damerau_levenshtein_distance("hello", "world")));
  print(_str(damerau_levenshtein_distance("book", "back")));
  print(_str(damerau_levenshtein_distance("container", "containment")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
