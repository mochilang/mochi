// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


String _read_file(String path) {
  var f = File(path);
  if (!f.existsSync()) {
    var dir = File.fromUri(Platform.script).parent;
    var alt = dir.uri.resolve(path).toFilePath();
    f = File(alt);
    if (!f.existsSync()) {
      var dirPath = dir.path;
      var base = 'tests/algorithms/x/Dart/';
      var idx = dirPath.indexOf(base);
      var rel = '';
      if (idx >= 0) {
        rel = dirPath.substring(idx + base.length);
      }
      alt = dir.uri
          .resolve('../../../../github/TheAlgorithms/Mochi/' + rel + path)
          .toFilePath();
      f = File(alt);
    }
  }
  return f.existsSync() ? f.readAsStringSync() : '';
}

List<String> split(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

List<String> insertion_sort(List<String> arr) {
  List<String> a = arr;
  int i = 1;
  while (i < a.length) {
    String key = a[i];
    int j = i - 1;
    while (j >= 0 && a[j].compareTo(key) > 0) {
    while (a.length <= j + 1) { a.add(""); } a[j + 1] = a[j];
    j = j - 1;
  }
    while (a.length <= j + 1) { a.add(""); } a[j + 1] = key;
    i = i + 1;
  }
  return a;
}

String sort_chars(String word) {
  List<String> chars = <String>[];
  int i = 0;
  while (i < word.length) {
    chars = [...chars, _substr(word, i, i + 1)];
    i = i + 1;
  }
  chars = insertion_sort(chars);
  String res = "";
  i = 0;
  while (i < chars.length) {
    res = res + chars[i];
    i = i + 1;
  }
  return res;
}

List<String> unique_sorted(List<String> words) {
  Map<String, bool> seen = <String, bool>{};
  List<String> res = <String>[];
  for (String w in words) {
    if (w != "" && !seen.containsKey(w)) {
    res = [...res, w];
    seen[w] = true;
  }
  }
  res = insertion_sort(res);
  return res;
}

Map<String, List<String>> word_by_signature = <String, List<String>>{};
void build_map(List<String> words) {
  for (String w in words) {
    String sig = sort_chars(w);
    List<String> arr = <String>[];
    if (word_by_signature.containsKey(sig)) {
    arr = word_by_signature[sig]!;
  }
    arr = [...arr, w];
    word_by_signature[sig] = arr;
  }
}

List<String> anagram(String my_word) {
  String sig = sort_chars(my_word);
  if (word_by_signature.containsKey(sig)) {
    return (word_by_signature[sig]!);
  }
  return List<String>.from([]);
}

void _main() {
  String text = _read_file("words.txt");
  dynamic lines = text.split("\n");
  List<String> words = unique_sorted(lines);
  build_map(words);
  for (String w in words) {
    List<String> anas = anagram(w);
    if (anas.length > 1) {
    String line = w + ":";
    int i = 0;
    while (i < anas.length) {
    if (i > 0) {
    line = line + ",";
  }
    line = line + anas[i];
    i = i + 1;
  };
    print(line);
  }
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
