// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String LETTERS_AND_SPACE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz 	\n";
String LOWER = "abcdefghijklmnopqrstuvwxyz";
String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String to_upper(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    int j = 0;
    String up = c;
    while (j < LOWER.length) {
    if (c == _substr(LOWER, j, j + 1)) {
    up = _substr(UPPER, j, j + 1);
    break;
  }
    j = j + 1;
  }
    res = res + up;
    i = i + 1;
  }
  return res;
}

bool char_in(String chars, String c) {
  int i = 0;
  while (i < chars.length) {
    if (_substr(chars, i, i + 1) == c) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String remove_non_letters(String message) {
  String res = "";
  int i = 0;
  while (i < message.length) {
    String ch = _substr(message, i, i + 1);
    if (char_in(LETTERS_AND_SPACE, ch)) {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

List<String> split_spaces(String text) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < text.length) {
    String ch = _substr(text, i, i + 1);
    if (ch == " ") {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

Map<String, bool> load_dictionary() {
  List<String> words = ["HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG"];
  Map<String, bool> dict = <String, bool>{};
  for (String w in words) {
    dict[w] = true;
  }
  return dict;
}

Map<String, bool> ENGLISH_WORDS = load_dictionary();
double get_english_count(String message) {
  String upper = to_upper(message);
  String cleaned = remove_non_letters(upper);
  List<String> possible = split_spaces(cleaned);
  int matches = 0;
  int total = 0;
  for (String w in possible) {
    if (w != "") {
    total = total + 1;
    if (ENGLISH_WORDS.containsKey(w)) {
    matches = matches + 1;
  };
  }
  }
  if (total == 0) {
    return 0.0;
  }
  return ((matches).toDouble()) / ((total).toDouble());
}

bool is_english(String message, int word_percentage, int letter_percentage) {
  bool words_match = get_english_count(message) * 100.0 >= ((word_percentage).toDouble());
  int num_letters = remove_non_letters(message).length;
  double letters_pct = (message.length == 0 ? 0.0 : ((num_letters).toDouble()) / ((message.length).toDouble()) * 100.0);
  bool letters_match = letters_pct >= ((letter_percentage).toDouble());
  return words_match && letters_match;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(is_english("Hello World", 20, 85)));
  print(_str(is_english("llold HorWd", 20, 85)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
