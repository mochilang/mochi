// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<List<bool>> make_matrix_bool(int rows, int cols, bool init) {
  List<List<bool>> matrix = <List<bool>>[];
  for (int __ = 0; __ < rows; __++) {
    List<bool> row = <bool>[];
    for (int _2 = 0; _2 < cols; _2++) {
    row = [...row, init];
  }
    matrix = ([...matrix, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
  }
  return matrix;
}

bool match_pattern(String input_string, String pattern) {
  int len_string = input_string.length + 1;
  int len_pattern = pattern.length + 1;
  List<List<bool>> dp = make_matrix_bool(len_string, len_pattern, false);
  List<bool> row0 = dp[0];
  while (row0.length <= 0) { row0.add(false); } row0[0] = true;
  while (dp.length <= 0) { dp.add(<bool>[]); } dp[0] = row0;
  int j = 1;
  while (j < len_pattern) {
    row0 = dp[0];
    if (_substr(pattern, j - 1, j) == "*") {
    while (row0.length <= j) { row0.add(false); } row0[j] = row0[j - 2];
  } else {
    while (row0.length <= j) { row0.add(false); } row0[j] = false;
  }
    while (dp.length <= 0) { dp.add(<bool>[]); } dp[0] = row0;
    j = j + 1;
  }
  int i = 1;
  while (i < len_string) {
    List<bool> row = dp[i];
    int j2 = 1;
    while (j2 < len_pattern) {
    String s_char = _substr(input_string, i - 1, i);
    String p_char = _substr(pattern, j2 - 1, j2);
    if (s_char == p_char || p_char == ".") {
    while (row.length <= j2) { row.add(false); } row[j2] = dp[i - 1][j2 - 1];
  } else {
    if (p_char == "*") {
    bool val = dp[i][j2 - 2];
    String prev_p = _substr(pattern, j2 - 2, j2 - 1);
    if (!val && (prev_p == s_char || prev_p == ".")) {
    val = dp[i - 1][j2];
  };
    while (row.length <= j2) { row.add(false); } row[j2] = val;
  } else {
    while (row.length <= j2) { row.add(false); } row[j2] = false;
  };
  }
    j2 = j2 + 1;
  }
    while (dp.length <= i) { dp.add(<bool>[]); } dp[i] = row;
    i = i + 1;
  }
  return dp[len_string - 1][len_pattern - 1];
}

void _main() {
  if (!match_pattern("aab", "c*a*b")) {
    throw Exception("case1 failed");
  }
  if (match_pattern("dabc", "*abc")) {
    throw Exception("case2 failed");
  }
  if (match_pattern("aaa", "aa")) {
    throw Exception("case3 failed");
  }
  if (!match_pattern("aaa", "a.a")) {
    throw Exception("case4 failed");
  }
  if (match_pattern("aaab", "aa*")) {
    throw Exception("case5 failed");
  }
  if (!match_pattern("aaab", ".*")) {
    throw Exception("case6 failed");
  }
  if (match_pattern("a", "bbbb")) {
    throw Exception("case7 failed");
  }
  if (match_pattern("", "bbbb")) {
    throw Exception("case8 failed");
  }
  if (match_pattern("a", "")) {
    throw Exception("case9 failed");
  }
  if (!match_pattern("", "")) {
    throw Exception("case10 failed");
  }
  print(_str(match_pattern("aab", "c*a*b")));
  print(_str(match_pattern("dabc", "*abc")));
  print(_str(match_pattern("aaa", "aa")));
  print(_str(match_pattern("aaa", "a.a")));
  print(_str(match_pattern("aaab", "aa*")));
  print(_str(match_pattern("aaab", ".*")));
  print(_str(match_pattern("a", "bbbb")));
  print(_str(match_pattern("", "bbbb")));
  print(_str(match_pattern("a", "")));
  print(_str(match_pattern("", "")));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
