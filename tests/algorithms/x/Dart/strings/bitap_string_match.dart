// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int pow2(int n) {
  int res = 1;
  int i = 0;
  while (i < n) {
    res = res * 2;
    i = i + 1;
  }
  return res;
}

int bit_and(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  while (x > 0 || y > 0) {
    if (x % 2 == 1 && y % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2 as int;
    y = y ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int bit_or(int a, int b) {
  int x = a;
  int y = b;
  int res = 0;
  int bit = 1;
  while (x > 0 || y > 0) {
    if (x % 2 == 1 || y % 2 == 1) {
    res = res + bit;
  }
    x = x ~/ 2 as int;
    y = y ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int char_to_index(String ch) {
  String letters = "abcdefghijklmnopqrstuvwxyz";
  int i = 0;
  while (i < letters.length) {
    if (_substr(letters, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return 26;
}

int bitap_string_match(String text, String pattern) {
  if (pattern == "") {
    return 0;
  }
  int m = pattern.length;
  if (m > text.length) {
    return -1;
  }
  int limit = pow2(m + 1);
  int all_ones = limit - 1;
  List<int> pattern_mask = <int>[];
  int i = 0;
  while (i < 27) {
    pattern_mask = [...pattern_mask, all_ones];
    i = i + 1;
  }
  i = 0;
  while (i < m) {
    String ch = _substr(pattern, i, i + 1);
    int idx = char_to_index(ch);
    while (pattern_mask.length <= idx) { pattern_mask.add(0); } pattern_mask[idx] = bit_and(pattern_mask[idx], all_ones - pow2(i));
    i = i + 1;
  }
  int state = all_ones - 1;
  i = 0;
  while (i < text.length) {
    String ch = _substr(text, i, i + 1);
    int idx = char_to_index(ch);
    state = bit_or(state, pattern_mask[idx]);
    state = state * 2 % limit;
    if (bit_and(state, pow2(m)) == 0) {
    return i - m + 1;
  }
    i = i + 1;
  }
  return -1;
}

void _main() {
  print(_str(bitap_string_match("abdabababc", "ababc")));
  print(_str(bitap_string_match("abdabababc", "")));
  print(_str(bitap_string_match("abdabababc", "c")));
  print(_str(bitap_string_match("abdabababc", "fofosdfo")));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
