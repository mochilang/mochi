// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class TransformTables {
  List<List<int>> costs;
  List<List<String>> ops;
  TransformTables({required this.costs, required this.ops});
}

List<String> string_to_chars(String s) {
  List<String> chars = <String>[];
  int i = 0;
  while (i < s.length) {
    chars = [...chars, _substr(s, i, i + 1)];
    i = i + 1;
  }
  return chars;
}

String join_chars(List<String> chars) {
  String res = "";
  int i = 0;
  while (i < chars.length) {
    res = res + chars[i];
    i = i + 1;
  }
  return res;
}

List<String> insert_at(List<String> chars, int index, String ch) {
  List<String> res = <String>[];
  int i = 0;
  while (i < index) {
    res = [...res, chars[i]];
    i = i + 1;
  }
  res = [...res, ch];
  while (i < chars.length) {
    res = [...res, chars[i]];
    i = i + 1;
  }
  return res;
}

List<String> remove_at(List<String> chars, int index) {
  List<String> res = <String>[];
  int i = 0;
  while (i < chars.length) {
    if (i != index) {
    res = [...res, chars[i]];
  }
    i = i + 1;
  }
  return res;
}

List<List<int>> make_matrix_int(int rows, int cols, int init) {
  List<List<int>> matrix = <List<int>>[];
  for (int __ = 0; __ < rows; __++) {
    List<int> row = <int>[];
    for (int _2 = 0; _2 < cols; _2++) {
    row = [...row, init];
  }
    matrix = ([...matrix, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  return matrix;
}

List<List<String>> make_matrix_string(int rows, int cols, String init) {
  List<List<String>> matrix = <List<String>>[];
  for (int __ = 0; __ < rows; __++) {
    List<String> row = <String>[];
    for (int _2 = 0; _2 < cols; _2++) {
    row = [...row, init];
  }
    matrix = ([...matrix, row] as List<dynamic>).map((e) => (List<String>.from(e) as List<String>)).toList();
  }
  return matrix;
}

TransformTables compute_transform_tables(String source_string, String destination_string, int copy_cost, int replace_cost, int delete_cost, int insert_cost) {
  List<String> source_seq = string_to_chars(source_string);
  List<String> dest_seq = string_to_chars(destination_string);
  int m = source_seq.length;
  int n = dest_seq.length;
  List<List<int>> costs = make_matrix_int(m + 1, n + 1, 0);
  List<List<String>> ops = make_matrix_string(m + 1, n + 1, "0");
  int i = 1;
  while (i <= m) {
    while (costs[i]!.length <= 0) { costs[i]!.add(0); } costs[i]![0] = i * delete_cost;
    while (ops[i]!.length <= 0) { ops[i]!.add(""); } ops[i]![0] = "D" + source_seq[i - 1];
    i = i + 1;
  }
  int j = 1;
  while (j <= n) {
    while (costs[0]!.length <= j) { costs[0]!.add(0); } costs[0]![j] = j * insert_cost;
    while (ops[0]!.length <= j) { ops[0]!.add(""); } ops[0]![j] = "I" + dest_seq[j - 1];
    j = j + 1;
  }
  i = 1;
  while (i <= m) {
    j = 1;
    while (j <= n) {
    if (source_seq[i - 1] == dest_seq[j - 1]) {
    while (costs[i]!.length <= j) { costs[i]!.add(0); } costs[i]![j] = costs[i - 1][j - 1] + copy_cost;
    while (ops[i]!.length <= j) { ops[i]!.add(""); } ops[i]![j] = "C" + source_seq[i - 1];
  } else {
    while (costs[i]!.length <= j) { costs[i]!.add(0); } costs[i]![j] = costs[i - 1][j - 1] + replace_cost;
    while (ops[i]!.length <= j) { ops[i]!.add(""); } ops[i]![j] = "R" + source_seq[i - 1] + dest_seq[j - 1];
  }
    if (costs[i - 1][j] + delete_cost < costs[i][j]) {
    while (costs[i]!.length <= j) { costs[i]!.add(0); } costs[i]![j] = costs[i - 1][j] + delete_cost;
    while (ops[i]!.length <= j) { ops[i]!.add(""); } ops[i]![j] = "D" + source_seq[i - 1];
  }
    if (costs[i][j - 1] + insert_cost < costs[i][j]) {
    while (costs[i]!.length <= j) { costs[i]!.add(0); } costs[i]![j] = costs[i][j - 1] + insert_cost;
    while (ops[i]!.length <= j) { ops[i]!.add(""); } ops[i]![j] = "I" + dest_seq[j - 1];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return TransformTables(costs: costs, ops: ops);
}

List<String> assemble_transformation(List<List<String>> ops, int i, int j) {
  if (i == 0 && j == 0) {
    return List<String>.from([]);
  }
  String op = ops[i][j];
  String kind = _substr(op, 0, 1);
  if (kind == "C" || kind == "R") {
    List<String> seq = assemble_transformation(ops, i - 1, j - 1);
    seq = [...seq, op];
    return seq;
  } else {
    if (kind == "D") {
    List<String> seq = assemble_transformation(ops, i - 1, j);
    seq = [...seq, op];
    return seq;
  } else {
    List<String> seq = assemble_transformation(ops, i, j - 1);
    seq = [...seq, op];
    return seq;
  };
  }
}

void _main() {
  int copy_cost = -1;
  int replace_cost = 1;
  int delete_cost = 2;
  int insert_cost = 2;
  String src = "Python";
  String dst = "Algorithms";
  TransformTables tables = compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost);
  List<List<String>> operations = tables.ops;
  int m = operations.length;
  int n = operations[0].length;
  List<String> sequence = assemble_transformation(operations, m - 1, n - 1);
  List<String> string_list = string_to_chars(src);
  int idx = 0;
  int cost = 0;
  int k = 0;
  while (k < sequence.length) {
    print(join_chars(string_list));
    String op = sequence[k];
    String kind = _substr(op, 0, 1);
    if (kind == "C") {
    cost = cost + copy_cost;
  } else {
    if (kind == "R") {
    while (string_list.length <= idx) { string_list.add(""); } string_list[idx] = _substr(op, 2, 3);
    cost = cost + replace_cost;
  } else {
    if (kind == "D") {
    string_list = remove_at(string_list, idx);
    cost = cost + delete_cost;
  } else {
    string_list = insert_at(string_list, idx, _substr(op, 1, 2));
    cost = cost + insert_cost;
  };
  };
  }
    idx = idx + 1;
    k = k + 1;
  }
  print(join_chars(string_list));
  print("Cost: " + _str(cost));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
