// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

bool has_alpha(String s) {
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c.compareTo("a") >= 0 && c.compareTo("z") <= 0 || c.compareTo("A") >= 0 && c.compareTo("Z") <= 0) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int parse_decimal(String s) {
  int value = 0;
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c.compareTo("0") < 0 || c.compareTo("9") > 0) {
    _error("Non-digit character encountered");
  }
    value = value * 10 + (int.parse(c));
    i = i + 1;
  }
  return value;
}

int get_barcode(String barcode) {
  if (has_alpha(barcode)) {
    _error("Barcode '" + barcode + "' has alphabetic characters.");
  }
  if (barcode.length > 0 && _substr(barcode, 0, 0 + 1) == "-") {
    _error("The entered barcode has a negative value. Try again.");
  }
  return parse_decimal(barcode);
}

int get_check_digit(int barcode) {
  int _num = barcode ~/ 10;
  int s = 0;
  int position = 0;
  while (_num != 0) {
    int mult = (position % 2 == 0 ? 3 : 1);
    s = s + mult * (_num % 10);
    _num = _num ~/ 10;
    position = position + 1;
  }
  return (10 - s % 10) % 10;
}

bool is_valid(int barcode) {
  return _str(barcode).length == 13 && get_check_digit(barcode) == barcode % 10;
}

List<int> res = <int>[];
int x = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(get_check_digit(8718452538119)));
  print(_str(get_check_digit(87184523)));
  print(_str(get_check_digit(87193425381086)));
  while (x < 100) {
    res = [...res, get_check_digit(x)];
    x = x + 10;
  }
  print("[" + res.join(', ') + "]");
  print(_str(is_valid(8718452538119)));
  print(_str(is_valid(87184525)));
  print(_str(is_valid(87193425381089)));
  print(_str(is_valid(0)));
  print(_str(get_barcode("8718452538119")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
