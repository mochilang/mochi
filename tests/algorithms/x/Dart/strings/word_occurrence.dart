// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

Map<String, int> word_occurrence(String sentence) {
  Map<String, int> occurrence = <String, int>{};
  String word = "";
  int i = 0;
  while (i < sentence.length) {
    String ch = _substr(sentence, i, i + 1);
    if (ch == " ") {
    if (word != "") {
    if (occurrence.containsKey(word)) {
    occurrence[word] = ((occurrence[word] ?? 0) + 1).toInt();
  } else {
    occurrence[word] = 1;
  };
    word = "";
  };
  } else {
    word = word + ch;
  }
    i = i + 1;
  }
  if (word != "") {
    if (occurrence.containsKey(word)) {
    occurrence[word] = ((occurrence[word] ?? 0) + 1).toInt();
  } else {
    occurrence[word] = 1;
  };
  }
  return occurrence;
}

void _main() {
  Map<String, int> result = word_occurrence("INPUT STRING");
  for (String w in result.keys) {
    print(w + ": " + _str((result[w] ?? 0)));
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
