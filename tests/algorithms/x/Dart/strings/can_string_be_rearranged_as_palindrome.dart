// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
String char_to_lower(String c) {
  int i = 0;
  while (i < LETTERS.length) {
    if (c == _substr(LETTERS, i, i + 1)) {
    return _substr(LOWERCASE, i, i + 1);
  }
    i = i + 1;
  }
  return c;
}

String normalize(String input_str) {
  String res = "";
  int i = 0;
  while (i < input_str.length) {
    String ch = _substr(input_str, i, i + 1);
    String lc = char_to_lower(ch);
    if (lc.compareTo("a") >= 0 && lc.compareTo("z") <= 0) {
    res = res + lc;
  }
    i = i + 1;
  }
  return res;
}

bool can_string_be_rearranged_as_palindrome_counter(String input_str) {
  String s = normalize(input_str);
  Map<String, int> freq = <String, int>{};
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (freq.containsKey(ch)) {
    freq[ch] = ((freq[ch] ?? 0) + 1).toInt();
  } else {
    freq[ch] = 1;
  }
    i = i + 1;
  }
  int odd = 0;
  for (String key in freq.keys) {
    if ((freq[key] ?? 0) % 2 != 0) {
    odd = odd + 1;
  }
  }
  return odd < 2;
}

bool can_string_be_rearranged_as_palindrome(String input_str) {
  String s = normalize(input_str);
  if (s.length == 0) {
    return true;
  }
  Map<String, int> character_freq_dict = <String, int>{};
  int i = 0;
  while (i < s.length) {
    String character = _substr(s, i, i + 1);
    if (character_freq_dict.containsKey(character)) {
    character_freq_dict[character] = ((character_freq_dict[character] ?? 0) + 1).toInt();
  } else {
    character_freq_dict[character] = 1;
  }
    i = i + 1;
  }
  int odd_char = 0;
  for (String character_key in character_freq_dict.keys) {
    int character_count = character_freq_dict[character_key]!;
    if (character_count % 2 != 0) {
    odd_char = odd_char + 1;
  }
  }
  return !(odd_char > 1);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(can_string_be_rearranged_as_palindrome_counter("Momo"));
  print(can_string_be_rearranged_as_palindrome_counter("Mother"));
  print(can_string_be_rearranged_as_palindrome("Momo"));
  print(can_string_be_rearranged_as_palindrome("Mother"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
