// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String palindromic_string(String input_string) {
  int max_length = 0;
  String new_input_string = "";
  String output_string = "";
  int n = input_string.length;
  int i = 0;
  while (i < n - 1) {
    new_input_string = new_input_string + _substr(input_string, i, i + 1) + "|";
    i = i + 1;
  }
  new_input_string = new_input_string + _substr(input_string, n - 1, n);
  int left = 0;
  int right = 0;
  List<int> length = <int>[];
  i = 0;
  int m = new_input_string.length;
  while (i < m) {
    length = [...length, 1];
    i = i + 1;
  }
  int start = 0;
  int j = 0;
  while (j < m) {
    int k = 1;
    if (j <= right) {
    int mirror = left + right - j;
    k = length[mirror] ~/ 2;
    int diff = right - j + 1;
    if (diff < k) {
    k = diff;
  };
    if (k < 1) {
    k = 1;
  };
  }
    while (j - k >= 0 && j + k < m && _substr(new_input_string, j + k, j + k + 1) == _substr(new_input_string, j - k, j - k + 1)) {
    k = k + 1;
  }
    while (length.length <= j) { length.add(0); } length[j] = 2 * k - 1;
    if (j + k - 1 > right) {
    left = j - k + 1;
    right = j + k - 1;
  }
    if (length[j] > max_length) {
    max_length = length[j];
    start = j;
  }
    j = j + 1;
  }
  String s = _substr(new_input_string, start - max_length ~/ 2, start + max_length ~/ 2 + 1);
  int idx = 0;
  while (idx < s.length) {
    String ch = _substr(s, idx, idx + 1);
    if (ch != "|") {
    output_string = output_string + ch;
  }
    idx = idx + 1;
  }
  return output_string;
}

void _main() {
  print(palindromic_string("abbbaba"));
  print(palindromic_string("ababa"));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
