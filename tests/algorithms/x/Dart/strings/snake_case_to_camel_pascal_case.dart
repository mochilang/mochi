// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<String> split(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

String capitalize(String word) {
  if (word.length == 0) {
    return "";
  }
  String first = _substr(word, 0, 1).toUpperCase();
  String rest = _substr(word, 1, word.length);
  return first + rest;
}

String snake_to_camel_case(String input_str, bool use_pascal) {
  dynamic words = input_str.split("_");
  String result = "";
  int index = 0;
  if (!use_pascal) {
    if (words.length > 0) {
    result = words[0];
    index = 1;
  };
  }
  while (index < words.length) {
    dynamic word = words[index];
    result = result + capitalize(word);
    index = index + 1;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(snake_to_camel_case("some_random_string", false));
  print(snake_to_camel_case("some_random_string", true));
  print(snake_to_camel_case("some_random_string_with_numbers_123", false));
  print(snake_to_camel_case("some_random_string_with_numbers_123", true));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
