// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

class Case {
  String text;
  bool expected;
  Case({required this.text, required this.expected});
}

String reverse(String s) {
  String res = "";
  int i = s.length - 1;
  while (i >= 0) {
    res = res + _substr(s, i, i + 1);
    i = i - 1;
  }
  return res;
}

bool is_palindrome(String s) {
  int start_i = 0;
  int end_i = s.length - 1;
  while (start_i < end_i) {
    if (_substr(s, start_i, start_i + 1) == _substr(s, end_i, end_i + 1)) {
    start_i = start_i + 1;
    end_i = end_i - 1;
  } else {
    return false;
  }
  }
  return true;
}

bool is_palindrome_traversal(String s) {
  int end = s.length ~/ 2;
  int n = s.length;
  int i = 0;
  while (i < end) {
    if (_substr(s, i, i + 1) != _substr(s, n - i - 1, n - i - 1 + 1)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

bool is_palindrome_recursive(String s) {
  if (s.length <= 1) {
    return true;
  }
  if (_substr(s, 0, 0 + 1) == _substr(s, s.length - 1, s.length - 1 + 1)) {
    return is_palindrome_recursive(_substr(s, 1, s.length - 1));
  }
  return false;
}

bool is_palindrome_slice(String s) {
  return s == reverse(s);
}

List<Case> test_data = [Case(text: "MALAYALAM", expected: true), Case(text: "String", expected: false), Case(text: "rotor", expected: true), Case(text: "level", expected: true), Case(text: "A", expected: true), Case(text: "BB", expected: true), Case(text: "ABC", expected: false), Case(text: "amanaplanacanalpanama", expected: true)];
void _main() {
  for (Case t in test_data) {
    String s = t.text;
    bool expected = t.expected;
    bool r1 = is_palindrome(s);
    bool r2 = is_palindrome_traversal(s);
    bool r3 = is_palindrome_recursive(s);
    bool r4 = is_palindrome_slice(s);
    if (r1 != expected || r2 != expected || r3 != expected || r4 != expected) {
    _error("algorithm mismatch");
  }
    print(s + " " + _str(expected));
  }
  print("a man a plan a canal panama");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
