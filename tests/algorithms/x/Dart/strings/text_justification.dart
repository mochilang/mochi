// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

String repeat_str(String s, int count) {
  String res = "";
  int i = 0;
  while (i < count) {
    res = res + s;
    i = i + 1;
  }
  return res;
}

List<String> split_words(String s) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == " ") {
    if (current != "") {
    res = [...res, current];
    current = "";
  };
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  if (current != "") {
    res = [...res, current];
  }
  return res;
}

String justify_line(List<String> line, int width, int max_width) {
  int overall_spaces_count = max_width - width;
  int words_count = line.length;
  if (words_count == 1) {
    return line[0] + repeat_str(" ", overall_spaces_count);
  }
  int spaces_to_insert_between_words = words_count - 1;
  List<int> num_spaces_between_words_list = <int>[];
  int base = overall_spaces_count ~/ spaces_to_insert_between_words;
  int extra = overall_spaces_count % spaces_to_insert_between_words;
  int i = 0;
  while (i < spaces_to_insert_between_words) {
    int spaces = base;
    if (i < extra) {
    spaces = spaces + 1;
  }
    num_spaces_between_words_list = [...num_spaces_between_words_list, spaces];
    i = i + 1;
  }
  String aligned = "";
  i = 0;
  while (i < spaces_to_insert_between_words) {
    aligned = aligned + line[i] + repeat_str(" ", num_spaces_between_words_list[i]);
    i = i + 1;
  }
  aligned = aligned + line[spaces_to_insert_between_words];
  return aligned;
}

List<String> text_justification(String word, int max_width) {
  List<String> words = split_words(word);
  List<String> answer = <String>[];
  List<String> line = <String>[];
  int width = 0;
  int idx = 0;
  while (idx < words.length) {
    String w = words[idx];
    if (width + w.length + line.length <= max_width) {
    line = [...line, w];
    width = width + w.length;
  } else {
    answer = [...answer, justify_line(line, width, max_width)];
    line = [w];
    width = w.length;
  }
    idx = idx + 1;
  }
  int remaining_spaces = max_width - width - line.length;
  String last_line = "";
  int j = 0;
  while (j < line.length) {
    if (j > 0) {
    last_line = last_line + " ";
  }
    last_line = last_line + line[j];
    j = j + 1;
  }
  last_line = last_line + repeat_str(" ", remaining_spaces + 1);
  answer = [...answer, last_line];
  return answer;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(text_justification("This is an example of text justification.", 16)));
  print(_str(text_justification("Two roads diverged in a yellow wood", 16)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
