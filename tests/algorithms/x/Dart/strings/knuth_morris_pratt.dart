// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> get_failure_array(String pattern) {
  List<int> failure = [0];
  int i = 0;
  int j = 1;
  while (j < pattern.length) {
    if (_substr(pattern, i, i + 1) == _substr(pattern, j, j + 1)) {
    i = i + 1;
  } else {
    if (i > 0) {
    i = failure[i - 1];
    continue;
  };
  }
    j = j + 1;
    failure = [...failure, i];
  }
  return failure;
}

int knuth_morris_pratt(String text, String pattern) {
  List<int> failure = get_failure_array(pattern);
  int i = 0;
  int j = 0;
  while (i < text.length) {
    if (_substr(pattern, j, j + 1) == _substr(text, i, i + 1)) {
    if (j == pattern.length - 1) {
    return i - j;
  };
    j = j + 1;
  } else {
    if (j > 0) {
    j = failure[j - 1];
    continue;
  };
  }
    i = i + 1;
  }
  return -1;
}

String text = "abcxabcdabxabcdabcdabcy";
String pattern = "abcdabcy";
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(knuth_morris_pratt(text, pattern));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
