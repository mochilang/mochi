// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int min_int(int a, int b) {
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

int max_int(int a, int b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

List<bool> repeat_bool(int n, bool value) {
  List<bool> res = <bool>[];
  int i = 0;
  while (i < n) {
    res = [...res, value];
    i = i + 1;
  }
  return res;
}

List<bool> set_bool(List<bool> xs, int idx, bool value) {
  List<bool> res = <bool>[];
  int i = 0;
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

double jaro_winkler(String s1, String s2) {
  int len1 = s1.length;
  int len2 = s2.length;
  int limit = min_int(len1, len2) ~/ 2;
  List<bool> match1 = repeat_bool(len1, false);
  List<bool> match2 = repeat_bool(len2, false);
  int matches = 0;
  int i = 0;
  while (i < len1) {
    int start = max_int(0, i - limit);
    int end = min_int(i + limit + 1, len2);
    int j = start;
    while (j < end) {
    if (!match2[j] && _substr(s1, i, i + 1) == _substr(s2, j, j + 1)) {
    match1 = set_bool(match1, i, true);
    match2 = set_bool(match2, j, true);
    matches = matches + 1;
    break;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  if (matches == 0) {
    return 0.0;
  }
  int transpositions = 0;
  int k = 0;
  i = 0;
  while (i < len1) {
    if (match1[i]) {
    while (!match2[k]) {
    k = k + 1;
  };
    if (_substr(s1, i, i + 1) != _substr(s2, k, k + 1)) {
    transpositions = transpositions + 1;
  };
    k = k + 1;
  }
    i = i + 1;
  }
  double m = (matches).toDouble();
  double jaro = (m / ((len1).toDouble()) + m / ((len2).toDouble()) + (m - ((transpositions).toDouble()) / 2.0) / m) / 3.0;
  int prefix_len = 0;
  i = 0;
  while (i < 4 && i < len1 && i < len2) {
    if (_substr(s1, i, i + 1) == _substr(s2, i, i + 1)) {
    prefix_len = prefix_len + 1;
  } else {
    break;
  }
    i = i + 1;
  }
  return jaro + 0.1 * ((prefix_len).toDouble()) * (1.0 - jaro);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(jaro_winkler("hello", "world")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
