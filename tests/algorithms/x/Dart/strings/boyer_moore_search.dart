// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int match_in_pattern(String pat, String ch) {
  int i = pat.length - 1;
  while (i >= 0) {
    if (_substr(pat, i, i + 1) == ch) {
    return i;
  }
    i = i - 1;
  }
  return -1;
}

int mismatch_in_text(String text, String pat, int current_pos) {
  int i = pat.length - 1;
  while (i >= 0) {
    if (_substr(pat, i, i + 1) != _substr(text, current_pos + i, current_pos + i + 1)) {
    return current_pos + i;
  }
    i = i - 1;
  }
  return -1;
}

List<int> bad_character_heuristic(String text, String pat) {
  int textLen = text.length;
  int patLen = pat.length;
  List<int> positions = <int>[];
  int i = 0;
  while (i <= textLen - patLen) {
    int mismatch_index = mismatch_in_text(text, pat, i);
    if (mismatch_index < 0) {
    positions = [...positions, i];
    i = i + 1;
  } else {
    String ch = _substr(text, mismatch_index, mismatch_index + 1);
    int match_index = match_in_pattern(pat, ch);
    if (match_index < 0) {
    i = mismatch_index + 1;
  } else {
    i = mismatch_index - match_index;
  };
  }
  }
  return positions;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
