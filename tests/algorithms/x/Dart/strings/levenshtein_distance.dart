// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

List<int> range_list(int n) {
  List<int> lst = <int>[];
  int i = 0;
  while (i < n) {
    lst = [...lst, i];
    i = i + 1;
  }
  return lst;
}

int min3(int a, int b, int c) {
  int m = a;
  if (b < m) {
    m = b;
  }
  if (c < m) {
    m = c;
  }
  return m;
}

int levenshtein_distance(String first_word, String second_word) {
  if (first_word.length < second_word.length) {
    return levenshtein_distance(second_word, first_word);
  }
  if (second_word.length == 0) {
    return first_word.length;
  }
  List<int> previous_row = range_list(second_word.length + 1);
  int i = 0;
  while (i < first_word.length) {
    String c1 = _substr(first_word, i, i + 1);
    List<int> current_row = <int>[];
    current_row = [...current_row, i + 1];
    int j = 0;
    while (j < second_word.length) {
    String c2 = _substr(second_word, j, j + 1);
    int insertions = previous_row[j + 1] + 1;
    int deletions = current_row[j] + 1;
    int substitutions = previous_row[j] + (c1 == c2 ? 0 : 1);
    int min_val = min3(insertions, deletions, substitutions);
    current_row = [...current_row, min_val];
    j = j + 1;
  }
    previous_row = current_row;
    i = i + 1;
  }
  return previous_row[previous_row.length - 1];
}

int levenshtein_distance_optimized(String first_word, String second_word) {
  if (first_word.length < second_word.length) {
    return levenshtein_distance_optimized(second_word, first_word);
  }
  if (second_word.length == 0) {
    return first_word.length;
  }
  List<int> previous_row = range_list(second_word.length + 1);
  int i = 0;
  while (i < first_word.length) {
    String c1 = _substr(first_word, i, i + 1);
    List<int> current_row = <int>[];
    current_row = [...current_row, i + 1];
    int k = 0;
    while (k < second_word.length) {
    current_row = [...current_row, 0];
    k = k + 1;
  }
    int j = 0;
    while (j < second_word.length) {
    String c2 = _substr(second_word, j, j + 1);
    int insertions = previous_row[j + 1] + 1;
    int deletions = current_row[j] + 1;
    int substitutions = previous_row[j] + (c1 == c2 ? 0 : 1);
    int min_val = min3(insertions, deletions, substitutions);
    while (current_row.length <= j + 1) { current_row.add(0); } current_row[j + 1] = min_val;
    j = j + 1;
  }
    previous_row = current_row;
    i = i + 1;
  }
  return previous_row[previous_row.length - 1];
}

void _main() {
  String a = "kitten";
  String b = "sitting";
  print(_str(levenshtein_distance(a, b)));
  print(_str(levenshtein_distance_optimized(a, b)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
