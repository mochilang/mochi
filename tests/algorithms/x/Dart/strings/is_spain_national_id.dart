// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

String DIGITS = "0123456789";
String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String LOWER = "abcdefghijklmnopqrstuvwxyz";
String LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE";
String ERROR_MSG = "Input must be a string of 8 numbers plus letter";
String to_upper(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    int j = 0;
    String converted = ch;
    while (j < LOWER.length) {
    if (_substr(LOWER, j, j + 1) == ch) {
    converted = _substr(UPPER, j, j + 1);
    break;
  }
    j = j + 1;
  }
    res = res + converted;
    i = i + 1;
  }
  return res;
}

bool is_digit(String ch) {
  int i = 0;
  while (i < DIGITS.length) {
    if (_substr(DIGITS, i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String clean_id(String spanish_id) {
  String upper_id = to_upper(spanish_id);
  String cleaned = "";
  int i = 0;
  while (i < upper_id.length) {
    String ch = _substr(upper_id, i, i + 1);
    if (ch != "-") {
    cleaned = cleaned + ch;
  }
    i = i + 1;
  }
  return cleaned;
}

bool is_spain_national_id(String spanish_id) {
  String sid = clean_id(spanish_id);
  if (sid.length != 9) {
    _error(ERROR_MSG);
  }
  int i = 0;
  while (i < 8) {
    if (!is_digit(_substr(sid, i, i + 1))) {
    _error(ERROR_MSG);
  }
    i = i + 1;
  }
  int number = int.parse(_substr(sid, 0, 8));
  String letter = _substr(sid, 8, 8 + 1);
  if (is_digit(letter)) {
    _error(ERROR_MSG);
  }
  String expected = _substr(LOOKUP_LETTERS, number % 23, number % 23 + 1);
  return letter == expected;
}

void _main() {
  print(is_spain_national_id("12345678Z"));
  print(is_spain_national_id("12345678z"));
  print(is_spain_national_id("12345678x"));
  print(is_spain_national_id("12345678I"));
  print(is_spain_national_id("12345678-Z"));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
