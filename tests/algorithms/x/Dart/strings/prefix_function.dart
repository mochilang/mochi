// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

List<int> prefix_function(String s) {
  List<int> pi = <int>[];
  int i = 0;
  while (i < s.length) {
    pi = [...pi, 0];
    i = i + 1;
  }
  i = 1;
  while (i < s.length) {
    int j = pi[i - 1];
    while (j > 0 && _substr(s, i, i + 1) != _substr(s, j, j + 1)) {
    j = pi[j - 1];
  }
    if (_substr(s, i, i + 1) == _substr(s, j, j + 1)) {
    j = j + 1;
  }
    while (pi.length <= i) { pi.add(0); } pi[i] = j;
    i = i + 1;
  }
  return pi;
}

int longest_prefix(String s) {
  List<int> pi = prefix_function(s);
  int max_val = 0;
  int i = 0;
  while (i < pi.length) {
    if (pi[i] > max_val) {
    max_val = pi[i];
  }
    i = i + 1;
  }
  return max_val;
}

bool list_eq_int(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_prefix_function() {
  String s1 = "aabcdaabc";
  List<int> expected1 = [0, 1, 0, 0, 0, 1, 2, 3, 4];
  List<int> r1 = prefix_function(s1);
  if (!list_eq_int(r1, expected1)) {
    _error("prefix_function aabcdaabc failed");
  }
  String s2 = "asdasdad";
  List<int> expected2 = [0, 0, 0, 1, 2, 3, 4, 0];
  List<int> r2 = prefix_function(s2);
  if (!list_eq_int(r2, expected2)) {
    _error("prefix_function asdasdad failed");
  }
}

void test_longest_prefix() {
  if (longest_prefix("aabcdaabc") != 4) {
    _error("longest_prefix example1 failed");
  }
  if (longest_prefix("asdasdad") != 4) {
    _error("longest_prefix example2 failed");
  }
  if (longest_prefix("abcab") != 2) {
    _error("longest_prefix example3 failed");
  }
}

void _main() {
  test_prefix_function();
  test_longest_prefix();
  List<int> r1 = prefix_function("aabcdaabc");
  List<int> r2 = prefix_function("asdasdad");
  print(_str(r1));
  print(_str(r2));
  print(_str(longest_prefix("aabcdaabc")));
  print(_str(longest_prefix("abcab")));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
