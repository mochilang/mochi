// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
String LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int etaoin_index(String letter) {
  int i = 0;
  while (i < ETAOIN.length) {
    if (_substr(ETAOIN, i, i + 1) == letter) {
    return i;
  }
    i = i + 1;
  }
  return ETAOIN.length;
}

Map<String, int> get_letter_count(String message) {
  Map<String, int> letter_count = <String, int>{};
  int i = 0;
  while (i < LETTERS.length) {
    String c = _substr(LETTERS, i, i + 1);
    letter_count[c] = 0;
    i = i + 1;
  }
  String msg = message.toUpperCase();
  int j = 0;
  while (j < msg.length) {
    String ch = _substr(msg, j, j + 1);
    if (LETTERS.contains(ch)) {
    letter_count[ch] = (letter_count[ch] ?? 0) + 1;
  }
    j = j + 1;
  }
  return letter_count;
}

String get_frequency_order(String message) {
  Map<String, int> letter_to_freq = get_letter_count(message);
  int max_freq = 0;
  int i = 0;
  while (i < LETTERS.length) {
    String letter = _substr(LETTERS, i, i + 1);
    int f = letter_to_freq[letter]!;
    if (f > max_freq) {
    max_freq = f;
  }
    i = i + 1;
  }
  String result = "";
  int freq = max_freq;
  while (freq >= 0) {
    List<String> group = <String>[];
    int j = 0;
    while (j < LETTERS.length) {
    String letter = _substr(LETTERS, j, j + 1);
    if ((letter_to_freq[letter] ?? 0) == freq) {
    group = [...group, letter];
  }
    j = j + 1;
  }
    int g_len = group.length;
    int a = 0;
    while (a < g_len) {
    int b = 0;
    while (b < g_len - a - 1) {
    String g1 = group[b];
    String g2 = group[b + 1];
    int idx1 = etaoin_index(g1);
    int idx2 = etaoin_index(g2);
    if (idx1 < idx2) {
    String tmp = group[b];
    while (group.length <= b) { group.add(""); } group[b] = group[b + 1];
    while (group.length <= b + 1) { group.add(""); } group[b + 1] = tmp;
  }
    b = b + 1;
  }
    a = a + 1;
  }
    int g = 0;
    while (g < group.length) {
    result = result + group[g];
    g = g + 1;
  }
    freq = freq - 1;
  }
  return result;
}

int english_freq_match_score(String message) {
  String freq_order = get_frequency_order(message);
  String top = _substr(freq_order, 0, 6);
  String bottom = _substr(freq_order, freq_order.length - 6, freq_order.length);
  int score = 0;
  int i = 0;
  while (i < 6) {
    String c = _substr(ETAOIN, i, i + 1);
    if (top.contains(c)) {
    score = score + 1;
  }
    i = i + 1;
  }
  int j = ETAOIN.length - 6;
  while (j < ETAOIN.length) {
    String c = _substr(ETAOIN, j, j + 1);
    if (bottom.contains(c)) {
    score = score + 1;
  }
    j = j + 1;
  }
  return score;
}

void _main() {
  print(get_frequency_order("Hello World"));
  print(english_freq_match_score("Hello World"));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
