// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = index_of(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = index_of(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return -1;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  return "?";
}

String to_lower_char(String c) {
  int code = ord(c);
  if (code >= 65 && code <= 90) {
    return chr(code + 32);
  }
  return c;
}

bool is_alpha(String c) {
  int code = ord(c);
  return code >= 65 && code <= 90 || code >= 97 && code <= 122;
}

bool is_isogram(String s) {
  String seen = "";
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    if (!is_alpha(ch)) {
    throw Exception("String must only contain alphabetic characters.");
  }
    String lower = to_lower_char(ch);
    if (index_of(seen, lower) >= 0) {
    return false;
  }
    seen = seen + lower;
    i = i + 1;
  }
  return true;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(is_isogram("Uncopyrightable")));
  print(_str(is_isogram("allowance")));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
