// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = index_of(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = index_of(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return -1;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  return "?";
}

String to_lower_char(String c) {
  int code = ord(c);
  if (code >= 65 && code <= 90) {
    return chr(code + 32);
  }
  return c;
}

bool is_alpha(String c) {
  int code = ord(c);
  return code >= 65 && code <= 90 || code >= 97 && code <= 122;
}

bool is_isogram(String s) {
  String seen = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (!is_alpha(ch)) {
    _error("String must only contain alphabetic characters.");
  }
    String lower = to_lower_char(ch);
    if (index_of(seen, lower) >= 0) {
    return false;
  }
    seen = seen + lower;
    i = i + 1;
  }
  return true;
}

void main() {
  print(_str(is_isogram("Uncopyrightable")));
  print(_str(is_isogram("allowance")));
}
