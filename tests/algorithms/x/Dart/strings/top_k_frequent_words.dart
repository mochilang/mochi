// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class WordCount {
  String word;
  int count;
  WordCount({required this.word, required this.count});
}

Map<String, int> freq_map = <String, int>{};
void heapify(List<WordCount> arr, int index, int heap_size) {
  int largest = index;
  int left = 2 * index + 1;
  int right = 2 * index + 2;
  if (left < heap_size) {
    WordCount left_item = arr[left];
    WordCount largest_item = arr[largest];
    if (left_item.count > largest_item.count) {
    largest = left;
  };
  }
  if (right < heap_size) {
    WordCount right_item = arr[right];
    WordCount largest_item2 = arr[largest];
    if (right_item.count > largest_item2.count) {
    largest = right;
  };
  }
  if (largest != index) {
    WordCount temp = arr[largest];
    while (arr.length <= largest) { arr.add(null as dynamic); } arr[largest] = arr[index];
    while (arr.length <= index) { arr.add(null as dynamic); } arr[index] = temp;
    heapify(arr, largest, heap_size);
  }
}

void build_max_heap(List<WordCount> arr) {
  int i = arr.length ~/ 2 - 1;
  while (i >= 0) {
    heapify(arr, i, arr.length);
    i = i - 1;
  }
}

List<String> top_k_frequent_words(List<String> words, int k_value) {
  freq_map = <String, int>{};
  int i = 0;
  while (i < words.length) {
    String w = words[i];
    if (freq_map.containsKey(w)) {
    freq_map[w] = (freq_map[w] ?? 0) + 1;
  } else {
    freq_map[w] = 1;
  }
    i = i + 1;
  }
  List<WordCount> heap = <WordCount>[];
  for (String w in freq_map.keys) {
    heap = [...heap, WordCount(word: w, count: (freq_map[w] ?? 0))];
  }
  build_max_heap(heap);
  List<String> result = <String>[];
  int heap_size = heap.length;
  int limit = k_value;
  if (limit > heap_size) {
    limit = heap_size;
  }
  int j = 0;
  while (j < limit) {
    WordCount item = heap[0];
    result = [...result, item.word];
    while (heap.length <= 0) { heap.add(null as dynamic); } heap[0] = heap[heap_size - 1];
    while (heap.length <= heap_size - 1) { heap.add(null as dynamic); } heap[heap_size - 1] = item;
    heap_size = heap_size - 1;
    heapify(heap, 0, heap_size);
    j = j + 1;
  }
  return result;
}

void _main() {
  List<String> sample = ["a", "b", "c", "a", "c", "c"];
  print("[" + top_k_frequent_words(sample, 3).join(', ') + "]");
  print("[" + top_k_frequent_words(sample, 2).join(', ') + "]");
  print("[" + top_k_frequent_words(sample, 1).join(', ') + "]");
  print("[" + top_k_frequent_words(sample, 0).join(', ') + "]");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
