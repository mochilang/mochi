// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int seed = 1;
int NEG_ONE = -1;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

int randint(int a, int b) {
  int r = rand();
  return a + r % (b - a + 1);
}

double random() {
  return 1.0 * rand() / 2147483648.0;
}

List<List<int>> construct_highway(int number_of_cells, int frequency, int initial_speed, bool random_frequency, bool random_speed, int max_speed) {
  List<int> row = <int>[];
  int i = 0;
  while (i < number_of_cells) {
    row = [...row, -1];
    i = i + 1;
  }
  List<List<int>> highway = <List<int>>[];
  highway = ([...highway, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  i = 0;
  if (initial_speed < 0) {
    initial_speed = 0;
  }
  while (i < number_of_cells) {
    int speed = initial_speed;
    if (random_speed) {
    speed = randint(0, max_speed);
  }
    while (highway[0]!.length <= i) { highway[0]!.add(0); } highway[0]![i] = speed;
    int step = frequency;
    if (random_frequency) {
    step = randint(1, max_speed * 2);
  }
    i = i + step;
  }
  return highway;
}

int get_distance(List<int> highway_now, int car_index) {
  int distance = 0;
  int i = car_index + 1;
  while (i < highway_now.length) {
    if (highway_now[i] > NEG_ONE) {
    return distance;
  }
    distance = distance + 1;
    i = i + 1;
  }
  return distance + get_distance(highway_now, -1);
}

List<int> update(List<int> highway_now, double probability, int max_speed) {
  int number_of_cells = highway_now.length;
  List<int> next_highway = <int>[];
  int i = 0;
  while (i < number_of_cells) {
    next_highway = [...next_highway, -1];
    i = i + 1;
  }
  int car_index = 0;
  while (car_index < number_of_cells) {
    int speed = highway_now[car_index];
    if (speed > NEG_ONE) {
    int new_speed = speed + 1;
    if (new_speed > max_speed) {
    new_speed = max_speed;
  };
    int dn = get_distance(highway_now, car_index) - 1;
    if (new_speed > dn) {
    new_speed = dn;
  };
    if (random() < probability) {
    new_speed = new_speed - 1;
    if (new_speed < 0) {
    new_speed = 0;
  };
  };
    while (next_highway.length <= car_index) { next_highway.add(0); } next_highway[car_index] = new_speed;
  }
    car_index = car_index + 1;
  }
  return next_highway;
}

List<List<int>> simulate(List<List<int>> highway, int number_of_update, double probability, int max_speed) {
  int number_of_cells = highway[0].length;
  int i = 0;
  while (i < number_of_update) {
    List<int> next_speeds = update(highway[i], probability, max_speed);
    List<int> real_next = <int>[];
    int j = 0;
    while (j < number_of_cells) {
    real_next = [...real_next, -1];
    j = j + 1;
  }
    int k = 0;
    while (k < number_of_cells) {
    int speed = next_speeds[k];
    if (speed > NEG_ONE) {
    int index = (k + speed) % number_of_cells;
    while (real_next.length <= index) { real_next.add(0); } real_next[index] = speed;
  }
    k = k + 1;
  }
    highway = ([...highway, real_next] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return highway;
}

void _main() {
  List<List<int>> ex1 = simulate(construct_highway(6, 3, 0, false, false, 2), 2, 0.0, 2);
  print((ex1).toString());
  List<List<int>> ex2 = simulate(construct_highway(5, 2, -2, false, false, 2), 3, 0.0, 2);
  print((ex2).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
