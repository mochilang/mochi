// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> GLIDER = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]];
List<List<int>> BLINKER = [[0, 1, 0], [0, 1, 0], [0, 1, 0]];
List<List<int>> new_generation(List<List<int>> cells) {
  int rows = cells.length;
  int cols = cells[0].length;
  List<List<int>> next = <List<int>>[];
  int i = 0;
  while (i < rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j < cols) {
    int count = 0;
    if (i > 0 && j > 0) {
    count = count + cells[i - 1][j - 1];
  }
    if (i > 0) {
    count = count + cells[i - 1][j];
  }
    if (i > 0 && j < cols - 1) {
    count = count + cells[i - 1][j + 1];
  }
    if (j > 0) {
    count = count + cells[i][j - 1];
  }
    if (j < cols - 1) {
    count = count + cells[i][j + 1];
  }
    if (i < rows - 1 && j > 0) {
    count = count + cells[i + 1][j - 1];
  }
    if (i < rows - 1) {
    count = count + cells[i + 1][j];
  }
    if (i < rows - 1 && j < cols - 1) {
    count = count + cells[i + 1][j + 1];
  }
    bool alive = cells[i][j] == 1;
    if (alive && count >= 2 && count <= 3 || !alive && count == 3) {
    row = [...row, 1];
  } else {
    row = [...row, 0];
  }
    j = j + 1;
  }
    next = ([...next, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return next;
}

List<List<List<int>>> generate_generations(List<List<int>> cells, int frames) {
  List<List<List<int>>> result = <List<List<int>>>[];
  int i = 0;
  List<List<int>> current = cells;
  while (i < frames) {
    result = ([...result, current] as List).map((e) => ((e as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList() as List<List<int>>)).toList();
    current = new_generation(current);
    i = i + 1;
  }
  return result;
}

void _main() {
  List<List<List<int>>> frames = generate_generations(GLIDER, 4);
  int i = 0;
  while (i < frames.length) {
    print(frames[i]);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
