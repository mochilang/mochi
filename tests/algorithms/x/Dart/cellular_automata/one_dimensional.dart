// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> format_ruleset(int ruleset) {
  int rs = ruleset;
  List<int> bits_rev = <int>[];
  int i = 0;
  while (i < 8) {
    bits_rev = [...bits_rev, rs % 2];
    rs = rs ~/ 2;
    i = i + 1;
  }
  List<int> bits = <int>[];
  int j = bits_rev.length - 1;
  while (j >= 0) {
    bits = [...bits, bits_rev[j]];
    j = j - 1;
  }
  return bits;
}

List<int> new_generation(List<List<int>> cells, List<int> rules, int time) {
  int population = cells[0].length;
  List<int> next_generation = <int>[];
  int i = 0;
  while (i < population) {
    int left_neighbor = (i == 0 ? 0 : cells[time][i - 1]);
    int right_neighbor = (i == population - 1 ? 0 : cells[time][i + 1]);
    int center = cells[time][i];
    int idx = 7 - (left_neighbor * 4 + center * 2 + right_neighbor);
    next_generation = [...next_generation, rules[idx]];
    i = i + 1;
  }
  return next_generation;
}

String cells_to_string(List<int> row) {
  String result = "";
  int i = 0;
  while (i < row.length) {
    if (row[i] == 1) {
    result = result + "#";
  } else {
    result = result + ".";
  }
    i = i + 1;
  }
  return result;
}

List<int> initial = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
List<List<int>> cells = [initial];
List<int> rules = format_ruleset(30);
int time = 0;
int t = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (time < 16) {
    dynamic next = new_generation(cells, rules, time);
    cells = [...cells, next];
    time = time + 1;
  }
  while (t < cells.length) {
    print(cells_to_string(cells[t]));
    t = t + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
