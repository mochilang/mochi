// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<bool>> create_board(int width, int height) {
  List<List<bool>> board = <List<bool>>[];
  int i = 0;
  while (i < height) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j < width) {
    row = [...row, true];
    j = j + 1;
  }
    board = ([...board, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return board;
}

List<int> move_ant(List<List<bool>> board, int x, int y, int direction) {
  if (board[x][y]) {
    direction = (direction + 1) % 4;
  } else {
    direction = (direction + 3) % 4;
  }
  int old_x = x;
  int old_y = y;
  if (direction == 0) {
    x = x - 1;
  } else {
    if (direction == 1) {
    y = y + 1;
  } else {
    if (direction == 2) {
    x = x + 1;
  } else {
    y = y - 1;
  };
  };
  }
  while (board[old_x]!.length <= old_y) { board[old_x]!.add(false); } board[old_x]![old_y] = !board[old_x][old_y];
  return [x, y, direction];
}

List<List<bool>> langtons_ant(int width, int height, int steps) {
  List<List<bool>> board = create_board(width, height);
  int x = width ~/ 2;
  int y = height ~/ 2;
  int dir = 3;
  int s = 0;
  while (s < steps) {
    List<int> state = move_ant(board, x, y, dir);
    x = state[0];
    y = state[1];
    dir = state[2];
    s = s + 1;
  }
  return board;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
