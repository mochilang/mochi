// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int count_alive_neighbours(List<List<bool>> board, int row, int col) {
  int size = board.length;
  int alive = 0;
  int dr = -1;
  while (dr < 2) {
    int dc = -1;
    while (dc < 2) {
    int nr = row + dr;
    int nc = col + dc;
    if (!(dr == 0 && dc == 0) && nr >= 0 && nr < size && nc >= 0 && nc < size) {
    if (board[nr][nc]) {
    alive = alive + 1;
  };
  }
    dc = dc + 1;
  }
    dr = dr + 1;
  }
  return alive;
}

bool next_state(bool current, int alive) {
  bool state = current;
  if (current) {
    if (alive < 2) {
    state = false;
  } else {
    if (alive == 2 || alive == 3) {
    state = true;
  } else {
    state = false;
  };
  };
  } else {
    if (alive == 3) {
    state = true;
  };
  }
  return state;
}

List<List<bool>> step(List<List<bool>> board) {
  int size = board.length;
  List<List<bool>> new_board = <List<bool>>[];
  int r = 0;
  while (r < size) {
    List<bool> new_row = <bool>[];
    int c = 0;
    while (c < size) {
    int alive = count_alive_neighbours(board, r, c);
    bool cell = board[r][c];
    bool updated = next_state(cell, alive);
    new_row = [...new_row, updated];
    c = c + 1;
  }
    new_board = ([...new_board, new_row] as List).map((e) => List<bool>.from(e)).toList();
    r = r + 1;
  }
  return new_board;
}

void show(List<List<bool>> board) {
  int r = 0;
  while (r < board.length) {
    String line = "";
    int c = 0;
    while (c < board[r].length) {
    if (board[r][c]) {
    line = line + "#";
  } else {
    line = line + ".";
  }
    c = c + 1;
  }
    print(line);
    r = r + 1;
  }
}

List<List<bool>> glider = [[false, true, false, false, false], [false, false, true, false, false], [true, true, true, false, false], [false, false, false, false, false], [false, false, false, false, false]];
List<List<bool>> board = glider;
int i = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Initial");
  show(board);
  while (i < 4) {
    board = step(board);
    print("\nStep " + (i + 1).toString());
    show(board);
    i = i + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
