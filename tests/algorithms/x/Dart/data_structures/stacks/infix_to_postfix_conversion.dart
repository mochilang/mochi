// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

Map<String, int> PRECEDENCES = {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3};
Map<String, String> ASSOCIATIVITIES = {"+": "LR", "-": "LR", "*": "LR", "/": "LR", "^": "RL"};
int precedence(String ch) {
  if (PRECEDENCES.containsKey(ch)) {
    return (PRECEDENCES[ch])!;
  }
  return -1;
}

String associativity(String ch) {
  if (ASSOCIATIVITIES.containsKey(ch)) {
    return (ASSOCIATIVITIES[ch])!;
  }
  return "";
}

bool balanced_parentheses(String expr) {
  int count = 0;
  int i = 0;
  while (i < expr.length) {
    String ch = _substr(expr, i, i + 1);
    if (ch == "(") {
    count = count + 1;
  }
    if (ch == ")") {
    count = count - 1;
    if (count < 0) {
    return false;
  };
  }
    i = i + 1;
  }
  return count == 0;
}

bool is_letter(String ch) {
  return "a".compareTo(ch) <= 0 && ch.compareTo("z") <= 0 || "A".compareTo(ch) <= 0 && ch.compareTo("Z") <= 0;
}

bool is_digit(String ch) {
  return "0".compareTo(ch) <= 0 && ch.compareTo("9") <= 0;
}

bool is_alnum(String ch) {
  return is_letter(ch) || is_digit(ch);
}

String infix_to_postfix(String expression) {
  if (balanced_parentheses(expression) == false) {
    throw Exception("Mismatched parentheses");
  }
  List<String> stack = <String>[];
  List<String> postfix = <String>[];
  int i = 0;
  while (i < expression.length) {
    String ch = _substr(expression, i, i + 1);
    if (is_alnum(ch)) {
    postfix = [...postfix, ch];
  } else {
    if (ch == "(") {
    stack = [...stack, ch];
  } else {
    if (ch == ")") {
    while (stack.length > 0 && stack[stack.length - 1] != "(") {
    postfix = [...postfix, stack[stack.length - 1]];
    stack = List<String>.from(stack.sublist(0, stack.length - 1));
  };
    if (stack.length > 0) {
    stack = List<String>.from(stack.sublist(0, stack.length - 1));
  };
  } else {
    if (ch == " ") {
  } else {
    while (true) {
    if (stack.length == 0) {
    stack = [...stack, ch];
    break;
  }
    int cp = precedence(ch);
    int tp = precedence(stack[stack.length - 1]);
    if (cp > tp) {
    stack = [...stack, ch];
    break;
  }
    if (cp < tp) {
    postfix = [...postfix, stack[stack.length - 1]];
    stack = List<String>.from(stack.sublist(0, stack.length - 1));
    continue;
  }
    if (associativity(ch) == "RL") {
    stack = [...stack, ch];
    break;
  }
    postfix = [...postfix, stack[stack.length - 1]];
    stack = List<String>.from(stack.sublist(0, stack.length - 1));
  };
  };
  };
  };
  }
    i = i + 1;
  }
  while (stack.length > 0) {
    postfix = [...postfix, stack[stack.length - 1]];
    stack = List<String>.from(stack.sublist(0, stack.length - 1));
  }
  String res = "";
  int j = 0;
  while (j < postfix.length) {
    if (j > 0) {
    res = res + " ";
  }
    res = res + postfix[j];
    j = j + 1;
  }
  return res;
}

void _main() {
  String expression = "a+b*(c^d-e)^(f+g*h)-i";
  print(expression);
  print(infix_to_postfix(expression));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
