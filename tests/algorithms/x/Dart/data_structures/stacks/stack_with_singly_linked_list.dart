// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  String value;
  int next;
  Node({required this.value, required this.next});
}

class Stack {
  List<Node> nodes;
  int top;
  Stack({required this.nodes, required this.top});
}

class PopResult {
  Stack stack;
  String value;
  PopResult({required this.stack, required this.value});
}

Stack empty_stack() {
  return Stack(nodes: [], top: -1);
}

bool is_empty(Stack stack) {
  return stack.top == -1;
}

Stack push(Stack stack, String item) {
  Node new_node = Node(value: item, next: stack.top);
  List<Node> new_nodes = stack.nodes;
  new_nodes = [...new_nodes, new_node];
  int new_top = new_nodes.length - 1;
  return Stack(nodes: new_nodes, top: new_top);
}

PopResult pop(Stack stack) {
  if (stack.top == -1) {
    throw Exception("pop from empty stack");
  }
  Node node = stack.nodes[stack.top];
  int new_top = node.next;
  Stack new_stack = Stack(nodes: stack.nodes, top: new_top);
  return PopResult(stack: new_stack, value: node.value);
}

String peek(Stack stack) {
  if (stack.top == -1) {
    throw Exception("peek from empty stack");
  }
  Node node = stack.nodes[stack.top];
  return node.value;
}

Stack clear(Stack stack) {
  return Stack(nodes: [], top: -1);
}

void _main() {
  Stack stack = empty_stack();
  print(is_empty(stack));
  stack = push(stack, "5");
  stack = push(stack, "9");
  stack = push(stack, "python");
  print(is_empty(stack));
  PopResult res = pop(stack);
  stack = res.stack;
  print(res.value);
  stack = push(stack, "algorithms");
  res = pop(stack);
  stack = res.stack;
  print(res.value);
  res = pop(stack);
  stack = res.stack;
  print(res.value);
  res = pop(stack);
  stack = res.stack;
  print(res.value);
  print(is_empty(stack));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
