// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

Map<String, int> PRIORITY = {"^": 3, "*": 2, "/": 2, "%": 2, "+": 1, "-": 1};
String LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
String DIGITS = "0123456789";
bool is_alpha(String ch) {
  int i = 0;
  while (i < LETTERS.length) {
    if (LETTERS.substring(i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool is_digit(String ch) {
  int i = 0;
  while (i < DIGITS.length) {
    if (DIGITS.substring(i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String reverse_string(String s) {
  String out = "";
  int i = s.length - 1;
  while (i >= 0) {
    out = out + s.substring(i, i + 1);
    i = i - 1;
  }
  return out;
}

String infix_to_postfix(String infix) {
  List<String> stack = <String>[];
  List<String> post = <String>[];
  int i = 0;
  while (i < infix.length) {
    String x = infix.substring(i, i + 1);
    if (is_alpha(x) || is_digit(x)) {
    post = [...post, x];
  } else {
    if (x == "(") {
    stack = [...stack, x];
  } else {
    if (x == ")") {
    if (stack.length == 0) {
    _error("list index out of range");
  };
    while (stack[stack.length - 1] != "(") {
    post = [...post, stack[stack.length - 1]];
    stack = stack.sublist(0, stack.length - 1);
  };
    stack = stack.sublist(0, stack.length - 1);
  } else {
    if (stack.length == 0) {
    stack = [...stack, x];
  } else {
    while (stack.length > 0 && stack[stack.length - 1] != "(" && (PRIORITY[x] ?? 0) <= (PRIORITY[stack[stack.length - 1]] ?? 0)) {
    post = [...post, stack[stack.length - 1]];
    stack = stack.sublist(0, stack.length - 1);
  };
    stack = [...stack, x];
  };
  };
  };
  }
    i = i + 1;
  }
  while (stack.length > 0) {
    if (stack[stack.length - 1] == "(") {
    _error("invalid expression");
  }
    post = [...post, stack[stack.length - 1]];
    stack = stack.sublist(0, stack.length - 1);
  }
  String res = "";
  int j = 0;
  while (j < post.length) {
    res = res + post[j];
    j = j + 1;
  }
  return res;
}

String infix_to_prefix(String infix) {
  String reversed = "";
  int i = infix.length - 1;
  while (i >= 0) {
    String ch = infix.substring(i, i + 1);
    if (ch == "(") {
    reversed = reversed + ")";
  } else {
    if (ch == ")") {
    reversed = reversed + "(";
  } else {
    reversed = reversed + ch;
  };
  }
    i = i - 1;
  }
  String postfix = infix_to_postfix(reversed);
  String prefix = reverse_string(postfix);
  return prefix;
}

void main() {
}
