// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<double> slice_without_last(List<double> xs) {
  List<double> res = <double>[];
  int i = 0;
  while (i < xs.length - 1) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

double parse_float(String token) {
  double sign = 1.0;
  int idx = 0;
  if (token.length > 0) {
    String first = _substr(token, 0, 1);
    if (first == "-") {
    sign = -1.0;
    idx = 1;
  } else {
    if (first == "+") {
    idx = 1;
  };
  };
  }
  int int_part = 0;
  while (idx < token.length && _substr(token, idx, idx + 1) != ".") {
    int_part = int_part * 10 + int.parse(_substr(token, idx, idx + 1));
    idx = idx + 1;
  }
  double result = 1.0 * int_part;
  if (idx < token.length && _substr(token, idx, idx + 1) == ".") {
    idx = idx + 1;
    double place = 0.1;
    while (idx < token.length) {
    int digit = int.parse(_substr(token, idx, idx + 1));
    result = result + place * (1.0 * digit);
    place = place / 10.0;
    idx = idx + 1;
  };
  }
  return sign * result;
}

double pow_float(double base, double exp) {
  double result = 1.0;
  int i = 0;
  int e = exp as int;
  while (i < e) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double apply_op(double a, double b, String op) {
  if (op == "+") {
    return a + b;
  }
  if (op == "-") {
    return a - b;
  }
  if (op == "*") {
    return a * b;
  }
  if (op == "/") {
    return a / b;
  }
  if (op == "^") {
    return pow_float(a, b);
  }
  return 0.0;
}

double evaluate(List<String> tokens) {
  if (tokens.length == 0) {
    return 0.0;
  }
  List<double> stack = <double>[];
  for (String token in tokens) {
    if (token == "+" || token == "-" || token == "*" || token == "/" || token == "^") {
    if ((token == "+" || token == "-") && stack.length < 2) {
    double b = stack[stack.length - 1];
    stack = slice_without_last(stack);
    if (token == "-") {
    stack = [...stack, 0.0 - b];
  } else {
    stack = [...stack, b];
  };
  } else {
    double b = stack[stack.length - 1];
    stack = slice_without_last(stack);
    double a = stack[stack.length - 1];
    stack = slice_without_last(stack);
    double result = apply_op(a, b, token);
    stack = [...stack, result];
  };
  } else {
    stack = [...stack, parse_float(token)];
  }
  }
  if (stack.length != 1) {
    throw Exception("Invalid postfix expression");
  }
  return stack[0];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((evaluate(["2", "1", "+", "3", "*"])).toString());
  print((evaluate(["4", "13", "5", "/", "+"])).toString());
  print((evaluate(["5", "6", "9", "*", "+"])).toString());
  print((evaluate(["2", "-", "3", "+"])).toString());
  print((evaluate(<String>[])).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
