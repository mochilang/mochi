// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> lexical_order(int max_number) {
  List<int> result = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  List<int> stack = [1] as List<int>;
  while (stack.length > 0) {
    int idx = stack.length - 1;
    int _num = stack[idx];
    stack = stack.sublist(0, idx);
    if (_num > max_number) {
    continue;
  }
    result = [...result, _num];
    if (_num % 10 != 9) {
    stack = [...stack, _num + 1];
  }
    stack = [...stack, _num * 10];
  }
  return result;
}

String join_ints(List<int> xs) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + " ";
  }
    res = res + _str(xs[i]);
    i = i + 1;
  }
  return res;
}

void main() {
  print(join_ints(lexical_order(13)));
  print(_str(lexical_order(1)));
  print(join_ints(lexical_order(20)));
  print(join_ints(lexical_order(25)));
  print(_str(lexical_order(12)));
}
