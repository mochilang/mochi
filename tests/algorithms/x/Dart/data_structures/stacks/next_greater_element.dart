// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<double> arr = [-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0];
List<double> expected = [-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0];
List<double> next_greatest_element_slow(List<double> xs) {
  List<double> res = <double>[];
  int i = 0;
  while (i < xs.length) {
    double next = -1.0;
    int j = i + 1;
    while (j < xs.length) {
    if (xs[i] < xs[j]) {
    next = xs[j];
    break;
  }
    j = j + 1;
  }
    res = [...res, next];
    i = i + 1;
  }
  return res;
}

List<double> next_greatest_element_fast(List<double> xs) {
  List<double> res = <double>[];
  int i = 0;
  while (i < xs.length) {
    double next = -1.0;
    int j = i + 1;
    while (j < xs.length) {
    double inner = xs[j];
    if (xs[i] < inner) {
    next = inner;
    break;
  }
    j = j + 1;
  }
    res = [...res, next];
    i = i + 1;
  }
  return res;
}

List<double> set_at_float(List<double> xs, int idx, double value) {
  int i = 0;
  List<double> res = <double>[];
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<double> next_greatest_element(List<double> xs) {
  List<double> res = <double>[];
  int k = 0;
  while (k < xs.length) {
    res = List<double>.from([...res, -1.0]);
    k = k + 1;
  }
  List<int> stack = <int>[];
  int i = 0;
  while (i < xs.length) {
    while (stack.length > 0 && xs[i] > xs[stack[stack.length - 1]]) {
    int idx = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    res = set_at_float(res, idx, xs[i]);
  }
    stack = [...stack, i];
    i = i + 1;
  }
  return res;
}

void main() {
  print(_str(next_greatest_element_slow(arr)));
  print(_str(next_greatest_element_fast(arr)));
  print(_str(next_greatest_element(arr)));
}
