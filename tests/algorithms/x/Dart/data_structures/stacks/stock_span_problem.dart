// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> calculation_span(List<int> price) {
  int n = price.length;
  List<int> st = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  List<int> span = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  st = [...st, 0];
  span = [...span, 1];
  for (int i = 1; i < n; i++) {
    while (st.length > 0 && price[st[st.length - 1]] <= price[i]) {
    st = (st.sublist(0, st.length - 1) as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    int s = (st.length <= 0 ? i + 1 : i - st[st.length - 1]);
    span = [...span, s];
    st = [...st, i];
  }
  return span;
}

dynamic print_array(List<int> arr) {
  for (int i = 0; i < arr.length; i++) {
    print(arr[i]);
  }
}

List<int> price = [10, 4, 5, 90, 120, 80];
List<int> spans = calculation_span(price);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_array(spans);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
