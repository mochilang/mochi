// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> pop_last(List<String> xs) {
  List<String> res = <String>[];
  int i = 0;
  while (i < xs.length - 1) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

bool balanced_parentheses(String s) {
  List<String> stack = <String>[];
  Map<String, String> pairs = {"(": ")", "[": "]", "{": "}"};
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    if (pairs.containsKey(ch)) {
    stack = [...stack, ch];
  } else {
    if (ch == ")" || ch == "]" || ch == "}") {
    if (stack.length == 0) {
    return false;
  };
    String top = stack[stack.length - 1];
    if (pairs[top]! != ch) {
    return false;
  };
    stack = pop_last(stack);
  };
  }
    i = i + 1;
  }
  return stack.length == 0;
}

List<String> tests = ["([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""];
int idx = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (idx < tests.length) {
    print(balanced_parentheses(tests[idx]));
    idx = idx + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
