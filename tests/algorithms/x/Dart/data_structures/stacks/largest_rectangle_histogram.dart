// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int largest_rectangle_area(List<int> heights) {
  List<int> stack = <int>[];
  int max_area = 0;
  List<int> hs = heights;
  hs = [...hs, 0];
  int i = 0;
  while (i < hs.length) {
    while (stack.length > 0 && hs[i] < hs[stack[stack.length - 1]]) {
    int top = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    int height = hs[top];
    int width = i;
    if (stack.length > 0) {
    width = i - stack[stack.length - 1] - 1;
  }
    int area = height * width;
    if (area > max_area) {
    max_area = area;
  }
  }
    stack = [...stack, i];
    i = i + 1;
  }
  return max_area;
}

void main() {
  print(_str(largest_rectangle_area([2, 1, 5, 6, 2, 3])));
  print(_str(largest_rectangle_area([2, 4])));
  print(_str(largest_rectangle_area([6, 2, 5, 4, 5, 1, 6])));
  print(_str(largest_rectangle_area([1])));
}
