// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int largest_rectangle_area(List<int> heights) {
  List<int> stack = <int>[];
  int max_area = 0;
  List<int> hs = heights;
  hs = [...hs, 0];
  int i = 0;
  while (i < hs.length) {
    while (stack.length > 0 && hs[i] < hs[stack[stack.length - 1]]) {
    int top = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    int height = hs[top];
    int width = i;
    if (stack.length > 0) {
    width = i - stack[stack.length - 1] - 1;
  }
    int area = height * width;
    if (area > max_area) {
    max_area = area;
  }
  }
    stack = [...stack, i];
    i = i + 1;
  }
  return max_area;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((largest_rectangle_area([2, 1, 5, 6, 2, 3])).toString());
  print((largest_rectangle_area([2, 4])).toString());
  print((largest_rectangle_area([6, 2, 5, 4, 5, 1, 6])).toString());
  print((largest_rectangle_area([1])).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
