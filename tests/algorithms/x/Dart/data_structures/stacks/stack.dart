// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Stack {
  List<int> items;
  int limit;
  Stack({required this.items, required this.limit});
}

Stack make_stack(int limit) {
  return Stack(items: [], limit: limit);
}

bool is_empty(Stack s) {
  return s.items.length == 0;
}

int size(Stack s) {
  return s.items.length;
}

bool is_full(Stack s) {
  return s.items.length >= s.limit;
}

void push(Stack s, int item) {
  if (is_full(s)) {
    throw Exception("stack overflow");
  }
  s.items = [...s.items, item];
}

int pop(Stack s) {
  if (is_empty(s)) {
    throw Exception("stack underflow");
  }
  int n = s.items.length;
  int val = s.items[n - 1];
  s.items = s.items.sublist(0, n - 1);
  return val;
}

int peek(Stack s) {
  if (is_empty(s)) {
    throw Exception("peek from empty stack");
  }
  return s.items[s.items.length - 1];
}

bool contains(Stack s, int item) {
  int i = 0;
  while (i < s.items.length) {
    if (s.items[i] == item) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String stack_repr(Stack s) {
  return (s.items).toString();
}

void _main() {
  Stack s = make_stack(5);
  print((is_empty(s)).toString());
  push(s, 0);
  push(s, 1);
  push(s, 2);
  print((peek(s)).toString());
  print((size(s)).toString());
  print((is_full(s)).toString());
  push(s, 3);
  push(s, 4);
  print((is_full(s)).toString());
  print(stack_repr(s));
  print((pop(s)).toString());
  print((peek(s)).toString());
  print((s.contains(1)).toString());
  print((s.contains(9)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
