// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

class Stack {
  List<int> items;
  int limit;
  Stack({required this.items, required this.limit});
}

Stack make_stack(int limit) {
  return Stack(items: [], limit: limit);
}

bool is_empty(Stack s) {
  return s.items.length == 0;
}

int size(Stack s) {
  return s.items.length;
}

bool is_full(Stack s) {
  return s.items.length >= s.limit;
}

void push(Stack s, int item) {
  if (is_full(s)) {
    _error("stack overflow");
  }
  s.items = [...s.items, item];
}

int pop(Stack s) {
  if (is_empty(s)) {
    _error("stack underflow");
  }
  int n = s.items.length;
  int val = s.items[n - 1];
  s.items = s.items.sublist(0, n - 1);
  return val;
}

int peek(Stack s) {
  if (is_empty(s)) {
    _error("peek from empty stack");
  }
  return s.items[s.items.length - 1];
}

bool contains(Stack s, int item) {
  int i = 0;
  while (i < s.items.length) {
    if (s.items[i] == item) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String stack_repr(Stack s) {
  return _str(s.items);
}

void _main() {
  Stack s = make_stack(5);
  print(_str(is_empty(s)));
  push(s, 0);
  push(s, 1);
  push(s, 2);
  print(_str(peek(s)));
  print(_str(size(s)));
  print(_str(is_full(s)));
  push(s, 3);
  push(s, 4);
  print(_str(is_full(s)));
  print(stack_repr(s));
  print(_str(pop(s)));
  print(_str(peek(s)));
  print(_str(contains(s, 1)));
  print(_str(contains(s, 9)));
}

void _start() {
  _main();
}

void main() => _start();
