// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

class StackWithQueues {
  List<int> main_queue;
  List<int> temp_queue;
  StackWithQueues({required this.main_queue, required this.temp_queue});
}

StackWithQueues make_stack() {
  return StackWithQueues(main_queue: [], temp_queue: []);
}

void push(StackWithQueues s, int item) {
  s.temp_queue = [...s.temp_queue, item];
  while (s.main_queue.length > 0) {
    s.temp_queue = [...s.temp_queue, s.main_queue[0]];
    s.main_queue = s.main_queue.sublist(1, s.main_queue.length);
  }
  List<int> new_main = s.temp_queue;
  s.temp_queue = s.main_queue;
  s.main_queue = new_main;
}

int pop(StackWithQueues s) {
  if (s.main_queue.length == 0) {
    _error("pop from empty stack");
  }
  int item = s.main_queue[0];
  s.main_queue = s.main_queue.sublist(1, s.main_queue.length);
  return item;
}

int peek(StackWithQueues s) {
  if (s.main_queue.length == 0) {
    _error("peek from empty stack");
  }
  return s.main_queue[0];
}

bool is_empty(StackWithQueues s) {
  return s.main_queue.length == 0;
}

StackWithQueues stack = make_stack();
void main() {
  push(stack, 1);
  push(stack, 2);
  push(stack, 3);
  print(_str(peek(stack)));
  print(_str(pop(stack)));
  print(_str(peek(stack)));
  print(_str(pop(stack)));
  print(_str(pop(stack)));
  print(_str(is_empty(stack)));
}
