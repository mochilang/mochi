// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class StackWithQueues {
  List<int> main_queue;
  List<int> temp_queue;
  StackWithQueues({required this.main_queue, required this.temp_queue});
}

StackWithQueues make_stack() {
  return StackWithQueues(main_queue: [], temp_queue: []);
}

void push(StackWithQueues s, int item) {
  s.temp_queue = [...s.temp_queue, item];
  while (s.main_queue.length > 0) {
    s.temp_queue = [...s.temp_queue, s.main_queue[0]];
    s.main_queue = s.main_queue.sublist(1, s.main_queue.length);
  }
  List<int> new_main = s.temp_queue;
  s.temp_queue = s.main_queue;
  s.main_queue = new_main;
}

int pop(StackWithQueues s) {
  if (s.main_queue.length == 0) {
    throw Exception("pop from empty stack");
  }
  int item = s.main_queue[0];
  s.main_queue = s.main_queue.sublist(1, s.main_queue.length);
  return item;
}

int peek(StackWithQueues s) {
  if (s.main_queue.length == 0) {
    throw Exception("peek from empty stack");
  }
  return s.main_queue[0];
}

bool is_empty(StackWithQueues s) {
  return s.main_queue.length == 0;
}

StackWithQueues stack = make_stack();
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  push(stack, 1);
  push(stack, 2);
  push(stack, 3);
  print((peek(stack)).toString());
  print((pop(stack)).toString());
  print((peek(stack)).toString());
  print((pop(stack)).toString());
  print((pop(stack)).toString());
  print((is_empty(stack)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
