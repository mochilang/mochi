// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<String> split_custom(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

List<String> tokenize(String s) {
  List<String> parts = split_custom(s, " ");
  List<String> res = <String>[];
  int i = 0;
  while (i < parts.length) {
    String p = parts[i];
    if (p != "") {
    res = [...res, p];
  }
    i = i + 1;
  }
  return res;
}

bool is_digit(String ch) {
  return ch.compareTo("0") >= 0 && ch.compareTo("9") <= 0;
}

bool is_operand(String token) {
  if (token == "") {
    return false;
  }
  int i = 0;
  while (i < token.length) {
    String ch = _substr(token, i, i + 1);
    if (!is_digit(ch)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int to_int(String token) {
  int res = 0;
  int i = 0;
  while (i < token.length) {
    res = res * 10 + ((_substr(token, i, i + 1) as String).codeUnitAt(0));
    i = i + 1;
  }
  return res;
}

double apply_op(String op, double a, double b) {
  if (op == "+") {
    return a + b;
  }
  if (op == "-") {
    return a - b;
  }
  if (op == "*") {
    return a * b;
  }
  if (op == "/") {
    return a / b;
  }
  return 0.0;
}

double evaluate(String expression) {
  List<String> tokens = tokenize(expression);
  List<double> stack = <double>[];
  int i = tokens.length - 1;
  while (i >= 0) {
    String token = tokens[i];
    if (token != "") {
    if (is_operand(token)) {
    stack = [...stack, to_int(token).toDouble()];
  } else {
    double o1 = stack[stack.length - 1];
    double o2 = stack[stack.length - 2];
    stack = stack.sublist(0, stack.length - 2);
    double res = apply_op(token, o1, o2);
    stack = [...stack, res];
  };
  }
    i = i - 1;
  }
  return stack[0];
}

List<double> eval_rec(List<String> tokens, int pos) {
  String token = tokens[pos];
  int next = pos + 1;
  if (is_operand(token)) {
    return [to_int(token).toDouble(), next.toDouble()];
  }
  List<double> left = eval_rec(tokens, next);
  double a = left[0];
  int p1 = (left[1]).toInt();
  List<double> right = eval_rec(tokens, p1);
  double b = right[0];
  double p2 = right[1];
  return [apply_op(token, a, b), p2];
}

double evaluate_recursive(String expression) {
  List<String> tokens = tokenize(expression);
  List<double> res = eval_rec(tokens, 0);
  return res[0];
}

String test_expression = "+ 9 * 2 6";
String test_expression2 = "/ * 10 2 + 4 1 ";
String test_expression3 = "+ * 2 3 / 8 4";
void main() {
  print(_str(evaluate(test_expression)));
  print(_str(evaluate(test_expression2)));
  print(_str(evaluate_recursive(test_expression3)));
}
