// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_digit(String ch) {
  return ch == "0" || ch == "1" || ch == "2" || ch == "3" || ch == "4" || ch == "5" || ch == "6" || ch == "7" || ch == "8" || ch == "9";
}

List<int> slice_without_last_int(List<int> xs) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length - 1) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

List<String> slice_without_last_string(List<String> xs) {
  List<String> res = <String>[];
  int i = 0;
  while (i < xs.length - 1) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

int dijkstras_two_stack_algorithm(String equation) {
  List<int> operand_stack = <int>[];
  List<String> operator_stack = <String>[];
  int idx = 0;
  while (idx < equation.length) {
    String ch = _substr(equation, idx, idx + 1);
    if (is_digit(ch)) {
    operand_stack = [...operand_stack, int.parse(ch)];
  } else {
    if (ch == "+" || ch == "-" || ch == "*" || ch == "/") {
    operator_stack = [...operator_stack, ch];
  } else {
    if (ch == ")") {
    String opr = operator_stack[operator_stack.length - 1];
    operator_stack = slice_without_last_string(operator_stack);
    int num1 = operand_stack[operand_stack.length - 1];
    operand_stack = slice_without_last_int(operand_stack);
    int num2 = operand_stack[operand_stack.length - 1];
    operand_stack = slice_without_last_int(operand_stack);
    int total = (opr == "+" ? num2 + num1 : (opr == "-" ? num2 - num1 : (opr == "*" ? num2 * num1 : num2 ~/ num1)));
    operand_stack = [...operand_stack, total];
  };
  };
  }
    idx = idx + 1;
  }
  return operand_stack[operand_stack.length - 1];
}

String equation = "(5 + ((4 * 2) * (2 + 3)))";
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(equation + " = " + (dijkstras_two_stack_algorithm(equation)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
