// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class DS {
  List<int> parent;
  List<int> rank;
  DS({required this.parent, required this.rank});
}

class FindResult {
  DS ds;
  int root;
  FindResult({required this.ds, required this.root});
}

DS make_set(DS ds, int x) {
  List<int> p = ds.parent;
  List<int> r = ds.rank;
  while (p.length <= x) { p.add(0); } p[x] = x;
  while (r.length <= x) { r.add(0); } r[x] = 0;
  return DS(parent: p, rank: r);
}

FindResult find_set(DS ds, int x) {
  if (ds.parent[x] == x) {
    return FindResult(ds: ds, root: x);
  }
  FindResult res = find_set(ds, ds.parent[x]);
  List<int> p = res.ds.parent;
  while (p.length <= x) { p.add(0); } p[x] = res.root;
  return FindResult(ds: DS(parent: p, rank: res.ds.rank), root: res.root);
}

DS union_set(DS ds, int x, int y) {
  FindResult fx = find_set(ds, x);
  DS ds1 = fx.ds;
  int x_root = fx.root;
  FindResult fy = find_set(ds1, y);
  DS ds2 = fy.ds;
  int y_root = fy.root;
  if (x_root == y_root) {
    return ds2;
  }
  List<int> p = ds2.parent;
  List<int> r = ds2.rank;
  if (r[x_root] > r[y_root]) {
    while (p.length <= y_root) { p.add(0); } p[y_root] = x_root;
  } else {
    while (p.length <= x_root) { p.add(0); } p[x_root] = y_root;
    if (r[x_root] == r[y_root]) {
    while (r.length <= y_root) { r.add(0); } r[y_root] = r[y_root] + 1;
  };
  }
  return DS(parent: p, rank: r);
}

bool same_python_set(int a, int b) {
  if (a < 3 && b < 3) {
    return true;
  }
  if (a >= 3 && a < 6 && b >= 3 && b < 6) {
    return true;
  }
  return false;
}

DS ds = DS(parent: [], rank: []);
int i = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (i < 6) {
    ds.parent = [...ds.parent, 0];
    ds.rank = [...ds.rank, 0];
    ds = make_set(ds, i);
    i = i + 1;
  }
  ds = union_set(ds, 0, 1);
  ds = union_set(ds, 1, 2);
  ds = union_set(ds, 3, 4);
  ds = union_set(ds, 3, 5);
  i = 0;
  while (i < 6) {
    int j = 0;
    while (j < 6) {
    FindResult res_i = find_set(ds, i);
    ds = res_i.ds;
    int root_i = res_i.root;
    FindResult res_j = find_set(ds, j);
    ds = res_j.ds;
    int root_j = res_j.root;
    bool same = same_python_set(i, j);
    bool root_same = root_i == root_j;
    if (same) {
    if (!root_same) {
    _error("nodes should be in same set");
  };
  } else {
    if (root_same) {
    _error("nodes should be in different sets");
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  i = 0;
  while (i < 6) {
    FindResult res = find_set(ds, i);
    ds = res.ds;
    print(_str(res.root));
    i = i + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
