// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Deque {
  List<int> data;
  Deque({required this.data});
}

class PopResult {
  Deque deque;
  int value;
  PopResult({required this.deque, required this.value});
}

Deque empty_deque() {
  return Deque(data: []);
}

Deque push_back(Deque dq, int value) {
  return Deque(data: [...dq.data, value]);
}

Deque push_front(Deque dq, int value) {
  List<int> res = [value];
  int i = 0;
  while (i < dq.data.length) {
    res = [...res, dq.data[i]];
    i = i + 1;
  }
  return Deque(data: res);
}

Deque extend_back(Deque dq, List<int> values) {
  List<int> res = dq.data;
  int i = 0;
  while (i < values.length) {
    res = [...res, values[i]];
    i = i + 1;
  }
  return Deque(data: res);
}

Deque extend_front(Deque dq, List<int> values) {
  List<int> res = <int>[];
  int i = values.length - 1;
  while (i >= 0) {
    res = [...res, values[i]];
    i = i - 1;
  }
  int j = 0;
  while (j < dq.data.length) {
    res = [...res, dq.data[j]];
    j = j + 1;
  }
  return Deque(data: res);
}

PopResult pop_back(Deque dq) {
  if (dq.data.length == 0) {
    throw Exception("pop from empty deque");
  }
  List<int> res = <int>[];
  int i = 0;
  while (i < dq.data.length - 1) {
    res = [...res, dq.data[i]];
    i = i + 1;
  }
  return PopResult(deque: Deque(data: res), value: dq.data[dq.data.length - 1]);
}

PopResult pop_front(Deque dq) {
  if (dq.data.length == 0) {
    throw Exception("popleft from empty deque");
  }
  List<int> res = <int>[];
  int i = 1;
  while (i < dq.data.length) {
    res = [...res, dq.data[i]];
    i = i + 1;
  }
  return PopResult(deque: Deque(data: res), value: dq.data[0]);
}

bool is_empty(Deque dq) {
  return dq.data.length == 0;
}

int length(Deque dq) {
  return dq.data.length;
}

String to_string(Deque dq) {
  if (dq.data.length == 0) {
    return "[]";
  }
  String s = "[" + (dq.data[0]).toString();
  int i = 1;
  while (i < dq.data.length) {
    s = s + ", " + (dq.data[i]).toString();
    i = i + 1;
  }
  return s + "]";
}

void _main() {
  Deque dq = empty_deque();
  dq = push_back(dq, 2);
  dq = push_front(dq, 1);
  dq = extend_back(dq, [3, 4]);
  dq = extend_front(dq, [0]);
  print(to_string(dq));
  PopResult r = pop_back(dq);
  dq = r.deque;
  print(r.value);
  r = pop_front(dq);
  dq = r.deque;
  print(r.value);
  print(to_string(dq));
  print(is_empty(empty_deque()));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
