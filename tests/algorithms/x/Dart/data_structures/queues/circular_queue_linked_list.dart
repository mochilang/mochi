// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class CircularQueue {
  List<String> data;
  List<int> next;
  List<int> prev;
  int front;
  int rear;
  CircularQueue({required this.data, required this.next, required this.prev, required this.front, required this.rear});
}

class DequeueResult {
  CircularQueue queue;
  String value;
  DequeueResult({required this.queue, required this.value});
}

CircularQueue create_queue(int capacity) {
  List<String> data = <String>[];
  List<int> next = <int>[];
  List<int> prev = <int>[];
  int i = 0;
  while (i < capacity) {
    data = [...data, ""];
    next = [...next, (i + 1) % capacity];
    prev = [...prev, (i - 1 + capacity) % capacity];
    i = i + 1;
  }
  return CircularQueue(data: data, next: next, prev: prev, front: 0, rear: 0);
}

bool is_empty(CircularQueue q) {
  return q.front == q.rear && q.data[q.front] == "";
}

void check_can_perform(CircularQueue q) {
  if (is_empty(q)) {
    throw Exception("Empty Queue");
  }
}

void check_is_full(CircularQueue q) {
  if (q.next[q.rear] == q.front) {
    throw Exception("Full Queue");
  }
}

String peek(CircularQueue q) {
  check_can_perform(q);
  return q.data[q.front];
}

CircularQueue enqueue(CircularQueue q, String value) {
  check_is_full(q);
  if (!is_empty(q)) {
    q.rear = q.next[q.rear];
  }
  List<String> data = q.data;
  while (data.length <= q.rear) { data.add(""); } data[q.rear] = value;
  q.data = data;
  return q;
}

DequeueResult dequeue(CircularQueue q) {
  check_can_perform(q);
  List<String> data = q.data;
  String val = data[q.front];
  while (data.length <= q.front) { data.add(""); } data[q.front] = "";
  q.data = data;
  if (q.front != q.rear) {
    q.front = q.next[q.front];
  }
  return DequeueResult(queue: q, value: val);
}

void _main() {
  CircularQueue q = create_queue(3);
  print((is_empty(q)).toString());
  q = enqueue(q, "a");
  q = enqueue(q, "b");
  print(peek(q));
  DequeueResult res = dequeue(q);
  q = res.queue;
  print(res.value);
  res = dequeue(q);
  q = res.queue;
  print(res.value);
  print((is_empty(q)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
