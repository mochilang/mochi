// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Queue {
  List<int> entries;
  Queue({required this.entries});
}

class GetResult {
  Queue queue;
  int value;
  GetResult({required this.queue, required this.value});
}

Queue new_queue(List<int> items) {
  return Queue(entries: items);
}

int len_queue(Queue q) {
  return q.entries.length;
}

String str_queue(Queue q) {
  String s = "Queue((";
  int i = 0;
  while (i < q.entries.length) {
    s = s + (q.entries[i]).toString();
    if (i < q.entries.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "))";
  return s;
}

Queue put(Queue q, int item) {
  List<int> e = q.entries;
  e = [...e, item];
  return Queue(entries: e);
}

GetResult get(Queue q) {
  if (q.entries.length == 0) {
    throw Exception("Queue is empty");
  }
  int value = q.entries[0];
  List<int> new_entries = <int>[];
  int i = 1;
  while (i < q.entries.length) {
    new_entries = [...new_entries, q.entries[i]];
    i = i + 1;
  }
  return GetResult(queue: Queue(entries: new_entries), value: value);
}

Queue rotate(Queue q, int rotation) {
  List<int> e = q.entries;
  int r = 0;
  while (r < rotation) {
    if (e.length > 0) {
    int first = e[0];
    List<int> rest = <int>[];
    int i = 1;
    while (i < e.length) {
    rest = [...rest, e[i]];
    i = i + 1;
  };
    rest = [...rest, first];
    e = rest;
  }
    r = r + 1;
  }
  return Queue(entries: e);
}

int get_front(Queue q) {
  return q.entries[0];
}

Queue q = new_queue(<int>[]);
GetResult res = get(q);
int front = get_front(q);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(len_queue(q));
  q = put(q, 10);
  q = put(q, 20);
  q = put(q, 30);
  q = put(q, 40);
  print(str_queue(q));
  q = res.queue;
  print(res.value);
  print(str_queue(q));
  q = rotate(q, 2);
  print(str_queue(q));
  print(front);
  print(str_queue(q));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
