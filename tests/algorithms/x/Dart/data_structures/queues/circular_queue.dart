// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class CircularQueue {
  List<int> data;
  int front;
  int rear;
  int size;
  int capacity;
  CircularQueue({required this.data, required this.front, required this.rear, required this.size, required this.capacity});
}

class DequeueResult {
  CircularQueue queue;
  int value;
  DequeueResult({required this.queue, required this.value});
}

CircularQueue create_queue(int capacity) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < capacity) {
    arr = [...arr, 0];
    i = i + 1;
  }
  return CircularQueue(data: arr, front: 0, rear: 0, size: 0, capacity: capacity);
}

int length(CircularQueue q) {
  return q.size;
}

bool is_empty(CircularQueue q) {
  return q.size == 0;
}

int front(CircularQueue q) {
  if (is_empty(q)) {
    return 0;
  }
  return q.data[q.front];
}

CircularQueue enqueue(CircularQueue q, int value) {
  if (q.size >= q.capacity) {
    throw Exception("QUEUE IS FULL");
  }
  List<int> arr = q.data;
  while (arr.length <= q.rear) { arr.add(0); } arr[q.rear] = value;
  q.data = arr;
  q.rear = (q.rear + 1) % q.capacity;
  q.size = q.size + 1;
  return q;
}

DequeueResult dequeue(CircularQueue q) {
  if (q.size == 0) {
    throw Exception("UNDERFLOW");
  }
  int value = q.data[q.front];
  List<int> arr2 = q.data;
  while (arr2.length <= q.front) { arr2.add(0); } arr2[q.front] = 0;
  q.data = arr2;
  q.front = (q.front + 1) % q.capacity;
  q.size = q.size - 1;
  return DequeueResult(queue: q, value: value);
}

void _main() {
  CircularQueue q = create_queue(5);
  print(is_empty(q));
  q = enqueue(q, 10);
  print(is_empty(q));
  q = enqueue(q, 20);
  q = enqueue(q, 30);
  print(front(q));
  DequeueResult r = dequeue(q);
  q = r.queue;
  print(r.value);
  print(front(q));
  print(length(q));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
