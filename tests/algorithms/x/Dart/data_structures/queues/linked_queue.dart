// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  String data;
  int next;
  Node({required this.data, required this.next});
}

class LinkedQueue {
  List<Node> nodes;
  int front;
  int rear;
  LinkedQueue({required this.nodes, required this.front, required this.rear});
}

LinkedQueue new_queue() {
  return LinkedQueue(nodes: [], front: 0 - 1, rear: 0 - 1);
}

bool is_empty(LinkedQueue q) {
  return q.front == 0 - 1;
}

dynamic put(LinkedQueue q, String item) {
  Node node = Node(data: item, next: 0 - 1);
  q.nodes = [...q.nodes, node];
  int idx = q.nodes.length - 1;
  if (q.front == 0 - 1) {
    q.front = idx;
    q.rear = idx;
  } else {
    List<Node> nodes = q.nodes;
    nodes[q.rear]!.next = idx;
    q.nodes = nodes;
    q.rear = idx;
  }
}

String get(LinkedQueue q) {
  if (is_empty(q)) {
    throw Exception("dequeue from empty queue");
  }
  int idx = q.front;
  Node node = q.nodes[idx];
  q.front = node.next;
  if (q.front == 0 - 1) {
    q.rear = 0 - 1;
  }
  return node.data;
}

int length(LinkedQueue q) {
  int count = 0;
  int idx = q.front;
  while (idx != 0 - 1) {
    count = count + 1;
    idx = q.nodes[idx].next;
  }
  return count;
}

String to_string(LinkedQueue q) {
  String res = "";
  int idx = q.front;
  bool first = true;
  while (idx != 0 - 1) {
    Node node = q.nodes[idx];
    if (first) {
    res = node.data;
    first = false;
  } else {
    res = res + " <- " + node.data;
  }
    idx = node.next;
  }
  return res;
}

dynamic clear(LinkedQueue q) {
  q.nodes = List<Node>.from([]);
  q.front = 0 - 1;
  q.rear = 0 - 1;
}

LinkedQueue queue = new_queue();
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((is_empty(queue)).toString());
  put(queue, "5");
  put(queue, "9");
  put(queue, "python");
  print((is_empty(queue)).toString());
  print(get(queue));
  put(queue, "algorithms");
  print(get(queue));
  print(get(queue));
  print(get(queue));
  print((is_empty(queue)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
