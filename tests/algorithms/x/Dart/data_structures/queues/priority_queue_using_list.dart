// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class FixedPriorityQueue {
  List<List<int>> queues;
  FixedPriorityQueue({required this.queues});
}

class FPQDequeueResult {
  FixedPriorityQueue queue;
  int value;
  FPQDequeueResult({required this.queue, required this.value});
}

class ElementPriorityQueue {
  List<int> queue;
  ElementPriorityQueue({required this.queue});
}

class EPQDequeueResult {
  ElementPriorityQueue queue;
  int value;
  EPQDequeueResult({required this.queue, required this.value});
}

void panic(String msg) {
  print(msg);
}

FixedPriorityQueue fpq_new() {
  return FixedPriorityQueue(queues: [[], [], []]);
}

FixedPriorityQueue fpq_enqueue(FixedPriorityQueue fpq, int priority, int data) {
  if (priority < 0 || priority >= fpq.queues.length) {
    throw Exception("Valid priorities are 0, 1, and 2");
    return fpq;
  }
  if (fpq.queues[priority].length >= 100) {
    throw Exception("Maximum queue size is 100");
    return fpq;
  }
  List<List<int>> qs = fpq.queues;
  while (qs.length <= priority) { qs.add(<int>[]); } qs[priority] = [...qs[priority], data];
  fpq.queues = qs;
  return fpq;
}

FPQDequeueResult fpq_dequeue(FixedPriorityQueue fpq) {
  List<List<int>> qs = fpq.queues;
  int i = 0;
  while (i < qs.length) {
    List<int> q = qs[i];
    if (q.length > 0) {
    int val = q[0];
    List<int> new_q = <int>[];
    int j = 1;
    while (j < q.length) {
    new_q = [...new_q, q[j]];
    j = j + 1;
  };
    while (qs.length <= i) { qs.add(<int>[]); } qs[i] = new_q;
    fpq.queues = qs;
    return FPQDequeueResult(queue: fpq, value: val);
  }
    i = i + 1;
  }
  throw Exception("All queues are empty");
  return FPQDequeueResult(queue: fpq, value: 0);
}

String fpq_to_string(FixedPriorityQueue fpq) {
  List<String> lines = <String>[];
  int i = 0;
  while (i < fpq.queues.length) {
    String q_str = "[";
    List<int> q = fpq.queues[i];
    int j = 0;
    while (j < q.length) {
    if (j > 0) {
    q_str = q_str + ", ";
  }
    q_str = q_str + (q[j]).toString();
    j = j + 1;
  }
    q_str = q_str + "]";
    lines = [...lines, "Priority " + (i).toString() + ": " + q_str];
    i = i + 1;
  }
  String res = "";
  i = 0;
  while (i < lines.length) {
    if (i > 0) {
    res = res + "\n";
  }
    res = res + lines[i];
    i = i + 1;
  }
  return res;
}

ElementPriorityQueue epq_new() {
  return ElementPriorityQueue(queue: []);
}

ElementPriorityQueue epq_enqueue(ElementPriorityQueue epq, int data) {
  if (epq.queue.length >= 100) {
    throw Exception("Maximum queue size is 100");
    return epq;
  }
  epq.queue = [...epq.queue, data];
  return epq;
}

EPQDequeueResult epq_dequeue(ElementPriorityQueue epq) {
  if (epq.queue.length == 0) {
    throw Exception("The queue is empty");
    return EPQDequeueResult(queue: epq, value: 0);
  }
  int min_val = epq.queue[0];
  int idx = 0;
  int i = 1;
  while (i < epq.queue.length) {
    int v = epq.queue[i];
    if (v < min_val) {
    min_val = v;
    idx = i;
  }
    i = i + 1;
  }
  List<int> new_q = <int>[];
  i = 0;
  while (i < epq.queue.length) {
    if (i != idx) {
    new_q = [...new_q, epq.queue[i]];
  }
    i = i + 1;
  }
  epq.queue = new_q;
  return EPQDequeueResult(queue: epq, value: min_val);
}

String epq_to_string(ElementPriorityQueue epq) {
  return (epq.queue).toString();
}

void fixed_priority_queue() {
  FixedPriorityQueue fpq = fpq_new();
  fpq = fpq_enqueue(fpq, 0, 10);
  fpq = fpq_enqueue(fpq, 1, 70);
  fpq = fpq_enqueue(fpq, 0, 100);
  fpq = fpq_enqueue(fpq, 2, 1);
  fpq = fpq_enqueue(fpq, 2, 5);
  fpq = fpq_enqueue(fpq, 1, 7);
  fpq = fpq_enqueue(fpq, 2, 4);
  fpq = fpq_enqueue(fpq, 1, 64);
  fpq = fpq_enqueue(fpq, 0, 128);
  print(fpq_to_string(fpq));
  FPQDequeueResult res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  print(fpq_to_string(fpq));
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
  res = fpq_dequeue(fpq);
  fpq = res.queue;
  print(res.value);
}

void element_priority_queue() {
  ElementPriorityQueue epq = epq_new();
  epq = epq_enqueue(epq, 10);
  epq = epq_enqueue(epq, 70);
  epq = epq_enqueue(epq, 100);
  epq = epq_enqueue(epq, 1);
  epq = epq_enqueue(epq, 5);
  epq = epq_enqueue(epq, 7);
  epq = epq_enqueue(epq, 4);
  epq = epq_enqueue(epq, 64);
  epq = epq_enqueue(epq, 128);
  print(epq_to_string(epq));
  EPQDequeueResult res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  print(epq_to_string(epq));
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
  res = epq_dequeue(epq);
  epq = res.queue;
  print(res.value);
}

void _main() {
  fixed_priority_queue();
  element_priority_queue();
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
