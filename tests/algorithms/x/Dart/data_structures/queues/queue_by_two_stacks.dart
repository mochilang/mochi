// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Queue {
  List<int> stack1;
  List<int> stack2;
  Queue({required this.stack1, required this.stack2});
}

class GetResult {
  Queue queue;
  int value;
  GetResult({required this.queue, required this.value});
}

Queue new_queue(List<int> items) {
  return Queue(stack1: items, stack2: []);
}

int len_queue(Queue q) {
  return q.stack1.length + q.stack2.length;
}

String str_queue(Queue q) {
  List<int> items = <int>[];
  int i = q.stack2.length - 1;
  while (i >= 0) {
    items = [...items, q.stack2[i]];
    i = i - 1;
  }
  int j = 0;
  while (j < q.stack1.length) {
    items = [...items, q.stack1[j]];
    j = j + 1;
  }
  String s = "Queue((";
  int k = 0;
  while (k < items.length) {
    s = s + (items[k]).toString();
    if (k < items.length - 1) {
    s = s + ", ";
  }
    k = k + 1;
  }
  s = s + "))";
  return s;
}

Queue put(Queue q, int item) {
  List<int> s1 = q.stack1;
  s1 = [...s1, item];
  return Queue(stack1: s1, stack2: q.stack2);
}

GetResult get(Queue q) {
  List<int> s1 = q.stack1;
  List<int> s2 = q.stack2;
  if (s2.length == 0) {
    while (s1.length > 0) {
    int idx = s1.length - 1;
    int v = s1[idx];
    List<int> new_s1 = <int>[];
    int i = 0;
    while (i < idx) {
    new_s1 = [...new_s1, s1[i]];
    i = i + 1;
  }
    s1 = new_s1;
    s2 = [...s2, v];
  };
  }
  if (s2.length == 0) {
    throw Exception("Queue is empty");
  }
  int idx2 = s2.length - 1;
  int value = s2[idx2];
  List<int> new_s2 = <int>[];
  int j = 0;
  while (j < idx2) {
    new_s2 = [...new_s2, s2[j]];
    j = j + 1;
  }
  s2 = new_s2;
  return GetResult(queue: Queue(stack1: s1, stack2: s2), value: value);
}

Queue q = new_queue([10, 20, 30]);
GetResult r1 = get(q);
GetResult r2 = get(q);
GetResult r3 = get(q);
GetResult r4 = get(q);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  q = r1.queue;
  print(r1.value);
  q = put(q, 40);
  q = r2.queue;
  print(r2.value);
  q = r3.queue;
  print(r3.value);
  print(len_queue(q));
  q = r4.queue;
  print(r4.value);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
