// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Queue {
  List<int> stack;
  int length;
  Queue({required this.stack, required this.length});
}

class GetResult {
  Queue queue;
  int value;
  GetResult({required this.queue, required this.value});
}

class FrontResult {
  Queue queue;
  int value;
  FrontResult({required this.queue, required this.value});
}

Queue empty_queue() {
  return Queue(stack: [], length: 0);
}

Queue put(Queue q, int item) {
  List<int> s = [...q.stack, item];
  return Queue(stack: s, length: q.length + 1);
}

List<int> drop_first(List<int> xs) {
  List<int> res = <int>[];
  int i = 1;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

List<int> drop_last(List<int> xs) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length - 1) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

Queue rotate(Queue q, int rotation) {
  List<int> s = q.stack;
  int i = 0;
  while (i < rotation && s.length > 0) {
    int temp = s[0];
    s = drop_first(s);
    s = [...s, temp];
    i = i + 1;
  }
  return Queue(stack: s, length: q.length);
}

GetResult get(Queue q) {
  if (q.length == 0) {
    throw Exception("queue empty");
  }
  Queue q1 = rotate(q, 1);
  int v = q1.stack[q1.length - 1];
  List<int> s = drop_last(q1.stack);
  Queue q2 = Queue(stack: s, length: q1.length);
  q2 = rotate(q2, q2.length - 1);
  q2 = Queue(stack: q2.stack, length: q2.length - 1);
  return GetResult(queue: q2, value: v);
}

FrontResult front(Queue q) {
  GetResult r = get(q);
  Queue q2 = put(r.queue, r.value);
  q2 = rotate(q2, q2.length - 1);
  return FrontResult(queue: q2, value: r.value);
}

int size(Queue q) {
  return q.length;
}

String to_string(Queue q) {
  String s = "<";
  if (q.length > 0) {
    s = s + (q.stack[0]).toString();
    int i = 1;
    while (i < q.length) {
    s = s + ", " + (q.stack[i]).toString();
    i = i + 1;
  };
  }
  s = s + ">";
  return s;
}

void _main() {
  Queue q = empty_queue();
  q = put(q, 1);
  q = put(q, 2);
  q = put(q, 3);
  print(to_string(q));
  GetResult g = get(q);
  q = g.queue;
  print(g.value);
  print(to_string(q));
  FrontResult f = front(q);
  q = f.queue;
  print(f.value);
  print(to_string(q));
  print(size(q));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
