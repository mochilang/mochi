// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Bucket {
  int state;
  int key;
  int val;
  Bucket({required this.state, required this.key, required this.val});
}

class HashMap {
  List<Bucket> buckets;
  int len;
  int cap_num;
  int cap_den;
  int initial_size;
  HashMap({required this.buckets, required this.len, required this.cap_num, required this.cap_den, required this.initial_size});
}

List<Bucket> make_buckets(int n) {
  List<Bucket> buckets = <Bucket>[];
  int i = 0;
  while (i < n) {
    buckets = [...buckets, Bucket(state: 0, key: 0, val: 0)];
    i = i + 1;
  }
  return buckets;
}

HashMap hashmap_new(int initial_size) {
  return HashMap(buckets: make_buckets(initial_size), len: 0, cap_num: 3, cap_den: 4, initial_size: initial_size);
}

int bucket_index(HashMap hm, int key) {
  int ind = key % hm.buckets.length;
  if (ind < 0) {
    ind = ind + hm.buckets.length;
  }
  return ind;
}

int next_index(HashMap hm, int ind) {
  return (ind + 1) % hm.buckets.length;
}

bool try_set(HashMap hm, int ind, int key, int val) {
  List<Bucket> buckets = hm.buckets;
  Bucket b = buckets[ind];
  if (b.state == 0 || b.state == 2) {
    while (buckets.length <= ind) { buckets.add(null); } buckets[ind] = Bucket(state: 1, key: key, val: val);
    hm.buckets = buckets;
    hm.len = hm.len + 1;
    return true;
  }
  if (b.key == key) {
    while (buckets.length <= ind) { buckets.add(null); } buckets[ind] = Bucket(state: 1, key: key, val: val);
    hm.buckets = buckets;
    return true;
  }
  return false;
}

bool is_full(HashMap hm) {
  int limit = hm.buckets.length * hm.cap_num ~/ hm.cap_den;
  return hm.len >= limit;
}

bool is_sparse(HashMap hm) {
  if (hm.buckets.length <= hm.initial_size) {
    return false;
  }
  int limit = hm.buckets.length * hm.cap_num ~/ (2 * hm.cap_den);
  return hm.len < limit;
}

void resize(HashMap hm, int new_size) {
  List<Bucket> old = hm.buckets;
  hm.buckets = make_buckets(new_size);
  hm.len = 0;
  int i = 0;
  while (i < old.length) {
    Bucket it = old[i];
    if (it.state == 1) {
    add_item(hm, it.key, it.val);
  }
    i = i + 1;
  }
}

void size_up(HashMap hm) {
  resize(hm, hm.buckets.length * 2);
}

void size_down(HashMap hm) {
  resize(hm, hm.buckets.length ~/ 2);
}

void add_item(HashMap hm, int key, int val) {
  int ind = bucket_index(hm, key);
  int i = 0;
  while (i < hm.buckets.length) {
    if (try_set(hm, ind, key, val)) {
    break;
  }
    ind = next_index(hm, ind);
    i = i + 1;
  }
}

void hashmap_set(HashMap hm, int key, int val) {
  if (is_full(hm)) {
    size_up(hm);
  }
  add_item(hm, key, val);
}

int hashmap_get(HashMap hm, int key) {
  List<Bucket> buckets = hm.buckets;
  int ind = bucket_index(hm, key);
  int i = 0;
  while (i < buckets.length) {
    Bucket it = buckets[ind];
    if (it.state == 0) {
    break;
  }
    if (it.state == 1 && it.key == key) {
    return it.val;
  }
    ind = next_index(hm, ind);
    i = i + 1;
  }
  return 0;
}

void hashmap_del(HashMap hm, int key) {
  List<Bucket> buckets = hm.buckets;
  int ind = bucket_index(hm, key);
  int i = 0;
  while (i < buckets.length) {
    Bucket it = buckets[ind];
    if (it.state == 0) {
    print("KeyError: " + (key).toString());
    return;
  }
    if (it.state == 1 && it.key == key) {
    while (buckets.length <= ind) { buckets.add(null); } buckets[ind] = Bucket(state: 2, key: 0, val: 0);
    hm.buckets = buckets;
    hm.len = hm.len - 1;
    break;
  }
    ind = next_index(hm, ind);
    i = i + 1;
  }
  if (is_sparse(hm)) {
    size_down(hm);
  }
}

int hashmap_len(HashMap hm) {
  return hm.len;
}

String hashmap_repr(HashMap hm) {
  String out = "HashMap(";
  bool first = true;
  int i = 0;
  while (i < hm.buckets.length) {
    Bucket b = hm.buckets[i];
    if (b.state == 1) {
    if (!first) {
    out = out + ", ";
  } else {
    first = false;
  };
    out = out + (b.key).toString() + ": " + (b.val).toString();
  }
    i = i + 1;
  }
  out = out + ")";
  return out;
}

HashMap hm = hashmap_new(5);
void main() {
  hashmap_set(hm, 1, 10);
  hashmap_set(hm, 2, 20);
  hashmap_set(hm, 3, 30);
  print(hashmap_repr(hm));
  print((hashmap_get(hm, 2)).toString());
  hashmap_del(hm, 1);
  print(hashmap_repr(hm));
  print((hashmap_len(hm)).toString());
}
