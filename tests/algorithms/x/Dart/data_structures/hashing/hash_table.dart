// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class HashTable {
  int size_table;
  List<int> values;
  List<bool> filled;
  int charge_factor;
  double lim_charge;
  HashTable({required this.size_table, required this.values, required this.filled, required this.charge_factor, required this.lim_charge});
}

List<int> repeat_int(int n, int val) {
  List<int> res = <int>[];
  int i = 0;
  while (i < n) {
    res = [...res, val];
    i = i + 1;
  }
  return res;
}

List<bool> repeat_bool(int n, bool val) {
  List<bool> res = <bool>[];
  int i = 0;
  while (i < n) {
    res = [...res, val];
    i = i + 1;
  }
  return res;
}

List<int> set_int(List<int> xs, int idx, int value) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<bool> set_bool(List<bool> xs, int idx, bool value) {
  List<bool> res = <bool>[];
  int i = 0;
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

HashTable create_table(int size_table, int charge_factor, double lim_charge) {
  return HashTable(size_table: size_table, values: repeat_int(size_table, 0), filled: repeat_bool(size_table, false), charge_factor: charge_factor, lim_charge: lim_charge);
}

int hash_function(HashTable ht, int key) {
  int k = key % ht.size_table;
  if (k < 0) {
    k = k + ht.size_table;
  }
  return k;
}

bool is_prime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  int i = 3;
  while (i * i <= n) {
    if (n % i == 0) {
    return false;
  }
    i = i + 2;
  }
  return true;
}

int next_prime(int value, int factor) {
  int candidate = value * factor + 1;
  while (!is_prime(candidate)) {
    candidate = candidate + 1;
  }
  return candidate;
}

HashTable set_value(HashTable ht, int key, int data) {
  List<int> new_values = set_int(ht.values, key, data);
  List<bool> new_filled = set_bool(ht.filled, key, true);
  return HashTable(size_table: ht.size_table, values: new_values, filled: new_filled, charge_factor: ht.charge_factor, lim_charge: ht.lim_charge);
}

int collision_resolution(HashTable ht, int key) {
  int new_key = hash_function(ht, key + 1);
  int steps = 0;
  while (ht.filled[new_key]) {
    new_key = hash_function(ht, new_key + 1);
    steps = steps + 1;
    if (steps >= ht.size_table) {
    return -1;
  }
  }
  return new_key;
}

HashTable rehashing(HashTable ht) {
  List<int> survivors = <int>[];
  int i = 0;
  while (i < ht.values.length) {
    if (ht.filled[i]) {
    survivors = [...survivors, ht.values[i]];
  }
    i = i + 1;
  }
  int new_size = next_prime(ht.size_table, 2);
  HashTable new_ht = create_table(new_size, ht.charge_factor, ht.lim_charge);
  i = 0;
  while (i < survivors.length) {
    new_ht = insert_data(new_ht, survivors[i]);
    i = i + 1;
  }
  return new_ht;
}

HashTable insert_data(HashTable ht, int data) {
  int key = hash_function(ht, data);
  if (!ht.filled[key]) {
    return set_value(ht, key, data);
  }
  if (ht.values[key] == data) {
    return ht;
  }
  int new_key = collision_resolution(ht, key);
  if (new_key >= 0) {
    return set_value(ht, new_key, data);
  }
  HashTable resized = rehashing(ht);
  return insert_data(resized, data);
}

List<List<int>> keys(HashTable ht) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < ht.values.length) {
    if (ht.filled[i]) {
    res = ([...res, [i, ht.values[i]]] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    i = i + 1;
  }
  return res;
}

void _main() {
  HashTable ht = create_table(3, 1, 0.75);
  ht = insert_data(ht, 17);
  ht = insert_data(ht, 18);
  ht = insert_data(ht, 99);
  print("[" + keys(ht).join(', ') + "]");
}

void _start() {
  _main();
}

void main() => _start();
