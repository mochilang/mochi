// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class HashTable {
  int size_table;
  List<int> values;
  double lim_charge;
  HashTable({required this.size_table, required this.values, required this.lim_charge});
}

HashTable create_hash_table(int size) {
  List<int> vals = <int>[];
  int i = 0;
  while (i < size) {
    vals = [...vals, null];
    i = i + 1;
  }
  return HashTable(size_table: size, values: vals, lim_charge: 0.75);
}

int hash_function(HashTable table, int key) {
  return key % table.size_table;
}

double balanced_factor(HashTable table) {
  int count = 0;
  int i = 0;
  while (i < table.values.length) {
    if (table.values[i] != null) {
    count = count + 1;
  }
    i = i + 1;
  }
  return (count as double) / (table.size_table as double);
}

int collision_resolution(HashTable table, int key) {
  int i = 1;
  int new_key = hash_function(table, key + i * i);
  while (table.values[new_key] != null && table.values[new_key] != key) {
    i = i + 1;
    if (balanced_factor(table) >= table.lim_charge) {
    return table.size_table;
  }
    new_key = hash_function(table, key + i * i);
  }
  return new_key;
}

dynamic insert_data(HashTable table, int data) {
  int key = hash_function(table, data);
  List<int> vals = table.values;
  if (vals[key] == null) {
    while (vals.length <= key) { vals.add(0); } vals[key] = data;
  } else {
    if (vals[key] == data) {
    table.values = vals;
    return;
  } else {
    int new_key = collision_resolution(table, key);
    if (new_key < vals.length && vals[new_key] == null) {
    while (vals.length <= new_key) { vals.add(0); } vals[new_key] = data;
  };
  };
  }
  table.values = vals;
}

String int_to_string(int n) {
  if (n == 0) {
    return "0";
  }
  int _num = n;
  bool neg = false;
  if (_num < 0) {
    neg = true;
    _num = -_num;
  }
  String res = "";
  while (_num > 0) {
    int digit = _num % 10;
    String ch = _substr("0123456789", digit, digit + 1);
    res = ch + res;
    _num = _num ~/ 10;
  }
  if (neg) {
    res = "-" + res;
  }
  return res;
}

String keys_to_string(HashTable table) {
  String result = "{";
  bool first = true;
  int i = 0;
  while (i < table.values.length) {
    int v = table.values[i];
    if (v != null) {
    if (!first) {
    result = result + ", ";
  };
    result = result + int_to_string(i) + ": " + int_to_string(v);
    first = false;
  }
    i = i + 1;
  }
  result = result + "}";
  return result;
}

HashTable qp = create_hash_table(8);
void main() {
  insert_data(qp, 0);
  insert_data(qp, 999);
  insert_data(qp, 111);
  print(keys_to_string(qp));
}
