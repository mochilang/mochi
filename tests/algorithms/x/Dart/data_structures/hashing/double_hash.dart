// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_prime(int n) {
  if (n < 2) {
    return false;
  }
  int i = 2;
  while (i * i <= n) {
    if (n % i == 0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int prev_prime(int n) {
  int p = n - 1;
  while (p >= 2) {
    if (is_prime(p)) {
    return p;
  }
    p = p - 1;
  }
  return 1;
}

List<int> create_table(int size) {
  List<int> vals = <int>[];
  int i = 0;
  while (i < size) {
    vals = [...vals, -1];
    i = i + 1;
  }
  return vals;
}

int hash1(int size, int key) {
  return key % size;
}

int hash2(int prime, int key) {
  return prime - key % prime;
}

List<int> insert_double_hash(List<int> values, int size, int prime, int value) {
  List<int> vals = values;
  int idx = hash1(size, value);
  int step = hash2(prime, value);
  int count = 0;
  while (vals[idx] != -1 && count < size) {
    idx = (idx + step) % size;
    count = count + 1;
  }
  if (vals[idx] == -1) {
    while (vals.length <= idx) { vals.add(0); } vals[idx] = value;
  }
  return vals;
}

Map<int, int> table_keys(List<int> values) {
  Map<int, int> res = <int, int>{};
  int i = 0;
  while (i < values.length) {
    if (values[i] != -1) {
    res[i] = values[i];
  }
    i = i + 1;
  }
  return res;
}

void run_example(int size, List<int> data) {
  int prime = prev_prime(size);
  List<int> table = create_table(size);
  int i = 0;
  while (i < data.length) {
    table = insert_double_hash(table, size, prime, data[i]);
    i = i + 1;
  }
  print((table_keys(table)).toString());
}

void main() {
  run_example(3, [10, 20, 30]);
  run_example(4, [10, 20, 30]);
}
