// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Bloom {
  int size;
  List<int> bits;
  Bloom({required this.size, required this.bits});
}

String ascii = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int ord(String ch) {
  int i = 0;
  while (i < ascii.length) {
    if (_substr(ascii, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

Bloom new_bloom(int size) {
  List<int> bits = <int>[];
  int i = 0;
  while (i < size) {
    bits = [...bits, 0];
    i = i + 1;
  }
  return Bloom(size: size, bits: bits);
}

int hash1(String value, int size) {
  int h = 0;
  int i = 0;
  while (i < value.length) {
    h = (h * 31 + ord(_substr(value, i, i + 1))) % size;
    i = i + 1;
  }
  return h;
}

int hash2(String value, int size) {
  int h = 0;
  int i = 0;
  while (i < value.length) {
    h = (h * 131 + ord(_substr(value, i, i + 1))) % size;
    i = i + 1;
  }
  return h;
}

List<int> hash_positions(String value, int size) {
  int h1 = hash1(value, size);
  int h2 = hash2(value, size);
  List<int> res = <int>[];
  res = [...res, h1];
  res = [...res, h2];
  return res;
}

Bloom bloom_add(Bloom b, String value) {
  List<int> pos = hash_positions(value, b.size);
  List<int> bits = b.bits;
  int i = 0;
  while (i < pos.length) {
    int idx = b.size - 1 - pos[i];
    while (bits.length <= idx) { bits.add(0); } bits[idx] = 1;
    i = i + 1;
  }
  return Bloom(size: b.size, bits: bits);
}

bool bloom_exists(Bloom b, String value) {
  List<int> pos = hash_positions(value, b.size);
  int i = 0;
  while (i < pos.length) {
    int idx = b.size - 1 - pos[i];
    if (b.bits[idx] != 1) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

String bitstring(Bloom b) {
  String res = "";
  int i = 0;
  while (i < b.size) {
    res = res + (b.bits[i]).toString();
    i = i + 1;
  }
  return res;
}

String format_hash(Bloom b, String value) {
  List<int> pos = hash_positions(value, b.size);
  List<int> bits = <int>[];
  int i = 0;
  while (i < b.size) {
    bits = [...bits, 0];
    i = i + 1;
  }
  i = 0;
  while (i < pos.length) {
    int idx = b.size - 1 - pos[i];
    while (bits.length <= idx) { bits.add(0); } bits[idx] = 1;
    i = i + 1;
  }
  String res = "";
  i = 0;
  while (i < b.size) {
    res = res + (bits[i]).toString();
    i = i + 1;
  }
  return res;
}

double estimated_error_rate(Bloom b) {
  int ones = 0;
  int i = 0;
  while (i < b.size) {
    if (b.bits[i] == 1) {
    ones = ones + 1;
  }
    i = i + 1;
  }
  double frac = (ones as double) / (b.size as double);
  return frac * frac;
}

bool any_in(Bloom b, List<String> items) {
  int i = 0;
  while (i < items.length) {
    if (bloom_exists(b, items[i])) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

void _main() {
  Bloom bloom = new_bloom(8);
  print(bitstring(bloom));
  print(bloom_exists(bloom, "Titanic"));
  bloom = bloom_add(bloom, "Titanic");
  print(bitstring(bloom));
  print(bloom_exists(bloom, "Titanic"));
  bloom = bloom_add(bloom, "Avatar");
  print(bloom_exists(bloom, "Avatar"));
  print(format_hash(bloom, "Avatar"));
  print(bitstring(bloom));
  List<String> not_present = ["The Godfather", "Interstellar", "Parasite", "Pulp Fiction"];
  int i = 0;
  while (i < not_present.length) {
    String film = not_present[i];
    print(film + ":" + format_hash(bloom, film));
    i = i + 1;
  }
  print(any_in(bloom, not_present));
  print(bloom_exists(bloom, "Ratatouille"));
  print(format_hash(bloom, "Ratatouille"));
  print((estimated_error_rate(bloom)).toString());
  bloom = bloom_add(bloom, "The Godfather");
  print((estimated_error_rate(bloom)).toString());
  print(bitstring(bloom));
}

void _start() {
  _main();
}

void main() => _start();
