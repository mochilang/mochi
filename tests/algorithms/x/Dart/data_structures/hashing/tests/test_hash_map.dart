// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Entry {
  String key;
  String value;
  Entry({required this.key, required this.value});
}

class HashMap {
  List<Entry> entries;
  HashMap({required this.entries});
}

class GetResult {
  bool found;
  String value;
  GetResult({required this.found, required this.value});
}

class DelResult {
  HashMap map;
  bool ok;
  DelResult({required this.map, required this.ok});
}

HashMap make_hash_map() {
  return HashMap(entries: List<Entry>.from([]));
}

int hm_len(HashMap m) {
  return m.entries.length;
}

HashMap hm_set(HashMap m, String key, String value) {
  List<Entry> entries = m.entries;
  bool updated = false;
  List<Entry> new_entries = List<Entry>.from([]);
  int i = 0;
  while (i < entries.length) {
    Entry e = entries[i];
    if (e.key == key) {
    new_entries = [...new_entries, Entry(key: key, value: value)];
    updated = true;
  } else {
    new_entries = [...new_entries, e];
  }
    i = i + 1;
  }
  if (!updated) {
    new_entries = [...new_entries, Entry(key: key, value: value)];
  }
  return HashMap(entries: new_entries);
}

GetResult hm_get(HashMap m, String key) {
  int i = 0;
  while (i < m.entries.length) {
    Entry e = m.entries[i];
    if (e.key == key) {
    return GetResult(found: true, value: e.value);
  }
    i = i + 1;
  }
  return GetResult(found: false, value: "");
}

DelResult hm_del(HashMap m, String key) {
  List<Entry> entries = m.entries;
  List<Entry> new_entries = List<Entry>.from([]);
  bool removed = false;
  int i = 0;
  while (i < entries.length) {
    Entry e = entries[i];
    if (e.key == key) {
    removed = true;
  } else {
    new_entries = [...new_entries, e];
  }
    i = i + 1;
  }
  if (removed) {
    return DelResult(map: HashMap(entries: new_entries), ok: true);
  }
  return DelResult(map: m, ok: false);
}

bool test_add_items() {
  HashMap h = make_hash_map();
  h = hm_set(h, "key_a", "val_a");
  h = hm_set(h, "key_b", "val_b");
  GetResult a = hm_get(h, "key_a");
  GetResult b = hm_get(h, "key_b");
  return hm_len(h) == 2 && a.found && b.found && a.value == "val_a" && b.value == "val_b";
}

bool test_overwrite_items() {
  HashMap h = make_hash_map();
  h = hm_set(h, "key_a", "val_a");
  h = hm_set(h, "key_a", "val_b");
  GetResult a = hm_get(h, "key_a");
  return hm_len(h) == 1 && a.found && a.value == "val_b";
}

bool test_delete_items() {
  HashMap h = make_hash_map();
  h = hm_set(h, "key_a", "val_a");
  h = hm_set(h, "key_b", "val_b");
  DelResult d1 = hm_del(h, "key_a");
  h = d1.map;
  DelResult d2 = hm_del(h, "key_b");
  h = d2.map;
  h = hm_set(h, "key_a", "val_a");
  DelResult d3 = hm_del(h, "key_a");
  h = d3.map;
  return hm_len(h) == 0;
}

bool test_access_absent_items() {
  HashMap h = make_hash_map();
  GetResult g1 = hm_get(h, "key_a");
  DelResult d1 = hm_del(h, "key_a");
  h = d1.map;
  h = hm_set(h, "key_a", "val_a");
  DelResult d2 = hm_del(h, "key_a");
  h = d2.map;
  DelResult d3 = hm_del(h, "key_a");
  h = d3.map;
  GetResult g2 = hm_get(h, "key_a");
  return g1.found == false && d1.ok == false && d2.ok && d3.ok == false && g2.found == false && hm_len(h) == 0;
}

bool test_add_with_resize_up() {
  HashMap h = make_hash_map();
  int i = 0;
  while (i < 5) {
    String s = (i).toString();
    h = hm_set(h, s, s);
    i = i + 1;
  }
  return hm_len(h) == 5;
}

bool test_add_with_resize_down() {
  HashMap h = make_hash_map();
  int i = 0;
  while (i < 5) {
    String s = (i).toString();
    h = hm_set(h, s, s);
    i = i + 1;
  }
  int j = 0;
  while (j < 5) {
    String s = (j).toString();
    DelResult d = hm_del(h, s);
    h = d.map;
    j = j + 1;
  }
  h = hm_set(h, "key_a", "val_b");
  GetResult a = hm_get(h, "key_a");
  return hm_len(h) == 1 && a.found && a.value == "val_b";
}

void main() {
  print(test_add_items());
  print(test_overwrite_items());
  print(test_delete_items());
  print(test_access_absent_items());
  print(test_add_with_resize_up());
  print(test_add_with_resize_down());
  print((true ? 1 : 0));
}
