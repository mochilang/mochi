// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<int> tail(List<int> xs) {
  List<int> res = <int>[];
  int i = 1;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

List<int> rotate_left(List<int> xs) {
  if (xs.length == 0) {
    return xs;
  }
  List<int> res = <int>[];
  int i = 1;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  res = [...res, xs[0]];
  return res;
}

List<List<int>> permute_recursive(List<int> nums) {
  if (nums.length == 0) {
    List<List<int>> base = [];
    return ([...base, ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  List<List<int>> result = <List<int>>[];
  List<int> current = nums;
  int count = 0;
  while (count < nums.length) {
    int n = current[0];
    List<int> rest = tail(current);
    List<List<int>> perms = permute_recursive(rest);
    int j = 0;
    while (j < perms.length) {
    List<int> perm = [...perms[j], n];
    result = ([...result, perm] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
    current = rotate_left(current);
    count = count + 1;
  }
  return result;
}

List<int> swap(List<int> xs, int i, int j) {
  List<int> res = <int>[];
  int k = 0;
  while (k < xs.length) {
    if (k == i) {
    res = [...res, xs[j]];
  } else {
    if (k == j) {
    res = [...res, xs[i]];
  } else {
    res = [...res, xs[k]];
  };
  }
    k = k + 1;
  }
  return res;
}

List<List<int>> permute_backtrack_helper(List<int> nums, int start, List<List<int>> output) {
  if (start == nums.length - 1) {
    return ([...output, nums] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  int i = start;
  List<List<int>> res = output;
  while (i < nums.length) {
    List<int> swapped = swap(nums, start, i);
    res = permute_backtrack_helper(swapped, start + 1, res);
    i = i + 1;
  }
  return res;
}

List<List<int>> permute_backtrack(List<int> nums) {
  List<List<int>> output = [];
  return permute_backtrack_helper(nums, 0, output);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(permute_recursive([1, 2, 3])));
  print(_str(permute_backtrack([1, 2, 3])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
