// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> tail(List<int> xs) {
  List<int> res = <int>[];
  int i = 1;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

List<int> rotate_left(List<int> xs) {
  if (xs.length == 0) {
    return xs;
  }
  List<int> res = <int>[];
  int i = 1;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  res = [...res, xs[0]];
  return res;
}

List<List<int>> permute_recursive(List<int> nums) {
  if (nums.length == 0) {
    List<List<int>> base = [];
    return ([...base, ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  List<List<int>> result = <List<int>>[];
  List<int> current = nums;
  int count = 0;
  while (count < nums.length) {
    int n = current[0];
    List<int> rest = tail(current);
    List<List<int>> perms = permute_recursive(rest);
    int j = 0;
    while (j < perms.length) {
    List<int> perm = [...perms[j], n];
    result = ([...result, perm] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
    current = rotate_left(current);
    count = count + 1;
  }
  return result;
}

List<int> swap(List<int> xs, int i, int j) {
  List<int> res = <int>[];
  int k = 0;
  while (k < xs.length) {
    if (k == i) {
    res = [...res, xs[j]];
  } else {
    if (k == j) {
    res = [...res, xs[i]];
  } else {
    res = [...res, xs[k]];
  };
  }
    k = k + 1;
  }
  return res;
}

List<List<int>> permute_backtrack_helper(List<int> nums, int start, List<List<int>> output) {
  if (start == nums.length - 1) {
    return ([...output, nums] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  int i = start;
  List<List<int>> res = output;
  while (i < nums.length) {
    List<int> swapped = swap(nums, start, i);
    res = permute_backtrack_helper(swapped, start + 1, res);
    i = i + 1;
  }
  return res;
}

List<List<int>> permute_backtrack(List<int> nums) {
  List<List<int>> output = [];
  return permute_backtrack_helper(nums, 0, output);
}

void main() {
  print((permute_recursive([1, 2, 3])).toString());
  print((permute_backtrack([1, 2, 3])).toString());
}
