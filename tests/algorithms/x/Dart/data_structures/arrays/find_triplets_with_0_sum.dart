// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> sort_triplet(int a, int b, int c) {
  int x = a;
  int y = b;
  int z = c;
  if (x > y) {
    int t = x;
    x = y;
    y = t;
  }
  if (y > z) {
    int t = y;
    y = z;
    z = t;
  }
  if (x > y) {
    int t = x;
    x = y;
    y = t;
  }
  return [x, y, z];
}

bool contains_triplet(List<List<int>> arr, List<int> target) {
  for (int i = 0; i < arr.length; i++) {
    List<int> item = arr[i];
    bool same = true;
    for (int j = 0; j < target.length; j++) {
    if (item[j] != target[j]) {
    same = false;
    break;
  }
  }
    if (same) {
    return true;
  }
  }
  return false;
}

bool contains_int(List<int> arr, int value) {
  for (int i = 0; i < arr.length; i++) {
    if (arr[i] == value) {
    return true;
  }
  }
  return false;
}

List<List<int>> find_triplets_with_0_sum(List<int> nums) {
  int n = nums.length;
  List<List<int>> result = <List<int>>[];
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
    for (int k = j + 1; k < n; k++) {
    int a = nums[i];
    int b = nums[j];
    int c = nums[k];
    if (a + b + c == 0) {
    List<int> trip = sort_triplet(a, b, c);
    if (!contains_triplet(result, trip)) {
    result = ([...result, trip] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  };
  }
  }
  }
  }
  return result;
}

List<List<int>> find_triplets_with_0_sum_hashing(List<int> arr) {
  int target_sum = 0;
  List<List<int>> output = <List<int>>[];
  for (int i = 0; i < arr.length; i++) {
    List<int> seen = <int>[];
    int current_sum = target_sum - arr[i];
    for (int j = i + 1; j < arr.length; j++) {
    int other = arr[j];
    int required = current_sum - other;
    if (contains_int(seen, required)) {
    List<int> trip = sort_triplet(arr[i], other, required);
    if (!contains_triplet(output, trip)) {
    output = ([...output, trip] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  };
  }
    seen = [...seen, other];
  }
  }
  return output;
}

void main() {
  print((find_triplets_with_0_sum([-1, 0, 1, 2, -1, -4])).toString());
  print((find_triplets_with_0_sum(<int>[])).toString());
  print((find_triplets_with_0_sum([0, 0, 0])).toString());
  print((find_triplets_with_0_sum([1, 2, 3, 0, -1, -2, -3])).toString());
  print((find_triplets_with_0_sum_hashing([-1, 0, 1, 2, -1, -4])).toString());
  print((find_triplets_with_0_sum_hashing(<int>[])).toString());
  print((find_triplets_with_0_sum_hashing([0, 0, 0])).toString());
  print((find_triplets_with_0_sum_hashing([1, 2, 3, 0, -1, -2, -3])).toString());
}
