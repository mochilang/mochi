// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class PrefixSum {
  List<int> prefix_sum;
  PrefixSum({required this.prefix_sum});
}

PrefixSum make_prefix_sum(List<int> arr) {
  List<int> prefix = <int>[];
  int running = 0;
  int i = 0;
  while (i < arr.length) {
    running = running + arr[i];
    prefix = [...prefix, running];
    i = i + 1;
  }
  return PrefixSum(prefix_sum: prefix);
}

int get_sum(PrefixSum ps, int start, int end) {
  List<int> prefix = ps.prefix_sum;
  if (prefix.length == 0) {
    throw Exception("The array is empty.");
  }
  if (start < 0 || end >= prefix.length || start > end) {
    throw Exception("Invalid range specified.");
  }
  if (start == 0) {
    return prefix[end];
  }
  return prefix[end] - prefix[start - 1];
}

bool contains_sum(PrefixSum ps, int target_sum) {
  List<int> prefix = ps.prefix_sum;
  List<int> sums = [0];
  int i = 0;
  while (i < prefix.length) {
    int sum_item = prefix[i];
    int j = 0;
    while (j < sums.length) {
    if (sums[j] == sum_item - target_sum) {
    return true;
  }
    j = j + 1;
  }
    sums = [...sums, sum_item];
    i = i + 1;
  }
  return false;
}

PrefixSum ps = make_prefix_sum([1, 2, 3]);
PrefixSum ps2 = make_prefix_sum([1, -2, 3]);
void main() {
  print((get_sum(ps, 0, 2)).toString());
  print((get_sum(ps, 1, 2)).toString());
  print((get_sum(ps, 2, 2)).toString());
  print((contains_sum(ps, 6)).toString());
  print((contains_sum(ps, 5)).toString());
  print((contains_sum(ps, 3)).toString());
  print((contains_sum(ps, 4)).toString());
  print((contains_sum(ps, 7)).toString());
  print((contains_sum(ps2, 2)).toString());
}
