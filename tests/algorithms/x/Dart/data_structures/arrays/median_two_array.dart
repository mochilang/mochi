// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<double> sortFloats(List<double> xs) {
  List<double> arr = xs;
  int i = 0;
  while (i < arr.length) {
    int j = 0;
    while (j < arr.length - 1) {
    if (arr[j] > arr[j + 1]) {
    double t = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = t;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

double find_median_sorted_arrays(List<double> nums1, List<double> nums2) {
  if (nums1.length == 0 && nums2.length == 0) {
    throw Exception("Both input arrays are empty.");
  }
  List<double> merged = <double>[];
  int i = 0;
  while (i < nums1.length) {
    merged = [...merged, nums1[i]];
    i = i + 1;
  }
  int j = 0;
  while (j < nums2.length) {
    merged = [...merged, nums2[j]];
    j = j + 1;
  }
  List<double> sorted = sortFloats(merged);
  int total = sorted.length;
  if (total % 2 == 1) {
    return sorted[total ~/ 2];
  }
  double middle1 = sorted[total ~/ 2 - 1];
  double middle2 = sorted[total ~/ 2];
  return (middle1 + middle2) / 2.0;
}

void main() {
  print(find_median_sorted_arrays([1.0, 3.0], [2.0]));
  print(find_median_sorted_arrays([1.0, 2.0], [3.0, 4.0]));
  print(find_median_sorted_arrays([0.0, 0.0], [0.0, 0.0]));
  print(find_median_sorted_arrays(List<double>.from([]), [1.0]));
  print(find_median_sorted_arrays([-1000.0], [1000.0]));
  print(find_median_sorted_arrays([-1.1, -2.2], [-3.3, -4.4]));
}
