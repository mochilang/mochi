// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> string_to_grid(String s) {
  List<List<int>> grid = <List<int>>[];
  int i = 0;
  while (i < 9) {
    List<int> row = <int>[];
    int j = 0;
    while (j < 9) {
    String ch = _substr(s, i * 9 + j, i * 9 + j + 1);
    int val = 0;
    if (ch != "0" && ch != ".") {
    val = int.parse(ch);
  }
    row = [...row, val];
    j = j + 1;
  }
    grid = ([...grid, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return grid;
}

dynamic print_grid(List<List<int>> grid) {
  for (int r = 0; r < 9; r++) {
    String line = "";
    for (int c = 0; c < 9; c++) {
    line = line + (grid[r][c]).toString();
    if (c < 8) {
    line = line + " ";
  }
  }
    print(line);
  }
}

bool is_safe(List<List<int>> grid, int row, int column, int n) {
  for (int i = 0; i < 9; i++) {
    if (grid[row][i] == n || grid[i][column] == n) {
    return false;
  }
  }
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
    if (grid[row - row % 3 + i][column - column % 3 + j] == n) {
    return false;
  }
  }
  }
  return true;
}

List<int> find_empty(List<List<int>> grid) {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
    if (grid[i][j] == 0) {
    return [i, j];
  }
  }
  }
  return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

bool solve(List<List<int>> grid) {
  List<int> loc = find_empty(grid);
  if (loc.length == 0) {
    return true;
  }
  int row = loc[0];
  int column = loc[1];
  for (int digit = 1; digit < 10; digit++) {
    if (is_safe(grid, row, column, digit)) {
    while (grid[row]!.length <= column) { grid[row]!.add(0); } grid[row]![column] = digit;
    if (solve(grid)) {
    return true;
  };
    while (grid[row]!.length <= column) { grid[row]!.add(0); } grid[row]![column] = 0;
  }
  }
  return false;
}

String puzzle = "003020600900305001001806400008102900700000008006708200002609500800203009005010300";
List<List<int>> grid = string_to_grid(puzzle);
void main() {
  print("Original grid:");
  print_grid(grid);
  if (solve(grid)) {
    print("\nSolved grid:");
    print_grid(grid);
  } else {
    print("\nNo solution found");
  }
}
