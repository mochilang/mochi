// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

int partition(List<int> arr, int low, int high) {
  int pivot = arr[high];
  int i = low - 1;
  int j = low;
  while (j < high) {
    if (arr[j] >= pivot) {
    i = i + 1;
    int tmp = arr[i];
    while (arr.length <= i) { arr.add(0); } arr[i] = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = tmp;
  }
    j = j + 1;
  }
  int k = i + 1;
  int tmp = arr[k];
  while (arr.length <= k) { arr.add(0); } arr[k] = arr[high];
  while (arr.length <= high) { arr.add(0); } arr[high] = tmp;
  return k;
}

int kth_largest_element(List<int> arr, int position) {
  if (arr.length == 0) {
    return -1;
  }
  if (position < 1 || position > arr.length) {
    return -1;
  }
  int low = 0;
  int high = arr.length - 1;
  while (low <= high) {
    if (low > arr.length - 1 || high < 0) {
    return -1;
  }
    int pivot_index = partition(arr, low, high);
    if (pivot_index == position - 1) {
    return arr[pivot_index];
  } else {
    if (pivot_index > position - 1) {
    high = pivot_index - 1;
  } else {
    low = pivot_index + 1;
  };
  }
  }
  return -1;
}

List<int> arr1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];
List<int> arr2 = [2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(kth_largest_element(arr1, 3));
  print("\n");
  print(kth_largest_element(arr2, 1));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
