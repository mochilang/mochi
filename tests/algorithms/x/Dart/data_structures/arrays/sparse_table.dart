// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int pow2(int n) {
  int result = 1;
  int i = 0;
  while (i < n) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

int int_log2(int n) {
  int v = n;
  int res = 0;
  while (v > 1) {
    v = v ~/ 2;
    res = res + 1;
  }
  return res;
}

List<List<int>> build_sparse_table(List<int> number_list) {
  if (number_list.length == 0) {
    throw Exception("empty number list not allowed");
  }
  int length = number_list.length;
  int row = int_log2(length) + 1;
  List<List<int>> sparse_table = <List<int>>[];
  int j = 0;
  while (j < row) {
    List<int> inner = <int>[];
    int i = 0;
    while (i < length) {
    inner = [...inner, 0];
    i = i + 1;
  }
    sparse_table = ([...sparse_table, inner] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
  int i = 0;
  while (i < length) {
    while (sparse_table[0]!.length <= i) { sparse_table[0]!.add(0); } sparse_table[0]![i] = number_list[i];
    i = i + 1;
  }
  j = 1;
  while (pow2(j) <= length) {
    i = 0;
    while (i + pow2(j) - 1 < length) {
    int left = sparse_table[j - 1][i + pow2(j - 1)];
    int right = sparse_table[j - 1][i];
    if (left < right) {
    while (sparse_table[j]!.length <= i) { sparse_table[j]!.add(0); } sparse_table[j]![i] = left;
  } else {
    while (sparse_table[j]!.length <= i) { sparse_table[j]!.add(0); } sparse_table[j]![i] = right;
  }
    i = i + 1;
  }
    j = j + 1;
  }
  return sparse_table;
}

int query(List<List<int>> sparse_table, int left_bound, int right_bound) {
  if (left_bound < 0 || right_bound >= sparse_table[0].length) {
    throw Exception("list index out of range");
  }
  int interval = right_bound - left_bound + 1;
  int j = int_log2(interval);
  int val1 = sparse_table[j][right_bound - pow2(j) + 1];
  int val2 = sparse_table[j][left_bound];
  if (val1 < val2) {
    return val1;
  }
  return val2;
}

List<List<int>> st1 = build_sparse_table([8, 1, 0, 3, 4, 9, 3]);
List<List<int>> st2 = build_sparse_table([3, 1, 9]);
void main() {
  print((st1).toString());
  print((st2).toString());
  print((query(st1, 0, 4)).toString());
  print((query(st1, 4, 6)).toString());
  print((query(st2, 2, 2)).toString());
  print((query(st2, 0, 1)).toString());
}
