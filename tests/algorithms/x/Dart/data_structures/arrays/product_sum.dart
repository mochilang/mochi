// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int product_sum(List<dynamic> arr, int depth) {
  int total = 0;
  int i = 0;
  while (i < arr.length) {
    dynamic el = arr[i];
    if (exists(el)) {
    total = total + product_sum(List<dynamic>.from(List<dynamic>.from(el)), depth + 1);
  } else {
    total = total + (el as int);
  }
    i = i + 1;
  }
  return total * depth;
}

int product_sum_array(List<dynamic> array) {
  int res = product_sum(List<dynamic>.from(array), 1);
  return res;
}

List<dynamic> example = [5, 2, [-7, 1], 3, [6, [-13, 8], 4]];
void main() {
  print(product_sum_array(List<dynamic>.from(example)));
}
