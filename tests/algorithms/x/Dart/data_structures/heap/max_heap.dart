// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> heap = [0];
int size = 0;
void swap_up(int i) {
  int temp = heap[i];
  int idx = i;
  while (idx ~/ 2 > 0) {
    if (heap[idx] > heap[idx ~/ 2]) {
    while (heap.length <= idx) { heap.add(0); } heap[idx] = heap[idx ~/ 2];
    while (heap.length <= idx ~/ 2) { heap.add(0); } heap[idx ~/ 2] = temp;
  }
    idx = idx ~/ 2;
  }
}

void insert(int value) {
  heap = [...heap, value];
  size = size + 1;
  swap_up(size);
}

void swap_down(int i) {
  int idx = i;
  while (size >= 2 * idx) {
    int bigger_child = (2 * idx + 1 > size ? 2 * idx : (heap[2 * idx] > heap[2 * idx + 1] ? 2 * idx : 2 * idx + 1));
    int temp = heap[idx];
    if (heap[idx] < heap[bigger_child]) {
    while (heap.length <= idx) { heap.add(0); } heap[idx] = heap[bigger_child];
    while (heap.length <= bigger_child) { heap.add(0); } heap[bigger_child] = temp;
  }
    idx = bigger_child;
  }
}

void shrink() {
  List<int> new_heap = <int>[];
  int i = 0;
  while (i <= size) {
    new_heap = [...new_heap, heap[i]];
    i = i + 1;
  }
  heap = new_heap;
}

int pop() {
  int max_value = heap[1];
  while (heap.length <= 1) { heap.add(0); } heap[1] = heap[size];
  size = size - 1;
  shrink();
  swap_down(1);
  return max_value;
}

List<int> get_list() {
  List<int> out = <int>[];
  int i = 1;
  while (i <= size) {
    out = [...out, heap[i]];
    i = i + 1;
  }
  return out;
}

int len() {
  return size;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  insert(6);
  insert(10);
  insert(15);
  insert(12);
  print(pop());
  print(pop());
  print("[" + get_list().join(', ') + "]");
  print(len());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
