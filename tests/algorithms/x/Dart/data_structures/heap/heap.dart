// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int parent_index(int child_idx) {
  if (child_idx > 0) {
    return (child_idx - 1) ~/ 2;
  }
  return -1;
}

int left_child_idx(int parent_idx) {
  return 2 * parent_idx + 1;
}

int right_child_idx(int parent_idx) {
  return 2 * parent_idx + 2;
}

void max_heapify(List<double> h, int heap_size, int index) {
  int largest = index;
  int left = left_child_idx(index);
  int right = right_child_idx(index);
  if (left < heap_size && h[left] > h[largest]) {
    largest = left;
  }
  if (right < heap_size && h[right] > h[largest]) {
    largest = right;
  }
  if (largest != index) {
    double temp = h[index];
    while (h.length <= index) { h.add(0); } h[index] = h[largest];
    while (h.length <= largest) { h.add(0); } h[largest] = temp;
    max_heapify(h, heap_size, largest);
  }
}

int build_max_heap(List<double> h) {
  int heap_size = h.length;
  int i = heap_size ~/ 2 - 1;
  while (i >= 0) {
    max_heapify(h, heap_size, i);
    i = i - 1;
  }
  return heap_size;
}

double extract_max(List<double> h, int heap_size) {
  double max_value = h[0];
  while (h.length <= 0) { h.add(0); } h[0] = h[heap_size - 1];
  max_heapify(h, heap_size - 1, 0);
  return max_value;
}

int insert(List<double> h, int heap_size, double value) {
  if (heap_size < h.length) {
    while (h.length <= heap_size) { h.add(0); } h[heap_size] = value;
  } else {
    h = [...h, value];
  }
  heap_size = heap_size + 1;
  int idx = (heap_size - 1) ~/ 2;
  while (idx >= 0) {
    max_heapify(h, heap_size, idx);
    idx = (idx - 1) ~/ 2;
  }
  return heap_size;
}

void heap_sort(List<double> h, int heap_size) {
  int size = heap_size;
  int j = size - 1;
  while (j > 0) {
    double temp = h[0];
    while (h.length <= 0) { h.add(0); } h[0] = h[j];
    while (h.length <= j) { h.add(0); } h[j] = temp;
    size = size - 1;
    max_heapify(h, size, 0);
    j = j - 1;
  }
}

String heap_to_string(List<double> h, int heap_size) {
  String s = "[";
  int i = 0;
  while (i < heap_size) {
    s = s + (h[i]).toString();
    if (i < heap_size - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<double> heap = [103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0];
int size = build_max_heap(heap);
double m = extract_max(heap, size);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(heap_to_string(heap, size));
  size = size - 1;
  print((m).toString());
  print(heap_to_string(heap, size));
  size = insert(heap, size, 100.0);
  print(heap_to_string(heap, size));
  heap_sort(heap, size);
  print(heap_to_string(heap, size));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
