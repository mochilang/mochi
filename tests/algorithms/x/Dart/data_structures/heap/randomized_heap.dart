// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

BigInt NIL = BigInt.from(0 - 1);
int seed = 1;
void set_seed(int s) {
  seed = s;
}

int randint(int a, int b) {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed % (b - a + 1) + a;
}

bool rand_bool() {
  return randint(0, 1) == 1;
}

List<Map<String, int>> nodes = <Map<String, int>>[];
int root = (NIL).toInt();
void new_heap() {
  nodes = List<Map<String, int>>.from([]);
  root = (NIL).toInt();
}

int merge(int r1, int r2) {
  if (BigInt.from(r1) == NIL) {
    return r2;
  }
  if (BigInt.from(r2) == NIL) {
    return r1;
  }
  if (nodes[r1]["value"]! > nodes[r2]["value"]!) {
    int tmp = r1;
    r1 = r2;
    r2 = tmp;
  }
  if (rand_bool()) {
    int tmp = nodes[r1]["left"]!;
    nodes[r1]!["left"] = nodes[r1]["right"]!;
    nodes[r1]!["right"] = tmp;
  }
  nodes[r1]!["left"] = merge(nodes[r1]["left"]!, r2);
  return r1;
}

void insert(int value) {
  Map<String, int> node = {"value": value, "left": NIL.toInt(), "right": NIL.toInt()};
  nodes = [...nodes, node];
  int idx = nodes.length - 1;
  root = merge(root, idx);
}

int top() {
  if (BigInt.from(root) == NIL) {
    return 0;
  }
  return (nodes[root]["value"])!;
}

int pop() {
  int result = top();
  int l = nodes[root]["left"]!;
  int r = nodes[root]["right"]!;
  root = merge(l, r);
  return result;
}

bool is_empty() {
  return BigInt.from(root) == NIL;
}

List<int> to_sorted_list() {
  List<int> res = <int>[];
  while (!is_empty()) {
    res = [...res, pop()];
  }
  return res;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  set_seed(1);
  new_heap();
  insert(2);
  insert(3);
  insert(1);
  insert(5);
  insert(1);
  insert(7);
  print("[" + to_sorted_list().join(', ') + "]");
  new_heap();
  insert(1);
  insert(-1);
  insert(0);
  print("[" + to_sorted_list().join(', ') + "]");
  new_heap();
  insert(3);
  insert(1);
  insert(3);
  insert(7);
  print(pop());
  print(pop());
  print(pop());
  print(pop());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
