// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class BinomialHeap {
  List<int> data;
  BinomialHeap({required this.data});
}

class DeleteResult {
  BinomialHeap heap;
  int value;
  DeleteResult({required this.heap, required this.value});
}

BinomialHeap new_heap() {
  return BinomialHeap(data: []);
}

void swap(List<int> data, int i, int j) {
  int tmp = data[i];
  while (data.length <= i) { data.add(0); } data[i] = data[j];
  while (data.length <= j) { data.add(0); } data[j] = tmp;
}

void sift_up(List<int> data, int idx) {
  int i = idx;
  while (i > 0) {
    int parent = (i - 1) ~/ 2;
    if (data[parent] <= data[i]) {
    break;
  }
    swap(data, parent, i);
    i = parent;
  }
}

void sift_down(List<int> data, int idx) {
  int i = idx;
  int n = data.length;
  while (true) {
    int left = 2 * i + 1;
    int right = left + 1;
    int smallest = i;
    if (left < n && data[left] < data[smallest]) {
    smallest = left;
  }
    if (right < n && data[right] < data[smallest]) {
    smallest = right;
  }
    if (smallest == i) {
    break;
  }
    swap(data, i, smallest);
    i = smallest;
  }
}

BinomialHeap insert(BinomialHeap heap, int v) {
  List<int> d = heap.data;
  d = [...d, v];
  sift_up(d, d.length - 1);
  return BinomialHeap(data: d);
}

int peek(BinomialHeap heap) {
  return heap.data[0];
}

bool is_empty(BinomialHeap heap) {
  return heap.data.length == 0;
}

DeleteResult delete_min(BinomialHeap heap) {
  List<int> d = heap.data;
  int min = d[0];
  while (d.length <= 0) { d.add(0); } d[0] = d[d.length - 1];
  d = d.sublist(0, d.length - 1);
  if (d.length > 0) {
    sift_down(d, 0);
  }
  return DeleteResult(heap: BinomialHeap(data: d), value: min);
}

void _main() {
  BinomialHeap h = new_heap();
  h = insert(h, 10);
  h = insert(h, 3);
  h = insert(h, 7);
  print((peek(h)).toString());
  DeleteResult d1 = delete_min(h);
  h = d1.heap;
  print((d1.value).toString());
  DeleteResult d2 = delete_min(h);
  h = d2.heap;
  print((d2.value).toString());
  DeleteResult d3 = delete_min(h);
  h = d3.heap;
  print((d3.value).toString());
}

void _start() {
  _main();
}

void main() => _start();
