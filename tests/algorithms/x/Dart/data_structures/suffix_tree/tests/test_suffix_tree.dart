// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class SuffixTree {
  String text;
  SuffixTree({required this.text});
}

SuffixTree suffix_tree_new(String text) {
  return SuffixTree(text: text);
}

bool suffix_tree_search(SuffixTree st, String pattern) {
  if (pattern.length == 0) {
    return true;
  }
  int i = 0;
  int n = st.text.length;
  int m = pattern.length;
  while (i <= n - m) {
    int j = 0;
    bool found = true;
    while (j < m) {
    if (st.text.substring(i + j, i + j + 1) != pattern.substring(j, j + 1)) {
    found = false;
    break;
  }
    j = j + 1;
  }
    if (found) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String text = "banana";
SuffixTree st = suffix_tree_new(text);
List<String> patterns_exist = ["ana", "ban", "na"];
int i = 0;
List<String> patterns_none = ["xyz", "apple", "cat"];
List<String> substrings = ["ban", "ana", "a", "na"];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (i < patterns_exist.length) {
    print((suffix_tree_search(st, patterns_exist[i])).toString());
    i = i + 1;
  }
  i = 0;
  while (i < patterns_none.length) {
    print((suffix_tree_search(st, patterns_none[i])).toString());
    i = i + 1;
  }
  print((suffix_tree_search(st, "")).toString());
  print((suffix_tree_search(st, text)).toString());
  i = 0;
  while (i < substrings.length) {
    print((suffix_tree_search(st, substrings[i])).toString());
    i = i + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
