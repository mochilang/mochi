// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class SuffixTreeNode {
  Map<String, int> children;
  bool is_end_of_string;
  int start;
  int end;
  int suffix_link;
  SuffixTreeNode({required this.children, required this.is_end_of_string, required this.start, required this.end, required this.suffix_link});
}

SuffixTreeNode new_suffix_tree_node(Map<String, int> children, bool is_end_of_string, int start, int end, int suffix_link) {
  return SuffixTreeNode(children: children, is_end_of_string: is_end_of_string, start: start, end: end, suffix_link: suffix_link);
}

SuffixTreeNode empty_suffix_tree_node() {
  return new_suffix_tree_node({}, false, 0 - 1, 0 - 1, 0 - 1);
}

bool has_key(Map<String, int> m, String k) {
  for (String key in m.keys) {
    if (key == k) {
    return true;
  }
  }
  return false;
}

SuffixTreeNode root = new_suffix_tree_node({"a": 1}, false, 0 - 1, 0 - 1, 0 - 1);
SuffixTreeNode leaf = new_suffix_tree_node({}, true, 0, 2, 0);
List<SuffixTreeNode> nodes = [root, leaf];
SuffixTreeNode root_check = nodes[0];
SuffixTreeNode leaf_check = nodes[1];
void main() {
  print(_str(has_key(root_check.children, "a")));
  print(_str(leaf_check.is_end_of_string));
  print(_str(leaf_check.start));
  print(_str(leaf_check.end));
  print(_str(leaf_check.suffix_link));
}
