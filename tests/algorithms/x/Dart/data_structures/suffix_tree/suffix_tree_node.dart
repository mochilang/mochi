// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class SuffixTreeNode {
  Map<String, int> children;
  bool is_end_of_string;
  int start;
  int end;
  int suffix_link;
  SuffixTreeNode({required this.children, required this.is_end_of_string, required this.start, required this.end, required this.suffix_link});
}

SuffixTreeNode new_suffix_tree_node(Map<String, int> children, bool is_end_of_string, int start, int end, int suffix_link) {
  return SuffixTreeNode(children: children, is_end_of_string: is_end_of_string, start: start, end: end, suffix_link: suffix_link);
}

SuffixTreeNode empty_suffix_tree_node() {
  return new_suffix_tree_node({}, false, 0 - 1, 0 - 1, 0 - 1);
}

bool has_key(Map<String, int> m, String k) {
  for (String key in m.keys) {
    if (key == k) {
    return true;
  }
  }
  return false;
}

SuffixTreeNode root = new_suffix_tree_node({"a": 1}, false, 0 - 1, 0 - 1, 0 - 1);
SuffixTreeNode leaf = new_suffix_tree_node({}, true, 0, 2, 0);
List<SuffixTreeNode> nodes = [root, leaf];
SuffixTreeNode root_check = nodes[0];
SuffixTreeNode leaf_check = nodes[1];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((has_key(root_check.children, "a")).toString());
  print((leaf_check.is_end_of_string).toString());
  print((leaf_check.start).toString());
  print((leaf_check.end).toString());
  print((leaf_check.suffix_link).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
