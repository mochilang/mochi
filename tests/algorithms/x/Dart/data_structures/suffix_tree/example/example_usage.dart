// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class SuffixTree {
  String text;
  SuffixTree({required this.text});
}

SuffixTree new_suffix_tree(String text) {
  return SuffixTree(text: text);
}

bool search(SuffixTree tree, String pattern) {
  int n = tree.text.length;
  int m = pattern.length;
  if (m == 0) {
    return true;
  }
  if (m > n) {
    return false;
  }
  int i = 0;
  while (i <= n - m) {
    if (_substr(tree.text, i, i + m) == pattern) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

void _main() {
  String text = "monkey banana";
  SuffixTree suffix_tree = new_suffix_tree(text);
  List<String> patterns = ["ana", "ban", "na", "xyz", "mon"];
  int i = 0;
  while (i < patterns.length) {
    String pattern = patterns[i];
    bool found = search(suffix_tree, pattern);
    print("Pattern '" + pattern + "' found: " + _str(found));
    i = i + 1;
  }
}

void _start() {
  _main();
}

void main() => _start();
