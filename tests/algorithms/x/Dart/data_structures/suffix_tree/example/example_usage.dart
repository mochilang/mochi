// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class SuffixTree {
  String text;
  SuffixTree({required this.text});
}

SuffixTree new_suffix_tree(String text) {
  return SuffixTree(text: text);
}

bool search(SuffixTree tree, String pattern) {
  int n = tree.text.length;
  int m = pattern.length;
  if (m == 0) {
    return true;
  }
  if (m > n) {
    return false;
  }
  int i = 0;
  while (i <= n - m) {
    if (_substr(tree.text, i, i + m) == pattern) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

void _main() {
  String text = "monkey banana";
  SuffixTree suffix_tree = new_suffix_tree(text);
  List<String> patterns = ["ana", "ban", "na", "xyz", "mon"];
  int i = 0;
  while (i < patterns.length) {
    String pattern = patterns[i];
    bool found = search(suffix_tree, pattern);
    print("Pattern '" + pattern + "' found: " + (found).toString());
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
