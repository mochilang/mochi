// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Node {
  Map<String, int> children;
  bool is_end_of_string;
  int start;
  int end;
  Node({required this.children, required this.is_end_of_string, required this.start, required this.end});
}

class SuffixTree {
  String text;
  List<Node> nodes;
  SuffixTree({required this.text, required this.nodes});
}

Node new_node() {
  return Node(children: {}, is_end_of_string: false, start: -1, end: -1);
}

bool has_key(Map<String, int> m, String k) {
  for (String key in m.keys) {
    if (key == k) {
    return true;
  }
  }
  return false;
}

SuffixTree add_suffix(SuffixTree tree, String suffix, int index) {
  List<Node> nodes = tree.nodes;
  int node_idx = 0;
  int j = 0;
  while (j < suffix.length) {
    String ch = _substr(suffix, j, j + 1);
    Node node = nodes[node_idx];
    Map<String, int> children = node.children;
    if (!has_key(children, ch)) {
    nodes = (nodes..add(new_node()));
    int new_idx = nodes.length - 1;
    children[ch] = new_idx;
  }
    node.children = children;
    while (nodes.length <= node_idx) { nodes.add(null as dynamic); } nodes[node_idx] = node;
    node_idx = children[ch]!;
    j = j + 1;
  }
  Node node = nodes[node_idx];
  node.is_end_of_string = true;
  node.start = index;
  node.end = index + suffix.length - 1;
  while (nodes.length <= node_idx) { nodes.add(null as dynamic); } nodes[node_idx] = node;
  tree.nodes = nodes;
  return tree;
}

SuffixTree build_suffix_tree(SuffixTree tree) {
  String text = tree.text;
  int n = text.length;
  int i = 0;
  SuffixTree t = tree;
  while (i < n) {
    String suffix = "";
    int k = i;
    while (k < n) {
    suffix = suffix + _substr(text, k, k + 1);
    k = k + 1;
  }
    t = add_suffix(t, suffix, i);
    i = i + 1;
  }
  return t;
}

SuffixTree new_suffix_tree(String text) {
  SuffixTree tree = SuffixTree(text: text, nodes: []);
  tree.nodes = (tree.nodes..add(new_node()));
  tree = build_suffix_tree(tree);
  return tree;
}

bool search(SuffixTree tree, String pattern) {
  int node_idx = 0;
  int i = 0;
  List<Node> nodes = tree.nodes;
  while (i < pattern.length) {
    String ch = _substr(pattern, i, i + 1);
    Node node = nodes[node_idx];
    Map<String, int> children = node.children;
    if (!has_key(children, ch)) {
    return false;
  }
    node_idx = children[ch]!;
    i = i + 1;
  }
  return true;
}

SuffixTree st = new_suffix_tree("bananas");
void main() {
  print(_str(search(st, "ana")));
  print(_str(search(st, "apple")));
}
