// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class BuildResult {
  dynamic node;
  int next;
  BuildResult({required this.node, required this.next});
}

int digit(String ch) {
  String digits = "0123456789";
  int i = 0;
  while (i < digits.length) {
    if (_substr(digits, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return 0;
}

int to_int(String s) {
  int i = 0;
  int sign = 1;
  if (s.length > 0 && _substr(s, 0, 1) == "-") {
    sign = -1;
    i = 1;
  }
  int _num = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    _num = _num * 10 + digit(ch);
    i = i + 1;
  }
  return sign * _num;
}

List<String> split(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

String serialize(dynamic node) {
  return (node["__name"] == "Empty" ? "null" : (node["__name"] == "Node" ? _str(node["value"]) + "," + serialize(node["left"]) + "," + serialize(node["right"]) : ""));
}

BuildResult build(List<String> nodes, int idx) {
  String value = nodes[idx];
  if (value == "null") {
    return BuildResult(node: {"__name": "Empty"}, next: idx + 1);
  }
  BuildResult left_res = build(nodes, idx + 1);
  BuildResult right_res = build(nodes, left_res.next);
  Map<String, dynamic> node = {"__name": "Node", "left": left_res.node, "value": to_int(value), "right": right_res.node};
  return BuildResult(node: node, next: right_res.next);
}

dynamic deserialize(String data) {
  dynamic nodes = data.split(",");
  BuildResult res = build(nodes, 0);
  return res.node;
}

dynamic five_tree() {
  Map<String, dynamic> left_child = {"__name": "Node", "value": 2, "left": {"__name": "Empty"}, "right": {"__name": "Empty"}};
  Map<String, dynamic> right_left = {"__name": "Node", "value": 4, "left": {"__name": "Empty"}, "right": {"__name": "Empty"}};
  Map<String, dynamic> right_right = {"__name": "Node", "value": 5, "left": {"__name": "Empty"}, "right": {"__name": "Empty"}};
  Map<String, dynamic> right_child = {"__name": "Node", "value": 3, "left": right_left, "right": right_right};
  return {"__name": "Node", "value": 1, "left": left_child, "right": right_child};
}

void _main() {
  dynamic root = five_tree();
  String serial = serialize(root);
  print(serial);
  dynamic rebuilt = deserialize(serial);
  String serial2 = serialize(rebuilt);
  print(serial2);
  print((serial == serial2 ? 1 : 0));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
