// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

int binomial_coefficient(int n, int k) {
  int result = 1;
  int kk = k;
  if (k > n - k) {
    kk = n - k;
  }
  for (int i = 0; i < kk; i++) {
    result = result * (n - i);
    result = result ~/ (i + 1);
  }
  return result;
}

int catalan_number(int node_count) {
  return binomial_coefficient(2 * node_count, node_count) ~/ (node_count + 1);
}

int factorial(int n) {
  if (n < 0) {
    print("factorial() not defined for negative values");
    return 0;
  }
  int result = 1;
  for (int i = 1; i < n + 1; i++) {
    result = result * i;
  }
  return result;
}

int binary_tree_count(int node_count) {
  return catalan_number(node_count) * factorial(node_count);
}

String input_str = stdin.readLineSync()?.trim() ?? '';
int node_count = int.parse(input_str);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Enter the number of nodes:");
  if (node_count <= 0) {
    print("We need some nodes to work with.");
  } else {
    int bst = catalan_number(node_count);
    int bt = binary_tree_count(node_count);
    print(["Given", node_count, "nodes, there are", bt, "binary trees and", bst, "binary search trees."].join(" "));
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
