// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

class Node {
  int data;
  int left;
  int right;
  Node({required this.data, required this.left, required this.right});
}

List<int> inorder(List<Node> nodes, int index, List<int> acc) {
  if (index == 0 - 1) {
    return acc;
  }
  Node node = nodes[index];
  List<int> res = inorder(nodes, node.left, acc);
  res = [...res, node.data];
  res = inorder(nodes, node.right, res);
  return res;
}

int size(List<Node> nodes, int index) {
  if (index == 0 - 1) {
    return 0;
  }
  Node node = nodes[index];
  return 1 + size(nodes, node.left) + size(nodes, node.right);
}

int depth(List<Node> nodes, int index) {
  if (index == 0 - 1) {
    return 0;
  }
  Node node = nodes[index];
  int left_depth = depth(nodes, node.left);
  int right_depth = depth(nodes, node.right);
  if (left_depth > right_depth) {
    return left_depth + 1;
  }
  return right_depth + 1;
}

bool is_full(List<Node> nodes, int index) {
  if (index == 0 - 1) {
    return true;
  }
  Node node = nodes[index];
  if (node.left == 0 - 1 && node.right == 0 - 1) {
    return true;
  }
  if (node.left != 0 - 1 && node.right != 0 - 1) {
    return is_full(nodes, node.left) && is_full(nodes, node.right);
  }
  return false;
}

List<Node> small_tree() {
  List<Node> arr = <Node>[];
  arr = [...arr, Node(data: 2, left: 1, right: 2)];
  arr = [...arr, Node(data: 1, left: 0 - 1, right: 0 - 1)];
  arr = [...arr, Node(data: 3, left: 0 - 1, right: 0 - 1)];
  return arr;
}

List<Node> medium_tree() {
  List<Node> arr = <Node>[];
  arr = [...arr, Node(data: 4, left: 1, right: 4)];
  arr = [...arr, Node(data: 2, left: 2, right: 3)];
  arr = [...arr, Node(data: 1, left: 0 - 1, right: 0 - 1)];
  arr = [...arr, Node(data: 3, left: 0 - 1, right: 0 - 1)];
  arr = [...arr, Node(data: 5, left: 0 - 1, right: 5)];
  arr = [...arr, Node(data: 6, left: 0 - 1, right: 6)];
  arr = [...arr, Node(data: 7, left: 0 - 1, right: 0 - 1)];
  return arr;
}

List<Node> small = small_tree();
List<Node> medium = medium_tree();
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(size(small, 0));
  print("[" + inorder(small, 0, <int>[]).join(', ') + "]");
  print(depth(small, 0));
  print(is_full(small, 0));
  print(size(medium, 0));
  print("[" + inorder(medium, 0, <int>[]).join(', ') + "]");
  print(depth(medium, 0));
  print(is_full(medium, 0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
