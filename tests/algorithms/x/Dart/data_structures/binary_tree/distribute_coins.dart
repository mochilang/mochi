// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class TreeNode {
  int data;
  int left;
  int right;
  TreeNode({required this.data, required this.left, required this.right});
}

int count_nodes(List<TreeNode> nodes, int idx) {
  if (idx == 0) {
    return 0;
  }
  TreeNode node = nodes[idx];
  return count_nodes(nodes, node.left) + count_nodes(nodes, node.right) + 1;
}

int count_coins(List<TreeNode> nodes, int idx) {
  if (idx == 0) {
    return 0;
  }
  TreeNode node = nodes[idx];
  return count_coins(nodes, node.left) + count_coins(nodes, node.right) + node.data;
}

int total_moves = 0;
int iabs(int x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

int dfs(List<TreeNode> nodes, int idx) {
  if (idx == 0) {
    return 0;
  }
  TreeNode node = nodes[idx];
  int left_excess = dfs(nodes, node.left);
  int right_excess = dfs(nodes, node.right);
  int abs_left = iabs(left_excess);
  int abs_right = iabs(right_excess);
  total_moves = total_moves + abs_left + abs_right;
  return node.data + left_excess + right_excess - 1;
}

int distribute_coins(List<TreeNode> nodes, int root) {
  if (root == 0) {
    return 0;
  }
  if (count_nodes(nodes, root) != count_coins(nodes, root)) {
    throw Exception("The nodes number should be same as the number of coins");
  }
  total_moves = 0;
  dfs(nodes, root);
  return total_moves;
}

void _main() {
  List<TreeNode> example1 = [TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 3, left: 2, right: 3), TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 0, left: 0, right: 0)];
  List<TreeNode> example2 = [TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 0, left: 2, right: 3), TreeNode(data: 3, left: 0, right: 0), TreeNode(data: 0, left: 0, right: 0)];
  List<TreeNode> example3 = [TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 0, left: 2, right: 3), TreeNode(data: 0, left: 0, right: 0), TreeNode(data: 3, left: 0, right: 0)];
  print(distribute_coins(example1, 1));
  print(distribute_coins(example2, 1));
  print(distribute_coins(example3, 1));
  print(distribute_coins([TreeNode(data: 0, left: 0, right: 0)], 0));
}

void _start() {
  _main();
}

void main() => _start();
