// Generated by Mochi transpiler
String _str(dynamic v) => v.toString();

BigInt NIL = BigInt.from(0 - 1);
List<Map<String, int>> nodes = <Map<String, int>>[];
int new_node(int value) {
  Map<String, int> node = {"data": value, "left": NIL.toInt(), "right": NIL.toInt(), "height": 1};
  nodes = [...nodes, node];
  return nodes.length - 1;
}

int get_height(int i) {
  if (BigInt.from(i) == NIL) {
    return 0;
  }
  return (nodes[i]["height"] ?? 0);
}

int my_max(int a, int b) {
  if (a > b) {
    return a;
  }
  return b;
}

void update_height(int i) {
  nodes[i]!["height"] = my_max(get_height((nodes[i]["left"] ?? 0)), get_height((nodes[i]["right"] ?? 0))) + 1;
}

int right_rotation(int i) {
  int left = nodes[i]["left"]!;
  nodes[i]!["left"] = nodes[left]["right"]!;
  nodes[left]!["right"] = i;
  update_height(i);
  update_height(left);
  return left;
}

int left_rotation(int i) {
  int right = nodes[i]["right"]!;
  nodes[i]!["right"] = nodes[right]["left"]!;
  nodes[right]!["left"] = i;
  update_height(i);
  update_height(right);
  return right;
}

int lr_rotation(int i) {
  nodes[i]!["left"] = left_rotation((nodes[i]["left"] ?? 0));
  return right_rotation(i);
}

int rl_rotation(int i) {
  nodes[i]!["right"] = right_rotation((nodes[i]["right"] ?? 0));
  return left_rotation(i);
}

int insert_node(int i, int value) {
  if (BigInt.from(i) == NIL) {
    return new_node(value);
  }
  if (value < (nodes[i]["data"] ?? 0)) {
    nodes[i]!["left"] = insert_node((nodes[i]["left"] ?? 0), value);
    if (get_height((nodes[i]["left"] ?? 0)) - get_height((nodes[i]["right"] ?? 0)) == 2) {
    if (value < (nodes[(nodes[i]["left"] ?? 0)]["data"] ?? 0)) {
    i = right_rotation(i);
  } else {
    i = lr_rotation(i);
  };
  };
  } else {
    nodes[i]!["right"] = insert_node((nodes[i]["right"] ?? 0), value);
    if (get_height((nodes[i]["right"] ?? 0)) - get_height((nodes[i]["left"] ?? 0)) == 2) {
    if (value < (nodes[(nodes[i]["right"] ?? 0)]["data"] ?? 0)) {
    i = rl_rotation(i);
  } else {
    i = left_rotation(i);
  };
  };
  }
  update_height(i);
  return i;
}

int get_left_most(int i) {
  int cur = i;
  while (BigInt.from((nodes[cur]["left"] ?? 0)) != NIL) {
    cur = nodes[cur]["left"]!;
  }
  return (nodes[cur]["data"] ?? 0);
}

int del_node(int i, int value) {
  if (BigInt.from(i) == NIL) {
    return (NIL).toInt();
  }
  if (value < (nodes[i]["data"] ?? 0)) {
    nodes[i]!["left"] = del_node((nodes[i]["left"] ?? 0), value);
  } else {
    if (value > (nodes[i]["data"] ?? 0)) {
    nodes[i]!["right"] = del_node((nodes[i]["right"] ?? 0), value);
  } else {
    if (BigInt.from((nodes[i]["left"] ?? 0)) != NIL && BigInt.from((nodes[i]["right"] ?? 0)) != NIL) {
    int temp = get_left_most((nodes[i]["right"] ?? 0));
    nodes[i]!["data"] = temp;
    nodes[i]!["right"] = del_node((nodes[i]["right"] ?? 0), temp);
  } else {
    if (BigInt.from((nodes[i]["left"] ?? 0)) != NIL) {
    i = nodes[i]["left"]!;
  } else {
    i = nodes[i]["right"]!;
  };
  };
  };
  }
  if (BigInt.from(i) == NIL) {
    return (NIL).toInt();
  }
  int lh = get_height((nodes[i]["left"] ?? 0));
  int rh = get_height((nodes[i]["right"] ?? 0));
  if (rh - lh == 2) {
    if (get_height((nodes[(nodes[i]["right"] ?? 0)]["right"] ?? 0)) > get_height((nodes[(nodes[i]["right"] ?? 0)]["left"] ?? 0))) {
    i = left_rotation(i);
  } else {
    i = rl_rotation(i);
  };
  } else {
    if (lh - rh == 2) {
    if (get_height((nodes[(nodes[i]["left"] ?? 0)]["left"] ?? 0)) > get_height((nodes[(nodes[i]["left"] ?? 0)]["right"] ?? 0))) {
    i = right_rotation(i);
  } else {
    i = lr_rotation(i);
  };
  };
  }
  update_height(i);
  return i;
}

String inorder(int i) {
  if (BigInt.from(i) == NIL) {
    return "";
  }
  String left = inorder((nodes[i]["left"] ?? 0));
  String right = inorder((nodes[i]["right"] ?? 0));
  String res = _str((nodes[i]["data"] ?? 0));
  if (left != "") {
    res = left + " " + res;
  }
  if (right != "") {
    res = res + " " + right;
  }
  return res;
}

void _main() {
  nodes = List<Map<String, int>>.from([]);
  BigInt root = NIL;
  root = BigInt.from(insert_node((root).toInt(), 4));
  root = BigInt.from(insert_node((root).toInt(), 2));
  root = BigInt.from(insert_node((root).toInt(), 3));
  print(inorder((root).toInt()));
  print(_str(get_height((root).toInt())));
  root = BigInt.from(del_node((root).toInt(), 3));
  print(inorder((root).toInt()));
}

void _start() {
  _main();
}

void main() => _start();
