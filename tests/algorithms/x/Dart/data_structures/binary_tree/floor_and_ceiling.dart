// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int key;
  int left;
  int right;
  Node({required this.key, required this.left, required this.right});
}

List<int> inorder(List<Node> nodes, int idx) {
  if (idx == -1) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  Node node = nodes[idx];
  List<int> result = inorder(nodes, node.left);
  result = [...result, node.key];
  result = ([...result, ...inorder(nodes, node.right)] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  return result;
}

List<int> floor_ceiling(List<Node> nodes, int idx, int key) {
  dynamic? floor_val = null;
  dynamic? ceiling_val = null;
  int current = idx;
  while (current != -1) {
    Node node = nodes[current];
    if (node.key == key) {
    floor_val = node.key;
    ceiling_val = node.key;
    break;
  }
    if (key < node.key) {
    ceiling_val = node.key;
    current = node.left;
  } else {
    floor_val = node.key;
    current = node.right;
  }
  }
  return ([floor_val!, ceiling_val!] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

List<Node> tree = [Node(key: 10, left: 1, right: 2), Node(key: 5, left: 3, right: 4), Node(key: 20, left: 5, right: 6), Node(key: 3, left: -1, right: -1), Node(key: 7, left: -1, right: -1), Node(key: 15, left: -1, right: -1), Node(key: 25, left: -1, right: -1)];
void main() {
  print((inorder(tree, 0)).toString());
  print((floor_ceiling(tree, 0, 8)).toString());
  print((floor_ceiling(tree, 0, 14)).toString());
  print((floor_ceiling(tree, 0, -1)).toString());
  print((floor_ceiling(tree, 0, 30)).toString());
}
