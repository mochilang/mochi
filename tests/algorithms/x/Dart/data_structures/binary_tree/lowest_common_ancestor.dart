// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int pow2(int exp) {
  int res = 1;
  int i = 0;
  while (i < exp) {
    res = res * 2;
    i = i + 1;
  }
  return res;
}

List<List<int>> create_sparse(int max_node, List<List<int>> parent) {
  int j = 1;
  while (pow2(j) < max_node) {
    int i = 1;
    while (i <= max_node) {
    while (parent[j]!.length <= i) { parent[j]!.add(0); } parent[j]![i] = parent[j - 1][parent[j - 1][i]];
    i = i + 1;
  }
    j = j + 1;
  }
  return parent;
}

int lowest_common_ancestor(int u, int v, List<int> level, List<List<int>> parent) {
  if (level[u] < level[v]) {
    int temp = u;
    u = v;
    v = temp;
  }
  int i = 18;
  while (i >= 0) {
    if (level[u] - pow2(i) >= level[v]) {
    u = parent[i][u];
  }
    i = i - 1;
  }
  if (u == v) {
    return u;
  }
  i = 18;
  while (i >= 0) {
    int pu = parent[i][u];
    int pv = parent[i][v];
    if (pu != 0 && pu != pv) {
    u = pu;
    v = pv;
  }
    i = i - 1;
  }
  return parent[0][u];
}

void breadth_first_search(List<int> level, List<List<int>> parent, int max_node, Map<int, List<int>> graph, int root) {
  while (level.length <= root) { level.add(0); } level[root] = 0;
  List<int> q = <int>[];
  q = [...q, root];
  int head = 0;
  while (head < q.length) {
    int u = q[head];
    head = head + 1;
    List<int> adj = graph[u]!;
    int j = 0;
    while (j < adj.length) {
    int v = adj[j];
    if (level[v] == 0 - 1) {
    while (level.length <= v) { level.add(0); } level[v] = level[u] + 1;
    while (parent[0]!.length <= v) { parent[0]!.add(0); } parent[0]![v] = u;
    q = [...q, v];
  }
    j = j + 1;
  }
  }
}

void _main() {
  int max_node = 13;
  List<List<int>> parent = <List<int>>[];
  int i = 0;
  while (i < 20) {
    List<int> row = <int>[];
    int j = 0;
    while (j < max_node + 10) {
    row = [...row, 0];
    j = j + 1;
  }
    parent = ([...parent, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  List<int> level = <int>[];
  i = 0;
  while (i < max_node + 10) {
    level = [...level, 0 - 1];
    i = i + 1;
  }
  Map<int, List<int>> graph = <int, List<int>>{};
  graph[1] = [2, 3, 4];
  graph[2] = [5];
  graph[3] = [6, 7];
  graph[4] = [8];
  graph[5] = [9, 10];
  graph[6] = [11];
  graph[7] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  graph[8] = [12, 13];
  graph[9] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  graph[10] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  graph[11] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  graph[12] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  graph[13] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  breadth_first_search(level, parent, max_node, graph, 1);
  parent = create_sparse(max_node, parent);
  print("LCA of node 1 and 3 is: " + (lowest_common_ancestor(1, 3, level, parent)).toString());
  print("LCA of node 5 and 6 is: " + (lowest_common_ancestor(5, 6, level, parent)).toString());
  print("LCA of node 7 and 11 is: " + (lowest_common_ancestor(7, 11, level, parent)).toString());
  print("LCA of node 6 and 7 is: " + (lowest_common_ancestor(6, 7, level, parent)).toString());
  print("LCA of node 4 and 12 is: " + (lowest_common_ancestor(4, 12, level, parent)).toString());
  print("LCA of node 8 and 8 is: " + (lowest_common_ancestor(8, 8, level, parent)).toString());
}

void _start() {
  _main();
}

void main() => _start();
