// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

dynamic merge_two_binary_trees(dynamic t1, dynamic t2) {
  return (t1["__name"] == "Leaf" ? t2 : (t1["__name"] == "Node" ? (t2["__name"] == "Leaf" ? t1 : (t2["__name"] == "Node" ? {"__name": "Node", "left": merge_two_binary_trees(t1["left"], t2["left"]), "value": t1["value"] + t2["value"], "right": merge_two_binary_trees(t1["right"], t2["right"])} : "")) : ""));
}

bool is_leaf(dynamic t) {
  return (t["__name"] == "Leaf" ? true : (t == __ ? false : ""));
}

dynamic get_left(dynamic t) {
  return (t["__name"] == "Node" ? t["left"] : (t == __ ? {"__name": "Leaf"} : ""));
}

dynamic get_right(dynamic t) {
  return (t["__name"] == "Node" ? t["right"] : (t == __ ? {"__name": "Leaf"} : ""));
}

int get_value(dynamic t) {
  return (t["__name"] == "Node" ? t["value"] : (t == __ ? 0 : ""));
}

dynamic print_preorder(dynamic t) {
  if (!is_leaf(t)) {
    int v = get_value(t);
    dynamic l = get_left(t);
    dynamic r = get_right(t);
    print(v);
    print_preorder(l);
    print_preorder(r);
  }
}

Node tree1 = {"__name": "Node", "left": {"__name": "Node", "left": {"__name": "Node", "left": {"__name": "Leaf"}, "value": 4, "right": {"__name": "Leaf"}}, "value": 2, "right": {"__name": "Leaf"}}, "value": 1, "right": {"__name": "Node", "left": {"__name": "Leaf"}, "value": 3, "right": {"__name": "Leaf"}}};
Node tree2 = {"__name": "Node", "left": {"__name": "Node", "left": {"__name": "Leaf"}, "value": 4, "right": {"__name": "Node", "left": {"__name": "Leaf"}, "value": 9, "right": {"__name": "Leaf"}}}, "value": 2, "right": {"__name": "Node", "left": {"__name": "Leaf"}, "value": 6, "right": {"__name": "Node", "left": {"__name": "Leaf"}, "value": 5, "right": {"__name": "Leaf"}}}};
dynamic merged_tree = merge_two_binary_trees(tree1, tree2);
void main() {
  print("Tree1 is:");
  print_preorder(tree1);
  print("Tree2 is:");
  print_preorder(tree2);
  print("Merged Tree is:");
  print_preorder(merged_tree);
}
