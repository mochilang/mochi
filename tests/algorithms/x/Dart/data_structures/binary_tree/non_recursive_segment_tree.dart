// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> build(List<int> arr, dynamic combine) {
  int n = arr.length;
  List<int> st = <int>[];
  int i = 0;
  while (i < 2 * n) {
    st = [...st, 0];
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    while (st.length <= n + i) { st.add(0); } st[n + i] = arr[i];
    i = i + 1;
  }
  i = n - 1;
  while (i > 0) {
    while (st.length <= i) { st.add(0); } st[i] = combine(st[i * 2], st[i * 2 + 1]);
    i = i - 1;
  }
  return st;
}

void update(List<int> st, int n, dynamic combine, int p, int v) {
  int idx = p + n;
  while (st.length <= idx) { st.add(0); } st[idx] = v;
  while (idx > 1) {
    idx = idx ~/ 2 as int;
    while (st.length <= idx) { st.add(0); } st[idx] = combine(st[idx * 2], st[idx * 2 + 1]);
  }
}

int query(List<int> st, int n, dynamic combine, int left, int right) {
  int l = left + n;
  int r = right + n;
  int res = 0;
  bool has = false;
  while (l <= r) {
    if (l % 2 == 1) {
    if (!has) {
    res = st[l];
    has = true;
  } else {
    res = combine(res, st[l]);
  };
    l = l + 1;
  }
    if (r % 2 == 0) {
    if (!has) {
    res = st[r];
    has = true;
  } else {
    res = combine(res, st[r]);
  };
    r = r - 1;
  }
    l = l ~/ 2 as int;
    r = r ~/ 2 as int;
  }
  return res;
}

int add(int a, int b) {
  return a + b;
}

int min_int(int a, int b) {
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

int max_int(int a, int b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

List<int> arr1 = [1, 2, 3];
List<int> st1 = build(arr1, add);
List<int> arr2 = [3, 1, 2];
List<int> st2 = build(arr2, min_int);
List<int> arr3 = [2, 3, 1];
List<int> st3 = build(arr3, max_int);
List<int> arr4 = [1, 5, 7, -1, 6];
int n4 = arr4.length;
List<int> st4 = build(arr4, add);
void main() {
  print((query(st1, arr1.length, add, 0, 2)).toString());
  print((query(st2, arr2.length, min_int, 0, 2)).toString());
  print((query(st3, arr3.length, max_int, 0, 2)).toString());
  update(st4, n4, add, 1, -1);
  update(st4, n4, add, 2, 3);
  print((query(st4, n4, add, 1, 2)).toString());
  print((query(st4, n4, add, 1, 1)).toString());
  update(st4, n4, add, 4, 1);
  print((query(st4, n4, add, 3, 4)).toString());
}
