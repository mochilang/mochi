// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int data;
  int left;
  int right;
  Node({required this.data, required this.left, required this.right});
}

class TreeState {
  List<Node> nodes;
  int root;
  TreeState({required this.nodes, required this.root});
}

int new_node(TreeState state, int value) {
  state.nodes = [...state.nodes, Node(data: value, left: -1, right: -1)];
  return state.nodes.length - 1;
}

void insert(TreeState state, int value) {
  if (state.root == -1) {
    state.root = new_node(state, value);
    return;
  }
  int current = state.root;
  List<Node> nodes = state.nodes;
  while (true) {
    Node node = nodes[current];
    if (value < node.data) {
    if (node.left == -1) {
    node.left = new_node(state, value);
    while (nodes.length <= current) { nodes.add(null); } nodes[current] = node;
    state.nodes = nodes;
    return;
  };
    current = node.left;
  } else {
    if (node.right == -1) {
    node.right = new_node(state, value);
    while (nodes.length <= current) { nodes.add(null); } nodes[current] = node;
    state.nodes = nodes;
    return;
  };
    current = node.right;
  }
  }
}

List<int> inorder(TreeState state, int idx) {
  if (idx == -1) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  Node node = state.nodes[idx];
  List<int> result = inorder(state, node.left);
  result = [...result, node.data];
  List<int> right_part = inorder(state, node.right);
  int i = 0;
  while (i < right_part.length) {
    result = [...result, right_part[i]];
    i = i + 1;
  }
  return result;
}

TreeState make_tree() {
  TreeState state = TreeState(nodes: [], root: -1);
  insert(state, 15);
  insert(state, 10);
  insert(state, 25);
  insert(state, 6);
  insert(state, 14);
  insert(state, 20);
  insert(state, 60);
  return state;
}

void _main() {
  TreeState state = make_tree();
  print("Printing values of binary search tree in Inorder Traversal.");
  print("[" + inorder(state, state.root).join(', ') + "]");
}

void _start() {
  _main();
}

void main() => _start();
