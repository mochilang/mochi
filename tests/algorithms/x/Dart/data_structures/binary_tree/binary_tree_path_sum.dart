// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int dfs(dynamic node, int target, int current) {
  return (node["__name"] == "Empty" ? 0 : (node["__name"] == "Node" ? (current + node["value"] == target ? 1 : 0) + dfs(node["left"], target, (current + node["value"]).toInt()) + dfs(node["right"], target, (current + node["value"]).toInt()) : ""));
}

int path_sum(dynamic node, int target) {
  return (node["__name"] == "Empty" ? 0 : (node["__name"] == "Node" ? dfs(node, target, 0) + path_sum(node["left"], target) + path_sum(node["right"], target) : ""));
}

dynamic sample_tree_one() {
  return {"__name": "Node", "value": 10, "left": {"__name": "Node", "value": 5, "left": {"__name": "Node", "value": 3, "left": {"__name": "Node", "value": 3, "left": Empty, "right": Empty}, "right": {"__name": "Node", "value": -2, "left": Empty, "right": Empty}}, "right": {"__name": "Node", "value": 2, "left": Empty, "right": {"__name": "Node", "value": 1, "left": Empty, "right": Empty}}}, "right": {"__name": "Node", "value": -3, "left": Empty, "right": {"__name": "Node", "value": 11, "left": Empty, "right": Empty}}};
}

dynamic sample_tree_two() {
  return {"__name": "Node", "value": 10, "left": {"__name": "Node", "value": 5, "left": {"__name": "Node", "value": 3, "left": {"__name": "Node", "value": 3, "left": Empty, "right": Empty}, "right": {"__name": "Node", "value": -2, "left": Empty, "right": Empty}}, "right": {"__name": "Node", "value": 2, "left": Empty, "right": {"__name": "Node", "value": 1, "left": Empty, "right": Empty}}}, "right": {"__name": "Node", "value": -3, "left": Empty, "right": {"__name": "Node", "value": 10, "left": Empty, "right": Empty}}};
}

void _main() {
  dynamic tree1 = sample_tree_one();
  print(path_sum(tree1, 8));
  print(path_sum(tree1, 7));
  dynamic tree2 = sample_tree_two();
  print(path_sum(tree2, 8));
}

void _start() {
  _main();
}

void main() => _start();
