// Generated by Mochi transpiler
String _str(dynamic v) => v.toString();

List<dynamic> create_node(int value) {
  return [value, null, null];
}

List<dynamic> insert(List<dynamic> node, int value) {
  if (node == null) {
    return create_node(value);
  }
  if (value.compareTo(node[0]) < 0) {
    while (node.length <= 1) { node.add(null as dynamic); } node[1] = insert(node[1], value);
  } else {
    if (value.compareTo(node[0]) > 0) {
    while (node.length <= 2) { node.add(null as dynamic); } node[2] = insert(node[2], value);
  };
  }
  return node;
}

bool search(List<dynamic> node, int value) {
  if (node == null) {
    return false;
  }
  if (value == node[0]) {
    return true;
  }
  if (value.compareTo(node[0]) < 0) {
    return search(node[1], value);
  }
  return search(node[2], value);
}

List<int> inorder(List<dynamic> node, List<int> acc) {
  if (node == null) {
    return acc;
  }
  List<int> left_acc = inorder(node[1], acc);
  List<int> with_node = [...left_acc, node[0]];
  return inorder(node[2], with_node);
}

int find_min(List<dynamic> node) {
  List<dynamic> current = node;
  while (current[1] != null) {
    current = List<dynamic>.from(current[1]);
  }
  return current[0];
}

int find_max(List<dynamic> node) {
  List<dynamic> current = node;
  while (current[2] != null) {
    current = List<dynamic>.from(current[2]);
  }
  return current[0];
}

List<dynamic>? delete(List<dynamic> node, int value) {
  if (node == null) {
    return null;
  }
  if (value.compareTo(node[0]) < 0) {
    while (node.length <= 1) { node.add(null as dynamic); } node[1] = delete(node[1], value);
  } else {
    if (value.compareTo(node[0]) > 0) {
    while (node.length <= 2) { node.add(null as dynamic); } node[2] = delete(node[2], value);
  } else {
    if (node[1] == null) {
    return List<dynamic>.from(node[2]);
  };
    if (node[2] == null) {
    return List<dynamic>.from(node[1]);
  };
    int min_val = find_min(node[2]);
    while (node.length <= 0) { node.add(null as dynamic); } node[0] = min_val;
    while (node.length <= 2) { node.add(null as dynamic); } node[2] = delete(node[2], min_val);
  };
  }
  return node;
}

void _main() {
  List<dynamic>? root = null;
  List<int> nums = [8, 3, 6, 1, 10, 14, 13, 4, 7];
  for (int v in nums) {
    root = insert(root, v);
  }
  print(_str(inorder(root, <int>[])));
  print(search(root, 6));
  print(search(root, 20));
  print(find_min(root));
  print(find_max(root));
  root = List<dynamic>.from(delete(root, 6)!);
  print(_str(inorder(root, <int>[])));
}

void _start() {
  _main();
}

void main() => _start();
