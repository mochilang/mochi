// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Tree {
  List<int> values;
  List<int> left;
  List<int> right;
  int root;
  Tree({required this.values, required this.left, required this.right, required this.root});
}

void mirror_node(List<int> left, List<int> right, int idx) {
  if (idx == -1) {
    return;
  }
  int temp = left[idx];
  while (left.length <= idx) { left.add(0); } left[idx] = right[idx];
  while (right.length <= idx) { right.add(0); } right[idx] = temp;
  mirror_node(left, right, left[idx]);
  mirror_node(left, right, right[idx]);
}

Tree mirror(Tree tree) {
  mirror_node(tree.left, tree.right, tree.root);
  return tree;
}

List<int> inorder(Tree tree, int idx) {
  if (idx == -1) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> left_vals = inorder(tree, tree.left[idx]);
  List<int> right_vals = inorder(tree, tree.right[idx]);
  return ([...[...left_vals, ...[tree.values[idx]]], ...right_vals] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

Tree make_tree_zero() {
  return Tree(values: [0], left: [-1], right: [-1], root: 0);
}

Tree make_tree_seven() {
  return Tree(values: [1, 2, 3, 4, 5, 6, 7], left: [1, 3, 5, -1, -1, -1, -1], right: [2, 4, 6, -1, -1, -1, -1], root: 0);
}

Tree make_tree_nine() {
  return Tree(values: [1, 2, 3, 4, 5, 6, 7, 8, 9], left: [1, 3, -1, 6, -1, -1, -1, -1, -1], right: [2, 4, 5, 7, 8, -1, -1, -1, -1], root: 0);
}

void _main() {
  List<String> names = ["zero", "seven", "nine"];
  List<Tree> trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()];
  int i = 0;
  while (i < trees.length) {
    Tree tree = trees[i];
    print("      The " + names[i] + " tree: " + (inorder(tree, tree.root)).toString());
    Tree mirrored = mirror(tree);
    print("Mirror of " + names[i] + " tree: " + (inorder(mirrored, mirrored.root)).toString());
    i = i + 1;
  }
}

void _start() {
  _main();
}

void main() => _start();
