// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

class Tree {
  List<int> values;
  List<int> left;
  List<int> right;
  int root;
  Tree({required this.values, required this.left, required this.right, required this.root});
}

void mirror_node(List<int> left, List<int> right, int idx) {
  if (idx == -1) {
    return;
  }
  int temp = left[idx];
  while (left.length <= idx) { left.add(0); } left[idx] = right[idx];
  while (right.length <= idx) { right.add(0); } right[idx] = temp;
  mirror_node(left, right, left[idx]);
  mirror_node(left, right, right[idx]);
}

Tree mirror(Tree tree) {
  mirror_node(tree.left, tree.right, tree.root);
  return tree;
}

List<int> inorder(Tree tree, int idx) {
  if (idx == -1) {
    return ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> left_vals = inorder(tree, tree.left[idx]);
  List<int> right_vals = inorder(tree, tree.right[idx]);
  return ([...[...left_vals, ...[tree.values[idx]]], ...right_vals] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

Tree make_tree_zero() {
  return Tree(values: [0], left: [-1], right: [-1], root: 0);
}

Tree make_tree_seven() {
  return Tree(values: [1, 2, 3, 4, 5, 6, 7], left: [1, 3, 5, -1, -1, -1, -1], right: [2, 4, 6, -1, -1, -1, -1], root: 0);
}

Tree make_tree_nine() {
  return Tree(values: [1, 2, 3, 4, 5, 6, 7, 8, 9], left: [1, 3, -1, 6, -1, -1, -1, -1, -1], right: [2, 4, 5, 7, 8, -1, -1, -1, -1], root: 0);
}

void _main() {
  List<String> names = ["zero", "seven", "nine"];
  List<Tree> trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()];
  int i = 0;
  while (i < trees.length) {
    Tree tree = trees[i];
    print("      The " + names[i] + " tree: " + _str(inorder(tree, tree.root)));
    Tree mirrored = mirror(tree);
    print("Mirror of " + names[i] + " tree: " + _str(inorder(mirrored, mirrored.root)));
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
