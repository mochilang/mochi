// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int val;
  int left;
  int right;
  Node({required this.val, required this.left, required this.right});
}

class Info {
  bool is_bst;
  int min_val;
  int max_val;
  int total;
  int best;
  Info({required this.is_bst, required this.min_val, required this.max_val, required this.total, required this.best});
}

int min_int(int a, int b) {
  if (a < b) {
    return a;
  }
  return b;
}

int max_int(int a, int b) {
  if (a > b) {
    return a;
  }
  return b;
}

Info solver(List<Node> nodes, int idx) {
  if (idx == 0 - 1) {
    return Info(is_bst: true, min_val: 2147483647, max_val: -2147483648, total: 0, best: 0);
  }
  Node node = nodes[idx];
  Info left_info = solver(nodes, node.left);
  Info right_info = solver(nodes, node.right);
  int current_best = max_int(left_info.best, right_info.best);
  if (left_info.is_bst && right_info.is_bst && left_info.max_val < node.val && node.val < right_info.min_val) {
    int sum_val = left_info.total + right_info.total + node.val;
    current_best = max_int(current_best, sum_val);
    return Info(is_bst: true, min_val: min_int(left_info.min_val, node.val), max_val: max_int(right_info.max_val, node.val), total: sum_val, best: current_best);
  }
  return Info(is_bst: false, min_val: 0, max_val: 0, total: 0, best: current_best);
}

int max_sum_bst(List<Node> nodes, int root) {
  Info info = solver(nodes, root);
  return info.best;
}

void _main() {
  List<Node> t1_nodes = [Node(val: 4, left: 1, right: 0 - 1), Node(val: 3, left: 2, right: 3), Node(val: 1, left: 0 - 1, right: 0 - 1), Node(val: 2, left: 0 - 1, right: 0 - 1)];
  print(max_sum_bst(t1_nodes, 0));
  List<Node> t2_nodes = [Node(val: -4, left: 1, right: 2), Node(val: -2, left: 0 - 1, right: 0 - 1), Node(val: -5, left: 0 - 1, right: 0 - 1)];
  print(max_sum_bst(t2_nodes, 0));
  List<Node> t3_nodes = [Node(val: 1, left: 1, right: 2), Node(val: 4, left: 3, right: 4), Node(val: 3, left: 5, right: 6), Node(val: 2, left: 0 - 1, right: 0 - 1), Node(val: 4, left: 0 - 1, right: 0 - 1), Node(val: 2, left: 0 - 1, right: 0 - 1), Node(val: 5, left: 7, right: 8), Node(val: 4, left: 0 - 1, right: 0 - 1), Node(val: 6, left: 0 - 1, right: 0 - 1)];
  print(max_sum_bst(t3_nodes, 0));
}

void _start() {
  _main();
}

void main() => _start();
