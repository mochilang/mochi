// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class FenwickTree {
  int size;
  List<int> tree;
  FenwickTree({required this.size, required this.tree});
}

FenwickTree fenwick_from_list(List<int> arr) {
  int size = arr.length;
  List<int> tree = <int>[];
  int i = 0;
  while (i < size) {
    tree = [...tree, arr[i]];
    i = i + 1;
  }
  i = 1;
  while (i < size) {
    int j = fenwick_next(i);
    if (j < size) {
    while (tree.length <= j) { tree.add(0); } tree[j] = tree[j] + tree[i];
  }
    i = i + 1;
  }
  return FenwickTree(size: size, tree: tree);
}

FenwickTree fenwick_empty(int size) {
  List<int> tree = <int>[];
  int i = 0;
  while (i < size) {
    tree = [...tree, 0];
    i = i + 1;
  }
  return FenwickTree(size: size, tree: tree);
}

List<int> fenwick_get_array(FenwickTree f) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < f.size) {
    arr = [...arr, f.tree[i]];
    i = i + 1;
  }
  i = f.size - 1;
  while (i > 0) {
    int j = fenwick_next(i);
    if (j < f.size) {
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[j] - arr[i];
  }
    i = i - 1;
  }
  return arr;
}

int bit_and(int a, int b) {
  int ua = a;
  int ub = b;
  int res = 0;
  int bit = 1;
  while (ua != 0 || ub != 0) {
    if (ua % 2 == 1 && ub % 2 == 1) {
    res = res + bit;
  }
    ua = ua ~/ 2 as int;
    ub = ub ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int low_bit(int x) {
  if (x == 0) {
    return 0;
  }
  return x - bit_and(x, x - 1);
}

int fenwick_next(int index) {
  return index + low_bit(index);
}

int fenwick_prev(int index) {
  return index - low_bit(index);
}

FenwickTree fenwick_add(FenwickTree f, int index, int value) {
  List<int> tree = f.tree;
  if (index == 0) {
    while (tree.length <= 0) { tree.add(0); } tree[0] = tree[0] + value;
    return FenwickTree(size: f.size, tree: tree);
  }
  int i = index;
  while (i < f.size) {
    while (tree.length <= i) { tree.add(0); } tree[i] = tree[i] + value;
    i = fenwick_next(i);
  }
  return FenwickTree(size: f.size, tree: tree);
}

FenwickTree fenwick_update(FenwickTree f, int index, int value) {
  int current = fenwick_get(f, index);
  return fenwick_add(f, index, value - current);
}

int fenwick_prefix(FenwickTree f, int right) {
  if (right == 0) {
    return 0;
  }
  int result = f.tree[0];
  int r = right - 1;
  while (r > 0) {
    result = result + f.tree[r];
    r = fenwick_prev(r);
  }
  return result;
}

int fenwick_query(FenwickTree f, int left, int right) {
  return fenwick_prefix(f, right) - fenwick_prefix(f, left);
}

int fenwick_get(FenwickTree f, int index) {
  return fenwick_query(f, index, index + 1);
}

int fenwick_rank_query(FenwickTree f, int value) {
  int v = value - f.tree[0];
  if (v < 0) {
    return -1;
  }
  int j = 1;
  while (j * 2 < f.size) {
    j = j * 2;
  }
  int i = 0;
  int jj = j;
  while (jj > 0) {
    if (i + jj < f.size && f.tree[i + jj] <= v) {
    v = v - f.tree[i + jj];
    i = i + jj;
  }
    jj = jj ~/ 2;
  }
  return i;
}

FenwickTree f_base = fenwick_from_list([1, 2, 3, 4, 5]);
FenwickTree f = fenwick_from_list([1, 2, 3, 4, 5]);
FenwickTree f2 = fenwick_from_list([1, 2, 3, 4, 5]);
FenwickTree f3 = fenwick_from_list([1, 2, 0, 3, 0, 5]);
void main() {
  print("[" + fenwick_get_array(f_base).join(', ') + "]");
  f = fenwick_add(f, 0, 1);
  f = fenwick_add(f, 1, 2);
  f = fenwick_add(f, 2, 3);
  f = fenwick_add(f, 3, 4);
  f = fenwick_add(f, 4, 5);
  print("[" + fenwick_get_array(f).join(', ') + "]");
  print(fenwick_prefix(f2, 3));
  print(fenwick_query(f2, 1, 4));
  print(fenwick_rank_query(f3, 0));
  print(fenwick_rank_query(f3, 2));
  print(fenwick_rank_query(f3, 1));
  print(fenwick_rank_query(f3, 3));
  print(fenwick_rank_query(f3, 5));
  print(fenwick_rank_query(f3, 6));
  print(fenwick_rank_query(f3, 11));
}
