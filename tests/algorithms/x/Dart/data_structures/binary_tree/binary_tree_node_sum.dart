// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int value;
  int left;
  int right;
  Node({required this.value, required this.left, required this.right});
}

int node_sum(List<Node> tree, int index) {
  if (index == -1) {
    return 0;
  }
  Node node = tree[index];
  return node.value + node_sum(tree, node.left) + node_sum(tree, node.right);
}

List<Node> example = [Node(value: 10, left: 1, right: 2), Node(value: 5, left: 3, right: -1), Node(value: -3, left: 4, right: 5), Node(value: 12, left: -1, right: -1), Node(value: 8, left: -1, right: -1), Node(value: 0, left: -1, right: -1)];
void main() {
  print(node_sum(example, 0));
}
