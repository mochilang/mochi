// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> A = <int>[];
int N = 0;
List<int> st = <int>[];
int left_child(int idx) {
  return idx * 2;
}

int right_child(int idx) {
  return idx * 2 + 1;
}

dynamic build(int idx, int left, int right) {
  if (left == right) {
    while (st.length <= idx) { st.add(0); } st[idx] = A[left];
  } else {
    int mid = (left + right) ~/ 2;
    build(left_child(idx), left, mid);
    build(right_child(idx), mid + 1, right);
    int left_val = st[left_child(idx)];
    int right_val = st[right_child(idx)];
    while (st.length <= idx) { st.add(0); } st[idx] = (left_val > right_val ? left_val : right_val);
  }
}

bool update_recursive(int idx, int left, int right, int a, int b, int val) {
  if (right < a || left > b) {
    return true;
  }
  if (left == right) {
    while (st.length <= idx) { st.add(0); } st[idx] = val;
    return true;
  }
  int mid = (left + right) ~/ 2;
  update_recursive(left_child(idx), left, mid, a, b, val);
  update_recursive(right_child(idx), mid + 1, right, a, b, val);
  int left_val = st[left_child(idx)];
  int right_val = st[right_child(idx)];
  while (st.length <= idx) { st.add(0); } st[idx] = (left_val > right_val ? left_val : right_val);
  return true;
}

bool update(int a, int b, int val) {
  return update_recursive(1, 0, N - 1, a - 1, b - 1, val);
}

int NEG_INF = -1000000000;
int query_recursive(int idx, int left, int right, int a, int b) {
  if (right < a || left > b) {
    return NEG_INF;
  }
  if (left >= a && right <= b) {
    return st[idx];
  }
  int mid = (left + right) ~/ 2;
  int q1 = query_recursive(left_child(idx), left, mid, a, b);
  int q2 = query_recursive(right_child(idx), mid + 1, right, a, b);
  return (q1 > q2 ? q1 : q2);
}

int query(int a, int b) {
  return query_recursive(1, 0, N - 1, a - 1, b - 1);
}

dynamic show_data() {
  int i = 0;
  List<int> show_list = <int>[];
  while (i < N) {
    show_list = [...show_list, query(i + 1, i + 1)];
    i = i + 1;
  }
  print(show_list);
}

void _main() {
  A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8];
  N = A.length;
  int i = 0;
  while (i < 4 * N) {
    st = [...st, 0];
    i = i + 1;
  }
  if (N > 0) {
    build(1, 0, N - 1);
  }
  print(query(4, 6));
  print(query(7, 11));
  print(query(7, 12));
  update(1, 3, 111);
  print(query(1, 15));
  update(7, 8, 235);
  show_data();
}

void _start() {
  _main();
}

void main() => _start();
