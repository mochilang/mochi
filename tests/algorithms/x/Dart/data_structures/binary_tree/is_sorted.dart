// Generated by Mochi transpiler
String _str(dynamic v) => v.toString();

class Tree {
  List<double> data;
  List<int> left;
  List<int> right;
  Tree({required this.data, required this.left, required this.right});
}

BigInt NONE = BigInt.from(0 - 1);
List<double> inorder(Tree tree, int index) {
  List<double> res = <double>[];
  if (BigInt.from(index) == NONE) {
    return res;
  }
  int left_idx = tree.left[index];
  if (BigInt.from(left_idx) != NONE) {
    res = List<double>.from([...res, ...inorder(tree, left_idx)]);
  }
  res = [...res, tree.data[index]];
  int right_idx = tree.right[index];
  if (BigInt.from(right_idx) != NONE) {
    res = List<double>.from([...res, ...inorder(tree, right_idx)]);
  }
  return res;
}

bool is_sorted(Tree tree, int index) {
  if (BigInt.from(index) == NONE) {
    return true;
  }
  int left_idx = tree.left[index];
  if (BigInt.from(left_idx) != NONE) {
    if (tree.data[index] < tree.data[left_idx]) {
    return false;
  };
    if (!is_sorted(tree, left_idx)) {
    return false;
  };
  }
  int right_idx = tree.right[index];
  if (BigInt.from(right_idx) != NONE) {
    if (tree.data[index] > tree.data[right_idx]) {
    return false;
  };
    if (!is_sorted(tree, right_idx)) {
    return false;
  };
  }
  return true;
}

Tree tree1 = Tree(data: [2.1, 2.0, 2.2], left: [1, NONE, NONE], right: [2, NONE, NONE]);
Tree tree2 = Tree(data: [2.1, 2.0, 2.0], left: [1, NONE, NONE], right: [2, NONE, NONE]);
Tree tree3 = Tree(data: [2.1, 2.0, 2.1], left: [1, NONE, NONE], right: [2, NONE, NONE]);
void main() {
  print("Tree " + _str(inorder(tree1, 0)) + " is sorted: " + _str(is_sorted(tree1, 0)));
  print("Tree " + _str(inorder(tree2, 0)) + " is sorted: " + _str(is_sorted(tree2, 0)));
  print("Tree " + _str(inorder(tree3, 0)) + " is sorted: " + _str(is_sorted(tree3, 0)));
}
