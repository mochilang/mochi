// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> node_data = [0] as List<int>;
List<int> left_child = [0] as List<int>;
List<int> right_child = [0] as List<int>;
int new_node(int value) {
  node_data = [...node_data, value];
  left_child = [...left_child, 0];
  right_child = [...right_child, 0];
  return node_data.length - 1;
}

int build_tree() {
  int root = new_node(1);
  int n2 = new_node(2);
  int n5 = new_node(5);
  int n3 = new_node(3);
  int n4 = new_node(4);
  int n6 = new_node(6);
  while (left_child.length <= root) { left_child.add(0); } left_child[root] = n2;
  while (right_child.length <= root) { right_child.add(0); } right_child[root] = n5;
  while (left_child.length <= n2) { left_child.add(0); } left_child[n2] = n3;
  while (right_child.length <= n2) { right_child.add(0); } right_child[n2] = n4;
  while (right_child.length <= n5) { right_child.add(0); } right_child[n5] = n6;
  return root;
}

List<int> flatten(int root) {
  if (root == 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> res = [node_data[root]] as List<int>;
  List<int> left_vals = flatten(left_child[root]);
  List<int> right_vals = flatten(right_child[root]);
  int i = 0;
  while (i < left_vals.length) {
    res = [...res, left_vals[i]];
    i = i + 1;
  }
  i = 0;
  while (i < right_vals.length) {
    res = [...res, right_vals[i]];
    i = i + 1;
  }
  return res;
}

dynamic display(List<int> values) {
  String s = "";
  int i = 0;
  while (i < values.length) {
    if (i == 0) {
    s = (values[i]).toString();
  } else {
    s = s + " " + (values[i]).toString();
  }
    i = i + 1;
  }
  print(s);
}

int root = build_tree();
List<int> vals = flatten(root);
void main() {
  print("Flattened Linked List:");
  display(vals);
}
