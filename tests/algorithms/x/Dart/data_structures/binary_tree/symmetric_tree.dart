// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<List<int>> make_symmetric_tree() {
  return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [4, -1, -1], [3, -1, -1]];
}

List<List<int>> make_asymmetric_tree() {
  return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [3, -1, -1], [4, -1, -1]];
}

bool is_symmetric_tree(List<List<int>> tree) {
  List<int> stack = [tree[0][1], tree[0][2]];
  while (stack.length >= 2) {
    int left = stack[stack.length - 2];
    int right = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 2);
    if (left == -1 && right == -1) {
    continue;
  }
    if (left == -1 || right == -1) {
    return false;
  }
    List<int> lnode = tree[left];
    List<int> rnode = tree[right];
    if (lnode[0] != rnode[0]) {
    return false;
  }
    stack = [...stack, lnode[1]];
    stack = [...stack, rnode[2]];
    stack = [...stack, lnode[2]];
    stack = [...stack, rnode[1]];
  }
  return true;
}

List<List<int>> symmetric_tree = make_symmetric_tree();
List<List<int>> asymmetric_tree = make_asymmetric_tree();
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(is_symmetric_tree(symmetric_tree)));
  print(_str(is_symmetric_tree(asymmetric_tree)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
