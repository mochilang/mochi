// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> init_int_array(int n) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < 4 * n + 5) {
    arr = [...arr, 0];
    i = i + 1;
  }
  return arr;
}

List<bool> init_bool_array(int n) {
  List<bool> arr = <bool>[];
  int i = 0;
  while (i < 4 * n + 5) {
    arr = [...arr, false];
    i = i + 1;
  }
  return arr;
}

int left(int idx) {
  return idx * 2;
}

int right(int idx) {
  return idx * 2 + 1;
}

void build(List<int> segment_tree, int idx, int l, int r, List<int> a) {
  if (l == r) {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = a[l - 1];
  } else {
    int mid = (l + r) ~/ 2;
    build(segment_tree, left(idx), l, mid, a);
    build(segment_tree, right(idx), mid + 1, r, a);
    int lv = segment_tree[left(idx)];
    int rv = segment_tree[right(idx)];
    if (lv > rv) {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = lv;
  } else {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = rv;
  };
  }
}

void update(List<int> segment_tree, List<int> lazy, List<bool> flag, int idx, int l, int r, int a, int b, int val) {
  if (flag[idx]) {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = lazy[idx];
    while (flag.length <= idx) { flag.add(false); } flag[idx] = false;
    if (l != r) {
    while (lazy.length <= left(idx)) { lazy.add(0); } lazy[left(idx)] = lazy[idx];
    while (lazy.length <= right(idx)) { lazy.add(0); } lazy[right(idx)] = lazy[idx];
    while (flag.length <= left(idx)) { flag.add(false); } flag[left(idx)] = true;
    while (flag.length <= right(idx)) { flag.add(false); } flag[right(idx)] = true;
  };
  }
  if (r < a || l > b) {
    return;
  }
  if (l >= a && r <= b) {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = val;
    if (l != r) {
    while (lazy.length <= left(idx)) { lazy.add(0); } lazy[left(idx)] = val;
    while (lazy.length <= right(idx)) { lazy.add(0); } lazy[right(idx)] = val;
    while (flag.length <= left(idx)) { flag.add(false); } flag[left(idx)] = true;
    while (flag.length <= right(idx)) { flag.add(false); } flag[right(idx)] = true;
  };
    return;
  }
  int mid = (l + r) ~/ 2;
  update(segment_tree, lazy, flag, left(idx), l, mid, a, b, val);
  update(segment_tree, lazy, flag, right(idx), mid + 1, r, a, b, val);
  int lv = segment_tree[left(idx)];
  int rv = segment_tree[right(idx)];
  if (lv > rv) {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = lv;
  } else {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = rv;
  }
}

int NEG_INF = -1000000000;
int query(List<int> segment_tree, List<int> lazy, List<bool> flag, int idx, int l, int r, int a, int b) {
  if (flag[idx]) {
    while (segment_tree.length <= idx) { segment_tree.add(0); } segment_tree[idx] = lazy[idx];
    while (flag.length <= idx) { flag.add(false); } flag[idx] = false;
    if (l != r) {
    while (lazy.length <= left(idx)) { lazy.add(0); } lazy[left(idx)] = lazy[idx];
    while (lazy.length <= right(idx)) { lazy.add(0); } lazy[right(idx)] = lazy[idx];
    while (flag.length <= left(idx)) { flag.add(false); } flag[left(idx)] = true;
    while (flag.length <= right(idx)) { flag.add(false); } flag[right(idx)] = true;
  };
  }
  if (r < a || l > b) {
    return NEG_INF;
  }
  if (l >= a && r <= b) {
    return segment_tree[idx];
  }
  int mid = (l + r) ~/ 2;
  int q1 = query(segment_tree, lazy, flag, left(idx), l, mid, a, b);
  int q2 = query(segment_tree, lazy, flag, right(idx), mid + 1, r, a, b);
  if (q1 > q2) {
    return q1;
  } else {
    return q2;
  }
}

String segtree_to_string(List<int> segment_tree, List<int> lazy, List<bool> flag, int n) {
  String res = "[";
  int i = 1;
  while (i <= n) {
    int v = query(segment_tree, lazy, flag, 1, 1, n, i, i);
    res = res + (v).toString();
    if (i < n) {
    res = res + ", ";
  }
    i = i + 1;
  }
  res = res + "]";
  return res;
}

List<int> A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8];
int n = 15;
List<int> segment_tree = init_int_array(n);
List<int> lazy = init_int_array(n);
List<bool> flag = init_bool_array(n);
void main() {
  build(segment_tree, 1, 1, n, A);
  print(query(segment_tree, lazy, flag, 1, 1, n, 4, 6));
  print(query(segment_tree, lazy, flag, 1, 1, n, 7, 11));
  print(query(segment_tree, lazy, flag, 1, 1, n, 7, 12));
  update(segment_tree, lazy, flag, 1, 1, n, 1, 3, 111);
  print(query(segment_tree, lazy, flag, 1, 1, n, 1, 15));
  update(segment_tree, lazy, flag, 1, 1, n, 7, 8, 235);
  print(segtree_to_string(segment_tree, lazy, flag, n));
}
