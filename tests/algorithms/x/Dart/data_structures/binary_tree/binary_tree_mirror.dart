// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

void binary_tree_mirror_dict(Map<int, List<int>> tree, int root) {
  if (root == 0 || !tree.containsKey(root)) {
    return;
  }
  List<int> children = tree[root]!;
  int left = children[0];
  int right = children[1];
  tree[root] = [right, left];
  binary_tree_mirror_dict(tree, left);
  binary_tree_mirror_dict(tree, right);
}

Map<int, List<int>> binary_tree_mirror(Map<int, List<int>> binary_tree, int root) {
  if (binary_tree.length == 0) {
    _error("binary tree cannot be empty");
  }
  if (!binary_tree.containsKey(root)) {
    _error("root " + _str(root) + " is not present in the binary_tree");
  }
  Map<int, List<int>> tree_copy = <int, List<int>>{};
  for (int k in binary_tree.keys) {
    tree_copy[k] = binary_tree[k]!;
  }
  binary_tree_mirror_dict(tree_copy, root);
  return tree_copy;
}

void _main() {
  Map<int, List<int>> binary_tree = {1: [2, 3], 2: [4, 5], 3: [6, 7], 7: [8, 9]};
  print("Binary tree: " + _str(binary_tree));
  Map<int, List<int>> mirrored = binary_tree_mirror(binary_tree, 1);
  print("Binary tree mirror: " + _str(mirrored));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
