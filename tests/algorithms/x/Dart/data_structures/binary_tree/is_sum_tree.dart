// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int value;
  int left;
  int right;
  Node({required this.value, required this.left, required this.right});
}

int tree_sum(List<Node> nodes, int idx) {
  if (idx == -1) {
    return 0;
  }
  Node node = nodes[idx];
  return node.value + tree_sum(nodes, node.left) + tree_sum(nodes, node.right);
}

bool is_sum_node(List<Node> nodes, int idx) {
  Node node = nodes[idx];
  if (node.left == -1 && node.right == -1) {
    return true;
  }
  int left_sum = tree_sum(nodes, node.left);
  int right_sum = tree_sum(nodes, node.right);
  if (node.value != left_sum + right_sum) {
    return false;
  }
  bool left_ok = true;
  if (node.left != -1) {
    left_ok = is_sum_node(nodes, node.left);
  }
  bool right_ok = true;
  if (node.right != -1) {
    right_ok = is_sum_node(nodes, node.right);
  }
  return left_ok && right_ok;
}

List<Node> build_a_tree() {
  return [Node(value: 11, left: 1, right: 2), Node(value: 2, left: 3, right: 4), Node(value: 29, left: 5, right: 6), Node(value: 1, left: -1, right: -1), Node(value: 7, left: -1, right: -1), Node(value: 15, left: -1, right: -1), Node(value: 40, left: 7, right: -1), Node(value: 35, left: -1, right: -1)];
}

List<Node> build_a_sum_tree() {
  return [Node(value: 26, left: 1, right: 2), Node(value: 10, left: 3, right: 4), Node(value: 3, left: -1, right: 5), Node(value: 4, left: -1, right: -1), Node(value: 6, left: -1, right: -1), Node(value: 3, left: -1, right: -1)];
}

void main() {
}
