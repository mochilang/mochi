// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  String data;
  int prev;
  int next;
  Node({required this.data, required this.prev, required this.next});
}

class LinkedDeque {
  List<Node> nodes;
  int header;
  int trailer;
  int size;
  LinkedDeque({required this.nodes, required this.header, required this.trailer, required this.size});
}

class DeleteResult {
  LinkedDeque deque;
  String value;
  DeleteResult({required this.deque, required this.value});
}

LinkedDeque new_deque() {
  List<Node> nodes = <Node>[];
  nodes = [...nodes, Node(data: "", prev: -1, next: 1)];
  nodes = [...nodes, Node(data: "", prev: 0, next: -1)];
  return LinkedDeque(nodes: nodes, header: 0, trailer: 1, size: 0);
}

bool is_empty(LinkedDeque d) {
  return d.size == 0;
}

String front(LinkedDeque d) {
  if (is_empty(d)) {
    throw Exception("List is empty");
  }
  Node head = d.nodes[d.header];
  int idx = head.next;
  Node node = d.nodes[idx];
  return node.data;
}

String back(LinkedDeque d) {
  if (is_empty(d)) {
    throw Exception("List is empty");
  }
  Node tail = d.nodes[d.trailer];
  int idx = tail.prev;
  Node node = d.nodes[idx];
  return node.data;
}

LinkedDeque insert(LinkedDeque d, int pred, String value, int succ) {
  List<Node> nodes = d.nodes;
  int new_idx = nodes.length;
  nodes = [...nodes, Node(data: value, prev: pred, next: succ)];
  Node pred_node = nodes[pred];
  pred_node.next = new_idx;
  while (nodes.length <= pred) { nodes.add(null); } nodes[pred] = pred_node;
  Node succ_node = nodes[succ];
  succ_node.prev = new_idx;
  while (nodes.length <= succ) { nodes.add(null); } nodes[succ] = succ_node;
  d.nodes = nodes;
  d.size = d.size + 1;
  return d;
}

DeleteResult delete(LinkedDeque d, int idx) {
  List<Node> nodes = d.nodes;
  Node node = nodes[idx];
  int pred = node.prev;
  int succ = node.next;
  Node pred_node = nodes[pred];
  pred_node.next = succ;
  while (nodes.length <= pred) { nodes.add(null); } nodes[pred] = pred_node;
  Node succ_node = nodes[succ];
  succ_node.prev = pred;
  while (nodes.length <= succ) { nodes.add(null); } nodes[succ] = succ_node;
  String val = node.data;
  d.nodes = nodes;
  d.size = d.size - 1;
  return DeleteResult(deque: d, value: val);
}

LinkedDeque add_first(LinkedDeque d, String value) {
  Node head = d.nodes[d.header];
  int succ = head.next;
  return insert(d, d.header, value, succ);
}

LinkedDeque add_last(LinkedDeque d, String value) {
  Node tail = d.nodes[d.trailer];
  int pred = tail.prev;
  return insert(d, pred, value, d.trailer);
}

DeleteResult remove_first(LinkedDeque d) {
  if (is_empty(d)) {
    throw Exception("remove_first from empty list");
  }
  Node head = d.nodes[d.header];
  int idx = head.next;
  return delete(d, idx);
}

DeleteResult remove_last(LinkedDeque d) {
  if (is_empty(d)) {
    throw Exception("remove_first from empty list");
  }
  Node tail = d.nodes[d.trailer];
  int idx = tail.prev;
  return delete(d, idx);
}

void _main() {
  LinkedDeque d = new_deque();
  d = add_first(d, "A");
  print(front(d));
  d = add_last(d, "B");
  print(back(d));
  DeleteResult r = remove_first(d);
  d = r.deque;
  print(r.value);
  r = remove_last(d);
  d = r.deque;
  print(r.value);
  print((is_empty(d)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
