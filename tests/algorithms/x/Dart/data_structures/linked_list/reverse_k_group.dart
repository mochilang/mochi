// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class LinkedList {
  List<int> data;
  LinkedList({required this.data});
}

String to_string(LinkedList list) {
  if (list.data.length == 0) {
    return "";
  }
  String s = (list.data[0]).toString();
  int i = 1;
  while (i < list.data.length) {
    s = s + " -> " + (list.data[i]).toString();
    i = i + 1;
  }
  return s;
}

LinkedList reverse_k_nodes(LinkedList list, int k) {
  if (k <= 1) {
    return list;
  }
  List<int> res = <int>[];
  int i = 0;
  while (i < list.data.length) {
    int j = 0;
    List<int> group = <int>[];
    while (j < k && i + j < list.data.length) {
    group = [...group, list.data[i + j]];
    j = j + 1;
  }
    if (group.length == k) {
    int g = k - 1;
    while (g >= 0) {
    res = [...res, group[g]];
    g = g - 1;
  };
  } else {
    int g = 0;
    while (g < group.length) {
    res = [...res, group[g]];
    g = g + 1;
  };
  }
    i = i + k;
  }
  return LinkedList(data: res);
}

void _main() {
  LinkedList ll = LinkedList(data: [1, 2, 3, 4, 5]);
  print("Original Linked List: " + to_string(ll));
  int k = 2;
  ll = reverse_k_nodes(ll, k);
  print("After reversing groups of size " + (k).toString() + ": " + to_string(ll));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
