// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class LinkedList {
  List<int> next;
  int head;
  LinkedList({required this.next, required this.head});
}

BigInt NULL = BigInt.from(0 - 1);
LinkedList empty_list() {
  return LinkedList(next: ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList(), head: NULL);
}

LinkedList add_node(LinkedList list, int value) {
  List<int> nexts = list.next;
  int new_index = nexts.length;
  nexts = ([...nexts, NULL] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  if (BigInt.from(list.head) == NULL) {
    return LinkedList(next: nexts, head: new_index);
  }
  int last = list.head;
  while (BigInt.from(nexts[last]) != NULL) {
    last = nexts[last];
  }
  List<int> new_nexts = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  int i = 0;
  while (i < nexts.length) {
    if (i == last) {
    new_nexts = [...new_nexts, new_index];
  } else {
    new_nexts = [...new_nexts, nexts[i]];
  }
    i = i + 1;
  }
  return LinkedList(next: new_nexts, head: list.head);
}

LinkedList set_next(LinkedList list, int index, int next_index) {
  List<int> nexts = list.next;
  List<int> new_nexts = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  int i = 0;
  while (i < nexts.length) {
    if (i == index) {
    new_nexts = [...new_nexts, next_index];
  } else {
    new_nexts = [...new_nexts, nexts[i]];
  }
    i = i + 1;
  }
  return LinkedList(next: new_nexts, head: list.head);
}

bool detect_cycle(LinkedList list) {
  if (BigInt.from(list.head) == NULL) {
    return false;
  }
  List<int> nexts = list.next;
  int slow = list.head;
  int fast = list.head;
  while (BigInt.from(fast) != NULL && BigInt.from(nexts[fast]) != NULL) {
    slow = nexts[slow];
    fast = nexts[nexts[fast]];
    if (slow == fast) {
    return true;
  }
  }
  return false;
}

void _main() {
  LinkedList ll = empty_list();
  ll = add_node(ll, 1);
  ll = add_node(ll, 2);
  ll = add_node(ll, 3);
  ll = add_node(ll, 4);
  ll = set_next(ll, 3, 1);
  print(detect_cycle(ll));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
