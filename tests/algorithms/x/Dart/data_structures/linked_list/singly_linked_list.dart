// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class SinglyLinkedList {
  List<int> data;
  SinglyLinkedList({required this.data});
}

class DeleteResult {
  SinglyLinkedList list;
  int value;
  DeleteResult({required this.list, required this.value});
}

SinglyLinkedList empty_list() {
  return SinglyLinkedList(data: []);
}

int length(SinglyLinkedList list) {
  return list.data.length;
}

bool is_empty(SinglyLinkedList list) {
  return list.data.length == 0;
}

String to_string(SinglyLinkedList list) {
  if (list.data.length == 0) {
    return "";
  }
  String s = (list.data[0]).toString();
  int i = 1;
  while (i < list.data.length) {
    s = s + " -> " + (list.data[i]).toString();
    i = i + 1;
  }
  return s;
}

SinglyLinkedList insert_nth(SinglyLinkedList list, int index, int value) {
  if (index < 0 || index > list.data.length) {
    throw Exception("index out of range");
  }
  List<int> res = <int>[];
  int i = 0;
  while (i < index) {
    res = [...res, list.data[i]];
    i = i + 1;
  }
  res = [...res, value];
  while (i < list.data.length) {
    res = [...res, list.data[i]];
    i = i + 1;
  }
  return SinglyLinkedList(data: res);
}

SinglyLinkedList insert_head(SinglyLinkedList list, int value) {
  return insert_nth(list, 0, value);
}

SinglyLinkedList insert_tail(SinglyLinkedList list, int value) {
  return insert_nth(list, list.data.length, value);
}

DeleteResult delete_nth(SinglyLinkedList list, int index) {
  if (index < 0 || index >= list.data.length) {
    throw Exception("index out of range");
  }
  List<int> res = <int>[];
  int val = 0;
  int i = 0;
  while (i < list.data.length) {
    if (i == index) {
    val = list.data[i];
  } else {
    res = [...res, list.data[i]];
  }
    i = i + 1;
  }
  return DeleteResult(list: SinglyLinkedList(data: res), value: val);
}

DeleteResult delete_head(SinglyLinkedList list) {
  return delete_nth(list, 0);
}

DeleteResult delete_tail(SinglyLinkedList list) {
  return delete_nth(list, list.data.length - 1);
}

int get_item(SinglyLinkedList list, int index) {
  if (index < 0 || index >= list.data.length) {
    throw Exception("index out of range");
  }
  return list.data[index];
}

SinglyLinkedList set_item(SinglyLinkedList list, int index, int value) {
  if (index < 0 || index >= list.data.length) {
    throw Exception("index out of range");
  }
  List<int> res = <int>[];
  int i = 0;
  while (i < list.data.length) {
    if (i == index) {
    res = [...res, value];
  } else {
    res = [...res, list.data[i]];
  }
    i = i + 1;
  }
  return SinglyLinkedList(data: res);
}

SinglyLinkedList reverse_list(SinglyLinkedList list) {
  List<int> res = <int>[];
  int i = list.data.length - 1;
  while (i >= 0) {
    res = [...res, list.data[i]];
    i = i - 1;
  }
  return SinglyLinkedList(data: res);
}

void _main() {
  SinglyLinkedList lst = empty_list();
  int i = 1;
  while (i <= 5) {
    lst = insert_tail(lst, i);
    i = i + 1;
  }
  print(to_string(lst));
  lst = insert_head(lst, 0);
  print(to_string(lst));
  DeleteResult del = delete_head(lst);
  lst = del.list;
  print((del.value).toString());
  del = delete_tail(lst);
  lst = del.list;
  print((del.value).toString());
  del = delete_nth(lst, 2);
  lst = del.list;
  print((del.value).toString());
  lst = set_item(lst, 1, 99);
  print((get_item(lst, 1)).toString());
  lst = reverse_list(lst);
  print(to_string(lst));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
