// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class List {
  List<int> data;
  List({required this.data});
}

List empty_list() {
  return List(data: []);
}

List push(List lst, int value) {
  List<int> res = [value];
  int i = 0;
  while (i < lst.data.length) {
    res = [...res, lst.data[i]];
    i = i + 1;
  }
  return List(data: res);
}

int middle_element(List lst) {
  int n = lst.data.length;
  if (n == 0) {
    print("No element found.");
    return 0;
  }
  int slow = 0;
  int fast = 0;
  while (fast + 1 < n) {
    fast = fast + 2;
    slow = slow + 1;
  }
  return lst.data[slow];
}

void _main() {
  List lst = empty_list();
  middle_element(lst);
  lst = push(lst, 5);
  print(5);
  lst = push(lst, 6);
  print(6);
  lst = push(lst, 8);
  print(8);
  lst = push(lst, 8);
  print(8);
  lst = push(lst, 10);
  print(10);
  lst = push(lst, 12);
  print(12);
  lst = push(lst, 17);
  print(17);
  lst = push(lst, 7);
  print(7);
  lst = push(lst, 3);
  print(3);
  lst = push(lst, 20);
  print(20);
  lst = push(lst, -20);
  print(-20);
  print(middle_element(lst));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
