// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class SortedLinkedList {
  List<int> values;
  SortedLinkedList({required this.values});
}

List<int> sort_list(List<int> nums) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < nums.length) {
    arr = [...arr, nums[i]];
    i = i + 1;
  }
  int j = 0;
  while (j < arr.length) {
    int k = j + 1;
    while (k < arr.length) {
    if (arr[k] < arr[j]) {
    int tmp = arr[j];
    while (arr.length <= j) { arr.add(0); } arr[j] = arr[k];
    while (arr.length <= k) { arr.add(0); } arr[k] = tmp;
  }
    k = k + 1;
  }
    j = j + 1;
  }
  return arr;
}

SortedLinkedList make_sorted_linked_list(List<int> ints) {
  return SortedLinkedList(values: sort_list(ints));
}

int len_sll(SortedLinkedList sll) {
  return sll.values.length;
}

String str_sll(SortedLinkedList sll) {
  String res = "";
  int i = 0;
  while (i < sll.values.length) {
    res = res + (sll.values[i]).toString();
    if (i + 1 < sll.values.length) {
    res = res + " -> ";
  }
    i = i + 1;
  }
  return res;
}

SortedLinkedList merge_lists(SortedLinkedList a, SortedLinkedList b) {
  List<int> combined = <int>[];
  int i = 0;
  while (i < a.values.length) {
    combined = [...combined, a.values[i]];
    i = i + 1;
  }
  i = 0;
  while (i < b.values.length) {
    combined = [...combined, b.values[i]];
    i = i + 1;
  }
  return make_sorted_linked_list(combined);
}

void _main() {
  List<int> test_data_odd = [3, 9, -11, 0, 7, 5, 1, -1];
  List<int> test_data_even = [4, 6, 2, 0, 8, 10, 3, -2];
  SortedLinkedList sll_one = make_sorted_linked_list(test_data_odd);
  SortedLinkedList sll_two = make_sorted_linked_list(test_data_even);
  SortedLinkedList merged = merge_lists(sll_one, sll_two);
  print((len_sll(merged)).toString());
  print(str_sll(merged));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
