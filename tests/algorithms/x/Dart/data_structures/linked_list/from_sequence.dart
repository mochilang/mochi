// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int data;
  int next;
  Node({required this.data, required this.next});
}

BigInt NIL = BigInt.from(0 - 1);
List<Node> nodes = <Node>[];
int make_linked_list(List<int> elements) {
  if (elements.length == 0) {
    throw Exception("The Elements List is empty");
  }
  nodes = List<Node>.from([]);
  nodes = [...nodes, Node(data: elements[0], next: NIL)];
  int head = 0;
  int current = head;
  int i = 1;
  while (i < elements.length) {
    nodes = [...nodes, Node(data: elements[i], next: NIL)];
    nodes[current]!.next = nodes.length - 1;
    current = nodes.length - 1;
    i = i + 1;
  }
  return head;
}

String node_to_string(int head) {
  String s = "";
  int index = head;
  while (BigInt.from(index) != NIL) {
    Node node = nodes[index];
    s = s + "<" + (node.data).toString() + "> ---> ";
    index = node.next;
  }
  s = s + "<END>";
  return s;
}

void _main() {
  List<int> list_data = [1, 3, 5, 32, 44, 12, 43];
  print("List: " + (list_data).toString());
  print("Creating Linked List from List.");
  int head = make_linked_list(list_data);
  print("Linked List:");
  print(node_to_string(head));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
