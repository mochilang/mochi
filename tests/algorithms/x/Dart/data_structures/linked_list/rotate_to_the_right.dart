// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String list_to_string(List<int> xs) {
  if (xs.length == 0) {
    return "";
  }
  String s = (xs[0]).toString();
  int i = 1;
  while (i < xs.length) {
    s = s + "->" + (xs[i]).toString();
    i = i + 1;
  }
  return s;
}

List<int> insert_node(List<int> xs, int data) {
  return [...xs, data];
}

List<int> rotate_to_the_right(List<int> xs, int places) {
  if (xs.length == 0) {
    throw Exception("The linked list is empty.");
  }
  int n = xs.length;
  int k = places % n;
  if (k == 0) {
    return xs;
  }
  int split = n - k;
  List<int> res = <int>[];
  int i = split;
  while (i < n) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  int j = 0;
  while (j < split) {
    res = [...res, xs[j]];
    j = j + 1;
  }
  return res;
}

void _main() {
  List<int> head = <int>[];
  head = insert_node(head, 5);
  head = insert_node(head, 1);
  head = insert_node(head, 2);
  head = insert_node(head, 4);
  head = insert_node(head, 3);
  print("Original list: " + list_to_string(head));
  int places = 3;
  List<int> new_head = rotate_to_the_right(head, places);
  print("After " + (places).toString() + " iterations: " + list_to_string(new_head));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
