// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class DoublyLinkedList {
  List<int> data;
  DoublyLinkedList({required this.data});
}

class DeleteResult {
  DoublyLinkedList list;
  int value;
  DeleteResult({required this.list, required this.value});
}

DoublyLinkedList empty_list() {
  return DoublyLinkedList(data: []);
}

int length(DoublyLinkedList list) {
  return list.data.length;
}

bool is_empty(DoublyLinkedList list) {
  return list.data.length == 0;
}

String to_string(DoublyLinkedList list) {
  if (list.data.length == 0) {
    return "";
  }
  String s = (list.data[0]).toString();
  int i = 1;
  while (i < list.data.length) {
    s = s + "->" + (list.data[i]).toString();
    i = i + 1;
  }
  return s;
}

DoublyLinkedList insert_nth(DoublyLinkedList list, int index, int value) {
  if (index < 0 || index > list.data.length) {
    throw Exception("index out of range");
  }
  List<int> res = <int>[];
  int i = 0;
  while (i < index) {
    res = [...res, list.data[i]];
    i = i + 1;
  }
  res = [...res, value];
  while (i < list.data.length) {
    res = [...res, list.data[i]];
    i = i + 1;
  }
  return DoublyLinkedList(data: res);
}

DoublyLinkedList insert_head(DoublyLinkedList list, int value) {
  return insert_nth(list, 0, value);
}

DoublyLinkedList insert_tail(DoublyLinkedList list, int value) {
  return insert_nth(list, list.data.length, value);
}

DeleteResult delete_nth(DoublyLinkedList list, int index) {
  if (index < 0 || index >= list.data.length) {
    throw Exception("index out of range");
  }
  List<int> res = <int>[];
  int i = 0;
  int removed = 0;
  while (i < list.data.length) {
    if (i == index) {
    removed = list.data[i];
  } else {
    res = [...res, list.data[i]];
  }
    i = i + 1;
  }
  return DeleteResult(list: DoublyLinkedList(data: res), value: removed);
}

DeleteResult delete_head(DoublyLinkedList list) {
  return delete_nth(list, 0);
}

DeleteResult delete_tail(DoublyLinkedList list) {
  return delete_nth(list, list.data.length - 1);
}

DeleteResult delete_value(DoublyLinkedList list, int value) {
  int idx = 0;
  bool found = false;
  while (idx < list.data.length) {
    if (list.data[idx] == value) {
    found = true;
    break;
  }
    idx = idx + 1;
  }
  if (!found) {
    throw Exception("value not found");
  }
  return delete_nth(list, idx);
}

void _main() {
  DoublyLinkedList dll = empty_list();
  dll = insert_tail(dll, 1);
  dll = insert_tail(dll, 2);
  dll = insert_tail(dll, 3);
  print(to_string(dll));
  dll = insert_head(dll, 0);
  print(to_string(dll));
  dll = insert_nth(dll, 2, 9);
  print(to_string(dll));
  DeleteResult res = delete_nth(dll, 2);
  dll = res.list;
  print(res.value);
  print(to_string(dll));
  res = delete_tail(dll);
  dll = res.list;
  print(res.value);
  print(to_string(dll));
  res = delete_value(dll, 1);
  dll = res.list;
  print(res.value);
  print(to_string(dll));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
