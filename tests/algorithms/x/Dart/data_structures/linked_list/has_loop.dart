// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  int data;
  int next;
  Node({required this.data, required this.next});
}

bool has_loop(List<Node> nodes, int head) {
  int slow = head;
  int fast = head;
  while (fast != 0 - 1) {
    Node fast_node1 = nodes[fast];
    if (fast_node1.next == 0 - 1) {
    return false;
  }
    Node fast_node2 = nodes[fast_node1.next];
    if (fast_node2.next == 0 - 1) {
    return false;
  }
    Node slow_node = nodes[slow];
    slow = slow_node.next;
    fast = fast_node2.next;
    if (slow == fast) {
    return true;
  }
  }
  return false;
}

List<Node> make_nodes(List<int> values) {
  List<Node> nodes = <Node>[];
  int i = 0;
  while (i < values.length) {
    int next_idx = (i == values.length - 1 ? 0 - 1 : i + 1);
    nodes = [...nodes, Node(data: values[i], next: next_idx)];
    i = i + 1;
  }
  return nodes;
}

void _main() {
  List<Node> list1 = make_nodes([1, 2, 3, 4]);
  print((has_loop(list1, 0)).toString());
  list1[3]!.next = 1;
  print((has_loop(list1, 0)).toString());
  List<Node> list2 = make_nodes([5, 6, 5, 6]);
  print((has_loop(list2, 0)).toString());
  List<Node> list3 = make_nodes([1]);
  print((has_loop(list3, 0)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
