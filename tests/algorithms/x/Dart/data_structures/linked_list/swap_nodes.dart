// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class LinkedList {
  List<int> data;
  LinkedList({required this.data});
}

LinkedList empty_list() {
  return LinkedList(data: []);
}

LinkedList push(LinkedList list, int value) {
  List<int> res = [value];
  res = ([...res, ...list.data] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  return LinkedList(data: res);
}

LinkedList swap_nodes(LinkedList list, int v1, int v2) {
  if (v1 == v2) {
    return list;
  }
  int idx1 = 0 - 1;
  int idx2 = 0 - 1;
  int i = 0;
  while (i < list.data.length) {
    if (list.data[i] == v1 && idx1 == 0 - 1) {
    idx1 = i;
  }
    if (list.data[i] == v2 && idx2 == 0 - 1) {
    idx2 = i;
  }
    i = i + 1;
  }
  if (idx1 == 0 - 1 || idx2 == 0 - 1) {
    return list;
  }
  List<int> res = list.data;
  int temp = res[idx1];
  while (res.length <= idx1) { res.add(0); } res[idx1] = res[idx2];
  while (res.length <= idx2) { res.add(0); } res[idx2] = temp;
  return LinkedList(data: res);
}

String to_string(LinkedList list) {
  return (list.data).toString();
}

void _main() {
  LinkedList ll = empty_list();
  int i = 5;
  while (i > 0) {
    ll = push(ll, i);
    i = i - 1;
  }
  print("Original Linked List: " + to_string(ll));
  ll = swap_nodes(ll, 1, 4);
  print("Modified Linked List: " + to_string(ll));
  print("After swapping the nodes whose data is 1 and 4.");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
