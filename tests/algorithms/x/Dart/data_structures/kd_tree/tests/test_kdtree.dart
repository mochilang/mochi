// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double INF = 1000000000.0;
int seed = 1;
double rand_float() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return (seed as double) / 2147483648.0;
}

List<List<double>> hypercube_points(int num_points, double cube_size, int num_dimensions) {
  List<List<double>> pts = <List<double>>[];
  int i = 0;
  while (i < num_points) {
    List<double> p = <double>[];
    int j = 0;
    while (j < num_dimensions) {
    double v = cube_size * rand_float();
    p = [...p, v];
    j = j + 1;
  }
    pts = ([...pts, p] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return pts;
}

List<List<double>> build_kdtree(List<List<double>> points, int depth) {
  return points;
}

double distance_sq(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    double d = a[i] - b[i];
    sum = sum + d * d;
    i = i + 1;
  }
  return sum;
}

Map<String, double> nearest_neighbour_search(List<List<double>> points, List<double> query) {
  if (points.length == 0) {
    return {"index": -1.0, "dist": INF, "visited": 0.0};
  }
  int nearest_idx = 0;
  double nearest_dist = INF;
  int visited = 0;
  int i = 0;
  while (i < points.length) {
    double d = distance_sq(query, points[i]);
    visited = visited + 1;
    if (d < nearest_dist) {
    nearest_dist = d;
    nearest_idx = i;
  }
    i = i + 1;
  }
  return {"index": nearest_idx as double, "dist": nearest_dist, "visited": visited as double};
}

void test_build_cases() {
  List<List<double>> empty_pts = [];
  List<List<double>> tree0 = build_kdtree(empty_pts, 0);
  if (tree0.length == 0) {
    print("case1 true");
  } else {
    print("case1 false");
  }
  List<List<double>> pts1 = hypercube_points(10, 10.0, 2);
  List<List<double>> tree1 = build_kdtree(pts1, 2);
  if (tree1.length > 0 && tree1[0].length == 2) {
    print("case2 true");
  } else {
    print("case2 false");
  }
  List<List<double>> pts2 = hypercube_points(10, 10.0, 3);
  List<List<double>> tree2 = build_kdtree(pts2, -2);
  if (tree2.length > 0 && tree2[0].length == 3) {
    print("case3 true");
  } else {
    print("case3 false");
  }
}

void test_search() {
  List<List<double>> pts = hypercube_points(10, 10.0, 2);
  List<List<double>> tree = build_kdtree(pts, 0);
  List<double> qp = hypercube_points(1, 10.0, 2)[0];
  Map<String, double> res = nearest_neighbour_search(tree, qp);
  if (res["index"]! != -1.0 && res["dist"]! >= 0.0 && res["visited"]! > 0.0) {
    print("search true");
  } else {
    print("search false");
  }
}

void test_edge() {
  List<List<double>> empty_pts = [];
  List<List<double>> tree = build_kdtree(empty_pts, 0);
  List<double> query = [0.0, 0.0];
  Map<String, double> res = nearest_neighbour_search(tree, query);
  if (res["index"]! == -1.0 && res["dist"]! > 100000000.0 && res["visited"]! == 0.0) {
    print("edge true");
  } else {
    print("edge false");
  }
}

void _main() {
  seed = 1;
  test_build_cases();
  test_search();
  test_edge();
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
