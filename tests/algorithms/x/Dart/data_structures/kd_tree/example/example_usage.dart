// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  List<double> point;
  int left;
  int right;
  Node({required this.point, required this.left, required this.right});
}

class BuildResult {
  int index;
  List<Node> nodes;
  BuildResult({required this.index, required this.nodes});
}

class SearchResult {
  List<double> point;
  double dist;
  int visited;
  SearchResult({required this.point, required this.dist, required this.visited});
}

int seed = 1;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

double random() {
  return 1.0 * rand() / 2147483648.0;
}

List<List<double>> hypercube_points(int num_points, double cube_size, int num_dimensions) {
  List<List<double>> pts = <List<double>>[];
  int i = 0;
  while (i < num_points) {
    List<double> p = <double>[];
    int j = 0;
    while (j < num_dimensions) {
    p = [...p, cube_size * random()];
    j = j + 1;
  }
    pts = ([...pts, p] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return pts;
}

List<List<double>> sort_points(List<List<double>> points, int axis) {
  int n = points.length;
  int i = 1;
  while (i < n) {
    List<double> key = points[i];
    int j = i - 1;
    while (j >= 0 && points[j][axis] > key[axis]) {
    while (points.length <= j + 1) { points.add(<double>[]); } points[j + 1] = points[j];
    j = j - 1;
  }
    while (points.length <= j + 1) { points.add(<double>[]); } points[j + 1] = key;
    i = i + 1;
  }
  return points;
}

List<List<double>> sublist(List<List<double>> arr, int start, int end) {
  List<List<double>> res = <List<double>>[];
  int i = start;
  while (i < end) {
    res = ([...res, arr[i]] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<Node> shift_nodes(List<Node> nodes, int offset) {
  int i = 0;
  while (i < nodes.length) {
    if (nodes[i].left != 0 - 1) {
    nodes[i]!.left = nodes[i].left + offset;
  }
    if (nodes[i].right != 0 - 1) {
    nodes[i]!.right = nodes[i].right + offset;
  }
    i = i + 1;
  }
  return nodes;
}

BuildResult build_kdtree(List<List<double>> points, int depth) {
  if (points.length == 0) {
    return BuildResult(index: 0 - 1, nodes: []);
  }
  int k = points[0].length;
  int axis = depth % k;
  points = sort_points(points, axis);
  int median = points.length ~/ 2;
  List<List<double>> left_points = sublist(points, 0, median);
  List<List<double>> right_points = sublist(points, median + 1, points.length);
  BuildResult left_res = build_kdtree(left_points, depth + 1);
  BuildResult right_res = build_kdtree(right_points, depth + 1);
  int offset = left_res.nodes.length + 1;
  List<Node> shifted_right = shift_nodes(right_res.nodes, offset);
  List<Node> nodes = left_res.nodes;
  int left_index = left_res.index;
  int right_index = (right_res.index == 0 - 1 ? 0 - 1 : right_res.index + offset);
  nodes = [...nodes, Node(point: points[median], left: left_index, right: right_index)];
  nodes = List<Node>.from([...nodes, ...shifted_right]);
  int root_index = left_res.nodes.length;
  return BuildResult(index: root_index, nodes: nodes);
}

double square_distance(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    double diff = a[i] - b[i];
    sum = sum + diff * diff;
    i = i + 1;
  }
  return sum;
}

SearchResult nearest_neighbour_search(List<Node> tree, int root, List<double> query_point) {
  List<double> nearest_point = <double>[];
  double nearest_dist = 0.0;
  int visited = 0;
  int i = 0;
  while (i < tree.length) {
    Node node = tree[i];
    double dist = square_distance(query_point, node.point);
    visited = visited + 1;
    if (visited == 1 || dist < nearest_dist) {
    nearest_point = node.point;
    nearest_dist = dist;
  }
    i = i + 1;
  }
  return SearchResult(point: nearest_point, dist: nearest_dist, visited: visited);
}

String list_to_string(List<double> arr) {
  String s = "[";
  int i = 0;
  while (i < arr.length) {
    s = s + (arr[i]).toString();
    if (i < arr.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  return s + "]";
}

dynamic _main() {
  int num_points = 5000;
  double cube_size = 10.0;
  int num_dimensions = 10;
  List<List<double>> pts = hypercube_points(num_points, cube_size, num_dimensions);
  BuildResult build = build_kdtree(pts, 0);
  int root = build.index;
  List<Node> tree = build.nodes;
  List<double> query = <double>[];
  int i = 0;
  while (i < num_dimensions) {
    query = [...query, random()];
    i = i + 1;
  }
  SearchResult res = nearest_neighbour_search(tree, root, query);
  print("Query point: " + list_to_string(query));
  print("Nearest point: " + list_to_string(res.point));
  print("Distance: " + (res.dist).toString());
  print("Nodes visited: " + (res.visited).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
