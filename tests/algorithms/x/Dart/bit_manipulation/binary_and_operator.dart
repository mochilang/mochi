// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

String to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  int _num = n;
  String res = "";
  while (_num > 0) {
    int bit = _num % 2;
    res = _str(bit) + res;
    _num = _num ~/ 2;
  }
  return res;
}

String zfill(String s, int width) {
  String res = s;
  int pad = width - s.length;
  while (pad > 0) {
    res = "0" + res;
    pad = pad - 1;
  }
  return res;
}

String binary_and(int a, int b) {
  if (a < 0 || b < 0) {
    _error("the value of both inputs must be positive");
  }
  String a_bin = to_binary(a);
  String b_bin = to_binary(b);
  int max_len = a_bin.length;
  if (b_bin.length > max_len) {
    max_len = b_bin.length;
  }
  String a_pad = zfill(a_bin, max_len);
  String b_pad = zfill(b_bin, max_len);
  int i = 0;
  String res = "";
  while (i < max_len) {
    if (a_pad.substring(i, i + 1) == "1" && b_pad.substring(i, i + 1) == "1") {
    res = res + "1";
  } else {
    res = res + "0";
  }
    i = i + 1;
  }
  return "0b" + res;
}

void main() {
  print(binary_and(25, 32));
  print(binary_and(37, 50));
  print(binary_and(21, 30));
  print(binary_and(58, 73));
  print(binary_and(0, 255));
  print(binary_and(256, 256));
}
