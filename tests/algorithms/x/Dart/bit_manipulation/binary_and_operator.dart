// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  int _num = n;
  String res = "";
  while (_num > 0) {
    int bit = _num % 2;
    res = _str(bit) + res;
    _num = _num ~/ 2;
  }
  return res;
}

String zfill(String s, int width) {
  String res = s;
  int pad = width - s.length;
  while (pad > 0) {
    res = "0" + res;
    pad = pad - 1;
  }
  return res;
}

String binary_and(int a, int b) {
  if (a < 0 || b < 0) {
    throw Exception("the value of both inputs must be positive");
  }
  String a_bin = to_binary(a);
  String b_bin = to_binary(b);
  int max_len = a_bin.length;
  if (b_bin.length > max_len) {
    max_len = b_bin.length;
  }
  String a_pad = zfill(a_bin, max_len);
  String b_pad = zfill(b_bin, max_len);
  int i = 0;
  String res = "";
  while (i < max_len) {
    if (a_pad.substring(i, i + 1) == "1" && b_pad.substring(i, i + 1) == "1") {
    res = res + "1";
  } else {
    res = res + "0";
  }
    i = i + 1;
  }
  return "0b" + res;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(binary_and(25, 32));
  print(binary_and(37, 50));
  print(binary_and(21, 30));
  print(binary_and(58, 73));
  print(binary_and(0, 255));
  print(binary_and(256, 256));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
