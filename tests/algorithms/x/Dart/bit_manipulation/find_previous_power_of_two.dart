// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int find_previous_power_of_two(int number) {
  if (number < 0) {
    _error("Input must be a non-negative integer");
  }
  if (number == 0) {
    return 0;
  }
  int power = 1;
  while (power <= number) {
    power = power * 2;
  }
  if (number > 1) {
    return power ~/ 2;
  } else {
    return 1;
  }
}

void _main() {
  List<int> results = <int>[];
  int i = 0;
  while (i < 18) {
    results = [...results, find_previous_power_of_two(i)];
    i = i + 1;
  }
  print(_str(results));
}

void _start() {
  _main();
}

void main() => _start();
