// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int largest_pow_of_two_le_num(int n) {
  if (n <= 0) {
    return 0;
  }
  int res = 1;
  while (res * 2 <= n) {
    res = res * 2;
  }
  return res;
}

void main() {
  print(_str(largest_pow_of_two_le_num(0)));
  print(_str(largest_pow_of_two_le_num(1)));
  print(_str(largest_pow_of_two_le_num(-1)));
  print(_str(largest_pow_of_two_le_num(3)));
  print(_str(largest_pow_of_two_le_num(15)));
  print(_str(largest_pow_of_two_le_num(99)));
  print(_str(largest_pow_of_two_le_num(178)));
  print(_str(largest_pow_of_two_le_num(999999)));
}
