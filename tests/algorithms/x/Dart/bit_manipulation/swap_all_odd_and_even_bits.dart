// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String pad_left_num(int n) {
  String s = _str(n);
  while (s.length < 5) {
    s = " " + s;
  }
  return s;
}

String to_binary(int n) {
  String sign = "";
  int _num = n;
  if (_num < 0) {
    sign = "-";
    _num = 0 - _num;
  }
  String bits = "";
  while (_num > 0) {
    bits = _str(_num % 2) + bits;
    _num = (_num - _num % 2) ~/ 2;
  }
  if (bits == "") {
    bits = "0";
  }
  int min_width = 8;
  while (bits.length < min_width - sign.length) {
    bits = "0" + bits;
  }
  return sign + bits;
}

String show_bits(int before, int after) {
  return pad_left_num(before) + ": " + to_binary(before) + "\n" + pad_left_num(after) + ": " + to_binary(after);
}

int lshift(int _num, int k) {
  int result = _num;
  int i = 0;
  while (i < k) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

int rshift(int _num, int k) {
  int result = _num;
  int i = 0;
  while (i < k) {
    result = (result - result % 2) ~/ 2;
    i = i + 1;
  }
  return result;
}

int swap_odd_even_bits(int _num) {
  int n = _num;
  if (n < 0) {
    n = n + 4294967296;
  }
  int result = 0;
  int i = 0;
  while (i < 32) {
    int bit1 = rshift(n, i) % 2;
    int bit2 = rshift(n, i + 1) % 2;
    result = result + lshift(bit1, i + 1) + lshift(bit2, i);
    i = i + 2;
  }
  return result;
}

void _main() {
  List<int> nums = [-1, 0, 1, 2, 3, 4, 23, 24];
  int i = 0;
  while (i < nums.length) {
    int n = nums[i];
    print(show_bits(n, swap_odd_even_bits(n)));
    print("");
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
