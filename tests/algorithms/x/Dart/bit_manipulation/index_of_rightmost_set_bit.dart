// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int index_of_rightmost_set_bit(int number) {
  if (number < 0) {
    _error("Input must be a non-negative integer");
  }
  if (number == 0) {
    return -1;
  }
  int n = number;
  int index = 0;
  while (n % 2 == 0) {
    n = n ~/ 2;
    index = index + 1;
  }
  return index;
}

void main() {
  print(_str(index_of_rightmost_set_bit(0)));
  print(_str(index_of_rightmost_set_bit(5)));
  print(_str(index_of_rightmost_set_bit(36)));
  print(_str(index_of_rightmost_set_bit(8)));
}
