// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

String get_reverse_bit_string(int number) {
  String bit_string = "";
  int n = number;
  int i = 0;
  while (i < 32) {
    bit_string = bit_string + _str(n % 2);
    n = n ~/ 2;
    i = i + 1;
  }
  return bit_string;
}

String reverse_bit(int number) {
  if (number < 0) {
    _error("the value of input must be positive");
  }
  int n = number;
  int result = 0;
  int i = 1;
  while (i <= 32) {
    result = result * 2;
    int end_bit = n % 2;
    n = n ~/ 2;
    result = result + end_bit;
    i = i + 1;
  }
  return get_reverse_bit_string(result);
}

void main() {
  print(reverse_bit(25));
  print(reverse_bit(37));
  print(reverse_bit(21));
  print(reverse_bit(58));
  print(reverse_bit(0));
  print(reverse_bit(256));
}
