// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int find_missing_number(List<int> nums) {
  int low = (nums.reduce((a, b) => a < b ? a : b)).toInt();
  int high = (nums.reduce((a, b) => a > b ? a : b)).toInt();
  int count = high - low + 1;
  int expected_sum = (low + high) * count ~/ 2;
  int actual_sum = 0;
  int i = 0;
  int n = nums.length;
  while (i < n) {
    actual_sum = actual_sum + nums[i];
    i = i + 1;
  }
  return expected_sum - actual_sum;
}

void main() {
  print(find_missing_number([0, 1, 3, 4]));
}
