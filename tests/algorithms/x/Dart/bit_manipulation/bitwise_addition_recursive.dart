// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int bitwise_xor(int a, int b) {
  int result = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 || y > 0) {
    int ax = x % 2;
    int by = y % 2;
    if ((ax + by) % 2 == 1) {
    result = result + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return result;
}

int bitwise_and(int a, int b) {
  int result = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 && y > 0) {
    if (x % 2 == 1 && y % 2 == 1) {
    result = result + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return result;
}

int bitwise_addition_recursive(int number, int other_number) {
  if (number < 0 || other_number < 0) {
    _error("Both arguments MUST be non-negative!");
  }
  int bitwise_sum = bitwise_xor(number, other_number);
  int carry = bitwise_and(number, other_number);
  if (carry == 0) {
    return bitwise_sum;
  }
  return bitwise_addition_recursive(bitwise_sum, carry * 2);
}

void main() {
  print(_str(bitwise_addition_recursive(4, 5)));
  print(_str(bitwise_addition_recursive(8, 9)));
  print(_str(bitwise_addition_recursive(0, 4)));
}
