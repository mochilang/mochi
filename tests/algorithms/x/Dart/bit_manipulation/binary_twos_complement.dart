// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

String repeat_char(String ch, int times) {
  String res = "";
  int i = 0;
  while (i < times) {
    res = res + ch;
    i = i + 1;
  }
  return res;
}

String to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  String res = "";
  int v = n;
  while (v > 0) {
    res = _str(v % 2) + res;
    v = v ~/ 2;
  }
  return res;
}

int pow2(int exp) {
  int res = 1;
  int i = 0;
  while (i < exp) {
    res = res * 2;
    i = i + 1;
  }
  return res;
}

String twos_complement(int number) {
  if (number > 0) {
    _error("input must be a negative integer");
  }
  if (number == 0) {
    return "0b0";
  }
  int abs_number = (number < 0 ? -number : number);
  int binary_number_length = to_binary(abs_number).length;
  int complement_value = pow2(binary_number_length) - abs_number;
  String complement_binary = to_binary(complement_value);
  String padding = repeat_char("0", binary_number_length - complement_binary.length);
  String twos_complement_number = "1" + padding + complement_binary;
  return "0b" + twos_complement_number;
}

void main() {
  print(twos_complement(0));
  print(twos_complement(-1));
  print(twos_complement(-5));
  print(twos_complement(-17));
  print(twos_complement(-207));
}
