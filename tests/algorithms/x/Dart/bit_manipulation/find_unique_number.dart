// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}


void _json(dynamic v) {
  print(jsonEncode(v));
}

int bit_xor(int a, int b) {
  int ua = a;
  int ub = b;
  int res = 0;
  int bit = 1;
  while (ua > 0 || ub > 0) {
    int abit = ua % 2;
    int bbit = ub % 2;
    if (abit == 1 && bbit == 0 || abit == 0 && bbit == 1) {
    res = res + bit;
  }
    ua = ua ~/ 2 as int;
    ub = ub ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int find_unique_number(List<int> arr) {
  if (arr.length == 0) {
    throw Exception("input list must not be empty");
  }
  int result = 0;
  for (int _num in arr) {
    result = bit_xor(result, _num);
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((find_unique_number([1, 1, 2, 2, 3])).toString());
  print((find_unique_number([4, 5, 4, 6, 6])).toString());
  print((find_unique_number([7])).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
