// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int bit_xor(int a, int b) {
  int ua = a;
  int ub = b;
  int res = 0;
  int bit = 1;
  while (ua > 0 || ub > 0) {
    int abit = ua % 2;
    int bbit = ub % 2;
    if (abit == 1 && bbit == 0 || abit == 0 && bbit == 1) {
    res = res + bit;
  }
    ua = ua ~/ 2 as int;
    ub = ub ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int find_unique_number(List<int> arr) {
  if (arr.length == 0) {
    _error("input list must not be empty");
  }
  int result = 0;
  for (int _num in arr) {
    result = bit_xor(result, _num);
  }
  return result;
}

void main() {
  print(_str(find_unique_number([1, 1, 2, 2, 3])));
  print(_str(find_unique_number([4, 5, 4, 6, 6])));
  print(_str(find_unique_number([7])));
}
