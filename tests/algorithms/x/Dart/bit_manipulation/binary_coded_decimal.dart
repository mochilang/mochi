// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String to_binary4(int n) {
  String result = "";
  int x = n;
  while (x > 0) {
    result = (x % 2).toString() + result;
    x = x ~/ 2;
  }
  while (result.length < 4) {
    result = "0" + result;
  }
  return result;
}

String binary_coded_decimal(int number) {
  int n = number;
  if (n < 0) {
    n = 0;
  }
  String digits = (n).toString();
  String out = "0b";
  int i = 0;
  while (i < digits.length) {
    String d = digits.substring(i, i + 1);
    int d_int = (d).codeUnitAt(0);
    out = out + to_binary4(d_int);
    i = i + 1;
  }
  return out;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(binary_coded_decimal(-2));
  print(binary_coded_decimal(-1));
  print(binary_coded_decimal(0));
  print(binary_coded_decimal(3));
  print(binary_coded_decimal(2));
  print(binary_coded_decimal(12));
  print(binary_coded_decimal(987));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
