// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

String repeat_char(String ch, int count) {
  String res = "";
  int i = 0;
  while (i < count) {
    res = res + ch;
    i = i + 1;
  }
  return res;
}

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

int pow2(int exp) {
  int res = 1;
  int i = 0;
  while (i < exp) {
    res = res * 2;
    i = i + 1;
  }
  return res;
}

String to_binary_no_prefix(int n) {
  int v = n;
  if (v < 0) {
    v = -v;
  }
  if (v == 0) {
    return "0";
  }
  String res = "";
  while (v > 0) {
    res = _str(v % 2) + res;
    v = v ~/ 2;
  }
  return res;
}

String logical_left_shift(int number, int shift_amount) {
  if (number < 0 || shift_amount < 0) {
    _error("both inputs must be positive integers");
  }
  String binary_number = "0b" + to_binary_no_prefix(number);
  return binary_number + repeat_char("0", shift_amount);
}

String logical_right_shift(int number, int shift_amount) {
  if (number < 0 || shift_amount < 0) {
    _error("both inputs must be positive integers");
  }
  String binary_number = to_binary_no_prefix(number);
  if (shift_amount >= binary_number.length) {
    return "0b0";
  }
  String shifted = _substr(binary_number, 0, binary_number.length - shift_amount);
  return "0b" + shifted;
}

String arithmetic_right_shift(int number, int shift_amount) {
  late String binary_number;;
  if (number >= 0) {
    binary_number = "0" + to_binary_no_prefix(number);
  } else {
    int length = to_binary_no_prefix(-number).length;
    int intermediate = abs_int(number) - pow2(length);
    String bin_repr = to_binary_no_prefix(intermediate);
    binary_number = "1" + repeat_char("0", length - bin_repr.length) + bin_repr;
  }
  if (shift_amount >= binary_number.length) {
    String sign = _substr(binary_number, 0, 1);
    return "0b" + repeat_char(sign, binary_number.length);
  }
  String sign = _substr(binary_number, 0, 1);
  String shifted = _substr(binary_number, 0, binary_number.length - shift_amount);
  return "0b" + repeat_char(sign, shift_amount) + shifted;
}

void _main() {
  print(logical_left_shift(17, 2));
  print(logical_right_shift(1983, 4));
  print(arithmetic_right_shift(-17, 2));
}

void _start() {
  _main();
}

void main() => _start();
