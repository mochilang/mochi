// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int highest_set_bit_position(int number) {
  if (number < 0) {
    _error("number must be non-negative");
  }
  int position = 0;
  int n = number;
  while (n > 0) {
    position = position + 1;
    n = n ~/ 2;
  }
  return position;
}

void main() {
  print(_str(highest_set_bit_position(25)));
  print(_str(highest_set_bit_position(37)));
  print(_str(highest_set_bit_position(1)));
  print(_str(highest_set_bit_position(4)));
  print(_str(highest_set_bit_position(0)));
}
