// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int bit_and(int a, int b) {
  int ua = a;
  int ub = b;
  int res = 0;
  int bit = 1;
  while (ua > 0 || ub > 0) {
    if (ua % 2 == 1 && ub % 2 == 1) {
    res = res + bit;
  }
    ua = ua ~/ 2 as int;
    ub = ub ~/ 2 as int;
    bit = bit * 2;
  }
  return res;
}

int count_bits_kernighan(int n) {
  if (n < 0) {
    _error("the value of input must not be negative");
  }
  int _num = n;
  int result = 0;
  while (_num != 0) {
    _num = bit_and(_num, _num - 1);
    result = result + 1;
  }
  return result;
}

int count_bits_modulo(int n) {
  if (n < 0) {
    _error("the value of input must not be negative");
  }
  int _num = n;
  int result = 0;
  while (_num != 0) {
    if (_num % 2 == 1) {
    result = result + 1;
  }
    _num = _num ~/ 2 as int;
  }
  return result;
}

void _main() {
  List<int> numbers = [25, 37, 21, 58, 0, 256];
  int i = 0;
  while (i < numbers.length) {
    print(_str(count_bits_kernighan(numbers[i])));
    i = i + 1;
  }
  i = 0;
  while (i < numbers.length) {
    print(_str(count_bits_modulo(numbers[i])));
    i = i + 1;
  }
}

void _start() {
  _main();
}

void main() => _start();
