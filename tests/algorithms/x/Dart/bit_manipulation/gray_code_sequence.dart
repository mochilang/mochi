// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int pow2(int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

List<int> gray_code(int bit_count) {
  if (bit_count == 0) {
    return [0];
  }
  List<int> prev = gray_code(bit_count - 1);
  int add_val = pow2(bit_count - 1);
  List<int> res = <int>[];
  int i = 0;
  while (i < prev.length) {
    res = [...res, prev[i]];
    i = i + 1;
  }
  int j = prev.length - 1;
  while (j >= 0) {
    res = [...res, prev[j] + add_val];
    j = j - 1;
  }
  return res;
}

List<int> seq2 = gray_code(2);
List<int> seq1 = gray_code(1);
List<int> seq3 = gray_code(3);
void main() {
  print(_str(seq2));
  print(_str(seq1));
  print(_str(seq3));
}
