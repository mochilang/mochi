// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int pow2(int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

bool is_bit_set(int number, int position) {
  int shifted = number ~/ pow2(position);
  int remainder = shifted % 2;
  return remainder == 1;
}

int set_bit(int number, int position) {
  if (is_bit_set(number, position)) {
    return number;
  }
  return number + pow2(position);
}

int clear_bit(int number, int position) {
  if (is_bit_set(number, position)) {
    return number - pow2(position);
  }
  return number;
}

int flip_bit(int number, int position) {
  if (is_bit_set(number, position)) {
    return number - pow2(position);
  }
  return number + pow2(position);
}

int get_bit(int number, int position) {
  if (is_bit_set(number, position)) {
    return 1;
  }
  return 0;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(set_bit(13, 1)));
  print(_str(clear_bit(18, 1)));
  print(_str(flip_bit(5, 1)));
  print(_str(is_bit_set(10, 3)));
  print(_str(get_bit(10, 1)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
