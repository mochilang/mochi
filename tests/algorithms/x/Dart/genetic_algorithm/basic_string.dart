// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) => v.toString();

class PairString {
  String first;
  String second;
  PairString({required this.first, required this.second});
}

int evaluate(String item, String target) {
  int score = 0;
  int i = 0;
  while (i < item.length && i < target.length) {
    if (_substr(item, i, i + 1) == _substr(target, i, i + 1)) {
    score = score + 1;
  }
    i = i + 1;
  }
  return score;
}

PairString crossover(String parent1, String parent2) {
  int cut = parent1.length ~/ 2;
  String child1 = _substr(parent1, 0, cut) + _substr(parent2, cut, parent2.length);
  String child2 = _substr(parent2, 0, cut) + _substr(parent1, cut, parent1.length);
  return PairString(first: child1, second: child2);
}

String mutate(String child, List<String> genes) {
  if (child.length == 0) {
    return child;
  }
  String gene = genes[0];
  return _substr(child, 0, child.length - 1) + gene;
}

void _main() {
  print(_str(evaluate("Helxo Worlx", "Hello World")));
  PairString pair = crossover("123456", "abcdef");
  print(pair.first);
  print(pair.second);
  String mut = mutate("123456", ["A", "B", "C", "D", "E", "F"]);
  print(mut);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
