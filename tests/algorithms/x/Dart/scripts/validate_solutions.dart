// Generated by Mochi transpiler
import 'dart:io';

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


List<int> _sha256(List<int> bs) {
  final tmp = File('${Directory.systemTemp.path}/sha256_${DateTime.now().microsecondsSinceEpoch}.bin');
  tmp.writeAsBytesSync(bs.map((e) => e & 0xff).toList());
  final result = Process.runSync('sha256sum', [tmp.path]);
  tmp.deleteSync();
  var hex = '';
  if (result.stdout is String) {
    hex = (result.stdout as String).split(' ')[0];
  }
  final out = <int>[];
  for (var i = 0; i < hex.length; i += 2) {
    out.add(int.parse(hex.substring(i, i + 2), radix: 16));
  }
  return out;
}

String HEX = "0123456789abcdef";
String byte_to_hex(int b) {
  int hi = b ~/ 16;
  int lo = b % 16;
  return HEX.substring(hi, hi + 1) + HEX.substring(lo, lo + 1);
}

String bytes_to_hex(List<int> bs) {
  String res = "";
  int i = 0;
  while (i < bs.length) {
    res = res + byte_to_hex(bs[i]);
    i = i + 1;
  }
  return res;
}

String sha256_hex(String s) {
  return bytes_to_hex(_sha256(s));
}

String solution_001() {
  int total = 0;
  int n = 0;
  while (n < 1000) {
    if (n % 3 == 0 || n % 5 == 0) {
    total = total + n;
  }
    n = n + 1;
  }
  return _str(total);
}

String expected = sha256_hex("233168");
String answer = solution_001();
String computed = sha256_hex(answer);
void main() {
  if (computed == expected) {
    print("Problem 001 passed");
  } else {
    print("Problem 001 failed: " + computed + " != " + expected);
  }
}
