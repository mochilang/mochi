// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _repeat(String s, int n) => n <= 0 ? '' : List.filled(n, s).join();

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = [...parts, cur];
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = [...parts, cur];
  return parts;
}

String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

String repeat(String s, int n) {
  String out = "";
  int i = 0;
  while (i < n) {
    out = out + s;
    i = i + 1;
  }
  return out;
}

String replace_char(String s, String old, String _new) {
  String out = "";
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c == old) {
    out = out + _new;
  } else {
    out = out + c;
  }
    i = i + 1;
  }
  return out;
}

bool contains(String s, String sub) {
  if (sub.length == 0) {
    return true;
  }
  int i = 0;
  while (i + sub.length <= s.length) {
    if (_substr(s, i, i + sub.length) == sub) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String file_extension(String name) {
  int i = name.length - 1;
  while (i >= 0) {
    if (_substr(name, i, i + 1) == ".") {
    return _substr(name, i, name.length);
  }
    i = i - 1;
  }
  return "";
}

String remove_extension(String name) {
  int i = name.length - 1;
  while (i >= 0) {
    if (_substr(name, i, i + 1) == ".") {
    return _substr(name, 0, i);
  }
    i = i - 1;
  }
  return name;
}

String title_case(String s) {
  String out = "";
  bool cap = true;
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c == " ") {
    out = out + c;
    cap = true;
  } else {
    if (cap) {
    out = out + c.toUpperCase();
    cap = false;
  } else {
    out = out + c.toLowerCase();
  };
  }
    i = i + 1;
  }
  return out;
}

int count_char(String s, String ch) {
  int cnt = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

String md_prefix(int level) {
  if (level == 0) {
    return "\n##";
  }
  return _repeat("  ", level) + "*";
}

String print_path(String old_path, String new_path) {
  dynamic old_parts = old_path.split("/");
  dynamic new_parts = new_path.split("/");
  int i = 0;
  while (i < new_parts.length) {
    if ((i >= old_parts.length || old_parts[i] != new_parts[i]) && new_parts[i] != "") {
    String title = title_case(replace_char(new_parts[i], "_", " "));
    print(md_prefix(i) + " " + title);
  }
    i = i + 1;
  }
  return new_path;
}

List<String> sort_strings(List<String> xs) {
  List<String> arr = xs;
  int i = 0;
  while (i < arr.length) {
    int min_idx = i;
    int j = i + 1;
    while (j < arr.length) {
    if (arr[j].compareTo(arr[min_idx]) < 0) {
    min_idx = j;
  }
    j = j + 1;
  }
    String tmp = arr[i];
    while (arr.length <= i) { arr.add(""); } arr[i] = arr[min_idx];
    while (arr.length <= min_idx) { arr.add(""); } arr[min_idx] = tmp;
    i = i + 1;
  }
  return arr;
}

List<String> good_file_paths(List<String> paths) {
  List<String> res = <String>[];
  for (String p in paths) {
    dynamic parts = p.split("/");
    bool skip = false;
    int k = 0;
    while (k < parts.length - 1) {
    dynamic _part = parts[k];
    if (_part == "scripts" || _substr(_part, 0, 1) == "." || _substr(_part, 0, 1) == "_" || contains(_part, "venv")) {
    skip = true;
  }
    k = k + 1;
  }
    if (skip) {
    continue;
  }
    dynamic filename = parts[parts.length - 1];
    if (filename == "__init__.py") {
    continue;
  }
    String ext = file_extension(filename);
    if (ext == ".py" || ext == ".ipynb") {
    res = [...res, p];
  }
  }
  return res;
}

void print_directory_md(List<String> paths) {
  List<String> files = sort_strings(good_file_paths(paths));
  String old_path = "";
  int i = 0;
  while (i < files.length) {
    String fp = files[i];
    dynamic parts = fp.split("/");
    dynamic filename = parts[parts.length - 1];
    String filepath = "";
    if (parts.length > 1) {
    filepath = join(_substr(parts, 0, parts.length - 1), "/");
  }
    if (filepath != old_path) {
    old_path = print_path(old_path, filepath);
  }
    int indent = 0;
    if (filepath.length > 0) {
    indent = count_char(filepath, "/") + 1;
  }
    String url = replace_char(fp, " ", "%20");
    String name = title_case(replace_char(remove_extension(filename), "_", " "));
    print(md_prefix(indent) + " [" + name + "](" + url + ")");
    i = i + 1;
  }
}

List<String> sample = ["data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_directory_md(sample);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
