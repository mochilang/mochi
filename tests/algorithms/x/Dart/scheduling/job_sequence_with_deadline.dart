// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> max_tasks(List<List<int>> tasks_info) {
  List<int> order = <int>[];
  int i = 0;
  while (i < tasks_info.length) {
    order = (order..add(i));
    i = i + 1;
  }
  int n = order.length;
  i = 0;
  while (i < n) {
    int j = i + 1;
    while (j < n) {
    if (tasks_info[order[j]][1] > tasks_info[order[i]][1]) {
    int tmp = order[i];
    while (order.length <= i) { order.add(0); } order[i] = order[j];
    while (order.length <= j) { order.add(0); } order[j] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  List<int> result = <int>[];
  int pos = 1;
  i = 0;
  while (i < n) {
    int id = order[i];
    int deadline = tasks_info[id][0];
    if (deadline >= pos) {
    result = (result..add(id));
  }
    i = i + 1;
    pos = pos + 1;
  }
  return result;
}

dynamic _main() {
  List<List<int>> ex1 = [[4, 20], [1, 10], [1, 40], [1, 30]];
  List<List<int>> ex2 = [[1, 10], [2, 20], [3, 30], [2, 40]];
  print(_str(max_tasks(ex1)));
  print(_str(max_tasks(ex2)));
}

void _start() {
  _main();
}

void main() => _start();
