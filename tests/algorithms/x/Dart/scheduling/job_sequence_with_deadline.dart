// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<int> max_tasks(List<List<int>> tasks_info) {
  List<int> order = <int>[];
  int i = 0;
  while (i < tasks_info.length) {
    order = [...order, i];
    i = i + 1;
  }
  int n = order.length;
  i = 0;
  while (i < n) {
    int j = i + 1;
    while (j < n) {
    if (tasks_info[order[j]][1] > tasks_info[order[i]][1]) {
    int tmp = order[i];
    while (order.length <= i) { order.add(0); } order[i] = order[j];
    while (order.length <= j) { order.add(0); } order[j] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  List<int> result = <int>[];
  int pos = 1;
  i = 0;
  while (i < n) {
    int id = order[i];
    int deadline = tasks_info[id][0];
    if (deadline >= pos) {
    result = [...result, id];
  }
    i = i + 1;
    pos = pos + 1;
  }
  return result;
}

dynamic _main() {
  List<List<int>> ex1 = [[4, 20], [1, 10], [1, 40], [1, 30]];
  List<List<int>> ex2 = [[1, 10], [2, 20], [3, 30], [2, 40]];
  print(_str(max_tasks(ex1)));
  print(_str(max_tasks(ex2)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
