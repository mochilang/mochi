// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

List<int> calculate_waitingtime(List<int> arrival_time, List<int> burst_time, int no_of_processes) {
  List<int> waiting_time = <int>[];
  List<int> remaining_time = <int>[];
  int i = 0;
  while (i < no_of_processes) {
    waiting_time = [...waiting_time, 0];
    remaining_time = [...remaining_time, burst_time[i]];
    i = i + 1;
  }
  int completed = 0;
  int total_time = 0;
  while (completed != no_of_processes) {
    List<int> ready_process = <int>[];
    int target_process = -1;
    int j = 0;
    while (j < no_of_processes) {
    if (arrival_time[j] <= total_time && remaining_time[j] > 0) {
    ready_process = [...ready_process, j];
  }
    j = j + 1;
  }
    if (ready_process.length > 0) {
    target_process = ready_process[0];
    int k = 0;
    while (k < ready_process.length) {
    int idx = ready_process[k];
    if (remaining_time[idx] < remaining_time[target_process]) {
    target_process = idx;
  }
    k = k + 1;
  };
    total_time = total_time + burst_time[target_process];
    completed = completed + 1;
    while (remaining_time.length <= target_process) { remaining_time.add(0); } remaining_time[target_process] = 0;
    while (waiting_time.length <= target_process) { waiting_time.add(0); } waiting_time[target_process] = total_time - arrival_time[target_process] - burst_time[target_process];
  } else {
    total_time = total_time + 1;
  }
  }
  return waiting_time;
}

List<int> calculate_turnaroundtime(List<int> burst_time, int no_of_processes, List<int> waiting_time) {
  List<int> turn_around_time = <int>[];
  int i = 0;
  while (i < no_of_processes) {
    turn_around_time = [...turn_around_time, burst_time[i] + waiting_time[i]];
    i = i + 1;
  }
  return turn_around_time;
}

double average(List<int> values) {
  int total = 0;
  int i = 0;
  while (i < values.length) {
    total = total + values[i];
    i = i + 1;
  }
  return total.toDouble() / values.length.toDouble();
}

int no_of_processes = 4;
List<int> burst_time = [2, 5, 3, 7];
List<int> arrival_time = [0, 0, 0, 0];
List<int> waiting_time = calculate_waitingtime(arrival_time, burst_time, no_of_processes);
List<int> turn_around_time = calculate_turnaroundtime(burst_time, no_of_processes, waiting_time);
int i = 0;
double avg_wait = average(waiting_time);
double avg_turn = average(turn_around_time);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[TEST CASE 01]");
  print("PID	Burst Time	Arrival Time	Waiting Time	Turnaround Time");
  while (i < no_of_processes) {
    int pid = i + 1;
    print(_str(pid) + "	" + _str(burst_time[i]) + "			" + _str(arrival_time[i]) + "				" + _str(waiting_time[i]) + "				" + _str(turn_around_time[i]));
    i = i + 1;
  }
  print("\nAverage waiting time = " + _str(avg_wait));
  print("Average turnaround time = " + _str(avg_turn));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
