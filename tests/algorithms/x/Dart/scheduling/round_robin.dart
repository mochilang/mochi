// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> calculate_waiting_times(List<int> burst_times) {
  int quantum = 2;
  List<int> rem = <int>[];
  int i = 0;
  while (i < burst_times.length) {
    rem = (rem..add(burst_times[i]));
    i = i + 1;
  }
  List<int> waiting = <int>[];
  i = 0;
  while (i < burst_times.length) {
    waiting = (waiting..add(0));
    i = i + 1;
  }
  int t = 0;
  while (true) {
    bool done = true;
    int j = 0;
    while (j < burst_times.length) {
    if (rem[j] > 0) {
    done = false;
    if (rem[j] > quantum) {
    t = t + quantum;
    while (rem.length <= j) { rem.add(0); } rem[j] = rem[j] - quantum;
  } else {
    t = t + rem[j];
    while (waiting.length <= j) { waiting.add(0); } waiting[j] = t - burst_times[j];
    while (rem.length <= j) { rem.add(0); } rem[j] = 0;
  };
  }
    j = j + 1;
  }
    if (done) {
    return waiting;
  }
  }
  return waiting;
}

List<int> calculate_turn_around_times(List<int> burst_times, List<int> waiting_times) {
  List<int> result = <int>[];
  int i = 0;
  while (i < burst_times.length) {
    result = (result..add(burst_times[i] + waiting_times[i]));
    i = i + 1;
  }
  return result;
}

double mean(List<int> values) {
  int total = 0;
  int i = 0;
  while (i < values.length) {
    total = total + values[i];
    i = i + 1;
  }
  return (total.toDouble()) / (values.length.toDouble());
}

String format_float_5(double x) {
  int scaled = (x * 100000.0 + 0.5).toInt();
  int int_part = scaled ~/ 100000;
  int frac_part = scaled % 100000;
  String frac_str = _str(frac_part);
  while (frac_str.length < 5) {
    frac_str = "0" + frac_str;
  }
  return _str(int_part) + "." + frac_str;
}

void _main() {
  List<int> burst_times = [3, 5, 7];
  List<int> waiting_times = calculate_waiting_times(burst_times);
  List<int> turn_around_times = calculate_turn_around_times(burst_times, waiting_times);
  print("Process ID 	Burst Time 	Waiting Time 	Turnaround Time");
  int i = 0;
  while (i < burst_times.length) {
    String line = "  " + _str(i + 1) + "		  " + _str(burst_times[i]) + "		  " + _str(waiting_times[i]) + "		  " + _str(turn_around_times[i]);
    print(line);
    i = i + 1;
  }
  print("");
  print("Average waiting time = " + format_float_5(mean(waiting_times)));
  print("Average turn around time = " + format_float_5(mean(turn_around_times)));
}

void _start() {
  _main();
}

void main() => _start();
