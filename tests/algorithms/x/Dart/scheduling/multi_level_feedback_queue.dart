// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Process {
  String process_name;
  int arrival_time;
  int stop_time;
  int burst_time;
  int waiting_time;
  int turnaround_time;
  Process({required this.process_name, required this.arrival_time, required this.stop_time, required this.burst_time, required this.waiting_time, required this.turnaround_time});
}

class MLFQ {
  int number_of_queues;
  List<int> time_slices;
  List<Process> ready_queue;
  int current_time;
  List<Process> finish_queue;
  MLFQ({required this.number_of_queues, required this.time_slices, required this.ready_queue, required this.current_time, required this.finish_queue});
}

class RRResult {
  List<Process> finished;
  List<Process> ready;
  RRResult({required this.finished, required this.ready});
}

Process make_process(String name, int arrival, int burst) {
  return Process(process_name: name, arrival_time: arrival, stop_time: arrival, burst_time: burst, waiting_time: 0, turnaround_time: 0);
}

MLFQ make_mlfq(int nqueues, List<int> time_slices, List<Process> queue, int current_time) {
  return MLFQ(number_of_queues: nqueues, time_slices: time_slices, ready_queue: queue, current_time: current_time, finish_queue: []);
}

List<String> calculate_sequence_of_finish_queue(MLFQ mlfq) {
  List<String> seq = <String>[];
  int i = 0;
  while (i < mlfq.finish_queue.length) {
    Process p = mlfq.finish_queue[i];
    seq = [...seq, p.process_name];
    i = i + 1;
  }
  return seq;
}

List<int> calculate_waiting_time(List<Process> queue) {
  List<int> times = <int>[];
  int i = 0;
  while (i < queue.length) {
    Process p = queue[i];
    times = [...times, p.waiting_time];
    i = i + 1;
  }
  return times;
}

List<int> calculate_turnaround_time(List<Process> queue) {
  List<int> times = <int>[];
  int i = 0;
  while (i < queue.length) {
    Process p = queue[i];
    times = [...times, p.turnaround_time];
    i = i + 1;
  }
  return times;
}

List<int> calculate_completion_time(List<Process> queue) {
  List<int> times = <int>[];
  int i = 0;
  while (i < queue.length) {
    Process p = queue[i];
    times = [...times, p.stop_time];
    i = i + 1;
  }
  return times;
}

List<int> calculate_remaining_burst_time_of_processes(List<Process> queue) {
  List<int> times = <int>[];
  int i = 0;
  while (i < queue.length) {
    Process p = queue[i];
    times = [...times, p.burst_time];
    i = i + 1;
  }
  return times;
}

int update_waiting_time(MLFQ mlfq, Process process) {
  process.waiting_time = process.waiting_time + (mlfq.current_time - process.stop_time);
  return process.waiting_time;
}

List<Process> first_come_first_served(MLFQ mlfq, List<Process> ready_queue) {
  List<Process> finished = <Process>[];
  List<Process> rq = ready_queue;
  while (rq.length != 0) {
    Process cp = rq[0];
    rq = List<Process>.from(rq.sublist(1, rq.length));
    if (mlfq.current_time < cp.arrival_time) {
    mlfq.current_time = cp.arrival_time;
  }
    update_waiting_time(mlfq, cp);
    mlfq.current_time = mlfq.current_time + cp.burst_time;
    cp.burst_time = 0;
    cp.turnaround_time = mlfq.current_time - cp.arrival_time;
    cp.stop_time = mlfq.current_time;
    finished = [...finished, cp];
  }
  mlfq.finish_queue = List<Process>.from([...mlfq.finish_queue, ...finished]);
  return finished;
}

RRResult round_robin(MLFQ mlfq, List<Process> ready_queue, int time_slice) {
  List<Process> finished = <Process>[];
  List<Process> rq = ready_queue;
  int count = rq.length;
  int i = 0;
  while (i < count) {
    Process cp = rq[0];
    rq = List<Process>.from(rq.sublist(1, rq.length));
    if (mlfq.current_time < cp.arrival_time) {
    mlfq.current_time = cp.arrival_time;
  }
    update_waiting_time(mlfq, cp);
    if (cp.burst_time > time_slice) {
    mlfq.current_time = mlfq.current_time + time_slice;
    cp.burst_time = cp.burst_time - time_slice;
    cp.stop_time = mlfq.current_time;
    rq = [...rq, cp];
  } else {
    mlfq.current_time = mlfq.current_time + cp.burst_time;
    cp.burst_time = 0;
    cp.stop_time = mlfq.current_time;
    cp.turnaround_time = mlfq.current_time - cp.arrival_time;
    finished = [...finished, cp];
  }
    i = i + 1;
  }
  mlfq.finish_queue = List<Process>.from([...mlfq.finish_queue, ...finished]);
  return RRResult(finished: finished, ready: rq);
}

List<Process> multi_level_feedback_queue(MLFQ mlfq) {
  int i = 0;
  while (i < mlfq.number_of_queues - 1) {
    RRResult rr = round_robin(mlfq, mlfq.ready_queue, mlfq.time_slices[i]);
    mlfq.ready_queue = rr.ready;
    i = i + 1;
  }
  first_come_first_served(mlfq, mlfq.ready_queue);
  return mlfq.finish_queue;
}

Process P1 = make_process("P1", 0, 53);
Process P2 = make_process("P2", 0, 17);
Process P3 = make_process("P3", 0, 68);
Process P4 = make_process("P4", 0, 24);
int number_of_queues = 3;
List<int> time_slices = [17, 25];
List<Process> queue = [P1, P2, P3, P4];
MLFQ mlfq = make_mlfq(number_of_queues, time_slices, queue, 0);
List<Process> finish_queue = multi_level_feedback_queue(mlfq);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("waiting time:			" + _str(calculate_waiting_time([P1, P2, P3, P4])));
  print("completion time:		" + _str(calculate_completion_time([P1, P2, P3, P4])));
  print("turnaround time:		" + _str(calculate_turnaround_time([P1, P2, P3, P4])));
  print("sequence of finished processes:	" + _str(calculate_sequence_of_finish_queue(mlfq)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
