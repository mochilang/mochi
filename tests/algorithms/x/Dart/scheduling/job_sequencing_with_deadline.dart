// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Job {
  int id;
  int deadline;
  int profit;
  Job({required this.id, required this.deadline, required this.profit});
}

List<Job> sort_jobs_by_profit(List<Job> jobs) {
  List<Job> js = jobs;
  int i = 0;
  while (i < js.length) {
    int j = 0;
    while (j < js.length - i - 1) {
    Job a = js[j];
    Job b = js[j + 1];
    if (a.profit < b.profit) {
    while (js.length <= j) { js.add(null as dynamic); } js[j] = b;
    while (js.length <= j + 1) { js.add(null as dynamic); } js[j + 1] = a;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return js;
}

int max_deadline(List<Job> jobs) {
  int max_d = 0;
  int i = 0;
  while (i < jobs.length) {
    Job job = jobs[i];
    int d = job.deadline;
    if (d > max_d) {
    max_d = d;
  }
    i = i + 1;
  }
  return max_d;
}

List<int> job_sequencing_with_deadlines(List<Job> jobs) {
  List<Job> js = sort_jobs_by_profit(jobs);
  int max_d = max_deadline(js);
  List<int> time_slots = <int>[];
  int t = 0;
  while (t < max_d) {
    time_slots = (time_slots..add(0 - 1));
    t = t + 1;
  }
  int count = 0;
  int max_profit = 0;
  int i = 0;
  while (i < js.length) {
    Job job = js[i];
    int j = job.deadline - 1;
    while (j >= 0) {
    if (time_slots[j] == 0 - 1) {
    while (time_slots.length <= j) { time_slots.add(0); } time_slots[j] = job.id;
    count = count + 1;
    max_profit = max_profit + job.profit;
    break;
  }
    j = j - 1;
  }
    i = i + 1;
  }
  List<int> result = <int>[];
  result = (result..add(count));
  result = (result..add(max_profit));
  return result;
}

List<Job> jobs1 = <Job>[];
List<Job> jobs2 = <Job>[];
void main() {
  jobs1 = (jobs1..add(Job(id: 1, deadline: 4, profit: 20)));
  jobs1 = (jobs1..add(Job(id: 2, deadline: 1, profit: 10)));
  jobs1 = (jobs1..add(Job(id: 3, deadline: 1, profit: 40)));
  jobs1 = (jobs1..add(Job(id: 4, deadline: 1, profit: 30)));
  print(_str(job_sequencing_with_deadlines(jobs1)));
  jobs2 = (jobs2..add(Job(id: 1, deadline: 2, profit: 100)));
  jobs2 = (jobs2..add(Job(id: 2, deadline: 1, profit: 19)));
  jobs2 = (jobs2..add(Job(id: 3, deadline: 2, profit: 27)));
  jobs2 = (jobs2..add(Job(id: 4, deadline: 1, profit: 25)));
  jobs2 = (jobs2..add(Job(id: 5, deadline: 1, profit: 15)));
  print(_str(job_sequencing_with_deadlines(jobs2)));
}
