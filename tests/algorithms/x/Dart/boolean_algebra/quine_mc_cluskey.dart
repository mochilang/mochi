// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String compare_string(String string1, String string2) {
  String result = "";
  int count = 0;
  int i = 0;
  while (i < string1.length) {
    String c1 = _substr(string1, i, i + 1);
    String c2 = _substr(string2, i, i + 1);
    if (c1 != c2) {
    count = count + 1;
    result = result + "_";
  } else {
    result = result + c1;
  }
    i = i + 1;
  }
  if (count > 1) {
    return "";
  }
  return result;
}

bool contains_string(List<String> arr, String value) {
  int i = 0;
  while (i < arr.length) {
    if (arr[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> unique_strings(List<String> arr) {
  List<String> res = <String>[];
  int i = 0;
  while (i < arr.length) {
    if (!contains_string(res, arr[i])) {
    res = [...res, arr[i]];
  }
    i = i + 1;
  }
  return res;
}

List<String> check(List<String> binary) {
  List<String> pi = <String>[];
  List<String> current = binary;
  while (true) {
    List<String> check1 = <String>[];
    int i = 0;
    while (i < current.length) {
    check1 = [...check1, "\$"];
    i = i + 1;
  }
    List<String> temp = <String>[];
    i = 0;
    while (i < current.length) {
    int j = i + 1;
    while (j < current.length) {
    String k = compare_string(current[i], current[j]);
    if (k == "") {
    while (check1.length <= i) { check1.add(""); } check1[i] = "*";
    while (check1.length <= j) { check1.add(""); } check1[j] = "*";
    temp = [...temp, "X"];
  }
    j = j + 1;
  }
    i = i + 1;
  }
    i = 0;
    while (i < current.length) {
    if (check1[i] == "\$") {
    pi = [...pi, current[i]];
  }
    i = i + 1;
  }
    if (temp.length == 0) {
    return pi;
  }
    current = unique_strings(temp);
  }
}

List<String> decimal_to_binary(int no_of_variable, List<int> minterms) {
  List<String> temp = <String>[];
  int idx = 0;
  while (idx < minterms.length) {
    int minterm = minterms[idx];
    String string = "";
    int i = 0;
    while (i < no_of_variable) {
    string = (minterm % 2).toString() + string;
    minterm = minterm ~/ 2;
    i = i + 1;
  }
    temp = [...temp, string];
    idx = idx + 1;
  }
  return temp;
}

bool is_for_table(String string1, String string2, int count) {
  int count_n = 0;
  int i = 0;
  while (i < string1.length) {
    String c1 = _substr(string1, i, i + 1);
    String c2 = _substr(string2, i, i + 1);
    if (c1 != c2) {
    count_n = count_n + 1;
  }
    i = i + 1;
  }
  return count_n == count;
}

int count_ones(List<int> row) {
  int c = 0;
  int j = 0;
  while (j < row.length) {
    if (row[j] == 1) {
    c = c + 1;
  }
    j = j + 1;
  }
  return c;
}

List<String> selection(List<List<int>> chart, List<String> prime_implicants) {
  List<String> temp = <String>[];
  List<int> select = <int>[];
  int i = 0;
  while (i < chart.length) {
    select = [...select, 0];
    i = i + 1;
  }
  int col = 0;
  while (col < chart[0].length) {
    int count = 0;
    int row = 0;
    while (row < chart.length) {
    if (chart[row][col] == 1) {
    count = count + 1;
  }
    row = row + 1;
  }
    if (count == 1) {
    int rem = 0;
    row = 0;
    while (row < chart.length) {
    if (chart[row][col] == 1) {
    rem = row;
  }
    row = row + 1;
  };
    while (select.length <= rem) { select.add(0); } select[rem] = 1;
  }
    col = col + 1;
  }
  i = 0;
  while (i < select.length) {
    if (select[i] == 1) {
    int j = 0;
    while (j < chart[0].length) {
    if (chart[i][j] == 1) {
    int r = 0;
    while (r < chart.length) {
    while (chart[r]!.length <= j) { chart[r]!.add(0); } chart[r]![j] = 0;
    r = r + 1;
  };
  }
    j = j + 1;
  };
    temp = [...temp, prime_implicants[i]];
  }
    i = i + 1;
  }
  while (true) {
    List<int> counts = <int>[];
    int r = 0;
    while (r < chart.length) {
    counts = [...counts, count_ones(chart[r])];
    r = r + 1;
  }
    int max_n = counts[0];
    int rem = 0;
    int k = 1;
    while (k < counts.length) {
    if (counts[k] > max_n) {
    max_n = counts[k];
    rem = k;
  }
    k = k + 1;
  }
    if (max_n == 0) {
    return temp;
  }
    temp = [...temp, prime_implicants[rem]];
    int j = 0;
    while (j < chart[0].length) {
    if (chart[rem][j] == 1) {
    int r2 = 0;
    while (r2 < chart.length) {
    while (chart[r2]!.length <= j) { chart[r2]!.add(0); } chart[r2]![j] = 0;
    r2 = r2 + 1;
  };
  }
    j = j + 1;
  }
  }
}

int count_char(String s, String ch) {
  int cnt = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

List<List<int>> prime_implicant_chart(List<String> prime_implicants, List<String> binary) {
  List<List<int>> chart = <List<int>>[];
  int i = 0;
  while (i < prime_implicants.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < binary.length) {
    row = [...row, 0];
    j = j + 1;
  }
    chart = ([...chart, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i < prime_implicants.length) {
    int count = count_char(prime_implicants[i], "_");
    int j = 0;
    while (j < binary.length) {
    if (is_for_table(prime_implicants[i], binary[j], count)) {
    while (chart[i]!.length <= j) { chart[i]!.add(0); } chart[i]![j] = 1;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return chart;
}

void _main() {
  int no_of_variable = 3;
  List<int> minterms = [1, 5, 7];
  List<String> binary = decimal_to_binary(no_of_variable, minterms);
  List<String> prime_implicants = check(binary);
  print("Prime Implicants are:");
  print((prime_implicants).toString());
  List<List<int>> chart = prime_implicant_chart(prime_implicants, binary);
  List<String> essential_prime_implicants = selection(chart, prime_implicants);
  print("Essential Prime Implicants are:");
  print((essential_prime_implicants).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
