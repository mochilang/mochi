// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int nor_gate(int input_1, int input_2) {
  if (input_1 == 0 && input_2 == 0) {
    return 1;
  }
  return 0;
}

String center(String s, int width) {
  int total = width - s.length;
  if (total <= 0) {
    return s;
  }
  int left = total ~/ 2;
  int right = total - left;
  String res = s;
  int i = 0;
  while (i < left) {
    res = " " + res;
    i = i + 1;
  }
  int j = 0;
  while (j < right) {
    res = res + " ";
    j = j + 1;
  }
  return res;
}

String make_table_row(int i, int j) {
  int output = nor_gate(i, j);
  return "| " + center((i).toString(), 8) + " | " + center((j).toString(), 8) + " | " + center((output).toString(), 8) + " |";
}

String truth_table() {
  return "Truth Table of NOR Gate:\n" + "| Input 1 | Input 2 | Output  |\n" + make_table_row(0, 0) + "\n" + make_table_row(0, 1) + "\n" + make_table_row(1, 0) + "\n" + make_table_row(1, 1);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(nor_gate(0, 0));
  print(nor_gate(0, 1));
  print(nor_gate(1, 0));
  print(nor_gate(1, 1));
  print(truth_table());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
