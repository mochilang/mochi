// Generated by Mochi transpiler
import 'dart:convert';

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}


void _json(dynamic v) {
  print(jsonEncode(v));
}

int sum_list(List<int> nums) {
  int s = 0;
  for (int n in nums) {
    s = s + n;
  }
  return s;
}

List<List<int>> create_state_space_tree(List<int> nums, int max_sum, int num_index, List<int> path, int curr_sum, int remaining_sum) {
  List<List<int>> result = <List<int>>[];
  if (curr_sum > max_sum || curr_sum + remaining_sum < max_sum) {
    return result;
  }
  if (curr_sum == max_sum) {
    result = ([...result, path] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    return result;
  }
  int index = num_index;
  while (index < nums.length) {
    int value = nums[index];
    List<List<int>> subres = create_state_space_tree(nums, max_sum, index + 1, [...path, value], curr_sum + value, remaining_sum - value);
    int j = 0;
    while (j < subres.length) {
    result = ([...result, subres[j]] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    j = j + 1;
  }
    index = index + 1;
  }
  return result;
}

List<List<int>> generate_sum_of_subsets_solutions(List<int> nums, int max_sum) {
  int total = sum_list(nums);
  return create_state_space_tree(nums, max_sum, 0, <int>[], 0, total);
}

void _main() {
  _json(generate_sum_of_subsets_solutions([3, 34, 4, 12, 5, 2], 9));
}

void _start() {
  _main();
}

void main() => _start();
