// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool run_maze(List<List<int>> maze, int i, int j, int dr, int dc, List<List<int>> sol) {
  int size = maze.length;
  if (i == dr && j == dc && maze[i][j] == 0) {
    sol[i]![j] = 0;
    return true;
  }
  bool lower_flag = i >= 0 && j >= 0;
  bool upper_flag = i < size && j < size;
  if (lower_flag && upper_flag) {
    bool block_flag = sol[i][j] == 1 && maze[i][j] == 0;
    if (block_flag) {
    sol[i]![j] = 0;
    if (run_maze(maze, i + 1, j, dr, dc, sol) || run_maze(maze, i, j + 1, dr, dc, sol) || run_maze(maze, i - 1, j, dr, dc, sol) || run_maze(maze, i, j - 1, dr, dc, sol)) {
    return true;
  };
    sol[i]![j] = 1;
    return false;
  };
  }
  return false;
}

List<List<int>> solve_maze(List<List<int>> maze, int sr, int sc, int dr, int dc) {
  int size = maze.length;
  if (!(0 <= sr && sr < size && 0 <= sc && sc < size && 0 <= dr && dr < size && 0 <= dc && dc < size)) {
    throw Exception("Invalid source or destination coordinates");
  }
  List<List<int>> sol = <List<int>>[];
  int i = 0;
  while (i < size) {
    List<int> row = <int>[];
    int j = 0;
    while (j < size) {
    row = [...row, 1];
    j = j + 1;
  }
    sol = ([...sol, row] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    i = i + 1;
  }
  bool solved = run_maze(maze, sr, sc, dr, dc, sol);
  if (solved) {
    return sol;
  } else {
    throw Exception("No solution exists!");
  }
}

List<List<int>> maze = [[0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]];
BigInt n = BigInt.from(maze.length - 1);
void main() {
  print((solve_maze(maze, 0, 0, (n).toInt(), (n).toInt())).toString());
}
