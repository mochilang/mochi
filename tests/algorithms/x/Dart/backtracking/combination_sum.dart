// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> backtrack(List<int> candidates, int start, int target, List<int> path, List<List<int>> result) {
  if (target == 0) {
    return ([...result, path] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
  }
  int i = start;
  while (i < candidates.length) {
    int value = candidates[i];
    if (value <= target) {
    List<int> new_path = [...path, value];
    result = backtrack(candidates, i, target - value, new_path, result);
  }
    i = i + 1;
  }
  return result;
}

List<List<int>> combination_sum(List<int> candidates, int target) {
  List<int> path = [];
  List<List<int>> result = [];
  return backtrack(candidates, 0, target, path, result);
}

void main() {
  print((combination_sum([2, 3, 5], 8)).toString());
  print((combination_sum([2, 3, 6, 7], 7)).toString());
}
