// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

bool contains(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int get_point_key(int len_board, int len_board_column, int row, int column) {
  return len_board * len_board_column * row + column;
}

bool search_from(List<List<String>> board, String word, int row, int column, int word_index, List<int> visited) {
  if (board[row][column] != _substr(word, word_index, word_index + 1)) {
    return false;
  }
  if (word_index == word.length - 1) {
    return true;
  }
  int len_board = board.length;
  int len_board_column = board[0].length;
  List<int> dir_i = [0, 0, -1, 1];
  List<int> dir_j = [1, -1, 0, 0];
  int k = 0;
  while (k < 4) {
    int next_i = row + dir_i[k];
    int next_j = column + dir_j[k];
    if (!(0 <= next_i && next_i < len_board && 0 <= next_j && next_j < len_board_column)) {
    k = k + 1;
    continue;
  }
    int key = get_point_key(len_board, len_board_column, next_i, next_j);
    if (visited.contains(key)) {
    k = k + 1;
    continue;
  }
    List<int> new_visited = [...visited, key];
    if (search_from(board, word, next_i, next_j, word_index + 1, new_visited)) {
    return true;
  }
    k = k + 1;
  }
  return false;
}

bool word_exists(List<List<String>> board, String word) {
  int len_board = board.length;
  int len_board_column = board[0].length;
  int i = 0;
  while (i < len_board) {
    int j = 0;
    while (j < len_board_column) {
    int key = get_point_key(len_board, len_board_column, i, j);
    List<int> visited = [...([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList(), key];
    if (search_from(board, word, i, j, 0, visited)) {
    return true;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return false;
}

void _main() {
  List<List<String>> board = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]];
  print(word_exists(board, "ABCCED"));
  print(word_exists(board, "SEE"));
  print(word_exists(board, "ABCB"));
}

void _start() {
  _main();
}

void main() => _start();
