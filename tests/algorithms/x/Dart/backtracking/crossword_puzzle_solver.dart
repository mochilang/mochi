// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_valid(List<List<String>> puzzle, String word, int row, int col, bool vertical) {
  for (int i = 0; i < word.length; i++) {
    if (vertical) {
    if (row + i >= puzzle.length || puzzle[row + i][col] != "") {
    return false;
  };
  } else {
    if (col + i >= puzzle[0].length || puzzle[row][col + i] != "") {
    return false;
  };
  }
  }
  return true;
}

dynamic place_word(List<List<String>> puzzle, String word, int row, int col, bool vertical) {
  for (int i = 0; i < word.length; i++) {
    String ch = word.substring(i, i + 1);
    if (vertical) {
    while (puzzle[row + i]!.length <= col) { puzzle[row + i]!.add(""); } puzzle[row + i]![col] = ch;
  } else {
    while (puzzle[row]!.length <= col + i) { puzzle[row]!.add(""); } puzzle[row]![col + i] = ch;
  }
  }
}

dynamic remove_word(List<List<String>> puzzle, String word, int row, int col, bool vertical) {
  for (int i = 0; i < word.length; i++) {
    if (vertical) {
    while (puzzle[row + i]!.length <= col) { puzzle[row + i]!.add(""); } puzzle[row + i]![col] = "";
  } else {
    while (puzzle[row]!.length <= col + i) { puzzle[row]!.add(""); } puzzle[row]![col + i] = "";
  }
  }
}

bool solve_crossword(List<List<String>> puzzle, List<String> words, List<bool> used) {
  for (int row = 0; row < puzzle.length; row++) {
    for (int col = 0; col < puzzle[0].length; col++) {
    if (puzzle[row][col] == "") {
    for (int i = 0; i < words.length; i++) {
    if (!used[i]) {
    String word = words[i];
    for (bool vertical in [true, false]) {
    if (is_valid(puzzle, word, row, col, vertical)) {
    place_word(puzzle, word, row, col, vertical);
    while (used.length <= i) { used.add(false); } used[i] = true;
    if (solve_crossword(puzzle, words, used)) {
    return true;
  };
    while (used.length <= i) { used.add(false); } used[i] = false;
    remove_word(puzzle, word, row, col, vertical);
  }
  };
  }
  };
    return false;
  }
  }
  }
  return true;
}

List<List<String>> puzzle = [["", "", ""], ["", "", ""], ["", "", ""]];
List<String> words = ["cat", "dog", "car"];
List<bool> used = [false, false, false];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  if (solve_crossword(puzzle, words, used)) {
    print("Solution found:");
    for (List<String> row in puzzle) {
    print(row);
  };
  } else {
    print("No solution found:");
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
