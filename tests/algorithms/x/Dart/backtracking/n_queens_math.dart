// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _repeat(String s, int n) => n <= 0 ? '' : List.filled(n, s).join();

bool contains(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String repeat(String s, int times) {
  String result = "";
  int i = 0;
  while (i < times) {
    result = result + s;
    i = i + 1;
  }
  return result;
}

List<String> build_board(List<int> pos, int n) {
  List<String> board = <String>[];
  int i = 0;
  while (i < pos.length) {
    int col = pos[i];
    String line = _repeat(". ", col) + "Q " + _repeat(". ", n - 1 - col);
    board = [...board, line];
    i = i + 1;
  }
  return board;
}

List<List<String>> depth_first_search(List<int> pos, List<int> dr, List<int> dl, int n) {
  int row = pos.length;
  if (row == n) {
    List<List<String>> single = <List<String>>[];
    single = ([...single, build_board(pos, n)] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    return single;
  }
  List<List<String>> boards = <List<String>>[];
  int col = 0;
  while (col < n) {
    if (pos.contains(col) || dr.contains(row - col) || dl.contains(row + col)) {
    col = col + 1;
    continue;
  }
    List<List<String>> result = depth_first_search([...pos, col], [...dr, row - col], [...dl, row + col], n);
    boards = ([...boards, ...result] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    col = col + 1;
  }
  return boards;
}

int n_queens_solution(int n) {
  List<List<String>> boards = depth_first_search(([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList(), ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList(), ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList(), n);
  int i = 0;
  while (i < boards.length) {
    int j = 0;
    while (j < boards[i].length) {
    print(boards[i][j]);
    j = j + 1;
  }
    print("");
    i = i + 1;
  }
  print([boards.length, "solutions were found."].join(" "));
  return boards.length;
}

void main() {
  n_queens_solution(4);
}
