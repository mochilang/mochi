// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<List<int>> create_board(int n) {
  List<List<int>> board = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0];
    j = j + 1;
  }
    board = ([...board, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return board;
}

bool is_safe(List<List<int>> board, int row, int column) {
  int n = board.length;
  int i = 0;
  while (i < row) {
    if (board[i][column] == 1) {
    return false;
  }
    i = i + 1;
  }
  i = row - 1;
  int j = column - 1;
  while (i >= 0 && j >= 0) {
    if (board[i][j] == 1) {
    return false;
  }
    i = i - 1;
    j = j - 1;
  }
  i = row - 1;
  j = column + 1;
  while (i >= 0 && j < n) {
    if (board[i][j] == 1) {
    return false;
  }
    i = i - 1;
    j = j + 1;
  }
  return true;
}

String row_string(List<int> row) {
  String s = "";
  int j = 0;
  while (j < row.length) {
    if (row[j] == 1) {
    s = s + "Q ";
  } else {
    s = s + ". ";
  }
    j = j + 1;
  }
  return s;
}

void printboard(List<List<int>> board) {
  int i = 0;
  while (i < board.length) {
    print(row_string(board[i]));
    i = i + 1;
  }
}

int solve(List<List<int>> board, int row) {
  if (row >= board.length) {
    printboard(board);
    print("");
    return 1;
  }
  int count = 0;
  int i = 0;
  while (i < board.length) {
    if (is_safe(board, row, i)) {
    while (board[row]!.length <= i) { board[row]!.add(0); } board[row]![i] = 1;
    count = count + solve(board, row + 1);
    while (board[row]!.length <= i) { board[row]!.add(0); } board[row]![i] = 0;
  }
    i = i + 1;
  }
  return count;
}

int n_queens(int n) {
  List<List<int>> board = create_board(n);
  int total = solve(board, 0);
  print("The total number of solutions are: " + _str(total));
  return total;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  n_queens(4);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
