// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> create_board(int n) {
  List<List<int>> board = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0];
    j = j + 1;
  }
    board = ([...board, row] as List).map((e) => (e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList()).toList();
    i = i + 1;
  }
  return board;
}

bool is_safe(List<List<int>> board, int row, int column) {
  int n = board.length;
  int i = 0;
  while (i < row) {
    if (board[i][column] == 1) {
    return false;
  }
    i = i + 1;
  }
  i = row - 1;
  int j = column - 1;
  while (i >= 0 && j >= 0) {
    if (board[i][j] == 1) {
    return false;
  }
    i = i - 1;
    j = j - 1;
  }
  i = row - 1;
  j = column + 1;
  while (i >= 0 && j < n) {
    if (board[i][j] == 1) {
    return false;
  }
    i = i - 1;
    j = j + 1;
  }
  return true;
}

String row_string(List<int> row) {
  String s = "";
  int j = 0;
  while (j < row.length) {
    if (row[j] == 1) {
    s = s + "Q ";
  } else {
    s = s + ". ";
  }
    j = j + 1;
  }
  return s;
}

void printboard(List<List<int>> board) {
  int i = 0;
  while (i < board.length) {
    print(row_string(board[i]));
    i = i + 1;
  }
}

int solve(List<List<int>> board, int row) {
  if (row >= board.length) {
    printboard(board);
    print("");
    return 1;
  }
  int count = 0;
  int i = 0;
  while (i < board.length) {
    if (is_safe(board, row, i)) {
    board[row]![i] = 1;
    count = count + solve(board, row + 1);
    board[row]![i] = 0;
  }
    i = i + 1;
  }
  return count;
}

int n_queens(int n) {
  List<List<int>> board = create_board(n);
  int total = solve(board, 0);
  print("The total number of solutions are: " + (total).toString());
  return total;
}

void main() {
  n_queens(4);
}
