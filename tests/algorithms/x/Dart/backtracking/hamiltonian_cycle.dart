// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

bool valid_connection(List<List<int>> graph, int next_ver, int curr_ind, List<int> path) {
  if (graph[path[curr_ind - 1]][next_ver] == 0) {
    return false;
  }
  for (int v in path) {
    if (v == next_ver) {
    return false;
  }
  }
  return true;
}

bool util_hamilton_cycle(List<List<int>> graph, List<int> path, int curr_ind) {
  if (curr_ind == graph.length) {
    return graph[path[curr_ind - 1]][path[0]] == 1;
  }
  int next_ver = 0;
  while (next_ver < graph.length) {
    if (valid_connection(graph, next_ver, curr_ind, path)) {
    while (path.length <= curr_ind) { path.add(0); } path[curr_ind] = next_ver;
    if (util_hamilton_cycle(graph, path, curr_ind + 1)) {
    return true;
  };
    while (path.length <= curr_ind) { path.add(0); } path[curr_ind] = -1;
  }
    next_ver = next_ver + 1;
  }
  return false;
}

List<int> hamilton_cycle(List<List<int>> graph, int start_index) {
  List<int> path = <int>[];
  int i = 0;
  while (i < graph.length + 1) {
    while (path.length <= i) { path.add(0); } path[i] = -1;
    i = i + 1;
  }
  while (path.length <= 0) { path.add(0); } path[0] = start_index;
  int last = path.length - 1;
  while (path.length <= last) { path.add(0); } path[last] = start_index;
  if (util_hamilton_cycle(graph, path, 1)) {
    return path;
  }
  return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

void main() {
}
