// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

dynamic create_state_space_tree(List<dynamic> sequence, List<dynamic> current, int index) {
  if (index == sequence.length) {
    print(current);
    return;
  }
  create_state_space_tree(List<dynamic>.from(sequence), List<dynamic>.from(current), index + 1);
  List<dynamic> with_elem = [...current, sequence[index]];
  create_state_space_tree(List<dynamic>.from(sequence), List<dynamic>.from(with_elem), index + 1);
}

dynamic generate_all_subsequences(List<dynamic> sequence) {
  create_state_space_tree(List<dynamic>.from(sequence), List<dynamic>.from([] as List<dynamic>), 0);
}

List<dynamic> seq = [1, 2, 3];
List<dynamic> seq2 = ["A", "B", "C"];
void main() {
  generate_all_subsequences(List<dynamic>.from(seq));
  generate_all_subsequences(List<dynamic>.from(seq2));
}
