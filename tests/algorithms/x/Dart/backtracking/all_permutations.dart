// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<bool> repeat_bool(int times) {
  List<bool> res = <bool>[];
  int i = 0;
  while (i < times) {
    res = [...res, false];
    i = i + 1;
  }
  return res;
}

List<bool> set_bool(List<bool> xs, int idx, bool value) {
  List<bool> res = <bool>[];
  int i = 0;
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

void create_state_space_tree(List<dynamic> sequence, List<dynamic> current, int index, List<bool> used) {
  if (index == sequence.length) {
    print((current).toString());
    return;
  }
  int i = 0;
  while (i < sequence.length) {
    if (!used[i]) {
    List<dynamic> next_current = [...current, sequence[i]];
    List<bool> next_used = set_bool(used, i, true);
    create_state_space_tree(List<dynamic>.from(sequence), List<dynamic>.from(next_current), index + 1, next_used);
  }
    i = i + 1;
  }
}

void generate_all_permutations(List<dynamic> sequence) {
  List<bool> used = repeat_bool(sequence.length);
  create_state_space_tree(List<dynamic>.from(sequence), List<dynamic>.from([] as List<dynamic>), 0, used);
}

List<dynamic> sequence = [3, 1, 2, 4];
List<dynamic> sequence_2 = ["A", "B", "C"];
void main() {
  generate_all_permutations(List<dynamic>.from(sequence));
  generate_all_permutations(List<dynamic>.from(sequence_2));
}
