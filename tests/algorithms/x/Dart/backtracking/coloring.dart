// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool valid_coloring(List<int> neighbours, List<int> colored_vertices, int color) {
  int i = 0;
  while (i < neighbours.length) {
    if (neighbours[i] == 1 && colored_vertices[i] == color) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

bool util_color(List<List<int>> graph, int max_colors, List<int> colored_vertices, int index) {
  if (index == graph.length) {
    return true;
  }
  int c = 0;
  while (c < max_colors) {
    if (valid_coloring(graph[index], colored_vertices, c)) {
    while (colored_vertices.length <= index) { colored_vertices.add(0); } colored_vertices[index] = c;
    if (util_color(graph, max_colors, colored_vertices, index + 1)) {
    return true;
  };
    while (colored_vertices.length <= index) { colored_vertices.add(0); } colored_vertices[index] = -1;
  }
    c = c + 1;
  }
  return false;
}

List<int> color(List<List<int>> graph, int max_colors) {
  List<int> colored_vertices = <int>[];
  int i = 0;
  while (i < graph.length) {
    colored_vertices = [...colored_vertices, -1];
    i = i + 1;
  }
  if (util_color(graph, max_colors, colored_vertices, 0)) {
    return colored_vertices;
  }
  return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

List<List<int>> graph = [[0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + color(graph, 3).join(', ') + "]");
  print("\n");
  print(color(graph, 2).length);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
