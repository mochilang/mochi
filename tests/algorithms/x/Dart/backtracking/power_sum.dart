// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int int_pow(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

int backtrack(int target, int exp, int current, int current_sum) {
  if (current_sum == target) {
    return 1;
  }
  int p = int_pow(current, exp);
  int count = 0;
  if (current_sum + p <= target) {
    count = count + backtrack(target, exp, current + 1, current_sum + p);
  }
  if (p < target) {
    count = count + backtrack(target, exp, current + 1, current_sum);
  }
  return count;
}

int solve(int target, int exp) {
  if (!(1 <= target && target <= 1000 && 2 <= exp && exp <= 10)) {
    print("Invalid input");
    return 0;
  }
  return backtrack(target, exp, 1, 0);
}

void main() {
  print(solve(13, 2));
  print(solve(10, 2));
  print(solve(10, 3));
}
