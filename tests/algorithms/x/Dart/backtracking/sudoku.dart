// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_safe(List<List<int>> grid, int row, int column, int n) {
  for (int i = 0; i < 9; i++) {
    if (grid[row][i] == n || grid[i][column] == n) {
    return false;
  }
  }
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
    if (grid[row - row % 3 + i][column - column % 3 + j] == n) {
    return false;
  }
  }
  }
  return true;
}

List<int> find_empty_location(List<List<int>> grid) {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
    if (grid[i][j] == 0) {
    return [i, j];
  }
  }
  }
  return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
}

bool sudoku(List<List<int>> grid) {
  List<int> loc = find_empty_location(grid);
  if (loc.length == 0) {
    return true;
  }
  int row = loc[0];
  int column = loc[1];
  for (int digit = 1; digit < 10; digit++) {
    if (is_safe(grid, row, column, digit)) {
    grid[row]![column] = digit;
    if (sudoku(grid)) {
    return true;
  };
    grid[row]![column] = 0;
  }
  }
  return false;
}

dynamic print_solution(List<List<int>> grid) {
  for (int r = 0; r < grid.length; r++) {
    String line = "";
    for (int c = 0; c < grid[r].length; c++) {
    line = line + (grid[r][c]).toString();
    if (c < grid[r].length - 1) {
    line = line + " ";
  }
  }
    print(line);
  }
}

List<List<int>> initial_grid = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]];
List<List<int>> no_solution = [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0, 2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]];
List<List<List<int>>> examples = [initial_grid, no_solution];
int idx = 0;
void main() {
  while (idx < examples.length) {
    print("\nExample grid:\n====================");
    print_solution(examples[idx]);
    print("\nExample grid solution:");
    if (sudoku(examples[idx])) {
    print_solution(examples[idx]);
  } else {
    print("Cannot find a solution.");
  }
    idx = idx + 1;
  }
}
