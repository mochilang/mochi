// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<List<int>> get_valid_pos(List<int> position, int n) {
  int y = position[0];
  int x = position[1];
  List<List<int>> positions = [[y + 1, x + 2], [y - 1, x + 2], [y + 1, x - 2], [y - 1, x - 2], [y + 2, x + 1], [y + 2, x - 1], [y - 2, x + 1], [y - 2, x - 1]];
  List<List<int>> permissible = <List<int>>[];
  for (int idx = 0; idx < positions.length; idx++) {
    List<int> inner = positions[idx];
    int y_test = inner[0];
    int x_test = inner[1];
    if (y_test >= 0 && y_test < n && x_test >= 0 && x_test < n) {
    permissible = ([...permissible, inner] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  }
  return permissible;
}

bool is_complete(List<List<int>> board) {
  for (int i = 0; i < board.length; i++) {
    List<int> row = board[i];
    for (int j = 0; j < row.length; j++) {
    if (row[j] == 0) {
    return false;
  }
  }
  }
  return true;
}

bool open_knight_tour_helper(List<List<int>> board, List<int> pos, int curr) {
  if (is_complete(board)) {
    return true;
  }
  List<List<int>> moves = get_valid_pos(pos, board.length);
  for (int i = 0; i < moves.length; i++) {
    List<int> position = moves[i];
    int y = position[0];
    int x = position[1];
    if (board[y][x] == 0) {
    while (board[y]!.length <= x) { board[y]!.add(0); } board[y]![x] = curr + 1;
    if (open_knight_tour_helper(board, position, curr + 1)) {
    return true;
  };
    while (board[y]!.length <= x) { board[y]!.add(0); } board[y]![x] = 0;
  }
  }
  return false;
}

List<List<int>> open_knight_tour(int n) {
  List<List<int>> board = <List<int>>[];
  for (int i = 0; i < n; i++) {
    List<int> row = <int>[];
    for (int j = 0; j < n; j++) {
    row = [...row, 0];
  }
    board = ([...board, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
    while (board[i]!.length <= j) { board[i]!.add(0); } board[i]![j] = 1;
    if (open_knight_tour_helper(board, [i, j], 1)) {
    return board;
  }
    while (board[i]!.length <= j) { board[i]!.add(0); } board[i]![j] = 0;
  }
  }
  print("Open Knight Tour cannot be performed on a board of size " + _str(n));
  return board;
}

List<List<int>> board = open_knight_tour(1);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(board[0][0]);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
