// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

String alphabet = "abcdefghijklmnopqrstuvwxyz";
bool contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> remove_item(List<String> xs, String x) {
  List<String> res = <String>[];
  bool removed = false;
  int i = 0;
  while (i < xs.length) {
    if (!removed && xs[i] == x) {
    removed = true;
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<String> word_ladder(String current, List<String> path, String target, List<String> words) {
  if (current == target) {
    return path;
  }
  int i = 0;
  while (i < current.length) {
    int j = 0;
    while (j < alphabet.length) {
    String c = _substr(alphabet, j, j + 1);
    String transformed = _substr(current, 0, i) + c + _substr(current, i + 1, current.length);
    if (words.contains(transformed)) {
    List<String> new_words = remove_item(words, transformed);
    List<String> new_path = [...path, transformed];
    List<String> result = word_ladder(transformed, new_path, target, new_words);
    if (result.length > 0) {
    return result;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return List<String>.from([]);
}

void _main() {
  List<String> w1 = ["hot", "dot", "dog", "lot", "log", "cog"];
  print(_str(word_ladder("hit", ["hit"], "cog", w1)));
  List<String> w2 = ["hot", "dot", "dog", "lot", "log"];
  print(_str(word_ladder("hit", ["hit"], "cog", w2)));
  List<String> w3 = ["load", "goad", "gold", "lead", "lord"];
  print(_str(word_ladder("lead", ["lead"], "gold", w3)));
  List<String> w4 = ["came", "cage", "code", "cade", "gave"];
  print(_str(word_ladder("game", ["game"], "code", w4)));
}

void _start() {
  _main();
}

void main() => _start();
