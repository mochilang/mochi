// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

bool contains(List<String> words, String target) {
  for (String w in words) {
    if (w == target) {
    return true;
  }
  }
  return false;
}

bool backtrack(String s, List<String> word_dict, int start) {
  if (start == s.length) {
    return true;
  }
  int end = start + 1;
  while (end <= s.length) {
    String substr = _substr(s, start, end);
    if (word_dict.contains(substr) && backtrack(s, word_dict, end)) {
    return true;
  }
    end = end + 1;
  }
  return false;
}

bool word_break(String s, List<String> word_dict) {
  return backtrack(s, word_dict, 0);
}

void main() {
  print(_str(word_break("leetcode", ["leet", "code"])));
  print(_str(word_break("applepenapple", ["apple", "pen"])));
  print(_str(word_break("catsandog", ["cats", "dog", "sand", "and", "cat"])));
}
