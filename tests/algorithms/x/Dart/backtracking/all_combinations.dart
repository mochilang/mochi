// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<int>> create_all_state(int increment, int total, int level, List<int> current, List<List<int>> result) {
  if (level == 0) {
    return ([...result, current] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  int i = increment;
  while (i <= total - level + 1) {
    List<int> next_current = [...current, i];
    result = create_all_state(i + 1, total, level - 1, next_current, result);
    i = i + 1;
  }
  return result;
}

List<List<int>> generate_all_combinations(int n, int k) {
  if (k < 0 || n < 0) {
    return ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  List<List<int>> result = [];
  return create_all_state(1, n, k, <int>[], result);
}

void main() {
  print(_str(generate_all_combinations(4, 2)));
  print(_str(generate_all_combinations(3, 1)));
}
