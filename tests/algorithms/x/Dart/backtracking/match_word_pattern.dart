// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String? get_value(List<String> keys, List<String> values, String key) {
  int i = 0;
  while (i < keys.length) {
    if (keys[i] == key) {
    return values[i];
  }
    i = i + 1;
  }
  return null;
}

bool contains_value(List<String> values, String value) {
  int i = 0;
  while (i < values.length) {
    if (values[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool backtrack(String pattern, String input_string, int pi, int si, List<String> keys, List<String> values) {
  if (pi == pattern.length && si == input_string.length) {
    return true;
  }
  if (pi == pattern.length || si == input_string.length) {
    return false;
  }
  String ch = _substr(pattern, pi, pi + 1);
  String? mapped = get_value(keys, values, ch);
  if (mapped != null) {
    if (_substr(input_string, si, si + mapped.length) == mapped) {
    return backtrack(pattern, input_string, pi + 1, si + mapped.length, keys, values);
  };
    return false;
  }
  int end = si + 1;
  while (end <= input_string.length) {
    String substr = _substr(input_string, si, end);
    if (contains_value(values, substr)) {
    end = end + 1;
    continue;
  }
    List<String> new_keys = [...keys, ch];
    List<String> new_values = [...values, substr];
    if (backtrack(pattern, input_string, pi + 1, end, new_keys, new_values)) {
    return true;
  }
    end = end + 1;
  }
  return false;
}

bool match_word_pattern(String pattern, String input_string) {
  List<String> keys = [];
  List<String> values = [];
  return backtrack(pattern, input_string, 0, 0, keys, values);
}

void _main() {
  print(match_word_pattern("aba", "GraphTreesGraph"));
  print(match_word_pattern("xyx", "PythonRubyPython"));
  print(match_word_pattern("GG", "PythonJavaPython"));
}

void _start() {
  _main();
}

void main() => _start();
