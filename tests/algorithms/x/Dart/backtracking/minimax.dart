// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int minimax(int depth, int node_index, bool is_max, List<int> scores, int height) {
  if (depth < 0) {
    throw Exception("Depth cannot be less than 0");
  }
  if (scores.length == 0) {
    throw Exception("Scores cannot be empty");
  }
  if (depth == height) {
    return scores[node_index];
  }
  if (is_max) {
    int left = minimax(depth + 1, node_index * 2, false, scores, height);
    int right = minimax(depth + 1, node_index * 2 + 1, false, scores, height);
    if (left > right) {
    return left;
  } else {
    return right;
  };
  }
  int left = minimax(depth + 1, node_index * 2, true, scores, height);
  int right = minimax(depth + 1, node_index * 2 + 1, true, scores, height);
  if (left < right) {
    return left;
  } else {
    return right;
  }
}

int tree_height(int n) {
  int h = 0;
  int v = n;
  while (v > 1) {
    v = v ~/ 2;
    h = h + 1;
  }
  return h;
}

void _main() {
  List<int> scores = [90, 23, 6, 33, 21, 65, 123, 34423];
  int height = tree_height(scores.length);
  print("Optimal value : " + _str(minimax(0, 0, true, scores, height)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
