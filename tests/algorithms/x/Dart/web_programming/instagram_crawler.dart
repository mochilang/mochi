// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class EdgeCount {
  int count;
  EdgeCount({required this.count});
}

class UserData {
  String username;
  String full_name;
  String biography;
  String business_email;
  String external_url;
  EdgeCount edge_followed_by;
  EdgeCount edge_follow;
  EdgeCount edge_owner_to_timeline_media;
  String profile_pic_url_hd;
  bool is_verified;
  bool is_private;
  UserData({required this.username, required this.full_name, required this.biography, required this.business_email, required this.external_url, required this.edge_followed_by, required this.edge_follow, required this.edge_owner_to_timeline_media, required this.profile_pic_url_hd, required this.is_verified, required this.is_private});
}

int index_of(String s, String sub) {
  int i = 0;
  while (i <= s.length - sub.length) {
    if (_substr(s, i, i + sub.length) == sub) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int parse_int(String s) {
  int value = 0;
  int i = 0;
  while (i < s.length) {
    value = value * 10 + ((s.substring(i, i + 1)).codeUnitAt(0));
    i = i + 1;
  }
  return value;
}

String extract_string(String text, String key) {
  String pattern = "\"" + key + "\":\"";
  int start = index_of(text, pattern) + pattern.length;
  int end = start;
  while (end < text.length && _substr(text, end, end + 1) != "\"") {
    end = end + 1;
  }
  return _substr(text, start, end);
}

int extract_int(String text, String key) {
  String pattern = "\"" + key + "\":{\"count\":";
  int start = index_of(text, pattern) + pattern.length;
  int end = start;
  while (end < text.length) {
    String ch = text.substring(end, end + 1);
    if (ch.compareTo("0") < 0 || ch.compareTo("9") > 0) {
    break;
  }
    end = end + 1;
  }
  String digits = _substr(text, start, end);
  int _num = parse_int(digits);
  return _num;
}

bool extract_bool(String text, String key) {
  String pattern = "\"" + key + "\":";
  int start = index_of(text, pattern) + pattern.length;
  String val = _substr(text, start, start + 5);
  String first = val.substring(0, 0 + 1);
  if (first == "t") {
    return true;
  }
  return false;
}

UserData extract_user_profile(String script) {
  return UserData(username: extract_string(script, "username"), full_name: extract_string(script, "full_name"), biography: extract_string(script, "biography"), business_email: extract_string(script, "business_email"), external_url: extract_string(script, "external_url"), edge_followed_by: EdgeCount(count: extract_int(script, "edge_followed_by")), edge_follow: EdgeCount(count: extract_int(script, "edge_follow")), edge_owner_to_timeline_media: EdgeCount(count: extract_int(script, "edge_owner_to_timeline_media")), profile_pic_url_hd: extract_string(script, "profile_pic_url_hd"), is_verified: extract_bool(script, "is_verified"), is_private: extract_bool(script, "is_private"));
}

String sample_script = "{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}";
UserData user = extract_user_profile(sample_script);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(user.full_name + " (" + user.username + ") is " + user.biography);
  print("number_of_posts = " + _str(user.edge_owner_to_timeline_media.count));
  print("number_of_followers = " + _str(user.edge_followed_by.count));
  print("number_of_followings = " + _str(user.edge_follow.count));
  print("email = " + user.business_email);
  print("website = " + user.external_url);
  print("profile_picture_url = " + user.profile_pic_url_hd);
  print("is_verified = " + _str(user.is_verified));
  print("is_private = " + _str(user.is_private));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
