// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class CovidData {
  int cases;
  int deaths;
  int recovered;
  CovidData({required this.cases, required this.deaths, required this.recovered});
}

int parse_int(String s) {
  int value = 0;
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == ",") {
    i = i + 1;
    continue;
  }
    value = value * 10 + ((ch).codeUnitAt(0));
    i = i + 1;
  }
  return value;
}

int find(String haystack, String needle, int start) {
  int nlen = needle.length;
  int i = start;
  while (i <= haystack.length - nlen) {
    int j = 0;
    bool matched = true;
    while (j < nlen) {
    if (_substr(haystack, i + j, i + j + 1) != _substr(needle, j, j + 1)) {
    matched = false;
    break;
  }
    j = j + 1;
  }
    if (matched) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

List<int> extract_numbers(String html) {
  List<int> nums = <int>[];
  int pos = 0;
  String start_tag = "<span>";
  String end_tag = "</span>";
  while (true) {
    int s = find(html, start_tag, pos);
    if (s == 0 - 1) {
    break;
  }
    int content_start = s + start_tag.length;
    int e = find(html, end_tag, content_start);
    if (e == 0 - 1) {
    break;
  }
    String num_str = _substr(html, content_start, e);
    nums = [...nums, parse_int(num_str)];
    pos = e + end_tag.length;
  }
  return nums;
}

CovidData covid_stats(String html) {
  List<int> nums = extract_numbers(html);
  return CovidData(cases: nums[0], deaths: nums[1], recovered: nums[2]);
}

void _main() {
  String sample_html = "<div class=\"maincounter-number\"><span>123456</span></div>" + "<div class=\"maincounter-number\"><span>7890</span></div>" + "<div class=\"maincounter-number\"><span>101112</span></div>";
  CovidData stats = covid_stats(sample_html);
  print("Total COVID-19 cases in the world: " + _str(stats.cases));
  print("Total deaths due to COVID-19 in the world: " + _str(stats.deaths));
  print("Total COVID-19 patients recovered in the world: " + _str(stats.recovered));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
