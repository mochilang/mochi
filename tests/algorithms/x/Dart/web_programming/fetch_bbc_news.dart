// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class Article {
  String title;
  Article({required this.title});
  factory Article.fromJson(Map<String, dynamic> m) => Article(title: m['title']);
}

class NewsResponse {
  List<Article> articles;
  NewsResponse({required this.articles});
  factory NewsResponse.fromJson(Map<String, dynamic> m) => NewsResponse(articles: m['articles']);
}

dynamic fetch_bbc_news(String api_key) {
  String url = "https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=" + api_key;
  NewsResponse resp = NewsResponse.fromJson(_fetch(url));
  if (resp.articles.length == 0) {
    print("No articles found.");
    return;
  }
  int i = 0;
  while (i < resp.articles.length) {
    Article article = resp.articles[i];
    print(_str(i + 1) + ".) " + article.title);
    i = i + 1;
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  fetch_bbc_news("test");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
