// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class Intensity {
  int forecast;
  int actual;
  String index;
  Intensity({required this.forecast, required this.actual, required this.index});
  factory Intensity.fromJson(Map<String, dynamic> m) => Intensity(forecast: m['forecast'], actual: m['actual'], index: m['index']);
}

class Entry {
  String from;
  String to;
  Intensity intensity;
  Entry({required this.from, required this.to, required this.intensity});
  factory Entry.fromJson(Map<String, dynamic> m) => Entry(from: m['from'], to: m['to'], intensity: m['intensity']);
}

class Response {
  List<Entry> data;
  Response({required this.data});
  factory Response.fromJson(Map<String, dynamic> m) => Response(data: m['data']);
}

String BASE_URL = "https://api.carbonintensity.org.uk/intensity";
int fetch_last_half_hour() {
  Response resp = Response.fromJson(_fetch(BASE_URL));
  Entry entry = resp.data[0];
  return entry.intensity.actual;
}

List<Entry> fetch_from_to(String start, String end) {
  String url = BASE_URL + "/" + start + "/" + end;
  Response resp = Response.fromJson(_fetch(url));
  return resp.data;
}

void _main() {
  List<Entry> entries = fetch_from_to("2020-10-01", "2020-10-03");
  int i = 0;
  while (i < entries.length) {
    Entry e = entries[i];
    print(["from", e.from, "to", e.to, ":", e.intensity.actual].join(" "));
    i = i + 1;
  }
  int last = fetch_last_half_hour();
  print(["fetch_last_half_hour() =", last].join(" "));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
