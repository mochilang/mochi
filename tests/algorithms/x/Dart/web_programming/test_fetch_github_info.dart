// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class GitHubUser {
  String login;
  int id;
  GitHubUser({required this.login, required this.id});
}

String AUTHENTICATED_USER_ENDPOINT = "https://api.github.com/user";
String get_header(List<List<String>> hs, String key) {
  int i = 0;
  while (i < hs.length) {
    List<String> pair = hs[i];
    if (pair[0] == key) {
    return pair[1];
  }
    i = i + 1;
  }
  return "";
}

GitHubUser mock_response(String url, List<List<String>> headers) {
  if (url != AUTHENTICATED_USER_ENDPOINT) {
    throw Exception("wrong url");
  }
  String auth = get_header(headers, "Authorization");
  if (auth.length == 0) {
    throw Exception("missing Authorization");
  }
  if (_substr(auth, 0, 6) != "token ") {
    throw Exception("bad token prefix");
  }
  String accept = get_header(headers, "Accept");
  if (accept.length == 0) {
    throw Exception("missing Accept");
  }
  return GitHubUser(login: "test", id: 1);
}

GitHubUser fetch_github_info(String auth_token) {
  List<List<String>> headers = [["Authorization", "token " + auth_token], ["Accept", "application/vnd.github.v3+json"]];
  return mock_response(AUTHENTICATED_USER_ENDPOINT, headers);
}

void test_fetch_github_info() {
  GitHubUser result = fetch_github_info("token");
  if (result.login != "test") {
    throw Exception("login mismatch");
  }
  if (result.id != 1) {
    throw Exception("id mismatch");
  }
  print(result.login);
  print(_str(result.id));
}

void _main() {
  test_fetch_github_info();
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
