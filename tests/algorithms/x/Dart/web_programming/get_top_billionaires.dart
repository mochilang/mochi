// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class Person {
  double finalWorth;
  String personName;
  String source;
  String countryOfCitizenship;
  String gender;
  double birthDate;
  Person({required this.finalWorth, required this.personName, required this.source, required this.countryOfCitizenship, required this.gender, required this.birthDate});
  factory Person.fromJson(Map<String, dynamic> m) => Person(finalWorth: m['finalWorth'], personName: m['personName'], source: m['source'], countryOfCitizenship: m['countryOfCitizenship'], gender: m['gender'], birthDate: m['birthDate']);
}

class PersonsWrapper {
  List<Person> personsLists;
  int count;
  PersonsWrapper({required this.personsLists, required this.count});
  factory PersonsWrapper.fromJson(Map<String, dynamic> m) => PersonsWrapper(personsLists: m['personsLists'], count: m['count']);
}

class Response {
  PersonsWrapper personList;
  Response({required this.personList});
  factory Response.fromJson(Map<String, dynamic> m) => Response(personList: m['personList']);
}

int LIMIT = 10;
double TODAY_MS = 1705017600000.0;
String API_URL = "https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=" + _str(LIMIT);
double round1(double value) {
  if (value >= 0.0) {
    int scaled = (value * 10.0 + 0.5).toInt();
    return ((scaled).toDouble()) / 10.0;
  }
  int scaled = (value * 10.0 - 0.5).toInt();
  return ((scaled).toDouble()) / 10.0;
}

int years_old(double birth_ms, double today_ms) {
  double ms_per_year = 31557600000.0;
  return ((today_ms - birth_ms) / ms_per_year).toInt();
}

List<Map<String, String>> get_forbes_real_time_billionaires() {
  Response response = Response.fromJson(_fetch(API_URL));
  List<Map<String, String>> out = <Map<String, String>>[];
  for (Person person in response.personList.personsLists) {
    double worth_billion = round1(person.finalWorth / 1000.0);
    int age_years = years_old(person.birthDate, TODAY_MS);
    Map<String, String> entry = {"Name": person.personName, "Source": person.source, "Country": person.countryOfCitizenship, "Gender": person.gender, "Worth (\$)": _str(worth_billion) + " Billion", "Age": _str(age_years)};
    out = [...out, entry];
  }
  return out;
}

void display_billionaires(List<Map<String, String>> list) {
  for (Map<String, String> b in list) {
    print((b["Name"] ?? "") + " | " + (b["Source"] ?? "") + " | " + (b["Country"] ?? "") + " | " + (b["Gender"] ?? "") + " | " + (b["Worth (\$)"] ?? "") + " | " + (b["Age"] ?? ""));
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  display_billionaires(get_forbes_real_time_billionaires());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
