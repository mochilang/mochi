// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int index_of_from(String s, String sub, int start) {
  int i = start;
  int max = s.length - sub.length;
  while (i <= max) {
    if (_substr(s, i, i + sub.length) == sub) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<Map<String, String>> extract_links(String html) {
  List<Map<String, String>> res = <Map<String, String>>[];
  int i = 0;
  while (true) {
    int tag_start = index_of_from(html, "<a class=\"eZt8xd\"", i);
    if (tag_start == -1) {
    break;
  }
    int href_start = index_of_from(html, "href=\"", tag_start);
    if (href_start == -1) {
    break;
  }
    href_start = href_start + "href=\"".length;
    int href_end = index_of_from(html, "\"", href_start);
    if (href_end == -1) {
    break;
  }
    String href = _substr(html, href_start, href_end);
    int text_start = index_of_from(html, ">", href_end) + 1;
    int text_end = index_of_from(html, "</a>", text_start);
    if (text_end == -1) {
    break;
  }
    String text = _substr(html, text_start, text_end);
    Map<String, String> link = {"href": href, "text": text};
    res = [...res, link];
    i = text_end + "</a>".length;
  }
  return res;
}

void _main() {
  String html = "<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" + "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>" + "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>";
  List<Map<String, String>> links = extract_links(html);
  print(_str(links.length));
  int i = 0;
  while (i < links.length && i < 5) {
    Map<String, String> link = links[i];
    String href = link["href"]!;
    String text = link["text"]!;
    if (text == "Maps") {
    print(href);
  } else {
    print("https://google.com" + href);
  }
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
