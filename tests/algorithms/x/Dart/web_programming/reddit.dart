// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class Post {
  String title;
  String url;
  String selftext;
  Post({required this.title, required this.url, required this.selftext});
  factory Post.fromJson(Map<String, dynamic> m) => Post(title: m['title'], url: m['url'], selftext: m['selftext']);
}

class Child {
  Post data;
  Child({required this.data});
  factory Child.fromJson(Map<String, dynamic> m) => Child(data: m['data']);
}

class ListingData {
  List<Child> children;
  ListingData({required this.children});
  factory ListingData.fromJson(Map<String, dynamic> m) => ListingData(children: m['children']);
}

class Listing {
  ListingData data;
  Listing({required this.data});
  factory Listing.fromJson(Map<String, dynamic> m) => Listing(data: m['data']);
}

bool contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String join_with_comma(List<String> xs) {
  String s = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    s = s + ", ";
  }
    s = s + xs[i];
    i = i + 1;
  }
  return s;
}

List<String> valid_terms = ["approved_at_utc", "approved_by", "author_flair_background_color", "author_flair_css_class", "author_flair_richtext", "author_flair_template_id", "author_fullname", "author_premium", "can_mod_post", "category", "clicked", "content_categories", "created_utc", "downs", "edited", "gilded", "gildings", "hidden", "hide_score", "is_created_from_ads_ui", "is_meta", "is_original_content", "is_reddit_media_domain", "is_video", "link_flair_css_class", "link_flair_richtext", "link_flair_text", "link_flair_text_color", "media_embed", "mod_reason_title", "name", "permalink", "pwls", "quarantine", "saved", "score", "secure_media", "secure_media_embed", "selftext", "subreddit", "subreddit_name_prefixed", "subreddit_type", "thumbnail", "title", "top_awarded_type", "total_awards_received", "ups", "upvote_ratio", "url", "user_reports"];
Map<int, Map<String, String>> get_subreddit_data(String subreddit, int limit, String age, List<String> wanted_data) {
  List<String> invalid = <String>[];
  int i = 0;
  while (i < wanted_data.length) {
    String term = wanted_data[i];
    if (!valid_terms.contains(term)) {
    invalid = [...invalid, term];
  }
    i = i + 1;
  }
  if (invalid.length > 0) {
    String msg = "Invalid search term: " + join_with_comma(invalid);
    throw Exception(msg);
  }
  Listing resp = Listing.fromJson(_fetch("tests/github/TheAlgorithms/Mochi/web_programming/reddit_sample.json"));
  Map<int, Map<String, String>> result = <int, Map<String, String>>{};
  int idx = 0;
  while (idx < limit) {
    Post post = resp.data.children[idx].data;
    Map<String, String> post_map = <String, String>{};
    if (wanted_data.length == 0) {
    post_map["title"] = post.title;
    post_map["url"] = post.url;
    post_map["selftext"] = post.selftext;
  } else {
    int j = 0;
    while (j < wanted_data.length) {
    String field = wanted_data[j];
    if (field == "title") {
    post_map["title"] = post.title;
  } else {
    if (field == "url") {
    post_map["url"] = post.url;
  } else {
    if (field == "selftext") {
    post_map["selftext"] = post.selftext;
  };
  };
  }
    j = j + 1;
  };
  }
    result[idx] = post_map;
    idx = idx + 1;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(get_subreddit_data("learnpython", 1, "new", ["title", "url", "selftext"]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
