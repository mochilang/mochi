// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class AuthorRef {
  String key;
  AuthorRef({required this.key});
  factory AuthorRef.fromJson(Map<String, dynamic> m) => AuthorRef(key: m['key']);
}

class BookData {
  String title;
  String publish_date;
  List<AuthorRef> authors;
  int number_of_pages;
  List<String> isbn_10;
  List<String> isbn_13;
  BookData({required this.title, required this.publish_date, required this.authors, required this.number_of_pages, required this.isbn_10, required this.isbn_13});
  factory BookData.fromJson(Map<String, dynamic> m) => BookData(title: m['title'], publish_date: m['publish_date'], authors: m['authors'], number_of_pages: m['number_of_pages'], isbn_10: m['isbn_10'], isbn_13: m['isbn_13']);
}

class AuthorData {
  String name;
  AuthorData({required this.name});
  factory AuthorData.fromJson(Map<String, dynamic> m) => AuthorData(name: m['name']);
}

class BookSummary {
  String title;
  String publish_date;
  String authors;
  int number_of_pages;
  String isbn_10;
  String isbn_13;
  BookSummary({required this.title, required this.publish_date, required this.authors, required this.number_of_pages, required this.isbn_10, required this.isbn_13});
  factory BookSummary.fromJson(Map<String, dynamic> m) => BookSummary(title: m['title'], publish_date: m['publish_date'], authors: m['authors'], number_of_pages: m['number_of_pages'], isbn_10: m['isbn_10'], isbn_13: m['isbn_13']);
}

String join(List<String> xs, String sep) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    res = res + sep;
  }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

int count_char(String s, String ch) {
  int cnt = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    cnt = cnt + 1;
  }
    i = i + 1;
  }
  return cnt;
}

String strip(String s) {
  int start = 0;
  int end = s.length;
  while (start < end && _substr(s, start, start + 1) == " ") {
    start = start + 1;
  }
  while (end > start && _substr(s, end - 1, end) == " ") {
    end = end - 1;
  }
  return _substr(s, start, end);
}

String trim_slashes(String s) {
  int start = 0;
  int end = s.length;
  while (start < end && _substr(s, start, start + 1) == "/") {
    start = start + 1;
  }
  while (end > start && _substr(s, end - 1, end) == "/") {
    end = end - 1;
  }
  return _substr(s, start, end);
}

String normalize_olid(String olid) {
  String stripped = strip(olid);
  String cleaned = trim_slashes(stripped);
  if (count_char(cleaned, "/") != 1) {
    throw Exception(olid + " is not a valid Open Library olid");
  }
  return cleaned;
}

BookData get_book_data(String olid) {
  String norm = normalize_olid(olid);
  String url = "https://openlibrary.org/" + norm + ".json";
  BookData data = BookData.fromJson(_fetch(url));
  return data;
}

AuthorData get_author_data(String olid) {
  String norm = normalize_olid(olid);
  String url = "https://openlibrary.org/" + norm + ".json";
  AuthorData data = AuthorData.fromJson(_fetch(url));
  return data;
}

BookSummary summarize_book(BookData book) {
  List<String> names = <String>[];
  int i = 0;
  while (i < book.authors.length) {
    AuthorRef ref = book.authors[i];
    AuthorData auth = get_author_data(ref.key);
    names = [...names, auth.name];
    i = i + 1;
  }
  return BookSummary(title: book.title, publish_date: book.publish_date, authors: join(names, ", "), number_of_pages: book.number_of_pages, isbn_10: join(book.isbn_10, ", "), isbn_13: join(book.isbn_13, ", "));
}

void _main() {
  BookData book = get_book_data("isbn/0140328726");
  BookSummary summary = summarize_book(book);
  print("Title: " + summary.title);
  print("Publish date: " + summary.publish_date);
  print("Authors: " + summary.authors);
  print("Number of pages: " + _str(summary.number_of_pages));
  print("ISBN (10): " + summary.isbn_10);
  print("ISBN (13): " + summary.isbn_13);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
