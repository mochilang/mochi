// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class Story {
  String title;
  String url;
  Story({required this.title, required this.url});
  factory Story.fromJson(Map<String, dynamic> m) => Story(title: m['title'], url: m['url']);
}

Story get_hackernews_story(int story_id) {
  String url = "https://hacker-news.firebaseio.com/v0/item/" + _str(story_id) + ".json?print=pretty";
  Story story = _fetch(url) as Story;
  if (story.url == "") {
    story.url = "https://news.ycombinator.com/item?id=" + _str(story_id);
  }
  return story;
}

List<Story> hackernews_top_stories(int max_stories) {
  String url = "https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty";
  List<int> ids = (_fetch(url) as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  ids = ids.sublist(0, max_stories);
  List<Story> stories = <Story>[];
  int i = 0;
  while (i < ids.length) {
    stories = [...stories, get_hackernews_story(ids[i])];
    i = i + 1;
  }
  return stories;
}

String hackernews_top_stories_as_markdown(int max_stories) {
  List<Story> stories = hackernews_top_stories(max_stories);
  String output = "";
  int i = 0;
  while (i < stories.length) {
    Story s = stories[i];
    String line = "* [" + s.title + "](" + s.url + ")";
    if (i == 0) {
    output = line;
  } else {
    output = output + "\n" + line;
  }
    i = i + 1;
  }
  return output;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(hackernews_top_stories_as_markdown(5));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
