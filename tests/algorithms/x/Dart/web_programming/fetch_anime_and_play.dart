// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String BASE_URL = "https://ww7.gogoanime2.org";
bool contains_str(String s, String sub) {
  if (sub.length == 0) {
    return true;
  }
  int i = 0;
  while (i + sub.length <= s.length) {
    if (_substr(s, i, i + sub.length) == sub) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<Map<String, String>> ANIME_DB = [{"title": "Demon Slayer", "url": "/anime/kimetsu-no-yaiba"}, {"title": "Naruto", "url": "/anime/naruto"}];
List<Map<String, String>> search_scraper(String anime_name) {
  String term = anime_name.toLowerCase();
  List<Map<String, String>> res = <Map<String, String>>[];
  int i = 0;
  while (i < ANIME_DB.length) {
    Map<String, String> item = ANIME_DB[i];
    if (contains_str((item["title"] ?? "").toLowerCase(), term)) {
    res = [...res, item];
  }
    i = i + 1;
  }
  return res;
}

Map<String, List<Map<String, String>>> EPISODE_DB = {"/anime/kimetsu-no-yaiba": [{"title": "Episode 1", "url": "/watch/kimetsu-no-yaiba/1"}, {"title": "Episode 2", "url": "/watch/kimetsu-no-yaiba/2"}], "/anime/naruto": [{"title": "Episode 1", "url": "/watch/naruto/1"}]};
List<Map<String, String>> search_anime_episode_list(String endpoint) {
  if (EPISODE_DB.containsKey(endpoint)) {
    return ((EPISODE_DB[endpoint]!))!;
  }
  List<Map<String, String>> empty = <Map<String, String>>[];
  return empty;
}

Map<String, String> EPISODE_EMBED = {"/watch/kimetsu-no-yaiba/1": "/embed/kimetsu-no-yaiba/1", "/watch/kimetsu-no-yaiba/2": "/embed/kimetsu-no-yaiba/2", "/watch/naruto/1": "/embed/naruto/1"};
String to_playlist(String embed) {
  return "/playlist/" + _substr(embed, 7, embed.length) + ".m3u8";
}

List<String> get_anime_episode(String endpoint) {
  if (EPISODE_EMBED.containsKey(endpoint)) {
    String embed = EPISODE_EMBED[endpoint]!;
    String play = BASE_URL + embed;
    String download = BASE_URL + to_playlist(embed);
    return [play, download];
  }
  List<String> empty = <String>[];
  return empty;
}

void _main() {
  List<Map<String, String>> animes = search_scraper("demon");
  print(animes);
  List<Map<String, String>> episodes = search_anime_episode_list("/anime/kimetsu-no-yaiba");
  print(episodes);
  List<String> links = get_anime_episode("/watch/kimetsu-no-yaiba/1");
  print(links);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
