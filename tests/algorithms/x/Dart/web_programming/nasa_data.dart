// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}


dynamic _fetch(String url) {
  if (url.startsWith('file://')) {
    final path = url.substring(7);
    final text = File(path).readAsStringSync();
    try {
      return jsonDecode(text);
    } catch (_) {
      return text;
    }
  }
  final result = Process.runSync('curl', ['-s', url]);
  if (result.exitCode != 0) {
    throw Exception('curl failed');
  }
  var text = '';
  if (result.stdout is String) {
    text = result.stdout as String;
  }
  try {
    return jsonDecode(text);
  } catch (_) {
    return text;
  }
}

class ApodData {
  String url;
  String title;
  ApodData({required this.url, required this.title});
  factory ApodData.fromJson(Map<String, dynamic> m) => ApodData(url: m['url'], title: m['title']);
}

class ArchiveItemData {
  String description;
  ArchiveItemData({required this.description});
  factory ArchiveItemData.fromJson(Map<String, dynamic> m) => ArchiveItemData(description: m['description']);
}

class ArchiveItem {
  List<ArchiveItemData> data;
  ArchiveItem({required this.data});
  factory ArchiveItem.fromJson(Map<String, dynamic> m) => ArchiveItem(data: m['data']);
}

class ArchiveCollection {
  List<ArchiveItem> items;
  ArchiveCollection({required this.items});
  factory ArchiveCollection.fromJson(Map<String, dynamic> m) => ArchiveCollection(items: m['items']);
}

class ArchiveResult {
  ArchiveCollection collection;
  ArchiveResult({required this.collection});
  factory ArchiveResult.fromJson(Map<String, dynamic> m) => ArchiveResult(collection: m['collection']);
}

ApodData get_apod_data(String api_key) {
  ApodData data = ApodData.fromJson(_fetch("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY"));
  return data;
}

ApodData save_apod(String api_key) {
  ApodData apod = get_apod_data(api_key);
  return apod;
}

ArchiveResult get_archive_data(String query) {
  ArchiveResult data = ArchiveResult.fromJson(_fetch("https://images-api.nasa.gov/search?q=apollo%202011"));
  return data;
}

void _main() {
  ApodData apod = save_apod("DEMO_KEY");
  print(apod.title);
  ArchiveResult archive = get_archive_data("apollo 2011");
  List<ArchiveItem> items = archive.collection.items;
  dynamic first_item = first(items);
  dynamic first_data = first(first_item.data);
  print(first_data.description);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
