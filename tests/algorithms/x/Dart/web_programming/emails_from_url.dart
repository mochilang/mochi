// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Page {
  String url;
  String html;
  Page({required this.url, required this.html});
}

int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int index_of_substring(String s, String sub) {
  int n = s.length;
  int m = sub.length;
  if (m == 0) {
    return 0;
  }
  int i = 0;
  while (i <= n - m) {
    int j = 0;
    bool is_match = true;
    while (j < m) {
    if (s.substring(i + j, i + j + 1) != sub.substring(j, j + 1)) {
    is_match = false;
    break;
  }
    j = j + 1;
  }
    if (is_match) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  int last = 0;
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    if (ch == sep) {
    parts = [...parts, _substr(s, last, i)];
    last = i + 1;
  }
    if (i + 1 == s.length) {
    parts = [...parts, _substr(s, last, i + 1)];
  }
    i = i + 1;
  }
  return parts;
}

String get_sub_domain_name(String url) {
  int proto_pos = index_of_substring(url, "://");
  int start = 0;
  if (proto_pos >= 0) {
    start = proto_pos + 3;
  }
  int i = start;
  while (i < url.length) {
    if (url.substring(i, i + 1) == "/") {
    break;
  }
    i = i + 1;
  }
  return _substr(url, start, i);
}

String get_domain_name(String url) {
  String sub = get_sub_domain_name(url);
  dynamic parts = sub.split(".");
  if (parts.length >= 2) {
    return parts[parts.length - 2] + "." + parts[parts.length - 1];
  }
  return sub;
}

bool is_alnum(String ch) {
  String chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  return index_of(chars, ch) >= 0;
}

bool contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> bubble_sort(List<String> xs) {
  List<String> arr = xs;
  int n = arr.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j + 1 < n - i) {
    if (arr[j].compareTo(arr[j + 1]) > 0) {
    String tmp = arr[j];
    while (arr.length <= j) { arr.add(""); } arr[j] = arr[j + 1];
    while (arr.length <= j + 1) { arr.add(""); } arr[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return arr;
}

List<String> extract_links(String domain, String html) {
  List<String> links = <String>[];
  int pos = index_of_substring(html, "href=");
  while (pos >= 0) {
    int start_quote = index_of(_substr(html, pos + 5, html.length), "\"");
    if (start_quote < 0) {
    break;
  }
    int rest = pos + 5 + start_quote + 1;
    int end_quote = index_of(_substr(html, rest, html.length), "\"");
    if (end_quote < 0) {
    break;
  }
    String link = _substr(html, rest, rest + end_quote);
    if (!links.contains(link)) {
    String absolute = link;
    if (!(index_of_substring(link, "http://") == 0 || index_of_substring(link, "https://") == 0)) {
    if (index_of_substring(link, "/") == 0) {
    absolute = "https://" + domain + link;
  } else {
    absolute = "https://" + domain + "/" + link;
  };
  };
    links = [...links, absolute];
  }
    pos = index_of_substring(_substr(html, rest + end_quote, html.length), "href=");
    if (pos >= 0) {
    pos = pos + rest + end_quote;
  }
  }
  return links;
}

List<String> extract_emails(String domain, String text) {
  List<String> emails = <String>[];
  int i = 0;
  while (i < text.length) {
    if (text.substring(i, i + 1) == "@") {
    if (_substr(text, i + 1, i + 1 + domain.length) == domain) {
    int j = i - 1;
    while (j >= 0 && is_alnum(text.substring(j, j + 1))) {
    j = j - 1;
  };
    String local = _substr(text, j + 1, i);
    if (local.length > 0) {
    String email = local + "@" + domain;
    if (!emails.contains(email)) {
    emails = [...emails, email];
  };
  };
  };
  }
    i = i + 1;
  }
  return emails;
}

String find_page(List<Page> pages, String url) {
  int i = 0;
  while (i < pages.length) {
    Page p = pages[i];
    if (p.url == url) {
    return p.html;
  }
    i = i + 1;
  }
  return "";
}

List<String> emails_from_url(String url, List<Page> pages) {
  String domain = get_domain_name(url);
  String base_html = find_page(pages, url);
  List<String> links = extract_links(domain, base_html);
  List<String> found = <String>[];
  int i = 0;
  while (i < links.length) {
    String html = find_page(pages, links[i]);
    List<String> emails = extract_emails(domain, html);
    int j = 0;
    while (j < emails.length) {
    if (!found.contains(emails[j])) {
    found = [...found, emails[j]];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  List<String> sorted = bubble_sort(found);
  return sorted;
}

List<Page> pages = [Page(url: "https://example.com", html: "<html><body><a href=\"/contact\">Contact</a></body></html>"), Page(url: "https://example.com/contact", html: "<html>Contact us at info@example.com or support@example.com</html>")];
List<String> emails = emails_from_url("https://example.com", pages);
int k = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(emails.length) + " emails found:");
  while (k < emails.length) {
    print(emails[k]);
    k = k + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
