// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Result {
  int shift;
  double chi;
  String decoded;
  Result({required this.shift, required this.chi, required this.decoded});
}

List<String> default_alphabet() {
  return ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
}

Map<String, double> default_frequencies() {
  return {"a": 0.08497, "b": 0.01492, "c": 0.02202, "d": 0.04253, "e": 0.11162, "f": 0.02228, "g": 0.02015, "h": 0.06094, "i": 0.07546, "j": 0.00153, "k": 0.01292, "l": 0.04025, "m": 0.02406, "n": 0.06749, "o": 0.07507, "p": 0.01929, "q": 0.00095, "r": 0.07587, "s": 0.06327, "t": 0.09356, "u": 0.02758, "v": 0.00978, "w": 0.0256, "x": 0.0015, "y": 0.01994, "z": 0.00077};
}

int index_of(List<String> xs, String ch) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int count_char(String s, String ch) {
  int count = 0;
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    count = count + 1;
  }
    i = i + 1;
  }
  return count;
}

Result decrypt_caesar_with_chi_squared(String ciphertext, List<String> cipher_alphabet, Map<String, double> frequencies_dict, bool case_sensitive) {
  List<String> alphabet_letters = cipher_alphabet;
  if (alphabet_letters.length == 0) {
    alphabet_letters = default_alphabet();
  }
  Map<String, double> frequencies = frequencies_dict;
  if (frequencies.length == 0) {
    frequencies = default_frequencies();
  }
  if (!case_sensitive) {
    ciphertext = ciphertext.toLowerCase();
  }
  int best_shift = 0;
  double best_chi = 0.0;
  String best_text = "";
  int shift = 0;
  while (shift < alphabet_letters.length) {
    String decrypted = "";
    int i = 0;
    while (i < ciphertext.length) {
    String ch = _substr(ciphertext, i, i + 1);
    int idx = index_of(alphabet_letters, ch.toLowerCase());
    if (idx >= 0) {
    int m = alphabet_letters.length;
    int new_idx = (idx - shift) % m;
    if (new_idx < 0) {
    new_idx = new_idx + m;
  };
    String new_char = alphabet_letters[new_idx];
    if (case_sensitive && ch != ch.toLowerCase()) {
    decrypted = decrypted + new_char.toUpperCase();
  } else {
    decrypted = decrypted + new_char;
  };
  } else {
    decrypted = decrypted + ch;
  }
    i = i + 1;
  }
    double chi = 0.0;
    String lowered = (case_sensitive ? decrypted.toLowerCase() : decrypted);
    int j = 0;
    while (j < alphabet_letters.length) {
    String letter = alphabet_letters[j];
    int occ = count_char(lowered, letter);
    if (occ > 0) {
    double occf = (occ).toDouble();
    double expected = (frequencies[letter]!) * occf;
    double diff = occf - expected;
    chi = chi + diff * diff / expected * occf;
  }
    j = j + 1;
  }
    if (shift == 0 || chi < best_chi) {
    best_shift = shift;
    best_chi = chi;
    best_text = decrypted;
  }
    shift = shift + 1;
  }
  return Result(shift: best_shift, chi: best_chi, decoded: best_text);
}

Result r1 = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", <String>[], {}, false);
Result r2 = decrypt_caesar_with_chi_squared("crybd cdbsxq", <String>[], {}, false);
Result r3 = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", <String>[], {}, true);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(r1.shift) + ", " + _str(r1.chi) + ", " + r1.decoded);
  print(_str(r2.shift) + ", " + _str(r2.chi) + ", " + r2.decoded);
  print(_str(r3.shift) + ", " + _str(r3.chi) + ", " + r3.decoded);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
