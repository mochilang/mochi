// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
int seed = 1;
int rand(int n) {
  seed = (seed * 1664525 + 1013904223) % 2147483647;
  return seed % n;
}

String get_random_key() {
  List<String> chars = <String>[];
  int i = 0;
  while (i < LETTERS.length) {
    chars = [...chars, LETTERS.substring(i, i + 1)];
    i = i + 1;
  }
  int j = chars.length - 1;
  while (j > 0) {
    int k = rand(j + 1);
    String tmp = chars[j];
    while (chars.length <= j) { chars.add(""); } chars[j] = chars[k];
    while (chars.length <= k) { chars.add(""); } chars[k] = tmp;
    j = j - 1;
  }
  String res = "";
  i = 0;
  while (i < chars.length) {
    res = res + chars[i];
    i = i + 1;
  }
  return res;
}

bool check_valid_key(String key) {
  if (key.length != LETTERS.length) {
    return false;
  }
  Map<String, bool> used = <String, bool>{};
  int i = 0;
  while (i < key.length) {
    String ch = key.substring(i, i + 1);
    if ((used[ch] ?? false)) {
    return false;
  }
    used[ch] = true;
    i = i + 1;
  }
  i = 0;
  while (i < LETTERS.length) {
    String ch = LETTERS.substring(i, i + 1);
    if (!(used[ch] ?? false)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int index_in(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String char_to_upper(String c) {
  int i = 0;
  while (i < LOWERCASE.length) {
    if (c == LOWERCASE.substring(i, i + 1)) {
    return LETTERS.substring(i, i + 1);
  }
    i = i + 1;
  }
  return c;
}

String char_to_lower(String c) {
  int i = 0;
  while (i < LETTERS.length) {
    if (c == LETTERS.substring(i, i + 1)) {
    return LOWERCASE.substring(i, i + 1);
  }
    i = i + 1;
  }
  return c;
}

bool is_upper(String c) {
  int i = 0;
  while (i < LETTERS.length) {
    if (c == LETTERS.substring(i, i + 1)) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String translate_message(String key, String message, String mode) {
  String chars_a = LETTERS;
  String chars_b = key;
  if (mode == "decrypt") {
    String tmp = chars_a;
    chars_a = chars_b;
    chars_b = tmp;
  }
  String translated = "";
  int i = 0;
  while (i < message.length) {
    String symbol = message.substring(i, i + 1);
    String upper_symbol = char_to_upper(symbol);
    int idx = index_in(chars_a, upper_symbol);
    if (idx >= 0) {
    String mapped = chars_b.substring(idx, idx + 1);
    if (is_upper(symbol)) {
    translated = translated + mapped;
  } else {
    translated = translated + char_to_lower(mapped);
  };
  } else {
    translated = translated + symbol;
  }
    i = i + 1;
  }
  return translated;
}

String encrypt_message(String key, String message) {
  String res = translate_message(key, message, "encrypt");
  return res;
}

String decrypt_message(String key, String message) {
  String res = translate_message(key, message, "decrypt");
  return res;
}

String key = "LFWOAYUISVKMNXPBDCRJTQEGHZ";
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(encrypt_message(key, "Harshil Darji"));
  print(decrypt_message(key, "Ilcrism Olcvs"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
