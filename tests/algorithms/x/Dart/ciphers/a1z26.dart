// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int charToNum(String ch) {
  String letters = "abcdefghijklmnopqrstuvwxyz";
  int idx = letters.indexOf(ch);
  if (idx >= 0) {
    return idx + 1;
  }
  return 0;
}

String numToChar(int n) {
  String letters = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 1 && n <= 26) {
    return _substr(letters, n - 1, n);
  }
  return "?";
}

List<int> encode(String plain) {
  List<int> res = <int>[];
  int i = 0;
  while (i < plain.length) {
    String ch = _substr(plain, i, i + 1).toLowerCase();
    int val = charToNum(ch);
    if (val > 0) {
    res = [...res, val];
  }
    i = i + 1;
  }
  return res;
}

String decode(List<int> encoded) {
  String out = "";
  for (int n in encoded) {
    out = out + numToChar(n);
  }
  return out;
}

void _main() {
  print("-> ");
  String text = stdin.readLineSync() ?? ''.toLowerCase();
  List<int> enc = encode(text);
  print("Encoded: " + (enc).toString());
  print("Decoded: " + decode(enc));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
