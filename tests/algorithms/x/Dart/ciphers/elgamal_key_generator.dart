// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class GCD {
  int g;
  int x;
  int y;
  GCD({required this.g, required this.x, required this.y});
}

class PublicKey {
  int key_size;
  int g;
  int e2;
  int p;
  PublicKey({required this.key_size, required this.g, required this.e2, required this.p});
}

class PrivateKey {
  int key_size;
  int d;
  PrivateKey({required this.key_size, required this.d});
}

class KeyPair {
  PublicKey public_key;
  PrivateKey private_key;
  KeyPair({required this.public_key, required this.private_key});
}

int seed = 123456789;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483647;
  return seed;
}

int rand_range(int min, int max) {
  return min + rand() % (max - min + 1);
}

int mod_pow(int base, int exponent, int modulus) {
  int result = 1;
  int b = base % modulus;
  int e = exponent;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % modulus;
  }
    e = e ~/ 2;
    b = b * b % modulus;
  }
  return result;
}

GCD extended_gcd(int a, int b) {
  if (b == 0) {
    return GCD(g: a, x: 1, y: 0);
  }
  GCD res = extended_gcd(b, a % b);
  return GCD(g: res.g, x: res.y, y: res.x - a ~/ b * res.y);
}

int mod_inverse(int a, int m) {
  GCD res = extended_gcd(a, m);
  if (res.g != 1) {
    throw Exception("inverse does not exist");
  }
  int r = res.x % m;
  if (r < 0) {
    return r + m;
  }
  return r;
}

int pow2(int n) {
  int r = 1;
  int i = 0;
  while (i < n) {
    r = r * 2;
    i = i + 1;
  }
  return r;
}

bool is_probable_prime(int n, int k) {
  if (n <= 1) {
    return false;
  }
  if (n <= 3) {
    return true;
  }
  if (n % 2 == 0) {
    return false;
  }
  int r = 0;
  int d = n - 1;
  while (d % 2 == 0) {
    d = d ~/ 2;
    r = r + 1;
  }
  int i = 0;
  while (i < k) {
    int a = rand_range(2, n - 2);
    int x = mod_pow(a, d, n);
    if (x == 1 || x == n - 1) {
    i = i + 1;
    continue;
  }
    int j = 1;
    bool found = false;
    while (j < r) {
    x = mod_pow(x, 2, n);
    if (x == n - 1) {
    found = true;
    break;
  }
    j = j + 1;
  }
    if (!found) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int generate_large_prime(int bits) {
  int min = pow2(bits - 1);
  int max = pow2(bits) - 1;
  int p = rand_range(min, max);
  if (p % 2 == 0) {
    p = p + 1;
  }
  while (!is_probable_prime(p, 5)) {
    p = p + 2;
    if (p > max) {
    p = min + 1;
  }
  }
  return p;
}

int primitive_root(int p) {
  while (true) {
    int g = rand_range(3, p - 1);
    if (mod_pow(g, 2, p) == 1) {
    continue;
  }
    if (mod_pow(g, p, p) == 1) {
    continue;
  }
    return g;
  }
}

KeyPair generate_key(int key_size) {
  int p = generate_large_prime(key_size);
  int e1 = primitive_root(p);
  int d = rand_range(3, p - 1);
  int e2 = mod_inverse(mod_pow(e1, d, p), p);
  PublicKey public_key = PublicKey(key_size: key_size, g: e1, e2: e2, p: p);
  PrivateKey private_key = PrivateKey(key_size: key_size, d: d);
  return KeyPair(public_key: public_key, private_key: private_key);
}

void _main() {
  int key_size = 16;
  KeyPair kp = generate_key(key_size);
  PublicKey pub = kp.public_key;
  PrivateKey priv = kp.private_key;
  print("public key: (" + _str(pub.key_size) + ", " + _str(pub.g) + ", " + _str(pub.e2) + ", " + _str(pub.p) + ")");
  print("private key: (" + _str(priv.key_size) + ", " + _str(priv.d) + ")");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
