// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int seed = 1;
int rand(int max) {
  seed = (seed * 1103515245 + 12345) % 2147483647;
  return seed % max;
}

int generate_valid_block_size(int message_length) {
  List<int> factors = <int>[];
  int i = 2;
  while (i <= message_length) {
    if (message_length % i == 0) {
    factors = [...factors, i];
  }
    i = i + 1;
  }
  int idx = rand(factors.length);
  return factors[idx];
}

List<int> generate_permutation_key(int block_size) {
  List<int> digits = <int>[];
  int i = 0;
  while (i < block_size) {
    digits = [...digits, i];
    i = i + 1;
  }
  int j = block_size - 1;
  while (j > 0) {
    int k = rand(j + 1);
    int temp = digits[j];
    while (digits.length <= j) { digits.add(0); } digits[j] = digits[k];
    while (digits.length <= k) { digits.add(0); } digits[k] = temp;
    j = j - 1;
  }
  return digits;
}

String encrypt(String message, List<int> key, int block_size) {
  String encrypted = "";
  int i = 0;
  while (i < message.length) {
    String block = _substr(message, i, i + block_size);
    int j = 0;
    while (j < block_size) {
    encrypted = encrypted + _substr(block, key[j], key[j] + 1);
    j = j + 1;
  }
    i = i + block_size;
  }
  return encrypted;
}

List<String> repeat_string(int times) {
  List<String> res = <String>[];
  int i = 0;
  while (i < times) {
    res = [...res, ""];
    i = i + 1;
  }
  return res;
}

String decrypt(String encrypted, List<int> key) {
  int klen = key.length;
  String decrypted = "";
  int i = 0;
  while (i < encrypted.length) {
    String block = _substr(encrypted, i, i + klen);
    List<String> original = repeat_string(klen);
    int j = 0;
    while (j < klen) {
    while (original.length <= key[j]) { original.add(""); } original[key[j]] = _substr(block, j, j + 1);
    j = j + 1;
  }
    j = 0;
    while (j < klen) {
    decrypted = decrypted + original[j];
    j = j + 1;
  }
    i = i + klen;
  }
  return decrypted;
}

String message = "HELLO WORLD";
int block_size = generate_valid_block_size(message.length);
List<int> key = generate_permutation_key(block_size);
String encrypted = encrypt(message, key, block_size);
String decrypted = decrypt(encrypted, key);
void main() {
  print("Block size: " + (block_size).toString());
  print("Key: " + (key).toString());
  print("Encrypted: " + encrypted);
  print("Decrypted: " + decrypted);
}
