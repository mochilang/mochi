// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

String join_strings(List<String> xs) {
  String res = "";
  int i = 0;
  while (i < xs.length) {
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

String encrypt_message(int key, String message) {
  String result = "";
  int col = 0;
  while (col < key) {
    int pointer = col;
    while (pointer < message.length) {
    result = result + _substr(message, pointer, pointer + 1);
    pointer = pointer + key;
  }
    col = col + 1;
  }
  return result;
}

String decrypt_message(int key, String message) {
  int num_cols = (message.length + key - 1) ~/ key;
  int num_rows = key;
  int num_shaded_boxes = num_cols * num_rows - message.length;
  List<String> plain_text = <String>[];
  int i = 0;
  while (i < num_cols) {
    plain_text = [...plain_text, ""];
    i = i + 1;
  }
  int col = 0;
  int row = 0;
  int index = 0;
  while (index < message.length) {
    while (plain_text.length <= col) { plain_text.add(""); } plain_text[col] = plain_text[col] + _substr(message, index, index + 1);
    col = col + 1;
    if (col == num_cols || col == num_cols - 1 && row >= num_rows - num_shaded_boxes) {
    col = 0;
    row = row + 1;
  }
    index = index + 1;
  }
  return join_strings(plain_text);
}

void _main() {
  print("Enter message: ");
  String message = stdin.readLineSync() ?? '';
  int max_key = message.length - 1;
  print("Enter key [2-" + _str(max_key) + "]: ");
  int key = int.parse(stdin.readLineSync() ?? '');
  print("Encryption/Decryption [e/d]: ");
  String mode = stdin.readLineSync() ?? '';
  String text = "";
  String first = _substr(mode, 0, 1);
  if (first == "e" || first == "E") {
    text = encrypt_message(key, message);
  } else {
    if (first == "d" || first == "D") {
    text = decrypt_message(key, message);
  };
  }
  print("Output:\n" + text + "|");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
