// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _repeat(String s, int n) => n <= 0 ? '' : List.filled(n, s).join();

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
int indexOfChar(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String digits = "0123456789";
  int idx = indexOfChar(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = indexOfChar(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  idx = indexOfChar(digits, ch);
  if (idx >= 0) {
    return 48 + idx;
  }
  if (ch == " ") {
    return 32;
  }
  if (ch == "!") {
    return 33;
  }
  return 0;
}

String chr(int code) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String digits = "0123456789";
  if (code == 32) {
    return " ";
  }
  if (code == 33) {
    return "!";
  }
  int idx = code - 65;
  if (idx >= 0 && idx < upper.length) {
    return upper.substring(idx, idx + 1);
  }
  idx = code - 97;
  if (idx >= 0 && idx < lower.length) {
    return lower.substring(idx, idx + 1);
  }
  idx = code - 48;
  if (idx >= 0 && idx < digits.length) {
    return digits.substring(idx, idx + 1);
  }
  return "";
}

String repeat(String s, int n) {
  String out = "";
  int i = 0;
  while (i < n) {
    out = out + s;
    i = i + 1;
  }
  return out;
}

String to_binary(int n, int bits) {
  int v = n;
  String out = "";
  int i = 0;
  while (i < bits) {
    out = _str(v % 2) + out;
    v = v ~/ 2;
    i = i + 1;
  }
  return out;
}

int binary_to_int(String bits) {
  int n = 0;
  int i = 0;
  while (i < bits.length) {
    n = n * 2;
    if (bits.substring(i, i + 1) == "1") {
    n = n + 1;
  }
    i = i + 1;
  }
  return n;
}

String base32_encode(String data) {
  String binary_data = "";
  int i = 0;
  while (i < data.length) {
    binary_data = binary_data + to_binary(ord(data.substring(i, i + 1)), 8);
    i = i + 1;
  }
  int remainder = binary_data.length % 5;
  if (remainder != 0) {
    binary_data = binary_data + _repeat("0", 5 - remainder);
  }
  String b32_result = "";
  int j = 0;
  while (j < binary_data.length) {
    String chunk = _substr(binary_data, j, j + 5);
    int index = binary_to_int(chunk);
    b32_result = b32_result + B32_CHARSET.substring(index, index + 1);
    j = j + 5;
  }
  int rem = b32_result.length % 8;
  if (rem != 0) {
    b32_result = b32_result + _repeat("=", 8 - rem);
  }
  return b32_result;
}

String base32_decode(String data) {
  String clean = "";
  int i = 0;
  while (i < data.length) {
    String ch = data.substring(i, i + 1);
    if (ch != "=") {
    clean = clean + ch;
  }
    i = i + 1;
  }
  String binary_chunks = "";
  i = 0;
  while (i < clean.length) {
    int idx = indexOfChar(B32_CHARSET, clean.substring(i, i + 1));
    binary_chunks = binary_chunks + to_binary(idx, 5);
    i = i + 1;
  }
  String result = "";
  int j = 0;
  while (j + 8 <= binary_chunks.length) {
    String byte_bits = _substr(binary_chunks, j, j + 8);
    int code = binary_to_int(byte_bits);
    result = result + chr(code);
    j = j + 8;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(base32_encode("Hello World!"));
  print(base32_encode("123456"));
  print(base32_encode("some long complex string"));
  print(base32_decode("JBSWY3DPEBLW64TMMQQQ===="));
  print(base32_decode("GEZDGNBVGY======"));
  print(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
