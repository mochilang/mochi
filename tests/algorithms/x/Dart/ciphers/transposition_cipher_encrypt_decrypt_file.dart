// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String encrypt_message(int key, String message) {
  String result = "";
  int col = 0;
  while (col < key) {
    int pointer = col;
    while (pointer < message.length) {
    result = result + message.substring(pointer, pointer + 1);
    pointer = pointer + key;
  }
    col = col + 1;
  }
  return result;
}

String decrypt_message(int key, String message) {
  int msg_len = message.length;
  int num_cols = msg_len ~/ key;
  if (msg_len % key != 0) {
    num_cols = num_cols + 1;
  }
  int num_rows = key;
  int num_shaded_boxes = num_cols * num_rows - msg_len;
  List<String> plain = <String>[];
  int i = 0;
  while (i < num_cols) {
    plain = [...plain, ""];
    i = i + 1;
  }
  int col = 0;
  int row = 0;
  int idx = 0;
  while (idx < msg_len) {
    String ch = message.substring(idx, idx + 1);
    while (plain.length <= col) { plain.add(""); } plain[col] = plain[col] + ch;
    col = col + 1;
    if (col == num_cols || col == num_cols - 1 && row >= num_rows - num_shaded_boxes) {
    col = 0;
    row = row + 1;
  }
    idx = idx + 1;
  }
  String result = "";
  i = 0;
  while (i < num_cols) {
    result = result + plain[i];
    i = i + 1;
  }
  return result;
}

int key = 6;
String message = "Harshil Darji";
String encrypted = encrypt_message(key, message);
String decrypted = decrypt_message(key, encrypted);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(encrypted);
  print(decrypted);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
