// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int gcd(int a, int b) {
  int x = (a < 0 ? -a : a);
  int y = (b < 0 ? -b : b);
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

int find_mod_inverse(int a, int m) {
  if (gcd(a, m) != 1) {
    _error("mod inverse of " + _str(a) + " and " + _str(m) + " does not exist");
  }
  int u1 = 1;
  int u2 = 0;
  int u3 = a;
  int v1 = 0;
  int v2 = 1;
  int v3 = m;
  while (v3 != 0) {
    int q = u3 ~/ v3;
    int t1 = u1 - q * v1;
    int t2 = u2 - q * v2;
    int t3 = u3 - q * v3;
    u1 = v1;
    u2 = v2;
    u3 = v3;
    v1 = t1;
    v2 = t2;
    v3 = t3;
  }
  int res = u1 % m;
  if (res < 0) {
    res = res + m;
  }
  return res;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(find_mod_inverse(3, 11)));
  print(_str(find_mod_inverse(7, 26)));
  print(_str(find_mod_inverse(11, 26)));
  print(_str(find_mod_inverse(17, 43)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
