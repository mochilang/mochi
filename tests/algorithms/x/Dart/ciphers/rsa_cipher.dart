// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int BYTE_SIZE = 256;
int pow_int(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

int mod_pow(int base, int exponent, int modulus) {
  int result = 1;
  int b = base % modulus;
  int e = exponent;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % modulus;
  }
    e = e ~/ 2;
    b = b * b % modulus;
  }
  return result;
}

int ord(String ch) {
  if (ch == " ") {
    return 32;
  }
  if (ch == "a") {
    return 97;
  }
  if (ch == "b") {
    return 98;
  }
  if (ch == "c") {
    return 99;
  }
  if (ch == "d") {
    return 100;
  }
  if (ch == "e") {
    return 101;
  }
  if (ch == "f") {
    return 102;
  }
  if (ch == "g") {
    return 103;
  }
  if (ch == "h") {
    return 104;
  }
  if (ch == "i") {
    return 105;
  }
  if (ch == "j") {
    return 106;
  }
  if (ch == "k") {
    return 107;
  }
  if (ch == "l") {
    return 108;
  }
  if (ch == "m") {
    return 109;
  }
  if (ch == "n") {
    return 110;
  }
  if (ch == "o") {
    return 111;
  }
  if (ch == "p") {
    return 112;
  }
  if (ch == "q") {
    return 113;
  }
  if (ch == "r") {
    return 114;
  }
  if (ch == "s") {
    return 115;
  }
  if (ch == "t") {
    return 116;
  }
  if (ch == "u") {
    return 117;
  }
  if (ch == "v") {
    return 118;
  }
  if (ch == "w") {
    return 119;
  }
  if (ch == "x") {
    return 120;
  }
  if (ch == "y") {
    return 121;
  }
  if (ch == "z") {
    return 122;
  }
  return 0;
}

String chr(int code) {
  if (code == 32) {
    return " ";
  }
  if (code == 97) {
    return "a";
  }
  if (code == 98) {
    return "b";
  }
  if (code == 99) {
    return "c";
  }
  if (code == 100) {
    return "d";
  }
  if (code == 101) {
    return "e";
  }
  if (code == 102) {
    return "f";
  }
  if (code == 103) {
    return "g";
  }
  if (code == 104) {
    return "h";
  }
  if (code == 105) {
    return "i";
  }
  if (code == 106) {
    return "j";
  }
  if (code == 107) {
    return "k";
  }
  if (code == 108) {
    return "l";
  }
  if (code == 109) {
    return "m";
  }
  if (code == 110) {
    return "n";
  }
  if (code == 111) {
    return "o";
  }
  if (code == 112) {
    return "p";
  }
  if (code == 113) {
    return "q";
  }
  if (code == 114) {
    return "r";
  }
  if (code == 115) {
    return "s";
  }
  if (code == 116) {
    return "t";
  }
  if (code == 117) {
    return "u";
  }
  if (code == 118) {
    return "v";
  }
  if (code == 119) {
    return "w";
  }
  if (code == 120) {
    return "x";
  }
  if (code == 121) {
    return "y";
  }
  if (code == 122) {
    return "z";
  }
  return "";
}

List<int> get_blocks_from_text(String message, int block_size) {
  List<int> block_ints = <int>[];
  int block_start = 0;
  while (block_start < message.length) {
    int block_int = 0;
    int i = block_start;
    while (i < block_start + block_size && i < message.length) {
    block_int = block_int + ord(message.substring(i, i + 1)) * pow_int(BYTE_SIZE, i - block_start);
    i = i + 1;
  }
    block_ints = [...block_ints, block_int];
    block_start = block_start + block_size;
  }
  return block_ints;
}

String get_text_from_blocks(List<int> block_ints, int message_length, int block_size) {
  String message = "";
  for (int block_int in block_ints) {
    int block = block_int;
    int i = block_size - 1;
    String block_message = "";
    while (i >= 0) {
    if (message.length + i < message_length) {
    int ascii_number = block ~/ pow_int(BYTE_SIZE, i);
    block = block % pow_int(BYTE_SIZE, i);
    block_message = chr(ascii_number) + block_message;
  }
    i = i - 1;
  }
    message = message + block_message;
  }
  return message;
}

List<int> encrypt_message(String message, int n, int e, int block_size) {
  List<int> encrypted = <int>[];
  List<int> blocks = get_blocks_from_text(message, block_size);
  for (int block in blocks) {
    encrypted = [...encrypted, mod_pow(block, e, n)];
  }
  return encrypted;
}

String decrypt_message(List<int> blocks, int message_length, int n, int d, int block_size) {
  List<int> decrypted_blocks = <int>[];
  for (int block in blocks) {
    decrypted_blocks = [...decrypted_blocks, mod_pow(block, d, n)];
  }
  String message = "";
  for (int _num in decrypted_blocks) {
    message = message + chr(_num);
  }
  return message;
}

void _main() {
  String message = "hello world";
  int n = 3233;
  int e = 17;
  int d = 2753;
  int block_size = 1;
  List<int> encrypted = encrypt_message(message, n, e, block_size);
  print(_str(encrypted));
  String decrypted = decrypt_message(encrypted, message.length, n, d, block_size);
  print(decrypted);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
