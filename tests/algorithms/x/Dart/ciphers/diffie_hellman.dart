// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String int_to_hex(int n) {
  if (n == 0) {
    return "0";
  }
  String digits = "0123456789abcdef";
  int _num = n;
  String res = "";
  while (_num > 0) {
    int d = _num % 16;
    res = digits.substring(d, d + 1) + res;
    _num = _num ~/ 16;
  }
  return res;
}

int seed = 123456789;
int rand_int() {
  seed = (1103515245 * seed + 12345) % 2147483648;
  return seed;
}

int PRIME = 23;
int mod_pow(int base, int exp) {
  int result = 1;
  int b = base % PRIME;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % PRIME;
  }
    b = b * b % PRIME;
    e = e ~/ 2;
  }
  return result;
}

bool is_valid_public_key(int key) {
  if (key < 2 || key > PRIME - 2) {
    return false;
  }
  return mod_pow(key, (PRIME - 1) ~/ 2) == 1;
}

int generate_private_key() {
  return rand_int() % (PRIME - 2) + 2;
}

int generator = 5;
int alice_private = generate_private_key();
int alice_public = mod_pow(generator, alice_private);
int bob_private = generate_private_key();
int bob_public = mod_pow(generator, bob_private);
int alice_shared = mod_pow(bob_public, alice_private);
int bob_shared = mod_pow(alice_public, bob_private);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  if (!is_valid_public_key(alice_public)) {
    throw Exception("Invalid public key");
  }
  if (!is_valid_public_key(bob_public)) {
    throw Exception("Invalid public key");
  }
  print(int_to_hex(alice_shared));
  print(int_to_hex(bob_shared));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
