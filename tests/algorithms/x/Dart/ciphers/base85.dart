// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String ascii85_chars = "!\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu";
int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  int idx = ascii85_chars.indexOf(ch);
  if (idx >= 0) {
    return 33 + idx;
  }
  return 0;
}

String chr(int n) {
  if (n >= 33 && n <= 117) {
    return _substr(ascii85_chars, n - 33, n - 32);
  }
  return "?";
}

String to_binary(int n, int bits) {
  String b = "";
  int val = n;
  while (val > 0) {
    b = (val % 2).toString() + b;
    val = val ~/ 2;
  }
  while (b.length < bits) {
    b = "0" + b;
  }
  if (b.length == 0) {
    b = "0";
  }
  return b;
}

int bin_to_int(String bits) {
  int n = 0;
  int i = 0;
  while (i < bits.length) {
    if (bits.substring(i, i + 1) == "1") {
    n = n * 2 + 1;
  } else {
    n = n * 2;
  }
    i = i + 1;
  }
  return n;
}

String reverse(String s) {
  String res = "";
  int i = s.length - 1;
  while (i >= 0) {
    res = res + s.substring(i, i + 1);
    i = i - 1;
  }
  return res;
}

String base10_to_85(int d) {
  if (d > 0) {
    return chr(d % 85 + 33) + base10_to_85(d ~/ 85);
  }
  return "";
}

int base85_to_10(String digits) {
  int value = 0;
  int i = 0;
  while (i < digits.length) {
    value = value * 85 + (ord(digits.substring(i, i + 1)) - 33);
    i = i + 1;
  }
  return value;
}

String ascii85_encode(String data) {
  String binary_data = "";
  for (String ch in data.split('')) {
    binary_data = binary_data + to_binary(ord(ch), 8);
  }
  int null_values = (32 * (binary_data.length ~/ 32 + 1) - binary_data.length) ~/ 8;
  int total_bits = 32 * (binary_data.length ~/ 32 + 1);
  while (binary_data.length < total_bits) {
    binary_data = binary_data + "0";
  }
  String result = "";
  int i = 0;
  while (i < binary_data.length) {
    String chunk_bits = _substr(binary_data, i, i + 32);
    int chunk_val = bin_to_int(chunk_bits);
    String encoded = reverse(base10_to_85(chunk_val));
    result = result + encoded;
    i = i + 32;
  }
  if (null_values % 4 != 0) {
    result = _substr(result, 0, result.length - null_values);
  }
  return result;
}

String ascii85_decode(String data) {
  int null_values = 5 * (data.length ~/ 5 + 1) - data.length;
  String binary_data = data;
  int i = 0;
  while (i < null_values) {
    binary_data = binary_data + "u";
    i = i + 1;
  }
  String result = "";
  i = 0;
  while (i < binary_data.length) {
    String chunk = _substr(binary_data, i, i + 5);
    int value = base85_to_10(chunk);
    String bits = to_binary(value, 32);
    int j = 0;
    while (j < 32) {
    String byte_bits = _substr(bits, j, j + 8);
    String c = chr(bin_to_int(byte_bits));
    result = result + c;
    j = j + 8;
  }
    i = i + 5;
  }
  int trim = null_values;
  if (null_values % 5 == 0) {
    trim = null_values - 1;
  }
  return _substr(result, 0, result.length - trim);
}

void main() {
  print(ascii85_encode(""));
  print(ascii85_encode("12345"));
  print(ascii85_encode("base 85"));
  print(ascii85_decode(""));
  print(ascii85_decode("0etOA2#"));
  print(ascii85_decode("@UX=h+?24"));
}
