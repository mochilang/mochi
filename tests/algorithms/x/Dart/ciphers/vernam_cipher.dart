// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  int idx = upper.indexOf(ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  return 0;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  return "?";
}

String vernam_encrypt(String plaintext, String key) {
  String ciphertext = "";
  int i = 0;
  while (i < plaintext.length) {
    int p = ord(_substr(plaintext, i, i + 1)) - 65;
    int k = ord(_substr(key, i % key.length, i % key.length + 1)) - 65;
    int ct = p + k;
    while (ct > 25) {
    ct = ct - 26;
  }
    ciphertext = ciphertext + chr(ct + 65);
    i = i + 1;
  }
  return ciphertext;
}

String vernam_decrypt(String ciphertext, String key) {
  String decrypted = "";
  int i = 0;
  while (i < ciphertext.length) {
    int c = ord(_substr(ciphertext, i, i + 1));
    int k = ord(_substr(key, i % key.length, i % key.length + 1));
    int val = c - k;
    while (val < 0) {
    val = val + 26;
  }
    decrypted = decrypted + chr(val + 65);
    i = i + 1;
  }
  return decrypted;
}

String plaintext = "HELLO";
String key = "KEY";
String encrypted = vernam_encrypt(plaintext, key);
String decrypted = vernam_decrypt(encrypted, key);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Plaintext: " + plaintext);
  print("Encrypted: " + encrypted);
  print("Decrypted: " + decrypted);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
