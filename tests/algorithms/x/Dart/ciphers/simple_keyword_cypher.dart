// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int index_in_string(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

bool contains_char(String s, String ch) {
  return index_in_string(s, ch) >= 0;
}

bool is_alpha(String ch) {
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  return contains_char(lower, ch) || contains_char(upper, ch);
}

String to_upper(String s) {
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String res = "";
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    int idx = index_in_string(lower, ch);
    if (idx >= 0) {
    res = res + upper.substring(idx, idx + 1);
  } else {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

String remove_duplicates(String key) {
  String res = "";
  int i = 0;
  while (i < key.length) {
    String ch = key.substring(i, i + 1);
    if (ch == " " || is_alpha(ch) && contains_char(res, ch) == false) {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

List<String> create_cipher_map(String key) {
  String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String cleaned = remove_duplicates(to_upper(key));
  List<String> cipher = <String>[];
  int i = 0;
  while (i < cleaned.length) {
    cipher = [...cipher, cleaned.substring(i, i + 1)];
    i = i + 1;
  }
  int offset = cleaned.length;
  int j = cipher.length;
  while (j < 26) {
    String char = alphabet.substring(j - offset, j - offset + 1);
    while (contains_char(cleaned, char)) {
    offset = offset - 1;
    char = alphabet.substring(j - offset, j - offset + 1);
  }
    cipher = [...cipher, char];
    j = j + 1;
  }
  return cipher;
}

int index_in_list(List<String> lst, String ch) {
  int i = 0;
  while (i < lst.length) {
    if (lst[i] == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String encipher(String message, List<String> cipher) {
  String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String msg = to_upper(message);
  String res = "";
  int i = 0;
  while (i < msg.length) {
    String ch = msg.substring(i, i + 1);
    int idx = index_in_string(alphabet, ch);
    if (idx >= 0) {
    res = res + cipher[idx];
  } else {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

String decipher(String message, List<String> cipher) {
  String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String msg = to_upper(message);
  String res = "";
  int i = 0;
  while (i < msg.length) {
    String ch = msg.substring(i, i + 1);
    int idx = index_in_list(cipher, ch);
    if (idx >= 0) {
    res = res + alphabet.substring(idx, idx + 1);
  } else {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

List<String> cipher_map = create_cipher_map("Goodbye!!");
String encoded = encipher("Hello World!!", cipher_map);
void main() {
  print(encoded);
  print(decipher(encoded, cipher_map));
}
