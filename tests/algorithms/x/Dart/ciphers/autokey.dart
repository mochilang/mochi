// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String LOWER = "abcdefghijklmnopqrstuvwxyz";
String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String to_lowercase(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String c = s.substring(i, i + 1);
    int j = 0;
    bool found = false;
    while (j < 26) {
    if (c == UPPER.substring(j, j + 1)) {
    res = res + LOWER.substring(j, j + 1);
    found = true;
    break;
  }
    j = j + 1;
  }
    if (!found) {
    res = res + c;
  }
    i = i + 1;
  }
  return res;
}

int char_index(String c) {
  int i = 0;
  while (i < 26) {
    if (c == LOWER.substring(i, i + 1)) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String index_char(int i) {
  return LOWER.substring(i, i + 1);
}

String encrypt(String plaintext, String key) {
  if (plaintext.length == 0) {
    throw Exception("plaintext is empty");
  }
  if (key.length == 0) {
    throw Exception("key is empty");
  }
  String full_key = key + plaintext;
  plaintext = to_lowercase(plaintext);
  full_key = to_lowercase(full_key);
  int p_i = 0;
  int k_i = 0;
  String ciphertext = "";
  while (p_i < plaintext.length) {
    String p_char = plaintext.substring(p_i, p_i + 1);
    int p_idx = char_index(p_char);
    if (p_idx < 0) {
    ciphertext = ciphertext + p_char;
    p_i = p_i + 1;
  } else {
    String k_char = full_key.substring(k_i, k_i + 1);
    int k_idx = char_index(k_char);
    if (k_idx < 0) {
    k_i = k_i + 1;
  } else {
    int c_idx = (p_idx + k_idx) % 26;
    ciphertext = ciphertext + index_char(c_idx);
    k_i = k_i + 1;
    p_i = p_i + 1;
  };
  }
  }
  return ciphertext;
}

String decrypt(String ciphertext, String key) {
  if (ciphertext.length == 0) {
    throw Exception("ciphertext is empty");
  }
  if (key.length == 0) {
    throw Exception("key is empty");
  }
  String current_key = to_lowercase(key);
  int c_i = 0;
  int k_i = 0;
  String plaintext = "";
  while (c_i < ciphertext.length) {
    String c_char = ciphertext.substring(c_i, c_i + 1);
    int c_idx = char_index(c_char);
    if (c_idx < 0) {
    plaintext = plaintext + c_char;
  } else {
    String k_char = current_key.substring(k_i, k_i + 1);
    int k_idx = char_index(k_char);
    int p_idx = (c_idx - k_idx + 26) % 26;
    String p_char = index_char(p_idx);
    plaintext = plaintext + p_char;
    current_key = current_key + p_char;
    k_i = k_i + 1;
  }
    c_i = c_i + 1;
  }
  return plaintext;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(encrypt("hello world", "coffee"));
  print(decrypt("jsqqs avvwo", "coffee"));
  print(encrypt("coffee is good as python", "TheAlgorithms"));
  print(decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
