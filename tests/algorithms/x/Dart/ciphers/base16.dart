// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String base16_encode(List<int> data) {
  String digits = "0123456789ABCDEF";
  String res = "";
  int i = 0;
  while (i < data.length) {
    int b = data[i];
    if (b < 0 || b > 255) {
    throw Exception("byte out of range");
  }
    int hi = b ~/ 16;
    int lo = b % 16;
    res = res + _substr(digits, hi, hi + 1) + _substr(digits, lo, lo + 1);
    i = i + 1;
  }
  return res;
}

List<int> base16_decode(String data) {
  String digits = "0123456789ABCDEF";
  if (data.length % 2 != 0) {
    throw Exception("Base16 encoded data is invalid: Data does not have an even number of hex digits.");
  }
  int hex_value(String ch) {
  int j = 0;
  while (j < 16) {
    if (_substr(digits, j, j + 1) == ch) {
    return j;
  }
    j = j + 1;
  }
  return -1;
}
  List<int> out = <int>[];
  int i = 0;
  while (i < data.length) {
    dynamic hi_char = _substr(data, i, i + 1);
    dynamic lo_char = _substr(data, i + 1, i + 2);
    dynamic hi = hex_value(hi_char);
    dynamic lo = hex_value(lo_char);
    if (hi.compareTo(0) < 0 || lo.compareTo(0) < 0) {
    throw Exception("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.");
  }
    out = ([...out, hi * 16 + lo] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    i = i + 2;
  }
  return out;
}

List<int> example1 = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];
List<int> example2 = [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(base16_encode(example1));
  print(base16_encode(example2));
  print(base16_encode(<int>[]));
  print((base16_decode("48656C6C6F20576F726C6421")).toString());
  print((base16_decode("48454C4C4F20574F524C4421")).toString());
  print((base16_decode("")).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
