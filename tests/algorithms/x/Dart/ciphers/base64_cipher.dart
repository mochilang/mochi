// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _repeat(String s, int n) => n <= 0 ? '' : List.filled(n, s).join();

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }


void _json(dynamic v) {
  print(jsonEncode(v));
}

String B64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
String to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  int _num = n;
  String res = "";
  while (_num > 0) {
    int bit = _num % 2;
    res = _str(bit) + res;
    _num = _num ~/ 2;
  }
  return res;
}

String zfill(String s, int width) {
  String res = s;
  int pad = width - s.length;
  while (pad > 0) {
    res = "0" + res;
    pad = pad - 1;
  }
  return res;
}

int from_binary(String s) {
  int i = 0;
  int result = 0;
  while (i < s.length) {
    result = result * 2;
    if (_substr(s, i, i + 1) == "1") {
    result = result + 1;
  }
    i = i + 1;
  }
  return result;
}

String repeat(String ch, int times) {
  String res = "";
  int i = 0;
  while (i < times) {
    res = res + ch;
    i = i + 1;
  }
  return res;
}

int char_index(String s, String c) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == c) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String base64_encode(List<int> data) {
  String bits = "";
  int i = 0;
  while (i < data.length) {
    bits = bits + zfill(to_binary(data[i]), 8);
    i = i + 1;
  }
  int pad_bits = 0;
  if (bits.length % 6 != 0) {
    pad_bits = 6 - bits.length % 6;
    bits = bits + _repeat("0", pad_bits);
  }
  int j = 0;
  String encoded = "";
  while (j < bits.length) {
    String chunk = _substr(bits, j, j + 6);
    int idx = from_binary(chunk);
    encoded = encoded + _substr(B64_CHARSET, idx, idx + 1);
    j = j + 6;
  }
  int pad = pad_bits ~/ 2;
  while (pad > 0) {
    encoded = encoded + "=";
    pad = pad - 1;
  }
  return encoded;
}

List<int> base64_decode(String s) {
  int padding = 0;
  int end = s.length;
  while (end > 0 && _substr(s, end - 1, end) == "=") {
    padding = padding + 1;
    end = end - 1;
  }
  String bits = "";
  int k = 0;
  while (k < end) {
    String c = _substr(s, k, k + 1);
    int idx = char_index(B64_CHARSET, c);
    bits = bits + zfill(to_binary(idx), 6);
    k = k + 1;
  }
  if (padding > 0) {
    bits = _substr(bits, 0, bits.length - padding * 2);
  }
  List<int> bytes = <int>[];
  int m = 0;
  while (m < bits.length) {
    int byte = from_binary(_substr(bits, m, m + 8));
    bytes = [...bytes, byte];
    m = m + 8;
  }
  return bytes;
}

void _main() {
  List<int> data = [77, 111, 99, 104, 105];
  String encoded = base64_encode(data);
  print(encoded);
  _json(base64_decode(encoded));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
