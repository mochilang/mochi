// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String encrypt(String input_string, int key) {
  if (key <= 0) {
    throw Exception("Height of grid can't be 0 or negative");
  }
  if (key == 1 || input_string.length <= key) {
    return input_string;
  }
  int lowest = key - 1;
  List<List<String>> temp_grid = <List<String>>[];
  int i = 0;
  while (i < key) {
    temp_grid = ([...temp_grid, List<String>.from([])] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    i = i + 1;
  }
  int position = 0;
  while (position < input_string.length) {
    int _num = position % (lowest * 2);
    int alt = lowest * 2 - _num;
    if (_num > alt) {
    _num = alt;
  }
    List<String> row = temp_grid[_num];
    row = [...row, _substr(input_string, position, position + 1)];
    while (temp_grid.length <= _num) { temp_grid.add(<String>[]); } temp_grid[_num] = row;
    position = position + 1;
  }
  String output = "";
  i = 0;
  while (i < key) {
    List<String> row = temp_grid[i];
    int j = 0;
    while (j < row.length) {
    output = output + row[j];
    j = j + 1;
  }
    i = i + 1;
  }
  return output;
}

String decrypt(String input_string, int key) {
  if (key <= 0) {
    throw Exception("Height of grid can't be 0 or negative");
  }
  if (key == 1) {
    return input_string;
  }
  int lowest = key - 1;
  List<int> counts = <int>[];
  int i = 0;
  while (i < key) {
    counts = [...counts, 0];
    i = i + 1;
  }
  int pos = 0;
  while (pos < input_string.length) {
    int _num = pos % (lowest * 2);
    int alt = lowest * 2 - _num;
    if (_num > alt) {
    _num = alt;
  }
    while (counts.length <= _num) { counts.add(0); } counts[_num] = counts[_num] + 1;
    pos = pos + 1;
  }
  List<List<String>> grid = <List<String>>[];
  int counter = 0;
  i = 0;
  while (i < key) {
    int length = counts[i];
    String slice = _substr(input_string, counter, counter + length);
    List<String> row = <String>[];
    int j = 0;
    while (j < slice.length) {
    row = [...row, slice.substring(j, j + 1)];
    j = j + 1;
  }
    grid = ([...grid, row] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    counter = counter + length;
    i = i + 1;
  }
  List<int> indices = <int>[];
  i = 0;
  while (i < key) {
    indices = [...indices, 0];
    i = i + 1;
  }
  String output = "";
  pos = 0;
  while (pos < input_string.length) {
    int _num = pos % (lowest * 2);
    int alt = lowest * 2 - _num;
    if (_num > alt) {
    _num = alt;
  }
    output = output + grid[_num][indices[_num]];
    while (indices.length <= _num) { indices.add(0); } indices[_num] = indices[_num] + 1;
    pos = pos + 1;
  }
  return output;
}

Map<int, String> bruteforce(String input_string) {
  Map<int, String> results = <int, String>{};
  int key_guess = 1;
  while (key_guess < input_string.length) {
    results[key_guess] = decrypt(input_string, key_guess);
    key_guess = key_guess + 1;
  }
  return results;
}

Map<int, String> bf = bruteforce("HWe olordll");
void main() {
  print(encrypt("Hello World", 4));
  print(decrypt("HWe olordll", 4));
  print(bf[4]!);
}
