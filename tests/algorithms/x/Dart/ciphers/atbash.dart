// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int index_of(String s, String c) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == c) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String atbash(String sequence) {
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower_rev = "zyxwvutsrqponmlkjihgfedcba";
  String upper_rev = "ZYXWVUTSRQPONMLKJIHGFEDCBA";
  String result = "";
  int i = 0;
  while (i < sequence.length) {
    String ch = sequence.substring(i, i + 1);
    int idx = index_of(lower, ch);
    if (idx != -1) {
    result = result + lower_rev.substring(idx, idx + 1);
  } else {
    int idx2 = index_of(upper, ch);
    if (idx2 != -1) {
    result = result + upper_rev.substring(idx2, idx2 + 1);
  } else {
    result = result + ch;
  };
  }
    i = i + 1;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(atbash("ABCDEFGH"));
  print(atbash("123GGjj"));
  print(atbash("testStringtest"));
  print(atbash("with space"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
