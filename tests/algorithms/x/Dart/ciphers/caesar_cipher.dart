// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String default_alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String encrypt(String input_string, int key, String alphabet) {
  String result = "";
  int i = 0;
  int n = alphabet.length;
  while (i < input_string.length) {
    String ch = _substr(input_string, i, i + 1);
    int idx = index_of(alphabet, ch);
    if (idx < 0) {
    result = result + ch;
  } else {
    int new_key = (idx + key) % n;
    if (new_key < 0) {
    new_key = new_key + n;
  };
    result = result + _substr(alphabet, new_key, new_key + 1);
  }
    i = i + 1;
  }
  return result;
}

String decrypt(String input_string, int key, String alphabet) {
  String result = "";
  int i = 0;
  int n = alphabet.length;
  while (i < input_string.length) {
    String ch = _substr(input_string, i, i + 1);
    int idx = index_of(alphabet, ch);
    if (idx < 0) {
    result = result + ch;
  } else {
    int new_key = (idx - key) % n;
    if (new_key < 0) {
    new_key = new_key + n;
  };
    result = result + _substr(alphabet, new_key, new_key + 1);
  }
    i = i + 1;
  }
  return result;
}

List<String> brute_force(String input_string, String alphabet) {
  List<String> results = <String>[];
  int key = 1;
  int n = alphabet.length;
  while (key <= n) {
    String message = decrypt(input_string, key, alphabet);
    results = [...results, message];
    key = key + 1;
  }
  return results;
}

void _main() {
  String alpha = default_alphabet;
  String enc = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha);
  print(enc);
  String dec = decrypt(enc, 8, alpha);
  print(dec);
  List<String> brute = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha);
  print(brute[19]);
}

void _start() {
  _main();
}

void main() => _start();
