// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int seed = 1;
void set_seed(int s) {
  seed = s;
}

int randint(int a, int b) {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed % (b - a + 1) + a;
}

String ascii_chars = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int ord(String ch) {
  int i = 0;
  while (i < ascii_chars.length) {
    if (ascii_chars.substring(i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

String chr(int code) {
  if (code < 32 || code > 126) {
    return "";
  }
  return ascii_chars.substring(code - 32, code - 32 + 1);
}

Map<String, List<int>> encrypt(String text) {
  List<int> cipher = <int>[];
  List<int> key = <int>[];
  int i = 0;
  while (i < text.length) {
    int p = ord(text.substring(i, i + 1));
    int k = randint(1, 300);
    int c = (p + k) * k;
    cipher = [...cipher, c];
    key = [...key, k];
    i = i + 1;
  }
  Map<String, List<int>> res = <String, List<int>>{};
  res["cipher"] = cipher;
  res["key"] = key;
  return res;
}

String decrypt(List<int> cipher, List<int> key) {
  String plain = "";
  int i = 0;
  while (i < key.length) {
    int p = (cipher[i] - key[i] * key[i]) ~/ key[i];
    plain = plain + chr(p);
    i = i + 1;
  }
  return plain;
}

Map<String, List<int>> res = encrypt("Hello");
List<int> cipher = res["cipher"]!;
List<int> key = res["key"]!;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  set_seed(1);
  print("[" + cipher.join(', ') + "]");
  print("[" + key.join(', ') + "]");
  print(decrypt(cipher, key));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
