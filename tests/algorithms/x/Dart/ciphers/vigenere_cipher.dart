// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String LETTERS_LOWER = "abcdefghijklmnopqrstuvwxyz";
int find_index(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String to_upper_char(String ch) {
  int idx = find_index(LETTERS_LOWER, ch);
  if (idx >= 0) {
    return LETTERS.substring(idx, idx + 1);
  }
  return ch;
}

String to_lower_char(String ch) {
  int idx = find_index(LETTERS, ch);
  if (idx >= 0) {
    return LETTERS_LOWER.substring(idx, idx + 1);
  }
  return ch;
}

bool is_upper(String ch) {
  return find_index(LETTERS, ch) >= 0;
}

String to_upper_string(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    res = res + to_upper_char(s.substring(i, i + 1));
    i = i + 1;
  }
  return res;
}

String key = "HDarji";
String message = "This is Harshil Darji from Dharmaj.";
String key_up = to_upper_string(key);
String encrypted = "";
int key_index = 0;
int i = 0;
String decrypted = "";
void main() {
  while (i < message.length) {
    dynamic symbol = message.substring(i, i + 1);
    dynamic upper_symbol = to_upper_char(symbol);
    dynamic _num = find_index(LETTERS, upper_symbol);
    if (_num.compareTo(0) >= 0) {
    _num = _num + find_index(LETTERS, key_up.substring(key_index, key_index + 1));
    _num = _num % LETTERS.length;
    if (is_upper(symbol)) {
    encrypted = encrypted + LETTERS.substring(_num, _num + 1);
  } else {
    encrypted = encrypted + to_lower_char(LETTERS.substring(_num, _num + 1));
  };
    key_index = key_index + 1;
    if (key_index == key_up.length) {
    key_index = 0;
  };
  } else {
    encrypted = encrypted + symbol;
  }
    i = i + 1;
  }
  print(encrypted);
  key_index = 0;
  i = 0;
  while (i < encrypted.length) {
    dynamic symbol = encrypted.substring(i, i + 1);
    dynamic upper_symbol = to_upper_char(symbol);
    dynamic _num = find_index(LETTERS, upper_symbol);
    if (_num.compareTo(0) >= 0) {
    _num = _num - find_index(LETTERS, key_up.substring(key_index, key_index + 1));
    _num = _num % LETTERS.length;
    if (is_upper(symbol)) {
    decrypted = decrypted + LETTERS.substring(_num, _num + 1);
  } else {
    decrypted = decrypted + to_lower_char(LETTERS.substring(_num, _num + 1));
  };
    key_index = key_index + 1;
    if (key_index == key_up.length) {
    key_index = 0;
  };
  } else {
    decrypted = decrypted + symbol;
  }
    i = i + 1;
  }
  print(decrypted);
}
