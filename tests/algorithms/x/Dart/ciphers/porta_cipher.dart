// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String LOWER = "abcdefghijklmnopqrstuvwxyz";
String BASE_TOP = "ABCDEFGHIJKLM";
String BASE_BOTTOM = "NOPQRSTUVWXYZ";
String to_upper(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    int j = 0;
    bool replaced = false;
    while (j < LOWER.length) {
    if (_substr(LOWER, j, j + 1) == ch) {
    res = res + _substr(UPPER, j, j + 1);
    replaced = true;
    break;
  }
    j = j + 1;
  }
    if (!replaced) {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

int char_index(String c) {
  int i = 0;
  while (i < UPPER.length) {
    if (_substr(UPPER, i, i + 1) == c) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String rotate_right(String s, int k) {
  int n = s.length;
  int shift = k % n;
  return _substr(s, n - shift, n) + _substr(s, 0, n - shift);
}

List<String> table_for(String c) {
  int idx = char_index(c);
  int shift = idx ~/ 2;
  String row1 = rotate_right(BASE_BOTTOM, shift);
  List<String> pair = [BASE_TOP, row1];
  return pair;
}

List<List<String>> generate_table(String key) {
  String up = to_upper(key);
  int i = 0;
  List<List<String>> result = <List<String>>[];
  while (i < up.length) {
    String ch = _substr(up, i, i + 1);
    List<String> pair = table_for(ch);
    result = ([...result, pair] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    i = i + 1;
  }
  return result;
}

int str_index(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

List<int> get_position(List<String> table, String ch) {
  int row = 0;
  if (str_index(table[0], ch) == 0 - 1) {
    row = 1;
  }
  int col = str_index(table[row], ch);
  return [row, col];
}

String get_opponent(List<String> table, String ch) {
  List<int> pos = get_position(table, ch);
  int row = pos[0];
  int col = pos[1];
  if (col == 0 - 1) {
    return ch;
  }
  if (row == 1) {
    return _substr(table[0], col, col + 1);
  }
  return _substr(table[1], col, col + 1);
}

String encrypt(String key, String words) {
  List<List<String>> table = generate_table(key);
  String up_words = to_upper(words);
  String cipher = "";
  int count = 0;
  int i = 0;
  while (i < up_words.length) {
    String ch = _substr(up_words, i, i + 1);
    cipher = cipher + get_opponent(table[count], ch);
    count = (count + 1) % table.length;
    i = i + 1;
  }
  return cipher;
}

String decrypt(String key, String words) {
  String res = encrypt(key, words);
  return res;
}

void _main() {
  print(encrypt("marvin", "jessica"));
  print(decrypt("marvin", "QRACRWU"));
}

void _start() {
  _main();
}

void main() => _start();
