// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String ASCII_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String ASCII_LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
BigInt NEG_ONE = BigInt.from(0 - 1);
int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return (NEG_ONE).toInt();
}

String to_uppercase(String s) {
  String result = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    int idx = index_of(ASCII_LOWERCASE, ch);
    if (BigInt.from(idx) == NEG_ONE) {
    result = result + ch;
  } else {
    result = result + _substr(ASCII_UPPERCASE, idx, idx + 1);
  }
    i = i + 1;
  }
  return result;
}

String gronsfeld(String text, String key) {
  int ascii_len = ASCII_UPPERCASE.length;
  int key_len = key.length;
  if (key_len == 0) {
    throw Exception("integer modulo by zero");
  }
  String upper_text = to_uppercase(text);
  String encrypted = "";
  int i = 0;
  while (i < upper_text.length) {
    String ch = _substr(upper_text, i, i + 1);
    int idx = index_of(ASCII_UPPERCASE, ch);
    if (BigInt.from(idx) == NEG_ONE) {
    encrypted = encrypted + ch;
  } else {
    int key_idx = i % key_len;
    int shift = int.parse(_substr(key, key_idx, key_idx + 1));
    int new_position = (idx + shift) % ascii_len;
    encrypted = encrypted + _substr(ASCII_UPPERCASE, new_position, new_position + 1);
  }
    i = i + 1;
  }
  return encrypted;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(gronsfeld("hello", "412"));
  print(gronsfeld("hello", "123"));
  print(gronsfeld("", "123"));
  print(gronsfeld("yes, ¥€\$ - _!@#%?", "0"));
  print(gronsfeld("yes, ¥€\$ - _!@#%?", "01"));
  print(gronsfeld("yes, ¥€\$ - _!@#%?", "012"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
