// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> triagrams = ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"];
String remove_spaces(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    if (c != " ") {
    res = res + c;
  }
    i = i + 1;
  }
  return res;
}

String char_to_trigram(String ch, String alphabet) {
  int i = 0;
  while (i < alphabet.length) {
    if (_substr(alphabet, i, i + 1) == ch) {
    return triagrams[i];
  }
    i = i + 1;
  }
  return "";
}

String trigram_to_char(String tri, String alphabet) {
  int i = 0;
  while (i < triagrams.length) {
    if (triagrams[i] == tri) {
    return _substr(alphabet, i, i + 1);
  }
    i = i + 1;
  }
  return "";
}

String encrypt_part(String part, String alphabet) {
  String one = "";
  String two = "";
  String three = "";
  int i = 0;
  while (i < part.length) {
    String tri = char_to_trigram(_substr(part, i, i + 1), alphabet);
    one = one + _substr(tri, 0, 1);
    two = two + _substr(tri, 1, 2);
    three = three + _substr(tri, 2, 3);
    i = i + 1;
  }
  return one + two + three;
}

String encrypt_message(String message, String alphabet, int period) {
  String msg = remove_spaces(message);
  String alpha = remove_spaces(alphabet);
  if (alpha.length != 27) {
    return "";
  }
  String encrypted_numeric = "";
  int i = 0;
  while (i < msg.length) {
    int end = i + period;
    if (end > msg.length) {
    end = msg.length;
  }
    String part = _substr(msg, i, end);
    encrypted_numeric = encrypted_numeric + encrypt_part(part, alpha);
    i = i + period;
  }
  String encrypted = "";
  int j = 0;
  while (j < encrypted_numeric.length) {
    String tri = _substr(encrypted_numeric, j, j + 3);
    encrypted = encrypted + trigram_to_char(tri, alpha);
    j = j + 3;
  }
  return encrypted;
}

List<String> decrypt_part(String part, String alphabet) {
  String converted = "";
  int i = 0;
  while (i < part.length) {
    String tri = char_to_trigram(_substr(part, i, i + 1), alphabet);
    converted = converted + tri;
    i = i + 1;
  }
  List<String> result = <String>[];
  String tmp = "";
  int j = 0;
  while (j < converted.length) {
    tmp = tmp + _substr(converted, j, j + 1);
    if (tmp.length == part.length) {
    result = [...result, tmp];
    tmp = "";
  }
    j = j + 1;
  }
  return result;
}

String decrypt_message(String message, String alphabet, int period) {
  String msg = remove_spaces(message);
  String alpha = remove_spaces(alphabet);
  if (alpha.length != 27) {
    return "";
  }
  List<String> decrypted_numeric = <String>[];
  int i = 0;
  while (i < msg.length) {
    int end = i + period;
    if (end > msg.length) {
    end = msg.length;
  }
    String part = _substr(msg, i, end);
    List<String> groups = decrypt_part(part, alpha);
    int k = 0;
    while (k < groups[0].length) {
    String tri = _substr(groups[0], k, k + 1) + _substr(groups[1], k, k + 1) + _substr(groups[2], k, k + 1);
    decrypted_numeric = [...decrypted_numeric, tri];
    k = k + 1;
  }
    i = i + period;
  }
  String decrypted = "";
  int j = 0;
  while (j < decrypted_numeric.length) {
    decrypted = decrypted + trigram_to_char(decrypted_numeric[j], alpha);
    j = j + 1;
  }
  return decrypted;
}

void _main() {
  String msg = "DEFEND THE EAST WALL OF THE CASTLE.";
  String alphabet = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ";
  String encrypted = encrypt_message(msg, alphabet, 5);
  String decrypted = decrypt_message(encrypted, alphabet, 5);
  print("Encrypted: " + encrypted);
  print("Decrypted: " + decrypted);
}

void _start() {
  _main();
}

void main() => _start();
