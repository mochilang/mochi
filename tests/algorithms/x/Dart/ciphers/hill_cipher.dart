// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String KEY_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
int mod36(int n) {
  int r = n % 36;
  if (r < 0) {
    r = r + 36;
  }
  return r;
}

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int t = y;
    y = x % y;
    x = t;
  }
  if (x < 0) {
    x = -x;
  }
  return x;
}

int replace_letters(String letter) {
  int i = 0;
  while (i < KEY_STRING.length) {
    if (KEY_STRING.substring(i, i + 1) == letter) {
    return i;
  }
    i = i + 1;
  }
  return 0;
}

String replace_digits(int _num) {
  int idx = mod36(_num);
  return KEY_STRING.substring(idx, idx + 1);
}

String to_upper(String c) {
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  int i = 0;
  while (i < lower.length) {
    if (c == lower.substring(i, i + 1)) {
    return upper.substring(i, i + 1);
  }
    i = i + 1;
  }
  return c;
}

String process_text(String text, int break_key) {
  List<String> chars = <String>[];
  int i = 0;
  while (i < text.length) {
    String c = to_upper(text.substring(i, i + 1));
    int j = 0;
    bool ok = false;
    while (j < KEY_STRING.length) {
    if (KEY_STRING.substring(j, j + 1) == c) {
    ok = true;
    break;
  }
    j = j + 1;
  }
    if (ok) {
    chars = [...chars, c];
  }
    i = i + 1;
  }
  if (chars.length == 0) {
    return "";
  }
  String last = chars[chars.length - 1];
  while (chars.length % break_key != 0) {
    chars = [...chars, last];
  }
  String res = "";
  int k = 0;
  while (k < chars.length) {
    res = res + chars[k];
    k = k + 1;
  }
  return res;
}

List<List<int>> matrix_minor(List<List<int>> m, int row, int col) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < m.length) {
    if (i != row) {
    List<int> r = <int>[];
    int j = 0;
    while (j < m[i].length) {
    if (j != col) {
    r = [...r, m[i][j]];
  }
    j = j + 1;
  };
    res = ([...res, r] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    i = i + 1;
  }
  return res;
}

int determinant(List<List<int>> m) {
  int n = m.length;
  if (n == 1) {
    return m[0][0];
  }
  if (n == 2) {
    return m[0][0] * m[1][1] - m[0][1] * m[1][0];
  }
  int det = 0;
  int col = 0;
  while (col < n) {
    List<List<int>> minor_mat = matrix_minor(m, 0, col);
    int sign = 1;
    if (col % 2 == 1) {
    sign = -1;
  }
    det = det + sign * m[0][col] * determinant(minor_mat);
    col = col + 1;
  }
  return det;
}

List<List<int>> cofactor_matrix(List<List<int>> m) {
  int n = m.length;
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    List<List<int>> minor_mat = matrix_minor(m, i, j);
    int det_minor = determinant(minor_mat);
    int sign = 1;
    if ((i + j) % 2 == 1) {
    sign = -1;
  }
    row = [...row, sign * det_minor];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<int>> transpose(List<List<int>> m) {
  int rows = m.length;
  int cols = m[0].length;
  List<List<int>> res = <List<int>>[];
  int j = 0;
  while (j < cols) {
    List<int> row = <int>[];
    int i = 0;
    while (i < rows) {
    row = [...row, m[i][j]];
    i = i + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
  return res;
}

List<List<int>> matrix_mod(List<List<int>> m) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < m.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < m[i].length) {
    row = [...row, mod36(m[i][j])];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<int>> scalar_matrix_mult(int s, List<List<int>> m) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < m.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < m[i].length) {
    row = [...row, mod36(s * m[i][j])];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<int>> adjugate(List<List<int>> m) {
  List<List<int>> cof = cofactor_matrix(m);
  int n = cof.length;
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, cof[j][i]];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

List<int> multiply_matrix_vector(List<List<int>> m, List<int> v) {
  int n = m.length;
  List<int> res = <int>[];
  int i = 0;
  while (i < n) {
    int sum = 0;
    int j = 0;
    while (j < n) {
    sum = sum + m[i][j] * v[j];
    j = j + 1;
  }
    res = [...res, mod36(sum)];
    i = i + 1;
  }
  return res;
}

List<List<int>> inverse_key(List<List<int>> key) {
  int det_val = determinant(key);
  int det_mod = mod36(det_val);
  int det_inv = 0;
  int i = 0;
  while (i < 36) {
    if (det_mod * i % 36 == 1) {
    det_inv = i;
    break;
  }
    i = i + 1;
  }
  List<List<int>> adj = adjugate(key);
  List<List<int>> tmp = scalar_matrix_mult(det_inv, adj);
  List<List<int>> res = matrix_mod(tmp);
  return res;
}

String hill_encrypt(List<List<int>> key, String text) {
  int break_key = key.length;
  String processed = process_text(text, break_key);
  String encrypted = "";
  int i = 0;
  while (i < processed.length) {
    List<int> vec = <int>[];
    int j = 0;
    while (j < break_key) {
    vec = [...vec, replace_letters(processed.substring(i + j, i + j + 1))];
    j = j + 1;
  }
    List<int> enc_vec = multiply_matrix_vector(key, vec);
    int k = 0;
    while (k < break_key) {
    encrypted = encrypted + replace_digits(enc_vec[k]);
    k = k + 1;
  }
    i = i + break_key;
  }
  return encrypted;
}

String hill_decrypt(List<List<int>> key, String text) {
  int break_key = key.length;
  List<List<int>> decrypt_key = inverse_key(key);
  String processed = process_text(text, break_key);
  String decrypted = "";
  int i = 0;
  while (i < processed.length) {
    List<int> vec = <int>[];
    int j = 0;
    while (j < break_key) {
    vec = [...vec, replace_letters(processed.substring(i + j, i + j + 1))];
    j = j + 1;
  }
    List<int> dec_vec = multiply_matrix_vector(decrypt_key, vec);
    int k = 0;
    while (k < break_key) {
    decrypted = decrypted + replace_digits(dec_vec[k]);
    k = k + 1;
  }
    i = i + break_key;
  }
  return decrypted;
}

List<List<int>> key = [[2, 5], [1, 6]];
void main() {
  print(hill_encrypt(key, "testing hill cipher"));
  print(hill_encrypt(key, "hello"));
  print(hill_decrypt(key, "WHXYJOLM9C6XT085LL"));
  print(hill_decrypt(key, "85FF00"));
}
