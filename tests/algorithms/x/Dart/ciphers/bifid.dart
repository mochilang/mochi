// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<String>> SQUARE = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]];
int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String to_lower_without_spaces(String message, bool replace_j) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  String res = "";
  int i = 0;
  while (i < message.length) {
    String ch = message.substring(i, i + 1);
    int pos = index_of(upper, ch);
    if (pos >= 0) {
    ch = lower.substring(pos, pos + 1);
  }
    if (ch != " ") {
    if (replace_j && ch == "j") {
    ch = "i";
  };
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

List<int> letter_to_numbers(String letter) {
  int r = 0;
  while (r < SQUARE.length) {
    int c = 0;
    while (c < SQUARE[r].length) {
    if (SQUARE[r][c] == letter) {
    return [r + 1, c + 1] as List<int>;
  }
    c = c + 1;
  }
    r = r + 1;
  }
  return [0, 0] as List<int>;
}

String numbers_to_letter(int row, int col) {
  return SQUARE[row - 1][col - 1];
}

String encode(String message) {
  String clean = to_lower_without_spaces(message, true);
  int l = clean.length;
  List<int> rows = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  List<int> cols = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  int i = 0;
  while (i < l) {
    List<int> nums = letter_to_numbers(clean.substring(i, i + 1));
    rows = [...rows, nums[0]];
    cols = [...cols, nums[1]];
    i = i + 1;
  }
  List<int> seq = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  i = 0;
  while (i < l) {
    seq = [...seq, rows[i]];
    i = i + 1;
  }
  i = 0;
  while (i < l) {
    seq = [...seq, cols[i]];
    i = i + 1;
  }
  String encoded = "";
  i = 0;
  while (i < l) {
    int r = seq[2 * i];
    int c = seq[2 * i + 1];
    encoded = encoded + numbers_to_letter(r, c);
    i = i + 1;
  }
  return encoded;
}

String decode(String message) {
  String clean = to_lower_without_spaces(message, false);
  int l = clean.length;
  List<int> first = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  int i = 0;
  while (i < l) {
    List<int> nums = letter_to_numbers(clean.substring(i, i + 1));
    first = [...first, nums[0]];
    first = [...first, nums[1]];
    i = i + 1;
  }
  List<int> top = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  List<int> bottom = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  i = 0;
  while (i < l) {
    top = [...top, first[i]];
    bottom = [...bottom, first[i + l]];
    i = i + 1;
  }
  String decoded = "";
  i = 0;
  while (i < l) {
    int r = top[i];
    int c = bottom[i];
    decoded = decoded + numbers_to_letter(r, c);
    i = i + 1;
  }
  return decoded;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(encode("testmessage"));
  print(encode("Test Message"));
  print(encode("test j"));
  print(encode("test i"));
  print(decode("qtltbdxrxlk"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
