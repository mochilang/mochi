// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

Map<String, String> MORSE_CODE_DICT = {"A": ".-", "B": "-...", "C": "-.-.", "D": "-..", "E": ".", "F": "..-.", "G": "--.", "H": "....", "I": "..", "J": ".---", "K": "-.-", "L": ".-..", "M": "--", "N": "-.", "O": "---", "P": ".--.", "Q": "--.-", "R": ".-.", "S": "...", "T": "-", "U": "..-", "V": "...-", "W": ".--", "X": "-..-", "Y": "-.--", "Z": "--..", " ": ""};
List<String> MORSE_COMBINATIONS = ["...", "..-", "..x", ".-.", ".--", ".-x", ".x.", ".x-", ".xx", "-..", "-.-", "-.x", "--.", "---", "--x", "-x.", "-x-", "-xx", "x..", "x.-", "x.x", "x-.", "x--", "x-x", "xx.", "xx-", "xxx"];
Map<String, String> REVERSE_DICT = {".-": "A", "-...": "B", "-.-.": "C", "-..": "D", ".": "E", "..-.": "F", "--.": "G", "....": "H", "..": "I", ".---": "J", "-.-": "K", ".-..": "L", "--": "M", "-.": "N", "---": "O", ".--.": "P", "--.-": "Q", ".-.": "R", "...": "S", "-": "T", "..-": "U", "...-": "V", ".--": "W", "-..-": "X", "-.--": "Y", "--..": "Z", "": " "};
String encodeToMorse(String plaintext) {
  String morse = "";
  int i = 0;
  while (i < plaintext.length) {
    String ch = _substr(plaintext, i, i + 1).toUpperCase();
    String code = "";
    if (MORSE_CODE_DICT.containsKey(ch)) {
    code = MORSE_CODE_DICT[ch]!;
  }
    if (i > 0) {
    morse = morse + "x";
  }
    morse = morse + code;
    i = i + 1;
  }
  return morse;
}

String encryptFractionatedMorse(String plaintext, String key) {
  String morseCode = encodeToMorse(plaintext);
  String combinedKey = key.toUpperCase() + "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String dedupKey = "";
  int i = 0;
  while (i < combinedKey.length) {
    String ch = _substr(combinedKey, i, i + 1);
    if (!dedupKey.contains(ch)) {
    dedupKey = dedupKey + ch;
  }
    i = i + 1;
  }
  int paddingLength = 3 - morseCode.length % 3;
  int p = 0;
  while (p < paddingLength) {
    morseCode = morseCode + "x";
    p = p + 1;
  }
  Map<String, String> dict = <String, String>{};
  int j = 0;
  while (j < 26) {
    String combo = MORSE_COMBINATIONS[j];
    String letter = _substr(dedupKey, j, j + 1);
    dict[combo] = letter;
    j = j + 1;
  }
  dict["xxx"] = "";
  String encrypted = "";
  int k = 0;
  while (k < morseCode.length) {
    String group = _substr(morseCode, k, k + 3);
    encrypted = encrypted + dict[group]!;
    k = k + 3;
  }
  return encrypted;
}

String decryptFractionatedMorse(String ciphertext, String key) {
  String combinedKey = key.toUpperCase() + "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String dedupKey = "";
  int i = 0;
  while (i < combinedKey.length) {
    String ch = _substr(combinedKey, i, i + 1);
    if (!dedupKey.contains(ch)) {
    dedupKey = dedupKey + ch;
  }
    i = i + 1;
  }
  Map<String, String> inv = <String, String>{};
  int j = 0;
  while (j < 26) {
    String letter = _substr(dedupKey, j, j + 1);
    inv[letter] = MORSE_COMBINATIONS[j];
    j = j + 1;
  }
  String morse = "";
  int k = 0;
  while (k < ciphertext.length) {
    String ch = _substr(ciphertext, k, k + 1);
    if (inv.containsKey(ch)) {
    morse = morse + inv[ch]!;
  }
    k = k + 1;
  }
  List<String> codes = <String>[];
  String current = "";
  int m = 0;
  while (m < morse.length) {
    String ch = _substr(morse, m, m + 1);
    if (ch == "x") {
    codes = [...codes, current];
    current = "";
  } else {
    current = current + ch;
  }
    m = m + 1;
  }
  codes = [...codes, current];
  String decrypted = "";
  int idx = 0;
  while (idx < codes.length) {
    String code = codes[idx];
    decrypted = decrypted + REVERSE_DICT[code]!;
    idx = idx + 1;
  }
  int start = 0;
  while (true) {
    if (start < decrypted.length) {
    if (_substr(decrypted, start, start + 1) == " ") {
    start = start + 1;
    continue;
  };
  }
    break;
  }
  int end = decrypted.length;
  while (true) {
    if (end > start) {
    if (_substr(decrypted, end - 1, end) == " ") {
    end = end - 1;
    continue;
  };
  }
    break;
  }
  return _substr(decrypted, start, end);
}

String plaintext = "defend the east";
String key = "ROUNDTABLE";
String ciphertext = encryptFractionatedMorse(plaintext, key);
String decrypted = decryptFractionatedMorse(ciphertext, key);
void main() {
  print(["Plain Text:", plaintext].join(" "));
  print(["Encrypted:", ciphertext].join(" "));
  print(["Decrypted:", decrypted].join(" "));
}
