// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Cipher {
  List<String> passcode;
  List<String> key_list;
  int shift_key;
  Cipher({required this.passcode, required this.key_list, required this.shift_key});
}

int ord(String ch) {
  String digits = "0123456789";
  int i = 0;
  while (i < digits.length) {
    if (_substr(digits, i, i + 1) == ch) {
    return 48 + i;
  }
    i = i + 1;
  }
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  i = 0;
  while (i < upper.length) {
    if (_substr(upper, i, i + 1) == ch) {
    return 65 + i;
  }
    i = i + 1;
  }
  String lower = "abcdefghijklmnopqrstuvwxyz";
  i = 0;
  while (i < lower.length) {
    if (_substr(lower, i, i + 1) == ch) {
    return 97 + i;
  }
    i = i + 1;
  }
  return 0;
}

List<int> neg_pos(List<int> iterlist) {
  int i = 1;
  while (i < iterlist.length) {
    while (iterlist.length <= i) { iterlist.add(0); } iterlist[i] = -iterlist[i];
    i = i + 2;
  }
  return iterlist;
}

List<String> passcode_creator() {
  String choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  int seed = _now();
  int length = 10 + seed % 11;
  List<String> password = <String>[];
  int i = 0;
  while (i < length) {
    seed = (seed * 1103515245 + 12345) % 2147483647;
    int idx = seed % choices.length;
    password = [...password, _substr(choices, idx, idx + 1)];
    i = i + 1;
  }
  return password;
}

List<String> unique_sorted(List<String> chars) {
  List<String> uniq = <String>[];
  int i = 0;
  while (i < chars.length) {
    String ch = chars[i];
    if (!uniq.contains(ch)) {
    uniq = [...uniq, ch];
  }
    i = i + 1;
  }
  int j = 0;
  while (j < uniq.length) {
    int k = j + 1;
    int min_idx = j;
    while (k < uniq.length) {
    if (uniq[k].compareTo(uniq[min_idx]) < 0) {
    min_idx = k;
  }
    k = k + 1;
  }
    if (min_idx != j) {
    String tmp = uniq[j];
    while (uniq.length <= j) { uniq.add(""); } uniq[j] = uniq[min_idx];
    while (uniq.length <= min_idx) { uniq.add(""); } uniq[min_idx] = tmp;
  }
    j = j + 1;
  }
  return uniq;
}

List<String> make_key_list(List<String> passcode) {
  String key_list_options = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#\$%&'()*+,-./:;<=>?@[\\]^_`{|}~ 	\n";
  List<String> breakpoints = unique_sorted(passcode);
  List<String> keys_l = <String>[];
  List<String> temp_list = <String>[];
  int i = 0;
  while (i < key_list_options.length) {
    String ch = _substr(key_list_options, i, i + 1);
    temp_list = [...temp_list, ch];
    if (breakpoints.contains(ch) || i == key_list_options.length - 1) {
    int k = temp_list.length - 1;
    while (k >= 0) {
    keys_l = [...keys_l, temp_list[k]];
    k = k - 1;
  };
    temp_list = List<String>.from([]);
  }
    i = i + 1;
  }
  return keys_l;
}

int make_shift_key(List<String> passcode) {
  List<int> codes = <int>[];
  int i = 0;
  while (i < passcode.length) {
    codes = [...codes, ord(passcode[i])];
    i = i + 1;
  }
  codes = neg_pos(codes);
  int total = 0;
  i = 0;
  while (i < codes.length) {
    total = total + codes[i];
    i = i + 1;
  }
  if (total > 0) {
    return total;
  }
  return passcode.length;
}

Cipher new_cipher(String passcode_str) {
  List<String> passcode = <String>[];
  if (passcode_str.length == 0) {
    passcode = passcode_creator();
  } else {
    int i = 0;
    while (i < passcode_str.length) {
    passcode = [...passcode, _substr(passcode_str, i, i + 1)];
    i = i + 1;
  };
  }
  List<String> key_list = make_key_list(passcode);
  int shift_key = make_shift_key(passcode);
  return Cipher(passcode: passcode, key_list: key_list, shift_key: shift_key);
}

int index_of(List<String> lst, String ch) {
  int i = 0;
  while (i < lst.length) {
    if (lst[i] == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String encrypt(Cipher c, String plaintext) {
  String encoded = "";
  int i = 0;
  int n = c.key_list.length;
  while (i < plaintext.length) {
    String ch = _substr(plaintext, i, i + 1);
    int position = index_of(c.key_list, ch);
    int new_pos = (position + c.shift_key) % n;
    encoded = encoded + c.key_list[new_pos];
    i = i + 1;
  }
  return encoded;
}

String decrypt(Cipher c, String encoded_message) {
  String decoded = "";
  int i = 0;
  int n = c.key_list.length;
  while (i < encoded_message.length) {
    String ch = _substr(encoded_message, i, i + 1);
    int position = index_of(c.key_list, ch);
    int new_pos = (position - c.shift_key) % n;
    if (new_pos < 0) {
    new_pos = new_pos + n;
  }
    decoded = decoded + c.key_list[new_pos];
    i = i + 1;
  }
  return decoded;
}

String test_end_to_end() {
  String msg = "Hello, this is a modified Caesar cipher";
  Cipher cip = new_cipher("");
  return decrypt(cip, encrypt(cip, msg));
}

Cipher ssc = new_cipher("4PYIXyqeQZr44");
String encoded = encrypt(ssc, "Hello, this is a modified Caesar cipher");
void main() {
  _initNow();
  print(encoded);
  print(decrypt(ssc, encoded));
}
