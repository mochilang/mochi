// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Keys {
  List<int> public_key;
  List<int> private_key;
  Keys({required this.public_key, required this.private_key});
}

int pow2(int exp) {
  int res = 1;
  int i = 0;
  while (i < exp) {
    res = res * 2;
    i = i + 1;
  }
  return res;
}

int seed = 1;
int next_seed(int x) {
  return (x * 1103515245 + 12345) % 2147483648;
}

int rand_range(int min, int max) {
  seed = next_seed(seed);
  return min + seed % (max - min);
}

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int temp = x % y;
    x = y;
    y = temp;
  }
  return x;
}

int mod_inverse(int e, int phi) {
  int t = 0;
  int newt = 1;
  int r = phi;
  int newr = e;
  while (newr != 0) {
    int quotient = r ~/ newr;
    int tmp = newt;
    newt = t - quotient * newt;
    t = tmp;
    int tmp_r = newr;
    newr = r - quotient * newr;
    r = tmp_r;
  }
  if (r > 1) {
    return 0;
  }
  if (t < 0) {
    t = t + phi;
  }
  return t;
}

bool is_prime(int n) {
  if (n < 2) {
    return false;
  }
  int i = 2;
  while (i * i <= n) {
    if (n % i == 0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int generate_prime(int bits) {
  int min = pow2(bits - 1);
  int max = pow2(bits);
  int p = rand_range(min, max);
  if (p % 2 == 0) {
    p = p + 1;
  }
  while (!is_prime(p)) {
    p = p + 2;
    if (p >= max) {
    p = min + 1;
  }
  }
  return p;
}

Keys generate_key(int bits) {
  int p = generate_prime(bits);
  int q = generate_prime(bits);
  int n = p * q;
  int phi = (p - 1) * (q - 1);
  int e = rand_range(2, phi);
  while (gcd(e, phi) != 1) {
    e = e + 1;
    if (e >= phi) {
    e = 2;
  }
  }
  int d = mod_inverse(e, phi);
  return Keys(public_key: [n, e], private_key: [n, d]);
}

Keys keys = generate_key(8);
List<int> pub = keys.public_key;
List<int> priv = keys.private_key;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Public key: (" + _str(pub[0]) + ", " + _str(pub[1]) + ")");
  print("Private key: (" + _str(priv[0]) + ", " + _str(priv[1]) + ")");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
