// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

dynamic decrypt(String message) {
  for (int key = 0; key < LETTERS.length; key++) {
    String translated = "";
    for (int i = 0; i < message.length; i++) {
    String symbol = _substr(message, i, i + 1);
    int idx = index_of(LETTERS, symbol);
    if (idx != 0 - 1) {
    int _num = idx - key;
    if (_num < 0) {
    _num = _num + LETTERS.length;
  };
    translated = translated + _substr(LETTERS, _num, _num + 1);
  } else {
    translated = translated + symbol;
  }
  }
    print("Decryption using Key #" + (key).toString() + ": " + translated);
  }
}

void main() {
  decrypt("TMDETUX PMDVU");
}
