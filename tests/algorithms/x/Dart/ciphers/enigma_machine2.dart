// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String low_abc = "abcdefghijklmnopqrstuvwxyz";
String rotor1 = "EGZWVONAHDCLFQMSIPJBYUKXTR";
String rotor2 = "FOBHMDKEXQNRAULPGSJVTYICZW";
String rotor3 = "ZJXESIUQLHAVRMDOYGTNFWPBKC";
String rotor4 = "RMDJXFUWGISLHVTCQNKYPBEZOA";
String rotor5 = "SGLCPQWZHKXAREONTFBVIYJUDM";
String rotor6 = "HVSICLTYKQUBXDWAJZOMFGPREN";
String rotor7 = "RZWQHFMVDBKICJLNTUXAGYPSOE";
String rotor8 = "LFKIJODBEGAMQPXVUHYSTCZRWN";
String rotor9 = "KOAEGVDHXPQZMLFTYWJNBRCIUS";
List<String> reflector_pairs = ["AN", "BO", "CP", "DQ", "ER", "FS", "GT", "HU", "IV", "JW", "KX", "LY", "MZ"];
bool list_contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int index_in_string(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (_substr(s, i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

bool contains_char(String s, String ch) {
  return index_in_string(s, ch) >= 0;
}

String to_uppercase(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    int idx = index_in_string(low_abc, ch);
    if (idx >= 0) {
    res = res + _substr(abc, idx, idx + 1);
  } else {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

String plugboard_map(List<String> pb, String ch) {
  int i = 0;
  while (i < pb.length) {
    String pair = pb[i];
    String a = _substr(pair, 0, 1);
    String b = _substr(pair, 1, 2);
    if (ch == a) {
    return b;
  }
    if (ch == b) {
    return a;
  }
    i = i + 1;
  }
  return ch;
}

String reflector_map(String ch) {
  int i = 0;
  while (i < reflector_pairs.length) {
    String pair = reflector_pairs[i];
    String a = _substr(pair, 0, 1);
    String b = _substr(pair, 1, 2);
    if (ch == a) {
    return b;
  }
    if (ch == b) {
    return a;
  }
    i = i + 1;
  }
  return ch;
}

int count_unique(List<String> xs) {
  List<String> unique = <String>[];
  int i = 0;
  while (i < xs.length) {
    if (!list_contains(unique, xs[i])) {
    unique = [...unique, xs[i]];
  }
    i = i + 1;
  }
  return unique.length;
}

List<String> build_plugboard(String pbstring) {
  if (pbstring.length == 0) {
    return List<String>.from([]);
  }
  if (pbstring.length % 2 != 0) {
    throw Exception("Odd number of symbols(" + (pbstring.length).toString() + ")");
  }
  String pbstring_nospace = "";
  int i = 0;
  while (i < pbstring.length) {
    String ch = _substr(pbstring, i, i + 1);
    if (ch != " ") {
    pbstring_nospace = pbstring_nospace + ch;
  }
    i = i + 1;
  }
  List<String> seen = <String>[];
  i = 0;
  while (i < pbstring_nospace.length) {
    String ch = _substr(pbstring_nospace, i, i + 1);
    if (!contains_char(abc, ch)) {
    throw Exception("'" + ch + "' not in list of symbols");
  }
    if (list_contains(seen, ch)) {
    throw Exception("Duplicate symbol(" + ch + ")");
  }
    seen = [...seen, ch];
    i = i + 1;
  }
  List<String> pb = <String>[];
  i = 0;
  while (i < pbstring_nospace.length - 1) {
    String a = _substr(pbstring_nospace, i, i + 1);
    String b = _substr(pbstring_nospace, i + 1, i + 2);
    pb = [...pb, a + b];
    i = i + 2;
  }
  return pb;
}

void validator(List<int> rotpos, List<String> rotsel, String pb) {
  if (count_unique(rotsel) < 3) {
    throw Exception("Please use 3 unique rotors (not " + (count_unique(rotsel)).toString() + ")");
  }
  if (rotpos.length != 3) {
    throw Exception("Rotor position must have 3 values");
  }
  int r1 = rotpos[0];
  int r2 = rotpos[1];
  int r3 = rotpos[2];
  if (!(0 < r1 && r1 <= abc.length)) {
    throw Exception("First rotor position is not within range of 1..26 (" + (r1).toString() + ")");
  }
  if (!(0 < r2 && r2 <= abc.length)) {
    throw Exception("Second rotor position is not within range of 1..26 (" + (r2).toString() + ")");
  }
  if (!(0 < r3 && r3 <= abc.length)) {
    throw Exception("Third rotor position is not within range of 1..26 (" + (r3).toString() + ")");
  }
}

String enigma(String text, List<int> rotor_position, List<String> rotor_selection, String plugb) {
  String up_text = to_uppercase(text);
  String up_pb = to_uppercase(plugb);
  validator(rotor_position, rotor_selection, up_pb);
  List<String> plugboard = build_plugboard(up_pb);
  int rotorpos1 = rotor_position[0] - 1;
  int rotorpos2 = rotor_position[1] - 1;
  int rotorpos3 = rotor_position[2] - 1;
  String rotor_a = rotor_selection[0];
  String rotor_b = rotor_selection[1];
  String rotor_c = rotor_selection[2];
  String result = "";
  int i = 0;
  while (i < up_text.length) {
    String symbol = _substr(up_text, i, i + 1);
    if (contains_char(abc, symbol)) {
    symbol = plugboard_map(plugboard, symbol);
    int index = index_in_string(abc, symbol) + rotorpos1;
    symbol = _substr(rotor_a, index % abc.length, index % abc.length + 1);
    index = index_in_string(abc, symbol) + rotorpos2;
    symbol = _substr(rotor_b, index % abc.length, index % abc.length + 1);
    index = index_in_string(abc, symbol) + rotorpos3;
    symbol = _substr(rotor_c, index % abc.length, index % abc.length + 1);
    symbol = reflector_map(symbol);
    index = index_in_string(rotor_c, symbol) - rotorpos3;
    if (index < 0) {
    index = index + abc.length;
  };
    symbol = _substr(abc, index, index + 1);
    index = index_in_string(rotor_b, symbol) - rotorpos2;
    if (index < 0) {
    index = index + abc.length;
  };
    symbol = _substr(abc, index, index + 1);
    index = index_in_string(rotor_a, symbol) - rotorpos1;
    if (index < 0) {
    index = index + abc.length;
  };
    symbol = _substr(abc, index, index + 1);
    symbol = plugboard_map(plugboard, symbol);
    rotorpos1 = rotorpos1 + 1;
    if (rotorpos1 >= abc.length) {
    rotorpos1 = 0;
    rotorpos2 = rotorpos2 + 1;
  };
    if (rotorpos2 >= abc.length) {
    rotorpos2 = 0;
    rotorpos3 = rotorpos3 + 1;
  };
    if (rotorpos3 >= abc.length) {
    rotorpos3 = 0;
  };
  }
    result = result + symbol;
    i = i + 1;
  }
  return result;
}

void _main() {
  String message = "This is my Python script that emulates the Enigma machine from WWII.";
  List<int> rotor_pos = [1, 1, 1];
  String pb = "pictures";
  List<String> rotor_sel = [rotor2, rotor4, rotor8];
  String en = enigma(message, rotor_pos, rotor_sel, pb);
  print("Encrypted message: " + en);
  print("Decrypted message: " + enigma(en, rotor_pos, rotor_sel, pb));
}

void _start() {
  _main();
}

void main() => _start();
