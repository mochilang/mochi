// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<String> CHARS = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "];
List<String> CODES = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"];
String to_upper_char(String c) {
  if (c == "a") {
    return "A";
  }
  if (c == "b") {
    return "B";
  }
  if (c == "c") {
    return "C";
  }
  if (c == "d") {
    return "D";
  }
  if (c == "e") {
    return "E";
  }
  if (c == "f") {
    return "F";
  }
  if (c == "g") {
    return "G";
  }
  if (c == "h") {
    return "H";
  }
  if (c == "i") {
    return "I";
  }
  if (c == "j") {
    return "J";
  }
  if (c == "k") {
    return "K";
  }
  if (c == "l") {
    return "L";
  }
  if (c == "m") {
    return "M";
  }
  if (c == "n") {
    return "N";
  }
  if (c == "o") {
    return "O";
  }
  if (c == "p") {
    return "P";
  }
  if (c == "q") {
    return "Q";
  }
  if (c == "r") {
    return "R";
  }
  if (c == "s") {
    return "S";
  }
  if (c == "t") {
    return "T";
  }
  if (c == "u") {
    return "U";
  }
  if (c == "v") {
    return "V";
  }
  if (c == "w") {
    return "W";
  }
  if (c == "x") {
    return "X";
  }
  if (c == "y") {
    return "Y";
  }
  if (c == "z") {
    return "Z";
  }
  return c;
}

String to_upper(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    res = res + to_upper_char(s.substring(i, i + 1));
    i = i + 1;
  }
  return res;
}

int index_of(List<String> xs, String target) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == target) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String encrypt(String message) {
  String msg = to_upper(message);
  String res = "";
  int i = 0;
  while (i < msg.length) {
    String c = msg.substring(i, i + 1);
    int idx = index_of(CHARS, c);
    if (idx >= 0) {
    if (res != "") {
    res = res + " ";
  };
    res = res + CODES[idx];
  }
    i = i + 1;
  }
  return res;
}

List<String> split_spaces(String s) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    if (ch == " ") {
    if (current != "") {
    res = [...res, current];
    current = "";
  };
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  if (current != "") {
    res = [...res, current];
  }
  return res;
}

String decrypt(String message) {
  List<String> parts = split_spaces(message);
  String res = "";
  for (String code in parts) {
    int idx = index_of(CODES, code);
    if (idx >= 0) {
    res = res + CHARS[idx];
  }
  }
  return res;
}

String msg = "Morse code here!";
String enc = encrypt(msg);
String dec = decrypt(enc);
void main() {
  print(msg);
  print(enc);
  print(dec);
  print(encrypt("Sos!"));
  print(decrypt("... --- ... -.-.--"));
}
