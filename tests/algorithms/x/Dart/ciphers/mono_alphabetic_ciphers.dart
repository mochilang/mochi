// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int find_char(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String encrypt_message(String key, String message) {
  String chars_a = key;
  String chars_b = LETTERS;
  String translated = "";
  int i = 0;
  while (i < message.length) {
    String symbol = message.substring(i, i + 1);
    String upper_sym = symbol.toUpperCase();
    int sym_index = find_char(chars_a, upper_sym);
    if (sym_index >= 0) {
    String sub_char = chars_b.substring(sym_index, sym_index + 1);
    if (symbol == upper_sym) {
    translated = translated + sub_char.toUpperCase();
  } else {
    translated = translated + sub_char.toLowerCase();
  };
  } else {
    translated = translated + symbol;
  }
    i = i + 1;
  }
  return translated;
}

String decrypt_message(String key, String message) {
  String chars_a = LETTERS;
  String chars_b = key;
  String translated = "";
  int i = 0;
  while (i < message.length) {
    String symbol = message.substring(i, i + 1);
    String upper_sym = symbol.toUpperCase();
    int sym_index = find_char(chars_a, upper_sym);
    if (sym_index >= 0) {
    String sub_char = chars_b.substring(sym_index, sym_index + 1);
    if (symbol == upper_sym) {
    translated = translated + sub_char.toUpperCase();
  } else {
    translated = translated + sub_char.toLowerCase();
  };
  } else {
    translated = translated + symbol;
  }
    i = i + 1;
  }
  return translated;
}

dynamic _main() {
  String message = "Hello World";
  String key = "QWERTYUIOPASDFGHJKLZXCVBNM";
  String mode = "decrypt";
  String translated = "";
  if (mode == "encrypt") {
    translated = encrypt_message(key, message);
  } else {
    if (mode == "decrypt") {
    translated = decrypt_message(key, message);
  };
  }
  print("Using the key " + key + ", the " + mode + "ed message is: " + translated);
}

void _start() {
  _main();
}

void main() => _start();
