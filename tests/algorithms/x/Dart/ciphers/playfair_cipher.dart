// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int index_of(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String prepare_input(String dirty) {
  String letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String upper_dirty = dirty.toUpperCase();
  String filtered = "";
  int i = 0;
  while (i < upper_dirty.length) {
    String c = _substr(upper_dirty, i, i + 1);
    if (letters.contains(c)) {
    filtered = filtered + c;
  }
    i = i + 1;
  }
  if (filtered.length < 2) {
    return filtered;
  }
  String clean = "";
  i = 0;
  while (i < filtered.length - 1) {
    String c1 = _substr(filtered, i, i + 1);
    String c2 = _substr(filtered, i + 1, i + 2);
    clean = clean + c1;
    if (c1 == c2) {
    clean = clean + "X";
  }
    i = i + 1;
  }
  clean = clean + _substr(filtered, filtered.length - 1, filtered.length);
  if (clean.length % 2 == 1) {
    clean = clean + "X";
  }
  return clean;
}

List<String> generate_table(String key) {
  String alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
  List<String> table = <String>[];
  String upper_key = key.toUpperCase();
  int i = 0;
  while (i < upper_key.length) {
    String c = _substr(upper_key, i, i + 1);
    if (alphabet.contains(c)) {
    if (!table.contains(c)) {
    table = [...table, c];
  };
  }
    i = i + 1;
  }
  i = 0;
  while (i < alphabet.length) {
    String c = _substr(alphabet, i, i + 1);
    if (!table.contains(c)) {
    table = [...table, c];
  }
    i = i + 1;
  }
  return table;
}

String encode(String plaintext, String key) {
  List<String> table = generate_table(key);
  String text = prepare_input(plaintext);
  String cipher = "";
  int i = 0;
  while (i < text.length) {
    String c1 = _substr(text, i, i + 1);
    String c2 = _substr(text, i + 1, i + 2);
    int idx1 = index_of(table, c1);
    int idx2 = index_of(table, c2);
    int row1 = idx1 ~/ 5;
    int col1 = idx1 % 5;
    int row2 = idx2 ~/ 5;
    int col2 = idx2 % 5;
    if (row1 == row2) {
    cipher = cipher + table[row1 * 5 + (col1 + 1) % 5];
    cipher = cipher + table[row2 * 5 + (col2 + 1) % 5];
  } else {
    if (col1 == col2) {
    cipher = cipher + table[(row1 + 1) % 5 * 5 + col1];
    cipher = cipher + table[(row2 + 1) % 5 * 5 + col2];
  } else {
    cipher = cipher + table[row1 * 5 + col2];
    cipher = cipher + table[row2 * 5 + col1];
  };
  }
    i = i + 2;
  }
  return cipher;
}

String decode(String cipher, String key) {
  List<String> table = generate_table(key);
  String plain = "";
  int i = 0;
  while (i < cipher.length) {
    String c1 = _substr(cipher, i, i + 1);
    String c2 = _substr(cipher, i + 1, i + 2);
    int idx1 = index_of(table, c1);
    int idx2 = index_of(table, c2);
    int row1 = idx1 ~/ 5;
    int col1 = idx1 % 5;
    int row2 = idx2 ~/ 5;
    int col2 = idx2 % 5;
    if (row1 == row2) {
    plain = plain + table[row1 * 5 + (col1 + 4) % 5];
    plain = plain + table[row2 * 5 + (col2 + 4) % 5];
  } else {
    if (col1 == col2) {
    plain = plain + table[(row1 + 4) % 5 * 5 + col1];
    plain = plain + table[(row2 + 4) % 5 * 5 + col2];
  } else {
    plain = plain + table[row1 * 5 + col2];
    plain = plain + table[row2 * 5 + col1];
  };
  }
    i = i + 2;
  }
  return plain;
}

void _main() {
  print(["Encoded:", encode("BYE AND THANKS", "GREETING")].join(" "));
  print(["Decoded:", decode("CXRBANRLBALQ", "GREETING")].join(" "));
}

void _start() {
  _main();
}

void main() => _start();
