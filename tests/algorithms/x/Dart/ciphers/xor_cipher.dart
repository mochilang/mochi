// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int xor(int a, int b) {
  int res = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 || y > 0) {
    int abit = x % 2;
    int bbit = y % 2;
    if (abit != bbit) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return res;
}

String ascii = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int ord(String ch) {
  int i = 0;
  while (i < ascii.length) {
    if (_substr(ascii, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

String chr(int n) {
  if (n >= 32 && n < 127) {
    return _substr(ascii, n - 32, n - 31);
  }
  return "";
}

int normalize_key(int key) {
  int k = key;
  if (k == 0) {
    k = 1;
  }
  k = k % 256;
  if (k < 0) {
    k = k + 256;
  }
  return k;
}

List<String> encrypt(String content, int key) {
  int k = normalize_key(key);
  List<String> result = <String>[];
  int i = 0;
  while (i < content.length) {
    int c = ord(_substr(content, i, i + 1));
    int e = xor(c, k);
    result = [...result, chr(e)];
    i = i + 1;
  }
  return result;
}

String encrypt_string(String content, int key) {
  List<String> chars = encrypt(content, key);
  String out = "";
  for (String ch in chars) {
    out = out + ch;
  }
  return out;
}

String sample = "hallo welt";
String enc = encrypt_string(sample, 1);
String dec = encrypt_string(enc, 1);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(encrypt(sample, 1)));
  print(enc);
  print(dec);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
