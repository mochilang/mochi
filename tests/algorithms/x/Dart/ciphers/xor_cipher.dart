// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int xor(int a, int b) {
  int res = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 || y > 0) {
    int abit = x % 2;
    int bbit = y % 2;
    if (abit != bbit) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return res;
}

String ascii = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int ord(String ch) {
  int i = 0;
  while (i < ascii.length) {
    if (_substr(ascii, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

String chr(int n) {
  if (n >= 32 && n < 127) {
    return _substr(ascii, n - 32, n - 31);
  }
  return "";
}

int normalize_key(int key) {
  int k = key;
  if (k == 0) {
    k = 1;
  }
  k = k % 256;
  if (k < 0) {
    k = k + 256;
  }
  return k;
}

List<String> encrypt(String content, int key) {
  int k = normalize_key(key);
  List<String> result = <String>[];
  int i = 0;
  while (i < content.length) {
    int c = ord(_substr(content, i, i + 1));
    int e = xor(c, k);
    result = [...result, chr(e)];
    i = i + 1;
  }
  return result;
}

String encrypt_string(String content, int key) {
  List<String> chars = encrypt(content, key);
  String out = "";
  for (String ch in chars) {
    out = out + ch;
  }
  return out;
}

String sample = "hallo welt";
String enc = encrypt_string(sample, 1);
String dec = encrypt_string(enc, 1);
void main() {
  print((encrypt(sample, 1)).toString());
  print(enc);
  print(dec);
}
