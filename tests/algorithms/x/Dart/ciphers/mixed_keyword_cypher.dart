// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String LOWER = "abcdefghijklmnopqrstuvwxyz";
String to_upper(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    int j = 0;
    bool found = false;
    while (j < 26) {
    if (ch == LOWER.substring(j, j + 1)) {
    res = res + UPPER.substring(j, j + 1);
    found = true;
    break;
  }
    j = j + 1;
  }
    if (found == false) {
    res = res + ch;
  }
    i = i + 1;
  }
  return res;
}

bool contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool contains_char(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String? get_value(List<String> keys, List<String> values, String key) {
  int i = 0;
  while (i < keys.length) {
    if (keys[i] == key) {
    return values[i];
  }
    i = i + 1;
  }
  return null;
}

void print_mapping(List<String> keys, List<String> values) {
  String s = "{";
  int i = 0;
  while (i < keys.length) {
    s = s + "'" + keys[i] + "': '" + values[i] + "'";
    if (i + 1 < keys.length) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "}";
  print(s);
}

String mixed_keyword(String keyword, String plaintext, bool verbose) {
  String alphabet = UPPER;
  String keyword_u = to_upper(keyword);
  String plaintext_u = to_upper(plaintext);
  List<String> unique = <String>[];
  int i = 0;
  while (i < keyword_u.length) {
    String ch = keyword_u.substring(i, i + 1);
    if (contains_char(alphabet, ch) && unique.contains(ch) == false) {
    unique = [...unique, ch];
  }
    i = i + 1;
  }
  int num_unique = unique.length;
  List<String> shifted = <String>[];
  i = 0;
  while (i < unique.length) {
    shifted = [...shifted, unique[i]];
    i = i + 1;
  }
  i = 0;
  while (i < alphabet.length) {
    String ch = alphabet.substring(i, i + 1);
    if (unique.contains(ch) == false) {
    shifted = [...shifted, ch];
  }
    i = i + 1;
  }
  List<List<String>> modified = <List<String>>[];
  int k = 0;
  while (k < shifted.length) {
    List<String> row = <String>[];
    int r = 0;
    while (r < num_unique && k + r < shifted.length) {
    row = [...row, shifted[k + r]];
    r = r + 1;
  }
    modified = ([...modified, row] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    k = k + num_unique;
  }
  List<String> keys = <String>[];
  List<String> values = <String>[];
  int column = 0;
  int letter_index = 0;
  while (column < num_unique) {
    int row_idx = 0;
    while (row_idx < modified.length) {
    List<String> row = modified[row_idx];
    if (row.length <= column) {
    break;
  }
    keys = [...keys, alphabet.substring(letter_index, letter_index + 1)];
    values = [...values, row[column]];
    letter_index = letter_index + 1;
    row_idx = row_idx + 1;
  }
    column = column + 1;
  }
  if (verbose) {
    print_mapping(keys, values);
  }
  String result = "";
  i = 0;
  while (i < plaintext_u.length) {
    String ch = plaintext_u.substring(i, i + 1);
    String? mapped = get_value(keys, values, ch);
    if (mapped == null) {
    result = result + ch;
  } else {
    result = result + mapped;
  }
    i = i + 1;
  }
  return result;
}

void main() {
  print(mixed_keyword("college", "UNIVERSITY", true));
}
