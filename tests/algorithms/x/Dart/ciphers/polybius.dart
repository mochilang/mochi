// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<String>> square = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]];
List<int> letter_to_numbers(String letter) {
  int i = 0;
  while (i < square.length) {
    int j = 0;
    while (j < square[i].length) {
    if (square[i][j] == letter) {
    return [i + 1, j + 1];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return [0, 0];
}

String numbers_to_letter(int index1, int index2) {
  return square[index1 - 1][index2 - 1];
}

int char_to_int(String ch) {
  if (ch == "1") {
    return 1;
  }
  if (ch == "2") {
    return 2;
  }
  if (ch == "3") {
    return 3;
  }
  if (ch == "4") {
    return 4;
  }
  if (ch == "5") {
    return 5;
  }
  return 0;
}

String encode(String message) {
  message = message.toLowerCase();
  String encoded = "";
  int i = 0;
  while (i < message.length) {
    String ch = message.substring(i, i + 1);
    if (ch == "j") {
    ch = "i";
  }
    if (ch != " ") {
    List<int> nums = letter_to_numbers(ch);
    encoded = encoded + (nums[0]).toString() + (nums[1]).toString();
  } else {
    encoded = encoded + " ";
  }
    i = i + 1;
  }
  return encoded;
}

String decode(String message) {
  String decoded = "";
  int i = 0;
  while (i < message.length) {
    if (message.substring(i, i + 1) == " ") {
    decoded = decoded + " ";
    i = i + 1;
  } else {
    int index1 = char_to_int(message.substring(i, i + 1));
    int index2 = char_to_int(message.substring(i + 1, i + 1 + 1));
    String letter = numbers_to_letter(index1, index2);
    decoded = decoded + letter;
    i = i + 2;
  }
  }
  return decoded;
}

void main() {
  print(encode("test message"));
  print(encode("Test Message"));
  print(decode("44154344 32154343112215"));
  print(decode("4415434432154343112215"));
}
