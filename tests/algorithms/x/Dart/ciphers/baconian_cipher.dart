// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

Map<String, String> encode_map = {"a": "AAAAA", "b": "AAAAB", "c": "AAABA", "d": "AAABB", "e": "AABAA", "f": "AABAB", "g": "AABBA", "h": "AABBB", "i": "ABAAA", "j": "BBBAA", "k": "ABAAB", "l": "ABABA", "m": "ABABB", "n": "ABBAA", "o": "ABBAB", "p": "ABBBA", "q": "ABBBB", "r": "BAAAA", "s": "BAAAB", "t": "BAABA", "u": "BAABB", "v": "BBBAB", "w": "BABAA", "x": "BABAB", "y": "BABBA", "z": "BABBB", " ": " "};
Map<String, String> make_decode_map() {
  Map<String, String> m = <String, String>{};
  for (String k in encode_map.keys) {
    m[encode_map[k]!] = k;
  }
  return m;
}

Map<String, String> decode_map = make_decode_map();
List<String> split_spaces(String s) {
  List<String> parts = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == " ") {
    parts = [...parts, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  parts = [...parts, current];
  return parts;
}

String encode(String word) {
  String w = word.toLowerCase();
  String encoded = "";
  int i = 0;
  while (i < w.length) {
    String ch = _substr(w, i, i + 1);
    if (encode_map.containsKey(ch)) {
    encoded = encoded + (encode_map[ch] ?? "");
  } else {
    throw Exception("encode() accepts only letters of the alphabet and spaces");
  }
    i = i + 1;
  }
  return encoded;
}

String decode(String coded) {
  int i = 0;
  while (i < coded.length) {
    String ch = _substr(coded, i, i + 1);
    if (ch != "A" && ch != "B" && ch != " ") {
    throw Exception("decode() accepts only 'A', 'B' and spaces");
  }
    i = i + 1;
  }
  List<String> words = split_spaces(coded);
  String decoded = "";
  int w = 0;
  while (w < words.length) {
    String word = words[w];
    int j = 0;
    while (j < word.length) {
    String segment = _substr(word, j, j + 5);
    decoded = decoded + (decode_map[segment] ?? "");
    j = j + 5;
  }
    if (w < words.length - 1) {
    decoded = decoded + " ";
  }
    w = w + 1;
  }
  return decoded;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(encode("hello"));
  print(encode("hello world"));
  print(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"));
  print(decode("AABBBAABAAABABAABABAABBAB"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
