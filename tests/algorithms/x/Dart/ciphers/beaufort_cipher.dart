// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int index_of(String ch) {
  for (int i = 0; i < ALPHABET.length; i++) {
    if (ALPHABET.substring(i, i + 1) == ch) {
    return i;
  }
  }
  return -1;
}

String generate_key(String message, String key) {
  String key_new = key;
  int i = 0;
  while (key_new.length < message.length) {
    key_new = key_new + key.substring(i, i + 1);
    i = i + 1;
    if (i == key.length) {
    i = 0;
  }
  }
  return key_new;
}

String cipher_text(String message, String key_new) {
  String res = "";
  int i = 0;
  for (int idx = 0; idx < message.length; idx++) {
    String ch = message.substring(idx, idx + 1);
    if (ch == " ") {
    res = res + " ";
  } else {
    int x = (index_of(ch) - index_of(key_new.substring(i, i + 1)) + 26) % 26;
    i = i + 1;
    res = res + ALPHABET.substring(x, x + 1);
  }
  }
  return res;
}

String original_text(String cipher, String key_new) {
  String res = "";
  int i = 0;
  for (int idx = 0; idx < cipher.length; idx++) {
    String ch = cipher.substring(idx, idx + 1);
    if (ch == " ") {
    res = res + " ";
  } else {
    int x = (index_of(ch) + index_of(key_new.substring(i, i + 1)) + 26) % 26;
    i = i + 1;
    res = res + ALPHABET.substring(x, x + 1);
  }
  }
  return res;
}

String message = "THE GERMAN ATTACK";
String key = "SECRET";
String key_new = generate_key(message, key);
String encrypted = cipher_text(message, key_new);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Encrypted Text = " + encrypted);
  print("Original Text = " + original_text(encrypted, key_new));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
