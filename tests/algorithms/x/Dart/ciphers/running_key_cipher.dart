// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int indexOf(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = upper.indexOf(ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = lower.indexOf(ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return 0;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  return "?";
}

String clean_text(String s) {
  String out = "";
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    if (ch.compareTo("A") >= 0 && ch.compareTo("Z") <= 0) {
    out = out + ch;
  } else {
    if (ch.compareTo("a") >= 0 && ch.compareTo("z") <= 0) {
    out = out + chr(ord(ch) - 32);
  };
  }
    i = i + 1;
  }
  return out;
}

String running_key_encrypt(String key, String plaintext) {
  String pt = clean_text(plaintext);
  String k = clean_text(key);
  int key_len = k.length;
  String res = "";
  int ord_a = ord("A");
  int i = 0;
  while (i < pt.length) {
    int p = ord(pt.substring(i, i + 1)) - ord_a;
    int kv = ord(k.substring(i % key_len, i % key_len + 1)) - ord_a;
    int c = (p + kv) % 26;
    res = res + chr(c + ord_a);
    i = i + 1;
  }
  return res;
}

String running_key_decrypt(String key, String ciphertext) {
  String ct = clean_text(ciphertext);
  String k = clean_text(key);
  int key_len = k.length;
  String res = "";
  int ord_a = ord("A");
  int i = 0;
  while (i < ct.length) {
    int c = ord(ct.substring(i, i + 1)) - ord_a;
    int kv = ord(k.substring(i % key_len, i % key_len + 1)) - ord_a;
    int p = (c - kv + 26) % 26;
    res = res + chr(p + ord_a);
    i = i + 1;
  }
  return res;
}

String key = "How does the duck know that? said Victor";
String plaintext = "DEFEND THIS";
String ciphertext = running_key_encrypt(key, plaintext);
void main() {
  print(ciphertext);
  print(running_key_decrypt(key, ciphertext));
}
