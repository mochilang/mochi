// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String SYMBOLS = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int temp = x % y;
    x = y;
    y = temp;
  }
  return x;
}

int mod_inverse(int a, int m) {
  if (gcd(a, m) != 1) {
    throw Exception("mod inverse of " + _str(a) + " and " + _str(m) + " does not exist");
  }
  int u1 = 1;
  int u2 = 0;
  int u3 = a;
  int v1 = 0;
  int v2 = 1;
  int v3 = m;
  while (v3 != 0) {
    int q = u3 ~/ v3;
    int t1 = u1 - q * v1;
    int t2 = u2 - q * v2;
    int t3 = u3 - q * v3;
    u1 = v1;
    u2 = v2;
    u3 = v3;
    v1 = t1;
    v2 = t2;
    v3 = t3;
  }
  int res = u1 % m;
  if (res < 0) {
    return res + m;
  }
  return res;
}

int find_symbol(String ch) {
  int i = 0;
  while (i < SYMBOLS.length) {
    if (SYMBOLS.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

dynamic check_keys(int key_a, int key_b, String mode) {
  int m = SYMBOLS.length;
  if (mode == "encrypt") {
    if (key_a == 1) {
    throw Exception("The affine cipher becomes weak when key A is set to 1. Choose different key");
  };
    if (key_b == 0) {
    throw Exception("The affine cipher becomes weak when key B is set to 0. Choose different key");
  };
  }
  if (key_a < 0 || key_b < 0 || key_b > m - 1) {
    throw Exception("Key A must be greater than 0 and key B must be between 0 and " + _str(m - 1));
  }
  if (gcd(key_a, m) != 1) {
    throw Exception("Key A " + _str(key_a) + " and the symbol set size " + _str(m) + " are not relatively prime. Choose a different key.");
  }
}

String encrypt_message(int key, String message) {
  int m = SYMBOLS.length;
  int key_a = key ~/ m;
  int key_b = key % m;
  check_keys(key_a, key_b, "encrypt");
  String cipher_text = "";
  int i = 0;
  while (i < message.length) {
    String ch = message.substring(i, i + 1);
    int index = find_symbol(ch);
    if (index >= 0) {
    cipher_text = cipher_text + SYMBOLS.substring((index * key_a + key_b) % m, (index * key_a + key_b) % m + 1);
  } else {
    cipher_text = cipher_text + ch;
  }
    i = i + 1;
  }
  return cipher_text;
}

String decrypt_message(int key, String message) {
  int m = SYMBOLS.length;
  int key_a = key ~/ m;
  int key_b = key % m;
  check_keys(key_a, key_b, "decrypt");
  int inv = mod_inverse(key_a, m);
  String plain_text = "";
  int i = 0;
  while (i < message.length) {
    String ch = message.substring(i, i + 1);
    int index = find_symbol(ch);
    if (index >= 0) {
    int n = (index - key_b) * inv;
    int pos = n % m;
    int _final = (pos < 0 ? pos + m : pos);
    plain_text = plain_text + SYMBOLS.substring(_final, _final + 1);
  } else {
    plain_text = plain_text + ch;
  }
    i = i + 1;
  }
  return plain_text;
}

dynamic _main() {
  int key = 4545;
  String msg = "The affine cipher is a type of monoalphabetic substitution cipher.";
  String enc = encrypt_message(key, msg);
  print(enc);
  print(decrypt_message(key, enc));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
