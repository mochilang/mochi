// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int mod_pow(int base, int exp, int mod) {
  int result = 1;
  int b = base % mod;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % mod;
  }
    e = e ~/ 2;
    b = b * b % mod;
  }
  return result;
}

bool contains(List<int> xs, int val) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == val) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int find_primitive(int modulus) {
  int r = 1;
  while (r < modulus) {
    List<int> li = <int>[];
    int x = 0;
    bool valid = true;
    while (x < modulus - 1 && valid) {
    int value = mod_pow(r, x, modulus);
    if (li.contains(value)) {
    valid = false;
  } else {
    li = [...li, value];
    x = x + 1;
  }
  }
    if (valid) {
    return r;
  }
    r = r + 1;
  }
  return -1;
}

int prime = 23;
int primitive_root = find_primitive(prime);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(find_primitive(7));
  print(find_primitive(11));
  print(find_primitive(8));
  if (primitive_root == 0 - 1) {
    print("Cannot find the primitive for the value: -1");
  } else {
    int a_private = 6;
    int b_private = 15;
    int a_public = mod_pow(primitive_root, a_private, prime);
    int b_public = mod_pow(primitive_root, b_private, prime);
    int a_secret = mod_pow(b_public, a_private, prime);
    int b_secret = mod_pow(a_public, b_private, prime);
    print("The key value generated by A is: " + _str(a_secret));
    print("The key value generated by B is: " + _str(b_secret));
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
