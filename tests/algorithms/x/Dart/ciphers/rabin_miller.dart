// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int int_pow(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

int pow_mod(int base, int exp, int mod) {
  int result = 1;
  int b = base % mod;
  int e = exp;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % mod;
  }
    e = e ~/ 2;
    b = b * b % mod;
  }
  return result;
}

int rand_range(int low, int high) {
  return _now() % (high - low) + low;
}

bool rabin_miller(int _num) {
  int s = _num - 1;
  int t = 0;
  while (s % 2 == 0) {
    s = s ~/ 2;
    t = t + 1;
  }
  int k = 0;
  while (k < 5) {
    int a = rand_range(2, _num - 1);
    int v = pow_mod(a, s, _num);
    if (v != 1) {
    int i = 0;
    while (v != _num - 1) {
    if (i == t - 1) {
    return false;
  }
    i = i + 1;
    v = v * v % _num;
  };
  }
    k = k + 1;
  }
  return true;
}

bool is_prime_low_num(int _num) {
  if (_num < 2) {
    return false;
  }
  List<int> low_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
  if (low_primes.contains(_num)) {
    return true;
  }
  int i = 0;
  while (i < low_primes.length) {
    int p = low_primes[i];
    if (_num % p == 0) {
    return false;
  }
    i = i + 1;
  }
  return rabin_miller(_num);
}

int generate_large_prime(int keysize) {
  int start = int_pow(2, keysize - 1);
  int end = int_pow(2, keysize);
  while (true) {
    int _num = rand_range(start, end);
    if (is_prime_low_num(_num)) {
    return _num;
  }
  }
}

int p = generate_large_prime(16);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Prime number: " + _str(p));
  print("is_prime_low_num: " + _str(is_prime_low_num(p)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
