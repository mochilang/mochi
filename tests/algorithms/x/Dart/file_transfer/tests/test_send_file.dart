// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

class ConnMock {
  int recv_called;
  int send_called;
  int close_called;
  ConnMock({required this.recv_called, required this.send_called, required this.close_called});
}

class SocketMock {
  int bind_called;
  int listen_called;
  int accept_called;
  int shutdown_called;
  int close_called;
  ConnMock conn;
  SocketMock({required this.bind_called, required this.listen_called, required this.accept_called, required this.shutdown_called, required this.close_called, required this.conn});
}

class FileMock {
  int read_called;
  List<int> data;
  FileMock({required this.read_called, required this.data});
}

ConnMock make_conn_mock() {
  return ConnMock(recv_called: 0, send_called: 0, close_called: 0);
}

int conn_recv(ConnMock conn, int size) {
  conn.recv_called = conn.recv_called + 1;
  return 0;
}

dynamic conn_send(ConnMock conn, int data) {
  conn.send_called = conn.send_called + 1;
}

dynamic conn_close(ConnMock conn) {
  conn.close_called = conn.close_called + 1;
}

SocketMock make_socket_mock(ConnMock conn) {
  return SocketMock(bind_called: 0, listen_called: 0, accept_called: 0, shutdown_called: 0, close_called: 0, conn: conn);
}

dynamic socket_bind(SocketMock sock) {
  sock.bind_called = sock.bind_called + 1;
}

dynamic socket_listen(SocketMock sock) {
  sock.listen_called = sock.listen_called + 1;
}

ConnMock socket_accept(SocketMock sock) {
  sock.accept_called = sock.accept_called + 1;
  return sock.conn;
}

dynamic socket_shutdown(SocketMock sock) {
  sock.shutdown_called = sock.shutdown_called + 1;
}

dynamic socket_close(SocketMock sock) {
  sock.close_called = sock.close_called + 1;
}

FileMock make_file_mock(List<int> values) {
  return FileMock(read_called: 0, data: values);
}

int file_read(FileMock f, int size) {
  if (f.read_called < f.data.length) {
    int value = f.data[f.read_called];
    f.read_called = f.read_called + 1;
    return value;
  }
  f.read_called = f.read_called + 1;
  return 0;
}

FileMock file_open() {
  return make_file_mock([1, 0]);
}

dynamic send_file(SocketMock sock, FileMock f) {
  socket_bind(sock);
  socket_listen(sock);
  ConnMock conn = socket_accept(sock);
  int __ = conn_recv(conn, 1024);
  int data = file_read(f, 1024);
  while (data != 0) {
    conn_send(conn, data);
    data = file_read(f, 1024);
  }
  conn_close(conn);
  socket_shutdown(sock);
  socket_close(sock);
}

String test_send_file_running_as_expected() {
  ConnMock conn = make_conn_mock();
  SocketMock sock = make_socket_mock(conn);
  FileMock f = file_open();
  send_file(sock, f);
  if (sock.bind_called == 1 && sock.listen_called == 1 && sock.accept_called == 1 && conn.recv_called == 1 && f.read_called >= 1 && conn.send_called == 1 && conn.close_called == 1 && sock.shutdown_called == 1 && sock.close_called == 1) {
    return "pass";
  }
  return "fail";
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(test_send_file_running_as_expected());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
