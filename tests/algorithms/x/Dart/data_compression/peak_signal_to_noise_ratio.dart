// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double ln(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int n = 1;
  while (n <= 19) {
    sum = sum + term / (n as double);
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * sum;
}

double log10(double x) {
  return ln(x) / ln(10.0);
}

double peak_signal_to_noise_ratio(List<List<int>> original, List<List<int>> contrast) {
  double mse = 0.0;
  int i = 0;
  while (i < original.length) {
    int j = 0;
    while (j < original[i].length) {
    double diff = original[i][j] - contrast[i][j] as double;
    mse = mse + diff * diff;
    j = j + 1;
  }
    i = i + 1;
  }
  double size = original.length * original[0].length as double;
  mse = mse / size;
  if (mse == 0.0) {
    return 100.0;
  }
  double PIXEL_MAX = 255.0;
  return 20.0 * log10(PIXEL_MAX / sqrtApprox(mse));
}

void main() {
}
