// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int get_freq(dynamic n) {
  return (n["__name"] == "Leaf" ? n["freq"] : (n["__name"] == "Node" ? n["freq"] : ""));
}

List<dynamic> sort_nodes(List<dynamic> nodes) {
  List<dynamic> arr = nodes;
  int i = 1;
  while (i < arr.length) {
    dynamic key = arr[i];
    int j = i - 1;
    while (j >= 0 && get_freq(arr[j]) > get_freq(key)) {
    while (arr.length <= j + 1) { arr.add(null); } arr[j + 1] = arr[j];
    j = j - 1;
  }
    while (arr.length <= j + 1) { arr.add(null); } arr[j + 1] = key;
    i = i + 1;
  }
  return arr;
}

List<dynamic> rest(List<dynamic> nodes) {
  List<dynamic> res = <dynamic>[];
  int i = 1;
  while (i < nodes.length) {
    res = [...res, nodes[i]];
    i = i + 1;
  }
  return res;
}

List<dynamic> count_freq(String text) {
  List<String> chars = <String>[];
  List<int> freqs = <int>[];
  int i = 0;
  while (i < text.length) {
    String c = _substr(text, i, i + 1);
    int j = 0;
    bool found = false;
    while (j < chars.length) {
    if (chars[j] == c) {
    while (freqs.length <= j) { freqs.add(0); } freqs[j] = freqs[j] + 1;
    found = true;
    break;
  }
    j = j + 1;
  }
    if (!found) {
    chars = [...chars, c];
    freqs = [...freqs, 1];
  }
    i = i + 1;
  }
  List<dynamic> leaves = <dynamic>[];
  int k = 0;
  while (k < chars.length) {
    leaves = [...leaves, {"__name": "Leaf", "symbol": chars[k], "freq": freqs[k]}];
    k = k + 1;
  }
  return sort_nodes(List<dynamic>.from(leaves));
}

dynamic build_tree(List<dynamic> nodes) {
  List<dynamic> arr = nodes;
  while (arr.length > 1) {
    dynamic left = arr[0];
    arr = rest(List<dynamic>.from(arr));
    dynamic right = arr[0];
    arr = rest(List<dynamic>.from(arr));
    Map<String, dynamic> node = {"__name": "Node", "freq": get_freq(left) + get_freq(right), "left": left, "right": right};
    arr = [...arr, node];
    arr = sort_nodes(List<dynamic>.from(arr));
  }
  return arr[0];
}

List<List<String>> concat_pairs(List<List<String>> a, List<List<String>> b) {
  List<List<String>> res = a;
  int i = 0;
  while (i < b.length) {
    res = ([...res, b[i]] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<String>> collect_codes(dynamic tree, String prefix) {
  return ((tree["__name"] == "Leaf" ? [[tree["symbol"], prefix]] : (tree["__name"] == "Node" ? concat_pairs(collect_codes(tree["left"], prefix + "0"), collect_codes(tree["right"], prefix + "1")) : "")) as List).map((e) => (List<String>.from(e) as List<String>)).toList();
}

String find_code(List<List<String>> pairs, String ch) {
  int i = 0;
  while (i < pairs.length) {
    if (pairs[i][0] == ch) {
    return pairs[i][1];
  }
    i = i + 1;
  }
  return "";
}

String huffman_encode(String text) {
  if (text == "") {
    return "";
  }
  List<dynamic> leaves = count_freq(text);
  dynamic tree = build_tree(List<dynamic>.from(leaves));
  List<List<String>> codes = collect_codes(tree, "");
  String encoded = "";
  int i = 0;
  while (i < text.length) {
    String c = _substr(text, i, i + 1);
    encoded = encoded + find_code(codes, c) + " ";
    i = i + 1;
  }
  return encoded;
}

void main() {
  print(huffman_encode("beep boop beer!"));
}
