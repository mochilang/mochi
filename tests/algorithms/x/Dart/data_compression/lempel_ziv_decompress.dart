// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

bool list_contains(List<String> xs, String v) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == v) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool is_power_of_two(int n) {
  if (n < 1) {
    return false;
  }
  int x = n;
  while (x > 1) {
    if (x % 2 != 0) {
    return false;
  }
    x = x ~/ 2;
  }
  return true;
}

String bin_string(int n) {
  if (n == 0) {
    return "0";
  }
  String res = "";
  int x = n;
  while (x > 0) {
    int bit = x % 2;
    res = _str(bit) + res;
    x = x ~/ 2;
  }
  return res;
}

String decompress_data(String data_bits) {
  Map<String, String> lexicon = {"0": "0", "1": "1"};
  List<String> keys = ["0", "1"];
  String result = "";
  String curr_string = "";
  int index = 2;
  int i = 0;
  while (i < data_bits.length) {
    curr_string = curr_string + _substr(data_bits, i, i + 1);
    if (!list_contains(keys, curr_string)) {
    i = i + 1;
    continue;
  }
    String last_match_id = lexicon[curr_string]!;
    result = result + last_match_id;
    lexicon[curr_string] = last_match_id + "0";
    if (is_power_of_two(index)) {
    Map<String, String> new_lex = <String, String>{};
    List<String> new_keys = <String>[];
    int j = 0;
    while (j < keys.length) {
    String curr_key = keys[j];
    new_lex["0" + curr_key] = lexicon[curr_key]!;
    new_keys = [...new_keys, "0" + curr_key];
    j = j + 1;
  };
    lexicon = new_lex;
    keys = new_keys;
  }
    String new_key = bin_string(index);
    lexicon[new_key] = last_match_id + "1";
    keys = [...keys, new_key];
    index = index + 1;
    curr_string = "";
    i = i + 1;
  }
  return result;
}

String sample = "1011001";
String decompressed = decompress_data(sample);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(decompressed);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
