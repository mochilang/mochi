// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

String to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  int _num = n;
  String res = "";
  while (_num > 0) {
    int bit = _num % 2;
    res = _str(bit) + res;
    _num = _num ~/ 2;
  }
  return res;
}

bool contains_key_int(Map<String, int> m, String key) {
  for (dynamic k in m.keys.toList()) {
    if (k == key) {
    return true;
  }
  }
  return false;
}

String lzw_compress(String bits) {
  Map<String, int> dict = {"0": 0, "1": 1};
  String current = "";
  String result = "";
  int index = 2;
  int i = 0;
  while (i < bits.length) {
    String ch = _substr(bits, i, i + 1);
    String candidate = current + ch;
    if (contains_key_int(dict, candidate)) {
    current = candidate;
  } else {
    result = result + to_binary((dict[current] ?? 0));
    dict[candidate] = index;
    index = index + 1;
    current = ch;
  }
    i = i + 1;
  }
  if (current != "") {
    result = result + to_binary((dict[current] ?? 0));
  }
  return result;
}

String data = "01001100100111";
void main() {
  print(lzw_compress(data));
}
