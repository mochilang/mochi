// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class BWTResult {
  String bwt_string;
  int idx_original_string;
  BWTResult({required this.bwt_string, required this.idx_original_string});
}

List<String> all_rotations(String s) {
  int n = s.length;
  List<String> rotations = <String>[];
  int i = 0;
  while (i < n) {
    String rotation = _substr(s, i, n) + _substr(s, 0, i);
    rotations = [...rotations, rotation];
    i = i + 1;
  }
  return rotations;
}

List<String> sort_strings(List<String> arr) {
  int n = arr.length;
  int i = 1;
  while (i < n) {
    String key = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j].compareTo(key) > 0) {
    while (arr.length <= j + 1) { arr.add(""); } arr[j + 1] = arr[j];
    j = j - 1;
  }
    while (arr.length <= j + 1) { arr.add(""); } arr[j + 1] = key;
    i = i + 1;
  }
  return arr;
}

String join_strings(List<String> arr) {
  String res = "";
  int i = 0;
  while (i < arr.length) {
    res = res + arr[i];
    i = i + 1;
  }
  return res;
}

BWTResult bwt_transform(String s) {
  if (s == "") {
    throw Exception("input string must not be empty");
  }
  List<String> rotations = all_rotations(s);
  rotations = sort_strings(rotations);
  List<String> last_col = <String>[];
  int i = 0;
  while (i < rotations.length) {
    String word = rotations[i];
    last_col = [...last_col, _substr(word, word.length - 1, word.length)];
    i = i + 1;
  }
  String bwt_string = join_strings(last_col);
  int idx = index_of(rotations, s);
  return BWTResult(bwt_string: bwt_string, idx_original_string: idx);
}

int index_of(List<String> arr, String target) {
  int i = 0;
  while (i < arr.length) {
    if (arr[i] == target) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

String reverse_bwt(String bwt_string, int idx_original_string) {
  if (bwt_string == "") {
    throw Exception("bwt string must not be empty");
  }
  int n = bwt_string.length;
  if (idx_original_string < 0 || idx_original_string >= n) {
    throw Exception("index out of range");
  }
  List<String> ordered_rotations = <String>[];
  int i = 0;
  while (i < n) {
    ordered_rotations = [...ordered_rotations, ""];
    i = i + 1;
  }
  int iter = 0;
  while (iter < n) {
    int j = 0;
    while (j < n) {
    String ch = _substr(bwt_string, j, j + 1);
    while (ordered_rotations.length <= j) { ordered_rotations.add(""); } ordered_rotations[j] = ch + ordered_rotations[j];
    j = j + 1;
  }
    ordered_rotations = sort_strings(ordered_rotations);
    iter = iter + 1;
  }
  return ordered_rotations[idx_original_string];
}

String s = "^BANANA";
BWTResult result = bwt_transform(s);
void main() {
  print(result.bwt_string);
  print(result.idx_original_string);
  print(reverse_bwt(result.bwt_string, result.idx_original_string));
}
