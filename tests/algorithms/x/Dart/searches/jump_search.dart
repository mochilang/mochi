// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int int_sqrt(int n) {
  int x = 0;
  while ((x + 1) * (x + 1) <= n) {
    x = x + 1;
  }
  return x;
}

int jump_search(List<int> arr, int item) {
  int arr_size = arr.length;
  int block_size = int_sqrt(arr_size);
  int prev = 0;
  int step = block_size;
  while (step < arr_size && arr[step - 1] < item) {
    prev = step;
    step = step + block_size;
    if (prev >= arr_size) {
    return -1;
  }
  }
  while (prev < arr_size && arr[prev] < item) {
    prev = prev + 1;
    if (prev == step) {
    return -1;
  }
  }
  if (prev < arr_size && arr[prev] == item) {
    return prev;
  }
  return -1;
}

void _main() {
  print(_str(jump_search([0, 1, 2, 3, 4, 5], 3)));
  print(_str(jump_search([-5, -2, -1], -1)));
  print(_str(jump_search([0, 5, 10, 20], 8)));
  print(_str(jump_search([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 55)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
