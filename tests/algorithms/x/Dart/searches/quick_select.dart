// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<List<int>> partition(List<int> data, int pivot) {
  List<int> less = <int>[];
  List<int> equal = <int>[];
  List<int> greater = <int>[];
  for (int i = 0; i < data.length; i++) {
    int v = data[i];
    if (v < pivot) {
    less = [...less, v];
  } else {
    if (v > pivot) {
    greater = [...greater, v];
  } else {
    equal = [...equal, v];
  };
  }
  }
  return [less, equal, greater];
}

int quick_select(List<int> items, int index) {
  if (index < 0 || index >= items.length) {
    return -1;
  }
  int pivot = items[items.length ~/ 2];
  List<List<int>> parts = partition(items, pivot);
  List<int> smaller = parts[0];
  List<int> equal = parts[1];
  List<int> larger = parts[2];
  int count = equal.length;
  int m = smaller.length;
  if (m <= index && index < m + count) {
    return pivot;
  } else {
    if (index < m) {
    return quick_select(smaller, index);
  } else {
    return quick_select(larger, index - (m + count));
  };
  }
}

double median(List<int> items) {
  int n = items.length;
  int mid = n ~/ 2;
  if (n % 2 != 0) {
    return 1.0 * quick_select(items, mid);
  } else {
    int low = quick_select(items, mid - 1);
    int high = quick_select(items, mid);
    return 1.0 * (low + high) / 2.0;
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)));
  print(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 1)));
  print(_str(quick_select([5, 4, 3, 2], 2)));
  print(_str(quick_select([3, 5, 7, 10, 2, 12], 3)));
  print(_str(median([3, 2, 2, 9, 9])));
  print(_str(median([2, 2, 9, 9, 9, 3])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
