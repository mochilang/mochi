// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_sorted(List<int> xs) {
  int i = 1;
  while (i < xs.length) {
    if (xs[i - 1] > xs[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int exponential_search(List<int> arr, int item) {
  if (!is_sorted(arr)) {
    throw Exception("sorted_collection must be sorted in ascending order");
  }
  if (arr.length == 0) {
    return -1;
  }
  if (arr[0] == item) {
    return 0;
  }
  int bound = 1;
  while (bound < arr.length && arr[bound] < item) {
    bound = bound * 2;
  }
  int left = bound ~/ 2;
  int right = bound;
  if (right >= arr.length) {
    right = arr.length - 1;
  }
  while (left <= right) {
    int mid = left + (right - left) ~/ 2;
    if (arr[mid] == item) {
    return mid;
  }
    if (arr[mid] > item) {
    right = mid - 1;
  } else {
    left = mid + 1;
  }
  }
  return -1;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
