// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int double_linear_search(List<int> array, int search_item) {
  int start_ind = 0;
  int end_ind = array.length - 1;
  while (start_ind <= end_ind) {
    if (array[start_ind] == search_item) {
    return start_ind;
  }
    if (array[end_ind] == search_item) {
    return end_ind;
  }
    start_ind = start_ind + 1;
    end_ind = end_ind - 1;
  }
  return -1;
}

void _main() {
  List<int> data = build_range(100);
  print(_str(double_linear_search(data, 40)));
}

List<int> build_range(int n) {
  List<int> res = <int>[];
  int i = 0;
  while (i < n) {
    res = (res..add(i));
    i = i + 1;
  }
  return res;
}

void _start() {
  _main();
}

void main() => _start();
