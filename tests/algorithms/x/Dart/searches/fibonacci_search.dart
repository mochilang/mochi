// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int fibonacci(int k) {
  if (k < 0) {
    throw Exception("k must be >= 0");
  }
  int a = 0;
  int b = 1;
  int i = 0;
  while (i < k) {
    int tmp = a + b;
    a = b;
    b = tmp;
    i = i + 1;
  }
  return a;
}

int min_int(int a, int b) {
  if (a < b) {
    return a;
  } else {
    return b;
  }
}

int fibonacci_search(List<int> arr, int val) {
  int n = arr.length;
  int m = 0;
  while (fibonacci(m) < n) {
    m = m + 1;
  }
  int offset = 0;
  while (m > 0) {
    int i = min_int(offset + fibonacci(m - 1), n - 1);
    int item = arr[i];
    if (item == val) {
    return i;
  } else {
    if (val < item) {
    m = m - 1;
  } else {
    offset = offset + fibonacci(m - 1);
    m = m - 2;
  };
  }
  }
  return -1;
}

List<int> example1 = [4, 5, 6, 7];
List<int> example2 = [-18, 2];
List<int> example3 = [0, 5, 10, 15, 20, 25, 30];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(fibonacci_search(example1, 4)));
  print(_str(fibonacci_search(example1, -10)));
  print(_str(fibonacci_search(example2, -18)));
  print(_str(fibonacci_search(example3, 15)));
  print(_str(fibonacci_search(example3, 17)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
