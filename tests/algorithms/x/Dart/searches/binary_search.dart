// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_sorted(List<int> arr) {
  int i = 1;
  while (i < arr.length) {
    if (arr[i - 1] > arr[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int binary_search(List<int> sorted_collection, int item) {
  if (!is_sorted(sorted_collection)) {
    return -1;
  }
  int left = 0;
  int right = sorted_collection.length - 1;
  while (left <= right) {
    int midpoint = left + (right - left) ~/ 2;
    int current_item = sorted_collection[midpoint];
    if (current_item == item) {
    return midpoint;
  }
    if (item < current_item) {
    right = midpoint - 1;
  } else {
    left = midpoint + 1;
  }
  }
  return -1;
}

int binary_search_by_recursion(List<int> sorted_collection, int item, int left, int right) {
  if (right < left) {
    return -1;
  }
  int midpoint = left + (right - left) ~/ 2;
  if (sorted_collection[midpoint] == item) {
    return midpoint;
  }
  if (sorted_collection[midpoint] > item) {
    return binary_search_by_recursion(sorted_collection, item, left, midpoint - 1);
  }
  return binary_search_by_recursion(sorted_collection, item, midpoint + 1, right);
}

int exponential_search(List<int> sorted_collection, int item) {
  if (!is_sorted(sorted_collection)) {
    return -1;
  }
  if (sorted_collection.length == 0) {
    return -1;
  }
  int bound = 1;
  while (bound < sorted_collection.length && sorted_collection[bound] < item) {
    bound = bound * 2;
  }
  int left = bound ~/ 2;
  int right = [bound, sorted_collection.length - 1].reduce((a, b) => a < b ? a : b);
  return binary_search_by_recursion(sorted_collection, item, left, right);
}

void _main() {
  List<int> data = [0, 5, 7, 10, 15];
  print(_str(binary_search(data, 0)));
  print(_str(binary_search(data, 15)));
  print(_str(binary_search(data, 5)));
  print(_str(binary_search(data, 6)));
  print(_str(binary_search_by_recursion(data, 0, 0, data.length - 1)));
  print(_str(binary_search_by_recursion(data, 15, 0, data.length - 1)));
  print(_str(binary_search_by_recursion(data, 5, 0, data.length - 1)));
  print(_str(binary_search_by_recursion(data, 6, 0, data.length - 1)));
  print(_str(exponential_search(data, 0)));
  print(_str(exponential_search(data, 15)));
  print(_str(exponential_search(data, 5)));
  print(_str(exponential_search(data, 6)));
}

void _start() {
  _main();
}

void main() => _start();
