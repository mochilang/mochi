// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int precision = 10;
int lin_search(int left, int right, List<int> array, int target) {
  int i = left;
  while (i < right) {
    if (array[i] == target) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ite_ternary_search(List<int> array, int target) {
  int left = 0;
  int right = array.length - 1;
  while (left <= right) {
    if (right - left < precision) {
    int idx = lin_search(left, right + 1, array, target);
    return idx;
  }
    int one_third = left + (right - left) ~/ 3;
    int two_third = right - (right - left) ~/ 3;
    if (array[one_third] == target) {
    return one_third;
  }
    if (array[two_third] == target) {
    return two_third;
  }
    if (target < array[one_third]) {
    right = one_third - 1;
  } else {
    if (array[two_third] < target) {
    left = two_third + 1;
  } else {
    left = one_third + 1;
    right = two_third - 1;
  };
  }
  }
  return -1;
}

int rec_ternary_search(int left, int right, List<int> array, int target) {
  if (left <= right) {
    if (right - left < precision) {
    int idx = lin_search(left, right + 1, array, target);
    return idx;
  };
    int one_third = left + (right - left) ~/ 3;
    int two_third = right - (right - left) ~/ 3;
    if (array[one_third] == target) {
    return one_third;
  };
    if (array[two_third] == target) {
    return two_third;
  };
    if (target < array[one_third]) {
    return rec_ternary_search(left, one_third - 1, array, target);
  };
    if (array[two_third] < target) {
    return rec_ternary_search(two_third + 1, right, array, target);
  };
    return rec_ternary_search(one_third + 1, two_third - 1, array, target);
  }
  return -1;
}

void _main() {
  List<int> test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42];
  print(_str(ite_ternary_search(test_list, 3)));
  print(_str(ite_ternary_search(test_list, 13)));
  print(_str(rec_ternary_search(0, test_list.length - 1, test_list, 3)));
  print(_str(rec_ternary_search(0, test_list.length - 1, test_list, 13)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
