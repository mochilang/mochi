// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

class SearchProblem {
  double x;
  double y;
  double step;
  dynamic f;
  SearchProblem({required this.x, required this.y, required this.step, required this.f});
}

double score(SearchProblem sp) {
  return sp.f(sp.x, sp.y);
}

List<SearchProblem> neighbors(SearchProblem sp) {
  double s = sp.step;
  return [SearchProblem(x: sp.x - s, y: sp.y - s, step: s, f: sp.f), SearchProblem(x: sp.x - s, y: sp.y, step: s, f: sp.f), SearchProblem(x: sp.x - s, y: sp.y + s, step: s, f: sp.f), SearchProblem(x: sp.x, y: sp.y - s, step: s, f: sp.f), SearchProblem(x: sp.x, y: sp.y + s, step: s, f: sp.f), SearchProblem(x: sp.x + s, y: sp.y - s, step: s, f: sp.f), SearchProblem(x: sp.x + s, y: sp.y, step: s, f: sp.f), SearchProblem(x: sp.x + s, y: sp.y + s, step: s, f: sp.f)];
}

bool equal_state(SearchProblem a, SearchProblem b) {
  return a.x == b.x && a.y == b.y;
}

bool contains_state(List<SearchProblem> lst, SearchProblem sp) {
  int i = 0;
  while (i < lst.length) {
    if (equal_state(lst[i], sp)) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

SearchProblem hill_climbing(SearchProblem sp, bool find_max, double max_x, double min_x, double max_y, double min_y, int max_iter) {
  SearchProblem current = sp;
  List<SearchProblem> visited = <SearchProblem>[];
  int iterations = 0;
  bool solution_found = false;
  while (solution_found == false && iterations < max_iter) {
    visited = [...visited, current];
    iterations = iterations + 1;
    double current_score = score(current);
    List<SearchProblem> neighs = neighbors(current);
    double max_change = -1e+18;
    double min_change = 1e+18;
    SearchProblem next = current;
    bool improved = false;
    int i = 0;
    while (i < neighs.length) {
    SearchProblem n = neighs[i];
    i = i + 1;
    if (contains_state(visited, n)) {
    continue;
  }
    if (n.x > max_x || n.x < min_x || n.y > max_y || n.y < min_y) {
    continue;
  }
    double change = score(n) - current_score;
    if (find_max) {
    if (change > max_change && change > 0.0) {
    max_change = change;
    next = n;
    improved = true;
  };
  } else {
    if (change < min_change && change < 0.0) {
    min_change = change;
    next = n;
    improved = true;
  };
  }
  }
    if (improved) {
    current = next;
  } else {
    solution_found = true;
  }
  }
  return current;
}

double test_f1(double x, double y) {
  return x * x + y * y;
}

void _main() {
  SearchProblem prob1 = SearchProblem(x: 3.0, y: 4.0, step: 1.0, f: test_f1);
  SearchProblem local_min1 = hill_climbing(prob1, false, 1e+09, -1e+09, 1e+09, -1e+09, 10000);
  print(_str(score(local_min1).toInt()));
  SearchProblem prob2 = SearchProblem(x: 12.0, y: 47.0, step: 1.0, f: test_f1);
  SearchProblem local_min2 = hill_climbing(prob2, false, 100.0, 5.0, 50.0, -5.0, 10000);
  print(_str(score(local_min2).toInt()));
  SearchProblem prob3 = SearchProblem(x: 3.0, y: 4.0, step: 1.0, f: test_f1);
  SearchProblem local_max = hill_climbing(prob3, true, 1e+09, -1e+09, 1e+09, -1e+09, 1000);
  print(_str(score(local_max).toInt()));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
