// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> set_at_int(List<int> xs, int idx, int value) {
  int i = 0;
  List<int> res = <int>[];
  while (i < xs.length) {
    if (i == idx) {
    res = [...res, value];
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> sort_int(List<int> xs) {
  List<int> res = xs;
  int i = 1;
  while (i < res.length) {
    int key = res[i];
    int j = i - 1;
    while (j >= 0 && res[j] > key) {
    res = set_at_int(res, j + 1, res[j]);
    j = j - 1;
  }
    res = set_at_int(res, j + 1, key);
    i = i + 1;
  }
  return res;
}

int median_of_five(List<int> arr) {
  List<int> sorted = sort_int(arr);
  return sorted[sorted.length ~/ 2];
}

int median_of_medians(List<int> arr) {
  if (arr.length <= 5) {
    return median_of_five(arr);
  }
  List<int> medians = <int>[];
  int i = 0;
  while (i < arr.length) {
    if (i + 5 <= arr.length) {
    medians = [...medians, median_of_five(arr.sublist(i, i + 5))];
  } else {
    medians = [...medians, median_of_five(arr.sublist(i, arr.length))];
  }
    i = i + 5;
  }
  return median_of_medians(medians);
}

int quick_select(List<int> arr, int target) {
  if (target > arr.length) {
    return -1;
  }
  int x = median_of_medians(arr);
  List<int> left = <int>[];
  List<int> right = <int>[];
  bool check = false;
  int i = 0;
  while (i < arr.length) {
    if (arr[i] < x) {
    left = [...left, arr[i]];
  } else {
    if (arr[i] > x) {
    right = [...right, arr[i]];
  } else {
    if (arr[i] == x) {
    if (!check) {
    check = true;
  } else {
    right = [...right, arr[i]];
  };
  } else {
    right = [...right, arr[i]];
  };
  };
  }
    i = i + 1;
  }
  int rank_x = left.length + 1;
  int answer = 0;
  if (rank_x == target) {
    answer = x;
  } else {
    if (rank_x > target) {
    answer = quick_select(left, target);
  } else {
    answer = quick_select(right, target - rank_x);
  };
  }
  return answer;
}

void _main() {
  print(_str(median_of_five([5, 4, 3, 2])));
  print(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
