// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int interpolation_search(List<int> arr, int item) {
  int left = 0;
  int right = arr.length - 1;
  while (left <= right) {
    if (arr[left] == arr[right]) {
    if (arr[left] == item) {
    return left;
  };
    return -1;
  }
    int point = left + (item - arr[left]) * (right - left) ~/ (arr[right] - arr[left]);
    if (point < 0 || point >= arr.length) {
    return -1;
  }
    int current = arr[point];
    if (current == item) {
    return point;
  }
    if (point < left) {
    right = left;
    left = point;
  } else {
    if (point > right) {
    left = right;
    right = point;
  } else {
    if (item < current) {
    right = point - 1;
  } else {
    left = point + 1;
  };
  };
  }
  }
  return -1;
}

int interpolation_search_recursive(List<int> arr, int item, int left, int right) {
  if (left > right) {
    return -1;
  }
  if (arr[left] == arr[right]) {
    if (arr[left] == item) {
    return left;
  };
    return -1;
  }
  int point = left + (item - arr[left]) * (right - left) ~/ (arr[right] - arr[left]);
  if (point < 0 || point >= arr.length) {
    return -1;
  }
  if (arr[point] == item) {
    return point;
  }
  if (point < left) {
    return interpolation_search_recursive(arr, item, point, left);
  }
  if (point > right) {
    return interpolation_search_recursive(arr, item, right, left);
  }
  if (arr[point] > item) {
    return interpolation_search_recursive(arr, item, left, point - 1);
  }
  return interpolation_search_recursive(arr, item, point + 1, right);
}

int interpolation_search_by_recursion(List<int> arr, int item) {
  return interpolation_search_recursive(arr, item, 0, arr.length - 1);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(interpolation_search([1, 2, 3, 4, 5], 2)));
  print(_str(interpolation_search([1, 2, 3, 4, 5], 6)));
  print(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 5)));
  print(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 100)));
  print(_str(interpolation_search_by_recursion([5, 5, 5, 5, 5], 3)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
