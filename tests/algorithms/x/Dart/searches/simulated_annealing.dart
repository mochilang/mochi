// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class SearchProblem {
  double x;
  double y;
  double step;
  SearchProblem({required this.x, required this.y, required this.step});
}

double score(SearchProblem p, dynamic f) {
  return f(p.x, p.y);
}

List<SearchProblem> get_neighbors(SearchProblem p) {
  double s = p.step;
  List<SearchProblem> ns = <SearchProblem>[];
  ns = (ns..add(SearchProblem(x: p.x - s, y: p.y - s, step: s)));
  ns = (ns..add(SearchProblem(x: p.x - s, y: p.y, step: s)));
  ns = (ns..add(SearchProblem(x: p.x - s, y: p.y + s, step: s)));
  ns = (ns..add(SearchProblem(x: p.x, y: p.y - s, step: s)));
  ns = (ns..add(SearchProblem(x: p.x, y: p.y + s, step: s)));
  ns = (ns..add(SearchProblem(x: p.x + s, y: p.y - s, step: s)));
  ns = (ns..add(SearchProblem(x: p.x + s, y: p.y, step: s)));
  ns = (ns..add(SearchProblem(x: p.x + s, y: p.y + s, step: s)));
  return ns;
}

List<SearchProblem> remove_at(List<SearchProblem> lst, int idx) {
  List<SearchProblem> res = <SearchProblem>[];
  int i = 0;
  while (i < lst.length) {
    if (i != idx) {
    res = (res..add(lst[i]));
  }
    i = i + 1;
  }
  return res;
}

int seed = 1;
int rand() {
  int _t = _now();
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

double random_float() {
  return (rand().toDouble()) / 2147483648.0;
}

int randint(int low, int high) {
  return rand() % (high - low + 1) + low;
}

double expApprox(double x) {
  double y = x;
  bool is_neg = false;
  if (x < 0.0) {
    is_neg = true;
    y = -x;
  }
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 30) {
    term = term * y / (n.toDouble());
    sum = sum + term;
    n = n + 1;
  }
  if (is_neg) {
    return 1.0 / sum;
  }
  return sum;
}

SearchProblem simulated_annealing(SearchProblem search_prob, dynamic f, bool find_max, double max_x, double min_x, double max_y, double min_y, double start_temp, double rate_of_decrease, double threshold_temp) {
  bool search_end = false;
  SearchProblem current_state = search_prob;
  double current_temp = start_temp;
  SearchProblem best_state = current_state;
  while (!search_end) {
    double current_score = score(current_state, f);
    if (score(best_state, f) < current_score) {
    best_state = current_state;
  }
    SearchProblem next_state = current_state;
    bool found_next = false;
    List<SearchProblem> neighbors = get_neighbors(current_state);
    while (!found_next && neighbors.length > 0) {
    int idx = randint(0, neighbors.length - 1);
    SearchProblem picked_neighbor = neighbors[idx];
    neighbors = remove_at(neighbors, idx);
    if (picked_neighbor.x > max_x || picked_neighbor.x < min_x || picked_neighbor.y > max_y || picked_neighbor.y < min_y) {
    continue;
  }
    double change = score(picked_neighbor, f) - current_score;
    if (!find_max) {
    change = -change;
  }
    if (change > 0.0) {
    next_state = picked_neighbor;
    found_next = true;
  } else {
    double probability = expApprox(change / current_temp);
    if (random_float() < probability) {
    next_state = picked_neighbor;
    found_next = true;
  };
  }
  }
    current_temp = current_temp - current_temp * rate_of_decrease;
    if (current_temp < threshold_temp || !found_next) {
    search_end = true;
  } else {
    current_state = next_state;
  }
  }
  return best_state;
}

double test_f1(double x, double y) {
  return x * x + y * y;
}

double test_f2(double x, double y) {
  return 3.0 * x * x - 6.0 * y;
}

void _main() {
  SearchProblem prob1 = SearchProblem(x: 12.0, y: 47.0, step: 1.0);
  SearchProblem min_state = simulated_annealing(prob1, test_f1, false, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0);
  print(["min1", test_f1(min_state.x, min_state.y)].join(" "));
  SearchProblem prob2 = SearchProblem(x: 12.0, y: 47.0, step: 1.0);
  SearchProblem max_state = simulated_annealing(prob2, test_f1, true, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0);
  print(["max1", test_f1(max_state.x, max_state.y)].join(" "));
  SearchProblem prob3 = SearchProblem(x: 3.0, y: 4.0, step: 1.0);
  SearchProblem min_state2 = simulated_annealing(prob3, test_f2, false, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0);
  print(["min2", test_f2(min_state2.x, min_state2.y)].join(" "));
  SearchProblem prob4 = SearchProblem(x: 3.0, y: 4.0, step: 1.0);
  SearchProblem max_state2 = simulated_annealing(prob4, test_f2, true, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0);
  print(["max2", test_f2(max_state2.x, max_state2.y)].join(" "));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
