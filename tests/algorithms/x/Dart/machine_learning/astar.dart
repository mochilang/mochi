// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Point {
  int x;
  int y;
  Point({required this.x, required this.y});
}

class Node {
  Point pos;
  Point parent;
  int g;
  int h;
  int f;
  Node({required this.pos, required this.parent, required this.g, required this.h, required this.f});
}

List<Point> get_neighbours(Point p, int x_limit, int y_limit) {
  List<Point> deltas = [Point(x: 0 - 1, y: 0 - 1), Point(x: 0 - 1, y: 0), Point(x: 0 - 1, y: 1), Point(x: 0, y: 0 - 1), Point(x: 0, y: 1), Point(x: 1, y: 0 - 1), Point(x: 1, y: 0), Point(x: 1, y: 1)];
  List<Point> neighbours = <Point>[];
  for (Point d in deltas) {
    int nx = p.x + d.x;
    int ny = p.y + d.y;
    if (0 <= nx && nx < x_limit && 0 <= ny && ny < y_limit) {
    neighbours = [...neighbours, Point(x: nx, y: ny)];
  }
  }
  return neighbours;
}

bool contains(List<Node> nodes, Point p) {
  for (Node n in nodes) {
    if (n.pos.x == p.x && n.pos.y == p.y) {
    return true;
  }
  }
  return false;
}

Node get_node(List<Node> nodes, Point p) {
  for (Node n in nodes) {
    if (n.pos.x == p.x && n.pos.y == p.y) {
    return n;
  }
  }
  return Node(pos: p, parent: Point(x: 0 - 1, y: 0 - 1), g: 0, h: 0, f: 0);
}

List<Point> astar(int x_limit, int y_limit, Point start, Point goal) {
  List<Node> open = <Node>[];
  List<Node> closed = <Node>[];
  open = [...open, Node(pos: start, parent: Point(x: 0 - 1, y: 0 - 1), g: 0, h: 0, f: 0)];
  Node current = open[0];
  while (open.length > 0) {
    int min_index = 0;
    int i = 1;
    while (i < open.length) {
    if (open[i].f < open[min_index].f) {
    min_index = i;
  }
    i = i + 1;
  }
    current = open[min_index];
    List<Node> new_open = <Node>[];
    int j = 0;
    while (j < open.length) {
    if (j != min_index) {
    new_open = [...new_open, open[j]];
  }
    j = j + 1;
  }
    open = new_open;
    closed = [...closed, current];
    if (current.pos.x == goal.x && current.pos.y == goal.y) {
    break;
  }
    List<Point> neighbours = get_neighbours(current.pos, x_limit, y_limit);
    for (Point np in neighbours) {
    if (closed.contains(np)) {
    continue;
  }
    int g = current.g + 1;
    int dx = goal.x - np.x;
    int dy = goal.y - np.y;
    int h = dx * dx + dy * dy;
    int f = g + h;
    bool skip = false;
    for (Node node in open) {
    if (node.pos.x == np.x && node.pos.y == np.y && node.f < f) {
    skip = true;
  }
  }
    if (skip) {
    continue;
  }
    open = [...open, Node(pos: np, parent: current.pos, g: g, h: h, f: f)];
  }
  }
  List<Point> path = <Point>[];
  path = [...path, current.pos];
  while (!(current.parent.x == 0 - 1 && current.parent.y == 0 - 1)) {
    current = get_node(closed, current.parent);
    path = [...path, current.pos];
  }
  List<Point> rev = <Point>[];
  int k = path.length - 1;
  while (k >= 0) {
    rev = [...rev, path[k]];
    k = k - 1;
  }
  return rev;
}

List<List<int>> create_world(int x_limit, int y_limit) {
  List<List<int>> world = <List<int>>[];
  int i = 0;
  while (i < x_limit) {
    List<int> row = <int>[];
    int j = 0;
    while (j < y_limit) {
    row = [...row, 0];
    j = j + 1;
  }
    world = ([...world, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return world;
}

void mark_path(List<List<int>> world, List<Point> path) {
  for (Point p in path) {
    while (world[p.x]!.length <= p.y) { world[p.x]!.add(0); } world[p.x]![p.y] = 1;
  }
}

void print_world(List<List<int>> world) {
  for (List<int> row in world) {
    print((row).toString());
  }
}

int world_x = 5;
int world_y = 5;
Point start = Point(x: 0, y: 0);
Point goal = Point(x: 4, y: 4);
List<Point> path = astar(world_x, world_y, start, goal);
List<List<int>> world = create_world(world_x, world_y);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("path from (" + (start.x).toString() + ", " + (start.y).toString() + ") to (" + (goal.x).toString() + ", " + (goal.y).toString() + ")");
  mark_path(world, path);
  print_world(world);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
