// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class KMeansResult {
  List<List<double>> centroids;
  List<int> assignments;
  List<double> heterogeneity;
  KMeansResult({required this.centroids, required this.assignments, required this.heterogeneity});
}

double distance_sq(List<double> a, List<double> b) {
  double sum = 0.0;
  for (int i = 0; i < a.length; i++) {
    double diff = a[i] - b[i];
    sum = sum + diff * diff;
  }
  return sum;
}

List<int> assign_clusters(List<List<double>> data, List<List<double>> centroids) {
  List<int> assignments = <int>[];
  for (int i = 0; i < data.length; i++) {
    int best_idx = 0;
    double best = distance_sq(data[i], centroids[0]);
    for (int j = 1; j < centroids.length; j++) {
    double dist = distance_sq(data[i], centroids[j]);
    if (dist < best) {
    best = dist;
    best_idx = j;
  }
  }
    assignments = [...assignments, best_idx];
  }
  return assignments;
}

List<List<double>> revise_centroids(List<List<double>> data, int k, List<int> assignment) {
  int dim = data[0].length;
  List<List<double>> sums = <List<double>>[];
  List<int> counts = <int>[];
  for (int i = 0; i < k; i++) {
    List<double> row = <double>[];
    for (int j = 0; j < dim; j++) {
    row = [...row, 0.0];
  }
    sums = ([...sums, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    counts = [...counts, 0];
  }
  for (int i = 0; i < data.length; i++) {
    int c = assignment[i];
    while (counts.length <= c) { counts.add(0); } counts[c] = counts[c] + 1;
    for (int j = 0; j < dim; j++) {
    while (sums[c]!.length <= j) { sums[c]!.add(0); } sums[c]![j] = sums[c][j] + data[i][j];
  }
  }
  List<List<double>> centroids = <List<double>>[];
  for (int i = 0; i < k; i++) {
    List<double> row = <double>[];
    if (counts[i] > 0) {
    for (int j = 0; j < dim; j++) {
    row = [...row, sums[i][j] / ((counts[i]).toDouble())];
  };
  } else {
    for (int j = 0; j < dim; j++) {
    row = [...row, 0.0];
  };
  }
    centroids = ([...centroids, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
  return centroids;
}

double compute_heterogeneity(List<List<double>> data, List<List<double>> centroids, List<int> assignment) {
  double total = 0.0;
  for (int i = 0; i < data.length; i++) {
    int c = assignment[i];
    total = total + distance_sq(data[i], centroids[c]);
  }
  return total;
}

bool lists_equal(List<int> a, List<int> b) {
  if (a.length != b.length) {
    return false;
  }
  for (int i = 0; i < a.length; i++) {
    if (a[i] != b[i]) {
    return false;
  }
  }
  return true;
}

KMeansResult kmeans(List<List<double>> data, int k, List<List<double>> initial_centroids, int max_iter) {
  List<List<double>> centroids = initial_centroids;
  List<int> assignment = <int>[];
  List<int> prev = <int>[];
  List<double> heterogeneity = <double>[];
  int iter = 0;
  while (iter < max_iter) {
    assignment = assign_clusters(data, centroids);
    centroids = revise_centroids(data, k, assignment);
    double h = compute_heterogeneity(data, centroids, assignment);
    heterogeneity = [...heterogeneity, h];
    if (iter > 0 && lists_equal(prev, assignment)) {
    break;
  }
    prev = assignment;
    iter = iter + 1;
  }
  return KMeansResult(centroids: centroids, assignments: assignment, heterogeneity: heterogeneity);
}

List<List<double>> data = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]];
int k = 3;
List<List<double>> initial_centroids = [data[0], data[2], data[5]];
KMeansResult result = kmeans(data, k, initial_centroids, 10);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(result.centroids));
  print(_str(result.assignments));
  print(_str(result.heterogeneity));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
