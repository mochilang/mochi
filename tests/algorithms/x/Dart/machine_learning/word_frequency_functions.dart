// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

String LOWER = "abcdefghijklmnopqrstuvwxyz";
String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String PUNCT = "!\"#\$%&'()*+,-./:;<=>?@[\\]^_{|}~";
String to_lowercase(String s) {
  String res = "";
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    int j = 0;
    bool found = false;
    while (j < UPPER.length) {
    if (c == _substr(UPPER, j, j + 1)) {
    res = res + _substr(LOWER, j, j + 1);
    found = true;
    break;
  }
    j = j + 1;
  }
    if (!found) {
    res = res + c;
  }
    i = i + 1;
  }
  return res;
}

bool is_punct(String c) {
  int i = 0;
  while (i < PUNCT.length) {
    if (c == _substr(PUNCT, i, i + 1)) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

String clean_text(String text, bool keep_newlines) {
  String lower = to_lowercase(text);
  String res = "";
  int i = 0;
  while (i < lower.length) {
    String ch = _substr(lower, i, i + 1);
    if (is_punct(ch)) {
  } else {
    if (ch == "\n") {
    if (keep_newlines) {
    res = res + "\n";
  };
  } else {
    res = res + ch;
  };
  }
    i = i + 1;
  }
  return res;
}

List<String> split(String s, String sep) {
  List<String> res = <String>[];
  String current = "";
  int i = 0;
  while (i < s.length) {
    String ch = _substr(s, i, i + 1);
    if (ch == sep) {
    res = [...res, current];
    current = "";
  } else {
    current = current + ch;
  }
    i = i + 1;
  }
  res = [...res, current];
  return res;
}

bool contains(String s, String sub) {
  int n = s.length;
  int m = sub.length;
  if (m == 0) {
    return true;
  }
  int i = 0;
  while (i <= n - m) {
    int j = 0;
    bool is_match = true;
    while (j < m) {
    if (_substr(s, i + j, i + j + 1) != _substr(sub, j, j + 1)) {
    is_match = false;
    break;
  }
    j = j + 1;
  }
    if (is_match) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

double floor(double x) {
  int i = (x).toInt();
  if (((i).toDouble()) > x) {
    i = i - 1;
  }
  return (i).toDouble();
}

double round3(double x) {
  return floor(x * 1000.0 + 0.5) / 1000.0;
}

double ln(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int k = 1;
  while (k <= 99) {
    sum = sum + term / ((k).toDouble());
    term = term * t * t;
    k = k + 2;
  }
  return 2.0 * sum;
}

double log10(double x) {
  return ln(x) / ln(10.0);
}

int term_frequency(String term, String document) {
  String clean = clean_text(document, false);
  dynamic tokens = clean.split(" ");
  String t = to_lowercase(term);
  int count = 0;
  int i = 0;
  while (i < tokens.length) {
    if (tokens[i] != "" && tokens[i] == t) {
    count = count + 1;
  }
    i = i + 1;
  }
  return count;
}

List<int> document_frequency(String term, String corpus) {
  String clean = clean_text(corpus, true);
  dynamic docs = clean.split("\n");
  String t = to_lowercase(term);
  int matches = 0;
  int i = 0;
  while (i < docs.length) {
    if (contains(docs[i], t)) {
    matches = matches + 1;
  }
    i = i + 1;
  }
  return [matches, docs.length];
}

double inverse_document_frequency(int df, int n, bool smoothing) {
  if (smoothing) {
    if (n == 0) {
    _error("log10(0) is undefined.");
  };
    double ratio = ((n).toDouble()) / (1.0 + ((df).toDouble()));
    double l = log10(ratio);
    double result = round3(1.0 + l);
    print(result);
    return result;
  }
  if (df == 0) {
    _error("df must be > 0");
  }
  if (n == 0) {
    _error("log10(0) is undefined.");
  }
  double ratio = ((n).toDouble()) / ((df).toDouble());
  double l = log10(ratio);
  double result = round3(l);
  print(result);
  return result;
}

double tf_idf(int tf, double idf) {
  double prod = ((tf).toDouble()) * idf;
  double result = round3(prod);
  print(result);
  return result;
}

String corpus = "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus.";
double idf_val = inverse_document_frequency(1, 3, false);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(term_frequency("to", "To be, or not to be"));
  print(_str(document_frequency("first", corpus)));
  tf_idf(2, idf_val);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
