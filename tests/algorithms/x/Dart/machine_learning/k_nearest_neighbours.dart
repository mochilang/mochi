// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class PointLabel {
  List<double> point;
  int label;
  PointLabel({required this.point, required this.label});
}

class KNN {
  List<PointLabel> data;
  List<String> labels;
  KNN({required this.data, required this.labels});
}

class DistLabel {
  double dist;
  int label;
  DistLabel({required this.dist, required this.label});
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

KNN make_knn(List<List<double>> train_data, List<int> train_target, List<String> class_labels) {
  List<PointLabel> items = <PointLabel>[];
  int i = 0;
  while (i < train_data.length) {
    PointLabel pl = PointLabel(point: train_data[i], label: train_target[i]);
    items = [...items, pl];
    i = i + 1;
  }
  return KNN(data: items, labels: class_labels);
}

double euclidean_distance(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    double diff = a[i] - b[i];
    sum = sum + diff * diff;
    i = i + 1;
  }
  return sqrtApprox(sum);
}

String classify(KNN knn, List<double> pred_point, int k) {
  List<DistLabel> distances = <DistLabel>[];
  int i = 0;
  while (i < knn.data.length) {
    double d = euclidean_distance(knn.data[i].point, pred_point);
    distances = [...distances, DistLabel(dist: d, label: knn.data[i].label)];
    i = i + 1;
  }
  List<int> votes = <int>[];
  int count = 0;
  while (count < k) {
    int min_index = 0;
    int j = 1;
    while (j < distances.length) {
    if (distances[j].dist < distances[min_index].dist) {
    min_index = j;
  }
    j = j + 1;
  }
    votes = [...votes, distances[min_index].label];
    distances[min_index]!.dist = 1000000000000000000.0;
    count = count + 1;
  }
  List<int> tally = <int>[];
  int t = 0;
  while (t < knn.labels.length) {
    tally = [...tally, 0];
    t = t + 1;
  }
  int v = 0;
  while (v < votes.length) {
    int lbl = votes[v];
    while (tally.length <= lbl) { tally.add(0); } tally[lbl] = tally[lbl] + 1;
    v = v + 1;
  }
  int max_idx = 0;
  int m = 1;
  while (m < tally.length) {
    if (tally[m] > tally[max_idx]) {
    max_idx = m;
  }
    m = m + 1;
  }
  return knn.labels[max_idx];
}

List<List<double>> train_X = [[0.0, 0.0], [1.0, 0.0], [0.0, 1.0], [0.5, 0.5], [3.0, 3.0], [2.0, 3.0], [3.0, 2.0]];
List<int> train_y = [0, 0, 0, 0, 1, 1, 1];
List<String> classes = ["A", "B"];
KNN knn = make_knn(train_X, train_y, classes);
List<double> point = [1.2, 1.2];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(classify(knn, point, 5));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
