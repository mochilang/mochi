// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}


void _json(dynamic v) {
  print(jsonEncode(v));
}

double expApprox(double x) {
  if (x < 0.0) {
    return 1.0 / expApprox(-x);
  }
  if (x > 1.0) {
    double half = expApprox(x / 2.0);
    return half * half;
  }
  double sum = 1.0;
  double term = 1.0;
  int n = 1;
  while (n < 20) {
    term = term * x / ((n).toDouble());
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

List<List<double>> transpose(List<List<double>> mat) {
  int rows = mat.length;
  int cols = mat[0].length;
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < cols) {
    List<double> row = <double>[];
    int j = 0;
    while (j < rows) {
    row = [...row, mat[j][i]];
    j = j + 1;
  }
    res = ([...res, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<double>> matMul(List<List<double>> a, List<List<double>> b) {
  int a_rows = a.length;
  int a_cols = a[0].length;
  int b_cols = b[0].length;
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < a_rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < b_cols) {
    double sum = 0.0;
    int k = 0;
    while (k < a_cols) {
    sum = sum + a[i][k] * b[k][j];
    k = k + 1;
  }
    row = [...row, sum];
    j = j + 1;
  }
    res = ([...res, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<double>> matInv(List<List<double>> mat) {
  int n = mat.length;
  List<List<double>> aug = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    row = [...row, mat[i][j]];
    j = j + 1;
  }
    j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 1.0];
  } else {
    row = [...row, 0.0];
  }
    j = j + 1;
  }
    aug = ([...aug, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int col = 0;
  while (col < n) {
    double pivot = aug[col][col];
    if (pivot == 0.0) {
    _error("Matrix is singular");
  }
    int j = 0;
    while (j < 2 * n) {
    while (aug[col]!.length <= j) { aug[col]!.add(0); } aug[col]![j] = aug[col][j] / pivot;
    j = j + 1;
  }
    int r = 0;
    while (r < n) {
    if (r != col) {
    double factor = aug[r][col];
    j = 0;
    while (j < 2 * n) {
    while (aug[r]!.length <= j) { aug[r]!.add(0); } aug[r]![j] = aug[r][j] - factor * aug[col][j];
    j = j + 1;
  };
  }
    r = r + 1;
  }
    col = col + 1;
  }
  List<List<double>> inv = <List<double>>[];
  i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    row = [...row, aug[i][j + n]];
    j = j + 1;
  }
    inv = ([...inv, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return inv;
}

List<List<double>> weight_matrix(List<double> point, List<List<double>> x_train, double tau) {
  int m = x_train.length;
  List<List<double>> weights = <List<double>>[];
  int i = 0;
  while (i < m) {
    List<double> row = <double>[];
    int j = 0;
    while (j < m) {
    if (i == j) {
    row = [...row, 1.0];
  } else {
    row = [...row, 0.0];
  }
    j = j + 1;
  }
    weights = ([...weights, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int j = 0;
  while (j < m) {
    double diff_sq = 0.0;
    int k = 0;
    while (k < point.length) {
    double diff = point[k] - x_train[j][k];
    diff_sq = diff_sq + diff * diff;
    k = k + 1;
  }
    while (weights[j]!.length <= j) { weights[j]!.add(0); } weights[j]![j] = expApprox(-diff_sq / (2.0 * tau * tau));
    j = j + 1;
  }
  return weights;
}

List<List<double>> local_weight(List<double> point, List<List<double>> x_train, List<double> y_train, double tau) {
  List<List<double>> w = weight_matrix(point, x_train, tau);
  List<List<double>> x_t = transpose(x_train);
  List<List<double>> x_t_w = matMul(x_t, w);
  List<List<double>> x_t_w_x = matMul(x_t_w, x_train);
  List<List<double>> inv_part = matInv(x_t_w_x);
  List<List<double>> y_col = <List<double>>[];
  int i = 0;
  while (i < y_train.length) {
    y_col = ([...y_col, [y_train[i]]] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  List<List<double>> x_t_w_y = matMul(x_t_w, y_col);
  return matMul(inv_part, x_t_w_y);
}

List<double> local_weight_regression(List<List<double>> x_train, List<double> y_train, double tau) {
  int m = x_train.length;
  List<double> preds = <double>[];
  int i = 0;
  while (i < m) {
    List<List<double>> theta = local_weight(x_train[i], x_train, y_train, tau);
    List<double> weights_vec = <double>[];
    int k = 0;
    while (k < theta.length) {
    weights_vec = [...weights_vec, theta[k][0]];
    k = k + 1;
  }
    double pred = 0.0;
    int j = 0;
    while (j < x_train[i].length) {
    pred = pred + x_train[i][j] * weights_vec[j];
    j = j + 1;
  }
    preds = [...preds, pred];
    i = i + 1;
  }
  return preds;
}

List<List<double>> x_train = [[16.99, 10.34], [21.01, 23.68], [24.59, 25.69]];
List<double> y_train = [1.01, 1.66, 3.5];
List<double> preds = local_weight_regression(x_train, y_train, 0.6);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _json(preds);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
