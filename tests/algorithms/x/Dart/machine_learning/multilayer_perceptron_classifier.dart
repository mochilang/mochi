// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double exp_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  double i = 1.0;
  while (i < 20.0) {
    term = term * x / i;
    sum = sum + term;
    i = i + 1.0;
  }
  return sum;
}

double sigmoid(double x) {
  return 1.0 / (1.0 + exp_taylor(-x));
}

List<List<double>> X = [[0.0, 0.0], [1.0, 1.0], [1.0, 0.0], [0.0, 1.0]];
List<double> Y = [0.0, 1.0, 0.0, 0.0];
List<List<double>> test_data = [[0.0, 0.0], [0.0, 1.0], [1.0, 1.0]];
List<List<double>> w1 = [[0.5, -0.5], [0.5, 0.5]];
List<double> b1 = [0.0, 0.0];
List<double> w2 = [0.5, -0.5];
double b2 = 0.0;
void train(int epochs, double lr) {
  int e = 0;
  while (e < epochs) {
    int i = 0;
    while (i < X.length) {
    double x0 = X[i][0];
    double x1 = X[i][1];
    double target = Y[i];
    double z1 = w1[0][0] * x0 + w1[1][0] * x1 + b1[0];
    double z2 = w1[0][1] * x0 + w1[1][1] * x1 + b1[1];
    double h1 = sigmoid(z1);
    double h2 = sigmoid(z2);
    double z3 = w2[0] * h1 + w2[1] * h2 + b2;
    double out = sigmoid(z3);
    double error = out - target;
    double d1 = h1 * (1.0 - h1) * w2[0] * error;
    double d2 = h2 * (1.0 - h2) * w2[1] * error;
    while (w2.length <= 0) { w2.add(0); } w2[0] = w2[0] - lr * error * h1;
    while (w2.length <= 1) { w2.add(0); } w2[1] = w2[1] - lr * error * h2;
    b2 = b2 - lr * error;
    while (w1[0]!.length <= 0) { w1[0]!.add(0); } w1[0]![0] = w1[0][0] - lr * d1 * x0;
    while (w1[1]!.length <= 0) { w1[1]!.add(0); } w1[1]![0] = w1[1][0] - lr * d1 * x1;
    while (b1.length <= 0) { b1.add(0); } b1[0] = b1[0] - lr * d1;
    while (w1[0]!.length <= 1) { w1[0]!.add(0); } w1[0]![1] = w1[0][1] - lr * d2 * x0;
    while (w1[1]!.length <= 1) { w1[1]!.add(0); } w1[1]![1] = w1[1][1] - lr * d2 * x1;
    while (b1.length <= 1) { b1.add(0); } b1[1] = b1[1] - lr * d2;
    i = i + 1;
  }
    e = e + 1;
  }
}

List<int> predict(List<List<double>> samples) {
  List<int> preds = <int>[];
  int i = 0;
  while (i < samples.length) {
    double x0 = samples[i][0];
    double x1 = samples[i][1];
    double z1 = w1[0][0] * x0 + w1[1][0] * x1 + b1[0];
    double z2 = w1[0][1] * x0 + w1[1][1] * x1 + b1[1];
    double h1 = sigmoid(z1);
    double h2 = sigmoid(z2);
    double z3 = w2[0] * h1 + w2[1] * h2 + b2;
    double out = sigmoid(z3);
    int label = 0;
    if (out >= 0.5) {
    label = 1;
  }
    preds = [...preds, label];
    i = i + 1;
  }
  return preds;
}

List<int> wrapper(List<int> y) {
  return y;
}

List<int> preds = wrapper(predict(test_data));
void main() {
  train(4000, 0.5);
  print((preds).toString());
}
