// Generated by Mochi transpiler
import 'dart:math' as math;
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class Neighbor {
  List<double> vector;
  double distance;
  Neighbor({required this.vector, required this.distance});
}

double sqrt(double x) {
  return math.sqrt(x);
}

double euclidean(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    double diff = a[i] - b[i];
    sum = sum + diff * diff;
    i = i + 1;
  }
  double res = sqrt(sum);
  return res;
}

List<Neighbor> similarity_search(List<List<double>> dataset, List<List<double>> value_array) {
  int dim = dataset[0].length;
  if (dim != value_array[0].length) {
    return List<Neighbor>.from([]);
  }
  List<Neighbor> result = <Neighbor>[];
  int i = 0;
  while (i < value_array.length) {
    List<double> value = value_array[i];
    double dist = euclidean(value, dataset[0]);
    List<double> vec = dataset[0];
    int j = 1;
    while (j < dataset.length) {
    double d = euclidean(value, dataset[j]);
    if (d < dist) {
    dist = d;
    vec = dataset[j];
  }
    j = j + 1;
  }
    Neighbor nb = Neighbor(vector: vec, distance: dist);
    result = [...result, nb];
    i = i + 1;
  }
  return result;
}

double cosine_similarity(List<double> a, List<double> b) {
  double dot = 0.0;
  double norm_a = 0.0;
  double norm_b = 0.0;
  int i = 0;
  while (i < a.length) {
    dot = dot + a[i] * b[i];
    norm_a = norm_a + a[i] * a[i];
    norm_b = norm_b + b[i] * b[i];
    i = i + 1;
  }
  if (norm_a == 0.0 || norm_b == 0.0) {
    return 0.0;
  }
  return dot / (sqrt(norm_a) * sqrt(norm_b));
}

List<List<double>> dataset = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]];
List<List<double>> value_array = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]];
List<Neighbor> neighbors = similarity_search(dataset, value_array);
int k = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (k < neighbors.length) {
    Neighbor n = neighbors[k];
    print("[" + _str(n.vector) + ", " + _str(n.distance) + "]");
    k = k + 1;
  }
  print(_str(cosine_similarity([1.0, 2.0], [6.0, 32.0])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
