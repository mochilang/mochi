// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class SVC {
  List<double> weights;
  double bias;
  double lr;
  double lambda;
  int epochs;
  SVC({required this.weights, required this.bias, required this.lr, required this.lambda, required this.epochs});
}

double dot(List<double> a, List<double> b) {
  double s = 0.0;
  int i = 0;
  while (i < a.length) {
    s = s + a[i] * b[i];
    i = i + 1;
  }
  return s;
}

SVC new_svc(double lr, double lambda, int epochs) {
  return SVC(weights: [], bias: 0.0, lr: lr, lambda: lambda, epochs: epochs);
}

SVC fit(SVC model, List<List<double>> xs, List<int> ys) {
  int n_features = xs[0].length;
  List<double> w = <double>[];
  int i = 0;
  while (i < n_features) {
    w = [...w, 0.0];
    i = i + 1;
  }
  double b = 0.0;
  int epoch = 0;
  while (epoch < model.epochs) {
    int j = 0;
    while (j < xs.length) {
    List<double> x = xs[j];
    double y = (ys[j]).toDouble();
    double prod = dot(w, x) + b;
    if (y * prod < 1.0) {
    int k = 0;
    while (k < w.length) {
    while (w.length <= k) { w.add(0); } w[k] = w[k] + model.lr * (y * x[k] - 2.0 * model.lambda * w[k]);
    k = k + 1;
  };
    b = b + model.lr * y;
  } else {
    int k = 0;
    while (k < w.length) {
    while (w.length <= k) { w.add(0); } w[k] = w[k] - model.lr * (2.0 * model.lambda * w[k]);
    k = k + 1;
  };
  }
    j = j + 1;
  }
    epoch = epoch + 1;
  }
  return SVC(weights: w, bias: b, lr: model.lr, lambda: model.lambda, epochs: model.epochs);
}

int predict(SVC model, List<double> x) {
  double s = dot(model.weights, x) + model.bias;
  if (s >= 0.0) {
    return 1;
  } else {
    return -1;
  }
}

List<List<double>> xs = [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]];
List<int> ys = [1, 1, -1, -1];
SVC base = new_svc(0.01, 0.01, 1000);
SVC model = fit(base, xs, ys);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(predict(model, [0.0, 1.0]));
  print(predict(model, [1.0, 1.0]));
  print(predict(model, [2.0, 2.0]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
