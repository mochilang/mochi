// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double PI = 3.141592653589793;
double sinApprox(double x) {
  double term = x;
  double sum = x;
  int n = 1;
  while (n <= 10) {
    double denom = (2 * n * (2 * n + 1)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

double cosApprox(double x) {
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n <= 10) {
    double denom = ((2 * n - 1) * (2 * n)).toDouble();
    term = -term * x * x / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

double expApprox(double x) {
  double sum = 1.0;
  double term = 1.0;
  int n = 1;
  while (n < 10) {
    term = term * x / ((n).toDouble());
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

double ln(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int n = 1;
  while (n <= 19) {
    sum = sum + term / ((n).toDouble());
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * sum;
}

double log10(double x) {
  return ln(x) / ln(10.0);
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

List<double> normalize(List<double> audio) {
  double max_val = 0.0;
  int i = 0;
  while (i < audio.length) {
    double v = absf(audio[i]);
    if (v > max_val) {
    max_val = v;
  }
    i = i + 1;
  }
  List<double> res = <double>[];
  i = 0;
  while (i < audio.length) {
    res = [...res, audio[i] / max_val];
    i = i + 1;
  }
  return res;
}

List<double> dft(List<double> frame, int bins) {
  int N = frame.length;
  List<double> spec = <double>[];
  int k = 0;
  while (k < bins) {
    double real = 0.0;
    double imag = 0.0;
    int n = 0;
    while (n < N) {
    double angle = -2.0 * PI * ((k).toDouble()) * ((n).toDouble()) / ((N).toDouble());
    real = real + frame[n] * cosApprox(angle);
    imag = imag + frame[n] * sinApprox(angle);
    n = n + 1;
  }
    spec = [...spec, real * real + imag * imag];
    k = k + 1;
  }
  return spec;
}

List<List<double>> triangular_filters(int bins, int spectrum_size) {
  List<List<double>> filters = <List<double>>[];
  int b = 0;
  while (b < bins) {
    int center = (b + 1) * spectrum_size ~/ (bins + 1);
    List<double> filt = <double>[];
    int i = 0;
    while (i < spectrum_size) {
    double v = 0.0;
    if (i <= center) {
    v = ((i).toDouble()) / ((center).toDouble());
  } else {
    v = ((spectrum_size - i).toDouble()) / ((spectrum_size - center).toDouble());
  }
    filt = [...filt, v];
    i = i + 1;
  }
    filters = ([...filters, filt] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    b = b + 1;
  }
  return filters;
}

List<double> dot(List<List<double>> mat, List<double> vec) {
  List<double> res = <double>[];
  int i = 0;
  while (i < mat.length) {
    double sum = 0.0;
    int j = 0;
    while (j < vec.length) {
    sum = sum + mat[i][j] * vec[j];
    j = j + 1;
  }
    res = [...res, sum];
    i = i + 1;
  }
  return res;
}

List<List<double>> discrete_cosine_transform(int dct_filter_num, int filter_num) {
  List<List<double>> basis = <List<double>>[];
  int i = 0;
  while (i < dct_filter_num) {
    List<double> row = <double>[];
    int j = 0;
    while (j < filter_num) {
    if (i == 0) {
    row = [...row, 1.0 / sqrtApprox((filter_num).toDouble())];
  } else {
    double angle = ((2 * j + 1).toDouble()) * ((i).toDouble()) * PI / (2.0 * ((filter_num).toDouble()));
    row = [...row, cosApprox(angle) * sqrtApprox(2.0 / ((filter_num).toDouble()))];
  }
    j = j + 1;
  }
    basis = ([...basis, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return basis;
}

List<double> mfcc(List<double> audio, int bins, int dct_num) {
  List<double> norm = normalize(audio);
  List<double> spec = dft(norm, bins + 2);
  List<List<double>> filters = triangular_filters(bins, spec.length);
  List<double> energies = dot(filters, spec);
  List<double> logfb = <double>[];
  int i = 0;
  while (i < energies.length) {
    logfb = [...logfb, 10.0 * log10(energies[i] + 0.0000000001)];
    i = i + 1;
  }
  List<List<double>> dct_basis = discrete_cosine_transform(dct_num, bins);
  List<double> res = dot(dct_basis, logfb);
  if (res.length == 0) {
    res = [0.0, 0.0, 0.0];
  }
  return res;
}

int sample_rate = 8000;
int size = 16;
List<double> audio = <double>[];
int n = 0;
List<double> coeffs = mfcc(audio, 5, 3);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (n < size) {
    double t = ((n).toDouble()) / ((sample_rate).toDouble());
    audio = [...audio, sinApprox(2.0 * PI * 440.0 * t)];
    n = n + 1;
  }
  for (double c in coeffs) {
    print(c);
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
