// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<double>> design_matrix(List<double> xs, int degree) {
  int i = 0;
  List<List<double>> matrix = <List<double>>[];
  while (i < xs.length) {
    List<double> row = <double>[];
    int j = 0;
    double pow = 1.0;
    while (j <= degree) {
    row = [...row, pow];
    pow = pow * xs[i];
    j = j + 1;
  }
    matrix = ([...matrix, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return matrix;
}

List<List<double>> transpose(List<List<double>> matrix) {
  int rows = matrix.length;
  int cols = matrix[0].length;
  int j = 0;
  List<List<double>> result = <List<double>>[];
  while (j < cols) {
    List<double> row = <double>[];
    int i = 0;
    while (i < rows) {
    row = [...row, matrix[i][j]];
    i = i + 1;
  }
    result = ([...result, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    j = j + 1;
  }
  return result;
}

List<List<double>> matmul(List<List<double>> A, List<List<double>> B) {
  int n = A.length;
  int m = A[0].length;
  int p = B[0].length;
  int i = 0;
  List<List<double>> result = <List<double>>[];
  while (i < n) {
    List<double> row = <double>[];
    int k = 0;
    while (k < p) {
    double sum = 0.0;
    int j = 0;
    while (j < m) {
    sum = sum + A[i][j] * B[j][k];
    j = j + 1;
  }
    row = [...row, sum];
    k = k + 1;
  }
    result = ([...result, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<double> matvec_mul(List<List<double>> A, List<double> v) {
  int n = A.length;
  int m = A[0].length;
  int i = 0;
  List<double> result = <double>[];
  while (i < n) {
    double sum = 0.0;
    int j = 0;
    while (j < m) {
    sum = sum + A[i][j] * v[j];
    j = j + 1;
  }
    result = [...result, sum];
    i = i + 1;
  }
  return result;
}

List<double> gaussian_elimination(List<List<double>> A, List<double> b) {
  int n = A.length;
  List<List<double>> M = <List<double>>[];
  int i = 0;
  while (i < n) {
    M = ([...M, [...A[i], b[i]]] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int k = 0;
  while (k < n) {
    int j = k + 1;
    while (j < n) {
    double factor = M[j][k] / M[k][k];
    List<double> rowj = M[j];
    List<double> rowk = M[k];
    int l = k;
    while (l <= n) {
    while (rowj.length <= l) { rowj.add(0); } rowj[l] = rowj[l] - factor * rowk[l];
    l = l + 1;
  }
    while (M.length <= j) { M.add(<double>[]); } M[j] = rowj;
    j = j + 1;
  }
    k = k + 1;
  }
  List<double> x = <double>[];
  int t = 0;
  while (t < n) {
    x = [...x, 0.0];
    t = t + 1;
  }
  int i2 = n - 1;
  while (i2 >= 0) {
    double sum = M[i2][n];
    int j2 = i2 + 1;
    while (j2 < n) {
    sum = sum - M[i2][j2] * x[j2];
    j2 = j2 + 1;
  }
    while (x.length <= i2) { x.add(0); } x[i2] = sum / M[i2][i2];
    i2 = i2 - 1;
  }
  return x;
}

List<double> predict(List<double> xs, List<double> coeffs) {
  int i = 0;
  List<double> result = <double>[];
  while (i < xs.length) {
    double x = xs[i];
    int j = 0;
    double pow = 1.0;
    double sum = 0.0;
    while (j < coeffs.length) {
    sum = sum + coeffs[j] * pow;
    pow = pow * x;
    j = j + 1;
  }
    result = [...result, sum];
    i = i + 1;
  }
  return result;
}

List<double> xs = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
List<double> ys = <double>[];
int i = 0;
List<List<double>> X = design_matrix(xs, 3);
List<List<double>> Xt = transpose(X);
List<List<double>> XtX = matmul(Xt, X);
List<double> Xty = matvec_mul(Xt, ys);
List<double> coeffs = gaussian_elimination(XtX, Xty);
void main() {
  while (i < xs.length) {
    double x = xs[i];
    ys = [...ys, x * x * x - 2.0 * x * x + 3.0 * x - 5.0];
    i = i + 1;
  }
  print((coeffs).toString());
  print((predict([-1.0], coeffs)).toString());
  print((predict([-2.0], coeffs)).toString());
  print((predict([6.0], coeffs)).toString());
}
