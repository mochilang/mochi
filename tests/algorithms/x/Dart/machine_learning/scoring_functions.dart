// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

double absf(double x) {
  if (x < 0.0) {
    return 0.0 - x;
  }
  return x;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double ln_series(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int n = 1;
  while (n <= 19) {
    sum = sum + term / ((n).toDouble());
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * sum;
}

double ln(double x) {
  double y = x;
  int k = 0;
  while (y >= 10.0) {
    y = y / 10.0;
    k = k + 1;
  }
  while (y < 1.0) {
    y = y * 10.0;
    k = k - 1;
  }
  return ln_series(y) + ((k).toDouble()) * ln_series(10.0);
}

double mae(List<double> predict, List<double> actual) {
  double sum = 0.0;
  int i = 0;
  while (i < predict.length) {
    double diff = predict[i] - actual[i];
    sum = sum + absf(diff);
    i = i + 1;
  }
  return sum / ((predict.length).toDouble());
}

double mse(List<double> predict, List<double> actual) {
  double sum = 0.0;
  int i = 0;
  while (i < predict.length) {
    double diff = predict[i] - actual[i];
    sum = sum + diff * diff;
    i = i + 1;
  }
  return sum / ((predict.length).toDouble());
}

double rmse(List<double> predict, List<double> actual) {
  return sqrtApprox(mse(predict, actual));
}

double rmsle(List<double> predict, List<double> actual) {
  double sum = 0.0;
  int i = 0;
  while (i < predict.length) {
    double lp = ln(predict[i] + 1.0);
    double la = ln(actual[i] + 1.0);
    double diff = lp - la;
    sum = sum + diff * diff;
    i = i + 1;
  }
  return sqrtApprox(sum / ((predict.length).toDouble()));
}

double mbd(List<double> predict, List<double> actual) {
  double diff_sum = 0.0;
  double actual_sum = 0.0;
  int i = 0;
  while (i < predict.length) {
    diff_sum = diff_sum + (predict[i] - actual[i]);
    actual_sum = actual_sum + actual[i];
    i = i + 1;
  }
  double n = (predict.length).toDouble();
  double numerator = diff_sum / n;
  double denominator = actual_sum / n;
  return numerator / denominator * 100.0;
}

double manual_accuracy(List<double> predict, List<double> actual) {
  int correct = 0;
  int i = 0;
  while (i < predict.length) {
    if (predict[i] == actual[i]) {
    correct = correct + 1;
  }
    i = i + 1;
  }
  return ((correct).toDouble()) / ((predict.length).toDouble());
}

void _main() {
  List<double> actual = [1.0, 2.0, 3.0];
  List<double> predict = [1.0, 4.0, 3.0];
  print(_str(mae(predict, actual)));
  print(_str(mse(predict, actual)));
  print(_str(rmse(predict, actual)));
  print(_str(rmsle([10.0, 2.0, 30.0], [10.0, 10.0, 30.0])));
  print(_str(mbd([2.0, 3.0, 4.0], [1.0, 2.0, 3.0])));
  print(_str(mbd([0.0, 1.0, 1.0], [1.0, 2.0, 3.0])));
  print(_str(manual_accuracy(predict, actual)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
