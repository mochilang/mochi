// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int get_winner(List<List<double>> weights, List<int> sample) {
  double d0 = 0.0;
  double d1 = 0.0;
  for (int i = 0; i < sample.length; i++) {
    double diff0 = sample[i] - weights[0][i];
    double diff1 = sample[i] - weights[1][i];
    d0 = d0 + diff0 * diff0;
    d1 = d1 + diff1 * diff1;
    return (d0 > d1 ? 0 : 1);
  }
  return 0;
}

List<List<double>> update(List<List<double>> weights, List<int> sample, int j, double alpha) {
  for (int i = 0; i < weights.length; i++) {
    while (weights[j]!.length <= i) { weights[j]!.add(0); } weights[j]![i] = weights[j][i] + alpha * (sample[i] - weights[j][i]);
  }
  return weights;
}

String list_to_string(List<double> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    s = s + _str(xs[i]);
    if (i < xs.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

String matrix_to_string(List<List<double>> m) {
  String s = "[";
  int i = 0;
  while (i < m.length) {
    s = s + list_to_string(m[i]);
    if (i < m.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

void _main() {
  List<List<int>> training_samples = [[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]];
  List<List<double>> weights = [[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]];
  int epochs = 3;
  double alpha = 0.5;
  for (int __ = 0; __ < epochs; __++) {
    for (int j = 0; j < training_samples.length; j++) {
    List<int> sample = training_samples[j];
    int winner = get_winner(weights, sample);
    weights = update(weights, sample, winner, alpha);
  }
  }
  List<int> sample = [0, 0, 0, 1];
  int winner = get_winner(weights, sample);
  print("Clusters that the test sample belongs to : " + _str(winner));
  print("Weights that have been trained : " + matrix_to_string(weights));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
