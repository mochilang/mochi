// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class Stump {
  int feature;
  double threshold;
  double left;
  double right;
  Stump({required this.feature, required this.threshold, required this.left, required this.right});
}

double mean(List<double> xs) {
  double sum = 0.0;
  int i = 0;
  while (i < xs.length) {
    sum = sum + xs[i];
    i = i + 1;
  }
  return sum / (xs.length * 1.0);
}

double stump_predict(Stump s, List<double> x) {
  if (x[s.feature] < s.threshold) {
    return s.left;
  }
  return s.right;
}

Stump train_stump(List<List<double>> features, List<double> residuals) {
  int best_feature = 0;
  double best_threshold = 0.0;
  double best_error = 1000000000.0;
  double best_left = 0.0;
  double best_right = 0.0;
  int num_features = features[0].length;
  int f = 0;
  while (f < num_features) {
    int i = 0;
    while (i < features.length) {
    double threshold = features[i][f];
    List<double> left = <double>[];
    List<double> right = <double>[];
    int j = 0;
    while (j < features.length) {
    if (features[j][f] < threshold) {
    left = List<double>.from([...left, ...[residuals[j]]]);
  } else {
    right = List<double>.from([...right, ...[residuals[j]]]);
  }
    j = j + 1;
  }
    if (left.length != 0 && right.length != 0) {
    double left_mean = mean(left);
    double right_mean = mean(right);
    double err = 0.0;
    j = 0;
    while (j < features.length) {
    double pred = (features[j][f] < threshold ? left_mean : right_mean);
    double diff = residuals[j] - pred;
    err = err + diff * diff;
    j = j + 1;
  };
    if (err < best_error) {
    best_error = err;
    best_feature = f;
    best_threshold = threshold;
    best_left = left_mean;
    best_right = right_mean;
  };
  }
    i = i + 1;
  }
    f = f + 1;
  }
  return Stump(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right);
}

List<Stump> boost(List<List<double>> features, List<int> targets, int rounds) {
  List<Stump> model = <Stump>[];
  List<double> preds = <double>[];
  int i = 0;
  while (i < targets.length) {
    preds = List<double>.from([...preds, ...[0.0]]);
    i = i + 1;
  }
  int r = 0;
  while (r < rounds) {
    List<double> residuals = <double>[];
    int j = 0;
    while (j < targets.length) {
    residuals = List<double>.from([...residuals, ...[targets[j] - preds[j]]]);
    j = j + 1;
  }
    Stump stump = train_stump(features, residuals);
    model = List<Stump>.from([...model, ...[stump]]);
    j = 0;
    while (j < preds.length) {
    while (preds.length <= j) { preds.add(0); } preds[j] = preds[j] + stump_predict(stump, features[j]);
    j = j + 1;
  }
    r = r + 1;
  }
  return model;
}

double predict(List<Stump> model, List<double> x) {
  double score = 0.0;
  int i = 0;
  while (i < model.length) {
    Stump s = model[i];
    if (x[s.feature] < s.threshold) {
    score = score + s.left;
  } else {
    score = score + s.right;
  }
    i = i + 1;
  }
  return score;
}

void _main() {
  List<List<double>> features = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]];
  List<int> targets = [0, 0, 1, 1];
  List<Stump> model = boost(features, targets, 3);
  String out = "";
  int i = 0;
  while (i < features.length) {
    double s = predict(model, features[i]);
    int label = (s >= 0.5 ? 1 : 0);
    if (i == 0) {
    out = _str(label);
  } else {
    out = out + " " + _str(label);
  }
    i = i + 1;
  }
  print(out);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
