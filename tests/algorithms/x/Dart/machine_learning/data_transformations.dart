// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

double floor(double x) {
  int i = (x).toInt();
  if (((i).toDouble()) > x) {
    i = i - 1;
  }
  return (i).toDouble();
}

double pow10(int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double round(double x, int n) {
  double m = pow10(n);
  double y = (floor(x * m + 0.5)).toDouble();
  return y / m;
}

double sqrtApprox(double x) {
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double mean(List<double> data) {
  double total = 0.0;
  int i = 0;
  int n = data.length;
  while (i < n) {
    total = total + data[i];
    i = i + 1;
  }
  return total / ((n).toDouble());
}

double stdev(List<double> data) {
  int n = data.length;
  if (n <= 1) {
    _error("data length must be > 1");
  }
  double m = mean(data);
  double sum_sq = 0.0;
  int i = 0;
  while (i < n) {
    double diff = data[i] - m;
    sum_sq = sum_sq + diff * diff;
    i = i + 1;
  }
  return sqrtApprox(sum_sq / ((n - 1).toDouble()));
}

List<double> normalization(List<double> data, int ndigits) {
  double x_min = (data.reduce((a, b) => a < b ? a : b)).toDouble();
  double x_max = (data.reduce((a, b) => a > b ? a : b)).toDouble();
  double denom = x_max - x_min;
  List<double> result = <double>[];
  int i = 0;
  int n = data.length;
  while (i < n) {
    double norm = (data[i] - x_min) / denom;
    result = [...result, round(norm, ndigits)];
    i = i + 1;
  }
  return result;
}

List<double> standardization(List<double> data, int ndigits) {
  double mu = mean(data);
  double sigma = stdev(data);
  List<double> result = <double>[];
  int i = 0;
  int n = data.length;
  while (i < n) {
    double z = (data[i] - mu) / sigma;
    result = [...result, round(z, ndigits)];
    i = i + 1;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(normalization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)));
  print(_str(normalization([5.0, 10.0, 15.0, 20.0, 25.0], 3)));
  print(_str(standardization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)));
  print(_str(standardization([5.0, 10.0, 15.0, 20.0, 25.0], 3)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
