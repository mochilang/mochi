// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
int seed = 1;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

double random() {
  return ((rand()).toDouble()) / 2147483648.0;
}

double _mod(double x, double m) {
  return x - (((x / m).toInt()).toDouble()) * m;
}

double cos(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y4 = y2 * y2;
  double y6 = y4 * y2;
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double ln(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int n = 1;
  while (n <= 19) {
    sum = sum + term / ((n).toDouble());
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * sum;
}

List<double> gaussian_distribution(double mean, double std_dev, int instance_count) {
  List<double> res = <double>[];
  int i = 0;
  while (i < instance_count) {
    double u1 = random();
    double u2 = random();
    double r = sqrtApprox(-2.0 * ln(u1));
    double theta = TWO_PI * u2;
    double z = r * cos(theta);
    res = [...res, mean + z * std_dev];
    i = i + 1;
  }
  return res;
}

List<int> y_generator(int class_count, List<int> instance_count) {
  List<int> res = <int>[];
  int k = 0;
  while (k < class_count) {
    int i = 0;
    while (i < instance_count[k]) {
    res = [...res, k];
    i = i + 1;
  }
    k = k + 1;
  }
  return res;
}

double calculate_mean(int instance_count, List<double> items) {
  double total = 0.0;
  int i = 0;
  while (i < instance_count) {
    total = total + items[i];
    i = i + 1;
  }
  return total / ((instance_count).toDouble());
}

double calculate_probabilities(int instance_count, int total_count) {
  return ((instance_count).toDouble()) / ((total_count).toDouble());
}

double calculate_variance(List<List<double>> items, List<double> means, int total_count) {
  List<double> squared_diff = <double>[];
  int i = 0;
  while (i < items.length) {
    int j = 0;
    while (j < items[i].length) {
    double diff = items[i][j] - means[i];
    squared_diff = [...squared_diff, diff * diff];
    j = j + 1;
  }
    i = i + 1;
  }
  double sum_sq = 0.0;
  int k = 0;
  while (k < squared_diff.length) {
    sum_sq = sum_sq + squared_diff[k];
    k = k + 1;
  }
  int n_classes = means.length;
  return 1.0 / ((total_count - n_classes).toDouble()) * sum_sq;
}

List<int> predict_y_values(List<List<double>> x_items, List<double> means, double variance, List<double> probabilities) {
  List<int> results = <int>[];
  int i = 0;
  while (i < x_items.length) {
    int j = 0;
    while (j < x_items[i].length) {
    List<double> temp = <double>[];
    int k = 0;
    while (k < x_items.length) {
    double discr = x_items[i][j] * (means[k] / variance) - means[k] * means[k] / (2.0 * variance) + ln(probabilities[k]);
    temp = [...temp, discr];
    k = k + 1;
  }
    int max_idx = 0;
    double max_val = temp[0];
    int t = 1;
    while (t < temp.length) {
    if (temp[t] > max_val) {
    max_val = temp[t];
    max_idx = t;
  }
    t = t + 1;
  }
    results = [...results, max_idx];
    j = j + 1;
  }
    i = i + 1;
  }
  return results;
}

double accuracy(List<int> actual_y, List<int> predicted_y) {
  int correct = 0;
  int i = 0;
  while (i < actual_y.length) {
    if (actual_y[i] == predicted_y[i]) {
    correct = correct + 1;
  }
    i = i + 1;
  }
  return ((correct).toDouble()) / ((actual_y.length).toDouble()) * 100.0;
}

void _main() {
  seed = 1;
  List<int> counts = [20, 20, 20];
  List<double> means = [5.0, 10.0, 15.0];
  double std_dev = 1.0;
  List<List<double>> x = <List<double>>[];
  int i = 0;
  while (i < counts.length) {
    x = ([...x, gaussian_distribution(means[i], std_dev, counts[i])] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  List<int> y = y_generator(counts.length, counts);
  List<double> actual_means = <double>[];
  i = 0;
  while (i < counts.length) {
    actual_means = [...actual_means, calculate_mean(counts[i], x[i])];
    i = i + 1;
  }
  int total_count = 0;
  i = 0;
  while (i < counts.length) {
    total_count = total_count + counts[i];
    i = i + 1;
  }
  List<double> probabilities = <double>[];
  i = 0;
  while (i < counts.length) {
    probabilities = [...probabilities, calculate_probabilities(counts[i], total_count)];
    i = i + 1;
  }
  double variance = calculate_variance(x, actual_means, total_count);
  List<int> predicted = predict_y_values(x, actual_means, variance, probabilities);
  print(predicted);
  print(accuracy(y, predicted));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
