// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Dual {
  double value;
  double deriv;
  Dual({required this.value, required this.deriv});
}

Dual dual(double v, double d) {
  return Dual(value: v, deriv: d);
}

double pow_float(double base, int exp) {
  double res = 1.0;
  int i = 0;
  while (i < exp) {
    res = res * base;
    i = i + 1;
  }
  return res;
}

Dual add(Dual a, Dual b) {
  return Dual(value: a.value + b.value, deriv: a.deriv + b.deriv);
}

Dual sub(Dual a, Dual b) {
  return Dual(value: a.value - b.value, deriv: a.deriv - b.deriv);
}

Dual mul(Dual a, Dual b) {
  return Dual(value: a.value * b.value, deriv: a.deriv * b.value + b.deriv * a.value);
}

Dual div(Dual a, Dual b) {
  return Dual(value: a.value / b.value, deriv: (a.deriv * b.value - b.deriv * a.value) / (b.value * b.value));
}

Dual power(Dual a, int p) {
  return Dual(value: pow_float(a.value, p), deriv: 1.0 * p * pow_float(a.value, p - 1) * a.deriv);
}

void _main() {
  Dual a = dual(2.0, 1.0);
  Dual b = dual(1.0, 0.0);
  Dual c = add(a, b);
  Dual d = mul(a, b);
  Dual e = div(c, d);
  print((e.deriv).toString());
  Dual x = dual(2.0, 1.0);
  Dual y = power(x, 3);
  print((y.deriv).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
