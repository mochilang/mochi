// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
double _mod(double x, double m) {
  return x - (((x / m).toInt()).toDouble()) * m;
}

double sin(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y3 = y2 * y;
  double y5 = y3 * y2;
  double y7 = y5 * y2;
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

int seed = 123456789;
double rand() {
  seed = (1103515245 * seed + 12345) % 2147483648;
  return ((seed).toDouble()) / 2147483648.0;
}

double mean(List<double> vals) {
  double sum = 0.0;
  int i = 0;
  while (i < vals.length) {
    sum = sum + vals[i];
    i = i + 1;
  }
  return sum / vals.length;
}

double mean_squared_error(List<double> labels, double prediction) {
  double total = 0.0;
  int i = 0;
  while (i < labels.length) {
    double diff = labels[i] - prediction;
    total = total + diff * diff;
    i = i + 1;
  }
  return total / labels.length;
}

dynamic train_tree(List<double> x, List<double> y, int depth, int min_leaf_size) {
  if (x.length < 2 * min_leaf_size) {
    return {"__name": "Leaf", "prediction": mean(y)};
  }
  if (depth == 1) {
    return {"__name": "Leaf", "prediction": mean(y)};
  }
  int best_split = 0;
  double min_error = mean_squared_error(x, mean(y)) * 2.0;
  int i = 0;
  while (i < x.length) {
    if (x.sublist(0, i).length < min_leaf_size) {
    i = i;
  } else {
    if (x.sublist(i, x.length).length < min_leaf_size) {
    i = i;
  } else {
    double err_left = mean_squared_error(x.sublist(0, i), mean(y.sublist(0, i)));
    double err_right = mean_squared_error(x.sublist(i, x.length), mean(y.sublist(i, y.length)));
    double err = err_left + err_right;
    if (err < min_error) {
    best_split = i;
    min_error = err;
  };
  };
  }
    i = i + 1;
  }
  if (best_split != 0) {
    List<double> left_x = x.sublist(0, best_split);
    List<double> left_y = y.sublist(0, best_split);
    List<double> right_x = x.sublist(best_split, x.length);
    List<double> right_y = y.sublist(best_split, y.length);
    double boundary = x[best_split];
    dynamic left_tree = train_tree(left_x, left_y, depth - 1, min_leaf_size);
    dynamic right_tree = train_tree(right_x, right_y, depth - 1, min_leaf_size);
    return {"__name": "Branch", "decision_boundary": boundary, "left": left_tree, "right": right_tree};
  }
  return {"__name": "Leaf", "prediction": mean(y)};
}

double predict(dynamic tree, double value) {
  return (tree["__name"] == "Leaf" ? tree["prediction"] : (tree["__name"] == "Branch" ? (value.compareTo(tree["decision_boundary"]) >= 0 ? predict(tree["right"], value) : predict(tree["left"], value)) : ""));
}

void _main() {
  List<double> x = <double>[];
  num v = -1.0;
  while (v < 1.0) {
    x = List<double>.from([...x, v]);
    v = v + 0.005;
  }
  List<double> y = <double>[];
  int i = 0;
  while (i < x.length) {
    y = [...y, sin(x[i])];
    i = i + 1;
  }
  dynamic tree = train_tree(x, y, 10, 10);
  List<double> test_cases = <double>[];
  i = 0;
  while (i < 10) {
    test_cases = [...test_cases, rand() * 2.0 - 1.0];
    i = i + 1;
  }
  List<double> predictions = <double>[];
  i = 0;
  while (i < test_cases.length) {
    predictions = [...predictions, predict(tree, test_cases[i])];
    i = i + 1;
  }
  double sum_err = 0.0;
  i = 0;
  while (i < test_cases.length) {
    double diff = predictions[i] - test_cases[i];
    sum_err = sum_err + diff * diff;
    i = i + 1;
  }
  double avg_error = sum_err / test_cases.length;
  print("Test values: " + _str(test_cases));
  print("Predictions: " + _str(predictions));
  print("Average error: " + _str(avg_error));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
