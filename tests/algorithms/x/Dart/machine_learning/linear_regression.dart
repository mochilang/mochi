// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double dot(List<double> x, List<double> y) {
  double sum = 0.0;
  int i = 0;
  while (i < x.length) {
    sum = sum + x[i] * y[i];
    i = i + 1;
  }
  return sum;
}

List<double> run_steep_gradient_descent(List<List<double>> data_x, List<double> data_y, int len_data, double alpha, List<double> theta) {
  List<double> gradients = <double>[];
  int j = 0;
  while (j < theta.length) {
    gradients = [...gradients, 0.0];
    j = j + 1;
  }
  int i = 0;
  while (i < len_data) {
    double prediction = dot(theta, data_x[i]);
    double error = prediction - data_y[i];
    int k = 0;
    while (k < theta.length) {
    while (gradients.length <= k) { gradients.add(0); } gradients[k] = gradients[k] + error * data_x[i][k];
    k = k + 1;
  }
    i = i + 1;
  }
  List<double> t = <double>[];
  int g = 0;
  while (g < theta.length) {
    t = [...t, theta[g] - alpha / len_data * gradients[g]];
    g = g + 1;
  }
  return t;
}

double sum_of_square_error(List<List<double>> data_x, List<double> data_y, int len_data, List<double> theta) {
  double total = 0.0;
  int i = 0;
  while (i < len_data) {
    double prediction = dot(theta, data_x[i]);
    double diff = prediction - data_y[i];
    total = total + diff * diff;
    i = i + 1;
  }
  return total / (2.0 * len_data);
}

List<double> run_linear_regression(List<List<double>> data_x, List<double> data_y) {
  int iterations = 10;
  double alpha = 0.01;
  int no_features = data_x[0].length;
  int len_data = data_x.length;
  List<double> theta = <double>[];
  int i = 0;
  while (i < no_features) {
    theta = [...theta, 0.0];
    i = i + 1;
  }
  int iter = 0;
  while (iter < iterations) {
    theta = run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta);
    double error = sum_of_square_error(data_x, data_y, len_data, theta);
    print("At Iteration " + (iter + 1).toString() + " - Error is " + (error).toString());
    iter = iter + 1;
  }
  return theta;
}

double absf(double x) {
  if (x < 0.0) {
    return -x;
  } else {
    return x;
  }
}

double mean_absolute_error(List<double> predicted_y, List<double> original_y) {
  double total = 0.0;
  int i = 0;
  while (i < predicted_y.length) {
    double diff = absf(predicted_y[i] - original_y[i]);
    total = total + diff;
    i = i + 1;
  }
  return total / predicted_y.length;
}

List<List<double>> data_x = [[1.0, 1.0], [1.0, 2.0], [1.0, 3.0]];
List<double> data_y = [1.0, 2.0, 3.0];
List<double> theta = run_linear_regression(data_x, data_y);
int i = 0;
List<double> predicted_y = [3.0, -0.5, 2.0, 7.0];
List<double> original_y = [2.5, 0.0, 2.0, 8.0];
double mae = mean_absolute_error(predicted_y, original_y);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Resultant Feature vector :");
  while (i < theta.length) {
    print((theta[i]).toString());
    i = i + 1;
  }
  print("Mean Absolute Error : " + (mae).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
