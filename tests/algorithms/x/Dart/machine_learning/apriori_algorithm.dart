// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Itemset {
  List<String> items;
  int support;
  Itemset({required this.items, required this.support});
}

List<List<String>> load_data() {
  return [["milk"], ["milk", "butter"], ["milk", "bread"], ["milk", "bread", "chips"]];
}

bool contains_string(List<String> xs, String s) {
  for (String v in xs) {
    if (v == s) {
    return true;
  }
  }
  return false;
}

bool is_subset(List<String> candidate, List<String> transaction) {
  for (String it in candidate) {
    if (!contains_string(transaction, it)) {
    return false;
  }
  }
  return true;
}

bool lists_equal(List<String> a, List<String> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

bool contains_list(List<List<String>> itemset, List<String> item) {
  for (List<String> l in itemset) {
    if (lists_equal(l, item)) {
    return true;
  }
  }
  return false;
}

int count_list(List<List<String>> itemset, List<String> item) {
  int c = 0;
  for (List<String> l in itemset) {
    if (lists_equal(l, item)) {
    c = c + 1;
  }
  }
  return c;
}

List<List<String>> slice_list(List<List<String>> xs, int start) {
  List<List<String>> res = <List<String>>[];
  int i = start;
  while (i < xs.length) {
    res = ([...res, xs[i]] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<List<String>>> combinations_lists(List<List<String>> xs, int k) {
  List<List<List<String>>> result = <List<List<String>>>[];
  if (k == 0) {
    result = [...result, []];
    return result;
  }
  int i = 0;
  while (i < xs.length) {
    List<String> head = xs[i];
    List<List<String>> tail = slice_list(xs, i + 1);
    List<List<List<String>>> tail_combos = combinations_lists(tail, k - 1);
    for (List<List<String>> combo in tail_combos) {
    List<List<String>> new_combo = <List<String>>[];
    new_combo = ([...new_combo, head] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    for (List<String> c in combo) {
    new_combo = ([...new_combo, c] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
  }
    result = ([...result, new_combo] as List).map((e) => ((e as List).map((e) => (List<String>.from(e) as List<String>)).toList() as List<List<String>>)).toList();
  }
    i = i + 1;
  }
  return result;
}

List<List<List<String>>> prune(List<List<String>> itemset, List<List<List<String>>> candidates, int length) {
  List<List<List<String>>> pruned = <List<List<String>>>[];
  for (List<List<String>> candidate in candidates) {
    bool is_subsequence = true;
    for (List<String> item in candidate) {
    if (!contains_list(itemset, item) || count_list(itemset, item) < length - 1) {
    is_subsequence = false;
    break;
  }
  }
    if (is_subsequence) {
    pruned = ([...pruned, candidate] as List).map((e) => ((e as List).map((e) => (List<String>.from(e) as List<String>)).toList() as List<List<String>>)).toList();
  }
  }
  return pruned;
}

List<String> sort_strings(List<String> xs) {
  List<String> res = <String>[];
  for (String s in xs) {
    res = [...res, s];
  }
  int i = 0;
  while (i < res.length) {
    int j = i + 1;
    while (j < res.length) {
    if (res[j].compareTo(res[i]) < 0) {
    String tmp = res[i];
    while (res.length <= i) { res.add(""); } res[i] = res[j];
    while (res.length <= j) { res.add(""); } res[j] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return res;
}

String itemset_to_string(List<String> xs) {
  String s = "[";
  int i = 0;
  while (i < xs.length) {
    if (i > 0) {
    s = s + ", ";
  }
    s = s + "'" + xs[i] + "'";
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<Itemset> apriori(List<List<String>> data, int min_support) {
  List<List<String>> itemset = <List<String>>[];
  for (List<String> transaction in data) {
    List<String> t = <String>[];
    for (String v in transaction) {
    t = [...t, v];
  }
    itemset = ([...itemset, t] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
  }
  List<Itemset> frequent = <Itemset>[];
  int length = 1;
  while (itemset.length > 0) {
    List<int> counts = <int>[];
    int idx = 0;
    while (idx < itemset.length) {
    counts = [...counts, 0];
    idx = idx + 1;
  }
    for (List<String> transaction in data) {
    int j = 0;
    while (j < itemset.length) {
    List<String> candidate = itemset[j];
    if (is_subset(candidate, transaction)) {
    while (counts.length <= j) { counts.add(0); } counts[j] = counts[j] + 1;
  }
    j = j + 1;
  }
  }
    List<List<String>> new_itemset = <List<String>>[];
    int k = 0;
    while (k < itemset.length) {
    if (counts[k] >= min_support) {
    new_itemset = ([...new_itemset, itemset[k]] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
  }
    k = k + 1;
  }
    itemset = new_itemset;
    int m = 0;
    while (m < itemset.length) {
    List<String> sorted_item = sort_strings(itemset[m]);
    frequent = [...frequent, Itemset(items: sorted_item, support: counts[m])];
    m = m + 1;
  }
    length = length + 1;
    List<List<List<String>>> combos = combinations_lists(itemset, length);
    itemset = (prune(itemset, combos, length) as List).map((e) => (List<String>.from(e) as List<String>)).toList();
  }
  return frequent;
}

List<Itemset> frequent_itemsets = apriori(load_data(), 2);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  for (Itemset fi in frequent_itemsets) {
    print(itemset_to_string(fi.items) + ": " + (fi.support).toString());
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
