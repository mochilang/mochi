// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool recursive_match(String text, String pattern) {
  if (pattern.length == 0) {
    return text.length == 0;
  }
  if (text.length == 0) {
    if (pattern.length >= 2 && _substr(pattern, pattern.length - 1, pattern.length) == "*") {
    return recursive_match(text, _substr(pattern, 0, pattern.length - 2));
  };
    return false;
  }
  String last_text = _substr(text, text.length - 1, text.length);
  String last_pattern = _substr(pattern, pattern.length - 1, pattern.length);
  if (last_text == last_pattern || last_pattern == ".") {
    return recursive_match(_substr(text, 0, text.length - 1), _substr(pattern, 0, pattern.length - 1));
  }
  if (last_pattern == "*") {
    if (recursive_match(_substr(text, 0, text.length - 1), pattern)) {
    return true;
  };
    return recursive_match(text, _substr(pattern, 0, pattern.length - 2));
  }
  return false;
}

bool dp_match(String text, String pattern) {
  int m = text.length;
  int n = pattern.length;
  List<List<bool>> dp = <List<bool>>[];
  int i = 0;
  while (i <= m) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j <= n) {
    row = [...row, false];
    j = j + 1;
  }
    dp = ([...dp, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  while (dp[0]!.length <= 0) { dp[0]!.add(false); } dp[0]![0] = true;
  int j = 1;
  while (j <= n) {
    if (_substr(pattern, j - 1, j) == "*" && j >= 2) {
    if (dp[0][j - 2]) {
    while (dp[0]!.length <= j) { dp[0]!.add(false); } dp[0]![j] = true;
  };
  }
    j = j + 1;
  }
  i = 1;
  while (i <= m) {
    j = 1;
    while (j <= n) {
    String p_char = _substr(pattern, j - 1, j);
    String t_char = _substr(text, i - 1, i);
    if (p_char == "." || p_char == t_char) {
    if (dp[i - 1][j - 1]) {
    while (dp[i]!.length <= j) { dp[i]!.add(false); } dp[i]![j] = true;
  };
  } else {
    if (p_char == "*") {
    if (j >= 2) {
    if (dp[i][j - 2]) {
    while (dp[i]!.length <= j) { dp[i]!.add(false); } dp[i]![j] = true;
  };
    String prev_p = _substr(pattern, j - 2, j - 1);
    if (prev_p == "." || prev_p == t_char) {
    if (dp[i - 1][j]) {
    while (dp[i]!.length <= j) { dp[i]!.add(false); } dp[i]![j] = true;
  };
  };
  };
  } else {
    while (dp[i]!.length <= j) { dp[i]!.add(false); } dp[i]![j] = false;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return dp[m][n];
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_bool(recursive_match("abc", "a.c"));
  print_bool(recursive_match("abc", "af*.c"));
  print_bool(recursive_match("abc", "a.c*"));
  print_bool(recursive_match("abc", "a.c*d"));
  print_bool(recursive_match("aa", ".*"));
  print_bool(dp_match("abc", "a.c"));
  print_bool(dp_match("abc", "af*.c"));
  print_bool(dp_match("abc", "a.c*"));
  print_bool(dp_match("abc", "a.c*d"));
  print_bool(dp_match("aa", ".*"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
