// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v.abs() <= 9007199254740991 && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class KMeansResult {
  List<List<double>> centroids;
  List<int> assignments;
  KMeansResult({required this.centroids, required this.assignments});
}

double distance_sq(List<double> a, List<double> b) {
  double sum = 0.0;
  int i = 0;
  while (i < a.length) {
    double diff = a[i] - b[i];
    sum = sum + diff * diff;
    i = i + 1;
  }
  return sum;
}

List<double> mean(List<List<double>> vectors) {
  int dim = vectors[0].length;
  List<double> res = <double>[];
  int i = 0;
  while (i < dim) {
    double total = 0.0;
    int j = 0;
    while (j < vectors.length) {
    total = total + vectors[j][i];
    j = j + 1;
  }
    res = [...res, total / vectors.length];
    i = i + 1;
  }
  return res;
}

KMeansResult k_means(List<List<double>> vectors, int k, int iterations) {
  List<List<double>> centroids = <List<double>>[];
  int i = 0;
  while (i < k) {
    centroids = ([...centroids, vectors[i]] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  List<int> assignments = <int>[];
  int n = vectors.length;
  i = 0;
  while (i < n) {
    assignments = [...assignments, 0];
    i = i + 1;
  }
  int it = 0;
  while (it < iterations) {
    int v = 0;
    while (v < n) {
    int best = 0;
    double bestDist = distance_sq(vectors[v], centroids[0]);
    int c = 1;
    while (c < k) {
    double d = distance_sq(vectors[v], centroids[c]);
    if (d < bestDist) {
    bestDist = d;
    best = c;
  }
    c = c + 1;
  }
    while (assignments.length <= v) { assignments.add(0); } assignments[v] = best;
    v = v + 1;
  }
    int cIdx = 0;
    while (cIdx < k) {
    List<List<double>> cluster = <List<double>>[];
    int v2 = 0;
    while (v2 < n) {
    if (assignments[v2] == cIdx) {
    cluster = ([...cluster, vectors[v2]] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
    v2 = v2 + 1;
  }
    if (cluster.length > 0) {
    while (centroids.length <= cIdx) { centroids.add(<double>[]); } centroids[cIdx] = mean(cluster);
  }
    cIdx = cIdx + 1;
  }
    it = it + 1;
  }
  return KMeansResult(centroids: centroids, assignments: assignments);
}

void _main() {
  List<List<double>> vectors = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]];
  KMeansResult result = k_means(vectors, 2, 5);
  print(_str(result.centroids));
  print(_str(result.assignments));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
