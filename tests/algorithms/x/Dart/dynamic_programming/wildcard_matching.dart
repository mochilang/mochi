// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

List<bool> make_bool_list(int n) {
  List<bool> row = <bool>[];
  int i = 0;
  while (i < n) {
    row = [...row, false];
    i = i + 1;
  }
  return row;
}

List<List<bool>> make_bool_matrix(int rows, int cols) {
  List<List<bool>> matrix = <List<bool>>[];
  int i = 0;
  while (i < rows) {
    matrix = ([...matrix, make_bool_list(cols)] as List<dynamic>).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return matrix;
}

bool is_match(String s, String p) {
  int n = s.length;
  int m = p.length;
  List<List<bool>> dp = make_bool_matrix(n + 1, m + 1);
  while (dp[0]!.length <= 0) { dp[0]!.add(false); } dp[0]![0] = true;
  int j = 1;
  while (j <= m) {
    if (_substr(p, j - 1, j) == "*") {
    while (dp[0]!.length <= j) { dp[0]!.add(false); } dp[0]![j] = dp[0][j - 1];
  }
    j = j + 1;
  }
  int i = 1;
  while (i <= n) {
    int j2 = 1;
    while (j2 <= m) {
    String pc = _substr(p, j2 - 1, j2);
    String sc = _substr(s, i - 1, i);
    if (pc == sc || pc == "?") {
    while (dp[i]!.length <= j2) { dp[i]!.add(false); } dp[i]![j2] = dp[i - 1][j2 - 1];
  } else {
    if (pc == "*") {
    if (dp[i - 1][j2] || dp[i][j2 - 1]) {
    while (dp[i]!.length <= j2) { dp[i]!.add(false); } dp[i]![j2] = true;
  };
  };
  }
    j2 = j2 + 1;
  }
    i = i + 1;
  }
  return dp[n][m];
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_bool(is_match("abc", "a*c"));
  print_bool(is_match("abc", "a*d"));
  print_bool(is_match("baaabab", "*****ba*****ab"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
