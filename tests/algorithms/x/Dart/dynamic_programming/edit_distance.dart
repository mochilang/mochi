// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int min3(int a, int b, int c) {
  int m = a;
  if (b < m) {
    m = b;
  }
  if (c < m) {
    m = c;
  }
  return m;
}

int helper_top_down(String word1, String word2, List<List<int>> dp, int i, int j) {
  if (i < 0) {
    return j + 1;
  }
  if (j < 0) {
    return i + 1;
  }
  if (dp[i][j] != 0 - 1) {
    return dp[i][j];
  }
  if (_substr(word1, i, i + 1) == _substr(word2, j, j + 1)) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = helper_top_down(word1, word2, dp, i - 1, j - 1);
  } else {
    int insert = helper_top_down(word1, word2, dp, i, j - 1);
    int delete = helper_top_down(word1, word2, dp, i - 1, j);
    int replace = helper_top_down(word1, word2, dp, i - 1, j - 1);
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = 1 + min3(insert, delete, replace);
  }
  return dp[i][j];
}

int min_dist_top_down(String word1, String word2) {
  int m = word1.length;
  int n = word2.length;
  List<List<int>> dp = <List<int>>[];
  for (int __ = 0; __ < m; __++) {
    List<int> row = <int>[];
    for (int _2 = 0; _2 < n; _2++) {
    row = [...row, 0 - 1];
  }
    dp = ([...dp, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  return helper_top_down(word1, word2, dp, m - 1, n - 1);
}

int min_dist_bottom_up(String word1, String word2) {
  int m = word1.length;
  int n = word2.length;
  List<List<int>> dp = <List<int>>[];
  for (int __ = 0; __ < m + 1; __++) {
    List<int> row = <int>[];
    for (int _2 = 0; _2 < n + 1; _2++) {
    row = [...row, 0];
  }
    dp = ([...dp, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  for (int i = 0; i < m + 1; i++) {
    for (int j = 0; j < n + 1; j++) {
    if (i == 0) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = j;
  } else {
    if (j == 0) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = i;
  } else {
    if (_substr(word1, i - 1, i) == _substr(word2, j - 1, j)) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = dp[i - 1][j - 1];
  } else {
    int insert = dp[i][j - 1];
    int delete = dp[i - 1][j];
    int replace = dp[i - 1][j - 1];
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = 1 + min3(insert, delete, replace);
  };
  };
  }
  }
  }
  return dp[m][n];
}

void main() {
  print(_str(min_dist_top_down("intention", "execution")));
  print(_str(min_dist_top_down("intention", "")));
  print(_str(min_dist_top_down("", "")));
  print(_str(min_dist_bottom_up("intention", "execution")));
  print(_str(min_dist_bottom_up("intention", "")));
  print(_str(min_dist_bottom_up("", "")));
}
