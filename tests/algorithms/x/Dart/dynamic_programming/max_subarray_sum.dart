// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

double max_subarray_sum(List<double> nums, bool allow_empty) {
  if (nums.length == 0) {
    return 0.0;
  }
  double max_sum = 0.0;
  double curr_sum = 0.0;
  if (allow_empty) {
    max_sum = 0.0;
    curr_sum = 0.0;
    int i = 0;
    while (i < nums.length) {
    double _num = nums[i];
    double temp = curr_sum + _num;
    curr_sum = (temp > 0.0 ? temp : 0.0);
    if (curr_sum > max_sum) {
    max_sum = curr_sum;
  }
    i = i + 1;
  };
  } else {
    max_sum = nums[0];
    curr_sum = nums[0];
    int i = 1;
    while (i < nums.length) {
    double _num = nums[i];
    double temp = curr_sum + _num;
    curr_sum = (temp > _num ? temp : _num);
    if (curr_sum > max_sum) {
    max_sum = curr_sum;
  }
    i = i + 1;
  };
  }
  return max_sum;
}

List<double> empty = <double>[];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(max_subarray_sum([2.0, 8.0, 9.0], false)));
  print(_str(max_subarray_sum([0.0, 0.0], false)));
  print(_str(max_subarray_sum(List<double>.from([-1.0, 0.0, 1.0]), false)));
  print(_str(max_subarray_sum(List<double>.from([1.0, 2.0, 3.0, 4.0, -2.0]), false)));
  print(_str(max_subarray_sum(List<double>.from([-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0]), false)));
  print(_str(max_subarray_sum(List<double>.from([2.0, 3.0, -9.0, 8.0, -2.0]), false)));
  print(_str(max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], false)));
  print(_str(max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], true)));
  print(_str(max_subarray_sum(empty, false)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
