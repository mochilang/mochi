// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class MatrixChainResult {
  List<List<int>> matrix;
  List<List<int>> solution;
  MatrixChainResult({required this.matrix, required this.solution});
}

List<List<int>> make_2d(int n) {
  List<List<int>> res = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return res;
}

MatrixChainResult matrix_chain_order(List<int> arr) {
  int n = arr.length;
  List<List<int>> m = make_2d(n);
  List<List<int>> s = make_2d(n);
  int chain_length = 2;
  while (chain_length < n) {
    int a = 1;
    while (a < n - chain_length + 1) {
    int b = a + chain_length - 1;
    while (m[a]!.length <= b) { m[a]!.add(0); } m[a]![b] = 1000000000;
    int c = a;
    while (c < b) {
    int cost = m[a][c] + m[c + 1][b] + arr[a - 1] * arr[c] * arr[b];
    if (cost < m[a][b]) {
    while (m[a]!.length <= b) { m[a]!.add(0); } m[a]![b] = cost;
    while (s[a]!.length <= b) { s[a]!.add(0); } s[a]![b] = c;
  }
    c = c + 1;
  }
    a = a + 1;
  }
    chain_length = chain_length + 1;
  }
  return MatrixChainResult(matrix: m, solution: s);
}

String optimal_parenthesization(List<List<int>> s, int i, int j) {
  if (i == j) {
    return "A" + _str(i);
  } else {
    String left = optimal_parenthesization(s, i, s[i][j]);
    String right = optimal_parenthesization(s, s[i][j] + 1, j);
    return "( " + left + " " + right + " )";
  }
}

void _main() {
  List<int> arr = [30, 35, 15, 5, 10, 20, 25];
  int n = arr.length;
  MatrixChainResult res = matrix_chain_order(arr);
  List<List<int>> m = res.matrix;
  List<List<int>> s = res.solution;
  print("No. of Operation required: " + _str(m[1][n - 1]));
  String seq = optimal_parenthesization(s, 1, n - 1);
  print(seq);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
