// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int ceil_index(List<int> v, int left, int right, int key) {
  int l = left;
  int r = right;
  while (r - l > 1) {
    int middle = (l + r) ~/ 2;
    if (v[middle] >= key) {
    r = middle;
  } else {
    l = middle;
  }
  }
  return r;
}

int longest_increasing_subsequence_length(List<int> v) {
  if (v.length == 0) {
    return 0;
  }
  List<int> tail = <int>[];
  int i = 0;
  while (i < v.length) {
    tail = [...tail, 0];
    i = i + 1;
  }
  int length = 1;
  while (tail.length <= 0) { tail.add(0); } tail[0] = v[0];
  int j = 1;
  while (j < v.length) {
    if (v[j] < tail[0]) {
    while (tail.length <= 0) { tail.add(0); } tail[0] = v[j];
  } else {
    if (v[j] > tail[length - 1]) {
    while (tail.length <= length) { tail.add(0); } tail[length] = v[j];
    length = length + 1;
  } else {
    int idx = ceil_index(tail, -1, length - 1, v[j]);
    while (tail.length <= idx) { tail.add(0); } tail[idx] = v[j];
  };
  }
    j = j + 1;
  }
  return length;
}

void _main() {
  List<int> example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6];
  List<int> example2 = [];
  List<int> example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
  List<int> example4 = [5, 4, 3, 2, 1];
  print(longest_increasing_subsequence_length(example1));
  print(longest_increasing_subsequence_length(example2));
  print(longest_increasing_subsequence_length(example3));
  print(longest_increasing_subsequence_length(example4));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
