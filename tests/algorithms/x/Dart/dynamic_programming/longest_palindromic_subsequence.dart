// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String reverse(String s) {
  String result = "";
  int i = s.length - 1;
  while (i >= 0) {
    result = result + _substr(s, i, i + 1);
    i = i - 1;
  }
  return result;
}

int max_int(int a, int b) {
  if (a > b) {
    return a;
  }
  return b;
}

int longest_palindromic_subsequence(String s) {
  String rev = reverse(s);
  int n = s.length;
  int m = rev.length;
  List<List<int>> dp = <List<int>>[];
  int i = 0;
  while (i <= n) {
    List<int> row = <int>[];
    int j = 0;
    while (j <= m) {
    row = [...row, 0];
    j = j + 1;
  }
    dp = ([...dp, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = 1;
  while (i <= n) {
    int j = 1;
    while (j <= m) {
    String a_char = _substr(s, i - 1, i);
    String b_char = _substr(rev, j - 1, j);
    if (a_char == b_char) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = 1 + dp[i - 1][j - 1];
  } else {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = max_int(dp[i - 1][j], dp[i][j - 1]);
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return dp[n][m];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((longest_palindromic_subsequence("bbbab")).toString());
  print((longest_palindromic_subsequence("bbabcbcab")).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
