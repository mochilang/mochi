// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<String>> allConstruct(String target, List<String> wordBank) {
  int tableSize = target.length + 1;
  List<List<List<String>>> table = <List<List<String>>>[];
  int idx = 0;
  while (idx < tableSize) {
    List<List<String>> empty = <List<String>>[];
    table = ([...table, empty] as List).map((e) => ((e as List).map((e) => (List<String>.from(e) as List<String>)).toList() as List<List<String>>)).toList();
    idx = idx + 1;
  }
  List<String> base = <String>[];
  while (table.length <= 0) { table.add(<List<String>>[]); } table[0] = [base];
  int i = 0;
  while (i < tableSize) {
    if (table[i].length != 0) {
    int w = 0;
    while (w < wordBank.length) {
    String word = wordBank[w];
    int wordLen = word.length;
    if (_substr(target, i, i + wordLen) == word) {
    int k = 0;
    while (k < table[i].length) {
    List<String> way = table[i][k];
    List<String> combination = <String>[];
    int m = 0;
    while (m < way.length) {
    combination = [...combination, way[m]];
    m = m + 1;
  }
    combination = [...combination, word];
    int nextIndex = i + wordLen;
    while (table.length <= nextIndex) { table.add(<List<String>>[]); } table[nextIndex] = ([...table[nextIndex], combination] as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    k = k + 1;
  };
  }
    w = w + 1;
  };
  }
    i = i + 1;
  }
  return table[target.length];
}

void main() {
  print(_str(allConstruct("jwajalapa", ["jwa", "j", "w", "a", "la", "lapa"])));
  print(_str(allConstruct("rajamati", ["s", "raj", "amat", "raja", "ma", "i", "t"])));
  print(_str(allConstruct("hexagonosaurus", ["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"])));
}
