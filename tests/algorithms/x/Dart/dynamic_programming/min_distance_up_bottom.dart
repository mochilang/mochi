// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int min3(int a, int b, int c) {
  int m = a;
  if (b < m) {
    m = b;
  }
  if (c < m) {
    m = c;
  }
  return m;
}

int helper(String word1, String word2, List<List<int>> cache, int i, int j, int len1, int len2) {
  if (i >= len1) {
    return len2 - j;
  }
  if (j >= len2) {
    return len1 - i;
  }
  if (cache[i][j] != 0 - 1) {
    return cache[i][j];
  }
  int diff = 0;
  if (_substr(word1, i, i + 1) != _substr(word2, j, j + 1)) {
    diff = 1;
  }
  int delete_cost = 1 + helper(word1, word2, cache, i + 1, j, len1, len2);
  int insert_cost = 1 + helper(word1, word2, cache, i, j + 1, len1, len2);
  int replace_cost = diff + helper(word1, word2, cache, i + 1, j + 1, len1, len2);
  while (cache[i]!.length <= j) { cache[i]!.add(0); } cache[i]![j] = min3(delete_cost, insert_cost, replace_cost);
  return cache[i][j];
}

int min_distance_up_bottom(String word1, String word2) {
  int len1 = word1.length;
  int len2 = word2.length;
  List<List<int>> cache = <List<int>>[];
  for (int __ = 0; __ < len1; __++) {
    List<int> row = <int>[];
    for (int _2 = 0; _2 < len2; _2++) {
    row = [...row, 0 - 1];
  }
    cache = ([...cache, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  return helper(word1, word2, cache, 0, 0, len1, len2);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((min_distance_up_bottom("intention", "execution")).toString());
  print((min_distance_up_bottom("intention", "")).toString());
  print((min_distance_up_bottom("", "")).toString());
  print((min_distance_up_bottom("zooicoarchaeologist", "zoologist")).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
