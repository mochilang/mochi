// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class Fibonacci {
  List<int> sequence;
  Fibonacci({required this.sequence});
}

class FibGetResult {
  Fibonacci fib;
  List<int> values;
  FibGetResult({required this.fib, required this.values});
}

Fibonacci create_fibonacci() {
  return Fibonacci(sequence: [0, 1]);
}

FibGetResult fib_get(Fibonacci f, int index) {
  List<int> seq = f.sequence;
  while (seq.length < index) {
    int next = seq[seq.length - 1] + seq[seq.length - 2];
    seq = [...seq, next];
  }
  f.sequence = seq;
  List<int> result = <int>[];
  int i = 0;
  while (i < index) {
    result = [...result, seq[i]];
    i = i + 1;
  }
  return FibGetResult(fib: f, values: result);
}

void _main() {
  Fibonacci fib = create_fibonacci();
  FibGetResult res = fib_get(fib, 10);
  fib = res.fib;
  print(_str(res.values));
  res = fib_get(fib, 5);
  fib = res.fib;
  print(_str(res.values));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
