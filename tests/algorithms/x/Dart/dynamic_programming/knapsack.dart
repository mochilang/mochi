// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v.abs() <= 9007199254740991 && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class KnapsackResult {
  int value;
  List<int> subset;
  KnapsackResult({required this.value, required this.subset});
}

List<List<int>> f = <List<int>>[];
int max_int(int a, int b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

List<List<int>> init_f(int n, int w) {
  List<List<int>> table = <List<int>>[];
  int i = 0;
  while (i <= n) {
    List<int> row = <int>[];
    int j = 0;
    while (j <= w) {
    if (i == 0 || j == 0) {
    row = [...row, 0];
  } else {
    row = [...row, -1];
  }
    j = j + 1;
  }
    table = ([...table, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return table;
}

int mf_knapsack(int i, List<int> wt, List<int> val, int j) {
  if (f[i][j] < 0) {
    if (j < wt[i - 1]) {
    while (f[i]!.length <= j) { f[i]!.add(0); } f[i]![j] = mf_knapsack(i - 1, wt, val, j);
  } else {
    int without_item = mf_knapsack(i - 1, wt, val, j);
    int with_item = mf_knapsack(i - 1, wt, val, j - wt[i - 1]) + val[i - 1];
    while (f[i]!.length <= j) { f[i]!.add(0); } f[i]![j] = max_int(without_item, with_item);
  };
  }
  return f[i][j];
}

List<List<int>> create_matrix(int rows, int cols) {
  List<List<int>> matrix = <List<int>>[];
  int i = 0;
  while (i <= rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j <= cols) {
    row = [...row, 0];
    j = j + 1;
  }
    matrix = ([...matrix, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return matrix;
}

List<List<int>> knapsack(int w, List<int> wt, List<int> val, int n) {
  List<List<int>> dp = create_matrix(n, w);
  int i = 1;
  while (i <= n) {
    int w_ = 1;
    while (w_ <= w) {
    if (wt[i - 1] <= w_) {
    int include = val[i - 1] + dp[i - 1][w_ - wt[i - 1]];
    int exclude = dp[i - 1][w_];
    while (dp[i]!.length <= w_) { dp[i]!.add(0); } dp[i]![w_] = max_int(include, exclude);
  } else {
    while (dp[i]!.length <= w_) { dp[i]!.add(0); } dp[i]![w_] = dp[i - 1][w_];
  }
    w_ = w_ + 1;
  }
    i = i + 1;
  }
  return dp;
}

List<int> construct_solution(List<List<int>> dp, List<int> wt, int i, int j, List<int> optimal_set) {
  if (i > 0 && j > 0) {
    if (dp[i - 1][j] == dp[i][j]) {
    return construct_solution(dp, wt, i - 1, j, optimal_set);
  } else {
    List<int> with_prev = construct_solution(dp, wt, i - 1, j - wt[i - 1], optimal_set);
    return [...with_prev, i];
  };
  }
  return optimal_set;
}

KnapsackResult knapsack_with_example_solution(int w, List<int> wt, List<int> val) {
  int num_items = wt.length;
  List<List<int>> dp_table = knapsack(w, wt, val, num_items);
  int optimal_val = dp_table[num_items][w];
  List<int> subset = construct_solution(dp_table, wt, num_items, w, <int>[]);
  return KnapsackResult(value: optimal_val, subset: subset);
}

String format_set(List<int> xs) {
  String res = "{";
  int i = 0;
  while (i < xs.length) {
    res = res + _str(xs[i]);
    if (i + 1 < xs.length) {
    res = res + ", ";
  }
    i = i + 1;
  }
  res = res + "}";
  return res;
}

List<int> val_list = [3, 2, 4, 4];
List<int> wt_list = [4, 3, 2, 3];
int n = 4;
int w_cap = 6;
List<List<int>> dp_table = knapsack(w_cap, wt_list, val_list, n);
int optimal_solution = dp_table[n][w_cap];
KnapsackResult example = knapsack_with_example_solution(w_cap, wt_list, val_list);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  f = init_f(n, w_cap);
  print(optimal_solution);
  print(mf_knapsack(n, wt_list, val_list, w_cap));
  print("optimal_value = " + _str(example.value));
  print("An optimal subset corresponding to the optimal value " + format_set(example.subset));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
