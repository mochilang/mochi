// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<List<bool>> create_bool_matrix(int rows, int cols) {
  List<List<bool>> matrix = <List<bool>>[];
  int i = 0;
  while (i <= rows) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j <= cols) {
    row = [...row, false];
    j = j + 1;
  }
    matrix = ([...matrix, row] as List<dynamic>).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return matrix;
}

bool is_sum_subset(List<int> arr, int required_sum) {
  int arr_len = arr.length;
  List<List<bool>> subset = create_bool_matrix(arr_len, required_sum);
  int i = 0;
  while (i <= arr_len) {
    while (subset[i]!.length <= 0) { subset[i]!.add(false); } subset[i]![0] = true;
    i = i + 1;
  }
  int j = 1;
  while (j <= required_sum) {
    while (subset[0]!.length <= j) { subset[0]!.add(false); } subset[0]![j] = false;
    j = j + 1;
  }
  i = 1;
  while (i <= arr_len) {
    j = 1;
    while (j <= required_sum) {
    if (arr[i - 1] > j) {
    while (subset[i]!.length <= j) { subset[i]!.add(false); } subset[i]![j] = subset[i - 1][j];
  }
    if (arr[i - 1] <= j) {
    while (subset[i]!.length <= j) { subset[i]!.add(false); } subset[i]![j] = subset[i - 1][j] || subset[i - 1][j - arr[i - 1]];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return subset[arr_len][required_sum];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(is_sum_subset([2, 4, 6, 8], 5));
  print(is_sum_subset([2, 4, 6, 8], 14));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
