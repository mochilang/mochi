// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

Map<String, bool> build_set(List<String> words) {
  Map<String, bool> m = <String, bool>{};
  for (String w in words) {
    m[w] = true;
  }
  return m;
}

bool word_break(String s, List<String> words) {
  int n = s.length;
  Map<String, bool> dict = build_set(words);
  List<bool> dp = <bool>[];
  int i = 0;
  while (i <= n) {
    dp = [...dp, false];
    i = i + 1;
  }
  while (dp.length <= 0) { dp.add(false); } dp[0] = true;
  i = 1;
  while (i <= n) {
    int j = 0;
    while (j < i) {
    if (dp[j]) {
    String sub = _substr(s, j, i);
    if (dict.containsKey(sub)) {
    while (dp.length <= i) { dp.add(false); } dp[i] = true;
    j = i;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return dp[n];
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_bool(word_break("applepenapple", ["apple", "pen"]));
  print_bool(word_break("catsandog", ["cats", "dog", "sand", "and", "cat"]));
  print_bool(word_break("cars", ["car", "ca", "rs"]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
