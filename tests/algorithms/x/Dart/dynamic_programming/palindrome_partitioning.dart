// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int min_partitions(String s) {
  int n = s.length;
  List<int> cut = <int>[];
  int i = 0;
  while (i < n) {
    cut = [...cut, 0];
    i = i + 1;
  }
  List<List<bool>> pal = <List<bool>>[];
  i = 0;
  while (i < n) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j < n) {
    row = [...row, false];
    j = j + 1;
  }
    pal = ([...pal, row] as List<dynamic>).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    int mincut = i;
    int j = 0;
    while (j <= i) {
    if (_substr(s, i, i + 1) == _substr(s, j, j + 1) && (i - j < 2 || pal[j + 1][i - 1])) {
    while (pal[j]!.length <= i) { pal[j]!.add(false); } pal[j]![i] = true;
    if (j == 0) {
    mincut = 0;
  } else {
    int candidate = cut[j - 1] + 1;
    if (candidate < mincut) {
    mincut = candidate;
  };
  };
  }
    j = j + 1;
  }
    while (cut.length <= i) { cut.add(0); } cut[i] = mincut;
    i = i + 1;
  }
  return cut[n - 1];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(min_partitions("aab"));
  print(min_partitions("aaa"));
  print(min_partitions("ababbbabbababa"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
