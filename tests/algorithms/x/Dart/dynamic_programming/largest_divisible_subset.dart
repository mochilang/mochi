// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> sort_list(List<int> nums) {
  List<int> arr = nums;
  int i = 1;
  while (i < arr.length) {
    int key = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j] > key) {
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = arr[j];
    j = j - 1;
  }
    while (arr.length <= j + 1) { arr.add(0); } arr[j + 1] = key;
    i = i + 1;
  }
  return arr;
}

List<int> largest_divisible_subset(List<int> items) {
  if (items.length == 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> nums = sort_list(items);
  int n = nums.length;
  List<int> memo = <int>[];
  List<int> prev = <int>[];
  int i = 0;
  while (i < n) {
    memo = [...memo, 1];
    prev = [...prev, i];
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    int j = 0;
    while (j < i) {
    if ((nums[j] == 0 || nums[i] % nums[j] == 0) && memo[j] + 1 > memo[i]) {
    while (memo.length <= i) { memo.add(0); } memo[i] = memo[j] + 1;
    while (prev.length <= i) { prev.add(0); } prev[i] = j;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  int ans = 0 - 1;
  int last_index = 0 - 1;
  i = 0;
  while (i < n) {
    if (memo[i] > ans) {
    ans = memo[i];
    last_index = i;
  }
    i = i + 1;
  }
  if (last_index == 0 - 1) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> result = [nums[last_index]];
  while (prev[last_index] != last_index) {
    last_index = prev[last_index];
    result = [...result, nums[last_index]];
  }
  return result;
}

void _main() {
  List<int> items = [1, 16, 7, 8, 4];
  List<int> subset = largest_divisible_subset(items);
  print("The longest divisible subset of " + _str(items) + " is " + _str(subset) + ".");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
