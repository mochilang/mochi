// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String key(String state, String obs) {
  return state + "|" + obs;
}

List<String> viterbi(List<String> observations, List<String> states, Map<String, double> start_p, Map<String, Map<String, double>> trans_p, Map<String, Map<String, double>> emit_p) {
  if (observations.length == 0 || states.length == 0) {
    throw Exception("empty parameters");
  }
  Map<String, double> probs = <String, double>{};
  Map<String, String> ptrs = <String, String>{};
  String first_obs = observations[0];
  int i = 0;
  while (i < states.length) {
    String state = states[i];
    probs[key(state, first_obs)] = (start_p[state]!) * ((emit_p[state] ?? {})[first_obs]!);
    ptrs[key(state, first_obs)] = "";
    i = i + 1;
  }
  int t = 1;
  while (t < observations.length) {
    String obs = observations[t];
    int j = 0;
    while (j < states.length) {
    String state = states[j];
    double max_prob = -1.0;
    String prev_state = "";
    int k = 0;
    while (k < states.length) {
    String state0 = states[k];
    String obs0 = observations[t - 1];
    double prob_prev = probs[key(state0, obs0)]!;
    double prob = prob_prev * ((trans_p[state0] ?? {})[state]!) * ((emit_p[state] ?? {})[obs]!);
    if (prob > max_prob) {
    max_prob = prob;
    prev_state = state0;
  }
    k = k + 1;
  }
    probs[key(state, obs)] = max_prob;
    ptrs[key(state, obs)] = prev_state;
    j = j + 1;
  }
    t = t + 1;
  }
  List<String> path = <String>[];
  int n = 0;
  while (n < observations.length) {
    path = [...path, ""];
    n = n + 1;
  }
  String last_obs = observations[observations.length - 1];
  double max_final = -1.0;
  String last_state = "";
  int m = 0;
  while (m < states.length) {
    String state = states[m];
    double prob = probs[key(state, last_obs)]!;
    if (prob > max_final) {
    max_final = prob;
    last_state = state;
  }
    m = m + 1;
  }
  int last_index = observations.length - 1;
  while (path.length <= last_index) { path.add(""); } path[last_index] = last_state;
  int idx = last_index;
  while (idx > 0) {
    String obs = observations[idx];
    String prev = ptrs[key(path[idx], obs)]!;
    while (path.length <= idx - 1) { path.add(""); } path[idx - 1] = prev;
    idx = idx - 1;
  }
  return path;
}

String join_words(List<String> words) {
  String res = "";
  int i = 0;
  while (i < words.length) {
    if (i > 0) {
    res = res + " ";
  }
    res = res + words[i];
    i = i + 1;
  }
  return res;
}

List<String> observations = ["normal", "cold", "dizzy"];
List<String> states = ["Healthy", "Fever"];
Map<String, double> start_p = {"Healthy": 0.6, "Fever": 0.4};
Map<String, Map<String, double>> trans_p = {"Healthy": {"Healthy": 0.7, "Fever": 0.3}, "Fever": {"Healthy": 0.4, "Fever": 0.6}};
Map<String, Map<String, double>> emit_p = {"Healthy": {"normal": 0.5, "cold": 0.4, "dizzy": 0.1}, "Fever": {"normal": 0.1, "cold": 0.3, "dizzy": 0.6}};
List<String> result = viterbi(observations, states, start_p, trans_p, emit_p);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(join_words(result));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
