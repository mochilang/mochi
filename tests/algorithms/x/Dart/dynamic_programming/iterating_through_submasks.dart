// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int bitwise_and(int a, int b) {
  int result = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 || y > 0) {
    int abit = x % 2;
    int bbit = y % 2;
    if (abit == 1 && bbit == 1) {
    result = result + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return result;
}

List<int> list_of_submasks(int mask) {
  if (mask <= 0) {
    throw Exception("mask needs to be positive integer, your input " + (mask).toString());
  }
  List<int> all_submasks = <int>[];
  int submask = mask;
  while (submask != 0) {
    all_submasks = [...all_submasks, submask];
    submask = bitwise_and(submask - 1, mask);
  }
  return all_submasks;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((list_of_submasks(15)).toString());
  print((list_of_submasks(13)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
