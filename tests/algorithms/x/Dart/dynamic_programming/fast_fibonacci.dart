// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class FibPair {
  int fn;
  int fn1;
  FibPair({required this.fn, required this.fn1});
}

FibPair _fib(int n) {
  if (n == 0) {
    return FibPair(fn: 0, fn1: 1);
  }
  FibPair half = _fib(n ~/ 2);
  int a = half.fn;
  int b = half.fn1;
  int c = a * (b * 2 - a);
  int d = a * a + b * b;
  if (n % 2 == 0) {
    return FibPair(fn: c, fn1: d);
  }
  return FibPair(fn: d, fn1: c + d);
}

int fibonacci(int n) {
  if (n < 0) {
    throw Exception("Negative arguments are not supported");
  }
  FibPair res = _fib(n);
  return res.fn;
}

int i = 0;
void main() {
  while (i < 13) {
    print(_str(fibonacci(i)));
    i = i + 1;
  }
}
