// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> make_list(int len, int value) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < len) {
    arr = [...arr, value];
    i = i + 1;
  }
  return arr;
}

int count_recursive(List<int> array, int target) {
  if (target < 0) {
    return 0;
  }
  if (target == 0) {
    return 1;
  }
  int total = 0;
  int i = 0;
  while (i < array.length) {
    total = total + count_recursive(array, target - array[i]);
    i = i + 1;
  }
  return total;
}

int combination_sum_iv(List<int> array, int target) {
  return count_recursive(array, target);
}

int count_dp(List<int> array, int target, List<int> dp) {
  if (target < 0) {
    return 0;
  }
  if (target == 0) {
    return 1;
  }
  if (dp[target] > 0 - 1) {
    return dp[target];
  }
  int total = 0;
  int i = 0;
  while (i < array.length) {
    total = total + count_dp(array, target - array[i], dp);
    i = i + 1;
  }
  while (dp.length <= target) { dp.add(0); } dp[target] = total;
  return total;
}

int combination_sum_iv_dp_array(List<int> array, int target) {
  List<int> dp = make_list(target + 1, -1);
  return count_dp(array, target, dp);
}

int combination_sum_iv_bottom_up(int n, List<int> array, int target) {
  List<int> dp = make_list(target + 1, 0);
  while (dp.length <= 0) { dp.add(0); } dp[0] = 1;
  int i = 1;
  while (i <= target) {
    int j = 0;
    while (j < n) {
    if (i - array[j] >= 0) {
    while (dp.length <= i) { dp.add(0); } dp[i] = dp[i] + dp[i - array[j]];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return dp[target];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((combination_sum_iv([1, 2, 5], 5)).toString());
  print((combination_sum_iv_dp_array([1, 2, 5], 5)).toString());
  print((combination_sum_iv_bottom_up(3, [1, 2, 5], 5)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
