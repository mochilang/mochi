// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> copy_list(List<int> src) {
  List<int> result = <int>[];
  int i = 0;
  while (i < src.length) {
    result = [...result, src[i]];
    i = i + 1;
  }
  return result;
}

List<List<int>> subset_combinations(List<int> elements, int n) {
  int r = elements.length;
  if (n > r) {
    return ([] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  List<List<List<int>>> dp = <List<List<int>>>[];
  int i = 0;
  while (i <= r) {
    dp = [...dp, []];
    i = i + 1;
  }
  while (dp.length <= 0) { dp.add(<List<int>>[]); } dp[0] = [...dp[0], []];
  i = 1;
  while (i <= r) {
    int j = i;
    while (j > 0) {
    List<List<int>> prevs = dp[j - 1];
    int k = 0;
    while (k < prevs.length) {
    List<int> prev = prevs[k];
    List<int> comb = copy_list(prev);
    comb = [...comb, elements[i - 1]];
    while (dp.length <= j) { dp.add(<List<int>>[]); } dp[j] = ([...dp[j], comb] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    k = k + 1;
  }
    j = j - 1;
  }
    i = i + 1;
  }
  return dp[n];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(subset_combinations([10, 20, 30, 40], 2)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
