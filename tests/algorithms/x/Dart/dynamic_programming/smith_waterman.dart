// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int score_function(String source_char, String target_char, int match_score, int mismatch_score, int gap_score) {
  if (source_char == "-" || target_char == "-") {
    return gap_score;
  }
  if (source_char == target_char) {
    return match_score;
  }
  return mismatch_score;
}

List<List<int>> smith_waterman(String query, String subject, int match_score, int mismatch_score, int gap_score) {
  String q = query.toUpperCase();
  String s = subject.toUpperCase();
  int m = q.length;
  int n = s.length;
  List<List<int>> score = <List<int>>[];
  for (int __ = 0; __ < m + 1; __++) {
    List<int> row = <int>[];
    for (int _2 = 0; _2 < n + 1; _2++) {
    row = [...row, 0];
  }
    score = ([...score, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  for (int i = 1; i < m + 1; i++) {
    for (int j = 1; j < n + 1; j++) {
    String qc = _substr(q, i - 1, i);
    String sc = _substr(s, j - 1, j);
    int diag = score[i - 1][j - 1] + score_function(qc, sc, match_score, mismatch_score, gap_score);
    int delete = score[i - 1][j] + gap_score;
    int insert = score[i][j - 1] + gap_score;
    int max_val = 0;
    if (diag > max_val) {
    max_val = diag;
  }
    if (delete > max_val) {
    max_val = delete;
  }
    if (insert > max_val) {
    max_val = insert;
  }
    while (score[i]!.length <= j) { score[i]!.add(0); } score[i]![j] = max_val;
  }
  }
  return score;
}

String traceback(List<List<int>> score, String query, String subject, int match_score, int mismatch_score, int gap_score) {
  String q = query.toUpperCase();
  String s = subject.toUpperCase();
  int max_value = 0;
  int i_max = 0;
  int j_max = 0;
  for (int i = 0; i < score.length; i++) {
    for (int j = 0; j < score[i].length; j++) {
    if (score[i][j] > max_value) {
    max_value = score[i][j];
    i_max = i;
    j_max = j;
  }
  }
  }
  int i = i_max;
  int j = j_max;
  String align1 = "";
  String align2 = "";
  int gap_penalty = score_function("-", "-", match_score, mismatch_score, gap_score);
  if (i == 0 || j == 0) {
    return "";
  }
  while (i > 0 && j > 0) {
    String qc = _substr(q, i - 1, i);
    String sc = _substr(s, j - 1, j);
    if (score[i][j] == score[i - 1][j - 1] + score_function(qc, sc, match_score, mismatch_score, gap_score)) {
    align1 = qc + align1;
    align2 = sc + align2;
    i = i - 1;
    j = j - 1;
  } else {
    if (score[i][j] == score[i - 1][j] + gap_penalty) {
    align1 = qc + align1;
    align2 = "-" + align2;
    i = i - 1;
  } else {
    align1 = "-" + align1;
    align2 = sc + align2;
    j = j - 1;
  };
  }
  }
  return align1 + "\n" + align2;
}

String query = "HEAGAWGHEE";
String subject = "PAWHEAE";
List<List<int>> score = smith_waterman(query, subject, 1, -1, -2);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(traceback(score, query, subject, 1, -1, -2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
