// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int max_product_subarray(List<int> numbers) {
  if (numbers.length == 0) {
    return 0;
  }
  int max_till_now = numbers[0];
  int min_till_now = numbers[0];
  int max_prod = numbers[0];
  int i = 1;
  while (i < numbers.length) {
    int number = numbers[i];
    if (number < 0) {
    int temp = max_till_now;
    max_till_now = min_till_now;
    min_till_now = temp;
  }
    int prod_max = max_till_now * number;
    if (number > prod_max) {
    max_till_now = number;
  } else {
    max_till_now = prod_max;
  }
    int prod_min = min_till_now * number;
    if (number < prod_min) {
    min_till_now = number;
  } else {
    min_till_now = prod_min;
  }
    if (max_till_now > max_prod) {
    max_prod = max_till_now;
  }
    i = i + 1;
  }
  return max_prod;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(max_product_subarray([2, 3, -2, 4]));
  print(max_product_subarray([-2, 0, -1]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
