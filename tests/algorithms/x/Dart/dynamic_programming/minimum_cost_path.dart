// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int min_int(int a, int b) {
  if (a < b) {
    return a;
  }
  return b;
}

int minimum_cost_path(List<List<int>> matrix) {
  int rows = matrix.length;
  int cols = matrix[0].length;
  int j = 1;
  while (j < cols) {
    List<int> row0 = matrix[0];
    while (row0.length <= j) { row0.add(0); } row0[j] = row0[j] + row0[j - 1];
    while (matrix.length <= 0) { matrix.add(<int>[]); } matrix[0] = row0;
    j = j + 1;
  }
  int i = 1;
  while (i < rows) {
    List<int> row = matrix[i];
    while (row.length <= 0) { row.add(0); } row[0] = row[0] + matrix[i - 1][0];
    while (matrix.length <= i) { matrix.add(<int>[]); } matrix[i] = row;
    i = i + 1;
  }
  i = 1;
  while (i < rows) {
    List<int> row = matrix[i];
    j = 1;
    while (j < cols) {
    int up = matrix[i - 1][j];
    int left = row[j - 1];
    int best = min_int(up, left);
    while (row.length <= j) { row.add(0); } row[j] = row[j] + best;
    j = j + 1;
  }
    while (matrix.length <= i) { matrix.add(<int>[]); } matrix[i] = row;
    i = i + 1;
  }
  return matrix[rows - 1][cols - 1];
}

List<List<int>> m1 = [[2, 1], [3, 1], [4, 2]];
List<List<int>> m2 = [[2, 1, 4], [2, 1, 3], [3, 2, 1]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(minimum_cost_path(m1)));
  print(_str(minimum_cost_path(m2)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
