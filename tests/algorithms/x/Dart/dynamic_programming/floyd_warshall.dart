// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Graph {
  int n;
  List<List<int>> dp;
  Graph({required this.n, required this.dp});
}

int INF = 1000000000;
Graph new_graph(int n) {
  List<List<int>> dp = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    row = [...row, 0];
  } else {
    row = [...row, INF];
  }
    j = j + 1;
  }
    dp = ([...dp, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return Graph(n: n, dp: dp);
}

dynamic add_edge(Graph g, int u, int v, int w) {
  List<List<int>> dp = g.dp;
  List<int> row = dp[u];
  while (row.length <= v) { row.add(0); } row[v] = w;
  while (dp.length <= u) { dp.add(<int>[]); } dp[u] = row;
  g.dp = dp;
}

dynamic floyd_warshall(Graph g) {
  List<List<int>> dp = g.dp;
  int k = 0;
  while (k < g.n) {
    int i = 0;
    while (i < g.n) {
    int j = 0;
    while (j < g.n) {
    int alt = dp[i][k] + dp[k][j];
    List<int> row = dp[i];
    if (alt < row[j]) {
    while (row.length <= j) { row.add(0); } row[j] = alt;
    while (dp.length <= i) { dp.add(<int>[]); } dp[i] = row;
  }
    j = j + 1;
  }
    i = i + 1;
  }
    k = k + 1;
  }
  g.dp = dp;
}

int show_min(Graph g, int u, int v) {
  return g.dp[u][v];
}

Graph graph = new_graph(5);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  add_edge(graph, 0, 2, 9);
  add_edge(graph, 0, 4, 10);
  add_edge(graph, 1, 3, 5);
  add_edge(graph, 2, 3, 7);
  add_edge(graph, 3, 0, 10);
  add_edge(graph, 3, 1, 2);
  add_edge(graph, 3, 2, 1);
  add_edge(graph, 3, 4, 6);
  add_edge(graph, 4, 1, 3);
  add_edge(graph, 4, 2, 4);
  add_edge(graph, 4, 3, 9);
  floyd_warshall(graph);
  print((show_min(graph, 1, 4)).toString());
  print((show_min(graph, 0, 3)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
