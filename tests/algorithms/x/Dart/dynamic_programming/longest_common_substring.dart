// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String longest_common_substring(String text1, String text2) {
  if (text1.length == 0 || text2.length == 0) {
    return "";
  }
  int m = text1.length;
  int n = text2.length;
  List<List<int>> dp = <List<int>>[];
  int i = 0;
  while (i < m + 1) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n + 1) {
    row = [...row, 0];
    j = j + 1;
  }
    dp = ([...dp, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  int end_pos = 0;
  int max_len = 0;
  int ii = 1;
  while (ii <= m) {
    int jj = 1;
    while (jj <= n) {
    if (_substr(text1, ii - 1, ii) == _substr(text2, jj - 1, jj)) {
    while (dp[ii]!.length <= jj) { dp[ii]!.add(0); } dp[ii]![jj] = 1 + dp[ii - 1][jj - 1];
    if (dp[ii][jj] > max_len) {
    max_len = dp[ii][jj];
    end_pos = ii;
  };
  }
    jj = jj + 1;
  }
    ii = ii + 1;
  }
  return _substr(text1, end_pos - max_len, end_pos);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(longest_common_substring("abcdef", "xabded"));
  print("\n");
  print(longest_common_substring("zxabcdezy", "yzabcdezx"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
