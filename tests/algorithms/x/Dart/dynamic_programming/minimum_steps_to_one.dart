// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v.abs() <= 9007199254740991 && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> make_list(int len, int value) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < len) {
    arr = [...arr, value];
    i = i + 1;
  }
  return arr;
}

int min_int(int a, int b) {
  if (a < b) {
    return a;
  }
  return b;
}

int min_steps_to_one(int number) {
  if (number <= 0) {
    return 0;
  }
  List<int> table = make_list(number + 1, number + 1);
  while (table.length <= 1) { table.add(0); } table[1] = 0;
  int i = 1;
  while (i < number) {
    while (table.length <= i + 1) { table.add(0); } table[i + 1] = min_int(table[i + 1], table[i] + 1);
    if (i * 2 <= number) {
    while (table.length <= i * 2) { table.add(0); } table[i * 2] = min_int(table[i * 2], table[i] + 1);
  }
    if (i * 3 <= number) {
    while (table.length <= i * 3) { table.add(0); } table[i * 3] = min_int(table[i * 3], table[i] + 1);
  }
    i = i + 1;
  }
  return table[number];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(min_steps_to_one(10)));
  print(_str(min_steps_to_one(15)));
  print(_str(min_steps_to_one(6)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
