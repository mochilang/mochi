// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}


Never _error(String msg) {
  throw Exception(msg);
}

List<int> make_list(int len, int value) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < len) {
    arr = [...arr, value];
    i = i + 1;
  }
  return arr;
}

int int_sqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

int minimum_squares_to_represent_a_number(int number) {
  if (number < 0) {
    _error("the value of input must not be a negative number");
  }
  if (number == 0) {
    return 1;
  }
  List<int> answers = make_list(number + 1, -1);
  while (answers.length <= 0) { answers.add(0); } answers[0] = 0;
  int i = 1;
  while (i <= number) {
    int answer = i;
    int root = int_sqrt(i);
    int j = 1;
    while (j <= root) {
    int current_answer = 1 + answers[i - j * j];
    if (current_answer < answer) {
    answer = current_answer;
  }
    j = j + 1;
  }
    while (answers.length <= i) { answers.add(0); } answers[i] = answer;
    i = i + 1;
  }
  return answers[number];
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(minimum_squares_to_represent_a_number(25));
  print(minimum_squares_to_represent_a_number(21));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
