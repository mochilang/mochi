// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class Node {
  int key;
  int freq;
  Node({required this.key, required this.freq});
}

List<Node> sort_nodes(List<Node> nodes) {
  List<Node> arr = nodes;
  int i = 1;
  while (i < arr.length) {
    Node key_node = arr[i];
    int j = i - 1;
    while (j >= 0) {
    Node temp = arr[j];
    if (temp.key > key_node.key) {
    while (arr.length <= j + 1) { arr.add(null as dynamic); } arr[j + 1] = temp;
    j = j - 1;
  } else {
    break;
  }
  }
    while (arr.length <= j + 1) { arr.add(null as dynamic); } arr[j + 1] = key_node;
    i = i + 1;
  }
  return arr;
}

void print_node(Node n) {
  print("Node(key=" + _str(n.key) + ", freq=" + _str(n.freq) + ")");
}

void print_binary_search_tree(List<List<int>> root, List<int> keys, int i, int j, int parent, bool is_left) {
  if (i > j || i < 0 || j > root.length - 1) {
    return;
  }
  int node = root[i][j];
  if (parent == -1) {
    print(_str(keys[node]) + " is the root of the binary search tree.");
  } else {
    if (is_left) {
    print(_str(keys[node]) + " is the left child of key " + _str(parent) + ".");
  } else {
    print(_str(keys[node]) + " is the right child of key " + _str(parent) + ".");
  };
  }
  print_binary_search_tree(root, keys, i, node - 1, keys[node], true);
  print_binary_search_tree(root, keys, node + 1, j, keys[node], false);
}

void find_optimal_binary_search_tree(List<Node> original_nodes) {
  List<Node> nodes = sort_nodes(original_nodes);
  int n = nodes.length;
  List<int> keys = <int>[];
  List<int> freqs = <int>[];
  int i = 0;
  while (i < n) {
    Node node = nodes[i];
    keys = [...keys, node.key];
    freqs = [...freqs, node.freq];
    i = i + 1;
  }
  List<List<int>> dp = <List<int>>[];
  List<List<int>> total = <List<int>>[];
  List<List<int>> root = <List<int>>[];
  i = 0;
  while (i < n) {
    List<int> dp_row = <int>[];
    List<int> total_row = <int>[];
    List<int> root_row = <int>[];
    int j = 0;
    while (j < n) {
    if (i == j) {
    dp_row = [...dp_row, freqs[i]];
    total_row = [...total_row, freqs[i]];
    root_row = [...root_row, i];
  } else {
    dp_row = [...dp_row, 0];
    total_row = [...total_row, 0];
    root_row = [...root_row, 0];
  }
    j = j + 1;
  }
    dp = ([...dp, dp_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    total = ([...total, total_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    root = ([...root, root_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  int interval_length = 2;
  int INF = 2147483647;
  while (interval_length <= n) {
    i = 0;
    while (i < n - interval_length + 1) {
    int j = i + interval_length - 1;
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = INF;
    while (total[i]!.length <= j) { total[i]!.add(0); } total[i]![j] = total[i][j - 1] + freqs[j];
    int r = root[i][j - 1];
    while (r <= root[i + 1][j]) {
    int left = (r != i ? dp[i][r - 1] : 0);
    int right = (r != j ? dp[r + 1][j] : 0);
    int cost = left + total[i][j] + right;
    if (dp[i][j] > cost) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = cost;
    while (root[i]!.length <= j) { root[i]!.add(0); } root[i]![j] = r;
  }
    r = r + 1;
  }
    i = i + 1;
  }
    interval_length = interval_length + 1;
  }
  print("Binary search tree nodes:");
  i = 0;
  while (i < n) {
    print_node(nodes[i]);
    i = i + 1;
  }
  print("\nThe cost of optimal BST for given tree nodes is " + _str(dp[0][n - 1]) + ".");
  print_binary_search_tree(root, keys, 0, n - 1, -1, false);
}

void _main() {
  List<Node> nodes = [Node(key: 12, freq: 8), Node(key: 10, freq: 34), Node(key: 20, freq: 50), Node(key: 42, freq: 3), Node(key: 25, freq: 40), Node(key: 37, freq: 30)];
  find_optimal_binary_search_tree(nodes);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
