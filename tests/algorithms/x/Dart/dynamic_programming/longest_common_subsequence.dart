// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class LcsResult {
  int length;
  String sequence;
  LcsResult({required this.length, required this.sequence});
}

List<List<int>> zeros_matrix(int rows, int cols) {
  List<List<int>> matrix = <List<int>>[];
  int i = 0;
  while (i <= rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j <= cols) {
    row = [...row, 0];
    j = j + 1;
  }
    matrix = ([...matrix, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return matrix;
}

LcsResult longest_common_subsequence(String x, String y) {
  int m = x.length;
  int n = y.length;
  List<List<int>> dp = zeros_matrix(m, n);
  int i = 1;
  while (i <= m) {
    int j = 1;
    while (j <= n) {
    if (_substr(x, i - 1, i - 1 + 1) == _substr(y, j - 1, j - 1 + 1)) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = dp[i - 1][j - 1] + 1;
  } else {
    if (dp[i - 1][j] > dp[i][j - 1]) {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = dp[i - 1][j];
  } else {
    while (dp[i]!.length <= j) { dp[i]!.add(0); } dp[i]![j] = dp[i][j - 1];
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  String seq = "";
  int i2 = m;
  int j2 = n;
  while (i2 > 0 && j2 > 0) {
    if (_substr(x, i2 - 1, i2 - 1 + 1) == _substr(y, j2 - 1, j2 - 1 + 1)) {
    seq = _substr(x, i2 - 1, i2 - 1 + 1) + seq;
    i2 = i2 - 1;
    j2 = j2 - 1;
  } else {
    if (dp[i2 - 1][j2] >= dp[i2][j2 - 1]) {
    i2 = i2 - 1;
  } else {
    j2 = j2 - 1;
  };
  }
  }
  return LcsResult(length: dp[m][n], sequence: seq);
}

String a = "AGGTAB";
String b = "GXTXAYB";
LcsResult res = longest_common_subsequence(a, b);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("len = " + _str(res.length) + ", sub-sequence = " + res.sequence);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
