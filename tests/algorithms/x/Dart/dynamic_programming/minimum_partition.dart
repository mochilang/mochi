// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int find_min(List<int> numbers) {
  int n = numbers.length;
  int s = 0;
  int idx = 0;
  while (idx < n) {
    s = s + numbers[idx];
    idx = idx + 1;
  }
  List<List<bool>> dp = <List<bool>>[];
  int i = 0;
  while (i <= n) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j <= s) {
    row = [...row, false];
    j = j + 1;
  }
    dp = ([...dp, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i <= n) {
    while (dp[i]!.length <= 0) { dp[i]!.add(false); } dp[i]![0] = true;
    i = i + 1;
  }
  int j = 1;
  while (j <= s) {
    while (dp[0]!.length <= j) { dp[0]!.add(false); } dp[0]![j] = false;
    j = j + 1;
  }
  i = 1;
  while (i <= n) {
    j = 1;
    while (j <= s) {
    while (dp[i]!.length <= j) { dp[i]!.add(false); } dp[i]![j] = dp[i - 1][j];
    if (numbers[i - 1] <= j) {
    if (dp[i - 1][j - numbers[i - 1]]) {
    while (dp[i]!.length <= j) { dp[i]!.add(false); } dp[i]![j] = true;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  int diff = 0;
  j = s ~/ 2;
  while (j >= 0) {
    if (dp[n][j]) {
    diff = s - 2 * j;
    break;
  }
    j = j - 1;
  }
  return diff;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(find_min([1, 2, 3, 4, 5])));
  print(_str(find_min([5, 5, 5, 5, 5])));
  print(_str(find_min([5, 5, 5, 5])));
  print(_str(find_min([3])));
  print(_str(find_min(<int>[])));
  print(_str(find_min([1, 2, 3, 4])));
  print(_str(find_min([0, 0, 0, 0])));
  print(_str(find_min([-1, -5, 5, 1])));
  print(_str(find_min([9, 9, 9, 9, 9])));
  print(_str(find_min([1, 5, 10, 3])));
  print(_str(find_min([-1, 0, 1])));
  print(_str(find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
