// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> copy_list(List<int> xs) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    res = [...res, xs[i]];
    i = i + 1;
  }
  return res;
}

List<int> longest_subsequence(List<int> arr) {
  int n = arr.length;
  List<List<int>> lis = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> single = <int>[];
    single = [...single, arr[i]];
    lis = ([...lis, single] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = 1;
  while (i < n) {
    int prev = 0;
    while (prev < i) {
    if (arr[prev] <= arr[i] && lis[prev].length + 1 > lis[i].length) {
    List<int> temp = copy_list(lis[prev]);
    List<int> temp2 = [...temp, arr[i]];
    while (lis.length <= i) { lis.add(<int>[]); } lis[i] = temp2;
  }
    prev = prev + 1;
  }
    i = i + 1;
  }
  List<int> result = <int>[];
  i = 0;
  while (i < n) {
    if (lis[i].length > result.length) {
    result = lis[i];
  }
    i = i + 1;
  }
  return result;
}

void _main() {
  print((longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80])).toString());
  print((longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9])).toString());
  print((longest_subsequence([9, 8, 7, 6, 5, 7])).toString());
  print((longest_subsequence([28, 26, 12, 23, 35, 39])).toString());
  print((longest_subsequence([1, 1, 1])).toString());
  print((longest_subsequence(([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList())).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
