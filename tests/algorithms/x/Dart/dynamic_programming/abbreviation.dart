// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int index_of(String s, String ch) {
  int i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  int idx = index_of(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = index_of(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return 0;
}

String chr(int n) {
  String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  String lower = "abcdefghijklmnopqrstuvwxyz";
  if (n >= 65 && n < 91) {
    return _substr(upper, n - 65, n - 64);
  }
  if (n >= 97 && n < 123) {
    return _substr(lower, n - 97, n - 96);
  }
  return "?";
}

String to_upper_char(String c) {
  int code = ord(c);
  if (code >= 97 && code <= 122) {
    return chr(code - 32);
  }
  return c;
}

bool is_lower(String c) {
  int code = ord(c);
  return code >= 97 && code <= 122;
}

bool abbr(String a, String b) {
  int n = a.length;
  int m = b.length;
  List<List<bool>> dp = <List<bool>>[];
  int i = 0;
  while (i <= n) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j <= m) {
    row = [...row, false];
    j = j + 1;
  }
    dp = ([...dp, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  while (dp[0]!.length <= 0) { dp[0]!.add(false); } dp[0]![0] = true;
  i = 0;
  while (i < n) {
    int j = 0;
    while (j <= m) {
    if (dp[i][j]) {
    if (j < m && to_upper_char(a.substring(i, i + 1)) == b.substring(j, j + 1)) {
    while (dp[i + 1]!.length <= j + 1) { dp[i + 1]!.add(false); } dp[i + 1]![j + 1] = true;
  };
    if (is_lower(a.substring(i, i + 1))) {
    while (dp[i + 1]!.length <= j) { dp[i + 1]!.add(false); } dp[i + 1]![j] = true;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return dp[n][m];
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_bool(abbr("daBcd", "ABC"));
  print_bool(abbr("dBcd", "ABC"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
