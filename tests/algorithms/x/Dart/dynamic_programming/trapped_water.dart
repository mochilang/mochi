// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> make_list(int len, int value) {
  List<int> arr = <int>[];
  int i = 0;
  while (i < len) {
    arr = [...arr, value];
    i = i + 1;
  }
  return arr;
}

int trapped_rainwater(List<int> heights) {
  if (heights.length == 0) {
    return 0;
  }
  int i = 0;
  while (i < heights.length) {
    if (heights[i] < 0) {
    throw Exception("No height can be negative");
  }
    i = i + 1;
  }
  int length = heights.length;
  List<int> left_max = make_list(length, 0);
  while (left_max.length <= 0) { left_max.add(0); } left_max[0] = heights[0];
  i = 1;
  while (i < length) {
    if (heights[i] > left_max[i - 1]) {
    while (left_max.length <= i) { left_max.add(0); } left_max[i] = heights[i];
  } else {
    while (left_max.length <= i) { left_max.add(0); } left_max[i] = left_max[i - 1];
  }
    i = i + 1;
  }
  List<int> right_max = make_list(length, 0);
  int last = length - 1;
  while (right_max.length <= last) { right_max.add(0); } right_max[last] = heights[last];
  i = last - 1;
  while (i >= 0) {
    if (heights[i] > right_max[i + 1]) {
    while (right_max.length <= i) { right_max.add(0); } right_max[i] = heights[i];
  } else {
    while (right_max.length <= i) { right_max.add(0); } right_max[i] = right_max[i + 1];
  }
    i = i - 1;
  }
  int total = 0;
  i = 0;
  while (i < length) {
    int left = left_max[i];
    int right = right_max[i];
    int smaller = (left < right ? left : right);
    total = total + (smaller - heights[i]);
    i = i + 1;
  }
  return total;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])).toString());
  print((trapped_rainwater([7, 1, 5, 3, 6, 4])).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
