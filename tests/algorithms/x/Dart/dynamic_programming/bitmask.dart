// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int count_assignments(int person, List<List<int>> task_performed, List<int> used) {
  if (person == task_performed.length) {
    return 1;
  }
  int total = 0;
  List<int> tasks = task_performed[person];
  int i = 0;
  while (i < tasks.length) {
    int t = tasks[i];
    if (!used.contains(t)) {
    total = total + count_assignments(person + 1, task_performed, [...used, t]);
  }
    i = i + 1;
  }
  return total;
}

int count_no_of_ways(List<List<int>> task_performed) {
  return count_assignments(0, task_performed, <int>[]);
}

void _main() {
  List<List<int>> task_performed = [[1, 3, 4], [1, 2, 5], [3, 4]];
  print(_str(count_no_of_ways(task_performed)));
}

void _start() {
  _main();
}

void main() => _start();
