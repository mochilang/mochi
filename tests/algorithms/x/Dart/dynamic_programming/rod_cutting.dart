// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

void enforce_args(int n, List<int> prices) {
  if (n < 0) {
    throw Exception("n must be non-negative");
  }
  if (n > prices.length) {
    throw Exception("price list is shorter than n");
  }
}

int bottom_up_cut_rod(int n, List<int> prices) {
  enforce_args(n, prices);
  List<int> max_rev = <int>[];
  int i = 0;
  while (i <= n) {
    if (i == 0) {
    max_rev = [...max_rev, 0];
  } else {
    max_rev = [...max_rev, -2147483648];
  }
    i = i + 1;
  }
  int length = 1;
  while (length <= n) {
    int best = max_rev[length];
    int j = 1;
    while (j <= length) {
    int candidate = prices[j - 1] + max_rev[length - j];
    if (candidate > best) {
    best = candidate;
  }
    j = j + 1;
  }
    while (max_rev.length <= length) { max_rev.add(0); } max_rev[length] = best;
    length = length + 1;
  }
  return max_rev[n];
}

List<int> prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(bottom_up_cut_rod(4, prices));
  print(bottom_up_cut_rod(10, prices));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
