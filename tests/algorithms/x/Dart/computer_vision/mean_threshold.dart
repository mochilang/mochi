// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<List<int>> mean_threshold(List<List<int>> image) {
  int height = image.length;
  int width = image[0].length;
  int total = 0;
  int i = 0;
  while (i < height) {
    int j = 0;
    while (j < width) {
    total = total + image[i][j];
    j = j + 1;
  }
    i = i + 1;
  }
  int mean = total ~/ (height * width);
  i = 0;
  while (i < height) {
    int j = 0;
    while (j < width) {
    if (image[i][j] > mean) {
    while (image[i]!.length <= j) { image[i]!.add(0); } image[i]![j] = 255;
  } else {
    while (image[i]!.length <= j) { image[i]!.add(0); } image[i]![j] = 0;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return image;
}

void print_image(List<List<int>> image) {
  int i = 0;
  while (i < image.length) {
    print(image[i]);
    i = i + 1;
  }
}

List<List<int>> img = [[10, 200, 50], [100, 150, 30], [90, 80, 220]];
List<List<int>> result = mean_threshold(img);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_image(result);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
