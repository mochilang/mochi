// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int abs_int(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

double sqrt(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double ln(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double e = 2.718281828;
  int n = 0;
  double y = x;
  while (y >= e) {
    y = y / e;
    n = n + 1;
  }
  while (y <= 1.0 / e) {
    y = y * e;
    n = n - 1;
  }
  y = y - 1.0;
  double term = y;
  double result = 0.0;
  int k = 1;
  while (k <= 20) {
    if (k % 2 == 1) {
    result = result + term / (1.0 * k);
  } else {
    result = result - term / (1.0 * k);
  }
    term = term * y;
    k = k + 1;
  }
  return result + 1.0 * n;
}

List<List<double>> matrix_concurrency(List<List<int>> image, List<int> coord) {
  int offset_x = coord[0];
  int offset_y = coord[1];
  int max_val = 0;
  for (int r = 0; r < image.length; r++) {
    for (int c = 0; c < image[r].length; c++) {
    if (image[r][c] > max_val) {
    max_val = image[r][c];
  }
  }
  }
  int size = max_val + 1;
  List<List<double>> matrix = <List<double>>[];
  for (int i = 0; i < size; i++) {
    List<double> row = <double>[];
    for (int j = 0; j < size; j++) {
    row = [...row, 0.0];
  }
    matrix = ([...matrix, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
  }
  for (int x = 1; x < image.length - 1; x++) {
    for (int y = 1; y < image[x].length - 1; y++) {
    int base = image[x][y];
    int offset = image[x + offset_x][y + offset_y];
    while (matrix[base]!.length <= offset) { matrix[base]!.add(0); } matrix[base]![offset] = matrix[base][offset] + 1.0;
  }
  }
  double total = 0.0;
  for (int i = 0; i < size; i++) {
    for (int j = 0; j < size; j++) {
    total = total + matrix[i][j];
  }
  }
  if (total == 0.0) {
    return matrix;
  }
  for (int i = 0; i < size; i++) {
    for (int j = 0; j < size; j++) {
    while (matrix[i]!.length <= j) { matrix[i]!.add(0); } matrix[i]![j] = matrix[i][j] / total;
  }
  }
  return matrix;
}

List<double> haralick_descriptors(List<List<double>> matrix) {
  int rows = matrix.length;
  int cols = matrix[0].length;
  double maximum_prob = 0.0;
  double correlation = 0.0;
  double energy = 0.0;
  double contrast = 0.0;
  double dissimilarity = 0.0;
  double inverse_difference = 0.0;
  double homogeneity = 0.0;
  double entropy = 0.0;
  int i = 0;
  while (i < rows) {
    int j = 0;
    while (j < cols) {
    double val = matrix[i][j];
    if (val > maximum_prob) {
    maximum_prob = val;
  }
    correlation = correlation + 1.0 * i * j * val;
    energy = energy + val * val;
    int diff = i - j;
    int adiff = abs_int(diff);
    contrast = contrast + val * (1.0 * diff * diff);
    dissimilarity = dissimilarity + val * (1.0 * adiff);
    inverse_difference = inverse_difference + val / (1.0 + 1.0 * adiff);
    homogeneity = homogeneity + val / (1.0 + 1.0 * diff * diff);
    if (val > 0.0) {
    entropy = entropy - val * ln(val);
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return [maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy];
}

List<List<int>> image = [[0, 1, 0], [1, 0, 1], [0, 1, 0]];
List<List<double>> glcm = matrix_concurrency(image, [0, 1]);
List<double> descriptors = haralick_descriptors(glcm);
int idx = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (idx < descriptors.length) {
    print(_str(descriptors[idx]));
    idx = idx + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
