// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<List<double>> zeros(int h, int w) {
  List<List<double>> m = <List<double>>[];
  int y = 0;
  while (y < h) {
    List<double> row = <double>[];
    int x = 0;
    while (x < w) {
    row = [...row, 0.0];
    x = x + 1;
  }
    m = ([...m, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    y = y + 1;
  }
  return m;
}

List<List<List<double>>> gradient(List<List<int>> img) {
  int h = img.length;
  int w = img[0].length;
  List<List<double>> dx = zeros(h, w);
  List<List<double>> dy = zeros(h, w);
  int y = 1;
  while (y < h - 1) {
    int x = 1;
    while (x < w - 1) {
    while (dx[y]!.length <= x) { dx[y]!.add(0); } dx[y]![x] = (img[y][x + 1].toDouble()) - (img[y][x - 1].toDouble());
    while (dy[y]!.length <= x) { dy[y]!.add(0); } dy[y]![x] = (img[y + 1][x].toDouble()) - (img[y - 1][x].toDouble());
    x = x + 1;
  }
    y = y + 1;
  }
  return [dx, dy] as List<List<List<double>>>;
}

List<List<int>> harris(List<List<int>> img, double k, int window, double thresh) {
  int h = img.length;
  int w = img[0].length;
  List<List<List<double>>> grads = gradient(img);
  List<List<double>> dx = grads[0];
  List<List<double>> dy = grads[1];
  List<List<double>> ixx = zeros(h, w);
  List<List<double>> iyy = zeros(h, w);
  List<List<double>> ixy = zeros(h, w);
  int y = 0;
  while (y < h) {
    int x = 0;
    while (x < w) {
    double gx = dx[y][x];
    double gy = dy[y][x];
    while (ixx[y]!.length <= x) { ixx[y]!.add(0); } ixx[y]![x] = gx * gx;
    while (iyy[y]!.length <= x) { iyy[y]!.add(0); } iyy[y]![x] = gy * gy;
    while (ixy[y]!.length <= x) { ixy[y]!.add(0); } ixy[y]![x] = gx * gy;
    x = x + 1;
  }
    y = y + 1;
  }
  int offset = window ~/ 2;
  List<List<int>> corners = <List<int>>[];
  y = offset;
  while (y < h - offset) {
    int x = offset;
    while (x < w - offset) {
    double wxx = 0.0;
    double wyy = 0.0;
    double wxy = 0.0;
    int yy = y - offset;
    while (yy <= y + offset) {
    int xx = x - offset;
    while (xx <= x + offset) {
    wxx = wxx + ixx[yy][xx];
    wyy = wyy + iyy[yy][xx];
    wxy = wxy + ixy[yy][xx];
    xx = xx + 1;
  }
    yy = yy + 1;
  }
    double det = wxx * wyy - wxy * wxy;
    double trace = wxx + wyy;
    double r = det - k * (trace * trace);
    if (r > thresh) {
    corners = ([...corners, [x, y] as List<int>] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    x = x + 1;
  }
    y = y + 1;
  }
  return corners;
}

List<List<int>> img = [[1, 1, 1, 1, 1], [1, 255, 255, 255, 1], [1, 255, 0, 255, 1], [1, 255, 255, 255, 1], [1, 1, 1, 1, 1]];
List<List<int>> corners = harris(img, 0.04, 3, 10000000000.0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + corners.join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
