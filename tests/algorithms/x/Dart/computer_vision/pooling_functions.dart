// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> maxpooling(List<List<int>> arr, int size, int stride) {
  int n = arr.length;
  if (n == 0 || arr[0].length != n) {
    throw Exception("The input array is not a square matrix");
  }
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i + size <= n) {
    List<int> row = <int>[];
    int j = 0;
    while (j + size <= n) {
    int max_val = arr[i][j];
    int r = i;
    while (r < i + size) {
    int c = j;
    while (c < j + size) {
    int val = arr[r][c];
    if (val > max_val) {
    max_val = val;
  }
    c = c + 1;
  }
    r = r + 1;
  }
    row = [...row, max_val];
    j = j + stride;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + stride;
  }
  return result;
}

List<List<int>> avgpooling(List<List<int>> arr, int size, int stride) {
  int n = arr.length;
  if (n == 0 || arr[0].length != n) {
    throw Exception("The input array is not a square matrix");
  }
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i + size <= n) {
    List<int> row = <int>[];
    int j = 0;
    while (j + size <= n) {
    int sum = 0;
    int r = i;
    while (r < i + size) {
    int c = j;
    while (c < j + size) {
    sum = sum + arr[r][c];
    c = c + 1;
  }
    r = r + 1;
  }
    row = [...row, sum ~/ (size * size)];
    j = j + stride;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + stride;
  }
  return result;
}

dynamic print_matrix(List<List<int>> mat) {
  int i = 0;
  while (i < mat.length) {
    String line = "";
    int j = 0;
    while (j < mat[i].length) {
    line = line + (mat[i][j]).toString();
    if (j < mat[i].length - 1) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

void _main() {
  List<List<int>> arr1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];
  List<List<int>> arr2 = [[147, 180, 122], [241, 76, 32], [126, 13, 157]];
  print_matrix(maxpooling(arr1, 2, 2));
  print_matrix(maxpooling(arr2, 2, 1));
  print_matrix(avgpooling(arr1, 2, 2));
  print_matrix(avgpooling(arr2, 2, 1));
}

void _start() {
  _main();
}

void main() => _start();
