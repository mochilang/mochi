// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<int>> flip_horizontal_image(List<List<int>> img) {
  List<List<int>> flipped = <List<int>>[];
  int i = 0;
  while (i < img.length) {
    List<int> row = img[i];
    int j = row.length - 1;
    List<int> new_row = <int>[];
    while (j >= 0) {
    new_row = [...new_row, row[j]];
    j = j - 1;
  }
    flipped = ([...flipped, new_row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return flipped;
}

List<List<int>> flip_vertical_image(List<List<int>> img) {
  List<List<int>> flipped = <List<int>>[];
  int i = img.length - 1;
  while (i >= 0) {
    flipped = ([...flipped, img[i]] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i - 1;
  }
  return flipped;
}

List<List<double>> flip_horizontal_boxes(List<List<double>> boxes) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < boxes.length) {
    List<double> b = boxes[i];
    double x_new = 1.0 - b[1];
    result = ([...result, [b[0], x_new, b[2], b[3], b[4]]] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<double>> flip_vertical_boxes(List<List<double>> boxes) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < boxes.length) {
    List<double> b = boxes[i];
    double y_new = 1.0 - b[2];
    result = ([...result, [b[0], b[1], y_new, b[3], b[4]]] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

void print_image(List<List<int>> img) {
  int i = 0;
  while (i < img.length) {
    List<int> row = img[i];
    int j = 0;
    String line = "";
    while (j < row.length) {
    line = line + _str(row[j]) + " ";
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

List<List<int>> image = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
List<List<double>> boxes = [[0.0, 0.25, 0.25, 0.5, 0.5], [1.0, 0.75, 0.75, 0.5, 0.5]];
List<List<int>> h_img = flip_horizontal_image(image);
List<List<double>> h_boxes = flip_horizontal_boxes(boxes);
List<List<int>> v_img = flip_vertical_image(image);
List<List<double>> v_boxes = flip_vertical_boxes(boxes);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Original image:");
  print_image(image);
  print(_str(boxes));
  print("Horizontal flip:");
  print_image(h_img);
  print(_str(h_boxes));
  print("Vertical flip:");
  print_image(v_img);
  print(_str(v_boxes));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
