// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int round_int(double x) {
  if (x >= 0.0) {
    return x + 0.5 as int;
  }
  return x - 0.5 as int;
}

List<List<double>> zeros(int rows, int cols) {
  List<List<double>> res = <List<double>>[];
  int i = 0;
  while (i < rows) {
    List<double> row = <double>[];
    int j = 0;
    while (j < cols) {
    row = [...row, 0.0];
    j = j + 1;
  }
    res = ([...res, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return res;
}

List<List<double>> warp(List<List<double>> image, List<List<double>> h_flow, List<List<double>> v_flow) {
  int h = image.length;
  int w = image[0].length;
  List<List<double>> out = <List<double>>[];
  int y = 0;
  while (y < h) {
    List<double> row = <double>[];
    int x = 0;
    while (x < w) {
    int sx = x - round_int(h_flow[y][x]);
    int sy = y - round_int(v_flow[y][x]);
    if (sx >= 0 && sx < w && sy >= 0 && sy < h) {
    row = [...row, image[sy][sx]];
  } else {
    row = [...row, 0.0];
  }
    x = x + 1;
  }
    out = ([...out, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    y = y + 1;
  }
  return out;
}

List<List<double>> convolve(List<List<double>> img, List<List<double>> ker) {
  int h = img.length;
  int w = img[0].length;
  int kh = ker.length;
  int kw = ker[0].length;
  int py = kh ~/ 2;
  int px = kw ~/ 2;
  List<List<double>> out = <List<double>>[];
  int y = 0;
  while (y < h) {
    List<double> row = <double>[];
    int x = 0;
    while (x < w) {
    double s = 0.0;
    int ky = 0;
    while (ky < kh) {
    int kx = 0;
    while (kx < kw) {
    int iy = y + ky - py;
    int ix = x + kx - px;
    if (iy >= 0 && iy < h && ix >= 0 && ix < w) {
    s = s + img[iy][ix] * ker[ky][kx];
  }
    kx = kx + 1;
  }
    ky = ky + 1;
  }
    row = [...row, s];
    x = x + 1;
  }
    out = ([...out, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    y = y + 1;
  }
  return out;
}

List<List<List<double>>> horn_schunck(List<List<double>> image0, List<List<double>> image1, int num_iter, double alpha) {
  int h = image0.length;
  int w = image0[0].length;
  List<List<double>> u = zeros(h, w);
  List<List<double>> v = zeros(h, w);
  List<List<double>> kernel_x = [[-0.25, 0.25], [-0.25, 0.25]];
  List<List<double>> kernel_y = [[-0.25, -0.25], [0.25, 0.25]];
  List<List<double>> kernel_t = [[0.25, 0.25], [0.25, 0.25]];
  List<List<double>> laplacian = [[0.0833333333333, 0.166666666667, 0.0833333333333], [0.166666666667, 0.0, 0.166666666667], [0.0833333333333, 0.166666666667, 0.0833333333333]];
  int it = 0;
  while (it < num_iter) {
    List<List<double>> warped = warp(image0, u, v);
    List<List<double>> dx1 = convolve(warped, kernel_x);
    List<List<double>> dx2 = convolve(image1, kernel_x);
    List<List<double>> dy1 = convolve(warped, kernel_y);
    List<List<double>> dy2 = convolve(image1, kernel_y);
    List<List<double>> dt1 = convolve(warped, kernel_t);
    List<List<double>> dt2 = convolve(image1, kernel_t);
    List<List<double>> avg_u = convolve(u, laplacian);
    List<List<double>> avg_v = convolve(v, laplacian);
    int y = 0;
    while (y < h) {
    int x = 0;
    while (x < w) {
    double dx = dx1[y][x] + dx2[y][x];
    double dy = dy1[y][x] + dy2[y][x];
    double dt = dt1[y][x] - dt2[y][x];
    double au = avg_u[y][x];
    double av = avg_v[y][x];
    double numer = dx * au + dy * av + dt;
    double denom = alpha * alpha + dx * dx + dy * dy;
    double upd = numer / denom;
    while (u[y]!.length <= x) { u[y]!.add(0); } u[y]![x] = au - dx * upd;
    while (v[y]!.length <= x) { v[y]!.add(0); } v[y]![x] = av - dy * upd;
    x = x + 1;
  }
    y = y + 1;
  }
    it = it + 1;
  }
  return [u, v];
}

void print_matrix(List<List<double>> mat) {
  int y = 0;
  while (y < mat.length) {
    List<double> row = mat[y];
    int x = 0;
    String line = "";
    while (x < row.length) {
    line = line + (round_int(row[x])).toString();
    if (x + 1 < row.length) {
    line = line + " ";
  }
    x = x + 1;
  }
    print(line);
    y = y + 1;
  }
}

void _main() {
  List<List<double>> image0 = [[0.0, 0.0, 2.0], [0.0, 0.0, 2.0]];
  List<List<double>> image1 = [[0.0, 2.0, 0.0], [0.0, 2.0, 0.0]];
  List<List<List<double>>> flows = horn_schunck(image0, image1, 20, 0.1);
  List<List<double>> u = flows[0];
  List<List<double>> v = flows[1];
  print_matrix(u);
  print("---");
  print_matrix(v);
}

void _start() {
  _main();
}

void main() => _start();
