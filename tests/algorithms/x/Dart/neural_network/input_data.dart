// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class DataSet {
  List<List<int>> images;
  List<List<int>> labels;
  int num_examples;
  int index_in_epoch;
  int epochs_completed;
  DataSet({required this.images, required this.labels, required this.num_examples, required this.index_in_epoch, required this.epochs_completed});
}

class Datasets {
  DataSet train;
  DataSet validation;
  DataSet test_ds;
  Datasets({required this.train, required this.validation, required this.test_ds});
}

class BatchResult {
  DataSet dataset;
  List<List<int>> images;
  List<List<int>> labels;
  BatchResult({required this.dataset, required this.images, required this.labels});
}

List<List<int>> dense_to_one_hot(List<int> labels, int num_classes) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < labels.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < num_classes) {
    if (j == labels[i]) {
    row = (row..add(1));
  } else {
    row = (row..add(0));
  }
    j = j + 1;
  }
    result = ((result..add(row)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

DataSet new_dataset(List<List<int>> images, List<List<int>> labels) {
  return DataSet(images: images, labels: labels, num_examples: images.length, index_in_epoch: 0, epochs_completed: 0);
}

BatchResult next_batch(DataSet ds, int batch_size) {
  int start = ds.index_in_epoch;
  if (start + batch_size > ds.num_examples) {
    int rest = ds.num_examples - start;
    List<List<int>> images_rest = ds.images.sublist(start, ds.num_examples);
    List<List<int>> labels_rest = ds.labels.sublist(start, ds.num_examples);
    int new_index = batch_size - rest;
    List<List<int>> images_new = ds.images.sublist(0, new_index);
    List<List<int>> labels_new = ds.labels.sublist(0, new_index);
    dynamic batch_images = [...images_rest, ...images_new];
    dynamic batch_labels = [...labels_rest, ...labels_new];
    DataSet new_ds = DataSet(images: ds.images, labels: ds.labels, num_examples: ds.num_examples, index_in_epoch: new_index, epochs_completed: ds.epochs_completed + 1);
    return BatchResult(dataset: new_ds, images: batch_images, labels: batch_labels);
  } else {
    int end = start + batch_size;
    List<List<int>> batch_images = ds.images.sublist(start, end);
    List<List<int>> batch_labels = ds.labels.sublist(start, end);
    DataSet new_ds = DataSet(images: ds.images, labels: ds.labels, num_examples: ds.num_examples, index_in_epoch: end, epochs_completed: ds.epochs_completed);
    return BatchResult(dataset: new_ds, images: batch_images, labels: batch_labels);
  }
}

Datasets read_data_sets(List<List<int>> train_images, List<int> train_labels_raw, List<List<int>> test_images, List<int> test_labels_raw, int validation_size, int num_classes) {
  List<List<int>> train_labels = dense_to_one_hot(train_labels_raw, num_classes);
  List<List<int>> test_labels = dense_to_one_hot(test_labels_raw, num_classes);
  List<List<int>> validation_images = train_images.sublist(0, validation_size);
  List<List<int>> validation_labels = train_labels.sublist(0, validation_size);
  List<List<int>> train_images_rest = train_images.sublist(validation_size, train_images.length);
  List<List<int>> train_labels_rest = train_labels.sublist(validation_size, train_labels.length);
  DataSet train = new_dataset(train_images_rest, train_labels_rest);
  DataSet validation = new_dataset(validation_images, validation_labels);
  DataSet testset = new_dataset(test_images, test_labels);
  return Datasets(train: train, validation: validation, test_ds: testset);
}

void _main() {
  List<List<int>> train_images = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]];
  List<int> train_labels_raw = [0, 1, 2, 3, 4];
  List<List<int>> test_images = [[5, 6], [6, 7]];
  List<int> test_labels_raw = [5, 6];
  Datasets data = read_data_sets(train_images, train_labels_raw, test_images, test_labels_raw, 2, 10);
  DataSet ds = data.train;
  BatchResult res = next_batch(ds, 2);
  ds = res.dataset;
  print(_str(res.images));
  print(_str(res.labels));
  res = next_batch(ds, 2);
  ds = res.dataset;
  print(_str(res.images));
  print(_str(res.labels));
  res = next_batch(ds, 2);
  ds = res.dataset;
  print(_str(res.images));
  print(_str(res.labels));
}

void _start() {
  _main();
}

void main() => _start();
