// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<double> leaky_rectified_linear_unit(List<double> vector, double alpha) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double x = vector[i];
    if (x > 0.0) {
    result = (result..add(x));
  } else {
    result = (result..add(alpha * x));
  }
    i = i + 1;
  }
  return result;
}

List<double> vector1 = [2.3, 0.6, -2.0, -3.8];
List<double> result1 = leaky_rectified_linear_unit(vector1, 0.3);
List<double> vector2 = [-9.2, -0.3, 0.45, -4.56];
List<double> result2 = leaky_rectified_linear_unit(vector2, 0.067);
void main() {
  print(_str(result1));
  print(_str(result2));
}
