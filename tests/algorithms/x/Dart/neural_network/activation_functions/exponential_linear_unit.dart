// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

double exp_approx(double x) {
  double sum = 1.0;
  double term = 1.0;
  int i = 1;
  dynamic absx = (x < 0.0 ? -x : x);
  while (i <= 20) {
    term = term * absx / (i.toDouble());
    sum = sum + term;
    i = i + 1;
  }
  if (x < 0.0) {
    return 1.0 / sum;
  }
  return sum;
}

List<double> exponential_linear_unit(List<double> vector, double alpha) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double v = vector[i];
    if (v > 0.0) {
    result = [...result, v];
  } else {
    double neg = alpha * (exp_approx(v) - 1.0);
    result = [...result, neg];
  }
    i = i + 1;
  }
  return result;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(exponential_linear_unit(List<double>.from([2.3, 0.6, -2.0, -3.8]), 0.3)));
  print(_str(exponential_linear_unit(List<double>.from([-9.2, -0.3, 0.45, -4.56]), 0.067)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
