// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double exp_approx(double x) {
  double sum = 1.0;
  double term = 1.0;
  int i = 1;
  while (i <= 20) {
    term = term * x / (i.toDouble());
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

List<double> sigmoid(List<double> vector) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double v = vector[i];
    double s = 1.0 / (1.0 + exp_approx(-v));
    result = (result..add(s));
    i = i + 1;
  }
  return result;
}

List<double> swish(List<double> vector, double beta) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double v = vector[i];
    double s = 1.0 / (1.0 + exp_approx(-beta * v));
    result = (result..add(v * s));
    i = i + 1;
  }
  return result;
}

List<double> sigmoid_linear_unit(List<double> vector) {
  return swish(vector, 1.0);
}

bool approx_equal(double a, double b, double eps) {
  double diff = (a > b ? a - b : b - a);
  return diff < eps;
}

bool approx_equal_list(List<double> a, List<double> b, double eps) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    if (!approx_equal(a[i], b[i], eps)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void test_swish() {
  List<dynamic> v = [-1.0, 1.0, 2.0];
  double eps = 0.001;
  if (!approx_equal_list(sigmoid(List<double>.from(v)), [0.26894142, 0.73105858, 0.88079708], eps)) {
    throw Exception("sigmoid incorrect");
  }
  if (!approx_equal_list(sigmoid_linear_unit(List<double>.from(v)), List<double>.from([-0.26894142, 0.73105858, 1.76159416]), eps)) {
    throw Exception("sigmoid_linear_unit incorrect");
  }
  if (!approx_equal_list(swish(List<double>.from(v), 2.0), List<double>.from([-0.11920292, 0.88079708, 1.96402758]), eps)) {
    throw Exception("swish incorrect");
  }
  if (!approx_equal_list(swish([-2.0], 1.0), [-0.23840584], eps)) {
    throw Exception("swish with parameter 1 incorrect");
  }
}

void _main() {
  test_swish();
  print(_str(sigmoid(List<double>.from([-1.0, 1.0, 2.0]))));
  print(_str(sigmoid_linear_unit(List<double>.from([-1.0, 1.0, 2.0]))));
  print(_str(swish(List<double>.from([-1.0, 1.0, 2.0]), 2.0)));
  print(_str(swish([-2.0], 1.0)));
}

void _start() {
  _main();
}

void main() => _start();
