// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double exp_approx(double x) {
  bool neg = false;
  double y = x;
  if (x < 0.0) {
    neg = true;
    y = -x;
  }
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 30) {
    term = term * y / (n.toDouble());
    sum = sum + term;
    n = n + 1;
  }
  if (neg) {
    return 1.0 / sum;
  }
  return sum;
}

double ln_series(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double acc = 0.0;
  int n = 1;
  while (n <= 19) {
    acc = acc + term / (n.toDouble());
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * acc;
}

double ln(double x) {
  double y = x;
  int k = 0;
  while (y >= 10.0) {
    y = y / 10.0;
    k = k + 1;
  }
  while (y < 1.0) {
    y = y * 10.0;
    k = k - 1;
  }
  return ln_series(y) + (k.toDouble()) * ln_series(10.0);
}

double softplus(double x) {
  return ln(1.0 + exp_approx(x));
}

double tanh_approx(double x) {
  return 2.0 / (1.0 + exp_approx(-2.0 * x)) - 1.0;
}

List<double> mish(List<double> vector) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double x = vector[i];
    double sp = softplus(x);
    double y = x * tanh_approx(sp);
    result = (result..add(y));
    i = i + 1;
  }
  return result;
}

void _main() {
  List<double> v1 = [2.3, 0.6, -2.0, -3.8];
  List<double> v2 = [-9.2, -0.3, 0.45, -4.56];
  print(_str(mish(v1)));
  print(_str(mish(v2)));
}

void _start() {
  _main();
}

void main() => _start();
