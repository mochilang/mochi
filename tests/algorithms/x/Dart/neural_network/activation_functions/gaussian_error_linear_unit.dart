// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double exp_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  double i = 1.0;
  while (i < 20.0) {
    term = term * x / i;
    sum = sum + term;
    i = i + 1.0;
  }
  return sum;
}

List<double> sigmoid(List<double> vector) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double x = vector[i];
    double value = 1.0 / (1.0 + exp_taylor(-x));
    result = (result..add(value));
    i = i + 1;
  }
  return result;
}

List<double> gaussian_error_linear_unit(List<double> vector) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double x = vector[i];
    double gelu = x * (1.0 / (1.0 + exp_taylor(-1.702 * x)));
    result = (result..add(gelu));
    i = i + 1;
  }
  return result;
}

List<double> sample = [-1.0, 1.0, 2.0];
void main() {
  print("[" + sigmoid(sample).join(', ') + "]");
  print("[" + gaussian_error_linear_unit(sample).join(', ') + "]");
  print("[" + gaussian_error_linear_unit([-3.0]).join(', ') + "]");
}
