// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double exp(double x) {
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 20) {
    term = term * x / (n.toDouble());
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

List<double> scaled_exponential_linear_unit(List<double> vector, double alpha, double lambda_) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double x = vector[i];
    double y = (x > 0.0 ? lambda_ * x : lambda_ * alpha * (exp(x) - 1.0));
    result = (result..add(y));
    i = i + 1;
  }
  return result;
}

void main() {
  print("[" + scaled_exponential_linear_unit([1.3, 3.7, 2.4], 1.6732, 1.0507).join(', ') + "]");
  print("[" + scaled_exponential_linear_unit([1.3, 4.7, 8.2], 1.6732, 1.0507).join(', ') + "]");
}
