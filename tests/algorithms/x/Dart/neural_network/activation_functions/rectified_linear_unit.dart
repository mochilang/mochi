// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<double> relu(List<double> vector) {
  List<double> result = <double>[];
  int i = 0;
  while (i < vector.length) {
    double v = vector[i];
    if (v > 0.0) {
    result = (result..add(v));
  } else {
    result = (result..add(0.0));
  }
    i = i + 1;
  }
  return result;
}

void main() {
  print(_str(relu(List<double>.from([-1.0, 0.0, 5.0]))));
}
