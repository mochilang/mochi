// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class HeapItem {
  int value;
  int list_idx;
  int elem_idx;
  HeapItem({required this.value, required this.list_idx, required this.elem_idx});
}

int INF = 1000000000;
List<int> smallest_range(List<List<int>> nums) {
  List<HeapItem> heap = <HeapItem>[];
  int current_max = -INF;
  int i = 0;
  while (i < nums.length) {
    int first_val = nums[i][0];
    heap = [...heap, HeapItem(value: first_val, list_idx: i, elem_idx: 0)];
    if (first_val > current_max) {
    current_max = first_val;
  }
    i = i + 1;
  }
  List<int> best = [-INF, INF];
  while (heap.length > 0) {
    int min_idx = 0;
    int j = 1;
    while (j < heap.length) {
    HeapItem hj = heap[j];
    HeapItem hmin = heap[min_idx];
    if (hj.value < hmin.value) {
    min_idx = j;
  }
    j = j + 1;
  }
    HeapItem item = heap[min_idx];
    List<HeapItem> new_heap = <HeapItem>[];
    int k = 0;
    while (k < heap.length) {
    if (k != min_idx) {
    new_heap = [...new_heap, heap[k]];
  }
    k = k + 1;
  }
    heap = new_heap;
    int current_min = item.value;
    if (current_max - current_min < best[1] - best[0]) {
    best = [current_min, current_max];
  }
    if (item.elem_idx == nums[item.list_idx].length - 1) {
    break;
  }
    int next_val = nums[item.list_idx][item.elem_idx + 1];
    heap = [...heap, HeapItem(value: next_val, list_idx: item.list_idx, elem_idx: item.elem_idx + 1)];
    if (next_val > current_max) {
    current_max = next_val;
  }
  }
  return best;
}

String list_to_string(List<int> arr) {
  String s = "[";
  int i = 0;
  while (i < arr.length) {
    s = s + _str(arr[i]);
    if (i < arr.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  return s + "]";
}

void _main() {
  List<int> result1 = smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]);
  print(list_to_string(result1));
  List<int> result2 = smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]]);
  print(list_to_string(result2));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
