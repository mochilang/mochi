// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Item {
  double value;
  double weight;
  Item({required this.value, required this.weight});
}

List<Item> sort_by_ratio_desc(List<Item> arr) {
  int i = 1;
  while (i < arr.length) {
    Item key = arr[i];
    int j = i - 1;
    while (j >= 0) {
    Item current = arr[j];
    if (current.value / current.weight < key.value / key.weight) {
    while (arr.length <= j + 1) { arr.add(null as dynamic); } arr[j + 1] = current;
    j = j - 1;
  } else {
    break;
  }
  }
    while (arr.length <= j + 1) { arr.add(null as dynamic); } arr[j + 1] = key;
    i = i + 1;
  }
  return arr;
}

double sum_first(List<double> arr, int k) {
  double s = 0.0;
  int i = 0;
  while (i < k && i < arr.length) {
    s = s + arr[i];
    i = i + 1;
  }
  return s;
}

double frac_knapsack(List<double> vl, List<double> wt, double w, int n) {
  List<Item> items = <Item>[];
  int i = 0;
  while (i < vl.length && i < wt.length) {
    items = [...items, Item(value: vl[i], weight: wt[i])];
    i = i + 1;
  }
  items = sort_by_ratio_desc(items);
  List<double> values = <double>[];
  List<double> weights = <double>[];
  i = 0;
  while (i < items.length) {
    Item itm = items[i];
    values = [...values, itm.value];
    weights = [...weights, itm.weight];
    i = i + 1;
  }
  List<double> acc = <double>[];
  double total = 0.0;
  i = 0;
  while (i < weights.length) {
    total = total + weights[i];
    acc = [...acc, total];
    i = i + 1;
  }
  int k = 0;
  while (k < acc.length && w >= acc[k]) {
    k = k + 1;
  }
  if (k == 0) {
    return 0.0;
  }
  if (k >= values.length) {
    return sum_first(values, values.length);
  }
  if (k != n) {
    return sum_first(values, k) + (w - acc[k - 1]) * values[k] / weights[k];
  }
  return sum_first(values, k);
}

List<double> vl = [60.0, 100.0, 120.0];
List<double> wt = [10.0, 20.0, 30.0];
double result = frac_knapsack(vl, wt, 50.0, 3);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((result).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
