// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int index_of_min(List<int> xs) {
  int min_idx = 0;
  int i = 1;
  while (i < xs.length) {
    if (xs[i] < xs[min_idx]) {
    min_idx = i;
  }
    i = i + 1;
  }
  return min_idx;
}

List<int> remove_at(List<int> xs, int idx) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

int optimal_merge_pattern(List<int> files) {
  List<int> arr = files;
  int optimal_merge_cost = 0;
  while (arr.length > 1) {
    int temp = 0;
    int k = 0;
    while (k < 2) {
    int min_idx = index_of_min(arr);
    temp = temp + arr[min_idx];
    arr = remove_at(arr, min_idx);
    k = k + 1;
  }
    arr = [...arr, temp];
    optimal_merge_cost = optimal_merge_cost + temp;
  }
  return optimal_merge_cost;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(optimal_merge_pattern([2, 3, 4]));
  print(optimal_merge_pattern([5, 10, 20, 30, 30]));
  print(optimal_merge_pattern([8, 8, 8, 8, 8]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
