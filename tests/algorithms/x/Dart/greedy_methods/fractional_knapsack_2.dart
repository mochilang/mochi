// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class KnapsackResult {
  double max_value;
  List<double> fractions;
  KnapsackResult({required this.max_value, required this.fractions});
}

List<int> sort_by_ratio(List<int> index, List<double> ratio) {
  int i = 1;
  while (i < index.length) {
    int key = index[i];
    double key_ratio = ratio[key];
    int j = i - 1;
    while (j >= 0 && ratio[index[j]] < key_ratio) {
    while (index.length <= j + 1) { index.add(0); } index[j + 1] = index[j];
    j = j - 1;
  }
    while (index.length <= j + 1) { index.add(0); } index[j + 1] = key;
    i = i + 1;
  }
  return index;
}

KnapsackResult fractional_knapsack(List<double> value, List<double> weight, double capacity) {
  int n = value.length;
  List<int> index = <int>[];
  int i = 0;
  while (i < n) {
    index = [...index, i];
    i = i + 1;
  }
  List<double> ratio = <double>[];
  i = 0;
  while (i < n) {
    ratio = [...ratio, value[i] / weight[i]];
    i = i + 1;
  }
  index = sort_by_ratio(index, ratio);
  List<double> fractions = <double>[];
  i = 0;
  while (i < n) {
    fractions = [...fractions, 0.0];
    i = i + 1;
  }
  double max_value = 0.0;
  int idx = 0;
  while (idx < index.length) {
    int item = index[idx];
    if (weight[item] <= capacity) {
    while (fractions.length <= item) { fractions.add(0); } fractions[item] = 1.0;
    max_value = max_value + value[item];
    capacity = capacity - weight[item];
  } else {
    while (fractions.length <= item) { fractions.add(0); } fractions[item] = capacity / weight[item];
    max_value = max_value + value[item] * capacity / weight[item];
    break;
  }
    idx = idx + 1;
  }
  return KnapsackResult(max_value: max_value, fractions: fractions);
}

List<double> v = [1.0, 3.0, 5.0, 7.0, 9.0];
List<double> w = [0.9, 0.7, 0.5, 0.3, 0.1];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(fractional_knapsack(v, w, 5.0));
  print(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0));
  print(fractional_knapsack(List<double>.from([]), List<double>.from([]), 30.0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
