// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Item {
  int weight;
  int value;
  Item({required this.weight, required this.value});
}

double ratio(Item item) {
  return (item.value as double) / (item.weight as double);
}

double fractional_cover(List<Item> items, int capacity) {
  if (capacity < 0) {
    throw Exception("Capacity cannot be negative");
  }
  double total = 0.0;
  int remaining = capacity;
  List<Item> sorted = (List.of([for (var it in items) it])..sort(((a, b) => ratio(b).compareTo(ratio(a)))));
  int idx = 0;
  while (idx < sorted.length && remaining > 0) {
    Item item = sorted[idx];
    int take = (item.weight < remaining ? item.weight : remaining);
    total = total + (take as double) * ratio(item);
    remaining = remaining - take;
    idx = idx + 1;
  }
  return total;
}

List<Item> items1 = [Item(weight: 10, value: 60), Item(weight: 20, value: 100), Item(weight: 30, value: 120)];
List<Item> items2 = [Item(weight: 20, value: 100), Item(weight: 30, value: 120), Item(weight: 10, value: 60)];
List<Item> items3 = [];
List<Item> items4 = [Item(weight: 10, value: 60)];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((fractional_cover(items1, 50)).toString());
  print((fractional_cover(items2, 25)).toString());
  print((fractional_cover(items3, 50)).toString());
  print((fractional_cover(items4, 5)).toString());
  print((fractional_cover(items4, 1)).toString());
  print((fractional_cover(items4, 0)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
