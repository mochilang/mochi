// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> insertion_sort(List<int> a) {
  int i = 1;
  while (i < a.length) {
    int key = a[i];
    int j = i - 1;
    while (j >= 0 && a[j] > key) {
    while (a.length <= j + 1) { a.add(0); } a[j + 1] = a[j];
    j = j - 1;
  }
    while (a.length <= j + 1) { a.add(0); } a[j + 1] = key;
    i = i + 1;
  }
  return a;
}

int minimum_waiting_time(List<int> queries) {
  int n = queries.length;
  if (n == 0 || n == 1) {
    return 0;
  }
  List<int> sorted = insertion_sort(queries);
  int total = 0;
  int i = 0;
  while (i < n) {
    total = total + sorted[i] * (n - i - 1);
    i = i + 1;
  }
  return total;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(minimum_waiting_time([3, 2, 1, 2, 6]));
  print(minimum_waiting_time([3, 2, 1]));
  print(minimum_waiting_time([1, 2, 3, 4]));
  print(minimum_waiting_time([5, 5, 5, 5]));
  print(minimum_waiting_time(<int>[]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
