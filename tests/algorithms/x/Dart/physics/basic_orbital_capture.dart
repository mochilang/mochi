// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double G = 0.000000000066743;
double C = 299792458.0;
double PI = 3.141592653589793;
double pow10(int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double sqrt(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double capture_radii(double target_body_radius, double target_body_mass, double projectile_velocity) {
  if (target_body_mass < 0.0) {
    throw Exception("Mass cannot be less than 0");
  }
  if (target_body_radius < 0.0) {
    throw Exception("Radius cannot be less than 0");
  }
  if (projectile_velocity > C) {
    throw Exception("Cannot go beyond speed of light");
  }
  double escape_velocity_squared = 2.0 * G * target_body_mass / target_body_radius;
  double denom = projectile_velocity * projectile_velocity;
  double capture_radius = target_body_radius * sqrt(1.0 + escape_velocity_squared / denom);
  return capture_radius;
}

double capture_area(double capture_radius) {
  if (capture_radius < 0.0) {
    throw Exception("Cannot have a capture radius less than 0");
  }
  double sigma = PI * capture_radius * capture_radius;
  return sigma;
}

void run_tests() {
  double r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0);
  if ((r - 1.720959069143714 * pow10(10)).abs().compareTo(1.0) > 0) {
    throw Exception("capture_radii failed");
  }
  double a = capture_area(r);
  if ((a - 9.304455331801812 * pow10(20)).abs().compareTo(1.0) > 0) {
    throw Exception("capture_area failed");
  }
}

void _main() {
  run_tests();
  double r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0);
  print(_str(r));
  print(_str(capture_area(r)));
}

void _start() {
  _main();
}

void main() => _start();
