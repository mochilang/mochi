// Generated by Mochi transpiler
import 'dart:math' as math;
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

double G = 6.6743e-11;
double C = 2.99792458e+08;
double PI = 3.141592653589793;
double pow10(int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double sqrt(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double abs(double x) {
  if (x < 0.0) {
    return -x;
  }
  return x;
}

double capture_radii(double target_body_radius, double target_body_mass, double projectile_velocity) {
  if (target_body_mass < 0.0) {
    _error("Mass cannot be less than 0");
  }
  if (target_body_radius < 0.0) {
    _error("Radius cannot be less than 0");
  }
  if (projectile_velocity > C) {
    _error("Cannot go beyond speed of light");
  }
  double escape_velocity_squared = 2.0 * G * target_body_mass / target_body_radius;
  double denom = projectile_velocity * projectile_velocity;
  double capture_radius = target_body_radius * sqrt(1.0 + escape_velocity_squared / denom);
  return capture_radius;
}

double capture_area(double capture_radius) {
  if (capture_radius < 0.0) {
    _error("Cannot have a capture radius less than 0");
  }
  double sigma = PI * capture_radius * capture_radius;
  return sigma;
}

void run_tests() {
  double r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0);
  if ((r - 1.720959069143714 * pow10(10)).abs().compareTo(1.0) > 0) {
    _error("capture_radii failed");
  }
  double a = capture_area(r);
  if ((a - 9.304455331801812 * pow10(20)).abs().compareTo(1.0) > 0) {
    _error("capture_area failed");
  }
}

void _main() {
  run_tests();
  double r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0);
  print(_str(r));
  print(_str(capture_area(r)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
