// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String format2(double x) {
  String sign = (x < 0.0 ? "-" : "");
  dynamic y = (x < 0.0 ? -x : x);
  double m = 100.0;
  double scaled = y * m;
  int i = (scaled).toInt();
  if (scaled - (i.toDouble()) >= 0.5) {
    i = i + 1;
  }
  int int_part = i ~/ 100;
  int frac_part = i % 100;
  String frac_str = _str(frac_part);
  if (frac_part < 10) {
    frac_str = "0" + frac_str;
  }
  return sign + _str(int_part) + "." + frac_str;
}

double K = 8987551792.3;
double coulombs_law(double q1, double q2, double radius) {
  if (radius <= 0.0) {
    ;
  }
  double force = K * q1 * q2 / (radius * radius);
  return force;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(format2(coulombs_law(15.5, 20.0, 15.0)));
  print(format2(coulombs_law(1.0, 15.0, 5.0)));
  print(format2(coulombs_law(20.0, -50.0, 15.0)));
  print(format2(coulombs_law(-5.0, -8.0, 10.0)));
  print(format2(coulombs_law(50.0, 100.0, 50.0)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
