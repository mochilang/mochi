// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

double pow10(int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double PLANCK_CONSTANT_JS = 6.6261 / pow10(34);
double PLANCK_CONSTANT_EVS = 4.1357 / pow10(15);
double maximum_kinetic_energy(double frequency, double work_function, bool in_ev) {
  if (frequency < 0.0) {
    _error("Frequency can't be negative.");
  }
  double energy = (in_ev ? PLANCK_CONSTANT_EVS * frequency - work_function : PLANCK_CONSTANT_JS * frequency - work_function);
  if (energy > 0.0) {
    return energy;
  }
  return 0.0;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(maximum_kinetic_energy(1000000.0, 2.0, false)));
  print(_str(maximum_kinetic_energy(1000000.0, 2.0, true)));
  print(_str(maximum_kinetic_energy(10000000000000000.0, 2.0, true)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
