// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

class Particle {
  double x;
  double y;
  double z;
  double mass;
  Particle({required this.x, required this.y, required this.z, required this.mass});
}

class Coord3D {
  double x;
  double y;
  double z;
  Coord3D({required this.x, required this.y, required this.z});
}

double round2(double x) {
  double scaled = x * 100.0;
  double rounded = ((scaled + 0.5).toInt()).toDouble();
  return rounded / 100.0;
}

Coord3D center_of_mass(List<Particle> ps) {
  if (ps.length == 0) {
    _error("No particles provided");
  }
  int i = 0;
  double total_mass = 0.0;
  while (i < ps.length) {
    Particle p = ps[i];
    if (p.mass <= 0.0) {
    _error("Mass of all particles must be greater than 0");
  }
    total_mass = total_mass + p.mass;
    i = i + 1;
  }
  double sum_x = 0.0;
  double sum_y = 0.0;
  double sum_z = 0.0;
  i = 0;
  while (i < ps.length) {
    Particle p = ps[i];
    sum_x = sum_x + p.x * p.mass;
    sum_y = sum_y + p.y * p.mass;
    sum_z = sum_z + p.z * p.mass;
    i = i + 1;
  }
  double cm_x = round2(sum_x / total_mass);
  double cm_y = round2(sum_y / total_mass);
  double cm_z = round2(sum_z / total_mass);
  return Coord3D(x: cm_x, y: cm_y, z: cm_z);
}

String coord_to_string(Coord3D c) {
  return "Coord3D(x=" + _str(c.x) + ", y=" + _str(c.y) + ", z=" + _str(c.z) + ")";
}

Coord3D r1 = center_of_mass([Particle(x: 1.5, y: 4.0, z: 3.4, mass: 4.0), Particle(x: 5.0, y: 6.8, z: 7.0, mass: 8.1), Particle(x: 9.4, y: 10.1, z: 11.6, mass: 12.0)]);
Coord3D r2 = center_of_mass([Particle(x: 1.0, y: 2.0, z: 3.0, mass: 4.0), Particle(x: 5.0, y: 6.0, z: 7.0, mass: 8.0), Particle(x: 9.0, y: 10.0, z: 11.0, mass: 12.0)]);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(coord_to_string(r1));
  print(coord_to_string(r2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
