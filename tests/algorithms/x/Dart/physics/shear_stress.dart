// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

class Result {
  String name;
  double value;
  Result({required this.name, required this.value});
}

Result shear_stress(double stress, double tangential_force, double area) {
  int zeros = 0;
  if (stress == 0.0) {
    zeros = zeros + 1;
  }
  if (tangential_force == 0.0) {
    zeros = zeros + 1;
  }
  if (area == 0.0) {
    zeros = zeros + 1;
  }
  if (zeros != 1) {
    _error("You cannot supply more or less than 2 values");
  } else {
    if (stress < 0.0) {
    _error("Stress cannot be negative");
  } else {
    if (tangential_force < 0.0) {
    _error("Tangential Force cannot be negative");
  } else {
    if (area < 0.0) {
    _error("Area cannot be negative");
  } else {
    if (stress == 0.0) {
    return Result(name: "stress", value: tangential_force / area);
  } else {
    if (tangential_force == 0.0) {
    return Result(name: "tangential_force", value: stress * area);
  } else {
    return Result(name: "area", value: tangential_force / stress);
  };
  };
  };
  };
  };
  }
}

String str_result(Result r) {
  return "Result(name='" + r.name + "', value=" + _str(r.value) + ")";
}

Result r1 = shear_stress(25.0, 100.0, 0.0);
Result r2 = shear_stress(0.0, 1600.0, 200.0);
Result r3 = shear_stress(1000.0, 0.0, 1200.0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(str_result(r1));
  print(str_result(r2));
  print(str_result(r3));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
