// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
double g = 9.80665;
double _mod(double x, double m) {
  return x - ((x / m).toInt()).toDouble() * m;
}

double sin(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y3 = y2 * y;
  double y5 = y3 * y2;
  double y7 = y5 * y2;
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

double deg_to_rad(double deg) {
  return deg * PI / 180.0;
}

double floor(double x) {
  int i = (x).toInt();
  if (i.toDouble() > x) {
    i = i - 1;
  }
  return i.toDouble();
}

double pow10(int n) {
  double result = 1.0;
  int i = 0;
  while (i < n) {
    result = result * 10.0;
    i = i + 1;
  }
  return result;
}

double round(double x, int n) {
  double m = pow10(n);
  double y = floor(x * m + 0.5);
  return y / m;
}

void check_args(double init_velocity, double angle) {
  if (angle > 90.0 || angle < 1.0) {
    _error("Invalid angle. Range is 1-90 degrees.");
  }
  if (init_velocity < 0.0) {
    _error("Invalid velocity. Should be a positive number.");
  }
}

double horizontal_distance(double init_velocity, double angle) {
  check_args(init_velocity, angle);
  double radians = deg_to_rad(2.0 * angle);
  return round(init_velocity * init_velocity * sin(radians) / g, 2);
}

double max_height(double init_velocity, double angle) {
  check_args(init_velocity, angle);
  double radians = deg_to_rad(angle);
  double s = sin(radians);
  return round(init_velocity * init_velocity * s * s / (2.0 * g), 2);
}

double total_time(double init_velocity, double angle) {
  check_args(init_velocity, angle);
  double radians = deg_to_rad(angle);
  return round(2.0 * init_velocity * sin(radians) / g, 2);
}

double v0 = 25.0;
double angle = 20.0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(horizontal_distance(v0, angle));
  print(max_height(v0, angle));
  print(total_time(v0, angle));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
