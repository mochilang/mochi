// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

double pow10(int n) {
  double p = 1.0;
  if (n >= 0) {
    int i = 0;
    while (i < n) {
    p = p * 10.0;
    i = i + 1;
  };
  } else {
    int i = 0;
    while (i > n) {
    p = p / 10.0;
    i = i - 1;
  };
  }
  return p;
}

double floor(double x) {
  int i = (x).toInt();
  double f = i.toDouble();
  if (f > x) {
    return i - 1.toDouble();
  }
  return f;
}

String format_scientific_3(double x) {
  if (x == 0.0) {
    return "0.000e+00";
  }
  String sign = "";
  double _num = x;
  if (_num < 0.0) {
    sign = "-";
    _num = -_num;
  }
  int exp = 0;
  while (_num >= 10.0) {
    _num = _num / 10.0;
    exp = exp + 1;
  }
  while (_num < 1.0) {
    _num = _num * 10.0;
    exp = exp - 1;
  }
  double temp = floor(_num * 1000.0 + 0.5);
  int scaled = (temp).toInt();
  if (scaled == 10000) {
    scaled = 1000;
    exp = exp + 1;
  }
  int int_part = scaled ~/ 1000;
  int frac_part = scaled % 1000;
  String frac_str = _str(frac_part);
  while (frac_str.length < 3) {
    frac_str = "0" + frac_str;
  }
  String mantissa = _str(int_part) + "." + frac_str;
  String exp_sign = "+";
  int exp_abs = exp;
  if (exp < 0) {
    exp_sign = "-";
    exp_abs = -exp;
  }
  String exp_str = _str(exp_abs);
  if (exp_abs < 10) {
    exp_str = "0" + exp_str;
  }
  return sign + mantissa + "e" + exp_sign + exp_str;
}

String orbital_transfer_work(double mass_central, double mass_object, double r_initial, double r_final) {
  double G = 6.6743 * pow10(-11);
  if (r_initial <= 0.0 || r_final <= 0.0) {
    _error("Orbital radii must be greater than zero.");
  }
  double work = G * mass_central * mass_object / 2.0 * (1.0 / r_initial - 1.0 / r_final);
  return format_scientific_3(work);
}

void test_orbital_transfer_work() {
  if (orbital_transfer_work(5.972 * pow10(24), 1000.0, 6.371 * pow10(6), 7.0 * pow10(6)) != "2.811e+09") {
    _error("case1 failed");
  }
  if (orbital_transfer_work(5.972 * pow10(24), 500.0, 7.0 * pow10(6), 6.371 * pow10(6)) != "-1.405e+09") {
    _error("case2 failed");
  }
  if (orbital_transfer_work(1.989 * pow10(30), 1000.0, 1.5 * pow10(11), 2.28 * pow10(11)) != "1.514e+11") {
    _error("case3 failed");
  }
}

void _main() {
  test_orbital_transfer_work();
  print(orbital_transfer_work(5.972 * pow10(24), 1000.0, 6.371 * pow10(6), 7.0 * pow10(6)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
