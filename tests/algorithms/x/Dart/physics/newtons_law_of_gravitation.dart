// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

class Result {
  String kind;
  double value;
  Result({required this.kind, required this.value});
}

double GRAVITATIONAL_CONSTANT = 0.000000000066743;
double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

Result gravitational_law(double force, double mass_1, double mass_2, double distance) {
  int zero_count = 0;
  if (force == 0.0) {
    zero_count = zero_count + 1;
  }
  if (mass_1 == 0.0) {
    zero_count = zero_count + 1;
  }
  if (mass_2 == 0.0) {
    zero_count = zero_count + 1;
  }
  if (distance == 0.0) {
    zero_count = zero_count + 1;
  }
  if (zero_count != 1) {
    _error("One and only one argument must be 0");
  }
  if (force < 0.0) {
    _error("Gravitational force can not be negative");
  }
  if (distance < 0.0) {
    _error("Distance can not be negative");
  }
  if (mass_1 < 0.0) {
    _error("Mass can not be negative");
  }
  if (mass_2 < 0.0) {
    _error("Mass can not be negative");
  }
  double product_of_mass = mass_1 * mass_2;
  if (force == 0.0) {
    double f = GRAVITATIONAL_CONSTANT * product_of_mass / (distance * distance);
    return Result(kind: "force", value: f);
  }
  if (mass_1 == 0.0) {
    double m1 = force * (distance * distance) / (GRAVITATIONAL_CONSTANT * mass_2);
    return Result(kind: "mass_1", value: m1);
  }
  if (mass_2 == 0.0) {
    double m2 = force * (distance * distance) / (GRAVITATIONAL_CONSTANT * mass_1);
    return Result(kind: "mass_2", value: m2);
  }
  double d = sqrtApprox(GRAVITATIONAL_CONSTANT * product_of_mass / force);
  return Result(kind: "distance", value: d);
}

Result r1 = gravitational_law(0.0, 5.0, 10.0, 20.0);
Result r2 = gravitational_law(7367.382, 0.0, 74.0, 3048.0);
Result r3 = gravitational_law(100.0, 5.0, 0.0, 3.0);
Result r4 = gravitational_law(100.0, 5.0, 10.0, 0.0);
void main() {
  print(r1.kind + " " + _str(r1.value));
  print(r2.kind + " " + _str(r2.value));
  print(r3.kind + " " + _str(r3.value));
  print(r4.kind + " " + _str(r4.value));
}
