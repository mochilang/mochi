// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double exp_approx(double x) {
  double y = x;
  bool is_neg = false;
  if (x < 0.0) {
    is_neg = true;
    y = -x;
  }
  double term = 1.0;
  double sum = 1.0;
  int n = 1;
  while (n < 30) {
    term = term * y / (n.toDouble());
    sum = sum + term;
    n = n + 1;
  }
  if (is_neg) {
    return 1.0 / sum;
  }
  return sum;
}

double ln_series(double x) {
  double t = (x - 1.0) / (x + 1.0);
  double term = t;
  double sum = 0.0;
  int n = 1;
  while (n <= 19) {
    sum = sum + term / (n.toDouble());
    term = term * t * t;
    n = n + 2;
  }
  return 2.0 * sum;
}

double ln(double x) {
  double y = x;
  int k = 0;
  while (y >= 10.0) {
    y = y / 10.0;
    k = k + 1;
  }
  while (y < 1.0) {
    y = y * 10.0;
    k = k - 1;
  }
  return ln_series(y) + (k.toDouble()) * ln_series(10.0);
}

double powf(double base, double exponent) {
  return exp_approx(exponent * ln(base));
}

double rainfall_intensity(double coefficient_k, double coefficient_a, double coefficient_b, double coefficient_c, double return_period, double duration) {
  if (coefficient_k <= 0.0) {
    ;
  }
  if (coefficient_a <= 0.0) {
    ;
  }
  if (coefficient_b <= 0.0) {
    ;
  }
  if (coefficient_c <= 0.0) {
    ;
  }
  if (return_period <= 0.0) {
    ;
  }
  if (duration <= 0.0) {
    ;
  }
  double numerator = coefficient_k * powf(return_period, coefficient_a);
  double denominator = powf(duration + coefficient_b, coefficient_c);
  return numerator / denominator;
}

double r1 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0);
double r2 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0);
double r3 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(r1));
  print(_str(r2));
  print(_str(r3));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
