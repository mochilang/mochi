// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
double _mod(double x, double m) {
  return x - ((x / m).toInt().toDouble()) * m;
}

double sin_approx(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y3 = y2 * y;
  double y5 = y3 * y2;
  double y7 = y5 * y2;
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

double cos_approx(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y4 = y2 * y2;
  double y6 = y4 * y2;
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

List<double> polar_force(double magnitude, double angle, bool radian_mode) {
  double theta = (radian_mode ? angle : angle * PI / 180.0);
  return [magnitude * cos_approx(theta), magnitude * sin_approx(theta)];
}

double abs_float(double x) {
  if (x < 0.0) {
    return -x;
  } else {
    return x;
  }
}

bool in_static_equilibrium(List<List<double>> forces, List<List<double>> location, double eps) {
  double sum_moments = 0.0;
  int i = 0;
  int n = forces.length;
  while (i < n) {
    List<double> r = location[i];
    List<double> f = forces[i];
    double moment = r[0] * f[1] - r[1] * f[0];
    sum_moments = sum_moments + moment;
    i = i + 1;
  }
  return abs_float(sum_moments) < eps;
}

List<List<double>> forces1 = [[1.0, 1.0], [-1.0, 2.0]];
List<List<double>> location1 = [[1.0, 0.0], [10.0, 0.0]];
List<List<double>> forces2 = [polar_force(718.4, 150.0, false), polar_force(879.54, 45.0, false), polar_force(100.0, -90.0, false)];
List<List<double>> location2 = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
List<List<double>> forces3 = [polar_force(30.0 * 9.81, 15.0, false), polar_force(215.0, 135.0, false), polar_force(264.0, 60.0, false)];
List<List<double>> location3 = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
List<List<double>> forces4 = [[0.0, -2000.0], [0.0, -1200.0], [0.0, 15600.0], [0.0, -12400.0]];
List<List<double>> location4 = [[0.0, 0.0], [6.0, 0.0], [10.0, 0.0], [12.0, 0.0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(in_static_equilibrium(forces1, location1, 0.1)));
  print(_str(in_static_equilibrium(forces2, location2, 0.1)));
  print(_str(in_static_equilibrium(forces3, location3, 0.1)));
  print(_str(in_static_equilibrium(forces4, location4, 0.1)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
