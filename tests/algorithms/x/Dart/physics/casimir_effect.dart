// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double PI = 3.141592653589793;
double REDUCED_PLANCK_CONSTANT = 0.0000000000000000000000000000000001054571817;
double SPEED_OF_LIGHT = 300000000.0;
double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 100) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

Map<String, double> casimir_force(double force, double area, double distance) {
  int zero_count = 0;
  if (force == 0.0) {
    zero_count = zero_count + 1;
  }
  if (area == 0.0) {
    zero_count = zero_count + 1;
  }
  if (distance == 0.0) {
    zero_count = zero_count + 1;
  }
  if (zero_count != 1) {
    throw Exception("One and only one argument must be 0");
  }
  if (force < 0.0) {
    throw Exception("Magnitude of force can not be negative");
  }
  if (distance < 0.0) {
    throw Exception("Distance can not be negative");
  }
  if (area < 0.0) {
    throw Exception("Area can not be negative");
  }
  if (force == 0.0) {
    double _num = REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT * PI * PI * area;
    double den = 240.0 * distance * distance * distance * distance;
    double f = _num / den;
    return {"force": f};
  }
  if (area == 0.0) {
    double _num = 240.0 * force * distance * distance * distance * distance;
    double den = REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT * PI * PI;
    double a = _num / den;
    return {"area": a};
  }
  double _num = REDUCED_PLANCK_CONSTANT * SPEED_OF_LIGHT * PI * PI * area;
  double den = 240.0 * force;
  double inner = _num / den;
  double d = sqrtApprox(sqrtApprox(inner));
  return {"distance": d};
}

void _main() {
  print(_str(casimir_force(0.0, 4.0, 0.03)));
  print(_str(casimir_force(0.0000000002635, 0.0023, 0.0)));
  print(_str(casimir_force(0.000000000000000002737, 0.0, 0.0023746)));
}

void _start() {
  _main();
}

void main() => _start();
