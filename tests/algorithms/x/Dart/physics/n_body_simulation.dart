// Generated by Mochi transpiler
import 'dart:convert';

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


void _json(dynamic v) {
  print(jsonEncode(v));
}

class Body {
  double position_x;
  double position_y;
  double velocity_x;
  double velocity_y;
  double mass;
  Body({required this.position_x, required this.position_y, required this.velocity_x, required this.velocity_y, required this.mass});
}

class BodySystem {
  List<Body> bodies;
  double gravitation_constant;
  double time_factor;
  double softening_factor;
  BodySystem({required this.bodies, required this.gravitation_constant, required this.time_factor, required this.softening_factor});
}

Body make_body(double px, double py, double vx, double vy, double mass) {
  return Body(position_x: px, position_y: py, velocity_x: vx, velocity_y: vy, mass: mass);
}

Body update_velocity(Body body, double force_x, double force_y, double delta_time) {
  body.velocity_x = body.velocity_x + force_x * delta_time;
  body.velocity_y = body.velocity_y + force_y * delta_time;
  return body;
}

Body update_position(Body body, double delta_time) {
  body.position_x = body.position_x + body.velocity_x * delta_time;
  body.position_y = body.position_y + body.velocity_y * delta_time;
  return body;
}

BodySystem make_body_system(List<Body> bodies, double g, double tf, double sf) {
  return BodySystem(bodies: bodies, gravitation_constant: g, time_factor: tf, softening_factor: sf);
}

double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

BodySystem update_system(BodySystem system, double delta_time) {
  List<Body> bodies = system.bodies;
  int i = 0;
  while (i < bodies.length) {
    Body body1 = bodies[i];
    double force_x = 0.0;
    double force_y = 0.0;
    int j = 0;
    while (j < bodies.length) {
    if (i != j) {
    Body body2 = bodies[j];
    double dif_x = body2.position_x - body1.position_x;
    double dif_y = body2.position_y - body1.position_y;
    double distance_sq = dif_x * dif_x + dif_y * dif_y + system.softening_factor;
    double distance = sqrtApprox(distance_sq);
    double denom = distance * distance * distance;
    force_x = force_x + system.gravitation_constant * body2.mass * dif_x / denom;
    force_y = force_y + system.gravitation_constant * body2.mass * dif_y / denom;
  }
    j = j + 1;
  }
    body1 = update_velocity(body1, force_x, force_y, delta_time * system.time_factor);
    while (bodies.length <= i) { bodies.add(null as dynamic); } bodies[i] = body1;
    i = i + 1;
  }
  i = 0;
  while (i < bodies.length) {
    Body body = bodies[i];
    body = update_position(body, delta_time * system.time_factor);
    while (bodies.length <= i) { bodies.add(null as dynamic); } bodies[i] = body;
    i = i + 1;
  }
  system.bodies = bodies;
  return system;
}

void _main() {
  Body b1 = make_body(0.0, 0.0, 0.0, 0.0, 1.0);
  Body b2 = make_body(10.0, 0.0, 0.0, 0.0, 1.0);
  BodySystem sys1 = make_body_system([b1, b2], 1.0, 1.0, 0.0);
  sys1 = update_system(sys1, 1.0);
  Body b1_after = sys1.bodies[0];
  double pos1x = b1_after.position_x;
  double pos1y = b1_after.position_y;
  _json({"x": pos1x, "y": pos1y});
  double vel1x = b1_after.velocity_x;
  double vel1y = b1_after.velocity_y;
  _json({"vx": vel1x, "vy": vel1y});
  Body b3 = make_body(-10.0, 0.0, 0.0, 0.0, 1.0);
  Body b4 = make_body(10.0, 0.0, 0.0, 0.0, 4.0);
  BodySystem sys2 = make_body_system([b3, b4], 1.0, 10.0, 0.0);
  sys2 = update_system(sys2, 1.0);
  Body b2_after = sys2.bodies[0];
  double pos2x = b2_after.position_x;
  double pos2y = b2_after.position_y;
  _json({"x": pos2x, "y": pos2y});
  double vel2x = b2_after.velocity_x;
  double vel2y = b2_after.velocity_y;
  _json({"vx": vel2x, "vy": vel2y});
}

void _start() {
  _main();
}

void main() => _start();
