// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

double c = 299792458.0;
double sqrtApprox(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double beta(double velocity) {
  if (velocity > c) {
    _error("Speed must not exceed light speed 299,792,458 [m/s]!");
  }
  if (velocity < 1.0) {
    _error("Speed must be greater than or equal to 1!");
  }
  return velocity / c;
}

double gamma(double velocity) {
  double b = beta(velocity);
  return 1.0 / sqrtApprox(1.0 - b * b);
}

List<List<double>> transformation_matrix(double velocity) {
  double g = gamma(velocity);
  double b = beta(velocity);
  return [[g, -g * b, 0.0, 0.0], [-g * b, g, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]];
}

List<double> mat_vec_mul(List<List<double>> mat, List<double> vec) {
  List<double> res = <double>[];
  int i = 0;
  while (i < 4) {
    List<double> row = mat[i];
    double value = row[0] * vec[0] + row[1] * vec[1] + row[2] * vec[2] + row[3] * vec[3];
    res = List<double>.from(res + [value]);
    i = i + 1;
  }
  return res;
}

List<double> transform(double velocity, List<double> event) {
  double g = gamma(velocity);
  double b = beta(velocity);
  double ct = event[0] * c;
  double x = event[1];
  return [g * ct - g * b * x, -g * b * ct + g * x, event[2], event[3]];
}

List<double> v = transform(29979245.0, [1.0, 2.0, 3.0, 4.0]);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(beta(c)));
  print(_str(beta(199792458.0)));
  print(_str(beta(100000.0)));
  print(_str(gamma(4.0)));
  print(_str(gamma(100000.0)));
  print(_str(gamma(30000000.0)));
  print(_str(transformation_matrix(29979245.0)));
  print(_str(v));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
