// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

double pow(double base, int exp) {
  double result = 1.0;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double sqrt_approx(double x) {
  if (x == 0.0) {
    return 0.0;
  }
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double hubble_parameter(double hubble_constant, double radiation_density, double matter_density, double dark_energy, double redshift) {
  List<double> parameters = [redshift, radiation_density, matter_density, dark_energy];
  int i = 0;
  while (i < parameters.length) {
    if (parameters[i] < 0.0) {
    _error("All input parameters must be positive");
  }
    i = i + 1;
  }
  i = 1;
  while (i < 4) {
    if (parameters[i] > 1.0) {
    _error("Relative densities cannot be greater than one");
  }
    i = i + 1;
  }
  double curvature = 1.0 - (matter_density + radiation_density + dark_energy);
  double zp1 = redshift + 1.0;
  double e2 = radiation_density * pow(zp1, 4) + matter_density * pow(zp1, 3) + curvature * pow(zp1, 2) + dark_energy;
  return hubble_constant * sqrt_approx(e2);
}

void test_hubble_parameter() {
  double h = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0);
  if (h < 68.2999 || h > 68.3001) {
    _error("hubble_parameter test failed");
  }
}

void _main() {
  test_hubble_parameter();
  print(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
