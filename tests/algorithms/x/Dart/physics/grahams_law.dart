// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double to_float(int x) {
  return x * 1.0;
}

double round6(double x) {
  double factor = 1000000.0;
  return ((x * factor + 0.5).toInt()).toDouble() / factor;
}

double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

bool validate(List<double> values) {
  if (values.length == 0) {
    return false;
  }
  int i = 0;
  while (i < values.length) {
    if (values[i] <= 0.0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

double effusion_ratio(double m1, double m2) {
  if (!validate([m1, m2])) {
    print("ValueError: Molar mass values must greater than 0.");
    return 0.0;
  }
  return round6(sqrtApprox(m2 / m1));
}

double first_effusion_rate(double rate, double m1, double m2) {
  if (!validate([rate, m1, m2])) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.");
    return 0.0;
  }
  return round6(rate * sqrtApprox(m2 / m1));
}

double second_effusion_rate(double rate, double m1, double m2) {
  if (!validate([rate, m1, m2])) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.");
    return 0.0;
  }
  return round6(rate / sqrtApprox(m2 / m1));
}

double first_molar_mass(double mass, double r1, double r2) {
  if (!validate([mass, r1, r2])) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.");
    return 0.0;
  }
  double ratio = r1 / r2;
  return round6(mass / (ratio * ratio));
}

double second_molar_mass(double mass, double r1, double r2) {
  if (!validate([mass, r1, r2])) {
    print("ValueError: Molar mass and effusion rate values must greater than 0.");
    return 0.0;
  }
  double ratio = r1 / r2;
  return round6(ratio * ratio / mass);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(effusion_ratio(2.016, 4.002));
  print(first_effusion_rate(1.0, 2.016, 4.002));
  print(second_effusion_rate(1.0, 2.016, 4.002));
  print(first_molar_mass(2.0, 1.408943, 0.709752));
  print(second_molar_mass(2.0, 1.408943, 0.709752));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
