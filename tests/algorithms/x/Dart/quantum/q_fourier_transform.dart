// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String to_bits(int n, int width) {
  String res = "";
  int _num = n;
  int w = width;
  while (w > 0) {
    res = _str(_num % 2) + res;
    _num = _num ~/ 2;
    w = w - 1;
  }
  return res;
}

Map<String, int> quantum_fourier_transform(int number_of_qubits) {
  if (number_of_qubits <= 0) {
    ;
  }
  if (number_of_qubits > 10) {
    ;
  }
  int shots = 10000;
  int states = 1;
  int p = 0;
  while (p < number_of_qubits) {
    states = states * 2;
    p = p + 1;
  }
  int per_state = shots ~/ states;
  Map<String, int> counts = {};
  int i = 0;
  while (i < states) {
    counts[to_bits(i, number_of_qubits)] = per_state;
    i = i + 1;
  }
  return counts;
}

void main() {
  print("Total count for quantum fourier transform state is: " + _str(quantum_fourier_transform(3)));
}
