// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

String to_bits(int n, int width) {
  String res = "";
  int _num = n;
  int w = width;
  while (w > 0) {
    res = _str(_num % 2) + res;
    _num = _num ~/ 2;
    w = w - 1;
  }
  return res;
}

Map<String, int> quantum_fourier_transform(int number_of_qubits) {
  if (number_of_qubits <= 0) {
    _error("number of qubits must be > 0.");
  }
  if (number_of_qubits > 10) {
    _error("number of qubits too large to simulate(>10).");
  }
  int shots = 10000;
  int states = 1;
  int p = 0;
  while (p < number_of_qubits) {
    states = states * 2;
    p = p + 1;
  }
  int per_state = shots ~/ states;
  Map<String, int> counts = {};
  int i = 0;
  while (i < states) {
    counts[to_bits(i, number_of_qubits)] = per_state;
    i = i + 1;
  }
  return counts;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("Total count for quantum fourier transform state is: " + _str(quantum_fourier_transform(3)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
