// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

List<List<double>> pivot(List<List<double>> t, int row, int col) {
  List<double> pivotRow = <double>[];
  double pivotVal = t[row][col];
  for (int j = 0; j < t[row].length; j++) {
    pivotRow = [...pivotRow, t[row][j] / pivotVal];
  }
  while (t.length <= row) { t.add(<double>[]); } t[row] = pivotRow;
  for (int i = 0; i < t.length; i++) {
    if (i != row) {
    double factor = t[i][col];
    List<double> newRow = <double>[];
    for (int j = 0; j < t[i].length; j++) {
    double value = t[i][j] - factor * pivotRow[j];
    newRow = [...newRow, value];
  };
    while (t.length <= i) { t.add(<double>[]); } t[i] = newRow;
  }
  }
  return t;
}

List<int> findPivot(List<List<double>> t) {
  int col = 0;
  double minVal = 0.0;
  for (int j = 0; j < t[0].length - 1; j++) {
    double v = t[0][j];
    if (v < minVal) {
    minVal = v;
    col = j;
  }
  }
  if (minVal >= 0.0) {
    return [-1, -1];
  }
  int row = -1;
  double minRatio = 0.0;
  bool first = true;
  for (int i = 1; i < t.length; i++) {
    double coeff = t[i][col];
    if (coeff > 0.0) {
    double rhs = t[i][t[i].length - 1];
    double ratio = rhs / coeff;
    if (first || ratio < minRatio) {
    minRatio = ratio;
    row = i;
    first = false;
  };
  }
  }
  return [row, col];
}

Map<String, double> interpret(List<List<double>> t, int nVars) {
  int lastCol = t[0].length - 1;
  double p = t[0][lastCol];
  if (p < 0.0) {
    p = -p;
  }
  Map<String, double> result = <String, double>{};
  result["P"] = p;
  for (int i = 0; i < nVars; i++) {
    int nzRow = -1;
    int nzCount = 0;
    for (int r = 0; r < t.length; r++) {
    double val = t[r][i];
    if (val != 0.0) {
    nzCount = nzCount + 1;
    nzRow = r;
  }
  }
    if (nzCount == 1 && t[nzRow][i] == 1.0) {
    result["x" + _str(i + 1)] = t[nzRow][lastCol];
  }
  }
  return result;
}

List<List<double>> simplex(List<List<double>> tab) {
  List<List<double>> t = tab;
  while (true) {
    List<int> p = findPivot(t);
    int row = p[0];
    int col = p[1];
    if (row < 0) {
    break;
  }
    t = pivot(t, row, col);
  }
  return t;
}

List<List<double>> tableau = [[-1.0, -1.0, 0.0, 0.0, 0.0], [1.0, 3.0, 1.0, 0.0, 4.0], [3.0, 1.0, 0.0, 1.0, 4.0]];
List<List<double>> finalTab = simplex(tableau);
Map<String, double> res = interpret(finalTab, 2);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("P: " + _str((res["P"]!)));
  for (int i = 0; i < 2; i++) {
    String key = "x" + _str(i + 1);
    if (res.containsKey(key)) {
    print(key + ": " + _str((res[key]!)));
  }
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
