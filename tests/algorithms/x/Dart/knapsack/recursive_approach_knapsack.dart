// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int knapsack(List<int> weights, List<int> values, int number_of_items, int max_weight, int index) {
  if (index == number_of_items) {
    return 0;
  }
  int ans1 = knapsack(weights, values, number_of_items, max_weight, index + 1);
  int ans2 = 0;
  if (weights[index] <= max_weight) {
    ans2 = values[index] + knapsack(weights, values, number_of_items, max_weight - weights[index], index + 1);
  }
  if (ans1 > ans2) {
    return ans1;
  }
  return ans2;
}

void _main() {
  List<int> w1 = [1, 2, 4, 5];
  List<int> v1 = [5, 4, 8, 6];
  int r1 = knapsack(w1, v1, 4, 5, 0);
  print(_str(r1));
  List<int> w2 = [3, 4, 5];
  List<int> v2 = [10, 9, 8];
  int r2 = knapsack(w2, v2, 3, 25, 0);
  print(_str(r2));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
