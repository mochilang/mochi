// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


Never _error(String msg) {
  throw Exception(msg);
}

double calc_profit(List<int> profit, List<int> weight, int max_weight) {
  if (profit.length != weight.length) {
    _error("The length of profit and weight must be same.");
  }
  if (max_weight <= 0) {
    _error("max_weight must greater than zero.");
  }
  int i = 0;
  while (i < profit.length) {
    if (profit[i] < 0) {
    _error("Profit can not be negative.");
  }
    if (weight[i] < 0) {
    _error("Weight can not be negative.");
  }
    i = i + 1;
  }
  int n = profit.length;
  List<bool> used = <bool>[];
  int j = 0;
  while (j < n) {
    used = [...used, false];
    j = j + 1;
  }
  int limit = 0;
  double gain = 0.0;
  int count = 0;
  while (limit < max_weight && count < n) {
    double maxRatio = -1.0;
    int maxIndex = -1;
    int k = 0;
    while (k < n) {
    if (!used[k]) {
    double ratio = ((profit[k]).toDouble()) / ((weight[k]).toDouble());
    if (ratio > maxRatio) {
    maxRatio = ratio;
    maxIndex = k;
  };
  }
    k = k + 1;
  }
    if (maxIndex < 0) {
    break;
  }
    while (used.length <= maxIndex) { used.add(false); } used[maxIndex] = true;
    if (max_weight - limit >= weight[maxIndex]) {
    limit = limit + weight[maxIndex];
    gain = gain + ((profit[maxIndex]).toDouble());
  } else {
    gain = gain + ((max_weight - limit).toDouble()) / ((weight[maxIndex]).toDouble()) * ((profit[maxIndex]).toDouble());
    break;
  }
    count = count + 1;
  }
  return gain;
}

dynamic _main() {
  print(calc_profit([1, 2, 3], [3, 4, 5], 15));
  print(calc_profit([10, 9, 8], [3, 4, 5], 25));
  print(calc_profit([10, 9, 8], [3, 4, 5], 5));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
