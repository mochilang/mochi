// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class CalcResult {
  bool ok;
  double value;
  String error;
  CalcResult({required this.ok, required this.value, required this.error});
}

CalcResult calc_profit(List<int> profit, List<int> weight, int max_weight) {
  if (profit.length != weight.length) {
    return CalcResult(ok: false, value: 0.0, error: "The length of profit and weight must be same.");
  }
  if (max_weight <= 0) {
    return CalcResult(ok: false, value: 0.0, error: "max_weight must greater than zero.");
  }
  int i = 0;
  while (i < profit.length) {
    if (profit[i] < 0) {
    return CalcResult(ok: false, value: 0.0, error: "Profit can not be negative.");
  }
    if (weight[i] < 0) {
    return CalcResult(ok: false, value: 0.0, error: "Weight can not be negative.");
  }
    i = i + 1;
  }
  List<bool> used = List<bool>.from([]);
  int j = 0;
  while (j < profit.length) {
    used = [...used, false];
    j = j + 1;
  }
  int limit = 0;
  double gain = 0.0;
  while (limit < max_weight) {
    double max_ratio = -1.0;
    int idx = 0 - 1;
    int k = 0;
    while (k < profit.length) {
    if (!used[k]) {
    double ratio = ((profit[k]).toDouble()) / ((weight[k]).toDouble());
    if (ratio > max_ratio) {
    max_ratio = ratio;
    idx = k;
  };
  }
    k = k + 1;
  }
    if (idx == 0 - 1) {
    break;
  }
    while (used.length <= idx) { used.add(false); } used[idx] = true;
    if (max_weight - limit >= weight[idx]) {
    limit = limit + weight[idx];
    gain = gain + ((profit[idx]).toDouble());
  } else {
    gain = gain + ((max_weight - limit).toDouble()) / ((weight[idx]).toDouble()) * ((profit[idx]).toDouble());
    break;
  }
  }
  return CalcResult(ok: true, value: gain, error: "");
}

bool test_sorted() {
  List<int> profit = [10, 20, 30, 40, 50, 60];
  List<int> weight = [2, 4, 6, 8, 10, 12];
  CalcResult res = calc_profit(profit, weight, 100);
  return res.ok && res.value == 210.0;
}

bool test_negative_max_weight() {
  List<int> profit = [10, 20, 30, 40, 50, 60];
  List<int> weight = [2, 4, 6, 8, 10, 12];
  CalcResult res = calc_profit(profit, weight, -15);
  return !res.ok && res.error == "max_weight must greater than zero.";
}

bool test_negative_profit_value() {
  List<int> profit = [10, -20, 30, 40, 50, 60];
  List<int> weight = [2, 4, 6, 8, 10, 12];
  CalcResult res = calc_profit(profit, weight, 15);
  return !res.ok && res.error == "Profit can not be negative.";
}

bool test_negative_weight_value() {
  List<int> profit = [10, 20, 30, 40, 50, 60];
  List<int> weight = [2, -4, 6, -8, 10, 12];
  CalcResult res = calc_profit(profit, weight, 15);
  return !res.ok && res.error == "Weight can not be negative.";
}

bool test_null_max_weight() {
  List<int> profit = [10, 20, 30, 40, 50, 60];
  List<int> weight = [2, 4, 6, 8, 10, 12];
  CalcResult res = calc_profit(profit, weight, 0);
  return !res.ok && res.error == "max_weight must greater than zero.";
}

bool test_unequal_list_length() {
  List<int> profit = [10, 20, 30, 40, 50];
  List<int> weight = [2, 4, 6, 8, 10, 12];
  CalcResult res = calc_profit(profit, weight, 100);
  return !res.ok && res.error == "The length of profit and weight must be same.";
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(test_sorted());
  print(test_negative_max_weight());
  print(test_negative_profit_value());
  print(test_negative_weight_value());
  print(test_null_max_weight());
  print(test_unequal_list_length());
  print((true ? 1 : 0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
