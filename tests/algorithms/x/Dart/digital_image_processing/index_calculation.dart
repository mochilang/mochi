// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double ndvi(double red, double nir) {
  return (nir - red) / (nir + red);
}

double bndvi(double blue, double nir) {
  return (nir - blue) / (nir + blue);
}

double gndvi(double green, double nir) {
  return (nir - green) / (nir + green);
}

double ndre(double redEdge, double nir) {
  return (nir - redEdge) / (nir + redEdge);
}

double ccci(double red, double redEdge, double nir) {
  return ndre(redEdge, nir) / ndvi(red, nir);
}

double cvi(double red, double green, double nir) {
  return nir * red / (green * green);
}

double gli(double red, double green, double blue) {
  return (2.0 * green - red - blue) / (2.0 * green + red + blue);
}

double dvi(double red, double nir) {
  return nir / red;
}

double calc(String index, double red, double green, double blue, double redEdge, double nir) {
  if (index == "NDVI") {
    return ndvi(red, nir);
  }
  if (index == "BNDVI") {
    return bndvi(blue, nir);
  }
  if (index == "GNDVI") {
    return gndvi(green, nir);
  }
  if (index == "NDRE") {
    return ndre(redEdge, nir);
  }
  if (index == "CCCI") {
    return ccci(red, redEdge, nir);
  }
  if (index == "CVI") {
    return cvi(red, green, nir);
  }
  if (index == "GLI") {
    return gli(red, green, blue);
  }
  if (index == "DVI") {
    return dvi(red, nir);
  }
  return 0.0;
}

void _main() {
  double red = 50.0;
  double green = 30.0;
  double blue = 10.0;
  double redEdge = 40.0;
  double nir = 100.0;
  print("NDVI=" + (ndvi(red, nir)).toString());
  print("CCCI=" + (ccci(red, redEdge, nir)).toString());
  print("CVI=" + (cvi(red, green, nir)).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
