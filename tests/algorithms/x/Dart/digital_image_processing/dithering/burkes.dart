// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int get_greyscale(int blue, int green, int red) {
  double b = blue as double;
  double g = green as double;
  double r = red as double;
  return 0.114 * b + 0.587 * g + 0.299 * r as int;
}

List<List<int>> zeros(int h, int w) {
  List<List<int>> table = <List<int>>[];
  int i = 0;
  while (i < h) {
    List<int> row = <int>[];
    int j = 0;
    while (j < w) {
    row = [...row, 0];
    j = j + 1;
  }
    table = ([...table, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return table;
}

List<List<int>> burkes_dither(List<List<List<int>>> img, int threshold) {
  int height = img.length;
  int width = img[0].length;
  List<List<int>> error_table = zeros(height + 1, width + 4);
  List<List<int>> output = <List<int>>[];
  int y = 0;
  while (y < height) {
    List<int> row = <int>[];
    int x = 0;
    while (x < width) {
    List<int> px = img[y][x];
    int grey = get_greyscale(px[0], px[1], px[2]);
    int total = grey + error_table[y][x + 2];
    int new_val = 0;
    int current_error = 0;
    if (threshold > total) {
    new_val = 0;
    current_error = total;
  } else {
    new_val = 255;
    current_error = total - 255;
  }
    row = [...row, new_val];
    while (error_table[y]!.length <= x + 3) { error_table[y]!.add(0); } error_table[y]![x + 3] = error_table[y][x + 3] + 8 * current_error ~/ 32;
    while (error_table[y]!.length <= x + 4) { error_table[y]!.add(0); } error_table[y]![x + 4] = error_table[y][x + 4] + 4 * current_error ~/ 32;
    while (error_table[y + 1]!.length <= x + 2) { error_table[y + 1]!.add(0); } error_table[y + 1]![x + 2] = error_table[y + 1][x + 2] + 8 * current_error ~/ 32;
    while (error_table[y + 1]!.length <= x + 3) { error_table[y + 1]!.add(0); } error_table[y + 1]![x + 3] = error_table[y + 1][x + 3] + 4 * current_error ~/ 32;
    while (error_table[y + 1]!.length <= x + 4) { error_table[y + 1]!.add(0); } error_table[y + 1]![x + 4] = error_table[y + 1][x + 4] + 2 * current_error ~/ 32;
    while (error_table[y + 1]!.length <= x + 1) { error_table[y + 1]!.add(0); } error_table[y + 1]![x + 1] = error_table[y + 1][x + 1] + 4 * current_error ~/ 32;
    while (error_table[y + 1]!.length <= x) { error_table[y + 1]!.add(0); } error_table[y + 1]![x] = error_table[y + 1][x] + 2 * current_error ~/ 32;
    x = x + 1;
  }
    output = ([...output, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    y = y + 1;
  }
  return output;
}

void _main() {
  List<List<List<int>>> img = [[[0, 0, 0], [64, 64, 64], [128, 128, 128], [192, 192, 192]], [[255, 255, 255], [200, 200, 200], [150, 150, 150], [100, 100, 100]], [[30, 144, 255], [255, 0, 0], [0, 255, 0], [0, 0, 255]], [[50, 100, 150], [80, 160, 240], [70, 140, 210], [60, 120, 180]]];
  List<List<int>> result = burkes_dither(img, 128);
  int y = 0;
  while (y < result.length) {
    String line = "";
    int x = 0;
    while (x < result[y].length) {
    line = line + (result[y][x]).toString();
    if (x < result[y].length - 1) {
    line = line + " ";
  }
    x = x + 1;
  }
    print(line);
    y = y + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
