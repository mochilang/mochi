// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int normalize(int value) {
  if (value > 255) {
    return 255;
  }
  return value;
}

int to_grayscale(int blue, int green, int red) {
  double gs = 0.2126 * (red as double) + 0.587 * (green as double) + 0.114 * (blue as double);
  return gs as int;
}

List<List<List<int>>> make_sepia(List<List<List<int>>> img, int factor) {
  int pixel_h = img.length;
  int pixel_v = img[0].length;
  int i = 0;
  while (i < pixel_h) {
    int j = 0;
    while (j < pixel_v) {
    List<int> pixel = img[i][j];
    int grey = to_grayscale(pixel[0], pixel[1], pixel[2]);
    while (img[i]!.length <= j) { img[i]!.add(<int>[]); } img[i]![j] = [normalize(grey), normalize(grey + factor), normalize(grey + 2 * factor)];
    j = j + 1;
  }
    i = i + 1;
  }
  return img;
}

List<List<List<int>>> image = [[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [200, 150, 100]]];
List<List<List<int>>> sepia = make_sepia(image, 20);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((sepia).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
