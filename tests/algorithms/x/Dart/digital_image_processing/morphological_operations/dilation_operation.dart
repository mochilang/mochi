// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<double>> rgb_to_gray(List<List<List<int>>> rgb) {
  List<List<double>> result = <List<double>>[];
  int i = 0;
  while (i < rgb.length) {
    List<double> row = <double>[];
    int j = 0;
    while (j < rgb[i].length) {
    int r = rgb[i][j][0];
    int g = rgb[i][j][1];
    int b = rgb[i][j][2];
    double gray = 0.2989 * (1.0 * r) + 0.587 * (1.0 * g) + 0.114 * (1.0 * b);
    row = [...row, gray];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> gray_to_binary(List<List<double>> gray) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < gray.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < gray[i].length) {
    double v = gray[i][j];
    if (v > 127.0 && v <= 255.0) {
    row = [...row, 1];
  } else {
    row = [...row, 0];
  }
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> dilation(List<List<int>> image, List<List<int>> kernel) {
  int img_h = image.length;
  int img_w = image[0].length;
  int k_h = kernel.length;
  int k_w = kernel[0].length;
  int pad_h = k_h ~/ 2;
  int pad_w = k_w ~/ 2;
  int p_h = img_h + 2 * pad_h;
  int p_w = img_w + 2 * pad_w;
  List<List<int>> padded = <List<int>>[];
  int i = 0;
  while (i < p_h) {
    List<int> row = <int>[];
    int j = 0;
    while (j < p_w) {
    row = [...row, 0];
    j = j + 1;
  }
    padded = ([...padded, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i < img_h) {
    int j = 0;
    while (j < img_w) {
    while (padded[pad_h + i]!.length <= pad_w + j) { padded[pad_h + i]!.add(0); } padded[pad_h + i]![pad_w + j] = image[i][j];
    j = j + 1;
  }
    i = i + 1;
  }
  List<List<int>> output = <List<int>>[];
  i = 0;
  while (i < img_h) {
    List<int> row = <int>[];
    int j = 0;
    while (j < img_w) {
    int sum = 0;
    int ky = 0;
    while (ky < k_h) {
    int kx = 0;
    while (kx < k_w) {
    if (kernel[ky][kx] == 1) {
    sum = sum + padded[i + ky][j + kx];
  }
    kx = kx + 1;
  }
    ky = ky + 1;
  }
    if (sum > 0) {
    row = [...row, 1];
  } else {
    row = [...row, 0];
  }
    j = j + 1;
  }
    output = ([...output, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return output;
}

dynamic print_float_matrix(List<List<double>> mat) {
  int i = 0;
  while (i < mat.length) {
    String line = "";
    int j = 0;
    while (j < mat[i].length) {
    line = line + (mat[i][j]).toString();
    if (j < mat[i].length - 1) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

dynamic print_int_matrix(List<List<int>> mat) {
  int i = 0;
  while (i < mat.length) {
    String line = "";
    int j = 0;
    while (j < mat[i].length) {
    line = line + (mat[i][j]).toString();
    if (j < mat[i].length - 1) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

void _main() {
  List<List<List<int>>> rgb_example = [[[127, 255, 0]]];
  print_float_matrix(rgb_to_gray(rgb_example));
  List<List<double>> gray_example = [[26.0, 255.0, 14.0], [5.0, 147.0, 20.0], [1.0, 200.0, 0.0]];
  print_int_matrix(gray_to_binary(gray_example));
  List<List<int>> binary_image = [[0, 1, 0], [0, 1, 0], [0, 1, 0]];
  List<List<int>> kernel = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];
  print_int_matrix(dilation(binary_image, kernel));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
