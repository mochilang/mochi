// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<double>> rgb_to_gray(List<List<List<int>>> rgb) {
  List<List<double>> gray = <List<double>>[];
  int i = 0;
  while (i < rgb.length) {
    List<double> row = <double>[];
    int j = 0;
    while (j < rgb[i].length) {
    double r = rgb[i][j][0] as double;
    double g = rgb[i][j][1] as double;
    double b = rgb[i][j][2] as double;
    double value = 0.2989 * r + 0.587 * g + 0.114 * b;
    row = [...row, value];
    j = j + 1;
  }
    gray = ([...gray, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return gray;
}

List<List<bool>> gray_to_binary(List<List<double>> gray) {
  List<List<bool>> binary = <List<bool>>[];
  int i = 0;
  while (i < gray.length) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j < gray[i].length) {
    row = [...row, gray[i][j] > 127.0 && gray[i][j] <= 255.0];
    j = j + 1;
  }
    binary = ([...binary, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return binary;
}

List<List<bool>> erosion(List<List<bool>> image, List<List<int>> kernel) {
  int h = image.length;
  int w = image[0].length;
  int k_h = kernel.length;
  int k_w = kernel[0].length;
  int pad_y = k_h ~/ 2;
  int pad_x = k_w ~/ 2;
  List<List<bool>> padded = <List<bool>>[];
  int y = 0;
  while (y < h + 2 * pad_y) {
    List<bool> row = <bool>[];
    int x = 0;
    while (x < w + 2 * pad_x) {
    row = [...row, false];
    x = x + 1;
  }
    padded = ([...padded, row] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    y = y + 1;
  }
  y = 0;
  while (y < h) {
    int x = 0;
    while (x < w) {
    while (padded[pad_y + y]!.length <= pad_x + x) { padded[pad_y + y]!.add(false); } padded[pad_y + y]![pad_x + x] = image[y][x];
    x = x + 1;
  }
    y = y + 1;
  }
  List<List<bool>> output = <List<bool>>[];
  y = 0;
  while (y < h) {
    List<bool> row_out = <bool>[];
    int x = 0;
    while (x < w) {
    int sum = 0;
    int ky = 0;
    while (ky < k_h) {
    int kx = 0;
    while (kx < k_w) {
    if (kernel[ky][kx] == 1 && padded[y + ky][x + kx]) {
    sum = sum + 1;
  }
    kx = kx + 1;
  }
    ky = ky + 1;
  }
    row_out = [...row_out, sum == 5];
    x = x + 1;
  }
    output = ([...output, row_out] as List).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    y = y + 1;
  }
  return output;
}

List<List<List<int>>> rgb_img = [[[127, 255, 0]]];
List<List<double>> gray_img = [[127.0, 255.0, 0.0]];
List<List<bool>> img1 = [[true, true, false]];
List<List<int>> kernel1 = [[0, 1, 0]];
List<List<bool>> img2 = [[true, false, false]];
List<List<int>> kernel2 = [[1, 1, 0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((rgb_to_gray(rgb_img)).toString());
  print((gray_to_binary(gray_img)).toString());
  print((erosion(img1, kernel1)).toString());
  print((erosion(img2, kernel2)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
