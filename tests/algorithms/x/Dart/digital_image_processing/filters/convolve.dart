// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<int>> pad_edge(List<List<int>> image, int pad_size) {
  int height = image.length;
  int width = image[0].length;
  int new_height = height + pad_size * 2;
  int new_width = width + pad_size * 2;
  List<List<int>> padded = <List<int>>[];
  int i = 0;
  while (i < new_height) {
    List<int> row = <int>[];
    int src_i = i;
    if (src_i < pad_size) {
    src_i = 0;
  }
    if (src_i >= height + pad_size) {
    src_i = height - 1;
  } else {
    src_i = src_i - pad_size;
  }
    int j = 0;
    while (j < new_width) {
    int src_j = j;
    if (src_j < pad_size) {
    src_j = 0;
  }
    if (src_j >= width + pad_size) {
    src_j = width - 1;
  } else {
    src_j = src_j - pad_size;
  }
    row = [...row, image[src_i][src_j]];
    j = j + 1;
  }
    padded = ([...padded, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return padded;
}

List<List<int>> im2col(List<List<int>> image, int block_h, int block_w) {
  int rows = image.length;
  int cols = image[0].length;
  int dst_height = rows - block_h + 1;
  int dst_width = cols - block_w + 1;
  List<List<int>> image_array = <List<int>>[];
  int i = 0;
  while (i < dst_height) {
    int j = 0;
    while (j < dst_width) {
    List<int> window = <int>[];
    int bi = 0;
    while (bi < block_h) {
    int bj = 0;
    while (bj < block_w) {
    window = [...window, image[i + bi][j + bj]];
    bj = bj + 1;
  }
    bi = bi + 1;
  }
    image_array = ([...image_array, window] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    j = j + 1;
  }
    i = i + 1;
  }
  return image_array;
}

List<int> flatten(List<List<int>> matrix) {
  List<int> out = <int>[];
  int i = 0;
  while (i < matrix.length) {
    int j = 0;
    while (j < matrix[i].length) {
    out = [...out, matrix[i][j]];
    j = j + 1;
  }
    i = i + 1;
  }
  return out;
}

int dot(List<int> a, List<int> b) {
  int sum = 0;
  int i = 0;
  while (i < a.length) {
    sum = sum + a[i] * b[i];
    i = i + 1;
  }
  return sum;
}

List<List<int>> img_convolve(List<List<int>> image, List<List<int>> kernel) {
  int height = image.length;
  int width = image[0].length;
  int k_size = kernel.length;
  int pad_size = k_size ~/ 2;
  List<List<int>> padded = pad_edge(image, pad_size);
  List<List<int>> image_array = im2col(padded, k_size, k_size);
  List<int> kernel_flat = flatten(kernel);
  List<List<int>> dst = <List<int>>[];
  int idx = 0;
  int i = 0;
  while (i < height) {
    List<int> row = <int>[];
    int j = 0;
    while (j < width) {
    int val = dot(image_array[idx], kernel_flat);
    row = [...row, val];
    idx = idx + 1;
    j = j + 1;
  }
    dst = ([...dst, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return dst;
}

void print_matrix(List<List<int>> m) {
  int i = 0;
  while (i < m.length) {
    String line = "";
    int j = 0;
    while (j < m[i].length) {
    if (j > 0) {
    line = line + " ";
  }
    line = line + _str(m[i][j]);
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

List<List<int>> image = [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];
List<List<int>> laplace_kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]];
List<List<int>> result = img_convolve(image, laplace_kernel);
void main() {
  print_matrix(result);
}
