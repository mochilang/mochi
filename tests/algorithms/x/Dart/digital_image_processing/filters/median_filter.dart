// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<int> insertion_sort(List<int> a) {
  int i = 1;
  while (i < a.length) {
    int key = a[i];
    int j = i - 1;
    while (j >= 0 && a[j] > key) {
    while (a.length <= j + 1) { a.add(0); } a[j + 1] = a[j];
    j = j - 1;
  }
    while (a.length <= j + 1) { a.add(0); } a[j + 1] = key;
    i = i + 1;
  }
  return a;
}

List<List<int>> median_filter(List<List<int>> gray_img, int mask) {
  int rows = gray_img.length;
  int cols = gray_img[0].length;
  int bd = mask ~/ 2;
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j < cols) {
    row = [...row, 0];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = bd;
  while (i < rows - bd) {
    int j = bd;
    while (j < cols - bd) {
    List<int> kernel = <int>[];
    int x = i - bd;
    while (x <= i + bd) {
    int y = j - bd;
    while (y <= j + bd) {
    kernel = [...kernel, gray_img[x][y]];
    y = y + 1;
  }
    x = x + 1;
  }
    kernel = insertion_sort(kernel);
    int idx = mask * mask ~/ 2;
    while (result[i]!.length <= j) { result[i]!.add(0); } result[i]![j] = kernel[idx];
    j = j + 1;
  }
    i = i + 1;
  }
  return result;
}

void _main() {
  List<List<int>> img = [[10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10]];
  List<List<int>> filtered = median_filter(img, 3);
  print(filtered);
}

void _start() {
  _main();
}

void main() => _start();
