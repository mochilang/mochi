// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

double PI = 3.141592653589793;
double to_radians(double deg) {
  return deg * PI / 180.0;
}

double sin_taylor(double x) {
  double term = x;
  double sum = x;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * (i.toDouble());
    double k2 = k1 + 1.0;
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

double cos_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * (i.toDouble()) - 1.0;
    double k2 = 2.0 * (i.toDouble());
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

double exp_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  double i = 1.0;
  while (i < 20.0) {
    term = term * x / i;
    sum = sum + term;
    i = i + 1.0;
  }
  return sum;
}

List<List<double>> gabor_filter_kernel(int ksize, double sigma, double theta, double lambd, double gamma, double psi) {
  int size = ksize;
  if (size % 2 == 0) {
    size = size + 1;
  }
  List<List<double>> gabor = <List<double>>[];
  int y = 0;
  while (y < size) {
    List<double> row = <double>[];
    int x = 0;
    while (x < size) {
    double px = x - size ~/ 2.toDouble();
    double py = y - size ~/ 2.toDouble();
    double rad = to_radians(theta);
    double cos_theta = cos_taylor(rad);
    double sin_theta = sin_taylor(rad);
    double x_rot = cos_theta * px + sin_theta * py;
    double y_rot = -sin_theta * px + cos_theta * py;
    double exponent = -(x_rot * x_rot + gamma * gamma * y_rot * y_rot) / (2.0 * sigma * sigma);
    double value = exp_taylor(exponent) * cos_taylor(2.0 * PI * x_rot / lambd + psi);
    row = [...row, value];
    x = x + 1;
  }
    gabor = ([...gabor, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    y = y + 1;
  }
  return gabor;
}

List<List<double>> kernel = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0);
void main() {
  print("[" + kernel.join(', ') + "]");
}
