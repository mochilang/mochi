// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int get_neighbors_pixel(List<List<int>> image, int x, int y, int center) {
  if (x < 0 || y < 0) {
    return 0;
  }
  if (x >= image.length || y >= image[0].length) {
    return 0;
  }
  if (image[x][y] >= center) {
    return 1;
  }
  return 0;
}

int local_binary_value(List<List<int>> image, int x, int y) {
  int center = image[x][y];
  List<int> powers = [1, 2, 4, 8, 16, 32, 64, 128];
  List<int> neighbors = [get_neighbors_pixel(image, x - 1, y + 1, center), get_neighbors_pixel(image, x, y + 1, center), get_neighbors_pixel(image, x - 1, y, center), get_neighbors_pixel(image, x + 1, y + 1, center), get_neighbors_pixel(image, x + 1, y, center), get_neighbors_pixel(image, x + 1, y - 1, center), get_neighbors_pixel(image, x, y - 1, center), get_neighbors_pixel(image, x - 1, y - 1, center)];
  int sum = 0;
  int i = 0;
  while (i < neighbors.length) {
    sum = sum + neighbors[i] * powers[i];
    i = i + 1;
  }
  return sum;
}

List<List<int>> image = [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]];
int i = 0;
void main() {
  while (i < image.length) {
    int j = 0;
    String line = "";
    while (j < image[0].length) {
    int value = local_binary_value(image, i, j);
    line = line + _str(value);
    if (j < image[0].length - 1) {
    line = line + " ";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}
