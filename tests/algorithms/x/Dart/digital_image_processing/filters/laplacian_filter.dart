// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> make_matrix(int rows, int cols, int value) {
  List<List<int>> result = <List<int>>[];
  int i = 0;
  while (i < rows) {
    List<int> row = <int>[];
    int j = 0;
    while (j < cols) {
    row = [...row, value];
    j = j + 1;
  }
    result = ([...result, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return result;
}

List<List<int>> my_laplacian(List<List<int>> src, int ksize) {
  List<List<int>> kernel = <List<int>>[];
  if (ksize == 1) {
    kernel = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]];
  } else {
    if (ksize == 3) {
    kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]];
  } else {
    if (ksize == 5) {
    kernel = [[0, 0, -1, 0, 0], [0, -1, -2, -1, 0], [-1, -2, 16, -2, -1], [0, -1, -2, -1, 0], [0, 0, -1, 0, 0]];
  } else {
    if (ksize == 7) {
    kernel = [[0, 0, 0, -1, 0, 0, 0], [0, 0, -2, -3, -2, 0, 0], [0, -2, -7, -10, -7, -2, 0], [-1, -3, -10, 68, -10, -3, -1], [0, -2, -7, -10, -7, -2, 0], [0, 0, -2, -3, -2, 0, 0], [0, 0, 0, -1, 0, 0, 0]];
  } else {
    throw Exception("ksize must be in (1, 3, 5, 7)");
  };
  };
  };
  }
  int rows = src.length;
  int cols = src[0].length;
  int k = kernel.length;
  int pad = k ~/ 2;
  List<List<int>> output = make_matrix(rows, cols, 0);
  int i = 0;
  while (i < rows) {
    int j = 0;
    while (j < cols) {
    int sum = 0;
    int ki = 0;
    while (ki < k) {
    int kj = 0;
    while (kj < k) {
    int ii = i + ki - pad;
    int jj = j + kj - pad;
    int val = 0;
    if (ii >= 0 && ii < rows && jj >= 0 && jj < cols) {
    val = src[ii][jj];
  }
    sum = sum + val * kernel[ki][kj];
    kj = kj + 1;
  }
    ki = ki + 1;
  }
    while (output[i]!.length <= j) { output[i]!.add(0); } output[i]![j] = sum;
    j = j + 1;
  }
    i = i + 1;
  }
  return output;
}

List<List<int>> image = [[0, 0, 0, 0, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 0, 0, 0, 0]];
List<List<int>> result = my_laplacian(image, 3);
int r = 0;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (r < result.length) {
    String row_str = "[";
    int c = 0;
    while (c < result[r].length) {
    row_str = row_str + (result[r][c]).toString();
    if (c + 1 < result[r].length) {
    row_str = row_str + ", ";
  }
    c = c + 1;
  }
    row_str = row_str + "]";
    print(row_str);
    r = r + 1;
  }
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
