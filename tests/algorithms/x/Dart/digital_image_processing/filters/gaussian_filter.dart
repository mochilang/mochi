// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double PI = 3.141592653589793;
double expApprox(double x) {
  double sum = 1.0;
  double term = 1.0;
  int n = 1;
  while (n < 10) {
    term = term * x / (n as double);
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

List<List<double>> gen_gaussian_kernel(int k_size, double sigma) {
  int center = k_size ~/ 2;
  List<List<double>> kernel = <List<double>>[];
  int i = 0;
  while (i < k_size) {
    List<double> row = <double>[];
    int j = 0;
    while (j < k_size) {
    double x = i - center as double;
    double y = j - center as double;
    num exponent = -((x * x + y * y) / (2.0 * sigma * sigma));
    double value = 1.0 / (2.0 * PI * sigma) * expApprox(exponent);
    row = [...row, value];
    j = j + 1;
  }
    kernel = ([...kernel, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  return kernel;
}

List<List<int>> gaussian_filter(List<List<int>> image, int k_size, double sigma) {
  int height = image.length;
  int width = image[0].length;
  int dst_height = height - k_size + 1;
  int dst_width = width - k_size + 1;
  List<List<double>> kernel = gen_gaussian_kernel(k_size, sigma);
  List<List<int>> dst = <List<int>>[];
  int i = 0;
  while (i < dst_height) {
    List<int> row = <int>[];
    int j = 0;
    while (j < dst_width) {
    double sum = 0.0;
    int ki = 0;
    while (ki < k_size) {
    int kj = 0;
    while (kj < k_size) {
    sum = sum + (image[i + ki][j + kj] as double) * kernel[ki][kj];
    kj = kj + 1;
  }
    ki = ki + 1;
  }
    row = [...row, sum as int];
    j = j + 1;
  }
    dst = ([...dst, row] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return dst;
}

void print_image(List<List<int>> image) {
  int i = 0;
  while (i < image.length) {
    print(image[i]);
    i = i + 1;
  }
}

List<List<int>> img = [[52, 55, 61, 59, 79], [62, 59, 55, 104, 94], [63, 65, 66, 113, 144], [68, 70, 70, 126, 154], [70, 72, 69, 128, 155]];
List<List<int>> gaussian3 = gaussian_filter(img, 3, 1.0);
List<List<int>> gaussian5 = gaussian_filter(img, 5, 0.8);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_image(gaussian3);
  print_image(gaussian5);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
