// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<List<int>>> zeros3d(int h, int w, int c) {
  List<List<List<int>>> arr = <List<List<int>>>[];
  int y = 0;
  while (y < h) {
    List<List<int>> row = <List<int>>[];
    int x = 0;
    while (x < w) {
    List<int> pixel = <int>[];
    int k = 0;
    while (k < c) {
    pixel = [...pixel, 0];
    k = k + 1;
  }
    row = ([...row, pixel] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    x = x + 1;
  }
    arr = ([...arr, row] as List).map((e) => ((e as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList() as List<List<int>>)).toList();
    y = y + 1;
  }
  return arr;
}

List<List<List<int>>> resize_nn(List<List<List<int>>> img, int dst_w, int dst_h) {
  int src_h = img.length;
  int src_w = img[0].length;
  int channels = img[0][0].length;
  double ratio_x = (src_w as double) / (dst_w as double);
  double ratio_y = (src_h as double) / (dst_h as double);
  List<List<List<int>>> out = zeros3d(dst_h, dst_w, channels);
  int i = 0;
  while (i < dst_h) {
    int j = 0;
    while (j < dst_w) {
    int src_x = ratio_x * (j as double) as int;
    int src_y = ratio_y * (i as double) as int;
    while (out[i]!.length <= j) { out[i]!.add(<int>[]); } out[i]![j] = img[src_y][src_x];
    j = j + 1;
  }
    i = i + 1;
  }
  return out;
}

void _main() {
  List<List<List<int>>> img = [[[0, 0, 0], [255, 255, 255]], [[255, 0, 0], [0, 255, 0]]];
  List<List<List<int>>> resized = resize_nn(img, 4, 4);
  print(resized);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
