// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int INF = 1000000000;
bool breadth_first_search(List<List<int>> graph, int source, int sink, List<int> parent) {
  List<bool> visited = <bool>[];
  int i = 0;
  while (i < graph.length) {
    visited = [...visited, false];
    i = i + 1;
  }
  List<int> queue = <int>[];
  queue = [...queue, source];
  while (visited.length <= source) { visited.add(false); } visited[source] = true;
  int head = 0;
  while (head < queue.length) {
    int u = queue[head];
    head = head + 1;
    List<int> row = graph[u];
    int ind = 0;
    while (ind < row.length) {
    int capacity = row[ind];
    if (visited[ind] == false && capacity > 0) {
    queue = [...queue, ind];
    while (visited.length <= ind) { visited.add(false); } visited[ind] = true;
    while (parent.length <= ind) { parent.add(0); } parent[ind] = u;
  }
    ind = ind + 1;
  }
  }
  return visited[sink];
}

int ford_fulkerson(List<List<int>> graph, int source, int sink) {
  List<int> parent = <int>[];
  int i = 0;
  while (i < graph.length) {
    parent = [...parent, -1];
    i = i + 1;
  }
  int max_flow = 0;
  while (breadth_first_search(graph, source, sink, parent)) {
    int path_flow = INF;
    int s = sink;
    while (s != source) {
    int prev = parent[s];
    int cap = graph[prev][s];
    if (cap < path_flow) {
    path_flow = cap;
  }
    s = prev;
  }
    max_flow = max_flow + path_flow;
    int v = sink;
    while (v != source) {
    int u = parent[v];
    while (graph[u]!.length <= v) { graph[u]!.add(0); } graph[u]![v] = graph[u][v] - path_flow;
    while (graph[v]!.length <= u) { graph[v]!.add(0); } graph[v]![u] = graph[v][u] + path_flow;
    v = u;
  }
    int j = 0;
    while (j < parent.length) {
    while (parent.length <= j) { parent.add(0); } parent[j] = -1;
    j = j + 1;
  }
  }
  return max_flow;
}

List<List<int>> graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(ford_fulkerson(graph, 0, 5)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
