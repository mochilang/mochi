// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool bfs(List<List<int>> graph, int s, int t, List<int> parent) {
  List<bool> visited = <bool>[];
  int i = 0;
  while (i < graph.length) {
    visited = (visited..add(false));
    i = i + 1;
  }
  List<int> queue = [s];
  int head = 0;
  while (visited.length <= s) { visited.add(false); } visited[s] = true;
  while (head < queue.length) {
    int u = queue[head];
    head = head + 1;
    int ind = 0;
    while (ind < graph[u].length) {
    if (visited[ind] == false && graph[u][ind] > 0) {
    queue = (queue..add(ind));
    while (visited.length <= ind) { visited.add(false); } visited[ind] = true;
    while (parent.length <= ind) { parent.add(0); } parent[ind] = u;
  }
    ind = ind + 1;
  }
  }
  return visited[t];
}

List<List<int>> mincut(List<List<int>> graph, int source, int sink) {
  List<List<int>> g = graph;
  List<int> parent = <int>[];
  int i = 0;
  while (i < g.length) {
    parent = (parent..add(-1));
    i = i + 1;
  }
  List<List<int>> temp = <List<int>>[];
  i = 0;
  while (i < g.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < g[i].length) {
    row = (row..add(g[i][j]));
    j = j + 1;
  }
    temp = ((temp..add(row)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  while (bfs(g, source, sink, parent)) {
    int path_flow = 1000000000;
    int s = sink;
    while (s != source) {
    int p = parent[s];
    int cap = g[p][s];
    if (cap < path_flow) {
    path_flow = cap;
  }
    s = p;
  }
    int v = sink;
    while (v != source) {
    int u = parent[v];
    while (g[u]!.length <= v) { g[u]!.add(0); } g[u]![v] = g[u][v] - path_flow;
    while (g[v]!.length <= u) { g[v]!.add(0); } g[v]![u] = g[v][u] + path_flow;
    v = u;
  }
  }
  List<List<int>> res = <List<int>>[];
  i = 0;
  while (i < g.length) {
    int j = 0;
    while (j < g[0].length) {
    if (g[i][j] == 0 && temp[i][j] > 0) {
    res = ((res..add([i, j])) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return res;
}

List<List<int>> test_graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]];
List<List<int>> result = mincut(test_graph, 0, 5);
void main() {
  print(_str(result));
}
