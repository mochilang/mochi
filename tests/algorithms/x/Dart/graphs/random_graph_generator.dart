// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int seed = 1;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

double random() {
  return 1.0 * rand() / 2147483648.0;
}

Map<int, List<int>> complete_graph(int vertices_number) {
  Map<int, List<int>> graph = <int, List<int>>{};
  int i = 0;
  while (i < vertices_number) {
    List<int> neighbors = <int>[];
    int j = 0;
    while (j < vertices_number) {
    if (j != i) {
    neighbors = [...neighbors, j];
  }
    j = j + 1;
  }
    graph[i] = neighbors;
    i = i + 1;
  }
  return graph;
}

Map<int, List<int>> random_graph(int vertices_number, double probability, bool directed) {
  Map<int, List<int>> graph = <int, List<int>>{};
  int i = 0;
  while (i < vertices_number) {
    graph[i] = ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    i = i + 1;
  }
  if (probability >= 1.0) {
    return complete_graph(vertices_number);
  }
  if (probability <= 0.0) {
    return graph;
  }
  i = 0;
  while (i < vertices_number) {
    int j = i + 1;
    while (j < vertices_number) {
    if (random() < probability) {
    graph[i] = [...(graph[i]!), j];
    if (!directed) {
    graph[j] = [...(graph[j]!), i];
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return graph;
}

void _main() {
  seed = 1;
  Map<int, List<int>> g1 = random_graph(4, 0.5, false);
  print(g1);
  seed = 1;
  Map<int, List<int>> g2 = random_graph(4, 0.5, true);
  print(g2);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
