// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Graph {
  Map<String, List<String>> graph;
  Map<String, String> parent;
  String source;
  Graph({required this.graph, required this.parent, required this.source});
}

Graph newGraph(Map<String, List<String>> g, String s) {
  return Graph(graph: g, parent: {}, source: s);
}

Graph breath_first_search(Graph g) {
  Map<String, String> parent = g.parent;
  parent[g.source] = g.source;
  List<String> queue = [g.source];
  int idx = 0;
  while (idx < queue.length) {
    String vertex = queue[idx];
    for (var adj in g.graph[vertex]) {
    if (!parent.containsKey(adj)) {
    parent[adj] = vertex;
    queue = [...queue, adj];
  }
  }
    idx = idx + 1;
  }
  g.parent = parent;
  return g;
}

String shortest_path(Graph g, String target) {
  if (target == g.source) {
    return g.source;
  }
  if (!g.parent.containsKey(target)) {
    return "No path from vertex: " + g.source + " to vertex: " + target;
  }
  String p = g.parent[target]!;
  return shortest_path(g, p) + "->" + target;
}

Map<String, List<String>> graph = {"A": ["B", "C", "E"], "B": ["A", "D", "E"], "C": ["A", "F", "G"], "D": ["B"], "E": ["A", "B", "D"], "F": ["C"], "G": ["C"]};
Graph g = newGraph(graph, "G");
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  g = breath_first_search(g);
  print(shortest_path(g, "D"));
  print(shortest_path(g, "G"));
  print(shortest_path(g, "Foo"));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
