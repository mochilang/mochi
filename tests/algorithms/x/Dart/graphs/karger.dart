// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class Pair {
  String a;
  String b;
  Pair({required this.a, required this.b});
}

int seed = 1;
int rand_int(int n) {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed % n;
}

bool contains(List<String> list, String value) {
  int i = 0;
  while (i < list.length) {
    if (list[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> remove_all(List<String> list, String value) {
  List<String> res = <String>[];
  int i = 0;
  while (i < list.length) {
    if (list[i] != value) {
    res = [...res, list[i]];
  }
    i = i + 1;
  }
  return res;
}

List<Pair> partition_graph(Map<String, List<String>> graph) {
  Map<String, List<String>> contracted = <String, List<String>>{};
  for (var node in graph.keys) {
    contracted[node] = List<String>.from([node]);
  }
  Map<String, List<String>> graph_copy = <String, List<String>>{};
  for (var node in graph.keys) {
    List<String> lst = <String>[];
    List<String> neigh = graph[node]!;
    int i = 0;
    while (i < neigh.length) {
    lst = [...lst, neigh[i]];
    i = i + 1;
  }
    graph_copy[node] = lst;
  }
  List<dynamic> nodes = graph_copy.keys;
  while (nodes.length > 2) {
    dynamic u = nodes[rand_int(nodes.length)];
    List<String> u_neighbors = graph_copy[u]!;
    String v = u_neighbors[rand_int(u_neighbors.length)];
    String uv = u + v;
    List<String> uv_neighbors = <String>[];
    int i = 0;
    while (i < (graph_copy[u]!).length) {
    String n = (graph_copy[u]!)[i];
    if (n != u && n != v && contains(uv_neighbors, n) == false) {
    uv_neighbors = [...uv_neighbors, n];
  }
    i = i + 1;
  }
    i = 0;
    while (i < (graph_copy[v]!).length) {
    String n = (graph_copy[v]!)[i];
    if (n != u && n != v && contains(uv_neighbors, n) == false) {
    uv_neighbors = [...uv_neighbors, n];
  }
    i = i + 1;
  }
    graph_copy[uv] = uv_neighbors;
    int k = 0;
    while (k < uv_neighbors.length) {
    String nb = uv_neighbors[k];
    graph_copy[nb] = [...(graph_copy[nb]!), uv];
    graph_copy[nb] = remove_all((graph_copy[nb]!), u);
    graph_copy[nb] = remove_all((graph_copy[nb]!), v);
    k = k + 1;
  }
    List<String> group = <String>[];
    i = 0;
    while (i < (contracted[u]!).length) {
    group = [...group, (contracted[u]!)[i]];
    i = i + 1;
  }
    i = 0;
    while (i < (contracted[v]!).length) {
    String val = (contracted[v]!)[i];
    if (contains(group, val) == false) {
    group = [...group, val];
  }
    i = i + 1;
  }
    contracted[uv] = group;
    nodes = List<dynamic>.from(remove_all(List<String>.from(nodes), u));
    nodes = List<dynamic>.from(remove_all(List<String>.from(nodes), v));
    nodes = [...nodes, uv];
  }
  List<List<String>> groups = <List<String>>[];
  int j = 0;
  while (j < nodes.length) {
    dynamic n = nodes[j];
    groups = ([...groups, (contracted[n]!)] as List<dynamic>).map((e) => (List<String>.from(e) as List<String>)).toList();
    j = j + 1;
  }
  List<String> groupA = groups[0];
  List<String> groupB = groups[1];
  List<Pair> cut = <Pair>[];
  j = 0;
  while (j < groupA.length) {
    String node = groupA[j];
    List<String> neigh = graph[node]!;
    int l = 0;
    while (l < neigh.length) {
    String nb = neigh[l];
    if (contains(groupB, nb)) {
    cut = [...cut, Pair(a: node, b: nb)];
  }
    l = l + 1;
  }
    j = j + 1;
  }
  return cut;
}

String cut_to_string(List<Pair> cut) {
  String s = "{";
  int i = 0;
  while (i < cut.length) {
    Pair p = cut[i];
    s = s + "(" + p.a + ", " + p.b + ")";
    if (i < cut.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "}";
  return s;
}

Map<String, List<String>> TEST_GRAPH = {"1": ["2", "3", "4", "5"], "2": ["1", "3", "4", "5"], "3": ["1", "2", "4", "5", "10"], "4": ["1", "2", "3", "5", "6"], "5": ["1", "2", "3", "4", "7"], "6": ["7", "8", "9", "10", "4"], "7": ["6", "8", "9", "10", "5"], "8": ["6", "7", "9", "10"], "9": ["6", "7", "8", "10"], "10": ["6", "7", "8", "9", "3"]};
List<Pair> result = partition_graph(TEST_GRAPH);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(cut_to_string(result));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
