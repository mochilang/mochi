// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

Map<int, List<int>> tree = <int, List<int>>{};
List<int> dfs(int start, Map<int, bool> visited) {
  int size = 1;
  int cuts = 0;
  visited[start] = true;
  for (var v in tree[start]!) {
    if (!visited.containsKey(v)) {
    List<int> res = dfs(v, visited);
    size = size + res[0];
    cuts = cuts + res[1];
  }
  }
  if (size % 2 == 0) {
    cuts = cuts + 1;
  }
  return [size, cuts];
}

int even_tree() {
  Map<int, bool> visited = {};
  List<int> res = dfs(1, visited);
  return res[1] - 1;
}

void _main() {
  List<List<int>> edges = [[2, 1], [3, 1], [4, 3], [5, 2], [6, 1], [7, 2], [8, 6], [9, 8], [10, 8]];
  int i = 0;
  while (i < edges.length) {
    int u = edges[i][0];
    int v = edges[i][1];
    if (!tree.containsKey(u)) {
    tree[u] = ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    if (!tree.containsKey(v)) {
    tree[v] = ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    tree[u] = [...(tree[u]!), v];
    tree[v] = [...(tree[v]!), u];
    i = i + 1;
  }
  print(_str(even_tree()));
}

void _start() {
  _main();
}

void main() => _start();
