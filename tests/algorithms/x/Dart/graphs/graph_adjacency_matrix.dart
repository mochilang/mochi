// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Graph {
  bool directed;
  Map<int, int> vertex_to_index;
  List<List<int>> adj_matrix;
  Graph({required this.directed, required this.vertex_to_index, required this.adj_matrix});
}

Graph make_graph(List<int> vertices, List<List<int>> edges, bool directed) {
  Graph g = Graph(directed: directed, vertex_to_index: {}, adj_matrix: []);
  int i = 0;
  while (i < vertices.length) {
    add_vertex(g, vertices[i]);
    i = i + 1;
  }
  int j = 0;
  while (j < edges.length) {
    List<int> e = edges[j];
    add_edge(g, e[0], e[1]);
    j = j + 1;
  }
  return g;
}

bool contains_vertex(Graph g, int v) {
  return g.vertex_to_index.containsKey(v);
}

void add_vertex(Graph g, int v) {
  if (contains_vertex(g, v)) {
    throw Exception("vertex already exists");
  }
  List<List<int>> matrix = g.adj_matrix;
  int i = 0;
  while (i < matrix.length) {
    while (matrix.length <= i) { matrix.add(<int>[]); } matrix[i] = [...matrix[i], 0];
    i = i + 1;
  }
  List<int> row = <int>[];
  int j = 0;
  while (j < matrix.length + 1) {
    row = [...row, 0];
    j = j + 1;
  }
  matrix = ([...matrix, row] as List).map((e) => (e as List<int>)).toList();
  g.adj_matrix = matrix;
  Map<int, int> idx_map = g.vertex_to_index;
  idx_map[v] = matrix.length - 1;
  g.vertex_to_index = idx_map;
}

Map<int, int> remove_key(Map<int, int> m, int k) {
  Map<int, int> out = <int, int>{};
  for (int key in m.keys) {
    if (key != k) {
    out[key] = m[key]!;
  }
  }
  return out;
}

Map<int, int> decrement_indices(Map<int, int> m, int start) {
  Map<int, int> out = <int, int>{};
  for (int key in m.keys) {
    int idx = m[key]!;
    if (idx > start) {
    out[key] = idx - 1;
  } else {
    out[key] = idx;
  }
  }
  return out;
}

void remove_vertex(Graph g, int v) {
  if (!contains_vertex(g, v)) {
    throw Exception("vertex does not exist");
  }
  int idx = g.vertex_to_index[v]!;
  List<List<int>> new_matrix = <List<int>>[];
  int i = 0;
  while (i < g.adj_matrix.length) {
    if (i != idx) {
    List<int> row = g.adj_matrix[i];
    List<int> new_row = <int>[];
    int j = 0;
    while (j < row.length) {
    if (j != idx) {
    new_row = [...new_row, row[j]];
  }
    j = j + 1;
  };
    new_matrix = ([...new_matrix, new_row] as List).map((e) => (e as List<int>)).toList();
  }
    i = i + 1;
  }
  g.adj_matrix = new_matrix;
  Map<int, int> m = remove_key(g.vertex_to_index, v);
  g.vertex_to_index = decrement_indices(m, idx);
}

void add_edge(Graph g, int u, int v) {
  if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
    throw Exception("missing vertex");
  }
  int i = g.vertex_to_index[u]!;
  int j = g.vertex_to_index[v]!;
  List<List<int>> matrix = g.adj_matrix;
  while (matrix[i]!.length <= j) { matrix[i]!.add(0); } matrix[i]![j] = 1;
  if (!g.directed) {
    while (matrix[j]!.length <= i) { matrix[j]!.add(0); } matrix[j]![i] = 1;
  }
  g.adj_matrix = matrix;
}

void remove_edge(Graph g, int u, int v) {
  if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
    throw Exception("missing vertex");
  }
  int i = g.vertex_to_index[u]!;
  int j = g.vertex_to_index[v]!;
  List<List<int>> matrix = g.adj_matrix;
  while (matrix[i]!.length <= j) { matrix[i]!.add(0); } matrix[i]![j] = 0;
  if (!g.directed) {
    while (matrix[j]!.length <= i) { matrix[j]!.add(0); } matrix[j]![i] = 0;
  }
  g.adj_matrix = matrix;
}

bool contains_edge(Graph g, int u, int v) {
  if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
    throw Exception("missing vertex");
  }
  int i = g.vertex_to_index[u]!;
  int j = g.vertex_to_index[v]!;
  List<List<int>> matrix = g.adj_matrix;
  return matrix[i][j] == 1;
}

void clear_graph(Graph g) {
  g.vertex_to_index = <int, int>{};
  g.adj_matrix = ([] as List).map((e) => (e as List<int>)).toList();
}

Graph g = make_graph([1, 2, 3], [[1, 2], [2, 3]], false);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((g.adj_matrix).toString());
  print((contains_edge(g, 1, 2)).toString());
  print((contains_edge(g, 2, 1)).toString());
  remove_edge(g, 1, 2);
  print((contains_edge(g, 1, 2)).toString());
  remove_vertex(g, 2);
  print((g.adj_matrix).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
