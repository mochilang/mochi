// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<int>> tarjan(List<List<int>> g) {
  int n = g.length;
  List<int> stack = <int>[];
  List<bool> on_stack = <bool>[];
  List<int> index_of = <int>[];
  List<int> lowlink_of = <int>[];
  int i = 0;
  while (i < n) {
    on_stack = [...on_stack, false];
    index_of = [...index_of, 0 - 1];
    lowlink_of = [...lowlink_of, 0 - 1];
    i = i + 1;
  }
  List<List<int>> components = <List<int>>[];
  int strong_connect(int v, int index) {
  while (index_of.length <= v) { index_of.add(0); } index_of[v] = index;
  while (lowlink_of.length <= v) { lowlink_of.add(0); } lowlink_of[v] = index;
  int current_index = index + 1;
  stack = [...stack, v];
  while (on_stack.length <= v) { on_stack.add(false); } on_stack[v] = true;
  for (int w in g[v]) {
    if (index_of[w] == 0 - 1) {
    current_index = strong_connect(w, current_index);
    if (lowlink_of[w] < lowlink_of[v]) {
    while (lowlink_of.length <= v) { lowlink_of.add(0); } lowlink_of[v] = lowlink_of[w];
  };
  } else {
    if (on_stack[w]) {
    if (lowlink_of[w] < lowlink_of[v]) {
    while (lowlink_of.length <= v) { lowlink_of.add(0); } lowlink_of[v] = lowlink_of[w];
  };
  };
  }
  }
  if (lowlink_of[v] == index_of[v]) {
    List<int> component = <int>[];
    int w = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    while (on_stack.length <= w) { on_stack.add(false); } on_stack[w] = false;
    component = [...component, w];
    while (w != v) {
    w = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    while (on_stack.length <= w) { on_stack.add(false); } on_stack[w] = false;
    component = [...component, w];
  };
    components = ([...components, component] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  return current_index;
}
  int v = 0;
  while (v < n) {
    if (index_of[v] == 0 - 1) {
    strong_connect(v, 0);
  }
    v = v + 1;
  }
  return components;
}

List<List<int>> create_graph(int n, List<List<int>> edges) {
  List<List<int>> g = <List<int>>[];
  int i = 0;
  while (i < n) {
    g = [...g, []];
    i = i + 1;
  }
  for (List<int> e in edges) {
    int u = e[0];
    int v = e[1];
    while (g.length <= u) { g.add(<int>[]); } g[u] = [...g[u], v];
  }
  return g;
}

void _main() {
  int n_vertices = 7;
  List<int> source = [0, 0, 1, 2, 3, 3, 4, 4, 6];
  List<int> target = [1, 3, 2, 0, 1, 4, 5, 6, 5];
  List<List<int>> edges = <List<int>>[];
  int i = 0;
  while (i < source.length) {
    edges = ([...edges, [source[i], target[i]]] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  List<List<int>> g = create_graph(n_vertices, edges);
  print(_str(tarjan(g)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
