// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

class Graph {
  Map<String, List<String>> adj;
  bool directed;
  Graph({required this.adj, required this.directed});
}

Graph create_graph(List<String> vertices, List<List<String>> edges, bool directed) {
  Map<String, List<String>> adj = <String, List<String>>{};
  for (String v in vertices) {
    adj[v] = List<String>.from([]);
  }
  for (List<String> e in edges) {
    String s = e[0];
    String d = e[1];
    if (!adj.containsKey(s)) {
    adj[s] = List<String>.from([]);
  }
    if (!adj.containsKey(d)) {
    adj[d] = List<String>.from([]);
  }
    adj[s] = [...(adj[s]!), d];
    if (!directed) {
    adj[d] = [...(adj[d]!), s];
  }
  }
  return Graph(adj: adj, directed: directed);
}

Graph add_vertex(Graph graph, String v) {
  if (graph.adj.containsKey(v)) {
    _error("vertex exists");
  }
  Map<String, List<String>> adj = <String, List<String>>{};
  for (String k in graph.adj.keys) {
    adj[k] = graph.adj[k]!;
  }
  adj[v] = List<String>.from([]);
  return Graph(adj: adj, directed: graph.directed);
}

List<String> remove_from_list(List<String> lst, String value) {
  List<String> res = <String>[];
  int i = 0;
  while (i < lst.length) {
    if (lst[i] != value) {
    res = [...res, lst[i]];
  }
    i = i + 1;
  }
  return res;
}

Map<String, List<String>> remove_key(Map<String, List<String>> m, String key) {
  Map<String, List<String>> res = <String, List<String>>{};
  for (String k in m.keys) {
    if (k != key) {
    res[k] = m[k]!;
  }
  }
  return res;
}

Graph add_edge(Graph graph, String s, String d) {
  if (!graph.adj.containsKey(s) || !graph.adj.containsKey(d)) {
    _error("vertex missing");
  }
  if (contains_edge(graph, s, d)) {
    _error("edge exists");
  }
  Map<String, List<String>> adj = <String, List<String>>{};
  for (String k in graph.adj.keys) {
    adj[k] = graph.adj[k]!;
  }
  List<String> list_s = adj[s]!;
  list_s = [...list_s, d];
  adj[s] = list_s;
  if (!graph.directed) {
    List<String> list_d = adj[d]!;
    list_d = [...list_d, s];
    adj[d] = list_d;
  }
  return Graph(adj: adj, directed: graph.directed);
}

Graph remove_edge(Graph graph, String s, String d) {
  if (!graph.adj.containsKey(s) || !graph.adj.containsKey(d)) {
    _error("vertex missing");
  }
  if (!contains_edge(graph, s, d)) {
    _error("edge missing");
  }
  Map<String, List<String>> adj = <String, List<String>>{};
  for (String k in graph.adj.keys) {
    adj[k] = graph.adj[k]!;
  }
  adj[s] = remove_from_list((adj[s]!), d);
  if (!graph.directed) {
    adj[d] = remove_from_list((adj[d]!), s);
  }
  return Graph(adj: adj, directed: graph.directed);
}

Graph remove_vertex(Graph graph, String v) {
  if (!graph.adj.containsKey(v)) {
    _error("vertex missing");
  }
  Map<String, List<String>> adj = <String, List<String>>{};
  for (String k in graph.adj.keys) {
    if (k != v) {
    adj[k] = remove_from_list((graph.adj[k]!), v);
  }
  }
  return Graph(adj: adj, directed: graph.directed);
}

bool contains_vertex(Graph graph, String v) {
  return graph.adj.containsKey(v);
}

bool contains_edge(Graph graph, String s, String d) {
  if (!graph.adj.containsKey(s) || !graph.adj.containsKey(d)) {
    _error("vertex missing");
  }
  for (String x in (graph.adj[s]!)) {
    if (x == d) {
    return true;
  }
  }
  return false;
}

Graph clear_graph(Graph graph) {
  return Graph(adj: {}, directed: graph.directed);
}

String to_string(Graph graph) {
  return _str(graph.adj);
}

void _main() {
  List<String> vertices = ["1", "2", "3", "4"];
  List<List<String>> edges = [["1", "2"], ["2", "3"], ["3", "4"]];
  Graph g = create_graph(vertices, edges, false);
  print(to_string(g));
  g = add_vertex(g, "5");
  g = add_edge(g, "4", "5");
  print(_str(contains_edge(g, "4", "5")));
  g = remove_edge(g, "1", "2");
  g = remove_vertex(g, "3");
  print(to_string(g));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
