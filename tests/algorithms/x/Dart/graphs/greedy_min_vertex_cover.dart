// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<int> remove_value(List<int> lst, int val) {
  List<int> res = <int>[];
  int i = 0;
  while (i < lst.length) {
    if (lst[i] != val) {
    res = [...res, lst[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> greedy_min_vertex_cover(Map<int, List<int>> graph) {
  Map<int, List<int>> g = graph;
  List<int> cover = <int>[];
  while (true) {
    int max_v = 0;
    int max_deg = 0;
    for (int v in g.keys) {
    int key = (v).toInt();
    int deg = (g[key]!).length;
    if (deg > max_deg) {
    max_deg = deg;
    max_v = key;
  }
  }
    if (max_deg == 0) {
    break;
  }
    cover = [...cover, max_v];
    List<int> neighbors = g[max_v]!;
    int i = 0;
    while (i < neighbors.length) {
    int n = neighbors[i];
    g[n] = remove_value((g[n]!), max_v);
    i = i + 1;
  }
    g[max_v] = ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  return cover;
}

Map<int, List<int>> graph = {0: [1, 3], 1: [0, 3], 2: [0, 3, 4], 3: [0, 1, 2], 4: [2, 3]};
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + greedy_min_vertex_cover(graph).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
