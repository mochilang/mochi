// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<int> topology_sort(List<List<int>> graph, int vert, List<bool> visited) {
  while (visited.length <= vert) { visited.add(false); } visited[vert] = true;
  List<int> order = <int>[];
  for (int neighbour in graph[vert]) {
    if (!visited[neighbour]) {
    order = ([...order, ...topology_sort(graph, neighbour, visited)] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  }
  order = [...order, vert];
  return order;
}

List<int> find_component(List<List<int>> graph, int vert, List<bool> visited) {
  while (visited.length <= vert) { visited.add(false); } visited[vert] = true;
  List<int> comp = [vert];
  for (int neighbour in graph[vert]) {
    if (!visited[neighbour]) {
    comp = ([...comp, ...find_component(graph, neighbour, visited)] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  }
  return comp;
}

List<List<int>> strongly_connected_components(List<List<int>> graph) {
  int n = graph.length;
  List<bool> visited = <bool>[];
  for (int __ = 0; __ < n; __++) {
    visited = [...visited, false];
  }
  List<List<int>> reversed = <List<int>>[];
  for (int __ = 0; __ < n; __++) {
    reversed = [...reversed, []];
  }
  for (int i = 0; i < n; i++) {
    for (int neighbour in graph[i]) {
    while (reversed.length <= neighbour) { reversed.add(<int>[]); } reversed[neighbour] = [...reversed[neighbour], i];
  }
  }
  List<int> order = <int>[];
  for (int i = 0; i < n; i++) {
    if (!visited[i]) {
    order = ([...order, ...topology_sort(graph, i, visited)] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  }
  visited = List<bool>.from([]);
  for (int __ = 0; __ < n; __++) {
    visited = [...visited, false];
  }
  List<List<int>> components = <List<int>>[];
  int i = 0;
  while (i < n) {
    int v = order[n - i - 1];
    if (!visited[v]) {
    List<int> comp = find_component(reversed, v, visited);
    components = ([...components, comp] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    i = i + 1;
  }
  return components;
}

void _main() {
  List<List<int>> test_graph_1 = [[2, 3], [0], [1], [4], []];
  List<List<int>> test_graph_2 = [[1, 2, 3], [2], [0], [4], [5], [3]];
  print(_str(strongly_connected_components(test_graph_1)));
  print(_str(strongly_connected_components(test_graph_2)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
