// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double rand_float() {
  return (_now() % 1000000 as double) / 1000000.0;
}

double pow_float(double base, double exp) {
  double result = 1.0;
  int i = 0;
  int e = exp as int;
  while (i < e) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

double distance(List<int> city1, List<int> city2) {
  double dx = city1[0] - city2[0] as double;
  double dy = city1[1] - city2[1] as double;
  return sqrtApprox(dx * dx + dy * dy);
}

int choose_weighted(List<int> options, List<double> weights) {
  double total = 0.0;
  int i = 0;
  while (i < weights.length) {
    total = total + weights[i];
    i = i + 1;
  }
  double r = rand_float() * total;
  double accum = 0.0;
  i = 0;
  while (i < weights.length) {
    accum = accum + weights[i];
    if (r <= accum) {
    return options[i];
  }
    i = i + 1;
  }
  return options[options.length - 1];
}

int city_select(List<List<double>> pheromone, int current, List<int> unvisited, double alpha, double beta, Map<int, List<int>> cities) {
  List<double> probs = <double>[];
  int i = 0;
  while (i < unvisited.length) {
    int city = unvisited[i];
    double dist = distance(cities[city]!, cities[current]!);
    double trail = pheromone[city][current];
    double prob = pow_float(trail, alpha) * pow_float(1.0 / dist, beta);
    probs = [...probs, prob];
    i = i + 1;
  }
  return choose_weighted(unvisited, probs);
}

List<List<double>> pheromone_update(List<List<double>> pheromone, Map<int, List<int>> cities, double evaporation, List<List<int>> ants_route, double q) {
  int n = pheromone.length;
  int i = 0;
  while (i < n) {
    int j = 0;
    while (j < n) {
    while (pheromone[i]!.length <= j) { pheromone[i]!.add(0); } pheromone[i]![j] = pheromone[i][j] * evaporation;
    j = j + 1;
  }
    i = i + 1;
  }
  int a = 0;
  while (a < ants_route.length) {
    List<int> route = ants_route[a];
    double total = 0.0;
    int r = 0;
    while (r < route.length - 1) {
    total = total + distance(cities[route[r]]!, cities[route[r + 1]]!);
    r = r + 1;
  }
    double delta = q / total;
    r = 0;
    while (r < route.length - 1) {
    int u = route[r];
    int v = route[r + 1];
    while (pheromone[u]!.length <= v) { pheromone[u]!.add(0); } pheromone[u]![v] = pheromone[u][v] + delta;
    while (pheromone[v]!.length <= u) { pheromone[v]!.add(0); } pheromone[v]![u] = pheromone[u][v];
    r = r + 1;
  }
    a = a + 1;
  }
  return pheromone;
}

List<int> remove_value(List<int> lst, int val) {
  List<int> res = <int>[];
  int i = 0;
  while (i < lst.length) {
    if (lst[i] != val) {
    res = [...res, lst[i]];
  }
    i = i + 1;
  }
  return res;
}

void ant_colony(Map<int, List<int>> cities, int ants_num, int iterations, double evaporation, double alpha, double beta, double q) {
  int n = cities.length;
  List<List<double>> pheromone = <List<double>>[];
  int i = 0;
  while (i < n) {
    List<double> row = <double>[];
    int j = 0;
    while (j < n) {
    row = [...row, 1.0];
    j = j + 1;
  }
    pheromone = ([...pheromone, row] as List).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  List<int> best_path = <int>[];
  double best_distance = 1000000000.0;
  int iter = 0;
  while (iter < iterations) {
    List<List<int>> ants_route = <List<int>>[];
    int k = 0;
    while (k < ants_num) {
    List<int> route = [0];
    List<int> unvisited = <int>[];
    for (int key in cities.keys) {
    if (key != 0) {
    unvisited = [...unvisited, key];
  }
  }
    int current = 0;
    while (unvisited.length > 0) {
    int next_city = city_select(pheromone, current, unvisited, alpha, beta, cities);
    route = [...route, next_city];
    unvisited = remove_value(unvisited, next_city);
    current = next_city;
  }
    route = [...route, 0];
    ants_route = ([...ants_route, route] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    k = k + 1;
  }
    pheromone = pheromone_update(pheromone, cities, evaporation, ants_route, q);
    int a = 0;
    while (a < ants_route.length) {
    List<int> route = ants_route[a];
    double dist = 0.0;
    int r = 0;
    while (r < route.length - 1) {
    dist = dist + distance(cities[route[r]]!, cities[route[r + 1]]!);
    r = r + 1;
  }
    if (dist < best_distance) {
    best_distance = dist;
    best_path = route;
  }
    a = a + 1;
  }
    iter = iter + 1;
  }
  print("best_path = " + (best_path).toString());
  print("best_distance = " + (best_distance).toString());
}

Map<int, List<int>> cities = {0: [0, 0], 1: [0, 5], 2: [3, 8], 3: [8, 10], 4: [12, 8], 5: [12, 4], 6: [8, 0], 7: [6, 2]};
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  ant_colony(cities, 10, 20, 0.7, 1.0, 5.0, 10.0);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
