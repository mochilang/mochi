// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class NodeCost {
  String node;
  int cost;
  NodeCost({required this.node, required this.cost});
}

Map<String, Map<String, int>> G = {"A": {"B": 2, "C": 5}, "B": {"A": 2, "D": 3, "E": 1, "F": 1}, "C": {"A": 5, "F": 3}, "D": {"B": 3}, "E": {"B": 4, "F": 3}, "F": {"C": 3, "E": 3}};
List<NodeCost> heap = [NodeCost(node: "E", cost: 0)];
Map<String, bool> visited = <String, bool>{};
int result = -1;
Map<String, Map<String, int>> G2 = {"B": {"C": 1}, "C": {"D": 1}, "D": {"F": 1}, "E": {"B": 1, "F": 3}, "F": {}};
List<NodeCost> heap2 = [NodeCost(node: "E", cost: 0)];
Map<String, bool> visited2 = <String, bool>{};
int result2 = -1;
Map<String, Map<String, int>> G3 = {"B": {"C": 1}, "C": {"D": 1}, "D": {"F": 1}, "E": {"B": 1, "G": 2}, "F": {}, "G": {"F": 1}};
List<NodeCost> heap3 = [NodeCost(node: "E", cost: 0)];
Map<String, bool> visited3 = <String, bool>{};
int result3 = -1;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  while (heap.length > 0) {
    int best_idx = 0;
    int i = 1;
    while (i < heap.length) {
    if (heap[i].cost < heap[best_idx].cost) {
    best_idx = i;
  }
    i = i + 1;
  }
    NodeCost best = heap[best_idx];
    List<NodeCost> new_heap = <NodeCost>[];
    int j = 0;
    while (j < heap.length) {
    if (j != best_idx) {
    new_heap = [...new_heap, heap[j]];
  }
    j = j + 1;
  }
    heap = new_heap;
    String u = best.node;
    int cost = best.cost;
    if (visited.containsKey(u)) {
    continue;
  }
    visited[u] = true;
    if (u == "C") {
    result = cost;
    break;
  }
    for (var v in G[u].keys) {
    if (visited.containsKey(v)) {
    continue;
  }
    num next_cost = cost + G[u][v];
    heap = [...heap, NodeCost(node: v, cost: next_cost)];
  }
  }
  print(result);
  while (heap2.length > 0) {
    int best2_idx = 0;
    int i2 = 1;
    while (i2 < heap2.length) {
    if (heap2[i2].cost < heap2[best2_idx].cost) {
    best2_idx = i2;
  }
    i2 = i2 + 1;
  }
    NodeCost best2 = heap2[best2_idx];
    List<NodeCost> new_heap2 = <NodeCost>[];
    int j2 = 0;
    while (j2 < heap2.length) {
    if (j2 != best2_idx) {
    new_heap2 = [...new_heap2, heap2[j2]];
  }
    j2 = j2 + 1;
  }
    heap2 = new_heap2;
    String u2 = best2.node;
    int cost2 = best2.cost;
    if (visited2.containsKey(u2)) {
    continue;
  }
    visited2[u2] = true;
    if (u2 == "F") {
    result2 = cost2;
    break;
  }
    for (var v2 in G2[u2].keys) {
    if (visited2.containsKey(v2)) {
    continue;
  }
    num next_cost2 = cost2 + G2[u2][v2];
    heap2 = [...heap2, NodeCost(node: v2, cost: next_cost2)];
  }
  }
  print(result2);
  while (heap3.length > 0) {
    int best3_idx = 0;
    int i3 = 1;
    while (i3 < heap3.length) {
    if (heap3[i3].cost < heap3[best3_idx].cost) {
    best3_idx = i3;
  }
    i3 = i3 + 1;
  }
    NodeCost best3 = heap3[best3_idx];
    List<NodeCost> new_heap3 = <NodeCost>[];
    int j3 = 0;
    while (j3 < heap3.length) {
    if (j3 != best3_idx) {
    new_heap3 = [...new_heap3, heap3[j3]];
  }
    j3 = j3 + 1;
  }
    heap3 = new_heap3;
    String u3 = best3.node;
    int cost3 = best3.cost;
    if (visited3.containsKey(u3)) {
    continue;
  }
    visited3[u3] = true;
    if (u3 == "F") {
    result3 = cost3;
    break;
  }
    for (var v3 in G3[u3].keys) {
    if (visited3.containsKey(v3)) {
    continue;
  }
    num next_cost3 = cost3 + G3[u3][v3];
    heap3 = [...heap3, NodeCost(node: v3, cost: next_cost3)];
  }
  }
  print(result3);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
