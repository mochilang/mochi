// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Graph {
  Map<int, List<int>> vertex;
  int size;
  Graph({required this.vertex, required this.size});
}

Graph add_edge(Graph g, int from_vertex, int to_vertex) {
  Map<int, List<int>> v = g.vertex;
  if (v.containsKey(from_vertex)) {
    List<int> lst = v[from_vertex]!;
    lst = [...lst, to_vertex];
    v[from_vertex] = lst;
  } else {
    v[from_vertex] = [to_vertex];
  }
  g.vertex = v;
  if (from_vertex + 1 > g.size) {
    g.size = from_vertex + 1;
  }
  if (to_vertex + 1 > g.size) {
    g.size = to_vertex + 1;
  }
  return g;
}

String list_to_string(List<int> lst) {
  String res = "";
  int i = 0;
  while (i < lst.length) {
    res = res + (lst[i]).toString();
    if (i < lst.length - 1) {
    res = res + " ";
  }
    i = i + 1;
  }
  return res;
}

String list_to_arrow(List<int> lst) {
  String res = "";
  int i = 0;
  while (i < lst.length) {
    res = res + (lst[i]).toString();
    if (i < lst.length - 1) {
    res = res + " -> ";
  }
    i = i + 1;
  }
  return res;
}

dynamic print_graph(Graph g) {
  print((g.vertex).toString());
  int i = 0;
  while (i < g.size) {
    List<int> edges = <int>[];
    if (g.vertex.containsKey(i)) {
    edges = (g.vertex[i]! as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
    String line = (i).toString() + "  ->  " + list_to_arrow(edges);
    print(line);
    i = i + 1;
  }
}

List<int> dfs_recursive(Graph g, int start_vertex, List<bool> visited, List<int> order) {
  while (visited.length <= start_vertex) { visited.add(false); } visited[start_vertex] = true;
  order = [...order, start_vertex];
  if (g.vertex.containsKey(start_vertex)) {
    List<int> neighbors = g.vertex[start_vertex]!;
    int i = 0;
    while (i < neighbors.length) {
    int nb = neighbors[i];
    if (!visited[nb]) {
    order = dfs_recursive(g, nb, visited, order);
  }
    i = i + 1;
  };
  }
  return order;
}

List<int> dfs(Graph g) {
  int n = g.size;
  List<bool> visited = <bool>[];
  int i = 0;
  while (i < n) {
    visited = [...visited, false];
    i = i + 1;
  }
  List<int> order = <int>[];
  i = 0;
  while (i < n) {
    if (!visited[i]) {
    order = dfs_recursive(g, i, visited, order);
  }
    i = i + 1;
  }
  return order;
}

Graph g = Graph(vertex: {}, size: 0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  g = add_edge(g, 0, 1);
  g = add_edge(g, 0, 2);
  g = add_edge(g, 1, 2);
  g = add_edge(g, 2, 0);
  g = add_edge(g, 2, 3);
  g = add_edge(g, 3, 3);
  print_graph(g);
  print("DFS:");
  print(list_to_string(dfs(g)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
