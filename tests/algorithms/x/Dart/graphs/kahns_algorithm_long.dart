// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int longest_distance(List<List<int>> graph) {
  int n = graph.length;
  List<int> indegree = <int>[];
  int i = 0;
  while (i < n) {
    indegree = [...indegree, 0];
    i = i + 1;
  }
  List<int> long_dist = <int>[];
  int j = 0;
  while (j < n) {
    long_dist = [...long_dist, 1];
    j = j + 1;
  }
  int u = 0;
  while (u < n) {
    for (int v in graph[u]) {
    while (indegree.length <= v) { indegree.add(0); } indegree[v] = indegree[v] + 1;
  }
    u = u + 1;
  }
  List<int> queue = <int>[];
  int head = 0;
  int k = 0;
  while (k < n) {
    if (indegree[k] == 0) {
    queue = [...queue, k];
  }
    k = k + 1;
  }
  while (head < queue.length) {
    int vertex = queue[head];
    head = head + 1;
    for (int x in graph[vertex]) {
    while (indegree.length <= x) { indegree.add(0); } indegree[x] = indegree[x] - 1;
    int new_dist = long_dist[vertex] + 1;
    if (new_dist > long_dist[x]) {
    while (long_dist.length <= x) { long_dist.add(0); } long_dist[x] = new_dist;
  }
    if (indegree[x] == 0) {
    queue = [...queue, x];
  }
  }
  }
  int max_len = long_dist[0];
  int m = 1;
  while (m < n) {
    if (long_dist[m] > max_len) {
    max_len = long_dist[m];
  }
    m = m + 1;
  }
  return max_len;
}

List<List<int>> graph = [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(longest_distance(graph));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
