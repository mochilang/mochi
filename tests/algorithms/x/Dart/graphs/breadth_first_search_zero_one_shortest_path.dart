// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

class Edge {
  int destination_vertex;
  int weight;
  Edge({required this.destination_vertex, required this.weight});
}

class AdjacencyList {
  List<List<Edge>> graph;
  int size;
  AdjacencyList({required this.graph, required this.size});
}

AdjacencyList new_adjacency_list(int size) {
  List<List<Edge>> g = <List<Edge>>[];
  int i = 0;
  while (i < size) {
    g = [...g, []];
    i = i + 1;
  }
  return AdjacencyList(graph: g, size: size);
}

void add_edge(AdjacencyList al, int from_vertex, int to_vertex, int weight) {
  if (!(weight == 0 || weight == 1)) {
    _error("Edge weight must be either 0 or 1.");
  }
  if (to_vertex < 0 || to_vertex >= al.size) {
    _error("Vertex indexes must be in [0; size).");
  }
  List<List<Edge>> g = al.graph;
  List<Edge> edges = g[from_vertex];
  while (g.length <= from_vertex) { g.add(<Edge>[]); } g[from_vertex] = [...edges, Edge(destination_vertex: to_vertex, weight: weight)];
  al.graph = g;
}

List<int> push_front(List<int> q, int v) {
  List<int> res = [v];
  int i = 0;
  while (i < q.length) {
    res = [...res, q[i]];
    i = i + 1;
  }
  return res;
}

List<int> pop_front(List<int> q) {
  List<int> res = <int>[];
  int i = 1;
  while (i < q.length) {
    res = [...res, q[i]];
    i = i + 1;
  }
  return res;
}

int front(List<int> q) {
  return q[0];
}

int get_shortest_path(AdjacencyList al, int start_vertex, int finish_vertex) {
  List<int> queue = [start_vertex];
  List<int> distances = <int>[];
  int i = 0;
  while (i < al.size) {
    distances = [...distances, -1];
    i = i + 1;
  }
  while (distances.length <= start_vertex) { distances.add(0); } distances[start_vertex] = 0;
  while (queue.length > 0) {
    int current_vertex = front(queue);
    queue = pop_front(queue);
    int current_distance = distances[current_vertex];
    List<Edge> edges = al.graph[current_vertex];
    int j = 0;
    while (j < edges.length) {
    Edge edge = edges[j];
    int new_distance = current_distance + edge.weight;
    int dest = edge.destination_vertex;
    int dest_distance = distances[dest];
    if (dest_distance >= 0 && new_distance >= dest_distance) {
    j = j + 1;
    continue;
  }
    while (distances.length <= dest) { distances.add(0); } distances[dest] = new_distance;
    if (edge.weight == 0) {
    queue = push_front(queue, dest);
  } else {
    queue = [...queue, dest];
  }
    j = j + 1;
  }
  }
  int result = distances[finish_vertex];
  if (result < 0) {
    _error("No path from start_vertex to finish_vertex.");
  }
  return result;
}

AdjacencyList g = new_adjacency_list(11);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  add_edge(g, 0, 1, 0);
  add_edge(g, 0, 3, 1);
  add_edge(g, 1, 2, 0);
  add_edge(g, 2, 3, 0);
  add_edge(g, 4, 2, 1);
  add_edge(g, 4, 5, 1);
  add_edge(g, 4, 6, 1);
  add_edge(g, 5, 9, 0);
  add_edge(g, 6, 7, 1);
  add_edge(g, 7, 8, 1);
  add_edge(g, 8, 10, 1);
  add_edge(g, 9, 7, 0);
  add_edge(g, 9, 10, 1);
  print(_str(get_shortest_path(g, 0, 3)));
  print(_str(get_shortest_path(g, 4, 10)));
  print(_str(get_shortest_path(g, 4, 8)));
  print(_str(get_shortest_path(g, 0, 1)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
