// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

void add_edge(Map<int, List<int>> graph, int from, int to) {
  if (graph.containsKey(from)) {
    graph[from] = ([...graph[from], to] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  } else {
    graph[from] = [to];
  }
}

void print_graph(Map<int, List<int>> graph) {
  for (var v in graph.keys) {
    List<int> adj = graph[(v).toInt()]!;
    String line = (v).toString() + "  :  ";
    int i = 0;
    while (i < adj.length) {
    line = line + (adj[i]).toString();
    if (i < adj.length - 1) {
    line = line + " -> ";
  }
    i = i + 1;
  }
    print(line);
  }
}

List<int> bfs(Map<int, List<int>> graph, int start) {
  Map<int, bool> visited = <int, bool>{};
  List<int> queue = <int>[];
  List<int> order = <int>[];
  queue = [...queue, start];
  visited[start] = true;
  int head = 0;
  while (head < queue.length) {
    int vertex = queue[head];
    head = head + 1;
    order = [...order, vertex];
    List<int> neighbors = graph[vertex]!;
    int i = 0;
    while (i < neighbors.length) {
    int neighbor = neighbors[i];
    if (!visited.containsKey(neighbor)) {
    visited[neighbor] = true;
    queue = [...queue, neighbor];
  }
    i = i + 1;
  }
  }
  return order;
}

Map<int, List<int>> g = <int, List<int>>{};
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  add_edge(g, 0, 1);
  add_edge(g, 0, 2);
  add_edge(g, 1, 2);
  add_edge(g, 2, 0);
  add_edge(g, 2, 3);
  add_edge(g, 3, 3);
  print_graph(g);
  print("[" + bfs(g, 2).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
