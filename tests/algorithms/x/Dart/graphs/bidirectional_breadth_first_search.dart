// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Node {
  String pos;
  List<String> path;
  Node({required this.pos, required this.path});
}

List<List<int>> grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]];
List<List<int>> delta = [[-1, 0], [0, -1], [1, 0], [0, 1]];
String key(int y, int x) {
  return (y).toString() + "," + (x).toString();
}

int parse_int(String s) {
  int value = 0;
  int i = 0;
  while (i < s.length) {
    String c = s.substring(i, i + 1);
    value = value * 10 + ((c).codeUnitAt(0));
    i = i + 1;
  }
  return value;
}

List<int> parse_key(String k) {
  int idx = 0;
  while (idx < k.length && _substr(k, idx, idx + 1) != ",") {
    idx = idx + 1;
  }
  int y = parse_int(_substr(k, 0, idx));
  int x = parse_int(_substr(k, idx + 1, k.length));
  return [y, x];
}

List<String> neighbors(String pos) {
  List<int> coords = parse_key(pos);
  int y = coords[0];
  int x = coords[1];
  List<String> res = <String>[];
  int i = 0;
  while (i < delta.length) {
    int ny = y + delta[i][0];
    int nx = x + delta[i][1];
    if (ny >= 0 && ny < grid.length && nx >= 0 && nx < grid[0].length) {
    if (grid[ny][nx] == 0) {
    res = [...res, key(ny, nx)];
  };
  }
    i = i + 1;
  }
  return res;
}

List<String> reverse_list(List<String> lst) {
  List<String> res = <String>[];
  int i = lst.length - 1;
  while (i >= 0) {
    res = [...res, lst[i]];
    i = i - 1;
  }
  return res;
}

List<String> bfs(String start, String goal) {
  List<Node> queue = <Node>[];
  queue = [...queue, Node(pos: start, path: [start])];
  int head = 0;
  Map<String, bool> visited = {start: true};
  while (head < queue.length) {
    Node node = queue[head];
    head = head + 1;
    if (node.pos == goal) {
    return node.path;
  }
    List<String> neigh = neighbors(node.pos);
    int i = 0;
    while (i < neigh.length) {
    String npos = neigh[i];
    if (!visited.containsKey(npos)) {
    visited[npos] = true;
    List<String> new_path = [...node.path, npos];
    queue = [...queue, Node(pos: npos, path: new_path)];
  }
    i = i + 1;
  }
  }
  return List<String>.from([]);
}

List<String> bidirectional_bfs(String start, String goal) {
  List<Node> queue_f = <Node>[];
  List<Node> queue_b = <Node>[];
  queue_f = [...queue_f, Node(pos: start, path: [start])];
  queue_b = [...queue_b, Node(pos: goal, path: [goal])];
  int head_f = 0;
  int head_b = 0;
  Map<String, List<String>> visited_f = {start: [start]};
  Map<String, List<String>> visited_b = {goal: [goal]};
  while (head_f < queue_f.length && head_b < queue_b.length) {
    Node node_f = queue_f[head_f];
    head_f = head_f + 1;
    List<String> neigh_f = neighbors(node_f.pos);
    int i = 0;
    while (i < neigh_f.length) {
    String npos = neigh_f[i];
    if (!visited_f.containsKey(npos)) {
    List<String> new_path = [...node_f.path, npos];
    visited_f[npos] = new_path;
    if (visited_b.containsKey(npos)) {
    List<String> rev = reverse_list(visited_b[npos]!);
    int j = 1;
    while (j < rev.length) {
    new_path = [...new_path, rev[j]];
    j = j + 1;
  };
    return new_path;
  };
    queue_f = [...queue_f, Node(pos: npos, path: new_path)];
  }
    i = i + 1;
  }
    Node node_b = queue_b[head_b];
    head_b = head_b + 1;
    List<String> neigh_b = neighbors(node_b.pos);
    int j = 0;
    while (j < neigh_b.length) {
    String nposb = neigh_b[j];
    if (!visited_b.containsKey(nposb)) {
    List<String> new_path_b = [...node_b.path, nposb];
    visited_b[nposb] = new_path_b;
    if (visited_f.containsKey(nposb)) {
    List<String> path_f = visited_f[nposb]!;
    new_path_b = reverse_list(new_path_b);
    int t = 1;
    while (t < new_path_b.length) {
    path_f = [...path_f, new_path_b[t]];
    t = t + 1;
  };
    return path_f;
  };
    queue_b = [...queue_b, Node(pos: nposb, path: new_path_b)];
  }
    j = j + 1;
  }
  }
  return [start];
}

String path_to_string(List<String> path) {
  if (path.length == 0) {
    return "[]";
  }
  List<int> first = parse_key(path[0]);
  String s = "[(" + (first[0]).toString() + ", " + (first[1]).toString() + ")";
  int i = 1;
  while (i < path.length) {
    List<int> c = parse_key(path[i]);
    s = s + ", (" + (c[0]).toString() + ", " + (c[1]).toString() + ")";
    i = i + 1;
  }
  s = s + "]";
  return s;
}

String start = key(0, 0);
String goal = key(grid.length - 1, grid[0].length - 1);
List<String> path1 = bfs(start, goal);
List<String> path2 = bidirectional_bfs(start, goal);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(path_to_string(path1));
  print(path_to_string(path2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
