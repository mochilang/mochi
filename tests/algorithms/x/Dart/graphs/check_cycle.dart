// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

bool depth_first_search(List<List<int>> graph, int vertex, List<bool> visited, List<bool> rec_stk) {
  while (visited.length <= vertex) { visited.add(false); } visited[vertex] = true;
  while (rec_stk.length <= vertex) { rec_stk.add(false); } rec_stk[vertex] = true;
  for (int node in graph[vertex]) {
    if (!visited[node]) {
    if (depth_first_search(graph, node, visited, rec_stk)) {
    return true;
  };
  } else {
    if ((rec_stk[node] ?? false)) {
    return true;
  };
  }
  }
  while (rec_stk.length <= vertex) { rec_stk.add(false); } rec_stk[vertex] = false;
  return false;
}

bool check_cycle(List<List<int>> graph) {
  int n = graph.length;
  List<bool> visited = <bool>[];
  List<bool> rec_stk = <bool>[];
  int i = 0;
  while (i < n) {
    visited = [...visited, false];
    rec_stk = [...rec_stk, false];
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    if (!visited[i]) {
    if (depth_first_search(graph, i, visited, rec_stk)) {
    return true;
  };
  }
    i = i + 1;
  }
  return false;
}

void print_bool(bool b) {
  if (b) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

List<List<dynamic>> g1 = [[], [0, 3], [0, 4], [5], [5], []];
List<List<int>> g2 = [[1, 2], [2], [0, 3], [3]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_bool(check_cycle(g1));
  print_bool(check_cycle(g2));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
