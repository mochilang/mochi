// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int dfs_skip(List<List<int>> graph, List<bool> visited, int skip, int at) {
  while (visited.length <= at) { visited.add(false); } visited[at] = true;
  int count = 1;
  for (int to in graph[at]) {
    if (to == skip) {
    continue;
  }
    if (visited[to] == false) {
    count = count + dfs_skip(graph, visited, skip, to);
  }
  }
  return count;
}

List<int> articulation_points(List<List<int>> graph) {
  int n = graph.length;
  List<int> result = <int>[];
  int v = 0;
  while (v < n) {
    List<bool> visited = <bool>[];
    int i = 0;
    while (i < n) {
    visited = [...visited, false];
    i = i + 1;
  }
    int start = 0;
    while (start == v && start < n) {
    start = start + 1;
  }
    int reach = dfs_skip(graph, visited, v, start);
    if (reach < n - 1) {
    result = [...result, v];
    print(v);
  }
    v = v + 1;
  }
  return result;
}

void _main() {
  List<List<int>> graph = [[1, 2], [0, 2], [0, 1, 3, 5], [2, 4], [3], [2, 6, 8], [5, 7], [6, 8], [5, 7]];
  articulation_points(graph);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
