// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class Neighbor {
  int node;
  int cost;
  Neighbor({required this.node, required this.cost});
}

class EdgePair {
  int u;
  int v;
  EdgePair({required this.u, required this.v});
}

List<EdgePair> prims_algorithm(Map<int, List<Neighbor>> adjacency) {
  Map<int, bool> visited = <int, bool>{};
  visited[0] = true;
  List<EdgePair> mst = <EdgePair>[];
  int count = 1;
  int total = 0;
  for (int k in adjacency.keys) {
    total = total + 1;
  }
  while (count < total) {
    int best_u = 0;
    int best_v = 0;
    int best_cost = 2147483647;
    for (int u_str in adjacency.keys) {
    int u = (u_str).toInt();
    if ((visited[u] ?? false)) {
    for (Neighbor n in (adjacency[u]!)) {
    if (!(visited[n.node] ?? false) && n.cost < best_cost) {
    best_cost = n.cost;
    best_u = u;
    best_v = n.node;
  }
  };
  }
  }
    visited[best_v] = true;
    mst = [...mst, EdgePair(u: best_u, v: best_v)];
    count = count + 1;
  }
  return mst;
}

bool test_prim_successful_result() {
  List<List<int>> edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]];
  Map<int, List<Neighbor>> adjacency = <int, List<Neighbor>>{};
  for (List<int> e in edges) {
    int u = e[0];
    int v = e[1];
    int w = e[2];
    if (!adjacency.containsKey(u)) {
    adjacency[u] = List<Neighbor>.from([]);
  }
    if (!adjacency.containsKey(v)) {
    adjacency[v] = List<Neighbor>.from([]);
  }
    adjacency[u] = [...(adjacency[u]!), Neighbor(node: v, cost: w)];
    adjacency[v] = [...(adjacency[v]!), Neighbor(node: u, cost: w)];
  }
  List<EdgePair> result = prims_algorithm(adjacency);
  Map<String, bool> seen = <String, bool>{};
  for (EdgePair e in result) {
    String key1 = _str(e.u) + "," + _str(e.v);
    String key2 = _str(e.v) + "," + _str(e.u);
    seen[key1] = true;
    seen[key2] = true;
  }
  List<List<int>> expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]];
  for (List<int> ans in expected) {
    String key = _str(ans[0]) + "," + _str(ans[1]);
    if (!(seen[key] ?? false)) {
    return false;
  }
  }
  return true;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(test_prim_successful_result());
  print((true ? 1 : 0));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
