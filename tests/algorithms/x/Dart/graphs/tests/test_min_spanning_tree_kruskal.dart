// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<List<int>> sort_edges(List<List<int>> edges) {
  List<List<int>> es = edges;
  int i = 0;
  while (i < es.length) {
    int j = 0;
    while (j < es.length - i - 1) {
    if (es[j][2] > es[j + 1][2]) {
    List<int> tmp = es[j];
    while (es.length <= j) { es.add(<int>[]); } es[j] = es[j + 1];
    while (es.length <= j + 1) { es.add(<int>[]); } es[j + 1] = tmp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return es;
}

int find(List<int> parent, int x) {
  int r = x;
  while (parent[r] != r) {
    r = parent[r];
  }
  return r;
}

List<List<int>> kruskal(int n, List<List<int>> edges) {
  List<int> parent = <int>[];
  int i = 0;
  while (i < n) {
    parent = [...parent, i];
    i = i + 1;
  }
  List<List<int>> sorted = sort_edges(edges);
  List<List<int>> mst = <List<int>>[];
  int e = 0;
  while (e < sorted.length) {
    if (mst.length == n - 1) {
    break;
  }
    List<int> edge = sorted[e];
    e = e + 1;
    int u = edge[0];
    int v = edge[1];
    int w = edge[2];
    int ru = find(parent, u);
    int rv = find(parent, v);
    if (ru != rv) {
    while (parent.length <= ru) { parent.add(0); } parent[ru] = rv;
    mst = ([...mst, [u, v, w]] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
  }
  return mst;
}

bool edges_equal(List<List<int>> a, List<List<int>> b) {
  if (a.length != b.length) {
    return false;
  }
  int i = 0;
  while (i < a.length) {
    List<int> e1 = a[i];
    List<int> e2 = b[i];
    if (e1[0] != e2[0] || e1[1] != e2[1] || e1[2] != e2[2]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

void _main() {
  int num_nodes = 9;
  List<List<int>> edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]];
  List<List<int>> expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]];
  List<List<int>> result = kruskal(num_nodes, edges);
  List<List<int>> sorted_result = sort_edges(result);
  List<List<int>> sorted_expected = sort_edges(expected);
  print((sorted_result).toString());
  if (edges_equal(sorted_expected, sorted_result)) {
    print((true ? 1 : 0));
  } else {
    print((false ? 1 : 0));
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
