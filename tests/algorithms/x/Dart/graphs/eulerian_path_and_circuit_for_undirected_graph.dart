// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class CheckResult {
  int status;
  int odd_node;
  CheckResult({required this.status, required this.odd_node});
}

List<List<bool>> make_matrix(int n) {
  List<List<bool>> matrix = <List<bool>>[];
  int i = 0;
  while (i <= n) {
    List<bool> row = <bool>[];
    int j = 0;
    while (j <= n) {
    row = [...row, false];
    j = j + 1;
  }
    matrix = ([...matrix, row] as List<dynamic>).map((e) => (List<bool>.from(e) as List<bool>)).toList();
    i = i + 1;
  }
  return matrix;
}

List<int> dfs(int u, Map<int, List<int>> graph, List<List<bool>> visited_edge, List<int> path) {
  path = [...path, u];
  if (graph.containsKey(u)) {
    List<int> neighbors = graph[u]!;
    int i = 0;
    while (i < neighbors.length) {
    int v = neighbors[i];
    if (visited_edge[u][v] == false) {
    while (visited_edge[u]!.length <= v) { visited_edge[u]!.add(false); } visited_edge[u]![v] = true;
    while (visited_edge[v]!.length <= u) { visited_edge[v]!.add(false); } visited_edge[v]![u] = true;
    path = dfs(v, graph, visited_edge, path);
  }
    i = i + 1;
  };
  }
  return path;
}

CheckResult check_circuit_or_path(Map<int, List<int>> graph, int max_node) {
  int odd_degree_nodes = 0;
  int odd_node = -1;
  int i = 0;
  while (i < max_node) {
    if (graph.containsKey(i)) {
    if ((graph[i]!).length % 2 == 1) {
    odd_degree_nodes = odd_degree_nodes + 1;
    odd_node = i;
  };
  }
    i = i + 1;
  }
  if (odd_degree_nodes == 0) {
    return CheckResult(status: 1, odd_node: odd_node);
  }
  if (odd_degree_nodes == 2) {
    return CheckResult(status: 2, odd_node: odd_node);
  }
  return CheckResult(status: 3, odd_node: odd_node);
}

void check_euler(Map<int, List<int>> graph, int max_node) {
  List<List<bool>> visited_edge = make_matrix(max_node);
  CheckResult res = check_circuit_or_path(graph, max_node);
  if (res.status == 3) {
    print("graph is not Eulerian");
    print("no path");
    return;
  }
  int start_node = 1;
  if (res.status == 2) {
    start_node = res.odd_node;
    print("graph has a Euler path");
  }
  if (res.status == 1) {
    print("graph has a Euler cycle");
  }
  List<int> path = dfs(start_node, graph, visited_edge, <int>[]);
  print(_str(path));
}

Map<int, List<int>> g1 = {1: [2, 3, 4], 2: [1, 3], 3: [1, 2], 4: [1, 5], 5: [4]};
Map<int, List<int>> g2 = {1: [2, 3, 4, 5], 2: [1, 3], 3: [1, 2], 4: [1, 5], 5: [1, 4]};
Map<int, List<int>> g3 = {1: [2, 3, 4], 2: [1, 3, 4], 3: [1, 2], 4: [1, 2, 5], 5: [4]};
Map<int, List<int>> g4 = {1: [2, 3], 2: [1, 3], 3: [1, 2]};
Map<int, List<int>> g5 = {1: [], 2: []};
int max_node = 10;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  check_euler(g1, max_node);
  check_euler(g2, max_node);
  check_euler(g3, max_node);
  check_euler(g4, max_node);
  check_euler(g5, max_node);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
