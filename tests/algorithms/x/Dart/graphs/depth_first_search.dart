// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool contains(List<String> lst, String v) {
  int i = 0;
  while (i < lst.length) {
    if (lst[i] == v) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> depth_first_search(Map<String, List<String>> graph, String start) {
  List<String> explored = <String>[];
  List<String> stack = <String>[];
  stack = [...stack, start];
  explored = [...explored, start];
  while (stack.length > 0) {
    int idx = stack.length - 1;
    String v = stack[idx];
    stack = List<String>.from(stack.sublist(0, idx));
    List<String> neighbors = graph[v]!;
    int i = neighbors.length - 1;
    while (i >= 0) {
    String adj = neighbors[i];
    if (!explored.contains(adj)) {
    explored = [...explored, adj];
    stack = [...stack, adj];
  }
    i = i - 1;
  }
  }
  return explored;
}

Map<String, List<String>> G = {"A": ["B", "C", "D"], "B": ["A", "D", "E"], "C": ["A", "F"], "D": ["B", "D"], "E": ["B", "F"], "F": ["C", "E", "G"], "G": ["F"]};
List<String> result = depth_first_search(G, "A");
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + result.join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
