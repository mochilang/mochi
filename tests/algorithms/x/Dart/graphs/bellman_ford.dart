// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Edge {
  int src;
  int dst;
  int weight;
  Edge({required this.src, required this.dst, required this.weight});
}

double INF = 1000000000.0;
String list_to_string(List<double> arr) {
  String s = "[";
  int i = 0;
  while (i < arr.length) {
    s = s + (arr[i]).toString();
    if (i < arr.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  return s + "]";
}

bool check_negative_cycle(List<Edge> graph, List<double> distance, int edge_count) {
  int j = 0;
  while (j < edge_count) {
    Edge e = graph[j];
    int u = e.src;
    int v = e.dst;
    double w = e.weight as double;
    if (distance[u] < INF && distance[u] + w < distance[v]) {
    return true;
  }
    j = j + 1;
  }
  return false;
}

List<double> bellman_ford(List<Edge> graph, int vertex_count, int edge_count, int src) {
  List<double> distance = <double>[];
  int i = 0;
  while (i < vertex_count) {
    distance = [...distance, INF];
    i = i + 1;
  }
  while (distance.length <= src) { distance.add(0); } distance[src] = 0.0;
  int k = 0;
  while (k < vertex_count - 1) {
    int j = 0;
    while (j < edge_count) {
    Edge e = graph[j];
    int u = e.src;
    int v = e.dst;
    double w = e.weight as double;
    if (distance[u] < INF && distance[u] + w < distance[v]) {
    while (distance.length <= v) { distance.add(0); } distance[v] = distance[u] + w;
  }
    j = j + 1;
  }
    k = k + 1;
  }
  if (check_negative_cycle(graph, distance, edge_count)) {
    throw Exception("Negative cycle found");
  }
  return distance;
}

List<Edge> edges = [Edge(src: 2, dst: 1, weight: -10), Edge(src: 3, dst: 2, weight: 3), Edge(src: 0, dst: 3, weight: 5), Edge(src: 0, dst: 1, weight: 4)];
List<double> distances = bellman_ford(edges, 4, edges.length, 0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(list_to_string(distances));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
