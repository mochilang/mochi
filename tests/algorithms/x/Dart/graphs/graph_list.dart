// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class GraphAdjacencyList {
  Map<String, List<String>> adj_list;
  bool directed;
  GraphAdjacencyList({required this.adj_list, required this.directed});
}

GraphAdjacencyList make_graph(bool directed) {
  Map<String, List<String>> m = <String, List<String>>{};
  return GraphAdjacencyList(adj_list: m, directed: directed);
}

bool contains_vertex(Map<String, List<String>> m, String v) {
  return m.containsKey(v);
}

GraphAdjacencyList add_edge(GraphAdjacencyList g, String s, String d) {
  Map<String, List<String>> adj = g.adj_list;
  if (!g.directed) {
    if (contains_vertex(adj, s) && contains_vertex(adj, d)) {
    adj[s] = List<String>.from([...(adj[s] ?? null), d]);
    adj[d] = List<String>.from([...(adj[d] ?? null), s]);
  } else {
    if (contains_vertex(adj, s)) {
    adj[s] = List<String>.from([...(adj[s] ?? null), d]);
    adj[d] = [s];
  } else {
    if (contains_vertex(adj, d)) {
    adj[d] = List<String>.from([...(adj[d] ?? null), s]);
    adj[s] = [d];
  } else {
    adj[s] = [d];
    adj[d] = [s];
  };
  };
  };
  } else {
    if (contains_vertex(adj, s) && contains_vertex(adj, d)) {
    adj[s] = List<String>.from([...(adj[s] ?? null), d]);
  } else {
    if (contains_vertex(adj, s)) {
    adj[s] = List<String>.from([...(adj[s] ?? null), d]);
    adj[d] = List<String>.from([]);
  } else {
    if (contains_vertex(adj, d)) {
    adj[s] = [d];
  } else {
    adj[s] = [d];
    adj[d] = List<String>.from([]);
  };
  };
  };
  }
  g.adj_list = adj;
  return g;
}

String graph_to_string(GraphAdjacencyList g) {
  return (g.adj_list).toString();
}

GraphAdjacencyList d_graph = make_graph(true);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  d_graph = add_edge(d_graph, (0).toString(), (1).toString());
  print(graph_to_string(d_graph));
  d_graph = add_edge(d_graph, (1).toString(), (2).toString());
  d_graph = add_edge(d_graph, (1).toString(), (4).toString());
  d_graph = add_edge(d_graph, (1).toString(), (5).toString());
  print(graph_to_string(d_graph));
  d_graph = add_edge(d_graph, (2).toString(), (0).toString());
  d_graph = add_edge(d_graph, (2).toString(), (6).toString());
  d_graph = add_edge(d_graph, (2).toString(), (7).toString());
  print(graph_to_string(d_graph));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
