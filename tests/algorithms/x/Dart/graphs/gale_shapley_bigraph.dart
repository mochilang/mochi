// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int index_of(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<int> remove_item(List<int> xs, int x) {
  List<int> res = <int>[];
  bool removed = false;
  int i = 0;
  while (i < xs.length) {
    if (!removed && xs[i] == x) {
    removed = true;
  } else {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<int> stable_matching(List<List<int>> donor_pref, List<List<int>> recipient_pref) {
  if (donor_pref.length != recipient_pref.length) {
    _error("unequal groups");
  }
  int n = donor_pref.length;
  List<int> unmatched = <int>[];
  int i = 0;
  while (i < n) {
    unmatched = [...unmatched, i];
    i = i + 1;
  }
  List<int> donor_record = <int>[];
  i = 0;
  while (i < n) {
    donor_record = [...donor_record, -1];
    i = i + 1;
  }
  List<int> rec_record = <int>[];
  i = 0;
  while (i < n) {
    rec_record = [...rec_record, -1];
    i = i + 1;
  }
  List<int> num_donations = <int>[];
  i = 0;
  while (i < n) {
    num_donations = [...num_donations, 0];
    i = i + 1;
  }
  while (unmatched.length > 0) {
    int donor = unmatched[0];
    List<int> donor_preference = donor_pref[donor];
    int recipient = donor_preference[num_donations[donor]];
    while (num_donations.length <= donor) { num_donations.add(0); } num_donations[donor] = num_donations[donor] + 1;
    List<int> rec_preference = recipient_pref[recipient];
    int prev_donor = rec_record[recipient];
    if (prev_donor != 0 - 1) {
    int prev_index = index_of(rec_preference, prev_donor);
    int new_index = index_of(rec_preference, donor);
    if (prev_index > new_index) {
    while (rec_record.length <= recipient) { rec_record.add(0); } rec_record[recipient] = donor;
    while (donor_record.length <= donor) { donor_record.add(0); } donor_record[donor] = recipient;
    unmatched = [...unmatched, prev_donor];
    unmatched = remove_item(unmatched, donor);
  };
  } else {
    while (rec_record.length <= recipient) { rec_record.add(0); } rec_record[recipient] = donor;
    while (donor_record.length <= donor) { donor_record.add(0); } donor_record[donor] = recipient;
    unmatched = remove_item(unmatched, donor);
  }
  }
  return donor_record;
}

List<List<int>> donor_pref = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]];
List<List<int>> recipient_pref = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(stable_matching(donor_pref, recipient_pref)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
