// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class DfsResult {
  int id;
  List<List<int>> bridges;
  DfsResult({required this.id, required this.bridges});
}

DfsResult dfs(Map<int, List<int>> graph, int at, int parent, List<bool> visited, List<int> ids, List<int> low, int id, List<List<int>> bridges) {
  while (visited.length <= at) { visited.add(false); } visited[at] = true;
  while (ids.length <= at) { ids.add(0); } ids[at] = id;
  while (low.length <= at) { low.add(0); } low[at] = id;
  int current_id = id + 1;
  List<List<int>> res_bridges = bridges;
  for (int to in (graph[at]!)) {
    if (to == parent) {
    continue;
  } else {
    if (!visited[to]) {
    DfsResult result = dfs(graph, to, at, visited, ids, low, current_id, res_bridges);
    current_id = result.id;
    res_bridges = result.bridges;
    if (low[at] > low[to]) {
    while (low.length <= at) { low.add(0); } low[at] = low[to];
  };
    if (ids[at] < low[to]) {
    List<int> edge = (at < to ? [at, to] : [to, at]);
    res_bridges = ([...res_bridges, edge] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  };
  } else {
    if (low[at] > ids[to]) {
    while (low.length <= at) { low.add(0); } low[at] = ids[to];
  };
  };
  }
  }
  return DfsResult(id: current_id, bridges: res_bridges);
}

List<List<int>> compute_bridges(Map<int, List<int>> graph) {
  int n = graph.length;
  List<bool> visited = <bool>[];
  List<int> ids = <int>[];
  List<int> low = <int>[];
  int i = 0;
  while (i < n) {
    visited = [...visited, false];
    ids = [...ids, 0];
    low = [...low, 0];
    i = i + 1;
  }
  List<List<int>> bridges = <List<int>>[];
  int id = 0;
  i = 0;
  while (i < n) {
    if (!visited[i]) {
    DfsResult result = dfs(graph, i, -1, visited, ids, low, id, bridges);
    id = result.id;
    bridges = result.bridges;
  }
    i = i + 1;
  }
  return bridges;
}

Map<int, List<int>> get_demo_graph(int index) {
  if (index == 0) {
    return {0: [1, 2], 1: [0, 2], 2: [0, 1, 3, 5], 3: [2, 4], 4: [3], 5: [2, 6, 8], 6: [5, 7], 7: [6, 8], 8: [5, 7]};
  }
  if (index == 1) {
    return {0: [6], 1: [9], 2: [4, 5], 3: [4], 4: [2, 3], 5: [2], 6: [0, 7], 7: [6], 8: [], 9: [1]};
  }
  if (index == 2) {
    return {0: [4], 1: [6], 2: [], 3: [5, 6, 7], 4: [0, 6], 5: [3, 8, 9], 6: [1, 3, 4, 7], 7: [3, 6, 8, 9], 8: [5, 7], 9: [5, 7]};
  }
  return {0: [1, 3], 1: [0, 2, 4], 2: [1, 3, 4], 3: [0, 2, 4], 4: [1, 2, 3]};
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("[" + compute_bridges(get_demo_graph(0)).join(', ') + "]");
  print("[" + compute_bridges(get_demo_graph(1)).join(', ') + "]");
  print("[" + compute_bridges(get_demo_graph(2)).join(', ') + "]");
  print("[" + compute_bridges(get_demo_graph(3)).join(', ') + "]");
  print("[" + compute_bridges({}).join(', ') + "]");
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
