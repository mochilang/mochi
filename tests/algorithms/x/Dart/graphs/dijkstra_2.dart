// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

double INF = 1000000000.0;
void print_dist(List<double> dist) {
  print("Vertex Distance");
  int i = 0;
  while (i < dist.length) {
    if (dist[i] >= INF) {
    print([i, "	INF"].join(" "));
  } else {
    print([i, "	", dist[i] as int].join(" "));
  }
    i = i + 1;
  }
}

int min_dist(List<double> mdist, List<bool> vset) {
  double min_val = INF;
  int min_ind = -1;
  int i = 0;
  while (i < mdist.length) {
    if (!vset[i] && mdist[i] < min_val) {
    min_val = mdist[i];
    min_ind = i;
  }
    i = i + 1;
  }
  return min_ind;
}

List<double> dijkstra(List<List<double>> graph, int src) {
  int v = graph.length;
  List<double> mdist = <double>[];
  List<bool> vset = <bool>[];
  int i = 0;
  while (i < v) {
    mdist = [...mdist, INF];
    vset = [...vset, false];
    i = i + 1;
  }
  while (mdist.length <= src) { mdist.add(0); } mdist[src] = 0.0;
  int count = 0;
  while (count < v - 1) {
    int u = min_dist(mdist, vset);
    while (vset.length <= u) { vset.add(false); } vset[u] = true;
    int i = 0;
    while (i < v) {
    double alt = mdist[u] + graph[u][i];
    if (!vset[i] && graph[u][i] < INF && alt < mdist[i]) {
    while (mdist.length <= i) { mdist.add(0); } mdist[i] = alt;
  }
    i = i + 1;
  }
    count = count + 1;
  }
  return mdist;
}

void _main() {
  List<List<double>> graph = [[0.0, 10.0, INF, INF, 5.0], [INF, 0.0, 1.0, INF, 2.0], [INF, INF, 0.0, 4.0, INF], [INF, INF, 6.0, 0.0, INF], [INF, 3.0, 9.0, 2.0, 0.0]];
  List<double> dist = dijkstra(graph, 0);
  print_dist(dist);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
