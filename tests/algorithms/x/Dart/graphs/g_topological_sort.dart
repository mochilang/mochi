// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

List<int> depth_first_search(int u, List<bool> visited, List<List<int>> graph, List<int> stack) {
  while (visited.length <= u) { visited.add(false); } visited[u] = true;
  int i = 0;
  while (i < graph[u].length) {
    int v = graph[u][i];
    if (!visited[v]) {
    stack = depth_first_search(v, visited, graph, stack);
  }
    i = i + 1;
  }
  stack = [...stack, u];
  return stack;
}

List<int> topological_sort(List<List<int>> graph) {
  List<bool> visited = <bool>[];
  int i = 0;
  while (i < graph.length) {
    visited = [...visited, false];
    i = i + 1;
  }
  List<int> stack = <int>[];
  i = 0;
  while (i < graph.length) {
    if (!visited[i]) {
    stack = depth_first_search(i, visited, graph, stack);
  }
    i = i + 1;
  }
  return stack;
}

void print_stack(List<int> stack, Map<int, String> clothes) {
  int order = 1;
  List<int> s = stack;
  while (s.length > 0) {
    int idx = s[s.length - 1];
    s = s.sublist(0, s.length - 1);
    print(_str(order) + " " + (clothes[idx] ?? ""));
    order = order + 1;
  }
}

String format_list(List<int> xs) {
  String res = "[";
  int i = 0;
  while (i < xs.length) {
    res = res + _str(xs[i]);
    if (i < xs.length - 1) {
    res = res + ", ";
  }
    i = i + 1;
  }
  res = res + "]";
  return res;
}

void _main() {
  Map<int, String> clothes = {0: "underwear", 1: "pants", 2: "belt", 3: "suit", 4: "shoe", 5: "socks", 6: "shirt", 7: "tie", 8: "watch"};
  List<List<int>> graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []];
  List<int> stack = topological_sort(graph);
  print(format_list(stack));
  print_stack(stack, clothes);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
