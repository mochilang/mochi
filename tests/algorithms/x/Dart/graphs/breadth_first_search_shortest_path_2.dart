// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

bool contains(List<String> xs, String x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

bool contains_key(Map<String, List<String>> m, String key) {
  for (String k in m.keys) {
    if (k == key) {
    return true;
  }
  }
  return false;
}

List<String> bfs_shortest_path(Map<String, List<String>> graph, String start, String goal) {
  List<String> explored = <String>[];
  List<List<String>> queue = [[start]];
  if (start == goal) {
    return [start];
  }
  while (queue.length > 0) {
    List<String> path = queue[0];
    queue = (queue.sublist(1, queue.length) as List<dynamic>).map((e) => (List<String>.from(e) as List<String>)).toList();
    String node = path[path.length - 1];
    if (!contains(explored, node)) {
    List<String> neighbours = graph[node]!;
    int i = 0;
    while (i < neighbours.length) {
    String neighbour = neighbours[i];
    List<String> new_path = path;
    new_path = [...new_path, neighbour];
    queue = ([...queue, new_path] as List<dynamic>).map((e) => (List<String>.from(e) as List<String>)).toList();
    if (neighbour == goal) {
    return new_path;
  }
    i = i + 1;
  };
    explored = [...explored, node];
  }
  }
  return List<String>.from([]);
}

int bfs_shortest_path_distance(Map<String, List<String>> graph, String start, String target) {
  if (contains_key(graph, start) == false || contains_key(graph, target) == false) {
    return -1;
  }
  if (start == target) {
    return 0;
  }
  List<String> queue = [start];
  List<String> visited = [start];
  Map<String, int> dist = <String, int>{};
  dist[start] = 0;
  dist[target] = -1;
  while (queue.length > 0) {
    String node = queue[0];
    queue = List<String>.from(queue.sublist(1, queue.length));
    if (node == target) {
    if ((dist[target] ?? 0) == -1 || (dist[node] ?? 0) < (dist[target] ?? 0)) {
    dist[target] = dist[node]!;
  };
  }
    List<String> adj = graph[node]!;
    int i = 0;
    while (i < adj.length) {
    String next = adj[i];
    if (!contains(visited, next)) {
    visited = [...visited, next];
    queue = [...queue, next];
    dist[next] = (dist[node] ?? 0) + 1;
  }
    i = i + 1;
  }
  }
  return (dist[target] ?? 0);
}

Map<String, List<String>> demo_graph = {"A": ["B", "C", "E"], "B": ["A", "D", "E"], "C": ["A", "F", "G"], "D": ["B"], "E": ["A", "B", "D"], "F": ["C"], "G": ["C"]};
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
