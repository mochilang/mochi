// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Edge {
  String to;
  int cost;
  Edge({required this.to, required this.cost});
}

class QItem {
  String node;
  int cost;
  QItem({required this.node, required this.cost});
}

class PassResult {
  List<QItem> queue;
  int dist;
  PassResult({required this.queue, required this.dist});
}

int get_min_index(List<QItem> q) {
  int idx = 0;
  int i = 1;
  while (i < q.length) {
    if (q[i].cost < q[idx].cost) {
    idx = i;
  }
    i = i + 1;
  }
  return idx;
}

List<QItem> remove_at(List<QItem> q, int idx) {
  List<QItem> res = <QItem>[];
  int i = 0;
  while (i < q.length) {
    if (i != idx) {
    res = [...res, q[i]];
  }
    i = i + 1;
  }
  return res;
}

PassResult pass_and_relaxation(Map<String, List<Edge>> graph, String v, Map<String, bool> visited_forward, Map<String, bool> visited_backward, Map<String, int> cst_fwd, Map<String, int> cst_bwd, List<QItem> queue, Map<String, String> parent, int shortest_distance) {
  List<QItem> q = queue;
  int sd = shortest_distance;
  for (var e in graph[v]) {
    dynamic nxt = e.to;
    dynamic d = e.cost;
    if (visited_forward.containsKey(nxt)) {
    continue;
  }
    dynamic old_cost = (cst_fwd.containsKey(nxt) ? cst_fwd[nxt] : 2147483647);
    num new_cost = cst_fwd[v]! + d;
    if (new_cost.compareTo(old_cost) < 0) {
    q = [...q, QItem(node: nxt, cost: new_cost)];
    cst_fwd[nxt] = (new_cost).toInt();
    parent[nxt] = v;
  }
    if (visited_backward.containsKey(nxt)) {
    double alt = cst_fwd[v]! + d + cst_bwd[nxt]!;
    if (alt < sd) {
    sd = alt;
  };
  }
  }
  return PassResult(queue: q, dist: sd);
}

int bidirectional_dij(String source, String destination, Map<String, List<Edge>> graph_forward, Map<String, List<Edge>> graph_backward) {
  int shortest_path_distance = -1;
  Map<String, bool> visited_forward = <String, bool>{};
  Map<String, bool> visited_backward = <String, bool>{};
  Map<String, int> cst_fwd = <String, int>{};
  cst_fwd[source] = 0;
  Map<String, int> cst_bwd = <String, int>{};
  cst_bwd[destination] = 0;
  Map<String, String> parent_forward = <String, String>{};
  parent_forward[source] = "";
  Map<String, String> parent_backward = <String, String>{};
  parent_backward[destination] = "";
  List<QItem> queue_forward = <QItem>[];
  queue_forward = [...queue_forward, QItem(node: source, cost: 0)];
  List<QItem> queue_backward = <QItem>[];
  queue_backward = [...queue_backward, QItem(node: destination, cost: 0)];
  int shortest_distance = 2147483647;
  if (source == destination) {
    return 0;
  }
  while (queue_forward.length > 0 && queue_backward.length > 0) {
    int idx_f = get_min_index(queue_forward);
    QItem item_f = queue_forward[idx_f];
    queue_forward = remove_at(queue_forward, idx_f);
    String v_fwd = item_f.node;
    visited_forward[v_fwd] = true;
    int idx_b = get_min_index(queue_backward);
    QItem item_b = queue_backward[idx_b];
    queue_backward = remove_at(queue_backward, idx_b);
    String v_bwd = item_b.node;
    visited_backward[v_bwd] = true;
    PassResult res_f = pass_and_relaxation(graph_forward, v_fwd, visited_forward, visited_backward, cst_fwd, cst_bwd, queue_forward, parent_forward, shortest_distance);
    queue_forward = res_f.queue;
    shortest_distance = res_f.dist;
    PassResult res_b = pass_and_relaxation(graph_backward, v_bwd, visited_backward, visited_forward, cst_bwd, cst_fwd, queue_backward, parent_backward, shortest_distance);
    queue_backward = res_b.queue;
    shortest_distance = res_b.dist;
    if (cst_fwd[v_fwd]! + cst_bwd[v_bwd]! >= shortest_distance) {
    break;
  }
  }
  if (shortest_distance != 2147483647) {
    shortest_path_distance = shortest_distance;
  }
  return shortest_path_distance;
}

Map<String, List<Edge>> graph_fwd = {"B": [Edge(to: "C", cost: 1)], "C": [Edge(to: "D", cost: 1)], "D": [Edge(to: "F", cost: 1)], "E": [Edge(to: "B", cost: 1), Edge(to: "G", cost: 2)], "F": [], "G": [Edge(to: "F", cost: 1)]};
Map<String, List<Edge>> graph_bwd = {"B": [Edge(to: "E", cost: 1)], "C": [Edge(to: "B", cost: 1)], "D": [Edge(to: "C", cost: 1)], "F": [Edge(to: "D", cost: 1), Edge(to: "G", cost: 1)], "E": [], "G": [Edge(to: "E", cost: 2)]};
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((bidirectional_dij("E", "F", graph_fwd, graph_bwd)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
