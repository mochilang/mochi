// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class Edge {
  int node;
  int weight;
  Edge({required this.node, required this.weight});
}

List<int> make_int_list(int n, int value) {
  List<int> lst = <int>[];
  int i = 0;
  while (i < n) {
    lst = [...lst, value];
    i = i + 1;
  }
  return lst;
}

List<bool> make_bool_list(int n) {
  List<bool> lst = <bool>[];
  int i = 0;
  while (i < n) {
    lst = [...lst, false];
    i = i + 1;
  }
  return lst;
}

List<int> dijkstra(List<List<Edge>> graph, int src) {
  int n = graph.length;
  List<int> dist = make_int_list(n, 1000000000);
  List<bool> visited = make_bool_list(n);
  while (dist.length <= src) { dist.add(0); } dist[src] = 0;
  int count = 0;
  while (count < n) {
    int u = -1;
    int min_dist = 1000000000;
    int i = 0;
    while (i < n) {
    if (!visited[i] && dist[i] < min_dist) {
    min_dist = dist[i];
    u = i;
  }
    i = i + 1;
  }
    if (u < 0) {
    break;
  }
    while (visited.length <= u) { visited.add(false); } visited[u] = true;
    int j = 0;
    while (j < graph[u].length) {
    Edge e = graph[u][j];
    int v = e.node;
    int w = e.weight;
    if (!visited[v]) {
    int new_dist = dist[u] + w;
    if (new_dist < dist[v]) {
    while (dist.length <= v) { dist.add(0); } dist[v] = new_dist;
  };
  }
    j = j + 1;
  }
    count = count + 1;
  }
  return dist;
}

List<List<Edge>> graph = [[Edge(node: 1, weight: 10), Edge(node: 3, weight: 5)], [Edge(node: 2, weight: 1), Edge(node: 3, weight: 2)], [Edge(node: 4, weight: 4)], [Edge(node: 1, weight: 3), Edge(node: 2, weight: 9), Edge(node: 4, weight: 2)], [Edge(node: 0, weight: 7), Edge(node: 2, weight: 6)]];
List<int> dist = dijkstra(graph, 0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(dist[0]));
  print(_str(dist[1]));
  print(_str(dist[2]));
  print(_str(dist[3]));
  print(_str(dist[4]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
