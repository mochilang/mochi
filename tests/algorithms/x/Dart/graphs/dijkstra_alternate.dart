// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int minimum_distance(List<int> distances, List<bool> visited) {
  int minimum = 10000000;
  int min_index = 0;
  int vertex = 0;
  while (vertex < distances.length) {
    if (distances[vertex] < minimum && visited[vertex] == false) {
    minimum = distances[vertex];
    min_index = vertex;
  }
    vertex = vertex + 1;
  }
  return min_index;
}

List<int> dijkstra(List<List<int>> graph, int source) {
  int vertices = graph.length;
  List<int> distances = <int>[];
  int i = 0;
  while (i < vertices) {
    distances = [...distances, 10000000];
    i = i + 1;
  }
  while (distances.length <= source) { distances.add(0); } distances[source] = 0;
  List<bool> visited = <bool>[];
  i = 0;
  while (i < vertices) {
    visited = [...visited, false];
    i = i + 1;
  }
  int count = 0;
  while (count < vertices) {
    int u = minimum_distance(distances, visited);
    while (visited.length <= u) { visited.add(false); } visited[u] = true;
    int v = 0;
    while (v < vertices) {
    if (graph[u][v] > 0 && visited[v] == false && distances[v] > distances[u] + graph[u][v]) {
    while (distances.length <= v) { distances.add(0); } distances[v] = distances[u] + graph[u][v];
  }
    v = v + 1;
  }
    count = count + 1;
  }
  return distances;
}

void print_solution(List<int> distances) {
  print("Vertex 	 Distance from Source");
  int v = 0;
  while (v < distances.length) {
    print((v).toString() + "		" + (distances[v]).toString());
    v = v + 1;
  }
}

List<List<int>> graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]];
List<int> distances = dijkstra(graph, 0);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_solution(distances);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
