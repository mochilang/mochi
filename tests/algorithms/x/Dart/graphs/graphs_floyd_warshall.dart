// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

double INF = 1000000000.0;
List<List<double>> floyd_warshall(List<List<double>> graph) {
  int v = graph.length;
  List<List<double>> dist = <List<double>>[];
  int i = 0;
  while (i < v) {
    List<double> row = <double>[];
    int j = 0;
    while (j < v) {
    row = [...row, graph[i][j]];
    j = j + 1;
  }
    dist = ([...dist, row] as List<dynamic>).map((e) => (List<double>.from(e) as List<double>)).toList();
    i = i + 1;
  }
  int k = 0;
  while (k < v) {
    int i = 0;
    while (i < v) {
    int j = 0;
    while (j < v) {
    if (dist[i][k] < INF && dist[k][j] < INF && dist[i][k] + dist[k][j] < dist[i][j]) {
    while (dist[i]!.length <= j) { dist[i]!.add(0); } dist[i]![j] = dist[i][k] + dist[k][j];
  }
    j = j + 1;
  }
    i = i + 1;
  }
    k = k + 1;
  }
  return dist;
}

dynamic print_dist(List<List<double>> dist) {
  print("\nThe shortest path matrix using Floyd Warshall algorithm\n");
  int i = 0;
  while (i < dist.length) {
    int j = 0;
    String line = "";
    while (j < dist[i].length) {
    if (dist[i][j] >= INF / 2.0) {
    line = line + "INF	";
  } else {
    line = line + _str((dist[i][j]).toInt()) + "	";
  }
    j = j + 1;
  }
    print(line);
    i = i + 1;
  }
}

List<List<double>> graph = [[0.0, 5.0, INF, 10.0], [INF, 0.0, 3.0, INF], [INF, INF, 0.0, 1.0], [INF, INF, INF, 0.0]];
List<List<double>> result = floyd_warshall(graph);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_dist(result);
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
