// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

List<int>? topological_sort(Map<int, List<int>> graph) {
  List<int> indegree = <int>[];
  int i = 0;
  while (i < graph.length) {
    indegree = [...indegree, 0];
    i = i + 1;
  }
  for (dynamic edges in graph.values.toList()) {
    int j = 0;
    while (j < edges.length) {
    dynamic v = edges[j];
    while (indegree.length <= v) { indegree.add(0); } indegree[v] = indegree[v] + 1;
    j = j + 1;
  }
  }
  List<int> queue = <int>[];
  i = 0;
  while (i < indegree.length) {
    if (indegree[i] == 0) {
    queue = [...queue, i];
  }
    i = i + 1;
  }
  List<int> order = <int>[];
  int head = 0;
  int processed = 0;
  while (head < queue.length) {
    int v = queue[head];
    head = head + 1;
    processed = processed + 1;
    order = [...order, v];
    List<int> neighbors = graph[v]!;
    int k = 0;
    while (k < neighbors.length) {
    int nb = neighbors[k];
    while (indegree.length <= nb) { indegree.add(0); } indegree[nb] = indegree[nb] - 1;
    if (indegree[nb] == 0) {
    queue = [...queue, nb];
  }
    k = k + 1;
  }
  }
  if (processed != graph.length) {
    return List<int>?>.from(null);
  }
  return List<int>?>.from(order);
}

void _main() {
  Map<int, List<int>> graph = {0: [1, 2], 1: [3], 2: [3], 3: [4, 5], 4: [], 5: []};
  print("[" + topological_sort(graph).join(', ') + "]");
  Map<int, List<int>> cyclic = {0: [1], 1: [2], 2: [0]};
  print("[" + topological_sort(cyclic).join(', ') + "]");
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
