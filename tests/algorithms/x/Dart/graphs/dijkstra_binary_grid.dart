// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Point {
  int x;
  int y;
  Point({required this.x, required this.y});
}

class Result {
  double distance;
  List<Point> path;
  Result({required this.distance, required this.path});
}

String key(Point p) {
  return (p.x).toString() + "," + (p.y).toString();
}

String path_to_string(List<Point> path) {
  String s = "[";
  int i = 0;
  while (i < path.length) {
    Point pt = path[i];
    s = s + "(" + (pt.x).toString() + ", " + (pt.y).toString() + ")";
    if (i < path.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

Result dijkstra(List<List<int>> grid, Point source, Point destination, bool allow_diagonal) {
  int rows = grid.length;
  int cols = grid[0].length;
  List<int> dx = [-1, 1, 0, 0];
  List<int> dy = [0, 0, -1, 1];
  if (allow_diagonal) {
    dx = ([...dx, ...[-1, -1, 1, 1]] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    dy = ([...dy, ...[-1, 1, -1, 1]] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  double INF = 1000000000000.0;
  List<Point> queue = [source];
  int front = 0;
  Map<String, double> dist_map = {key(source): 0.0};
  Map<String, Point> prev = <String, Point>{};
  while (front < queue.length) {
    Point current = queue[front];
    front = front + 1;
    String cur_key = key(current);
    if (current.x == destination.x && current.y == destination.y) {
    break;
  }
    int i = 0;
    while (i < dx.length) {
    int nx = current.x + dx[i];
    int ny = current.y + dy[i];
    if (nx >= 0 && nx < rows && ny >= 0 && ny < cols) {
    if (grid[nx][ny] == 1) {
    String n_key = (nx).toString() + "," + (ny).toString();
    if (!dist_map.containsKey(n_key)) {
    dist_map[n_key] = dist_map[cur_key]! + 1.0;
    prev[n_key] = current;
    queue = [...queue, Point(x: nx, y: ny)];
  };
  };
  }
    i = i + 1;
  }
  }
  String dest_key = key(destination);
  if (dist_map.containsKey(dest_key)) {
    List<Point> path_rev = [destination];
    String step_key = dest_key;
    Point step_pt = destination;
    while (step_key != key(source)) {
    step_pt = prev[step_key]!;
    step_key = key(step_pt);
    path_rev = [...path_rev, step_pt];
  };
    List<Point> path = <Point>[];
    int k = path_rev.length - 1;
    while (k >= 0) {
    path = [...path, path_rev[k]];
    k = k - 1;
  };
    return Result(distance: dist_map[dest_key], path: path);
  }
  return Result(distance: INF, path: []);
}

void print_result(Result res) {
  print((res.distance).toString() + ", " + path_to_string(res.path));
}

List<List<int>> grid1 = [[1, 1, 1], [0, 1, 0], [0, 1, 1]];
List<List<int>> grid2 = [[1, 1, 1], [0, 0, 1], [0, 1, 1]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print_result(dijkstra(grid1, Point(x: 0, y: 0), Point(x: 2, y: 2), false));
  print_result(dijkstra(grid1, Point(x: 0, y: 0), Point(x: 2, y: 2), true));
  print_result(dijkstra(grid2, Point(x: 0, y: 0), Point(x: 2, y: 2), false));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
