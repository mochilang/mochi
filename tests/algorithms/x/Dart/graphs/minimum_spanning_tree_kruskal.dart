// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

List<List<int>> sort_edges(List<List<int>> edges) {
  List<List<int>> es = edges;
  int i = 0;
  while (i < es.length) {
    int j = 0;
    while (j < es.length - i - 1) {
    if (es[j][2] > es[j + 1][2]) {
    List<int> temp = es[j];
    while (es.length <= j) { es.add(<int>[]); } es[j] = es[j + 1];
    while (es.length <= j + 1) { es.add(<int>[]); } es[j + 1] = temp;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return es;
}

int find_parent(List<int> parent, int i) {
  if (parent[i] != i) {
    while (parent.length <= i) { parent.add(0); } parent[i] = find_parent(parent, parent[i]);
  }
  return parent[i];
}

List<List<int>> kruskal(int num_nodes, List<List<int>> edges) {
  List<List<int>> es = sort_edges(edges);
  List<int> parent = <int>[];
  int i = 0;
  while (i < num_nodes) {
    parent = [...parent, i];
    i = i + 1;
  }
  List<List<int>> mst = <List<int>>[];
  int idx = 0;
  while (idx < es.length) {
    List<int> e = es[idx];
    int pa = find_parent(parent, e[0]);
    int pb = find_parent(parent, e[1]);
    if (pa != pb) {
    mst = ([...mst, e] as List<dynamic>).map((e) => (e as List<int>)).toList();
    while (parent.length <= pa) { parent.add(0); } parent[pa] = pb;
  }
    idx = idx + 1;
  }
  return mst;
}

String edges_to_string(List<List<int>> es) {
  String s = "[";
  int i = 0;
  while (i < es.length) {
    List<int> e = es[i];
    s = s + "(" + _str(e[0]) + ", " + _str(e[1]) + ", " + _str(e[2]) + ")";
    if (i < es.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<List<int>> edges1 = [[0, 1, 3], [1, 2, 5], [2, 3, 1]];
List<List<int>> edges2 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2]];
List<List<int>> edges3 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2], [2, 1, 1]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(edges_to_string(kruskal(4, edges1)));
  print(edges_to_string(kruskal(4, edges2)));
  print(edges_to_string(kruskal(4, edges3)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
