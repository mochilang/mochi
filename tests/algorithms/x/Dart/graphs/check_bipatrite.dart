// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_bipartite_bfs(Map<int, List<int>> graph) {
  Map<int, int> visited = <int, int>{};
  for (int node in graph.keys) {
    if (!visited.containsKey(node)) {
    List<int> queue = <int>[];
    queue = [...queue, node];
    visited[node] = 0;
    while (queue.length > 0) {
    int curr = queue[0];
    queue = queue.sublist(1, queue.length);
    for (var neighbor in graph[curr]) {
    if (!visited.containsKey(neighbor)) {
    visited[(neighbor).toInt()] = (1 - visited[curr]!).toInt();
    queue = [...queue, neighbor];
  } else {
    if (visited[(neighbor).toInt()]! == visited[curr]!) {
    return false;
  };
  }
  }
  };
  }
  }
  return true;
}

Map<int, List<int>> graph = {0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2]};
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((is_bipartite_bfs(graph)).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
