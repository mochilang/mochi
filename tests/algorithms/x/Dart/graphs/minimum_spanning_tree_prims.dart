// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class Edge {
  int to;
  int weight;
  Edge({required this.to, required this.weight});
}

class Pair {
  int u;
  int v;
  Pair({required this.u, required this.v});
}

int INF = 1000000000;
String pairs_to_string(List<Pair> edges) {
  String s = "[";
  int i = 0;
  while (i < edges.length) {
    Pair e = edges[i];
    s = s + "(" + _str(e.u) + ", " + _str(e.v) + ")";
    if (i < edges.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  return s + "]";
}

List<Pair> prim_mst(List<List<Edge>> graph) {
  int n = graph.length;
  List<bool> visited = <bool>[];
  List<int> dist = <int>[];
  List<int> parent = <int>[];
  int i = 0;
  while (i < n) {
    visited = [...visited, false];
    dist = [...dist, INF];
    parent = [...parent, -1];
    i = i + 1;
  }
  while (dist.length <= 0) { dist.add(0); } dist[0] = 0;
  List<Pair> result = <Pair>[];
  int count = 0;
  while (count < n) {
    int min_val = INF;
    int u = 0;
    int v = 0;
    while (v < n) {
    if (visited[v] == false && dist[v] < min_val) {
    min_val = dist[v];
    u = v;
  }
    v = v + 1;
  }
    if (min_val == INF) {
    break;
  }
    while (visited.length <= u) { visited.add(false); } visited[u] = true;
    if (u != 0) {
    result = [...result, Pair(u: parent[u], v: u)];
  }
    for (Edge e in graph[u]) {
    if (visited[e.to] == false && e.weight < dist[e.to]) {
    while (dist.length <= e.to) { dist.add(0); } dist[e.to] = e.weight;
    while (parent.length <= e.to) { parent.add(0); } parent[e.to] = u;
  }
  }
    count = count + 1;
  }
  return result;
}

List<List<Edge>> adjacency_list = [[Edge(to: 1, weight: 1), Edge(to: 3, weight: 3)], [Edge(to: 0, weight: 1), Edge(to: 2, weight: 6), Edge(to: 3, weight: 5), Edge(to: 4, weight: 1)], [Edge(to: 1, weight: 6), Edge(to: 4, weight: 5), Edge(to: 5, weight: 2)], [Edge(to: 0, weight: 3), Edge(to: 1, weight: 5), Edge(to: 4, weight: 1)], [Edge(to: 1, weight: 1), Edge(to: 2, weight: 5), Edge(to: 3, weight: 1), Edge(to: 5, weight: 4)], [Edge(to: 2, weight: 2), Edge(to: 4, weight: 4)]];
List<Pair> mst_edges = prim_mst(adjacency_list);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(pairs_to_string(mst_edges));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
