// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool contains(List<int> xs, int v) {
  for (int x in xs) {
    if (x == v) {
    return true;
  }
  }
  return false;
}

List<List<int>> get_edges(Map<int, List<int>> graph) {
  int n = graph.length;
  List<List<int>> edges = <List<int>>[];
  for (int i = 0; i < n; i++) {
    for (var j in graph[i]) {
    edges = [...edges, [i, j]];
  }
  }
  return edges;
}

List<int> matching_min_vertex_cover(Map<int, List<int>> graph) {
  List<int> chosen = <int>[];
  List<List<int>> edges = get_edges(graph);
  while (edges.length > 0) {
    int idx = edges.length - 1;
    List<int> e = edges[idx];
    edges = (edges.sublist(0, idx) as List).map((e) => (e as List<int>)).toList();
    int u = e[0];
    int v = e[1];
    if (!chosen.contains(u)) {
    chosen = [...chosen, u];
  }
    if (!chosen.contains(v)) {
    chosen = [...chosen, v];
  }
    List<List<int>> filtered = <List<int>>[];
    for (List<int> edge in edges) {
    int a = edge[0];
    int b = edge[1];
    if (a != u && b != u && a != v && b != v) {
    filtered = ([...filtered, edge] as List).map((e) => (e as List<int>)).toList();
  }
  }
    edges = filtered;
  }
  return chosen;
}

Map<int, List<int>> graph = {0: [1, 3], 1: [0, 3], 2: [0, 3, 4], 3: [0, 1, 2], 4: [2, 3]};
List<int> cover = matching_min_vertex_cover(graph);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print((cover).toString());
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
