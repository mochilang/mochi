// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int INF = 1000000000;
Map<int, List<List<int>>> connect(Map<int, List<List<int>>> graph, int a, int b, int w) {
  int u = a - 1;
  int v = b - 1;
  Map<int, List<List<int>>> g = graph;
  g[u] = ([...(g[u]!), [v, w]] as List<dynamic>).map((e) => (e as List<int>)).toList();
  g[v] = ([...(g[v]!), [u, w]] as List<dynamic>).map((e) => (e as List<int>)).toList();
  return g;
}

bool in_list(List<int> arr, int x) {
  int i = 0;
  while (i < arr.length) {
    if (arr[i] == x) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<List<int>> prim(Map<int, List<List<int>>> graph, int s, int n) {
  Map<int, int> dist = <int, int>{};
  Map<int, int> parent = <int, int>{};
  dist[s] = 0;
  parent[s] = -1;
  List<int> known = <int>[];
  List<int> keys = [s];
  while (known.length < n) {
    int mini = INF;
    int u = -1;
    int i = 0;
    while (i < keys.length) {
    int k = keys[i];
    int d = dist[k]!;
    if (!in_list(known, k) && d < mini) {
    mini = d;
    u = k;
  }
    i = i + 1;
  }
    known = [...known, u];
    for (var e in graph[u]!) {
    dynamic v = e[0];
    dynamic w = e[1];
    if (!in_list(keys, v)) {
    keys = [...keys, v];
  }
    int cur = (dist.containsKey(v) ? (dist[(v).toInt()] ?? 0) : INF);
    if (!in_list(known, v) && w.compareTo(cur) < 0) {
    dist[(v).toInt()] = w;
    parent[(v).toInt()] = u;
  }
  }
  }
  List<List<int>> edges = <List<int>>[];
  int j = 0;
  while (j < keys.length) {
    int v = keys[j];
    if (v != s) {
    edges = ([...edges, [v + 1, (parent[v] ?? 0) + 1]] as List<dynamic>).map((e) => (e as List<int>)).toList();
  }
    j = j + 1;
  }
  return edges;
}

List<int> sort_heap(List<int> h, Map<int, int> dist) {
  List<int> a = h;
  int i = 0;
  while (i < a.length) {
    int j = 0;
    while (j < a.length - i - 1) {
    int dj = (dist.containsKey(a[j]) ? (dist[a[j]] ?? 0) : INF);
    int dj1 = (dist.containsKey(a[j + 1]) ? (dist[a[j + 1]] ?? 0) : INF);
    if (dj > dj1) {
    int t = a[j];
    while (a.length <= j) { a.add(0); } a[j] = a[j + 1];
    while (a.length <= j + 1) { a.add(0); } a[j + 1] = t;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return a;
}

List<List<int>> prim_heap(Map<int, List<List<int>>> graph, int s, int n) {
  Map<int, int> dist = <int, int>{};
  Map<int, int> parent = <int, int>{};
  dist[s] = 0;
  parent[s] = -1;
  List<int> h = <int>[];
  int i = 0;
  while (i < n) {
    h = [...h, i];
    i = i + 1;
  }
  h = sort_heap(h, dist);
  List<int> known = <int>[];
  while (h.length > 0) {
    int u = h[0];
    h = (h.sublist(1, h.length) as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
    known = [...known, u];
    for (var e in graph[u]!) {
    dynamic v = e[0];
    dynamic w = e[1];
    int cur = (dist.containsKey(v) ? (dist[(v).toInt()] ?? 0) : INF);
    if (!in_list(known, v) && w.compareTo(cur) < 0) {
    dist[(v).toInt()] = w;
    parent[(v).toInt()] = u;
  }
  }
    h = sort_heap(h, dist);
  }
  List<List<int>> edges = <List<int>>[];
  int j = 0;
  while (j < n) {
    if (j != s) {
    edges = ([...edges, [j + 1, (parent[j] ?? 0) + 1]] as List<dynamic>).map((e) => (e as List<int>)).toList();
  }
    j = j + 1;
  }
  return edges;
}

void print_edges(List<List<int>> edges) {
  int i = 0;
  while (i < edges.length) {
    List<int> e = edges[i];
    print("(" + _str(e[0]) + ", " + _str(e[1]) + ")");
    i = i + 1;
  }
}

void test_vector() {
  int x = 5;
  Map<int, List<List<int>>> G = <int, List<List<int>>>{};
  int i = 0;
  while (i < x) {
    G[i] = ([] as List<dynamic>).map((e) => (e as List<int>)).toList();
    i = i + 1;
  }
  G = connect(G, 1, 2, 15);
  G = connect(G, 1, 3, 12);
  G = connect(G, 2, 4, 13);
  G = connect(G, 2, 5, 5);
  G = connect(G, 3, 2, 6);
  G = connect(G, 3, 4, 6);
  List<List<int>> mst = prim(G, 0, x);
  print_edges(mst);
  List<List<int>> mst_heap = prim_heap(G, 0, x);
  print_edges(mst_heap);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  test_vector();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
