// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Transition {
  String src;
  String dst;
  double prob;
  Transition({required this.src, required this.dst, required this.prob});
}

int seed = 1;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

double random() {
  return 1.0 * rand() / 2147483648.0;
}

List<String> get_nodes(List<Transition> trans) {
  Map<String, bool> seen = <String, bool>{};
  for (Transition t in trans) {
    seen[t.src] = true;
    seen[t.dst] = true;
  }
  List<String> nodes = <String>[];
  for (var k in seen.keys) {
    nodes = [...nodes, k];
  }
  return nodes;
}

String transition(String current, List<Transition> trans) {
  double current_probability = 0.0;
  double random_value = random();
  for (Transition t in trans) {
    if (t.src == current) {
    current_probability = current_probability + t.prob;
    if (current_probability > random_value) {
    return t.dst;
  };
  }
  }
  return "";
}

Map<String, int> get_transitions(String start, List<Transition> trans, int steps) {
  Map<String, int> visited = <String, int>{};
  for (String node in get_nodes(trans)) {
    int one = 1;
    visited[node] = one;
  }
  String node = start;
  int i = 0;
  while (i < steps) {
    node = transition(node, trans);
    int count = visited[node]!;
    count = count + 1;
    visited[node] = count;
    i = i + 1;
  }
  return visited;
}

dynamic _main() {
  List<Transition> transitions = [Transition(src: "a", dst: "a", prob: 0.9), Transition(src: "a", dst: "b", prob: 0.075), Transition(src: "a", dst: "c", prob: 0.025), Transition(src: "b", dst: "a", prob: 0.15), Transition(src: "b", dst: "b", prob: 0.8), Transition(src: "b", dst: "c", prob: 0.05), Transition(src: "c", dst: "a", prob: 0.25), Transition(src: "c", dst: "b", prob: 0.25), Transition(src: "c", dst: "c", prob: 0.5)];
  Map<String, int> result = get_transitions("a", transitions, 5000);
  print((result["a"]).toString() + " " + (result["b"]).toString() + " " + (result["c"]).toString());
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
