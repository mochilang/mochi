// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();


Never _error(String msg) {
  throw Exception(msg);
}

List<int> fill_row(List<int> current_row, List<int> row_above) {
  while (current_row.length <= 0) { current_row.add(0); } current_row[0] = current_row[0] + row_above[0];
  int cell_n = 1;
  while (cell_n < current_row.length) {
    int left = current_row[cell_n - 1];
    int up = row_above[cell_n];
    if (left < up) {
    while (current_row.length <= cell_n) { current_row.add(0); } current_row[cell_n] = current_row[cell_n] + left;
  } else {
    while (current_row.length <= cell_n) { current_row.add(0); } current_row[cell_n] = current_row[cell_n] + up;
  }
    cell_n = cell_n + 1;
  }
  return current_row;
}

int min_path_sum(List<List<int>> grid) {
  if (grid.length == 0 || grid[0].length == 0) {
    _error("The grid does not contain the appropriate information");
  }
  int cell_n = 1;
  while (cell_n < grid[0].length) {
    while (grid[0]!.length <= cell_n) { grid[0]!.add(0); } grid[0]![cell_n] = grid[0][cell_n] + grid[0][cell_n - 1];
    cell_n = cell_n + 1;
  }
  List<int> row_above = grid[0];
  int row_n = 1;
  while (row_n < grid.length) {
    List<int> current_row = grid[row_n];
    while (grid.length <= row_n) { grid.add(<int>[]); } grid[row_n] = fill_row(current_row, row_above);
    row_above = grid[row_n];
    row_n = row_n + 1;
  }
  return grid[grid.length - 1][grid[0].length - 1];
}

List<List<int>> grid1 = [[1, 3, 1], [1, 5, 1], [4, 2, 1]];
List<List<int>> grid2 = [[1, 0, 5, 6, 7], [8, 9, 0, 4, 2], [4, 4, 4, 5, 1], [9, 6, 3, 1, 0], [8, 4, 3, 2, 7]];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(min_path_sum(grid1)));
  print(_str(min_path_sum(grid2)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
