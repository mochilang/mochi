// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

List<int> dfs(int u, List<List<int>> graph, List<bool> visit, List<int> stack) {
  if (visit[u]) {
    return stack;
  }
  while (visit.length <= u) { visit.add(false); } visit[u] = true;
  for (int v in graph[u]) {
    stack = dfs(v, graph, visit, stack);
  }
  stack = [...stack, u];
  return stack;
}

List<int> dfs2(int u, List<List<int>> reversed_graph, List<bool> visit, List<int> component) {
  if (visit[u]) {
    return component;
  }
  while (visit.length <= u) { visit.add(false); } visit[u] = true;
  component = [...component, u];
  for (int v in reversed_graph[u]) {
    component = dfs2(v, reversed_graph, visit, component);
  }
  return component;
}

List<List<int>> kosaraju(List<List<int>> graph) {
  int n = graph.length;
  List<List<int>> reversed_graph = <List<int>>[];
  int i = 0;
  while (i < n) {
    reversed_graph = [...reversed_graph, []];
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    for (int v in graph[i]) {
    while (reversed_graph.length <= v) { reversed_graph.add(<int>[]); } reversed_graph[v] = [...reversed_graph[v], i];
  }
    i = i + 1;
  }
  List<bool> visit = <bool>[];
  i = 0;
  while (i < n) {
    visit = [...visit, false];
    i = i + 1;
  }
  List<int> stack = <int>[];
  i = 0;
  while (i < n) {
    if (visit[i] == false) {
    stack = dfs(i, graph, visit, stack);
  }
    i = i + 1;
  }
  i = 0;
  while (i < n) {
    while (visit.length <= i) { visit.add(false); } visit[i] = false;
    i = i + 1;
  }
  List<List<int>> scc = <List<int>>[];
  int idx = stack.length - 1;
  while (idx >= 0) {
    int node = stack[idx];
    if (visit[node] == false) {
    List<int> component = <int>[];
    component = dfs2(node, reversed_graph, visit, component);
    scc = ([...scc, component] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    idx = idx - 1;
  }
  return scc;
}

void _main() {
  List<List<int>> graph = [[1], [2], [0, 3], [4], []];
  List<List<int>> comps = kosaraju(graph);
  int i = 0;
  while (i < comps.length) {
    print(comps[i]);
    i = i + 1;
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
