// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

class QueueNode {
  String node;
  int weight;
  QueueNode({required this.node, required this.weight});
}

class MSTResult {
  Map<String, int> dist;
  Map<String, String> parent;
  MSTResult({required this.dist, required this.parent});
}

MSTResult prims_algo(Map<String, Map<String, int>> graph) {
  int INF = 2147483647;
  Map<String, int> dist = <String, int>{};
  Map<String, String> parent = <String, String>{};
  List<QueueNode> queue = <QueueNode>[];
  for (String node in graph.keys) {
    dist[node] = INF;
    parent[node] = "";
    queue = [...queue, QueueNode(node: node, weight: INF)];
  }
  if (queue.length == 0) {
    return MSTResult(dist: dist, parent: parent);
  }
  int min_idx = 0;
  int i = 1;
  while (i < queue.length) {
    if (queue[i].weight < queue[min_idx].weight) {
    min_idx = i;
  }
    i = i + 1;
  }
  QueueNode start_node = queue[min_idx];
  String start = start_node.node;
  List<QueueNode> new_q = <QueueNode>[];
  int j = 0;
  while (j < queue.length) {
    if (j != min_idx) {
    new_q = [...new_q, queue[j]];
  }
    j = j + 1;
  }
  queue = new_q;
  dist[start] = 0;
  for (String neighbour in (graph[start] ?? {}).keys) {
    int w = (graph[start] ?? {})[neighbour]!;
    if ((dist[neighbour] ?? 0) > (dist[start] ?? 0) + w) {
    dist[neighbour] = (dist[start] ?? 0) + w;
    parent[neighbour] = start;
    int k = 0;
    while (k < queue.length) {
    if (queue[k].node == neighbour) {
    queue[k]!.weight = dist[neighbour]!;
    break;
  }
    k = k + 1;
  };
  }
  }
  while (queue.length > 0) {
    int best_idx = 0;
    int p = 1;
    while (p < queue.length) {
    if (queue[p].weight < queue[best_idx].weight) {
    best_idx = p;
  }
    p = p + 1;
  }
    QueueNode node_entry = queue[best_idx];
    String node = node_entry.node;
    List<QueueNode> tmp = <QueueNode>[];
    int q = 0;
    while (q < queue.length) {
    if (q != best_idx) {
    tmp = [...tmp, queue[q]];
  }
    q = q + 1;
  }
    queue = tmp;
    for (String neighbour in (graph[node] ?? {}).keys) {
    int w = (graph[node] ?? {})[neighbour]!;
    if ((dist[neighbour] ?? 0) > (dist[node] ?? 0) + w) {
    dist[neighbour] = (dist[node] ?? 0) + w;
    parent[neighbour] = node;
    int r = 0;
    while (r < queue.length) {
    if (queue[r].node == neighbour) {
    queue[r]!.weight = dist[neighbour]!;
    break;
  }
    r = r + 1;
  };
  }
  }
  }
  return MSTResult(dist: dist, parent: parent);
}

int iabs(int x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

Map<String, Map<String, int>> graph = <String, Map<String, int>>{};
MSTResult res = prims_algo(graph);
Map<String, int> dist = res.dist;
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  graph["a"] = {"b": 3, "c": 15};
  graph["b"] = {"a": 3, "c": 10, "d": 100};
  graph["c"] = {"a": 15, "b": 10, "d": 5};
  graph["d"] = {"b": 100, "c": 5};
  print(_str(iabs((dist["a"] ?? 0) - (dist["b"] ?? 0))));
  print(_str(iabs((dist["d"] ?? 0) - (dist["b"] ?? 0))));
  print(_str(iabs((dist["a"] ?? 0) - (dist["c"] ?? 0))));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
