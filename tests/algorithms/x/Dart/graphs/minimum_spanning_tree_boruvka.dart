// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class Edge {
  int u;
  int v;
  int w;
  Edge({required this.u, required this.v, required this.w});
}

class UF {
  List<int> parent;
  List<int> rank;
  UF({required this.parent, required this.rank});
}

class FindRes {
  int root;
  UF uf;
  FindRes({required this.root, required this.uf});
}

UF uf_make(int n) {
  List<int> p = <int>[];
  List<int> r = <int>[];
  int i = 0;
  while (i < n) {
    p = [...p, i];
    r = [...r, 0];
    i = i + 1;
  }
  return UF(parent: p, rank: r);
}

FindRes uf_find(UF uf, int x) {
  List<int> p = uf.parent;
  if (p[x] != x) {
    FindRes res = uf_find(UF(parent: p, rank: uf.rank), p[x]);
    p = res.uf.parent;
    while (p.length <= x) { p.add(0); } p[x] = res.root;
    return FindRes(root: res.root, uf: UF(parent: p, rank: res.uf.rank));
  }
  return FindRes(root: x, uf: uf);
}

UF uf_union(UF uf, int x, int y) {
  FindRes fr1 = uf_find(uf, x);
  UF uf1 = fr1.uf;
  int root1 = fr1.root;
  FindRes fr2 = uf_find(uf1, y);
  uf1 = fr2.uf;
  int root2 = fr2.root;
  if (root1 == root2) {
    return uf1;
  }
  List<int> p = uf1.parent;
  List<int> r = uf1.rank;
  if (r[root1] > r[root2]) {
    while (p.length <= root2) { p.add(0); } p[root2] = root1;
  } else {
    if (r[root1] < r[root2]) {
    while (p.length <= root1) { p.add(0); } p[root1] = root2;
  } else {
    while (p.length <= root2) { p.add(0); } p[root2] = root1;
    while (r.length <= root1) { r.add(0); } r[root1] = r[root1] + 1;
  };
  }
  return UF(parent: p, rank: r);
}

List<Edge> boruvka(int n, List<Edge> edges) {
  UF uf = uf_make(n);
  int num_components = n;
  List<Edge> mst = <Edge>[];
  while (num_components > 1) {
    List<int> cheap = <int>[];
    int i = 0;
    while (i < n) {
    cheap = [...cheap, 0 - 1];
    i = i + 1;
  }
    int idx = 0;
    while (idx < edges.length) {
    Edge e = edges[idx];
    FindRes fr1 = uf_find(uf, e.u);
    uf = fr1.uf;
    int set1 = fr1.root;
    FindRes fr2 = uf_find(uf, e.v);
    uf = fr2.uf;
    int set2 = fr2.root;
    if (set1 != set2) {
    if (cheap[set1] == 0 - 1 || edges[cheap[set1]].w > e.w) {
    while (cheap.length <= set1) { cheap.add(0); } cheap[set1] = idx;
  };
    if (cheap[set2] == 0 - 1 || edges[cheap[set2]].w > e.w) {
    while (cheap.length <= set2) { cheap.add(0); } cheap[set2] = idx;
  };
  }
    idx = idx + 1;
  }
    int v = 0;
    while (v < n) {
    int idxe = cheap[v];
    if (idxe != 0 - 1) {
    Edge e = edges[idxe];
    FindRes fr1 = uf_find(uf, e.u);
    uf = fr1.uf;
    int set1 = fr1.root;
    FindRes fr2 = uf_find(uf, e.v);
    uf = fr2.uf;
    int set2 = fr2.root;
    if (set1 != set2) {
    mst = [...mst, e];
    uf = uf_union(uf, set1, set2);
    num_components = num_components - 1;
  };
  }
    v = v + 1;
  }
  }
  return mst;
}

void _main() {
  List<Edge> edges = [Edge(u: 0, v: 1, w: 1), Edge(u: 0, v: 2, w: 2), Edge(u: 2, v: 3, w: 3)];
  List<Edge> mst = boruvka(4, edges);
  for (Edge e in mst) {
    print(_str(e.u) + " - " + _str(e.v) + " : " + _str(e.w));
  }
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
