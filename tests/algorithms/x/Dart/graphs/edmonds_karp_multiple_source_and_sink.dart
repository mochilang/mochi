// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int push_relabel_max_flow(List<List<int>> graph, List<int> sources, List<int> sinks) {
  if (sources.length == 0 || sinks.length == 0) {
    return 0;
  }
  List<List<int>> g = graph;
  int source_index = sources[0];
  int sink_index = sinks[0];
  if (sources.length > 1 || sinks.length > 1) {
    int max_input_flow = 0;
    int i = 0;
    while (i < sources.length) {
    int j = 0;
    while (j < g[sources[i]].length) {
    max_input_flow = max_input_flow + g[sources[i]][j];
    j = j + 1;
  }
    i = i + 1;
  };
    int size = g.length + 1;
    List<List<int>> new_graph = <List<int>>[];
    List<int> zero_row = <int>[];
    int j = 0;
    while (j < size) {
    zero_row = [...zero_row, 0];
    j = j + 1;
  };
    new_graph = ([...new_graph, zero_row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    int r = 0;
    while (r < g.length) {
    List<int> row = [0];
    int c = 0;
    while (c < g[r].length) {
    row = [...row, g[r][c]];
    c = c + 1;
  }
    new_graph = ([...new_graph, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    r = r + 1;
  };
    g = new_graph;
    i = 0;
    while (i < sources.length) {
    while (g[0]!.length <= sources[i] + 1) { g[0]!.add(0); } g[0]![sources[i] + 1] = max_input_flow;
    i = i + 1;
  };
    source_index = 0;
    size = g.length + 1;
    new_graph = ([] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    r = 0;
    while (r < g.length) {
    List<int> row2 = g[r];
    row2 = [...row2, 0];
    new_graph = ([...new_graph, row2] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    r = r + 1;
  };
    List<int> last_row = <int>[];
    j = 0;
    while (j < size) {
    last_row = [...last_row, 0];
    j = j + 1;
  };
    new_graph = ([...new_graph, last_row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    g = new_graph;
    i = 0;
    while (i < sinks.length) {
    while (g[sinks[i] + 1]!.length <= size - 1) { g[sinks[i] + 1]!.add(0); } g[sinks[i] + 1]![size - 1] = max_input_flow;
    i = i + 1;
  };
    sink_index = size - 1;
  }
  int n = g.length;
  List<List<int>> preflow = <List<int>>[];
  int i = 0;
  while (i < n) {
    List<int> row = <int>[];
    int j = 0;
    while (j < n) {
    row = [...row, 0];
    j = j + 1;
  }
    preflow = ([...preflow, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  List<int> heights = <int>[];
  i = 0;
  while (i < n) {
    heights = [...heights, 0];
    i = i + 1;
  }
  List<int> excesses = <int>[];
  i = 0;
  while (i < n) {
    excesses = [...excesses, 0];
    i = i + 1;
  }
  while (heights.length <= source_index) { heights.add(0); } heights[source_index] = n;
  i = 0;
  while (i < n) {
    int bandwidth = g[source_index][i];
    while (preflow[source_index]!.length <= i) { preflow[source_index]!.add(0); } preflow[source_index]![i] = preflow[source_index][i] + bandwidth;
    while (preflow[i]!.length <= source_index) { preflow[i]!.add(0); } preflow[i]![source_index] = preflow[i][source_index] - bandwidth;
    while (excesses.length <= i) { excesses.add(0); } excesses[i] = excesses[i] + bandwidth;
    i = i + 1;
  }
  List<int> vertices_list = <int>[];
  i = 0;
  while (i < n) {
    if (i != source_index && i != sink_index) {
    vertices_list = [...vertices_list, i];
  }
    i = i + 1;
  }
  int idx = 0;
  while (idx < vertices_list.length) {
    int v = vertices_list[idx];
    int prev_height = heights[v];
    while (excesses[v] > 0) {
    int nb = 0;
    while (nb < n) {
    if (g[v][nb] - preflow[v][nb] > 0 && heights[v] > heights[nb]) {
    int delta = excesses[v];
    int capacity = g[v][nb] - preflow[v][nb];
    if (delta > capacity) {
    delta = capacity;
  };
    while (preflow[v]!.length <= nb) { preflow[v]!.add(0); } preflow[v]![nb] = preflow[v][nb] + delta;
    while (preflow[nb]!.length <= v) { preflow[nb]!.add(0); } preflow[nb]![v] = preflow[nb][v] - delta;
    while (excesses.length <= v) { excesses.add(0); } excesses[v] = excesses[v] - delta;
    while (excesses.length <= nb) { excesses.add(0); } excesses[nb] = excesses[nb] + delta;
  }
    nb = nb + 1;
  }
    int min_height = -1;
    nb = 0;
    while (nb < n) {
    if (g[v][nb] - preflow[v][nb] > 0) {
    if (min_height == -1 || heights[nb] < min_height) {
    min_height = heights[nb];
  };
  }
    nb = nb + 1;
  }
    if (min_height != -1) {
    while (heights.length <= v) { heights.add(0); } heights[v] = min_height + 1;
  } else {
    break;
  }
  }
    if (heights[v] > prev_height) {
    int vertex = vertices_list[idx];
    int j = idx;
    while (j > 0) {
    while (vertices_list.length <= j) { vertices_list.add(0); } vertices_list[j] = vertices_list[j - 1];
    j = j - 1;
  };
    while (vertices_list.length <= 0) { vertices_list.add(0); } vertices_list[0] = vertex;
    idx = 0;
  } else {
    idx = idx + 1;
  }
  }
  int flow = 0;
  i = 0;
  while (i < n) {
    flow = flow + preflow[source_index][i];
    i = i + 1;
  }
  if (flow < 0) {
    flow = -flow;
  }
  return flow;
}

List<List<int>> graph = [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]];
List<int> sources = [0];
List<int> sinks = [3];
int result = push_relabel_max_flow(graph, sources, sinks);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("maximum flow is " + _str(result));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
