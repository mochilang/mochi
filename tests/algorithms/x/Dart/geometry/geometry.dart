// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Angle {
  double degrees;
  Angle({required this.degrees});
}

class Side {
  double length;
  Angle angle;
  int next;
  Side({required this.length, required this.angle, required this.next});
}

class Ellipse {
  double major;
  double minor;
  Ellipse({required this.major, required this.minor});
}

class Circle {
  double radius;
  Circle({required this.radius});
}

class Polygon {
  List<Side> sides;
  Polygon({required this.sides});
}

class Rectangle {
  Side short_side;
  Side long_side;
  Polygon poly;
  Rectangle({required this.short_side, required this.long_side, required this.poly});
}

class Square {
  Side side;
  Rectangle rect;
  Square({required this.side, required this.rect});
}

double PI = 3.141592653589793;
Angle make_angle(double deg) {
  if (deg < 0.0 || deg > 360.0) {
    throw Exception("degrees must be between 0 and 360");
  }
  return Angle(degrees: deg);
}

Side make_side(double length, Angle angle) {
  if (length <= 0.0) {
    throw Exception("length must be positive");
  }
  return Side(length: length, angle: angle, next: -1);
}

double ellipse_area(Ellipse e) {
  return PI * e.major * e.minor;
}

double ellipse_perimeter(Ellipse e) {
  return PI * (e.major + e.minor);
}

double circle_area(Circle c) {
  Ellipse e = Ellipse(major: c.radius, minor: c.radius);
  double area = ellipse_area(e);
  return area;
}

double circle_perimeter(Circle c) {
  Ellipse e = Ellipse(major: c.radius, minor: c.radius);
  double per = ellipse_perimeter(e);
  return per;
}

double circle_diameter(Circle c) {
  return c.radius * 2.0;
}

double circle_max_parts(double num_cuts) {
  if (num_cuts < 0.0) {
    throw Exception("num_cuts must be positive");
  }
  return (num_cuts + 2.0 + num_cuts * num_cuts) * 0.5;
}

Polygon make_polygon() {
  List<Side> s = <Side>[];
  return Polygon(sides: s);
}

void polygon_add_side(Polygon p, Side s) {
  p.sides = [...p.sides, s];
}

Side polygon_get_side(Polygon p, int index) {
  return p.sides[index];
}

void polygon_set_side(Polygon p, int index, Side s) {
  List<Side> tmp = p.sides;
  while (tmp.length <= index) { tmp.add(null as dynamic); } tmp[index] = s;
  p.sides = tmp;
}

Rectangle make_rectangle(double short_len, double long_len) {
  if (short_len <= 0.0 || long_len <= 0.0) {
    throw Exception("length must be positive");
  }
  Side short = make_side(short_len, make_angle(90.0));
  Side long = make_side(long_len, make_angle(90.0));
  Polygon p = make_polygon();
  polygon_add_side(p, short);
  polygon_add_side(p, long);
  return Rectangle(short_side: short, long_side: long, poly: p);
}

double rectangle_perimeter(Rectangle r) {
  return (r.short_side.length + r.long_side.length) * 2.0;
}

double rectangle_area(Rectangle r) {
  return r.short_side.length * r.long_side.length;
}

Square make_square(double side_len) {
  Rectangle rect = make_rectangle(side_len, side_len);
  return Square(side: rect.short_side, rect: rect);
}

double square_perimeter(Square s) {
  double p = rectangle_perimeter(s.rect);
  return p;
}

double square_area(Square s) {
  double a = rectangle_area(s.rect);
  return a;
}

void _main() {
  Angle a = make_angle(90.0);
  print(a.degrees);
  Side s = make_side(5.0, a);
  print(s.length);
  Ellipse e = Ellipse(major: 5.0, minor: 10.0);
  print(ellipse_area(e));
  print(ellipse_perimeter(e));
  Circle c = Circle(radius: 5.0);
  print(circle_area(c));
  print(circle_perimeter(c));
  print(circle_diameter(c));
  print(circle_max_parts(7.0));
  Rectangle r = make_rectangle(5.0, 10.0);
  print(rectangle_perimeter(r));
  print(rectangle_area(r));
  Square q = make_square(5.0);
  print(square_perimeter(q));
  print(square_area(q));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
