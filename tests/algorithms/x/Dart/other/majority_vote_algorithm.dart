// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int index_of(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

List<int> majority_vote(List<int> votes, int votes_needed_to_win) {
  if (votes_needed_to_win < 2) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> candidates = <int>[];
  List<int> counts = <int>[];
  int i = 0;
  while (i < votes.length) {
    int v = votes[i];
    int idx = index_of(candidates, v);
    if (idx != 0 - 1) {
    while (counts.length <= idx) { counts.add(0); } counts[idx] = counts[idx] + 1;
  } else {
    if (candidates.length < votes_needed_to_win - 1) {
    candidates = (candidates..add(v));
    counts = (counts..add(1));
  } else {
    int j = 0;
    while (j < counts.length) {
    while (counts.length <= j) { counts.add(0); } counts[j] = counts[j] - 1;
    j = j + 1;
  };
    List<int> new_candidates = <int>[];
    List<int> new_counts = <int>[];
    j = 0;
    while (j < candidates.length) {
    if (counts[j] > 0) {
    new_candidates = (new_candidates..add(candidates[j]));
    new_counts = (new_counts..add(counts[j]));
  }
    j = j + 1;
  };
    candidates = new_candidates;
    counts = new_counts;
  };
  }
    i = i + 1;
  }
  List<int> final_counts = <int>[];
  int j = 0;
  while (j < candidates.length) {
    final_counts = (final_counts..add(0));
    j = j + 1;
  }
  i = 0;
  while (i < votes.length) {
    int v = votes[i];
    int idx = index_of(candidates, v);
    if (idx != 0 - 1) {
    while (final_counts.length <= idx) { final_counts.add(0); } final_counts[idx] = final_counts[idx] + 1;
  }
    i = i + 1;
  }
  List<int> result = <int>[];
  j = 0;
  while (j < candidates.length) {
    if (final_counts[j] * votes_needed_to_win > votes.length) {
    result = (result..add(candidates[j]));
  }
    j = j + 1;
  }
  return result;
}

void _main() {
  List<int> votes = [1, 2, 2, 3, 1, 3, 2];
  print(_str(majority_vote(votes, 3)));
  print(_str(majority_vote(votes, 2)));
  print(_str(majority_vote(votes, 4)));
}

void _start() {
  _main();
}

void main() => _start();
