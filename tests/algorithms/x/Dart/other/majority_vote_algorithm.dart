// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int index_of(List<int> xs, int x) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == x) {
    return i;
  }
    i = i + 1;
  }
  return 0 - 1;
}

List<int> majority_vote(List<int> votes, int votes_needed_to_win) {
  if (votes_needed_to_win < 2) {
    return ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<int> candidates = <int>[];
  List<int> counts = <int>[];
  int i = 0;
  while (i < votes.length) {
    int v = votes[i];
    int idx = index_of(candidates, v);
    if (idx != 0 - 1) {
    while (counts.length <= idx) { counts.add(0); } counts[idx] = counts[idx] + 1;
  } else {
    if (candidates.length < votes_needed_to_win - 1) {
    candidates = [...candidates, v];
    counts = [...counts, 1];
  } else {
    int j = 0;
    while (j < counts.length) {
    while (counts.length <= j) { counts.add(0); } counts[j] = counts[j] - 1;
    j = j + 1;
  };
    List<int> new_candidates = <int>[];
    List<int> new_counts = <int>[];
    j = 0;
    while (j < candidates.length) {
    if (counts[j] > 0) {
    new_candidates = [...new_candidates, candidates[j]];
    new_counts = [...new_counts, counts[j]];
  }
    j = j + 1;
  };
    candidates = new_candidates;
    counts = new_counts;
  };
  }
    i = i + 1;
  }
  List<int> final_counts = <int>[];
  int j = 0;
  while (j < candidates.length) {
    final_counts = [...final_counts, 0];
    j = j + 1;
  }
  i = 0;
  while (i < votes.length) {
    int v = votes[i];
    int idx = index_of(candidates, v);
    if (idx != 0 - 1) {
    while (final_counts.length <= idx) { final_counts.add(0); } final_counts[idx] = final_counts[idx] + 1;
  }
    i = i + 1;
  }
  List<int> result = <int>[];
  j = 0;
  while (j < candidates.length) {
    if (final_counts[j] * votes_needed_to_win > votes.length) {
    result = [...result, candidates[j]];
  }
    j = j + 1;
  }
  return result;
}

void _main() {
  List<int> votes = [1, 2, 2, 3, 1, 3, 2];
  print(_str(majority_vote(votes, 3)));
  print(_str(majority_vote(votes, 2)));
  print(_str(majority_vote(votes, 4)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
