// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class LRUCache {
  int max_capacity;
  List<String> store;
  LRUCache({required this.max_capacity, required this.store});
}

LRUCache new_cache(int n) {
  if (n < 0) {
    throw Exception("n should be an integer greater than 0.");
  }
  int cap = (n == 0 ? 2147483647 : n);
  return LRUCache(max_capacity: cap, store: List<String>.from([]));
}

List<String> remove_element(List<String> xs, String x) {
  List<String> res = <String>[];
  bool removed = false;
  int i = 0;
  while (i < xs.length) {
    String v = xs[i];
    if (removed == false && v == x) {
    removed = true;
  } else {
    res = List<String>.from(res + [v]);
  }
    i = i + 1;
  }
  return res;
}

LRUCache refer(LRUCache cache, String x) {
  List<String> store = cache.store;
  bool exists = false;
  int i = 0;
  while (i < store.length) {
    if (store[i] == x) {
    exists = true;
  }
    i = i + 1;
  }
  if (exists) {
    store = remove_element(store, x);
  } else {
    if (store.length == cache.max_capacity) {
    List<String> new_store = <String>[];
    int j = 0;
    while (j < store.length - 1) {
    new_store = List<String>.from(new_store + [store[j]]);
    j = j + 1;
  };
    store = new_store;
  };
  }
  store = List<String>.from([x] + store);
  return LRUCache(max_capacity: cache.max_capacity, store: store);
}

void display(LRUCache cache) {
  int i = 0;
  while (i < cache.store.length) {
    print(cache.store[i]);
    i = i + 1;
  }
}

String repr_item(String s) {
  bool all_digits = true;
  int i = 0;
  while (i < s.length) {
    String ch = s.substring(i, i + 1);
    if (ch.compareTo("0") < 0 || ch.compareTo("9") > 0) {
    all_digits = false;
  }
    i = i + 1;
  }
  if (all_digits) {
    return s;
  }
  return "'" + s + "'";
}

String cache_repr(LRUCache cache) {
  String res = "LRUCache(" + _str(cache.max_capacity) + ") => [";
  int i = 0;
  while (i < cache.store.length) {
    res = res + repr_item(cache.store[i]);
    if (i < cache.store.length - 1) {
    res = res + ", ";
  }
    i = i + 1;
  }
  res = res + "]";
  return res;
}

LRUCache lru = new_cache(4);
String r = cache_repr(lru);
void main() {
  lru = refer(lru, "A");
  lru = refer(lru, "2");
  lru = refer(lru, "3");
  lru = refer(lru, "A");
  lru = refer(lru, "4");
  lru = refer(lru, "5");
  print(r);
  if (r != "LRUCache(4) => [5, 4, 'A', 3]") {
    throw Exception("Assertion error");
  }
}
