// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class State {
  List<int> claim;
  List<List<int>> alloc;
  List<List<int>> max;
  State({required this.claim, required this.alloc, required this.max});
}

List<int> processes_resource_summation(List<List<int>> alloc) {
  int resources = alloc[0].length;
  List<int> sums = <int>[];
  int i = 0;
  while (i < resources) {
    int total = 0;
    int j = 0;
    while (j < alloc.length) {
    total = total + alloc[j][i];
    j = j + 1;
  }
    sums = (sums..add(total));
    i = i + 1;
  }
  return sums;
}

List<int> available_resources(List<int> claim, List<int> alloc_sum) {
  List<int> avail = <int>[];
  int i = 0;
  while (i < claim.length) {
    avail = (avail..add(claim[i] - alloc_sum[i]));
    i = i + 1;
  }
  return avail;
}

List<List<int>> need(List<List<int>> max, List<List<int>> alloc) {
  List<List<int>> needs = <List<int>>[];
  int i = 0;
  while (i < max.length) {
    List<int> row = <int>[];
    int j = 0;
    while (j < max[0].length) {
    row = (row..add(max[i][j] - alloc[i][j]));
    j = j + 1;
  }
    needs = ((needs..add(row)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  return needs;
}

dynamic pretty_print(List<int> claim, List<List<int>> alloc, List<List<int>> max) {
  print("         Allocated Resource Table");
  int i = 0;
  while (i < alloc.length) {
    List<int> row = alloc[i];
    String line = "P" + _str(i + 1) + "       ";
    int j = 0;
    while (j < row.length) {
    line = line + _str(row[j]);
    if (j < row.length - 1) {
    line = line + "        ";
  }
    j = j + 1;
  }
    print(line);
    print("");
    i = i + 1;
  }
  print("         System Resource Table");
  i = 0;
  while (i < max.length) {
    List<int> row = max[i];
    String line = "P" + _str(i + 1) + "       ";
    int j = 0;
    while (j < row.length) {
    line = line + _str(row[j]);
    if (j < row.length - 1) {
    line = line + "        ";
  }
    j = j + 1;
  }
    print(line);
    print("");
    i = i + 1;
  }
  String usage = "";
  i = 0;
  while (i < claim.length) {
    if (i > 0) {
    usage = usage + " ";
  }
    usage = usage + _str(claim[i]);
    i = i + 1;
  }
  List<int> alloc_sum = processes_resource_summation(alloc);
  List<int> avail = available_resources(claim, alloc_sum);
  String avail_str = "";
  i = 0;
  while (i < avail.length) {
    if (i > 0) {
    avail_str = avail_str + " ";
  }
    avail_str = avail_str + _str(avail[i]);
    i = i + 1;
  }
  print("Current Usage by Active Processes: " + usage);
  print("Initial Available Resources:       " + avail_str);
}

dynamic bankers_algorithm(List<int> claim, List<List<int>> alloc, List<List<int>> max) {
  List<List<int>> need_list = need(max, alloc);
  List<int> alloc_sum = processes_resource_summation(alloc);
  List<int> avail = available_resources(claim, alloc_sum);
  print("__________________________________________________");
  print("");
  List<bool> finished = <bool>[];
  int i = 0;
  while (i < need_list.length) {
    finished = (finished..add(false));
    i = i + 1;
  }
  int remaining = need_list.length;
  while (remaining > 0) {
    bool safe = false;
    int p = 0;
    while (p < need_list.length) {
    if (!finished[p]) {
    bool exec = true;
    int r = 0;
    while (r < avail.length) {
    if (need_list[p][r] > avail[r]) {
    exec = false;
    break;
  }
    r = r + 1;
  };
    if (exec) {
    safe = true;
    print("Process " + _str(p + 1) + " is executing.");
    r = 0;
    while (r < avail.length) {
    while (avail.length <= r) { avail.add(0); } avail[r] = avail[r] + alloc[p][r];
    r = r + 1;
  };
    String avail_str = "";
    r = 0;
    while (r < avail.length) {
    if (r > 0) {
    avail_str = avail_str + " ";
  }
    avail_str = avail_str + _str(avail[r]);
    r = r + 1;
  };
    print("Updated available resource stack for processes: " + avail_str);
    print("The process is in a safe state.");
    print("");
    while (finished.length <= p) { finished.add(false); } finished[p] = true;
    remaining = remaining - 1;
  };
  }
    p = p + 1;
  }
    if (!safe) {
    print("System in unsafe state. Aborting...");
    print("");
    break;
  }
  }
}

List<int> claim_vector = [8, 5, 9, 7];
List<List<int>> allocated_resources_table = [[2, 0, 1, 1], [0, 1, 2, 1], [4, 0, 0, 3], [0, 2, 1, 0], [1, 0, 3, 0]];
List<List<int>> maximum_claim_table = [[3, 2, 1, 4], [0, 2, 5, 2], [5, 1, 0, 5], [1, 5, 3, 0], [3, 0, 3, 3]];
void main() {
  pretty_print(claim_vector, allocated_resources_table, maximum_claim_table);
  bankers_algorithm(claim_vector, allocated_resources_table, maximum_claim_table);
}
