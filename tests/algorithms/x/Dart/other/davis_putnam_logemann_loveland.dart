// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Clause {
  Map<String, int> literals;
  List<String> names;
  Clause({required this.literals, required this.names});
}

class EvalResult {
  int value;
  Clause clause;
  EvalResult({required this.value, required this.clause});
}

class Formula {
  List<Clause> clauses;
  Formula({required this.clauses});
}

class DPLLResult {
  bool sat;
  Map<String, int> model;
  DPLLResult({required this.sat, required this.model});
}

Clause new_clause(List<String> lits) {
  Map<String, int> m = <String, int>{};
  List<String> names = <String>[];
  int i = 0;
  while (i < lits.length) {
    String lit = lits[i];
    m[lit] = 0 - 1;
    names = (names..add(lit));
    i = i + 1;
  }
  return Clause(literals: m, names: names);
}

Clause assign_clause(Clause c, Map<String, int> model) {
  Map<String, int> lits = c.literals;
  int i = 0;
  while (i < c.names.length) {
    String lit = c.names[i];
    String symbol = _substr(lit, 0, 2);
    if (model.containsKey(symbol)) {
    int value = model[symbol]!;
    if (_substr(lit, lit.length - 1, lit.length) == "'" && value != 0 - 1) {
    value = 1 - value;
  };
    lits[lit] = value;
  }
    i = i + 1;
  }
  c.literals = lits;
  return c;
}

EvalResult evaluate_clause(Clause c, Map<String, int> model) {
  int i = 0;
  while (i < c.names.length) {
    String lit = c.names[i];
    String sym = (_substr(lit, lit.length - 1, lit.length) == "'" ? _substr(lit, 0, 2) : lit + "'");
    if (c.literals.containsKey(sym)) {
    return EvalResult(value: 1, clause: c);
  }
    i = i + 1;
  }
  c = assign_clause(c, model);
  i = 0;
  while (i < c.names.length) {
    String lit = c.names[i];
    int value = c.literals[lit]!;
    if (value == 1) {
    return EvalResult(value: 1, clause: c);
  }
    if (value == 0 - 1) {
    return EvalResult(value: 0 - 1, clause: c);
  }
    i = i + 1;
  }
  int any_true = 0;
  i = 0;
  while (i < c.names.length) {
    String lit = c.names[i];
    if ((c.literals[lit] ?? 0) == 1) {
    any_true = 1;
  }
    i = i + 1;
  }
  return EvalResult(value: any_true, clause: c);
}

Formula new_formula(List<Clause> cs) {
  return Formula(clauses: cs);
}

List<String> remove_symbol(List<String> symbols, String s) {
  List<String> res = <String>[];
  int i = 0;
  while (i < symbols.length) {
    if (symbols[i] != s) {
    res = (res..add(symbols[i]));
  }
    i = i + 1;
  }
  return res;
}

DPLLResult dpll_algorithm(List<Clause> clauses, List<String> symbols, Map<String, int> model) {
  bool all_true = true;
  int i = 0;
  while (i < clauses.length) {
    EvalResult ev = evaluate_clause(clauses[i], model);
    while (clauses.length <= i) { clauses.add(null as dynamic); } clauses[i] = ev.clause;
    if (ev.value == 0) {
    return DPLLResult(sat: false, model: {});
  } else {
    if (ev.value == 0 - 1) {
    all_true = false;
  };
  }
    i = i + 1;
  }
  if (all_true) {
    return DPLLResult(sat: true, model: model);
  }
  String p = symbols[0];
  List<String> rest = remove_symbol(symbols, p);
  Map<String, int> tmp1 = model;
  Map<String, int> tmp2 = model;
  tmp1[p] = 1;
  tmp2[p] = 0;
  DPLLResult res1 = dpll_algorithm(clauses, rest, tmp1);
  if (res1.sat) {
    return res1;
  }
  return dpll_algorithm(clauses, rest, tmp2);
}

String str_clause(Clause c) {
  String line = "{";
  bool first = true;
  int i = 0;
  while (i < c.names.length) {
    String lit = c.names[i];
    if (first) {
    first = false;
  } else {
    line = line + " , ";
  }
    line = line + lit;
    i = i + 1;
  }
  line = line + "}";
  return line;
}

String str_formula(Formula f) {
  String line = "{";
  int i = 0;
  while (i < f.clauses.length) {
    line = line + str_clause(f.clauses[i]);
    if (i < f.clauses.length - 1) {
    line = line + " , ";
  }
    i = i + 1;
  }
  line = line + "}";
  return line;
}

Clause clause1 = new_clause(["A4", "A3", "A5'", "A1", "A3'"]);
Clause clause2 = new_clause(["A4"]);
Formula formula = new_formula([clause1, clause2]);
String formula_str = str_formula(formula);
List<Clause> clauses = [clause1, clause2];
List<String> symbols = ["A4", "A3", "A5", "A1"];
Map<String, int> model = <String, int>{};
DPLLResult result = dpll_algorithm(clauses, symbols, model);
void main() {
  if (result.sat) {
    print("The formula " + formula_str + " is satisfiable.");
  } else {
    print("The formula " + formula_str + " is not satisfiable.");
  }
}
