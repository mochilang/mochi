// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int get_avg(int number_1, int number_2) {
  return (number_1 + number_2) ~/ 2;
}

List<int> guess_the_number(int lower, int higher, int to_guess) {
  if (lower > higher) {
    throw Exception("argument value for lower and higher must be(lower > higher)");
  }
  if (!(lower < to_guess && to_guess < higher)) {
    throw Exception("guess value must be within the range of lower and higher value");
  }
  String answer(int number) {
  if (number > to_guess) {
    return "high";
  } else {
    if (number < to_guess) {
    return "low";
  } else {
    return "same";
  };
  }
}
  print("started...");
  int last_lowest = lower;
  int last_highest = higher;
  List<int> last_numbers = <int>[];
  while (true) {
    int number = get_avg(last_lowest, last_highest);
    last_numbers = (last_numbers..add(number));
    String resp = answer(number);
    if (resp == "low") {
    last_lowest = number;
  } else {
    if (resp == "high") {
    last_highest = number;
  } else {
    break;
  };
  }
  }
  print("guess the number : " + _str(last_numbers[last_numbers.length - 1]));
  print("details : " + _str(last_numbers));
  return last_numbers;
}

void main() {
  guess_the_number(10, 1000, 17);
  guess_the_number(-10000, 10000, 7);
}
