// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String apply_table(String inp, List<int> table) {
  String res = "";
  int i = 0;
  while (i < table.length) {
    int idx = table[i] - 1;
    if (idx < 0) {
    idx = inp.length - 1;
  }
    res = res + _substr(inp, idx, idx + 1);
    i = i + 1;
  }
  return res;
}

String left_shift(String data) {
  return _substr(data, 1, data.length) + _substr(data, 0, 1);
}

String xor(String a, String b) {
  String res = "";
  int i = 0;
  while (i < a.length && i < b.length) {
    if (_substr(a, i, i + 1) == _substr(b, i, i + 1)) {
    res = res + "0";
  } else {
    res = res + "1";
  }
    i = i + 1;
  }
  return res;
}

String int_to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  String res = "";
  int _num = n;
  while (_num > 0) {
    res = _str(_num % 2) + res;
    _num = _num ~/ 2;
  }
  return res;
}

String pad_left(String s, int width) {
  String res = s;
  while (res.length < width) {
    res = "0" + res;
  }
  return res;
}

int bin_to_int(String s) {
  int result = 0;
  int i = 0;
  while (i < s.length) {
    int digit = (_substr(s, i, i + 1)).codeUnitAt(0);
    result = result * 2 + digit;
    i = i + 1;
  }
  return result;
}

String apply_sbox(List<List<int>> s, String data) {
  String row_bits = _substr(data, 0, 1) + _substr(data, data.length - 1, data.length);
  String col_bits = _substr(data, 1, 3);
  int row = bin_to_int(row_bits);
  int col = bin_to_int(col_bits);
  int val = s[row][col];
  String out = int_to_binary(val);
  return out;
}

List<int> p4_table = [2, 4, 3, 1];
String f(List<int> expansion, List<List<int>> s0, List<List<int>> s1, String key, String message) {
  String left = _substr(message, 0, 4);
  String right = _substr(message, 4, 8);
  String temp = apply_table(right, expansion);
  temp = xor(temp, key);
  String left_bin_str = apply_sbox(s0, _substr(temp, 0, 4));
  String right_bin_str = apply_sbox(s1, _substr(temp, 4, 8));
  left_bin_str = pad_left(left_bin_str, 2);
  right_bin_str = pad_left(right_bin_str, 2);
  temp = apply_table(left_bin_str + right_bin_str, p4_table);
  temp = xor(left, temp);
  return temp + right;
}

String key = "1010000010";
String message = "11010111";
List<int> p8_table = [6, 3, 7, 4, 8, 5, 10, 9];
List<int> p10_table = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6];
List<int> IP = [2, 6, 3, 1, 4, 8, 5, 7];
List<int> IP_inv = [4, 1, 3, 5, 7, 2, 8, 6];
List<int> expansion = [4, 1, 2, 3, 2, 3, 4, 1];
List<List<int>> s0 = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]];
List<List<int>> s1 = [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]];
String temp = apply_table(key, p10_table);
String left = _substr(temp, 0, 5);
String right = _substr(temp, 5, 10);
String key1 = apply_table(left + right, p8_table);
String key2 = apply_table(left + right, p8_table);
String CT = apply_table(temp, IP_inv);
String PT = apply_table(temp, IP_inv);
void main() {
  left = left_shift(left);
  right = left_shift(right);
  left = left_shift(left);
  right = left_shift(right);
  left = left_shift(left);
  right = left_shift(right);
  temp = apply_table(message, IP);
  temp = f(expansion, s0, s1, key1, temp);
  temp = _substr(temp, 4, 8) + _substr(temp, 0, 4);
  temp = f(expansion, s0, s1, key2, temp);
  print("Cipher text is: " + CT);
  temp = apply_table(CT, IP);
  temp = f(expansion, s0, s1, key2, temp);
  temp = _substr(temp, 4, 8) + _substr(temp, 0, 4);
  temp = f(expansion, s0, s1, key1, temp);
  print("Plain text after decypting is: " + PT);
}
