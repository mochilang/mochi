// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class Thing {
  String name;
  double value;
  double weight;
  Thing({required this.name, required this.value, required this.weight});
}

class GreedyResult {
  List<Thing> items;
  double total_value;
  GreedyResult({required this.items, required this.total_value});
}

double get_value(Thing t) {
  return t.value;
}

double get_weight(Thing t) {
  return t.weight;
}

String get_name(Thing t) {
  return t.name;
}

double value_weight(Thing t) {
  return t.value / t.weight;
}

List<Thing> build_menu(List<String> names, List<double> values, List<double> weights) {
  List<Thing> menu = <Thing>[];
  int i = 0;
  while (i < values.length && i < names.length && i < weights.length) {
    menu = (menu..add(Thing(name: names[i], value: values[i], weight: weights[i])));
    i = i + 1;
  }
  return menu;
}

List<Thing> sort_desc(List<Thing> items, dynamic key_func) {
  List<Thing> arr = <Thing>[];
  int i = 0;
  while (i < items.length) {
    arr = (arr..add(items[i]));
    i = i + 1;
  }
  int j = 1;
  while (j < arr.length) {
    Thing key_item = arr[j];
    dynamic key_val = key_func(key_item);
    int k = j - 1;
    while (k >= 0 && key_func(arr[k]).compareTo(key_val) < 0) {
    while (arr.length <= k + 1) { arr.add(null as dynamic); } arr[k + 1] = arr[k];
    k = k - 1;
  }
    while (arr.length <= k + 1) { arr.add(null as dynamic); } arr[k + 1] = key_item;
    j = j + 1;
  }
  return arr;
}

GreedyResult greedy(List<Thing> items, double max_cost, dynamic key_func) {
  List<Thing> items_copy = sort_desc(items, key_func);
  List<Thing> result = <Thing>[];
  double total_value = 0.0;
  double total_cost = 0.0;
  int i = 0;
  while (i < items_copy.length) {
    Thing it = items_copy[i];
    double w = get_weight(it);
    if (total_cost + w <= max_cost) {
    result = (result..add(it));
    total_cost = total_cost + w;
    total_value = total_value + get_value(it);
  }
    i = i + 1;
  }
  return GreedyResult(items: result, total_value: total_value);
}

String thing_to_string(Thing t) {
  return "Thing(" + t.name + ", " + _str(t.value) + ", " + _str(t.weight) + ")";
}

String list_to_string(List<Thing> ts) {
  String s = "[";
  int i = 0;
  while (i < ts.length) {
    s = s + thing_to_string(ts[i]);
    if (i < ts.length - 1) {
    s = s + ", ";
  }
    i = i + 1;
  }
  s = s + "]";
  return s;
}

List<String> food = ["Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"];
List<double> value = [80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0];
List<double> weight = [40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0];
List<Thing> foods = build_menu(food, value, weight);
GreedyResult res = greedy(foods, 500.0, get_value);
void main() {
  print(list_to_string(foods));
  print(list_to_string(res.items));
  print(_str(res.total_value));
}
