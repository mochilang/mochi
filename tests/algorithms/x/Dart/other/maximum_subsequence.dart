// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int max_int(int a, int b) {
  if (a >= b) {
    return a;
  } else {
    return b;
  }
}

int max_subsequence_sum(List<int> nums) {
  if (nums.length == 0) {
    throw Exception("input sequence should not be empty");
  }
  int ans = nums[0];
  int i = 1;
  while (i < nums.length) {
    int _num = nums[i];
    int extended = ans + _num;
    ans = max_int(max_int(ans, extended), _num);
    i = i + 1;
  }
  return ans;
}

void main() {
  print(max_subsequence_sum([1, 2, 3, 4, -2]));
  print(max_subsequence_sum([-2, -3, -1, -4, -6]));
}
