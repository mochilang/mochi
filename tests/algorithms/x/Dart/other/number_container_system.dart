// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class NumberContainer {
  Map<int, List<int>> numbermap;
  Map<int, int> indexmap;
  NumberContainer({required this.numbermap, required this.indexmap});
}

List<int> remove_at(List<int> xs, int idx) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = (res..add(xs[i]));
  }
    i = i + 1;
  }
  return res;
}

List<int> insert_at(List<int> xs, int idx, int val) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i == idx) {
    res = (res..add(val));
  }
    res = (res..add(xs[i]));
    i = i + 1;
  }
  if (idx == xs.length) {
    res = (res..add(val));
  }
  return res;
}

List<int> binary_search_delete(List<int> array, int item) {
  int low = 0;
  int high = array.length - 1;
  List<int> arr = array;
  while (low <= high) {
    int mid = (low + high) ~/ 2;
    if (arr[mid] == item) {
    arr = remove_at(arr, mid);
    return arr;
  } else {
    if (arr[mid] < item) {
    low = mid + 1;
  } else {
    high = mid - 1;
  };
  }
  }
  print("ValueError: Either the item is not in the array or the array was unsorted");
  return arr;
}

List<int> binary_search_insert(List<int> array, int index) {
  int low = 0;
  int high = array.length - 1;
  List<int> arr = array;
  while (low <= high) {
    int mid = (low + high) ~/ 2;
    if (arr[mid] == index) {
    arr = insert_at(arr, mid + 1, index);
    return arr;
  } else {
    if (arr[mid] < index) {
    low = mid + 1;
  } else {
    high = mid - 1;
  };
  }
  }
  arr = insert_at(arr, low, index);
  return arr;
}

NumberContainer change(NumberContainer cont, int idx, int _num) {
  Map<int, List<int>> numbermap = cont.numbermap;
  Map<int, int> indexmap = cont.indexmap;
  if (indexmap.containsKey(idx)) {
    int old = indexmap[idx]!;
    List<int> indexes = numbermap[old]!;
    if (indexes.length == 1) {
    numbermap[old] = ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  } else {
    numbermap[old] = binary_search_delete(indexes, idx);
  };
  }
  indexmap[idx] = _num;
  if (numbermap.containsKey(_num)) {
    numbermap[_num] = binary_search_insert((numbermap[_num]!), idx);
  } else {
    numbermap[_num] = [idx];
  }
  return NumberContainer(numbermap: numbermap, indexmap: indexmap);
}

int find(NumberContainer cont, int _num) {
  Map<int, List<int>> numbermap = cont.numbermap;
  if (numbermap.containsKey(_num)) {
    List<int> arr = numbermap[_num]!;
    if (arr.length > 0) {
    return arr[0];
  };
  }
  return -1;
}

Map<int, List<int>> nm = <int, List<int>>{};
Map<int, int> im = <int, int>{};
NumberContainer cont = NumberContainer(numbermap: nm, indexmap: im);
void main() {
  print(find(cont, 10));
  cont = change(cont, 0, 10);
  print(find(cont, 10));
  cont = change(cont, 0, 20);
  print(find(cont, 10));
  print(find(cont, 20));
}
