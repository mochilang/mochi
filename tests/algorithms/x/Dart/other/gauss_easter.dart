// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

class EasterDate {
  int month;
  int day;
  EasterDate({required this.month, required this.day});
}

EasterDate gauss_easter(int year) {
  int metonic_cycle = year % 19;
  int julian_leap_year = year % 4;
  int non_leap_year = year % 7;
  int leap_day_inhibits = year ~/ 100;
  int lunar_orbit_correction = (13 + 8 * leap_day_inhibits) ~/ 25;
  double leap_day_reinstall_number = (leap_day_inhibits.toDouble()) / 4.0;
  double secular_moon_shift = (15.0 - (lunar_orbit_correction.toDouble()) + (leap_day_inhibits.toDouble()) - leap_day_reinstall_number) % 30.0;
  double century_starting_point = (4.0 + (leap_day_inhibits.toDouble()) - leap_day_reinstall_number) % 7.0;
  double days_to_add = (19.0 * (metonic_cycle.toDouble()) + secular_moon_shift) % 30.0;
  double days_from_phm_to_sunday = (2.0 * (julian_leap_year.toDouble()) + 4.0 * (non_leap_year.toDouble()) + 6.0 * days_to_add + century_starting_point) % 7.0;
  if (days_to_add == 29.0 && days_from_phm_to_sunday == 6.0) {
    return EasterDate(month: 4, day: 19);
  }
  if (days_to_add == 28.0 && days_from_phm_to_sunday == 6.0) {
    return EasterDate(month: 4, day: 18);
  }
  int offset = (days_to_add + days_from_phm_to_sunday).toInt();
  int total = 22 + offset;
  if (total > 31) {
    return EasterDate(month: 4, day: total - 31);
  }
  return EasterDate(month: 3, day: total);
}

String format_date(int year, EasterDate d) {
  String month = (d.month < 10 ? "0" + _str(d.month) : _str(d.month));
  String day = (d.day < 10 ? "0" + _str(d.day) : _str(d.day));
  return _str(year) + "-" + month + "-" + day;
}

List<int> years = [1994, 2000, 2010, 2021, 2023, 2032, 2100];
int i = 0;
void main() {
  while (i < years.length) {
    int y = years[i];
    EasterDate e = gauss_easter(y);
    print("Easter in " + _str(y) + " is " + format_date(y, e));
    i = i + 1;
  }
}
