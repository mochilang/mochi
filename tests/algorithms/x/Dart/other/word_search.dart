// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class WordSearch {
  List<String> words;
  int width;
  int height;
  List<List<String>> board;
  WordSearch({required this.words, required this.width, required this.height, required this.board});
}

int seed = 123456789;
int rand() {
  seed = (seed * 1103515245 + 12345) % 2147483648;
  return seed;
}

int rand_range(int max) {
  return rand() % max;
}

List<int> shuffle(List<int> list_int) {
  int i = list_int.length - 1;
  while (i > 0) {
    int j = rand_range(i + 1);
    int tmp = list_int[i];
    while (list_int.length <= i) { list_int.add(0); } list_int[i] = list_int[j];
    while (list_int.length <= j) { list_int.add(0); } list_int[j] = tmp;
    i = i - 1;
  }
  return list_int;
}

String rand_letter() {
  String letters = "abcdefghijklmnopqrstuvwxyz";
  int i = rand_range(26);
  return _substr(letters, i, i + 1);
}

WordSearch make_word_search(List<String> words, int width, int height) {
  List<List<String>> board = <List<String>>[];
  int r = 0;
  while (r < height) {
    List<String> row = <String>[];
    int c = 0;
    while (c < width) {
    row = (row..add(""));
    c = c + 1;
  }
    board = ((board..add(row)) as List).map((e) => (List<String>.from(e) as List<String>)).toList();
    r = r + 1;
  }
  return WordSearch(words: words, width: width, height: height, board: board);
}

bool insert_dir(WordSearch ws, String word, int dr, int dc, List<int> rows, List<int> cols) {
  int word_len = word.length;
  int ri = 0;
  while (ri < rows.length) {
    int row = rows[ri];
    int ci = 0;
    while (ci < cols.length) {
    int col = cols[ci];
    int end_r = row + dr * (word_len - 1);
    int end_c = col + dc * (word_len - 1);
    if (end_r < 0 || end_r >= ws.height || end_c < 0 || end_c >= ws.width) {
    ci = ci + 1;
    continue;
  }
    int k = 0;
    bool ok = true;
    while (k < word_len) {
    int rr = row + dr * k;
    int cc = col + dc * k;
    if (ws.board[rr][cc] != "") {
    ok = false;
    break;
  }
    k = k + 1;
  }
    if (ok) {
    k = 0;
    while (k < word_len) {
    int rr2 = row + dr * k;
    int cc2 = col + dc * k;
    List<String> row_list = ws.board[rr2];
    while (row_list.length <= cc2) { row_list.add(""); } row_list[cc2] = _substr(word, k, k + 1);
    k = k + 1;
  };
    return true;
  }
    ci = ci + 1;
  }
    ri = ri + 1;
  }
  return false;
}

void generate_board(WordSearch ws) {
  List<int> dirs_r = [-1, -1, 0, 1, 1, 1, 0, -1];
  List<int> dirs_c = [0, 1, 1, 1, 0, -1, -1, -1];
  int i = 0;
  while (i < ws.words.length) {
    String word = ws.words[i];
    List<int> rows = <int>[];
    int r = 0;
    while (r < ws.height) {
    rows = (rows..add(r));
    r = r + 1;
  }
    List<int> cols = <int>[];
    int c = 0;
    while (c < ws.width) {
    cols = (cols..add(c));
    c = c + 1;
  }
    rows = shuffle(rows);
    cols = shuffle(cols);
    int d = rand_range(8);
    insert_dir(ws, word, dirs_r[d], dirs_c[d], rows, cols);
    i = i + 1;
  }
}

String visualise(WordSearch ws, bool add_fake_chars) {
  String result = "";
  int r = 0;
  while (r < ws.height) {
    int c = 0;
    while (c < ws.width) {
    String ch = ws.board[r][c];
    if (ch == "") {
    if (add_fake_chars) {
    ch = rand_letter();
  } else {
    ch = "#";
  };
  }
    result = result + ch + " ";
    c = c + 1;
  }
    result = result + "\n";
    r = r + 1;
  }
  return result;
}

void _main() {
  List<String> words = ["cat", "dog", "snake", "fish"];
  WordSearch ws = make_word_search(words, 10, 10);
  generate_board(ws);
  print(visualise(ws, true));
}

void _start() {
  _main();
}

void main() => _start();
