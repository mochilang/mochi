// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String repeat_char(String c, int count) {
  String s = "";
  int i = 0;
  while (i < count) {
    s = s + c;
    i = i + 1;
  }
  return s;
}

List<String> vicsek(int order) {
  if (order == 0) {
    return ["#"];
  }
  List<String> prev = vicsek(order - 1);
  int size = prev.length;
  String blank = repeat_char(" ", size);
  List<String> result = <String>[];
  int i = 0;
  while (i < size) {
    result = [...result, blank + prev[i] + blank];
    i = i + 1;
  }
  i = 0;
  while (i < size) {
    result = [...result, prev[i] + prev[i] + prev[i]];
    i = i + 1;
  }
  i = 0;
  while (i < size) {
    result = [...result, blank + prev[i] + blank];
    i = i + 1;
  }
  return result;
}

dynamic print_pattern(List<String> pattern) {
  int i = 0;
  while (i < pattern.length) {
    print(pattern[i]);
    i = i + 1;
  }
}

dynamic _main() {
  int depth = 3;
  List<String> pattern = vicsek(depth);
  print_pattern(pattern);
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
