// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Complex {
  double re;
  double im;
  Complex({required this.re, required this.im});
}

Complex complex_add(Complex a, Complex b) {
  return Complex(re: a.re + b.re, im: a.im + b.im);
}

Complex complex_mul(Complex a, Complex b) {
  double real = a.re * b.re - a.im * b.im;
  double imag = a.re * b.im + a.im * b.re;
  return Complex(re: real, im: imag);
}

double sqrtApprox(double x) {
  double guess = x / 2.0;
  int i = 0;
  while (i < 20) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

double complex_abs(Complex a) {
  return sqrtApprox(a.re * a.re + a.im * a.im);
}

double sin_taylor(double x) {
  double term = x;
  double sum = x;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * (i as double);
    double k2 = 2.0 * (i as double) + 1.0;
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

double cos_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  int i = 1;
  while (i < 10) {
    double k1 = 2.0 * (i as double) - 1.0;
    double k2 = 2.0 * (i as double);
    term = -term * x * x / (k1 * k2);
    sum = sum + term;
    i = i + 1;
  }
  return sum;
}

double exp_taylor(double x) {
  double term = 1.0;
  double sum = 1.0;
  double i = 1.0;
  while (i < 20.0) {
    term = term * x / i;
    sum = sum + term;
    i = i + 1.0;
  }
  return sum;
}

Complex complex_exp(Complex z) {
  double e = exp_taylor(z.re);
  return Complex(re: e * cos_taylor(z.im), im: e * sin_taylor(z.im));
}

Complex eval_quadratic(Complex c, Complex z) {
  return complex_add(complex_mul(z, z), c);
}

Complex eval_exponential(Complex c, Complex z) {
  return complex_add(complex_exp(z), c);
}

Complex iterate_function(dynamic eval_function, Complex c, int nb_iterations, Complex z0, double infinity) {
  Complex z_n = z0;
  int i = 0;
  while (i < nb_iterations) {
    z_n = eval_function(c, z_n);
    if (complex_abs(z_n) > infinity) {
    return z_n;
  }
    i = i + 1;
  }
  return z_n;
}

List<List<Complex>> prepare_grid(double window_size, int nb_pixels) {
  List<List<Complex>> grid = <List<Complex>>[];
  int i = 0;
  while (i < nb_pixels) {
    List<Complex> row = <Complex>[];
    int j = 0;
    while (j < nb_pixels) {
    double real = -window_size + 2.0 * window_size * (i as double) / (nb_pixels - 1 as double);
    double imag = -window_size + 2.0 * window_size * (j as double) / (nb_pixels - 1 as double);
    row = [...row, Complex(re: real, im: imag)];
    j = j + 1;
  }
    grid = ([...grid, row] as List).map((e) => (List<Complex>.from(e) as List<Complex>)).toList();
    i = i + 1;
  }
  return grid;
}

dynamic julia_demo() {
  List<List<Complex>> grid = prepare_grid(1.0, 5);
  Complex c_poly = Complex(re: -0.4, im: 0.6);
  Complex c_exp = Complex(re: -2.0, im: 0.0);
  List<List<int>> poly_result = <List<int>>[];
  List<List<int>> exp_result = <List<int>>[];
  int y = 0;
  while (y < grid.length) {
    List<int> row_poly = <int>[];
    List<int> row_exp = <int>[];
    int x = 0;
    while (x < grid[y].length) {
    Complex z0 = grid[y][x];
    Complex z_poly = iterate_function(eval_quadratic, c_poly, 20, z0, 4.0);
    Complex z_exp = iterate_function(eval_exponential, c_exp, 10, z0, 10000000000.0);
    row_poly = [...row_poly, (complex_abs(z_poly) < 2.0 ? 1 : 0)];
    row_exp = [...row_exp, (complex_abs(z_exp) < 10000.0 ? 1 : 0)];
    x = x + 1;
  }
    poly_result = ([...poly_result, row_poly] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    exp_result = ([...exp_result, row_exp] as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    y = y + 1;
  }
  print(poly_result);
  print(exp_result);
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  julia_demo();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
