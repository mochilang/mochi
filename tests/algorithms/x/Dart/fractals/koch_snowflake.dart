// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class Vec {
  double x;
  double y;
  Vec({required this.x, required this.y});
}

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
double _mod(double x, double m) {
  return x - (x / m as int as double) * m;
}

double sin(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y3 = y2 * y;
  double y5 = y3 * y2;
  double y7 = y5 * y2;
  return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0;
}

double cos(double x) {
  double y = _mod(x + PI, TWO_PI) - PI;
  double y2 = y * y;
  double y4 = y2 * y2;
  double y6 = y4 * y2;
  return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0;
}

Vec rotate(Vec v, double angle_deg) {
  double theta = angle_deg * PI / 180.0;
  double c = cos(theta);
  double s = sin(theta);
  return Vec(x: v.x * c - v.y * s, y: v.x * s + v.y * c);
}

List<Vec> iteration_step(List<Vec> vectors) {
  List<Vec> new_vectors = <Vec>[];
  int i = 0;
  while (i < vectors.length - 1) {
    Vec start = vectors[i];
    Vec end = vectors[i + 1];
    new_vectors = [...new_vectors, start];
    double dx = end.x - start.x;
    double dy = end.y - start.y;
    Vec one_third = Vec(x: start.x + dx / 3.0, y: start.y + dy / 3.0);
    Vec mid = rotate(Vec(x: dx / 3.0, y: dy / 3.0), 60.0);
    Vec peak = Vec(x: one_third.x + mid.x, y: one_third.y + mid.y);
    Vec two_third = Vec(x: start.x + dx * 2.0 / 3.0, y: start.y + dy * 2.0 / 3.0);
    new_vectors = [...new_vectors, one_third];
    new_vectors = [...new_vectors, peak];
    new_vectors = [...new_vectors, two_third];
    i = i + 1;
  }
  new_vectors = [...new_vectors, vectors[vectors.length - 1]];
  return new_vectors;
}

List<Vec> iterate(List<Vec> initial, int steps) {
  List<Vec> vectors = initial;
  int i = 0;
  while (i < steps) {
    vectors = iteration_step(vectors);
    i = i + 1;
  }
  return vectors;
}

String vec_to_string(Vec v) {
  return "(" + (v.x).toString() + ", " + (v.y).toString() + ")";
}

String vec_list_to_string(List<Vec> lst) {
  String res = "[";
  int i = 0;
  while (i < lst.length) {
    res = res + vec_to_string(lst[i]);
    if (i < lst.length - 1) {
    res = res + ", ";
  }
    i = i + 1;
  }
  res = res + "]";
  return res;
}

Vec VECTOR_1 = Vec(x: 0.0, y: 0.0);
Vec VECTOR_2 = Vec(x: 0.5, y: 0.8660254);
Vec VECTOR_3 = Vec(x: 1.0, y: 0.0);
List<Vec> INITIAL_VECTORS = [VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1];
List<Vec> example = iterate([VECTOR_1, VECTOR_3], 1);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(vec_list_to_string(example));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
