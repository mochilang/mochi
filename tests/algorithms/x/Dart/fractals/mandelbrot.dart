// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

class RGB {
  int r;
  int g;
  int b;
  RGB({required this.r, required this.g, required this.b});
}

int round_int(double x) {
  return x + 0.5 as int;
}

RGB hsv_to_rgb(double h, double s, double v) {
  int i = h * 6.0 as int;
  double f = h * 6.0 - (i as double);
  double p = v * (1.0 - s);
  double q = v * (1.0 - f * s);
  double t = v * (1.0 - (1.0 - f) * s);
  int mod = i % 6;
  double r = 0.0;
  double g = 0.0;
  double b = 0.0;
  if (mod == 0) {
    r = v;
    g = t;
    b = p;
  } else {
    if (mod == 1) {
    r = q;
    g = v;
    b = p;
  } else {
    if (mod == 2) {
    r = p;
    g = v;
    b = t;
  } else {
    if (mod == 3) {
    r = p;
    g = q;
    b = v;
  } else {
    if (mod == 4) {
    r = t;
    g = p;
    b = v;
  } else {
    r = v;
    g = p;
    b = q;
  };
  };
  };
  };
  }
  return RGB(r: round_int(r * 255.0), g: round_int(g * 255.0), b: round_int(b * 255.0));
}

double get_distance(double x, double y, int max_step) {
  double a = x;
  double b = y;
  int step = -1;
  while (step < max_step - 1) {
    step = step + 1;
    double a_new = a * a - b * b + x;
    b = 2.0 * a * b + y;
    a = a_new;
    if (a * a + b * b > 4.0) {
    break;
  }
  }
  return (step as double) / (max_step - 1 as double);
}

RGB get_black_and_white_rgb(double distance) {
  if (distance == 1.0) {
    return RGB(r: 0, g: 0, b: 0);
  } else {
    return RGB(r: 255, g: 255, b: 255);
  }
}

RGB get_color_coded_rgb(double distance) {
  if (distance == 1.0) {
    return RGB(r: 0, g: 0, b: 0);
  } else {
    return hsv_to_rgb(distance, 1.0, 1.0);
  }
}

List<List<RGB>> get_image(int image_width, int image_height, double figure_center_x, double figure_center_y, double figure_width, int max_step, bool use_distance_color_coding) {
  List<List<RGB>> img = <List<RGB>>[];
  double figure_height = figure_width / (image_width as double) * (image_height as double);
  int image_y = 0;
  while (image_y < image_height) {
    List<RGB> row = <RGB>[];
    int image_x = 0;
    while (image_x < image_width) {
    double fx = figure_center_x + ((image_x as double) / (image_width as double) - 0.5) * figure_width;
    double fy = figure_center_y + ((image_y as double) / (image_height as double) - 0.5) * figure_height;
    double distance = get_distance(fx, fy, max_step);
    RGB rgb;
    if (use_distance_color_coding) {
    rgb = get_color_coded_rgb(distance);
  } else {
    rgb = get_black_and_white_rgb(distance);
  }
    row = [...row, rgb];
    image_x = image_x + 1;
  }
    img = ([...img, row] as List).map((e) => (List<RGB>.from(e) as List<RGB>)).toList();
    image_y = image_y + 1;
  }
  return img;
}

String rgb_to_string(RGB c) {
  return "(" + (c.r).toString() + ", " + (c.g).toString() + ", " + (c.b).toString() + ")";
}

List<List<RGB>> img1 = get_image(10, 10, -0.6, 0.0, 3.2, 50, true);
List<List<RGB>> img2 = get_image(10, 10, -0.6, 0.0, 3.2, 50, false);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(rgb_to_string(img1[0][0]));
  print(rgb_to_string(img2[0][0]));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
