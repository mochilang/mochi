// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}


bool _listEq(List a, List b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    final x = a[i];
    final y = b[i];
    if (x is List && y is List) {
      if (!_listEq(x, y)) return false;
    } else if (x != y) {
      return false;
    }
  }
  return true;
}

String _str(dynamic v) { if (v is double && v.abs() <= 9007199254740991 && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

class FuzzySet {
  String name;
  double left_boundary;
  double peak;
  double right_boundary;
  FuzzySet({required this.name, required this.left_boundary, required this.peak, required this.right_boundary});
}

String stringify(FuzzySet fs) {
  return fs.name + ": [" + _str(fs.left_boundary) + ", " + _str(fs.peak) + ", " + _str(fs.right_boundary) + "]";
}

double max2(double a, double b) {
  if (a > b) {
    return a;
  }
  return b;
}

double min2(double a, double b) {
  if (a < b) {
    return a;
  }
  return b;
}

FuzzySet complement(FuzzySet fs) {
  return FuzzySet(name: "¬" + fs.name, left_boundary: 1.0 - fs.right_boundary, peak: 1.0 - fs.left_boundary, right_boundary: 1.0 - fs.peak);
}

FuzzySet intersection(FuzzySet a, FuzzySet b) {
  return FuzzySet(name: a.name + " ∩ " + b.name, left_boundary: max2(a.left_boundary, b.left_boundary), peak: min2(a.right_boundary, b.right_boundary), right_boundary: (a.peak + b.peak) / 2.0);
}

FuzzySet union(FuzzySet a, FuzzySet b) {
  return FuzzySet(name: a.name + " U " + b.name, left_boundary: min2(a.left_boundary, b.left_boundary), peak: max2(a.right_boundary, b.right_boundary), right_boundary: (a.peak + b.peak) / 2.0);
}

double membership(FuzzySet fs, double x) {
  if (x <= fs.left_boundary || x >= fs.right_boundary) {
    return 0.0;
  }
  if (fs.left_boundary < x && x <= fs.peak) {
    return (x - fs.left_boundary) / (fs.peak - fs.left_boundary);
  }
  if (fs.peak < x && x < fs.right_boundary) {
    return (fs.right_boundary - x) / (fs.right_boundary - fs.peak);
  }
  return 0.0;
}

FuzzySet sheru = FuzzySet(name: "Sheru", left_boundary: 0.4, peak: 1.0, right_boundary: 0.6);
FuzzySet siya = FuzzySet(name: "Siya", left_boundary: 0.5, peak: 1.0, right_boundary: 0.7);
FuzzySet sheru_comp = complement(sheru);
FuzzySet inter = intersection(siya, sheru);
FuzzySet uni = union(siya, sheru);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(stringify(sheru));
  print(stringify(siya));
  print(stringify(sheru_comp));
  print(stringify(inter));
  print("Sheru membership 0.5: " + _str(membership(sheru, 0.5)));
  print("Sheru membership 0.6: " + _str(membership(sheru, 0.6)));
  print(stringify(uni));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
