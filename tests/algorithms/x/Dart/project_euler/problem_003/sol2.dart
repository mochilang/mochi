// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

int largest_prime_factor(int n) {
  if (n <= 0) {
    _error("Parameter n must be greater than or equal to one.");
  }
  int _num = n;
  int prime = 1;
  int i = 2;
  while (i * i <= _num) {
    while (_num % i == 0) {
    prime = i;
    _num = _num ~/ i;
  }
    i = i + 1;
  }
  if (_num > 1) {
    prime = _num;
  }
  return prime;
}

void _main() {
  print(_str(largest_prime_factor(600851475143)));
}

void _start() {
  _main();
}

void main() => _start();
