// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

bool is_prime(int number) {
  if (number > 1 && number < 4) {
    return true;
  }
  if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

int solution(int n) {
  int _num = n;
  if (_num <= 0) {
    print("Parameter n must be greater than or equal to one.");
    return 0;
  }
  if (is_prime(_num)) {
    return _num;
  }
  while (_num % 2 == 0) {
    _num = _num ~/ 2;
    if (is_prime(_num)) {
    return _num;
  }
  }
  int max_number = 1;
  int i = 3;
  while (i * i <= _num) {
    if (_num % i == 0) {
    if (is_prime(_num ~/ i)) {
    max_number = _num ~/ i;
    break;
  } else {
    if (is_prime(i)) {
    max_number = i;
  };
  };
  }
    i = i + 2;
  }
  return max_number;
}

void _main() {
  int result = solution(600851475143);
  print("solution() = " + _str(result));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
