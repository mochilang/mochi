// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

bool is_prime(int number) {
  if (number > 1 && number < 4) {
    return true;
  }
  if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

int solution(int n) {
  int _num = n;
  if (_num <= 0) {
    print("Parameter n must be greater than or equal to one.");
    return 0;
  }
  if (is_prime(_num)) {
    return _num;
  }
  while (_num % 2 == 0) {
    _num = _num ~/ 2;
    if (is_prime(_num)) {
    return _num;
  }
  }
  int max_number = 1;
  int i = 3;
  while (i * i <= _num) {
    if (_num % i == 0) {
    if (is_prime(_num ~/ i)) {
    max_number = _num ~/ i;
    break;
  } else {
    if (is_prime(i)) {
    max_number = i;
  };
  };
  }
    i = i + 2;
  }
  return max_number;
}

void _main() {
  int result = solution(600851475143);
  print("solution() = " + _str(result));
}

void _start() {
  _main();
}

void main() => _start();
