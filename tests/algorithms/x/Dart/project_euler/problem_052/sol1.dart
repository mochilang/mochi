// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> digits_count(int n) {
  List<int> counts = <int>[];
  int i = 0;
  while (i < 10) {
    counts = (counts..add(0));
    i = i + 1;
  }
  int x = n;
  if (x == 0) {
    while (counts.length <= 0) { counts.add(0); } counts[0] = counts[0] + 1;
  }
  while (x > 0) {
    int d = x % 10;
    while (counts.length <= d) { counts.add(0); } counts[d] = counts[d] + 1;
    x = x ~/ 10;
  }
  return counts;
}

bool equal_lists(List<int> a, List<int> b) {
  int i = 0;
  while (i < a.length) {
    if (a[i] != b[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int solution() {
  int i = 1;
  while (true) {
    List<int> c = digits_count(i);
    if (equal_lists(c, digits_count(2 * i)) && equal_lists(c, digits_count(3 * i)) && equal_lists(c, digits_count(4 * i)) && equal_lists(c, digits_count(5 * i)) && equal_lists(c, digits_count(6 * i))) {
    return i;
  }
    i = i + 1;
  }
}

void main() {
  print(_str(solution()));
}
