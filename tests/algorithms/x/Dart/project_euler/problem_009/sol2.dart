// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int solution(int n) {
  int product = -1;
  int candidate = 0;
  int a = 1;
  while (a < n ~/ 3) {
    int b = (n * n - 2 * a * n) ~/ (2 * n - 2 * a);
    int c = n - a - b;
    if (c * c == a * a + b * b) {
    candidate = a * b * c;
    if (candidate > product) {
    product = candidate;
  };
  }
    a = a + 1;
  }
  return product;
}

void _main() {
  print("solution() = " + _str(solution(1000)));
}

void _start() {
  _main();
}

void main() => _start();
