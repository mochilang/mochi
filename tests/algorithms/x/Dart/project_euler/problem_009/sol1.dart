// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution() {
  int a = 0;
  while (a < 300) {
    int b = a + 1;
    while (b < 400) {
    int c = b + 1;
    while (c < 500) {
    if (a + b + c == 1000 && a * a + b * b == c * c) {
    return a * b * c;
  }
    c = c + 1;
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return -1;
}

int solution_fast() {
  int a = 0;
  while (a < 300) {
    int b = 0;
    while (b < 400) {
    int c = 1000 - a - b;
    if (a < b && b < c && a * a + b * b == c * c) {
    return a * b * c;
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return -1;
}

void main() {
  print(_str(solution_fast()));
}
