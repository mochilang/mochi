// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int factorial(int n) {
  int result = 1;
  int i = 2;
  while (i <= n) {
    result = result * i;
    i = i + 1;
  }
  return result;
}

String nth_permutation(String digits, int index) {
  String chars = digits;
  int n = index;
  String res = "";
  int k = chars.length;
  while (k > 0) {
    int f = factorial(k - 1);
    int pos = n ~/ f;
    n = n % f;
    res = res + _substr(chars, pos, pos + 1);
    chars = _substr(chars, 0, pos) + _substr(chars, pos + 1, chars.length);
    k = k - 1;
  }
  return res;
}

String solution() {
  return nth_permutation("0123456789", 999999);
}

void _main() {
  print(solution());
}

void _start() {
  _main();
}

void main() => _start();
