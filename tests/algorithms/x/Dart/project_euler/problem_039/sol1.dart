// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int int_sqrt(int n) {
  int low = 0;
  int high = n;
  while (low <= high) {
    int mid = (low + high) ~/ 2;
    int sq = mid * mid;
    if (sq == n) {
    return mid;
  }
    if (sq < n) {
    low = mid + 1;
  } else {
    high = mid - 1;
  }
  }
  return high;
}

Map<int, int> pythagorean_triple(int max_perimeter) {
  Map<int, int> triplets = <int, int>{};
  int base = 1;
  while (base <= max_perimeter) {
    int perpendicular = base;
    while (perpendicular <= max_perimeter) {
    int hyp_sq = base * base + perpendicular * perpendicular;
    int hyp = int_sqrt(hyp_sq);
    if (hyp * hyp == hyp_sq) {
    int perimeter = base + perpendicular + hyp;
    if (perimeter <= max_perimeter) {
    if (triplets.containsKey(perimeter)) {
    triplets[perimeter] = (triplets[perimeter] ?? 0) + 1;
  } else {
    triplets[perimeter] = 1;
  };
  };
  }
    perpendicular = perpendicular + 1;
  }
    base = base + 1;
  }
  return triplets;
}

int max_perimeter(Map<int, int> counts) {
  int best_p = 0;
  int max_count = 0;
  for (int p in counts.keys) {
    int count = counts[p]!;
    if (count > max_count || count == max_count && p > best_p) {
    max_count = count;
    best_p = p;
  }
  }
  return best_p;
}

int solution(int n) {
  Map<int, int> triplets = pythagorean_triple(n);
  return max_perimeter(triplets);
}

void _main() {
  int s200 = max_perimeter(pythagorean_triple(200));
  int s100 = max_perimeter(pythagorean_triple(100));
  print(_str(s100));
  print(_str(s200));
  int best = max_perimeter(pythagorean_triple(1000));
  print(_str(best));
  print("Perimeter " + _str(best) + " has maximum solutions");
}

void _start() {
  _main();
}

void main() => _start();
