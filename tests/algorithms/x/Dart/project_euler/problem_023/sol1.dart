// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int int_sqrt(int n) {
  int x = 1;
  while ((x + 1) * (x + 1) <= n) {
    x = x + 1;
  }
  return x;
}

int solution(int limit) {
  List<int> sum_divs = <int>[];
  int i = 0;
  while (i <= limit) {
    sum_divs = (sum_divs..add(1));
    i = i + 1;
  }
  int sqrt_limit = int_sqrt(limit);
  i = 2;
  while (i <= sqrt_limit) {
    while (sum_divs.length <= i * i) { sum_divs.add(0); } sum_divs[i * i] = sum_divs[i * i] + i;
    int k = i + 1;
    while (k <= limit ~/ i) {
    while (sum_divs.length <= k * i) { sum_divs.add(0); } sum_divs[k * i] = sum_divs[k * i] + k + i;
    k = k + 1;
  }
    i = i + 1;
  }
  List<bool> is_abundant = <bool>[];
  i = 0;
  while (i <= limit) {
    is_abundant = (is_abundant..add(false));
    i = i + 1;
  }
  List<int> abundants = <int>[];
  int res = 0;
  int n = 1;
  while (n <= limit) {
    if (sum_divs[n] > n) {
    abundants = (abundants..add(n));
    while (is_abundant.length <= n) { is_abundant.add(false); } is_abundant[n] = true;
  }
    bool has_pair = false;
    int j = 0;
    while (j < abundants.length) {
    int a = abundants[j];
    if (a > n) {
    break;
  }
    int b = n - a;
    if (b <= limit && is_abundant[b]) {
    has_pair = true;
    break;
  }
    j = j + 1;
  }
    if (!has_pair) {
    res = res + n;
  }
    n = n + 1;
  }
  return res;
}

void main() {
  print(_str(solution(28123)));
}
