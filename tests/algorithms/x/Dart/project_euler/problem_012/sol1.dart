// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int count_divisors(int n) {
  int m = n;
  int n_divisors = 1;
  int i = 2;
  while (i * i <= m) {
    int multiplicity = 0;
    while (m % i == 0) {
    m = m ~/ i;
    multiplicity = multiplicity + 1;
  }
    n_divisors = n_divisors * (multiplicity + 1);
    i = i + 1;
  }
  if (m > 1) {
    n_divisors = n_divisors * 2;
  }
  return n_divisors;
}

int solution() {
  int t_num = 1;
  int i = 1;
  while (true) {
    i = i + 1;
    t_num = t_num + i;
    if (count_divisors(t_num) > 500) {
    break;
  }
  }
  return t_num;
}

void main() {
  print(_str(solution()));
}
