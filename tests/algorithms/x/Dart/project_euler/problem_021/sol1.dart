// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

int int_sqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

int sum_of_divisors(int n) {
  int total = 0;
  int root = int_sqrt(n);
  int i = 1;
  while (i <= root) {
    if (n % i == 0) {
    if (i * i == n) {
    total = total + i;
  } else {
    total = total + i + n ~/ i;
  };
  }
    i = i + 1;
  }
  return total - n;
}

int solution(int limit) {
  int total = 0;
  int i = 1;
  while (i < limit) {
    int s = sum_of_divisors(i);
    if (s != i && sum_of_divisors(s) == i) {
    total = total + i;
  }
    i = i + 1;
  }
  return total;
}

void main() {
  print(solution(10000));
  print(solution(5000));
  print(solution(1000));
  print(solution(100));
  print(solution(50));
}
