// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

bool is_substring_divisible(List<int> _num) {
  if (_num[3] % 2 != 0) {
    return false;
  }
  if ((_num[2] + _num[3] + _num[4]) % 3 != 0) {
    return false;
  }
  if (_num[5] % 5 != 0) {
    return false;
  }
  List<int> primes = [7, 11, 13, 17];
  int i = 0;
  while (i < primes.length) {
    int p = primes[i];
    int idx = i + 4;
    int val = _num[idx] * 100 + _num[idx + 1] * 10 + _num[idx + 2];
    if (val % p != 0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

List<int> remove_at(List<int> xs, int idx) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = (res..add(xs[i]));
  }
    i = i + 1;
  }
  return res;
}

int digits_to_number(List<int> xs) {
  int value = 0;
  int i = 0;
  while (i < xs.length) {
    value = value * 10 + xs[i];
    i = i + 1;
  }
  return value;
}

int search(List<int> prefix, List<int> remaining) {
  if (remaining.length == 0) {
    if (is_substring_divisible(prefix)) {
    return digits_to_number(prefix);
  };
    return 0;
  }
  int total = 0;
  int i = 0;
  while (i < remaining.length) {
    int d = remaining[i];
    List<int> next_prefix = (prefix..add(d));
    List<int> next_remaining = remove_at(remaining, i);
    total = total + search(next_prefix, next_remaining);
    i = i + 1;
  }
  return total;
}

int solution(int n) {
  List<int> digits = <int>[];
  int i = 0;
  while (i < n) {
    digits = (digits..add(i));
    i = i + 1;
  }
  return search(([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList(), digits);
}

void main() {
  print(["solution() =", solution(10)].join(" "));
}
