// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<int> get_totients(int max_one) {
  List<int> totients = <int>[];
  int i = 0;
  while (i < max_one) {
    totients = [...totients, i];
    i = i + 1;
  }
  i = 2;
  while (i < max_one) {
    if (totients[i] == i) {
    int x = i;
    while (x < max_one) {
    while (totients.length <= x) { totients.add(0); } totients[x] = totients[x] - totients[x] ~/ i;
    x = x + i;
  };
  }
    i = i + 1;
  }
  return totients;
}

bool has_same_digits(int num1, int num2) {
  List<int> count1 = <int>[];
  List<int> count2 = <int>[];
  int i = 0;
  while (i < 10) {
    count1 = [...count1, 0];
    count2 = [...count2, 0];
    i = i + 1;
  }
  int n1 = num1;
  int n2 = num2;
  if (n1 == 0) {
    while (count1.length <= 0) { count1.add(0); } count1[0] = count1[0] + 1;
  }
  if (n2 == 0) {
    while (count2.length <= 0) { count2.add(0); } count2[0] = count2[0] + 1;
  }
  while (n1 > 0) {
    int d1 = n1 % 10;
    while (count1.length <= d1) { count1.add(0); } count1[d1] = count1[d1] + 1;
    n1 = n1 ~/ 10;
  }
  while (n2 > 0) {
    int d2 = n2 % 10;
    while (count2.length <= d2) { count2.add(0); } count2[d2] = count2[d2] + 1;
    n2 = n2 ~/ 10;
  }
  i = 0;
  while (i < 10) {
    if (count1[i] != count2[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int solution(int max_n) {
  int min_numerator = 1;
  int min_denominator = 0;
  List<int> totients = get_totients(max_n + 1);
  int i = 2;
  while (i <= max_n) {
    int t = totients[i];
    if (i * min_denominator < min_numerator * t && has_same_digits(i, t)) {
    min_numerator = i;
    min_denominator = t;
  }
    i = i + 1;
  }
  return min_numerator;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(solution(10000)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
