// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> get_totients(int max_one) {
  List<int> totients = <int>[];
  int i = 0;
  while (i < max_one) {
    totients = (totients..add(i));
    i = i + 1;
  }
  i = 2;
  while (i < max_one) {
    if (totients[i] == i) {
    int x = i;
    while (x < max_one) {
    while (totients.length <= x) { totients.add(0); } totients[x] = totients[x] - totients[x] ~/ i;
    x = x + i;
  };
  }
    i = i + 1;
  }
  return totients;
}

bool has_same_digits(int num1, int num2) {
  List<int> count1 = <int>[];
  List<int> count2 = <int>[];
  int i = 0;
  while (i < 10) {
    count1 = (count1..add(0));
    count2 = (count2..add(0));
    i = i + 1;
  }
  int n1 = num1;
  int n2 = num2;
  if (n1 == 0) {
    while (count1.length <= 0) { count1.add(0); } count1[0] = count1[0] + 1;
  }
  if (n2 == 0) {
    while (count2.length <= 0) { count2.add(0); } count2[0] = count2[0] + 1;
  }
  while (n1 > 0) {
    int d1 = n1 % 10;
    while (count1.length <= d1) { count1.add(0); } count1[d1] = count1[d1] + 1;
    n1 = n1 ~/ 10;
  }
  while (n2 > 0) {
    int d2 = n2 % 10;
    while (count2.length <= d2) { count2.add(0); } count2[d2] = count2[d2] + 1;
    n2 = n2 ~/ 10;
  }
  i = 0;
  while (i < 10) {
    if (count1[i] != count2[i]) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int solution(int max_n) {
  int min_numerator = 1;
  int min_denominator = 0;
  List<int> totients = get_totients(max_n + 1);
  int i = 2;
  while (i <= max_n) {
    int t = totients[i];
    if (i * min_denominator < min_numerator * t && has_same_digits(i, t)) {
    min_numerator = i;
    min_denominator = t;
  }
    i = i + 1;
  }
  return min_numerator;
}

void main() {
  print(_str(solution(10000)));
}
