// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

int solution(int limit) {
  Map<int, int> frequencies = <int, int>{};
  int m = 2;
  while (2 * m * (m + 1) <= limit) {
    int n = m % 2 + 1;
    while (n < m) {
    if (gcd(m, n) > 1) {
    n = n + 2;
    continue;
  }
    int primitive_perimeter = 2 * m * (m + n);
    int perimeter = primitive_perimeter;
    while (perimeter <= limit) {
    if (!frequencies.containsKey(perimeter)) {
    frequencies[perimeter] = 0;
  }
    frequencies[perimeter] = (frequencies[perimeter] ?? 0) + 1;
    perimeter = perimeter + primitive_perimeter;
  }
    n = n + 2;
  }
    m = m + 1;
  }
  int count = 0;
  for (int p in frequencies.keys) {
    if ((frequencies[p] ?? 0) == 1) {
    count = count + 1;
  }
  }
  return count;
}

int result = solution(1500000);
void main() {
  print("solution() = " + _str(result));
}
