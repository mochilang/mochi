// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int t = x % y;
    x = y;
    y = t;
  }
  return x;
}

int solution(int limit) {
  Map<int, int> frequencies = <int, int>{};
  int m = 2;
  while (2 * m * (m + 1) <= limit) {
    int n = m % 2 + 1;
    while (n < m) {
    if (gcd(m, n) > 1) {
    n = n + 2;
    continue;
  }
    int primitive_perimeter = 2 * m * (m + n);
    int perimeter = primitive_perimeter;
    while (perimeter <= limit) {
    if (!frequencies.containsKey(perimeter)) {
    frequencies[perimeter] = 0;
  }
    frequencies[perimeter] = (frequencies[perimeter] ?? 0) + 1;
    perimeter = perimeter + primitive_perimeter;
  }
    n = n + 2;
  }
    m = m + 1;
  }
  int count = 0;
  for (int p in frequencies.keys) {
    if ((frequencies[p] ?? 0) == 1) {
    count = count + 1;
  }
  }
  return count;
}

int result = solution(1500000);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("solution() = " + _str(result));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
