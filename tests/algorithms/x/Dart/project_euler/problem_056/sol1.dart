// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int pow_int(int base, int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

int digital_sum(int n) {
  String s = _str(n);
  int sum = 0;
  int i = 0;
  while (i < s.length) {
    sum = sum + ((s.substring(i, i + 1)).codeUnitAt(0));
    i = i + 1;
  }
  return sum;
}

int solution(int a, int b) {
  int max_sum = 0;
  int base = 0;
  while (base < a) {
    int power = 0;
    while (power < b) {
    int value = pow_int(base, power);
    int ds = digital_sum(value);
    if (ds > max_sum) {
    max_sum = ds;
  }
    power = power + 1;
  }
    base = base + 1;
  }
  return max_sum;
}

void test_solution() {
  if (solution(10, 10) != 45) {
    ;
  }
  if (solution(100, 100) != 972) {
    ;
  }
  if (solution(100, 200) != 1872) {
    ;
  }
}

void _main() {
  test_solution();
  print(_str(solution(100, 100)));
}

void _start() {
  _main();
}

void main() => _start();
