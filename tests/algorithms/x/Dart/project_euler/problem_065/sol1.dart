// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int sum_digits(int _num) {
  int n = _num;
  int digit_sum = 0;
  while (n > 0) {
    digit_sum = digit_sum + n % 10;
    n = n ~/ 10;
  }
  return digit_sum;
}

int solution(int max_n) {
  int pre_numerator = 1;
  int cur_numerator = 2;
  int i = 2;
  while (i <= max_n) {
    int temp = pre_numerator;
    int e_cont = 1;
    if (i % 3 == 0) {
    e_cont = 2 * i ~/ 3;
  }
    pre_numerator = cur_numerator;
    cur_numerator = e_cont * pre_numerator + temp;
    i = i + 1;
  }
  return sum_digits(cur_numerator);
}

void main() {
  print(solution(9));
  print(solution(10));
  print(solution(50));
  print(solution(100));
}
