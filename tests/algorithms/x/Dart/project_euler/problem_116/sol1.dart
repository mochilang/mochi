// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int solution(int length) {
  List<List<int>> ways = <List<int>>[];
  int i = 0;
  while (i <= length) {
    List<int> row = <int>[];
    row = (row..add(0));
    row = (row..add(0));
    row = (row..add(0));
    ways = ((ways..add(row)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  int row_length = 0;
  while (row_length <= length) {
    int tile_length = 2;
    while (tile_length <= 4) {
    int tile_start = 0;
    while (tile_start <= row_length - tile_length) {
    int remaining = row_length - tile_start - tile_length;
    while (ways[row_length]!.length <= tile_length - 2) { ways[row_length]!.add(0); } ways[row_length]![tile_length - 2] = ways[row_length][tile_length - 2] + ways[remaining][tile_length - 2] + 1;
    tile_start = tile_start + 1;
  }
    tile_length = tile_length + 1;
  }
    row_length = row_length + 1;
  }
  int total = 0;
  int j = 0;
  while (j < 3) {
    total = total + ways[length][j];
    j = j + 1;
  }
  return total;
}

void main() {
  print(solution(5));
  print(solution(50));
}
