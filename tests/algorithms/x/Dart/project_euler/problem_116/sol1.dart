// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

int solution(int length) {
  List<List<int>> ways = <List<int>>[];
  int i = 0;
  while (i <= length) {
    List<int> row = <int>[];
    row = [...row, 0];
    row = [...row, 0];
    row = [...row, 0];
    ways = ([...ways, row] as List<dynamic>).map((e) => ((e as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  int row_length = 0;
  while (row_length <= length) {
    int tile_length = 2;
    while (tile_length <= 4) {
    int tile_start = 0;
    while (tile_start <= row_length - tile_length) {
    int remaining = row_length - tile_start - tile_length;
    while (ways[row_length]!.length <= tile_length - 2) { ways[row_length]!.add(0); } ways[row_length]![tile_length - 2] = ways[row_length][tile_length - 2] + ways[remaining][tile_length - 2] + 1;
    tile_start = tile_start + 1;
  }
    tile_length = tile_length + 1;
  }
    row_length = row_length + 1;
  }
  int total = 0;
  int j = 0;
  while (j < 3) {
    total = total + ways[length][j];
    j = j + 1;
  }
  return total;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(solution(5));
  print(solution(50));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
