// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int next_number(int number) {
  int n = number;
  int total = 0;
  while (n > 0) {
    int d = n % 10;
    total = total + d * d;
    n = n ~/ 10;
  }
  return total;
}

bool chain(int number) {
  int n = number;
  while (n != 1 && n != 89) {
    n = next_number(n);
  }
  return n == 1;
}

int solution(int limit) {
  int count = 0;
  int i = 1;
  while (i < limit) {
    if (!chain(i)) {
    count = count + 1;
  }
    i = i + 1;
  }
  return count;
}

void main() {
  print(_str(next_number(44)));
  print(_str(next_number(10)));
  print(_str(next_number(32)));
  print(_str(chain(10)));
  print(_str(chain(58)));
  print(_str(chain(1)));
  print(_str(solution(100)));
  print(_str(solution(1000)));
}
