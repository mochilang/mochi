// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int next_number(int number) {
  int n = number;
  int total = 0;
  while (n > 0) {
    int d = n % 10;
    total = total + d * d;
    n = n ~/ 10;
  }
  return total;
}

bool chain(int number) {
  int n = number;
  while (n != 1 && n != 89) {
    n = next_number(n);
  }
  return n == 1;
}

int solution(int limit) {
  int count = 0;
  int i = 1;
  while (i < limit) {
    if (!chain(i)) {
    count = count + 1;
  }
    i = i + 1;
  }
  return count;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(next_number(44)));
  print(_str(next_number(10)));
  print(_str(next_number(32)));
  print(_str(chain(10)));
  print(_str(chain(58)));
  print(_str(chain(1)));
  print(_str(solution(100)));
  print(_str(solution(1000)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
