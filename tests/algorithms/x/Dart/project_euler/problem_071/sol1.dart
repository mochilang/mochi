// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int numerator, int denominator, int limit) {
  int maxNumerator = 0;
  int maxDenominator = 1;
  int currentDenominator = 1;
  while (currentDenominator <= limit) {
    int currentNumerator = currentDenominator * numerator ~/ denominator;
    if (currentDenominator % denominator == 0) {
    currentNumerator = currentNumerator - 1;
  }
    if (currentNumerator * maxDenominator > currentDenominator * maxNumerator) {
    maxNumerator = currentNumerator;
    maxDenominator = currentDenominator;
  }
    currentDenominator = currentDenominator + 1;
  }
  return maxNumerator;
}

void main() {
  print(_str(solution(3, 7, 1000000)));
  print(_str(solution(3, 7, 8)));
  print(_str(solution(6, 7, 60)));
}
