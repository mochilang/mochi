// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

double sqrt(double x) {
  if (x <= 0.0) {
    return 0.0;
  }
  double guess = x;
  int i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2.0;
    i = i + 1;
  }
  return guess;
}

bool is_pentagonal(int n) {
  double root = sqrt(1.0 + 24.0 * (1.0 * n));
  double val = (1.0 + root) / 6.0;
  int val_int = (val).toInt();
  return val == 1.0 * val_int;
}

int pentagonal(int k) {
  return k * (3 * k - 1) ~/ 2;
}

int solution(int limit) {
  List<int> pentagonal_nums = <int>[];
  int i = 1;
  while (i < limit) {
    pentagonal_nums = (pentagonal_nums..add(pentagonal(i)));
    i = i + 1;
  }
  int a_idx = 0;
  while (a_idx < pentagonal_nums.length) {
    int pentagonal_i = pentagonal_nums[a_idx];
    int b_idx = a_idx;
    while (b_idx < pentagonal_nums.length) {
    int pentagonal_j = pentagonal_nums[b_idx];
    int s = pentagonal_i + pentagonal_j;
    int d = pentagonal_j - pentagonal_i;
    if (is_pentagonal(s) && is_pentagonal(d)) {
    return d;
  }
    b_idx = b_idx + 1;
  }
    a_idx = a_idx + 1;
  }
  return -1;
}

int result = solution(5000);
void main() {
  print("solution() = " + _str(result));
}
