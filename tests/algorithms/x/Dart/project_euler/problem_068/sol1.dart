// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> range_desc(int start, int end) {
  List<int> res = <int>[];
  int i = start;
  while (i >= end) {
    res = (res..add(i));
    i = i - 1;
  }
  return res;
}

List<int> range_asc(int start, int end) {
  List<int> res = <int>[];
  int i = start;
  while (i <= end) {
    res = (res..add(i));
    i = i + 1;
  }
  return res;
}

List<int> concat_lists(List<int> a, List<int> b) {
  List<int> res = a;
  int i = 0;
  while (i < b.length) {
    res = (res..add(b[i]));
    i = i + 1;
  }
  return res;
}

List<int> swap(List<int> xs, int i, int j) {
  List<int> res = <int>[];
  int k = 0;
  while (k < xs.length) {
    if (k == i) {
    res = (res..add(xs[j]));
  } else {
    if (k == j) {
    res = (res..add(xs[i]));
  } else {
    res = (res..add(xs[k]));
  };
  }
    k = k + 1;
  }
  return res;
}

List<int> generate_gon_ring(int gon_side, List<int> perm) {
  List<int> result = <int>[];
  result = (result..add(perm[0]));
  result = (result..add(perm[1]));
  result = (result..add(perm[2]));
  List<int> extended = (perm..add(perm[1]));
  int magic_number = (gon_side < 5 ? 1 : 2);
  int i = 1;
  while (i < extended.length ~/ 3 + magic_number) {
    result = (result..add(extended[2 * i + 1]));
    result = (result..add(result[3 * i - 1]));
    result = (result..add(extended[2 * i + 2]));
    i = i + 1;
  }
  return result;
}

int min_outer(List<int> numbers) {
  int min_val = numbers[0];
  int i = 3;
  while (i < numbers.length) {
    if (numbers[i] < min_val) {
    min_val = numbers[i];
  }
    i = i + 3;
  }
  return min_val;
}

bool is_magic_gon(List<int> numbers) {
  if (numbers.length % 3 != 0) {
    return false;
  }
  if (min_outer(numbers) != numbers[0]) {
    return false;
  }
  int total = numbers[0] + numbers[1] + numbers[2];
  int i = 3;
  while (i < numbers.length) {
    if (numbers[i] + numbers[i + 1] + numbers[i + 2] != total) {
    return false;
  }
    i = i + 3;
  }
  return true;
}

String permute_search(List<int> nums, int start, int gon_side, String current_max) {
  if (start == nums.length) {
    List<int> ring = generate_gon_ring(gon_side, nums);
    if (is_magic_gon(ring)) {
    String s = "";
    int k = 0;
    while (k < ring.length) {
    s = s + _str(ring[k]);
    k = k + 1;
  };
    if (s.compareTo(current_max) > 0) {
    return s;
  };
  };
    return current_max;
  }
  String res = current_max;
  int i = start;
  while (i < nums.length) {
    List<int> swapped = swap(nums, start, i);
    String candidate = permute_search(swapped, start + 1, gon_side, res);
    if (candidate.compareTo(res) > 0) {
    res = candidate;
  }
    i = i + 1;
  }
  return res;
}

String solution(int gon_side) {
  if (gon_side < 3 || gon_side > 5) {
    return "";
  }
  List<int> small = range_desc(gon_side + 1, 1);
  List<int> big = range_asc(gon_side + 2, gon_side * 2);
  List<int> numbers = concat_lists(small, big);
  String max_str = permute_search(numbers, 0, gon_side, "");
  return max_str;
}

void main() {
  print(solution(5));
}
