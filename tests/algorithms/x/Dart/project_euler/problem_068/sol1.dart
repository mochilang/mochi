// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<int> range_desc(int start, int end) {
  List<int> res = <int>[];
  int i = start;
  while (i >= end) {
    res = [...res, i];
    i = i - 1;
  }
  return res;
}

List<int> range_asc(int start, int end) {
  List<int> res = <int>[];
  int i = start;
  while (i <= end) {
    res = [...res, i];
    i = i + 1;
  }
  return res;
}

List<int> concat_lists(List<int> a, List<int> b) {
  List<int> res = a;
  int i = 0;
  while (i < b.length) {
    res = [...res, b[i]];
    i = i + 1;
  }
  return res;
}

List<int> swap(List<int> xs, int i, int j) {
  List<int> res = <int>[];
  int k = 0;
  while (k < xs.length) {
    if (k == i) {
    res = [...res, xs[j]];
  } else {
    if (k == j) {
    res = [...res, xs[i]];
  } else {
    res = [...res, xs[k]];
  };
  }
    k = k + 1;
  }
  return res;
}

List<int> generate_gon_ring(int gon_side, List<int> perm) {
  List<int> result = <int>[];
  result = [...result, perm[0]];
  result = [...result, perm[1]];
  result = [...result, perm[2]];
  List<int> extended = [...perm, perm[1]];
  int magic_number = (gon_side < 5 ? 1 : 2);
  int i = 1;
  while (i < extended.length ~/ 3 + magic_number) {
    result = [...result, extended[2 * i + 1]];
    result = [...result, result[3 * i - 1]];
    result = [...result, extended[2 * i + 2]];
    i = i + 1;
  }
  return result;
}

int min_outer(List<int> numbers) {
  int min_val = numbers[0];
  int i = 3;
  while (i < numbers.length) {
    if (numbers[i] < min_val) {
    min_val = numbers[i];
  }
    i = i + 3;
  }
  return min_val;
}

bool is_magic_gon(List<int> numbers) {
  if (numbers.length % 3 != 0) {
    return false;
  }
  if (min_outer(numbers) != numbers[0]) {
    return false;
  }
  int total = numbers[0] + numbers[1] + numbers[2];
  int i = 3;
  while (i < numbers.length) {
    if (numbers[i] + numbers[i + 1] + numbers[i + 2] != total) {
    return false;
  }
    i = i + 3;
  }
  return true;
}

String permute_search(List<int> nums, int start, int gon_side, String current_max) {
  if (start == nums.length) {
    List<int> ring = generate_gon_ring(gon_side, nums);
    if (is_magic_gon(ring)) {
    String s = "";
    int k = 0;
    while (k < ring.length) {
    s = s + _str(ring[k]);
    k = k + 1;
  };
    if (s.compareTo(current_max) > 0) {
    return s;
  };
  };
    return current_max;
  }
  String res = current_max;
  int i = start;
  while (i < nums.length) {
    List<int> swapped = swap(nums, start, i);
    String candidate = permute_search(swapped, start + 1, gon_side, res);
    if (candidate.compareTo(res) > 0) {
    res = candidate;
  }
    i = i + 1;
  }
  return res;
}

String solution(int gon_side) {
  if (gon_side < 3 || gon_side > 5) {
    return "";
  }
  List<int> small = range_desc(gon_side + 1, 1);
  List<int> big = range_asc(gon_side + 2, gon_side * 2);
  List<int> numbers = concat_lists(small, big);
  String max_str = permute_search(numbers, 0, gon_side, "");
  return max_str;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(solution(5));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
