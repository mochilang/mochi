// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int int_sqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

bool is_prime(int number) {
  if (1 < number && number < 4) {
    return true;
  }
  if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  }
  int i = 5;
  int limit = int_sqrt(number);
  while (i <= limit) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

List<int> compute_nums(int n) {
  if (n <= 0) {
    ;
  }
  List<int> list_nums = <int>[];
  int _num = 3;
  while (list_nums.length < n) {
    if (!is_prime(_num)) {
    int i = 0;
    bool found = false;
    while (2 * i * i <= _num) {
    int rem = _num - 2 * i * i;
    if (is_prime(rem)) {
    found = true;
    break;
  }
    i = i + 1;
  };
    if (!found) {
    list_nums = (list_nums..add(_num));
  };
  }
    _num = _num + 2;
  }
  return list_nums;
}

int solution() {
  return compute_nums(1)[0];
}

void main() {
  print(_str(solution()));
}
