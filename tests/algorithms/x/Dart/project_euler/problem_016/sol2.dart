// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int power) {
  List<int> digits = <int>[];
  digits = (digits..add(1));
  int i = 0;
  while (i < power) {
    int carry = 0;
    int j = 0;
    while (j < digits.length) {
    int v = digits[j] * 2 + carry;
    while (digits.length <= j) { digits.add(0); } digits[j] = v % 10;
    carry = v ~/ 10;
    j = j + 1;
  }
    if (carry > 0) {
    digits = (digits..add(carry));
  }
    i = i + 1;
  }
  int sum = 0;
  int k = 0;
  while (k < digits.length) {
    sum = sum + digits[k];
    k = k + 1;
  }
  return sum;
}

void main() {
  print(_str(solution(1000)));
  print(_str(solution(50)));
  print(_str(solution(20)));
  print(_str(solution(15)));
}
