// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int power_of_two(int exp) {
  int result = 1;
  int i = 0;
  while (i < exp) {
    result = result * 2;
    i = i + 1;
  }
  return result;
}

int solution(int power) {
  int _num = power_of_two(power);
  String string_num = _str(_num);
  int sum = 0;
  int i = 0;
  while (i < string_num.length) {
    sum = sum + ((string_num.substring(i, i + 1)).codeUnitAt(0));
    i = i + 1;
  }
  return sum;
}

void main() {
  print(_str(solution(1000)));
  print(_str(solution(50)));
  print(_str(solution(20)));
  print(_str(solution(15)));
}
