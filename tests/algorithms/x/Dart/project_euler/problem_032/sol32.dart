// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String join_digits(List<String> xs) {
  String s = "";
  int i = 0;
  while (i < xs.length) {
    s = s + xs[i];
    i = i + 1;
  }
  return s;
}

int digits_to_int(List<String> xs) {
  return int.parse(join_digits(xs));
}

bool contains_int(List<int> xs, int value) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> remove_at(List<String> xs, int idx) {
  List<String> res = <String>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = (res..add(xs[i]));
  }
    i = i + 1;
  }
  return res;
}

bool is_combination_valid(List<String> comb) {
  int prod = digits_to_int(comb.sublist(5, 9));
  int mul2 = digits_to_int(comb.sublist(0, 2));
  int mul3 = digits_to_int(comb.sublist(2, 5));
  if (mul2 * mul3 == prod) {
    return true;
  }
  int mul1 = digits_to_int(comb.sublist(0, 1));
  int mul4 = digits_to_int(comb.sublist(1, 5));
  return mul1 * mul4 == prod;
}

List<int> search(List<String> prefix, List<String> remaining, List<int> products) {
  if (remaining.length == 0) {
    if (is_combination_valid(prefix)) {
    int p = digits_to_int(prefix.sublist(5, 9));
    if (!contains_int(products, p)) {
    products = (products..add(p));
  };
  };
    return products;
  }
  int i = 0;
  while (i < remaining.length) {
    List<String> next_prefix = (prefix..add(remaining[i]));
    List<String> next_remaining = remove_at(remaining, i);
    products = search(next_prefix, next_remaining, products);
    i = i + 1;
  }
  return products;
}

List<String> digits = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
List<int> products = <int>[];
int total = 0;
int i = 0;
void main() {
  products = search(<String>[], digits, products);
  while (i < products.length) {
    total = total + products[i];
    i = i + 1;
  }
  print(_str(total));
}
