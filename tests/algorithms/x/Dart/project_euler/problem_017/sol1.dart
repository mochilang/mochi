// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int n) {
  List<int> ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8];
  List<int> tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6];
  int count = 0;
  int i = 1;
  while (i <= n) {
    if (i < 1000) {
    if (i >= 100) {
    count = count + ones_counts[i ~/ 100] + 7;
    if (i % 100 != 0) {
    count = count + 3;
  };
  };
    int remainder = i % 100;
    if (remainder > 0 && remainder < 20) {
    count = count + ones_counts[remainder];
  } else {
    count = count + ones_counts[i % 10];
    count = count + tens_counts[(remainder - i % 10) ~/ 10];
  };
  } else {
    count = count + ones_counts[i ~/ 1000] + 8;
  }
    i = i + 1;
  }
  return count;
}

void main() {
  print(_str(solution(1000)));
  print(_str(solution(5)));
}
