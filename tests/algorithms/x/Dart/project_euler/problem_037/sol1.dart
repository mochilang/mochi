// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_prime(int number) {
  if (1 < number && number < 4) {
    return true;
  }
  if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

List<int> list_truncated_nums(int n) {
  String str_num = _str(n);
  List<int> list_nums = [n];
  int i = 1;
  int length = str_num.length;
  while (i < length) {
    int right = int.parse(_substr(str_num, i, length));
    int left = int.parse(_substr(str_num, 0, length - i));
    list_nums = (list_nums..add(right));
    list_nums = (list_nums..add(left));
    i = i + 1;
  }
  return list_nums;
}

bool validate(int n) {
  String s = _str(n);
  int length = s.length;
  if (length > 3) {
    int last3 = int.parse(_substr(s, length - 3, length));
    int first3 = int.parse(_substr(s, 0, 3));
    if (!(is_prime(last3) && is_prime(first3))) {
    return false;
  };
  }
  return true;
}

List<int> compute_truncated_primes(int count) {
  List<int> list_truncated_primes = <int>[];
  int _num = 13;
  while (list_truncated_primes.length != count) {
    if (validate(_num)) {
    List<int> list_nums = list_truncated_nums(_num);
    bool all_prime = true;
    int j = 0;
    while (j < list_nums.length) {
    if (!is_prime(list_nums[j])) {
    all_prime = false;
    break;
  }
    j = j + 1;
  };
    if (all_prime) {
    list_truncated_primes = (list_truncated_primes..add(_num));
  };
  }
    _num = _num + 2;
  }
  return list_truncated_primes;
}

int solution() {
  List<int> primes = compute_truncated_primes(11);
  int total = 0;
  int i = 0;
  while (i < primes.length) {
    total = total + primes[i];
    i = i + 1;
  }
  return total;
}

void main() {
  print("sum(compute_truncated_primes(11)) = " + _str(solution()));
}
