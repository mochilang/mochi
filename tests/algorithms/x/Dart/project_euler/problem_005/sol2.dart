// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

int gcd(int a, int b) {
  int x = a;
  int y = b;
  while (y != 0) {
    int t = y;
    y = x % y;
    x = t;
  }
  return x;
}

int lcm(int x, int y) {
  return x * y ~/ gcd(x, y);
}

int solution(int n) {
  int g = 1;
  int i = 1;
  while (i <= n) {
    g = lcm(g, i);
    i = i + 1;
  }
  return g;
}

void _main() {
  print(_str(solution(20)));
}

void _start() {
  _main();
}

void main() => _start();
