// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int pow_mod(int base, int exponent, int modulus) {
  int result = 1;
  int b = base % modulus;
  int e = exponent;
  while (e > 0) {
    if (e % 2 == 1) {
    result = result * b % modulus;
  }
    b = b * b % modulus;
    e = e ~/ 2;
  }
  return result;
}

String solution() {
  int modulus = 10000000000;
  int total = 0;
  int i = 1;
  while (i <= 1000) {
    total = (total + pow_mod(i, i, modulus)) % modulus;
    i = i + 1;
  }
  String s = _str(total);
  while (s.length < 10) {
    s = "0" + s;
  }
  return s;
}

void main() {
  print(solution());
}
