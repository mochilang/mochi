// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_prime(int number) {
  if (1 < number && number < 4) {
    return true;
  } else {
    if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  };
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

int solution(int a_limit, int b_limit) {
  int longest_len = 0;
  int longest_a = 0;
  int longest_b = 0;
  int a = -1 * a_limit + 1;
  while (a < a_limit) {
    int b = 2;
    while (b < b_limit) {
    if (is_prime(b)) {
    int count = 0;
    int n = 0;
    while (is_prime(n * n + a * n + b)) {
    count = count + 1;
    n = n + 1;
  };
    if (count > longest_len) {
    longest_len = count;
    longest_a = a;
    longest_b = b;
  };
  }
    b = b + 1;
  }
    a = a + 1;
  }
  return longest_a * longest_b;
}

void main() {
  print(_str(solution(1000, 1000)));
}
