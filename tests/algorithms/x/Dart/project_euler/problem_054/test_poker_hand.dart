// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

class Hand {
  int rank;
  List<int> values;
  Hand({required this.rank, required this.values});
}

List<String> split(String s, String sep) {
  List<String> parts = <String>[];
  String cur = "";
  int i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && _substr(s, i, i + sep.length) == sep) {
    parts = (parts..add(cur));
    cur = "";
    i = i + sep.length;
  } else {
    cur = cur + _substr(s, i, i + 1);
    i = i + 1;
  }
  }
  parts = (parts..add(cur));
  return parts;
}

int card_value(String ch) {
  if (ch == "A") {
    return 14;
  } else {
    if (ch == "K") {
    return 13;
  } else {
    if (ch == "Q") {
    return 12;
  } else {
    if (ch == "J") {
    return 11;
  } else {
    if (ch == "T") {
    return 10;
  } else {
    if (ch == "9") {
    return 9;
  } else {
    if (ch == "8") {
    return 8;
  } else {
    if (ch == "7") {
    return 7;
  } else {
    if (ch == "6") {
    return 6;
  } else {
    if (ch == "5") {
    return 5;
  } else {
    if (ch == "4") {
    return 4;
  } else {
    if (ch == "3") {
    return 3;
  } else {
    return 2;
  };
  };
  };
  };
  };
  };
  };
  };
  };
  };
  };
  }
}

Hand parse_hand(String hand) {
  List<int> counts = <int>[];
  int i = 0;
  while (i <= 14) {
    counts = (counts..add(0));
    i = i + 1;
  }
  List<String> suits = <String>[];
  for (var card in hand.split(" ")) {
    int v = card_value(_substr(card, 0, 1));
    while (counts.length <= v) { counts.add(0); } counts[v] = counts[v] + 1;
    suits = (suits..add(_substr(card, 1, 2)));
  }
  List<int> vals = <int>[];
  int v = 14;
  while (v >= 2) {
    int c = counts[v];
    int k = 0;
    while (k < c) {
    vals = (vals..add(v));
    k = k + 1;
  }
    v = v - 1;
  }
  bool is_straight = false;
  if (vals.length == 5 && vals[0] == 14 && vals[1] == 5 && vals[2] == 4 && vals[3] == 3 && vals[4] == 2) {
    is_straight = true;
    while (vals.length <= 0) { vals.add(0); } vals[0] = 5;
    while (vals.length <= 1) { vals.add(0); } vals[1] = 4;
    while (vals.length <= 2) { vals.add(0); } vals[2] = 3;
    while (vals.length <= 3) { vals.add(0); } vals[3] = 2;
    while (vals.length <= 4) { vals.add(0); } vals[4] = 14;
  } else {
    is_straight = true;
    int j = 0;
    while (j < 4) {
    if (vals[j] - vals[j + 1] != 1) {
    is_straight = false;
  }
    j = j + 1;
  };
  }
  bool is_flush = true;
  String s0 = suits[0];
  int t = 1;
  while (t < suits.length) {
    if (suits[t] != s0) {
    is_flush = false;
  }
    t = t + 1;
  }
  int four_val = 0;
  int three_val = 0;
  List<int> pair_vals = <int>[];
  v = 14;
  while (v >= 2) {
    if (counts[v] == 4) {
    four_val = v;
  } else {
    if (counts[v] == 3) {
    three_val = v;
  } else {
    if (counts[v] == 2) {
    pair_vals = (pair_vals..add(v));
  };
  };
  }
    v = v - 1;
  }
  int rank = 1;
  if (is_flush && is_straight && vals[0] == 14 && vals[4] == 10) {
    rank = 10;
  } else {
    if (is_flush && is_straight) {
    rank = 9;
  } else {
    if (four_val != 0) {
    rank = 8;
  } else {
    if (three_val != 0 && pair_vals.length == 1) {
    rank = 7;
  } else {
    if (is_flush) {
    rank = 6;
  } else {
    if (is_straight) {
    rank = 5;
  } else {
    if (three_val != 0) {
    rank = 4;
  } else {
    if (pair_vals.length == 2) {
    rank = 3;
  } else {
    if (pair_vals.length == 1) {
    rank = 2;
  } else {
    rank = 1;
  };
  };
  };
  };
  };
  };
  };
  };
  }
  return Hand(rank: rank, values: vals);
}

String compare(Hand a, Hand b) {
  if (a.rank > b.rank) {
    return "Win";
  }
  if (a.rank < b.rank) {
    return "Loss";
  }
  int i = 0;
  while (i < a.values.length) {
    if (a.values[i] > b.values[i]) {
    return "Win";
  }
    if (a.values[i] < b.values[i]) {
    return "Loss";
  }
    i = i + 1;
  }
  return "Tie";
}

void _main() {
  List<List<String>> tests = [["2H 3H 4H 5H 6H", "KS AS TS QS JS", "Loss"], ["2H 3H 4H 5H 6H", "AS AD AC AH JD", "Win"], ["AS AH 2H AD AC", "JS JD JC JH 3D", "Win"], ["2S AH 2H AS AC", "JS JD JC JH AD", "Loss"], ["2S AH 2H AS AC", "2H 3H 5H 6H 7H", "Win"]];
  for (List<String> t in tests) {
    String res = compare(parse_hand(t[0]), parse_hand(t[1]));
    print(res + " expected " + t[2]);
  }
}

void _start() {
  _main();
}

void main() => _start();
