// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> DIGIT_FACTORIALS = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
Map<int, int> cache_sum_digit_factorials = {145: 145};
Map<int, int> chain_length_cache = {145: 0, 169: 3, 36301: 3, 1454: 3, 871: 2, 45361: 2, 872: 2};
int sum_digit_factorials(int n) {
  if (cache_sum_digit_factorials.containsKey(n)) {
    return (cache_sum_digit_factorials[n] ?? 0);
  }
  int m = n;
  int ret = 0;
  if (m == 0) {
    ret = DIGIT_FACTORIALS[0];
  }
  while (m > 0) {
    int digit = m % 10;
    ret = ret + DIGIT_FACTORIALS[digit];
    m = m ~/ 10;
  }
  cache_sum_digit_factorials[n] = ret;
  return ret;
}

int chain_length(int n) {
  if (chain_length_cache.containsKey(n)) {
    return (chain_length_cache[n] ?? 0);
  }
  List<int> chain = <int>[];
  Map<int, int> seen = <int, int>{};
  int current = n;
  while (true) {
    if (chain_length_cache.containsKey(current)) {
    int known = chain_length_cache[current]!;
    int total = known;
    int i = chain.length - 1;
    while (i >= 0) {
    total = total + 1;
    chain_length_cache[chain[i]] = total;
    i = i - 1;
  };
    return (chain_length_cache[n] ?? 0);
  }
    if (seen.containsKey(current)) {
    int loop_start = seen[current]!;
    int loop_len = chain.length - loop_start;
    int i = chain.length - 1;
    int ahead = 0;
    while (i >= 0) {
    if (i >= loop_start) {
    chain_length_cache[chain[i]] = loop_len;
  } else {
    chain_length_cache[chain[i]] = loop_len + (ahead + 1);
  }
    ahead = ahead + 1;
    i = i - 1;
  };
    return (chain_length_cache[n] ?? 0);
  }
    seen[current] = chain.length;
    chain = (chain..add(current));
    current = sum_digit_factorials(current);
  }
}

int solution(int num_terms, int max_start) {
  int count = 0;
  int i = 1;
  while (i < max_start) {
    if (chain_length(i) == num_terms) {
    count = count + 1;
  }
    i = i + 1;
  }
  return count;
}

void main() {
  print("solution() = " + _str(solution(60, 1000)));
}
