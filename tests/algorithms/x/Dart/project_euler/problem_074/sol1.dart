// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<int> DIGIT_FACTORIALS = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
Map<int, int> cache_sum_digit_factorials = {145: 145};
Map<int, int> chain_length_cache = {145: 0, 169: 3, 36301: 3, 1454: 3, 871: 2, 45361: 2, 872: 2};
int sum_digit_factorials(int n) {
  if (cache_sum_digit_factorials.containsKey(n)) {
    return (cache_sum_digit_factorials[n] ?? 0);
  }
  int m = n;
  int ret = 0;
  if (m == 0) {
    ret = DIGIT_FACTORIALS[0];
  }
  while (m > 0) {
    int digit = m % 10;
    ret = ret + DIGIT_FACTORIALS[digit];
    m = m ~/ 10;
  }
  cache_sum_digit_factorials[n] = ret;
  return ret;
}

int chain_length(int n) {
  if (chain_length_cache.containsKey(n)) {
    return (chain_length_cache[n] ?? 0);
  }
  List<int> chain = <int>[];
  Map<int, int> seen = <int, int>{};
  int current = n;
  while (true) {
    if (chain_length_cache.containsKey(current)) {
    int known = chain_length_cache[current]!;
    int total = known;
    int i = chain.length - 1;
    while (i >= 0) {
    total = total + 1;
    chain_length_cache[chain[i]] = total;
    i = i - 1;
  };
    return (chain_length_cache[n] ?? 0);
  }
    if (seen.containsKey(current)) {
    int loop_start = seen[current]!;
    int loop_len = chain.length - loop_start;
    int i = chain.length - 1;
    int ahead = 0;
    while (i >= 0) {
    if (i >= loop_start) {
    chain_length_cache[chain[i]] = loop_len;
  } else {
    chain_length_cache[chain[i]] = loop_len + (ahead + 1);
  }
    ahead = ahead + 1;
    i = i - 1;
  };
    return (chain_length_cache[n] ?? 0);
  }
    seen[current] = chain.length;
    chain = [...chain, current];
    current = sum_digit_factorials(current);
  }
}

int solution(int num_terms, int max_start) {
  int count = 0;
  int i = 1;
  while (i < max_start) {
    if (chain_length(i) == num_terms) {
    count = count + 1;
  }
    i = i + 1;
  }
  return count;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("solution() = " + _str(solution(60, 1000)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
