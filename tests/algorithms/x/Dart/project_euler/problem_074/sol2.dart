// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> DIGIT_FACTORIAL = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
int digit_factorial_sum(int number) {
  if (number < 0) {
    ;
  }
  if (number == 0) {
    return DIGIT_FACTORIAL[0];
  }
  int n = number;
  int total = 0;
  while (n > 0) {
    int digit = n % 10;
    total = total + DIGIT_FACTORIAL[digit];
    n = n ~/ 10;
  }
  return total;
}

int chain_len(int n, int limit) {
  Map<int, bool> seen = <int, bool>{};
  int length = 0;
  int cur = n;
  while (seen.containsKey(cur) == false && length <= limit) {
    seen[cur] = true;
    length = length + 1;
    cur = digit_factorial_sum(cur);
  }
  return length;
}

int solution(int chain_length, int number_limit) {
  if (chain_length <= 0 || number_limit <= 0) {
    ;
  }
  int count = 0;
  int start = 1;
  while (start < number_limit) {
    if (chain_len(start, chain_length) == chain_length) {
    count = count + 1;
  }
    start = start + 1;
  }
  return count;
}

void main() {
  print(_str(solution(60, 1000000)));
}
