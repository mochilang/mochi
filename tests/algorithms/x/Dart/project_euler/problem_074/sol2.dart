// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();


Never _error(dynamic msg) {
  throw Exception(msg.toString());
}

List<int> DIGIT_FACTORIAL = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
int digit_factorial_sum(int number) {
  if (number < 0) {
    _error("Parameter number must be greater than or equal to 0");
  }
  if (number == 0) {
    return DIGIT_FACTORIAL[0];
  }
  int n = number;
  int total = 0;
  while (n > 0) {
    int digit = n % 10;
    total = total + DIGIT_FACTORIAL[digit];
    n = n ~/ 10;
  }
  return total;
}

int chain_len(int n, int limit) {
  Map<int, bool> seen = <int, bool>{};
  int length = 0;
  int cur = n;
  while (seen.containsKey(cur) == false && length <= limit) {
    seen[cur] = true;
    length = length + 1;
    cur = digit_factorial_sum(cur);
  }
  return length;
}

int solution(int chain_length, int number_limit) {
  if (chain_length <= 0 || number_limit <= 0) {
    _error("Parameters chain_length and number_limit must be greater than 0");
  }
  int count = 0;
  int start = 1;
  while (start < number_limit) {
    if (chain_len(start, chain_length) == chain_length) {
    count = count + 1;
  }
    start = start + 1;
  }
  return count;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(solution(60, 1000000)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
