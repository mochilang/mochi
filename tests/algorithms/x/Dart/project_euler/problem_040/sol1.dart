// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution() {
  List<int> targets = [1, 10, 100, 1000, 10000, 100000, 1000000];
  int idx = 0;
  int product = 1;
  int count = 0;
  int i = 1;
  while (idx < targets.length) {
    String s = _str(i);
    int j = 0;
    while (j < s.length) {
    count = count + 1;
    if (count == targets[idx]) {
    product = product * ((s.substring(j, j + 1)).codeUnitAt(0));
    idx = idx + 1;
    if (idx == targets.length) {
    break;
  };
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return product;
}

void test_solution() {
  if (solution() != 210) {
    ;
  }
}

void _main() {
  test_solution();
  print(_str(solution()));
}

void _start() {
  _main();
}

void main() => _start();
