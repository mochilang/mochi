// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) => v.toString();

int parse_int(String s) {
  int value = 0;
  int i = 0;
  while (i < s.length) {
    String c = _substr(s, i, i + 1);
    value = value * 10 + ((int.tryParse(c.toString()) ?? c.toString().codeUnitAt(0)));
    i = i + 1;
  }
  return value;
}

String join(List<String> xs) {
  String s = "";
  int i = 0;
  while (i < xs.length) {
    s = s + xs[i];
    i = i + 1;
  }
  return s;
}

bool contains(List<String> xs, String c) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == c) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int index_of(List<String> xs, String c) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == c) {
    return i;
  }
    i = i + 1;
  }
  return -1;
}

List<String> remove_at(List<String> xs, int idx) {
  List<String> res = <String>[];
  int i = 0;
  while (i < xs.length) {
    if (i != idx) {
    res = [...res, xs[i]];
  }
    i = i + 1;
  }
  return res;
}

List<String> unique_chars(List<String> logins) {
  List<String> chars = <String>[];
  int i = 0;
  while (i < logins.length) {
    String login = logins[i];
    int j = 0;
    while (j < login.length) {
    String c = _substr(login, j, j + 1);
    if (!contains(chars, c)) {
    chars = [...chars, c];
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return chars;
}

bool satisfies(List<String> permutation, List<String> logins) {
  int i = 0;
  while (i < logins.length) {
    String login = logins[i];
    int i0 = index_of(permutation, _substr(login, 0, 0 + 1));
    int i1 = index_of(permutation, _substr(login, 1, 1 + 1));
    int i2 = index_of(permutation, _substr(login, 2, 2 + 1));
    if (!(i0 < i1 && i1 < i2)) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

String search(List<String> chars, List<String> current, List<String> logins) {
  if (chars.length == 0) {
    if (satisfies(current, logins)) {
    return join(current);
  };
    return "";
  }
  int i = 0;
  while (i < chars.length) {
    String c = chars[i];
    List<String> rest = remove_at(chars, i);
    List<String> next = [...current, c];
    String res = search(rest, next, logins);
    if (res != "") {
    return res;
  }
    i = i + 1;
  }
  return "";
}

int find_secret_passcode(List<String> logins) {
  List<String> chars = unique_chars(logins);
  String s = search(chars, <String>[], logins);
  if (s == "") {
    return -1;
  }
  return parse_int(s);
}

List<String> logins1 = ["135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"];
List<String> logins2 = ["426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"];
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(find_secret_passcode(logins1)));
  print(_str(find_secret_passcode(logins2)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
