// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_prime(int number) {
  if (number < 2) {
    return false;
  }
  if (number < 4) {
    return true;
  }
  if (number % 2 == 0 || number % 3 == 0) {
    return false;
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

int solution(int n) {
  if (n <= 2) {
    return 0;
  }
  int total = 2;
  int _num = 3;
  while (_num < n) {
    if (is_prime(_num)) {
    total = total + _num;
  }
    _num = _num + 2;
  }
  return total;
}

int result = solution(1000);
void main() {
  print("solution() = " + _str(result));
}
