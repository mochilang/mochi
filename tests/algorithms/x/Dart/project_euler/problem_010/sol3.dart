// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int isqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

int solution(int n) {
  List<bool> sieve = <bool>[];
  int i = 0;
  while (i <= n) {
    sieve = [...sieve, false];
    i = i + 1;
  }
  while (sieve.length <= 0) { sieve.add(false); } sieve[0] = true;
  while (sieve.length <= 1) { sieve.add(false); } sieve[1] = true;
  int limit = isqrt(n);
  int p = 2;
  while (p <= limit) {
    if (!sieve[p]) {
    int j = p * p;
    while (j <= n) {
    while (sieve.length <= j) { sieve.add(false); } sieve[j] = true;
    j = j + p;
  };
  }
    p = p + 1;
  }
  int sum = 0;
  int k = 2;
  while (k < n) {
    if (!sieve[k]) {
    sum = sum + k;
  }
    k = k + 1;
  }
  return sum;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(solution(20000)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
