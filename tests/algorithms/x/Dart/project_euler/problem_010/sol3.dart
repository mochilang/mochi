// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int isqrt(int n) {
  int r = 0;
  while ((r + 1) * (r + 1) <= n) {
    r = r + 1;
  }
  return r;
}

int solution(int n) {
  List<bool> sieve = <bool>[];
  int i = 0;
  while (i <= n) {
    sieve = (sieve..add(false));
    i = i + 1;
  }
  while (sieve.length <= 0) { sieve.add(false); } sieve[0] = true;
  while (sieve.length <= 1) { sieve.add(false); } sieve[1] = true;
  int limit = isqrt(n);
  int p = 2;
  while (p <= limit) {
    if (!sieve[p]) {
    int j = p * p;
    while (j <= n) {
    while (sieve.length <= j) { sieve.add(false); } sieve[j] = true;
    j = j + p;
  };
  }
    p = p + 1;
  }
  int sum = 0;
  int k = 2;
  while (k < n) {
    if (!sieve[k]) {
    sum = sum + k;
  }
    k = k + 1;
  }
  return sum;
}

void main() {
  print(_str(solution(20000)));
}
