// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int n) {
  Map<int, bool> composite = <int, bool>{};
  int total = 0;
  int _num = 2;
  while (_num < n) {
    if (!(composite[_num] ?? false)) {
    total = total + _num;
    int multiple = _num * _num;
    while (multiple < n) {
    composite[multiple] = true;
    multiple = multiple + _num;
  };
  }
    _num = _num + 1;
  }
  return total;
}

void main() {
  print(_str(solution(2000000)));
}
