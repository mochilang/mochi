// Generated by Mochi transpiler
import 'dart:io';

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int fibonacci(int n) {
  if (n == 1) {
    return 0;
  }
  if (n == 2) {
    return 1;
  }
  int a = 0;
  int b = 1;
  int i = 2;
  while (i <= n) {
    int c = a + b;
    a = b;
    b = c;
    i = i + 1;
  }
  return b;
}

int fibonacci_digits_index(int n) {
  int digits = 0;
  int index = 2;
  while (digits < n) {
    index = index + 1;
    int fib = fibonacci(index);
    digits = _str(fib).length;
  }
  return index;
}

int solution(int n) {
  return fibonacci_digits_index(n);
}

void _main() {
  int n = int.parse(stdin.readLineSync() ?? '');
  print(solution(n));
}

void _start() {
  _main();
}

void main() => _start();
