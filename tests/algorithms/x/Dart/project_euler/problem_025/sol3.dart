// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int num_digits(int x) {
  int count = 0;
  int n = x;
  while (n > 0) {
    count = count + 1;
    n = n ~/ 10;
  }
  return count;
}

int solution(int n) {
  int f1 = 1;
  int f2 = 1;
  int index = 2;
  while (true) {
    int f = f1 + f2;
    f1 = f2;
    f2 = f;
    index = index + 1;
    if (num_digits(f) == n) {
    break;
  }
  }
  return index;
}

void main() {
  print("solution(1000) = " + _str(solution(1000)));
  print("solution(100) = " + _str(solution(100)));
  print("solution(50) = " + _str(solution(50)));
  print("solution(3) = " + _str(solution(3)));
}
