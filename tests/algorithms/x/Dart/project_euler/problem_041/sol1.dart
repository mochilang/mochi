// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_prime(int number) {
  if (1 < number && number < 4) {
    return true;
  } else {
    if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  };
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

List<int> remove_at(List<int> xs, int index) {
  List<int> res = <int>[];
  int i = 0;
  while (i < xs.length) {
    if (i != index) {
    res = (res..add(xs[i]));
  }
    i = i + 1;
  }
  return res;
}

List<int> collect_primes(List<int> nums, int current, List<int> primes) {
  if (nums.length == 0) {
    if (is_prime(current)) {
    primes = (primes..add(current));
  };
    return primes;
  }
  int i = 0;
  List<int> res = primes;
  while (i < nums.length) {
    int digit = nums[i];
    List<int> remaining = remove_at(nums, i);
    res = collect_primes(remaining, current * 10 + digit, res);
    i = i + 1;
  }
  return res;
}

int max_list(List<int> nums) {
  int m = 0;
  int i = 0;
  while (i < nums.length) {
    if (nums[i] > m) {
    m = nums[i];
  }
    i = i + 1;
  }
  return m;
}

int solution(int n) {
  List<int> digits = <int>[];
  int i = 1;
  while (i <= n) {
    digits = (digits..add(i));
    i = i + 1;
  }
  List<int> primes = collect_primes(digits, 0, ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList());
  if (primes.length == 0) {
    return 0;
  }
  return max_list(primes);
}

void main() {
  print("solution() = " + _str(solution(7)));
}
