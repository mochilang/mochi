// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int xor(int a, int b) {
  int res = 0;
  int bit = 1;
  int x = a;
  int y = b;
  while (x > 0 || y > 0) {
    int abit = x % 2;
    int bbit = y % 2;
    if (abit != bbit) {
    res = res + bit;
  }
    x = x ~/ 2;
    y = y ~/ 2;
    bit = bit * 2;
  }
  return res;
}

String ascii_chars = " !\"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
String chr(int code) {
  if (code == 10) {
    return "\n";
  }
  if (code == 13) {
    return "\r";
  }
  if (code == 9) {
    return "	";
  }
  if (code >= 32 && code < 127) {
    return _substr(ascii_chars, code - 32, code - 31);
  }
  return "";
}

int ord(String ch) {
  if (ch == "\n") {
    return 10;
  }
  if (ch == "\r") {
    return 13;
  }
  if (ch == "	") {
    return 9;
  }
  int i = 0;
  while (i < ascii_chars.length) {
    if (_substr(ascii_chars, i, i + 1) == ch) {
    return 32 + i;
  }
    i = i + 1;
  }
  return 0;
}

bool is_valid_ascii(int code) {
  if (code >= 32 && code <= 126) {
    return true;
  }
  if (code == 9 || code == 10 || code == 13) {
    return true;
  }
  return false;
}

List<int> LOWERCASE_INTS = <int>[];
int i = 97;
List<String> COMMON_WORDS = ["the", "be", "to", "of", "and", "in", "that", "have"];
String? try_key(List<int> ciphertext, List<int> key) {
  String decoded = "";
  int i = 0;
  int klen = key.length;
  while (i < ciphertext.length) {
    int decodedchar = xor(ciphertext[i], key[i % klen]);
    if (!is_valid_ascii(decodedchar)) {
    return null;
  }
    decoded = decoded + chr(decodedchar);
    i = i + 1;
  }
  return decoded;
}

List<String> filter_valid_chars(List<int> ciphertext) {
  List<String> possibles = <String>[];
  int i = 0;
  while (i < LOWERCASE_INTS.length) {
    int j = 0;
    while (j < LOWERCASE_INTS.length) {
    int k = 0;
    while (k < LOWERCASE_INTS.length) {
    List<int> key = [LOWERCASE_INTS[i], LOWERCASE_INTS[j], LOWERCASE_INTS[k]];
    String? decoded = try_key(ciphertext, key);
    if (decoded != null) {
    possibles = List<String>.from((possibles..add(decoded)));
  }
    k = k + 1;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return possibles;
}

bool contains(String s, String sub) {
  int n = s.length;
  int m = sub.length;
  if (m == 0) {
    return true;
  }
  int i = 0;
  while (i <= n - m) {
    int j = 0;
    bool is_match = true;
    while (j < m) {
    if (s.substring(i + j, i + j + 1) != sub.substring(j, j + 1)) {
    is_match = false;
    break;
  }
    j = j + 1;
  }
    if (is_match) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

List<String> filter_common_word(List<String> possibles, String common_word) {
  List<String> res = <String>[];
  int i = 0;
  while (i < possibles.length) {
    String p = possibles[i];
    if (p.toLowerCase().contains(common_word)) {
    res = (res..add(p));
  }
    i = i + 1;
  }
  return res;
}

int solution(List<int> ciphertext) {
  List<String> possibles = filter_valid_chars(ciphertext);
  int i = 0;
  while (i < COMMON_WORDS.length) {
    String word = COMMON_WORDS[i];
    possibles = filter_common_word(possibles, word);
    if (possibles.length == 1) {
    break;
  }
    i = i + 1;
  }
  String decoded_text = possibles[0];
  int sum = 0;
  int j = 0;
  while (j < decoded_text.length) {
    sum = sum + ord(_substr(decoded_text, j, j + 1));
    j = j + 1;
  }
  return sum;
}

List<int> ciphertext = [17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11];
void main() {
  while (i <= 122) {
    LOWERCASE_INTS = (LOWERCASE_INTS..add(i));
    i = i + 1;
  }
  print(_str(solution(ciphertext)));
}
