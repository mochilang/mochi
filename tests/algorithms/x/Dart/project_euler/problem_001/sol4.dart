// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }


Never _error(String msg) {
  throw Exception(msg);
}

bool contains(List<int> xs, int value) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int solution(int n) {
  List<int> zmulti = <int>[];
  List<int> xmulti = <int>[];
  int temp = 1;
  while (true) {
    int result = 3 * temp;
    if (result < n) {
    zmulti = [...zmulti, result];
    temp = temp + 1;
  } else {
    break;
  }
  }
  temp = 1;
  while (true) {
    int result = 5 * temp;
    if (result < n) {
    xmulti = [...xmulti, result];
    temp = temp + 1;
  } else {
    break;
  }
  }
  List<int> collection = <int>[];
  int i = 0;
  while (i < zmulti.length) {
    int v = zmulti[i];
    if (!contains(collection, v)) {
    collection = [...collection, v];
  }
    i = i + 1;
  }
  i = 0;
  while (i < xmulti.length) {
    int v = xmulti[i];
    if (!contains(collection, v)) {
    collection = [...collection, v];
  }
    i = i + 1;
  }
  int total = 0;
  i = 0;
  while (i < collection.length) {
    total = total + collection[i];
    i = i + 1;
  }
  return total;
}

void test_solution() {
  if (solution(3) != 0) {
    _error("solution(3) failed");
  }
  if (solution(4) != 3) {
    _error("solution(4) failed");
  }
  if (solution(10) != 23) {
    _error("solution(10) failed");
  }
  if (solution(600) != 83700) {
    _error("solution(600) failed");
  }
}

void _main() {
  test_solution();
  print("solution() = " + _str(solution(1000)));
}

void _start() {
  _main();
}

void main() => _start();
