// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool contains(List<int> xs, int value) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

int solution(int n) {
  List<int> zmulti = <int>[];
  List<int> xmulti = <int>[];
  int temp = 1;
  while (true) {
    int result = 3 * temp;
    if (result < n) {
    zmulti = (zmulti..add(result));
    temp = temp + 1;
  } else {
    break;
  }
  }
  temp = 1;
  while (true) {
    int result = 5 * temp;
    if (result < n) {
    xmulti = (xmulti..add(result));
    temp = temp + 1;
  } else {
    break;
  }
  }
  List<int> collection = <int>[];
  int i = 0;
  while (i < zmulti.length) {
    int v = zmulti[i];
    if (!collection.contains(v)) {
    collection = (collection..add(v));
  }
    i = i + 1;
  }
  i = 0;
  while (i < xmulti.length) {
    int v = xmulti[i];
    if (!collection.contains(v)) {
    collection = (collection..add(v));
  }
    i = i + 1;
  }
  int total = 0;
  i = 0;
  while (i < collection.length) {
    total = total + collection[i];
    i = i + 1;
  }
  return total;
}

void test_solution() {
  if (solution(3) != 0) {
    ;
  }
  if (solution(4) != 3) {
    ;
  }
  if (solution(10) != 23) {
    ;
  }
  if (solution(600) != 83700) {
    ;
  }
}

void _main() {
  test_solution();
  print("solution() = " + _str(solution(1000)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
