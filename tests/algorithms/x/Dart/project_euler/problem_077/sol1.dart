// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int NUM_PRIMES = 100;
List<int> generate_primes(int limit) {
  List<bool> is_prime = <bool>[];
  int i = 0;
  while (i <= limit) {
    is_prime = (is_prime..add(true));
    i = i + 1;
  }
  while (is_prime.length <= 0) { is_prime.add(false); } is_prime[0] = false;
  while (is_prime.length <= 1) { is_prime.add(false); } is_prime[1] = false;
  i = 2;
  while (i * i <= limit) {
    if (is_prime[i]) {
    int j = i * i;
    while (j <= limit) {
    while (is_prime.length <= j) { is_prime.add(false); } is_prime[j] = false;
    j = j + i;
  };
  }
    i = i + 1;
  }
  List<int> primes = <int>[];
  i = 2;
  while (i <= limit) {
    if (is_prime[i]) {
    primes = (primes..add(i));
  }
    i = i + 1;
  }
  return primes;
}

List<int> primes = generate_primes(NUM_PRIMES);
bool contains(List<int> xs, int value) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

Map<int, List<int>> partition_cache = <int, List<int>>{};
List<int> partition(int n) {
  if (n < 0) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  if (n == 0) {
    return [1];
  }
  if (partition_cache.containsKey(n)) {
    return (partition_cache[n]!);
  }
  List<int> ret = <int>[];
  for (int prime in primes) {
    if (prime > n) {
    continue;
  }
    List<int> subs = partition(n - prime);
    for (int sub in subs) {
    int prod = sub * prime;
    if (!ret.contains(prod)) {
    ret = (ret..add(prod));
  }
  }
  }
  partition_cache[n] = ret;
  return ret;
}

int solution(int threshold) {
  int number_to_partition = 1;
  while (number_to_partition < NUM_PRIMES) {
    List<int> parts = partition(number_to_partition);
    if (parts.length > threshold) {
    return number_to_partition;
  }
    number_to_partition = number_to_partition + 1;
  }
  return 0;
}

int result = solution(5000);
void main() {
  print("solution() = " + _str(result));
}
