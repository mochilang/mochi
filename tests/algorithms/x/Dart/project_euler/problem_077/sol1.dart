// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int NUM_PRIMES = 100;
List<int> generate_primes(int limit) {
  List<bool> is_prime = <bool>[];
  int i = 0;
  while (i <= limit) {
    is_prime = [...is_prime, true];
    i = i + 1;
  }
  while (is_prime.length <= 0) { is_prime.add(false); } is_prime[0] = false;
  while (is_prime.length <= 1) { is_prime.add(false); } is_prime[1] = false;
  i = 2;
  while (i * i <= limit) {
    if ((is_prime[i] ?? false)) {
    int j = i * i;
    while (j <= limit) {
    while (is_prime.length <= j) { is_prime.add(false); } is_prime[j] = false;
    j = j + i;
  };
  }
    i = i + 1;
  }
  List<int> primes = <int>[];
  i = 2;
  while (i <= limit) {
    if ((is_prime[i] ?? false)) {
    primes = [...primes, i];
  }
    i = i + 1;
  }
  return primes;
}

List<int> primes = generate_primes(NUM_PRIMES);
bool contains(List<int> xs, int value) {
  int i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
    return true;
  }
    i = i + 1;
  }
  return false;
}

Map<int, List<int>> partition_cache = <int, List<int>>{};
List<int> partition(int n) {
  if (n < 0) {
    return ([] as List<dynamic>).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  if (n == 0) {
    return [1];
  }
  if (partition_cache.containsKey(n)) {
    return (partition_cache[n]!);
  }
  List<int> ret = <int>[];
  for (int prime in primes) {
    if (prime > n) {
    continue;
  }
    List<int> subs = partition(n - prime);
    for (int sub in subs) {
    int prod = sub * prime;
    if (!contains(ret, prod)) {
    ret = [...ret, prod];
  }
  }
  }
  partition_cache[n] = ret;
  return ret;
}

int solution(int threshold) {
  int number_to_partition = 1;
  while (number_to_partition < NUM_PRIMES) {
    List<int> parts = partition(number_to_partition);
    if (parts.length > threshold) {
    return number_to_partition;
  }
    number_to_partition = number_to_partition + 1;
  }
  return 0;
}

int result = solution(5000);
void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print("solution() = " + _str(result));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
