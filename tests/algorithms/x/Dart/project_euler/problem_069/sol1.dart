// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

bool is_prime(int n) {
  if (n < 2) {
    return false;
  }
  int i = 2;
  while (i * i <= n) {
    if (n % i == 0) {
    return false;
  }
    i = i + 1;
  }
  return true;
}

int solution(int limit) {
  if (limit < 2) {
    return 1;
  }
  int result = 1;
  int p = 2;
  while (result * p <= limit) {
    if (is_prime(p)) {
    result = result * p;
  }
    p = p + 1;
  }
  return result;
}

void _main() {
  int ans = solution(1000000);
  print(ans);
}

void _start() {
  _main();
}

void main() => _start();
