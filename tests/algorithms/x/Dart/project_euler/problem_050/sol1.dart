// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> prime_sieve(int limit) {
  if (limit <= 2) {
    return ([] as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList();
  }
  List<bool> is_prime = <bool>[];
  int i = 0;
  while (i < limit) {
    is_prime = (is_prime..add(true));
    i = i + 1;
  }
  while (is_prime.length <= 0) { is_prime.add(false); } is_prime[0] = false;
  while (is_prime.length <= 1) { is_prime.add(false); } is_prime[1] = false;
  int p = 3;
  while (p * p < limit) {
    int index = p * 2;
    while (index < limit) {
    while (is_prime.length <= index) { is_prime.add(false); } is_prime[index] = false;
    index = index + p;
  }
    p = p + 2;
  }
  List<int> primes = [2];
  int n = 3;
  while (n < limit) {
    if (is_prime[n]) {
    primes = (primes..add(n));
  }
    n = n + 2;
  }
  return primes;
}

int solution(int ceiling) {
  List<int> primes = prime_sieve(ceiling);
  Map<int, bool> prime_map = <int, bool>{};
  int i = 0;
  while (i < primes.length) {
    prime_map[primes[i]] = true;
    i = i + 1;
  }
  List<int> prefix = [0];
  i = 0;
  while (i < primes.length) {
    prefix = (prefix..add(prefix[i] + primes[i]));
    i = i + 1;
  }
  int max_len = 0;
  while (max_len < prefix.length && prefix[max_len] < ceiling) {
    max_len = max_len + 1;
  }
  int L = max_len;
  while (L > 0) {
    int start = 0;
    while (start + L <= primes.length) {
    int s = prefix[start + L] - prefix[start];
    if (s >= ceiling) {
    break;
  }
    if ((prime_map[s] ?? false)) {
    return s;
  }
    start = start + 1;
  }
    L = L - 1;
  }
  return 0;
}

int ans = solution(1000000);
void main() {
  print("solution() = " + _str(ans));
}
