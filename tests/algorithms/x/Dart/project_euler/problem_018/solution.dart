// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution() {
  List<List<int>> triangle = [[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]];
  int i = 1;
  while (i < triangle.length) {
    int j = 0;
    while (j < triangle[i].length) {
    List<int> prev_row = triangle[i - 1];
    int number1 = (j != prev_row.length ? prev_row[j] : 0);
    int number2 = (j > 0 ? prev_row[j - 1] : 0);
    int max_val = (number1 > number2 ? number1 : number2);
    while (triangle[i]!.length <= j) { triangle[i]!.add(0); } triangle[i]![j] = triangle[i][j] + max_val;
    j = j + 1;
  }
    i = i + 1;
  }
  List<int> last = triangle[triangle.length - 1];
  int k = 0;
  int best = 0;
  while (k < last.length) {
    if (last[k] > best) {
    best = last[k];
  }
    k = k + 1;
  }
  return best;
}

void main() {
  print(_str(solution()));
}
