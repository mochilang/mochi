// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int n) {
  int prev_num = 1;
  int prev_den = 1;
  int count = 0;
  int i = 1;
  while (i <= n) {
    int _num = prev_num + 2 * prev_den;
    int den = prev_num + prev_den;
    if (_str(_num).length > _str(den).length) {
    count = count + 1;
  }
    prev_num = _num;
    prev_den = den;
    i = i + 1;
  }
  return count;
}

void main() {
  print(solution(14));
  print(solution(100));
  print(solution(1000));
}
