// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_palindrome_str(String s) {
  int i = 0;
  int j = s.length - 1;
  while (i < j) {
    if (_substr(s, i, i + 1) != _substr(s, j, j + 1)) {
    return false;
  }
    i = i + 1;
    j = j - 1;
  }
  return true;
}

String to_binary(int n) {
  if (n == 0) {
    return "0";
  }
  String res = "";
  int x = n;
  while (x > 0) {
    res = _str(x % 2) + res;
    x = x ~/ 2;
  }
  return res;
}

int solution(int n) {
  int total = 0;
  int i = 1;
  while (i < n) {
    String dec = _str(i);
    String bin = to_binary(i);
    if (is_palindrome_str(dec) && is_palindrome_str(bin)) {
    total = total + i;
  }
    i = i + 1;
  }
  return total;
}

void main() {
  print(solution(1000000));
  print(solution(500000));
  print(solution(100000));
  print(solution(1000));
  print(solution(100));
  print(solution(10));
  print(solution(2));
  print(solution(1));
}
