// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int parse_int(String s) {
  int value = 0;
  int i = 0;
  while (i < s.length) {
    value = value * 10 + ((s.substring(i, i + 1)).codeUnitAt(0));
    i = i + 1;
  }
  return value;
}

List<List<int>> digit_replacements(int number) {
  String num_str = _str(number);
  List<int> counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  int i = 0;
  while (i < num_str.length) {
    int d = (num_str.substring(i, i + 1)).codeUnitAt(0);
    while (counts.length <= d) { counts.add(0); } counts[d] = counts[d] + 1;
    i = i + 1;
  }
  List<List<int>> result = <List<int>>[];
  String digits = "0123456789";
  int digit = 0;
  while (digit < 10) {
    if (counts[digit] > 1) {
    List<int> family = <int>[];
    int repl = 0;
    while (repl < 10) {
    String new_str = "";
    int j = 0;
    while (j < num_str.length) {
    String c = num_str.substring(j, j + 1);
    if (c == digits.substring(digit, digit + 1)) {
    new_str = new_str + digits.substring(repl, repl + 1);
  } else {
    new_str = new_str + c;
  }
    j = j + 1;
  }
    family = (family..add(parse_int(new_str)));
    repl = repl + 1;
  };
    result = ((result..add(family)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
  }
    digit = digit + 1;
  }
  return result;
}

bool is_prime(int _num) {
  if (_num < 2) {
    return false;
  }
  if (_num % 2 == 0) {
    return _num == 2;
  }
  int i = 3;
  while (i * i <= _num) {
    if (_num % i == 0) {
    return false;
  }
    i = i + 2;
  }
  return true;
}

int solution(int family_length) {
  int candidate = 121313;
  if (!is_prime(candidate)) {
    return -1;
  }
  List<List<int>> reps = digit_replacements(candidate);
  int r = 0;
  while (r < reps.length) {
    List<int> family = reps[r];
    int count = 0;
    int min_prime = 0;
    bool first = true;
    int i = 0;
    while (i < family.length) {
    int _num = family[i];
    if (is_prime(_num)) {
    if (first) {
    min_prime = _num;
    first = false;
  } else {
    if (_num < min_prime) {
    min_prime = _num;
  };
  };
    count = count + 1;
  }
    i = i + 1;
  }
    if (count == family_length) {
    return min_prime;
  }
    r = r + 1;
  }
  return -1;
}

void main() {
  print(_str(solution(8)));
}
