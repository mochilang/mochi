// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

bool is_palindrome(int _num) {
  String s = _str(_num);
  int i = 0;
  int j = s.length - 1;
  while (i < j) {
    if (_substr(s, i, i + 1) != _substr(s, j, j + 1)) {
    return false;
  }
    i = i + 1;
    j = j - 1;
  }
  return true;
}

int solution(int n) {
  int number = n - 1;
  while (number > 9999) {
    if (is_palindrome(number)) {
    int divisor = 999;
    while (divisor > 99) {
    if (number % divisor == 0) {
    int other = number ~/ divisor;
    if (_str(other).length == 3) {
    return number;
  };
  }
    divisor = divisor - 1;
  };
  }
    number = number - 1;
  }
  print("That number is larger than our acceptable range.");
  return 0;
}

void main() {
  print("solution() = " + _str(solution(998001)));
}
