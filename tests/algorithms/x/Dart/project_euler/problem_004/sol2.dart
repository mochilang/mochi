// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { var i = v.toInt(); if (i == 0) return '0'; return i.toString(); } return v.toString(); }

bool is_palindrome(int _num) {
  if (_num < 0) {
    return false;
  }
  int n = _num;
  int rev = 0;
  while (n > 0) {
    rev = rev * 10 + n % 10;
    n = n ~/ 10;
  }
  return rev == _num;
}

int solution(int limit) {
  int answer = 0;
  int i = 999;
  while (i >= 100) {
    int j = 999;
    while (j >= 100) {
    int product = i * j;
    if (product < limit && is_palindrome(product) && product > answer) {
    answer = product;
  }
    j = j - 1;
  }
    i = i - 1;
  }
  return answer;
}

void main() {
  print(_str(solution(998001)));
}
