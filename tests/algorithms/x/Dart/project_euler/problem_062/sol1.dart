// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

String get_digits(int _num) {
  int cube = _num * _num * _num;
  String s = _str(cube);
  List<int> counts = <int>[];
  int j = 0;
  while (j < 10) {
    counts = (counts..add(0));
    j = j + 1;
  }
  int i = 0;
  while (i < s.length) {
    int d = int.parse(s.substring(i, i + 1));
    while (counts.length <= d) { counts.add(0); } counts[d] = counts[d] + 1;
    i = i + 1;
  }
  String result = "";
  int d = 0;
  while (d < 10) {
    int c = counts[d];
    while (c > 0) {
    result = result + _str(d);
    c = c - 1;
  }
    d = d + 1;
  }
  return result;
}

int solution(int max_base) {
  Map<String, List<int>> freqs = <String, List<int>>{};
  int _num = 0;
  while (true) {
    String digits = get_digits(_num);
    List<int> arr = <int>[];
    if (freqs.containsKey(digits)) {
    arr = freqs[digits]!;
  }
    arr = (arr..add(_num));
    freqs[digits] = arr;
    if (arr.length == max_base) {
    int base = arr[0];
    return base * base * base;
  }
    _num = _num + 1;
  }
}

void main() {
  print("solution() = " + _str(solution(5)));
}
