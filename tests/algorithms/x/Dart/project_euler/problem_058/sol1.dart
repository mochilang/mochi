// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_prime(int number) {
  if (1 < number && number < 4) {
    return true;
  }
  if (number < 2 || number % 2 == 0 || number % 3 == 0) {
    return false;
  }
  int i = 5;
  while (i * i <= number) {
    if (number % i == 0 || number % (i + 2) == 0) {
    return false;
  }
    i = i + 6;
  }
  return true;
}

int solution(double ratio) {
  int j = 3;
  int primes = 3;
  while ((primes.toDouble()) / (2 * j - 1) >= ratio) {
    int i = j * j + j + 1;
    int limit = (j + 2) * (j + 2);
    int step = j + 1;
    while (i < limit) {
    if (is_prime(i)) {
    primes = primes + 1;
  }
    i = i + step;
  }
    j = j + 2;
  }
  return j;
}

void test_solution() {
  if (solution(0.5) != 11) {
    ;
  }
  if (solution(0.2) != 309) {
    ;
  }
  if (solution(0.111) != 11317) {
    ;
  }
}

void _main() {
  test_solution();
  print(_str(solution(0.1)));
}

void _start() {
  _main();
}

void main() => _start();
