// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int number) {
  List<int> partitions = [1];
  int i = partitions.length;
  while (true) {
    int item = 0;
    int j = 1;
    while (true) {
    int sign = (j % 2 == 0 ? -1 : 1);
    int index = (j * j * 3 - j) ~/ 2;
    if (index > i) {
    break;
  }
    item = item + partitions[i - index] * sign;
    item = item % number;
    index = index + j;
    if (index > i) {
    break;
  }
    item = item + partitions[i - index] * sign;
    item = item % number;
    j = j + 1;
  }
    if (item == 0) {
    return i;
  }
    partitions = (partitions..add(item));
    i = i + 1;
  }
  return 0;
}

void _main() {
  print(_str(solution(1)));
  print(_str(solution(9)));
  print(_str(solution(1000000)));
}

void _start() {
  _main();
}

void main() => _start();
