// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

int solution(int number) {
  List<int> partitions = [1];
  int i = partitions.length;
  while (true) {
    int item = 0;
    int j = 1;
    while (true) {
    int sign = (j % 2 == 0 ? -1 : 1);
    int index = (j * j * 3 - j) ~/ 2;
    if (index > i) {
    break;
  }
    item = item + partitions[i - index] * sign;
    item = item % number;
    index = index + j;
    if (index > i) {
    break;
  }
    item = item + partitions[i - index] * sign;
    item = item % number;
    j = j + 1;
  }
    if (item == 0) {
    return i;
  }
    partitions = [...partitions, item];
    i = i + 1;
  }
  return 0;
}

void _main() {
  print(_str(solution(1)));
  print(_str(solution(9)));
  print(_str(solution(1000000)));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
