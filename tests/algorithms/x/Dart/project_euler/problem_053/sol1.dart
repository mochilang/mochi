// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool combination_exceeds(int n, int r, int limit) {
  int r2 = r;
  if (r2 > n - r2) {
    r2 = n - r2;
  }
  int result = 1;
  int k = 1;
  while (k <= r2) {
    result = result * (n - r2 + k) ~/ k;
    if (result > limit) {
    return true;
  }
    k = k + 1;
  }
  return result > limit;
}

int count_exceeding(int limit) {
  int total = 0;
  int n = 1;
  while (n <= 100) {
    int r = 1;
    while (r <= n) {
    if (combination_exceeds(n, r, limit)) {
    total = total + 1;
  }
    r = r + 1;
  }
    n = n + 1;
  }
  return total;
}

void main() {
  print(_str(count_exceeding(1000000)));
}
