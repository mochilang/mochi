// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int solution(int limit) {
  List<int> phi = <int>[];
  int i = 0;
  while (i <= limit) {
    phi = (phi..add(i));
    i = i + 1;
  }
  int n = 2;
  while (n <= limit) {
    if (phi[n] == n) {
    int k = n;
    while (k <= limit) {
    while (phi.length <= k) { phi.add(0); } phi[k] = phi[k] - phi[k] ~/ n;
    k = k + n;
  };
  }
    n = n + 1;
  }
  int total = 0;
  int m = 2;
  while (m <= limit) {
    total = total + phi[m];
    m = m + 1;
  }
  return total;
}

void _main() {
  print(solution(8));
  print(solution(1000));
}

void _start() {
  _main();
}

void main() => _start();
