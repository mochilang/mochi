// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> totients(int limit) {
  List<bool> is_prime = <bool>[];
  List<int> phi = <int>[];
  List<int> primes = <int>[];
  int i = 0;
  while (i <= limit) {
    is_prime = (is_prime..add(true));
    phi = (phi..add(i - 1));
    i = i + 1;
  }
  i = 2;
  while (i <= limit) {
    if (is_prime[i]) {
    primes = (primes..add(i));
  }
    int j = 0;
    while (j < primes.length) {
    int p = primes[j];
    if (i * p > limit) {
    break;
  }
    while (is_prime.length <= i * p) { is_prime.add(false); } is_prime[i * p] = false;
    if (i % p == 0) {
    while (phi.length <= i * p) { phi.add(0); } phi[i * p] = phi[i] * p;
    break;
  }
    while (phi.length <= i * p) { phi.add(0); } phi[i * p] = phi[i] * (p - 1);
    j = j + 1;
  }
    i = i + 1;
  }
  return phi;
}

int solution(int limit) {
  List<int> phi = totients(limit);
  int total = 0;
  int k = 2;
  while (k <= limit) {
    total = total + phi[k];
    k = k + 1;
  }
  return total;
}

void main() {
  print(_str(solution(1000000)));
}
