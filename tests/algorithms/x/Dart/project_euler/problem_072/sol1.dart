// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

String _str(dynamic v) => v.toString();

List<int> totients(int limit) {
  List<bool> is_prime = <bool>[];
  List<int> phi = <int>[];
  List<int> primes = <int>[];
  int i = 0;
  while (i <= limit) {
    is_prime = [...is_prime, true];
    phi = [...phi, i - 1];
    i = i + 1;
  }
  i = 2;
  while (i <= limit) {
    if ((is_prime[i] ?? false)) {
    primes = [...primes, i];
  }
    int j = 0;
    while (j < primes.length) {
    int p = primes[j];
    if (i * p > limit) {
    break;
  }
    while (is_prime.length <= i * p) { is_prime.add(false); } is_prime[i * p] = false;
    if (i % p == 0) {
    while (phi.length <= i * p) { phi.add(0); } phi[i * p] = phi[i] * p;
    break;
  }
    while (phi.length <= i * p) { phi.add(0); } phi[i * p] = phi[i] * (p - 1);
    j = j + 1;
  }
    i = i + 1;
  }
  return phi;
}

int solution(int limit) {
  List<int> phi = totients(limit);
  int total = 0;
  int k = 2;
  while (k <= limit) {
    total = total + phi[k];
    k = k + 1;
  }
  return total;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(solution(1000000)));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
