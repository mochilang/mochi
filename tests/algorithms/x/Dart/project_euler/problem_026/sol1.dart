// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool contains(List<int> lst, int val) {
  for (int x in lst) {
    if (x == val) {
    return true;
  }
  }
  return false;
}

int solution(int numerator, int limit) {
  int the_digit = 1;
  int longest_len = 0;
  for (int d = numerator; d < limit; d++) {
    List<int> remainders = <int>[];
    int rem = numerator;
    int count = 1;
    while (count <= limit) {
    if (remainders.contains(rem)) {
    if (longest_len < remainders.length) {
    longest_len = remainders.length;
    the_digit = d;
  };
  } else {
    remainders = (remainders..add(rem));
    rem = rem * 10 % d;
  }
    count = count + 1;
  }
  }
  return the_digit;
}

void _main() {
  print(_str(solution(1, 10)));
  print(_str(solution(10, 100)));
  print(_str(solution(10, 1000)));
}

void _start() {
  _main();
}

void main() => _start();
