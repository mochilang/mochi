// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int pow(int base, int exponent) {
  int result = 1;
  int i = 0;
  while (i < exponent) {
    result = result * base;
    i = i + 1;
  }
  return result;
}

int num_digits(int n) {
  if (n == 0) {
    return 1;
  }
  int count = 0;
  int x = n;
  while (x > 0) {
    x = x ~/ 10;
    count = count + 1;
  }
  return count;
}

int solution(int max_base, int max_power) {
  int total = 0;
  int base = 1;
  while (base < max_base) {
    int power = 1;
    while (power < max_power) {
    int digits = num_digits(pow(base, power));
    if (digits == power) {
    total = total + 1;
  }
    power = power + 1;
  }
    base = base + 1;
  }
  return total;
}

void main() {
  print("solution(10, 22) = " + _str(solution(10, 22)));
}
