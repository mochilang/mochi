// Generated by Mochi transpiler
dynamic _substr(dynamic s, num start, num end) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int m) {
  List<List<int>> memo = <List<int>>[];
  int i = 0;
  while (i <= m) {
    List<int> row = <int>[];
    int j = 0;
    while (j < m) {
    row = (row..add(0));
    j = j + 1;
  }
    memo = ((memo..add(row)) as List).map((e) => ((e as List).map((e) => (e is BigInt ? e.toInt() : (e as int))).toList() as List<int>)).toList();
    i = i + 1;
  }
  i = 0;
  while (i <= m) {
    while (memo[i]!.length <= 0) { memo[i]!.add(0); } memo[i]![0] = 1;
    i = i + 1;
  }
  int n = 0;
  while (n <= m) {
    int k = 1;
    while (k < m) {
    while (memo[n]!.length <= k) { memo[n]!.add(0); } memo[n]![k] = memo[n][k] + memo[n][k - 1];
    if (n > k) {
    while (memo[n]!.length <= k) { memo[n]!.add(0); } memo[n]![k] = memo[n][k] + memo[n - k - 1][k];
  }
    k = k + 1;
  }
    n = n + 1;
  }
  return memo[m][m - 1] - 1;
}

void main() {
  print(_str(solution(100)));
  print(_str(solution(50)));
  print(_str(solution(30)));
  print(_str(solution(10)));
  print(_str(solution(5)));
  print(_str(solution(3)));
  print(_str(solution(2)));
  print(_str(solution(1)));
}
