// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

bool is_9_pandigital(int n) {
  List<int> digits = <int>[];
  int i = 0;
  while (i < 10) {
    digits = (digits..add(0));
    i = i + 1;
  }
  int count = 0;
  int x = n;
  while (x > 0) {
    int digit = x % 10;
    if (digit == 0) {
    return false;
  }
    if (digits[digit] == 1) {
    return false;
  }
    while (digits.length <= digit) { digits.add(0); } digits[digit] = 1;
    x = x ~/ 10;
    count = count + 1;
  }
  return count == 9 && digits[1] == 1 && digits[2] == 1 && digits[3] == 1 && digits[4] == 1 && digits[5] == 1 && digits[6] == 1 && digits[7] == 1 && digits[8] == 1 && digits[9] == 1;
}

int solution() {
  int base_num = 9999;
  while (base_num >= 5000) {
    int candidate = 100002 * base_num;
    if (is_9_pandigital(candidate)) {
    return candidate;
  }
    base_num = base_num - 1;
  }
  base_num = 333;
  while (base_num >= 100) {
    int candidate = 1002003 * base_num;
    if (is_9_pandigital(candidate)) {
    return candidate;
  }
    base_num = base_num - 1;
  }
  return 0;
}

void main() {
  print("solution() = " + _str(solution()));
}
