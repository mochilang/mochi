// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

int intSqrt(int n) {
  if (n == 0) {
    return 0;
  }
  int x = n;
  int y = (x + 1) ~/ 2;
  while (y < x) {
    x = y;
    y = (x + n ~/ x) ~/ 2;
  }
  return x;
}

int continuousFractionPeriod(int n) {
  int m = 0;
  int d = 1;
  int a0 = intSqrt(n);
  int a = a0;
  int period = 0;
  while (a != 2 * a0) {
    m = d * a - m;
    d = (n - m * m) ~/ d;
    a = (a0 + m) ~/ d;
    period = period + 1;
  }
  return period;
}

int solution(int n) {
  int count = 0;
  for (int i = 2; i < n + 1; i++) {
    int r = intSqrt(i);
    if (r * r != i) {
    int p = continuousFractionPeriod(i);
    if (p % 2 == 1) {
    count = count + 1;
  };
  }
  }
  return count;
}

void _main() {
  String nStr = stdin.readLineSync()?.trim() ?? '';
  int n = int.parse(nStr);
  print(solution(n));
}

void _start() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _main();
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "_start"}));
}

void main() => _start();
