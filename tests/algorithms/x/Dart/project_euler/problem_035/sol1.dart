// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int LIMIT = 10000;
List<bool> sieve = <bool>[];
int i = 0;
int p = 2;
bool is_prime(int n) {
  return sieve[n];
}

bool contains_an_even_digit(int n) {
  String s = _str(n);
  int idx = 0;
  while (idx < s.length) {
    String c = s.substring(idx, idx + 1);
    if (c == "0" || c == "2" || c == "4" || c == "6" || c == "8") {
    return true;
  }
    idx = idx + 1;
  }
  return false;
}

int parse_int(String s) {
  int value = 0;
  int k = 0;
  while (k < s.length) {
    String ch = s.substring(k, k + 1);
    value = value * 10 + ((ch).codeUnitAt(0));
    k = k + 1;
  }
  return value;
}

List<int> find_circular_primes(int limit) {
  List<int> result = [2];
  int _num = 3;
  while (_num <= limit) {
    if (is_prime(_num) && contains_an_even_digit(_num) == false) {
    String s = _str(_num);
    bool all_prime = true;
    int j = 0;
    while (j < s.length) {
    String rotated_str = _substr(s, j, s.length) + _substr(s, 0, j);
    int rotated = parse_int(rotated_str);
    if (!is_prime(rotated)) {
    all_prime = false;
    break;
  }
    j = j + 1;
  };
    if (all_prime) {
    result = (result..add(_num));
  };
  }
    _num = _num + 2;
  }
  return result;
}

int solution() {
  return find_circular_primes(LIMIT).length;
}

void main() {
  while (i <= LIMIT) {
    sieve = (sieve..add(true));
    i = i + 1;
  }
  while (p * p <= LIMIT) {
    if (sieve[p]) {
    int j = p * p;
    while (j <= LIMIT) {
    while (sieve.length <= j) { sieve.add(false); } sieve[j] = false;
    j = j + p;
  };
  }
    p = p + 1;
  }
  print("len(find_circular_primes()) = " + _str(solution()));
}
