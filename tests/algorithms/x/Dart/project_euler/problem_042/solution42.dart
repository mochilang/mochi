// Generated by Mochi transpiler
import 'dart:convert';
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

dynamic _substr(dynamic s, num start, [num? end]) {
  int n = s.length;
  int s0 = start.toInt();
  int e0 = end == null ? n : end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  if (s is String) {
    return s.substring(s0, e0);
  }
  return s.sublist(s0, e0);
}

int _ord(String s) => s.isEmpty ? 0 : s.codeUnitAt(0);

String _str(dynamic v) => v.toString();


String _read_file(String path) {
  var f = File(path);
  if (!f.existsSync()) {
    var dir = File.fromUri(Platform.script).parent;
    var alt = dir.uri.resolve(path).toFilePath();
    f = File(alt);
    if (!f.existsSync()) {
      var dirPath = dir.path;
      var base = 'tests/algorithms/x/Dart/';
      var idx = dirPath.indexOf(base);
      var rel = '';
      if (idx >= 0) {
        rel = dirPath.substring(idx + base.length);
        if (!rel.endsWith('/')) {
          rel += '/';
        }
      }
      alt = dir.uri
          .resolve('../../../../../github/TheAlgorithms/Mochi/' + rel + path)
          .toFilePath();
      f = File(alt);
    }
  }
  return f.existsSync() ? f.readAsStringSync() : '';
}

List<int> triangular_numbers(int limit) {
  List<int> res = <int>[];
  int n = 1;
  while (n <= limit) {
    res = [...res, n * (n + 1) ~/ 2];
    n = n + 1;
  }
  return res;
}

List<String> parse_words(String text) {
  List<String> words = <String>[];
  String current = "";
  int i = 0;
  while (i < text.length) {
    String c = _substr(text, i, i + 1);
    if (c == ",") {
    words = [...words, current];
    current = "";
  } else {
    if (c == "\"") {
  } else {
    if (c == "\r" || c == "\n") {
  } else {
    current = current + c;
  };
  };
  }
    i = i + 1;
  }
  if (current.length > 0) {
    words = [...words, current];
  }
  return words;
}

int word_value(String word) {
  int total = 0;
  int i = 0;
  while (i < word.length) {
    total = total + _ord(_substr(word, i, i + 1)) - 64;
    i = i + 1;
  }
  return total;
}

bool contains(List<int> xs, int target) {
  for (int x in xs) {
    if (x == target) {
    return true;
  }
  }
  return false;
}

int solution() {
  String text = _read_file("words.txt");
  List<String> words = parse_words(text);
  List<int> tri = triangular_numbers(100);
  int count = 0;
  for (String w in words) {
    int v = word_value(w);
    if (contains(tri, v)) {
    count = count + 1;
  }
  }
  return count;
}

void main() {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  _initNow();
  {
  var _benchMem0 = ProcessInfo.currentRss;
  var _benchSw = Stopwatch()..start();
  print(_str(solution()));
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
  _benchSw.stop();
  var _benchMem1 = ProcessInfo.currentRss;
  print(jsonEncode({"duration_us": _benchSw.elapsedMicroseconds, "memory_bytes": (_benchMem1 - _benchMem0).abs(), "name": "main"}));
}
