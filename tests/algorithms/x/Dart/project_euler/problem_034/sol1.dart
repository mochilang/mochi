// Generated by Mochi transpiler
String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

List<int> DIGIT_FACTORIALS = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880];
int sum_of_digit_factorial(int n) {
  if (n == 0) {
    return DIGIT_FACTORIALS[0];
  }
  int total = 0;
  int _num = n;
  while (_num > 0) {
    int digit = _num % 10;
    total = total + DIGIT_FACTORIALS[digit];
    _num = _num ~/ 10;
  }
  return total;
}

int solution() {
  int limit = 7 * DIGIT_FACTORIALS[9] + 1;
  int total = 0;
  int i = 3;
  while (i < limit) {
    if (sum_of_digit_factorial(i) == i) {
    total = total + i;
  }
    i = i + 1;
  }
  return total;
}

void main() {
  print(_str(solution()));
}
