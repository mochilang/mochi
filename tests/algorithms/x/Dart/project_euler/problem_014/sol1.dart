// Generated by Mochi transpiler
import 'dart:io';

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

String _str(dynamic v) { if (v is double && v == v.roundToDouble()) { return v.toInt().toString(); } return v.toString(); }

int solution(int n) {
  List<int> counters = <int>[];
  int i = 0;
  while (i <= n) {
    counters = (counters..add(0));
    i = i + 1;
  }
  while (counters.length <= 1) { counters.add(0); } counters[1] = 1;
  int largest_number = 1;
  int pre_counter = 1;
  int start = 2;
  while (start < n) {
    int number = start;
    int counter = 0;
    while (true) {
    if (number < counters.length && counters[number] != 0) {
    counter = counter + counters[number];
    break;
  }
    if (number % 2 == 0) {
    number = number ~/ 2;
  } else {
    number = 3 * number + 1;
  }
    counter = counter + 1;
  }
    if (start < counters.length && counters[start] == 0) {
    while (counters.length <= start) { counters.add(0); } counters[start] = counter;
  }
    if (counter > pre_counter) {
    largest_number = start;
    pre_counter = counter;
  }
    start = start + 1;
  }
  return largest_number;
}

String input_str = stdin.readLineSync() ?? '';
int n = int.parse(input_str);
void main() {
  print(_str(solution(n)));
}
