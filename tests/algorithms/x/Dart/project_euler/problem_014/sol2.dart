// Generated by Mochi transpiler
import 'dart:io';

String _substr(String s, num start, num end) {
  var n = s.length;
  int s0 = start.toInt();
  int e0 = end.toInt();
  if (s0 < 0) s0 += n;
  if (e0 < 0) e0 += n;
  if (s0 < 0) s0 = 0;
  if (s0 > n) s0 = n;
  if (e0 < 0) e0 = 0;
  if (e0 > n) e0 = n;
  if (s0 > e0) s0 = e0;
  return s.substring(s0, e0);
}

Map<int, int> collatz_cache = {1: 1};
int collatz_length(int n) {
  int _num = n;
  List<int> sequence = <int>[];
  while (!collatz_cache.containsKey(_num)) {
    sequence = (sequence..add(_num));
    if (_num % 2 == 0) {
    _num = _num ~/ 2 as int;
  } else {
    _num = 3 * _num + 1;
  }
  }
  int length = collatz_cache[_num]!;
  int i = sequence.length - 1;
  while (i >= 0) {
    length = length + 1;
    collatz_cache[sequence[i]] = length;
    i = i - 1;
  }
  return length;
}

int solution(int limit) {
  int max_len = 0;
  int max_start = 1;
  int i = 1;
  while (i < limit) {
    int length = collatz_length(i);
    if (length > max_len) {
    max_len = length;
    max_start = i;
  }
    i = i + 1;
  }
  return max_start;
}

String input_str = stdin.readLineSync() ?? '';
int limit = int.parse(input_str);
void main() {
  print(solution(limit));
}
