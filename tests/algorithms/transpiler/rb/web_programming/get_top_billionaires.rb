# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'net/http'
require 'uri'
require 'ostruct'
require 'json'
def _fetch(url, opts = nil)
  uri = URI.parse(url)
  method = opts && opts['method'] ? opts['method'].to_s.upcase : 'GET'
  req_class = Net::HTTP.const_get(method.capitalize)
  req = req_class.new(uri)
  if opts && opts['headers']
    opts['headers'].each { |k,v| req[k] = v }
  end
  if opts && opts.key?('body')
    req.body = opts['body'].to_json
  end
  if opts && opts['query']
    uri.query = URI.encode_www_form(opts['query'])
  end
  resp = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
    http.request(req)
  end
  body = resp.body
  begin
    data = JSON.parse(body)
    OpenStruct.new(data)
  rescue StandardError
    body
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def round1(value)
    if value >= 0.0
      scaled = ((_add(value * 10.0, 0.5))).to_i
      return ((scaled).to_f) / 10.0
    end
    scaled = ((value * 10.0 - 0.5)).to_i
    return ((scaled).to_f) / 10.0
  end
  def years_old(birth_ms, today_ms)
    ms_per_year = 31557600000.0
    return (((today_ms - birth_ms) / ms_per_year)).to_i
  end
  def get_forbes_real_time_billionaires()
    response = _fetch($API_URL)
    out = [].clone
        __tmp1 = response["personList"]["personsLists"]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |person|
      worth_billion = round1(person["finalWorth"] / 1000.0)
      age_years = years_old(person["birthDate"], $TODAY_MS)
      entry = {"Name" => person["personName"], "Source" => person["source"], "Country" => person["countryOfCitizenship"], "Gender" => person["gender"], "Worth ($)" => _add(_str(worth_billion), " Billion"), "Age" => _str(age_years)}
      out = (out << (entry)).clone
    end
    return out
  end
  def display_billionaires(list)
        __tmp2 = list
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |b|
      puts(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(b["Name"], " | "), b["Source"]), " | "), b["Country"]), " | "), b["Gender"]), " | "), b["Worth ($)"]), " | "), b["Age"]))
    end
  end
  $LIMIT = 10
  $TODAY_MS = 1705017600000.0
  $API_URL = _add("https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=", _str($LIMIT))
  Person = Struct.new(:finalWorth, :personName, :source, :countryOfCitizenship, :gender, :birthDate, keyword_init: true)
  PersonsWrapper = Struct.new(:personsLists, :count, keyword_init: true)
  Response = Struct.new(:personList, keyword_init: true)
  display_billionaires(get_forbes_real_time_billionaires())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
