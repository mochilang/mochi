# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'net/http'
require 'uri'
require 'ostruct'
require 'json'
def _json_to_struct(obj)
  case obj
  when Hash
    OpenStruct.new(obj.transform_values { |v| _json_to_struct(v) })
  when Array
    obj.map { |v| _json_to_struct(v) }
  else
    obj
  end
end
def _fetch(url, opts = nil)
  uri = URI.parse(url)
  method = opts && opts['method'] ? opts['method'].to_s.upcase : 'GET'
  if uri.scheme.nil? || uri.scheme == ''
    base = File.expand_path('../../../../..', __dir__)
    body = File.read(File.expand_path(url, base))
  else
    req_class = Net::HTTP.const_get(method.capitalize)
    req = req_class.new(uri)
    if opts && opts['headers']
      opts['headers'].each { |k,v| req[k] = v }
    end
    if opts && opts.key?('body')
      req.body = opts['body'].to_json
    end
    if opts && opts['query']
      uri.query = URI.encode_www_form(opts['query'])
    end
    resp = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
      http.request(req)
    end
    body = resp.body
  end
  return 'ok' if method == 'POST'
  begin
    data = JSON.parse(body)
    _json_to_struct(data)
  rescue StandardError
    body
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def send_slack_message(message_body, slack_url)
    headers = {"Content-Type" => "application/json"}
    response = _fetch(_str(slack_url), {"method" => "POST", "headers" => headers, "body" => {"text" => message_body}})
    if response != "ok"
      panic(_add("Request to slack returned an error: ", response))
    end
    return response
  end
  $url = "https://httpbin.org/post"
  send_slack_message("Hello from Mochi", $url)
  puts("Message sent")
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
