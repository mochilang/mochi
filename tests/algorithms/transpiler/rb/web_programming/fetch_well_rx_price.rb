# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def find_substring(s, sub, from)
    i = from.clone
    while i <= s.length - sub.length
      j = 0.clone
      while j < sub.length && s[_add(i, j)..._add(_add(i, j), 1)] == sub[j..._add(j, 1)]
        j = _add(j, 1).clone
      end
      if j == sub.length
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def fetch_pharmacy_and_price_list(drug_name, zip_code)
    if drug_name == "" || zip_code == ""
      return nil
    end
    results = [].clone
    pos = 0.clone
    block_tag = "<div class=\"grid-x pharmCard\">"
    name_tag = "<p class=\"list-title\">"
    price_tag = "<span class=\"price price-large\">"
    while true
      div_idx = find_substring($SAMPLE_HTML, block_tag, pos)
      if div_idx < 0
        break
      end
      name_start = find_substring($SAMPLE_HTML, name_tag, div_idx)
      if name_start < 0
        break
      end
      name_start = _add(name_start, name_tag.length).clone
      name_end = find_substring($SAMPLE_HTML, "</p>", name_start)
      if name_end < 0
        break
      end
      name = $SAMPLE_HTML[name_start...name_end]
      price_start = find_substring($SAMPLE_HTML, price_tag, name_end)
      if price_start < 0
        break
      end
      price_start = _add(price_start, price_tag.length).clone
      price_end = find_substring($SAMPLE_HTML, "</span>", price_start)
      if price_end < 0
        break
      end
      price = $SAMPLE_HTML[price_start...price_end]
      results = (results << ({"pharmacy_name" => name, "price" => price})).clone
      pos = price_end.clone
    end
    return results
  end
  $SAMPLE_HTML = "<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>"
  $pharmacy_price_list = fetch_pharmacy_and_price_list("aspirin", "30303")
  if $pharmacy_price_list != nil
    $i = 0.clone
    while $i < $pharmacy_price_list.length
      entry = $pharmacy_price_list[$i]
      puts(_add(_add(_add("Pharmacy: ", entry["pharmacy_name"]), " Price: "), entry["price"]))
      $i = _add($i, 1).clone
    end
  else
    puts("No results found")
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
