# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of_substr(s, pat)
    if pat.length == 0
      return 0
    end
    i = 0.clone
    while i <= s.length - pat.length
      j = 0.clone
      while j < pat.length
        if s[_add(i, j)] != pat[j]
          break
        end
        j = _add(j, 1).clone
      end
      if j == pat.length
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def first_link(html)
    a_idx = index_of_substr(html, "<a")
    if a_idx < 0
      return ""
    end
    href_pat = "href=\""
    href_idx_rel = index_of_substr(html[a_idx...], href_pat)
    if href_idx_rel < 0
      return ""
    end
    start = _add(_add(a_idx, href_idx_rel), href_pat.length)
    end_ = start.clone
    while end_ < html.length
      if html[end_] == "\""
        break
      end
      end_ = _add(end_, 1).clone
    end
    return html[start...end_]
  end
  $query_words = ["mochi", "language"]
  $query = "".clone
  $i = 0.clone
  while $i < $query_words.length
    if $i > 0
      $query = _add($query, "%20").clone
    end
    $query = _add($query, $query_words[$i]).clone
    $i = _add($i, 1).clone
  end
  $url = _add(_add("https://www.google.com/search?q=", $query), "&num=100")
  puts("Googling.....")
  $sample_html = _add("<div><a href=\"https://example.com\">Example</a></div>", "<div><a href=\"https://another.com\">Another</a></div>")
  $link = first_link($sample_html)
  if $link.length > 0
    puts($link)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
