# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def format_query(q)
    result = "".clone
    i = 0.clone
    while i < q.length
      ch = q[i..._add(i, 1)]
      if ch == " "
        result = _add(result, "+").clone
      else
        result = _add(result, ch).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def join(xs, sep)
    if xs.length == 0
      return ""
    end
    out = xs[0].clone
    i = 1.clone
    while i < xs.length
      out = _add(_add(out, sep), xs[i]).clone
      i = _add(i, 1).clone
    end
    return out
  end
  def get_gifs(query)
    formatted = format_query(query)
    gifs = [Gif.new(url: "https://example.com/1"), Gif.new(url: "https://example.com/2"), Gif.new(url: "https://example.com/3")]
    urls = [].clone
        __tmp1 = gifs
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |g|
      urls = (urls << (g.url)).clone
    end
    return urls
  end
  Gif = Struct.new(:url, keyword_init: true)
  puts(join(get_gifs("space ship"), "\n"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
