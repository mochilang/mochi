# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def contains_str(s, sub)
    if sub.length == 0
      return true
    end
    i = 0.clone
    while _add(i, sub.length) <= s.length
      if s[i..._add(i, sub.length)] == sub
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def search_scraper(anime_name)
    term = anime_name.downcase()
    res = [].clone
    i = 0.clone
    while i < ANIME_DB.length
      item = ANIME_DB[i]
      if contains_str(item.title.downcase(), term)
        res = (res << (item)).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def search_anime_episode_list(endpoint)
    if $EPISODE_DB.include?(endpoint)
      return $EPISODE_DB[endpoint]
    end
    empty = [].clone
    return empty
  end
  def to_playlist(embed)
    return _add(_add("/playlist/", embed[7...]), ".m3u8")
  end
  def get_anime_episode(endpoint)
    if $EPISODE_EMBED.include?(endpoint)
      embed = $EPISODE_EMBED[endpoint]
      play = _add($BASE_URL, embed)
      download = _add($BASE_URL, to_playlist(embed))
      return [play, download]
    end
    empty = [].clone
    return empty
  end
  def main()
    animes = search_scraper("demon")
    puts(((x = animes); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    episodes = search_anime_episode_list("/anime/kimetsu-no-yaiba")
    puts(((x = episodes); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    links = get_anime_episode("/watch/kimetsu-no-yaiba/1")
    puts(((x = links); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  $BASE_URL = "https://ww7.gogoanime2.org"
  ANIME_DB = Struct.new(:title, :url, keyword_init: true)
  ANIME_DB = [ANIME_DB.new(title: "Demon Slayer", url: "/anime/kimetsu-no-yaiba"), ANIME_DB.new(title: "Naruto", url: "/anime/naruto")]
  $EPISODE_DB = {"/anime/kimetsu-no-yaiba" => [{"title" => "Episode 1", "url" => "/watch/kimetsu-no-yaiba/1"}, {"title" => "Episode 2", "url" => "/watch/kimetsu-no-yaiba/2"}], "/anime/naruto" => [{"title" => "Episode 1", "url" => "/watch/naruto/1"}]}
  $EPISODE_EMBED = {"/watch/kimetsu-no-yaiba/1" => "/embed/kimetsu-no-yaiba/1", "/watch/kimetsu-no-yaiba/2" => "/embed/kimetsu-no-yaiba/2", "/watch/naruto/1" => "/embed/naruto/1"}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
