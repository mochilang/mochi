# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def find(text, pattern, start)
    i = start
    limit = text.length - pattern.length
    while i <= limit
      if _eq(text[i..._add(i, pattern.length)], pattern)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def stock_price(symbol)
    pages = {"AAPL" => "<span data-testid=\"qsp-price\">228.43</span>", "AMZN" => "<span data-testid=\"qsp-price\">201.85</span>", "IBM" => "<span data-testid=\"qsp-price\">210.30</span>", "GOOG" => "<span data-testid=\"qsp-price\">177.86</span>", "MSFT" => "<span data-testid=\"qsp-price\">414.82</span>", "ORCL" => "<span data-testid=\"qsp-price\">188.87</span>"}
    if pages.include?(symbol)
      html = pages[symbol]
      marker = "<span data-testid=\"qsp-price\">"
      start_idx = find(html, marker, 0)
      if !_eq(start_idx, (-1))
        price_start = _add(start_idx, marker.length)
        end_idx = find(html, "</span>", price_start)
        if !_eq(end_idx, (-1))
          return html[price_start...end_idx]
        end
      end
    end
    return "No <fin-streamer> tag with the specified data-testid attribute found."
  end
    __tmp1 = ["AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL"]
  if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
    __tmp1 = __tmp1.keys
  end
  __tmp1.each do |symbol|
    puts(_add(_add(_add("Current ", symbol), " stock price is "), stock_price(symbol)))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
