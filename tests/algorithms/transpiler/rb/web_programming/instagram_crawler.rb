# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(s, sub)
    i = 0.clone
    while i <= s.length - sub.length
      if s[i..._add(i, sub.length)] == sub
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def parse_int(s)
    value = 0.clone
    i = 0.clone
    while i < s.length
      value = _add(value * 10, ((s[i]).to_i)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def extract_string(text, key)
    pattern = _add(_add("\"", key), "\":\"")
    start = _add(index_of(text, pattern), pattern.length)
    end_ = start.clone
    while end_ < text.length && text[end_..._add(end_, 1)] != "\""
      end_ = _add(end_, 1).clone
    end
    return text[start...end_]
  end
  def extract_int(text, key)
    pattern = _add(_add("\"", key), "\":{\"count\":")
    start = _add(index_of(text, pattern), pattern.length)
    end_ = start.clone
    while end_ < text.length
      ch = text[end_]
      if ch < "0" || ch > "9"
        break
      end
      end_ = _add(end_, 1).clone
    end
    digits = text[start...end_]
    num = parse_int(digits)
    return num
  end
  def extract_bool(text, key)
    pattern = _add(_add("\"", key), "\":")
    start = _add(index_of(text, pattern), pattern.length)
    val = text[start..._add(start, 5)]
    first = val[0]
    if first == "t"
      return true
    end
    return false
  end
  def extract_user_profile(script)
    return UserData.new(username: extract_string(script, "username"), full_name: extract_string(script, "full_name"), biography: extract_string(script, "biography"), business_email: extract_string(script, "business_email"), external_url: extract_string(script, "external_url"), edge_followed_by: EdgeCount.new(count: extract_int(script, "edge_followed_by")), edge_follow: EdgeCount.new(count: extract_int(script, "edge_follow")), edge_owner_to_timeline_media: EdgeCount.new(count: extract_int(script, "edge_owner_to_timeline_media")), profile_pic_url_hd: extract_string(script, "profile_pic_url_hd"), is_verified: extract_bool(script, "is_verified"), is_private: extract_bool(script, "is_private"))
  end
  EdgeCount = Struct.new(:count, keyword_init: true)
  UserData = Struct.new(:username, :full_name, :biography, :business_email, :external_url, :edge_followed_by, :edge_follow, :edge_owner_to_timeline_media, :profile_pic_url_hd, :is_verified, :is_private, keyword_init: true)
  $sample_script = "{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}"
  $user = extract_user_profile($sample_script)
  puts(_add(_add(_add(_add($user.full_name, " ("), $user.username), ") is "), $user.biography))
  puts(_add("number_of_posts = ", _str($user.edge_owner_to_timeline_media.count)))
  puts(_add("number_of_followers = ", _str($user.edge_followed_by.count)))
  puts(_add("number_of_followings = ", _str($user.edge_follow.count)))
  puts(_add("email = ", $user.business_email))
  puts(_add("website = ", $user.external_url))
  puts(_add("profile_picture_url = ", $user.profile_pic_url_hd))
  puts(_add("is_verified = ", _str($user.is_verified)))
  puts(_add("is_private = ", _str($user.is_private)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
