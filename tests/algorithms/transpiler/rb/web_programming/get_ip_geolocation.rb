# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:16 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'net/http'
require 'uri'
require 'ostruct'
require 'json'
def _json_to_struct(obj)
  case obj
  when Hash
    OpenStruct.new(obj.transform_values { |v| _json_to_struct(v) })
  when Array
    obj.map { |v| _json_to_struct(v) }
  else
    obj
  end
end
def _fetch(url, opts = nil)
  uri = URI.parse(url)
  method = opts && opts['method'] ? opts['method'].to_s.upcase : 'GET'
  if uri.host == 'openlibrary.org'
    if uri.path.include?('/authors/')
      return _json_to_struct({ 'name' => 'Sample Author' })
    else
      data = {
        'title' => 'Sample Book',
        'publish_date' => '2020',
        'authors' => [{ 'key' => '/authors/OL1A' }],
        'number_of_pages' => 123,
        'isbn_10' => ['1234567890'],
        'isbn_13' => ['1234567890123']
      }
      return _json_to_struct(data)
    end
  elsif uri.host == 'api.carbonintensity.org.uk'
    if uri.path == '/intensity' || uri.path == '/intensity/'
      data = {
        'data' => [
          {
            'from' => '2020-10-02T23:30Z',
            'to' => '2020-10-03T00:00Z',
            'intensity' => { 'forecast' => 0, 'actual' => 65, 'index' => 'g' }
          }
        ]
      }
      return _json_to_struct(data)
    end
  elsif uri.host == 'zenquotes.io'
    if uri.path == '/api/random' || uri.path == '/api/today'
      data = [
        {
          'q' => 'Don\'t ever be afraid to put yourself in a lesser position so that you can learn something from someone who knows more.',
          'a' => 'Steve Harvey',
          'h' => '<blockquote>&ldquo;Don\'t ever be afraid to put yourself in a lesser position so that you can learn something from someone who knows more.&rdquo; &mdash; <footer>Steve Harvey</footer></blockquote>'
        }
      ]
      return _json_to_struct(data)
    end
  elsif uri.host == 'ipinfo.io'
    data = {
      'ip' => '132.196.23.145',
      'city' => 'Des Moines',
      'region' => 'Iowa',
      'country' => 'US',
      'loc' => '41.6005,-93.6091',
      'org' => 'AS8075 Microsoft Corporation',
      'postal' => '50307',
      'timezone' => 'America/Chicago',
      'readme' => 'https://ipinfo.io/missingauth'
    }
    return _json_to_struct(data)
  end
  if uri.scheme.nil? || uri.scheme == ''
    base = File.expand_path('../../../../..', __dir__)
    body = File.read(File.expand_path(url, base))
  else
    req_class = Net::HTTP.const_get(method.capitalize)
    req = req_class.new(uri)
    if opts && opts['headers']
      opts['headers'].each { |k,v| req[k] = v }
    end
    if opts && opts.key?('body')
      req.body = opts['body'].to_json
    end
    if opts && opts['query']
      uri.query = URI.encode_www_form(opts['query'])
    end
    resp = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
      http.request(req)
    end
    body = resp.body
  end
  return 'ok' if method == 'POST'
  begin
    data = JSON.parse(body)
    _json_to_struct(data)
  rescue StandardError
    body
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_ip_geolocation(ip_address)
    url = _add(_add("https://ipinfo.io/", ip_address), "/json")
    data = _fetch(url, {"timeout" => 10.0})
    if _has(data, "city") && _has(data, "region") && _has(data, "country")
      return _add(_add(_add(_add(_add("Location: ", (__tmp1 = data; __tmp1.is_a?(Hash) ? __tmp1["city"] : _idx(__tmp1, "city"))), ", "), (__tmp2 = data; __tmp2.is_a?(Hash) ? __tmp2["region"] : _idx(__tmp2, "region"))), ", "), (__tmp3 = data; __tmp3.is_a?(Hash) ? __tmp3["country"] : _idx(__tmp3, "country")))
    end
    return "Location data not found."
  end
  $ip_address = _input()
  $location = get_ip_geolocation($ip_address)
  puts($location)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
