# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:16 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def indexOf(s, sub, start)
    n = _len(s)
    m = _len(sub)
    i = start
    while i <= n - m
      j = 0
      ok = true
      while j < m
        if !_eq(s[_add(i, j)..._add(_add(i, j), 1)], sub[j..._add(j, 1)])
          ok = false
          break
        end
        j = _add(j, 1)
      end
      if ok
        return i
      end
      i = _add(i, 1)
    end
    return (0 - 1)
  end
  def splitBy(s, sep)
    res = []
    start = 0
    sepLen = _len(sep)
    idx = indexOf(s, sep, 0)
    while !_eq(idx, (0 - 1))
      res = (res + [s[start...idx]])
      start = _add(idx, sepLen)
      idx = indexOf(s, sep, start)
    end
    res = (res + [s[start..._len(s)]])
    return res
  end
  def between(s, startTag, endTag)
    startIdx = indexOf(s, startTag, 0)
    if _eq(startIdx, (0 - 1))
      return ""
    end
    startIdx = _add(startIdx, _len(startTag))
    endIdx = indexOf(s, endTag, startIdx)
    if _eq(endIdx, (0 - 1))
      return ""
    end
    return s[startIdx...endIdx]
  end
  def intToString(n)
    if _eq(n, 0)
      return "0"
    end
    num = n
    digits = ""
    while num > 0
      d = num % 10
      digits = _add("0123456789"[d..._add(d, 1)], digits)
      num = num / 10
    end
    return digits
  end
  def fetch_jobs(location)
    blocks = splitBy($SAMPLE_HTML, "data-tn-component=\"organicJob\"")
    jobs = []
    i = 1
    while i < _len(blocks)
      block = (__tmp1 = blocks; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      title = between(block, "data-tn-element=\"jobTitle\">", "</a>")
      company = between(block, "class=\"company\">", "</span>")
      jobs = (jobs + [Job.new(title: title, company: company)])
      i = _add(i, 1)
    end
    return jobs
  end
  def main()
    jobs = fetch_jobs("Bangalore")
    i = 0
    while i < _len(jobs)
      j = (__tmp2 = jobs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      idx = _add(i, 1)
      puts(_add(_add(_add(_add(_add("Job ", intToString(idx)), " is "), j.title), " at "), j.company))
      i = _add(i, 1)
    end
  end
  Object.send(:remove_const, :Job) if Object.const_defined?(:Job)
  Job = Struct.new(:title, :company, keyword_init: true)
  $SAMPLE_HTML = "<div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">Android Developer</a><span class=\"company\">ABC Corp</span></div><div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">iOS Engineer</a><span class=\"company\">XYZ Ltd</span></div>"
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
