# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'net/http'
require 'uri'
require 'ostruct'
require 'json'
def _json_to_struct(obj)
  case obj
  when Hash
    OpenStruct.new(obj.transform_values { |v| _json_to_struct(v) })
  when Array
    obj.map { |v| _json_to_struct(v) }
  else
    obj
  end
end
def _fetch(url, opts = nil)
  uri = URI.parse(url)
  method = opts && opts['method'] ? opts['method'].to_s.upcase : 'GET'
  if uri.host == 'openlibrary.org'
    if uri.path.include?('/authors/')
      return _json_to_struct({ 'name' => 'Sample Author' })
    else
      data = {
        'title' => 'Sample Book',
        'publish_date' => '2020',
        'authors' => [{ 'key' => '/authors/OL1A' }],
        'number_of_pages' => 123,
        'isbn_10' => ['1234567890'],
        'isbn_13' => ['1234567890123']
      }
      return _json_to_struct(data)
    end
  end
  if uri.scheme.nil? || uri.scheme == ''
    base = File.expand_path('../../../../..', __dir__)
    body = File.read(File.expand_path(url, base))
  else
    req_class = Net::HTTP.const_get(method.capitalize)
    req = req_class.new(uri)
    if opts && opts['headers']
      opts['headers'].each { |k,v| req[k] = v }
    end
    if opts && opts.key?('body')
      req.body = opts['body'].to_json
    end
    if opts && opts['query']
      uri.query = URI.encode_www_form(opts['query'])
    end
    resp = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
      http.request(req)
    end
    body = resp.body
  end
  return 'ok' if method == 'POST'
  begin
    data = JSON.parse(body)
    _json_to_struct(data)
  rescue StandardError
    body
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def join(xs, sep)
    res = "".clone
    i = 0.clone
    while i < xs.length
      if i > 0
        res = _add(res, sep).clone
      end
      res = _add(res, xs[i]).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def count_char(s, ch)
    cnt = 0.clone
    i = 0.clone
    while i < s.length
      if s[i..._add(i, 1)] == ch
        cnt = _add(cnt, 1).clone
      end
      i = _add(i, 1).clone
    end
    return cnt
  end
  def strip(s)
    start = 0.clone
    end_ = s.length.clone
    while start < end_ && s[start..._add(start, 1)] == " "
      start = _add(start, 1).clone
    end
    while end_ > start && s[end_ - 1...end_] == " "
      end_ = end_ - 1.clone
    end
    return s[start...end_]
  end
  def trim_slashes(s)
    start = 0.clone
    end_ = s.length.clone
    while start < end_ && s[start..._add(start, 1)] == "/"
      start = _add(start, 1).clone
    end
    while end_ > start && s[end_ - 1...end_] == "/"
      end_ = end_ - 1.clone
    end
    return s[start...end_]
  end
  def normalize_olid(olid)
    stripped = strip(olid)
    cleaned = trim_slashes(stripped)
    if count_char(cleaned, "/") != 1
      panic(_add(olid, " is not a valid Open Library olid"))
    end
    return cleaned
  end
  def get_book_data(olid)
    norm = normalize_olid(olid)
    url = _add(_add("https://openlibrary.org/", norm), ".json")
    data = _fetch(url)
    return data
  end
  def get_author_data(olid)
    norm = normalize_olid(olid)
    url = _add(_add("https://openlibrary.org/", norm), ".json")
    data = _fetch(url)
    return data
  end
  def summarize_book(book)
    names = [].clone
    i = 0.clone
    while i < book.authors.length
      ref = book.authors[i]
      auth = get_author_data(ref.key)
      names = (names << (auth.name)).clone
      i = _add(i, 1).clone
    end
    return BookSummary.new(title: book.title, publish_date: book.publish_date, authors: join(names, ", "), number_of_pages: book.number_of_pages, isbn_10: join(book.isbn_10, ", "), isbn_13: join(book.isbn_13, ", "))
  end
  def main()
    book = get_book_data("isbn/0140328726")
    summary = summarize_book(book)
    puts(_add("Title: ", summary.title))
    puts(_add("Publish date: ", summary.publish_date))
    puts(_add("Authors: ", summary.authors))
    puts(_add("Number of pages: ", _str(summary.number_of_pages)))
    puts(_add("ISBN (10): ", summary.isbn_10))
    puts(_add("ISBN (13): ", summary.isbn_13))
  end
  AuthorRef = Struct.new(:key, keyword_init: true)
  BookData = Struct.new(:title, :publish_date, :authors, :number_of_pages, :isbn_10, :isbn_13, keyword_init: true)
  AuthorData = Struct.new(:name, keyword_init: true)
  BookSummary = Struct.new(:title, :publish_date, :authors, :number_of_pages, :isbn_10, :isbn_13, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
