# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0.clone
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def index_of_substring(s, sub)
    n = s.length
    m = sub.length
    if m == 0
      return 0
    end
    i = 0.clone
    while i <= n - m
      j = 0.clone
      is_match = true.clone
      while j < m
        if s[_add(i, j)] != sub[j]
          is_match = false.clone
          break
        end
        j = _add(j, 1).clone
      end
      if is_match
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def split(s, sep)
    parts = [].clone
    last = 0.clone
    i = 0.clone
    while i < s.length
      ch = s[i]
      if ch == sep
        parts = (parts << (s[last...i])).clone
        last = _add(i, 1).clone
      end
      if _add(i, 1) == s.length
        parts = (parts << (s[last..._add(i, 1)])).clone
      end
      i = _add(i, 1).clone
    end
    return parts
  end
  def get_sub_domain_name(url)
    proto_pos = index_of_substring(url, "://")
    start = 0.clone
    if proto_pos >= 0
      start = _add(proto_pos, 3).clone
    end
    i = start.clone
    while i < url.length
      if url[i] == "/"
        break
      end
      i = _add(i, 1).clone
    end
    return url[start...i]
  end
  def get_domain_name(url)
    sub = get_sub_domain_name(url)
    parts = split(sub, ".")
    if parts.length >= 2
      return _add(_add(parts[parts.length - 2], "."), parts[parts.length - 1])
    end
    return sub
  end
  def is_alnum(ch)
    chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    return index_of(chars, ch) >= 0
  end
  def contains(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def bubble_sort(xs)
    arr = xs.clone
    n = arr.length.clone
    i = 0.clone
    while i < n
      j = 0.clone
      while _add(j, 1) < n - i
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def extract_links(domain, html)
    links = [].clone
    pos = index_of_substring(html, "href=").clone
    while pos >= 0
      start_quote = index_of(html[_add(pos, 5)...html.length], "\"")
      if start_quote < 0
        break
      end
      rest = _add(_add(_add(pos, 5), start_quote), 1)
      end_quote = index_of(html[rest...html.length], "\"")
      if end_quote < 0
        break
      end
      link = html[rest..._add(rest, end_quote)]
      if !contains(links, link)
        absolute = link.clone
        if !(index_of_substring(link, "http://") == 0 || index_of_substring(link, "https://") == 0)
          if index_of_substring(link, "/") == 0
            absolute = _add(_add("https://", domain), link).clone
          else
            absolute = _add(_add(_add("https://", domain), "/"), link).clone
          end
        end
        links = (links << (absolute)).clone
      end
      pos = index_of_substring(html[_add(rest, end_quote)...html.length], "href=").clone
      if pos >= 0
        pos = _add(_add(pos, rest), end_quote).clone
      end
    end
    return links
  end
  def extract_emails(domain, text)
    emails = [].clone
    i = 0.clone
    while i < text.length
      if text[i] == "@"
        if text[_add(i, 1)..._add(_add(i, 1), domain.length)] == domain
          j = i - 1.clone
          while j >= 0 && is_alnum(text[j])
            j = j - 1.clone
          end
          local = text[_add(j, 1)...i]
          if local.length > 0
            email = _add(_add(local, "@"), domain)
            if !contains(emails, email)
              emails = (emails << (email)).clone
            end
          end
        end
      end
      i = _add(i, 1).clone
    end
    return emails
  end
  def find_page(pages, url)
    i = 0.clone
    while i < pages.length
      p = pages[i]
      if p.url == url
        return p.html
      end
      i = _add(i, 1).clone
    end
    return ""
  end
  def emails_from_url(url, pages)
    domain = get_domain_name(url)
    base_html = find_page(pages, url)
    links = extract_links(domain, base_html)
    found = [].clone
    i = 0.clone
    while i < links.length
      html = find_page(pages, links[i])
      emails = extract_emails(domain, html)
      j = 0.clone
      while j < emails.length
        if !contains(found, emails[j])
          found = (found << (emails[j])).clone
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    sorted = bubble_sort(found)
    return sorted
  end
  Page = Struct.new(:url, :html, keyword_init: true)
  $pages = [Page.new(url: "https://example.com", html: "<html><body><a href=\"/contact\">Contact</a></body></html>"), Page.new(url: "https://example.com/contact", html: "<html>Contact us at info@example.com or support@example.com</html>")]
  $emails = emails_from_url("https://example.com", $pages)
  puts(_add(_str($emails.length), " emails found:"))
  $k = 0.clone
  while $k < $emails.length
    puts($emails[$k])
    $k = _add($k, 1).clone
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
