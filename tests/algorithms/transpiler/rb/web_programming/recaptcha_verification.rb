# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def http_post(secret, client)
    success = secret == "secretKey" && client == "clientKey"
    return {"success" => success}
  end
  def authenticate(username, password)
    return username == "user" && password == "pass"
  end
  def login(_user)
  end
  def render(page)
    return _add("render:", page)
  end
  def redirect(url)
    return _add("redirect:", url)
  end
  def login_using_recaptcha(request)
    secret_key = "secretKey"
    if request.method != "POST"
      return render("login.html")
    end
    username = request.post["username"]
    password = request.post["password"]
    client_key = request.post["g-recaptcha-response"]
    response = http_post(secret_key, client_key)
    if response["success"]
      if authenticate(username, password)
        login(username)
        return redirect("/your-webpage")
      end
    end
    return render("login.html")
  end
  Request = Struct.new(:method, :post, keyword_init: true)
  $get_request = Request.new(method: "GET", post: {})
  puts(login_using_recaptcha($get_request))
  $ok_request = Request.new(method: "POST", post: {"username" => "user", "password" => "pass", "g-recaptcha-response" => "clientKey"})
  puts(login_using_recaptcha($ok_request))
  $bad_request = Request.new(method: "POST", post: {"username" => "user", "password" => "wrong", "g-recaptcha-response" => "clientKey"})
  puts(login_using_recaptcha($bad_request))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
