# Generated by Mochi transpiler v0.10.67 on 2025-08-17 09:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def index_of(s, sub, start)
    n = _len(s)
    m = _len(sub)
    i = start
    while i <= n - m
      j = 0
      while j < m && _eq(s[_add(i, j)..._add(_add(i, j), 1)], sub[j..._add(j, 1)])
        j = _add(j, 1)
      end
      if _eq(j, m)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def find_all(html, open, close)
    res = []
    pos = 0
    ol = _len(open)
    cl = _len(close)
    while true
      start = index_of(html, open, pos)
      if start < 0
        break
      end
      begin_ = _add(start, ol)
      end_ = index_of(html, close, begin_)
      if end_ < 0
        break
      end
      res = _append(res, html[begin_...end_])
      pos = _add(end_, cl)
    end
    return res
  end
  def world_covid19_stats(html)
    keys = find_all(html, "<h1>", "</h1>")
    values = find_all(html, "<div class=\"maincounter-number\"><span>", "</span></div>")
    extra_keys = find_all(html, "<span class=\"panel-title\">", "</span>")
        __tmp1 = extra_keys
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      keys = _append(keys, k)
    end
    extra_vals = find_all(html, "<div class=\"number-table-main\">", "</div>")
        __tmp2 = extra_vals
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |v|
      values = _append(values, v)
    end
    res = []
    i = 0
    while i < _len(keys) && i < _len(values)
      res = _append(res, [(__tmp3 = keys; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), (__tmp4 = values; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))])
      i = _add(i, 1)
    end
    return res
  end
  $sample_html = "<h1>Coronavirus Cases:</h1><div class=\"maincounter-number\"><span>100</span></div><h1>Deaths:</h1><div class=\"maincounter-number\"><span>10</span></div><h1>Recovered:</h1><div class=\"maincounter-number\"><span>50</span></div><span class=\"panel-title\">Active Cases</span><div class=\"number-table-main\">20</div><span class=\"panel-title\">Closed Cases</span><div class=\"number-table-main\">80</div>"
  $stats = world_covid19_stats($sample_html)
  puts("COVID-19 Status of the World\n")
  $i = 0
  while $i < _len($stats)
    puts((__tmp5 = (__tmp6 = $stats; __tmp6.is_a?(Hash) ? __tmp6[$i] : _idx(__tmp6, $i)); __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)))
    puts((__tmp7 = (__tmp8 = $stats; __tmp8.is_a?(Hash) ? __tmp8[$i] : _idx(__tmp8, $i)); __tmp7.is_a?(Hash) ? __tmp7[1] : _idx(__tmp7, 1)))
    $i = _add($i, 1)
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
