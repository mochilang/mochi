# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_header(hs, key)
    i = 0.clone
    while i < hs.length
      pair = hs[i]
      if pair[0] == key
        return pair[1]
      end
      i = _add(i, 1).clone
    end
    return ""
  end
  def mock_response(url, headers)
    if url != $AUTHENTICATED_USER_ENDPOINT
      panic("wrong url")
    end
    auth = get_header(headers, "Authorization")
    if auth.length == 0
      panic("missing Authorization")
    end
    if auth[0...6] != "token "
      panic("bad token prefix")
    end
    accept = get_header(headers, "Accept")
    if accept.length == 0
      panic("missing Accept")
    end
    return GitHubUser.new(login: "test", id: 1)
  end
  def fetch_github_info(auth_token)
    headers = [["Authorization", _add("token ", auth_token)], ["Accept", "application/vnd.github.v3+json"]]
    return mock_response($AUTHENTICATED_USER_ENDPOINT, headers)
  end
  def test_fetch_github_info()
    result = fetch_github_info("token")
    if result.login != "test"
      panic("login mismatch")
    end
    if result.id != 1
      panic("id mismatch")
    end
    puts(result.login)
    puts(_str(result.id))
  end
  def main()
    test_fetch_github_info()
  end
  $AUTHENTICATED_USER_ENDPOINT = "https://api.github.com/user"
  GitHubUser = Struct.new(:login, :id, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
