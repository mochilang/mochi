# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def is_digit(ch)
    i = 0
    while i < $DIGITS.length
      if _eq($DIGITS[i], ch)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def find_substring(haystack, needle)
    i = 0
    while i <= haystack.length - needle.length
      j = 0
      while j < needle.length
        if !_eq(haystack[_add(i, j)], needle[j])
          break
        end
        j = _add(j, 1)
      end
      if _eq(j, needle.length)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def extract_citation(html)
    marker = "Cited by "
    idx = find_substring(html, marker)
    if idx < 0
      return ""
    end
    pos = _add(idx, marker.length)
    result = ""
    while pos < html.length
      ch = html[pos]
      if !is_digit(ch)
        break
      end
      result = _add(result, ch)
      pos = _add(pos, 1)
    end
    return result
  end
  def get_citation(base_url, params)
    html = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>"
    return extract_citation(html)
  end
  $DIGITS = "0123456789"
  if _eq(__name__, "__main__")
    $params = {"title" => "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density", "journal" => "Chem. Mater.", "volume" => "30", "pages" => "3979-3990", "year" => "2018", "hl" => "en"}
    puts(get_citation("https://scholar.google.com/scholar_lookup", $params))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
