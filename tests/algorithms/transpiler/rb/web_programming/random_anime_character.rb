# Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return $seed
  end
  def random_int(a, b)
    return _add(a, (rand() % (b - a)))
  end
  def save_image(_name)
  end
  def random_anime_character()
    idx = random_int(0, $characters.length)
    ch = $characters[idx]
    save_image(ch.image_file)
    return ch
  end
  $seed = 123456789.clone
  Character = Struct.new(:title, :description, :image_file, keyword_init: true)
  $characters = [Character.new(title: "Naruto Uzumaki", description: "A spirited ninja of the Hidden Leaf Village.", image_file: "naruto.png"), Character.new(title: "Sailor Moon", description: "A magical girl who fights for love and justice.", image_file: "sailor_moon.png"), Character.new(title: "Spike Spiegel", description: "A bounty hunter with a laid-back attitude.", image_file: "spike_spiegel.png")]
  $c = random_anime_character()
  puts($c.title)
  puts("")
  puts($c.description)
  puts("")
  puts(_add("Image saved : ", $c.image_file))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
