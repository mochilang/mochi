# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_int(s)
    value = 0
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if _eq(ch, ",")
        i = _add(i, 1)
        next
      end
      value = _add(value * 10, ((ch).to_i))
      i = _add(i, 1)
    end
    return value
  end
  def find(haystack, needle, start)
    nlen = needle.length
    i = start
    while i <= haystack.length - nlen
      j = 0
      matched = true
      while j < nlen
        if !_eq(haystack[_add(i, j)..._add(_add(i, j), 1)], needle[j..._add(j, 1)])
          matched = false
          break
        end
        j = _add(j, 1)
      end
      if matched
        return i
      end
      i = _add(i, 1)
    end
    return 0 - 1
  end
  def extract_numbers(html)
    nums = []
    pos = 0
    start_tag = "<span>"
    end_tag = "</span>"
    while true
      s = find(html, start_tag, pos)
      if _eq(s, 0 - 1)
        break
      end
      content_start = _add(s, start_tag.length)
      e = find(html, end_tag, content_start)
      if _eq(e, 0 - 1)
        break
      end
      num_str = html[content_start...e]
      nums = (nums + [parse_int(num_str)])
      pos = _add(e, end_tag.length)
    end
    return nums
  end
  def covid_stats(html)
    nums = extract_numbers(html)
    return CovidData.new(cases: nums[0], deaths: nums[1], recovered: nums[2])
  end
  def main()
    sample_html = _add(_add("<div class=\"maincounter-number\"><span>123456</span></div>", "<div class=\"maincounter-number\"><span>7890</span></div>"), "<div class=\"maincounter-number\"><span>101112</span></div>")
    stats = covid_stats(sample_html)
    puts(_add("Total COVID-19 cases in the world: ", _str(stats.cases)))
    puts(_add("Total deaths due to COVID-19 in the world: ", _str(stats.deaths)))
    puts(_add("Total COVID-19 patients recovered in the world: ", _str(stats.recovered)))
  end
  CovidData = Struct.new(:cases, :deaths, :recovered, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
