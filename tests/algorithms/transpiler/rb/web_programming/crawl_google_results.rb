# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of_from(s, sub, start)
    i = start
    max = s.length - sub.length
    while i <= max
      if _eq(s[i..._add(i, sub.length)], sub)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def extract_links(html)
    res = []
    i = 0
    while true
      tag_start = index_of_from(html, "<a class=\"eZt8xd\"", i)
      if _eq(tag_start, (-1))
        break
      end
      href_start = index_of_from(html, "href=\"", tag_start)
      if _eq(href_start, (-1))
        break
      end
      href_start = _add(href_start, "href=\"".length)
      href_end = index_of_from(html, "\"", href_start)
      if _eq(href_end, (-1))
        break
      end
      href = html[href_start...href_end]
      text_start = _add(index_of_from(html, ">", href_end), 1)
      text_end = index_of_from(html, "</a>", text_start)
      if _eq(text_end, (-1))
        break
      end
      text = html[text_start...text_end]
      link = {"href" => href, "text" => text}
      res = (res + [link])
      i = _add(text_end, "</a>".length)
    end
    return res
  end
  def main()
    html = _add(_add("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>", "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>"), "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>")
    links = extract_links(html)
    puts(_str(links.length))
    i = 0
    while i < links.length && i < 5
      link = links[i]
      href = link["href"]
      text = link["text"]
      if _eq(text, "Maps")
        puts(href)
      else
        puts(_add("https://google.com", href))
      end
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
