# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def exponential_moving_average(stock_prices, window_size)
    if window_size <= 0
      panic("window_size must be > 0")
    end
    alpha = 2.0 / (_add(1.0, ((window_size).to_f)))
    moving_average = 0.0
    result = []
    i = 0
    while i < stock_prices.length
      price = stock_prices[i]
      if i <= window_size
        if i == 0
          moving_average = price
        else
          moving_average = (_add(moving_average, price)) * 0.5
        end
      else
        moving_average = _add(alpha * price, (1.0 - alpha) * moving_average)
      end
      result = (result << (moving_average))
      i = _add(i, 1)
    end
    return result
  end
  $stock_prices = [2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0]
  $window_size = 3
  $result = exponential_moving_average($stock_prices, $window_size)
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
