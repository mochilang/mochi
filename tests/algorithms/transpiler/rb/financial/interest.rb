# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def panic(msg)
    puts(msg)
  end
  def powf(base, exp)
    result = 1.0
    i = 0
    while i < (exp).to_i
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def simple_interest(principal, daily_rate, days)
    if days <= 0.0
      panic("days_between_payments must be > 0")
      return 0.0
    end
    if daily_rate < 0.0
      panic("daily_interest_rate must be >= 0")
      return 0.0
    end
    if principal <= 0.0
      panic("principal must be > 0")
      return 0.0
    end
    return principal * daily_rate * days
  end
  def compound_interest(principal, nominal_rate, periods)
    if periods <= 0.0
      panic("number_of_compounding_periods must be > 0")
      return 0.0
    end
    if nominal_rate < 0.0
      panic("nominal_annual_interest_rate_percentage must be >= 0")
      return 0.0
    end
    if principal <= 0.0
      panic("principal must be > 0")
      return 0.0
    end
    return principal * (powf(_add(1.0, nominal_rate), periods) - 1.0)
  end
  def apr_interest(principal, apr, years)
    if years <= 0.0
      panic("number_of_years must be > 0")
      return 0.0
    end
    if apr < 0.0
      panic("nominal_annual_percentage_rate must be >= 0")
      return 0.0
    end
    if principal <= 0.0
      panic("principal must be > 0")
      return 0.0
    end
    return compound_interest(principal, apr / 365.0, years * 365.0)
  end
  def main()
    puts((simple_interest(18000.0, 0.06, 3.0)).to_s)
    puts((simple_interest(0.5, 0.06, 3.0)).to_s)
    puts((simple_interest(18000.0, 0.01, 10.0)).to_s)
    puts((compound_interest(10000.0, 0.05, 3.0)).to_s)
    puts((compound_interest(10000.0, 0.05, 1.0)).to_s)
    puts((apr_interest(10000.0, 0.05, 3.0)).to_s)
    puts((apr_interest(10000.0, 0.05, 1.0)).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
