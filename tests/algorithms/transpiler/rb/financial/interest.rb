# Generated by Mochi transpiler v0.10.65 on 2025-08-14 10:00 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def panic(msg)
    puts(msg)
  end
  def powf(base, exp)
    result = 1.0
    i = 0
    while i < (exp).to_i
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def simple_interest(principal, daily_rate, days)
    if days <= 0.0
      panic("days_between_payments must be > 0")
      return 0.0
    end
    if daily_rate < 0.0
      panic("daily_interest_rate must be >= 0")
      return 0.0
    end
    if principal <= 0.0
      panic("principal must be > 0")
      return 0.0
    end
    return principal * daily_rate * days
  end
  def compound_interest(principal, nominal_rate, periods)
    if periods <= 0.0
      panic("number_of_compounding_periods must be > 0")
      return 0.0
    end
    if nominal_rate < 0.0
      panic("nominal_annual_interest_rate_percentage must be >= 0")
      return 0.0
    end
    if principal <= 0.0
      panic("principal must be > 0")
      return 0.0
    end
    return principal * (powf(_add(1.0, nominal_rate), periods) - 1.0)
  end
  def apr_interest(principal, apr, years)
    if years <= 0.0
      panic("number_of_years must be > 0")
      return 0.0
    end
    if apr < 0.0
      panic("nominal_annual_percentage_rate must be >= 0")
      return 0.0
    end
    if principal <= 0.0
      panic("principal must be > 0")
      return 0.0
    end
    return compound_interest(principal, apr / 365.0, years * 365.0)
  end
  def main()
    puts(_str(simple_interest(18000.0, 0.06, 3.0)))
    puts(_str(simple_interest(0.5, 0.06, 3.0)))
    puts(_str(simple_interest(18000.0, 0.01, 10.0)))
    puts(_str(compound_interest(10000.0, 0.05, 3.0)))
    puts(_str(compound_interest(10000.0, 0.05, 1.0)))
    puts(_str(apr_interest(10000.0, 0.05, 3.0)))
    puts(_str(apr_interest(10000.0, 0.05, 1.0)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
