# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow_float(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def equated_monthly_installments(principal, rate_per_annum, years_to_repay)
    if principal <= 0.0
      panic("Principal borrowed must be > 0")
    end
    if rate_per_annum < 0.0
      panic("Rate of interest must be >= 0")
    end
    if years_to_repay <= 0
      panic("Years to repay must be an integer > 0")
    end
    rate_per_month = rate_per_annum / 12.0
    number_of_payments = years_to_repay * 12
    factor = pow_float(_add(1.0, rate_per_month), number_of_payments)
    return principal * rate_per_month * factor / (factor - 1.0)
  end
  puts((equated_monthly_installments(25000.0, 0.12, 3)).to_s)
  puts((equated_monthly_installments(25000.0, 0.12, 10)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
