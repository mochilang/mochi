# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def simple_moving_average(data, window_size)
    if window_size < 1
      panic("Window size must be a positive integer")
    end
    result = []
    window_sum = 0.0
    i = 0
    while i < data.length
      window_sum = _add(window_sum, data[i])
      if i >= window_size
        window_sum = window_sum - data[i - window_size]
      end
      if i >= window_size - 1
        avg = window_sum / window_size
        result = (result << (SMAValue.new(value: avg, ok: true)))
      else
        result = (result << (SMAValue.new(value: 0.0, ok: false)))
      end
      i = _add(i, 1)
    end
    return result
  end
  SMAValue = Struct.new(:value, :ok, keyword_init: true)
  $data = [10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0]
  $window_size = 3
  $sma_values = simple_moving_average($data, $window_size)
  $idx = 0
  while $idx < $sma_values.length
    item = $sma_values[$idx]
    if item.ok
      puts(_add(_add(_add("Day ", (_add($idx, 1)).to_s), ": "), (item.value).to_s))
    else
      puts(_add(_add("Day ", (_add($idx, 1)).to_s), ": Not enough data for SMA"))
    end
    $idx = _add($idx, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
