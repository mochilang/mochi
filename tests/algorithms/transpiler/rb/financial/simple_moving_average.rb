# Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def simple_moving_average(data, window_size)
    if window_size < 1
      panic("Window size must be a positive integer")
    end
    result = []
    window_sum = 0.0
    i = 0
    while i < _len(data)
      window_sum = _add(window_sum, (__tmp1 = data; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      if i >= window_size
        window_sum = window_sum - (__tmp2 = data; __tmp2.is_a?(Hash) ? __tmp2[i - window_size] : _idx(__tmp2, i - window_size))
      end
      if i >= window_size - 1
        avg = window_sum / window_size
        result = (result + [SMAValue.new(value: avg, ok: true)])
      else
        result = (result + [SMAValue.new(value: 0.0, ok: false)])
      end
      i = _add(i, 1)
    end
    return result
  end
  Object.send(:remove_const, :SMAValue) if Object.const_defined?(:SMAValue)
  SMAValue = Struct.new(:value, :ok, keyword_init: true)
  $data = [10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0]
  $window_size = 3
  $sma_values = simple_moving_average($data, $window_size)
  $idx = 0
  while $idx < _len($sma_values)
    item = (__tmp3 = $sma_values; __tmp3.is_a?(Hash) ? __tmp3[$idx] : _idx(__tmp3, $idx))
    if item.ok
      puts(_add(_add(_add("Day ", _str(_add($idx, 1))), ": "), _str(item.value)))
    else
      puts(_add(_add("Day ", _str(_add($idx, 1))), ": Not enough data for SMA"))
    end
    $idx = _add($idx, 1)
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
