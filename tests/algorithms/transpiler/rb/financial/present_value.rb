# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def powf(base, exponent)
    result = 1.0
    i = 0
    while i < exponent
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def round2(value)
    if value >= 0.0
      scaled = ((_add(value * 100.0, 0.5))).to_i
      return ((scaled).to_f) / 100.0
    end
    scaled = ((value * 100.0 - 0.5)).to_i
    return ((scaled).to_f) / 100.0
  end
  def present_value(discount_rate, cash_flows)
    if discount_rate < 0.0
      panic("Discount rate cannot be negative")
    end
    if cash_flows.length == 0
      panic("Cash flows list cannot be empty")
    end
    pv = 0.0
    i = 0
    factor = _add(1.0, discount_rate)
    while i < cash_flows.length
      cf = cash_flows[i]
      pv = _add(pv, cf / powf(factor, i))
      i = _add(i, 1)
    end
    return round2(pv)
  end
  puts((present_value(0.13, [10.0, 20.7, -293.0, 297.0])).to_s)
  puts((present_value(0.07, [-109129.39, 30923.23, 15098.93, 29734.0, 39.0])).to_s)
  puts((present_value(0.07, [109129.39, 30923.23, 15098.93, 29734.0, 39.0])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
