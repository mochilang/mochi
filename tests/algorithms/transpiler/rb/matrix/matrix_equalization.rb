# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def unique(nums)
    res = [].clone
    i = 0.clone
    while i < nums.length
      v = nums[i]
      found = false.clone
      j = 0.clone
      while j < res.length
        if res[j] == v
          found = true.clone
          break
        end
        j = _add(j, 1).clone
      end
      if !found
        res = (res << (v)).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def array_equalization(vector, step_size)
    if step_size <= 0
      error("Step size must be positive and non-zero.")
    end
    elems = unique(vector)
    min_updates = vector.length.clone
    i = 0.clone
    while i < elems.length
      target = elems[i]
      idx = 0.clone
      updates = 0.clone
      while idx < vector.length
        if vector[idx] != target
          updates = _add(updates, 1).clone
          idx = _add(idx, step_size).clone
        else
          idx = _add(idx, 1).clone
        end
      end
      if updates < min_updates
        min_updates = updates.clone
      end
      i = _add(i, 1).clone
    end
    return min_updates
  end
  puts(_str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4)))
  puts(_str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2)))
  puts(_str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5)))
  puts(_str(array_equalization([22, 22, 22, 33, 33, 33], 2)))
  puts(_str(array_equalization([1, 2, 3], 2147483647)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
