# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def unique(nums)
    res = []
    i = 0
    while i < nums.length
      v = (__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      found = false
      j = 0
      while j < res.length
        if _eq((__tmp2 = res; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)), v)
          found = true
          break
        end
        j = _add(j, 1)
      end
      if !found
        res = (res + [v])
      end
      i = _add(i, 1)
    end
    return res
  end
  def array_equalization(vector, step_size)
    if step_size <= 0
      panic("Step size must be positive and non-zero.")
    end
    elems = unique(vector)
    min_updates = vector.length
    i = 0
    while i < elems.length
      target = (__tmp3 = elems; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      idx = 0
      updates = 0
      while idx < vector.length
        if !_eq((__tmp4 = vector; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx)), target)
          updates = _add(updates, 1)
          idx = _add(idx, step_size)
        else
          idx = _add(idx, 1)
        end
      end
      if updates < min_updates
        min_updates = updates
      end
      i = _add(i, 1)
    end
    return min_updates
  end
  puts(_str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4)))
  puts(_str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2)))
  puts(_str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5)))
  puts(_str(array_equalization([22, 22, 22, 33, 33, 33], 2)))
  puts(_str(array_equalization([1, 2, 3], 2147483647)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
