# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bubble_sort(a)
    arr = a.clone
    n = arr.length
    i = 0.clone
    while i < n
      j = 0.clone
      while _add(j, 1) < n - i
        if arr[j] > arr[_add(j, 1)]
          temp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = temp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def median(matrix)
    linear = [].clone
    i = 0.clone
    while i < matrix.length
      row = matrix[i]
      j = 0.clone
      while j < row.length
        linear = (linear << (row[j])).clone
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    sorted = bubble_sort(linear)
    mid = (sorted.length - 1) / 2
    return sorted[mid]
  end
  $matrix1 = [[1, 3, 5], [2, 6, 9], [3, 6, 9]]
  puts(_str(median($matrix1)))
  $matrix2 = [[1, 2, 3], [4, 5, 6]]
  puts(_str(median($matrix2)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
