# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_valid_matrix(matrix)
    if matrix.length == 0
      return false
    end
    cols = matrix[0].length
        __tmp1 = matrix
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |row|
      if row.length != cols
        return false
      end
    end
    return true
  end
  def spiral_traversal(matrix)
    if !is_valid_matrix(matrix)
      return []
    end
    rows = matrix.length
    cols = matrix[0].length
    top = 0.clone
    bottom = rows - 1.clone
    left = 0.clone
    right = cols - 1.clone
    result = [].clone
    while left <= right && top <= bottom
      i = left.clone
      while i <= right
        result = (result << (matrix[top][i])).clone
        i = _add(i, 1).clone
      end
      top = _add(top, 1).clone
      i = top.clone
      while i <= bottom
        result = (result << (matrix[i][right])).clone
        i = _add(i, 1).clone
      end
      right = right - 1.clone
      if top <= bottom
        i = right.clone
        while i >= left
          result = (result << (matrix[bottom][i])).clone
          i = i - 1.clone
        end
        bottom = bottom - 1.clone
      end
      if left <= right
        i = bottom.clone
        while i >= top
          result = (result << (matrix[i][left])).clone
          i = i - 1.clone
        end
        left = _add(left, 1).clone
      end
    end
    return result
  end
  def spiral_print_clockwise(matrix)
        __tmp2 = spiral_traversal(matrix)
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |value|
      puts(_str(value))
    end
  end
  def main()
    a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
    spiral_print_clockwise(a)
    puts(((x = spiral_traversal(a)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
