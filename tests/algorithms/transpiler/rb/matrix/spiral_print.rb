# Generated by Mochi transpiler v0.10.66 on 2025-08-16 09:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_valid_matrix(matrix)
    if _eq(_len(matrix), 0)
      return false
    end
    cols = _len((__tmp1 = matrix; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
        __tmp2 = matrix
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |row|
      if !_eq(_len(row), cols)
        return false
      end
    end
    return true
  end
  def spiral_traversal(matrix)
    if !is_valid_matrix(matrix)
      return []
    end
    rows = _len(matrix)
    cols = _len((__tmp3 = matrix; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    top = 0
    bottom = rows - 1
    left = 0
    right = cols - 1
    result = []
    while left <= right && top <= bottom
      i = left
      while i <= right
        result = _append(result, (__tmp4 = (__tmp5 = matrix; __tmp5.is_a?(Hash) ? __tmp5[top] : _idx(__tmp5, top)); __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
        i = _add(i, 1)
      end
      top = _add(top, 1)
      i = top
      while i <= bottom
        result = _append(result, (__tmp6 = (__tmp7 = matrix; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)); __tmp6.is_a?(Hash) ? __tmp6[right] : _idx(__tmp6, right)))
        i = _add(i, 1)
      end
      right = right - 1
      if top <= bottom
        i = right
        while i >= left
          result = _append(result, (__tmp8 = (__tmp9 = matrix; __tmp9.is_a?(Hash) ? __tmp9[bottom] : _idx(__tmp9, bottom)); __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
          i = i - 1
        end
        bottom = bottom - 1
      end
      if left <= right
        i = bottom
        while i >= top
          result = _append(result, (__tmp10 = (__tmp11 = matrix; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)); __tmp10.is_a?(Hash) ? __tmp10[left] : _idx(__tmp10, left)))
          i = i - 1
        end
        left = _add(left, 1)
      end
    end
    return result
  end
  def spiral_print_clockwise(matrix)
        __tmp12 = spiral_traversal(matrix)
    __tmp12 = [] if __tmp12.nil?
    if __tmp12.respond_to?(:keys) && !__tmp12.is_a?(String)
      __tmp12 = __tmp12.keys
    end
    __tmp12.each do |value|
      puts(_str(value))
    end
  end
  def main()
    a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
    spiral_print_clockwise(a)
    puts(((x = spiral_traversal(a)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
