# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def check_matrix(mat)
    if mat.length < 2 || (__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)).length < 2
      panic("Expected a matrix with at least 2x2 dimensions")
    end
  end
  def add(a, b)
    check_matrix(a)
    check_matrix(b)
    if !_eq(a.length, b.length) || !_eq((__tmp2 = a; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)).length, (__tmp3 = b; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)).length)
      panic("Matrices must have the same dimensions")
    end
    rows = a.length
    cols = (__tmp4 = a; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)).length
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        row = (row + [_add((__tmp5 = (__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)); __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)), (__tmp7 = (__tmp8 = b; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)))])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def subtract(a, b)
    check_matrix(a)
    check_matrix(b)
    if !_eq(a.length, b.length) || !_eq((__tmp9 = a; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0)).length, (__tmp10 = b; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)).length)
      panic("Matrices must have the same dimensions")
    end
    rows = a.length
    cols = (__tmp11 = a; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)).length
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        row = (row + [(__tmp12 = (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)); __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)) - (__tmp14 = (__tmp15 = b; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)); __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j))])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def scalar_multiply(a, s)
    check_matrix(a)
    rows = a.length
    cols = (__tmp16 = a; __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0)).length
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        row = (row + [(__tmp17 = (__tmp18 = a; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)); __tmp17.is_a?(Hash) ? __tmp17[j] : _idx(__tmp17, j)) * s])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def multiply(a, b)
    check_matrix(a)
    check_matrix(b)
    if !_eq((__tmp19 = a; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0)).length, b.length)
      panic("Invalid dimensions for matrix multiplication")
    end
    rows = a.length
    cols = (__tmp20 = b; __tmp20.is_a?(Hash) ? __tmp20[0] : _idx(__tmp20, 0)).length
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        sum = 0.0
        k = 0
        while k < b.length
          sum = _add(sum, (__tmp21 = (__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)); __tmp21.is_a?(Hash) ? __tmp21[k] : _idx(__tmp21, k)) * (__tmp23 = (__tmp24 = b; __tmp24.is_a?(Hash) ? __tmp24[k] : _idx(__tmp24, k)); __tmp23.is_a?(Hash) ? __tmp23[j] : _idx(__tmp23, j)))
          k = _add(k, 1)
        end
        row = (row + [sum])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def identity(n)
    result = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = (row + [1.0])
        else
          row = (row + [0.0])
        end
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def transpose(a)
    check_matrix(a)
    rows = a.length
    cols = (__tmp25 = a; __tmp25.is_a?(Hash) ? __tmp25[0] : _idx(__tmp25, 0)).length
    result = []
    j = 0
    while j < cols
      row = []
      i = 0
      while i < rows
        row = (row + [(__tmp26 = (__tmp27 = a; __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i)); __tmp26.is_a?(Hash) ? __tmp26[j] : _idx(__tmp26, j))])
        i = _add(i, 1)
      end
      result = (result + [row])
      j = _add(j, 1)
    end
    return result
  end
  def main()
    mat_a = [[12.0, 10.0], [3.0, 9.0]]
    mat_b = [[3.0, 4.0], [7.0, 4.0]]
    mat_c = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
    puts(((x = add(mat_a, mat_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = subtract(mat_a, mat_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = multiply(mat_a, mat_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = scalar_multiply(mat_a, 3.5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = identity(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = transpose(mat_c)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
