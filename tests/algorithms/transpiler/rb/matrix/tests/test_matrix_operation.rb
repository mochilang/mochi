# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def check_matrix(mat)
    if mat.length < 2 || mat[0].length < 2
      panic("Expected a matrix with at least 2x2 dimensions")
    end
  end
  def add(a, b)
    check_matrix(a)
    check_matrix(b)
    if a.length != b.length || a[0].length != b[0].length
      panic("Matrices must have the same dimensions")
    end
    rows = a.length
    cols = a[0].length
    result = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        row = (row << (_add(a[i][j], b[i][j]))).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def subtract(a, b)
    check_matrix(a)
    check_matrix(b)
    if a.length != b.length || a[0].length != b[0].length
      panic("Matrices must have the same dimensions")
    end
    rows = a.length
    cols = a[0].length
    result = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        row = (row << (a[i][j] - b[i][j])).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def scalar_multiply(a, s)
    check_matrix(a)
    rows = a.length
    cols = a[0].length
    result = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        row = (row << (a[i][j] * s)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def multiply(a, b)
    check_matrix(a)
    check_matrix(b)
    if a[0].length != b.length
      panic("Invalid dimensions for matrix multiplication")
    end
    rows = a.length
    cols = b[0].length
    result = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        sum = 0.0.clone
        k = 0.clone
        while k < b.length
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def identity(n)
    result = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1.0)).clone
        else
          row = (row << (0.0)).clone
        end
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def transpose(a)
    check_matrix(a)
    rows = a.length
    cols = a[0].length
    result = [].clone
    j = 0.clone
    while j < cols
      row = [].clone
      i = 0.clone
      while i < rows
        row = (row << (a[i][j])).clone
        i = _add(i, 1).clone
      end
      result = (result << (row)).clone
      j = _add(j, 1).clone
    end
    return result
  end
  def main()
    mat_a = [[12.0, 10.0], [3.0, 9.0]]
    mat_b = [[3.0, 4.0], [7.0, 4.0]]
    mat_c = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
    puts(((x = add(mat_a, mat_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = subtract(mat_a, mat_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = multiply(mat_a, mat_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = scalar_multiply(mat_a, 3.5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = identity(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = transpose(mat_c)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
