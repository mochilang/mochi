# Generated by Mochi transpiler v0.10.66 on 2025-08-16 09:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def add(matrices)
    rows = _len((__tmp1 = matrices; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    cols = _len((__tmp2 = (__tmp3 = matrices; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)); __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
    r = 0
    result = []
    while r < rows
      row = []
      c = 0
      while c < cols
        sum = 0.0
        m = 0
        while m < _len(matrices)
          sum = _add(sum, (__tmp4 = (__tmp5 = (__tmp6 = matrices; __tmp6.is_a?(Hash) ? __tmp6[m] : _idx(__tmp6, m)); __tmp5.is_a?(Hash) ? __tmp5[r] : _idx(__tmp5, r)); __tmp4.is_a?(Hash) ? __tmp4[c] : _idx(__tmp4, c)))
          m = _add(m, 1)
        end
        row = _append(row, sum)
        c = _add(c, 1)
      end
      result = _append(result, row)
      r = _add(r, 1)
    end
    return result
  end
  def subtract(a, b)
    rows = _len(a)
    cols = _len((__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)))
    r = 0
    result = []
    while r < rows
      row = []
      c = 0
      while c < cols
        row = _append(row, (__tmp8 = (__tmp9 = a; __tmp9.is_a?(Hash) ? __tmp9[r] : _idx(__tmp9, r)); __tmp8.is_a?(Hash) ? __tmp8[c] : _idx(__tmp8, c)) - (__tmp10 = (__tmp11 = b; __tmp11.is_a?(Hash) ? __tmp11[r] : _idx(__tmp11, r)); __tmp10.is_a?(Hash) ? __tmp10[c] : _idx(__tmp10, c)))
        c = _add(c, 1)
      end
      result = _append(result, row)
      r = _add(r, 1)
    end
    return result
  end
  def scalar_multiply(matrix, n)
    result = []
    i = 0
    while i < _len(matrix)
      row = []
      j = 0
      while j < _len((__tmp12 = matrix; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)))
        row = _append(row, (__tmp13 = (__tmp14 = matrix; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)) * n)
        j = _add(j, 1)
      end
      result = _append(result, row)
      i = _add(i, 1)
    end
    return result
  end
  def multiply(a, b)
    rowsA = _len(a)
    colsA = _len((__tmp15 = a; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0)))
    rowsB = _len(b)
    colsB = _len((__tmp16 = b; __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0)))
    result = []
    i = 0
    while i < rowsA
      row = []
      j = 0
      while j < colsB
        sum = 0.0
        k = 0
        while k < colsA
          sum = _add(sum, (__tmp17 = (__tmp18 = a; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)); __tmp17.is_a?(Hash) ? __tmp17[k] : _idx(__tmp17, k)) * (__tmp19 = (__tmp20 = b; __tmp20.is_a?(Hash) ? __tmp20[k] : _idx(__tmp20, k)); __tmp19.is_a?(Hash) ? __tmp19[j] : _idx(__tmp19, j)))
          k = _add(k, 1)
        end
        row = _append(row, sum)
        j = _add(j, 1)
      end
      result = _append(result, row)
      i = _add(i, 1)
    end
    return result
  end
  def identity(n)
    result = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = _append(row, 1.0)
        else
          row = _append(row, 0.0)
        end
        j = _add(j, 1)
      end
      result = _append(result, row)
      i = _add(i, 1)
    end
    return result
  end
  def transpose(matrix)
    rows = _len(matrix)
    cols = _len((__tmp21 = matrix; __tmp21.is_a?(Hash) ? __tmp21[0] : _idx(__tmp21, 0)))
    result = []
    c = 0
    while c < cols
      row = []
      r = 0
      while r < rows
        row = _append(row, (__tmp22 = (__tmp23 = matrix; __tmp23.is_a?(Hash) ? __tmp23[r] : _idx(__tmp23, r)); __tmp22.is_a?(Hash) ? __tmp22[c] : _idx(__tmp22, c)))
        r = _add(r, 1)
      end
      result = _append(result, row)
      c = _add(c, 1)
    end
    return result
  end
  def minor(matrix, row, column)
    result = []
    i = 0
    while i < _len(matrix)
      if !_eq(i, row)
        new_row = []
        j = 0
        while j < _len((__tmp24 = matrix; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)))
          if !_eq(j, column)
            new_row = _append(new_row, (__tmp25 = (__tmp26 = matrix; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i)); __tmp25.is_a?(Hash) ? __tmp25[j] : _idx(__tmp25, j)))
          end
          j = _add(j, 1)
        end
        result = _append(result, new_row)
      end
      i = _add(i, 1)
    end
    return result
  end
  def determinant(matrix)
    if _eq(_len(matrix), 1)
      return (__tmp27 = (__tmp28 = matrix; __tmp28.is_a?(Hash) ? __tmp28[0] : _idx(__tmp28, 0)); __tmp27.is_a?(Hash) ? __tmp27[0] : _idx(__tmp27, 0))
    end
    det = 0.0
    c = 0
    while c < _len((__tmp29 = matrix; __tmp29.is_a?(Hash) ? __tmp29[0] : _idx(__tmp29, 0)))
      sub = minor(matrix, 0, c)
      sign = (_eq(c % 2, 0) ? 1.0 : -1.0)
      det = _add(det, (__tmp30 = (__tmp31 = matrix; __tmp31.is_a?(Hash) ? __tmp31[0] : _idx(__tmp31, 0)); __tmp30.is_a?(Hash) ? __tmp30[c] : _idx(__tmp30, c)) * determinant(sub) * sign)
      c = _add(c, 1)
    end
    return det
  end
  def inverse(matrix)
    det = determinant(matrix)
    if _eq(det, 0.0)
      return []
    end
    size = _len(matrix)
    matrix_minor = []
    i = 0
    while i < size
      row = []
      j = 0
      while j < size
        m = minor(matrix, i, j)
        row = _append(row, determinant(m))
        j = _add(j, 1)
      end
      matrix_minor = _append(matrix_minor, row)
      i = _add(i, 1)
    end
    cofactors = []
    i = 0
    while i < size
      row = []
      j = 0
      while j < size
        sign = (_eq((_add(i, j)) % 2, 0) ? 1.0 : -1.0)
        row = _append(row, (__tmp32 = (__tmp33 = matrix_minor; __tmp33.is_a?(Hash) ? __tmp33[i] : _idx(__tmp33, i)); __tmp32.is_a?(Hash) ? __tmp32[j] : _idx(__tmp32, j)) * sign)
        j = _add(j, 1)
      end
      cofactors = _append(cofactors, row)
      i = _add(i, 1)
    end
    adjugate = transpose(cofactors)
    return scalar_multiply(adjugate, 1.0 / det)
  end
  def main()
    matrix_a = [[12.0, 10.0], [3.0, 9.0]]
    matrix_b = [[3.0, 4.0], [7.0, 4.0]]
    matrix_c = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]]
    matrix_d = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
    puts(_add(_add("Add Operation, add(matrix_a, matrix_b) = ", ((x = add([matrix_a, matrix_b])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add("Multiply Operation, multiply(matrix_a, matrix_b) = ", ((x = multiply(matrix_a, matrix_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add("Identity: ", ((x = identity(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "\n"))
    puts(_add(_add(_add(_add("Minor of ", ((x = matrix_c); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), ((x = minor(matrix_c, 1, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add(_add(_add("Determinant of ", ((x = matrix_b); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), _str(determinant(matrix_b))), " \n"))
    puts(_add(_add(_add(_add("Inverse of ", ((x = matrix_d); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), ((x = inverse(matrix_d)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "\n"))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
