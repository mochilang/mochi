# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def add(matrices)
    rows = matrices[0].length
    cols = matrices[0][0].length
    r = 0.clone
    result = [].clone
    while r < rows
      row = [].clone
      c = 0.clone
      while c < cols
        sum = 0.0.clone
        m = 0.clone
        while m < matrices.length
          sum = _add(sum, matrices[m][r][c]).clone
          m = _add(m, 1).clone
        end
        row = (row << (sum)).clone
        c = _add(c, 1).clone
      end
      result = (result << (row)).clone
      r = _add(r, 1).clone
    end
    return result
  end
  def subtract(a, b)
    rows = a.length
    cols = a[0].length
    r = 0.clone
    result = [].clone
    while r < rows
      row = [].clone
      c = 0.clone
      while c < cols
        row = (row << (a[r][c] - b[r][c])).clone
        c = _add(c, 1).clone
      end
      result = (result << (row)).clone
      r = _add(r, 1).clone
    end
    return result
  end
  def scalar_multiply(matrix, n)
    result = [].clone
    i = 0.clone
    while i < matrix.length
      row = [].clone
      j = 0.clone
      while j < matrix[i].length
        row = (row << (matrix[i][j] * n)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def multiply(a, b)
    rowsA = a.length
    colsA = a[0].length
    rowsB = b.length
    colsB = b[0].length
    result = [].clone
    i = 0.clone
    while i < rowsA
      row = [].clone
      j = 0.clone
      while j < colsB
        sum = 0.0.clone
        k = 0.clone
        while k < colsA
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def identity(n)
    result = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1.0)).clone
        else
          row = (row << (0.0)).clone
        end
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def transpose(matrix)
    rows = matrix.length
    cols = matrix[0].length
    result = [].clone
    c = 0.clone
    while c < cols
      row = [].clone
      r = 0.clone
      while r < rows
        row = (row << (matrix[r][c])).clone
        r = _add(r, 1).clone
      end
      result = (result << (row)).clone
      c = _add(c, 1).clone
    end
    return result
  end
  def minor(matrix, row, column)
    result = [].clone
    i = 0.clone
    while i < matrix.length
      if i != row
        new_row = [].clone
        j = 0.clone
        while j < matrix[i].length
          if j != column
            new_row = (new_row << (matrix[i][j])).clone
          end
          j = _add(j, 1).clone
        end
        result = (result << (new_row)).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def determinant(matrix)
    if matrix.length == 1
      return matrix[0][0]
    end
    det = 0.0.clone
    c = 0.clone
    while c < matrix[0].length
      sub = minor(matrix, 0, c)
      sign = (c % 2 == 0 ? 1.0 : -1.0)
      det = _add(det, matrix[0][c] * determinant(sub) * sign).clone
      c = _add(c, 1).clone
    end
    return det
  end
  def inverse(matrix)
    det = determinant(matrix)
    if det == 0.0
      return []
    end
    size = matrix.length
    matrix_minor = [].clone
    i = 0.clone
    while i < size
      row = [].clone
      j = 0.clone
      while j < size
        m = minor(matrix, i, j)
        row = (row << (determinant(m))).clone
        j = _add(j, 1).clone
      end
      matrix_minor = (matrix_minor << (row)).clone
      i = _add(i, 1).clone
    end
    cofactors = [].clone
    i = 0.clone
    while i < size
      row = [].clone
      j = 0.clone
      while j < size
        sign = ((_add(i, j)) % 2 == 0 ? 1.0 : -1.0)
        row = (row << (matrix_minor[i][j] * sign)).clone
        j = _add(j, 1).clone
      end
      cofactors = (cofactors << (row)).clone
      i = _add(i, 1).clone
    end
    adjugate = transpose(cofactors)
    return scalar_multiply(adjugate, 1.0 / det)
  end
  def main()
    matrix_a = [[12.0, 10.0], [3.0, 9.0]]
    matrix_b = [[3.0, 4.0], [7.0, 4.0]]
    matrix_c = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]]
    matrix_d = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
    puts(_add(_add("Add Operation, add(matrix_a, matrix_b) = ", ((x = add([matrix_a, matrix_b])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add("Multiply Operation, multiply(matrix_a, matrix_b) = ", ((x = multiply(matrix_a, matrix_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add("Identity: ", ((x = identity(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "\n"))
    puts(_add(_add(_add(_add("Minor of ", ((x = matrix_c); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), ((x = minor(matrix_c, 1, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add(_add(_add("Determinant of ", ((x = matrix_b); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), _str(determinant(matrix_b))), " \n"))
    puts(_add(_add(_add(_add("Inverse of ", ((x = matrix_d); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), ((x = inverse(matrix_d)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "\n"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
