# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def add(matrices)
    rows = matrices[0].length
    cols = matrices[0][0].length
    r = 0
    result = []
    while r < rows
      row = []
      c = 0
      while c < cols
        sum = 0.0
        m = 0
        while m < matrices.length
          sum = _add(sum, matrices[m][r][c])
          m = _add(m, 1)
        end
        row = (row + [sum])
        c = _add(c, 1)
      end
      result = (result + [row])
      r = _add(r, 1)
    end
    return result
  end
  def subtract(a, b)
    rows = a.length
    cols = a[0].length
    r = 0
    result = []
    while r < rows
      row = []
      c = 0
      while c < cols
        row = (row + [a[r][c] - b[r][c]])
        c = _add(c, 1)
      end
      result = (result + [row])
      r = _add(r, 1)
    end
    return result
  end
  def scalar_multiply(matrix, n)
    result = []
    i = 0
    while i < matrix.length
      row = []
      j = 0
      while j < matrix[i].length
        row = (row + [matrix[i][j] * n])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def multiply(a, b)
    rowsA = a.length
    colsA = a[0].length
    rowsB = b.length
    colsB = b[0].length
    result = []
    i = 0
    while i < rowsA
      row = []
      j = 0
      while j < colsB
        sum = 0.0
        k = 0
        while k < colsA
          sum = _add(sum, a[i][k] * b[k][j])
          k = _add(k, 1)
        end
        row = (row + [sum])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def identity(n)
    result = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = (row + [1.0])
        else
          row = (row + [0.0])
        end
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def transpose(matrix)
    rows = matrix.length
    cols = matrix[0].length
    result = []
    c = 0
    while c < cols
      row = []
      r = 0
      while r < rows
        row = (row + [matrix[r][c]])
        r = _add(r, 1)
      end
      result = (result + [row])
      c = _add(c, 1)
    end
    return result
  end
  def minor(matrix, row, column)
    result = []
    i = 0
    while i < matrix.length
      if !_eq(i, row)
        new_row = []
        j = 0
        while j < matrix[i].length
          if !_eq(j, column)
            new_row = (new_row + [matrix[i][j]])
          end
          j = _add(j, 1)
        end
        result = (result + [new_row])
      end
      i = _add(i, 1)
    end
    return result
  end
  def determinant(matrix)
    if _eq(matrix.length, 1)
      return matrix[0][0]
    end
    det = 0.0
    c = 0
    while c < matrix[0].length
      sub = minor(matrix, 0, c)
      sign = (_eq(c % 2, 0) ? 1.0 : -1.0)
      det = _add(det, matrix[0][c] * determinant(sub) * sign)
      c = _add(c, 1)
    end
    return det
  end
  def inverse(matrix)
    det = determinant(matrix)
    if _eq(det, 0.0)
      return []
    end
    size = matrix.length
    matrix_minor = []
    i = 0
    while i < size
      row = []
      j = 0
      while j < size
        m = minor(matrix, i, j)
        row = (row + [determinant(m)])
        j = _add(j, 1)
      end
      matrix_minor = (matrix_minor + [row])
      i = _add(i, 1)
    end
    cofactors = []
    i = 0
    while i < size
      row = []
      j = 0
      while j < size
        sign = (_eq((_add(i, j)) % 2, 0) ? 1.0 : -1.0)
        row = (row + [matrix_minor[i][j] * sign])
        j = _add(j, 1)
      end
      cofactors = (cofactors + [row])
      i = _add(i, 1)
    end
    adjugate = transpose(cofactors)
    return scalar_multiply(adjugate, 1.0 / det)
  end
  def main()
    matrix_a = [[12.0, 10.0], [3.0, 9.0]]
    matrix_b = [[3.0, 4.0], [7.0, 4.0]]
    matrix_c = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]]
    matrix_d = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]]
    puts(_add(_add("Add Operation, add(matrix_a, matrix_b) = ", ((x = add([matrix_a, matrix_b])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add("Multiply Operation, multiply(matrix_a, matrix_b) = ", ((x = multiply(matrix_a, matrix_b)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add("Identity: ", ((x = identity(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "\n"))
    puts(_add(_add(_add(_add("Minor of ", ((x = matrix_c); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), ((x = minor(matrix_c, 1, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " \n"))
    puts(_add(_add(_add(_add("Determinant of ", ((x = matrix_b); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), _str(determinant(matrix_b))), " \n"))
    puts(_add(_add(_add(_add("Inverse of ", ((x = matrix_d); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " = "), ((x = inverse(matrix_d)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "\n"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
