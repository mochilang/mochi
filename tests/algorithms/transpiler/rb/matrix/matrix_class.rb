# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def make_matrix(values)
    r = values.length
    if r == 0
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    c = values[0].length
    i = 0.clone
    while i < r
      if values[i].length != c
        return Matrix.new(data: [], rows: 0, cols: 0)
      end
      i = _add(i, 1).clone
    end
    return Matrix.new(data: values, rows: r, cols: c)
  end
  def matrix_columns(m)
    cols = [].clone
    j = 0.clone
    while j < m.cols
      col = [].clone
      i = 0.clone
      while i < m.rows
        col = (col << (m.data[i][j])).clone
        i = _add(i, 1).clone
      end
      cols = (cols << (col)).clone
      j = _add(j, 1).clone
    end
    return cols
  end
  def matrix_identity(m)
    vals = [].clone
    i = 0.clone
    while i < m.rows
      row = [].clone
      j = 0.clone
      while j < m.cols
        v = (i == j ? 1.0 : 0.0)
        row = (row << (v)).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_minor(m, r, c)
    vals = [].clone
    i = 0.clone
    while i < m.rows
      if i != r
        row = [].clone
        j = 0.clone
        while j < m.cols
          if j != c
            row = (row << (m.data[i][j])).clone
          end
          j = _add(j, 1).clone
        end
        vals = (vals << (row)).clone
      end
      i = _add(i, 1).clone
    end
    sub = Matrix.new(data: vals, rows: m.rows - 1, cols: m.cols - 1)
    return matrix_determinant(sub)
  end
  def matrix_cofactor(m, r, c)
    minor = matrix_minor(m, r, c)
    if (_add(r, c)) % 2 == 0
      return minor
    end
    return -1.0 * minor
  end
  def matrix_minors(m)
    vals = [].clone
    i = 0.clone
    while i < m.rows
      row = [].clone
      j = 0.clone
      while j < m.cols
        row = (row << (matrix_minor(m, i, j))).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_cofactors(m)
    vals = [].clone
    i = 0.clone
    while i < m.rows
      row = [].clone
      j = 0.clone
      while j < m.cols
        row = (row << (matrix_cofactor(m, i, j))).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_determinant(m)
    if m.rows != m.cols
      return 0.0
    end
    if m.rows == 0
      return 0.0
    end
    if m.rows == 1
      return m.data[0][0]
    end
    if m.rows == 2
      return m.data[0][0] * m.data[1][1] - m.data[0][1] * m.data[1][0]
    end
    sum = 0.0.clone
    j = 0.clone
    while j < m.cols
      sum = _add(sum, m.data[0][j] * matrix_cofactor(m, 0, j)).clone
      j = _add(j, 1).clone
    end
    return sum
  end
  def matrix_is_invertible(m)
    return matrix_determinant(m) != 0.0
  end
  def matrix_adjugate(m)
    cof = matrix_cofactors(m)
    vals = [].clone
    i = 0.clone
    while i < m.rows
      row = [].clone
      j = 0.clone
      while j < m.cols
        row = (row << (cof.data[j][i])).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_inverse(m)
    det = matrix_determinant(m)
    if det == 0.0
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    adj = matrix_adjugate(m)
    return matrix_mul_scalar(adj, 1.0 / det)
  end
  def matrix_add_row(m, row)
    newData = m.data.clone
    newData = (newData << (row)).clone
    return Matrix.new(data: newData, rows: _add(m.rows, 1), cols: m.cols)
  end
  def matrix_add_column(m, col)
    newData = [].clone
    i = 0.clone
    while i < m.rows
      newData = (newData << ((m.data[i] << (col[i])))).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: newData, rows: m.rows, cols: _add(m.cols, 1))
  end
  def matrix_mul_scalar(m, s)
    vals = [].clone
    i = 0.clone
    while i < m.rows
      row = [].clone
      j = 0.clone
      while j < m.cols
        row = (row << (m.data[i][j] * s)).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_neg(m)
    return matrix_mul_scalar(m, -1.0)
  end
  def matrix_add(a, b)
    if a.rows != b.rows || a.cols != b.cols
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    vals = [].clone
    i = 0.clone
    while i < a.rows
      row = [].clone
      j = 0.clone
      while j < a.cols
        row = (row << (_add(a.data[i][j], b.data[i][j]))).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: a.rows, cols: a.cols)
  end
  def matrix_sub(a, b)
    if a.rows != b.rows || a.cols != b.cols
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    vals = [].clone
    i = 0.clone
    while i < a.rows
      row = [].clone
      j = 0.clone
      while j < a.cols
        row = (row << (a.data[i][j] - b.data[i][j])).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: a.rows, cols: a.cols)
  end
  def matrix_dot(row, col)
    sum = 0.0.clone
    i = 0.clone
    while i < row.length
      sum = _add(sum, row[i] * col[i]).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def matrix_mul(a, b)
    if a.cols != b.rows
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    bcols = matrix_columns(b)
    vals = [].clone
    i = 0.clone
    while i < a.rows
      row = [].clone
      j = 0.clone
      while j < b.cols
        row = (row << (matrix_dot(a.data[i], bcols[j]))).clone
        j = _add(j, 1).clone
      end
      vals = (vals << (row)).clone
      i = _add(i, 1).clone
    end
    return Matrix.new(data: vals, rows: a.rows, cols: b.cols)
  end
  def matrix_pow(m, p)
    if p == 0
      return matrix_identity(m)
    end
    if p < 0
      if matrix_is_invertible(m)
        return matrix_pow(matrix_inverse(m), -p)
      end
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    result = m.clone
    i = 1.clone
    while i < p
      result = matrix_mul(result, m).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def matrix_to_string(m)
    if m.rows == 0
      return "[]"
    end
    s = "[".clone
    i = 0.clone
    while i < m.rows
      s = _add(s, "[").clone
      j = 0.clone
      while j < m.cols
        s = _add(s, _str(m.data[i][j])).clone
        if j < m.cols - 1
          s = _add(s, " ").clone
        end
        j = _add(j, 1).clone
      end
      s = _add(s, "]").clone
      if i < m.rows - 1
        s = _add(s, "\n ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def main()
    m = make_matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])
    puts(matrix_to_string(m))
    puts(((x = matrix_columns(m)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_add(_add(_str(m.rows), ","), _str(m.cols)))
    puts(_str(matrix_is_invertible(m)))
    puts(matrix_to_string(matrix_identity(m)))
    puts(_str(matrix_determinant(m)))
    puts(matrix_to_string(matrix_minors(m)))
    puts(matrix_to_string(matrix_cofactors(m)))
    puts(matrix_to_string(matrix_adjugate(m)))
    m2 = matrix_mul_scalar(m, 3.0)
    puts(matrix_to_string(m2))
    puts(matrix_to_string(matrix_add(m, m2)))
    puts(matrix_to_string(matrix_sub(m, m2)))
    puts(matrix_to_string(matrix_pow(m, 3)))
    m3 = matrix_add_row(m, [10.0, 11.0, 12.0])
    puts(matrix_to_string(m3))
    m4 = matrix_add_column(m2, [8.0, 16.0, 32.0])
    puts(matrix_to_string(matrix_mul(m3, m4)))
  end
  Matrix = Struct.new(:data, :rows, :cols, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
