# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def make_matrix(values)
    r = values.length
    if _eq(r, 0)
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    c = values[0].length
    i = 0
    while i < r
      if !_eq(values[i].length, c)
        return Matrix.new(data: [], rows: 0, cols: 0)
      end
      i = _add(i, 1)
    end
    return Matrix.new(data: values, rows: r, cols: c)
  end
  def matrix_columns(m)
    cols = []
    j = 0
    while j < m.cols
      col = []
      i = 0
      while i < m.rows
        col = (col + [m.data[i][j]])
        i = _add(i, 1)
      end
      cols = (cols + [col])
      j = _add(j, 1)
    end
    return cols
  end
  def matrix_identity(m)
    vals = []
    i = 0
    while i < m.rows
      row = []
      j = 0
      while j < m.cols
        v = (_eq(i, j) ? 1.0 : 0.0)
        row = (row + [v])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_minor(m, r, c)
    vals = []
    i = 0
    while i < m.rows
      if !_eq(i, r)
        row = []
        j = 0
        while j < m.cols
          if !_eq(j, c)
            row = (row + [m.data[i][j]])
          end
          j = _add(j, 1)
        end
        vals = (vals + [row])
      end
      i = _add(i, 1)
    end
    sub = Matrix.new(data: vals, rows: m.rows - 1, cols: m.cols - 1)
    return matrix_determinant(sub)
  end
  def matrix_cofactor(m, r, c)
    minor = matrix_minor(m, r, c)
    if _eq((_add(r, c)) % 2, 0)
      return minor
    end
    return -1.0 * minor
  end
  def matrix_minors(m)
    vals = []
    i = 0
    while i < m.rows
      row = []
      j = 0
      while j < m.cols
        row = (row + [matrix_minor(m, i, j)])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_cofactors(m)
    vals = []
    i = 0
    while i < m.rows
      row = []
      j = 0
      while j < m.cols
        row = (row + [matrix_cofactor(m, i, j)])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_determinant(m)
    if !_eq(m.rows, m.cols)
      return 0.0
    end
    if _eq(m.rows, 0)
      return 0.0
    end
    if _eq(m.rows, 1)
      return m.data[0][0]
    end
    if _eq(m.rows, 2)
      return m.data[0][0] * m.data[1][1] - m.data[0][1] * m.data[1][0]
    end
    sum = 0.0
    j = 0
    while j < m.cols
      sum = _add(sum, m.data[0][j] * matrix_cofactor(m, 0, j))
      j = _add(j, 1)
    end
    return sum
  end
  def matrix_is_invertible(m)
    return !_eq(matrix_determinant(m), 0.0)
  end
  def matrix_adjugate(m)
    cof = matrix_cofactors(m)
    vals = []
    i = 0
    while i < m.rows
      row = []
      j = 0
      while j < m.cols
        row = (row + [cof.data[j][i]])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_inverse(m)
    det = matrix_determinant(m)
    if _eq(det, 0.0)
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    adj = matrix_adjugate(m)
    return matrix_mul_scalar(adj, 1.0 / det)
  end
  def matrix_add_row(m, row)
    newData = m.data
    newData = (newData + [row])
    return Matrix.new(data: newData, rows: _add(m.rows, 1), cols: m.cols)
  end
  def matrix_add_column(m, col)
    newData = []
    i = 0
    while i < m.rows
      newData = (newData + [(m.data[i] + [col[i]])])
      i = _add(i, 1)
    end
    return Matrix.new(data: newData, rows: m.rows, cols: _add(m.cols, 1))
  end
  def matrix_mul_scalar(m, s)
    vals = []
    i = 0
    while i < m.rows
      row = []
      j = 0
      while j < m.cols
        row = (row + [m.data[i][j] * s])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: m.rows, cols: m.cols)
  end
  def matrix_neg(m)
    return matrix_mul_scalar(m, -1.0)
  end
  def matrix_add(a, b)
    if !_eq(a.rows, b.rows) || !_eq(a.cols, b.cols)
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    vals = []
    i = 0
    while i < a.rows
      row = []
      j = 0
      while j < a.cols
        row = (row + [_add(a.data[i][j], b.data[i][j])])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: a.rows, cols: a.cols)
  end
  def matrix_sub(a, b)
    if !_eq(a.rows, b.rows) || !_eq(a.cols, b.cols)
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    vals = []
    i = 0
    while i < a.rows
      row = []
      j = 0
      while j < a.cols
        row = (row + [a.data[i][j] - b.data[i][j]])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: a.rows, cols: a.cols)
  end
  def matrix_dot(row, col)
    sum = 0.0
    i = 0
    while i < row.length
      sum = _add(sum, row[i] * col[i])
      i = _add(i, 1)
    end
    return sum
  end
  def matrix_mul(a, b)
    if !_eq(a.cols, b.rows)
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    bcols = matrix_columns(b)
    vals = []
    i = 0
    while i < a.rows
      row = []
      j = 0
      while j < b.cols
        row = (row + [matrix_dot(a.data[i], bcols[j])])
        j = _add(j, 1)
      end
      vals = (vals + [row])
      i = _add(i, 1)
    end
    return Matrix.new(data: vals, rows: a.rows, cols: b.cols)
  end
  def matrix_pow(m, p)
    if _eq(p, 0)
      return matrix_identity(m)
    end
    if p < 0
      if matrix_is_invertible(m)
        return matrix_pow(matrix_inverse(m), -p)
      end
      return Matrix.new(data: [], rows: 0, cols: 0)
    end
    result = m
    i = 1
    while i < p
      result = matrix_mul(result, m)
      i = _add(i, 1)
    end
    return result
  end
  def matrix_to_string(m)
    if _eq(m.rows, 0)
      return "[]"
    end
    s = "["
    i = 0
    while i < m.rows
      s = _add(s, "[")
      j = 0
      while j < m.cols
        s = _add(s, _str(m.data[i][j]))
        if j < m.cols - 1
          s = _add(s, " ")
        end
        j = _add(j, 1)
      end
      s = _add(s, "]")
      if i < m.rows - 1
        s = _add(s, "\n ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def main()
    m = make_matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])
    puts(matrix_to_string(m))
    puts(((x = matrix_columns(m)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_add(_add(_str(m.rows), ","), _str(m.cols)))
    puts(_str(matrix_is_invertible(m)))
    puts(matrix_to_string(matrix_identity(m)))
    puts(_str(matrix_determinant(m)))
    puts(matrix_to_string(matrix_minors(m)))
    puts(matrix_to_string(matrix_cofactors(m)))
    puts(matrix_to_string(matrix_adjugate(m)))
    m2 = matrix_mul_scalar(m, 3.0)
    puts(matrix_to_string(m2))
    puts(matrix_to_string(matrix_add(m, m2)))
    puts(matrix_to_string(matrix_sub(m, m2)))
    puts(matrix_to_string(matrix_pow(m, 3)))
    m3 = matrix_add_row(m, [10.0, 11.0, 12.0])
    puts(matrix_to_string(m3))
    m4 = matrix_add_column(m2, [8.0, 16.0, 32.0])
    puts(matrix_to_string(matrix_mul(m3, m4)))
  end
  Object.send(:remove_const, :Matrix) if Object.const_defined?(:Matrix)
  Matrix = Struct.new(:data, :rows, :cols, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
