# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def cramers_rule_2x2(eq1, eq2)
    if eq1.length != 3 || eq2.length != 3
      panic("Please enter a valid equation.")
    end
    if eq1[0] == 0.0 && eq1[1] == 0.0 && eq2[0] == 0.0 && eq2[1] == 0.0
      panic("Both a & b of two equations can't be zero.")
    end
    a1 = eq1[0]
    b1 = eq1[1]
    c1 = eq1[2]
    a2 = eq2[0]
    b2 = eq2[1]
    c2 = eq2[2]
    determinant = a1 * b2 - a2 * b1
    determinant_x = c1 * b2 - c2 * b1
    determinant_y = a1 * c2 - a2 * c1
    if determinant == 0.0
      if determinant_x == 0.0 && determinant_y == 0.0
        panic("Infinite solutions. (Consistent system)")
      end
      panic("No solution. (Inconsistent system)")
    end
    if determinant_x == 0.0 && determinant_y == 0.0
      return [0.0, 0.0]
    end
    x = determinant_x / determinant
    y = determinant_y / determinant
    return [x, y]
  end
  def test_cramers_rule_2x2()
    r1 = cramers_rule_2x2([2.0, 3.0, 0.0], [5.0, 1.0, 0.0])
    if r1[0] != 0.0 || r1[1] != 0.0
      panic("Test1 failed")
    end
    r2 = cramers_rule_2x2([0.0, 4.0, 50.0], [2.0, 0.0, 26.0])
    if r2[0] != 13.0 || r2[1] != 12.5
      panic("Test2 failed")
    end
  end
  def main()
    test_cramers_rule_2x2()
    puts(((x = cramers_rule_2x2([11.0, 2.0, 30.0], [1.0, 0.0, 4.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
