# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def cramers_rule_2x2(eq1, eq2)
    if !_eq(eq1.length, 3) || !_eq(eq2.length, 3)
      panic("Please enter a valid equation.")
    end
    if _eq((__tmp1 = eq1; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)), 0.0) && _eq((__tmp2 = eq1; __tmp2.is_a?(Hash) ? __tmp2[1] : _idx(__tmp2, 1)), 0.0) && _eq((__tmp3 = eq2; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)), 0.0) && _eq((__tmp4 = eq2; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1)), 0.0)
      panic("Both a & b of two equations can't be zero.")
    end
    a1 = (__tmp5 = eq1; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
    b1 = (__tmp6 = eq1; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1))
    c1 = (__tmp7 = eq1; __tmp7.is_a?(Hash) ? __tmp7[2] : _idx(__tmp7, 2))
    a2 = (__tmp8 = eq2; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0))
    b2 = (__tmp9 = eq2; __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
    c2 = (__tmp10 = eq2; __tmp10.is_a?(Hash) ? __tmp10[2] : _idx(__tmp10, 2))
    determinant = a1 * b2 - a2 * b1
    determinant_x = c1 * b2 - c2 * b1
    determinant_y = a1 * c2 - a2 * c1
    if _eq(determinant, 0.0)
      if _eq(determinant_x, 0.0) && _eq(determinant_y, 0.0)
        panic("Infinite solutions. (Consistent system)")
      end
      panic("No solution. (Inconsistent system)")
    end
    if _eq(determinant_x, 0.0) && _eq(determinant_y, 0.0)
      return [0.0, 0.0]
    end
    x = determinant_x / determinant
    y = determinant_y / determinant
    return [x, y]
  end
  def test_cramers_rule_2x2()
    r1 = cramers_rule_2x2([2.0, 3.0, 0.0], [5.0, 1.0, 0.0])
    if !_eq((__tmp11 = r1; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)), 0.0) || !_eq((__tmp12 = r1; __tmp12.is_a?(Hash) ? __tmp12[1] : _idx(__tmp12, 1)), 0.0)
      panic("Test1 failed")
    end
    r2 = cramers_rule_2x2([0.0, 4.0, 50.0], [2.0, 0.0, 26.0])
    if !_eq((__tmp13 = r2; __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)), 13.0) || !_eq((__tmp14 = r2; __tmp14.is_a?(Hash) ? __tmp14[1] : _idx(__tmp14, 1)), 12.5)
      panic("Test2 failed")
    end
  end
  def main()
    test_cramers_rule_2x2()
    puts(((x = cramers_rule_2x2([11.0, 2.0, 30.0], [1.0, 0.0, 4.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
