# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def depth_first_search(grid, row, col, visit)
    row_length = grid.length
    col_length = grid[0].length
    if row < 0 || col < 0 || row == row_length || col == col_length
      return 0
    end
    if visit[row][col]
      return 0
    end
    if grid[row][col] == 1
      return 0
    end
    if row == row_length - 1 && col == col_length - 1
      return 1
    end
    visit[row][col] = true
    count = 0.clone
    count = _add(count, depth_first_search(grid, _add(row, 1), col, visit)).clone
    count = _add(count, depth_first_search(grid, row - 1, col, visit)).clone
    count = _add(count, depth_first_search(grid, row, _add(col, 1), visit)).clone
    count = _add(count, depth_first_search(grid, row, col - 1, visit)).clone
    visit[row][col] = false
    return count
  end
  def count_paths(grid)
    rows = grid.length
    cols = grid[0].length
    visit = [].clone
    i = 0.clone
    while i < rows
      row_visit = [].clone
      j = 0.clone
      while j < cols
        row_visit = (row_visit << (false)).clone
        j = _add(j, 1).clone
      end
      visit = (visit << (row_visit)).clone
      i = _add(i, 1).clone
    end
    return depth_first_search(grid, 0, 0, visit)
  end
  def main()
    grid1 = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]]
    puts(_str(count_paths(grid1)))
    grid2 = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]
    puts(_str(count_paths(grid2)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
