# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def depth_first_search(grid, row, col, visit)
    row_length = grid.length
    col_length = (__tmp1 = grid; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)).length
    if row < 0 || col < 0 || _eq(row, row_length) || _eq(col, col_length)
      return 0
    end
    if (__tmp2 = (__tmp3 = visit; __tmp3.is_a?(Hash) ? __tmp3[row] : _idx(__tmp3, row)); __tmp2.is_a?(Hash) ? __tmp2[col] : _idx(__tmp2, col))
      return 0
    end
    if _eq((__tmp4 = (__tmp5 = grid; __tmp5.is_a?(Hash) ? __tmp5[row] : _idx(__tmp5, row)); __tmp4.is_a?(Hash) ? __tmp4[col] : _idx(__tmp4, col)), 1)
      return 0
    end
    if _eq(row, row_length - 1) && _eq(col, col_length - 1)
      return 1
    end
    (__tmp6 = visit; __tmp6.is_a?(Hash) ? __tmp6[row] : _idx(__tmp6, row))[col] = true
    count = 0
    count = _add(count, depth_first_search(grid, _add(row, 1), col, visit))
    count = _add(count, depth_first_search(grid, row - 1, col, visit))
    count = _add(count, depth_first_search(grid, row, _add(col, 1), visit))
    count = _add(count, depth_first_search(grid, row, col - 1, visit))
    (__tmp7 = visit; __tmp7.is_a?(Hash) ? __tmp7[row] : _idx(__tmp7, row))[col] = false
    return count
  end
  def count_paths(grid)
    rows = grid.length
    cols = (__tmp8 = grid; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)).length
    visit = []
    i = 0
    while i < rows
      row_visit = []
      j = 0
      while j < cols
        row_visit = (row_visit + [false])
        j = _add(j, 1)
      end
      visit = (visit + [row_visit])
      i = _add(i, 1)
    end
    return depth_first_search(grid, 0, 0, visit)
  end
  def main()
    grid1 = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]]
    puts(_str(count_paths(grid1)))
    grid2 = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]
    puts(_str(count_paths(grid2)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
