# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def make_matrix(row_size)
    size = abs_int(row_size).clone
    if size == 0
      size = 4.clone
    end
    mat = [].clone
    y = 0.clone
    while y < size
      row = [].clone
      x = 0.clone
      while x < size
        row = (row << (_add(_add(1, x), y * size))).clone
        x = _add(x, 1).clone
      end
      mat = (mat << (row)).clone
      y = _add(y, 1).clone
    end
    return mat
  end
  def transpose(mat)
    n = mat.length
    result = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        row = (row << (mat[j][i])).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def reverse_row(mat)
    result = [].clone
    i = mat.length - 1.clone
    while i >= 0
      result = (result << (mat[i])).clone
      i = i - 1.clone
    end
    return result
  end
  def reverse_column(mat)
    result = [].clone
    i = 0.clone
    while i < mat.length
      row = [].clone
      j = mat[i].length - 1.clone
      while j >= 0
        row = (row << (mat[i][j])).clone
        j = j - 1.clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def rotate_90(mat)
    t = transpose(mat)
    rr = reverse_row(t)
    return rr
  end
  def rotate_180(mat)
    rc = reverse_column(mat)
    rr = reverse_row(rc)
    return rr
  end
  def rotate_270(mat)
    t = transpose(mat)
    rc = reverse_column(t)
    return rc
  end
  def row_to_string(row)
    line = "".clone
    i = 0.clone
    while i < row.length
      if i == 0
        line = _str(row[i]).clone
      else
        line = _add(_add(line, " "), _str(row[i])).clone
      end
      i = _add(i, 1).clone
    end
    return line
  end
  def print_matrix(mat)
    i = 0.clone
    while i < mat.length
      puts(row_to_string(mat[i]))
      i = _add(i, 1).clone
    end
  end
  $mat = make_matrix(4).clone
  puts("\norigin:\n")
  print_matrix($mat)
  puts("\nrotate 90 counterclockwise:\n")
  $r90 = rotate_90($mat)
  print_matrix($r90)
  $mat = make_matrix(4).clone
  puts("\norigin:\n")
  print_matrix($mat)
  puts("\nrotate 180:\n")
  $r180 = rotate_180($mat)
  print_matrix($r180)
  $mat = make_matrix(4).clone
  puts("\norigin:\n")
  print_matrix($mat)
  puts("\nrotate 270 counterclockwise:\n")
  $r270 = rotate_270($mat)
  print_matrix($r270)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
