# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def generate_large_matrix()
    result = [].clone
    i = 0.clone
    while i < 1000
      row = [].clone
      j = 1000 - i.clone
      while j > (-1000 - i)
        row = (row << (j)).clone
        j = j - 1.clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def find_negative_index(arr)
    left = 0.clone
    right = arr.length - 1.clone
    if arr.length == 0
      return 0
    end
    if arr[0] < 0
      return 0
    end
    while left <= right
      mid = (_add(left, right)) / 2
      num = arr[mid]
      if num < 0
        if mid == 0
          return 0
        end
        if arr[mid - 1] >= 0
          return mid
        end
        right = mid - 1.clone
      else
        left = _add(mid, 1).clone
      end
    end
    return arr.length
  end
  def count_negatives_binary_search(grid)
    total = 0.clone
    bound = grid[0].length.clone
    i = 0.clone
    while i < grid.length
      row = grid[i]
      idx = find_negative_index(row[0...bound])
      bound = idx.clone
      total = _add(total, idx).clone
      i = _add(i, 1).clone
    end
    return (grid.length * grid[0].length) - total
  end
  def count_negatives_brute_force(grid)
    count = 0.clone
    i = 0.clone
    while i < grid.length
      row = grid[i]
      j = 0.clone
      while j < row.length
        if row[j] < 0
          count = _add(count, 1).clone
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return count
  end
  def count_negatives_brute_force_with_break(grid)
    total = 0.clone
    i = 0.clone
    while i < grid.length
      row = grid[i]
      j = 0.clone
      while j < row.length
        number = row[j]
        if number < 0
          total = _add(total, (row.length - j)).clone
          break
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return total
  end
  $grid = generate_large_matrix()
  $test_grids = [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], $grid]
  $results_bin = [].clone
  $i = 0.clone
  while $i < $test_grids.length
    $results_bin = ($results_bin << (count_negatives_binary_search($test_grids[$i]))).clone
    $i = _add($i, 1).clone
  end
  puts(((x = $results_bin); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $results_brute = [].clone
  $i = 0.clone
  while $i < $test_grids.length
    $results_brute = ($results_brute << (count_negatives_brute_force($test_grids[$i]))).clone
    $i = _add($i, 1).clone
  end
  puts(((x = $results_brute); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $results_break = [].clone
  $i = 0.clone
  while $i < $test_grids.length
    $results_break = ($results_break << (count_negatives_brute_force_with_break($test_grids[$i]))).clone
    $i = _add($i, 1).clone
  end
  puts(((x = $results_break); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
