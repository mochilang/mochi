# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def generate_large_matrix()
    result = []
    i = 0
    while i < 1000
      row = []
      j = 1000 - i
      while j > (-1000 - i)
        row = (row + [j])
        j = j - 1
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def find_negative_index(arr)
    left = 0
    right = arr.length - 1
    if _eq(arr.length, 0)
      return 0
    end
    if (__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)) < 0
      return 0
    end
    while left <= right
      mid = (_add(left, right)) / 2
      num = (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[mid] : _idx(__tmp2, mid))
      if num < 0
        if _eq(mid, 0)
          return 0
        end
        if (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[mid - 1] : _idx(__tmp3, mid - 1)) >= 0
          return mid
        end
        right = mid - 1
      else
        left = _add(mid, 1)
      end
    end
    return arr.length
  end
  def count_negatives_binary_search(grid)
    total = 0
    bound = (__tmp4 = grid; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)).length
    i = 0
    while i < grid.length
      row = (__tmp5 = grid; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      idx = find_negative_index(row[0...bound])
      bound = idx
      total = _add(total, idx)
      i = _add(i, 1)
    end
    return (grid.length * (__tmp6 = grid; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)).length) - total
  end
  def count_negatives_brute_force(grid)
    count = 0
    i = 0
    while i < grid.length
      row = (__tmp7 = grid; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
      j = 0
      while j < row.length
        if (__tmp8 = row; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)) < 0
          count = _add(count, 1)
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return count
  end
  def count_negatives_brute_force_with_break(grid)
    total = 0
    i = 0
    while i < grid.length
      row = (__tmp9 = grid; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))
      j = 0
      while j < row.length
        number = (__tmp10 = row; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j))
        if number < 0
          total = _add(total, (row.length - j))
          break
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return total
  end
  $grid = generate_large_matrix()
  $test_grids = [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], $grid]
  $results_bin = []
  $i = 0
  while $i < $test_grids.length
    $results_bin = ($results_bin + [count_negatives_binary_search((__tmp11 = $test_grids; __tmp11.is_a?(Hash) ? __tmp11[$i] : _idx(__tmp11, $i)))])
    $i = _add($i, 1)
  end
  puts(((x = $results_bin); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $results_brute = []
  $i = 0
  while $i < $test_grids.length
    $results_brute = ($results_brute + [count_negatives_brute_force((__tmp12 = $test_grids; __tmp12.is_a?(Hash) ? __tmp12[$i] : _idx(__tmp12, $i)))])
    $i = _add($i, 1)
  end
  puts(((x = $results_brute); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $results_break = []
  $i = 0
  while $i < $test_grids.length
    $results_break = ($results_break + [count_negatives_brute_force_with_break((__tmp13 = $test_grids; __tmp13.is_a?(Hash) ? __tmp13[$i] : _idx(__tmp13, $i)))])
    $i = _add($i, 1)
  end
  puts(((x = $results_break); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
