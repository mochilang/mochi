# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def search_in_sorted_matrix(mat, m, n, key)
    i = m - 1.clone
    j = 0.clone
    while i >= 0 && j < n
      if key == mat[i][j]
        puts(_add(_add(_add(_add(_add("Key ", _str(key)), " found at row- "), _str(_add(i, 1))), " column- "), _str(_add(j, 1))))
        return
      end
      if key < mat[i][j]
        i = i - 1.clone
      else
        j = _add(j, 1).clone
      end
    end
    puts(_add(_add("Key ", _str(key)), " not found"))
  end
  def main()
    mat = [[2.0, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]]
    search_in_sorted_matrix(mat, mat.length, mat[0].length, 5.0)
    search_in_sorted_matrix(mat, mat.length, mat[0].length, 21.0)
    mat2 = [[2.1, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]]
    search_in_sorted_matrix(mat2, mat2.length, mat2[0].length, 2.1)
    search_in_sorted_matrix(mat2, mat2.length, mat2[0].length, 2.2)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
