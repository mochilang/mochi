# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def multiply(matrix_a, matrix_b)
    n = _len(matrix_a)
    matrix_c = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        val = 0
        k = 0
        while k < n
          val = _add(val, (__tmp1 = (__tmp2 = matrix_a; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[k] : _idx(__tmp1, k)) * (__tmp3 = (__tmp4 = matrix_b; __tmp4.is_a?(Hash) ? __tmp4[k] : _idx(__tmp4, k)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)))
          k = _add(k, 1)
        end
        row = _append(row, val)
        j = _add(j, 1)
      end
      matrix_c = _append(matrix_c, row)
      i = _add(i, 1)
    end
    return matrix_c
  end
  def identity(n)
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = _append(row, 1)
        else
          row = _append(row, 0)
        end
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def nth_fibonacci_matrix(n)
    if n <= 1
      return n
    end
    res_matrix = identity(2)
    fib_matrix = [[1, 1], [1, 0]]
    m = n - 1
    while m > 0
      if _eq(m % 2, 1)
        res_matrix = multiply(res_matrix, fib_matrix)
      end
      fib_matrix = multiply(fib_matrix, fib_matrix)
      m = m / 2
    end
    return (__tmp5 = (__tmp6 = res_matrix; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)); __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
  end
  def nth_fibonacci_bruteforce(n)
    if n <= 1
      return n
    end
    fib0 = 0
    fib1 = 1
    i = 2
    while i <= n
      next_ = _add(fib0, fib1)
      fib0 = fib1
      fib1 = next_
      i = _add(i, 1)
    end
    return fib1
  end
  def parse_number(s)
    result = 0
    i = 0
    while i < _len(s)
      ch = s[i..._add(i, 1)]
      if ch >= "0" && ch <= "9"
        result = _add(result * 10, ((ch).to_i))
      end
      i = _add(i, 1)
    end
    return result
  end
  def main()
    ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"]
    i = 0
    while i < _len(ordinals)
      ordinal = (__tmp7 = ordinals; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
      n = parse_number(ordinal)
      msg = _add(_add(_add(_add(ordinal, " fibonacci number using matrix exponentiation is "), _str(nth_fibonacci_matrix(n))), " and using bruteforce is "), _str(nth_fibonacci_bruteforce(n)))
      puts(msg)
      i = _add(i, 1)
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
