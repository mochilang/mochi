# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def multiply(matrix_a, matrix_b)
    n = matrix_a.length
    matrix_c = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        val = 0.clone
        k = 0.clone
        while k < n
          val = _add(val, matrix_a[i][k] * matrix_b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (val)).clone
        j = _add(j, 1).clone
      end
      matrix_c = (matrix_c << (row)).clone
      i = _add(i, 1).clone
    end
    return matrix_c
  end
  def identity(n)
    res = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1)).clone
        else
          row = (row << (0)).clone
        end
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def nth_fibonacci_matrix(n)
    if n <= 1
      return n
    end
    res_matrix = identity(2).clone
    fib_matrix = [[1, 1], [1, 0]].clone
    m = n - 1.clone
    while m > 0
      if m % 2 == 1
        res_matrix = multiply(res_matrix, fib_matrix).clone
      end
      fib_matrix = multiply(fib_matrix, fib_matrix).clone
      m = m / 2.clone
    end
    return res_matrix[0][0]
  end
  def nth_fibonacci_bruteforce(n)
    if n <= 1
      return n
    end
    fib0 = 0.clone
    fib1 = 1.clone
    i = 2.clone
    while i <= n
      next_ = _add(fib0, fib1)
      fib0 = fib1.clone
      fib1 = next_.clone
      i = _add(i, 1).clone
    end
    return fib1
  end
  def parse_number(s)
    result = 0.clone
    i = 0.clone
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch >= "0" && ch <= "9"
        result = _add(result * 10, ((ch).to_i)).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def main()
    ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"]
    i = 0.clone
    while i < ordinals.length
      ordinal = ordinals[i]
      n = parse_number(ordinal)
      msg = _add(_add(_add(_add(ordinal, " fibonacci number using matrix exponentiation is "), _str(nth_fibonacci_matrix(n))), " and using bruteforce is "), _str(nth_fibonacci_bruteforce(n)))
      puts(msg)
      i = _add(i, 1).clone
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
