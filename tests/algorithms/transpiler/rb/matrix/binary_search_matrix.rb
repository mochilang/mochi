# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def binary_search(arr, lower_bound, upper_bound, value)
    r = (_add(lower_bound, upper_bound)) / 2
    if _eq((__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[r] : _idx(__tmp1, r)), value)
      return r
    end
    if lower_bound >= upper_bound
      return -1
    end
    if (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[r] : _idx(__tmp2, r)) < value
      return binary_search(arr, _add(r, 1), upper_bound, value)
    end
    return binary_search(arr, lower_bound, r - 1, value)
  end
  def mat_bin_search(value, matrix)
    index = 0
    if _eq((__tmp3 = (__tmp4 = matrix; __tmp4.is_a?(Hash) ? __tmp4[index] : _idx(__tmp4, index)); __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)), value)
      return [index, 0]
    end
    while index < matrix.length && (__tmp5 = (__tmp6 = matrix; __tmp6.is_a?(Hash) ? __tmp6[index] : _idx(__tmp6, index)); __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)) < value
      r = binary_search((__tmp7 = matrix; __tmp7.is_a?(Hash) ? __tmp7[index] : _idx(__tmp7, index)), 0, (__tmp8 = matrix; __tmp8.is_a?(Hash) ? __tmp8[index] : _idx(__tmp8, index)).length - 1, value)
      if !_eq(r, (-1))
        return [index, r]
      end
      index = _add(index, 1)
    end
    return [-1, -1]
  end
  def main()
    row = [1, 4, 7, 11, 15]
    puts(_str(binary_search(row, 0, row.length - 1, 1)))
    puts(_str(binary_search(row, 0, row.length - 1, 23)))
    matrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]]
    puts(((x = mat_bin_search(1, matrix)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = mat_bin_search(34, matrix)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
