# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def binary_search(arr, lower_bound, upper_bound, value)
    r = (_add(lower_bound, upper_bound)) / 2
    if arr[r] == value
      return r
    end
    if lower_bound >= upper_bound
      return -1
    end
    if arr[r] < value
      return binary_search(arr, _add(r, 1), upper_bound, value)
    end
    return binary_search(arr, lower_bound, r - 1, value)
  end
  def mat_bin_search(value, matrix)
    index = 0.clone
    if matrix[index][0] == value
      return [index, 0]
    end
    while index < matrix.length && matrix[index][0] < value
      r = binary_search(matrix[index], 0, matrix[index].length - 1, value)
      if r != (-1)
        return [index, r]
      end
      index = _add(index, 1).clone
    end
    return [-1, -1]
  end
  def main()
    row = [1, 4, 7, 11, 15]
    puts(_str(binary_search(row, 0, row.length - 1, 1)))
    puts(_str(binary_search(row, 0, row.length - 1, 23)))
    matrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]]
    puts(((x = mat_bin_search(1, matrix)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = mat_bin_search(34, matrix)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
