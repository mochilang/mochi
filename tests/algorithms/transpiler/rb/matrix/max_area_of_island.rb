# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def encode(row, col)
    return _add(_add(_str(row), ","), _str(col))
  end
  def is_safe(row, col, rows, cols)
    return row >= 0 && row < rows && col >= 0 && col < cols
  end
  def has(seen, key)
    return seen.key?(key)
  end
  def depth_first_search(row, col, seen, mat)
    rows = mat.length
    cols = mat[0].length
    key = encode(row, col)
    if is_safe(row, col, rows, cols) && (!has(seen, key)) && mat[row][col] == 1
      seen[key] = true
      return _add(_add(_add(_add(1, depth_first_search(_add(row, 1), col, seen, mat)), depth_first_search(row - 1, col, seen, mat)), depth_first_search(row, _add(col, 1), seen, mat)), depth_first_search(row, col - 1, seen, mat))
    else
      return 0
    end
  end
  def find_max_area(mat)
    seen = {}.clone
    rows = mat.length
    max_area = 0.clone
    r = 0.clone
    while r < rows
      line = mat[r]
      cols = line.length
      c = 0.clone
      while c < cols
        if line[c] == 1
          key = encode(r, c)
          if !(seen.key?(key))
            area = depth_first_search(r, c, seen, mat)
            if area > max_area
              max_area = area.clone
            end
          end
        end
        c = _add(c, 1).clone
      end
      r = _add(r, 1).clone
    end
    return max_area
  end
  $matrix = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]
  puts(find_max_area($matrix))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
