# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def encode(row, col)
    return _add(_add(_str(row), ","), _str(col))
  end
  def is_safe(row, col, rows, cols)
    return row >= 0 && row < rows && col >= 0 && col < cols
  end
  def has(seen, key)
    return _has(seen, key)
  end
  def depth_first_search(row, col, seen, mat)
    rows = _len(mat)
    cols = _len((__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    key = encode(row, col)
    if is_safe(row, col, rows, cols) && (!has(seen, key)) && _eq((__tmp2 = (__tmp3 = mat; __tmp3.is_a?(Hash) ? __tmp3[row] : _idx(__tmp3, row)); __tmp2.is_a?(Hash) ? __tmp2[col] : _idx(__tmp2, col)), 1)
      seen[key] = true
      return _add(_add(_add(_add(1, depth_first_search(_add(row, 1), col, seen, mat)), depth_first_search(row - 1, col, seen, mat)), depth_first_search(row, _add(col, 1), seen, mat)), depth_first_search(row, col - 1, seen, mat))
    else
      return 0
    end
  end
  def find_max_area(mat)
    seen = {}
    rows = _len(mat)
    max_area = 0
    r = 0
    while r < rows
      line = (__tmp4 = mat; __tmp4.is_a?(Hash) ? __tmp4[r] : _idx(__tmp4, r))
      cols = _len(line)
      c = 0
      while c < cols
        if _eq((__tmp5 = line; __tmp5.is_a?(Hash) ? __tmp5[c] : _idx(__tmp5, c)), 1)
          key = encode(r, c)
          if !(_has(seen, key))
            area = depth_first_search(r, c, seen, mat)
            if area > max_area
              max_area = area
            end
          end
        end
        c = _add(c, 1)
      end
      r = _add(r, 1)
    end
    return max_area
  end
  $matrix = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]
  puts(find_max_area($matrix))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
