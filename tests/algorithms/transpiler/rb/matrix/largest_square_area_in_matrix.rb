# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def update_area_of_max_square(row, col, rows, cols, mat, largest_square_area)
    if row >= rows || col >= cols
      return 0
    end
    right = update_area_of_max_square(row, _add(col, 1), rows, cols, mat, largest_square_area)
    diagonal = update_area_of_max_square(_add(row, 1), _add(col, 1), rows, cols, mat, largest_square_area)
    down = update_area_of_max_square(_add(row, 1), col, rows, cols, mat, largest_square_area)
    if mat[row][col] == 1
      sub = _add(1, ([right, diagonal, down]).min())
      if sub > largest_square_area[0]
        largest_square_area[0] = sub
      end
      return sub
    else
      return 0
    end
  end
  def largest_square_area_in_matrix_top_down(rows, cols, mat)
    largest = [0].clone
    update_area_of_max_square(0, 0, rows, cols, mat, largest)
    return largest[0]
  end
  def update_area_of_max_square_with_dp(row, col, rows, cols, mat, dp_array, largest_square_area)
    if row >= rows || col >= cols
      return 0
    end
    if dp_array[row][col] != (-1)
      return dp_array[row][col]
    end
    right = update_area_of_max_square_with_dp(row, _add(col, 1), rows, cols, mat, dp_array, largest_square_area)
    diagonal = update_area_of_max_square_with_dp(_add(row, 1), _add(col, 1), rows, cols, mat, dp_array, largest_square_area)
    down = update_area_of_max_square_with_dp(_add(row, 1), col, rows, cols, mat, dp_array, largest_square_area)
    if mat[row][col] == 1
      sub = _add(1, ([right, diagonal, down]).min())
      if sub > largest_square_area[0]
        largest_square_area[0] = sub
      end
      dp_array[row][col] = sub
      return sub
    else
      dp_array[row][col] = 0
      return 0
    end
  end
  def largest_square_area_in_matrix_top_down_with_dp(rows, cols, mat)
    largest = [0].clone
    dp_array = [].clone
    r = 0.clone
    while r < rows
      row_list = [].clone
      c = 0.clone
      while c < cols
        row_list = (row_list << (-1)).clone
        c = _add(c, 1).clone
      end
      dp_array = (dp_array << (row_list)).clone
      r = _add(r, 1).clone
    end
    update_area_of_max_square_with_dp(0, 0, rows, cols, mat, dp_array, largest)
    return largest[0]
  end
  def largest_square_area_in_matrix_bottom_up(rows, cols, mat)
    dp_array = [].clone
    r = 0.clone
    while r <= rows
      row_list = [].clone
      c = 0.clone
      while c <= cols
        row_list = (row_list << (0)).clone
        c = _add(c, 1).clone
      end
      dp_array = (dp_array << (row_list)).clone
      r = _add(r, 1).clone
    end
    largest = 0.clone
    row = rows - 1.clone
    while row >= 0
      col = cols - 1.clone
      while col >= 0
        right = dp_array[row][_add(col, 1)]
        diagonal = dp_array[_add(row, 1)][_add(col, 1)]
        bottom = dp_array[_add(row, 1)][col]
        if mat[row][col] == 1
          value = _add(1, ([right, diagonal, bottom]).min())
          dp_array[row][col] = value
          if value > largest
            largest = value.clone
          end
        else
          dp_array[row][col] = 0
        end
        col = col - 1.clone
      end
      row = row - 1.clone
    end
    return largest
  end
  def largest_square_area_in_matrix_bottom_up_space_optimization(rows, cols, mat)
    current_row = [].clone
    i = 0.clone
    while i <= cols
      current_row = (current_row << (0)).clone
      i = _add(i, 1).clone
    end
    next_row = [].clone
    j = 0.clone
    while j <= cols
      next_row = (next_row << (0)).clone
      j = _add(j, 1).clone
    end
    largest = 0.clone
    row = rows - 1.clone
    while row >= 0
      col = cols - 1.clone
      while col >= 0
        right = current_row[_add(col, 1)]
        diagonal = next_row[_add(col, 1)]
        bottom = next_row[col]
        if mat[row][col] == 1
          value = _add(1, ([right, diagonal, bottom]).min())
          current_row[col] = value
          if value > largest
            largest = value.clone
          end
        else
          current_row[col] = 0
        end
        col = col - 1.clone
      end
      next_row = current_row.clone
      current_row = [].clone
      t = 0.clone
      while t <= cols
        current_row = (current_row << (0)).clone
        t = _add(t, 1).clone
      end
      row = row - 1.clone
    end
    return largest
  end
  $sample = [[1, 1], [1, 1]]
  puts(largest_square_area_in_matrix_top_down(2, 2, $sample))
  puts(largest_square_area_in_matrix_top_down_with_dp(2, 2, $sample))
  puts(largest_square_area_in_matrix_bottom_up(2, 2, $sample))
  puts(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, $sample))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
