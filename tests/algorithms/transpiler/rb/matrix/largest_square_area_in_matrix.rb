# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def update_area_of_max_square(row, col, rows, cols, mat, largest_square_area)
    if row >= rows || col >= cols
      return 0
    end
    right = update_area_of_max_square(row, _add(col, 1), rows, cols, mat, largest_square_area)
    diagonal = update_area_of_max_square(_add(row, 1), _add(col, 1), rows, cols, mat, largest_square_area)
    down = update_area_of_max_square(_add(row, 1), col, rows, cols, mat, largest_square_area)
    if _eq((__tmp1 = (__tmp2 = mat; __tmp2.is_a?(Hash) ? __tmp2[row] : _idx(__tmp2, row)); __tmp1.is_a?(Hash) ? __tmp1[col] : _idx(__tmp1, col)), 1)
      sub = _add(1, ([right, diagonal, down]).min())
      if sub > (__tmp3 = largest_square_area; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
        largest_square_area[0] = sub
      end
      return sub
    else
      return 0
    end
  end
  def largest_square_area_in_matrix_top_down(rows, cols, mat)
    largest = [0]
    update_area_of_max_square(0, 0, rows, cols, mat, largest)
    return (__tmp4 = largest; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
  end
  def update_area_of_max_square_with_dp(row, col, rows, cols, mat, dp_array, largest_square_area)
    if row >= rows || col >= cols
      return 0
    end
    if !_eq((__tmp5 = (__tmp6 = dp_array; __tmp6.is_a?(Hash) ? __tmp6[row] : _idx(__tmp6, row)); __tmp5.is_a?(Hash) ? __tmp5[col] : _idx(__tmp5, col)), (-1))
      return (__tmp7 = (__tmp8 = dp_array; __tmp8.is_a?(Hash) ? __tmp8[row] : _idx(__tmp8, row)); __tmp7.is_a?(Hash) ? __tmp7[col] : _idx(__tmp7, col))
    end
    right = update_area_of_max_square_with_dp(row, _add(col, 1), rows, cols, mat, dp_array, largest_square_area)
    diagonal = update_area_of_max_square_with_dp(_add(row, 1), _add(col, 1), rows, cols, mat, dp_array, largest_square_area)
    down = update_area_of_max_square_with_dp(_add(row, 1), col, rows, cols, mat, dp_array, largest_square_area)
    if _eq((__tmp9 = (__tmp10 = mat; __tmp10.is_a?(Hash) ? __tmp10[row] : _idx(__tmp10, row)); __tmp9.is_a?(Hash) ? __tmp9[col] : _idx(__tmp9, col)), 1)
      sub = _add(1, ([right, diagonal, down]).min())
      if sub > (__tmp11 = largest_square_area; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0))
        largest_square_area[0] = sub
      end
      (__tmp12 = dp_array; __tmp12.is_a?(Hash) ? __tmp12[row] : _idx(__tmp12, row))[col] = sub
      return sub
    else
      (__tmp13 = dp_array; __tmp13.is_a?(Hash) ? __tmp13[row] : _idx(__tmp13, row))[col] = 0
      return 0
    end
  end
  def largest_square_area_in_matrix_top_down_with_dp(rows, cols, mat)
    largest = [0]
    dp_array = []
    r = 0
    while r < rows
      row_list = []
      c = 0
      while c < cols
        row_list = (row_list + [-1])
        c = _add(c, 1)
      end
      dp_array = (dp_array + [row_list])
      r = _add(r, 1)
    end
    update_area_of_max_square_with_dp(0, 0, rows, cols, mat, dp_array, largest)
    return (__tmp14 = largest; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0))
  end
  def largest_square_area_in_matrix_bottom_up(rows, cols, mat)
    dp_array = []
    r = 0
    while r <= rows
      row_list = []
      c = 0
      while c <= cols
        row_list = (row_list + [0])
        c = _add(c, 1)
      end
      dp_array = (dp_array + [row_list])
      r = _add(r, 1)
    end
    largest = 0
    row = rows - 1
    while row >= 0
      col = cols - 1
      while col >= 0
        right = (__tmp15 = (__tmp16 = dp_array; __tmp16.is_a?(Hash) ? __tmp16[row] : _idx(__tmp16, row)); __tmp15.is_a?(Hash) ? __tmp15[_add(col, 1)] : _idx(__tmp15, _add(col, 1)))
        diagonal = (__tmp17 = (__tmp18 = dp_array; __tmp18.is_a?(Hash) ? __tmp18[_add(row, 1)] : _idx(__tmp18, _add(row, 1))); __tmp17.is_a?(Hash) ? __tmp17[_add(col, 1)] : _idx(__tmp17, _add(col, 1)))
        bottom = (__tmp19 = (__tmp20 = dp_array; __tmp20.is_a?(Hash) ? __tmp20[_add(row, 1)] : _idx(__tmp20, _add(row, 1))); __tmp19.is_a?(Hash) ? __tmp19[col] : _idx(__tmp19, col))
        if _eq((__tmp21 = (__tmp22 = mat; __tmp22.is_a?(Hash) ? __tmp22[row] : _idx(__tmp22, row)); __tmp21.is_a?(Hash) ? __tmp21[col] : _idx(__tmp21, col)), 1)
          value = _add(1, ([right, diagonal, bottom]).min())
          (__tmp23 = dp_array; __tmp23.is_a?(Hash) ? __tmp23[row] : _idx(__tmp23, row))[col] = value
          if value > largest
            largest = value
          end
        else
          (__tmp24 = dp_array; __tmp24.is_a?(Hash) ? __tmp24[row] : _idx(__tmp24, row))[col] = 0
        end
        col = col - 1
      end
      row = row - 1
    end
    return largest
  end
  def largest_square_area_in_matrix_bottom_up_space_optimization(rows, cols, mat)
    current_row = []
    i = 0
    while i <= cols
      current_row = (current_row + [0])
      i = _add(i, 1)
    end
    next_row = []
    j = 0
    while j <= cols
      next_row = (next_row + [0])
      j = _add(j, 1)
    end
    largest = 0
    row = rows - 1
    while row >= 0
      col = cols - 1
      while col >= 0
        right = (__tmp25 = current_row; __tmp25.is_a?(Hash) ? __tmp25[_add(col, 1)] : _idx(__tmp25, _add(col, 1)))
        diagonal = (__tmp26 = next_row; __tmp26.is_a?(Hash) ? __tmp26[_add(col, 1)] : _idx(__tmp26, _add(col, 1)))
        bottom = (__tmp27 = next_row; __tmp27.is_a?(Hash) ? __tmp27[col] : _idx(__tmp27, col))
        if _eq((__tmp28 = (__tmp29 = mat; __tmp29.is_a?(Hash) ? __tmp29[row] : _idx(__tmp29, row)); __tmp28.is_a?(Hash) ? __tmp28[col] : _idx(__tmp28, col)), 1)
          value = _add(1, ([right, diagonal, bottom]).min())
          current_row[col] = value
          if value > largest
            largest = value
          end
        else
          current_row[col] = 0
        end
        col = col - 1
      end
      next_row = current_row
      current_row = []
      t = 0
      while t <= cols
        current_row = (current_row + [0])
        t = _add(t, 1)
      end
      row = row - 1
    end
    return largest
  end
  $sample = [[1, 1], [1, 1]]
  puts(largest_square_area_in_matrix_top_down(2, 2, $sample))
  puts(largest_square_area_in_matrix_top_down_with_dp(2, 2, $sample))
  puts(largest_square_area_in_matrix_bottom_up(2, 2, $sample))
  puts(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, $sample))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
