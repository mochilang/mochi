# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def populate_current_row(triangle, current_row_idx)
    row = []
    i = 0
    while i <= current_row_idx
      if _eq(i, 0) || _eq(i, current_row_idx)
        row = (row + [1])
      else
        left = triangle[current_row_idx - 1][i - 1]
        right = triangle[current_row_idx - 1][i]
        row = (row + [_add(left, right)])
      end
      i = _add(i, 1)
    end
    return row
  end
  def generate_pascal_triangle(num_rows)
    if num_rows <= 0
      return []
    end
    triangle = []
    row_idx = 0
    while row_idx < num_rows
      row = populate_current_row(triangle, row_idx)
      triangle = (triangle + [row])
      row_idx = _add(row_idx, 1)
    end
    return triangle
  end
  def row_to_string(row, total_rows, row_idx)
    line = ""
    spaces = total_rows - row_idx - 1
    s = 0
    while s < spaces
      line = _add(line, " ")
      s = _add(s, 1)
    end
    c = 0
    while c <= row_idx
      line = _add(line, _str(row[c]))
      if !_eq(c, row_idx)
        line = _add(line, " ")
      end
      c = _add(c, 1)
    end
    return line
  end
  def print_pascal_triangle(num_rows)
    triangle = generate_pascal_triangle(num_rows)
    r = 0
    while r < num_rows
      line = row_to_string(triangle[r], num_rows, r)
      puts(line)
      r = _add(r, 1)
    end
  end
  def main()
    print_pascal_triangle(5)
    puts(((x = generate_pascal_triangle(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
