# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def inverse_of_matrix(matrix)
    if _eq(matrix.length, 2) && _eq((__tmp1 = matrix; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)).length, 2) && _eq((__tmp2 = matrix; __tmp2.is_a?(Hash) ? __tmp2[1] : _idx(__tmp2, 1)).length, 2)
      det = (__tmp3 = (__tmp4 = matrix; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)); __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)) * (__tmp5 = (__tmp6 = matrix; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1)); __tmp5.is_a?(Hash) ? __tmp5[1] : _idx(__tmp5, 1)) - (__tmp7 = (__tmp8 = matrix; __tmp8.is_a?(Hash) ? __tmp8[1] : _idx(__tmp8, 1)); __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)) * (__tmp9 = (__tmp10 = matrix; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)); __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
      if _eq(det, 0.0)
        puts("This matrix has no inverse.")
        return []
      end
      return [[(__tmp11 = (__tmp12 = matrix; __tmp12.is_a?(Hash) ? __tmp12[1] : _idx(__tmp12, 1)); __tmp11.is_a?(Hash) ? __tmp11[1] : _idx(__tmp11, 1)) / det, -(__tmp13 = (__tmp14 = matrix; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0)); __tmp13.is_a?(Hash) ? __tmp13[1] : _idx(__tmp13, 1)) / det], [-(__tmp15 = (__tmp16 = matrix; __tmp16.is_a?(Hash) ? __tmp16[1] : _idx(__tmp16, 1)); __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0)) / det, (__tmp17 = (__tmp18 = matrix; __tmp18.is_a?(Hash) ? __tmp18[0] : _idx(__tmp18, 0)); __tmp17.is_a?(Hash) ? __tmp17[0] : _idx(__tmp17, 0)) / det]]
    else
      if _eq(matrix.length, 3) && _eq((__tmp19 = matrix; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0)).length, 3) && _eq((__tmp20 = matrix; __tmp20.is_a?(Hash) ? __tmp20[1] : _idx(__tmp20, 1)).length, 3) && _eq((__tmp21 = matrix; __tmp21.is_a?(Hash) ? __tmp21[2] : _idx(__tmp21, 2)).length, 3)
        det = _add(_add((__tmp22 = (__tmp23 = matrix; __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0)); __tmp22.is_a?(Hash) ? __tmp22[0] : _idx(__tmp22, 0)) * (__tmp24 = (__tmp25 = matrix; __tmp25.is_a?(Hash) ? __tmp25[1] : _idx(__tmp25, 1)); __tmp24.is_a?(Hash) ? __tmp24[1] : _idx(__tmp24, 1)) * (__tmp26 = (__tmp27 = matrix; __tmp27.is_a?(Hash) ? __tmp27[2] : _idx(__tmp27, 2)); __tmp26.is_a?(Hash) ? __tmp26[2] : _idx(__tmp26, 2)), (__tmp28 = (__tmp29 = matrix; __tmp29.is_a?(Hash) ? __tmp29[0] : _idx(__tmp29, 0)); __tmp28.is_a?(Hash) ? __tmp28[1] : _idx(__tmp28, 1)) * (__tmp30 = (__tmp31 = matrix; __tmp31.is_a?(Hash) ? __tmp31[1] : _idx(__tmp31, 1)); __tmp30.is_a?(Hash) ? __tmp30[2] : _idx(__tmp30, 2)) * (__tmp32 = (__tmp33 = matrix; __tmp33.is_a?(Hash) ? __tmp33[2] : _idx(__tmp33, 2)); __tmp32.is_a?(Hash) ? __tmp32[0] : _idx(__tmp32, 0))), (__tmp34 = (__tmp35 = matrix; __tmp35.is_a?(Hash) ? __tmp35[0] : _idx(__tmp35, 0)); __tmp34.is_a?(Hash) ? __tmp34[2] : _idx(__tmp34, 2)) * (__tmp36 = (__tmp37 = matrix; __tmp37.is_a?(Hash) ? __tmp37[1] : _idx(__tmp37, 1)); __tmp36.is_a?(Hash) ? __tmp36[0] : _idx(__tmp36, 0)) * (__tmp38 = (__tmp39 = matrix; __tmp39.is_a?(Hash) ? __tmp39[2] : _idx(__tmp39, 2)); __tmp38.is_a?(Hash) ? __tmp38[1] : _idx(__tmp38, 1))) - (_add(_add((__tmp40 = (__tmp41 = matrix; __tmp41.is_a?(Hash) ? __tmp41[0] : _idx(__tmp41, 0)); __tmp40.is_a?(Hash) ? __tmp40[2] : _idx(__tmp40, 2)) * (__tmp42 = (__tmp43 = matrix; __tmp43.is_a?(Hash) ? __tmp43[1] : _idx(__tmp43, 1)); __tmp42.is_a?(Hash) ? __tmp42[1] : _idx(__tmp42, 1)) * (__tmp44 = (__tmp45 = matrix; __tmp45.is_a?(Hash) ? __tmp45[2] : _idx(__tmp45, 2)); __tmp44.is_a?(Hash) ? __tmp44[0] : _idx(__tmp44, 0)), (__tmp46 = (__tmp47 = matrix; __tmp47.is_a?(Hash) ? __tmp47[0] : _idx(__tmp47, 0)); __tmp46.is_a?(Hash) ? __tmp46[1] : _idx(__tmp46, 1)) * (__tmp48 = (__tmp49 = matrix; __tmp49.is_a?(Hash) ? __tmp49[1] : _idx(__tmp49, 1)); __tmp48.is_a?(Hash) ? __tmp48[0] : _idx(__tmp48, 0)) * (__tmp50 = (__tmp51 = matrix; __tmp51.is_a?(Hash) ? __tmp51[2] : _idx(__tmp51, 2)); __tmp50.is_a?(Hash) ? __tmp50[2] : _idx(__tmp50, 2))), (__tmp52 = (__tmp53 = matrix; __tmp53.is_a?(Hash) ? __tmp53[0] : _idx(__tmp53, 0)); __tmp52.is_a?(Hash) ? __tmp52[0] : _idx(__tmp52, 0)) * (__tmp54 = (__tmp55 = matrix; __tmp55.is_a?(Hash) ? __tmp55[1] : _idx(__tmp55, 1)); __tmp54.is_a?(Hash) ? __tmp54[2] : _idx(__tmp54, 2)) * (__tmp56 = (__tmp57 = matrix; __tmp57.is_a?(Hash) ? __tmp57[2] : _idx(__tmp57, 2)); __tmp56.is_a?(Hash) ? __tmp56[1] : _idx(__tmp56, 1))))
        if _eq(det, 0.0)
          puts("This matrix has no inverse.")
          return []
        end
        cof = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
        (__tmp58 = cof; __tmp58.is_a?(Hash) ? __tmp58[0] : _idx(__tmp58, 0))[0] = (__tmp59 = (__tmp60 = matrix; __tmp60.is_a?(Hash) ? __tmp60[1] : _idx(__tmp60, 1)); __tmp59.is_a?(Hash) ? __tmp59[1] : _idx(__tmp59, 1)) * (__tmp61 = (__tmp62 = matrix; __tmp62.is_a?(Hash) ? __tmp62[2] : _idx(__tmp62, 2)); __tmp61.is_a?(Hash) ? __tmp61[2] : _idx(__tmp61, 2)) - (__tmp63 = (__tmp64 = matrix; __tmp64.is_a?(Hash) ? __tmp64[1] : _idx(__tmp64, 1)); __tmp63.is_a?(Hash) ? __tmp63[2] : _idx(__tmp63, 2)) * (__tmp65 = (__tmp66 = matrix; __tmp66.is_a?(Hash) ? __tmp66[2] : _idx(__tmp66, 2)); __tmp65.is_a?(Hash) ? __tmp65[1] : _idx(__tmp65, 1))
        (__tmp67 = cof; __tmp67.is_a?(Hash) ? __tmp67[0] : _idx(__tmp67, 0))[1] = -((__tmp68 = (__tmp69 = matrix; __tmp69.is_a?(Hash) ? __tmp69[1] : _idx(__tmp69, 1)); __tmp68.is_a?(Hash) ? __tmp68[0] : _idx(__tmp68, 0)) * (__tmp70 = (__tmp71 = matrix; __tmp71.is_a?(Hash) ? __tmp71[2] : _idx(__tmp71, 2)); __tmp70.is_a?(Hash) ? __tmp70[2] : _idx(__tmp70, 2)) - (__tmp72 = (__tmp73 = matrix; __tmp73.is_a?(Hash) ? __tmp73[1] : _idx(__tmp73, 1)); __tmp72.is_a?(Hash) ? __tmp72[2] : _idx(__tmp72, 2)) * (__tmp74 = (__tmp75 = matrix; __tmp75.is_a?(Hash) ? __tmp75[2] : _idx(__tmp75, 2)); __tmp74.is_a?(Hash) ? __tmp74[0] : _idx(__tmp74, 0)))
        (__tmp76 = cof; __tmp76.is_a?(Hash) ? __tmp76[0] : _idx(__tmp76, 0))[2] = (__tmp77 = (__tmp78 = matrix; __tmp78.is_a?(Hash) ? __tmp78[1] : _idx(__tmp78, 1)); __tmp77.is_a?(Hash) ? __tmp77[0] : _idx(__tmp77, 0)) * (__tmp79 = (__tmp80 = matrix; __tmp80.is_a?(Hash) ? __tmp80[2] : _idx(__tmp80, 2)); __tmp79.is_a?(Hash) ? __tmp79[1] : _idx(__tmp79, 1)) - (__tmp81 = (__tmp82 = matrix; __tmp82.is_a?(Hash) ? __tmp82[1] : _idx(__tmp82, 1)); __tmp81.is_a?(Hash) ? __tmp81[1] : _idx(__tmp81, 1)) * (__tmp83 = (__tmp84 = matrix; __tmp84.is_a?(Hash) ? __tmp84[2] : _idx(__tmp84, 2)); __tmp83.is_a?(Hash) ? __tmp83[0] : _idx(__tmp83, 0))
        (__tmp85 = cof; __tmp85.is_a?(Hash) ? __tmp85[1] : _idx(__tmp85, 1))[0] = -((__tmp86 = (__tmp87 = matrix; __tmp87.is_a?(Hash) ? __tmp87[0] : _idx(__tmp87, 0)); __tmp86.is_a?(Hash) ? __tmp86[1] : _idx(__tmp86, 1)) * (__tmp88 = (__tmp89 = matrix; __tmp89.is_a?(Hash) ? __tmp89[2] : _idx(__tmp89, 2)); __tmp88.is_a?(Hash) ? __tmp88[2] : _idx(__tmp88, 2)) - (__tmp90 = (__tmp91 = matrix; __tmp91.is_a?(Hash) ? __tmp91[0] : _idx(__tmp91, 0)); __tmp90.is_a?(Hash) ? __tmp90[2] : _idx(__tmp90, 2)) * (__tmp92 = (__tmp93 = matrix; __tmp93.is_a?(Hash) ? __tmp93[2] : _idx(__tmp93, 2)); __tmp92.is_a?(Hash) ? __tmp92[1] : _idx(__tmp92, 1)))
        (__tmp94 = cof; __tmp94.is_a?(Hash) ? __tmp94[1] : _idx(__tmp94, 1))[1] = (__tmp95 = (__tmp96 = matrix; __tmp96.is_a?(Hash) ? __tmp96[0] : _idx(__tmp96, 0)); __tmp95.is_a?(Hash) ? __tmp95[0] : _idx(__tmp95, 0)) * (__tmp97 = (__tmp98 = matrix; __tmp98.is_a?(Hash) ? __tmp98[2] : _idx(__tmp98, 2)); __tmp97.is_a?(Hash) ? __tmp97[2] : _idx(__tmp97, 2)) - (__tmp99 = (__tmp100 = matrix; __tmp100.is_a?(Hash) ? __tmp100[0] : _idx(__tmp100, 0)); __tmp99.is_a?(Hash) ? __tmp99[2] : _idx(__tmp99, 2)) * (__tmp101 = (__tmp102 = matrix; __tmp102.is_a?(Hash) ? __tmp102[2] : _idx(__tmp102, 2)); __tmp101.is_a?(Hash) ? __tmp101[0] : _idx(__tmp101, 0))
        (__tmp103 = cof; __tmp103.is_a?(Hash) ? __tmp103[1] : _idx(__tmp103, 1))[2] = -((__tmp104 = (__tmp105 = matrix; __tmp105.is_a?(Hash) ? __tmp105[0] : _idx(__tmp105, 0)); __tmp104.is_a?(Hash) ? __tmp104[0] : _idx(__tmp104, 0)) * (__tmp106 = (__tmp107 = matrix; __tmp107.is_a?(Hash) ? __tmp107[2] : _idx(__tmp107, 2)); __tmp106.is_a?(Hash) ? __tmp106[1] : _idx(__tmp106, 1)) - (__tmp108 = (__tmp109 = matrix; __tmp109.is_a?(Hash) ? __tmp109[0] : _idx(__tmp109, 0)); __tmp108.is_a?(Hash) ? __tmp108[1] : _idx(__tmp108, 1)) * (__tmp110 = (__tmp111 = matrix; __tmp111.is_a?(Hash) ? __tmp111[2] : _idx(__tmp111, 2)); __tmp110.is_a?(Hash) ? __tmp110[0] : _idx(__tmp110, 0)))
        (__tmp112 = cof; __tmp112.is_a?(Hash) ? __tmp112[2] : _idx(__tmp112, 2))[0] = (__tmp113 = (__tmp114 = matrix; __tmp114.is_a?(Hash) ? __tmp114[0] : _idx(__tmp114, 0)); __tmp113.is_a?(Hash) ? __tmp113[1] : _idx(__tmp113, 1)) * (__tmp115 = (__tmp116 = matrix; __tmp116.is_a?(Hash) ? __tmp116[1] : _idx(__tmp116, 1)); __tmp115.is_a?(Hash) ? __tmp115[2] : _idx(__tmp115, 2)) - (__tmp117 = (__tmp118 = matrix; __tmp118.is_a?(Hash) ? __tmp118[0] : _idx(__tmp118, 0)); __tmp117.is_a?(Hash) ? __tmp117[2] : _idx(__tmp117, 2)) * (__tmp119 = (__tmp120 = matrix; __tmp120.is_a?(Hash) ? __tmp120[1] : _idx(__tmp120, 1)); __tmp119.is_a?(Hash) ? __tmp119[1] : _idx(__tmp119, 1))
        (__tmp121 = cof; __tmp121.is_a?(Hash) ? __tmp121[2] : _idx(__tmp121, 2))[1] = -((__tmp122 = (__tmp123 = matrix; __tmp123.is_a?(Hash) ? __tmp123[0] : _idx(__tmp123, 0)); __tmp122.is_a?(Hash) ? __tmp122[0] : _idx(__tmp122, 0)) * (__tmp124 = (__tmp125 = matrix; __tmp125.is_a?(Hash) ? __tmp125[1] : _idx(__tmp125, 1)); __tmp124.is_a?(Hash) ? __tmp124[2] : _idx(__tmp124, 2)) - (__tmp126 = (__tmp127 = matrix; __tmp127.is_a?(Hash) ? __tmp127[0] : _idx(__tmp127, 0)); __tmp126.is_a?(Hash) ? __tmp126[2] : _idx(__tmp126, 2)) * (__tmp128 = (__tmp129 = matrix; __tmp129.is_a?(Hash) ? __tmp129[1] : _idx(__tmp129, 1)); __tmp128.is_a?(Hash) ? __tmp128[0] : _idx(__tmp128, 0)))
        (__tmp130 = cof; __tmp130.is_a?(Hash) ? __tmp130[2] : _idx(__tmp130, 2))[2] = (__tmp131 = (__tmp132 = matrix; __tmp132.is_a?(Hash) ? __tmp132[0] : _idx(__tmp132, 0)); __tmp131.is_a?(Hash) ? __tmp131[0] : _idx(__tmp131, 0)) * (__tmp133 = (__tmp134 = matrix; __tmp134.is_a?(Hash) ? __tmp134[1] : _idx(__tmp134, 1)); __tmp133.is_a?(Hash) ? __tmp133[1] : _idx(__tmp133, 1)) - (__tmp135 = (__tmp136 = matrix; __tmp136.is_a?(Hash) ? __tmp136[0] : _idx(__tmp136, 0)); __tmp135.is_a?(Hash) ? __tmp135[1] : _idx(__tmp135, 1)) * (__tmp137 = (__tmp138 = matrix; __tmp138.is_a?(Hash) ? __tmp138[1] : _idx(__tmp138, 1)); __tmp137.is_a?(Hash) ? __tmp137[0] : _idx(__tmp137, 0))
        inv = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
        i = 0
        while i < 3
          j = 0
          while j < 3
            (__tmp139 = inv; __tmp139.is_a?(Hash) ? __tmp139[i] : _idx(__tmp139, i))[j] = (__tmp140 = (__tmp141 = cof; __tmp141.is_a?(Hash) ? __tmp141[j] : _idx(__tmp141, j)); __tmp140.is_a?(Hash) ? __tmp140[i] : _idx(__tmp140, i)) / det
            j = _add(j, 1)
          end
          i = _add(i, 1)
        end
        return inv
      end
    end
    puts("Please provide a matrix of size 2x2 or 3x3.")
    return []
  end
  $m2 = [[2.0, 5.0], [2.0, 0.0]]
  puts(((x = inverse_of_matrix($m2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  $m3 = [[2.0, 5.0, 7.0], [2.0, 0.0, 1.0], [1.0, 2.0, 3.0]]
  puts(((x = inverse_of_matrix($m3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
