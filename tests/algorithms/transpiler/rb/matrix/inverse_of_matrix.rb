# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def inverse_of_matrix(matrix)
    if _eq(matrix.length, 2) && _eq(matrix[0].length, 2) && _eq(matrix[1].length, 2)
      det = matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1]
      if _eq(det, 0.0)
        puts("This matrix has no inverse.")
        return []
      end
      return [[matrix[1][1] / det, -matrix[0][1] / det], [-matrix[1][0] / det, matrix[0][0] / det]]
    else
      if _eq(matrix.length, 3) && _eq(matrix[0].length, 3) && _eq(matrix[1].length, 3) && _eq(matrix[2].length, 3)
        det = _add(_add(matrix[0][0] * matrix[1][1] * matrix[2][2], matrix[0][1] * matrix[1][2] * matrix[2][0]), matrix[0][2] * matrix[1][0] * matrix[2][1]) - (_add(_add(matrix[0][2] * matrix[1][1] * matrix[2][0], matrix[0][1] * matrix[1][0] * matrix[2][2]), matrix[0][0] * matrix[1][2] * matrix[2][1]))
        if _eq(det, 0.0)
          puts("This matrix has no inverse.")
          return []
        end
        cof = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
        cof[0][0] = matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]
        cof[0][1] = -(matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])
        cof[0][2] = matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]
        cof[1][0] = -(matrix[0][1] * matrix[2][2] - matrix[0][2] * matrix[2][1])
        cof[1][1] = matrix[0][0] * matrix[2][2] - matrix[0][2] * matrix[2][0]
        cof[1][2] = -(matrix[0][0] * matrix[2][1] - matrix[0][1] * matrix[2][0])
        cof[2][0] = matrix[0][1] * matrix[1][2] - matrix[0][2] * matrix[1][1]
        cof[2][1] = -(matrix[0][0] * matrix[1][2] - matrix[0][2] * matrix[1][0])
        cof[2][2] = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
        inv = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
        i = 0
        while i < 3
          j = 0
          while j < 3
            inv[i][j] = cof[j][i] / det
            j = _add(j, 1)
          end
          i = _add(i, 1)
        end
        return inv
      end
    end
    puts("Please provide a matrix of size 2x2 or 3x3.")
    return []
  end
  $m2 = [[2.0, 5.0], [2.0, 0.0]]
  puts(((x = inverse_of_matrix($m2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  $m3 = [[2.0, 5.0, 7.0], [2.0, 0.0, 1.0], [1.0, 2.0, 3.0]]
  puts(((x = inverse_of_matrix($m3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
