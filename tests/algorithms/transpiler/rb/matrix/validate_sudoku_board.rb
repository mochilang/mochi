# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_valid_sudoku_board(board)
    if board.length != $NUM_SQUARES
      return false
    end
    i = 0.clone
    while i < $NUM_SQUARES
      if board[i].length != $NUM_SQUARES
        return false
      end
      i = _add(i, 1).clone
    end
    rows = [].clone
    cols = [].clone
    boxes = [].clone
    i = 0.clone
    while i < $NUM_SQUARES
      rows = (rows << ([])).clone
      cols = (cols << ([])).clone
      boxes = (boxes << ([])).clone
      i = _add(i, 1).clone
    end
    (0...$NUM_SQUARES).each do |r|
      (0...$NUM_SQUARES).each do |c|
        value = board[r][c]
        if value == $EMPTY_CELL
          next
        end
        box = _add((r / 3).to_i * 3, (c / 3).to_i)
        if (rows[r]).include?(value) || (cols[c]).include?(value) || (boxes[box]).include?(value)
          return false
        end
        rows[r] = (rows[r] << (value))
        cols[c] = (cols[c] << (value))
        boxes[box] = (boxes[box] << (value))
      end
    end
    return true
  end
  $NUM_SQUARES = 9
  $EMPTY_CELL = "."
  $valid_board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
  $invalid_board = [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
  puts((is_valid_sudoku_board($valid_board) ? 'true' : 'false'))
  puts((is_valid_sudoku_board($invalid_board) ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
