# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_valid_sudoku_board(board)
    if !_eq(board.length, $NUM_SQUARES)
      return false
    end
    i = 0
    while i < $NUM_SQUARES
      if !_eq((__tmp1 = board; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)).length, $NUM_SQUARES)
        return false
      end
      i = _add(i, 1)
    end
    rows = []
    cols = []
    boxes = []
    i = 0
    while i < $NUM_SQUARES
      rows = (rows + [[]])
      cols = (cols + [[]])
      boxes = (boxes + [[]])
      i = _add(i, 1)
    end
    (0...$NUM_SQUARES).each do |r|
      (0...$NUM_SQUARES).each do |c|
        value = (__tmp2 = (__tmp3 = board; __tmp3.is_a?(Hash) ? __tmp3[r] : _idx(__tmp3, r)); __tmp2.is_a?(Hash) ? __tmp2[c] : _idx(__tmp2, c))
        if _eq(value, $EMPTY_CELL)
          next
        end
        box = _add((r / 3).to_i * 3, (c / 3).to_i)
        if ((__tmp4 = rows; __tmp4.is_a?(Hash) ? __tmp4[r] : _idx(__tmp4, r))).include?(value) || ((__tmp5 = cols; __tmp5.is_a?(Hash) ? __tmp5[c] : _idx(__tmp5, c))).include?(value) || ((__tmp6 = boxes; __tmp6.is_a?(Hash) ? __tmp6[box] : _idx(__tmp6, box))).include?(value)
          return false
        end
        rows[r] = ((__tmp7 = rows; __tmp7.is_a?(Hash) ? __tmp7[r] : _idx(__tmp7, r)) + [value])
        cols[c] = ((__tmp8 = cols; __tmp8.is_a?(Hash) ? __tmp8[c] : _idx(__tmp8, c)) + [value])
        boxes[box] = ((__tmp9 = boxes; __tmp9.is_a?(Hash) ? __tmp9[box] : _idx(__tmp9, box)) + [value])
      end
    end
    return true
  end
  $NUM_SQUARES = 9
  $EMPTY_CELL = "."
  $valid_board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
  $invalid_board = [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
  puts((is_valid_sudoku_board($valid_board) ? 'true' : 'false'))
  puts((is_valid_sudoku_board($invalid_board) ? 'true' : 'false'))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
