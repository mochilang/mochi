# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_square(matrix)
    n = matrix.length
    i = 0.clone
    while i < n
      if matrix[i].length != n
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def matrix_multiply(a, b)
    rows = a.length
    cols = b[0].length
    inner = b.length
    result = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        sum = 0.clone
        k = 0.clone
        while k < inner
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def multiply(i, j, k, a, b, result, n, m)
    if i >= n
      return
    end
    if j >= m
      multiply(_add(i, 1), 0, 0, a, b, result, n, m)
      return
    end
    if k >= b.length
      multiply(i, _add(j, 1), 0, a, b, result, n, m)
      return
    end
    result[i][j] = _add(result[i][j], a[i][k] * b[k][j])
    multiply(i, j, _add(k, 1), a, b, result, n, m)
  end
  def matrix_multiply_recursive(a, b)
    if a.length == 0 || b.length == 0
      return []
    end
    if a.length != b.length || (!is_square(a)) || (!is_square(b))
      panic("Invalid matrix dimensions")
    end
    n = a.length
    m = b[0].length
    result = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < m
        row = (row << (0)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    multiply(0, 0, 0, a, b, result, n, m)
    return result
  end
  $matrix_1_to_4 = [[1, 2], [3, 4]]
  $matrix_5_to_8 = [[5, 6], [7, 8]]
  $matrix_count_up = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
  $matrix_unordered = [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]]
  puts(((x = matrix_multiply_recursive($matrix_1_to_4, $matrix_5_to_8)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = matrix_multiply_recursive($matrix_count_up, $matrix_unordered)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
