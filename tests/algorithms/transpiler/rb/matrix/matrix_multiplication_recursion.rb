# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_square(matrix)
    n = matrix.length
    i = 0
    while i < n
      if !_eq((__tmp1 = matrix; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)).length, n)
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def matrix_multiply(a, b)
    rows = a.length
    cols = (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)).length
    inner = b.length
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        sum = 0
        k = 0
        while k < inner
          sum = _add(sum, (__tmp3 = (__tmp4 = a; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[k] : _idx(__tmp3, k)) * (__tmp5 = (__tmp6 = b; __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k)); __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)))
          k = _add(k, 1)
        end
        row = (row + [sum])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def multiply(i, j, k, a, b, result, n, m)
    if i >= n
      return
    end
    if j >= m
      multiply(_add(i, 1), 0, 0, a, b, result, n, m)
      return
    end
    if k >= b.length
      multiply(i, _add(j, 1), 0, a, b, result, n, m)
      return
    end
    (__tmp7 = result; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))[j] = _add((__tmp8 = (__tmp9 = result; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)), (__tmp10 = (__tmp11 = a; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)); __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)) * (__tmp12 = (__tmp13 = b; __tmp13.is_a?(Hash) ? __tmp13[k] : _idx(__tmp13, k)); __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)))
    multiply(i, j, _add(k, 1), a, b, result, n, m)
  end
  def matrix_multiply_recursive(a, b)
    if _eq(a.length, 0) || _eq(b.length, 0)
      return []
    end
    if !_eq(a.length, b.length) || (!is_square(a)) || (!is_square(b))
      panic("Invalid matrix dimensions")
    end
    n = a.length
    m = (__tmp14 = b; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0)).length
    result = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < m
        row = (row + [0])
        j = _add(j, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    multiply(0, 0, 0, a, b, result, n, m)
    return result
  end
  $matrix_1_to_4 = [[1, 2], [3, 4]]
  $matrix_5_to_8 = [[5, 6], [7, 8]]
  $matrix_count_up = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
  $matrix_unordered = [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]]
  puts(((x = matrix_multiply_recursive($matrix_1_to_4, $matrix_5_to_8)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = matrix_multiply_recursive($matrix_count_up, $matrix_unordered)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
