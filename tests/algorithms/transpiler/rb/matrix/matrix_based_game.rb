# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def is_alnum(ch)
    return (ch >= "0" && ch <= "9") || (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z")
  end
  def to_int(token)
    res = 0
    i = 0
    while i < token.length
      res = _add(res * 10, ((token[i..._add(i, 1)]).to_i))
      i = _add(i, 1)
    end
    return res
  end
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if _eq(ch, sep)
        res = (res + [current])
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = (res + [current])
    return res
  end
  def parse_moves(input_str)
    pairs = split(input_str, ",")
    moves = []
    i = 0
    while i < pairs.length
      pair = pairs[i]
      numbers = []
      num = ""
      j = 0
      while j < pair.length
        ch = pair[j..._add(j, 1)]
        if _eq(ch, " ")
          if !_eq(num, "")
            numbers = (numbers + [num])
            num = ""
          end
        else
          num = _add(num, ch)
        end
        j = _add(j, 1)
      end
      if !_eq(num, "")
        numbers = (numbers + [num])
      end
      if !_eq(numbers.length, 2)
        panic("Each move must have exactly two numbers.")
      end
      x = to_int(numbers[0])
      y = to_int(numbers[1])
      moves = (moves + [Coord.new(x: x, y: y)])
      i = _add(i, 1)
    end
    return moves
  end
  def validate_matrix_size(size)
    if size <= 0
      panic("Matrix size must be a positive integer.")
    end
  end
  def validate_matrix_content(matrix, size)
    if !_eq(matrix.length, size)
      panic("The matrix dont match with size.")
    end
    i = 0
    while i < size
      row = matrix[i]
      if !_eq(row.length, size)
        panic(_add(_add("Each row in the matrix must have exactly ", _str(size)), " characters."))
      end
      j = 0
      while j < size
        ch = row[j..._add(j, 1)]
        if !is_alnum(ch)
          panic("Matrix rows can only contain letters and numbers.")
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
  end
  def validate_moves(moves, size)
    i = 0
    while i < moves.length
      mv = moves[i]
      if mv.x < 0 || mv.x >= size || mv.y < 0 || mv.y >= size
        panic("Move is out of bounds for a matrix.")
      end
      i = _add(i, 1)
    end
  end
  def contains(pos, r, c)
    i = 0
    while i < pos.length
      p = pos[i]
      if _eq(p.x, r) && _eq(p.y, c)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def find_repeat(matrix_g, row, column, size)
    column = size - 1 - column
    visited = []
    repeated = []
    color = matrix_g[column][row]
    if _eq(color, "-")
      return repeated
    end
    stack = [Coord.new(x: column, y: row)]
    while stack.length > 0
      idx = stack.length - 1
      pos = stack[idx]
      stack = stack[0...idx]
      if pos.x < 0 || pos.x >= size || pos.y < 0 || pos.y >= size
        next
      end
      if contains(visited, pos.x, pos.y)
        next
      end
      visited = (visited + [pos])
      if _eq(matrix_g[pos.x][pos.y], color)
        repeated = (repeated + [pos])
        stack = (stack + [Coord.new(x: pos.x - 1, y: pos.y)])
        stack = (stack + [Coord.new(x: _add(pos.x, 1), y: pos.y)])
        stack = (stack + [Coord.new(x: pos.x, y: pos.y - 1)])
        stack = (stack + [Coord.new(x: pos.x, y: _add(pos.y, 1))])
      end
    end
    return repeated
  end
  def increment_score(count)
    return count * (_add(count, 1)) / 2
  end
  def move_x(matrix_g, column, size)
    new_list = []
    row = 0
    while row < size
      val = matrix_g[row][column]
      if !_eq(val, "-")
        new_list = (new_list + [val])
      else
        new_list = _add([val], new_list)
      end
      row = _add(row, 1)
    end
    row = 0
    while row < size
      matrix_g[row][column] = new_list[row]
      row = _add(row, 1)
    end
    return matrix_g
  end
  def move_y(matrix_g, size)
    empty_cols = []
    column = size - 1
    while column >= 0
      row = 0
      all_empty = true
      while row < size
        if !_eq(matrix_g[row][column], "-")
          all_empty = false
          break
        end
        row = _add(row, 1)
      end
      if all_empty
        empty_cols = (empty_cols + [column])
      end
      column = column - 1
    end
    i = 0
    while i < empty_cols.length
      col = empty_cols[i]
      c = _add(col, 1)
      while c < size
        r = 0
        while r < size
          matrix_g[r][c - 1] = matrix_g[r][c]
          r = _add(r, 1)
        end
        c = _add(c, 1)
      end
      r = 0
      while r < size
        matrix_g[r][size - 1] = "-"
        r = _add(r, 1)
      end
      i = _add(i, 1)
    end
    return matrix_g
  end
  def play(matrix_g, pos_x, pos_y, size)
    same_colors = find_repeat(matrix_g, pos_x, pos_y, size)
    if !_eq(same_colors.length, 0)
      i = 0
      while i < same_colors.length
        p = same_colors[i]
        matrix_g[p.x][p.y] = "-"
        i = _add(i, 1)
      end
      column = 0
      while column < size
        matrix_g = move_x(matrix_g, column, size)
        column = _add(column, 1)
      end
      matrix_g = move_y(matrix_g, size)
    end
    sc = increment_score(same_colors.length)
    return PlayResult.new(matrix: matrix_g, score: sc)
  end
  def build_matrix(matrix)
    res = []
    i = 0
    while i < matrix.length
      row = matrix[i]
      row_list = []
      j = 0
      while j < row.length
        row_list = (row_list + [row[j..._add(j, 1)]])
        j = _add(j, 1)
      end
      res = (res + [row_list])
      i = _add(i, 1)
    end
    return res
  end
  def process_game(size, matrix, moves)
    game_matrix = build_matrix(matrix)
    total = 0
    i = 0
    while i < moves.length
      mv = moves[i]
      res = play(game_matrix, mv.x, mv.y, size)
      game_matrix = res.matrix
      total = _add(total, res.score)
      i = _add(i, 1)
    end
    return total
  end
  def main()
    size = 4
    matrix = ["RRBG", "RBBG", "YYGG", "XYGG"]
    moves = parse_moves("0 1,1 1")
    validate_matrix_size(size)
    validate_matrix_content(matrix, size)
    validate_moves(moves, size)
    score = process_game(size, matrix, moves)
    puts(_str(score))
  end
  Object.send(:remove_const, :Coord) if Object.const_defined?(:Coord)
  Coord = Struct.new(:x, :y, keyword_init: true)
  Object.send(:remove_const, :PlayResult) if Object.const_defined?(:PlayResult)
  PlayResult = Struct.new(:matrix, :score, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
