# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_alnum(ch)
    return (ch >= "0" && ch <= "9") || (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z")
  end
  def to_int(token)
    res = 0.clone
    i = 0.clone
    while i < token.length
      res = _add(res * 10, ((token[i..._add(i, 1)]).to_i)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def split(s, sep)
    res = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == sep
        res = (res << (current)).clone
        current = "".clone
      else
        current = _add(current, ch).clone
      end
      i = _add(i, 1).clone
    end
    res = (res << (current)).clone
    return res
  end
  def parse_moves(input_str)
    pairs = split(input_str, ",")
    moves = [].clone
    i = 0.clone
    while i < pairs.length
      pair = pairs[i]
      numbers = [].clone
      num = "".clone
      j = 0.clone
      while j < pair.length
        ch = pair[j..._add(j, 1)]
        if ch == " "
          if num != ""
            numbers = (numbers << (num)).clone
            num = "".clone
          end
        else
          num = _add(num, ch).clone
        end
        j = _add(j, 1).clone
      end
      if num != ""
        numbers = (numbers << (num)).clone
      end
      if numbers.length != 2
        panic("Each move must have exactly two numbers.")
      end
      x = to_int(numbers[0])
      y = to_int(numbers[1])
      moves = (moves << (Coord.new(x: x, y: y))).clone
      i = _add(i, 1).clone
    end
    return moves
  end
  def validate_matrix_size(size)
    if size <= 0
      panic("Matrix size must be a positive integer.")
    end
  end
  def validate_matrix_content(matrix, size)
    if matrix.length != size
      panic("The matrix dont match with size.")
    end
    i = 0.clone
    while i < size
      row = matrix[i]
      if row.length != size
        panic(_add(_add("Each row in the matrix must have exactly ", _str(size)), " characters."))
      end
      j = 0.clone
      while j < size
        ch = row[j..._add(j, 1)]
        if !is_alnum(ch)
          panic("Matrix rows can only contain letters and numbers.")
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
  end
  def validate_moves(moves, size)
    i = 0.clone
    while i < moves.length
      mv = moves[i]
      if mv.x < 0 || mv.x >= size || mv.y < 0 || mv.y >= size
        panic("Move is out of bounds for a matrix.")
      end
      i = _add(i, 1).clone
    end
  end
  def contains(pos, r, c)
    i = 0.clone
    while i < pos.length
      p = pos[i]
      if p.x == r && p.y == c
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def find_repeat(matrix_g, row, column, size)
    column = size - 1 - column.clone
    visited = [].clone
    repeated = [].clone
    color = matrix_g[column][row]
    if color == "-"
      return repeated
    end
    stack = [Coord.new(x: column, y: row)].clone
    while stack.length > 0
      idx = stack.length - 1
      pos = stack[idx]
      stack = stack[0...idx].clone
      if pos.x < 0 || pos.x >= size || pos.y < 0 || pos.y >= size
        next
      end
      if contains(visited, pos.x, pos.y)
        next
      end
      visited = (visited << (pos)).clone
      if matrix_g[pos.x][pos.y] == color
        repeated = (repeated << (pos)).clone
        stack = (stack << (Coord.new(x: pos.x - 1, y: pos.y))).clone
        stack = (stack << (Coord.new(x: _add(pos.x, 1), y: pos.y))).clone
        stack = (stack << (Coord.new(x: pos.x, y: pos.y - 1))).clone
        stack = (stack << (Coord.new(x: pos.x, y: _add(pos.y, 1)))).clone
      end
    end
    return repeated
  end
  def increment_score(count)
    return count * (_add(count, 1)) / 2
  end
  def move_x(matrix_g, column, size)
    new_list = [].clone
    row = 0.clone
    while row < size
      val = matrix_g[row][column]
      if val != "-"
        new_list = (new_list << (val)).clone
      else
        new_list = _add([val], new_list).clone
      end
      row = _add(row, 1).clone
    end
    row = 0.clone
    while row < size
      matrix_g[row][column] = new_list[row]
      row = _add(row, 1).clone
    end
    return matrix_g
  end
  def move_y(matrix_g, size)
    empty_cols = [].clone
    column = size - 1.clone
    while column >= 0
      row = 0.clone
      all_empty = true.clone
      while row < size
        if matrix_g[row][column] != "-"
          all_empty = false.clone
          break
        end
        row = _add(row, 1).clone
      end
      if all_empty
        empty_cols = (empty_cols << (column)).clone
      end
      column = column - 1.clone
    end
    i = 0.clone
    while i < empty_cols.length
      col = empty_cols[i]
      c = _add(col, 1).clone
      while c < size
        r = 0.clone
        while r < size
          matrix_g[r][c - 1] = matrix_g[r][c]
          r = _add(r, 1).clone
        end
        c = _add(c, 1).clone
      end
      r = 0.clone
      while r < size
        matrix_g[r][size - 1] = "-"
        r = _add(r, 1).clone
      end
      i = _add(i, 1).clone
    end
    return matrix_g
  end
  def play(matrix_g, pos_x, pos_y, size)
    same_colors = find_repeat(matrix_g, pos_x, pos_y, size)
    if same_colors.length != 0
      i = 0.clone
      while i < same_colors.length
        p = same_colors[i]
        matrix_g[p.x][p.y] = "-"
        i = _add(i, 1).clone
      end
      column = 0.clone
      while column < size
        matrix_g = move_x(matrix_g, column, size).clone
        column = _add(column, 1).clone
      end
      matrix_g = move_y(matrix_g, size).clone
    end
    sc = increment_score(same_colors.length)
    return PlayResult.new(matrix: matrix_g, score: sc)
  end
  def build_matrix(matrix)
    res = [].clone
    i = 0.clone
    while i < matrix.length
      row = matrix[i]
      row_list = [].clone
      j = 0.clone
      while j < row.length
        row_list = (row_list << (row[j..._add(j, 1)])).clone
        j = _add(j, 1).clone
      end
      res = (res << (row_list)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def process_game(size, matrix, moves)
    game_matrix = build_matrix(matrix).clone
    total = 0.clone
    i = 0.clone
    while i < moves.length
      mv = moves[i]
      res = play(game_matrix, mv.x, mv.y, size)
      game_matrix = res.matrix.clone
      total = _add(total, res.score).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def main()
    size = 4
    matrix = ["RRBG", "RBBG", "YYGG", "XYGG"]
    moves = parse_moves("0 1,1 1")
    validate_matrix_size(size)
    validate_matrix_content(matrix, size)
    validate_moves(moves, size)
    score = process_game(size, matrix, moves)
    puts(_str(score))
  end
  Coord = Struct.new(:x, :y, keyword_init: true)
  PlayResult = Struct.new(:matrix, :score, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
