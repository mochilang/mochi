# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_alnum(ch)
    return (ch >= "0" && ch <= "9") || (ch >= "A" && ch <= "Z") || (ch >= "a" && ch <= "z")
  end
  def to_int(token)
    res = 0
    i = 0
    while i < _len(token)
      res = _add(res * 10, ((token[i..._add(i, 1)]).to_i))
      i = _add(i, 1)
    end
    return res
  end
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < _len(s)
      ch = s[i..._add(i, 1)]
      if _eq(ch, sep)
        res = _append(res, current)
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = _append(res, current)
    return res
  end
  def parse_moves(input_str)
    pairs = split(input_str, ",")
    moves = []
    i = 0
    while i < _len(pairs)
      pair = (__tmp1 = pairs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      numbers = []
      num = ""
      j = 0
      while j < _len(pair)
        ch = pair[j..._add(j, 1)]
        if _eq(ch, " ")
          if !_eq(num, "")
            numbers = _append(numbers, num)
            num = ""
          end
        else
          num = _add(num, ch)
        end
        j = _add(j, 1)
      end
      if !_eq(num, "")
        numbers = _append(numbers, num)
      end
      if !_eq(_len(numbers), 2)
        panic("Each move must have exactly two numbers.")
      end
      x = to_int((__tmp2 = numbers; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
      y = to_int((__tmp3 = numbers; __tmp3.is_a?(Hash) ? __tmp3[1] : _idx(__tmp3, 1)))
      moves = _append(moves, Coord.new(x: x, y: y))
      i = _add(i, 1)
    end
    return moves
  end
  def validate_matrix_size(size)
    if size <= 0
      panic("Matrix size must be a positive integer.")
    end
  end
  def validate_matrix_content(matrix, size)
    if !_eq(_len(matrix), size)
      panic("The matrix dont match with size.")
    end
    i = 0
    while i < size
      row = (__tmp4 = matrix; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      if !_eq(_len(row), size)
        panic(_add(_add("Each row in the matrix must have exactly ", _str(size)), " characters."))
      end
      j = 0
      while j < size
        ch = row[j..._add(j, 1)]
        if !is_alnum(ch)
          panic("Matrix rows can only contain letters and numbers.")
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
  end
  def validate_moves(moves, size)
    i = 0
    while i < _len(moves)
      mv = (__tmp5 = moves; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      if mv.x < 0 || mv.x >= size || mv.y < 0 || mv.y >= size
        panic("Move is out of bounds for a matrix.")
      end
      i = _add(i, 1)
    end
  end
  def contains(pos, r, c)
    i = 0
    while i < _len(pos)
      p = (__tmp6 = pos; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
      if _eq(p.x, r) && _eq(p.y, c)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def find_repeat(matrix_g, row, column, size)
    column = size - 1 - column
    visited = []
    repeated = []
    color = (__tmp7 = (__tmp8 = matrix_g; __tmp8.is_a?(Hash) ? __tmp8[column] : _idx(__tmp8, column)); __tmp7.is_a?(Hash) ? __tmp7[row] : _idx(__tmp7, row))
    if _eq(color, "-")
      return repeated
    end
    stack = [Coord.new(x: column, y: row)]
    while _len(stack) > 0
      idx = _len(stack) - 1
      pos = (__tmp9 = stack; __tmp9.is_a?(Hash) ? __tmp9[idx] : _idx(__tmp9, idx))
      stack = stack[0...idx]
      if pos.x < 0 || pos.x >= size || pos.y < 0 || pos.y >= size
        next
      end
      if contains(visited, pos.x, pos.y)
        next
      end
      visited = _append(visited, pos)
      if _eq((__tmp10 = (__tmp11 = matrix_g; __tmp11.is_a?(Hash) ? __tmp11[pos.x] : _idx(__tmp11, pos.x)); __tmp10.is_a?(Hash) ? __tmp10[pos.y] : _idx(__tmp10, pos.y)), color)
        repeated = _append(repeated, pos)
        stack = _append(stack, Coord.new(x: pos.x - 1, y: pos.y))
        stack = _append(stack, Coord.new(x: _add(pos.x, 1), y: pos.y))
        stack = _append(stack, Coord.new(x: pos.x, y: pos.y - 1))
        stack = _append(stack, Coord.new(x: pos.x, y: _add(pos.y, 1)))
      end
    end
    return repeated
  end
  def increment_score(count)
    return count * (_add(count, 1)) / 2
  end
  def move_x(matrix_g, column, size)
    new_list = []
    row = 0
    while row < size
      val = (__tmp12 = (__tmp13 = matrix_g; __tmp13.is_a?(Hash) ? __tmp13[row] : _idx(__tmp13, row)); __tmp12.is_a?(Hash) ? __tmp12[column] : _idx(__tmp12, column))
      if !_eq(val, "-")
        new_list = _append(new_list, val)
      else
        new_list = _add([val], new_list)
      end
      row = _add(row, 1)
    end
    row = 0
    while row < size
      (__tmp14 = matrix_g; __tmp14.is_a?(Hash) ? __tmp14[row] : _idx(__tmp14, row))[column] = (__tmp15 = new_list; __tmp15.is_a?(Hash) ? __tmp15[row] : _idx(__tmp15, row))
      row = _add(row, 1)
    end
    return matrix_g
  end
  def move_y(matrix_g, size)
    empty_cols = []
    column = size - 1
    while column >= 0
      row = 0
      all_empty = true
      while row < size
        if !_eq((__tmp16 = (__tmp17 = matrix_g; __tmp17.is_a?(Hash) ? __tmp17[row] : _idx(__tmp17, row)); __tmp16.is_a?(Hash) ? __tmp16[column] : _idx(__tmp16, column)), "-")
          all_empty = false
          break
        end
        row = _add(row, 1)
      end
      if all_empty
        empty_cols = _append(empty_cols, column)
      end
      column = column - 1
    end
    i = 0
    while i < _len(empty_cols)
      col = (__tmp18 = empty_cols; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))
      c = _add(col, 1)
      while c < size
        r = 0
        while r < size
          (__tmp19 = matrix_g; __tmp19.is_a?(Hash) ? __tmp19[r] : _idx(__tmp19, r))[c - 1] = (__tmp20 = (__tmp21 = matrix_g; __tmp21.is_a?(Hash) ? __tmp21[r] : _idx(__tmp21, r)); __tmp20.is_a?(Hash) ? __tmp20[c] : _idx(__tmp20, c))
          r = _add(r, 1)
        end
        c = _add(c, 1)
      end
      r = 0
      while r < size
        (__tmp22 = matrix_g; __tmp22.is_a?(Hash) ? __tmp22[r] : _idx(__tmp22, r))[size - 1] = "-"
        r = _add(r, 1)
      end
      i = _add(i, 1)
    end
    return matrix_g
  end
  def play(matrix_g, pos_x, pos_y, size)
    same_colors = find_repeat(matrix_g, pos_x, pos_y, size)
    if !_eq(_len(same_colors), 0)
      i = 0
      while i < _len(same_colors)
        p = (__tmp23 = same_colors; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i))
        (__tmp24 = matrix_g; __tmp24.is_a?(Hash) ? __tmp24[p.x] : _idx(__tmp24, p.x))[p.y] = "-"
        i = _add(i, 1)
      end
      column = 0
      while column < size
        matrix_g = move_x(matrix_g, column, size)
        column = _add(column, 1)
      end
      matrix_g = move_y(matrix_g, size)
    end
    sc = increment_score(_len(same_colors))
    return PlayResult.new(matrix: matrix_g, score: sc)
  end
  def build_matrix(matrix)
    res = []
    i = 0
    while i < _len(matrix)
      row = (__tmp25 = matrix; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i))
      row_list = []
      j = 0
      while j < _len(row)
        row_list = _append(row_list, row[j..._add(j, 1)])
        j = _add(j, 1)
      end
      res = _append(res, row_list)
      i = _add(i, 1)
    end
    return res
  end
  def process_game(size, matrix, moves)
    game_matrix = build_matrix(matrix)
    total = 0
    i = 0
    while i < _len(moves)
      mv = (__tmp26 = moves; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i))
      res = play(game_matrix, mv.x, mv.y, size)
      game_matrix = res.matrix
      total = _add(total, res.score)
      i = _add(i, 1)
    end
    return total
  end
  def main()
    size = 4
    matrix = ["RRBG", "RBBG", "YYGG", "XYGG"]
    moves = parse_moves("0 1,1 1")
    validate_matrix_size(size)
    validate_matrix_content(matrix, size)
    validate_moves(moves, size)
    score = process_game(size, matrix, moves)
    puts(_str(score))
  end
  Object.send(:remove_const, :Coord) if Object.const_defined?(:Coord)
  Object.const_set(:Coord, Struct.new(:x, :y, keyword_init: true))
  Object.send(:remove_const, :PlayResult) if Object.const_defined?(:PlayResult)
  Object.const_set(:PlayResult, Struct.new(:matrix, :score, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
