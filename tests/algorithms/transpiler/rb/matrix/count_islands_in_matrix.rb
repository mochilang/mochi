# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_safe(grid, visited, row, col)
    rows = grid.length
    cols = (__tmp1 = grid; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)).length
    visited_cell = (__tmp2 = (__tmp3 = visited; __tmp3.is_a?(Hash) ? __tmp3[row] : _idx(__tmp3, row)); __tmp2.is_a?(Hash) ? __tmp2[col] : _idx(__tmp2, col))
    within_bounds = row >= 0 && row < rows && col >= 0 && col < cols
    not_visited = _eq(visited_cell, false)
    return within_bounds && not_visited && _eq((__tmp4 = (__tmp5 = grid; __tmp5.is_a?(Hash) ? __tmp5[row] : _idx(__tmp5, row)); __tmp4.is_a?(Hash) ? __tmp4[col] : _idx(__tmp4, col)), 1)
  end
  def dfs(grid, visited, row, col)
    row_nbr = [-1, -1, -1, 0, 0, 1, 1, 1]
    col_nbr = [-1, 0, 1, -1, 1, -1, 0, 1]
    (__tmp6 = visited; __tmp6.is_a?(Hash) ? __tmp6[row] : _idx(__tmp6, row))[col] = true
    k = 0
    while k < 8
      new_row = _add(row, (__tmp7 = row_nbr; __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)))
      new_col = _add(col, (__tmp8 = col_nbr; __tmp8.is_a?(Hash) ? __tmp8[k] : _idx(__tmp8, k)))
      if is_safe(grid, visited, new_row, new_col)
        dfs(grid, visited, new_row, new_col)
      end
      k = _add(k, 1)
    end
  end
  def count_islands(grid)
    rows = grid.length
    cols = (__tmp9 = grid; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0)).length
    visited = []
    i = 0
    while i < rows
      row_list = []
      j = 0
      while j < cols
        row_list = (row_list + [false])
        j = _add(j, 1)
      end
      visited = (visited + [row_list])
      i = _add(i, 1)
    end
    count = 0
    i = 0
    while i < rows
      j = 0
      while j < cols
        if !(__tmp10 = (__tmp11 = visited; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)); __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)) && _eq((__tmp12 = (__tmp13 = grid; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)); __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)), 1)
          dfs(grid, visited, i, j)
          count = _add(count, 1)
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return count
  end
  $grid = [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]]
  puts(count_islands($grid))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
