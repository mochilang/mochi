# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def gauss_easter(year)
    metonic_cycle = year % 19
    julian_leap_year = year % 4
    non_leap_year = year % 7
    leap_day_inhibits = year / 100
    lunar_orbit_correction = (_add(13, 8 * leap_day_inhibits)) / 25
    leap_day_reinstall_number = ((leap_day_inhibits).to_f) / 4.0
    secular_moon_shift = (_add(15.0 - ((lunar_orbit_correction).to_f), ((leap_day_inhibits).to_f)) - leap_day_reinstall_number) % 30.0
    century_starting_point = (_add(4.0, ((leap_day_inhibits).to_f)) - leap_day_reinstall_number) % 7.0
    days_to_add = (_add(19.0 * ((metonic_cycle).to_f), secular_moon_shift)) % 30.0
    days_from_phm_to_sunday = (_add(_add(_add(2.0 * ((julian_leap_year).to_f), 4.0 * ((non_leap_year).to_f)), 6.0 * days_to_add), century_starting_point)) % 7.0
    if days_to_add == 29.0 && days_from_phm_to_sunday == 6.0
      return EasterDate.new(month: 4, day: 19)
    end
    if days_to_add == 28.0 && days_from_phm_to_sunday == 6.0
      return EasterDate.new(month: 4, day: 18)
    end
    offset = ((_add(days_to_add, days_from_phm_to_sunday))).to_i
    total = _add(22, offset)
    if total > 31
      return EasterDate.new(month: 4, day: total - 31)
    end
    return EasterDate.new(month: 3, day: total)
  end
  def format_date(year, d)
    month = (d.month < 10 ? _add("0", _str(d.month)) : _str(d.month))
    day = (d.day < 10 ? _add("0", _str(d.day)) : _str(d.day))
    return _add(_add(_add(_add(_str(year), "-"), month), "-"), day)
  end
  EasterDate = Struct.new(:month, :day, keyword_init: true)
  $years = [1994, 2000, 2010, 2021, 2023, 2032, 2100]
  $i = 0.clone
  while $i < $years.length
    y = $years[$i]
    e = gauss_easter(y)
    puts(_add(_add(_add("Easter in ", _str(y)), " is "), format_date(y, e)))
    $i = _add($i, 1).clone
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
