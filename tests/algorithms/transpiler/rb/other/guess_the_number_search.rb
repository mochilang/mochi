# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_avg(number_1, number_2)
    return (_add(number_1, number_2)) / 2
  end
  def guess_the_number(lower, higher, to_guess)
    if lower > higher
      panic("argument value for lower and higher must be(lower > higher)")
    end
    if !(lower < to_guess && to_guess < higher)
      panic("guess value must be within the range of lower and higher value")
    end
    answer = ->(number) {
      if number > to_guess
        return "high"
      else
        if number < to_guess
          return "low"
        else
          return "same"
        end
      end
    }
    puts("started...")
    last_lowest = lower.clone
    last_highest = higher.clone
    last_numbers = [].clone
    while true
      number = get_avg(last_lowest, last_highest)
      last_numbers = (last_numbers << (number)).clone
      resp = answer.call(number)
      if resp == "low"
        last_lowest = number.clone
      else
        if resp == "high"
          last_highest = number.clone
        else
          break
        end
      end
    end
    puts(_add("guess the number : ", _str(last_numbers[last_numbers.length - 1])))
    puts(_add("details : ", ((x = last_numbers); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    return last_numbers
  end
  guess_the_number(10, 1000, 17)
  guess_the_number(-10000, 10000, 7)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
