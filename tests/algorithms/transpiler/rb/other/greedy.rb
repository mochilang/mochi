# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_value(t)
    return t.value
  end
  def get_weight(t)
    return t.weight
  end
  def get_name(t)
    return t.name
  end
  def value_weight(t)
    return t.value / t.weight
  end
  def build_menu(names, values, weights)
    menu = [].clone
    i = 0.clone
    while i < values.length && i < names.length && i < weights.length
      menu = (menu << (Thing.new(name: names[i], value: values[i], weight: weights[i]))).clone
      i = _add(i, 1).clone
    end
    return menu
  end
  def sort_desc(items, key_func)
    arr = [].clone
    i = 0.clone
    while i < items.length
      arr = (arr << (items[i])).clone
      i = _add(i, 1).clone
    end
    j = 1.clone
    while j < arr.length
      key_item = arr[j]
      key_val = key_func.call(key_item)
      k = j - 1.clone
      while k >= 0 && key_func.call(arr[k]) < key_val
        arr[_add(k, 1)] = arr[k]
        k = k - 1.clone
      end
      arr[_add(k, 1)] = key_item
      j = _add(j, 1).clone
    end
    return arr
  end
  def greedy(items, max_cost, key_func)
    items_copy = sort_desc(items, key_func)
    result = [].clone
    total_value = 0.0.clone
    total_cost = 0.0.clone
    i = 0.clone
    while i < items_copy.length
      it = items_copy[i]
      w = get_weight(it)
      if _add(total_cost, w) <= max_cost
        result = (result << (it)).clone
        total_cost = _add(total_cost, w).clone
        total_value = _add(total_value, get_value(it)).clone
      end
      i = _add(i, 1).clone
    end
    return GreedyResult.new(items: result, total_value: total_value)
  end
  def thing_to_string(t)
    return _add(_add(_add(_add(_add(_add("Thing(", t.name), ", "), _str(t.value)), ", "), _str(t.weight)), ")")
  end
  def list_to_string(ts)
    s = "[".clone
    i = 0.clone
    while i < ts.length
      s = _add(s, thing_to_string(ts[i])).clone
      if i < ts.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  Thing = Struct.new(:name, :value, :weight, keyword_init: true)
  GreedyResult = Struct.new(:items, :total_value, keyword_init: true)
  $food = ["Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"]
  $value = [80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0]
  $weight = [40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0]
  $foods = build_menu($food, $value, $weight)
  puts(list_to_string($foods))
  $res = greedy($foods, 500.0, method(:get_value))
  puts(list_to_string($res.items))
  puts(_str($res.total_value))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
