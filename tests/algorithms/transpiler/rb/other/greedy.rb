# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:01 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_value(t)
    return t.value
  end
  def get_weight(t)
    return t.weight
  end
  def get_name(t)
    return t.name
  end
  def value_weight(t)
    return t.value / t.weight
  end
  def build_menu(names, values, weights)
    menu = []
    i = 0
    while i < values.length && i < names.length && i < weights.length
      menu = (menu + [Thing.new(name: (__tmp1 = names; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), value: (__tmp2 = values; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), weight: (__tmp3 = weights; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))])
      i = _add(i, 1)
    end
    return menu
  end
  def sort_desc(items, key_func)
    arr = []
    i = 0
    while i < items.length
      arr = (arr + [(__tmp4 = items; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))])
      i = _add(i, 1)
    end
    j = 1
    while j < arr.length
      key_item = (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))
      key_val = key_func.call(key_item)
      k = j - 1
      while k >= 0 && key_func.call((__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k))) < key_val
        arr[_add(k, 1)] = (__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k))
        k = k - 1
      end
      arr[_add(k, 1)] = key_item
      j = _add(j, 1)
    end
    return arr
  end
  def greedy(items, max_cost, key_func)
    items_copy = sort_desc(items, key_func)
    result = []
    total_value = 0.0
    total_cost = 0.0
    i = 0
    while i < items_copy.length
      it = (__tmp8 = items_copy; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      w = get_weight(it)
      if _add(total_cost, w) <= max_cost
        result = (result + [it])
        total_cost = _add(total_cost, w)
        total_value = _add(total_value, get_value(it))
      end
      i = _add(i, 1)
    end
    return GreedyResult.new(items: result, total_value: total_value)
  end
  def thing_to_string(t)
    return _add(_add(_add(_add(_add(_add("Thing(", t.name), ", "), _str(t.value)), ", "), _str(t.weight)), ")")
  end
  def list_to_string(ts)
    s = "["
    i = 0
    while i < ts.length
      s = _add(s, thing_to_string((__tmp9 = ts; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))))
      if i < ts.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  Object.send(:remove_const, :Thing) if Object.const_defined?(:Thing)
  Thing = Struct.new(:name, :value, :weight, keyword_init: true)
  Object.send(:remove_const, :GreedyResult) if Object.const_defined?(:GreedyResult)
  GreedyResult = Struct.new(:items, :total_value, keyword_init: true)
  $food = ["Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"]
  $value = [80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0]
  $weight = [40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0]
  $foods = build_menu($food, $value, $weight)
  puts(list_to_string($foods))
  $res = greedy($foods, 500.0, method(:get_value))
  puts(list_to_string($res.items))
  puts(_str($res.total_value))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
