# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def new_clause(lits)
    m = {}
    names = []
    i = 0
    while i < lits.length
      lit = lits[i]
      m[lit] = 0 - 1
      names = (names + [lit])
      i = _add(i, 1)
    end
    return Clause.new(literals: m, names: names)
  end
  def assign_clause(c, model)
    lits = c.literals
    i = 0
    while i < c.names.length
      lit = c.names[i]
      symbol = lit[0...2]
      if model.key?(symbol)
        value = model[symbol]
        if _eq(lit[lit.length - 1...lit.length], "'") && !_eq(value, 0 - 1)
          value = 1 - value
        end
        lits[lit] = value
      end
      i = _add(i, 1)
    end
    c["literals"] = lits
    return c
  end
  def evaluate_clause(c, model)
    i = 0
    while i < c.names.length
      lit = c.names[i]
      sym = (_eq(lit[lit.length - 1...lit.length], "'") ? lit[0...2] : _add(lit, "'"))
      if c.literals.key?(sym)
        return EvalResult.new(value: 1, clause: c)
      end
      i = _add(i, 1)
    end
    c = assign_clause(c, model)
    i = 0
    while i < c.names.length
      lit = c.names[i]
      value = c.literals[lit]
      if _eq(value, 1)
        return EvalResult.new(value: 1, clause: c)
      end
      if _eq(value, 0 - 1)
        return EvalResult.new(value: 0 - 1, clause: c)
      end
      i = _add(i, 1)
    end
    any_true = 0
    i = 0
    while i < c.names.length
      lit = c.names[i]
      if _eq(c.literals[lit], 1)
        any_true = 1
      end
      i = _add(i, 1)
    end
    return EvalResult.new(value: any_true, clause: c)
  end
  def new_formula(cs)
    return Formula.new(clauses: cs)
  end
  def remove_symbol(symbols, s)
    res = []
    i = 0
    while i < symbols.length
      if !_eq(symbols[i], s)
        res = (res + [symbols[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def dpll_algorithm(clauses, symbols, model)
    all_true = true
    i = 0
    while i < clauses.length
      ev = evaluate_clause(clauses[i], model)
      clauses[i] = ev.clause
      if _eq(ev.value, 0)
        return DPLLResult.new(sat: false, model: {})
      else
        if _eq(ev.value, 0 - 1)
          all_true = false
        end
      end
      i = _add(i, 1)
    end
    if all_true
      return DPLLResult.new(sat: true, model: model)
    end
    p = symbols[0]
    rest = remove_symbol(symbols, p)
    tmp1 = model
    tmp2 = model
    tmp1[p] = 1
    tmp2[p] = 0
    res1 = dpll_algorithm(clauses, rest, tmp1)
    if res1.sat
      return res1
    end
    return dpll_algorithm(clauses, rest, tmp2)
  end
  def str_clause(c)
    line = "{"
    first = true
    i = 0
    while i < c.names.length
      lit = c.names[i]
      if first
        first = false
      else
        line = _add(line, " , ")
      end
      line = _add(line, lit)
      i = _add(i, 1)
    end
    line = _add(line, "}")
    return line
  end
  def str_formula(f)
    line = "{"
    i = 0
    while i < f.clauses.length
      line = _add(line, str_clause(f.clauses[i]))
      if i < f.clauses.length - 1
        line = _add(line, " , ")
      end
      i = _add(i, 1)
    end
    line = _add(line, "}")
    return line
  end
  Object.send(:remove_const, :Clause) if Object.const_defined?(:Clause)
  Clause = Struct.new(:literals, :names, keyword_init: true)
  Object.send(:remove_const, :EvalResult) if Object.const_defined?(:EvalResult)
  EvalResult = Struct.new(:value, :clause, keyword_init: true)
  Object.send(:remove_const, :Formula) if Object.const_defined?(:Formula)
  Formula = Struct.new(:clauses, keyword_init: true)
  Object.send(:remove_const, :DPLLResult) if Object.const_defined?(:DPLLResult)
  DPLLResult = Struct.new(:sat, :model, keyword_init: true)
  $clause1 = new_clause(["A4", "A3", "A5'", "A1", "A3'"])
  $clause2 = new_clause(["A4"])
  $formula = new_formula([$clause1, $clause2])
  $formula_str = str_formula($formula)
  $clauses = [$clause1, $clause2]
  $symbols = ["A4", "A3", "A5", "A1"]
  $model = {}
  $result = dpll_algorithm($clauses, $symbols, $model)
  if $result.sat
    puts(_add(_add("The formula ", $formula_str), " is satisfiable."))
  else
    puts(_add(_add("The formula ", $formula_str), " is not satisfiable."))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
