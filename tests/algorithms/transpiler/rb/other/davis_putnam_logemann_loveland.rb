# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_clause(lits)
    m = {}
    names = []
    i = 0
    while i < _len(lits)
      lit = (__tmp1 = lits; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      m[lit] = 0 - 1
      names = (names + [lit])
      i = _add(i, 1)
    end
    return Clause.new(literals: m, names: names)
  end
  def assign_clause(c, model)
    lits = c.literals
    i = 0
    while i < _len(c.names)
      lit = (__tmp2 = c.names; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      symbol = lit[0...2]
      if _has(model, symbol)
        value = (__tmp3 = model; __tmp3.is_a?(Hash) ? __tmp3[symbol] : _idx(__tmp3, symbol))
        if _eq(lit[_len(lit) - 1..._len(lit)], "'") && !_eq(value, 0 - 1)
          value = 1 - value
        end
        lits[lit] = value
      end
      i = _add(i, 1)
    end
    c.literals = lits
    return c
  end
  def evaluate_clause(c, model)
    i = 0
    while i < _len(c.names)
      lit = (__tmp4 = c.names; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      sym = (_eq(lit[_len(lit) - 1..._len(lit)], "'") ? lit[0...2] : _add(lit, "'"))
      if _has(c.literals, sym)
        return EvalResult.new(value: 1, clause: c)
      end
      i = _add(i, 1)
    end
    c = assign_clause(c, model)
    i = 0
    while i < _len(c.names)
      lit = (__tmp5 = c.names; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      value = (__tmp6 = c.literals; __tmp6.is_a?(Hash) ? __tmp6[lit] : _idx(__tmp6, lit))
      if _eq(value, 1)
        return EvalResult.new(value: 1, clause: c)
      end
      if _eq(value, 0 - 1)
        return EvalResult.new(value: 0 - 1, clause: c)
      end
      i = _add(i, 1)
    end
    any_true = 0
    i = 0
    while i < _len(c.names)
      lit = (__tmp7 = c.names; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
      if _eq((__tmp8 = c.literals; __tmp8.is_a?(Hash) ? __tmp8[lit] : _idx(__tmp8, lit)), 1)
        any_true = 1
      end
      i = _add(i, 1)
    end
    return EvalResult.new(value: any_true, clause: c)
  end
  def new_formula(cs)
    return Formula.new(clauses: cs)
  end
  def remove_symbol(symbols, s)
    res = []
    i = 0
    while i < _len(symbols)
      if !_eq((__tmp9 = symbols; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)), s)
        res = (res + [(__tmp10 = symbols; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))])
      end
      i = _add(i, 1)
    end
    return res
  end
  def dpll_algorithm(clauses, symbols, model)
    all_true = true
    i = 0
    while i < _len(clauses)
      ev = evaluate_clause((__tmp11 = clauses; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)), model)
      clauses[i] = ev.clause
      if _eq(ev.value, 0)
        return DPLLResult.new(sat: false, model: {})
      else
        if _eq(ev.value, 0 - 1)
          all_true = false
        end
      end
      i = _add(i, 1)
    end
    if all_true
      return DPLLResult.new(sat: true, model: model)
    end
    p = (__tmp12 = symbols; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0))
    rest = remove_symbol(symbols, p)
    tmp1 = model
    tmp2 = model
    tmp1[p] = 1
    tmp2[p] = 0
    res1 = dpll_algorithm(clauses, rest, tmp1)
    if res1.sat
      return res1
    end
    return dpll_algorithm(clauses, rest, tmp2)
  end
  def str_clause(c)
    line = "{"
    first = true
    i = 0
    while i < _len(c.names)
      lit = (__tmp13 = c.names; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      if first
        first = false
      else
        line = _add(line, " , ")
      end
      line = _add(line, lit)
      i = _add(i, 1)
    end
    line = _add(line, "}")
    return line
  end
  def str_formula(f)
    line = "{"
    i = 0
    while i < _len(f.clauses)
      line = _add(line, str_clause((__tmp14 = f.clauses; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))))
      if i < _len(f.clauses) - 1
        line = _add(line, " , ")
      end
      i = _add(i, 1)
    end
    line = _add(line, "}")
    return line
  end
  Object.send(:remove_const, :Clause) if Object.const_defined?(:Clause)
  Clause = Struct.new(:literals, :names, keyword_init: true)
  Object.send(:remove_const, :EvalResult) if Object.const_defined?(:EvalResult)
  EvalResult = Struct.new(:value, :clause, keyword_init: true)
  Object.send(:remove_const, :Formula) if Object.const_defined?(:Formula)
  Formula = Struct.new(:clauses, keyword_init: true)
  Object.send(:remove_const, :DPLLResult) if Object.const_defined?(:DPLLResult)
  DPLLResult = Struct.new(:sat, :model, keyword_init: true)
  $clause1 = new_clause(["A4", "A3", "A5'", "A1", "A3'"])
  $clause2 = new_clause(["A4"])
  $formula = new_formula([$clause1, $clause2])
  $formula_str = str_formula($formula)
  $clauses = [$clause1, $clause2]
  $symbols = ["A4", "A3", "A5", "A1"]
  $model = {}
  $result = dpll_algorithm($clauses, $symbols, $model)
  if $result.sat
    puts(_add(_add("The formula ", $formula_str), " is satisfiable."))
  else
    puts(_add(_add("The formula ", $formula_str), " is not satisfiable."))
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
