# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def new_clause(lits)
    m = {}.clone
    names = [].clone
    i = 0.clone
    while i < lits.length
      lit = lits[i]
      m[lit] = 0 - 1
      names = (names << (lit)).clone
      i = _add(i, 1).clone
    end
    return Clause.new(literals: m, names: names)
  end
  def assign_clause(c, model)
    lits = c.literals.clone
    i = 0.clone
    while i < c.names.length
      lit = c.names[i]
      symbol = lit[0...2]
      if model.key?(symbol)
        value = model[symbol].clone
        if lit[lit.length - 1...lit.length] == "'" && value != 0 - 1
          value = 1 - value.clone
        end
        lits[lit] = value
      end
      i = _add(i, 1).clone
    end
    c["literals"] = lits
    return c
  end
  def evaluate_clause(c, model)
    i = 0.clone
    while i < c.names.length
      lit = c.names[i]
      sym = (lit[lit.length - 1...lit.length] == "'" ? lit[0...2] : _add(lit, "'"))
      if c.literals.key?(sym)
        return EvalResult.new(value: 1, clause: c)
      end
      i = _add(i, 1).clone
    end
    c = assign_clause(c, model).clone
    i = 0.clone
    while i < c.names.length
      lit = c.names[i]
      value = c.literals[lit]
      if value == 1
        return EvalResult.new(value: 1, clause: c)
      end
      if value == 0 - 1
        return EvalResult.new(value: 0 - 1, clause: c)
      end
      i = _add(i, 1).clone
    end
    any_true = 0.clone
    i = 0.clone
    while i < c.names.length
      lit = c.names[i]
      if c.literals[lit] == 1
        any_true = 1.clone
      end
      i = _add(i, 1).clone
    end
    return EvalResult.new(value: any_true, clause: c)
  end
  def new_formula(cs)
    return Formula.new(clauses: cs)
  end
  def remove_symbol(symbols, s)
    res = [].clone
    i = 0.clone
    while i < symbols.length
      if symbols[i] != s
        res = (res << (symbols[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def dpll_algorithm(clauses, symbols, model)
    all_true = true.clone
    i = 0.clone
    while i < clauses.length
      ev = evaluate_clause(clauses[i], model)
      clauses[i] = ev.clause
      if ev.value == 0
        return DPLLResult.new(sat: false, model: {})
      else
        if ev.value == 0 - 1
          all_true = false.clone
        end
      end
      i = _add(i, 1).clone
    end
    if all_true
      return DPLLResult.new(sat: true, model: model)
    end
    p = symbols[0]
    rest = remove_symbol(symbols, p)
    tmp1 = model.clone
    tmp2 = model.clone
    tmp1[p] = 1
    tmp2[p] = 0
    res1 = dpll_algorithm(clauses, rest, tmp1)
    if res1.sat
      return res1
    end
    return dpll_algorithm(clauses, rest, tmp2)
  end
  def str_clause(c)
    line = "{".clone
    first = true.clone
    i = 0.clone
    while i < c.names.length
      lit = c.names[i]
      if first
        first = false.clone
      else
        line = _add(line, " , ").clone
      end
      line = _add(line, lit).clone
      i = _add(i, 1).clone
    end
    line = _add(line, "}").clone
    return line
  end
  def str_formula(f)
    line = "{".clone
    i = 0.clone
    while i < f.clauses.length
      line = _add(line, str_clause(f.clauses[i])).clone
      if i < f.clauses.length - 1
        line = _add(line, " , ").clone
      end
      i = _add(i, 1).clone
    end
    line = _add(line, "}").clone
    return line
  end
  Clause = Struct.new(:literals, :names, keyword_init: true)
  EvalResult = Struct.new(:value, :clause, keyword_init: true)
  Formula = Struct.new(:clauses, keyword_init: true)
  DPLLResult = Struct.new(:sat, :model, keyword_init: true)
  $clause1 = new_clause(["A4", "A3", "A5'", "A1", "A3'"])
  $clause2 = new_clause(["A4"])
  $formula = new_formula([$clause1, $clause2])
  $formula_str = str_formula($formula)
  $clauses = [$clause1, $clause2]
  $symbols = ["A4", "A3", "A5", "A1"]
  $model = {}.clone
  $result = dpll_algorithm($clauses, $symbols, $model)
  if $result.sat
    puts(_add(_add("The formula ", $formula_str), " is satisfiable."))
  else
    puts(_add(_add("The formula ", $formula_str), " is not satisfiable."))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
