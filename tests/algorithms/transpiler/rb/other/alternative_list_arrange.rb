# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def from_int(x)
    return Int.new(value: x)
  end
  def from_string(s)
    return Str.new(value: s)
  end
  def item_to_string(it)
    return (it.is_a?(Int) ? (->(v) { _str(v) }).call(it.value) : (it.is_a?(Str) ? (->(s) { s }).call(it.value) : nil))
  end
  def alternative_list_arrange(first, second)
    len1 = first.length
    len2 = second.length
    abs_len = (len1 > len2 ? len1 : len2)
    result = [].clone
    i = 0.clone
    while i < abs_len
      if i < len1
        result = (result << (first[i])).clone
      end
      if i < len2
        result = (result << (second[i])).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def list_to_string(xs)
    s = "[".clone
    i = 0.clone
    while i < xs.length
      s = _add(s, item_to_string(xs[i])).clone
      if i < xs.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  Int = Struct.new(:value, keyword_init: true)
  Str = Struct.new(:value, keyword_init: true)
  $example1 = alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [from_string("A"), from_string("B"), from_string("C")])
  puts(list_to_string($example1))
  $example2 = alternative_list_arrange([from_string("A"), from_string("B"), from_string("C")], [from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)])
  puts(list_to_string($example2))
  $example3 = alternative_list_arrange([from_string("X"), from_string("Y"), from_string("Z")], [from_int(9), from_int(8), from_int(7), from_int(6)])
  puts(list_to_string($example3))
  $example4 = alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [])
  puts(list_to_string($example4))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
