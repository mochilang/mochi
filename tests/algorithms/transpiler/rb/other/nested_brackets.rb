# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def slice_without_last(xs)
    res = [].clone
    i = 0.clone
    while i < xs.length - 1
      res = (res << (xs[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def is_balanced(s)
    stack = [].clone
    i = 0.clone
    while i < s.length
      symbol = s[i..._add(i, 1)]
      if $OPEN_TO_CLOSED.include?(symbol)
        stack = (stack << (symbol)).clone
      else
        if symbol == ")" || symbol == "]" || symbol == "}"
          if stack.length == 0
            return false
          end
          top = stack[stack.length - 1]
          if $OPEN_TO_CLOSED[top] != symbol
            return false
          end
          stack = slice_without_last(stack).clone
        end
      end
      i = _add(i, 1).clone
    end
    return stack.length == 0
  end
  def main()
    puts((is_balanced("") ? 'true' : 'false'))
    puts((is_balanced("()") ? 'true' : 'false'))
    puts((is_balanced("[]") ? 'true' : 'false'))
    puts((is_balanced("{}") ? 'true' : 'false'))
    puts((is_balanced("()[]{}") ? 'true' : 'false'))
    puts((is_balanced("(())") ? 'true' : 'false'))
    puts((is_balanced("[[") ? 'true' : 'false'))
    puts((is_balanced("([{}])") ? 'true' : 'false'))
    puts((is_balanced("(()[)]") ? 'true' : 'false'))
    puts((is_balanced("([)]") ? 'true' : 'false'))
    puts((is_balanced("[[()]]") ? 'true' : 'false'))
    puts((is_balanced("(()(()))") ? 'true' : 'false'))
    puts((is_balanced("]") ? 'true' : 'false'))
    puts((is_balanced("Life is a bowl of cherries.") ? 'true' : 'false'))
    puts((is_balanced("Life is a bowl of che{}ies.") ? 'true' : 'false'))
    puts((is_balanced("Life is a bowl of che}{ies.") ? 'true' : 'false'))
  end
  $OPEN_TO_CLOSED = {"(" => ")", "[" => "]", "{" => "}"}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
