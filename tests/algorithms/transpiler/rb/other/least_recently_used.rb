# Generated by Mochi transpiler v0.10.67 on 2025-08-17 14:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_cache(n)
    if n < 0
      panic("n should be an integer greater than 0.")
    end
    cap = (_eq(n, 0) ? 2147483647 : n)
    return LRUCache.new(max_capacity: cap, store: [])
  end
  def remove_element(xs, x)
    res = []
    removed = false
    i = 0
    while i < _len(xs)
      v = (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      if _eq(removed, false) && _eq(v, x)
        removed = true
      else
        res = _add(res, [v])
      end
      i = _add(i, 1)
    end
    return res
  end
  def refer(cache, x)
    store = cache.store
    exists = false
    i = 0
    while i < _len(store)
      if _eq((__tmp2 = store; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), x)
        exists = true
      end
      i = _add(i, 1)
    end
    if exists
      store = remove_element(store, x)
    else
      if _eq(_len(store), cache.max_capacity)
        new_store = []
        j = 0
        while j < _len(store) - 1
          new_store = _add(new_store, [(__tmp3 = store; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))])
          j = _add(j, 1)
        end
        store = new_store
      end
    end
    store = _add([x], store)
    return LRUCache.new(max_capacity: cache.max_capacity, store: store)
  end
  def display(cache)
    i = 0
    while i < _len(cache.store)
      puts((__tmp4 = cache.store; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
      i = _add(i, 1)
    end
  end
  def repr_item(s)
    all_digits = true
    i = 0
    while i < _len(s)
      ch = (__tmp5 = s; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      if ch < "0" || ch > "9"
        all_digits = false
      end
      i = _add(i, 1)
    end
    if all_digits
      return s
    end
    return _add(_add("'", s), "'")
  end
  def cache_repr(cache)
    res = _add(_add("LRUCache(", _str(cache.max_capacity)), ") => [")
    i = 0
    while i < _len(cache.store)
      res = _add(res, repr_item((__tmp6 = cache.store; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))))
      if i < _len(cache.store) - 1
        res = _add(res, ", ")
      end
      i = _add(i, 1)
    end
    res = _add(res, "]")
    return res
  end
  Object.send(:remove_const, :LRUCache) if Object.const_defined?(:LRUCache)
  Object.const_set(:LRUCache, Struct.new(:max_capacity, :store, keyword_init: true))
  $lru = new_cache(4)
  $lru = refer($lru, "A")
  $lru = refer($lru, "2")
  $lru = refer($lru, "3")
  $lru = refer($lru, "A")
  $lru = refer($lru, "4")
  $lru = refer($lru, "5")
  $r = cache_repr($lru)
  puts($r)
  if !_eq($r, "LRUCache(4) => [5, 4, 'A', 3]")
    panic("Assertion error")
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
