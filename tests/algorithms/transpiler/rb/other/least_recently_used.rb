# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def new_cache(n)
    if n < 0
      panic("n should be an integer greater than 0.")
    end
    cap = (n == 0 ? 2147483647 : n)
    return LRUCache.new(max_capacity: cap, store: [])
  end
  def remove_element(xs, x)
    res = [].clone
    removed = false.clone
    i = 0.clone
    while i < xs.length
      v = xs[i]
      if removed == false && v == x
        removed = true.clone
      else
        res = _add(res, [v]).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def refer(cache, x)
    store = cache.store.clone
    exists = false.clone
    i = 0.clone
    while i < store.length
      if store[i] == x
        exists = true.clone
      end
      i = _add(i, 1).clone
    end
    if exists
      store = remove_element(store, x).clone
    else
      if store.length == cache.max_capacity
        new_store = [].clone
        j = 0.clone
        while j < store.length - 1
          new_store = _add(new_store, [store[j]]).clone
          j = _add(j, 1).clone
        end
        store = new_store.clone
      end
    end
    store = _add([x], store).clone
    return LRUCache.new(max_capacity: cache.max_capacity, store: store)
  end
  def display(cache)
    i = 0.clone
    while i < cache.store.length
      puts(cache.store[i])
      i = _add(i, 1).clone
    end
  end
  def repr_item(s)
    all_digits = true.clone
    i = 0.clone
    while i < s.length
      ch = s[i]
      if ch < "0" || ch > "9"
        all_digits = false.clone
      end
      i = _add(i, 1).clone
    end
    if all_digits
      return s
    end
    return _add(_add("'", s), "'")
  end
  def cache_repr(cache)
    res = _add(_add("LRUCache(", _str(cache.max_capacity)), ") => [").clone
    i = 0.clone
    while i < cache.store.length
      res = _add(res, repr_item(cache.store[i])).clone
      if i < cache.store.length - 1
        res = _add(res, ", ").clone
      end
      i = _add(i, 1).clone
    end
    res = _add(res, "]").clone
    return res
  end
  LRUCache = Struct.new(:max_capacity, :store, keyword_init: true)
  $lru = new_cache(4).clone
  $lru = refer($lru, "A").clone
  $lru = refer($lru, "2").clone
  $lru = refer($lru, "3").clone
  $lru = refer($lru, "A").clone
  $lru = refer($lru, "4").clone
  $lru = refer($lru, "5").clone
  $r = cache_repr($lru).clone
  puts($r)
  if $r != "LRUCache(4) => [5, 4, 'A', 3]"
    panic("Assertion error")
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
