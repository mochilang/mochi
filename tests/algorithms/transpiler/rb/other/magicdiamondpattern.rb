# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:01 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def floyd(n)
    result = ""
    i = 0
    while i < n
      j = 0
      while j < n - i - 1
        result = _add(result, " ")
        j = _add(j, 1)
      end
      k = 0
      while k < _add(i, 1)
        result = _add(result, "* ")
        k = _add(k, 1)
      end
      result = _add(result, "\n")
      i = _add(i, 1)
    end
    return result
  end
  def reverse_floyd(n)
    result = ""
    i = n
    while i > 0
      j = i
      while j > 0
        result = _add(result, "* ")
        j = j - 1
      end
      result = _add(result, "\n")
      k = _add(n - i, 1)
      while k > 0
        result = _add(result, " ")
        k = k - 1
      end
      i = i - 1
    end
    return result
  end
  def pretty_print(n)
    if n <= 0
      return "       ...       ....        nothing printing :("
    end
    upper_half = floyd(n)
    lower_half = reverse_floyd(n)
    return _add(upper_half, lower_half)
  end
  def main()
    puts(pretty_print(3))
    puts(pretty_print(0))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
