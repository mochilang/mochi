# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def floyd(n)
    result = "".clone
    i = 0.clone
    while i < n
      j = 0.clone
      while j < n - i - 1
        result = _add(result, " ").clone
        j = _add(j, 1).clone
      end
      k = 0.clone
      while k < _add(i, 1)
        result = _add(result, "* ").clone
        k = _add(k, 1).clone
      end
      result = _add(result, "\n").clone
      i = _add(i, 1).clone
    end
    return result
  end
  def reverse_floyd(n)
    result = "".clone
    i = n.clone
    while i > 0
      j = i.clone
      while j > 0
        result = _add(result, "* ").clone
        j = j - 1.clone
      end
      result = _add(result, "\n").clone
      k = _add(n - i, 1).clone
      while k > 0
        result = _add(result, " ").clone
        k = k - 1.clone
      end
      i = i - 1.clone
    end
    return result
  end
  def pretty_print(n)
    if n <= 0
      return "       ...       ....        nothing printing :("
    end
    upper_half = floyd(n)
    lower_half = reverse_floyd(n)
    return _add(upper_half, lower_half)
  end
  def main()
    puts(pretty_print(3))
    puts(pretty_print(0))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
