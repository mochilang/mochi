# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_week_day(year, month, day)
    if year < 100
      panic("year should be in YYYY format")
    end
    if month < 1 || month > 12
      panic("month should be between 1 to 12")
    end
    if day < 1 || day > 31
      panic("day should be between 1 to 31")
    end
    century = year / 100
    century_anchor = (_add(5 * (century % 4), 2)) % 7
    centurian = year % 100
    centurian_m = centurian % 12
    dooms_day = (_add(_add(_add((centurian / 12), centurian_m), (centurian_m / 4)), century_anchor)) % 7
    day_anchor = (!_eq(year % 4, 0) || (_eq(centurian, 0) && !_eq(year % 400, 0)) ? (__tmp1 = $DOOMSDAY_NOT_LEAP; __tmp1.is_a?(Hash) ? __tmp1[month - 1] : _idx(__tmp1, month - 1)) : (__tmp2 = $DOOMSDAY_LEAP; __tmp2.is_a?(Hash) ? __tmp2[month - 1] : _idx(__tmp2, month - 1)))
    week_day = (_add(dooms_day, day) - day_anchor) % 7
    if week_day < 0
      week_day = _add(week_day, 7)
    end
    return (__tmp3 = $WEEK_DAY_NAMES; __tmp3.is_a?(Hash) ? __tmp3[week_day] : _idx(__tmp3, week_day))
  end
  $DOOMSDAY_LEAP = [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]
  $DOOMSDAY_NOT_LEAP = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]
  $WEEK_DAY_NAMES = {0 => "Sunday", 1 => "Monday", 2 => "Tuesday", 3 => "Wednesday", 4 => "Thursday", 5 => "Friday", 6 => "Saturday"}
  puts(get_week_day(2020, 10, 24))
  puts(get_week_day(2017, 10, 24))
  puts(get_week_day(2019, 5, 3))
  puts(get_week_day(1970, 9, 16))
  puts(get_week_day(1870, 8, 13))
  puts(get_week_day(2040, 3, 14))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
