# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:01 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def index_of(xs, x)
    i = 0
    while i < xs.length
      if _eq((__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), x)
        return i
      end
      i = _add(i, 1)
    end
    return 0 - 1
  end
  def majority_vote(votes, votes_needed_to_win)
    if votes_needed_to_win < 2
      return []
    end
    candidates = []
    counts = []
    i = 0
    while i < votes.length
      v = (__tmp2 = votes; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      idx = index_of(candidates, v)
      if !_eq(idx, 0 - 1)
        counts[idx] = _add((__tmp3 = counts; __tmp3.is_a?(Hash) ? __tmp3[idx] : _idx(__tmp3, idx)), 1)
      else
        if candidates.length < votes_needed_to_win - 1
          candidates = (candidates + [v])
          counts = (counts + [1])
        else
          j = 0
          while j < counts.length
            counts[j] = (__tmp4 = counts; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)) - 1
            j = _add(j, 1)
          end
          new_candidates = []
          new_counts = []
          j = 0
          while j < candidates.length
            if (__tmp5 = counts; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)) > 0
              new_candidates = (new_candidates + [(__tmp6 = candidates; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j))])
              new_counts = (new_counts + [(__tmp7 = counts; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j))])
            end
            j = _add(j, 1)
          end
          candidates = new_candidates
          counts = new_counts
        end
      end
      i = _add(i, 1)
    end
    final_counts = []
    j = 0
    while j < candidates.length
      final_counts = (final_counts + [0])
      j = _add(j, 1)
    end
    i = 0
    while i < votes.length
      v = (__tmp8 = votes; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      idx = index_of(candidates, v)
      if !_eq(idx, 0 - 1)
        final_counts[idx] = _add((__tmp9 = final_counts; __tmp9.is_a?(Hash) ? __tmp9[idx] : _idx(__tmp9, idx)), 1)
      end
      i = _add(i, 1)
    end
    result = []
    j = 0
    while j < candidates.length
      if (__tmp10 = final_counts; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)) * votes_needed_to_win > votes.length
        result = (result + [(__tmp11 = candidates; __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))])
      end
      j = _add(j, 1)
    end
    return result
  end
  def main()
    votes = [1, 2, 2, 3, 1, 3, 2]
    puts(((x = majority_vote(votes, 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = majority_vote(votes, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = majority_vote(votes, 4)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
