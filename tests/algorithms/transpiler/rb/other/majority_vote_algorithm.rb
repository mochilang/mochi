# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return i
      end
      i = _add(i, 1).clone
    end
    return 0 - 1
  end
  def majority_vote(votes, votes_needed_to_win)
    if votes_needed_to_win < 2
      return []
    end
    candidates = [].clone
    counts = [].clone
    i = 0.clone
    while i < votes.length
      v = votes[i]
      idx = index_of(candidates, v)
      if idx != 0 - 1
        counts[idx] = _add(counts[idx], 1)
      else
        if candidates.length < votes_needed_to_win - 1
          candidates = (candidates << (v)).clone
          counts = (counts << (1)).clone
        else
          j = 0.clone
          while j < counts.length
            counts[j] = counts[j] - 1
            j = _add(j, 1).clone
          end
          new_candidates = [].clone
          new_counts = [].clone
          j = 0.clone
          while j < candidates.length
            if counts[j] > 0
              new_candidates = (new_candidates << (candidates[j])).clone
              new_counts = (new_counts << (counts[j])).clone
            end
            j = _add(j, 1).clone
          end
          candidates = new_candidates.clone
          counts = new_counts.clone
        end
      end
      i = _add(i, 1).clone
    end
    final_counts = [].clone
    j = 0.clone
    while j < candidates.length
      final_counts = (final_counts << (0)).clone
      j = _add(j, 1).clone
    end
    i = 0.clone
    while i < votes.length
      v = votes[i]
      idx = index_of(candidates, v)
      if idx != 0 - 1
        final_counts[idx] = _add(final_counts[idx], 1)
      end
      i = _add(i, 1).clone
    end
    result = [].clone
    j = 0.clone
    while j < candidates.length
      if final_counts[j] * votes_needed_to_win > votes.length
        result = (result << (candidates[j])).clone
      end
      j = _add(j, 1).clone
    end
    return result
  end
  def main()
    votes = [1, 2, 2, 3, 1, 3, 2]
    puts(((x = majority_vote(votes, 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = majority_vote(votes, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = majority_vote(votes, 4)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
