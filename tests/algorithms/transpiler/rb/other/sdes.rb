# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def apply_table(inp, table)
    res = "".clone
    i = 0.clone
    while i < table.length
      idx = table[i] - 1.clone
      if idx < 0
        idx = inp.length - 1.clone
      end
      res = _add(res, inp[idx..._add(idx, 1)]).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def left_shift(data)
    return _add(data[1...data.length], data[0...1])
  end
  def xor(a, b)
    res = "".clone
    i = 0.clone
    while i < a.length && i < b.length
      if a[i..._add(i, 1)] == b[i..._add(i, 1)]
        res = _add(res, "0").clone
      else
        res = _add(res, "1").clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def int_to_binary(n)
    if n == 0
      return "0"
    end
    res = "".clone
    num = n.clone
    while num > 0
      res = _add(_str(num % 2), res).clone
      num = num / 2.clone
    end
    return res
  end
  def pad_left(s, width)
    res = s.clone
    while res.length < width
      res = _add("0", res).clone
    end
    return res
  end
  def bin_to_int(s)
    result = 0.clone
    i = 0.clone
    while i < s.length
      digit = (s[i..._add(i, 1)]).to_i
      result = _add(result * 2, digit).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def apply_sbox(s, data)
    row_bits = _add(data[0...1], data[data.length - 1...data.length])
    col_bits = data[1...3]
    row = bin_to_int(row_bits)
    col = bin_to_int(col_bits)
    val = s[row][col]
    out = int_to_binary(val)
    return out
  end
  def f(expansion, s0, s1, key, message)
    left = message[0...4]
    right = message[4...8]
    temp = apply_table(right, expansion).clone
    temp = xor(temp, key).clone
    left_bin_str = apply_sbox(s0, temp[0...4]).clone
    right_bin_str = apply_sbox(s1, temp[4...8]).clone
    left_bin_str = pad_left(left_bin_str, 2).clone
    right_bin_str = pad_left(right_bin_str, 2).clone
    temp = apply_table(_add(left_bin_str, right_bin_str), $p4_table).clone
    temp = xor(left, temp).clone
    return _add(temp, right)
  end
  $p4_table = [2, 4, 3, 1]
  $key = "1010000010"
  $message = "11010111"
  $p8_table = [6, 3, 7, 4, 8, 5, 10, 9]
  $p10_table = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
  $IP = [2, 6, 3, 1, 4, 8, 5, 7]
  $IP_inv = [4, 1, 3, 5, 7, 2, 8, 6]
  $expansion = [4, 1, 2, 3, 2, 3, 4, 1]
  $s0 = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]]
  $s1 = [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]]
  $temp = apply_table($key, $p10_table).clone
  $left = $temp[0...5].clone
  $right = $temp[5...10].clone
  $left = left_shift($left).clone
  $right = left_shift($right).clone
  $key1 = apply_table(_add($left, $right), $p8_table)
  $left = left_shift($left).clone
  $right = left_shift($right).clone
  $left = left_shift($left).clone
  $right = left_shift($right).clone
  $key2 = apply_table(_add($left, $right), $p8_table)
  $temp = apply_table($message, $IP).clone
  $temp = f($expansion, $s0, $s1, $key1, $temp).clone
  $temp = _add($temp[4...8], $temp[0...4]).clone
  $temp = f($expansion, $s0, $s1, $key2, $temp).clone
  $CT = apply_table($temp, $IP_inv)
  puts(_add("Cipher text is: ", $CT))
  $temp = apply_table($CT, $IP).clone
  $temp = f($expansion, $s0, $s1, $key2, $temp).clone
  $temp = _add($temp[4...8], $temp[0...4]).clone
  $temp = f($expansion, $s0, $s1, $key1, $temp).clone
  $PT = apply_table($temp, $IP_inv)
  puts(_add("Plain text after decypting is: ", $PT))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
