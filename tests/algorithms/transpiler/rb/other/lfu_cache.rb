# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def lfu_new(cap)
    return LFUCache.new(entries: [], capacity: cap, hits: 0, miss: 0, tick: 0)
  end
  def find_entry(entries, key)
    i = 0.clone
    while i < entries.length
      e = entries[i]
      if e.key == key
        return i
      end
      i = _add(i, 1).clone
    end
    return 0 - 1
  end
  def lfu_get(cache, key)
    idx = find_entry(cache.entries, key)
    if idx == 0 - 1
      new_cache = LFUCache.new(entries: cache.entries, capacity: cache.capacity, hits: cache.hits, miss: _add(cache.miss, 1), tick: cache.tick)
      return GetResult.new(cache: new_cache, value: 0, ok: false)
    end
    entries = cache.entries.clone
    e = entries[idx].clone
    e["freq"] = _add(e.freq, 1)
    new_tick = _add(cache.tick, 1)
    e["order"] = new_tick
    entries[idx] = e
    new_cache = LFUCache.new(entries: entries, capacity: cache.capacity, hits: _add(cache.hits, 1), miss: cache.miss, tick: new_tick)
    return GetResult.new(cache: new_cache, value: e.val, ok: true)
  end
  def remove_lfu(entries)
    if entries.length == 0
      return entries
    end
    min_idx = 0.clone
    i = 1.clone
    while i < entries.length
      e = entries[i]
      m = entries[min_idx]
      if e.freq < m.freq || (e.freq == m.freq && e.order < m.order)
        min_idx = i.clone
      end
      i = _add(i, 1).clone
    end
    res = [].clone
    j = 0.clone
    while j < entries.length
      if j != min_idx
        res = (res << (entries[j])).clone
      end
      j = _add(j, 1).clone
    end
    return res
  end
  def lfu_put(cache, key, value)
    entries = cache.entries.clone
    idx = find_entry(entries, key)
    if idx != 0 - 1
      e = entries[idx].clone
      e["val"] = value
      e["freq"] = _add(e.freq, 1)
      new_tick = _add(cache.tick, 1)
      e["order"] = new_tick
      entries[idx] = e
      return LFUCache.new(entries: entries, capacity: cache.capacity, hits: cache.hits, miss: cache.miss, tick: new_tick)
    end
    if entries.length >= cache.capacity
      entries = remove_lfu(entries).clone
    end
    new_tick = _add(cache.tick, 1)
    new_entry = Entry.new(key: key, val: value, freq: 1, order: new_tick)
    entries = (entries << (new_entry)).clone
    return LFUCache.new(entries: entries, capacity: cache.capacity, hits: cache.hits, miss: cache.miss, tick: new_tick)
  end
  def cache_info(cache)
    return _add(_add(_add(_add(_add(_add(_add(_add("CacheInfo(hits=", _str(cache.hits)), ", misses="), _str(cache.miss)), ", capacity="), _str(cache.capacity)), ", current_size="), _str(cache.entries.length)), ")")
  end
  def main()
    cache = lfu_new(2).clone
    cache = lfu_put(cache, 1, 1).clone
    cache = lfu_put(cache, 2, 2).clone
    r = lfu_get(cache, 1).clone
    cache = r.cache.clone
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    cache = lfu_put(cache, 3, 3).clone
    r = lfu_get(cache, 2).clone
    cache = r.cache.clone
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    cache = lfu_put(cache, 4, 4).clone
    r = lfu_get(cache, 1).clone
    cache = r.cache.clone
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    r = lfu_get(cache, 3).clone
    cache = r.cache.clone
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    r = lfu_get(cache, 4).clone
    cache = r.cache.clone
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    puts(cache_info(cache))
  end
  Entry = Struct.new(:key, :val, :freq, :order, keyword_init: true)
  LFUCache = Struct.new(:entries, :capacity, :hits, :miss, :tick, keyword_init: true)
  GetResult = Struct.new(:cache, :value, :ok, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
