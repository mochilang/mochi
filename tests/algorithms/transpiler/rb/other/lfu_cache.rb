# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:01 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def lfu_new(cap)
    return LFUCache.new(entries: [], capacity: cap, hits: 0, miss: 0, tick: 0)
  end
  def find_entry(entries, key)
    i = 0
    while i < entries.length
      e = (__tmp1 = entries; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      if _eq(e.key, key)
        return i
      end
      i = _add(i, 1)
    end
    return 0 - 1
  end
  def lfu_get(cache, key)
    idx = find_entry(cache.entries, key)
    if _eq(idx, 0 - 1)
      new_cache = LFUCache.new(entries: cache.entries, capacity: cache.capacity, hits: cache.hits, miss: _add(cache.miss, 1), tick: cache.tick)
      return GetResult.new(cache: new_cache, value: 0, ok: false)
    end
    entries = cache.entries
    e = (__tmp2 = entries; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx))
    e.freq = _add(e.freq, 1)
    new_tick = _add(cache.tick, 1)
    e.order = new_tick
    entries[idx] = e
    new_cache = LFUCache.new(entries: entries, capacity: cache.capacity, hits: _add(cache.hits, 1), miss: cache.miss, tick: new_tick)
    return GetResult.new(cache: new_cache, value: e.val, ok: true)
  end
  def remove_lfu(entries)
    if _eq(entries.length, 0)
      return entries
    end
    min_idx = 0
    i = 1
    while i < entries.length
      e = (__tmp3 = entries; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      m = (__tmp4 = entries; __tmp4.is_a?(Hash) ? __tmp4[min_idx] : _idx(__tmp4, min_idx))
      if e.freq < m.freq || (_eq(e.freq, m.freq) && e.order < m.order)
        min_idx = i
      end
      i = _add(i, 1)
    end
    res = []
    j = 0
    while j < entries.length
      if !_eq(j, min_idx)
        res = (res + [(__tmp5 = entries; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))])
      end
      j = _add(j, 1)
    end
    return res
  end
  def lfu_put(cache, key, value)
    entries = cache.entries
    idx = find_entry(entries, key)
    if !_eq(idx, 0 - 1)
      e = (__tmp6 = entries; __tmp6.is_a?(Hash) ? __tmp6[idx] : _idx(__tmp6, idx))
      e.val = value
      e.freq = _add(e.freq, 1)
      new_tick = _add(cache.tick, 1)
      e.order = new_tick
      entries[idx] = e
      return LFUCache.new(entries: entries, capacity: cache.capacity, hits: cache.hits, miss: cache.miss, tick: new_tick)
    end
    if entries.length >= cache.capacity
      entries = remove_lfu(entries)
    end
    new_tick = _add(cache.tick, 1)
    new_entry = Entry.new(key: key, val: value, freq: 1, order: new_tick)
    entries = (entries + [new_entry])
    return LFUCache.new(entries: entries, capacity: cache.capacity, hits: cache.hits, miss: cache.miss, tick: new_tick)
  end
  def cache_info(cache)
    return _add(_add(_add(_add(_add(_add(_add(_add("CacheInfo(hits=", _str(cache.hits)), ", misses="), _str(cache.miss)), ", capacity="), _str(cache.capacity)), ", current_size="), _str(cache.entries.length)), ")")
  end
  def main()
    cache = lfu_new(2)
    cache = lfu_put(cache, 1, 1)
    cache = lfu_put(cache, 2, 2)
    r = lfu_get(cache, 1)
    cache = r.cache
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    cache = lfu_put(cache, 3, 3)
    r = lfu_get(cache, 2)
    cache = r.cache
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    cache = lfu_put(cache, 4, 4)
    r = lfu_get(cache, 1)
    cache = r.cache
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    r = lfu_get(cache, 3)
    cache = r.cache
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    r = lfu_get(cache, 4)
    cache = r.cache
    if r.ok
      puts(_str(r.value))
    else
      puts("None")
    end
    puts(cache_info(cache))
  end
  Object.send(:remove_const, :Entry) if Object.const_defined?(:Entry)
  Entry = Struct.new(:key, :val, :freq, :order, keyword_init: true)
  Object.send(:remove_const, :LFUCache) if Object.const_defined?(:LFUCache)
  LFUCache = Struct.new(:entries, :capacity, :hits, :miss, :tick, keyword_init: true)
  Object.send(:remove_const, :GetResult) if Object.const_defined?(:GetResult)
  GetResult = Struct.new(:cache, :value, :ok, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
