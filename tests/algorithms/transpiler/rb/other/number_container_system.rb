# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def remove_at(xs, idx)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if i != idx
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def insert_at(xs, idx, val)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if i == idx
        res = (res << (val)).clone
      end
      res = (res << (xs[i])).clone
      i = _add(i, 1).clone
    end
    if idx == xs.length
      res = (res << (val)).clone
    end
    return res
  end
  def binary_search_delete(array, item)
    low = 0.clone
    high = array.length - 1.clone
    arr = array.clone
    while low <= high
      mid = (_add(low, high)) / 2
      if arr[mid] == item
        arr = remove_at(arr, mid).clone
        return arr
      else
        if arr[mid] < item
          low = _add(mid, 1).clone
        else
          high = mid - 1.clone
        end
      end
    end
    puts("ValueError: Either the item is not in the array or the array was unsorted")
    return arr
  end
  def binary_search_insert(array, index)
    low = 0.clone
    high = array.length - 1.clone
    arr = array.clone
    while low <= high
      mid = (_add(low, high)) / 2
      if arr[mid] == index
        arr = insert_at(arr, _add(mid, 1), index).clone
        return arr
      else
        if arr[mid] < index
          low = _add(mid, 1).clone
        else
          high = mid - 1.clone
        end
      end
    end
    arr = insert_at(arr, low, index).clone
    return arr
  end
  def change(cont, idx, num)
    numbermap = cont.numbermap.clone
    indexmap = cont.indexmap.clone
    if indexmap.key?(idx)
      old = indexmap[idx]
      indexes = numbermap[old]
      if indexes.length == 1
        numbermap[old] = []
      else
        numbermap[old] = binary_search_delete(indexes, idx)
      end
    end
    indexmap[idx] = num
    if numbermap.key?(num)
      numbermap[num] = binary_search_insert(numbermap[num], idx)
    else
      numbermap[num] = [idx]
    end
    return NumberContainer.new(numbermap: numbermap, indexmap: indexmap)
  end
  def find(cont, num)
    numbermap = cont.numbermap
    if numbermap.key?(num)
      arr = numbermap[num]
      if arr.length > 0
        return arr[0]
      end
    end
    return -1
  end
  NumberContainer = Struct.new(:numbermap, :indexmap, keyword_init: true)
  $nm = {}.clone
  $im = {}.clone
  $cont = NumberContainer.new(numbermap: $nm, indexmap: $im).clone
  puts(find($cont, 10))
  $cont = change($cont, 0, 10).clone
  puts(find($cont, 10))
  $cont = change($cont, 0, 20).clone
  puts(find($cont, 10))
  puts(find($cont, 20))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
