# Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      sprintf('%.17g', x)
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def remove_at(xs, idx)
    res = []
    i = 0
    while i < _len(xs)
      if !_eq(i, idx)
        res = _append(res, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def insert_at(xs, idx, val)
    res = []
    i = 0
    while i < _len(xs)
      if _eq(i, idx)
        res = _append(res, val)
      end
      res = _append(res, (__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    if _eq(idx, _len(xs))
      res = _append(res, val)
    end
    return res
  end
  def binary_search_delete(array, item)
    low = 0
    high = _len(array) - 1
    arr = array
    while low <= high
      mid = (_add(low, high)) / 2
      if _eq((__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[mid] : _idx(__tmp3, mid)), item)
        arr = remove_at(arr, mid)
        return arr
      else
        if (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[mid] : _idx(__tmp4, mid)) < item
          low = _add(mid, 1)
        else
          high = mid - 1
        end
      end
    end
    puts("ValueError: Either the item is not in the array or the array was unsorted")
    return arr
  end
  def binary_search_insert(array, index)
    low = 0
    high = _len(array) - 1
    arr = array
    while low <= high
      mid = (_add(low, high)) / 2
      if _eq((__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[mid] : _idx(__tmp5, mid)), index)
        arr = insert_at(arr, _add(mid, 1), index)
        return arr
      else
        if (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[mid] : _idx(__tmp6, mid)) < index
          low = _add(mid, 1)
        else
          high = mid - 1
        end
      end
    end
    arr = insert_at(arr, low, index)
    return arr
  end
  def change(cont, idx, num)
    numbermap = cont.numbermap
    indexmap = cont.indexmap
    if _has(indexmap, idx)
      old = (__tmp7 = indexmap; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx))
      indexes = (__tmp8 = numbermap; __tmp8.is_a?(Hash) ? __tmp8[old] : _idx(__tmp8, old))
      if _eq(_len(indexes), 1)
        numbermap[old] = []
      else
        numbermap[old] = binary_search_delete(indexes, idx)
      end
    end
    indexmap[idx] = num
    if _has(numbermap, num)
      numbermap[num] = binary_search_insert((__tmp9 = numbermap; __tmp9.is_a?(Hash) ? __tmp9[num] : _idx(__tmp9, num)), idx)
    else
      numbermap[num] = [idx]
    end
    return NumberContainer.new(numbermap: numbermap, indexmap: indexmap)
  end
  def find(cont, num)
    numbermap = cont.numbermap
    if _has(numbermap, num)
      arr = (__tmp10 = numbermap; __tmp10.is_a?(Hash) ? __tmp10[num] : _idx(__tmp10, num))
      if _len(arr) > 0
        return (__tmp11 = arr; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0))
      end
    end
    return -1
  end
  Object.send(:remove_const, :NumberContainer) if Object.const_defined?(:NumberContainer)
  Object.const_set(:NumberContainer, Struct.new(:numbermap, :indexmap, keyword_init: true))
  $nm = {}
  $im = {}
  $cont = NumberContainer.new(numbermap: $nm, indexmap: $im)
  puts(find($cont, 10))
  $cont = change($cont, 0, 10)
  puts(find($cont, 10))
  $cont = change($cont, 0, 20)
  puts(find($cont, 10))
  puts(find($cont, 20))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
