# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def processes_resource_summation(alloc)
    resources = alloc[0].length
    sums = []
    i = 0
    while i < resources
      total = 0
      j = 0
      while j < alloc.length
        total = _add(total, alloc[j][i])
        j = _add(j, 1)
      end
      sums = (sums + [total])
      i = _add(i, 1)
    end
    return sums
  end
  def available_resources(claim, alloc_sum)
    avail = []
    i = 0
    while i < claim.length
      avail = (avail + [claim[i] - alloc_sum[i]])
      i = _add(i, 1)
    end
    return avail
  end
  def need(max, alloc)
    needs = []
    i = 0
    while i < max.length
      row = []
      j = 0
      while j < max[0].length
        row = (row + [max[i][j] - alloc[i][j]])
        j = _add(j, 1)
      end
      needs = (needs + [row])
      i = _add(i, 1)
    end
    return needs
  end
  def pretty_print(claim, alloc, max)
    puts("         Allocated Resource Table")
    i = 0
    while i < alloc.length
      row = alloc[i]
      line = _add(_add("P", _str(_add(i, 1))), "       ")
      j = 0
      while j < row.length
        line = _add(line, _str(row[j]))
        if j < row.length - 1
          line = _add(line, "        ")
        end
        j = _add(j, 1)
      end
      puts(line)
      puts("")
      i = _add(i, 1)
    end
    puts("         System Resource Table")
    i = 0
    while i < max.length
      row = max[i]
      line = _add(_add("P", _str(_add(i, 1))), "       ")
      j = 0
      while j < row.length
        line = _add(line, _str(row[j]))
        if j < row.length - 1
          line = _add(line, "        ")
        end
        j = _add(j, 1)
      end
      puts(line)
      puts("")
      i = _add(i, 1)
    end
    usage = ""
    i = 0
    while i < claim.length
      if i > 0
        usage = _add(usage, " ")
      end
      usage = _add(usage, _str(claim[i]))
      i = _add(i, 1)
    end
    alloc_sum = processes_resource_summation(alloc)
    avail = available_resources(claim, alloc_sum)
    avail_str = ""
    i = 0
    while i < avail.length
      if i > 0
        avail_str = _add(avail_str, " ")
      end
      avail_str = _add(avail_str, _str(avail[i]))
      i = _add(i, 1)
    end
    puts(_add("Current Usage by Active Processes: ", usage))
    puts(_add("Initial Available Resources:       ", avail_str))
  end
  def bankers_algorithm(claim, alloc, max)
    need_list = need(max, alloc)
    alloc_sum = processes_resource_summation(alloc)
    avail = available_resources(claim, alloc_sum)
    puts("__________________________________________________")
    puts("")
    finished = []
    i = 0
    while i < need_list.length
      finished = (finished + [false])
      i = _add(i, 1)
    end
    remaining = need_list.length
    while remaining > 0
      safe = false
      p = 0
      while p < need_list.length
        if !finished[p]
          exec = true
          r = 0
          while r < avail.length
            if need_list[p][r] > avail[r]
              exec = false
              break
            end
            r = _add(r, 1)
          end
          if exec
            safe = true
            puts(_add(_add("Process ", _str(_add(p, 1))), " is executing."))
            r = 0
            while r < avail.length
              avail[r] = _add(avail[r], alloc[p][r])
              r = _add(r, 1)
            end
            avail_str = ""
            r = 0
            while r < avail.length
              if r > 0
                avail_str = _add(avail_str, " ")
              end
              avail_str = _add(avail_str, _str(avail[r]))
              r = _add(r, 1)
            end
            puts(_add("Updated available resource stack for processes: ", avail_str))
            puts("The process is in a safe state.")
            puts("")
            finished[p] = true
            remaining = remaining - 1
          end
        end
        p = _add(p, 1)
      end
      if !safe
        puts("System in unsafe state. Aborting...")
        puts("")
        break
      end
    end
  end
  Object.send(:remove_const, :State) if Object.const_defined?(:State)
  State = Struct.new(:claim, :alloc, :max, keyword_init: true)
  $claim_vector = [8, 5, 9, 7]
  $allocated_resources_table = [[2, 0, 1, 1], [0, 1, 2, 1], [4, 0, 0, 3], [0, 2, 1, 0], [1, 0, 3, 0]]
  $maximum_claim_table = [[3, 2, 1, 4], [0, 2, 5, 2], [5, 1, 0, 5], [1, 5, 3, 0], [3, 0, 3, 3]]
  pretty_print($claim_vector, $allocated_resources_table, $maximum_claim_table)
  bankers_algorithm($claim_vector, $allocated_resources_table, $maximum_claim_table)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
