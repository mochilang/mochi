# Generated by Mochi transpiler v0.10.66 on 2025-08-16 09:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def processes_resource_summation(alloc)
    resources = _len((__tmp1 = alloc; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    sums = []
    i = 0
    while i < resources
      total = 0
      j = 0
      while j < _len(alloc)
        total = _add(total, (__tmp2 = (__tmp3 = alloc; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)); __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
        j = _add(j, 1)
      end
      sums = _append(sums, total)
      i = _add(i, 1)
    end
    return sums
  end
  def available_resources(claim, alloc_sum)
    avail = []
    i = 0
    while i < _len(claim)
      avail = _append(avail, (__tmp4 = claim; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)) - (__tmp5 = alloc_sum; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      i = _add(i, 1)
    end
    return avail
  end
  def need(max, alloc)
    needs = []
    i = 0
    while i < _len(max)
      row = []
      j = 0
      while j < _len((__tmp6 = max; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
        row = _append(row, (__tmp7 = (__tmp8 = max; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)) - (__tmp9 = (__tmp10 = alloc; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)))
        j = _add(j, 1)
      end
      needs = _append(needs, row)
      i = _add(i, 1)
    end
    return needs
  end
  def pretty_print(claim, alloc, max)
    puts("         Allocated Resource Table")
    i = 0
    while i < _len(alloc)
      row = (__tmp11 = alloc; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
      line = _add(_add("P", _str(_add(i, 1))), "       ")
      j = 0
      while j < _len(row)
        line = _add(line, _str((__tmp12 = row; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j))))
        if j < _len(row) - 1
          line = _add(line, "        ")
        end
        j = _add(j, 1)
      end
      puts(line)
      puts("")
      i = _add(i, 1)
    end
    puts("         System Resource Table")
    i = 0
    while i < _len(max)
      row = (__tmp13 = max; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      line = _add(_add("P", _str(_add(i, 1))), "       ")
      j = 0
      while j < _len(row)
        line = _add(line, _str((__tmp14 = row; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j))))
        if j < _len(row) - 1
          line = _add(line, "        ")
        end
        j = _add(j, 1)
      end
      puts(line)
      puts("")
      i = _add(i, 1)
    end
    usage = ""
    i = 0
    while i < _len(claim)
      if i > 0
        usage = _add(usage, " ")
      end
      usage = _add(usage, _str((__tmp15 = claim; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))))
      i = _add(i, 1)
    end
    alloc_sum = processes_resource_summation(alloc)
    avail = available_resources(claim, alloc_sum)
    avail_str = ""
    i = 0
    while i < _len(avail)
      if i > 0
        avail_str = _add(avail_str, " ")
      end
      avail_str = _add(avail_str, _str((__tmp16 = avail; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i))))
      i = _add(i, 1)
    end
    puts(_add("Current Usage by Active Processes: ", usage))
    puts(_add("Initial Available Resources:       ", avail_str))
  end
  def bankers_algorithm(claim, alloc, max)
    need_list = need(max, alloc)
    alloc_sum = processes_resource_summation(alloc)
    avail = available_resources(claim, alloc_sum)
    puts("__________________________________________________")
    puts("")
    finished = []
    i = 0
    while i < _len(need_list)
      finished = _append(finished, false)
      i = _add(i, 1)
    end
    remaining = _len(need_list)
    while remaining > 0
      safe = false
      p = 0
      while p < _len(need_list)
        if !(__tmp17 = finished; __tmp17.is_a?(Hash) ? __tmp17[p] : _idx(__tmp17, p))
          exec = true
          r = 0
          while r < _len(avail)
            if (__tmp18 = (__tmp19 = need_list; __tmp19.is_a?(Hash) ? __tmp19[p] : _idx(__tmp19, p)); __tmp18.is_a?(Hash) ? __tmp18[r] : _idx(__tmp18, r)) > (__tmp20 = avail; __tmp20.is_a?(Hash) ? __tmp20[r] : _idx(__tmp20, r))
              exec = false
              break
            end
            r = _add(r, 1)
          end
          if exec
            safe = true
            puts(_add(_add("Process ", _str(_add(p, 1))), " is executing."))
            r = 0
            while r < _len(avail)
              avail[r] = _add((__tmp21 = avail; __tmp21.is_a?(Hash) ? __tmp21[r] : _idx(__tmp21, r)), (__tmp22 = (__tmp23 = alloc; __tmp23.is_a?(Hash) ? __tmp23[p] : _idx(__tmp23, p)); __tmp22.is_a?(Hash) ? __tmp22[r] : _idx(__tmp22, r)))
              r = _add(r, 1)
            end
            avail_str = ""
            r = 0
            while r < _len(avail)
              if r > 0
                avail_str = _add(avail_str, " ")
              end
              avail_str = _add(avail_str, _str((__tmp24 = avail; __tmp24.is_a?(Hash) ? __tmp24[r] : _idx(__tmp24, r))))
              r = _add(r, 1)
            end
            puts(_add("Updated available resource stack for processes: ", avail_str))
            puts("The process is in a safe state.")
            puts("")
            finished[p] = true
            remaining = remaining - 1
          end
        end
        p = _add(p, 1)
      end
      if !safe
        puts("System in unsafe state. Aborting...")
        puts("")
        break
      end
    end
  end
  Object.send(:remove_const, :State) if Object.const_defined?(:State)
  Object.const_set(:State, Struct.new(:claim, :alloc, :max, keyword_init: true))
  $claim_vector = [8, 5, 9, 7]
  $allocated_resources_table = [[2, 0, 1, 1], [0, 1, 2, 1], [4, 0, 0, 3], [0, 2, 1, 0], [1, 0, 3, 0]]
  $maximum_claim_table = [[3, 2, 1, 4], [0, 2, 5, 2], [5, 1, 0, 5], [1, 5, 3, 0], [3, 0, 3, 3]]
  pretty_print($claim_vector, $allocated_resources_table, $maximum_claim_table)
  bankers_algorithm($claim_vector, $allocated_resources_table, $maximum_claim_table)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
