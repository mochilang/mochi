# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def new_list()
    nodes = [].clone
    head = Node.new(key: 0, value: 0, prev: 0 - 1, next_: 1)
    tail = Node.new(key: 0, value: 0, prev: 0, next_: 0 - 1)
    nodes = (nodes << (head)).clone
    nodes = (nodes << (tail)).clone
    return DoubleLinkedList.new(nodes: nodes, head: 0, tail: 1)
  end
  def dll_add(lst, idx)
    nodes = lst.nodes.clone
    tail_idx = lst.tail
    tail_node = nodes[tail_idx].clone
    prev_idx = tail_node.prev
    node = nodes[idx].clone
    node["prev"] = prev_idx
    node["next_"] = tail_idx
    nodes[idx] = node
    prev_node = nodes[prev_idx].clone
    prev_node["next_"] = idx
    nodes[prev_idx] = prev_node
    tail_node["prev"] = idx
    nodes[tail_idx] = tail_node
    lst["nodes"] = nodes
    return lst
  end
  def dll_remove(lst, idx)
    nodes = lst.nodes.clone
    node = nodes[idx].clone
    prev_idx = node.prev
    next_idx = node.next_
    if prev_idx == 0 - 1 || next_idx == 0 - 1
      return lst
    end
    prev_node = nodes[prev_idx].clone
    prev_node["next_"] = next_idx
    nodes[prev_idx] = prev_node
    next_node = nodes[next_idx].clone
    next_node["prev"] = prev_idx
    nodes[next_idx] = next_node
    node["prev"] = 0 - 1
    node["next_"] = 0 - 1
    nodes[idx] = node
    lst["nodes"] = nodes
    return lst
  end
  def new_cache(cap)
    empty_map = {}.clone
    return LRUCache.new(list: new_list(), capacity: cap, num_keys: 0, hits: 0, misses: 0, cache: empty_map)
  end
  def lru_get(c, key)
    cache = c.clone
    key_str = _str(key)
    if cache.cache.key?(key_str)
      idx = cache.cache[key_str]
      if idx != 0 - 1
        cache["hits"] = _add(cache.hits, 1)
        node = cache.list.nodes[idx]
        value = node.value
        cache["list"] = dll_remove(cache.list, idx)
        cache["list"] = dll_add(cache.list, idx)
        return GetResult.new(cache: cache, value: value, ok: true)
      end
    end
    cache["misses"] = _add(cache.misses, 1)
    return GetResult.new(cache: cache, value: 0, ok: false)
  end
  def lru_put(c, key, value)
    cache = c.clone
    key_str = _str(key)
    if !(cache.cache.key?(key_str))
      if cache.num_keys >= cache.capacity
        head_node = cache.list.nodes[cache.list.head]
        first_idx = head_node.next_
        first_node = cache.list.nodes[first_idx]
        old_key = first_node.key
        cache["list"] = dll_remove(cache.list, first_idx)
        mdel = cache.cache.clone
        mdel[_str(old_key)] = 0 - 1
        cache["cache"] = mdel
        cache["num_keys"] = cache.num_keys - 1
      end
      nodes = cache.list.nodes.clone
      new_node = Node.new(key: key, value: value, prev: 0 - 1, next_: 0 - 1)
      nodes = (nodes << (new_node)).clone
      idx = nodes.length - 1
      cache["list"]["nodes"] = nodes
      cache["list"] = dll_add(cache.list, idx)
      m = cache.cache.clone
      m[key_str] = idx
      cache["cache"] = m
      cache["num_keys"] = _add(cache.num_keys, 1)
    else
      m = cache.cache.clone
      idx = m[key_str]
      nodes = cache.list.nodes.clone
      node = nodes[idx].clone
      node["value"] = value
      nodes[idx] = node
      cache["list"]["nodes"] = nodes
      cache["list"] = dll_remove(cache.list, idx)
      cache["list"] = dll_add(cache.list, idx)
      cache["cache"] = m
    end
    return cache
  end
  def cache_info(cache)
    return _add(_add(_add(_add(_add(_add(_add(_add("CacheInfo(hits=", _str(cache.hits)), ", misses="), _str(cache.misses)), ", capacity="), _str(cache.capacity)), ", current size="), _str(cache.num_keys)), ")")
  end
  def print_result(res)
    if res.ok
      puts(_str(res.value))
    else
      puts("None")
    end
  end
  def main()
    cache = new_cache(2).clone
    cache = lru_put(cache, 1, 1).clone
    cache = lru_put(cache, 2, 2).clone
    r1 = lru_get(cache, 1).clone
    cache = r1.cache.clone
    print_result(r1)
    cache = lru_put(cache, 3, 3).clone
    r2 = lru_get(cache, 2).clone
    cache = r2.cache.clone
    print_result(r2)
    cache = lru_put(cache, 4, 4).clone
    r3 = lru_get(cache, 1).clone
    cache = r3.cache.clone
    print_result(r3)
    r4 = lru_get(cache, 3).clone
    cache = r4.cache.clone
    print_result(r4)
    r5 = lru_get(cache, 4).clone
    cache = r5.cache.clone
    print_result(r5)
    puts(cache_info(cache))
  end
  Node = Struct.new(:key, :value, :prev, :next_, keyword_init: true)
  DoubleLinkedList = Struct.new(:nodes, :head, :tail, keyword_init: true)
  LRUCache = Struct.new(:list, :capacity, :num_keys, :hits, :misses, :cache, keyword_init: true)
  GetResult = Struct.new(:cache, :value, :ok, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
