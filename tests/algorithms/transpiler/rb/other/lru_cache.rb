# Generated by Mochi transpiler v0.10.64 on 2025-08-12 14:01 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_list()
    nodes = []
    head = Node.new(key: 0, value: 0, prev: 0 - 1, next_: 1)
    tail = Node.new(key: 0, value: 0, prev: 0, next_: 0 - 1)
    nodes = (nodes + [head])
    nodes = (nodes + [tail])
    return DoubleLinkedList.new(nodes: nodes, head: 0, tail: 1)
  end
  def dll_add(lst, idx)
    nodes = lst.nodes
    tail_idx = lst.tail
    tail_node = (__tmp1 = nodes; __tmp1.is_a?(Hash) ? __tmp1[tail_idx] : _idx(__tmp1, tail_idx))
    prev_idx = tail_node.prev
    node = (__tmp2 = nodes; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx))
    node.prev = prev_idx
    node.next_ = tail_idx
    nodes[idx] = node
    prev_node = (__tmp3 = nodes; __tmp3.is_a?(Hash) ? __tmp3[prev_idx] : _idx(__tmp3, prev_idx))
    prev_node.next_ = idx
    nodes[prev_idx] = prev_node
    tail_node.prev = idx
    nodes[tail_idx] = tail_node
    lst.nodes = nodes
    return lst
  end
  def dll_remove(lst, idx)
    nodes = lst.nodes
    node = (__tmp4 = nodes; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))
    prev_idx = node.prev
    next_idx = node.next_
    if _eq(prev_idx, 0 - 1) || _eq(next_idx, 0 - 1)
      return lst
    end
    prev_node = (__tmp5 = nodes; __tmp5.is_a?(Hash) ? __tmp5[prev_idx] : _idx(__tmp5, prev_idx))
    prev_node.next_ = next_idx
    nodes[prev_idx] = prev_node
    next_node = (__tmp6 = nodes; __tmp6.is_a?(Hash) ? __tmp6[next_idx] : _idx(__tmp6, next_idx))
    next_node.prev = prev_idx
    nodes[next_idx] = next_node
    node.prev = 0 - 1
    node.next_ = 0 - 1
    nodes[idx] = node
    lst.nodes = nodes
    return lst
  end
  def new_cache(cap)
    empty_map = {}
    return LRUCache.new(list: new_list(), capacity: cap, num_keys: 0, hits: 0, misses: 0, cache: empty_map)
  end
  def lru_get(c, key)
    cache = c
    key_str = _str(key)
    if cache.cache.key?(key_str)
      idx = (__tmp7 = cache.cache; __tmp7.is_a?(Hash) ? __tmp7[key_str] : _idx(__tmp7, key_str))
      if !_eq(idx, 0 - 1)
        cache.hits = _add(cache.hits, 1)
        node = (__tmp8 = cache.list.nodes; __tmp8.is_a?(Hash) ? __tmp8[idx] : _idx(__tmp8, idx))
        value = node.value
        cache.list = dll_remove(cache.list, idx)
        cache.list = dll_add(cache.list, idx)
        return GetResult.new(cache: cache, value: value, ok: true)
      end
    end
    cache.misses = _add(cache.misses, 1)
    return GetResult.new(cache: cache, value: 0, ok: false)
  end
  def lru_put(c, key, value)
    cache = c
    key_str = _str(key)
    if !(cache.cache.key?(key_str))
      if cache.num_keys >= cache.capacity
        head_node = (__tmp9 = cache.list.nodes; __tmp9.is_a?(Hash) ? __tmp9[cache.list.head] : _idx(__tmp9, cache.list.head))
        first_idx = head_node.next_
        first_node = (__tmp10 = cache.list.nodes; __tmp10.is_a?(Hash) ? __tmp10[first_idx] : _idx(__tmp10, first_idx))
        old_key = first_node.key
        cache.list = dll_remove(cache.list, first_idx)
        mdel = cache.cache
        mdel[_str(old_key)] = 0 - 1
        cache.cache = mdel
        cache.num_keys = cache.num_keys - 1
      end
      nodes = cache.list.nodes
      new_node = Node.new(key: key, value: value, prev: 0 - 1, next_: 0 - 1)
      nodes = (nodes + [new_node])
      idx = nodes.length - 1
      cache.list.nodes = nodes
      cache.list = dll_add(cache.list, idx)
      m = cache.cache
      m[key_str] = idx
      cache.cache = m
      cache.num_keys = _add(cache.num_keys, 1)
    else
      m = cache.cache
      idx = (__tmp11 = m; __tmp11.is_a?(Hash) ? __tmp11[key_str] : _idx(__tmp11, key_str))
      nodes = cache.list.nodes
      node = (__tmp12 = nodes; __tmp12.is_a?(Hash) ? __tmp12[idx] : _idx(__tmp12, idx))
      node.value = value
      nodes[idx] = node
      cache.list.nodes = nodes
      cache.list = dll_remove(cache.list, idx)
      cache.list = dll_add(cache.list, idx)
      cache.cache = m
    end
    return cache
  end
  def cache_info(cache)
    return _add(_add(_add(_add(_add(_add(_add(_add("CacheInfo(hits=", _str(cache.hits)), ", misses="), _str(cache.misses)), ", capacity="), _str(cache.capacity)), ", current size="), _str(cache.num_keys)), ")")
  end
  def print_result(res)
    if res.ok
      puts(_str(res.value))
    else
      puts("None")
    end
  end
  def main()
    cache = new_cache(2)
    cache = lru_put(cache, 1, 1)
    cache = lru_put(cache, 2, 2)
    r1 = lru_get(cache, 1)
    cache = r1.cache
    print_result(r1)
    cache = lru_put(cache, 3, 3)
    r2 = lru_get(cache, 2)
    cache = r2.cache
    print_result(r2)
    cache = lru_put(cache, 4, 4)
    r3 = lru_get(cache, 1)
    cache = r3.cache
    print_result(r3)
    r4 = lru_get(cache, 3)
    cache = r4.cache
    print_result(r4)
    r5 = lru_get(cache, 4)
    cache = r5.cache
    print_result(r5)
    puts(cache_info(cache))
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Node = Struct.new(:key, :value, :prev, :next_, keyword_init: true)
  Object.send(:remove_const, :DoubleLinkedList) if Object.const_defined?(:DoubleLinkedList)
  DoubleLinkedList = Struct.new(:nodes, :head, :tail, keyword_init: true)
  Object.send(:remove_const, :LRUCache) if Object.const_defined?(:LRUCache)
  LRUCache = Struct.new(:list, :capacity, :num_keys, :hits, :misses, :cache, keyword_init: true)
  Object.send(:remove_const, :GetResult) if Object.const_defined?(:GetResult)
  GetResult = Struct.new(:cache, :value, :ok, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
