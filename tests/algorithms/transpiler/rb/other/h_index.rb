# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def subarray(xs, start, end_)
    result = [].clone
    k = start.clone
    while k < end_
      result = (result << (xs[k])).clone
      k = _add(k, 1).clone
    end
    return result
  end
  def merge(left_half, right_half)
    result = [].clone
    i = 0.clone
    j = 0.clone
    while i < left_half.length && j < right_half.length
      if left_half[i] < right_half[j]
        result = (result << (left_half[i])).clone
        i = _add(i, 1).clone
      else
        result = (result << (right_half[j])).clone
        j = _add(j, 1).clone
      end
    end
    while i < left_half.length
      result = (result << (left_half[i])).clone
      i = _add(i, 1).clone
    end
    while j < right_half.length
      result = (result << (right_half[j])).clone
      j = _add(j, 1).clone
    end
    return result
  end
  def merge_sort(array)
    if array.length <= 1
      return array
    end
    middle = array.length / 2
    left_half = subarray(array, 0, middle)
    right_half = subarray(array, middle, array.length)
    sorted_left = merge_sort(left_half)
    sorted_right = merge_sort(right_half)
    return merge(sorted_left, sorted_right)
  end
  def h_index(citations)
    idx = 0.clone
    while idx < citations.length
      if citations[idx] < 0
        panic("The citations should be a list of non negative integers.")
      end
      idx = _add(idx, 1).clone
    end
    sorted = merge_sort(citations)
    n = sorted.length
    i = 0.clone
    while i < n
      if sorted[n - 1 - i] <= i
        return i
      end
      i = _add(i, 1).clone
    end
    return n
  end
  puts(_str(h_index([3, 0, 6, 1, 5])))
  puts(_str(h_index([1, 3, 1])))
  puts(_str(h_index([1, 2, 3])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
