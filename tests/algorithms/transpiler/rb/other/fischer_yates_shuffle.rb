# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return $seed / 65536
  end
  def randint(a, b)
    r = rand()
    return _add(a, r % (_add(b - a, 1)))
  end
  def fisher_yates_shuffle_int(data)
    res = data.clone
    i = 0.clone
    while i < res.length
      a = randint(0, res.length - 1)
      b = randint(0, res.length - 1)
      temp = res[a]
      res[a] = res[b]
      res[b] = temp
      i = _add(i, 1).clone
    end
    return res
  end
  def fisher_yates_shuffle_str(data)
    res = data.clone
    i = 0.clone
    while i < res.length
      a = randint(0, res.length - 1)
      b = randint(0, res.length - 1)
      temp = res[a]
      res[a] = res[b]
      res[b] = temp
      i = _add(i, 1).clone
    end
    return res
  end
  $seed = 1.clone
  $integers = [0, 1, 2, 3, 4, 5, 6, 7]
  $strings = ["python", "says", "hello", "!"]
  puts("Fisher-Yates Shuffle:")
  puts(_add(_add(_add("List ", ((x = $integers); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " "), ((x = $strings); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
  puts(_add(_add(_add("FY Shuffle ", ((x = fisher_yates_shuffle_int($integers)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " "), ((x = fisher_yates_shuffle_str($strings)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
