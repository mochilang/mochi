# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_data(source_data)
    data_lists = [].clone
    i = 0.clone
    while i < source_data.length
      row = source_data[i]
      j = 0.clone
      while j < row.length
        if data_lists.length < _add(j, 1)
          empty = [].clone
          data_lists = (data_lists << (empty)).clone
        end
        data_lists[j] = (data_lists[j] << (row[j]))
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return data_lists
  end
  def calculate_each_score(data_lists, weights)
    score_lists = [].clone
    i = 0.clone
    while i < data_lists.length
      dlist = data_lists[i]
      weight = weights[i]
      mind = dlist[0].clone
      maxd = dlist[0].clone
      j = 1.clone
      while j < dlist.length
        val = dlist[j]
        if val < mind
          mind = val.clone
        end
        if val > maxd
          maxd = val.clone
        end
        j = _add(j, 1).clone
      end
      score = [].clone
      j = 0.clone
      if weight == 0
        while j < dlist.length
          item = dlist[j]
          if maxd - mind == 0.0
            score = (score << (1.0)).clone
          else
            score = (score << (1.0 - ((item - mind) / (maxd - mind)))).clone
          end
          j = _add(j, 1).clone
        end
      else
        while j < dlist.length
          item = dlist[j]
          if maxd - mind == 0.0
            score = (score << (0.0)).clone
          else
            score = (score << ((item - mind) / (maxd - mind))).clone
          end
          j = _add(j, 1).clone
        end
      end
      score_lists = (score_lists << (score)).clone
      i = _add(i, 1).clone
    end
    return score_lists
  end
  def generate_final_scores(score_lists)
    count = score_lists[0].length
    final_scores = [].clone
    i = 0.clone
    while i < count
      final_scores = (final_scores << (0.0)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < score_lists.length
      slist = score_lists[i]
      j = 0.clone
      while j < slist.length
        final_scores[j] = _add(final_scores[j], slist[j])
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return final_scores
  end
  def procentual_proximity(source_data, weights)
    data_lists = get_data(source_data)
    score_lists = calculate_each_score(data_lists, weights)
    final_scores = generate_final_scores(score_lists)
    i = 0.clone
    while i < final_scores.length
      source_data[i] = (source_data[i] << (final_scores[i]))
      i = _add(i, 1).clone
    end
    return source_data
  end
  $vehicles = [].clone
  $vehicles = ($vehicles << ([20.0, 60.0, 2012.0])).clone
  $vehicles = ($vehicles << ([23.0, 90.0, 2015.0])).clone
  $vehicles = ($vehicles << ([22.0, 50.0, 2011.0])).clone
  $weights = [0, 0, 1].clone
  $result = procentual_proximity($vehicles, $weights)
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
