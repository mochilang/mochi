# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_data(source_data)
    data_lists = []
    i = 0
    while i < _len(source_data)
      row = (__tmp1 = source_data; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      j = 0
      while j < _len(row)
        if _len(data_lists) < _add(j, 1)
          empty = []
          data_lists = (data_lists + [empty])
        end
        data_lists[j] = ((__tmp2 = data_lists; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)) + [(__tmp3 = row; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return data_lists
  end
  def calculate_each_score(data_lists, weights)
    score_lists = []
    i = 0
    while i < _len(data_lists)
      dlist = (__tmp4 = data_lists; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      weight = (__tmp5 = weights; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      mind = (__tmp6 = dlist; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0))
      maxd = (__tmp7 = dlist; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
      j = 1
      while j < _len(dlist)
        val = (__tmp8 = dlist; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j))
        if val < mind
          mind = val
        end
        if val > maxd
          maxd = val
        end
        j = _add(j, 1)
      end
      score = []
      j = 0
      if _eq(weight, 0)
        while j < _len(dlist)
          item = (__tmp9 = dlist; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
          if _eq(maxd - mind, 0.0)
            score = (score + [1.0])
          else
            score = (score + [1.0 - ((item - mind) / (maxd - mind))])
          end
          j = _add(j, 1)
        end
      else
        while j < _len(dlist)
          item = (__tmp10 = dlist; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j))
          if _eq(maxd - mind, 0.0)
            score = (score + [0.0])
          else
            score = (score + [(item - mind) / (maxd - mind)])
          end
          j = _add(j, 1)
        end
      end
      score_lists = (score_lists + [score])
      i = _add(i, 1)
    end
    return score_lists
  end
  def generate_final_scores(score_lists)
    count = _len((__tmp11 = score_lists; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)))
    final_scores = []
    i = 0
    while i < count
      final_scores = (final_scores + [0.0])
      i = _add(i, 1)
    end
    i = 0
    while i < _len(score_lists)
      slist = (__tmp12 = score_lists; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
      j = 0
      while j < _len(slist)
        final_scores[j] = _add((__tmp13 = final_scores; __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)), (__tmp14 = slist; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j)))
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return final_scores
  end
  def procentual_proximity(source_data, weights)
    data_lists = get_data(source_data)
    score_lists = calculate_each_score(data_lists, weights)
    final_scores = generate_final_scores(score_lists)
    i = 0
    while i < _len(final_scores)
      source_data[i] = ((__tmp15 = source_data; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)) + [(__tmp16 = final_scores; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i))])
      i = _add(i, 1)
    end
    return source_data
  end
  $vehicles = []
  $vehicles = ($vehicles + [[20.0, 60.0, 2012.0]])
  $vehicles = ($vehicles + [[23.0, 90.0, 2015.0]])
  $vehicles = ($vehicles + [[22.0, 50.0, 2011.0]])
  $weights = [0, 0, 1]
  $result = procentual_proximity($vehicles, $weights)
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
