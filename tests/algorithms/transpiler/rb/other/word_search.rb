# Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      sprintf('%.17g', x)
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def rand_range(max)
    return rand() % max
  end
  def shuffle(list_int)
    i = _len(list_int) - 1
    while i > 0
      j = rand_range(_add(i, 1))
      tmp = (__tmp1 = list_int; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      list_int[i] = (__tmp2 = list_int; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
      list_int[j] = tmp
      i = i - 1
    end
    return list_int
  end
  def rand_letter()
    letters = "abcdefghijklmnopqrstuvwxyz"
    i = rand_range(26)
    return letters[i..._add(i, 1)]
  end
  def make_word_search(words, width, height)
    board = []
    r = 0
    while r < height
      row = []
      c = 0
      while c < width
        row = _append(row, "")
        c = _add(c, 1)
      end
      board = _append(board, row)
      r = _add(r, 1)
    end
    return WordSearch.new(words: words, width: width, height: height, board: board)
  end
  def insert_dir(ws, word, dr, dc, rows, cols)
    word_len = _len(word)
    ri = 0
    while ri < _len(rows)
      row = (__tmp3 = rows; __tmp3.is_a?(Hash) ? __tmp3[ri] : _idx(__tmp3, ri))
      ci = 0
      while ci < _len(cols)
        col = (__tmp4 = cols; __tmp4.is_a?(Hash) ? __tmp4[ci] : _idx(__tmp4, ci))
        end_r = _add(row, dr * (word_len - 1))
        end_c = _add(col, dc * (word_len - 1))
        if end_r < 0 || end_r >= ws.height || end_c < 0 || end_c >= ws.width
          ci = _add(ci, 1)
          next
        end
        k = 0
        ok = true
        while k < word_len
          rr = _add(row, dr * k)
          cc = _add(col, dc * k)
          if !_eq((__tmp5 = (__tmp6 = ws.board; __tmp6.is_a?(Hash) ? __tmp6[rr] : _idx(__tmp6, rr)); __tmp5.is_a?(Hash) ? __tmp5[cc] : _idx(__tmp5, cc)), "")
            ok = false
            break
          end
          k = _add(k, 1)
        end
        if ok
          k = 0
          while k < word_len
            rr2 = _add(row, dr * k)
            cc2 = _add(col, dc * k)
            row_list = (__tmp7 = ws.board; __tmp7.is_a?(Hash) ? __tmp7[rr2] : _idx(__tmp7, rr2))
            row_list[cc2] = word[k..._add(k, 1)]
            k = _add(k, 1)
          end
          return true
        end
        ci = _add(ci, 1)
      end
      ri = _add(ri, 1)
    end
    return false
  end
  def generate_board(ws)
    dirs_r = [-1, -1, 0, 1, 1, 1, 0, -1]
    dirs_c = [0, 1, 1, 1, 0, -1, -1, -1]
    i = 0
    while i < _len(ws.words)
      word = (__tmp8 = ws.words; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      rows = []
      r = 0
      while r < ws.height
        rows = _append(rows, r)
        r = _add(r, 1)
      end
      cols = []
      c = 0
      while c < ws.width
        cols = _append(cols, c)
        c = _add(c, 1)
      end
      rows = shuffle(rows)
      cols = shuffle(cols)
      d = rand_range(8)
      insert_dir(ws, word, (__tmp9 = dirs_r; __tmp9.is_a?(Hash) ? __tmp9[d] : _idx(__tmp9, d)), (__tmp10 = dirs_c; __tmp10.is_a?(Hash) ? __tmp10[d] : _idx(__tmp10, d)), rows, cols)
      i = _add(i, 1)
    end
  end
  def visualise(ws, add_fake_chars)
    result = ""
    r = 0
    while r < ws.height
      c = 0
      while c < ws.width
        ch = (__tmp11 = (__tmp12 = ws.board; __tmp12.is_a?(Hash) ? __tmp12[r] : _idx(__tmp12, r)); __tmp11.is_a?(Hash) ? __tmp11[c] : _idx(__tmp11, c))
        if _eq(ch, "")
          if add_fake_chars
            ch = rand_letter()
          else
            ch = "#"
          end
        end
        result = _add(_add(result, ch), " ")
        c = _add(c, 1)
      end
      result = _add(result, "\n")
      r = _add(r, 1)
    end
    return result
  end
  def main()
    words = ["cat", "dog", "snake", "fish"]
    ws = make_word_search(words, 10, 10)
    generate_board(ws)
    puts(visualise(ws, true))
  end
  Object.send(:remove_const, :WordSearch) if Object.const_defined?(:WordSearch)
  Object.const_set(:WordSearch, Struct.new(:words, :width, :height, :board, keyword_init: true))
  $seed = 123456789
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
