# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return $seed
  end
  def rand_range(max)
    return rand() % max
  end
  def shuffle(list_int)
    i = list_int.length - 1.clone
    while i > 0
      j = rand_range(_add(i, 1))
      tmp = list_int[i]
      list_int[i] = list_int[j]
      list_int[j] = tmp
      i = i - 1.clone
    end
    return list_int
  end
  def rand_letter()
    letters = "abcdefghijklmnopqrstuvwxyz"
    i = rand_range(26)
    return letters[i..._add(i, 1)]
  end
  def make_word_search(words, width, height)
    board = [].clone
    r = 0.clone
    while r < height
      row = [].clone
      c = 0.clone
      while c < width
        row = (row << ("")).clone
        c = _add(c, 1).clone
      end
      board = (board << (row)).clone
      r = _add(r, 1).clone
    end
    return WordSearch.new(words: words, width: width, height: height, board: board)
  end
  def insert_dir(ws, word, dr, dc, rows, cols)
    word_len = word.length
    ri = 0.clone
    while ri < rows.length
      row = rows[ri]
      ci = 0.clone
      while ci < cols.length
        col = cols[ci]
        end_r = _add(row, dr * (word_len - 1))
        end_c = _add(col, dc * (word_len - 1))
        if end_r < 0 || end_r >= ws.height || end_c < 0 || end_c >= ws.width
          ci = _add(ci, 1).clone
          next
        end
        k = 0.clone
        ok = true.clone
        while k < word_len
          rr = _add(row, dr * k)
          cc = _add(col, dc * k)
          if ws.board[rr][cc] != ""
            ok = false.clone
            break
          end
          k = _add(k, 1).clone
        end
        if ok
          k = 0.clone
          while k < word_len
            rr2 = _add(row, dr * k)
            cc2 = _add(col, dc * k)
            row_list = ws.board[rr2].clone
            row_list[cc2] = word[k..._add(k, 1)]
            k = _add(k, 1).clone
          end
          return true
        end
        ci = _add(ci, 1).clone
      end
      ri = _add(ri, 1).clone
    end
    return false
  end
  def generate_board(ws)
    dirs_r = [-1, -1, 0, 1, 1, 1, 0, -1]
    dirs_c = [0, 1, 1, 1, 0, -1, -1, -1]
    i = 0.clone
    while i < ws.words.length
      word = ws.words[i]
      rows = [].clone
      r = 0.clone
      while r < ws.height
        rows = (rows << (r)).clone
        r = _add(r, 1).clone
      end
      cols = [].clone
      c = 0.clone
      while c < ws.width
        cols = (cols << (c)).clone
        c = _add(c, 1).clone
      end
      rows = shuffle(rows).clone
      cols = shuffle(cols).clone
      d = rand_range(8)
      insert_dir(ws, word, dirs_r[d], dirs_c[d], rows, cols)
      i = _add(i, 1).clone
    end
  end
  def visualise(ws, add_fake_chars)
    result = "".clone
    r = 0.clone
    while r < ws.height
      c = 0.clone
      while c < ws.width
        ch = ws.board[r][c].clone
        if ch == ""
          if add_fake_chars
            ch = rand_letter().clone
          else
            ch = "#".clone
          end
        end
        result = _add(_add(result, ch), " ").clone
        c = _add(c, 1).clone
      end
      result = _add(result, "\n").clone
      r = _add(r, 1).clone
    end
    return result
  end
  def main()
    words = ["cat", "dog", "snake", "fish"]
    ws = make_word_search(words, 10, 10).clone
    generate_board(ws)
    puts(visualise(ws, true))
  end
  WordSearch = Struct.new(:words, :width, :height, :board, keyword_init: true)
  $seed = 123456789.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
