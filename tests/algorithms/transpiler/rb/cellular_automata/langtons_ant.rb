# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_board(width, height)
    board = []
    i = 0
    while i < height
      row = []
      j = 0
      while j < width
        row = (row + [true])
        j = _add(j, 1)
      end
      board = (board + [row])
      i = _add(i, 1)
    end
    return board
  end
  def move_ant(board, x, y, direction)
    if board[x][y]
      direction = (_add(direction, 1)) % 4
    else
      direction = (_add(direction, 3)) % 4
    end
    old_x = x
    old_y = y
    if direction == 0
      x = x - 1
    else
      if direction == 1
        y = _add(y, 1)
      else
        if direction == 2
          x = _add(x, 1)
        else
          y = y - 1
        end
      end
    end
    board[old_x][old_y] = !board[old_x][old_y]
    return [x, y, direction]
  end
  def langtons_ant(width, height, steps)
    board = create_board(width, height)
    x = width / 2
    y = height / 2
    dir = 3
    s = 0
    while s < steps
      state = move_ant(board, x, y, dir)
      x = state[0]
      y = state[1]
      dir = state[2]
      s = _add(s, 1)
    end
    return board
  end
  # test first move
  $board = langtons_ant(2, 2, 1)
  raise 'assertion failed' unless $board == [[true, true], [true, false]]
  # test second move
  $board = langtons_ant(2, 2, 2)
  raise 'assertion failed' unless $board == [[true, false], [true, false]]
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
