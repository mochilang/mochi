# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def randint(a, b)
    r = rand()
    return _add(a, r % (_add(b - a, 1)))
  end
  def random()
    return (1.0 * rand()) / 2147483648.0
  end
  def construct_highway(number_of_cells, frequency, initial_speed, random_frequency, random_speed, max_speed)
    row = []
    i = 0
    while i < number_of_cells
      row = (row + [-1])
      i = _add(i, 1)
    end
    highway = []
    highway = (highway + [row])
    i = 0
    if initial_speed < 0
      initial_speed = 0
    end
    while i < number_of_cells
      speed = initial_speed
      if random_speed
        speed = randint(0, max_speed)
      end
      highway[0][i] = speed
      step = frequency
      if random_frequency
        step = randint(1, max_speed * 2)
      end
      i = _add(i, step)
    end
    return highway
  end
  def get_distance(highway_now, car_index)
    distance = 0
    i = _add(car_index, 1)
    while i < highway_now.length
      if highway_now[i] > $NEG_ONE
        return distance
      end
      distance = _add(distance, 1)
      i = _add(i, 1)
    end
    return _add(distance, get_distance(highway_now, -1))
  end
  def update(highway_now, probability, max_speed)
    number_of_cells = highway_now.length
    next_highway = []
    i = 0
    while i < number_of_cells
      next_highway = (next_highway + [-1])
      i = _add(i, 1)
    end
    car_index = 0
    while car_index < number_of_cells
      speed = highway_now[car_index]
      if speed > $NEG_ONE
        new_speed = _add(speed, 1)
        if new_speed > max_speed
          new_speed = max_speed
        end
        dn = get_distance(highway_now, car_index) - 1
        if new_speed > dn
          new_speed = dn
        end
        if random() < probability
          new_speed = new_speed - 1
          if new_speed < 0
            new_speed = 0
          end
        end
        next_highway[car_index] = new_speed
      end
      car_index = _add(car_index, 1)
    end
    return next_highway
  end
  def simulate(highway, number_of_update, probability, max_speed)
    number_of_cells = highway[0].length
    i = 0
    while i < number_of_update
      next_speeds = update(highway[i], probability, max_speed)
      real_next = []
      j = 0
      while j < number_of_cells
        real_next = (real_next + [-1])
        j = _add(j, 1)
      end
      k = 0
      while k < number_of_cells
        speed = next_speeds[k]
        if speed > $NEG_ONE
          index = (_add(k, speed)) % number_of_cells
          real_next[index] = speed
        end
        k = _add(k, 1)
      end
      highway = (highway + [real_next])
      i = _add(i, 1)
    end
    return highway
  end
  def main()
    ex1 = simulate(construct_highway(6, 3, 0, false, false, 2), 2, 0.0, 2)
    puts(((x = ex1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    ex2 = simulate(construct_highway(5, 2, -2, false, false, 2), 3, 0.0, 2)
    puts(((x = ex2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  $seed = 1
  $NEG_ONE = -1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
