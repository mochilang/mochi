# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def format_ruleset(ruleset)
    rs = ruleset
    bits_rev = []
    i = 0
    while i < 8
      bits_rev = (bits_rev + [rs % 2])
      rs = rs / 2
      i = _add(i, 1)
    end
    bits = []
    j = bits_rev.length - 1
    while j >= 0
      bits = (bits + [bits_rev[j]])
      j = j - 1
    end
    return bits
  end
  def new_generation(cells, rules, time)
    population = cells[0].length
    next_generation = []
    i = 0
    while i < population
      left_neighbor = (i == 0 ? 0 : cells[time][i - 1])
      right_neighbor = (i == population - 1 ? 0 : cells[time][_add(i, 1)])
      center = cells[time][i]
      idx = 7 - (_add(_add(left_neighbor * 4, center * 2), right_neighbor))
      next_generation = (next_generation + [rules[idx]])
      i = _add(i, 1)
    end
    return next_generation
  end
  def cells_to_string(row)
    result = ""
    i = 0
    while i < row.length
      if row[i] == 1
        result = _add(result, "#")
      else
        result = _add(result, ".")
      end
      i = _add(i, 1)
    end
    return result
  end
  $initial = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  $cells = [$initial]
  $rules = format_ruleset(30)
  $time = 0
  while $time < 16
    next_ = new_generation($cells, $rules, $time)
    $cells = ($cells + [next_])
    $time = _add($time, 1)
  end
  $t = 0
  while $t < $cells.length
    puts(cells_to_string($cells[$t]))
    $t = _add($t, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
