# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_generation(cells)
    rows = cells.length
    cols = cells[0].length
    next_ = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        count = 0
        if i > 0 && j > 0
          count = _add(count, cells[i - 1][j - 1])
        end
        if i > 0
          count = _add(count, cells[i - 1][j])
        end
        if i > 0 && j < cols - 1
          count = _add(count, cells[i - 1][_add(j, 1)])
        end
        if j > 0
          count = _add(count, cells[i][j - 1])
        end
        if j < cols - 1
          count = _add(count, cells[i][_add(j, 1)])
        end
        if i < rows - 1 && j > 0
          count = _add(count, cells[_add(i, 1)][j - 1])
        end
        if i < rows - 1
          count = _add(count, cells[_add(i, 1)][j])
        end
        if i < rows - 1 && j < cols - 1
          count = _add(count, cells[_add(i, 1)][_add(j, 1)])
        end
        alive = cells[i][j] == 1
        if (alive && count >= 2 && count <= 3) || (!alive && count == 3)
          row = (row + [1])
        else
          row = (row + [0])
        end
        j = _add(j, 1)
      end
      next_ = (next_ + [row])
      i = _add(i, 1)
    end
    return next_
  end
  def generate_generations(cells, frames)
    result = []
    i = 0
    current = cells
    while i < frames
      result = (result + [current])
      current = new_generation(current)
      i = _add(i, 1)
    end
    return result
  end
  def main()
    frames = generate_generations($GLIDER, 4)
    i = 0
    while i < frames.length
      puts(((x = frames[i]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      i = _add(i, 1)
    end
  end
  $GLIDER = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
  $BLINKER = [[0, 1, 0], [0, 1, 0], [0, 1, 0]]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
