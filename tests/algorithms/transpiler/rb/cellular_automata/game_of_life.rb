# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def count_alive_neighbours(board, row, col)
    size = board.length
    alive = 0
    dr = -1
    while dr < 2
      dc = -1
      while dc < 2
        nr = _add(row, dr)
        nc = _add(col, dc)
        if !(dr == 0 && dc == 0) && nr >= 0 && nr < size && nc >= 0 && nc < size
          if board[nr][nc]
            alive = _add(alive, 1)
          end
        end
        dc = _add(dc, 1)
      end
      dr = _add(dr, 1)
    end
    return alive
  end
  def next_state(current, alive)
    state = current
    if current
      if alive < 2
        state = false
      else
        if alive == 2 || alive == 3
          state = true
        else
          state = false
        end
      end
    else
      if alive == 3
        state = true
      end
    end
    return state
  end
  def step(board)
    size = board.length
    new_board = []
    r = 0
    while r < size
      new_row = []
      c = 0
      while c < size
        alive = count_alive_neighbours(board, r, c)
        cell = board[r][c]
        updated = next_state(cell, alive)
        new_row = (new_row + [updated])
        c = _add(c, 1)
      end
      new_board = (new_board + [new_row])
      r = _add(r, 1)
    end
    return new_board
  end
  def show(board)
    r = 0
    while r < board.length
      line = ""
      c = 0
      while c < board[r].length
        if board[r][c]
          line = _add(line, "#")
        else
          line = _add(line, ".")
        end
        c = _add(c, 1)
      end
      puts(line)
      r = _add(r, 1)
    end
  end
  $glider = [[false, true, false, false, false], [false, false, true, false, false], [true, true, true, false, false], [false, false, false, false, false], [false, false, false, false, false]]
  $board = $glider
  puts("Initial")
  show($board)
  $i = 0
  while $i < 4
    $board = step($board)
    puts(_add("\nStep ", (_add($i, 1)).to_s))
    show($board)
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
