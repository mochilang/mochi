# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return $seed
  end
  def randint(low, high)
    return _add((rand() % (_add(high - low, 1))), low)
  end
  def expApprox(x)
    y = x.clone
    is_neg = false.clone
    if x < 0.0
      is_neg = true.clone
      y = -x.clone
    end
    term = 1.0.clone
    sum = 1.0.clone
    n = 1.clone
    while n < 30
      term = term * y / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    if is_neg
      return 1.0 / sum
    end
    return sum
  end
  def sigmoid(x)
    return 1.0 / (_add(1.0, expApprox(-x)))
  end
  def sigmoid_derivative(sig_val)
    return sig_val * (1.0 - sig_val)
  end
  def forward_propagation(expected, number_propagations)
    weight = 2.0 * ((randint(1, 100)).to_f) - 1.0.clone
    layer_1 = 0.0.clone
    i = 0.clone
    while i < number_propagations
      layer_1 = sigmoid($INITIAL_VALUE * weight).clone
      layer_1_error = ((expected).to_f / 100.0) - layer_1
      layer_1_delta = layer_1_error * sigmoid_derivative(layer_1)
      weight = _add(weight, $INITIAL_VALUE * layer_1_delta).clone
      i = _add(i, 1).clone
    end
    return layer_1 * 100.0
  end
  $seed = 1.clone
  $INITIAL_VALUE = 0.02
  $seed = 1.clone
  $result = forward_propagation(32, 450000)
  puts($result)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
