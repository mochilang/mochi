# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def ln(x)
    if x <= 0.0
      panic("ln domain error")
    end
    y = (x - 1.0) / (_add(x, 1.0))
    y2 = y * y
    term = y.clone
    sum = 0.0.clone
    k = 0.clone
    while k < 10
      denom = ((_add(2 * k, 1))).to_f
      sum = _add(sum, term / denom).clone
      term = term * y2.clone
      k = _add(k, 1).clone
    end
    return 2.0 * sum
  end
  def exp(x)
    term = 1.0.clone
    sum = 1.0.clone
    n = 1.clone
    while n < 20
      term = term * x / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def softplus(vector)
    result = [].clone
    i = 0.clone
    while i < vector.length
      x = vector[i]
      value = ln(_add(1.0, exp(x)))
      result = (result << (value)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def main()
    v1 = [2.3, 0.6, -2.0, -3.8]
    v2 = [-9.2, -0.3, 0.45, -4.56]
    r1 = softplus(v1)
    r2 = softplus(v2)
    puts(((x = r1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = r2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
