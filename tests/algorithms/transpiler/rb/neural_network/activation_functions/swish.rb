# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exp_approx(x)
    sum = 1.0.clone
    term = 1.0.clone
    i = 1.clone
    while i <= 20
      term = term * x / ((i).to_f).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def sigmoid(vector)
    result = [].clone
    i = 0.clone
    while i < vector.length
      v = vector[i]
      s = 1.0 / (_add(1.0, exp_approx(-v)))
      result = (result << (s)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def swish(vector, beta)
    result = [].clone
    i = 0.clone
    while i < vector.length
      v = vector[i]
      s = 1.0 / (_add(1.0, exp_approx(-beta * v)))
      result = (result << (v * s)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def sigmoid_linear_unit(vector)
    return swish(vector, 1.0)
  end
  def approx_equal(a, b, eps)
    diff = (a > b ? a - b : b - a)
    return diff < eps
  end
  def approx_equal_list(a, b, eps)
    if a.length != b.length
      return false
    end
    i = 0.clone
    while i < a.length
      if !approx_equal(a[i], b[i], eps)
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def test_swish()
    v = [-1.0, 1.0, 2.0]
    eps = 0.001
    if !approx_equal_list(sigmoid(v), [0.26894142, 0.73105858, 0.88079708], eps)
      panic("sigmoid incorrect")
    end
    if !approx_equal_list(sigmoid_linear_unit(v), [-0.26894142, 0.73105858, 1.76159416], eps)
      panic("sigmoid_linear_unit incorrect")
    end
    if !approx_equal_list(swish(v, 2.0), [-0.11920292, 0.88079708, 1.96402758], eps)
      panic("swish incorrect")
    end
    if !approx_equal_list(swish([-2.0], 1.0), [-0.23840584], eps)
      panic("swish with parameter 1 incorrect")
    end
  end
  def main()
    test_swish()
    puts(((x = sigmoid([-1.0, 1.0, 2.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = sigmoid_linear_unit([-1.0, 1.0, 2.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = swish([-1.0, 1.0, 2.0], 2.0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = swish([-2.0], 1.0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
