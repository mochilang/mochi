# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exp(x)
    term = 1.0.clone
    sum = 1.0.clone
    n = 1.clone
    while n < 20
      term = term * x / (n).to_f.clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def soboleva_modified_hyperbolic_tangent(vector, a_value, b_value, c_value, d_value)
    result = [].clone
    i = 0.clone
    while i < vector.length
      x = vector[i]
      numerator = exp(a_value * x) - exp(-b_value * x)
      denominator = _add(exp(c_value * x), exp(-d_value * x))
      result = (result << (numerator / denominator)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def main()
    vector = [5.4, -2.4, 6.3, -5.23, 3.27, 0.56]
    res = soboleva_modified_hyperbolic_tangent(vector, 0.2, 0.4, 0.6, 0.8)
    puts(JSON.pretty_generate(res))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
