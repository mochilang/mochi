# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exp_approx(x)
    sum = 1.0.clone
    term = 1.0.clone
    i = 1.clone
    absx = (x < 0.0 ? -x : x)
    while i <= 20
      term = term * absx / ((i).to_f).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    if x < 0.0
      return 1.0 / sum
    end
    return sum
  end
  def exponential_linear_unit(vector, alpha)
    result = [].clone
    i = 0.clone
    while i < vector.length
      v = vector[i]
      if v > 0.0
        result = (result << (v)).clone
      else
        neg = alpha * (exp_approx(v) - 1.0)
        result = (result << (neg)).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  puts(((x = exponential_linear_unit([2.3, 0.6, -2.0, -3.8], 0.3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = exponential_linear_unit([-9.2, -0.3, 0.45, -4.56], 0.067)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
