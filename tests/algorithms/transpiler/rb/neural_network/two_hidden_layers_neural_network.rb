# Generated by Mochi transpiler v0.10.66 on 2025-08-16 09:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def exp_approx(x)
    sum = 1.0
    term = 1.0
    i = 1
    while i < 10
      term = term * x / (i).to_f
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def sigmoid(x)
    return 1.0 / (_add(1.0, exp_approx(-x)))
  end
  def sigmoid_derivative(x)
    return x * (1.0 - x)
  end
  def new_network()
    return Network.new(w1: [[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2]], w2: [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]], w3: [[0.1], [0.2], [0.3]])
  end
  def feedforward(net, input)
    hidden1 = []
    j = 0
    while j < 4
      sum1 = 0.0
      i = 0
      while i < 3
        sum1 = _add(sum1, (__tmp1 = input; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = (__tmp3 = net.w1; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)); __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
        i = _add(i, 1)
      end
      hidden1 = _append(hidden1, sigmoid(sum1))
      j = _add(j, 1)
    end
    hidden2 = []
    k = 0
    while k < 3
      sum2 = 0.0
      j2 = 0
      while j2 < 4
        sum2 = _add(sum2, (__tmp4 = hidden1; __tmp4.is_a?(Hash) ? __tmp4[j2] : _idx(__tmp4, j2)) * (__tmp5 = (__tmp6 = net.w2; __tmp6.is_a?(Hash) ? __tmp6[j2] : _idx(__tmp6, j2)); __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k)))
        j2 = _add(j2, 1)
      end
      hidden2 = _append(hidden2, sigmoid(sum2))
      k = _add(k, 1)
    end
    sum3 = 0.0
    k2 = 0
    while k2 < 3
      sum3 = _add(sum3, (__tmp7 = hidden2; __tmp7.is_a?(Hash) ? __tmp7[k2] : _idx(__tmp7, k2)) * (__tmp8 = (__tmp9 = net.w3; __tmp9.is_a?(Hash) ? __tmp9[k2] : _idx(__tmp9, k2)); __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)))
      k2 = _add(k2, 1)
    end
    out = sigmoid(sum3)
    return out
  end
  def train(net, inputs, outputs, iterations)
    iter = 0
    while iter < iterations
      s = 0
      while s < _len(inputs)
        inp = (__tmp10 = inputs; __tmp10.is_a?(Hash) ? __tmp10[s] : _idx(__tmp10, s))
        target = (__tmp11 = outputs; __tmp11.is_a?(Hash) ? __tmp11[s] : _idx(__tmp11, s))
        hidden1 = []
        j = 0
        while j < 4
          sum1 = 0.0
          i = 0
          while i < 3
            sum1 = _add(sum1, (__tmp12 = inp; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)) * (__tmp13 = (__tmp14 = net.w1; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)))
            i = _add(i, 1)
          end
          hidden1 = _append(hidden1, sigmoid(sum1))
          j = _add(j, 1)
        end
        hidden2 = []
        k = 0
        while k < 3
          sum2 = 0.0
          j2 = 0
          while j2 < 4
            sum2 = _add(sum2, (__tmp15 = hidden1; __tmp15.is_a?(Hash) ? __tmp15[j2] : _idx(__tmp15, j2)) * (__tmp16 = (__tmp17 = net.w2; __tmp17.is_a?(Hash) ? __tmp17[j2] : _idx(__tmp17, j2)); __tmp16.is_a?(Hash) ? __tmp16[k] : _idx(__tmp16, k)))
            j2 = _add(j2, 1)
          end
          hidden2 = _append(hidden2, sigmoid(sum2))
          k = _add(k, 1)
        end
        sum3 = 0.0
        k3 = 0
        while k3 < 3
          sum3 = _add(sum3, (__tmp18 = hidden2; __tmp18.is_a?(Hash) ? __tmp18[k3] : _idx(__tmp18, k3)) * (__tmp19 = (__tmp20 = net.w3; __tmp20.is_a?(Hash) ? __tmp20[k3] : _idx(__tmp20, k3)); __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0)))
          k3 = _add(k3, 1)
        end
        output = sigmoid(sum3)
        error = target - output
        delta_output = error * sigmoid_derivative(output)
        new_w3 = []
        k4 = 0
        while k4 < 3
          w3row = (__tmp21 = net.w3; __tmp21.is_a?(Hash) ? __tmp21[k4] : _idx(__tmp21, k4))
          w3row[0] = _add((__tmp22 = w3row; __tmp22.is_a?(Hash) ? __tmp22[0] : _idx(__tmp22, 0)), (__tmp23 = hidden2; __tmp23.is_a?(Hash) ? __tmp23[k4] : _idx(__tmp23, k4)) * delta_output)
          new_w3 = _append(new_w3, w3row)
          k4 = _add(k4, 1)
        end
        net.w3 = new_w3
        delta_hidden2 = []
        k5 = 0
        while k5 < 3
          row = (__tmp24 = net.w3; __tmp24.is_a?(Hash) ? __tmp24[k5] : _idx(__tmp24, k5))
          dh2 = (__tmp25 = row; __tmp25.is_a?(Hash) ? __tmp25[0] : _idx(__tmp25, 0)) * delta_output * sigmoid_derivative((__tmp26 = hidden2; __tmp26.is_a?(Hash) ? __tmp26[k5] : _idx(__tmp26, k5)))
          delta_hidden2 = _append(delta_hidden2, dh2)
          k5 = _add(k5, 1)
        end
        new_w2 = []
        j = 0
        while j < 4
          w2row = (__tmp27 = net.w2; __tmp27.is_a?(Hash) ? __tmp27[j] : _idx(__tmp27, j))
          k6 = 0
          while k6 < 3
            w2row[k6] = _add((__tmp28 = w2row; __tmp28.is_a?(Hash) ? __tmp28[k6] : _idx(__tmp28, k6)), (__tmp29 = hidden1; __tmp29.is_a?(Hash) ? __tmp29[j] : _idx(__tmp29, j)) * (__tmp30 = delta_hidden2; __tmp30.is_a?(Hash) ? __tmp30[k6] : _idx(__tmp30, k6)))
            k6 = _add(k6, 1)
          end
          new_w2 = _append(new_w2, w2row)
          j = _add(j, 1)
        end
        net.w2 = new_w2
        delta_hidden1 = []
        j = 0
        while j < 4
          sumdh = 0.0
          k7 = 0
          while k7 < 3
            row2 = (__tmp31 = net.w2; __tmp31.is_a?(Hash) ? __tmp31[j] : _idx(__tmp31, j))
            sumdh = _add(sumdh, (__tmp32 = row2; __tmp32.is_a?(Hash) ? __tmp32[k7] : _idx(__tmp32, k7)) * (__tmp33 = delta_hidden2; __tmp33.is_a?(Hash) ? __tmp33[k7] : _idx(__tmp33, k7)))
            k7 = _add(k7, 1)
          end
          delta_hidden1 = _append(delta_hidden1, sumdh * sigmoid_derivative((__tmp34 = hidden1; __tmp34.is_a?(Hash) ? __tmp34[j] : _idx(__tmp34, j))))
          j = _add(j, 1)
        end
        new_w1 = []
        i2 = 0
        while i2 < 3
          w1row = (__tmp35 = net.w1; __tmp35.is_a?(Hash) ? __tmp35[i2] : _idx(__tmp35, i2))
          j = 0
          while j < 4
            w1row[j] = _add((__tmp36 = w1row; __tmp36.is_a?(Hash) ? __tmp36[j] : _idx(__tmp36, j)), (__tmp37 = inp; __tmp37.is_a?(Hash) ? __tmp37[i2] : _idx(__tmp37, i2)) * (__tmp38 = delta_hidden1; __tmp38.is_a?(Hash) ? __tmp38[j] : _idx(__tmp38, j)))
            j = _add(j, 1)
          end
          new_w1 = _append(new_w1, w1row)
          i2 = _add(i2, 1)
        end
        net.w1 = new_w1
        s = _add(s, 1)
      end
      iter = _add(iter, 1)
    end
  end
  def predict(net, input)
    out = feedforward(net, input)
    if out > 0.6
      return 1
    end
    return 0
  end
  def example()
    inputs = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0], [1.0, 1.0, 1.0]]
    outputs = [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0]
    net = new_network()
    train(net, inputs, outputs, 10)
    result = predict(net, [1.0, 1.0, 1.0])
    puts(_str(result))
    return result
  end
  def main()
    example()
  end
  Object.send(:remove_const, :Network) if Object.const_defined?(:Network)
  Object.const_set(:Network, Struct.new(:w1, :w2, :w3, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
