# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def exp_approx(x)
    sum = 1.0
    term = 1.0
    i = 1
    while i < 10
      term = term * x / (i).to_f
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def sigmoid(x)
    return 1.0 / (_add(1.0, exp_approx(-x)))
  end
  def sigmoid_derivative(x)
    return x * (1.0 - x)
  end
  def new_network()
    return Network.new(w1: [[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2]], w2: [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]], w3: [[0.1], [0.2], [0.3]])
  end
  def feedforward(net, input)
    hidden1 = []
    j = 0
    while j < 4
      sum1 = 0.0
      i = 0
      while i < 3
        sum1 = _add(sum1, input[i] * net.w1[i][j])
        i = _add(i, 1)
      end
      hidden1 = (hidden1 + [sigmoid(sum1)])
      j = _add(j, 1)
    end
    hidden2 = []
    k = 0
    while k < 3
      sum2 = 0.0
      j2 = 0
      while j2 < 4
        sum2 = _add(sum2, hidden1[j2] * net.w2[j2][k])
        j2 = _add(j2, 1)
      end
      hidden2 = (hidden2 + [sigmoid(sum2)])
      k = _add(k, 1)
    end
    sum3 = 0.0
    k2 = 0
    while k2 < 3
      sum3 = _add(sum3, hidden2[k2] * net.w3[k2][0])
      k2 = _add(k2, 1)
    end
    out = sigmoid(sum3)
    return out
  end
  def train(net, inputs, outputs, iterations)
    iter = 0
    while iter < iterations
      s = 0
      while s < inputs.length
        inp = inputs[s]
        target = outputs[s]
        hidden1 = []
        j = 0
        while j < 4
          sum1 = 0.0
          i = 0
          while i < 3
            sum1 = _add(sum1, inp[i] * net.w1[i][j])
            i = _add(i, 1)
          end
          hidden1 = (hidden1 + [sigmoid(sum1)])
          j = _add(j, 1)
        end
        hidden2 = []
        k = 0
        while k < 3
          sum2 = 0.0
          j2 = 0
          while j2 < 4
            sum2 = _add(sum2, hidden1[j2] * net.w2[j2][k])
            j2 = _add(j2, 1)
          end
          hidden2 = (hidden2 + [sigmoid(sum2)])
          k = _add(k, 1)
        end
        sum3 = 0.0
        k3 = 0
        while k3 < 3
          sum3 = _add(sum3, hidden2[k3] * net.w3[k3][0])
          k3 = _add(k3, 1)
        end
        output = sigmoid(sum3)
        error = target - output
        delta_output = error * sigmoid_derivative(output)
        new_w3 = []
        k4 = 0
        while k4 < 3
          w3row = net.w3[k4]
          w3row[0] = _add(w3row[0], hidden2[k4] * delta_output)
          new_w3 = (new_w3 + [w3row])
          k4 = _add(k4, 1)
        end
        net["w3"] = new_w3
        delta_hidden2 = []
        k5 = 0
        while k5 < 3
          row = net.w3[k5]
          dh2 = row[0] * delta_output * sigmoid_derivative(hidden2[k5])
          delta_hidden2 = (delta_hidden2 + [dh2])
          k5 = _add(k5, 1)
        end
        new_w2 = []
        j = 0
        while j < 4
          w2row = net.w2[j]
          k6 = 0
          while k6 < 3
            w2row[k6] = _add(w2row[k6], hidden1[j] * delta_hidden2[k6])
            k6 = _add(k6, 1)
          end
          new_w2 = (new_w2 + [w2row])
          j = _add(j, 1)
        end
        net["w2"] = new_w2
        delta_hidden1 = []
        j = 0
        while j < 4
          sumdh = 0.0
          k7 = 0
          while k7 < 3
            row2 = net.w2[j]
            sumdh = _add(sumdh, row2[k7] * delta_hidden2[k7])
            k7 = _add(k7, 1)
          end
          delta_hidden1 = (delta_hidden1 + [sumdh * sigmoid_derivative(hidden1[j])])
          j = _add(j, 1)
        end
        new_w1 = []
        i2 = 0
        while i2 < 3
          w1row = net.w1[i2]
          j = 0
          while j < 4
            w1row[j] = _add(w1row[j], inp[i2] * delta_hidden1[j])
            j = _add(j, 1)
          end
          new_w1 = (new_w1 + [w1row])
          i2 = _add(i2, 1)
        end
        net["w1"] = new_w1
        s = _add(s, 1)
      end
      iter = _add(iter, 1)
    end
  end
  def predict(net, input)
    out = feedforward(net, input)
    if out > 0.6
      return 1
    end
    return 0
  end
  def example()
    inputs = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0], [1.0, 1.0, 1.0]]
    outputs = [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0]
    net = new_network()
    train(net, inputs, outputs, 10)
    result = predict(net, [1.0, 1.0, 1.0])
    puts(_str(result))
    return result
  end
  def main()
    example()
  end
  Object.send(:remove_const, :Network) if Object.const_defined?(:Network)
  Network = Struct.new(:w1, :w2, :w3, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
