# Generated by Mochi transpiler v0.10.67 on 2025-08-17 14:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2.147483648e+09
  end
  def expApprox(x)
    y = x
    is_neg = false
    if x < 0.0
      is_neg = true
      y = -x
    end
    term = 1.0
    sum = 1.0
    n = 1
    while n < 30
      term = term * y / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    if is_neg
      return 1.0 / sum
    end
    return sum
  end
  def sigmoid(z)
    return 1.0 / (_add(1.0, expApprox(-z)))
  end
  def sigmoid_vec(v)
    res = []
    i = 0
    while i < _len(v)
      res = _append(res, sigmoid((__tmp1 = v; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))))
      i = _add(i, 1)
    end
    return res
  end
  def sigmoid_derivative(out)
    res = []
    i = 0
    while i < _len(out)
      val = (__tmp2 = out; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      res = _append(res, val * (1.0 - val))
      i = _add(i, 1)
    end
    return res
  end
  def random_vector(n)
    v = []
    i = 0
    while i < n
      v = _append(v, random() - 0.5)
      i = _add(i, 1)
    end
    return v
  end
  def random_matrix(r, c)
    m = []
    i = 0
    while i < r
      m = _append(m, random_vector(c))
      i = _add(i, 1)
    end
    return m
  end
  def matvec(mat, vec)
    res = []
    i = 0
    while i < _len(mat)
      s = 0.0
      j = 0
      while j < _len(vec)
        s = _add(s, (__tmp3 = (__tmp4 = mat; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)) * (__tmp5 = vec; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)))
        j = _add(j, 1)
      end
      res = _append(res, s)
      i = _add(i, 1)
    end
    return res
  end
  def matTvec(mat, vec)
    cols = _len((__tmp6 = mat; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
    res = []
    j = 0
    while j < cols
      s = 0.0
      i = 0
      while i < _len(mat)
        s = _add(s, (__tmp7 = (__tmp8 = mat; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)) * (__tmp9 = vec; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)))
        i = _add(i, 1)
      end
      res = _append(res, s)
      j = _add(j, 1)
    end
    return res
  end
  def vec_sub(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, (__tmp10 = a; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) - (__tmp11 = b; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      i = _add(i, 1)
    end
    return res
  end
  def vec_mul(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, (__tmp12 = a; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)) * (__tmp13 = b; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)))
      i = _add(i, 1)
    end
    return res
  end
  def vec_scalar_mul(v, s)
    res = []
    i = 0
    while i < _len(v)
      res = _append(res, (__tmp14 = v; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)) * s)
      i = _add(i, 1)
    end
    return res
  end
  def outer(a, b)
    res = []
    i = 0
    while i < _len(a)
      row = []
      j = 0
      while j < _len(b)
        row = _append(row, (__tmp15 = a; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)) * (__tmp16 = b; __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j)))
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def mat_scalar_mul(mat, s)
    res = []
    i = 0
    while i < _len(mat)
      row = []
      j = 0
      while j < _len((__tmp17 = mat; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)))
        row = _append(row, (__tmp18 = (__tmp19 = mat; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)); __tmp18.is_a?(Hash) ? __tmp18[j] : _idx(__tmp18, j)) * s)
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def mat_sub(a, b)
    res = []
    i = 0
    while i < _len(a)
      row = []
      j = 0
      while j < _len((__tmp20 = a; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)))
        row = _append(row, (__tmp21 = (__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)); __tmp21.is_a?(Hash) ? __tmp21[j] : _idx(__tmp21, j)) - (__tmp23 = (__tmp24 = b; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)); __tmp23.is_a?(Hash) ? __tmp23[j] : _idx(__tmp23, j)))
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def init_layer(units, back_units, lr)
    return Layer.new(units: units, weight: random_matrix(units, back_units), bias: random_vector(units), output: [], xdata: [], learn_rate: lr)
  end
  def forward(layers, x)
    data = x
    i = 0
    while i < _len(layers)
      layer = (__tmp25 = layers; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i))
      layer.xdata = data
      if _eq(i, 0)
        layer.output = data
      else
        z = vec_sub(matvec(layer.weight, data), layer.bias)
        layer.output = sigmoid_vec(z)
        data = layer.output
      end
      layers[i] = layer
      i = _add(i, 1)
    end
    return layers
  end
  def backward(layers, grad)
    g = grad
    i = _len(layers) - 1
    while i > 0
      layer = (__tmp26 = layers; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i))
      deriv = sigmoid_derivative(layer.output)
      delta = vec_mul(g, deriv)
      grad_w = outer(delta, layer.xdata)
      layer.weight = mat_sub(layer.weight, mat_scalar_mul(grad_w, layer.learn_rate))
      layer.bias = vec_sub(layer.bias, vec_scalar_mul(delta, layer.learn_rate))
      g = matTvec(layer.weight, delta)
      layers[i] = layer
      i = i - 1
    end
    return layers
  end
  def calc_loss(y, yhat)
    s = 0.0
    i = 0
    while i < _len(y)
      d = (__tmp27 = y; __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i)) - (__tmp28 = yhat; __tmp28.is_a?(Hash) ? __tmp28[i] : _idx(__tmp28, i))
      s = _add(s, d * d)
      i = _add(i, 1)
    end
    return s
  end
  def calc_gradient(y, yhat)
    g = []
    i = 0
    while i < _len(y)
      g = _append(g, 2.0 * ((__tmp29 = yhat; __tmp29.is_a?(Hash) ? __tmp29[i] : _idx(__tmp29, i)) - (__tmp30 = y; __tmp30.is_a?(Hash) ? __tmp30[i] : _idx(__tmp30, i))))
      i = _add(i, 1)
    end
    return g
  end
  def train(layers, xdata, ydata, rounds, acc)
    r = 0
    while r < rounds
      i = 0
      while i < _len(xdata)
        layers = forward(layers, (__tmp31 = xdata; __tmp31.is_a?(Hash) ? __tmp31[i] : _idx(__tmp31, i)))
        out = (__tmp32 = layers; __tmp32.is_a?(Hash) ? __tmp32[_len(layers) - 1] : _idx(__tmp32, _len(layers) - 1)).output
        grad = calc_gradient((__tmp33 = ydata; __tmp33.is_a?(Hash) ? __tmp33[i] : _idx(__tmp33, i)), out)
        layers = backward(layers, grad)
        i = _add(i, 1)
      end
      r = _add(r, 1)
    end
    return 0.0
  end
  def create_data()
    x = []
    i = 0
    while i < 10
      x = _append(x, random_vector(10))
      i = _add(i, 1)
    end
    y = [[0.8, 0.4], [0.4, 0.3], [0.34, 0.45], [0.67, 0.32], [0.88, 0.67], [0.78, 0.77], [0.55, 0.66], [0.55, 0.43], [0.54, 0.1], [0.1, 0.5]]
    return Data.new(x: x, y: y)
  end
  def main()
    data = create_data()
    x = data.x
    y = data.y
    layers = []
    layers = _append(layers, init_layer(10, 0, 0.3))
    layers = _append(layers, init_layer(20, 10, 0.3))
    layers = _append(layers, init_layer(30, 20, 0.3))
    layers = _append(layers, init_layer(2, 30, 0.3))
    final_mse = train(layers, x, y, 100, 0.01)
    puts(final_mse)
  end
  $seed = 1
  Object.send(:remove_const, :Layer) if Object.const_defined?(:Layer)
  Object.const_set(:Layer, Struct.new(:units, :weight, :bias, :output, :xdata, :learn_rate, keyword_init: true))
  Object.send(:remove_const, :Data) if Object.const_defined?(:Data)
  Object.const_set(:Data, Struct.new(:x, :y, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
