# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def make_list(n, value)
    result = [].clone
    i = 0.clone
    while i < n
      result = (result << (value)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def min_value(arr)
    m = arr[0].clone
    i = 1.clone
    while i < arr.length
      if arr[i] < m
        m = arr[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def max_value(arr)
    m = arr[0].clone
    i = 1.clone
    while i < arr.length
      if arr[i] > m
        m = arr[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def pigeon_sort(array)
    if array.length == 0
      return array
    end
    mn = min_value(array)
    mx = max_value(array)
    holes_range = _add(mx - mn, 1)
    holes = make_list(holes_range, 0).clone
    holes_repeat = make_list(holes_range, 0).clone
    i = 0.clone
    while i < array.length
      index = array[i] - mn
      holes[index] = array[i]
      holes_repeat[index] = _add(holes_repeat[index], 1)
      i = _add(i, 1).clone
    end
    array_index = 0.clone
    h = 0.clone
    while h < holes_range
      while holes_repeat[h] > 0
        array[array_index] = holes[h]
        array_index = _add(array_index, 1).clone
        holes_repeat[h] = holes_repeat[h] - 1
      end
      h = _add(h, 1).clone
    end
    return array
  end
  puts(((x = pigeon_sort([0, 5, 3, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = pigeon_sort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = pigeon_sort([-2, -5, -45])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
