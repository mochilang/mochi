# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def heapify(arr, index, heap_size)
    largest = index.clone
    left_index = _add(2 * index, 1)
    right_index = _add(2 * index, 2)
    if left_index < heap_size && arr[left_index] > arr[largest]
      largest = left_index.clone
    end
    if right_index < heap_size && arr[right_index] > arr[largest]
      largest = right_index.clone
    end
    if largest != index
      temp = arr[largest]
      arr[largest] = arr[index]
      arr[index] = temp
      heapify(arr, largest, heap_size)
    end
  end
  def heap_sort(arr)
    n = arr.length
    i = n / 2 - 1.clone
    while i >= 0
      heapify(arr, i, n)
      i = i - 1.clone
    end
    i = n - 1.clone
    while i > 0
      temp = arr[0]
      arr[0] = arr[i]
      arr[i] = temp
      heapify(arr, 0, i)
      i = i - 1.clone
    end
    return arr
  end
  $data = [3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4].clone
  $result = heap_sort($data).clone
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  if ((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s) != ((x = [-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)
    panic("Assertion error")
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
