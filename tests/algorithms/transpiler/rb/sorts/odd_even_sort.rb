# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def odd_even_sort(xs)
    arr = [].clone
    i = 0.clone
    while i < xs.length
      arr = (arr << (xs[i])).clone
      i = _add(i, 1).clone
    end
    n = arr.length.clone
    sorted = false.clone
    while sorted == false
      sorted = true.clone
      j = 0.clone
      while j < n - 1
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
          sorted = false.clone
        end
        j = _add(j, 2).clone
      end
      j = 1.clone
      while j < n - 1
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
          sorted = false.clone
        end
        j = _add(j, 2).clone
      end
    end
    return arr
  end
  def print_list(xs)
    i = 0.clone
    out = "".clone
    while i < xs.length
      if i > 0
        out = _add(out, " ").clone
      end
      out = _add(out, _str(xs[i])).clone
      i = _add(i, 1).clone
    end
    puts(out)
  end
  def test_odd_even_sort()
    a = [5, 4, 3, 2, 1]
    r1 = odd_even_sort(a)
    if r1[0] != 1 || r1[1] != 2 || r1[2] != 3 || r1[3] != 4 || r1[4] != 5
      panic("case1 failed")
    end
    b = []
    r2 = odd_even_sort(b)
    if r2.length != 0
      panic("case2 failed")
    end
    c = [-10, -1, 10, 2]
    r3 = odd_even_sort(c)
    if r3[0] != (-10) || r3[1] != (-1) || r3[2] != 2 || r3[3] != 10
      panic("case3 failed")
    end
    d = [1, 2, 3, 4]
    r4 = odd_even_sort(d)
    if r4[0] != 1 || r4[1] != 2 || r4[2] != 3 || r4[3] != 4
      panic("case4 failed")
    end
  end
  def main()
    test_odd_even_sort()
    sample = [5, 4, 3, 2, 1]
    sorted = odd_even_sort(sample)
    print_list(sorted)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
