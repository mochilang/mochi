# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def set_at_int(xs, idx, value)
    res = []
    i = 0
    while i < xs.length
      if _eq(i, idx)
        res = (res + [value])
      else
        res = (res + [xs[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def comp_and_swap(arr, i, j, dir)
    res = arr
    xi = arr[i]
    xj = arr[j]
    if (_eq(dir, 1) && xi > xj) || (_eq(dir, 0) && xi < xj)
      res = set_at_int(res, i, xj)
      res = set_at_int(res, j, xi)
    end
    return res
  end
  def bitonic_merge(arr, low, length, dir)
    res = arr
    if length > 1
      mid = length / 2
      k = low
      while k < _add(low, mid)
        res = comp_and_swap(res, k, _add(k, mid), dir)
        k = _add(k, 1)
      end
      res = bitonic_merge(res, low, mid, dir)
      res = bitonic_merge(res, _add(low, mid), mid, dir)
    end
    return res
  end
  def bitonic_sort(arr, low, length, dir)
    res = arr
    if length > 1
      mid = length / 2
      res = bitonic_sort(res, low, mid, 1)
      res = bitonic_sort(res, _add(low, mid), mid, 0)
      res = bitonic_merge(res, low, length, dir)
    end
    return res
  end
  def main()
    data = [12, 34, 92, -23, 0, -121, -167, 145]
    asc = bitonic_sort(data, 0, data.length, 1)
    puts(((x = asc); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    desc = bitonic_merge(asc, 0, asc.length, 0)
    puts(((x = desc); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
