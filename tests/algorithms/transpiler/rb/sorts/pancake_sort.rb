# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def flip(arr, k)
    start = 0.clone
    end_ = k.clone
    while start < end_
      temp = arr[start]
      arr[start] = arr[end_]
      arr[end_] = temp
      start = _add(start, 1).clone
      end_ = end_ - 1.clone
    end
    return arr
  end
  def find_max_index(arr, n)
    mi = 0.clone
    i = 1.clone
    while i < n
      if arr[i] > arr[mi]
        mi = i.clone
      end
      i = _add(i, 1).clone
    end
    return mi
  end
  def pancake_sort(arr)
    cur = arr.length.clone
    while cur > 1
      mi = find_max_index(arr, cur)
      arr = flip(arr, mi).clone
      arr = flip(arr, cur - 1).clone
      cur = cur - 1.clone
    end
    return arr
  end
  def main()
    data = [3, 6, 1, 10, 2].clone
    sorted = pancake_sort(data).clone
    puts(((x = sorted); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
