# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def insertion_sort(a, start, end_)
    arr = a.clone
    i = start.clone
    while i < end_
      key = arr[i]
      j = i.clone
      while j > start && arr[j - 1] > key
        arr[j] = arr[j - 1]
        j = j - 1.clone
      end
      arr[j] = key
      i = _add(i, 1).clone
    end
    return arr
  end
  def heapify(a, index, heap_size)
    arr = a.clone
    largest = index.clone
    left = _add(2 * index, 1)
    right = _add(2 * index, 2)
    if left < heap_size && arr[left] > arr[largest]
      largest = left.clone
    end
    if right < heap_size && arr[right] > arr[largest]
      largest = right.clone
    end
    if largest != index
      temp = arr[index]
      arr[index] = arr[largest]
      arr[largest] = temp
      arr = heapify(arr, largest, heap_size).clone
    end
    return arr
  end
  def heap_sort(a)
    arr = a.clone
    n = arr.length
    if n <= 1
      return arr
    end
    i = n / 2.clone
    while true
      arr = heapify(arr, i, n).clone
      if i == 0
        break
      end
      i = i - 1.clone
    end
    i = n - 1.clone
    while i > 0
      temp = arr[0]
      arr[0] = arr[i]
      arr[i] = temp
      arr = heapify(arr, 0, i).clone
      i = i - 1.clone
    end
    return arr
  end
  def median_of_3(arr, first, middle, last)
    a = arr[first]
    b = arr[middle]
    c = arr[last]
    if (a > b && a < c) || (a < b && a > c)
      return a
    else
      if (b > a && b < c) || (b < a && b > c)
        return b
      else
        return c
      end
    end
  end
  def partition(arr, low, high, pivot)
    i = low.clone
    j = high.clone
    while true
      while arr[i] < pivot
        i = _add(i, 1).clone
      end
      j = j - 1.clone
      while pivot < arr[j]
        j = j - 1.clone
      end
      if i >= j
        return i
      end
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      i = _add(i, 1).clone
    end
  end
  def int_log2(n)
    v = n.clone
    r = 0.clone
    while v > 1
      v = v / 2.clone
      r = _add(r, 1).clone
    end
    return r
  end
  def intro_sort(arr, start, end_, size_threshold, max_depth)
    array = arr.clone
    s = start.clone
    e = end_.clone
    depth = max_depth.clone
    while e - s > size_threshold
      if depth == 0
        return heap_sort(array)
      end
      depth = depth - 1.clone
      pivot = median_of_3(array, s, _add(_add(s, ((e - s) / 2)), 1), e - 1)
      p = partition(array, s, e, pivot)
      array = intro_sort(array, p, e, size_threshold, depth).clone
      e = p.clone
    end
    res = insertion_sort(array, s, e)
    _ = res.length
    return res
  end
  def intro_sort_main(arr)
    if arr.length == 0
      puts(((x = arr); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      return
    end
    max_depth = 2 * int_log2(arr.length)
    sorted = intro_sort(arr, 0, arr.length, 16, max_depth)
    puts(((x = sorted); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  $example1 = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]
  intro_sort_main($example1)
  $example2 = [21, 15, 11, 45, -2, -11, 46]
  intro_sort_main($example2)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
