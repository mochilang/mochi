# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def make_buckets()
    buckets = [].clone
    i = 0.clone
    while i < $RADIX
      buckets = (buckets << ([])).clone
      i = _add(i, 1).clone
    end
    return buckets
  end
  def max_value(xs)
    max_val = xs[0].clone
    i = 1.clone
    while i < xs.length
      if xs[i] > max_val
        max_val = xs[i].clone
      end
      i = _add(i, 1).clone
    end
    return max_val
  end
  def radix_sort(list_of_ints)
    placement = 1.clone
    max_digit = max_value(list_of_ints)
    while placement <= max_digit
      buckets = make_buckets().clone
      i = 0.clone
      while i < list_of_ints.length
        value = list_of_ints[i]
        tmp = (value / placement) % $RADIX
        buckets[tmp] = (buckets[tmp] << (value))
        i = _add(i, 1).clone
      end
      a = 0.clone
      b = 0.clone
      while b < $RADIX
        bucket = buckets[b].clone
        j = 0.clone
        while j < bucket.length
          list_of_ints[a] = bucket[j]
          a = _add(a, 1).clone
          j = _add(j, 1).clone
        end
        b = _add(b, 1).clone
      end
      placement = placement * $RADIX.clone
    end
    return list_of_ints
  end
  $RADIX = 10
  puts(((x = radix_sort([0, 5, 3, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = radix_sort([1, 100, 10, 1000])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = radix_sort([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
