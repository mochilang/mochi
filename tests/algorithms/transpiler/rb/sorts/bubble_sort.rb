# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def bubble_sort_iterative(collection)
    n = collection.length
    while n > 0
      swapped = false
      j = 0
      while j < n - 1
        if collection[j] > collection[_add(j, 1)]
          temp = collection[j]
          collection[j] = collection[_add(j, 1)]
          collection[_add(j, 1)] = temp
          swapped = true
        end
        j = _add(j, 1)
      end
      if !swapped
        break
      end
      n = n - 1
    end
    return collection
  end
  def bubble_sort_recursive(collection)
    n = collection.length
    swapped = false
    i = 0
    while i < n - 1
      if collection[i] > collection[_add(i, 1)]
        temp = collection[i]
        collection[i] = collection[_add(i, 1)]
        collection[_add(i, 1)] = temp
        swapped = true
      end
      i = _add(i, 1)
    end
    if swapped
      return bubble_sort_recursive(collection)
    end
    return collection
  end
  def copy_list(xs)
    out = []
    i = 0
    while i < xs.length
      out = (out + [xs[i]])
      i = _add(i, 1)
    end
    return out
  end
  def list_eq(a, b)
    if !_eq(a.length, b.length)
      return false
    end
    k = 0
    while k < a.length
      if !_eq(a[k], b[k])
        return false
      end
      k = _add(k, 1)
    end
    return true
  end
  def test_bubble_sort()
    example = [0, 5, 2, 3, 2]
    expected = [0, 2, 2, 3, 5]
    if !list_eq(bubble_sort_iterative(copy_list(example)), expected)
      panic("iterative failed")
    end
    if !list_eq(bubble_sort_recursive(copy_list(example)), expected)
      panic("recursive failed")
    end
    empty = []
    if !_eq(bubble_sort_iterative(copy_list(empty)).length, 0)
      panic("empty iterative failed")
    end
    if !_eq(bubble_sort_recursive(copy_list(empty)).length, 0)
      panic("empty recursive failed")
    end
  end
  def main()
    test_bubble_sort()
    arr = [5, 1, 4, 2, 8]
    puts(((x = bubble_sort_iterative(copy_list(arr))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = bubble_sort_recursive(copy_list(arr))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
