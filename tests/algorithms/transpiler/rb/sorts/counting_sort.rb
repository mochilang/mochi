# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def max_val(arr)
    m = arr[0].clone
    i = 1.clone
    while i < arr.length
      if arr[i] > m
        m = arr[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def min_val(arr)
    m = arr[0].clone
    i = 1.clone
    while i < arr.length
      if arr[i] < m
        m = arr[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def counting_sort(collection)
    if collection.length == 0
      return []
    end
    coll_len = collection.length
    coll_max = max_val(collection)
    coll_min = min_val(collection)
    counting_arr_length = _add(coll_max, 1) - coll_min
    counting_arr = [].clone
    i = 0.clone
    while i < counting_arr_length
      counting_arr = (counting_arr << (0)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < coll_len
      number = collection[i]
      counting_arr[number - coll_min] = _add(counting_arr[number - coll_min], 1)
      i = _add(i, 1).clone
    end
    i = 1.clone
    while i < counting_arr_length
      counting_arr[i] = _add(counting_arr[i], counting_arr[i - 1])
      i = _add(i, 1).clone
    end
    ordered = [].clone
    i = 0.clone
    while i < coll_len
      ordered = (ordered << (0)).clone
      i = _add(i, 1).clone
    end
    idx = coll_len - 1.clone
    while idx >= 0
      number = collection[idx]
      pos = counting_arr[number - coll_min] - 1
      ordered[pos] = number
      counting_arr[number - coll_min] = counting_arr[number - coll_min] - 1
      idx = idx - 1.clone
    end
    return ordered
  end
  def chr(code)
    if code == 10
      return "\n"
    end
    if code == 13
      return "\r"
    end
    if code == 9
      return "\t"
    end
    if code >= 32 && code < 127
      return $ascii_chars[code - 32...code - 31]
    end
    return ""
  end
  def ord(ch)
    if ch == "\n"
      return 10
    end
    if ch == "\r"
      return 13
    end
    if ch == "\t"
      return 9
    end
    i = 0.clone
    while i < $ascii_chars.length
      if $ascii_chars[i..._add(i, 1)] == ch
        return _add(32, i)
      end
      i = _add(i, 1).clone
    end
    return 0
  end
  def counting_sort_string(s)
    codes = [].clone
    i = 0.clone
    while i < s.length
      codes = (codes << (ord(s[i..._add(i, 1)]))).clone
      i = _add(i, 1).clone
    end
    sorted_codes = counting_sort(codes)
    res = "".clone
    i = 0.clone
    while i < sorted_codes.length
      res = _add(res, chr(sorted_codes[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  $ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  $example1 = counting_sort([0, 5, 3, 2, 2])
  puts(((x = $example1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $example2 = counting_sort([])
  puts(((x = $example2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $example3 = counting_sort([-2, -5, -45])
  puts(((x = $example3); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(counting_sort_string("thisisthestring"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
