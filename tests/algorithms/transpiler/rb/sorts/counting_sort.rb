# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def max_val(arr)
    m = arr[0]
    i = 1
    while i < arr.length
      if arr[i] > m
        m = arr[i]
      end
      i = _add(i, 1)
    end
    return m
  end
  def min_val(arr)
    m = arr[0]
    i = 1
    while i < arr.length
      if arr[i] < m
        m = arr[i]
      end
      i = _add(i, 1)
    end
    return m
  end
  def counting_sort(collection)
    if _eq(collection.length, 0)
      return []
    end
    coll_len = collection.length
    coll_max = max_val(collection)
    coll_min = min_val(collection)
    counting_arr_length = _add(coll_max, 1) - coll_min
    counting_arr = []
    i = 0
    while i < counting_arr_length
      counting_arr = (counting_arr + [0])
      i = _add(i, 1)
    end
    i = 0
    while i < coll_len
      number = collection[i]
      counting_arr[number - coll_min] = _add(counting_arr[number - coll_min], 1)
      i = _add(i, 1)
    end
    i = 1
    while i < counting_arr_length
      counting_arr[i] = _add(counting_arr[i], counting_arr[i - 1])
      i = _add(i, 1)
    end
    ordered = []
    i = 0
    while i < coll_len
      ordered = (ordered + [0])
      i = _add(i, 1)
    end
    idx = coll_len - 1
    while idx >= 0
      number = collection[idx]
      pos = counting_arr[number - coll_min] - 1
      ordered[pos] = number
      counting_arr[number - coll_min] = counting_arr[number - coll_min] - 1
      idx = idx - 1
    end
    return ordered
  end
  def chr(code)
    if _eq(code, 10)
      return "\n"
    end
    if _eq(code, 13)
      return "\r"
    end
    if _eq(code, 9)
      return "\t"
    end
    if code >= 32 && code < 127
      return $ascii_chars[code - 32...code - 31]
    end
    return ""
  end
  def ord(ch)
    if _eq(ch, "\n")
      return 10
    end
    if _eq(ch, "\r")
      return 13
    end
    if _eq(ch, "\t")
      return 9
    end
    i = 0
    while i < $ascii_chars.length
      if _eq($ascii_chars[i..._add(i, 1)], ch)
        return _add(32, i)
      end
      i = _add(i, 1)
    end
    return 0
  end
  def counting_sort_string(s)
    codes = []
    i = 0
    while i < s.length
      codes = (codes + [ord(s[i..._add(i, 1)])])
      i = _add(i, 1)
    end
    sorted_codes = counting_sort(codes)
    res = ""
    i = 0
    while i < sorted_codes.length
      res = _add(res, chr(sorted_codes[i]))
      i = _add(i, 1)
    end
    return res
  end
  $ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  $example1 = counting_sort([0, 5, 3, 2, 2])
  puts(((x = $example1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $example2 = counting_sort([])
  puts(((x = $example2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $example3 = counting_sort([-2, -5, -45])
  puts(((x = $example3); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(counting_sort_string("thisisthestring"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
