# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def circle_sort_util(collection, low, high)
    swapped = false.clone
    if low == high
      return swapped
    end
    left = low.clone
    right = high.clone
    while left < right
      if collection[left] > collection[right]
        tmp = collection[left]
        collection[left] = collection[right]
        collection[right] = tmp
        swapped = true.clone
      end
      left = _add(left, 1).clone
      right = right - 1.clone
    end
    if left == right && collection[left] > collection[_add(right, 1)]
      tmp2 = collection[left]
      collection[left] = collection[_add(right, 1)]
      collection[_add(right, 1)] = tmp2
      swapped = true.clone
    end
    mid = _add(low, (high - low) / 2)
    left_swap = circle_sort_util(collection, low, mid)
    right_swap = circle_sort_util(collection, _add(mid, 1), high)
    if swapped || left_swap || right_swap
      return true
    else
      return false
    end
  end
  def circle_sort(collection)
    if collection.length < 2
      return collection
    end
    is_not_sorted = true.clone
    while is_not_sorted
      is_not_sorted = circle_sort_util(collection, 0, collection.length - 1).clone
    end
    return collection
  end
  puts(((x = circle_sort([0, 5, 3, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = circle_sort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = circle_sort([-2, 5, 0, -45])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
