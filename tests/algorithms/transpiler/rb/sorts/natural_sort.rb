# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0.clone
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def is_digit(ch)
    return index_of($DIGITS, ch) >= 0
  end
  def to_lower(ch)
    idx = index_of($UPPER, ch).clone
    if idx >= 0
      return $LOWER[idx..._add(idx, 1)]
    end
    return ch
  end
  def pad_left(s, width)
    res = s.clone
    while res.length < width
      res = _add("0", res).clone
    end
    return res
  end
  def alphanum_key(s)
    key = [].clone
    i = 0.clone
    while i < s.length
      if is_digit(s[i])
        num = "".clone
        while i < s.length && is_digit(s[i])
          num = _add(num, s[i]).clone
          i = _add(i, 1).clone
        end
        len_str = pad_left(_str(num.length), 3)
        key = (key << (_add(_add("#", len_str), num))).clone
      else
        seg = "".clone
        while i < s.length
          if is_digit(s[i])
            break
          end
          seg = _add(seg, to_lower(s[i])).clone
          i = _add(i, 1).clone
        end
        key = (key << (seg)).clone
      end
    end
    return key
  end
  def compare_keys(a, b)
    i = 0.clone
    while i < a.length && i < b.length
      if a[i] < b[i]
        return -1
      end
      if a[i] > b[i]
        return 1
      end
      i = _add(i, 1).clone
    end
    if a.length < b.length
      return -1
    end
    if a.length > b.length
      return 1
    end
    return 0
  end
  def natural_sort(arr)
    res = [].clone
    keys = [].clone
    k = 0.clone
    while k < arr.length
      res = (res << (arr[k])).clone
      keys = (keys << (alphanum_key(arr[k]))).clone
      k = _add(k, 1).clone
    end
    i = 1.clone
    while i < res.length
      current = res[i]
      current_key = keys[i]
      j = i - 1.clone
      while j >= 0 && compare_keys(keys[j], current_key) > 0
        res[_add(j, 1)] = res[j]
        keys[_add(j, 1)] = keys[j]
        j = j - 1.clone
      end
      res[_add(j, 1)] = current
      keys[_add(j, 1)] = current_key
      i = _add(i, 1).clone
    end
    return res
  end
  $DIGITS = "0123456789"
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $example1 = ["2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"].clone
  puts(((x = natural_sort($example1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $example2 = ["Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"].clone
  puts(((x = natural_sort($example2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
