# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bisect_left(stacks, value)
    low = 0.clone
    high = stacks.length.clone
    while low < high
      mid = (_add(low, high)) / 2
      stack = stacks[mid]
      top_idx = stack.length - 1
      top = stack[top_idx]
      if top < value
        low = _add(mid, 1).clone
      else
        high = mid.clone
      end
    end
    return low
  end
  def reverse_list(src)
    res = [].clone
    i = src.length - 1.clone
    while i >= 0
      res = (res << (src[i])).clone
      i = i - 1.clone
    end
    return res
  end
  def patience_sort(collection)
    stacks = [].clone
    i = 0.clone
    while i < collection.length
      element = collection[i]
      idx = bisect_left(stacks, element)
      if idx != stacks.length
        stack = stacks[idx]
        stacks[idx] = (stack << (element))
      else
        new_stack = [element].clone
        stacks = (stacks << (new_stack)).clone
      end
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < stacks.length
      stacks[i] = reverse_list(stacks[i])
      i = _add(i, 1).clone
    end
    indices = [].clone
    i = 0.clone
    while i < stacks.length
      indices = (indices << (0)).clone
      i = _add(i, 1).clone
    end
    total = 0.clone
    i = 0.clone
    while i < stacks.length
      total = _add(total, stacks[i].length).clone
      i = _add(i, 1).clone
    end
    result = [].clone
    count = 0.clone
    while count < total
      min_val = 0.clone
      min_stack = -1.clone
      j = 0.clone
      while j < stacks.length
        idx = indices[j]
        if idx < stacks[j].length
          val = stacks[j][idx]
          if min_stack < 0
            min_val = val.clone
            min_stack = j.clone
          else
            if val < min_val
              min_val = val.clone
              min_stack = j.clone
            end
          end
        end
        j = _add(j, 1).clone
      end
      result = (result << (min_val)).clone
      indices[min_stack] = _add(indices[min_stack], 1)
      count = _add(count, 1).clone
    end
    i = 0.clone
    while i < result.length
      collection[i] = result[i]
      i = _add(i, 1).clone
    end
    return collection
  end
  puts(((x = patience_sort([1, 9, 5, 21, 17, 6])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = patience_sort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = patience_sort([-3, -17, -48])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
