# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def list_min(xs)
    i = 1.clone
    m = xs[0].clone
    while i < xs.length
      if xs[i] < m
        m = xs[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def list_max(xs)
    i = 1.clone
    m = xs[0].clone
    while i < xs.length
      if xs[i] > m
        m = xs[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def remove_once(xs, value)
    res = [].clone
    removed = false.clone
    i = 0.clone
    while i < xs.length
      if !removed && xs[i] == value
        removed = true.clone
      else
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def reverse_list(xs)
    res = [].clone
    i = xs.length - 1.clone
    while i >= 0
      res = (res << (xs[i])).clone
      i = i - 1.clone
    end
    return res
  end
  def merge_sort(collection)
    start = [].clone
    end_ = [].clone
    coll = collection.clone
    while coll.length > 1
      mn = list_min(coll)
      mx = list_max(coll)
      start = (start << (mn)).clone
      end_ = (end_ << (mx)).clone
      coll = remove_once(coll, mn).clone
      coll = remove_once(coll, mx).clone
    end
    end_ = reverse_list(end_).clone
    return _add(_add(start, coll), end_)
  end
  def test_merge_sort()
    if merge_sort([0, 5, 3, 2, 2]) != [0, 2, 2, 3, 5]
      panic("case1 failed")
    end
    if merge_sort([]) != []
      panic("case2 failed")
    end
    if merge_sort([-2, -5, -45]) != [-45, -5, -2]
      panic("case3 failed")
    end
  end
  def main()
    test_merge_sort()
    puts(((x = merge_sort([0, 5, 3, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
