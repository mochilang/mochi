# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def cocktail_shaker_sort(arr)
    start = 0.clone
    end_ = arr.length - 1.clone
    while start < end_
      swapped = false.clone
      i = start.clone
      while i < end_
        if arr[i] > arr[_add(i, 1)]
          temp = arr[i]
          arr[i] = arr[_add(i, 1)]
          arr[_add(i, 1)] = temp
          swapped = true.clone
        end
        i = _add(i, 1).clone
      end
      if !swapped
        break
      end
      end_ = end_ - 1.clone
      i = end_.clone
      while i > start
        if arr[i] < arr[i - 1]
          temp2 = arr[i]
          arr[i] = arr[i - 1]
          arr[i - 1] = temp2
          swapped = true.clone
        end
        i = i - 1.clone
      end
      if !swapped
        break
      end
      start = _add(start, 1).clone
    end
    return arr
  end
  puts(((x = cocktail_shaker_sort([4, 5, 2, 1, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = cocktail_shaker_sort([-4, 5, 0, 1, 2, 11])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = cocktail_shaker_sort([1, 2, 3, 4, 5])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
