# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def insert_next(collection, index)
    arr = collection.clone
    if index >= arr.length || arr[index - 1] <= arr[index]
      return arr
    end
    j = index - 1.clone
    temp = arr[j]
    arr[j] = arr[index]
    arr[index] = temp
    return insert_next(arr, _add(index, 1))
  end
  def rec_insertion_sort(collection, n)
    arr = collection.clone
    if arr.length <= 1 || n <= 1
      return arr
    end
    arr = insert_next(arr, n - 1).clone
    return rec_insertion_sort(arr, n - 1)
  end
  def test_rec_insertion_sort()
    col1 = [1, 2, 1].clone
    col1 = rec_insertion_sort(col1, col1.length).clone
    if col1[0] != 1 || col1[1] != 1 || col1[2] != 2
      panic("test1 failed")
    end
    col2 = [2, 1, 0, -1, -2].clone
    col2 = rec_insertion_sort(col2, col2.length).clone
    if col2[0] != (0 - 2)
      panic("test2 failed")
    end
    if col2[1] != (0 - 1)
      panic("test2 failed")
    end
    if col2[2] != 0
      panic("test2 failed")
    end
    if col2[3] != 1
      panic("test2 failed")
    end
    if col2[4] != 2
      panic("test2 failed")
    end
    col3 = [1].clone
    col3 = rec_insertion_sort(col3, col3.length).clone
    if col3[0] != 1
      panic("test3 failed")
    end
  end
  def main()
    test_rec_insertion_sort()
    numbers = [5, 3, 4, 1, 2].clone
    numbers = rec_insertion_sort(numbers, numbers.length).clone
    puts(((x = numbers); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
