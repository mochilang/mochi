# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def subarray(xs, start, end_)
    result = [].clone
    k = start.clone
    while k < end_
      result = (result << (xs[k])).clone
      k = _add(k, 1).clone
    end
    return result
  end
  def merge(arr)
    if arr.length > 1
      middle_length = arr.length / 2
      left_array = subarray(arr, 0, middle_length)
      right_array = subarray(arr, middle_length, arr.length)
      left_size = left_array.length
      right_size = right_array.length
      merge(left_array)
      merge(right_array)
      left_index = 0.clone
      right_index = 0.clone
      index = 0.clone
      while left_index < left_size && right_index < right_size
        if left_array[left_index] < right_array[right_index]
          arr[index] = left_array[left_index]
          left_index = _add(left_index, 1).clone
        else
          arr[index] = right_array[right_index]
          right_index = _add(right_index, 1).clone
        end
        index = _add(index, 1).clone
      end
      while left_index < left_size
        arr[index] = left_array[left_index]
        left_index = _add(left_index, 1).clone
        index = _add(index, 1).clone
      end
      while right_index < right_size
        arr[index] = right_array[right_index]
        right_index = _add(right_index, 1).clone
        index = _add(index, 1).clone
      end
    end
    return arr
  end
  puts(((x = merge([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = merge([10, 22, 1, 2, 3, 9, 15, 23])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = merge([100])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = merge([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
