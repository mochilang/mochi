# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def copy_list(xs)
    res = [].clone
    k = 0.clone
    while k < xs.length
      res = (res << (xs[k])).clone
      k = _add(k, 1).clone
    end
    return res
  end
  def insertion_sort(xs)
    arr = copy_list(xs).clone
    idx = 1.clone
    while idx < arr.length
      value = arr[idx]
      jdx = idx - 1.clone
      while jdx >= 0 && arr[jdx] > value
        arr[_add(jdx, 1)] = arr[jdx]
        jdx = jdx - 1.clone
      end
      arr[_add(jdx, 1)] = value
      idx = _add(idx, 1).clone
    end
    return arr
  end
  def merge(left, right)
    result = [].clone
    i = 0.clone
    j = 0.clone
    while i < left.length && j < right.length
      if left[i] < right[j]
        result = (result << (left[i])).clone
        i = _add(i, 1).clone
      else
        result = (result << (right[j])).clone
        j = _add(j, 1).clone
      end
    end
    while i < left.length
      result = (result << (left[i])).clone
      i = _add(i, 1).clone
    end
    while j < right.length
      result = (result << (right[j])).clone
      j = _add(j, 1).clone
    end
    return result
  end
  def tim_sort(xs)
    n = xs.length
    runs = [].clone
    sorted_runs = [].clone
    current = [].clone
    current = (current << (xs[0])).clone
    i = 1.clone
    while i < n
      if xs[i] < xs[i - 1]
        runs = (runs << (copy_list(current))).clone
        current = [].clone
        current = (current << (xs[i])).clone
      else
        current = (current << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    runs = (runs << (copy_list(current))).clone
    r = 0.clone
    while r < runs.length
      sorted_runs = (sorted_runs << (insertion_sort(runs[r]))).clone
      r = _add(r, 1).clone
    end
    result = [].clone
    r = 0.clone
    while r < sorted_runs.length
      result = merge(result, sorted_runs[r]).clone
      r = _add(r, 1).clone
    end
    return result
  end
  def list_to_string(xs)
    s = "[".clone
    k = 0.clone
    while k < xs.length
      s = _add(s, _str(xs[k])).clone
      if k < xs.length - 1
        s = _add(s, ", ").clone
      end
      k = _add(k, 1).clone
    end
    return _add(s, "]")
  end
  $sample = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
  $sorted_sample = tim_sort($sample)
  puts(list_to_string($sorted_sample))
  $sample2 = [3, 2, 1]
  $sorted_sample2 = tim_sort($sample2)
  puts(list_to_string($sorted_sample2))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
