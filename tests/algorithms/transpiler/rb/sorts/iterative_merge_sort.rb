# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def merge(a, low, mid, high)
    left = a[low...mid]
    right = a[mid..._add(high, 1)]
    result = []
    while left.length > 0 && right.length > 0
      if left[0] <= right[0]
        result = (result + [left[0]])
        left = left[1...]
      else
        result = (result + [right[0]])
        right = right[1...]
      end
    end
    i = 0
    while i < left.length
      result = (result + [left[i]])
      i = _add(i, 1)
    end
    i = 0
    while i < right.length
      result = (result + [right[i]])
      i = _add(i, 1)
    end
    i = 0
    while i < result.length
      a[_add(low, i)] = result[i]
      i = _add(i, 1)
    end
    return a
  end
  def iter_merge_sort(items)
    n = items.length
    if n <= 1
      return items
    end
    arr = items[0...]
    p = 2
    while p <= n
      i = 0
      while i < n
        high = _add(i, p) - 1
        if high >= n
          high = n - 1
        end
        low = i
        mid = (_add(_add(low, high), 1)) / 2
        arr = merge(arr, low, mid, high)
        i = _add(i, p)
      end
      if p * 2 >= n
        mid2 = i - p
        arr = merge(arr, 0, mid2, n - 1)
        break
      end
      p = p * 2
    end
    return arr
  end
  def list_to_string(arr)
    s = "["
    i = 0
    while i < arr.length
      s = _add(s, _str(arr[i]))
      if i < arr.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  puts(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7])))
  puts(list_to_string(iter_merge_sort([1])))
  puts(list_to_string(iter_merge_sort([2, 1])))
  puts(list_to_string(iter_merge_sort([4, 3, 2, 1])))
  puts(list_to_string(iter_merge_sort([5, 4, 3, 2, 1])))
  puts(list_to_string(iter_merge_sort([-2, -9, -1, -4])))
  puts(list_to_string(iter_merge_sort([])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
