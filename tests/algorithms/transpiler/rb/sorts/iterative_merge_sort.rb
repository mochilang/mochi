# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def merge(a, low, mid, high)
    left = a[low...mid].clone
    right = a[mid..._add(high, 1)].clone
    result = [].clone
    while left.length > 0 && right.length > 0
      if left[0] <= right[0]
        result = (result << (left[0])).clone
        left = left[1...].clone
      else
        result = (result << (right[0])).clone
        right = right[1...].clone
      end
    end
    i = 0.clone
    while i < left.length
      result = (result << (left[i])).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < right.length
      result = (result << (right[i])).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < result.length
      a[_add(low, i)] = result[i]
      i = _add(i, 1).clone
    end
    return a
  end
  def iter_merge_sort(items)
    n = items.length
    if n <= 1
      return items
    end
    arr = items[0...].clone
    p = 2.clone
    while p <= n
      i = 0.clone
      while i < n
        high = _add(i, p) - 1.clone
        if high >= n
          high = n - 1.clone
        end
        low = i
        mid = (_add(_add(low, high), 1)) / 2
        arr = merge(arr, low, mid, high).clone
        i = _add(i, p).clone
      end
      if p * 2 >= n
        mid2 = i - p
        arr = merge(arr, 0, mid2, n - 1).clone
        break
      end
      p = p * 2.clone
    end
    return arr
  end
  def list_to_string(arr)
    s = "[".clone
    i = 0.clone
    while i < arr.length
      s = _add(s, _str(arr[i])).clone
      if i < arr.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    return _add(s, "]")
  end
  puts(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7])))
  puts(list_to_string(iter_merge_sort([1])))
  puts(list_to_string(iter_merge_sort([2, 1])))
  puts(list_to_string(iter_merge_sort([4, 3, 2, 1])))
  puts(list_to_string(iter_merge_sort([5, 4, 3, 2, 1])))
  puts(list_to_string(iter_merge_sort([-2, -9, -1, -4])))
  puts(list_to_string(iter_merge_sort([])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
