# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def quick_sort_3partition(arr, left, right)
    if right <= left
      return arr
    end
    a = left.clone
    i = left.clone
    b = right.clone
    pivot = arr[left]
    while i <= b
      if arr[i] < pivot
        temp = arr[a]
        arr[a] = arr[i]
        arr[i] = temp
        a = _add(a, 1).clone
        i = _add(i, 1).clone
      else
        if arr[i] > pivot
          temp = arr[b]
          arr[b] = arr[i]
          arr[i] = temp
          b = b - 1.clone
        else
          i = _add(i, 1).clone
        end
      end
    end
    arr = quick_sort_3partition(arr, left, a - 1).clone
    arr = quick_sort_3partition(arr, _add(b, 1), right).clone
    return arr
  end
  def quick_sort_lomuto_partition(arr, left, right)
    if left < right
      pivot_index = lomuto_partition(arr, left, right)
      arr = quick_sort_lomuto_partition(arr, left, pivot_index - 1).clone
      arr = quick_sort_lomuto_partition(arr, _add(pivot_index, 1), right).clone
    end
    return arr
  end
  def lomuto_partition(arr, left, right)
    pivot = arr[right]
    store_index = left.clone
    i = left.clone
    while i < right
      if arr[i] < pivot
        temp = arr[store_index]
        arr[store_index] = arr[i]
        arr[i] = temp
        store_index = _add(store_index, 1).clone
      end
      i = _add(i, 1).clone
    end
    temp = arr[right]
    arr[right] = arr[store_index]
    arr[store_index] = temp
    return store_index
  end
  def three_way_radix_quicksort(arr)
    if arr.length <= 1
      return arr
    end
    pivot = arr[0]
    less = [].clone
    equal = [].clone
    greater = [].clone
    i = 0.clone
    while i < arr.length
      val = arr[i]
      if val < pivot
        less = (less << (val)).clone
      else
        if val > pivot
          greater = (greater << (val)).clone
        else
          equal = (equal << (val)).clone
        end
      end
      i = _add(i, 1).clone
    end
    sorted_less = three_way_radix_quicksort(less)
    sorted_greater = three_way_radix_quicksort(greater)
    result = _add(sorted_less, equal).clone
    result = _add(result, sorted_greater).clone
    return result
  end
  $array1 = [5, -1, -1, 5, 5, 24, 0].clone
  $array1 = quick_sort_3partition($array1, 0, $array1.length - 1).clone
  puts(((x = $array1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $array2 = [9, 0, 2, 6].clone
  $array2 = quick_sort_3partition($array2, 0, $array2.length - 1).clone
  puts(((x = $array2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $array3 = [].clone
  $array3 = quick_sort_3partition($array3, 0, $array3.length - 1).clone
  puts(((x = $array3); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $nums1 = [0, 5, 3, 1, 2].clone
  $nums1 = quick_sort_lomuto_partition($nums1, 0, $nums1.length - 1).clone
  puts(((x = $nums1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $nums2 = [].clone
  $nums2 = quick_sort_lomuto_partition($nums2, 0, $nums2.length - 1).clone
  puts(((x = $nums2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $nums3 = [-2, 5, 0, -4].clone
  $nums3 = quick_sort_lomuto_partition($nums3, 0, $nums3.length - 1).clone
  puts(((x = $nums3); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = three_way_radix_quicksort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = three_way_radix_quicksort([1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = three_way_radix_quicksort([-5, -2, 1, -2, 0, 1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
