# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def merge(xs, ys, reverse)
    result = [].clone
    i = 0.clone
    j = 0.clone
    while i < xs.length && j < ys.length
      if reverse
        if xs[i] > ys[j]
          result = (result << (xs[i])).clone
          i = _add(i, 1).clone
        else
          result = (result << (ys[j])).clone
          j = _add(j, 1).clone
        end
      else
        if xs[i] < ys[j]
          result = (result << (xs[i])).clone
          i = _add(i, 1).clone
        else
          result = (result << (ys[j])).clone
          j = _add(j, 1).clone
        end
      end
    end
    while i < xs.length
      result = (result << (xs[i])).clone
      i = _add(i, 1).clone
    end
    while j < ys.length
      result = (result << (ys[j])).clone
      j = _add(j, 1).clone
    end
    return result
  end
  def strand_sort_rec(arr, reverse, solution)
    if arr.length == 0
      return solution
    end
    sublist = [].clone
    remaining = [].clone
    sublist = (sublist << (arr[0])).clone
    last = arr[0].clone
    k = 1.clone
    while k < arr.length
      item = arr[k]
      if reverse
        if item < last
          sublist = (sublist << (item)).clone
          last = item.clone
        else
          remaining = (remaining << (item)).clone
        end
      else
        if item > last
          sublist = (sublist << (item)).clone
          last = item.clone
        else
          remaining = (remaining << (item)).clone
        end
      end
      k = _add(k, 1).clone
    end
    solution = merge(solution, sublist, reverse).clone
    return strand_sort_rec(remaining, reverse, solution)
  end
  def strand_sort(arr, reverse)
    return strand_sort_rec(arr, reverse, [])
  end
  puts(((x = strand_sort([4, 3, 5, 1, 2], false)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = strand_sort([4, 3, 5, 1, 2], true)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
