# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_to_float(x)
    return x * 1.0
  end
  def floor_int(x)
    i = 0.clone
    while int_to_float(_add(i, 1)) <= x
      i = _add(i, 1).clone
    end
    return i
  end
  def set_at_float(xs, idx, value)
    i = 0.clone
    res = [].clone
    while i < xs.length
      if i == idx
        res = (res << (value)).clone
      else
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def set_at_list_float(xs, idx, value)
    i = 0.clone
    res = [].clone
    while i < xs.length
      if i == idx
        res = (res << (value)).clone
      else
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def sort_float(xs)
    res = xs.clone
    i = 1.clone
    while i < res.length
      key = res[i]
      j = i - 1.clone
      while j >= 0 && res[j] > key
        res = set_at_float(res, _add(j, 1), res[j]).clone
        j = j - 1.clone
      end
      res = set_at_float(res, _add(j, 1), key).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def bucket_sort_with_count(xs, bucket_count)
    if xs.length == 0 || bucket_count <= 0
      return []
    end
    min_value = xs[0].clone
    max_value = xs[0].clone
    i = 1.clone
    while i < xs.length
      if xs[i] < min_value
        min_value = xs[i].clone
      end
      if xs[i] > max_value
        max_value = xs[i].clone
      end
      i = _add(i, 1).clone
    end
    if max_value == min_value
      return xs
    end
    bucket_size = (max_value - min_value) / int_to_float(bucket_count)
    buckets = [].clone
    i = 0.clone
    while i < bucket_count
      buckets = (buckets << ([])).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < xs.length
      val = xs[i]
      idx = floor_int((val - min_value) / bucket_size).clone
      if idx < 0
        idx = 0.clone
      end
      if idx >= bucket_count
        idx = bucket_count - 1.clone
      end
      bucket = buckets[idx].clone
      bucket = (bucket << (val)).clone
      buckets = set_at_list_float(buckets, idx, bucket).clone
      i = _add(i, 1).clone
    end
    result = [].clone
    i = 0.clone
    while i < buckets.length
      sorted_bucket = sort_float(buckets[i])
      j = 0.clone
      while j < sorted_bucket.length
        result = (result << (sorted_bucket[j])).clone
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def bucket_sort(xs)
    return bucket_sort_with_count(xs, 10)
  end
  puts(((x = bucket_sort([-1.0, 2.0, -5.0, 0.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = bucket_sort([9.0, 8.0, 7.0, 6.0, -12.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = bucket_sort([0.4, 1.2, 0.1, 0.2, -0.9])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = bucket_sort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = bucket_sort([-10000000000.0, 10000000000.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
