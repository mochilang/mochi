# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def cycle_sort(arr)
    n = arr.length.clone
    cycle_start = 0.clone
    while cycle_start < n - 1
      item = arr[cycle_start].clone
      pos = cycle_start.clone
      i = _add(cycle_start, 1).clone
      while i < n
        if arr[i] < item
          pos = _add(pos, 1).clone
        end
        i = _add(i, 1).clone
      end
      if pos == cycle_start
        cycle_start = _add(cycle_start, 1).clone
        next
      end
      while item == arr[pos]
        pos = _add(pos, 1).clone
      end
      temp = arr[pos]
      arr[pos] = item
      item = temp.clone
      while pos != cycle_start
        pos = cycle_start.clone
        i = _add(cycle_start, 1).clone
        while i < n
          if arr[i] < item
            pos = _add(pos, 1).clone
          end
          i = _add(i, 1).clone
        end
        while item == arr[pos]
          pos = _add(pos, 1).clone
        end
        temp2 = arr[pos]
        arr[pos] = item
        item = temp2.clone
      end
      cycle_start = _add(cycle_start, 1).clone
    end
    return arr
  end
  puts(((x = cycle_sort([4, 3, 2, 1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = cycle_sort([-4, 20, 0, -50, 100, -1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = cycle_sort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
