# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def binary_search_insertion_from(sorted_list, item, start)
    left = start.clone
    right = sorted_list.length - 1.clone
    while left <= right
      middle = (_add(left, right)) / 2
      if left == right
        if sorted_list[middle] < item
          left = _add(middle, 1).clone
        end
        break
      else
        if sorted_list[middle] < item
          left = _add(middle, 1).clone
        else
          right = middle - 1.clone
        end
      end
    end
    result = [].clone
    i = 0.clone
    while i < left
      result = (result << (sorted_list[i])).clone
      i = _add(i, 1).clone
    end
    result = (result << (item)).clone
    while i < sorted_list.length
      result = (result << (sorted_list[i])).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def binary_search_insertion(sorted_list, item)
    return binary_search_insertion_from(sorted_list, item, 0)
  end
  def merge(left, right)
    result = [].clone
    i = 0.clone
    j = 0.clone
    while i < left.length && j < right.length
      if left[i][0] < right[j][0]
        result = (result << (left[i])).clone
        i = _add(i, 1).clone
      else
        result = (result << (right[j])).clone
        j = _add(j, 1).clone
      end
    end
    while i < left.length
      result = (result << (left[i])).clone
      i = _add(i, 1).clone
    end
    while j < right.length
      result = (result << (right[j])).clone
      j = _add(j, 1).clone
    end
    return result
  end
  def sortlist_2d(list_2d)
    length = list_2d.length
    if length <= 1
      return list_2d
    end
    middle = length / 2
    left = [].clone
    i = 0.clone
    while i < middle
      left = (left << (list_2d[i])).clone
      i = _add(i, 1).clone
    end
    right = [].clone
    j = middle.clone
    while j < length
      right = (right << (list_2d[j])).clone
      j = _add(j, 1).clone
    end
    return merge(sortlist_2d(left), sortlist_2d(right))
  end
  def merge_insertion_sort(collection)
    if collection.length <= 1
      return collection
    end
    two_paired_list = [].clone
    has_last_odd_item = false.clone
    i = 0.clone
    while i < collection.length
      if i == collection.length - 1
        has_last_odd_item = true.clone
      else
        a = collection[i]
        b = collection[_add(i, 1)]
        if a < b
          two_paired_list = (two_paired_list << ([a, b])).clone
        else
          two_paired_list = (two_paired_list << ([b, a])).clone
        end
      end
      i = _add(i, 2).clone
    end
    sorted_list_2d = sortlist_2d(two_paired_list).clone
    result = [].clone
    i = 0.clone
    while i < sorted_list_2d.length
      result = (result << (sorted_list_2d[i][0])).clone
      i = _add(i, 1).clone
    end
    result = (result << (sorted_list_2d[sorted_list_2d.length - 1][1])).clone
    if has_last_odd_item
      result = binary_search_insertion(result, collection[collection.length - 1]).clone
    end
    inserted_before = false.clone
    idx = 0.clone
    while idx < sorted_list_2d.length - 1
      if has_last_odd_item && result[idx] == collection[collection.length - 1]
        inserted_before = true.clone
      end
      pivot = sorted_list_2d[idx][1]
      if inserted_before
        result = binary_search_insertion_from(result, pivot, _add(idx, 2)).clone
      else
        result = binary_search_insertion_from(result, pivot, _add(idx, 1)).clone
      end
      idx = _add(idx, 1).clone
    end
    return result
  end
  def main()
    example1 = [0, 5, 3, 2, 2]
    example2 = [99]
    example3 = [-2, -5, -45]
    puts(((x = merge_insertion_sort(example1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = merge_insertion_sort(example2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = merge_insertion_sort(example3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
