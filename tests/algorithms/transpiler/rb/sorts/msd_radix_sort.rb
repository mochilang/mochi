# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_bit_length(n)
    if n == 0
      return 1
    end
    length = 0.clone
    num = n.clone
    while num > 0
      length = _add(length, 1).clone
      num = num / 2.clone
    end
    return length
  end
  def max_bit_length(nums)
    i = 0.clone
    max_len = 0.clone
    while i < nums.length
      l = get_bit_length(nums[i])
      if l > max_len
        max_len = l.clone
      end
      i = _add(i, 1).clone
    end
    return max_len
  end
  def get_bit(num, pos)
    n = num.clone
    i = 0.clone
    while i < pos
      n = n / 2.clone
      i = _add(i, 1).clone
    end
    return n % 2
  end
  def _msd_radix_sort(nums, bit_position)
    if bit_position == 0 || nums.length <= 1
      return nums
    end
    zeros = [].clone
    ones = [].clone
    i = 0.clone
    while i < nums.length
      num = nums[i]
      if get_bit(num, bit_position - 1) == 1
        ones = (ones << (num)).clone
      else
        zeros = (zeros << (num)).clone
      end
      i = _add(i, 1).clone
    end
    zeros = _msd_radix_sort(zeros, bit_position - 1).clone
    ones = _msd_radix_sort(ones, bit_position - 1).clone
    res = zeros.clone
    i = 0.clone
    while i < ones.length
      res = (res << (ones[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def msd_radix_sort(nums)
    if nums.length == 0
      return []
    end
    i = 0.clone
    while i < nums.length
      if nums[i] < 0
        panic("All numbers must be positive")
      end
      i = _add(i, 1).clone
    end
    bits = max_bit_length(nums)
    result = _msd_radix_sort(nums, bits)
    return result
  end
  def msd_radix_sort_inplace(nums)
    return msd_radix_sort(nums)
  end
  $ex1 = [40, 12, 1, 100, 4].clone
  $sorted1 = msd_radix_sort($ex1).clone
  puts(((x = $sorted1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $ex2 = [].clone
  $sorted2 = msd_radix_sort($ex2).clone
  puts(((x = $sorted2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $ex3 = [123, 345, 123, 80].clone
  $sorted3 = msd_radix_sort($ex3).clone
  puts(((x = $sorted3); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $ex4 = [1209, 834598, 1, 540402, 45].clone
  $sorted4 = msd_radix_sort($ex4).clone
  puts(((x = $sorted4); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
