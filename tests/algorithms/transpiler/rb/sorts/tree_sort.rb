# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def new_node(state, value)
    state["nodes"] = (state.nodes << (Node.new(value: value, left: (-1), right: (-1))))
    return state.nodes.length - 1
  end
  def insert(state, value)
    if state.root == (-1)
      state["root"] = new_node(state, value)
      return
    end
    current = state.root.clone
    nodes = state.nodes.clone
    while true
      node = nodes[current].clone
      if value < node.value
        if node.left == (-1)
          idx = new_node(state, value)
          nodes = state.nodes.clone
          node["left"] = idx
          nodes[current] = node
          state["nodes"] = nodes
          return
        end
        current = node.left.clone
      else
        if value > node.value
          if node.right == (-1)
            idx = new_node(state, value)
            nodes = state.nodes.clone
            node["right"] = idx
            nodes[current] = node
            state["nodes"] = nodes
            return
          end
          current = node.right.clone
        else
          return
        end
      end
    end
  end
  def inorder(state, idx)
    if idx == (-1)
      return []
    end
    node = state.nodes[idx]
    result = inorder(state, node.left).clone
    result = (result << (node.value)).clone
    right_part = inorder(state, node.right)
    i = 0.clone
    while i < right_part.length
      result = (result << (right_part[i])).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def tree_sort(arr)
    state = TreeState.new(nodes: [], root: (-1)).clone
    i = 0.clone
    while i < arr.length
      insert(state, arr[i])
      i = _add(i, 1).clone
    end
    if state.root == (-1)
      return []
    end
    return inorder(state, state.root)
  end
  Node = Struct.new(:value, :left, :right, keyword_init: true)
  TreeState = Struct.new(:nodes, :root, keyword_init: true)
  puts(((x = tree_sort([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = tree_sort([1])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = tree_sort([1, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = tree_sort([5, 2, 7])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = tree_sort([5, -4, 9, 2, 7])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = tree_sort([5, 6, 1, -1, 4, 37, 2, 7])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
