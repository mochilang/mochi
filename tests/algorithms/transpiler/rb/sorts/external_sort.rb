# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def subarray(xs, start, end_)
    result = []
    k = start
    while k < end_
      result = (result + [xs[k]])
      k = _add(k, 1)
    end
    return result
  end
  def merge(left_half, right_half)
    result = []
    i = 0
    j = 0
    while i < left_half.length && j < right_half.length
      if left_half[i] < right_half[j]
        result = (result + [left_half[i]])
        i = _add(i, 1)
      else
        result = (result + [right_half[j]])
        j = _add(j, 1)
      end
    end
    while i < left_half.length
      result = (result + [left_half[i]])
      i = _add(i, 1)
    end
    while j < right_half.length
      result = (result + [right_half[j]])
      j = _add(j, 1)
    end
    return result
  end
  def merge_sort(array)
    if array.length <= 1
      return array
    end
    middle = array.length / 2
    left_half = subarray(array, 0, middle)
    right_half = subarray(array, middle, array.length)
    sorted_left = merge_sort(left_half)
    sorted_right = merge_sort(right_half)
    return merge(sorted_left, sorted_right)
  end
  def split_into_blocks(data, block_size)
    blocks = []
    i = 0
    while i < data.length
      end_ = (_add(i, block_size) < data.length ? _add(i, block_size) : data.length)
      block = subarray(data, i, end_)
      sorted_block = merge_sort(block)
      blocks = (blocks + [sorted_block])
      i = end_
    end
    return blocks
  end
  def merge_blocks(blocks)
    num_blocks = blocks.length
    indices = []
    i = 0
    while i < num_blocks
      indices = (indices + [0])
      i = _add(i, 1)
    end
    result = []
    done = false
    while !done
      done = true
      min_val = 0
      min_block = 0 - 1
      j = 0
      while j < num_blocks
        idx = indices[j]
        if idx < blocks[j].length
          val = blocks[j][idx]
          if _eq(min_block, (0 - 1)) || val < min_val
            min_val = val
            min_block = j
          end
          done = false
        end
        j = _add(j, 1)
      end
      if !done
        result = (result + [min_val])
        indices[min_block] = _add(indices[min_block], 1)
      end
    end
    return result
  end
  def external_sort(data, block_size)
    blocks = split_into_blocks(data, block_size)
    return merge_blocks(blocks)
  end
  def main()
    data = [7, 1, 5, 3, 9, 2, 6, 4, 8, 0]
    sorted_data = external_sort(data, 3)
    puts(((x = sorted_data); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
