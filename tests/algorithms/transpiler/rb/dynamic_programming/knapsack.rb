# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def max_int(a, b)
    if a > b
      return a
    else
      return b
    end
  end
  def init_f(n, w)
    table = []
    i = 0
    while i <= n
      row = []
      j = 0
      while j <= w
        if _eq(i, 0) || _eq(j, 0)
          row = (row + [0])
        else
          row = (row + [-1])
        end
        j = _add(j, 1)
      end
      table = (table + [row])
      i = _add(i, 1)
    end
    return table
  end
  def mf_knapsack(i, wt, val, j)
    if (__tmp1 = (__tmp2 = $f; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)) < 0
      if j < (__tmp3 = wt; __tmp3.is_a?(Hash) ? __tmp3[i - 1] : _idx(__tmp3, i - 1))
        (__tmp4 = $f; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))[j] = mf_knapsack(i - 1, wt, val, j)
      else
        without_item = mf_knapsack(i - 1, wt, val, j)
        with_item = _add(mf_knapsack(i - 1, wt, val, j - (__tmp5 = wt; __tmp5.is_a?(Hash) ? __tmp5[i - 1] : _idx(__tmp5, i - 1))), (__tmp6 = val; __tmp6.is_a?(Hash) ? __tmp6[i - 1] : _idx(__tmp6, i - 1)))
        (__tmp7 = $f; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))[j] = max_int(without_item, with_item)
      end
    end
    return (__tmp8 = (__tmp9 = $f; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j))
  end
  def create_matrix(rows, cols)
    matrix = []
    i = 0
    while i <= rows
      row = []
      j = 0
      while j <= cols
        row = (row + [0])
        j = _add(j, 1)
      end
      matrix = (matrix + [row])
      i = _add(i, 1)
    end
    return matrix
  end
  def knapsack(w, wt, val, n)
    dp = create_matrix(n, w)
    i = 1
    while i <= n
      w_ = 1
      while w_ <= w
        if (__tmp10 = wt; __tmp10.is_a?(Hash) ? __tmp10[i - 1] : _idx(__tmp10, i - 1)) <= w_
          include = _add((__tmp11 = val; __tmp11.is_a?(Hash) ? __tmp11[i - 1] : _idx(__tmp11, i - 1)), (__tmp12 = (__tmp13 = dp; __tmp13.is_a?(Hash) ? __tmp13[i - 1] : _idx(__tmp13, i - 1)); __tmp12.is_a?(Hash) ? __tmp12[w_ - (__tmp14 = wt; __tmp14.is_a?(Hash) ? __tmp14[i - 1] : _idx(__tmp14, i - 1))] : _idx(__tmp12, w_ - (__tmp15 = wt; __tmp15.is_a?(Hash) ? __tmp15[i - 1] : _idx(__tmp15, i - 1)))))
          exclude = (__tmp16 = (__tmp17 = dp; __tmp17.is_a?(Hash) ? __tmp17[i - 1] : _idx(__tmp17, i - 1)); __tmp16.is_a?(Hash) ? __tmp16[w_] : _idx(__tmp16, w_))
          (__tmp18 = dp; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))[w_] = max_int(include, exclude)
        else
          (__tmp19 = dp; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))[w_] = (__tmp20 = (__tmp21 = dp; __tmp21.is_a?(Hash) ? __tmp21[i - 1] : _idx(__tmp21, i - 1)); __tmp20.is_a?(Hash) ? __tmp20[w_] : _idx(__tmp20, w_))
        end
        w_ = _add(w_, 1)
      end
      i = _add(i, 1)
    end
    return dp
  end
  def construct_solution(dp, wt, i, j, optimal_set)
    if i > 0 && j > 0
      if _eq((__tmp22 = (__tmp23 = dp; __tmp23.is_a?(Hash) ? __tmp23[i - 1] : _idx(__tmp23, i - 1)); __tmp22.is_a?(Hash) ? __tmp22[j] : _idx(__tmp22, j)), (__tmp24 = (__tmp25 = dp; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i)); __tmp24.is_a?(Hash) ? __tmp24[j] : _idx(__tmp24, j)))
        return construct_solution(dp, wt, i - 1, j, optimal_set)
      else
        with_prev = construct_solution(dp, wt, i - 1, j - (__tmp26 = wt; __tmp26.is_a?(Hash) ? __tmp26[i - 1] : _idx(__tmp26, i - 1)), optimal_set)
        return (with_prev + [i])
      end
    end
    return optimal_set
  end
  def knapsack_with_example_solution(w, wt, val)
    num_items = _len(wt)
    dp_table = knapsack(w, wt, val, num_items)
    optimal_val = (__tmp27 = (__tmp28 = dp_table; __tmp28.is_a?(Hash) ? __tmp28[num_items] : _idx(__tmp28, num_items)); __tmp27.is_a?(Hash) ? __tmp27[w] : _idx(__tmp27, w))
    subset = construct_solution(dp_table, wt, num_items, w, [])
    return KnapsackResult.new(value: optimal_val, subset: subset)
  end
  def format_set(xs)
    res = "{"
    i = 0
    while i < _len(xs)
      res = _add(res, _str((__tmp29 = xs; __tmp29.is_a?(Hash) ? __tmp29[i] : _idx(__tmp29, i))))
      if _add(i, 1) < _len(xs)
        res = _add(res, ", ")
      end
      i = _add(i, 1)
    end
    res = _add(res, "}")
    return res
  end
  $f = []
  Object.send(:remove_const, :KnapsackResult) if Object.const_defined?(:KnapsackResult)
  KnapsackResult = Struct.new(:value, :subset, keyword_init: true)
  $val_list = [3, 2, 4, 4]
  $wt_list = [4, 3, 2, 3]
  $n = 4
  $w_cap = 6
  $f = init_f($n, $w_cap)
  $dp_table = knapsack($w_cap, $wt_list, $val_list, $n)
  $optimal_solution = (__tmp30 = (__tmp31 = $dp_table; __tmp31.is_a?(Hash) ? __tmp31[$n] : _idx(__tmp31, $n)); __tmp30.is_a?(Hash) ? __tmp30[$w_cap] : _idx(__tmp30, $w_cap))
  puts($optimal_solution)
  puts(mf_knapsack($n, $wt_list, $val_list, $w_cap))
  $example = knapsack_with_example_solution($w_cap, $wt_list, $val_list)
  puts(_add("optimal_value = ", _str($example.value)))
  puts(_add("An optimal subset corresponding to the optimal value ", format_set($example.subset)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
