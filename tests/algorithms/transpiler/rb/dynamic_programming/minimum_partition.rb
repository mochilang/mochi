# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def find_min(numbers)
    n = _len(numbers)
    s = 0
    idx = 0
    while idx < n
      s = _add(s, (__tmp1 = numbers; __tmp1.is_a?(Hash) ? __tmp1[idx] : _idx(__tmp1, idx)))
      idx = _add(idx, 1)
    end
    dp = []
    i = 0
    while i <= n
      row = []
      j = 0
      while j <= s
        row = (row + [false])
        j = _add(j, 1)
      end
      dp = (dp + [row])
      i = _add(i, 1)
    end
    i = 0
    while i <= n
      (__tmp2 = dp; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))[0] = true
      i = _add(i, 1)
    end
    j = 1
    while j <= s
      (__tmp3 = dp; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))[j] = false
      j = _add(j, 1)
    end
    i = 1
    while i <= n
      j = 1
      while j <= s
        (__tmp4 = dp; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))[j] = (__tmp5 = (__tmp6 = dp; __tmp6.is_a?(Hash) ? __tmp6[i - 1] : _idx(__tmp6, i - 1)); __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))
        if (__tmp7 = numbers; __tmp7.is_a?(Hash) ? __tmp7[i - 1] : _idx(__tmp7, i - 1)) <= j
          if (__tmp8 = (__tmp9 = dp; __tmp9.is_a?(Hash) ? __tmp9[i - 1] : _idx(__tmp9, i - 1)); __tmp8.is_a?(Hash) ? __tmp8[j - (__tmp10 = numbers; __tmp10.is_a?(Hash) ? __tmp10[i - 1] : _idx(__tmp10, i - 1))] : _idx(__tmp8, j - (__tmp11 = numbers; __tmp11.is_a?(Hash) ? __tmp11[i - 1] : _idx(__tmp11, i - 1))))
            (__tmp12 = dp; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))[j] = true
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    diff = 0
    j = s / 2
    while j >= 0
      if (__tmp13 = (__tmp14 = dp; __tmp14.is_a?(Hash) ? __tmp14[n] : _idx(__tmp14, n)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j))
        diff = s - 2 * j
        break
      end
      j = j - 1
    end
    return diff
  end
  puts(_str(find_min([1, 2, 3, 4, 5])))
  puts(_str(find_min([5, 5, 5, 5, 5])))
  puts(_str(find_min([5, 5, 5, 5])))
  puts(_str(find_min([3])))
  puts(_str(find_min([])))
  puts(_str(find_min([1, 2, 3, 4])))
  puts(_str(find_min([0, 0, 0, 0])))
  puts(_str(find_min([-1, -5, 5, 1])))
  puts(_str(find_min([9, 9, 9, 9, 9])))
  puts(_str(find_min([1, 5, 10, 3])))
  puts(_str(find_min([-1, 0, 1])))
  puts(_str(find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
