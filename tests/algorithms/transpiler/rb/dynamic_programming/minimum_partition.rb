# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def find_min(numbers)
    n = numbers.length
    s = 0
    idx = 0
    while idx < n
      s = _add(s, numbers[idx])
      idx = _add(idx, 1)
    end
    dp = []
    i = 0
    while i <= n
      row = []
      j = 0
      while j <= s
        row = (row << (false))
        j = _add(j, 1)
      end
      dp = (dp << (row))
      i = _add(i, 1)
    end
    i = 0
    while i <= n
      dp[i][0] = true
      i = _add(i, 1)
    end
    j = 1
    while j <= s
      dp[0][j] = false
      j = _add(j, 1)
    end
    i = 1
    while i <= n
      j = 1
      while j <= s
        dp[i][j] = dp[i - 1][j]
        if numbers[i - 1] <= j
          if dp[i - 1][j - numbers[i - 1]]
            dp[i][j] = true
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    diff = 0
    j = s / 2
    while j >= 0
      if dp[n][j]
        diff = s - 2 * j
        break
      end
      j = j - 1
    end
    return diff
  end
  puts((find_min([1, 2, 3, 4, 5])).to_s)
  puts((find_min([5, 5, 5, 5, 5])).to_s)
  puts((find_min([5, 5, 5, 5])).to_s)
  puts((find_min([3])).to_s)
  puts((find_min([])).to_s)
  puts((find_min([1, 2, 3, 4])).to_s)
  puts((find_min([0, 0, 0, 0])).to_s)
  puts((find_min([-1, -5, 5, 1])).to_s)
  puts((find_min([9, 9, 9, 9, 9])).to_s)
  puts((find_min([1, 5, 10, 3])).to_s)
  puts((find_min([-1, 0, 1])).to_s)
  puts((find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
