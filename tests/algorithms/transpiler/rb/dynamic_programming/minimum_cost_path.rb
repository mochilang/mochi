# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def min_int(a, b)
    if a < b
      return a
    end
    return b
  end
  def minimum_cost_path(matrix)
    rows = matrix.length
    cols = matrix[0].length
    j = 1
    while j < cols
      row0 = matrix[0]
      row0[j] = _add(row0[j], row0[j - 1])
      matrix[0] = row0
      j = _add(j, 1)
    end
    i = 1
    while i < rows
      row = matrix[i]
      row[0] = _add(row[0], matrix[i - 1][0])
      matrix[i] = row
      i = _add(i, 1)
    end
    i = 1
    while i < rows
      row = matrix[i]
      j = 1
      while j < cols
        up = matrix[i - 1][j]
        left = row[j - 1]
        best = min_int(up, left)
        row[j] = _add(row[j], best)
        j = _add(j, 1)
      end
      matrix[i] = row
      i = _add(i, 1)
    end
    return matrix[rows - 1][cols - 1]
  end
  $m1 = [[2, 1], [3, 1], [4, 2]]
  $m2 = [[2, 1, 4], [2, 1, 3], [3, 2, 1]]
  puts((minimum_cost_path($m1)).to_s)
  puts((minimum_cost_path($m2)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
