# Generated by Mochi transpiler v0.10.62 on 2025-08-09 15:58 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def min3(a, b, c)
    m = a
    if b < m
      m = b
    end
    if c < m
      m = c
    end
    return m
  end
  def helper_top_down(word1, word2, dp, i, j)
    if i < 0
      return _add(j, 1)
    end
    if j < 0
      return _add(i, 1)
    end
    if !_eq(dp[i][j], (0 - 1))
      return dp[i][j]
    end
    if _eq(word1[i..._add(i, 1)], word2[j..._add(j, 1)])
      dp[i][j] = helper_top_down(word1, word2, dp, i - 1, j - 1)
    else
      insert = helper_top_down(word1, word2, dp, i, j - 1)
      delete = helper_top_down(word1, word2, dp, i - 1, j)
      replace = helper_top_down(word1, word2, dp, i - 1, j - 1)
      dp[i][j] = _add(1, min3(insert, delete, replace))
    end
    return dp[i][j]
  end
  def min_dist_top_down(word1, word2)
    m = word1.length
    n = word2.length
    dp = []
    (0...m).each do |_|
      row = []
      (0...n).each do |unused2|
        row = (row + [0 - 1])
      end
      dp = (dp + [row])
    end
    return helper_top_down(word1, word2, dp, m - 1, n - 1)
  end
  def min_dist_bottom_up(word1, word2)
    m = word1.length
    n = word2.length
    dp = []
    (0...(_add(m, 1))).each do |_|
      row = []
      (0...(_add(n, 1))).each do |unused2|
        row = (row + [0])
      end
      dp = (dp + [row])
    end
    (0...(_add(m, 1))).each do |i|
      (0...(_add(n, 1))).each do |j|
        if _eq(i, 0)
          dp[i][j] = j
        else
          if _eq(j, 0)
            dp[i][j] = i
          else
            if _eq(word1[i - 1...i], word2[j - 1...j])
              dp[i][j] = dp[i - 1][j - 1]
            else
              insert = dp[i][j - 1]
              delete = dp[i - 1][j]
              replace = dp[i - 1][j - 1]
              dp[i][j] = _add(1, min3(insert, delete, replace))
            end
          end
        end
      end
    end
    return dp[m][n]
  end
  puts(_str(min_dist_top_down("intention", "execution")))
  puts(_str(min_dist_top_down("intention", "")))
  puts(_str(min_dist_top_down("", "")))
  puts(_str(min_dist_bottom_up("intention", "execution")))
  puts(_str(min_dist_bottom_up("intention", "")))
  puts(_str(min_dist_bottom_up("", "")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
