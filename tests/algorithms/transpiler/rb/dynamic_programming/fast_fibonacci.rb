# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def _fib(n)
    if n == 0
      return FibPair.new(fn: 0, fn1: 1)
    end
    half = _fib(n / 2)
    a = half.fn
    b = half.fn1
    c = a * (b * 2 - a)
    d = _add(a * a, b * b)
    if n % 2 == 0
      return FibPair.new(fn: c, fn1: d)
    end
    return FibPair.new(fn: d, fn1: _add(c, d))
  end
  def fibonacci(n)
    if n < 0
      panic("Negative arguments are not supported")
    end
    res = _fib(n)
    return res.fn
  end
  FibPair = Struct.new(:fn, :fn1, keyword_init: true)
  $i = 0
  while $i < 13
    puts((fibonacci($i)).to_s)
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
