# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def recursive_match(text, pattern)
    if _eq(_len(pattern), 0)
      return _eq(_len(text), 0)
    end
    if _eq(_len(text), 0)
      if _len(pattern) >= 2 && _eq(pattern[_len(pattern) - 1..._len(pattern)], "*")
        return recursive_match(text, pattern[0..._len(pattern) - 2])
      end
      return false
    end
    last_text = text[_len(text) - 1..._len(text)]
    last_pattern = pattern[_len(pattern) - 1..._len(pattern)]
    if _eq(last_text, last_pattern) || _eq(last_pattern, ".")
      return recursive_match(text[0..._len(text) - 1], pattern[0..._len(pattern) - 1])
    end
    if _eq(last_pattern, "*")
      if recursive_match(text[0..._len(text) - 1], pattern)
        return true
      end
      return recursive_match(text, pattern[0..._len(pattern) - 2])
    end
    return false
  end
  def dp_match(text, pattern)
    m = _len(text)
    n = _len(pattern)
    dp = []
    i = 0
    while i <= m
      row = []
      j = 0
      while j <= n
        row = (row + [false])
        j = _add(j, 1)
      end
      dp = (dp + [row])
      i = _add(i, 1)
    end
    (__tmp1 = dp; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))[0] = true
    j = 1
    while j <= n
      if _eq(pattern[j - 1...j], "*") && j >= 2
        if (__tmp2 = (__tmp3 = dp; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)); __tmp2.is_a?(Hash) ? __tmp2[j - 2] : _idx(__tmp2, j - 2))
          (__tmp4 = dp; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))[j] = true
        end
      end
      j = _add(j, 1)
    end
    i = 1
    while i <= m
      j = 1
      while j <= n
        p_char = pattern[j - 1...j]
        t_char = text[i - 1...i]
        if _eq(p_char, ".") || _eq(p_char, t_char)
          if (__tmp5 = (__tmp6 = dp; __tmp6.is_a?(Hash) ? __tmp6[i - 1] : _idx(__tmp6, i - 1)); __tmp5.is_a?(Hash) ? __tmp5[j - 1] : _idx(__tmp5, j - 1))
            (__tmp7 = dp; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))[j] = true
          end
        else
          if _eq(p_char, "*")
            if j >= 2
              if (__tmp8 = (__tmp9 = dp; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[j - 2] : _idx(__tmp8, j - 2))
                (__tmp10 = dp; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))[j] = true
              end
              prev_p = pattern[j - 2...j - 1]
              if _eq(prev_p, ".") || _eq(prev_p, t_char)
                if (__tmp11 = (__tmp12 = dp; __tmp12.is_a?(Hash) ? __tmp12[i - 1] : _idx(__tmp12, i - 1)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
                  (__tmp13 = dp; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))[j] = true
                end
              end
            end
          else
            (__tmp14 = dp; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))[j] = false
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return (__tmp15 = (__tmp16 = dp; __tmp16.is_a?(Hash) ? __tmp16[m] : _idx(__tmp16, m)); __tmp15.is_a?(Hash) ? __tmp15[n] : _idx(__tmp15, n))
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  print_bool(recursive_match("abc", "a.c"))
  print_bool(recursive_match("abc", "af*.c"))
  print_bool(recursive_match("abc", "a.c*"))
  print_bool(recursive_match("abc", "a.c*d"))
  print_bool(recursive_match("aa", ".*"))
  print_bool(dp_match("abc", "a.c"))
  print_bool(dp_match("abc", "af*.c"))
  print_bool(dp_match("abc", "a.c*"))
  print_bool(dp_match("abc", "a.c*d"))
  print_bool(dp_match("aa", ".*"))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
