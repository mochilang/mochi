# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def recursive_match(text, pattern)
    if pattern.length == 0
      return text.length == 0
    end
    if text.length == 0
      if pattern.length >= 2 && pattern[pattern.length - 1...pattern.length] == "*"
        return recursive_match(text, pattern[0...pattern.length - 2])
      end
      return false
    end
    last_text = text[text.length - 1...text.length]
    last_pattern = pattern[pattern.length - 1...pattern.length]
    if last_text == last_pattern || last_pattern == "."
      return recursive_match(text[0...text.length - 1], pattern[0...pattern.length - 1])
    end
    if last_pattern == "*"
      if recursive_match(text[0...text.length - 1], pattern)
        return true
      end
      return recursive_match(text, pattern[0...pattern.length - 2])
    end
    return false
  end
  def dp_match(text, pattern)
    m = text.length
    n = pattern.length
    dp = []
    i = 0
    while i <= m
      row = []
      j = 0
      while j <= n
        row = (row << (false))
        j = _add(j, 1)
      end
      dp = (dp << (row))
      i = _add(i, 1)
    end
    dp[0][0] = true
    j = 1
    while j <= n
      if pattern[j - 1...j] == "*" && j >= 2
        if dp[0][j - 2]
          dp[0][j] = true
        end
      end
      j = _add(j, 1)
    end
    i = 1
    while i <= m
      j = 1
      while j <= n
        p_char = pattern[j - 1...j]
        t_char = text[i - 1...i]
        if p_char == "." || p_char == t_char
          if dp[i - 1][j - 1]
            dp[i][j] = true
          end
        else
          if p_char == "*"
            if j >= 2
              if dp[i][j - 2]
                dp[i][j] = true
              end
              prev_p = pattern[j - 2...j - 1]
              if prev_p == "." || prev_p == t_char
                if dp[i - 1][j]
                  dp[i][j] = true
                end
              end
            end
          else
            dp[i][j] = false
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return dp[m][n]
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  print_bool(recursive_match("abc", "a.c"))
  print_bool(recursive_match("abc", "af*.c"))
  print_bool(recursive_match("abc", "a.c*"))
  print_bool(recursive_match("abc", "a.c*d"))
  print_bool(recursive_match("aa", ".*"))
  print_bool(dp_match("abc", "a.c"))
  print_bool(dp_match("abc", "af*.c"))
  print_bool(dp_match("abc", "a.c*"))
  print_bool(dp_match("abc", "a.c*d"))
  print_bool(dp_match("aa", ".*"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
