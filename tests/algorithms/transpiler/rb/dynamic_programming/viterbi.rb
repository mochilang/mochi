# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def key(state, obs)
    return _add(_add(state, "|"), obs)
  end
  def viterbi(observations, states, start_p, trans_p, emit_p)
    if _eq(_len(observations), 0) || _eq(_len(states), 0)
      panic("empty parameters")
    end
    probs = {}
    ptrs = {}
    first_obs = (__tmp1 = observations; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
    i = 0
    while i < _len(states)
      state = (__tmp2 = states; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      probs[key(state, first_obs)] = (__tmp3 = start_p; __tmp3.is_a?(Hash) ? __tmp3[state] : _idx(__tmp3, state)) * (__tmp4 = (__tmp5 = emit_p; __tmp5.is_a?(Hash) ? __tmp5[state] : _idx(__tmp5, state)); __tmp4.is_a?(Hash) ? __tmp4[first_obs] : _idx(__tmp4, first_obs))
      ptrs[key(state, first_obs)] = ""
      i = _add(i, 1)
    end
    t = 1
    while t < _len(observations)
      obs = (__tmp6 = observations; __tmp6.is_a?(Hash) ? __tmp6[t] : _idx(__tmp6, t))
      j = 0
      while j < _len(states)
        state = (__tmp7 = states; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j))
        max_prob = -1.0
        prev_state = ""
        k = 0
        while k < _len(states)
          state0 = (__tmp8 = states; __tmp8.is_a?(Hash) ? __tmp8[k] : _idx(__tmp8, k))
          obs0 = (__tmp9 = observations; __tmp9.is_a?(Hash) ? __tmp9[t - 1] : _idx(__tmp9, t - 1))
          prob_prev = (__tmp10 = probs; __tmp10.is_a?(Hash) ? __tmp10[key(state0, obs0)] : _idx(__tmp10, key(state0, obs0)))
          prob = prob_prev * (__tmp11 = (__tmp12 = trans_p; __tmp12.is_a?(Hash) ? __tmp12[state0] : _idx(__tmp12, state0)); __tmp11.is_a?(Hash) ? __tmp11[state] : _idx(__tmp11, state)) * (__tmp13 = (__tmp14 = emit_p; __tmp14.is_a?(Hash) ? __tmp14[state] : _idx(__tmp14, state)); __tmp13.is_a?(Hash) ? __tmp13[obs] : _idx(__tmp13, obs))
          if prob > max_prob
            max_prob = prob
            prev_state = state0
          end
          k = _add(k, 1)
        end
        probs[key(state, obs)] = max_prob
        ptrs[key(state, obs)] = prev_state
        j = _add(j, 1)
      end
      t = _add(t, 1)
    end
    path = []
    n = 0
    while n < _len(observations)
      path = (path + [""])
      n = _add(n, 1)
    end
    last_obs = (__tmp15 = observations; __tmp15.is_a?(Hash) ? __tmp15[_len(observations) - 1] : _idx(__tmp15, _len(observations) - 1))
    max_final = -1.0
    last_state = ""
    m = 0
    while m < _len(states)
      state = (__tmp16 = states; __tmp16.is_a?(Hash) ? __tmp16[m] : _idx(__tmp16, m))
      prob = (__tmp17 = probs; __tmp17.is_a?(Hash) ? __tmp17[key(state, last_obs)] : _idx(__tmp17, key(state, last_obs)))
      if prob > max_final
        max_final = prob
        last_state = state
      end
      m = _add(m, 1)
    end
    last_index = _len(observations) - 1
    path[last_index] = last_state
    idx = last_index
    while idx > 0
      obs = (__tmp18 = observations; __tmp18.is_a?(Hash) ? __tmp18[idx] : _idx(__tmp18, idx))
      prev = (__tmp19 = ptrs; __tmp19.is_a?(Hash) ? __tmp19[key((__tmp20 = path; __tmp20.is_a?(Hash) ? __tmp20[idx] : _idx(__tmp20, idx)), obs)] : _idx(__tmp19, key((__tmp21 = path; __tmp21.is_a?(Hash) ? __tmp21[idx] : _idx(__tmp21, idx)), obs)))
      path[idx - 1] = prev
      idx = idx - 1
    end
    return path
  end
  def join_words(words)
    res = ""
    i = 0
    while i < _len(words)
      if i > 0
        res = _add(res, " ")
      end
      res = _add(res, (__tmp22 = words; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)))
      i = _add(i, 1)
    end
    return res
  end
  $observations = ["normal", "cold", "dizzy"]
  $states = ["Healthy", "Fever"]
  $start_p = {"Healthy" => 0.6, "Fever" => 0.4}
  $trans_p = {"Healthy" => {"Healthy" => 0.7, "Fever" => 0.3}, "Fever" => {"Healthy" => 0.4, "Fever" => 0.6}}
  $emit_p = {"Healthy" => {"normal" => 0.5, "cold" => 0.4, "dizzy" => 0.1}, "Fever" => {"normal" => 0.1, "cold" => 0.3, "dizzy" => 0.6}}
  $result = viterbi($observations, $states, $start_p, $trans_p, $emit_p)
  puts(join_words($result))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
