# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def key(state, obs)
    return _add(_add(state, "|"), obs)
  end
  def viterbi(observations, states, start_p, trans_p, emit_p)
    if observations.length == 0 || states.length == 0
      panic("empty parameters")
    end
    probs = {}
    ptrs = {}
    first_obs = observations[0]
    i = 0
    while i < states.length
      state = states[i]
      probs[key(state, first_obs)] = start_p[state] * emit_p[state][first_obs]
      ptrs[key(state, first_obs)] = ""
      i = _add(i, 1)
    end
    t = 1
    while t < observations.length
      obs = observations[t]
      j = 0
      while j < states.length
        state = states[j]
        max_prob = -1.0
        prev_state = ""
        k = 0
        while k < states.length
          state0 = states[k]
          obs0 = observations[t - 1]
          prob_prev = probs[key(state0, obs0)]
          prob = prob_prev * trans_p[state0][state] * emit_p[state][obs]
          if prob > max_prob
            max_prob = prob
            prev_state = state0
          end
          k = _add(k, 1)
        end
        probs[key(state, obs)] = max_prob
        ptrs[key(state, obs)] = prev_state
        j = _add(j, 1)
      end
      t = _add(t, 1)
    end
    path = []
    n = 0
    while n < observations.length
      path = (path << (""))
      n = _add(n, 1)
    end
    last_obs = observations[observations.length - 1]
    max_final = -1.0
    last_state = ""
    m = 0
    while m < states.length
      state = states[m]
      prob = probs[key(state, last_obs)]
      if prob > max_final
        max_final = prob
        last_state = state
      end
      m = _add(m, 1)
    end
    last_index = observations.length - 1
    path[last_index] = last_state
    idx = last_index
    while idx > 0
      obs = observations[idx]
      prev = ptrs[key(path[idx], obs)]
      path[idx - 1] = prev
      idx = idx - 1
    end
    return path
  end
  def join_words(words)
    res = ""
    i = 0
    while i < words.length
      if i > 0
        res = _add(res, " ")
      end
      res = _add(res, words[i])
      i = _add(i, 1)
    end
    return res
  end
  $observations = ["normal", "cold", "dizzy"]
  $states = ["Healthy", "Fever"]
  $start_p = {"Healthy" => 0.6, "Fever" => 0.4}
  $trans_p = {"Healthy" => {"Healthy" => 0.7, "Fever" => 0.3}, "Fever" => {"Healthy" => 0.4, "Fever" => 0.6}}
  $emit_p = {"Healthy" => {"normal" => 0.5, "cold" => 0.4, "dizzy" => 0.1}, "Fever" => {"normal" => 0.1, "cold" => 0.3, "dizzy" => 0.6}}
  $result = viterbi($observations, $states, $start_p, $trans_p, $emit_p)
  puts(join_words($result))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
