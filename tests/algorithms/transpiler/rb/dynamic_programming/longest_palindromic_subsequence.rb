# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def reverse(s)
    result = ""
    i = s.length - 1
    while i >= 0
      result = _add(result, s[i..._add(i, 1)])
      i = i - 1
    end
    return result
  end
  def max_int(a, b)
    if a > b
      return a
    end
    return b
  end
  def longest_palindromic_subsequence(s)
    rev = reverse(s)
    n = s.length
    m = rev.length
    dp = []
    i = 0
    while i <= n
      row = []
      j = 0
      while j <= m
        row = (row << (0))
        j = _add(j, 1)
      end
      dp = (dp << (row))
      i = _add(i, 1)
    end
    i = 1
    while i <= n
      j = 1
      while j <= m
        a_char = s[i - 1...i]
        b_char = rev[j - 1...j]
        if a_char == b_char
          dp[i][j] = _add(1, dp[i - 1][j - 1])
        else
          dp[i][j] = max_int(dp[i - 1][j], dp[i][j - 1])
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return dp[n][m]
  end
  puts((longest_palindromic_subsequence("bbbab")).to_s)
  puts((longest_palindromic_subsequence("bbabcbcab")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
