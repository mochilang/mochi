# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_nodes(nodes)
    arr = nodes
    i = 1
    while i < _len(arr)
      key_node = (__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      j = i - 1
      while j >= 0
        temp = (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
        if temp.key > key_node.key
          arr[_add(j, 1)] = temp
          j = j - 1
        else
          break
        end
      end
      arr[_add(j, 1)] = key_node
      i = _add(i, 1)
    end
    return arr
  end
  def print_node(n)
    puts(_add(_add(_add(_add("Node(key=", _str(n.key)), ", freq="), _str(n.freq)), ")"))
  end
  def print_binary_search_tree(root, keys, i, j, parent, is_left)
    if i > j || i < 0 || j > _len(root) - 1
      return
    end
    node = (__tmp3 = (__tmp4 = root; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
    if _eq(parent, (-1))
      puts(_add(_str((__tmp5 = keys; __tmp5.is_a?(Hash) ? __tmp5[node] : _idx(__tmp5, node))), " is the root of the binary search tree."))
    else
      if is_left
        puts(_add(_add(_add(_str((__tmp6 = keys; __tmp6.is_a?(Hash) ? __tmp6[node] : _idx(__tmp6, node))), " is the left child of key "), _str(parent)), "."))
      else
        puts(_add(_add(_add(_str((__tmp7 = keys; __tmp7.is_a?(Hash) ? __tmp7[node] : _idx(__tmp7, node))), " is the right child of key "), _str(parent)), "."))
      end
    end
    print_binary_search_tree(root, keys, i, node - 1, (__tmp8 = keys; __tmp8.is_a?(Hash) ? __tmp8[node] : _idx(__tmp8, node)), true)
    print_binary_search_tree(root, keys, _add(node, 1), j, (__tmp9 = keys; __tmp9.is_a?(Hash) ? __tmp9[node] : _idx(__tmp9, node)), false)
  end
  def find_optimal_binary_search_tree(original_nodes)
    nodes = sort_nodes(original_nodes)
    n = _len(nodes)
    keys = []
    freqs = []
    i = 0
    while i < n
      node = (__tmp10 = nodes; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
      keys = (keys + [node.key])
      freqs = (freqs + [node.freq])
      i = _add(i, 1)
    end
    dp = []
    total = []
    root = []
    i = 0
    while i < n
      dp_row = []
      total_row = []
      root_row = []
      j = 0
      while j < n
        if _eq(i, j)
          dp_row = (dp_row + [(__tmp11 = freqs; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))])
          total_row = (total_row + [(__tmp12 = freqs; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))])
          root_row = (root_row + [i])
        else
          dp_row = (dp_row + [0])
          total_row = (total_row + [0])
          root_row = (root_row + [0])
        end
        j = _add(j, 1)
      end
      dp = (dp + [dp_row])
      total = (total + [total_row])
      root = (root + [root_row])
      i = _add(i, 1)
    end
    interval_length = 2
    _INF = 2147483647
    while interval_length <= n
      i = 0
      while i < _add(n - interval_length, 1)
        j = _add(i, interval_length) - 1
        (__tmp13 = dp; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))[j] = _INF
        (__tmp14 = total; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))[j] = _add((__tmp15 = (__tmp16 = total; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[j - 1] : _idx(__tmp15, j - 1)), (__tmp17 = freqs; __tmp17.is_a?(Hash) ? __tmp17[j] : _idx(__tmp17, j)))
        r = (__tmp18 = (__tmp19 = root; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)); __tmp18.is_a?(Hash) ? __tmp18[j - 1] : _idx(__tmp18, j - 1))
        while r <= (__tmp20 = (__tmp21 = root; __tmp21.is_a?(Hash) ? __tmp21[_add(i, 1)] : _idx(__tmp21, _add(i, 1))); __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j))
          left = (!_eq(r, i) ? (__tmp22 = (__tmp23 = dp; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i)); __tmp22.is_a?(Hash) ? __tmp22[r - 1] : _idx(__tmp22, r - 1)) : 0)
          right = (!_eq(r, j) ? (__tmp24 = (__tmp25 = dp; __tmp25.is_a?(Hash) ? __tmp25[_add(r, 1)] : _idx(__tmp25, _add(r, 1))); __tmp24.is_a?(Hash) ? __tmp24[j] : _idx(__tmp24, j)) : 0)
          cost = _add(_add(left, (__tmp26 = (__tmp27 = total; __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i)); __tmp26.is_a?(Hash) ? __tmp26[j] : _idx(__tmp26, j))), right)
          if (__tmp28 = (__tmp29 = dp; __tmp29.is_a?(Hash) ? __tmp29[i] : _idx(__tmp29, i)); __tmp28.is_a?(Hash) ? __tmp28[j] : _idx(__tmp28, j)) > cost
            (__tmp30 = dp; __tmp30.is_a?(Hash) ? __tmp30[i] : _idx(__tmp30, i))[j] = cost
            (__tmp31 = root; __tmp31.is_a?(Hash) ? __tmp31[i] : _idx(__tmp31, i))[j] = r
          end
          r = _add(r, 1)
        end
        i = _add(i, 1)
      end
      interval_length = _add(interval_length, 1)
    end
    puts("Binary search tree nodes:")
    i = 0
    while i < n
      print_node((__tmp32 = nodes; __tmp32.is_a?(Hash) ? __tmp32[i] : _idx(__tmp32, i)))
      i = _add(i, 1)
    end
    puts(_add(_add("\nThe cost of optimal BST for given tree nodes is ", _str((__tmp33 = (__tmp34 = dp; __tmp34.is_a?(Hash) ? __tmp34[0] : _idx(__tmp34, 0)); __tmp33.is_a?(Hash) ? __tmp33[n - 1] : _idx(__tmp33, n - 1)))), "."))
    print_binary_search_tree(root, keys, 0, n - 1, (-1), false)
  end
  def main()
    nodes = [Node.new(key: 12, freq: 8), Node.new(key: 10, freq: 34), Node.new(key: 20, freq: 50), Node.new(key: 42, freq: 3), Node.new(key: 25, freq: 40), Node.new(key: 37, freq: 30)]
    find_optimal_binary_search_tree(nodes)
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Node = Struct.new(:key, :freq, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
