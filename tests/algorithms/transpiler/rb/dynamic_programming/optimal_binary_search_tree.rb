# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_nodes(nodes)
    arr = nodes
    i = 1
    while i < arr.length
      key_node = arr[i]
      j = i - 1
      while j >= 0
        temp = arr[j]
        if temp.key > key_node.key
          arr[_add(j, 1)] = temp
          j = j - 1
        else
          break
        end
      end
      arr[_add(j, 1)] = key_node
      i = _add(i, 1)
    end
    return arr
  end
  def print_node(n)
    puts(_add(_add(_add(_add("Node(key=", (n.key).to_s), ", freq="), (n.freq).to_s), ")"))
  end
  def print_binary_search_tree(root, keys, i, j, parent, is_left)
    if i > j || i < 0 || j > root.length - 1
      return
    end
    node = root[i][j]
    if parent == (-1)
      puts(_add((keys[node]).to_s, " is the root of the binary search tree."))
    else
      if is_left
        puts(_add(_add(_add((keys[node]).to_s, " is the left child of key "), (parent).to_s), "."))
      else
        puts(_add(_add(_add((keys[node]).to_s, " is the right child of key "), (parent).to_s), "."))
      end
    end
    print_binary_search_tree(root, keys, i, node - 1, keys[node], true)
    print_binary_search_tree(root, keys, _add(node, 1), j, keys[node], false)
  end
  def find_optimal_binary_search_tree(original_nodes)
    nodes = sort_nodes(original_nodes)
    n = nodes.length
    keys = []
    freqs = []
    i = 0
    while i < n
      node = nodes[i]
      keys = (keys << (node.key))
      freqs = (freqs << (node.freq))
      i = _add(i, 1)
    end
    dp = []
    total = []
    root = []
    i = 0
    while i < n
      dp_row = []
      total_row = []
      root_row = []
      j = 0
      while j < n
        if i == j
          dp_row = (dp_row << (freqs[i]))
          total_row = (total_row << (freqs[i]))
          root_row = (root_row << (i))
        else
          dp_row = (dp_row << (0))
          total_row = (total_row << (0))
          root_row = (root_row << (0))
        end
        j = _add(j, 1)
      end
      dp = (dp << (dp_row))
      total = (total << (total_row))
      root = (root << (root_row))
      i = _add(i, 1)
    end
    interval_length = 2
    _INF = 2147483647
    while interval_length <= n
      i = 0
      while i < _add(n - interval_length, 1)
        j = _add(i, interval_length) - 1
        dp[i][j] = _INF
        total[i][j] = _add(total[i][j - 1], freqs[j])
        r = root[i][j - 1]
        while r <= root[_add(i, 1)][j]
          left = (r != i ? dp[i][r - 1] : 0)
          right = (r != j ? dp[_add(r, 1)][j] : 0)
          cost = _add(_add(left, total[i][j]), right)
          if dp[i][j] > cost
            dp[i][j] = cost
            root[i][j] = r
          end
          r = _add(r, 1)
        end
        i = _add(i, 1)
      end
      interval_length = _add(interval_length, 1)
    end
    puts("Binary search tree nodes:")
    i = 0
    while i < n
      print_node(nodes[i])
      i = _add(i, 1)
    end
    puts(_add(_add("\nThe cost of optimal BST for given tree nodes is ", (dp[0][n - 1]).to_s), "."))
    print_binary_search_tree(root, keys, 0, n - 1, (-1), false)
  end
  def main()
    nodes = [Node.new(key: 12, freq: 8), Node.new(key: 10, freq: 34), Node.new(key: 20, freq: 50), Node.new(key: 42, freq: 3), Node.new(key: 25, freq: 40), Node.new(key: 37, freq: 30)]
    find_optimal_binary_search_tree(nodes)
  end
  Node = Struct.new(:key, :freq, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
