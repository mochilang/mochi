# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def count_assignments(person, task_performed, used)
    if person == task_performed.length
      return 1
    end
    total = 0
    tasks = task_performed[person]
    i = 0
    while i < tasks.length
      t = tasks[i]
      if !(used.include?(t))
        total = _add(total, count_assignments(_add(person, 1), task_performed, (used << (t))))
      end
      i = _add(i, 1)
    end
    return total
  end
  def count_no_of_ways(task_performed)
    return count_assignments(0, task_performed, [])
  end
  def main()
    task_performed = [[1, 3, 4], [1, 2, 5], [3, 4]]
    puts((count_no_of_ways(task_performed)).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
