# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr + [value])
      i = _add(i, 1)
    end
    return arr
  end
  def max_int(a, b)
    if a > b
      return a
    else
      return b
    end
  end
  def min_int(a, b)
    if a < b
      return a
    else
      return b
    end
  end
  def min3(a, b, c)
    return min_int(min_int(a, b), c)
  end
  def minimum_tickets_cost(days, costs)
    if _eq(_len(days), 0)
      return 0
    end
    last_day = (__tmp1 = days; __tmp1.is_a?(Hash) ? __tmp1[_len(days) - 1] : _idx(__tmp1, _len(days) - 1))
    dp = make_list(_add(last_day, 1), 0)
    day_index = 0
    d = 1
    while d <= last_day
      if day_index < _len(days) && _eq(d, (__tmp2 = days; __tmp2.is_a?(Hash) ? __tmp2[day_index] : _idx(__tmp2, day_index)))
        cost1 = _add((__tmp3 = dp; __tmp3.is_a?(Hash) ? __tmp3[d - 1] : _idx(__tmp3, d - 1)), (__tmp4 = costs; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)))
        cost7 = _add((__tmp5 = dp; __tmp5.is_a?(Hash) ? __tmp5[max_int(0, d - 7)] : _idx(__tmp5, max_int(0, d - 7))), (__tmp6 = costs; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1)))
        cost30 = _add((__tmp7 = dp; __tmp7.is_a?(Hash) ? __tmp7[max_int(0, d - 30)] : _idx(__tmp7, max_int(0, d - 30))), (__tmp8 = costs; __tmp8.is_a?(Hash) ? __tmp8[2] : _idx(__tmp8, 2)))
        dp[d] = min3(cost1, cost7, cost30)
        day_index = _add(day_index, 1)
      else
        dp[d] = (__tmp9 = dp; __tmp9.is_a?(Hash) ? __tmp9[d - 1] : _idx(__tmp9, d - 1))
      end
      d = _add(d, 1)
    end
    return (__tmp10 = dp; __tmp10.is_a?(Hash) ? __tmp10[last_day] : _idx(__tmp10, last_day))
  end
  puts(_str(minimum_tickets_cost([1, 4, 6, 7, 8, 20], [2, 7, 15])))
  puts(_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15])))
  puts(_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 90, 150])))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
