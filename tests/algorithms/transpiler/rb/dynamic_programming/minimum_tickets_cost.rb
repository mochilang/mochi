# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr << (value))
      i = _add(i, 1)
    end
    return arr
  end
  def max_int(a, b)
    if a > b
      return a
    else
      return b
    end
  end
  def min_int(a, b)
    if a < b
      return a
    else
      return b
    end
  end
  def min3(a, b, c)
    return min_int(min_int(a, b), c)
  end
  def minimum_tickets_cost(days, costs)
    if days.length == 0
      return 0
    end
    last_day = days[days.length - 1]
    dp = make_list(_add(last_day, 1), 0)
    day_index = 0
    d = 1
    while d <= last_day
      if day_index < days.length && d == days[day_index]
        cost1 = _add(dp[d - 1], costs[0])
        cost7 = _add(dp[max_int(0, d - 7)], costs[1])
        cost30 = _add(dp[max_int(0, d - 30)], costs[2])
        dp[d] = min3(cost1, cost7, cost30)
        day_index = _add(day_index, 1)
      else
        dp[d] = dp[d - 1]
      end
      d = _add(d, 1)
    end
    return dp[last_day]
  end
  puts((minimum_tickets_cost([1, 4, 6, 7, 8, 20], [2, 7, 15])).to_s)
  puts((minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15])).to_s)
  puts((minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 90, 150])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
