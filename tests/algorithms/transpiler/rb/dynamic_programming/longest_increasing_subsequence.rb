# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def longest_subsequence(xs)
    n = xs.length
    if n <= 1
      return xs
    end
    pivot = xs[0]
    is_found = false
    i = 1
    longest_subseq = []
    while !is_found && i < n
      if xs[i] < pivot
        is_found = true
        temp_array = xs[i...n]
        temp_array = longest_subsequence(temp_array)
        if temp_array.length > longest_subseq.length
          longest_subseq = temp_array
        end
      else
        i = _add(i, 1)
      end
    end
    filtered = []
    j = 1
    while j < n
      if xs[j] >= pivot
        filtered = (filtered << (xs[j]))
      end
      j = _add(j, 1)
    end
    candidate = []
    candidate = (candidate << (pivot))
    candidate = _add(candidate, longest_subsequence(filtered))
    if candidate.length > longest_subseq.length
      return candidate
    else
      return longest_subseq
    end
  end
  # test examples
  raise 'assertion failed' unless longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == [10, 22, 33, 41, 60, 80]
  raise 'assertion failed' unless longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9]) == [1, 2, 3, 9]
  raise 'assertion failed' unless longest_subsequence([28, 26, 12, 23, 35, 39]) == [12, 23, 35, 39]
  raise 'assertion failed' unless longest_subsequence([9, 8, 7, 6, 5, 7]) == [5, 7]
  raise 'assertion failed' unless longest_subsequence([1, 1, 1]) == [1, 1, 1]
  raise 'assertion failed' unless longest_subsequence([]) == []
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
