# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def prefix_sum(arr, queries)
    dp = []
    i = 0
    while i < arr.length
      if i == 0
        dp = (dp << (arr[0]))
      else
        dp = (dp << (_add(dp[i - 1], arr[i])))
      end
      i = _add(i, 1)
    end
    result = []
    j = 0
    while j < queries.length
      q = queries[j]
      sum = dp[q.right]
      if q.left > 0
        sum = sum - dp[q.left - 1]
      end
      result = (result << (sum))
      j = _add(j, 1)
    end
    return result
  end
  Query = Struct.new(:left, :right, keyword_init: true)
  $arr1 = [1, 4, 6, 2, 61, 12]
  $queries1 = [Query.new(left: 2, right: 5), Query.new(left: 1, right: 5), Query.new(left: 3, right: 4)]
  puts(((x = prefix_sum($arr1, $queries1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $arr2 = [4, 2, 1, 6, 3]
  $queries2 = [Query.new(left: 3, right: 4), Query.new(left: 1, right: 3), Query.new(left: 0, right: 2)]
  puts(((x = prefix_sum($arr2, $queries2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
