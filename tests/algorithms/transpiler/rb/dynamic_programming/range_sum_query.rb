# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def prefix_sum(arr, queries)
    dp = []
    i = 0
    while i < _len(arr)
      if _eq(i, 0)
        dp = (dp + [(__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))])
      else
        dp = (dp + [_add((__tmp2 = dp; __tmp2.is_a?(Hash) ? __tmp2[i - 1] : _idx(__tmp2, i - 1)), (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))])
      end
      i = _add(i, 1)
    end
    result = []
    j = 0
    while j < _len(queries)
      q = (__tmp4 = queries; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))
      sum = (__tmp5 = dp; __tmp5.is_a?(Hash) ? __tmp5[q.right] : _idx(__tmp5, q.right))
      if q.left > 0
        sum = sum - (__tmp6 = dp; __tmp6.is_a?(Hash) ? __tmp6[q.left - 1] : _idx(__tmp6, q.left - 1))
      end
      result = (result + [sum])
      j = _add(j, 1)
    end
    return result
  end
  Object.send(:remove_const, :Query) if Object.const_defined?(:Query)
  Query = Struct.new(:left, :right, keyword_init: true)
  $arr1 = [1, 4, 6, 2, 61, 12]
  $queries1 = [Query.new(left: 2, right: 5), Query.new(left: 1, right: 5), Query.new(left: 3, right: 4)]
  puts(((x = prefix_sum($arr1, $queries1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $arr2 = [4, 2, 1, 6, 3]
  $queries2 = [Query.new(left: 3, right: 4), Query.new(left: 1, right: 3), Query.new(left: 0, right: 2)]
  puts(((x = prefix_sum($arr2, $queries2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
