# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def zeros_matrix(rows, cols)
    matrix = []
    i = 0
    while i <= rows
      row = []
      j = 0
      while j <= cols
        row = (row << (0))
        j = _add(j, 1)
      end
      matrix = (matrix << (row))
      i = _add(i, 1)
    end
    return matrix
  end
  def longest_common_subsequence(x, y)
    m = x.length
    n = y.length
    dp = zeros_matrix(m, n)
    i = 1
    while i <= m
      j = 1
      while j <= n
        if x[i - 1] == y[j - 1]
          dp[i][j] = _add(dp[i - 1][j - 1], 1)
        else
          if dp[i - 1][j] > dp[i][j - 1]
            dp[i][j] = dp[i - 1][j]
          else
            dp[i][j] = dp[i][j - 1]
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    seq = ""
    i2 = m
    j2 = n
    while i2 > 0 && j2 > 0
      if x[i2 - 1] == y[j2 - 1]
        seq = _add(x[i2 - 1], seq)
        i2 = i2 - 1
        j2 = j2 - 1
      else
        if dp[i2 - 1][j2] >= dp[i2][j2 - 1]
          i2 = i2 - 1
        else
          j2 = j2 - 1
        end
      end
    end
    return LcsResult.new(length: dp[m][n], sequence: seq)
  end
  LcsResult = Struct.new(:length, :sequence, keyword_init: true)
  $a = "AGGTAB"
  $b = "GXTXAYB"
  $res = longest_common_subsequence($a, $b)
  puts(_add(_add(_add("len = ", ($res.length).to_s), ", sub-sequence = "), $res.sequence))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
