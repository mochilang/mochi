# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def zeros_matrix(rows, cols)
    matrix = []
    i = 0
    while i <= rows
      row = []
      j = 0
      while j <= cols
        row = (row + [0])
        j = _add(j, 1)
      end
      matrix = (matrix + [row])
      i = _add(i, 1)
    end
    return matrix
  end
  def longest_common_subsequence(x, y)
    m = _len(x)
    n = _len(y)
    dp = zeros_matrix(m, n)
    i = 1
    while i <= m
      j = 1
      while j <= n
        if _eq((__tmp1 = x; __tmp1.is_a?(Hash) ? __tmp1[i - 1] : _idx(__tmp1, i - 1)), (__tmp2 = y; __tmp2.is_a?(Hash) ? __tmp2[j - 1] : _idx(__tmp2, j - 1)))
          (__tmp3 = dp; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))[j] = _add((__tmp4 = (__tmp5 = dp; __tmp5.is_a?(Hash) ? __tmp5[i - 1] : _idx(__tmp5, i - 1)); __tmp4.is_a?(Hash) ? __tmp4[j - 1] : _idx(__tmp4, j - 1)), 1)
        else
          if (__tmp6 = (__tmp7 = dp; __tmp7.is_a?(Hash) ? __tmp7[i - 1] : _idx(__tmp7, i - 1)); __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)) > (__tmp8 = (__tmp9 = dp; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[j - 1] : _idx(__tmp8, j - 1))
            (__tmp10 = dp; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))[j] = (__tmp11 = (__tmp12 = dp; __tmp12.is_a?(Hash) ? __tmp12[i - 1] : _idx(__tmp12, i - 1)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
          else
            (__tmp13 = dp; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))[j] = (__tmp14 = (__tmp15 = dp; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)); __tmp14.is_a?(Hash) ? __tmp14[j - 1] : _idx(__tmp14, j - 1))
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    seq = ""
    i2 = m
    j2 = n
    while i2 > 0 && j2 > 0
      if _eq((__tmp16 = x; __tmp16.is_a?(Hash) ? __tmp16[i2 - 1] : _idx(__tmp16, i2 - 1)), (__tmp17 = y; __tmp17.is_a?(Hash) ? __tmp17[j2 - 1] : _idx(__tmp17, j2 - 1)))
        seq = _add((__tmp18 = x; __tmp18.is_a?(Hash) ? __tmp18[i2 - 1] : _idx(__tmp18, i2 - 1)), seq)
        i2 = i2 - 1
        j2 = j2 - 1
      else
        if (__tmp19 = (__tmp20 = dp; __tmp20.is_a?(Hash) ? __tmp20[i2 - 1] : _idx(__tmp20, i2 - 1)); __tmp19.is_a?(Hash) ? __tmp19[j2] : _idx(__tmp19, j2)) >= (__tmp21 = (__tmp22 = dp; __tmp22.is_a?(Hash) ? __tmp22[i2] : _idx(__tmp22, i2)); __tmp21.is_a?(Hash) ? __tmp21[j2 - 1] : _idx(__tmp21, j2 - 1))
          i2 = i2 - 1
        else
          j2 = j2 - 1
        end
      end
    end
    return LcsResult.new(length: (__tmp23 = (__tmp24 = dp; __tmp24.is_a?(Hash) ? __tmp24[m] : _idx(__tmp24, m)); __tmp23.is_a?(Hash) ? __tmp23[n] : _idx(__tmp23, n)), sequence: seq)
  end
  Object.send(:remove_const, :LcsResult) if Object.const_defined?(:LcsResult)
  LcsResult = Struct.new(:length, :sequence, keyword_init: true)
  $a = "AGGTAB"
  $b = "GXTXAYB"
  $res = longest_common_subsequence($a, $b)
  puts(_add(_add(_add("len = ", _str($res.length)), ", sub-sequence = "), $res.sequence))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
