# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ceil_index(v, left, right, key)
    l = left
    r = right
    while r - l > 1
      middle = (_add(l, r)) / 2
      if v[middle] >= key
        r = middle
      else
        l = middle
      end
    end
    return r
  end
  def longest_increasing_subsequence_length(v)
    if v.length == 0
      return 0
    end
    tail = []
    i = 0
    while i < v.length
      tail = (tail << (0))
      i = _add(i, 1)
    end
    length = 1
    tail[0] = v[0]
    j = 1
    while j < v.length
      if v[j] < tail[0]
        tail[0] = v[j]
      else
        if v[j] > tail[length - 1]
          tail[length] = v[j]
          length = _add(length, 1)
        else
          idx = ceil_index(tail, -1, length - 1, v[j])
          tail[idx] = v[j]
        end
      end
      j = _add(j, 1)
    end
    return length
  end
  def main()
    example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6]
    example2 = []
    example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
    example4 = [5, 4, 3, 2, 1]
    puts(longest_increasing_subsequence_length(example1))
    puts(longest_increasing_subsequence_length(example2))
    puts(longest_increasing_subsequence_length(example3))
    puts(longest_increasing_subsequence_length(example4))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
