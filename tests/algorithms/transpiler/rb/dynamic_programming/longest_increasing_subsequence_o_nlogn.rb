# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def ceil_index(v, left, right, key)
    l = left
    r = right
    while r - l > 1
      middle = (_add(l, r)) / 2
      if (__tmp1 = v; __tmp1.is_a?(Hash) ? __tmp1[middle] : _idx(__tmp1, middle)) >= key
        r = middle
      else
        l = middle
      end
    end
    return r
  end
  def longest_increasing_subsequence_length(v)
    if _eq(_len(v), 0)
      return 0
    end
    tail = []
    i = 0
    while i < _len(v)
      tail = (tail + [0])
      i = _add(i, 1)
    end
    length = 1
    tail[0] = (__tmp2 = v; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))
    j = 1
    while j < _len(v)
      if (__tmp3 = v; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)) < (__tmp4 = tail; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
        tail[0] = (__tmp5 = v; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))
      else
        if (__tmp6 = v; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)) > (__tmp7 = tail; __tmp7.is_a?(Hash) ? __tmp7[length - 1] : _idx(__tmp7, length - 1))
          tail[length] = (__tmp8 = v; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j))
          length = _add(length, 1)
        else
          idx = ceil_index(tail, -1, length - 1, (__tmp9 = v; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)))
          tail[idx] = (__tmp10 = v; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j))
        end
      end
      j = _add(j, 1)
    end
    return length
  end
  def main()
    example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6]
    example2 = []
    example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
    example4 = [5, 4, 3, 2, 1]
    puts(longest_increasing_subsequence_length(example1))
    puts(longest_increasing_subsequence_length(example2))
    puts(longest_increasing_subsequence_length(example3))
    puts(longest_increasing_subsequence_length(example4))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
