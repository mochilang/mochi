# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_list(nums)
    arr = nums
    i = 1
    while i < _len(arr)
      key = (__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      j = i - 1
      while j >= 0 && (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)) > key
        arr[_add(j, 1)] = (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
        j = j - 1
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return arr
  end
  def largest_divisible_subset(items)
    if _eq(_len(items), 0)
      return []
    end
    nums = sort_list(items)
    n = _len(nums)
    memo = []
    prev = []
    i = 0
    while i < n
      memo = (memo + [1])
      prev = (prev + [i])
      i = _add(i, 1)
    end
    i = 0
    while i < n
      j = 0
      while j < i
        if (_eq((__tmp4 = nums; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)), 0) || _eq((__tmp5 = nums; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)) % (__tmp6 = nums; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)), 0)) && _add((__tmp7 = memo; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)), 1) > (__tmp8 = memo; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
          memo[i] = _add((__tmp9 = memo; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)), 1)
          prev[i] = j
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    ans = 0 - 1
    last_index = 0 - 1
    i = 0
    while i < n
      if (__tmp10 = memo; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) > ans
        ans = (__tmp11 = memo; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
        last_index = i
      end
      i = _add(i, 1)
    end
    if _eq(last_index, 0 - 1)
      return []
    end
    result = [(__tmp12 = nums; __tmp12.is_a?(Hash) ? __tmp12[last_index] : _idx(__tmp12, last_index))]
    while !_eq((__tmp13 = prev; __tmp13.is_a?(Hash) ? __tmp13[last_index] : _idx(__tmp13, last_index)), last_index)
      last_index = (__tmp14 = prev; __tmp14.is_a?(Hash) ? __tmp14[last_index] : _idx(__tmp14, last_index))
      result = (result + [(__tmp15 = nums; __tmp15.is_a?(Hash) ? __tmp15[last_index] : _idx(__tmp15, last_index))])
    end
    return result
  end
  def main()
    items = [1, 16, 7, 8, 4]
    subset = largest_divisible_subset(items)
    puts(_add(_add(_add(_add("The longest divisible subset of ", ((x = items); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " is "), ((x = subset); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "."))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
