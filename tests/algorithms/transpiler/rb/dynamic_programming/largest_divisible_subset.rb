# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_list(nums)
    arr = nums
    i = 1
    while i < arr.length
      key = arr[i]
      j = i - 1
      while j >= 0 && arr[j] > key
        arr[_add(j, 1)] = arr[j]
        j = j - 1
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return arr
  end
  def largest_divisible_subset(items)
    if items.length == 0
      return []
    end
    nums = sort_list(items)
    n = nums.length
    memo = []
    prev = []
    i = 0
    while i < n
      memo = (memo << (1))
      prev = (prev << (i))
      i = _add(i, 1)
    end
    i = 0
    while i < n
      j = 0
      while j < i
        if (nums[j] == 0 || nums[i] % nums[j] == 0) && _add(memo[j], 1) > memo[i]
          memo[i] = _add(memo[j], 1)
          prev[i] = j
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    ans = 0 - 1
    last_index = 0 - 1
    i = 0
    while i < n
      if memo[i] > ans
        ans = memo[i]
        last_index = i
      end
      i = _add(i, 1)
    end
    if last_index == 0 - 1
      return []
    end
    result = [nums[last_index]]
    while prev[last_index] != last_index
      last_index = prev[last_index]
      result = (result << (nums[last_index]))
    end
    return result
  end
  def main()
    items = [1, 16, 7, 8, 4]
    subset = largest_divisible_subset(items)
    puts(_add(_add(_add(_add("The longest divisible subset of ", ((x = items); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " is "), ((x = subset); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), "."))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
