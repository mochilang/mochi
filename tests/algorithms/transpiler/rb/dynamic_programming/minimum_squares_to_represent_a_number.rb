# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr << (value))
      i = _add(i, 1)
    end
    return arr
  end
  def int_sqrt(n)
    r = 0
    while (_add(r, 1)) * (_add(r, 1)) <= n
      r = _add(r, 1)
    end
    return r
  end
  def minimum_squares_to_represent_a_number(number)
    if number < 0
      panic("the value of input must not be a negative number")
    end
    if number == 0
      return 1
    end
    answers = make_list(_add(number, 1), -1)
    answers[0] = 0
    i = 1
    while i <= number
      answer = i
      root = int_sqrt(i)
      j = 1
      while j <= root
        current_answer = _add(1, answers[i - j * j])
        if current_answer < answer
          answer = current_answer
        end
        j = _add(j, 1)
      end
      answers[i] = answer
      i = _add(i, 1)
    end
    return answers[number]
  end
  puts(minimum_squares_to_represent_a_number(25))
  puts(minimum_squares_to_represent_a_number(21))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
