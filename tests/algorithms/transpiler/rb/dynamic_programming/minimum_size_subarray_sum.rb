# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def minimum_subarray_sum(target, numbers)
    n = numbers.length
    if n == 0
      return 0
    end
    if target == 0
      i = 0
      while i < n
        if numbers[i] == 0
          return 0
        end
        i = _add(i, 1)
      end
    end
    left = 0
    right = 0
    curr_sum = 0
    min_len = _add(n, 1)
    while right < n
      curr_sum = _add(curr_sum, numbers[right])
      while curr_sum >= target && left <= right
        current_len = _add(right - left, 1)
        if current_len < min_len
          min_len = current_len
        end
        curr_sum = curr_sum - numbers[left]
        left = _add(left, 1)
      end
      right = _add(right, 1)
    end
    if min_len == _add(n, 1)
      return 0
    end
    return min_len
  end
  puts((minimum_subarray_sum(7, [2, 3, 1, 2, 4, 3])).to_s)
  puts((minimum_subarray_sum(7, [2, 3, -1, 2, 4, -3])).to_s)
  puts((minimum_subarray_sum(11, [1, 1, 1, 1, 1, 1, 1, 1])).to_s)
  puts((minimum_subarray_sum(0, [1, 2, 3])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
