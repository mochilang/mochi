# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def longest_common_substring(text1, text2)
    if text1.length == 0 || text2.length == 0
      return ""
    end
    m = text1.length
    n = text2.length
    dp = []
    i = 0
    while i < _add(m, 1)
      row = []
      j = 0
      while j < _add(n, 1)
        row = (row << (0))
        j = _add(j, 1)
      end
      dp = (dp << (row))
      i = _add(i, 1)
    end
    end_pos = 0
    max_len = 0
    ii = 1
    while ii <= m
      jj = 1
      while jj <= n
        if text1[ii - 1...ii] == text2[jj - 1...jj]
          dp[ii][jj] = _add(1, dp[ii - 1][jj - 1])
          if dp[ii][jj] > max_len
            max_len = dp[ii][jj]
            end_pos = ii
          end
        end
        jj = _add(jj, 1)
      end
      ii = _add(ii, 1)
    end
    return text1[end_pos - max_len...end_pos]
  end
  puts(longest_common_substring("abcdef", "xabded"))
  puts("\n")
  puts(longest_common_substring("zxabcdezy", "yzabcdezx"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
