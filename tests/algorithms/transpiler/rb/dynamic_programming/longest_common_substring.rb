# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def longest_common_substring(text1, text2)
    if _eq(_len(text1), 0) || _eq(_len(text2), 0)
      return ""
    end
    m = _len(text1)
    n = _len(text2)
    dp = []
    i = 0
    while i < _add(m, 1)
      row = []
      j = 0
      while j < _add(n, 1)
        row = (row + [0])
        j = _add(j, 1)
      end
      dp = (dp + [row])
      i = _add(i, 1)
    end
    end_pos = 0
    max_len = 0
    ii = 1
    while ii <= m
      jj = 1
      while jj <= n
        if _eq(text1[ii - 1...ii], text2[jj - 1...jj])
          (__tmp1 = dp; __tmp1.is_a?(Hash) ? __tmp1[ii] : _idx(__tmp1, ii))[jj] = _add(1, (__tmp2 = (__tmp3 = dp; __tmp3.is_a?(Hash) ? __tmp3[ii - 1] : _idx(__tmp3, ii - 1)); __tmp2.is_a?(Hash) ? __tmp2[jj - 1] : _idx(__tmp2, jj - 1)))
          if (__tmp4 = (__tmp5 = dp; __tmp5.is_a?(Hash) ? __tmp5[ii] : _idx(__tmp5, ii)); __tmp4.is_a?(Hash) ? __tmp4[jj] : _idx(__tmp4, jj)) > max_len
            max_len = (__tmp6 = (__tmp7 = dp; __tmp7.is_a?(Hash) ? __tmp7[ii] : _idx(__tmp7, ii)); __tmp6.is_a?(Hash) ? __tmp6[jj] : _idx(__tmp6, jj))
            end_pos = ii
          end
        end
        jj = _add(jj, 1)
      end
      ii = _add(ii, 1)
    end
    return text1[end_pos - max_len...end_pos]
  end
  puts(longest_common_substring("abcdef", "xabded"))
  puts("\n")
  puts(longest_common_substring("zxabcdezy", "yzabcdezx"))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
