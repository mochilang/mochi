# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_bool_list(n)
    row = []
    i = 0
    while i < n
      row = (row << (false))
      i = _add(i, 1)
    end
    return row
  end
  def make_bool_matrix(rows, cols)
    matrix = []
    i = 0
    while i < rows
      matrix = (matrix << (make_bool_list(cols)))
      i = _add(i, 1)
    end
    return matrix
  end
  def is_match(s, p)
    n = s.length
    m = p.length
    dp = make_bool_matrix(_add(n, 1), _add(m, 1))
    dp[0][0] = true
    j = 1
    while j <= m
      if p[j - 1...j] == "*"
        dp[0][j] = dp[0][j - 1]
      end
      j = _add(j, 1)
    end
    i = 1
    while i <= n
      j2 = 1
      while j2 <= m
        pc = p[j2 - 1...j2]
        sc = s[i - 1...i]
        if pc == sc || pc == "?"
          dp[i][j2] = dp[i - 1][j2 - 1]
        else
          if pc == "*"
            if dp[i - 1][j2] || dp[i][j2 - 1]
              dp[i][j2] = true
            end
          end
        end
        j2 = _add(j2, 1)
      end
      i = _add(i, 1)
    end
    return dp[n][m]
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  print_bool(is_match("abc", "a*c"))
  print_bool(is_match("abc", "a*d"))
  print_bool(is_match("baaabab", "*****ba*****ab"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
