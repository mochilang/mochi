# Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_bool_list(n)
    row = []
    i = 0
    while i < n
      row = (row + [false])
      i = _add(i, 1)
    end
    return row
  end
  def make_bool_matrix(rows, cols)
    matrix = []
    i = 0
    while i < rows
      matrix = (matrix + [make_bool_list(cols)])
      i = _add(i, 1)
    end
    return matrix
  end
  def is_match(s, p)
    n = _len(s)
    m = _len(p)
    dp = make_bool_matrix(_add(n, 1), _add(m, 1))
    (__tmp1 = dp; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))[0] = true
    j = 1
    while j <= m
      if _eq(p[j - 1...j], "*")
        (__tmp2 = dp; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))[j] = (__tmp3 = (__tmp4 = dp; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)); __tmp3.is_a?(Hash) ? __tmp3[j - 1] : _idx(__tmp3, j - 1))
      end
      j = _add(j, 1)
    end
    i = 1
    while i <= n
      j2 = 1
      while j2 <= m
        pc = p[j2 - 1...j2]
        sc = s[i - 1...i]
        if _eq(pc, sc) || _eq(pc, "?")
          (__tmp5 = dp; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))[j2] = (__tmp6 = (__tmp7 = dp; __tmp7.is_a?(Hash) ? __tmp7[i - 1] : _idx(__tmp7, i - 1)); __tmp6.is_a?(Hash) ? __tmp6[j2 - 1] : _idx(__tmp6, j2 - 1))
        else
          if _eq(pc, "*")
            if (__tmp8 = (__tmp9 = dp; __tmp9.is_a?(Hash) ? __tmp9[i - 1] : _idx(__tmp9, i - 1)); __tmp8.is_a?(Hash) ? __tmp8[j2] : _idx(__tmp8, j2)) || (__tmp10 = (__tmp11 = dp; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)); __tmp10.is_a?(Hash) ? __tmp10[j2 - 1] : _idx(__tmp10, j2 - 1))
              (__tmp12 = dp; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))[j2] = true
            end
          end
        end
        j2 = _add(j2, 1)
      end
      i = _add(i, 1)
    end
    return (__tmp13 = (__tmp14 = dp; __tmp14.is_a?(Hash) ? __tmp14[n] : _idx(__tmp14, n)); __tmp13.is_a?(Hash) ? __tmp13[m] : _idx(__tmp13, m))
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  print_bool(is_match("abc", "a*c"))
  print_bool(is_match("abc", "a*d"))
  print_bool(is_match("baaabab", "*****ba*****ab"))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
