# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def copy_list(src)
    result = []
    i = 0
    while i < src.length
      result = (result << (src[i]))
      i = _add(i, 1)
    end
    return result
  end
  def subset_combinations(elements, n)
    r = elements.length
    if n > r
      return []
    end
    dp = []
    i = 0
    while i <= r
      dp = (dp << ([]))
      i = _add(i, 1)
    end
    dp[0] = (dp[0] << ([]))
    i = 1
    while i <= r
      j = i
      while j > 0
        prevs = dp[j - 1]
        k = 0
        while k < prevs.length
          prev = prevs[k]
          comb = copy_list(prev)
          comb = (comb << (elements[i - 1]))
          dp[j] = (dp[j] << (comb))
          k = _add(k, 1)
        end
        j = j - 1
      end
      i = _add(i, 1)
    end
    return dp[n]
  end
  puts(((x = subset_combinations([10, 20, 30, 40], 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
