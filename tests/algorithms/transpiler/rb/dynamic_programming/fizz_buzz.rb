# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def fizz_buzz(number, iterations)
    if number < 1
      panic("starting number must be an integer and be more than 0")
    end
    if iterations < 1
      panic("Iterations must be done more than 0 times to play FizzBuzz")
    end
    out = ""
    n = number
    while n <= iterations
      if n % 3 == 0
        out = _add(out, "Fizz")
      end
      if n % 5 == 0
        out = _add(out, "Buzz")
      end
      if n % 3 != 0 && n % 5 != 0
        out = _add(out, (n).to_s)
      end
      out = _add(out, " ")
      n = _add(n, 1)
    end
    return out
  end
  puts(fizz_buzz(1, 7))
  puts(fizz_buzz(1, 15))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
