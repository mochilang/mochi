# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_graph(n)
    dp = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if i == j
          row = (row << (0))
        else
          row = (row << ($INF))
        end
        j = _add(j, 1)
      end
      dp = (dp << (row))
      i = _add(i, 1)
    end
    return Graph.new(n: n, dp: dp)
  end
  def add_edge(g, u, v, w)
    dp = g.dp
    row = dp[u]
    row[v] = w
    dp[u] = row
    g["dp"] = dp
  end
  def floyd_warshall(g)
    dp = g.dp
    k = 0
    while k < g.n
      i = 0
      while i < g.n
        j = 0
        while j < g.n
          alt = _add(dp[i][k], dp[k][j])
          row = dp[i]
          if alt < row[j]
            row[j] = alt
            dp[i] = row
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      k = _add(k, 1)
    end
    g["dp"] = dp
  end
  def show_min(g, u, v)
    return g.dp[u][v]
  end
  $INF = 1000000000
  Graph = Struct.new(:n, :dp, keyword_init: true)
  $graph = new_graph(5)
  add_edge($graph, 0, 2, 9)
  add_edge($graph, 0, 4, 10)
  add_edge($graph, 1, 3, 5)
  add_edge($graph, 2, 3, 7)
  add_edge($graph, 3, 0, 10)
  add_edge($graph, 3, 1, 2)
  add_edge($graph, 3, 2, 1)
  add_edge($graph, 3, 4, 6)
  add_edge($graph, 4, 1, 3)
  add_edge($graph, 4, 2, 4)
  add_edge($graph, 4, 3, 9)
  floyd_warshall($graph)
  puts((show_min($graph, 1, 4)).to_s)
  puts((show_min($graph, 0, 3)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
