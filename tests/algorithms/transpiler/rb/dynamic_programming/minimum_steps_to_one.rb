# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr + [value])
      i = _add(i, 1)
    end
    return arr
  end
  def min_int(a, b)
    if a < b
      return a
    end
    return b
  end
  def min_steps_to_one(number)
    if number <= 0
      return 0
    end
    table = make_list(_add(number, 1), _add(number, 1))
    table[1] = 0
    i = 1
    while i < number
      table[_add(i, 1)] = min_int((__tmp1 = table; __tmp1.is_a?(Hash) ? __tmp1[_add(i, 1)] : _idx(__tmp1, _add(i, 1))), _add((__tmp2 = table; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), 1))
      if i * 2 <= number
        table[i * 2] = min_int((__tmp3 = table; __tmp3.is_a?(Hash) ? __tmp3[i * 2] : _idx(__tmp3, i * 2)), _add((__tmp4 = table; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), 1))
      end
      if i * 3 <= number
        table[i * 3] = min_int((__tmp5 = table; __tmp5.is_a?(Hash) ? __tmp5[i * 3] : _idx(__tmp5, i * 3)), _add((__tmp6 = table; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)), 1))
      end
      i = _add(i, 1)
    end
    return (__tmp7 = table; __tmp7.is_a?(Hash) ? __tmp7[number] : _idx(__tmp7, number))
  end
  puts(_str(min_steps_to_one(10)))
  puts(_str(min_steps_to_one(15)))
  puts(_str(min_steps_to_one(6)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
