# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def score_function(source_char, target_char, match_score, mismatch_score, gap_score)
    if _eq(source_char, "-") || _eq(target_char, "-")
      return gap_score
    end
    if _eq(source_char, target_char)
      return match_score
    end
    return mismatch_score
  end
  def smith_waterman(query, subject, match_score, mismatch_score, gap_score)
    q = query.upcase()
    s = subject.upcase()
    m = _len(q)
    n = _len(s)
    score = []
    (0...(_add(m, 1))).each do |_|
      row = []
      (0...(_add(n, 1))).each do |unused2|
        row = (row + [0])
      end
      score = (score + [row])
    end
    (1...(_add(m, 1))).each do |i|
      (1...(_add(n, 1))).each do |j|
        qc = q[i - 1...i]
        sc = s[j - 1...j]
        diag = _add((__tmp1 = (__tmp2 = score; __tmp2.is_a?(Hash) ? __tmp2[i - 1] : _idx(__tmp2, i - 1)); __tmp1.is_a?(Hash) ? __tmp1[j - 1] : _idx(__tmp1, j - 1)), score_function(qc, sc, match_score, mismatch_score, gap_score))
        delete = _add((__tmp3 = (__tmp4 = score; __tmp4.is_a?(Hash) ? __tmp4[i - 1] : _idx(__tmp4, i - 1)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)), gap_score)
        insert = _add((__tmp5 = (__tmp6 = score; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)); __tmp5.is_a?(Hash) ? __tmp5[j - 1] : _idx(__tmp5, j - 1)), gap_score)
        max_val = 0
        if diag > max_val
          max_val = diag
        end
        if delete > max_val
          max_val = delete
        end
        if insert > max_val
          max_val = insert
        end
        (__tmp7 = score; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))[j] = max_val
      end
    end
    return score
  end
  def traceback(score, query, subject, match_score, mismatch_score, gap_score)
    q = query.upcase()
    s = subject.upcase()
    max_value = 0
    i_max = 0
    j_max = 0
    (0..._len(score)).each do |i|
      (0..._len((__tmp8 = score; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))).each do |j|
        if (__tmp9 = (__tmp10 = score; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)) > max_value
          max_value = (__tmp11 = (__tmp12 = score; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
          i_max = i
          j_max = j
        end
      end
    end
    i = i_max
    j = j_max
    align1 = ""
    align2 = ""
    gap_penalty = score_function("-", "-", match_score, mismatch_score, gap_score)
    if _eq(i, 0) || _eq(j, 0)
      return ""
    end
    while i > 0 && j > 0
      qc = q[i - 1...i]
      sc = s[j - 1...j]
      if _eq((__tmp13 = (__tmp14 = score; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)), _add((__tmp15 = (__tmp16 = score; __tmp16.is_a?(Hash) ? __tmp16[i - 1] : _idx(__tmp16, i - 1)); __tmp15.is_a?(Hash) ? __tmp15[j - 1] : _idx(__tmp15, j - 1)), score_function(qc, sc, match_score, mismatch_score, gap_score)))
        align1 = _add(qc, align1)
        align2 = _add(sc, align2)
        i = i - 1
        j = j - 1
      else
        if _eq((__tmp17 = (__tmp18 = score; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)); __tmp17.is_a?(Hash) ? __tmp17[j] : _idx(__tmp17, j)), _add((__tmp19 = (__tmp20 = score; __tmp20.is_a?(Hash) ? __tmp20[i - 1] : _idx(__tmp20, i - 1)); __tmp19.is_a?(Hash) ? __tmp19[j] : _idx(__tmp19, j)), gap_penalty))
          align1 = _add(qc, align1)
          align2 = _add("-", align2)
          i = i - 1
        else
          align1 = _add("-", align1)
          align2 = _add(sc, align2)
          j = j - 1
        end
      end
    end
    return _add(_add(align1, "\n"), align2)
  end
  $query = "HEAGAWGHEE"
  $subject = "PAWHEAE"
  $score = smith_waterman($query, $subject, 1, -1, -2)
  puts(traceback($score, $query, $subject, 1, -1, -2))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
