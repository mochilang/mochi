# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def score_function(source_char, target_char, match_score, mismatch_score, gap_score)
    if source_char == "-" || target_char == "-"
      return gap_score
    end
    if source_char == target_char
      return match_score
    end
    return mismatch_score
  end
  def smith_waterman(query, subject, match_score, mismatch_score, gap_score)
    q = query.upcase()
    s = subject.upcase()
    m = q.length
    n = s.length
    score = []
    (0...(_add(m, 1))).each do |_|
      row = []
      (0...(_add(n, 1))).each do |unused2|
        row = (row << (0))
      end
      score = (score << (row))
    end
    (1...(_add(m, 1))).each do |i|
      (1...(_add(n, 1))).each do |j|
        qc = q[i - 1...i]
        sc = s[j - 1...j]
        diag = _add(score[i - 1][j - 1], score_function(qc, sc, match_score, mismatch_score, gap_score))
        delete = _add(score[i - 1][j], gap_score)
        insert = _add(score[i][j - 1], gap_score)
        max_val = 0
        if diag > max_val
          max_val = diag
        end
        if delete > max_val
          max_val = delete
        end
        if insert > max_val
          max_val = insert
        end
        score[i][j] = max_val
      end
    end
    return score
  end
  def traceback(score, query, subject, match_score, mismatch_score, gap_score)
    q = query.upcase()
    s = subject.upcase()
    max_value = 0
    i_max = 0
    j_max = 0
    (0...score.length).each do |i|
      (0...score[i].length).each do |j|
        if score[i][j] > max_value
          max_value = score[i][j]
          i_max = i
          j_max = j
        end
      end
    end
    i = i_max
    j = j_max
    align1 = ""
    align2 = ""
    gap_penalty = score_function("-", "-", match_score, mismatch_score, gap_score)
    if i == 0 || j == 0
      return ""
    end
    while i > 0 && j > 0
      qc = q[i - 1...i]
      sc = s[j - 1...j]
      if score[i][j] == _add(score[i - 1][j - 1], score_function(qc, sc, match_score, mismatch_score, gap_score))
        align1 = _add(qc, align1)
        align2 = _add(sc, align2)
        i = i - 1
        j = j - 1
      else
        if score[i][j] == _add(score[i - 1][j], gap_penalty)
          align1 = _add(qc, align1)
          align2 = _add("-", align2)
          i = i - 1
        else
          align1 = _add("-", align1)
          align2 = _add(sc, align2)
          j = j - 1
        end
      end
    end
    return _add(_add(align1, "\n"), align2)
  end
  $query = "HEAGAWGHEE"
  $subject = "PAWHEAE"
  $score = smith_waterman($query, $subject, 1, -1, -2)
  puts(traceback($score, $query, $subject, 1, -1, -2))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
