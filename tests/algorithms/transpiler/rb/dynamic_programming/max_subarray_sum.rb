# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def max_subarray_sum(nums, allow_empty)
    if nums.length == 0
      return 0.0
    end
    max_sum = 0.0
    curr_sum = 0.0
    if allow_empty
      max_sum = 0.0
      curr_sum = 0.0
      i = 0
      while i < nums.length
        num = nums[i]
        temp = _add(curr_sum, num)
        curr_sum = (temp > 0.0 ? temp : 0.0)
        if curr_sum > max_sum
          max_sum = curr_sum
        end
        i = _add(i, 1)
      end
    else
      max_sum = nums[0]
      curr_sum = nums[0]
      i = 1
      while i < nums.length
        num = nums[i]
        temp = _add(curr_sum, num)
        curr_sum = (temp > num ? temp : num)
        if curr_sum > max_sum
          max_sum = curr_sum
        end
        i = _add(i, 1)
      end
    end
    return max_sum
  end
  puts((max_subarray_sum([2.0, 8.0, 9.0], false)).to_s)
  puts((max_subarray_sum([0.0, 0.0], false)).to_s)
  puts((max_subarray_sum([-1.0, 0.0, 1.0], false)).to_s)
  puts((max_subarray_sum([1.0, 2.0, 3.0, 4.0, -2.0], false)).to_s)
  puts((max_subarray_sum([-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0], false)).to_s)
  puts((max_subarray_sum([2.0, 3.0, -9.0, 8.0, -2.0], false)).to_s)
  puts((max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], false)).to_s)
  puts((max_subarray_sum([-2.0, -3.0, -1.0, -4.0, -6.0], true)).to_s)
  $empty = []
  puts((max_subarray_sum($empty, false)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
