# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_bool_matrix(rows, cols)
    matrix = []
    i = 0
    while i <= rows
      row = []
      j = 0
      while j <= cols
        row = (row << (false))
        j = _add(j, 1)
      end
      matrix = (matrix << (row))
      i = _add(i, 1)
    end
    return matrix
  end
  def is_sum_subset(arr, required_sum)
    arr_len = arr.length
    subset = create_bool_matrix(arr_len, required_sum)
    i = 0
    while i <= arr_len
      subset[i][0] = true
      i = _add(i, 1)
    end
    j = 1
    while j <= required_sum
      subset[0][j] = false
      j = _add(j, 1)
    end
    i = 1
    while i <= arr_len
      j = 1
      while j <= required_sum
        if arr[i - 1] > j
          subset[i][j] = subset[i - 1][j]
        end
        if arr[i - 1] <= j
          subset[i][j] = subset[i - 1][j] || subset[i - 1][j - arr[i - 1]]
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return subset[arr_len][required_sum]
  end
  puts((is_sum_subset([2, 4, 6, 8], 5) ? 'true' : 'false'))
  puts((is_sum_subset([2, 4, 6, 8], 14) ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
