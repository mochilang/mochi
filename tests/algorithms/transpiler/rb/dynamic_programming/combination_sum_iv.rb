# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr << (value))
      i = _add(i, 1)
    end
    return arr
  end
  def count_recursive(array, target)
    if target < 0
      return 0
    end
    if target == 0
      return 1
    end
    total = 0
    i = 0
    while i < array.length
      total = _add(total, count_recursive(array, target - array[i]))
      i = _add(i, 1)
    end
    return total
  end
  def combination_sum_iv(array, target)
    return count_recursive(array, target)
  end
  def count_dp(array, target, dp)
    if target < 0
      return 0
    end
    if target == 0
      return 1
    end
    if dp[target] > (0 - 1)
      return dp[target]
    end
    total = 0
    i = 0
    while i < array.length
      total = _add(total, count_dp(array, target - array[i], dp))
      i = _add(i, 1)
    end
    dp[target] = total
    return total
  end
  def combination_sum_iv_dp_array(array, target)
    dp = make_list(_add(target, 1), -1)
    return count_dp(array, target, dp)
  end
  def combination_sum_iv_bottom_up(n, array, target)
    dp = make_list(_add(target, 1), 0)
    dp[0] = 1
    i = 1
    while i <= target
      j = 0
      while j < n
        if i - array[j] >= 0
          dp[i] = _add(dp[i], dp[i - array[j]])
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return dp[target]
  end
  puts((combination_sum_iv([1, 2, 5], 5)).to_s)
  puts((combination_sum_iv_dp_array([1, 2, 5], 5)).to_s)
  puts((combination_sum_iv_bottom_up(3, [1, 2, 5], 5)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
