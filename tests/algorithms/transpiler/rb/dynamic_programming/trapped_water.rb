# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr + [value])
      i = _add(i, 1)
    end
    return arr
  end
  def trapped_rainwater(heights)
    if _eq(_len(heights), 0)
      return 0
    end
    i = 0
    while i < _len(heights)
      if (__tmp1 = heights; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) < 0
        panic("No height can be negative")
      end
      i = _add(i, 1)
    end
    length = _len(heights)
    left_max = make_list(length, 0)
    left_max[0] = (__tmp2 = heights; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))
    i = 1
    while i < length
      if (__tmp3 = heights; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) > (__tmp4 = left_max; __tmp4.is_a?(Hash) ? __tmp4[i - 1] : _idx(__tmp4, i - 1))
        left_max[i] = (__tmp5 = heights; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      else
        left_max[i] = (__tmp6 = left_max; __tmp6.is_a?(Hash) ? __tmp6[i - 1] : _idx(__tmp6, i - 1))
      end
      i = _add(i, 1)
    end
    right_max = make_list(length, 0)
    last = length - 1
    right_max[last] = (__tmp7 = heights; __tmp7.is_a?(Hash) ? __tmp7[last] : _idx(__tmp7, last))
    i = last - 1
    while i >= 0
      if (__tmp8 = heights; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)) > (__tmp9 = right_max; __tmp9.is_a?(Hash) ? __tmp9[_add(i, 1)] : _idx(__tmp9, _add(i, 1)))
        right_max[i] = (__tmp10 = heights; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
      else
        right_max[i] = (__tmp11 = right_max; __tmp11.is_a?(Hash) ? __tmp11[_add(i, 1)] : _idx(__tmp11, _add(i, 1)))
      end
      i = i - 1
    end
    total = 0
    i = 0
    while i < length
      left = (__tmp12 = left_max; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
      right = (__tmp13 = right_max; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      smaller = (left < right ? left : right)
      total = _add(total, (smaller - (__tmp14 = heights; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))))
      i = _add(i, 1)
    end
    return total
  end
  puts(_str(trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])))
  puts(_str(trapped_rainwater([7, 1, 5, 3, 6, 4])))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
