# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_list(len, value)
    arr = []
    i = 0
    while i < len
      arr = (arr << (value))
      i = _add(i, 1)
    end
    return arr
  end
  def trapped_rainwater(heights)
    if heights.length == 0
      return 0
    end
    i = 0
    while i < heights.length
      if heights[i] < 0
        panic("No height can be negative")
      end
      i = _add(i, 1)
    end
    length = heights.length
    left_max = make_list(length, 0)
    left_max[0] = heights[0]
    i = 1
    while i < length
      if heights[i] > left_max[i - 1]
        left_max[i] = heights[i]
      else
        left_max[i] = left_max[i - 1]
      end
      i = _add(i, 1)
    end
    right_max = make_list(length, 0)
    last = length - 1
    right_max[last] = heights[last]
    i = last - 1
    while i >= 0
      if heights[i] > right_max[_add(i, 1)]
        right_max[i] = heights[i]
      else
        right_max[i] = right_max[_add(i, 1)]
      end
      i = i - 1
    end
    total = 0
    i = 0
    while i < length
      left = left_max[i]
      right = right_max[i]
      smaller = (left < right ? left : right)
      total = _add(total, (smaller - heights[i]))
      i = _add(i, 1)
    end
    return total
  end
  puts((trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])).to_s)
  puts((trapped_rainwater([7, 1, 5, 3, 6, 4])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
