# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dp_count(s, n)
    if n < 0
      return 0
    end
    table = []
    i = 0
    while i <= n
      table = (table << (0))
      i = _add(i, 1)
    end
    table[0] = 1
    idx = 0
    while idx < s.length
      coin_val = s[idx]
      j = coin_val
      while j <= n
        table[j] = _add(table[j], table[j - coin_val])
        j = _add(j, 1)
      end
      idx = _add(idx, 1)
    end
    return table[n]
  end
  puts(dp_count([1, 2, 3], 4))
  puts(dp_count([1, 2, 3], 7))
  puts(dp_count([2, 5, 3, 6], 10))
  puts(dp_count([10], 99))
  puts(dp_count([4, 5, 6], 0))
  puts(dp_count([1, 2, 3], -5))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
