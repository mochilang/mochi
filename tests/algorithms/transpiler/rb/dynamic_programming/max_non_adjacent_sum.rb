# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def maximum_non_adjacent_sum(nums)
    if nums.length == 0
      return 0
    end
    max_including = nums[0]
    max_excluding = 0
    i = 1
    while i < nums.length
      num = nums[i]
      new_including = _add(max_excluding, num)
      new_excluding = (max_including > max_excluding ? max_including : max_excluding)
      max_including = new_including
      max_excluding = new_excluding
      i = _add(i, 1)
    end
    if max_including > max_excluding
      return max_including
    end
    return max_excluding
  end
  puts((maximum_non_adjacent_sum([1, 2, 3])).to_s)
  puts((maximum_non_adjacent_sum([1, 5, 3, 7, 2, 2, 6])).to_s)
  puts((maximum_non_adjacent_sum([-1, -5, -3, -7, -2, -2, -6])).to_s)
  puts((maximum_non_adjacent_sum([499, 500, -3, -7, -2, -2, -6])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
