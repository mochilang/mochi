# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_2d(n)
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [0])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def matrix_chain_order(arr)
    n = _len(arr)
    m = make_2d(n)
    s = make_2d(n)
    chain_length = 2
    while chain_length < n
      a = 1
      while a < _add(n - chain_length, 1)
        b = _add(a, chain_length) - 1
        (__tmp1 = m; __tmp1.is_a?(Hash) ? __tmp1[a] : _idx(__tmp1, a))[b] = 1000000000
        c = a
        while c < b
          cost = _add(_add((__tmp2 = (__tmp3 = m; __tmp3.is_a?(Hash) ? __tmp3[a] : _idx(__tmp3, a)); __tmp2.is_a?(Hash) ? __tmp2[c] : _idx(__tmp2, c)), (__tmp4 = (__tmp5 = m; __tmp5.is_a?(Hash) ? __tmp5[_add(c, 1)] : _idx(__tmp5, _add(c, 1))); __tmp4.is_a?(Hash) ? __tmp4[b] : _idx(__tmp4, b))), (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[a - 1] : _idx(__tmp6, a - 1)) * (__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[c] : _idx(__tmp7, c)) * (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[b] : _idx(__tmp8, b)))
          if cost < (__tmp9 = (__tmp10 = m; __tmp10.is_a?(Hash) ? __tmp10[a] : _idx(__tmp10, a)); __tmp9.is_a?(Hash) ? __tmp9[b] : _idx(__tmp9, b))
            (__tmp11 = m; __tmp11.is_a?(Hash) ? __tmp11[a] : _idx(__tmp11, a))[b] = cost
            (__tmp12 = s; __tmp12.is_a?(Hash) ? __tmp12[a] : _idx(__tmp12, a))[b] = c
          end
          c = _add(c, 1)
        end
        a = _add(a, 1)
      end
      chain_length = _add(chain_length, 1)
    end
    return MatrixChainResult.new(matrix: m, solution: s)
  end
  def optimal_parenthesization(s, i, j)
    if _eq(i, j)
      return _add("A", _str(i))
    else
      left = optimal_parenthesization(s, i, (__tmp13 = (__tmp14 = s; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)))
      right = optimal_parenthesization(s, _add((__tmp15 = (__tmp16 = s; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)), 1), j)
      return _add(_add(_add(_add("( ", left), " "), right), " )")
    end
  end
  def main()
    arr = [30, 35, 15, 5, 10, 20, 25]
    n = _len(arr)
    res = matrix_chain_order(arr)
    m = res.matrix
    s = res.solution
    puts(_add("No. of Operation required: ", _str((__tmp17 = (__tmp18 = m; __tmp18.is_a?(Hash) ? __tmp18[1] : _idx(__tmp18, 1)); __tmp17.is_a?(Hash) ? __tmp17[n - 1] : _idx(__tmp17, n - 1)))))
    seq = optimal_parenthesization(s, 1, n - 1)
    puts(seq)
  end
  Object.send(:remove_const, :MatrixChainResult) if Object.const_defined?(:MatrixChainResult)
  MatrixChainResult = Struct.new(:matrix, :solution, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
