# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_2d(n)
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row << (0))
        j = _add(j, 1)
      end
      res = (res << (row))
      i = _add(i, 1)
    end
    return res
  end
  def matrix_chain_order(arr)
    n = arr.length
    m = make_2d(n)
    s = make_2d(n)
    chain_length = 2
    while chain_length < n
      a = 1
      while a < _add(n - chain_length, 1)
        b = _add(a, chain_length) - 1
        m[a][b] = 1000000000
        c = a
        while c < b
          cost = _add(_add(m[a][c], m[_add(c, 1)][b]), arr[a - 1] * arr[c] * arr[b])
          if cost < m[a][b]
            m[a][b] = cost
            s[a][b] = c
          end
          c = _add(c, 1)
        end
        a = _add(a, 1)
      end
      chain_length = _add(chain_length, 1)
    end
    return MatrixChainResult.new(matrix: m, solution: s)
  end
  def optimal_parenthesization(s, i, j)
    if i == j
      return _add("A", (i).to_s)
    else
      left = optimal_parenthesization(s, i, s[i][j])
      right = optimal_parenthesization(s, _add(s[i][j], 1), j)
      return _add(_add(_add(_add("( ", left), " "), right), " )")
    end
  end
  def main()
    arr = [30, 35, 15, 5, 10, 20, 25]
    n = arr.length
    res = matrix_chain_order(arr)
    m = res.matrix
    s = res.solution
    puts(_add("No. of Operation required: ", (m[1][n - 1]).to_s))
    seq = optimal_parenthesization(s, 1, n - 1)
    puts(seq)
  end
  MatrixChainResult = Struct.new(:matrix, :solution, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
