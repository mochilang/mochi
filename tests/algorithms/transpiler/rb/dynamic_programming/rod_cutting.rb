# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def enforce_args(n, prices)
    if n < 0
      panic("n must be non-negative")
    end
    if n > prices.length
      panic("price list is shorter than n")
    end
  end
  def bottom_up_cut_rod(n, prices)
    enforce_args(n, prices)
    max_rev = []
    i = 0
    while i <= n
      if i == 0
        max_rev = (max_rev << (0))
      else
        max_rev = (max_rev << (-2147483648))
      end
      i = _add(i, 1)
    end
    length = 1
    while length <= n
      best = max_rev[length]
      j = 1
      while j <= length
        candidate = _add(prices[j - 1], max_rev[length - j])
        if candidate > best
          best = candidate
        end
        j = _add(j, 1)
      end
      max_rev[length] = best
      length = _add(length, 1)
    end
    return max_rev[n]
  end
  $prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30]
  puts(bottom_up_cut_rod(4, $prices))
  puts(bottom_up_cut_rod(10, $prices))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
