# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def matrix_chain_multiply(arr)
    if arr.length < 2
      return 0
    end
    n = arr.length
    dp = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row << ($INF))
        j = _add(j, 1)
      end
      dp = (dp << (row))
      i = _add(i, 1)
    end
    i = n - 1
    while i > 0
      j = i
      while j < n
        if i == j
          dp[i][j] = 0
        else
          k = i
          while k < j
            cost = _add(_add(dp[i][k], dp[_add(k, 1)][j]), arr[i - 1] * arr[k] * arr[j])
            if cost < dp[i][j]
              dp[i][j] = cost
            end
            k = _add(k, 1)
          end
        end
        j = _add(j, 1)
      end
      i = i - 1
    end
    return dp[1][n - 1]
  end
  $INF = 1000000000
  # test example
  raise 'assertion failed' unless matrix_chain_multiply([1, 2, 3, 4, 3]) == 30
  # test single matrix
  raise 'assertion failed' unless matrix_chain_multiply([10]) == 0
  # test two matrices
  raise 'assertion failed' unless matrix_chain_multiply([10, 20]) == 0
  # test cost calculation
  raise 'assertion failed' unless matrix_chain_multiply([19, 2, 19]) == 722
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
