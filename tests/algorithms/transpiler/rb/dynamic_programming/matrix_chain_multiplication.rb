# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def matrix_chain_multiply(arr)
    if _len(arr) < 2
      return 0
    end
    n = _len(arr)
    dp = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [$INF])
        j = _add(j, 1)
      end
      dp = (dp + [row])
      i = _add(i, 1)
    end
    i = n - 1
    while i > 0
      j = i
      while j < n
        if _eq(i, j)
          (__tmp1 = dp; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))[j] = 0
        else
          k = i
          while k < j
            cost = _add(_add((__tmp2 = (__tmp3 = dp; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)); __tmp2.is_a?(Hash) ? __tmp2[k] : _idx(__tmp2, k)), (__tmp4 = (__tmp5 = dp; __tmp5.is_a?(Hash) ? __tmp5[_add(k, 1)] : _idx(__tmp5, _add(k, 1))); __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))), (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[i - 1] : _idx(__tmp6, i - 1)) * (__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)) * (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
            if cost < (__tmp9 = (__tmp10 = dp; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
              (__tmp11 = dp; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))[j] = cost
            end
            k = _add(k, 1)
          end
        end
        j = _add(j, 1)
      end
      i = i - 1
    end
    return (__tmp12 = (__tmp13 = dp; __tmp13.is_a?(Hash) ? __tmp13[1] : _idx(__tmp13, 1)); __tmp12.is_a?(Hash) ? __tmp12[n - 1] : _idx(__tmp12, n - 1))
  end
  $INF = 1000000000
  # test example
  raise 'assertion failed' unless _eq(matrix_chain_multiply([1, 2, 3, 4, 3]), 30)
  # test single matrix
  raise 'assertion failed' unless _eq(matrix_chain_multiply([10]), 0)
  # test two matrices
  raise 'assertion failed' unless _eq(matrix_chain_multiply([10, 20]), 0)
  # test cost calculation
  raise 'assertion failed' unless _eq(matrix_chain_multiply([19, 2, 19]), 722)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
