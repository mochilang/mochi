# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def distance_sq(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      diff = (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sum
  end
  def mean(vectors)
    dim = _len((__tmp3 = vectors; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    res = []
    i = 0
    while i < dim
      total = 0.0
      j = 0
      while j < _len(vectors)
        total = _add(total, (__tmp4 = (__tmp5 = vectors; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)); __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
        j = _add(j, 1)
      end
      res = (res + [total / _len(vectors)])
      i = _add(i, 1)
    end
    return res
  end
  def k_means(vectors, k, iterations)
    centroids = []
    i = 0
    while i < k
      centroids = (centroids + [(__tmp6 = vectors; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))])
      i = _add(i, 1)
    end
    assignments = []
    n = _len(vectors)
    i = 0
    while i < n
      assignments = (assignments + [0])
      i = _add(i, 1)
    end
    it = 0
    while it < iterations
      v = 0
      while v < n
        best = 0
        bestDist = distance_sq((__tmp7 = vectors; __tmp7.is_a?(Hash) ? __tmp7[v] : _idx(__tmp7, v)), (__tmp8 = centroids; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)))
        c = 1
        while c < k
          d = distance_sq((__tmp9 = vectors; __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v)), (__tmp10 = centroids; __tmp10.is_a?(Hash) ? __tmp10[c] : _idx(__tmp10, c)))
          if d < bestDist
            bestDist = d
            best = c
          end
          c = _add(c, 1)
        end
        assignments[v] = best
        v = _add(v, 1)
      end
      cIdx = 0
      while cIdx < k
        cluster = []
        v2 = 0
        while v2 < n
          if _eq((__tmp11 = assignments; __tmp11.is_a?(Hash) ? __tmp11[v2] : _idx(__tmp11, v2)), cIdx)
            cluster = (cluster + [(__tmp12 = vectors; __tmp12.is_a?(Hash) ? __tmp12[v2] : _idx(__tmp12, v2))])
          end
          v2 = _add(v2, 1)
        end
        if _len(cluster) > 0
          centroids[cIdx] = mean(cluster)
        end
        cIdx = _add(cIdx, 1)
      end
      it = _add(it, 1)
    end
    return KMeansResult.new(centroids: centroids, assignments: assignments)
  end
  def main()
    vectors = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]
    result = k_means(vectors, 2, 5)
    puts(((x = result.centroids); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = result.assignments); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  Object.send(:remove_const, :KMeansResult) if Object.const_defined?(:KMeansResult)
  KMeansResult = Struct.new(:centroids, :assignments, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
