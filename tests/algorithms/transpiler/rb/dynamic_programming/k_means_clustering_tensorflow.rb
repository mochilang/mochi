# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def distance_sq(a, b)
    sum = 0.0
    i = 0
    while i < a.length
      diff = a[i] - b[i]
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sum
  end
  def mean(vectors)
    dim = vectors[0].length
    res = []
    i = 0
    while i < dim
      total = 0.0
      j = 0
      while j < vectors.length
        total = _add(total, vectors[j][i])
        j = _add(j, 1)
      end
      res = (res << (total / vectors.length))
      i = _add(i, 1)
    end
    return res
  end
  def k_means(vectors, k, iterations)
    centroids = []
    i = 0
    while i < k
      centroids = (centroids << (vectors[i]))
      i = _add(i, 1)
    end
    assignments = []
    n = vectors.length
    i = 0
    while i < n
      assignments = (assignments << (0))
      i = _add(i, 1)
    end
    it = 0
    while it < iterations
      v = 0
      while v < n
        best = 0
        bestDist = distance_sq(vectors[v], centroids[0])
        c = 1
        while c < k
          d = distance_sq(vectors[v], centroids[c])
          if d < bestDist
            bestDist = d
            best = c
          end
          c = _add(c, 1)
        end
        assignments[v] = best
        v = _add(v, 1)
      end
      cIdx = 0
      while cIdx < k
        cluster = []
        v2 = 0
        while v2 < n
          if assignments[v2] == cIdx
            cluster = (cluster << (vectors[v2]))
          end
          v2 = _add(v2, 1)
        end
        if cluster.length > 0
          centroids[cIdx] = mean(cluster)
        end
        cIdx = _add(cIdx, 1)
      end
      it = _add(it, 1)
    end
    return KMeansResult.new(centroids: centroids, assignments: assignments)
  end
  def main()
    vectors = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]
    result = k_means(vectors, 2, 5)
    puts(((x = result.centroids); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = result.assignments); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  KMeansResult = Struct.new(:centroids, :assignments, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
