# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def min3(a, b, c)
    m = a
    if b < m
      m = b
    end
    if c < m
      m = c
    end
    return m
  end
  def helper(word1, word2, cache, i, j, len1, len2)
    if i >= len1
      return len2 - j
    end
    if j >= len2
      return len1 - i
    end
    if !_eq((__tmp1 = (__tmp2 = cache; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)), (0 - 1))
      return (__tmp3 = (__tmp4 = cache; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
    end
    diff = 0
    if !_eq(word1[i..._add(i, 1)], word2[j..._add(j, 1)])
      diff = 1
    end
    delete_cost = _add(1, helper(word1, word2, cache, _add(i, 1), j, len1, len2))
    insert_cost = _add(1, helper(word1, word2, cache, i, _add(j, 1), len1, len2))
    replace_cost = _add(diff, helper(word1, word2, cache, _add(i, 1), _add(j, 1), len1, len2))
    (__tmp5 = cache; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))[j] = min3(delete_cost, insert_cost, replace_cost)
    return (__tmp6 = (__tmp7 = cache; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)); __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j))
  end
  def min_distance_up_bottom(word1, word2)
    len1 = _len(word1)
    len2 = _len(word2)
    cache = []
    (0...len1).each do |_|
      row = []
      (0...len2).each do |unused2|
        row = (row + [0 - 1])
      end
      cache = (cache + [row])
    end
    return helper(word1, word2, cache, 0, 0, len1, len2)
  end
  puts(_str(min_distance_up_bottom("intention", "execution")))
  puts(_str(min_distance_up_bottom("intention", "")))
  puts(_str(min_distance_up_bottom("", "")))
  puts(_str(min_distance_up_bottom("zooicoarchaeologist", "zoologist")))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
