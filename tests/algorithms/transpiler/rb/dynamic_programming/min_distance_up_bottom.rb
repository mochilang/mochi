# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def min3(a, b, c)
    m = a
    if b < m
      m = b
    end
    if c < m
      m = c
    end
    return m
  end
  def helper(word1, word2, cache, i, j, len1, len2)
    if i >= len1
      return len2 - j
    end
    if j >= len2
      return len1 - i
    end
    if cache[i][j] != (0 - 1)
      return cache[i][j]
    end
    diff = 0
    if word1[i..._add(i, 1)] != word2[j..._add(j, 1)]
      diff = 1
    end
    delete_cost = _add(1, helper(word1, word2, cache, _add(i, 1), j, len1, len2))
    insert_cost = _add(1, helper(word1, word2, cache, i, _add(j, 1), len1, len2))
    replace_cost = _add(diff, helper(word1, word2, cache, _add(i, 1), _add(j, 1), len1, len2))
    cache[i][j] = min3(delete_cost, insert_cost, replace_cost)
    return cache[i][j]
  end
  def min_distance_up_bottom(word1, word2)
    len1 = word1.length
    len2 = word2.length
    cache = []
    (0...len1).each do |_|
      row = []
      (0...len2).each do |unused2|
        row = (row << (0 - 1))
      end
      cache = (cache << (row))
    end
    return helper(word1, word2, cache, 0, 0, len1, len2)
  end
  puts((min_distance_up_bottom("intention", "execution")).to_s)
  puts((min_distance_up_bottom("intention", "")).to_s)
  puts((min_distance_up_bottom("", "")).to_s)
  puts((min_distance_up_bottom("zooicoarchaeologist", "zoologist")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
