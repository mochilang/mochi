# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def partition(m)
    memo = []
    i = 0
    while i < _add(m, 1)
      row = []
      j = 0
      while j < m
        row = (row << (0))
        j = _add(j, 1)
      end
      memo = (memo << (row))
      i = _add(i, 1)
    end
    i = 0
    while i < _add(m, 1)
      memo[i][0] = 1
      i = _add(i, 1)
    end
    n = 0
    while n < _add(m, 1)
      k = 1
      while k < m
        memo[n][k] = _add(memo[n][k], memo[n][k - 1])
        if n - k > 0
          memo[n][k] = _add(memo[n][k], memo[n - k - 1][k])
        end
        k = _add(k, 1)
      end
      n = _add(n, 1)
    end
    return memo[m][m - 1]
  end
  puts(partition(5))
  puts(partition(7))
  puts(partition(100))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
