# Generated by Mochi transpiler v0.10.62 on 2025-08-09 15:58 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0
    while i < s.length
      if _eq(s[i], ch)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = index_of(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = index_of(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    return 0
  end
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    if n >= 97 && n < 123
      return lower[n - 97...n - 96]
    end
    return "?"
  end
  def to_upper_char(c)
    code = ord(c)
    if code >= 97 && code <= 122
      return chr(code - 32)
    end
    return c
  end
  def is_lower(c)
    code = ord(c)
    return code >= 97 && code <= 122
  end
  def abbr(a, b)
    n = a.length
    m = b.length
    dp = []
    i = 0
    while i <= n
      row = []
      j = 0
      while j <= m
        row = (row + [false])
        j = _add(j, 1)
      end
      dp = (dp + [row])
      i = _add(i, 1)
    end
    dp[0][0] = true
    i = 0
    while i < n
      j = 0
      while j <= m
        if dp[i][j]
          if j < m && _eq(to_upper_char(a[i]), b[j])
            dp[_add(i, 1)][_add(j, 1)] = true
          end
          if is_lower(a[i])
            dp[_add(i, 1)][j] = true
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return dp[n][m]
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  print_bool(abbr("daBcd", "ABC"))
  print_bool(abbr("dBcd", "ABC"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
