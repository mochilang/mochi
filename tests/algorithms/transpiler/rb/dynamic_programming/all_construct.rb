# Generated by Mochi transpiler v0.10.62 on 2025-08-09 15:58 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def allConstruct(target, wordBank)
    tableSize = _add(target.length, 1)
    table = []
    idx = 0
    while idx < tableSize
      empty = []
      table = (table + [empty])
      idx = _add(idx, 1)
    end
    base = []
    table[0] = [base]
    i = 0
    while i < tableSize
      if !_eq(table[i].length, 0)
        w = 0
        while w < wordBank.length
          word = wordBank[w]
          wordLen = word.length
          if _eq(target[i..._add(i, wordLen)], word)
            k = 0
            while k < table[i].length
              way = table[i][k]
              combination = []
              m = 0
              while m < way.length
                combination = (combination + [way[m]])
                m = _add(m, 1)
              end
              combination = (combination + [word])
              nextIndex = _add(i, wordLen)
              table[nextIndex] = (table[nextIndex] + [combination])
              k = _add(k, 1)
            end
          end
          w = _add(w, 1)
        end
      end
      i = _add(i, 1)
    end
    return table[target.length]
  end
  puts(((x = allConstruct("jwajalapa", ["jwa", "j", "w", "a", "la", "lapa"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = allConstruct("rajamati", ["s", "raj", "amat", "raja", "ma", "i", "t"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = allConstruct("hexagonosaurus", ["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
