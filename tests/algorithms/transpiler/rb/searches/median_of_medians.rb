# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def set_at_int(xs, idx, value)
    i = 0.clone
    res = [].clone
    while i < xs.length
      if i == idx
        res = (res << (value)).clone
      else
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def sort_int(xs)
    res = xs.clone
    i = 1.clone
    while i < res.length
      key = res[i]
      j = i - 1.clone
      while j >= 0 && res[j] > key
        res = set_at_int(res, _add(j, 1), res[j]).clone
        j = j - 1.clone
      end
      res = set_at_int(res, _add(j, 1), key).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def median_of_five(arr)
    sorted = sort_int(arr)
    return sorted[sorted.length / 2]
  end
  def median_of_medians(arr)
    if arr.length <= 5
      return median_of_five(arr)
    end
    medians = [].clone
    i = 0.clone
    while i < arr.length
      if _add(i, 5) <= arr.length
        medians = (medians << (median_of_five(arr[i..._add(i, 5)]))).clone
      else
        medians = (medians << (median_of_five(arr[i...arr.length]))).clone
      end
      i = _add(i, 5).clone
    end
    return median_of_medians(medians)
  end
  def quick_select(arr, target)
    if target > arr.length
      return -1
    end
    x = median_of_medians(arr)
    left = [].clone
    right = [].clone
    check = false.clone
    i = 0.clone
    while i < arr.length
      if arr[i] < x
        left = (left << (arr[i])).clone
      else
        if arr[i] > x
          right = (right << (arr[i])).clone
        else
          if arr[i] == x
            if !check
              check = true.clone
            else
              right = (right << (arr[i])).clone
            end
          else
            right = (right << (arr[i])).clone
          end
        end
      end
      i = _add(i, 1).clone
    end
    rank_x = _add(left.length, 1)
    answer = 0.clone
    if rank_x == target
      answer = x.clone
    else
      if rank_x > target
        answer = quick_select(left, target).clone
      else
        answer = quick_select(right, target - rank_x).clone
      end
    end
    return answer
  end
  def main()
    puts(_str(median_of_five([5, 4, 3, 2])))
    puts(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
