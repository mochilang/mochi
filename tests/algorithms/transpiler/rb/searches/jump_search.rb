# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_sqrt(n)
    x = 0.clone
    while (_add(x, 1)) * (_add(x, 1)) <= n
      x = _add(x, 1).clone
    end
    return x
  end
  def jump_search(arr, item)
    arr_size = arr.length
    block_size = int_sqrt(arr_size)
    prev = 0.clone
    step = block_size.clone
    while step < arr_size && arr[step - 1] < item
      prev = step.clone
      step = _add(step, block_size).clone
      if prev >= arr_size
        return -1
      end
    end
    while prev < arr_size && arr[prev] < item
      prev = _add(prev, 1).clone
      if prev == step
        return -1
      end
    end
    if prev < arr_size && arr[prev] == item
      return prev
    end
    return -1
  end
  def main()
    puts(_str(jump_search([0, 1, 2, 3, 4, 5], 3)))
    puts(_str(jump_search([-5, -2, -1], -1)))
    puts(_str(jump_search([0, 5, 10, 20], 8)))
    puts(_str(jump_search([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 55)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
