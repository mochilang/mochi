# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def interpolation_search(arr, item)
    left = 0.clone
    right = arr.length - 1.clone
    while left <= right
      if arr[left] == arr[right]
        if arr[left] == item
          return left
        end
        return -1
      end
      point = _add(left, ((item - arr[left]) * (right - left)) / (arr[right] - arr[left]))
      if point < 0 || point >= arr.length
        return -1
      end
      current = arr[point]
      if current == item
        return point
      end
      if point < left
        right = left.clone
        left = point.clone
      else
        if point > right
          left = right.clone
          right = point.clone
        else
          if item < current
            right = point - 1.clone
          else
            left = _add(point, 1).clone
          end
        end
      end
    end
    return -1
  end
  def interpolation_search_recursive(arr, item, left, right)
    if left > right
      return -1
    end
    if arr[left] == arr[right]
      if arr[left] == item
        return left
      end
      return -1
    end
    point = _add(left, ((item - arr[left]) * (right - left)) / (arr[right] - arr[left]))
    if point < 0 || point >= arr.length
      return -1
    end
    if arr[point] == item
      return point
    end
    if point < left
      return interpolation_search_recursive(arr, item, point, left)
    end
    if point > right
      return interpolation_search_recursive(arr, item, right, left)
    end
    if arr[point] > item
      return interpolation_search_recursive(arr, item, left, point - 1)
    end
    return interpolation_search_recursive(arr, item, _add(point, 1), right)
  end
  def interpolation_search_by_recursion(arr, item)
    return interpolation_search_recursive(arr, item, 0, arr.length - 1)
  end
  puts(_str(interpolation_search([1, 2, 3, 4, 5], 2)))
  puts(_str(interpolation_search([1, 2, 3, 4, 5], 6)))
  puts(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 5)))
  puts(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 100)))
  puts(_str(interpolation_search_by_recursion([5, 5, 5, 5, 5], 3)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
