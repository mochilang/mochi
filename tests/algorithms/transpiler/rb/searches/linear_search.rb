# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def linear_search(sequence, target)
    i = 0
    while i < sequence.length
      if _eq(sequence[i], target)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def rec_linear_search(sequence, low, high, target)
    if !(0 <= high && high < sequence.length && 0 <= low && low < sequence.length)
      panic("Invalid upper or lower bound!")
    end
    if high < low
      return -1
    end
    if _eq(sequence[low], target)
      return low
    end
    if _eq(sequence[high], target)
      return high
    end
    return rec_linear_search(sequence, _add(low, 1), high - 1, target)
  end
  puts(_str(linear_search([0, 5, 7, 10, 15], 0)))
  puts(_str(linear_search([0, 5, 7, 10, 15], 15)))
  puts(_str(linear_search([0, 5, 7, 10, 15], 5)))
  puts(_str(linear_search([0, 5, 7, 10, 15], 6)))
  puts(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 0)))
  puts(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 700)))
  puts(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 30)))
  puts(_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, -6)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
