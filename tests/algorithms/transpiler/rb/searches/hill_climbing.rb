# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def score(sp)
    return sp.f.call(sp.x, sp.y)
  end
  def neighbors(sp)
    s = sp.step
    return [SearchProblem.new(x: sp.x - s, y: sp.y - s, step: s, f: sp.f), SearchProblem.new(x: sp.x - s, y: sp.y, step: s, f: sp.f), SearchProblem.new(x: sp.x - s, y: _add(sp.y, s), step: s, f: sp.f), SearchProblem.new(x: sp.x, y: sp.y - s, step: s, f: sp.f), SearchProblem.new(x: sp.x, y: _add(sp.y, s), step: s, f: sp.f), SearchProblem.new(x: _add(sp.x, s), y: sp.y - s, step: s, f: sp.f), SearchProblem.new(x: _add(sp.x, s), y: sp.y, step: s, f: sp.f), SearchProblem.new(x: _add(sp.x, s), y: _add(sp.y, s), step: s, f: sp.f)]
  end
  def equal_state(a, b)
    return a.x == b.x && a.y == b.y
  end
  def contains_state(lst, sp)
    i = 0.clone
    while i < lst.length
      if equal_state(lst[i], sp)
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def hill_climbing(sp, find_max, max_x, min_x, max_y, min_y, max_iter)
    current = sp.clone
    visited = [].clone
    iterations = 0.clone
    solution_found = false.clone
    while solution_found == false && iterations < max_iter
      visited = (visited << (current)).clone
      iterations = _add(iterations, 1).clone
      current_score = score(current)
      neighs = neighbors(current)
      max_change = -1.0.clone
      e18
      min_change = 1.0.clone
      e18
      next_ = current.clone
      improved = false.clone
      i = 0.clone
      while i < neighs.length
        n = neighs[i]
        i = _add(i, 1).clone
        if contains_state(visited, n)
          next
        end
        if n.x > max_x || n.x < min_x || n.y > max_y || n.y < min_y
          next
        end
        change = score(n) - current_score
        if find_max
          if change > max_change && change > 0.0
            max_change = change.clone
            next_ = n.clone
            improved = true.clone
          end
        else
          if change < min_change && change < 0.0
            min_change = change.clone
            next_ = n.clone
            improved = true.clone
          end
        end
      end
      if improved
        current = next_.clone
      else
        solution_found = true.clone
      end
    end
    return current
  end
  def test_f1(x, y)
    return _add(x * x, y * y)
  end
  def main()
    prob1 = SearchProblem.new(x: 3.0, y: 4.0, step: 1.0, f: method(:test_f1))
    local_min1 = hill_climbing(prob1, false, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 10000)
    puts(_str((score(local_min1)).to_i))
    prob2 = SearchProblem.new(x: 12.0, y: 47.0, step: 1.0, f: method(:test_f1))
    local_min2 = hill_climbing(prob2, false, 100.0, 5.0, 50.0, -5.0, 10000)
    puts(_str((score(local_min2)).to_i))
    prob3 = SearchProblem.new(x: 3.0, y: 4.0, step: 1.0, f: method(:test_f1))
    local_max = hill_climbing(prob3, true, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 1000)
    puts(_str((score(local_max)).to_i))
  end
  SearchProblem = Struct.new(:x, :y, :step, :f, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
