# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def binary_search(arr, item)
    low = 0
    high = arr.length - 1
    while low <= high
      mid = (_add(low, high)) / 2
      val = arr[mid]
      if _eq(val, item)
        return true
      end
      if item < val
        high = mid - 1
      else
        low = _add(mid, 1)
      end
    end
    return false
  end
  $arr1 = [0, 1, 2, 8, 13, 17, 19, 32, 42]
  puts((binary_search($arr1, 3) ? 'true' : 'false'))
  puts((binary_search($arr1, 13) ? 'true' : 'false'))
  $arr2 = [4, 4, 5, 6, 7]
  puts((binary_search($arr2, 4) ? 'true' : 'false'))
  puts((binary_search($arr2, -10) ? 'true' : 'false'))
  $arr3 = [-18, 2]
  puts((binary_search($arr3, -18) ? 'true' : 'false'))
  $arr4 = [5]
  puts((binary_search($arr4, 5) ? 'true' : 'false'))
  $arr5 = []
  puts((binary_search($arr5, 1) ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
