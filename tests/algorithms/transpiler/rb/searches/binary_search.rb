# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_sorted(arr)
    i = 1.clone
    while i < arr.length
      if arr[i - 1] > arr[i]
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def binary_search(sorted_collection, item)
    if !is_sorted(sorted_collection)
      return -1
    end
    left = 0.clone
    right = sorted_collection.length - 1.clone
    while left <= right
      midpoint = _add(left, (right - left) / 2)
      current_item = sorted_collection[midpoint]
      if current_item == item
        return midpoint
      end
      if item < current_item
        right = midpoint - 1.clone
      else
        left = _add(midpoint, 1).clone
      end
    end
    return -1
  end
  def binary_search_by_recursion(sorted_collection, item, left, right)
    if right < left
      return -1
    end
    midpoint = _add(left, (right - left) / 2)
    if sorted_collection[midpoint] == item
      return midpoint
    end
    if sorted_collection[midpoint] > item
      return binary_search_by_recursion(sorted_collection, item, left, midpoint - 1)
    end
    return binary_search_by_recursion(sorted_collection, item, _add(midpoint, 1), right)
  end
  def exponential_search(sorted_collection, item)
    if !is_sorted(sorted_collection)
      return -1
    end
    if sorted_collection.length == 0
      return -1
    end
    bound = 1.clone
    while bound < sorted_collection.length && sorted_collection[bound] < item
      bound = bound * 2.clone
    end
    left = bound / 2
    right = ([bound, sorted_collection.length - 1]).min()
    return binary_search_by_recursion(sorted_collection, item, left, right)
  end
  def main()
    data = [0, 5, 7, 10, 15]
    puts(_str(binary_search(data, 0)))
    puts(_str(binary_search(data, 15)))
    puts(_str(binary_search(data, 5)))
    puts(_str(binary_search(data, 6)))
    puts(_str(binary_search_by_recursion(data, 0, 0, data.length - 1)))
    puts(_str(binary_search_by_recursion(data, 15, 0, data.length - 1)))
    puts(_str(binary_search_by_recursion(data, 5, 0, data.length - 1)))
    puts(_str(binary_search_by_recursion(data, 6, 0, data.length - 1)))
    puts(_str(exponential_search(data, 0)))
    puts(_str(exponential_search(data, 15)))
    puts(_str(exponential_search(data, 5)))
    puts(_str(exponential_search(data, 6)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
