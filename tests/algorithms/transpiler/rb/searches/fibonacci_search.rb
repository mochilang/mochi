# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def fibonacci(k)
    if k < 0
      panic("k must be >= 0")
    end
    a = 0
    b = 1
    i = 0
    while i < k
      tmp = _add(a, b)
      a = b
      b = tmp
      i = _add(i, 1)
    end
    return a
  end
  def min_int(a, b)
    if a < b
      return a
    else
      return b
    end
  end
  def fibonacci_search(arr, val)
    n = arr.length
    m = 0
    while fibonacci(m) < n
      m = _add(m, 1)
    end
    offset = 0
    while m > 0
      i = min_int(_add(offset, fibonacci(m - 1)), n - 1)
      item = arr[i]
      if _eq(item, val)
        return i
      else
        if val < item
          m = m - 1
        else
          offset = _add(offset, fibonacci(m - 1))
          m = m - 2
        end
      end
    end
    return -1
  end
  $example1 = [4, 5, 6, 7]
  $example2 = [-18, 2]
  $example3 = [0, 5, 10, 15, 20, 25, 30]
  puts(_str(fibonacci_search($example1, 4)))
  puts(_str(fibonacci_search($example1, -10)))
  puts(_str(fibonacci_search($example2, -18)))
  puts(_str(fibonacci_search($example3, 15)))
  puts(_str(fibonacci_search($example3, 17)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
