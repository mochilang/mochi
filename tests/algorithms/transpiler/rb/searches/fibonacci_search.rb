# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def fibonacci(k)
    if k < 0
      panic("k must be >= 0")
    end
    a = 0.clone
    b = 1.clone
    i = 0.clone
    while i < k
      tmp = _add(a, b)
      a = b.clone
      b = tmp.clone
      i = _add(i, 1).clone
    end
    return a
  end
  def min_int(a, b)
    if a < b
      return a
    else
      return b
    end
  end
  def fibonacci_search(arr, val)
    n = arr.length
    m = 0.clone
    while fibonacci(m) < n
      m = _add(m, 1).clone
    end
    offset = 0.clone
    while m > 0
      i = min_int(_add(offset, fibonacci(m - 1)), n - 1)
      item = arr[i]
      if item == val
        return i
      else
        if val < item
          m = m - 1.clone
        else
          offset = _add(offset, fibonacci(m - 1)).clone
          m = m - 2.clone
        end
      end
    end
    return -1
  end
  $example1 = [4, 5, 6, 7]
  $example2 = [-18, 2]
  $example3 = [0, 5, 10, 15, 20, 25, 30]
  puts(_str(fibonacci_search($example1, 4)))
  puts(_str(fibonacci_search($example1, -10)))
  puts(_str(fibonacci_search($example2, -18)))
  puts(_str(fibonacci_search($example3, 15)))
  puts(_str(fibonacci_search($example3, 17)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
