# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def lin_search(left, right, array, target)
    i = left.clone
    while i < right
      if array[i] == target
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def ite_ternary_search(array, target)
    left = 0.clone
    right = array.length - 1.clone
    while left <= right
      if right - left < $precision
        idx = lin_search(left, _add(right, 1), array, target)
        return idx
      end
      one_third = _add(left, (right - left) / 3)
      two_third = right - (right - left) / 3
      if array[one_third] == target
        return one_third
      end
      if array[two_third] == target
        return two_third
      end
      if target < array[one_third]
        right = one_third - 1.clone
      else
        if array[two_third] < target
          left = _add(two_third, 1).clone
        else
          left = _add(one_third, 1).clone
          right = two_third - 1.clone
        end
      end
    end
    return -1
  end
  def rec_ternary_search(left, right, array, target)
    if left <= right
      if right - left < $precision
        idx = lin_search(left, _add(right, 1), array, target)
        return idx
      end
      one_third = _add(left, (right - left) / 3)
      two_third = right - (right - left) / 3
      if array[one_third] == target
        return one_third
      end
      if array[two_third] == target
        return two_third
      end
      if target < array[one_third]
        return rec_ternary_search(left, one_third - 1, array, target)
      end
      if array[two_third] < target
        return rec_ternary_search(_add(two_third, 1), right, array, target)
      end
      return rec_ternary_search(_add(one_third, 1), two_third - 1, array, target)
    end
    return -1
  end
  def main()
    test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]
    puts(_str(ite_ternary_search(test_list, 3)))
    puts(_str(ite_ternary_search(test_list, 13)))
    puts(_str(rec_ternary_search(0, test_list.length - 1, test_list, 3)))
    puts(_str(rec_ternary_search(0, test_list.length - 1, test_list, 13)))
  end
  $precision = 10
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
