# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def path_cost(path, graph)
    total = 0
    i = 0
    while i < path.length - 1
      u = path[i]
      v = path[_add(i, 1)]
      total = _add(total, graph[u][v])
      i = _add(i, 1)
    end
    return total
  end
  def generate_first_solution(graph, start)
    path = []
    visiting = start
    total = 0
    while path.length < graph.length
      path = (path + [visiting])
      best_node = ""
      best_cost = 1000000
            __tmp1 = (graph[visiting]).keys()
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |n|
        if !(path.include?(n)) && graph[visiting][n] < best_cost
          best_cost = graph[visiting][n]
          best_node = n
        end
      end
      if _eq(best_node, "")
        break
      end
      total = _add(total, best_cost)
      visiting = best_node
    end
    path = (path + [start])
    total = _add(total, graph[visiting][start])
    return Solution.new(path: path, cost: total)
  end
  def copy_path(path)
    res = []
    i = 0
    while i < path.length
      res = (res + [path[i]])
      i = _add(i, 1)
    end
    return res
  end
  def find_neighborhood(sol, graph)
    neighbors = []
    i = 1
    while i < sol.path.length - 1
      j = 1
      while j < sol.path.length - 1
        if !_eq(i, j)
          new_path = copy_path(sol.path)
          tmp = new_path[i]
          new_path[i] = new_path[j]
          new_path[j] = tmp
          cost = path_cost(new_path, graph)
          neighbors = (neighbors + [Solution.new(path: new_path, cost: cost)])
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return neighbors
  end
  def find_swap(a, b)
    i = 0
    while i < a.length
      if !_eq(a[i], b[i])
        return Swap.new(a: a[i], b: b[i])
      end
      i = _add(i, 1)
    end
    return Swap.new(a: "", b: "")
  end
  def tabu_search(first, graph, iters, size)
    solution = first
    best = first
    tabu = []
    count = 0
    while count < iters
      neighborhood = find_neighborhood(solution, graph)
      if _eq(neighborhood.length, 0)
        break
      end
      best_neighbor = neighborhood[0]
      best_move = find_swap(solution.path, best_neighbor.path)
      i = 1
      while i < neighborhood.length
        cand = neighborhood[i]
        move = find_swap(solution.path, cand.path)
        forbidden = false
        t = 0
        while t < tabu.length
          if (_eq(tabu[t]["a"], move.a) && _eq(tabu[t]["b"], move.b)) || (_eq(tabu[t]["a"], move.b) && _eq(tabu[t]["b"], move.a))
            forbidden = true
          end
          t = _add(t, 1)
        end
        if _eq(forbidden, false) && cand.cost < best_neighbor.cost
          best_neighbor = cand
          best_move = move
        end
        i = _add(i, 1)
      end
      solution = best_neighbor
      tabu = (tabu + [best_move])
      if tabu.length > size
        new_tab = []
        j = 1
        while j < tabu.length
          new_tab = (new_tab + [tabu[j]])
          j = _add(j, 1)
        end
        tabu = new_tab
      end
      if solution.cost < best.cost
        best = solution
      end
      count = _add(count, 1)
    end
    return best
  end
  Solution = Struct.new(:path, :cost, keyword_init: true)
  Swap = Struct.new(:a, :b, keyword_init: true)
  $graph = {"a" => {"b" => 20, "c" => 18, "d" => 22, "e" => 26}, "b" => {"a" => 20, "c" => 10, "d" => 11, "e" => 12}, "c" => {"a" => 18, "b" => 10, "d" => 23, "e" => 24}, "d" => {"a" => 22, "b" => 11, "c" => 23, "e" => 40}, "e" => {"a" => 26, "b" => 12, "c" => 24, "d" => 40}}
  $first = generate_first_solution($graph, "a")
  $best = tabu_search($first, $graph, 4, 3)
  puts(((x = $best.path); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str($best.cost))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
