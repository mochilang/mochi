# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def path_cost(path, graph)
    total = 0.clone
    i = 0.clone
    while i < path.length - 1
      u = path[i]
      v = path[_add(i, 1)]
      total = _add(total, graph[u][v]).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def generate_first_solution(graph, start)
    path = [].clone
    visiting = start.clone
    total = 0.clone
    while path.length < graph.length
      path = (path << (visiting)).clone
      best_node = "".clone
      best_cost = 1000000.clone
            __tmp1 = (graph[visiting]).keys()
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |n|
        if !(path.include?(n)) && graph[visiting][n] < best_cost
          best_cost = graph[visiting][n].clone
          best_node = n.clone
        end
      end
      if best_node == ""
        break
      end
      total = _add(total, best_cost).clone
      visiting = best_node.clone
    end
    path = (path << (start)).clone
    total = _add(total, graph[visiting][start]).clone
    return Solution.new(path: path, cost: total)
  end
  def copy_path(path)
    res = [].clone
    i = 0.clone
    while i < path.length
      res = (res << (path[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def find_neighborhood(sol, graph)
    neighbors = [].clone
    i = 1.clone
    while i < sol.path.length - 1
      j = 1.clone
      while j < sol.path.length - 1
        if i != j
          new_path = copy_path(sol.path).clone
          tmp = new_path[i]
          new_path[i] = new_path[j]
          new_path[j] = tmp
          cost = path_cost(new_path, graph)
          neighbors = (neighbors << (Solution.new(path: new_path, cost: cost))).clone
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return neighbors
  end
  def find_swap(a, b)
    i = 0.clone
    while i < a.length
      if a[i] != b[i]
        return Swap.new(a: a[i], b: b[i])
      end
      i = _add(i, 1).clone
    end
    return Swap.new(a: "", b: "")
  end
  def tabu_search(first, graph, iters, size)
    solution = first.clone
    best = first.clone
    tabu = [].clone
    count = 0.clone
    while count < iters
      neighborhood = find_neighborhood(solution, graph)
      if neighborhood.length == 0
        break
      end
      best_neighbor = neighborhood[0].clone
      best_move = find_swap(solution.path, best_neighbor.path).clone
      i = 1.clone
      while i < neighborhood.length
        cand = neighborhood[i]
        move = find_swap(solution.path, cand.path)
        forbidden = false.clone
        t = 0.clone
        while t < tabu.length
          if (tabu[t]["a"] == move.a && tabu[t]["b"] == move.b) || (tabu[t]["a"] == move.b && tabu[t]["b"] == move.a)
            forbidden = true.clone
          end
          t = _add(t, 1).clone
        end
        if forbidden == false && cand.cost < best_neighbor.cost
          best_neighbor = cand.clone
          best_move = move.clone
        end
        i = _add(i, 1).clone
      end
      solution = best_neighbor.clone
      tabu = (tabu << (best_move)).clone
      if tabu.length > size
        new_tab = [].clone
        j = 1.clone
        while j < tabu.length
          new_tab = (new_tab << (tabu[j])).clone
          j = _add(j, 1).clone
        end
        tabu = new_tab.clone
      end
      if solution.cost < best.cost
        best = solution.clone
      end
      count = _add(count, 1).clone
    end
    return best
  end
  Solution = Struct.new(:path, :cost, keyword_init: true)
  Swap = Struct.new(:a, :b, keyword_init: true)
  $graph = {"a" => {"b" => 20, "c" => 18, "d" => 22, "e" => 26}, "b" => {"a" => 20, "c" => 10, "d" => 11, "e" => 12}, "c" => {"a" => 18, "b" => 10, "d" => 23, "e" => 24}, "d" => {"a" => 22, "b" => 11, "c" => 23, "e" => 40}, "e" => {"a" => 26, "b" => 12, "c" => 24, "d" => 40}}
  $first = generate_first_solution($graph, "a")
  $best = tabu_search($first, $graph, 4, 3)
  puts(((x = $best.path); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str($best.cost))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
