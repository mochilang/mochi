# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def score(p, f)
    return f.call(p.x, p.y)
  end
  def get_neighbors(p)
    s = p.step
    ns = []
    ns = (ns + [SearchProblem.new(x: p.x - s, y: p.y - s, step: s)])
    ns = (ns + [SearchProblem.new(x: p.x - s, y: p.y, step: s)])
    ns = (ns + [SearchProblem.new(x: p.x - s, y: _add(p.y, s), step: s)])
    ns = (ns + [SearchProblem.new(x: p.x, y: p.y - s, step: s)])
    ns = (ns + [SearchProblem.new(x: p.x, y: _add(p.y, s), step: s)])
    ns = (ns + [SearchProblem.new(x: _add(p.x, s), y: p.y - s, step: s)])
    ns = (ns + [SearchProblem.new(x: _add(p.x, s), y: p.y, step: s)])
    ns = (ns + [SearchProblem.new(x: _add(p.x, s), y: _add(p.y, s), step: s)])
    return ns
  end
  def remove_at(lst, idx)
    res = []
    i = 0
    while i < lst.length
      if !_eq(i, idx)
        res = (res + [lst[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def rand()
    _t = _now()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random_float()
    return ((rand()).to_f) / 2147483648.0
  end
  def randint(low, high)
    return _add((rand() % (_add(high - low, 1))), low)
  end
  def expApprox(x)
    y = x
    is_neg = false
    if x < 0.0
      is_neg = true
      y = -x
    end
    term = 1.0
    sum = 1.0
    n = 1
    while n < 30
      term = term * y / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    if is_neg
      return 1.0 / sum
    end
    return sum
  end
  def simulated_annealing(search_prob, f, find_max, max_x, min_x, max_y, min_y, start_temp, rate_of_decrease, threshold_temp)
    search_end = false
    current_state = search_prob
    current_temp = start_temp
    best_state = current_state
    while !search_end
      current_score = score(current_state, f)
      if score(best_state, f) < current_score
        best_state = current_state
      end
      next_state = current_state
      found_next = false
      neighbors = get_neighbors(current_state)
      while !found_next && neighbors.length > 0
        idx = randint(0, neighbors.length - 1)
        picked_neighbor = neighbors[idx]
        neighbors = remove_at(neighbors, idx)
        if picked_neighbor.x > max_x || picked_neighbor.x < min_x || picked_neighbor.y > max_y || picked_neighbor.y < min_y
          next
        end
        change = score(picked_neighbor, f) - current_score
        if !find_max
          change = -change
        end
        if change > 0.0
          next_state = picked_neighbor
          found_next = true
        else
          probability = expApprox(change / current_temp)
          if random_float() < probability
            next_state = picked_neighbor
            found_next = true
          end
        end
      end
      current_temp = current_temp - (current_temp * rate_of_decrease)
      if current_temp < threshold_temp || (!found_next)
        search_end = true
      else
        current_state = next_state
      end
    end
    return best_state
  end
  def test_f1(x, y)
    return _add(x * x, y * y)
  end
  def test_f2(x, y)
    return (3.0 * x * x) - (6.0 * y)
  end
  def main()
    prob1 = SearchProblem.new(x: 12.0, y: 47.0, step: 1.0)
    min_state = simulated_annealing(prob1, method(:test_f1), false, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0)
    puts(((["min1", test_f1(min_state.x, min_state.y)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    prob2 = SearchProblem.new(x: 12.0, y: 47.0, step: 1.0)
    max_state = simulated_annealing(prob2, method(:test_f1), true, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0)
    puts(((["max1", test_f1(max_state.x, max_state.y)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    prob3 = SearchProblem.new(x: 3.0, y: 4.0, step: 1.0)
    min_state2 = simulated_annealing(prob3, method(:test_f2), false, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0)
    puts(((["min2", test_f2(min_state2.x, min_state2.y)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    prob4 = SearchProblem.new(x: 3.0, y: 4.0, step: 1.0)
    max_state2 = simulated_annealing(prob4, method(:test_f2), true, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0)
    puts(((["max2", test_f2(max_state2.x, max_state2.y)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
  end
  SearchProblem = Struct.new(:x, :y, :step, keyword_init: true)
  $seed = 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
