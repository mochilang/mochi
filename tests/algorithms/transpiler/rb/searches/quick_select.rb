# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def partition(data, pivot)
    less = [].clone
    equal = [].clone
    greater = [].clone
    (0...data.length).each do |i|
      v = data[i]
      if v < pivot
        less = (less << (v)).clone
      else
        if v > pivot
          greater = (greater << (v)).clone
        else
          equal = (equal << (v)).clone
        end
      end
    end
    return [less, equal, greater]
  end
  def quick_select(items, index)
    if index < 0 || index >= items.length
      return -1
    end
    pivot = items[items.length / 2]
    parts = partition(items, pivot)
    smaller = parts[0]
    equal = parts[1]
    larger = parts[2]
    count = equal.length
    m = smaller.length
    if m <= index && index < _add(m, count)
      return pivot
    else
      if index < m
        return quick_select(smaller, index)
      else
        return quick_select(larger, index - (_add(m, count)))
      end
    end
  end
  def median(items)
    n = items.length
    mid = n / 2
    if n % 2 != 0
      return 1.0 * quick_select(items, mid)
    else
      low = quick_select(items, mid - 1)
      high = quick_select(items, mid)
      return (1.0 * (_add(low, high))) / 2.0
    end
  end
  puts(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)))
  puts(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 1)))
  puts(_str(quick_select([5, 4, 3, 2], 2)))
  puts(_str(quick_select([3, 5, 7, 10, 2, 12], 3)))
  puts(_str(median([3, 2, 2, 9, 9])))
  puts(_str(median([2, 2, 9, 9, 9, 3])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
