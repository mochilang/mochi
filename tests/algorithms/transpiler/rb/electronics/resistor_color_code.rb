# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(list, value)
        __tmp1 = list
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |c|
      if c == value
        return true
      end
    end
    return false
  end
  def get_significant_digits(colors)
    digit = 0
        __tmp2 = colors
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |color|
      if !($significant_figures_color_values.include?(color))
        panic(_add(color, " is not a valid color for significant figure bands"))
      end
      digit = _add(digit * 10, $significant_figures_color_values[color])
    end
    return digit
  end
  def get_multiplier(color)
    if !($multiplier_color_values.include?(color))
      panic(_add(color, " is not a valid color for multiplier band"))
    end
    return $multiplier_color_values[color]
  end
  def get_tolerance(color)
    if !($tolerance_color_values.include?(color))
      panic(_add(color, " is not a valid color for tolerance band"))
    end
    return $tolerance_color_values[color]
  end
  def get_temperature_coeffecient(color)
    if !($temperature_coeffecient_color_values.include?(color))
      panic(_add(color, " is not a valid color for temperature coeffecient band"))
    end
    return $temperature_coeffecient_color_values[color]
  end
  def get_band_type_count(total, typ)
    if total == 3
      if typ == "significant"
        return 2
      end
      if typ == "multiplier"
        return 1
      end
      panic(_add(typ, " is not valid for a 3 band resistor"))
    else
      if total == 4
        if typ == "significant"
          return 2
        end
        if typ == "multiplier"
          return 1
        end
        if typ == "tolerance"
          return 1
        end
        panic(_add(typ, " is not valid for a 4 band resistor"))
      else
        if total == 5
          if typ == "significant"
            return 3
          end
          if typ == "multiplier"
            return 1
          end
          if typ == "tolerance"
            return 1
          end
          panic(_add(typ, " is not valid for a 5 band resistor"))
        else
          if total == 6
            if typ == "significant"
              return 3
            end
            if typ == "multiplier"
              return 1
            end
            if typ == "tolerance"
              return 1
            end
            if typ == "temp_coeffecient"
              return 1
            end
            panic(_add(typ, " is not valid for a 6 band resistor"))
          else
            panic(_add(_str(total), " is not a valid number of bands"))
          end
        end
      end
    end
  end
  def check_validity(number_of_bands, colors)
    if number_of_bands < 3 || number_of_bands > 6
      panic("Invalid number of bands. Resistor bands must be 3 to 6")
    end
    if number_of_bands != colors.length
      panic(_add(_add(_add(_add("Expecting ", _str(number_of_bands)), " colors, provided "), _str(colors.length)), " colors"))
    end
        __tmp3 = colors
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |color|
      if !$valid_colors.include?(color)
        panic(_add(color, " is not a valid color"))
      end
    end
    return true
  end
  def calculate_resistance(number_of_bands, color_code_list)
    check_validity(number_of_bands, color_code_list)
    sig_count = get_band_type_count(number_of_bands, "significant")
    significant_colors = color_code_list[0...sig_count]
    significant_digits = get_significant_digits(significant_colors)
    multiplier_color = color_code_list[sig_count]
    multiplier = get_multiplier(multiplier_color)
    tolerance = 20.0
    if number_of_bands >= 4
      tolerance_color = color_code_list[_add(sig_count, 1)]
      tolerance = get_tolerance(tolerance_color)
    end
    temp_coeff = 0
    if number_of_bands == 6
      temp_color = color_code_list[_add(sig_count, 2)]
      temp_coeff = get_temperature_coeffecient(temp_color)
    end
    resistance_value = multiplier * significant_digits
    resistance_str = _str(resistance_value)
    if resistance_value == (resistance_value).to_i
      resistance_str = _str((resistance_value).to_i)
    end
    answer = _add(_add(_add(resistance_str, "Ω ±"), _str(tolerance)), "% ")
    if temp_coeff != 0
      answer = _add(_add(answer, _str(temp_coeff)), " ppm/K")
    end
    return answer
  end
  $valid_colors = ["Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"]
  $significant_figures_color_values = {"Black" => 0, "Brown" => 1, "Red" => 2, "Orange" => 3, "Yellow" => 4, "Green" => 5, "Blue" => 6, "Violet" => 7, "Grey" => 8, "White" => 9}
  $multiplier_color_values = {"Black" => 1.0, "Brown" => 10.0, "Red" => 100.0, "Orange" => 1000.0, "Yellow" => 10000.0, "Green" => 100000.0, "Blue" => 1000000.0, "Violet" => 10000000.0, "Grey" => 100000000.0, "White" => 1000000000.0, "Gold" => 0.1, "Silver" => 0.01}
  $tolerance_color_values = {"Brown" => 1.0, "Red" => 2.0, "Orange" => 0.05, "Yellow" => 0.02, "Green" => 0.5, "Blue" => 0.25, "Violet" => 0.1, "Grey" => 0.01, "Gold" => 5.0, "Silver" => 10.0}
  $temperature_coeffecient_color_values = {"Black" => 250, "Brown" => 100, "Red" => 50, "Orange" => 15, "Yellow" => 25, "Green" => 20, "Blue" => 10, "Violet" => 5, "Grey" => 1}
  # test 3 band resistor
  raise 'assertion failed' unless calculate_resistance(3, ["Black", "Blue", "Orange"]) == "6000Ω ±20% "
  # test 4 band resistor
  raise 'assertion failed' unless calculate_resistance(4, ["Orange", "Green", "Blue", "Gold"]) == "35000000Ω ±5% "
  # test 5 band resistor
  raise 'assertion failed' unless calculate_resistance(5, ["Violet", "Brown", "Grey", "Silver", "Green"]) == "7.18Ω ±0.5% "
  # test 6 band resistor
  raise 'assertion failed' unless calculate_resistance(6, ["Red", "Green", "Blue", "Yellow", "Orange", "Grey"]) == "2560000Ω ±0.05% 1 ppm/K"
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
