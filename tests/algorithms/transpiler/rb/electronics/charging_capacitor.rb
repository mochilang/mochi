# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def expApprox(x)
    y = x
    is_neg = false
    if x < 0.0
      is_neg = true
      y = -x
    end
    term = 1.0
    sum = 1.0
    n = 1
    while n < 30
      term = term * y / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    if is_neg
      return 1.0 / sum
    end
    return sum
  end
  def round3(x)
    scaled = x * 1000.0
    if scaled >= 0.0
      scaled = _add(scaled, 0.5)
    else
      scaled = scaled - 0.5
    end
    scaled_int = (scaled).to_i
    return ((scaled_int).to_f) / 1000.0
  end
  def charging_capacitor(source_voltage, resistance, capacitance, time_sec)
    if source_voltage <= 0.0
      panic("Source voltage must be positive.")
    end
    if resistance <= 0.0
      panic("Resistance must be positive.")
    end
    if capacitance <= 0.0
      panic("Capacitance must be positive.")
    end
    exponent = -time_sec / (resistance * capacitance)
    voltage = source_voltage * (1.0 - expApprox(exponent))
    return round3(voltage)
  end
  puts(charging_capacitor(0.2, 0.9, 8.4, 0.5))
  puts(charging_capacitor(2.2, 3.5, 2.4, 9.0))
  puts(charging_capacitor(15.0, 200.0, 20.0, 2.0))
  puts(charging_capacitor(20.0, 2000.0, 0.0003, 4.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
