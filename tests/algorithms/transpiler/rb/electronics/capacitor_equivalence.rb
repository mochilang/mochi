# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def capacitor_parallel(capacitors)
    sum_c = 0.0
    i = 0
    while i < capacitors.length
      c = capacitors[i]
      if c < 0.0
        panic(_add(_add("Capacitor at index ", (i).to_s), " has a negative value!"))
        return 0.0
      end
      sum_c = _add(sum_c, c)
      i = _add(i, 1)
    end
    return sum_c
  end
  def capacitor_series(capacitors)
    first_sum = 0.0
    i = 0
    while i < capacitors.length
      c = capacitors[i]
      if c <= 0.0
        panic(_add(_add("Capacitor at index ", (i).to_s), " has a negative or zero value!"))
        return 0.0
      end
      first_sum = _add(first_sum, 1.0 / c)
      i = _add(i, 1)
    end
    return 1.0 / first_sum
  end
  def main()
    parallel = capacitor_parallel([5.71389, 12.0, 3.0])
    series = capacitor_series([5.71389, 12.0, 3.0])
    puts((parallel).to_s)
    puts((series).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
