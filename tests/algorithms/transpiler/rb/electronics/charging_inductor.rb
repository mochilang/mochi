# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def expApprox(x)
    if x < 0.0
      return 1.0 / expApprox(-x)
    end
    if x > 1.0
      half = expApprox(x / 2.0)
      return half * half
    end
    sum = 1.0
    term = 1.0
    n = 1
    while n < 20
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    result = 1.0
    i = 0
    while i < n
      result = result * 10.0
      i = _add(i, 1)
    end
    return result
  end
  def round(x, n)
    m = pow10(n)
    return floor(_add(x * m, 0.5)) / m
  end
  def charging_inductor(source_voltage, resistance, inductance, time)
    if source_voltage <= 0.0
      panic("Source voltage must be positive.")
    end
    if resistance <= 0.0
      panic("Resistance must be positive.")
    end
    if inductance <= 0.0
      panic("Inductance must be positive.")
    end
    exponent = (-time * resistance) / inductance
    current = source_voltage / resistance * (1.0 - expApprox(exponent))
    return round(current, 3)
  end
  puts(charging_inductor(5.8, 1.5, 2.3, 2.0))
  puts(charging_inductor(8.0, 5.0, 3.0, 2.0))
  puts(charging_inductor(8.0, 5.0 * pow10(2), 3.0, 2.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
