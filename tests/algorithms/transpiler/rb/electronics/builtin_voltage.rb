# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow10(n)
    result = 1.0
    i = 0
    while i < n
      result = result * 10.0
      i = _add(i, 1)
    end
    return result
  end
  def ln_series(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def ln(x)
    y = x
    k = 0
    while y >= 10.0
      y = y / 10.0
      k = _add(k, 1)
    end
    while y < 1.0
      y = y * 10.0
      k = k - 1
    end
    return _add(ln_series(y), ((k).to_f) * ln_series(10.0))
  end
  def builtin_voltage(donor_conc, acceptor_conc, intrinsic_conc)
    if donor_conc <= 0.0
      panic("Donor concentration should be positive")
    end
    if acceptor_conc <= 0.0
      panic("Acceptor concentration should be positive")
    end
    if intrinsic_conc <= 0.0
      panic("Intrinsic concentration should be positive")
    end
    if donor_conc <= intrinsic_conc
      panic("Donor concentration should be greater than intrinsic concentration")
    end
    if acceptor_conc <= intrinsic_conc
      panic("Acceptor concentration should be greater than intrinsic concentration")
    end
    return $BOLTZMANN * $TEMPERATURE * ln((donor_conc * acceptor_conc) / (intrinsic_conc * intrinsic_conc)) / $ELECTRON_VOLT
  end
  $BOLTZMANN = 1.380649 / pow10(23)
  $ELECTRON_VOLT = 1.602176634 / pow10(19)
  $TEMPERATURE = 300.0
  puts((builtin_voltage(pow10(17), pow10(17), pow10(10))).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
