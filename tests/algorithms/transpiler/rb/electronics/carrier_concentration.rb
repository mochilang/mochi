# Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def carrier_concentration(electron_conc, hole_conc, intrinsic_conc)
    zero_count = 0
    if _eq(electron_conc, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(hole_conc, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(intrinsic_conc, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if !_eq(zero_count, 1)
      panic("You cannot supply more or less than 2 values")
    end
    if electron_conc < 0.0
      panic("Electron concentration cannot be negative in a semiconductor")
    end
    if hole_conc < 0.0
      panic("Hole concentration cannot be negative in a semiconductor")
    end
    if intrinsic_conc < 0.0
      panic("Intrinsic concentration cannot be negative in a semiconductor")
    end
    if _eq(electron_conc, 0.0)
      return CarrierResult.new(name: "electron_conc", value: (intrinsic_conc * intrinsic_conc) / hole_conc)
    end
    if _eq(hole_conc, 0.0)
      return CarrierResult.new(name: "hole_conc", value: (intrinsic_conc * intrinsic_conc) / electron_conc)
    end
    if _eq(intrinsic_conc, 0.0)
      return CarrierResult.new(name: "intrinsic_conc", value: sqrtApprox(electron_conc * hole_conc))
    end
    return CarrierResult.new(name: "", value: -1.0)
  end
  Object.send(:remove_const, :CarrierResult) if Object.const_defined?(:CarrierResult)
  CarrierResult = Struct.new(:name, :value, keyword_init: true)
  $r1 = carrier_concentration(25.0, 100.0, 0.0)
  puts(_add(_add($r1.name, ", "), _str($r1.value)))
  $r2 = carrier_concentration(0.0, 1600.0, 200.0)
  puts(_add(_add($r2.name, ", "), _str($r2.value)))
  $r3 = carrier_concentration(1000.0, 0.0, 1200.0)
  puts(_add(_add($r3.name, ", "), _str($r3.value)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
