# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def carrier_concentration(electron_conc, hole_conc, intrinsic_conc)
    zero_count = 0
    if electron_conc == 0.0
      zero_count = _add(zero_count, 1)
    end
    if hole_conc == 0.0
      zero_count = _add(zero_count, 1)
    end
    if intrinsic_conc == 0.0
      zero_count = _add(zero_count, 1)
    end
    if zero_count != 1
      panic("You cannot supply more or less than 2 values")
    end
    if electron_conc < 0.0
      panic("Electron concentration cannot be negative in a semiconductor")
    end
    if hole_conc < 0.0
      panic("Hole concentration cannot be negative in a semiconductor")
    end
    if intrinsic_conc < 0.0
      panic("Intrinsic concentration cannot be negative in a semiconductor")
    end
    if electron_conc == 0.0
      return CarrierResult.new(name: "electron_conc", value: (intrinsic_conc * intrinsic_conc) / hole_conc)
    end
    if hole_conc == 0.0
      return CarrierResult.new(name: "hole_conc", value: (intrinsic_conc * intrinsic_conc) / electron_conc)
    end
    if intrinsic_conc == 0.0
      return CarrierResult.new(name: "intrinsic_conc", value: sqrtApprox(electron_conc * hole_conc))
    end
    return CarrierResult.new(name: "", value: -1.0)
  end
  CarrierResult = Struct.new(:name, :value, keyword_init: true)
  $r1 = carrier_concentration(25.0, 100.0, 0.0)
  puts(_add(_add($r1.name, ", "), ($r1.value).to_s))
  $r2 = carrier_concentration(0.0, 1600.0, 200.0)
  puts(_add(_add($r2.name, ", "), ($r2.value).to_s))
  $r3 = carrier_concentration(1000.0, 0.0, 1200.0)
  puts(_add(_add($r3.name, ", "), ($r3.value).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
