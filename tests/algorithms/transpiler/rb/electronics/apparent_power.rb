# Generated by Mochi transpiler v0.10.65 on 2025-08-14 10:00 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def to_radians(deg)
    return deg * $PI / 180.0
  end
  def sin_taylor(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def rect(mag, angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    return [mag * c, mag * s]
  end
  def multiply(a, b)
    return [(__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)) - (__tmp3 = a; __tmp3.is_a?(Hash) ? __tmp3[1] : _idx(__tmp3, 1)) * (__tmp4 = b; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1)), _add((__tmp5 = a; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)) * (__tmp6 = b; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1)), (__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[1] : _idx(__tmp7, 1)) * (__tmp8 = b; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)))]
  end
  def apparent_power(voltage, current, voltage_angle, current_angle)
    vrad = to_radians(voltage_angle)
    irad = to_radians(current_angle)
    vrect = rect(voltage, vrad)
    irect = rect(current, irad)
    result = multiply(vrect, irect)
    return result
  end
  def approx_equal(a, b, eps)
    return ((__tmp9 = a; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0)) - (__tmp10 = b; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0))).abs() < eps && ((__tmp11 = a; __tmp11.is_a?(Hash) ? __tmp11[1] : _idx(__tmp11, 1)) - (__tmp12 = b; __tmp12.is_a?(Hash) ? __tmp12[1] : _idx(__tmp12, 1))).abs() < eps
  end
  $PI = 3.141592653589793
  # test zero phase
  $s = apparent_power(100.0, 5.0, 0.0, 0.0)
  $expected = [500.0, 0.0]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.001)
  # test orthogonal voltage
  $s = apparent_power(100.0, 5.0, 90.0, 0.0)
  $expected = [0.0, 500.0]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.5)
  # test negative angles
  $s = apparent_power(100.0, 5.0, -45.0, -60.0)
  $expected = [-129.40952255126027, -482.9629131445341]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.001)
  # test another case
  $s = apparent_power(200.0, 10.0, -30.0, -90.0)
  $expected = [-1000.0, -1732.0508075688776]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.001)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
