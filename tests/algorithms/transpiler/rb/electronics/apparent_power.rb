# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def to_radians(deg)
    return deg * $PI / 180.0
  end
  def sin_taylor(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def rect(mag, angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    return [mag * c, mag * s]
  end
  def multiply(a, b)
    return [a[0] * b[0] - a[1] * b[1], _add(a[0] * b[1], a[1] * b[0])]
  end
  def apparent_power(voltage, current, voltage_angle, current_angle)
    vrad = to_radians(voltage_angle)
    irad = to_radians(current_angle)
    vrect = rect(voltage, vrad)
    irect = rect(current, irad)
    result = multiply(vrect, irect)
    return result
  end
  def approx_equal(a, b, eps)
    return abs(a[0] - b[0]) < eps && abs(a[1] - b[1]) < eps
  end
  $PI = 3.141592653589793
  # test zero phase
  $s = apparent_power(100.0, 5.0, 0.0, 0.0)
  $expected = [500.0, 0.0]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.001)
  # test orthogonal voltage
  $s = apparent_power(100.0, 5.0, 90.0, 0.0)
  $expected = [0.0, 500.0]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.5)
  # test negative angles
  $s = apparent_power(100.0, 5.0, -45.0, -60.0)
  $expected = [-129.40952255126027, -482.9629131445341]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.001)
  # test another case
  $s = apparent_power(200.0, 10.0, -30.0, -90.0)
  $expected = [-1000.0, -1732.0508075688776]
  raise 'assertion failed' unless approx_equal($s, $expected, 0.001)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
