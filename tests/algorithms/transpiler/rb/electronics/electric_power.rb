# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def pow10(n)
    p = 1.0
    i = 0
    while i < n
      p = p * 10.0
      i = _add(i, 1)
    end
    return p
  end
  def round_to(x, n)
    m = pow10(n)
    return _add(x * m, 0.5).floor() / m
  end
  def electric_power(voltage, current, power)
    zeros = 0
    if voltage == 0.0
      zeros = _add(zeros, 1)
    end
    if current == 0.0
      zeros = _add(zeros, 1)
    end
    if power == 0.0
      zeros = _add(zeros, 1)
    end
    if zeros != 1
      panic("Exactly one argument must be 0")
    else
      if power < 0.0
        panic("Power cannot be negative in any electrical/electronics system")
      else
        if voltage == 0.0
          return Result.new(name: "voltage", value: power / current)
        else
          if current == 0.0
            return Result.new(name: "current", value: power / voltage)
          else
            if power == 0.0
              p = absf(voltage * current)
              return Result.new(name: "power", value: round_to(p, 2))
            else
              panic("Unhandled case")
            end
          end
        end
      end
    end
  end
  def str_result(r)
    return _add(_add(_add(_add("Result(name='", r.name), "', value="), _str(r.value)), ")")
  end
  Result = Struct.new(:name, :value, keyword_init: true)
  $r1 = electric_power(0.0, 2.0, 5.0)
  puts(str_result($r1))
  $r2 = electric_power(2.0, 2.0, 0.0)
  puts(str_result($r2))
  $r3 = electric_power(-2.0, 3.0, 0.0)
  puts(str_result($r3))
  $r4 = electric_power(2.2, 2.2, 0.0)
  puts(str_result($r4))
  $r5 = electric_power(2.0, 0.0, 6.0)
  puts(str_result($r5))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
