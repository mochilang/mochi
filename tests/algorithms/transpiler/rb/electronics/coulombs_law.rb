# Generated by Mochi transpiler v0.10.65 on 2025-08-14 10:00 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def coulombs_law(force, charge1, charge2, distance)
    charge_product = (charge1 * charge2).abs()
    zero_count = 0
    if _eq(force, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(charge1, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(charge2, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(distance, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if !_eq(zero_count, 1)
      panic("One and only one argument must be 0")
    end
    if distance < 0.0
      panic("Distance cannot be negative")
    end
    if _eq(force, 0.0)
      f = $COULOMBS_CONSTANT * charge_product / (distance * distance)
      return {"force" => f}
    end
    if _eq(charge1, 0.0)
      c1 = force.abs() * (distance * distance) / ($COULOMBS_CONSTANT * charge2)
      return {"charge1" => c1}
    end
    if _eq(charge2, 0.0)
      c2 = force.abs() * (distance * distance) / ($COULOMBS_CONSTANT * charge1)
      return {"charge2" => c2}
    end
    d = sqrtApprox($COULOMBS_CONSTANT * charge_product / force.abs())
    return {"distance" => d}
  end
  def print_map(m)
        __tmp1 = m.keys()
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      puts(_add(_add(_add(_add("{\"", k), "\": "), _str((__tmp2 = m; __tmp2.is_a?(Hash) ? __tmp2[k] : _idx(__tmp2, k)))), "}"))
    end
  end
  $COULOMBS_CONSTANT = 8.988e+09
  print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0))
  print_map(coulombs_law(10.0, 3.0, 5.0, 0.0))
  print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
