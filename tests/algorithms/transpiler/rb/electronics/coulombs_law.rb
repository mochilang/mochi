# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def coulombs_law(force, charge1, charge2, distance)
    charge_product = abs(charge1 * charge2)
    zero_count = 0
    if force == 0.0
      zero_count = _add(zero_count, 1)
    end
    if charge1 == 0.0
      zero_count = _add(zero_count, 1)
    end
    if charge2 == 0.0
      zero_count = _add(zero_count, 1)
    end
    if distance == 0.0
      zero_count = _add(zero_count, 1)
    end
    if zero_count != 1
      panic("One and only one argument must be 0")
    end
    if distance < 0.0
      panic("Distance cannot be negative")
    end
    if force == 0.0
      f = $COULOMBS_CONSTANT * charge_product / (distance * distance)
      return {"force" => f}
    end
    if charge1 == 0.0
      c1 = abs(force) * (distance * distance) / ($COULOMBS_CONSTANT * charge2)
      return {"charge1" => c1}
    end
    if charge2 == 0.0
      c2 = abs(force) * (distance * distance) / ($COULOMBS_CONSTANT * charge1)
      return {"charge2" => c2}
    end
    d = sqrtApprox($COULOMBS_CONSTANT * charge_product / abs(force))
    return {"distance" => d}
  end
  def print_map(m)
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      puts(_add(_add(_add(_add("{\"", k), "\": "), (m[k]).to_s), "}"))
    end
  end
  $COULOMBS_CONSTANT = 8988000000.0
  print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0))
  print_map(coulombs_law(10.0, 3.0, 5.0, 0.0))
  print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
