# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ind_reactance(inductance, frequency, reactance)
    zero_count = 0
    if inductance == 0.0
      zero_count = _add(zero_count, 1)
    end
    if frequency == 0.0
      zero_count = _add(zero_count, 1)
    end
    if reactance == 0.0
      zero_count = _add(zero_count, 1)
    end
    if zero_count != 1
      panic("One and only one argument must be 0")
    end
    if inductance < 0.0
      panic("Inductance cannot be negative")
    end
    if frequency < 0.0
      panic("Frequency cannot be negative")
    end
    if reactance < 0.0
      panic("Inductive reactance cannot be negative")
    end
    if inductance == 0.0
      return {"inductance" => reactance / (2.0 * $PI * frequency)}
    end
    if frequency == 0.0
      return {"frequency" => reactance / (2.0 * $PI * inductance)}
    end
    return {"reactance" => 2.0 * $PI * frequency * inductance}
  end
  $PI = 3.141592653589793
  puts(ind_reactance(0.0, 10000.0, 50.0))
  puts(ind_reactance(0.035, 0.0, 50.0))
  puts(ind_reactance(3.5e-05, 1000.0, 0.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
