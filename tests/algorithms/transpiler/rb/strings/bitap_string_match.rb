# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pow2(n)
    res = 1.clone
    i = 0.clone
    while i < n
      res = res * 2.clone
      i = _add(i, 1).clone
    end
    return res
  end
  def bit_and(a, b)
    x = a.clone
    y = b.clone
    res = 0.clone
    bit = 1.clone
    while x > 0 || y > 0
      if x % 2 == 1 && y % 2 == 1
        res = _add(res, bit).clone
      end
      x = ((x / 2)).to_i.clone
      y = ((y / 2)).to_i.clone
      bit = bit * 2.clone
    end
    return res
  end
  def bit_or(a, b)
    x = a.clone
    y = b.clone
    res = 0.clone
    bit = 1.clone
    while x > 0 || y > 0
      if x % 2 == 1 || y % 2 == 1
        res = _add(res, bit).clone
      end
      x = ((x / 2)).to_i.clone
      y = ((y / 2)).to_i.clone
      bit = bit * 2.clone
    end
    return res
  end
  def char_to_index(ch)
    letters = "abcdefghijklmnopqrstuvwxyz"
    i = 0.clone
    while i < letters.length
      if letters[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1).clone
    end
    return 26
  end
  def bitap_string_match(text, pattern)
    if pattern == ""
      return 0
    end
    m = pattern.length
    if m > text.length
      return -1
    end
    limit = pow2(_add(m, 1))
    all_ones = limit - 1
    pattern_mask = [].clone
    i = 0.clone
    while i < 27
      pattern_mask = (pattern_mask << (all_ones)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < m
      ch = pattern[i..._add(i, 1)]
      idx = char_to_index(ch)
      pattern_mask[idx] = bit_and(pattern_mask[idx], all_ones - pow2(i))
      i = _add(i, 1).clone
    end
    state = all_ones - 1.clone
    i = 0.clone
    while i < text.length
      ch = text[i..._add(i, 1)]
      idx = char_to_index(ch)
      state = bit_or(state, pattern_mask[idx]).clone
      state = (state * 2) % limit.clone
      if bit_and(state, pow2(m)) == 0
        return _add(i - m, 1)
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def main()
    puts(_str(bitap_string_match("abdabababc", "ababc")))
    puts(_str(bitap_string_match("abdabababc", "")))
    puts(_str(bitap_string_match("abdabababc", "c")))
    puts(_str(bitap_string_match("abdabababc", "fofosdfo")))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
