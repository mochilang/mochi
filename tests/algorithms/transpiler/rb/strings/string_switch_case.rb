# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split_words(s)
    words = []
    current = ""
        __tmp1 = s
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each_char do |ch|
      if _eq(ch, " ")
        if !_eq(current, "")
          words = (words << (current))
          current = ""
        end
      else
        current = _add(current, ch)
      end
    end
    if !_eq(current, "")
      words = (words << (current))
    end
    return words
  end
  def is_alnum(c)
    return ("0123456789").include?(c) || ("abcdefghijklmnopqrstuvwxyz").include?(c) || ("ABCDEFGHIJKLMNOPQRSTUVWXYZ").include?(c) || _eq(c, " ")
  end
  def split_input(text)
    result = []
    current = ""
        __tmp2 = text
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each_char do |ch|
      if is_alnum(ch)
        current = _add(current, ch)
      else
        if !_eq(current, "")
          result = (result << (split_words(current)))
          current = ""
        end
      end
    end
    if !_eq(current, "")
      result = (result << (split_words(current)))
    end
    return result
  end
  def capitalize(word)
    if _eq(word.length, 0)
      return ""
    end
    if _eq(word.length, 1)
      return word.upcase()
    end
    return _add((word[0...1]).upcase(), (word[1...]).downcase())
  end
  def to_simple_case(text)
    parts = split_input(text)
    res = ""
        __tmp3 = parts
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |sub|
            __tmp4 = sub
      if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
        __tmp4 = __tmp4.keys
      end
      __tmp4.each do |w|
        res = _add(res, capitalize(w))
      end
    end
    return res
  end
  def to_complex_case(text, upper_flag, sep)
    parts = split_input(text)
    res = ""
        __tmp5 = parts
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |sub|
      first = true
            __tmp6 = sub
      if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
        __tmp6 = __tmp6.keys
      end
      __tmp6.each do |w|
        word = (upper_flag ? w.upcase() : w.downcase())
        if first
          res = _add(res, word)
          first = false
        else
          res = _add(_add(res, sep), word)
        end
      end
    end
    return res
  end
  def to_pascal_case(text)
    return to_simple_case(text)
  end
  def to_camel_case(text)
    s = to_simple_case(text)
    if _eq(s.length, 0)
      return ""
    end
    return _add((s[0...1]).downcase(), s[1...])
  end
  def to_snake_case(text, upper_flag)
    return to_complex_case(text, upper_flag, "_")
  end
  def to_kebab_case(text, upper_flag)
    return to_complex_case(text, upper_flag, "-")
  end
  puts(to_pascal_case("one two 31235three4four"))
  puts(to_camel_case("one two 31235three4four"))
  puts(to_snake_case("one two 31235three4four", true))
  puts(to_snake_case("one two 31235three4four", false))
  puts(to_kebab_case("one two 31235three4four", true))
  puts(to_kebab_case("one two 31235three4four", false))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
