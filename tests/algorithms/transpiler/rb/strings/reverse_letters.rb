# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i]
      if _eq(ch, sep)
        res = (res + [current])
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = (res + [current])
    return res
  end
  def join_with_space(xs)
    s = ""
    i = 0
    while i < xs.length
      s = _add(s, xs[i])
      if _add(i, 1) < xs.length
        s = _add(s, " ")
      end
      i = _add(i, 1)
    end
    return s
  end
  def reverse_str(s)
    res = ""
    i = s.length - 1
    while i >= 0
      res = _add(res, s[i])
      i = i - 1
    end
    return res
  end
  def reverse_letters(sentence, length)
    words = split(sentence, " ")
    result = []
    i = 0
    while i < words.length
      word = words[i]
      if word.length > length
        result = (result + [reverse_str(word)])
      else
        result = (result + [word])
      end
      i = _add(i, 1)
    end
    return join_with_space(result)
  end
  def test_reverse_letters()
    if !_eq(reverse_letters("Hey wollef sroirraw", 3), "Hey fellow warriors")
      panic("test1 failed")
    end
    if !_eq(reverse_letters("nohtyP is nohtyP", 2), "Python is Python")
      panic("test2 failed")
    end
    if !_eq(reverse_letters("1 12 123 1234 54321 654321", 0), "1 21 321 4321 12345 123456")
      panic("test3 failed")
    end
    if !_eq(reverse_letters("racecar", 0), "racecar")
      panic("test4 failed")
    end
  end
  def main()
    test_reverse_letters()
    puts(reverse_letters("Hey wollef sroirraw", 3))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
