# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    res = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i]
      if ch == sep
        res = (res << (current)).clone
        current = "".clone
      else
        current = _add(current, ch).clone
      end
      i = _add(i, 1).clone
    end
    res = (res << (current)).clone
    return res
  end
  def join_with_space(xs)
    s = "".clone
    i = 0.clone
    while i < xs.length
      s = _add(s, xs[i]).clone
      if _add(i, 1) < xs.length
        s = _add(s, " ").clone
      end
      i = _add(i, 1).clone
    end
    return s
  end
  def reverse_str(s)
    res = "".clone
    i = s.length - 1.clone
    while i >= 0
      res = _add(res, s[i]).clone
      i = i - 1.clone
    end
    return res
  end
  def reverse_letters(sentence, length)
    words = split(sentence, " ")
    result = [].clone
    i = 0.clone
    while i < words.length
      word = words[i]
      if word.length > length
        result = (result << (reverse_str(word))).clone
      else
        result = (result << (word)).clone
      end
      i = _add(i, 1).clone
    end
    return join_with_space(result)
  end
  def test_reverse_letters()
    if reverse_letters("Hey wollef sroirraw", 3) != "Hey fellow warriors"
      panic("test1 failed")
    end
    if reverse_letters("nohtyP is nohtyP", 2) != "Python is Python"
      panic("test2 failed")
    end
    if reverse_letters("1 12 123 1234 54321 654321", 0) != "1 21 321 4321 12345 123456"
      panic("test3 failed")
    end
    if reverse_letters("racecar", 0) != "racecar"
      panic("test4 failed")
    end
  end
  def main()
    test_reverse_letters()
    puts(reverse_letters("Hey wollef sroirraw", 3))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
