# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def range_list(n)
    lst = []
    i = 0
    while i < n
      lst = (lst << (i))
      i = _add(i, 1)
    end
    return lst
  end
  def min3(a, b, c)
    m = a
    if b < m
      m = b
    end
    if c < m
      m = c
    end
    return m
  end
  def levenshtein_distance(first_word, second_word)
    if first_word.length < second_word.length
      return levenshtein_distance(second_word, first_word)
    end
    if _eq(second_word.length, 0)
      return first_word.length
    end
    previous_row = range_list(_add(second_word.length, 1))
    i = 0
    while i < first_word.length
      c1 = first_word[i]
      current_row = []
      current_row = (current_row << (_add(i, 1)))
      j = 0
      while j < second_word.length
        c2 = second_word[j]
        insertions = _add(previous_row[_add(j, 1)], 1)
        deletions = _add(current_row[j], 1)
        substitutions = _add(previous_row[j], ((_eq(c1, c2) ? 0 : 1)))
        min_val = min3(insertions, deletions, substitutions)
        current_row = (current_row << (min_val))
        j = _add(j, 1)
      end
      previous_row = current_row
      i = _add(i, 1)
    end
    return previous_row[previous_row.length - 1]
  end
  def levenshtein_distance_optimized(first_word, second_word)
    if first_word.length < second_word.length
      return levenshtein_distance_optimized(second_word, first_word)
    end
    if _eq(second_word.length, 0)
      return first_word.length
    end
    previous_row = range_list(_add(second_word.length, 1))
    i = 0
    while i < first_word.length
      c1 = first_word[i]
      current_row = []
      current_row = (current_row << (_add(i, 1)))
      k = 0
      while k < second_word.length
        current_row = (current_row << (0))
        k = _add(k, 1)
      end
      j = 0
      while j < second_word.length
        c2 = second_word[j]
        insertions = _add(previous_row[_add(j, 1)], 1)
        deletions = _add(current_row[j], 1)
        substitutions = _add(previous_row[j], ((_eq(c1, c2) ? 0 : 1)))
        min_val = min3(insertions, deletions, substitutions)
        current_row[_add(j, 1)] = min_val
        j = _add(j, 1)
      end
      previous_row = current_row
      i = _add(i, 1)
    end
    return previous_row[previous_row.length - 1]
  end
  def main()
    a = "kitten"
    b = "sitting"
    puts(_str(levenshtein_distance(a, b)))
    puts(_str(levenshtein_distance_optimized(a, b)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
