# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def prefix_function(s)
    pi = []
    i = 0
    while i < s.length
      pi = (pi << (0))
      i = _add(i, 1)
    end
    i = 1
    while i < s.length
      j = pi[i - 1]
      while j > 0 && !_eq(s[i], s[j])
        j = pi[j - 1]
      end
      if _eq(s[i], s[j])
        j = _add(j, 1)
      end
      pi[i] = j
      i = _add(i, 1)
    end
    return pi
  end
  def longest_prefix(s)
    pi = prefix_function(s)
    max_val = 0
    i = 0
    while i < pi.length
      if pi[i] > max_val
        max_val = pi[i]
      end
      i = _add(i, 1)
    end
    return max_val
  end
  def list_eq_int(a, b)
    if !_eq(a.length, b.length)
      return false
    end
    i = 0
    while i < a.length
      if !_eq(a[i], b[i])
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def test_prefix_function()
    s1 = "aabcdaabc"
    expected1 = [0, 1, 0, 0, 0, 1, 2, 3, 4]
    r1 = prefix_function(s1)
    if !list_eq_int(r1, expected1)
      panic("prefix_function aabcdaabc failed")
    end
    s2 = "asdasdad"
    expected2 = [0, 0, 0, 1, 2, 3, 4, 0]
    r2 = prefix_function(s2)
    if !list_eq_int(r2, expected2)
      panic("prefix_function asdasdad failed")
    end
  end
  def test_longest_prefix()
    if !_eq(longest_prefix("aabcdaabc"), 4)
      panic("longest_prefix example1 failed")
    end
    if !_eq(longest_prefix("asdasdad"), 4)
      panic("longest_prefix example2 failed")
    end
    if !_eq(longest_prefix("abcab"), 2)
      panic("longest_prefix example3 failed")
    end
  end
  def main()
    test_prefix_function()
    test_longest_prefix()
    r1 = prefix_function("aabcdaabc")
    r2 = prefix_function("asdasdad")
    puts(((x = r1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = r2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_str(longest_prefix("aabcdaabc")))
    puts(_str(longest_prefix("abcab")))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
