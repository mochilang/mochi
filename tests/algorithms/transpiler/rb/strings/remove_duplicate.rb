# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split_ws(s)
    res = []
    word = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if _eq(ch, " ")
        if !_eq(word, "")
          res = (res << (word))
          word = ""
        end
      else
        word = _add(word, ch)
      end
      i = _add(i, 1)
    end
    if !_eq(word, "")
      res = (res << (word))
    end
    return res
  end
  def contains(xs, x)
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def unique(xs)
    res = []
    i = 0
    while i < xs.length
      w = xs[i]
      if !contains(res, w)
        res = (res << (w))
      end
      i = _add(i, 1)
    end
    return res
  end
  def insertion_sort(arr)
    a = arr
    i = 1
    while i < a.length
      key = a[i]
      j = i - 1
      while j >= 0 && a[j] > key
        a[_add(j, 1)] = a[j]
        j = j - 1
      end
      a[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return a
  end
  def join_with_space(xs)
    s = ""
    i = 0
    while i < xs.length
      if i > 0
        s = _add(s, " ")
      end
      s = _add(s, xs[i])
      i = _add(i, 1)
    end
    return s
  end
  def remove_duplicates(sentence)
    words = split_ws(sentence)
    uniq = unique(words)
    sorted_words = insertion_sort(uniq)
    return join_with_space(sorted_words)
  end
  puts(remove_duplicates("Python is great and Java is also great"))
  puts(remove_duplicates("Python   is      great and Java is also great"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
