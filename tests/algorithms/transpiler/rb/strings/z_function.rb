# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def z_function(s)
    z = []
    i = 0
    while i < s.length
      z = (z << (0))
      i = _add(i, 1)
    end
    l = 0
    r = 0
    i = 1
    while i < s.length
      if i <= r
        min_edge = _add(r - i, 1)
        zi = z[i - l]
        if zi < min_edge
          min_edge = zi
        end
        z[i] = min_edge
      end
      while go_next(i, z, s)
        z[i] = _add(z[i], 1)
      end
      if _add(i, z[i]) - 1 > r
        l = i
        r = _add(i, z[i]) - 1
      end
      i = _add(i, 1)
    end
    return z
  end
  def go_next(i, z, s)
    return _add(i, z[i]) < s.length && _eq(s[z[i]], s[_add(i, z[i])])
  end
  def find_pattern(pattern, input_str)
    answer = 0
    z_res = z_function(_add(pattern, input_str))
    i = 0
    while i < z_res.length
      if z_res[i] >= pattern.length
        answer = _add(answer, 1)
      end
      i = _add(i, 1)
    end
    return answer
  end
  def list_eq_int(a, b)
    if !_eq(a.length, b.length)
      return false
    end
    i = 0
    while i < a.length
      if !_eq(a[i], b[i])
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def test_z_function()
    s1 = "abracadabra"
    expected1 = [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]
    r1 = z_function(s1)
    if !list_eq_int(r1, expected1)
      panic("z_function abracadabra failed")
    end
    s2 = "aaaa"
    expected2 = [0, 3, 2, 1]
    r2 = z_function(s2)
    if !list_eq_int(r2, expected2)
      panic("z_function aaaa failed")
    end
    s3 = "zxxzxxz"
    expected3 = [0, 0, 0, 4, 0, 0, 1]
    r3 = z_function(s3)
    if !list_eq_int(r3, expected3)
      panic("z_function zxxzxxz failed")
    end
  end
  def test_find_pattern()
    if !_eq(find_pattern("abr", "abracadabra"), 2)
      panic("find_pattern abr failed")
    end
    if !_eq(find_pattern("a", "aaaa"), 4)
      panic("find_pattern aaaa failed")
    end
    if !_eq(find_pattern("xz", "zxxzxxz"), 2)
      panic("find_pattern xz failed")
    end
  end
  def main()
    test_z_function()
    test_find_pattern()
    r1 = z_function("abracadabra")
    r2 = z_function("aaaa")
    r3 = z_function("zxxzxxz")
    puts(((x = r1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = r2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = r3); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_str(find_pattern("abr", "abracadabra")))
    puts(_str(find_pattern("a", "aaaa")))
    puts(_str(find_pattern("xz", "zxxzxxz")))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
