# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    res = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == sep
        res = (res << (current)).clone
        current = "".clone
      else
        current = _add(current, ch).clone
      end
      i = _add(i, 1).clone
    end
    res = (res << (current)).clone
    return res
  end
  def capitalize(word)
    if word.length == 0
      return ""
    end
    first = (word[0...1]).upcase()
    rest = word[1...word.length]
    return _add(first, rest)
  end
  def snake_to_camel_case(input_str, use_pascal)
    words = split(input_str, "_")
    result = "".clone
    index = 0.clone
    if !use_pascal
      if words.length > 0
        result = words[0].clone
        index = 1.clone
      end
    end
    while index < words.length
      word = words[index]
      result = _add(result, capitalize(word)).clone
      index = _add(index, 1).clone
    end
    return result
  end
  puts(snake_to_camel_case("some_random_string", false))
  puts(snake_to_camel_case("some_random_string", true))
  puts(snake_to_camel_case("some_random_string_with_numbers_123", false))
  puts(snake_to_camel_case("some_random_string_with_numbers_123", true))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
