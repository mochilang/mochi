# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def char_to_lower(c)
    i = 0
    while i < $LETTERS.length
      if _eq(c, $LETTERS[i..._add(i, 1)])
        return $LOWERCASE[i..._add(i, 1)]
      end
      i = _add(i, 1)
    end
    return c
  end
  def normalize(input_str)
    res = ""
    i = 0
    while i < input_str.length
      ch = input_str[i..._add(i, 1)]
      lc = char_to_lower(ch)
      if lc >= "a" && lc <= "z"
        res = _add(res, lc)
      end
      i = _add(i, 1)
    end
    return res
  end
  def can_string_be_rearranged_as_palindrome_counter(input_str)
    s = normalize(input_str)
    freq = {}
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if freq.key?(ch)
        freq[ch] = _add(freq[ch], 1)
      else
        freq[ch] = 1
      end
      i = _add(i, 1)
    end
    odd = 0
        __tmp1 = freq.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if !_eq(freq[key] % 2, 0)
        odd = _add(odd, 1)
      end
    end
    return odd < 2
  end
  def can_string_be_rearranged_as_palindrome(input_str)
    s = normalize(input_str)
    if _eq(s.length, 0)
      return true
    end
    character_freq_dict = {}
    i = 0
    while i < s.length
      character = s[i..._add(i, 1)]
      if character_freq_dict.key?(character)
        character_freq_dict[character] = _add(character_freq_dict[character], 1)
      else
        character_freq_dict[character] = 1
      end
      i = _add(i, 1)
    end
    odd_char = 0
        __tmp2 = character_freq_dict.keys()
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |character_key|
      character_count = character_freq_dict[character_key]
      if !_eq(character_count % 2, 0)
        odd_char = _add(odd_char, 1)
      end
    end
    return !(odd_char > 1)
  end
  $LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
  puts((can_string_be_rearranged_as_palindrome_counter("Momo") ? 'true' : 'false'))
  puts((can_string_be_rearranged_as_palindrome_counter("Mother") ? 'true' : 'false'))
  puts((can_string_be_rearranged_as_palindrome("Momo") ? 'true' : 'false'))
  puts((can_string_be_rearranged_as_palindrome("Mother") ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
