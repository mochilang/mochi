# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def validate_initial_digits(cc)
    return _eq(cc[0...2], "34") || _eq(cc[0...2], "35") || _eq(cc[0...2], "37") || _eq(cc[0...1], "4") || _eq(cc[0...1], "5") || _eq(cc[0...1], "6")
  end
  def luhn_validation(cc)
    sum = 0
    double_digit = false
    i = cc.length - 1
    while i >= 0
      n = (cc[i..._add(i, 1)]).to_i
      if double_digit
        n = n * 2
        if n > 9
          n = n - 9
        end
      end
      sum = _add(sum, n)
      double_digit = !double_digit
      i = i - 1
    end
    return _eq(sum % 10, 0)
  end
  def is_digit_string(s)
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if c < "0" || c > "9"
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def validate_credit_card_number(cc)
    error_message = _add(cc, " is an invalid credit card number because")
    if !is_digit_string(cc)
      puts(_add(error_message, " it has nonnumerical characters."))
      return false
    end
    if !(cc.length >= 13 && cc.length <= 16)
      puts(_add(error_message, " of its length."))
      return false
    end
    if !validate_initial_digits(cc)
      puts(_add(error_message, " of its first two digits."))
      return false
    end
    if !luhn_validation(cc)
      puts(_add(error_message, " it fails the Luhn check."))
      return false
    end
    puts(_add(cc, " is a valid credit card number."))
    return true
  end
  def main()
    validate_credit_card_number("4111111111111111")
    validate_credit_card_number("32323")
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
