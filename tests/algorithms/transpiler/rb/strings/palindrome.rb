# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def reverse(s)
    res = "".clone
    i = s.length - 1.clone
    while i >= 0
      res = _add(res, s[i]).clone
      i = i - 1.clone
    end
    return res
  end
  def is_palindrome(s)
    start_i = 0.clone
    end_i = s.length - 1.clone
    while start_i < end_i
      if s[start_i] == s[end_i]
        start_i = _add(start_i, 1).clone
        end_i = end_i - 1.clone
      else
        return false
      end
    end
    return true
  end
  def is_palindrome_traversal(s)
    end_ = s.length / 2
    n = s.length
    i = 0.clone
    while i < end_
      if s[i] != s[n - i - 1]
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def is_palindrome_recursive(s)
    if s.length <= 1
      return true
    end
    if s[0] == s[s.length - 1]
      return is_palindrome_recursive(s[1...s.length - 1])
    end
    return false
  end
  def is_palindrome_slice(s)
    return s == reverse(s)
  end
  def main()
        __tmp1 = $test_data
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |t|
      s = t.text
      expected = t.expected
      r1 = is_palindrome(s)
      r2 = is_palindrome_traversal(s)
      r3 = is_palindrome_recursive(s)
      r4 = is_palindrome_slice(s)
      if r1 != expected || r2 != expected || r3 != expected || r4 != expected
        panic("algorithm mismatch")
      end
      puts(_add(_add(s, " "), _str(expected)))
    end
    puts("a man a plan a canal panama")
  end
  Case = Struct.new(:text, :expected, keyword_init: true)
  $test_data = [Case.new(text: "MALAYALAM", expected: true), Case.new(text: "String", expected: false), Case.new(text: "rotor", expected: true), Case.new(text: "level", expected: true), Case.new(text: "A", expected: true), Case.new(text: "BB", expected: true), Case.new(text: "ABC", expected: false), Case.new(text: "amanaplanacanalpanama", expected: true)]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
