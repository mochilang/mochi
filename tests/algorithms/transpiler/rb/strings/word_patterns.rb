# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def find_index(xs, x)
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def get_word_pattern(word)
    w = word.upcase()
    letters = []
    numbers = []
    next_num = 0
    res = ""
    i = 0
    while i < w.length
      ch = w[i]
      idx = find_index(letters, ch)
      num_str = ""
      if idx >= 0
        num_str = numbers[idx]
      else
        num_str = _str(next_num)
        letters = (letters + [ch])
        numbers = (numbers + [num_str])
        next_num = _add(next_num, 1)
      end
      if i > 0
        res = _add(res, ".")
      end
      res = _add(res, num_str)
      i = _add(i, 1)
    end
    return res
  end
  def main()
    puts(get_word_pattern(""))
    puts(get_word_pattern(" "))
    puts(get_word_pattern("pattern"))
    puts(get_word_pattern("word pattern"))
    puts(get_word_pattern("get word pattern"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
