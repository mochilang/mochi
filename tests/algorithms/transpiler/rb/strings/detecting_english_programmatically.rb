# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def to_upper(s)
    res = ""
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      j = 0
      up = c
      while j < $LOWER.length
        if _eq(c, $LOWER[j..._add(j, 1)])
          up = $UPPER[j..._add(j, 1)]
          break
        end
        j = _add(j, 1)
      end
      res = _add(res, up)
      i = _add(i, 1)
    end
    return res
  end
  def char_in(chars, c)
    i = 0
    while i < chars.length
      if _eq(chars[i..._add(i, 1)], c)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def remove_non_letters(message)
    res = ""
    i = 0
    while i < message.length
      ch = message[i..._add(i, 1)]
      if char_in($LETTERS_AND_SPACE, ch)
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def split_spaces(text)
    res = []
    current = ""
    i = 0
    while i < text.length
      ch = text[i..._add(i, 1)]
      if _eq(ch, " ")
        res = (res << (current))
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = (res << (current))
    return res
  end
  def load_dictionary()
    words = ["HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG"]
    dict = {}
        __tmp1 = words
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |w|
      dict[w] = true
    end
    return dict
  end
  def get_english_count(message)
    upper = to_upper(message)
    cleaned = remove_non_letters(upper)
    possible = split_spaces(cleaned)
    matches = 0
    total = 0
        __tmp2 = possible
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |w|
      if !_eq(w, "")
        total = _add(total, 1)
        if $ENGLISH_WORDS.key?(w)
          matches = _add(matches, 1)
        end
      end
    end
    if _eq(total, 0)
      return 0.0
    end
    return ((matches).to_f) / ((total).to_f)
  end
  def is_english(message, word_percentage, letter_percentage)
    words_match = get_english_count(message) * 100.0 >= ((word_percentage).to_f)
    num_letters = remove_non_letters(message).length
    letters_pct = (_eq(message.length, 0) ? 0.0 : ((num_letters).to_f) / ((message.length).to_f) * 100.0)
    letters_match = letters_pct >= ((letter_percentage).to_f)
    return words_match && letters_match
  end
  $LETTERS_AND_SPACE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $ENGLISH_WORDS = load_dictionary()
  puts(_str(is_english("Hello World", 20, 85)))
  puts(_str(is_english("llold HorWd", 20, 85)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
