# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def ord(ch)
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    digits = "0123456789"
    i = 0
    while i < lower.length
      if _eq(lower[i], ch)
        return _add(97, i)
      end
      i = _add(i, 1)
    end
    i = 0
    while i < upper.length
      if _eq(upper[i], ch)
        return _add(65, i)
      end
      i = _add(i, 1)
    end
    i = 0
    while i < digits.length
      if _eq(digits[i], ch)
        return _add(48, i)
      end
      i = _add(i, 1)
    end
    if _eq(ch, " ")
      return 32
    end
    if _eq(ch, "_")
      return 95
    end
    if _eq(ch, ".")
      return 46
    end
    if _eq(ch, "'")
      return 39
    end
    return 0
  end
  def lshift(num, k)
    result = num
    i = 0
    while i < k
      result = result * 2
      i = _add(i, 1)
    end
    return result
  end
  def rshift(num, k)
    result = num
    i = 0
    while i < k
      result = (result - (result % 2)) / 2
      i = _add(i, 1)
    end
    return result
  end
  def is_contains_unique_chars(input_str)
    bitmap = 0
    i = 0
    while i < input_str.length
      code = ord(input_str[i])
      if _eq(rshift(bitmap, code) % 2, 1)
        return false
      end
      bitmap = _add(bitmap, lshift(1, code))
      i = _add(i, 1)
    end
    return true
  end
  puts(_str(is_contains_unique_chars("I_love.py")))
  puts(_str(is_contains_unique_chars("I don't love Python")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
