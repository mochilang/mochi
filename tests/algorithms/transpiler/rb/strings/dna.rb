# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_valid(strand)
    i = 0.clone
    while i < strand.length
      ch = strand[i..._add(i, 1)]
      if ch != "A" && ch != "T" && ch != "C" && ch != "G"
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def dna(strand)
    if !is_valid(strand)
      puts("ValueError: Invalid Strand")
      return ""
    end
    result = "".clone
    i = 0.clone
    while i < strand.length
      ch = strand[i..._add(i, 1)]
      if ch == "A"
        result = _add(result, "T").clone
      else
        if ch == "T"
          result = _add(result, "A").clone
        else
          if ch == "C"
            result = _add(result, "G").clone
          else
            result = _add(result, "C").clone
          end
        end
      end
      i = _add(i, 1).clone
    end
    return result
  end
  puts(dna("GCTA"))
  puts(dna("ATGC"))
  puts(dna("CTGA"))
  puts(dna("GFGG"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
