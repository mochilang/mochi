# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0.clone
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def to_title_case(word)
    if word.length == 0
      return ""
    end
    first = word[0...1]
    idx = index_of($lower, first)
    result = (idx >= 0 ? $upper[idx..._add(idx, 1)] : first).clone
    i = 1.clone
    while i < word.length
      ch = word[i..._add(i, 1)]
      uidx = index_of($upper, ch)
      if uidx >= 0
        result = _add(result, $lower[uidx..._add(uidx, 1)]).clone
      else
        result = _add(result, ch).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def split_words(s)
    words = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i]
      if ch == " "
        if current.length > 0
          words = (words << (current)).clone
          current = "".clone
        end
      else
        current = _add(current, ch).clone
      end
      i = _add(i, 1).clone
    end
    if current.length > 0
      words = (words << (current)).clone
    end
    return words
  end
  def sentence_to_title_case(sentence)
    words = split_words(sentence)
    res = "".clone
    i = 0.clone
    while i < words.length
      res = _add(res, to_title_case(words[i])).clone
      if _add(i, 1) < words.length
        res = _add(res, " ").clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  $lower = "abcdefghijklmnopqrstuvwxyz"
  $upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  puts(to_title_case("Aakash"))
  puts(to_title_case("aakash"))
  puts(to_title_case("AAKASH"))
  puts(to_title_case("aAkAsH"))
  puts(sentence_to_title_case("Aakash Giri"))
  puts(sentence_to_title_case("aakash giri"))
  puts(sentence_to_title_case("AAKASH GIRI"))
  puts(sentence_to_title_case("aAkAsH gIrI"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
