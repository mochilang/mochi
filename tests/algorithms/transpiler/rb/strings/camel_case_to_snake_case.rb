# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_lower(ch)
    i = 0.clone
    while i < $LOWER.length
      if $LOWER[i] == ch
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def is_upper(ch)
    i = 0.clone
    while i < $UPPER.length
      if $UPPER[i] == ch
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def is_digit(ch)
    i = 0.clone
    while i < $DIGITS.length
      if $DIGITS[i] == ch
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def is_alpha(ch)
    if is_lower(ch)
      return true
    end
    if is_upper(ch)
      return true
    end
    return false
  end
  def is_alnum(ch)
    if is_alpha(ch)
      return true
    end
    if is_digit(ch)
      return true
    end
    return false
  end
  def to_lower(ch)
    i = 0.clone
    while i < $UPPER.length
      if $UPPER[i] == ch
        return $LOWER[i]
      end
      i = _add(i, 1).clone
    end
    return ch
  end
  def camel_to_snake_case(input_str)
    snake_str = "".clone
    i = 0.clone
    prev_is_digit = false.clone
    prev_is_alpha = false.clone
    while i < input_str.length
      ch = input_str[i]
      if is_upper(ch)
        snake_str = _add(_add(snake_str, "_"), to_lower(ch)).clone
      else
        if prev_is_digit && is_lower(ch)
          snake_str = _add(_add(snake_str, "_"), ch).clone
        else
          if prev_is_alpha && is_digit(ch)
            snake_str = _add(_add(snake_str, "_"), ch).clone
          else
            if !is_alnum(ch)
              snake_str = _add(snake_str, "_").clone
            else
              snake_str = _add(snake_str, ch).clone
            end
          end
        end
      end
      prev_is_digit = is_digit(ch).clone
      prev_is_alpha = is_alpha(ch).clone
      i = _add(i, 1).clone
    end
    if snake_str.length > 0 && snake_str[0] == "_"
      snake_str = snake_str[1...snake_str.length].clone
    end
    return snake_str
  end
  def main()
    puts(camel_to_snake_case("someRandomString"))
    puts(camel_to_snake_case("SomeRandomStr#ng"))
    puts(camel_to_snake_case("123SomeRandom123String123"))
  end
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $DIGITS = "0123456789"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
