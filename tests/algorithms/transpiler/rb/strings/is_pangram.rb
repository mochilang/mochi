# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_pangram(input_str)
    letters = []
    i = 0
    while i < input_str.length
      c = (input_str[i]).downcase()
      is_new = !(letters.include?(c))
      if !_eq(c, " ") && "a" <= c && c <= "z" && is_new
        letters = (letters + [c])
      end
      i = _add(i, 1)
    end
    return _eq(letters.length, 26)
  end
  def is_pangram_faster(input_str)
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    flag = []
    i = 0
    while i < 26
      flag = (flag + [false])
      i = _add(i, 1)
    end
    j = 0
    while j < input_str.length
      c = (input_str[j]).downcase()
      k = 0
      while k < 26
        if _eq(alphabet[k], c)
          flag[k] = true
          break
        end
        k = _add(k, 1)
      end
      j = _add(j, 1)
    end
    t = 0
    while t < 26
      if !flag[t]
        return false
      end
      t = _add(t, 1)
    end
    return true
  end
  def is_pangram_fastest(input_str)
    s = input_str.downcase()
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    i = 0
    while i < alphabet.length
      letter = alphabet[i]
      if !(s.include?(letter))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  $s1 = "The quick brown fox jumps over the lazy dog"
  $s2 = "My name is Unknown"
  puts(_str(is_pangram($s1)))
  puts(_str(is_pangram($s2)))
  puts(_str(is_pangram_faster($s1)))
  puts(_str(is_pangram_faster($s2)))
  puts(_str(is_pangram_fastest($s1)))
  puts(_str(is_pangram_fastest($s2)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
