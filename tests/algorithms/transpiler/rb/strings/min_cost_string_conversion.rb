# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def string_to_chars(s)
    chars = []
    i = 0
    while i < s.length
      chars = (chars + [s[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    return chars
  end
  def join_chars(chars)
    res = ""
    i = 0
    while i < chars.length
      res = _add(res, chars[i])
      i = _add(i, 1)
    end
    return res
  end
  def insert_at(chars, index, ch)
    res = []
    i = 0
    while i < index
      res = (res + [chars[i]])
      i = _add(i, 1)
    end
    res = (res + [ch])
    while i < chars.length
      res = (res + [chars[i]])
      i = _add(i, 1)
    end
    return res
  end
  def remove_at(chars, index)
    res = []
    i = 0
    while i < chars.length
      if !_eq(i, index)
        res = (res + [chars[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def make_matrix_int(rows, cols, init)
    matrix = []
    (0...rows).each do |_|
      row = []
      (0...cols).each do |unused2|
        row = (row + [init])
      end
      matrix = (matrix + [row])
    end
    return matrix
  end
  def make_matrix_string(rows, cols, init)
    matrix = []
    (0...rows).each do |_|
      row = []
      (0...cols).each do |unused2|
        row = (row + [init])
      end
      matrix = (matrix + [row])
    end
    return matrix
  end
  def compute_transform_tables(source_string, destination_string, copy_cost, replace_cost, delete_cost, insert_cost)
    source_seq = string_to_chars(source_string)
    dest_seq = string_to_chars(destination_string)
    m = source_seq.length
    n = dest_seq.length
    costs = make_matrix_int(_add(m, 1), _add(n, 1), 0)
    ops = make_matrix_string(_add(m, 1), _add(n, 1), "0")
    i = 1
    while i <= m
      costs[i][0] = i * delete_cost
      ops[i][0] = _add("D", source_seq[i - 1])
      i = _add(i, 1)
    end
    j = 1
    while j <= n
      costs[0][j] = j * insert_cost
      ops[0][j] = _add("I", dest_seq[j - 1])
      j = _add(j, 1)
    end
    i = 1
    while i <= m
      j = 1
      while j <= n
        if _eq(source_seq[i - 1], dest_seq[j - 1])
          costs[i][j] = _add(costs[i - 1][j - 1], copy_cost)
          ops[i][j] = _add("C", source_seq[i - 1])
        else
          costs[i][j] = _add(costs[i - 1][j - 1], replace_cost)
          ops[i][j] = _add(_add("R", source_seq[i - 1]), dest_seq[j - 1])
        end
        if _add(costs[i - 1][j], delete_cost) < costs[i][j]
          costs[i][j] = _add(costs[i - 1][j], delete_cost)
          ops[i][j] = _add("D", source_seq[i - 1])
        end
        if _add(costs[i][j - 1], insert_cost) < costs[i][j]
          costs[i][j] = _add(costs[i][j - 1], insert_cost)
          ops[i][j] = _add("I", dest_seq[j - 1])
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return TransformTables.new(costs: costs, ops: ops)
  end
  def assemble_transformation(ops, i, j)
    if _eq(i, 0) && _eq(j, 0)
      return []
    end
    op = ops[i][j]
    kind = op[0...1]
    if _eq(kind, "C") || _eq(kind, "R")
      seq = assemble_transformation(ops, i - 1, j - 1)
      seq = (seq + [op])
      return seq
    else
      if _eq(kind, "D")
        seq = assemble_transformation(ops, i - 1, j)
        seq = (seq + [op])
        return seq
      else
        seq = assemble_transformation(ops, i, j - 1)
        seq = (seq + [op])
        return seq
      end
    end
  end
  def main()
    copy_cost = -1
    replace_cost = 1
    delete_cost = 2
    insert_cost = 2
    src = "Python"
    dst = "Algorithms"
    tables = compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost)
    operations = tables.ops
    m = operations.length
    n = operations[0].length
    sequence = assemble_transformation(operations, m - 1, n - 1)
    string_list = string_to_chars(src)
    idx = 0
    cost = 0
    k = 0
    while k < sequence.length
      puts(join_chars(string_list))
      op = sequence[k]
      kind = op[0...1]
      if _eq(kind, "C")
        cost = _add(cost, copy_cost)
      else
        if _eq(kind, "R")
          string_list[idx] = op[2...3]
          cost = _add(cost, replace_cost)
        else
          if _eq(kind, "D")
            string_list = remove_at(string_list, idx)
            cost = _add(cost, delete_cost)
          else
            string_list = insert_at(string_list, idx, op[1...2])
            cost = _add(cost, insert_cost)
          end
        end
      end
      idx = _add(idx, 1)
      k = _add(k, 1)
    end
    puts(join_chars(string_list))
    puts(_add("Cost: ", _str(cost)))
  end
  TransformTables = Struct.new(:costs, :ops, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
