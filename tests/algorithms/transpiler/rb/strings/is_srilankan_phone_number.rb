# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def starts_with(s, prefix)
    if s.length < prefix.length
      return false
    end
    return s[0...prefix.length] == prefix
  end
  def all_digits(s)
    i = 0.clone
    while i < s.length
      c = s[i]
      if c < "0" || c > "9"
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def is_sri_lankan_phone_number(phone)
    p = phone.clone
    if starts_with(p, "+94")
      p = p[3...p.length].clone
    else
      if starts_with(p, "0094")
        p = p[4...p.length].clone
      else
        if starts_with(p, "94")
          p = p[2...p.length].clone
        else
          if starts_with(p, "0")
            p = p[1...p.length].clone
          else
            return false
          end
        end
      end
    end
    if p.length != 9 && p.length != 10
      return false
    end
    if p[0] != "7"
      return false
    end
    second = p[1]
    allowed = ["0", "1", "2", "4", "5", "6", "7", "8"]
    if !(allowed.include?(second))
      return false
    end
    idx = 2.clone
    if p.length == 10
      sep = p[2]
      if sep != "-" && sep != " "
        return false
      end
      idx = 3.clone
    end
    if p.length - idx != 7
      return false
    end
    rest = p[idx...p.length]
    return all_digits(rest)
  end
  $phone = "0094702343221"
  puts(_str(is_sri_lankan_phone_number($phone)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
