# Generated by Mochi transpiler v0.10.67 on 2025-08-17 09:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end

_dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/strings"

def _read_file(path)
  p = path
  if defined?(_dataDir) && !_dataDir.nil? && !File.exist?(p)
    p = File.join(_dataDir, path)
  end
  begin
    File.read(p)
  rescue StandardError
    ''
  end
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < _len(s)
      ch = s[i..._add(i, 1)]
      if _eq(ch, sep)
        res = _append(res, current)
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = _append(res, current)
    return res
  end
  def insertion_sort(arr)
    a = arr
    i = 1
    while i < _len(a)
      key = (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      j = i - 1
      while j >= 0 && (__tmp2 = a; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)) > key
        a[_add(j, 1)] = (__tmp3 = a; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
        j = j - 1
      end
      a[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return a
  end
  def sort_chars(word)
    chars = []
    i = 0
    while i < _len(word)
      chars = _append(chars, word[i..._add(i, 1)])
      i = _add(i, 1)
    end
    chars = insertion_sort(chars)
    res = ""
    i = 0
    while i < _len(chars)
      res = _add(res, (__tmp4 = chars; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
      i = _add(i, 1)
    end
    return res
  end
  def unique_sorted(words)
    seen = {}
    res = []
        __tmp5 = words
    __tmp5 = [] if __tmp5.nil?
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |w|
      if !_eq(w, "") && not(_has(seen, w))
        res = _append(res, w)
        seen[w] = true
      end
    end
    res = insertion_sort(res)
    return res
  end
  def build_map(words)
        __tmp6 = words
    __tmp6 = [] if __tmp6.nil?
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |w|
      sig = sort_chars(w)
      arr = []
      if _has($word_by_signature, sig)
        arr = (__tmp7 = $word_by_signature; __tmp7.is_a?(Hash) ? __tmp7[sig] : _idx(__tmp7, sig))
      end
      arr = _append(arr, w)
      $word_by_signature[sig] = arr
    end
  end
  def anagram(my_word)
    sig = sort_chars(my_word)
    if _has($word_by_signature, sig)
      return (__tmp8 = $word_by_signature; __tmp8.is_a?(Hash) ? __tmp8[sig] : _idx(__tmp8, sig))
    end
    return []
  end
  def main()
    text = _read_file("words.txt")
    lines = split(text, "\n")
    words = unique_sorted(lines)
    build_map(words)
        __tmp9 = words
    __tmp9 = [] if __tmp9.nil?
    if __tmp9.respond_to?(:keys) && !__tmp9.is_a?(String)
      __tmp9 = __tmp9.keys
    end
    __tmp9.each do |w|
      anas = anagram(w)
      if _len(anas) > 1
        line = _add(w, ":")
        i = 0
        while i < _len(anas)
          if i > 0
            line = _add(line, ",")
          end
          line = _add(line, (__tmp10 = anas; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
          i = _add(i, 1)
        end
        puts(line)
      end
    end
  end
  $word_by_signature = {}
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
