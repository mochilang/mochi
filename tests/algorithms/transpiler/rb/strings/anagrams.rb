# Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:23 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _read_file(path)
  base = __dir__.sub(%r{tests/algorithms/transpiler/rb}, 'tests/github/TheAlgorithms/Mochi')
  File.read(File.join(base, path))
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if _eq(ch, sep)
        res = (res + [current])
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = (res + [current])
    return res
  end
  def insertion_sort(arr)
    a = arr
    i = 1
    while i < a.length
      key = a[i]
      j = i - 1
      while j >= 0 && a[j] > key
        a[_add(j, 1)] = a[j]
        j = j - 1
      end
      a[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return a
  end
  def sort_chars(word)
    chars = []
    i = 0
    while i < word.length
      chars = (chars + [word[i..._add(i, 1)]])
      i = _add(i, 1)
    end
    chars = insertion_sort(chars)
    res = ""
    i = 0
    while i < chars.length
      res = _add(res, chars[i])
      i = _add(i, 1)
    end
    return res
  end
  def unique_sorted(words)
    seen = {}
    res = []
        __tmp1 = words
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |w|
      if !_eq(w, "") && !(seen.key?(w))
        res = (res + [w])
        seen[w] = true
      end
    end
    res = insertion_sort(res)
    return res
  end
  def build_map(words)
        __tmp2 = words
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |w|
      sig = sort_chars(w)
      arr = []
      if $word_by_signature.key?(sig)
        arr = $word_by_signature[sig]
      end
      arr = (arr + [w])
      $word_by_signature[sig] = arr
    end
  end
  def anagram(my_word)
    sig = sort_chars(my_word)
    if $word_by_signature.key?(sig)
      return $word_by_signature[sig]
    end
    return []
  end
  def main()
    text = _read_file("words.txt")
    lines = split(text, "\n")
    words = unique_sorted(lines)
    build_map(words)
        __tmp3 = words
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |w|
      anas = anagram(w)
      if anas.length > 1
        line = _add(w, ":")
        i = 0
        while i < anas.length
          if i > 0
            line = _add(line, ",")
          end
          line = _add(line, anas[i])
          i = _add(i, 1)
        end
        puts(line)
      end
    end
  end
  $word_by_signature = {}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
