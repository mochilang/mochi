# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def repeat_str(s, count)
    res = "".clone
    i = 0.clone
    while i < count
      res = _add(res, s).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def split_words(s)
    res = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == " "
        if current != ""
          res = (res << (current)).clone
          current = "".clone
        end
      else
        current = _add(current, ch).clone
      end
      i = _add(i, 1).clone
    end
    if current != ""
      res = (res << (current)).clone
    end
    return res
  end
  def justify_line(line, width, max_width)
    overall_spaces_count = max_width - width
    words_count = line.length
    if words_count == 1
      return _add(line[0], repeat_str(" ", overall_spaces_count))
    end
    spaces_to_insert_between_words = words_count - 1
    num_spaces_between_words_list = [].clone
    base = overall_spaces_count / spaces_to_insert_between_words
    extra = overall_spaces_count % spaces_to_insert_between_words
    i = 0.clone
    while i < spaces_to_insert_between_words
      spaces = base.clone
      if i < extra
        spaces = _add(spaces, 1).clone
      end
      num_spaces_between_words_list = (num_spaces_between_words_list << (spaces)).clone
      i = _add(i, 1).clone
    end
    aligned = "".clone
    i = 0.clone
    while i < spaces_to_insert_between_words
      aligned = _add(_add(aligned, line[i]), repeat_str(" ", num_spaces_between_words_list[i])).clone
      i = _add(i, 1).clone
    end
    aligned = _add(aligned, line[spaces_to_insert_between_words]).clone
    return aligned
  end
  def text_justification(word, max_width)
    words = split_words(word)
    answer = [].clone
    line = [].clone
    width = 0.clone
    idx = 0.clone
    while idx < words.length
      w = words[idx]
      if _add(_add(width, w.length), line.length) <= max_width
        line = (line << (w)).clone
        width = _add(width, w.length).clone
      else
        answer = (answer << (justify_line(line, width, max_width))).clone
        line = [w].clone
        width = w.length.clone
      end
      idx = _add(idx, 1).clone
    end
    remaining_spaces = max_width - width - line.length
    last_line = "".clone
    j = 0.clone
    while j < line.length
      if j > 0
        last_line = _add(last_line, " ").clone
      end
      last_line = _add(last_line, line[j]).clone
      j = _add(j, 1).clone
    end
    last_line = _add(last_line, repeat_str(" ", _add(remaining_spaces, 1))).clone
    answer = (answer << (last_line)).clone
    return answer
  end
  puts(((x = text_justification("This is an example of text justification.", 16)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = text_justification("Two roads diverged in a yellow wood", 16)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
