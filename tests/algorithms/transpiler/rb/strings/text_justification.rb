# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def repeat_str(s, count)
    res = ""
    i = 0
    while i < count
      res = _add(res, s)
      i = _add(i, 1)
    end
    return res
  end
  def split_words(s)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if _eq(ch, " ")
        if !_eq(current, "")
          res = (res + [current])
          current = ""
        end
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    if !_eq(current, "")
      res = (res + [current])
    end
    return res
  end
  def justify_line(line, width, max_width)
    overall_spaces_count = max_width - width
    words_count = line.length
    if _eq(words_count, 1)
      return _add(line[0], repeat_str(" ", overall_spaces_count))
    end
    spaces_to_insert_between_words = words_count - 1
    num_spaces_between_words_list = []
    base = overall_spaces_count / spaces_to_insert_between_words
    extra = overall_spaces_count % spaces_to_insert_between_words
    i = 0
    while i < spaces_to_insert_between_words
      spaces = base
      if i < extra
        spaces = _add(spaces, 1)
      end
      num_spaces_between_words_list = (num_spaces_between_words_list + [spaces])
      i = _add(i, 1)
    end
    aligned = ""
    i = 0
    while i < spaces_to_insert_between_words
      aligned = _add(_add(aligned, line[i]), repeat_str(" ", num_spaces_between_words_list[i]))
      i = _add(i, 1)
    end
    aligned = _add(aligned, line[spaces_to_insert_between_words])
    return aligned
  end
  def text_justification(word, max_width)
    words = split_words(word)
    answer = []
    line = []
    width = 0
    idx = 0
    while idx < words.length
      w = words[idx]
      if _add(_add(width, w.length), line.length) <= max_width
        line = (line + [w])
        width = _add(width, w.length)
      else
        answer = (answer + [justify_line(line, width, max_width)])
        line = [w]
        width = w.length
      end
      idx = _add(idx, 1)
    end
    remaining_spaces = max_width - width - line.length
    last_line = ""
    j = 0
    while j < line.length
      if j > 0
        last_line = _add(last_line, " ")
      end
      last_line = _add(last_line, line[j])
      j = _add(j, 1)
    end
    last_line = _add(last_line, repeat_str(" ", _add(remaining_spaces, 1)))
    answer = (answer + [last_line])
    return answer
  end
  puts(((x = text_justification("This is an example of text justification.", 16)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = text_justification("Two roads diverged in a yellow wood", 16)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
