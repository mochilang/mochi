# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def palindromic_string(input_string)
    max_length = 0
    new_input_string = ""
    output_string = ""
    n = input_string.length
    i = 0
    while i < n - 1
      new_input_string = _add(_add(new_input_string, input_string[i..._add(i, 1)]), "|")
      i = _add(i, 1)
    end
    new_input_string = _add(new_input_string, input_string[n - 1...n])
    left = 0
    right = 0
    length = []
    i = 0
    m = new_input_string.length
    while i < m
      length = (length + [1])
      i = _add(i, 1)
    end
    start = 0
    j = 0
    while j < m
      k = 1
      if j <= right
        mirror = _add(left, right) - j
        k = length[mirror] / 2
        diff = _add(right - j, 1)
        if diff < k
          k = diff
        end
        if k < 1
          k = 1
        end
      end
      while j - k >= 0 && _add(j, k) < m && _eq(new_input_string[_add(j, k)..._add(_add(j, k), 1)], new_input_string[j - k..._add(j - k, 1)])
        k = _add(k, 1)
      end
      length[j] = 2 * k - 1
      if _add(j, k) - 1 > right
        left = _add(j - k, 1)
        right = _add(j, k) - 1
      end
      if length[j] > max_length
        max_length = length[j]
        start = j
      end
      j = _add(j, 1)
    end
    s = new_input_string[start - max_length / 2..._add(_add(start, max_length / 2), 1)]
    idx = 0
    while idx < s.length
      ch = s[idx..._add(idx, 1)]
      if !_eq(ch, "|")
        output_string = _add(output_string, ch)
      end
      idx = _add(idx, 1)
    end
    return output_string
  end
  def main()
    puts(palindromic_string("abbbaba"))
    puts(palindromic_string("ababa"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
