# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def strip(s)
    start = 0.clone
    end_ = s.length.clone
    while start < end_ && s[start..._add(start, 1)] == " "
      start = _add(start, 1).clone
    end
    while end_ > start && s[end_ - 1...end_] == " "
      end_ = end_ - 1.clone
    end
    return s[start...end_]
  end
  def is_vowel(c)
    i = 0.clone
    while i < $VOWELS.length
      if c == $VOWELS[i..._add(i, 1)]
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def pig_latin(word)
    trimmed = strip(word)
    if trimmed.length == 0
      return ""
    end
    w = trimmed.downcase()
    first = w[0...1]
    if is_vowel(first)
      return _add(w, "way")
    end
    i = 0.clone
    while i < w.length
      ch = w[i..._add(i, 1)]
      if is_vowel(ch)
        break
      end
      i = _add(i, 1).clone
    end
    return _add(_add(w[i...w.length], w[0...i]), "ay")
  end
  $VOWELS = "aeiou"
  puts(_add("pig_latin('friends') = ", pig_latin("friends")))
  puts(_add("pig_latin('smile') = ", pig_latin("smile")))
  puts(_add("pig_latin('eat') = ", pig_latin("eat")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
