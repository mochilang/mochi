# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def to_upper(s)
    res = ""
    i = 0
    while i < s.length
      ch = s[i]
      j = 0
      converted = ch
      while j < $LOWER.length
        if _eq($LOWER[j], ch)
          converted = $UPPER[j]
          break
        end
        j = _add(j, 1)
      end
      res = _add(res, converted)
      i = _add(i, 1)
    end
    return res
  end
  def is_digit(ch)
    i = 0
    while i < $DIGITS.length
      if _eq($DIGITS[i], ch)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def clean_id(spanish_id)
    upper_id = to_upper(spanish_id)
    cleaned = ""
    i = 0
    while i < upper_id.length
      ch = upper_id[i]
      if !_eq(ch, "-")
        cleaned = _add(cleaned, ch)
      end
      i = _add(i, 1)
    end
    return cleaned
  end
  def is_spain_national_id(spanish_id)
    sid = clean_id(spanish_id)
    if !_eq(sid.length, 9)
      panic($ERROR_MSG)
    end
    i = 0
    while i < 8
      if !is_digit(sid[i])
        panic($ERROR_MSG)
      end
      i = _add(i, 1)
    end
    number = (sid[0...8]).to_i
    letter = sid[8]
    if is_digit(letter)
      panic($ERROR_MSG)
    end
    expected = $LOOKUP_LETTERS[number % 23]
    return _eq(letter, expected)
  end
  def main()
    puts((is_spain_national_id("12345678Z") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678z") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678x") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678I") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678-Z") ? 'true' : 'false'))
  end
  $DIGITS = "0123456789"
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
  $ERROR_MSG = "Input must be a string of 8 numbers plus letter"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
