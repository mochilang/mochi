# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def to_upper(s)
    res = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i]
      j = 0.clone
      converted = ch.clone
      while j < $LOWER.length
        if $LOWER[j] == ch
          converted = $UPPER[j].clone
          break
        end
        j = _add(j, 1).clone
      end
      res = _add(res, converted).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def is_digit(ch)
    i = 0.clone
    while i < $DIGITS.length
      if $DIGITS[i] == ch
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def clean_id(spanish_id)
    upper_id = to_upper(spanish_id)
    cleaned = "".clone
    i = 0.clone
    while i < upper_id.length
      ch = upper_id[i]
      if ch != "-"
        cleaned = _add(cleaned, ch).clone
      end
      i = _add(i, 1).clone
    end
    return cleaned
  end
  def is_spain_national_id(spanish_id)
    sid = clean_id(spanish_id)
    if sid.length != 9
      panic($ERROR_MSG)
    end
    i = 0.clone
    while i < 8
      if !is_digit(sid[i])
        panic($ERROR_MSG)
      end
      i = _add(i, 1).clone
    end
    number = (sid[0...8]).to_i
    letter = sid[8]
    if is_digit(letter)
      panic($ERROR_MSG)
    end
    expected = $LOOKUP_LETTERS[number % 23]
    return letter == expected
  end
  def main()
    puts((is_spain_national_id("12345678Z") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678z") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678x") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678I") ? 'true' : 'false'))
    puts((is_spain_national_id("12345678-Z") ? 'true' : 'false'))
  end
  $DIGITS = "0123456789"
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
  $ERROR_MSG = "Input must be a string of 8 numbers plus letter"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
