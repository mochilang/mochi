# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def damerau_levenshtein_distance(first_string, second_string)
    len1 = first_string.length
    len2 = second_string.length
    dp_matrix = []
    (0...(_add(len1, 1))).each do |_|
      row = []
      (0...(_add(len2, 1))).each do |unused2|
        row = (row << (0))
      end
      dp_matrix = (dp_matrix << (row))
    end
    (0...(_add(len1, 1))).each do |i|
      row = dp_matrix[i]
      row[0] = i
      dp_matrix[i] = row
    end
    first_row = dp_matrix[0]
    (0...(_add(len2, 1))).each do |j|
      first_row[j] = j
    end
    dp_matrix[0] = first_row
    (1...(_add(len1, 1))).each do |i|
      row = dp_matrix[i]
      first_char = first_string[i - 1...i]
      (1...(_add(len2, 1))).each do |j|
        second_char = second_string[j - 1...j]
        cost = (_eq(first_char, second_char) ? 0 : 1)
        value = _add(dp_matrix[i - 1][j], 1)
        insertion = _add(row[j - 1], 1)
        if insertion < value
          value = insertion
        end
        substitution = _add(dp_matrix[i - 1][j - 1], cost)
        if substitution < value
          value = substitution
        end
        row[j] = value
        if i > 1 && j > 1 && _eq(first_string[i - 1...i], second_string[j - 2...j - 1]) && _eq(first_string[i - 2...i - 1], second_string[j - 1...j])
          transposition = _add(dp_matrix[i - 2][j - 2], cost)
          if transposition < row[j]
            row[j] = transposition
          end
        end
      end
      dp_matrix[i] = row
    end
    return dp_matrix[len1][len2]
  end
  puts(_str(damerau_levenshtein_distance("cat", "cut")))
  puts(_str(damerau_levenshtein_distance("kitten", "sitting")))
  puts(_str(damerau_levenshtein_distance("hello", "world")))
  puts(_str(damerau_levenshtein_distance("book", "back")))
  puts(_str(damerau_levenshtein_distance("container", "containment")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
