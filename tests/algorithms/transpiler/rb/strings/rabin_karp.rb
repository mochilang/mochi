# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of_char(s, ch)
    i = 0
    while i < s.length
      if _eq(s[i], ch)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    digits = "0123456789"
    idx = index_of_char(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = index_of_char(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    idx = index_of_char(digits, ch)
    if idx >= 0
      return _add(48, idx)
    end
    if _eq(ch, "ü")
      return 252
    end
    if _eq(ch, "Ü")
      return 220
    end
    if _eq(ch, " ")
      return 32
    end
    return 0
  end
  def rabin_karp(pattern, text)
    p_len = pattern.length
    t_len = text.length
    if p_len > t_len
      return false
    end
    p_hash = 0
    t_hash = 0
    modulus_power = 1
    i = 0
    while i < p_len
      p_hash = (_add(ord(pattern[i]), p_hash * $alphabet_size)) % $modulus
      t_hash = (_add(ord(text[i]), t_hash * $alphabet_size)) % $modulus
      if !_eq(i, p_len - 1)
        modulus_power = (modulus_power * $alphabet_size) % $modulus
      end
      i = _add(i, 1)
    end
    j = 0
    while j <= t_len - p_len
      if _eq(t_hash, p_hash) && _eq(text[j..._add(j, p_len)], pattern)
        return true
      end
      if _eq(j, t_len - p_len)
        j = _add(j, 1)
        next
      end
      t_hash = (_add((t_hash - ord(text[j]) * modulus_power) * $alphabet_size, ord(text[_add(j, p_len)]))) % $modulus
      if t_hash < 0
        t_hash = _add(t_hash, $modulus)
      end
      j = _add(j, 1)
    end
    return false
  end
  def test_rabin_karp()
    pattern1 = "abc1abc12"
    text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc"
    text2 = "alskfjaldsk23adsfabcabc"
    if !rabin_karp(pattern1, text1) || rabin_karp(pattern1, text2)
      puts("Failure")
      return
    end
    pattern2 = "ABABX"
    text3 = "ABABZABABYABABX"
    if !rabin_karp(pattern2, text3)
      puts("Failure")
      return
    end
    pattern3 = "AAAB"
    text4 = "ABAAAAAB"
    if !rabin_karp(pattern3, text4)
      puts("Failure")
      return
    end
    pattern4 = "abcdabcy"
    text5 = "abcxabcdabxabcdabcdabcy"
    if !rabin_karp(pattern4, text5)
      puts("Failure")
      return
    end
    pattern5 = "Lü"
    text6 = "Lüsai"
    if !rabin_karp(pattern5, text6)
      puts("Failure")
      return
    end
    pattern6 = "Lue"
    if rabin_karp(pattern6, text6)
      puts("Failure")
      return
    end
    puts("Success.")
  end
  $alphabet_size = 256
  $modulus = 1000003
  test_rabin_karp()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
