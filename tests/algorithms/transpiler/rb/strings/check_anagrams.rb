# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def strip_and_remove_spaces(s)
    start = 0
    end_ = s.length - 1
    while start < s.length && _eq(s[start], " ")
      start = _add(start, 1)
    end
    while end_ >= start && _eq(s[end_], " ")
      end_ = end_ - 1
    end
    res = ""
    i = start
    while i <= end_
      ch = s[i]
      if !_eq(ch, " ")
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def check_anagrams(a, b)
    s1 = a.downcase()
    s2 = b.downcase()
    s1 = strip_and_remove_spaces(s1)
    s2 = strip_and_remove_spaces(s2)
    if !_eq(s1.length, s2.length)
      return false
    end
    count = {}
    i = 0
    while i < s1.length
      c1 = s1[i]
      c2 = s2[i]
      if count.key?(c1)
        count[c1] = _add(count[c1], 1)
      else
        count[c1] = 1
      end
      if count.key?(c2)
        count[c2] = count[c2] - 1
      else
        count[c2] = -1
      end
      i = _add(i, 1)
    end
        __tmp1 = count.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |ch|
      if !_eq(count[ch], 0)
        return false
      end
    end
    return true
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  print_bool(check_anagrams("Silent", "Listen"))
  print_bool(check_anagrams("This is a string", "Is this a string"))
  print_bool(check_anagrams("This is    a      string", "Is     this a string"))
  print_bool(check_anagrams("There", "Their"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
