# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def min_int(a, b)
    if a < b
      return a
    else
      return b
    end
  end
  def max_int(a, b)
    if a > b
      return a
    else
      return b
    end
  end
  def repeat_bool(n, value)
    res = [].clone
    i = 0.clone
    while i < n
      res = (res << (value)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def set_bool(xs, idx, value)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if i == idx
        res = (res << (value)).clone
      else
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def jaro_winkler(s1, s2)
    len1 = s1.length
    len2 = s2.length
    limit = min_int(len1, len2) / 2
    match1 = repeat_bool(len1, false).clone
    match2 = repeat_bool(len2, false).clone
    matches = 0.clone
    i = 0.clone
    while i < len1
      start = max_int(0, i - limit)
      end_ = min_int(_add(_add(i, limit), 1), len2)
      j = start.clone
      while j < end_
        if !match2[j] && s1[i..._add(i, 1)] == s2[j..._add(j, 1)]
          match1 = set_bool(match1, i, true).clone
          match2 = set_bool(match2, j, true).clone
          matches = _add(matches, 1).clone
          break
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    if matches == 0
      return 0.0
    end
    transpositions = 0.clone
    k = 0.clone
    i = 0.clone
    while i < len1
      if match1[i]
        while !match2[k]
          k = _add(k, 1).clone
        end
        if s1[i..._add(i, 1)] != s2[k..._add(k, 1)]
          transpositions = _add(transpositions, 1).clone
        end
        k = _add(k, 1).clone
      end
      i = _add(i, 1).clone
    end
    m = (matches).to_f
    jaro = (_add(_add((m / ((len1).to_f)), (m / ((len2).to_f))), ((m - ((transpositions).to_f) / 2.0) / m))) / 3.0
    prefix_len = 0.clone
    i = 0.clone
    while i < 4 && i < len1 && i < len2
      if s1[i..._add(i, 1)] == s2[i..._add(i, 1)]
        prefix_len = _add(prefix_len, 1).clone
      else
        break
      end
      i = _add(i, 1).clone
    end
    return _add(jaro, 0.1 * ((prefix_len).to_f) * (1.0 - jaro))
  end
  puts(_str(jaro_winkler("hello", "world")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
