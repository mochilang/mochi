# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def has_alpha(s)
    i = 0.clone
    while i < s.length
      c = s[i]
      if (c >= "a" && c <= "z") || (c >= "A" && c <= "Z")
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def parse_decimal(s)
    value = 0.clone
    i = 0.clone
    while i < s.length
      c = s[i]
      if c < "0" || c > "9"
        panic("Non-digit character encountered")
      end
      value = _add(value * 10, ((c).to_i)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def get_barcode(barcode)
    if has_alpha(barcode)
      panic(_add(_add("Barcode '", barcode), "' has alphabetic characters."))
    end
    if barcode.length > 0 && barcode[0] == "-"
      panic("The entered barcode has a negative value. Try again.")
    end
    return parse_decimal(barcode)
  end
  def get_check_digit(barcode)
    num = barcode / 10.clone
    s = 0.clone
    position = 0.clone
    while num != 0
      mult = (position % 2 == 0 ? 3 : 1)
      s = _add(s, mult * (num % 10)).clone
      num = num / 10.clone
      position = _add(position, 1).clone
    end
    return (10 - (s % 10)) % 10
  end
  def is_valid(barcode)
    return _str(barcode).length == 13 && get_check_digit(barcode) == barcode % 10
  end
  puts(_str(get_check_digit(8718452538119)))
  puts(_str(get_check_digit(87184523)))
  puts(_str(get_check_digit(87193425381086)))
  $res = [].clone
  $x = 0.clone
  while $x < 100
    $res = ($res << (get_check_digit($x))).clone
    $x = _add($x, 10).clone
  end
  puts(((x = $res); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(_str(is_valid(8718452538119)))
  puts(_str(is_valid(87184525)))
  puts(_str(is_valid(87193425381089)))
  puts(_str(is_valid(0)))
  puts(_str(get_barcode("8718452538119")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
