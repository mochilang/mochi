# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def make_matrix_bool(rows, cols, init)
    matrix = []
    (0...rows).each do |_|
      row = []
      (0...cols).each do |unused2|
        row = (row << (init))
      end
      matrix = (matrix << (row))
    end
    return matrix
  end
  def match_pattern(input_string, pattern)
    len_string = _add(input_string.length, 1)
    len_pattern = _add(pattern.length, 1)
    dp = make_matrix_bool(len_string, len_pattern, false)
    row0 = dp[0]
    row0[0] = true
    dp[0] = row0
    j = 1
    while j < len_pattern
      row0 = dp[0]
      if _eq(pattern[j - 1...j], "*")
        row0[j] = row0[j - 2]
      else
        row0[j] = false
      end
      dp[0] = row0
      j = _add(j, 1)
    end
    i = 1
    while i < len_string
      row = dp[i]
      j2 = 1
      while j2 < len_pattern
        s_char = input_string[i - 1...i]
        p_char = pattern[j2 - 1...j2]
        if _eq(s_char, p_char) || _eq(p_char, ".")
          row[j2] = dp[i - 1][j2 - 1]
        else
          if _eq(p_char, "*")
            val = dp[i][j2 - 2]
            prev_p = pattern[j2 - 2...j2 - 1]
            if !val && (_eq(prev_p, s_char) || _eq(prev_p, "."))
              val = dp[i - 1][j2]
            end
            row[j2] = val
          else
            row[j2] = false
          end
        end
        j2 = _add(j2, 1)
      end
      dp[i] = row
      i = _add(i, 1)
    end
    return dp[len_string - 1][len_pattern - 1]
  end
  def main()
    if !match_pattern("aab", "c*a*b")
      panic("case1 failed")
    end
    if match_pattern("dabc", "*abc")
      panic("case2 failed")
    end
    if match_pattern("aaa", "aa")
      panic("case3 failed")
    end
    if !match_pattern("aaa", "a.a")
      panic("case4 failed")
    end
    if match_pattern("aaab", "aa*")
      panic("case5 failed")
    end
    if !match_pattern("aaab", ".*")
      panic("case6 failed")
    end
    if match_pattern("a", "bbbb")
      panic("case7 failed")
    end
    if match_pattern("", "bbbb")
      panic("case8 failed")
    end
    if match_pattern("a", "")
      panic("case9 failed")
    end
    if !match_pattern("", "")
      panic("case10 failed")
    end
    puts(_str(match_pattern("aab", "c*a*b")))
    puts(_str(match_pattern("dabc", "*abc")))
    puts(_str(match_pattern("aaa", "aa")))
    puts(_str(match_pattern("aaa", "a.a")))
    puts(_str(match_pattern("aaab", "aa*")))
    puts(_str(match_pattern("aaab", ".*")))
    puts(_str(match_pattern("a", "bbbb")))
    puts(_str(match_pattern("", "bbbb")))
    puts(_str(match_pattern("a", "")))
    puts(_str(match_pattern("", "")))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
