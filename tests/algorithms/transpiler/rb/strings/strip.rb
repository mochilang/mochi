# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def contains(chars, ch)
    i = 0.clone
    while i < chars.length
      if chars[i] == ch
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def substring(s, start, end_)
    res = "".clone
    i = start.clone
    while i < end_
      res = _add(res, s[i]).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def strip_chars(user_string, characters)
    start = 0.clone
    end_ = user_string.length.clone
    while start < end_ && contains(characters, user_string[start])
      start = _add(start, 1).clone
    end
    while end_ > start && contains(characters, user_string[end_ - 1])
      end_ = end_ - 1.clone
    end
    return user_string[start...end_]
  end
  def strip(user_string)
    return strip_chars(user_string, " \t\n\r")
  end
  def test_strip()
    if strip("   hello   ") != "hello"
      panic("test1 failed")
    end
    if strip_chars("...world...", ".") != "world"
      panic("test2 failed")
    end
    if strip_chars("123hello123", "123") != "hello"
      panic("test3 failed")
    end
    if strip("") != ""
      panic("test4 failed")
    end
  end
  def main()
    test_strip()
    puts(strip("   hello   "))
    puts(strip_chars("...world...", "."))
    puts(strip_chars("123hello123", "123"))
    puts(strip(""))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
