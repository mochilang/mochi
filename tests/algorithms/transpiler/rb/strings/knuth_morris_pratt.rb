# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_failure_array(pattern)
    failure = [0]
    i = 0
    j = 1
    while j < pattern.length
      if _eq(pattern[i..._add(i, 1)], pattern[j..._add(j, 1)])
        i = _add(i, 1)
      else
        if i > 0
          i = failure[i - 1]
          next
        end
      end
      j = _add(j, 1)
      failure = (failure + [i])
    end
    return failure
  end
  def knuth_morris_pratt(text, pattern)
    failure = get_failure_array(pattern)
    i = 0
    j = 0
    while i < text.length
      if _eq(pattern[j..._add(j, 1)], text[i..._add(i, 1)])
        if _eq(j, pattern.length - 1)
          return i - j
        end
        j = _add(j, 1)
      else
        if j > 0
          j = failure[j - 1]
          next
        end
      end
      i = _add(i, 1)
    end
    return -1
  end
  $text = "abcxabcdabxabcdabcdabcy"
  $pattern = "abcdabcy"
  puts(knuth_morris_pratt($text, $pattern))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
