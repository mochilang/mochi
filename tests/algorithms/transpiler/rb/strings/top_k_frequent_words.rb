# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def heapify(arr, index, heap_size)
    largest = index
    left = _add(2 * index, 1)
    right = _add(2 * index, 2)
    if left < heap_size
      left_item = arr[left]
      largest_item = arr[largest]
      if left_item.count > largest_item.count
        largest = left
      end
    end
    if right < heap_size
      right_item = arr[right]
      largest_item2 = arr[largest]
      if right_item.count > largest_item2.count
        largest = right
      end
    end
    if !_eq(largest, index)
      temp = arr[largest]
      arr[largest] = arr[index]
      arr[index] = temp
      heapify(arr, largest, heap_size)
    end
  end
  def build_max_heap(arr)
    i = arr.length / 2 - 1
    while i >= 0
      heapify(arr, i, arr.length)
      i = i - 1
    end
  end
  def top_k_frequent_words(words, k_value)
    $freq_map = {}
    i = 0
    while i < words.length
      w = words[i]
      if $freq_map.key?(w)
        $freq_map[w] = _add($freq_map[w], 1)
      else
        $freq_map[w] = 1
      end
      i = _add(i, 1)
    end
    heap = []
        __tmp1 = $freq_map.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |w|
      heap = (heap + [WordCount.new(word: w, count: $freq_map[w])])
    end
    build_max_heap(heap)
    result = []
    heap_size = heap.length
    limit = k_value
    if limit > heap_size
      limit = heap_size
    end
    j = 0
    while j < limit
      item = heap[0]
      result = (result + [item["word"]])
      heap[0] = heap[heap_size - 1]
      heap[heap_size - 1] = item
      heap_size = heap_size - 1
      heapify(heap, 0, heap_size)
      j = _add(j, 1)
    end
    return result
  end
  def main()
    sample = ["a", "b", "c", "a", "c", "c"]
    puts(((x = top_k_frequent_words(sample, 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = top_k_frequent_words(sample, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = top_k_frequent_words(sample, 1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = top_k_frequent_words(sample, 0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  WordCount = Struct.new(:word, :count, keyword_init: true)
  $freq_map = {}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
