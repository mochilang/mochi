# Generated by Mochi transpiler v0.10.63 on 2025-08-11 15:32 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def etaoin_index(letter)
    i = 0
    while i < $ETAOIN.length
      if _eq($ETAOIN[i..._add(i, 1)], letter)
        return i
      end
      i = _add(i, 1)
    end
    return $ETAOIN.length
  end
  def get_letter_count(message)
    letter_count = {}
    i = 0
    while i < $LETTERS.length
      c = $LETTERS[i..._add(i, 1)]
      letter_count[c] = 0
      i = _add(i, 1)
    end
    msg = message.upcase()
    j = 0
    while j < msg.length
      ch = msg[j..._add(j, 1)]
      if $LETTERS.include?(ch)
        letter_count[ch] = _add(letter_count[ch], 1)
      end
      j = _add(j, 1)
    end
    return letter_count
  end
  def get_frequency_order(message)
    letter_to_freq = get_letter_count(message)
    max_freq = 0
    i = 0
    while i < $LETTERS.length
      letter = $LETTERS[i..._add(i, 1)]
      f = letter_to_freq[letter]
      if f > max_freq
        max_freq = f
      end
      i = _add(i, 1)
    end
    result = ""
    freq = max_freq
    while freq >= 0
      group = []
      j = 0
      while j < $LETTERS.length
        letter = $LETTERS[j..._add(j, 1)]
        if _eq(letter_to_freq[letter], freq)
          group = (group + [letter])
        end
        j = _add(j, 1)
      end
      g_len = group.length
      a = 0
      while a < g_len
        b = 0
        while b < g_len - a - 1
          g1 = group[b]
          g2 = group[_add(b, 1)]
          idx1 = etaoin_index(g1)
          idx2 = etaoin_index(g2)
          if idx1 < idx2
            tmp = group[b]
            group[b] = group[_add(b, 1)]
            group[_add(b, 1)] = tmp
          end
          b = _add(b, 1)
        end
        a = _add(a, 1)
      end
      g = 0
      while g < group.length
        result = _add(result, group[g])
        g = _add(g, 1)
      end
      freq = freq - 1
    end
    return result
  end
  def english_freq_match_score(message)
    freq_order = get_frequency_order(message)
    top = freq_order[0...6]
    bottom = freq_order[freq_order.length - 6...freq_order.length]
    score = 0
    i = 0
    while i < 6
      c = $ETAOIN[i..._add(i, 1)]
      if top.include?(c)
        score = _add(score, 1)
      end
      i = _add(i, 1)
    end
    j = $ETAOIN.length - 6
    while j < $ETAOIN.length
      c = $ETAOIN[j..._add(j, 1)]
      if bottom.include?(c)
        score = _add(score, 1)
      end
      j = _add(j, 1)
    end
    return score
  end
  def main()
    puts(get_frequency_order("Hello World"))
    puts(english_freq_match_score("Hello World"))
  end
  $ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
  $LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
