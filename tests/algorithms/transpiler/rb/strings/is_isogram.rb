# Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:45 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0.clone
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = index_of(upper, ch).clone
    if idx >= 0
      return _add(65, idx)
    end
    idx = index_of(lower, ch).clone
    if idx >= 0
      return _add(97, idx)
    end
    return -1
  end
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    if n >= 97 && n < 123
      return lower[n - 97...n - 96]
    end
    return "?"
  end
  def to_lower_char(c)
    code = ord(c)
    if code >= 65 && code <= 90
      return chr(_add(code, 32))
    end
    return c
  end
  def is_alpha(c)
    code = ord(c)
    return (code >= 65 && code <= 90) || (code >= 97 && code <= 122)
  end
  def is_isogram(s)
    seen = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i]
      if !is_alpha(ch)
        panic("String must only contain alphabetic characters.")
      end
      lower = to_lower_char(ch)
      if index_of(seen, lower) >= 0
        return false
      end
      seen = _add(seen, lower).clone
      i = _add(i, 1).clone
    end
    return true
  end
  puts(_str(is_isogram("Uncopyrightable")))
  puts(_str(is_isogram("allowance")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
