# Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_int(s)
    value = 0
    i = 0
    while i < s.length
      c = s[i]
      value = _add(value * 10, ((c).to_i))
      i = _add(i, 1)
    end
    return value
  end
  def is_polish_national_id(id)
    if _eq(id.length, 0)
      return false
    end
    if _eq(id[0...1], "-")
      return false
    end
    input_int = parse_int(id)
    if input_int < 10100000 || input_int > 99923199999
      return false
    end
    month = parse_int(id[2...4])
    if !((month >= 1 && month <= 12) || (month >= 21 && month <= 32) || (month >= 41 && month <= 52) || (month >= 61 && month <= 72) || (month >= 81 && month <= 92))
      return false
    end
    day = parse_int(id[4...6])
    if day < 1 || day > 31
      return false
    end
    multipliers = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3]
    subtotal = 0
    i = 0
    while i < multipliers.length
      digit = parse_int(id[i..._add(i, 1)])
      subtotal = _add(subtotal, (digit * multipliers[i]) % 10)
      i = _add(i, 1)
    end
    checksum = 10 - (subtotal % 10)
    return _eq(checksum, input_int % 10)
  end
  puts(_str(is_polish_national_id("02070803628")))
  puts(_str(is_polish_national_id("02150803629")))
  puts(_str(is_polish_national_id("02075503622")))
  puts(_str(is_polish_national_id("-99012212349")))
  puts(_str(is_polish_national_id("990122123499999")))
  puts(_str(is_polish_national_id("02070803621")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
