# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def round_int(x)
    return ((_add(x, 0.5))).to_i
  end
  def digital_differential_analyzer_line(p1, p2)
    dx = p2.x - p1.x
    dy = p2.y - p1.y
    abs_dx = abs_int(dx)
    abs_dy = abs_int(dy)
    steps = (abs_dx > abs_dy ? abs_dx : abs_dy)
    x_increment = ((dx).to_f) / ((steps).to_f)
    y_increment = ((dy).to_f) / ((steps).to_f)
    coordinates = []
    x = (p1.x).to_f
    y = (p1.y).to_f
    i = 0
    while i < steps
      x = _add(x, x_increment)
      y = _add(y, y_increment)
      point = Point.new(x: round_int(x), y: round_int(y))
      coordinates = (coordinates << (point))
      i = _add(i, 1)
    end
    return coordinates
  end
  def main()
    result = digital_differential_analyzer_line(Point.new(x: 1, y: 1), Point.new(x: 4, y: 4))
    puts(((x = result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
