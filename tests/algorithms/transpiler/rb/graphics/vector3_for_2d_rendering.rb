# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def modf(x, m)
    return x - x / m.floor() * m
  end
  def sin_taylor(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def convert_to_2d(x, y, z, scale, distance)
    projected_x = ((x * distance) / (_add(z, distance))) * scale
    projected_y = ((y * distance) / (_add(z, distance))) * scale
    return [projected_x, projected_y]
  end
  def rotate(x, y, z, axis, angle)
    angle = modf(angle, 360.0) / 450.0 * 180.0 / $PI
    angle = modf(angle, 2.0 * $PI)
    if angle > $PI
      angle = angle - 2.0 * $PI
    end
    if axis == "z"
      new_x = x * cos_taylor(angle) - y * sin_taylor(angle)
      new_y = _add(y * cos_taylor(angle), x * sin_taylor(angle))
      new_z = z
      return [new_x, new_y, new_z]
    end
    if axis == "x"
      new_y = y * cos_taylor(angle) - z * sin_taylor(angle)
      new_z = _add(z * cos_taylor(angle), y * sin_taylor(angle))
      new_x = x
      return [new_x, new_y, new_z]
    end
    if axis == "y"
      new_x = x * cos_taylor(angle) - z * sin_taylor(angle)
      new_z = _add(z * cos_taylor(angle), x * sin_taylor(angle))
      new_y = y
      return [new_x, new_y, new_z]
    end
    puts("not a valid axis, choose one of 'x', 'y', 'z'")
    return [0.0, 0.0, 0.0]
  end
  $PI = 3.141592653589793
  puts(((x = convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = rotate(1.0, 2.0, 3.0, "y", 90.0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
