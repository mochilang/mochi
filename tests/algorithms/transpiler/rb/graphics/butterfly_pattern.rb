# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def repeat_char(ch, count)
    result = ""
    i = 0
    while i < count
      result = _add(result, ch)
      i = _add(i, 1)
    end
    return result
  end
  def butterfly_pattern(n)
    lines = []
    i = 1
    while i < n
      left = repeat_char("*", i)
      mid = repeat_char(" ", 2 * (n - i) - 1)
      right = repeat_char("*", i)
      lines = (lines << (_add(_add(left, mid), right)))
      i = _add(i, 1)
    end
    lines = (lines << (repeat_char("*", 2 * n - 1)))
    j = n - 1
    while j > 0
      left = repeat_char("*", j)
      mid = repeat_char(" ", 2 * (n - j) - 1)
      right = repeat_char("*", j)
      lines = (lines << (_add(_add(left, mid), right)))
      j = j - 1
    end
    out = ""
    k = 0
    while k < lines.length
      if k > 0
        out = _add(out, "\n")
      end
      out = _add(out, lines[k])
      k = _add(k, 1)
    end
    return out
  end
  puts(butterfly_pattern(3))
  puts(butterfly_pattern(5))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
