# Generated by Mochi transpiler v0.10.65 on 2025-08-14 10:00 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def stringify(fs)
    return _add(_add(_add(_add(_add(_add(_add(fs.name, ": ["), _str(fs.left_boundary)), ", "), _str(fs.peak)), ", "), _str(fs.right_boundary)), "]")
  end
  def max2(a, b)
    if a > b
      return a
    end
    return b
  end
  def min2(a, b)
    if a < b
      return a
    end
    return b
  end
  def complement(fs)
    return FuzzySet.new(name: _add("¬", fs.name), left_boundary: 1.0 - fs.right_boundary, peak: 1.0 - fs.left_boundary, right_boundary: 1.0 - fs.peak)
  end
  def intersection(a, b)
    return FuzzySet.new(name: _add(_add(a.name, " ∩ "), b.name), left_boundary: max2(a.left_boundary, b.left_boundary), peak: min2(a.right_boundary, b.right_boundary), right_boundary: (_add(a.peak, b.peak)) / 2.0)
  end
  def union(a, b)
    return FuzzySet.new(name: _add(_add(a.name, " U "), b.name), left_boundary: min2(a.left_boundary, b.left_boundary), peak: max2(a.right_boundary, b.right_boundary), right_boundary: (_add(a.peak, b.peak)) / 2.0)
  end
  def membership(fs, x)
    if x <= fs.left_boundary || x >= fs.right_boundary
      return 0.0
    end
    if fs.left_boundary < x && x <= fs.peak
      return (x - fs.left_boundary) / (fs.peak - fs.left_boundary)
    end
    if fs.peak < x && x < fs.right_boundary
      return (fs.right_boundary - x) / (fs.right_boundary - fs.peak)
    end
    return 0.0
  end
  Object.send(:remove_const, :FuzzySet) if Object.const_defined?(:FuzzySet)
  FuzzySet = Struct.new(:name, :left_boundary, :peak, :right_boundary, keyword_init: true)
  $sheru = FuzzySet.new(name: "Sheru", left_boundary: 0.4, peak: 1.0, right_boundary: 0.6)
  $siya = FuzzySet.new(name: "Siya", left_boundary: 0.5, peak: 1.0, right_boundary: 0.7)
  puts(stringify($sheru))
  puts(stringify($siya))
  $sheru_comp = complement($sheru)
  puts(stringify($sheru_comp))
  $inter = intersection($siya, $sheru)
  puts(stringify($inter))
  puts(_add("Sheru membership 0.5: ", _str(membership($sheru, 0.5))))
  puts(_add("Sheru membership 0.6: ", _str(membership($sheru, 0.6))))
  $uni = union($siya, $sheru)
  puts(stringify($uni))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
