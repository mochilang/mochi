# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def list_contains(xs, v)
    i = 0
    while i < xs.length
      if xs[i] == v
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def is_power_of_two(n)
    if n < 1
      return false
    end
    x = n
    while x > 1
      if x % 2 != 0
        return false
      end
      x = x / 2
    end
    return true
  end
  def bin_string(n)
    if n == 0
      return "0"
    end
    res = ""
    x = n
    while x > 0
      bit = x % 2
      res = _add((bit).to_s, res)
      x = x / 2
    end
    return res
  end
  def decompress_data(data_bits)
    lexicon = {"0" => "0", "1" => "1"}
    keys = ["0", "1"]
    result = ""
    curr_string = ""
    index = 2
    i = 0
    while i < data_bits.length
      curr_string = _add(curr_string, data_bits[i..._add(i, 1)])
      if !list_contains(keys, curr_string)
        i = _add(i, 1)
        next
      end
      last_match_id = lexicon[curr_string]
      result = _add(result, last_match_id)
      lexicon[curr_string] = _add(last_match_id, "0")
      if is_power_of_two(index)
        new_lex = {}
        new_keys = []
        j = 0
        while j < keys.length
          curr_key = keys[j]
          new_lex[_add("0", curr_key)] = lexicon[curr_key]
          new_keys = (new_keys + [_add("0", curr_key)])
          j = _add(j, 1)
        end
        lexicon = new_lex
        keys = new_keys
      end
      new_key = bin_string(index)
      lexicon[new_key] = _add(last_match_id, "1")
      keys = (keys + [new_key])
      index = _add(index, 1)
      curr_string = ""
      i = _add(i, 1)
    end
    return result
  end
  $sample = "1011001"
  $decompressed = decompress_data($sample)
  puts($decompressed)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
