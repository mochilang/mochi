# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_freq(n)
    return (n.is_a?(Leaf) ? ->(f) { f }.call(n["freq"]) : (n.is_a?(Node) ? ->(f) { f }.call(n["freq"]) : nil))
  end
  def sort_nodes(nodes)
    arr = nodes
    i = 1
    while i < arr.length
      key = arr[i]
      j = i - 1
      while j >= 0 && get_freq(arr[j]) > get_freq(key)
        arr[_add(j, 1)] = arr[j]
        j = j - 1
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return arr
  end
  def rest(nodes)
    res = []
    i = 1
    while i < nodes.length
      res = (res + [nodes[i]])
      i = _add(i, 1)
    end
    return res
  end
  def count_freq(text)
    chars = []
    freqs = []
    i = 0
    while i < text.length
      c = text[i..._add(i, 1)]
      j = 0
      found = false
      while j < chars.length
        if chars[j] == c
          freqs[j] = _add(freqs[j], 1)
          found = true
          break
        end
        j = _add(j, 1)
      end
      if !found
        chars = (chars + [c])
        freqs = (freqs + [1])
      end
      i = _add(i, 1)
    end
    leaves = []
    k = 0
    while k < chars.length
      leaves = (leaves + [Leaf.new(symbol: chars[k], freq: freqs[k])])
      k = _add(k, 1)
    end
    return sort_nodes(leaves)
  end
  def build_tree(nodes)
    arr = nodes
    while arr.length > 1
      left = arr[0]
      arr = rest(arr)
      right = arr[0]
      arr = rest(arr)
      node = Node.new(freq: _add(get_freq(left), get_freq(right)), left: left, right: right)
      arr = (arr + [node])
      arr = sort_nodes(arr)
    end
    return arr[0]
  end
  def concat_pairs(a, b)
    res = a
    i = 0
    while i < b.length
      res = (res + [b[i]])
      i = _add(i, 1)
    end
    return res
  end
  def collect_codes(tree, prefix)
    return (tree.is_a?(Leaf) ? ->(s) { [[s, prefix]] }.call(tree["symbol"]) : (tree.is_a?(Node) ? ->(l) { ->(r) { concat_pairs(collect_codes(l, _add(prefix, "0")), collect_codes(r, _add(prefix, "1"))) }.call(tree["right"]) }.call(tree["left"]) : nil))
  end
  def find_code(pairs, ch)
    i = 0
    while i < pairs.length
      if pairs[i][0] == ch
        return pairs[i][1]
      end
      i = _add(i, 1)
    end
    return ""
  end
  def huffman_encode(text)
    if text == ""
      return ""
    end
    leaves = count_freq(text)
    tree = build_tree(leaves)
    codes = collect_codes(tree, "")
    encoded = ""
    i = 0
    while i < text.length
      c = text[i..._add(i, 1)]
      encoded = _add(_add(encoded, find_code(codes, c)), " ")
      i = _add(i, 1)
    end
    return encoded
  end
  Leaf = Struct.new(:symbol, :freq, keyword_init: true)
  Node = Struct.new(:freq, :left, :right, keyword_init: true)
  puts(huffman_encode("beep boop beer!"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
