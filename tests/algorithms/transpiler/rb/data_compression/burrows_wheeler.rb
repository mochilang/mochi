# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def all_rotations(s)
    n = s.length
    rotations = []
    i = 0
    while i < n
      rotation = _add(s[i...n], s[0...i])
      rotations = (rotations + [rotation])
      i = _add(i, 1)
    end
    return rotations
  end
  def sort_strings(arr)
    n = arr.length
    i = 1
    while i < n
      key = arr[i]
      j = i - 1
      while j >= 0 && arr[j] > key
        arr[_add(j, 1)] = arr[j]
        j = j - 1
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return arr
  end
  def join_strings(arr)
    res = ""
    i = 0
    while i < arr.length
      res = _add(res, arr[i])
      i = _add(i, 1)
    end
    return res
  end
  def bwt_transform(s)
    if s == ""
      panic("input string must not be empty")
    end
    rotations = all_rotations(s)
    rotations = sort_strings(rotations)
    last_col = []
    i = 0
    while i < rotations.length
      word = rotations[i]
      last_col = (last_col + [word[word.length - 1...word.length]])
      i = _add(i, 1)
    end
    bwt_string = join_strings(last_col)
    idx = index_of(rotations, s)
    return BWTResult.new(bwt_string: bwt_string, idx_original_string: idx)
  end
  def index_of(arr, target)
    i = 0
    while i < arr.length
      if arr[i] == target
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def reverse_bwt(bwt_string, idx_original_string)
    if bwt_string == ""
      panic("bwt string must not be empty")
    end
    n = bwt_string.length
    if idx_original_string < 0 || idx_original_string >= n
      panic("index out of range")
    end
    ordered_rotations = []
    i = 0
    while i < n
      ordered_rotations = (ordered_rotations + [""])
      i = _add(i, 1)
    end
    iter = 0
    while iter < n
      j = 0
      while j < n
        ch = bwt_string[j..._add(j, 1)]
        ordered_rotations[j] = _add(ch, ordered_rotations[j])
        j = _add(j, 1)
      end
      ordered_rotations = sort_strings(ordered_rotations)
      iter = _add(iter, 1)
    end
    return ordered_rotations[idx_original_string]
  end
  BWTResult = Struct.new(:bwt_string, :idx_original_string, keyword_init: true)
  $s = "^BANANA"
  $result = bwt_transform($s)
  puts($result["bwt_string"])
  puts($result["idx_original_string"])
  puts(reverse_bwt($result["bwt_string"], $result["idx_original_string"]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
