# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def log10(x)
    return ln(x) / ln(10.0)
  end
  def peak_signal_to_noise_ratio(original, contrast)
    mse = 0.0
    i = 0
    while i < original.length
      j = 0
      while j < original[i].length
        diff = ((original[i][j] - contrast[i][j])).to_f
        mse = _add(mse, diff * diff)
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    size = ((original.length * original[0].length)).to_f
    mse = mse / size
    if mse == 0.0
      return 100.0
    end
    _PIXEL_MAX = 255.0
    return 20.0 * log10(_PIXEL_MAX / sqrtApprox(mse))
  end
  # test identical images
  $img = [[52, 55], [61, 59]]
  raise 'assertion failed' unless peak_signal_to_noise_ratio($img, $img) == 100.0
  # test single pixel difference
  $original = [[0, 0], [0, 0]]
  $contrast = [[0, 0], [0, 1]]
  $psnr = peak_signal_to_noise_ratio($original, $contrast)
  $expected = 20.0 * log10(255.0 / sqrtApprox(0.25))
  raise 'assertion failed' unless abs($psnr - $expected) < 0.0001
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
