# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_binary(n)
    if n == 0
      return "0"
    end
    num = n
    res = ""
    while num > 0
      bit = num % 2
      res = _add((bit).to_s, res)
      num = num / 2
    end
    return res
  end
  def contains_key_int(m, key)
        __tmp20 = m.keys()
    if __tmp20.respond_to?(:keys) && !__tmp20.is_a?(String)
      __tmp20 = __tmp20.keys
    end
    __tmp20.each do |k|
      if k == key
        return true
      end
    end
    return false
  end
  def lzw_compress(bits)
    dict = {"0" => 0, "1" => 1}
    current = ""
    result = ""
    index = 2
    i = 0
    while i < bits.length
      ch = bits[i]
      candidate = _add(current, ch)
      if contains_key_int(dict, candidate)
        current = candidate
      else
        result = _add(result, to_binary(dict[current]))
        dict[candidate] = index
        index = _add(index, 1)
        current = ch
      end
      i = _add(i, 1)
    end
    if current != ""
      result = _add(result, to_binary(dict[current]))
    end
    return result
  end
  $data = "01001100100111"
  puts(lzw_compress($data))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
