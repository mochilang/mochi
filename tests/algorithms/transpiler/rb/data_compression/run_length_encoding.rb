# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def run_length_encode(text)
    if text.length == 0
      return ""
    end
    encoded = ""
    count = 1
    i = 0
    while i < text.length
      if _add(i, 1) < text.length && text[i] == text[_add(i, 1)]
        count = _add(count, 1)
      else
        encoded = _add(_add(encoded, text[i]), (count).to_s)
        count = 1
      end
      i = _add(i, 1)
    end
    return encoded
  end
  def run_length_decode(encoded)
    res = ""
    i = 0
    while i < encoded.length
      ch = encoded[i]
      i = _add(i, 1)
      num_str = ""
      while i < encoded.length && encoded[i] >= "0" && encoded[i] <= "9"
        num_str = _add(num_str, encoded[i])
        i = _add(i, 1)
      end
      count = (num_str).to_i
      j = 0
      while j < count
        res = _add(res, ch)
        j = _add(j, 1)
      end
    end
    return res
  end
  $example1 = "AAAABBBCCDAA"
  $encoded1 = run_length_encode($example1)
  puts($encoded1)
  puts(run_length_decode($encoded1))
  $example2 = "A"
  $encoded2 = run_length_encode($example2)
  puts($encoded2)
  puts(run_length_decode($encoded2))
  $example3 = "AAADDDDDDFFFCCCAAVVVV"
  $encoded3 = run_length_encode($example3)
  puts($encoded3)
  puts(run_length_decode($encoded3))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
