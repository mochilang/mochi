# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_radians(deg)
    return deg * $PI / 180.0
  end
  def sin_approx(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_approx(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def sqrt_approx(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def lamberts_ellipsoidal_distance(lat1, lon1, lat2, lon2)
    phi1 = to_radians(lat1)
    phi2 = to_radians(lat2)
    lambda1 = to_radians(lon1)
    lambda2 = to_radians(lon2)
    x = (lambda2 - lambda1) * cos_approx((_add(phi1, phi2)) / 2.0)
    y = phi2 - phi1
    return $EQUATORIAL_RADIUS * sqrt_approx(_add(x * x, y * y))
  end
  $PI = 3.141592653589793
  $EQUATORIAL_RADIUS = 6378137.0
  puts(lamberts_ellipsoidal_distance(37.774856, -122.424227, 37.864742, -119.537521))
  puts(lamberts_ellipsoidal_distance(37.774856, -122.424227, 40.713019, -74.012647))
  puts(lamberts_ellipsoidal_distance(37.774856, -122.424227, 45.443012, 12.313071))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
