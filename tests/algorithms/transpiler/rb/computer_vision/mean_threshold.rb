# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mean_threshold(image)
    height = image.length
    width = image[0].length
    total = 0
    i = 0
    while i < height
      j = 0
      while j < width
        total = _add(total, image[i][j])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    mean = total / (height * width)
    i = 0
    while i < height
      j = 0
      while j < width
        if image[i][j] > mean
          image[i][j] = 255
        else
          image[i][j] = 0
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return image
  end
  def print_image(image)
    i = 0
    while i < image.length
      puts(((x = image[i]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      i = _add(i, 1)
    end
  end
  $img = [[10, 200, 50], [100, 150, 30], [90, 80, 220]]
  $result = mean_threshold($img)
  print_image($result)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
