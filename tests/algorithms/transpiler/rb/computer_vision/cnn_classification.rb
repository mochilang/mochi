# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def conv2d(image, kernel)
    rows = image.length
    cols = image[0].length
    k = kernel.length
    output = []
    i = 0
    while i <= rows - k
      row = []
      j = 0
      while j <= cols - k
        sum = 0.0
        ki = 0
        while ki < k
          kj = 0
          while kj < k
            sum = _add(sum, image[_add(i, ki)][_add(j, kj)] * kernel[ki][kj])
            kj = _add(kj, 1)
          end
          ki = _add(ki, 1)
        end
        row = (row + [sum])
        j = _add(j, 1)
      end
      output = (output + [row])
      i = _add(i, 1)
    end
    return output
  end
  def relu_matrix(m)
    out = []
        __tmp16 = m
    if __tmp16.respond_to?(:keys) && !__tmp16.is_a?(String)
      __tmp16 = __tmp16.keys
    end
    __tmp16.each do |row|
      new_row = []
            __tmp17 = row
      if __tmp17.respond_to?(:keys) && !__tmp17.is_a?(String)
        __tmp17 = __tmp17.keys
      end
      __tmp17.each do |v|
        if v > 0.0
          new_row = (new_row + [v])
        else
          new_row = (new_row + [0.0])
        end
      end
      out = (out + [new_row])
    end
    return out
  end
  def max_pool2x2(m)
    rows = m.length
    cols = m[0].length
    out = []
    i = 0
    while i < rows
      new_row = []
      j = 0
      while j < cols
        max_val = m[i][j]
        if m[i][_add(j, 1)] > max_val
          max_val = m[i][_add(j, 1)]
        end
        if m[_add(i, 1)][j] > max_val
          max_val = m[_add(i, 1)][j]
        end
        if m[_add(i, 1)][_add(j, 1)] > max_val
          max_val = m[_add(i, 1)][_add(j, 1)]
        end
        new_row = (new_row + [max_val])
        j = _add(j, 2)
      end
      out = (out + [new_row])
      i = _add(i, 2)
    end
    return out
  end
  def flatten(m)
    res = []
        __tmp18 = m
    if __tmp18.respond_to?(:keys) && !__tmp18.is_a?(String)
      __tmp18 = __tmp18.keys
    end
    __tmp18.each do |row|
            __tmp19 = row
      if __tmp19.respond_to?(:keys) && !__tmp19.is_a?(String)
        __tmp19 = __tmp19.keys
      end
      __tmp19.each do |v|
        res = (res + [v])
      end
    end
    return res
  end
  def dense(inputs, weights, bias)
    s = bias
    i = 0
    while i < inputs.length
      s = _add(s, inputs[i] * weights[i])
      i = _add(i, 1)
    end
    return s
  end
  def exp_approx(x)
    sum = 1.0
    term = 1.0
    i = 1
    while i <= 10
      term = term * x / i
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def sigmoid(x)
    return 1.0 / (_add(1.0, exp_approx(-x)))
  end
  $image = [[0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  $kernel = [[1.0, 0.0, -1.0], [1.0, 0.0, -1.0], [1.0, 0.0, -1.0]]
  $conv = conv2d($image, $kernel)
  $activated = relu_matrix($conv)
  $pooled = max_pool2x2($activated)
  $flat = flatten($pooled)
  $weights = [0.5, -0.4, 0.3, 0.1]
  $bias = 0.0
  $output = dense($flat, $weights, $bias)
  $probability = sigmoid($output)
  if $probability >= 0.5
    puts("Abnormality detected")
  else
    puts("Normal")
  end
  puts("Probability:")
  puts($probability)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
