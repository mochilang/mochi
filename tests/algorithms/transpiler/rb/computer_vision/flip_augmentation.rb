# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def flip_horizontal_image(img)
    flipped = []
    i = 0
    while i < img.length
      row = img[i]
      j = row.length - 1
      new_row = []
      while j >= 0
        new_row = (new_row + [row[j]])
        j = j - 1
      end
      flipped = (flipped + [new_row])
      i = _add(i, 1)
    end
    return flipped
  end
  def flip_vertical_image(img)
    flipped = []
    i = img.length - 1
    while i >= 0
      flipped = (flipped + [img[i]])
      i = i - 1
    end
    return flipped
  end
  def flip_horizontal_boxes(boxes)
    result = []
    i = 0
    while i < boxes.length
      b = boxes[i]
      x_new = 1.0 - b[1]
      result = (result + [[b[0], x_new, b[2], b[3], b[4]]])
      i = _add(i, 1)
    end
    return result
  end
  def flip_vertical_boxes(boxes)
    result = []
    i = 0
    while i < boxes.length
      b = boxes[i]
      y_new = 1.0 - b[2]
      result = (result + [[b[0], b[1], y_new, b[3], b[4]]])
      i = _add(i, 1)
    end
    return result
  end
  def print_image(img)
    i = 0
    while i < img.length
      row = img[i]
      j = 0
      line = ""
      while j < row.length
        line = _add(_add(line, (row[j]).to_s), " ")
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  $image = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  $boxes = [[0.0, 0.25, 0.25, 0.5, 0.5], [1.0, 0.75, 0.75, 0.5, 0.5]]
  puts("Original image:")
  print_image($image)
  puts(((x = $boxes); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts("Horizontal flip:")
  $h_img = flip_horizontal_image($image)
  $h_boxes = flip_horizontal_boxes($boxes)
  print_image($h_img)
  puts(((x = $h_boxes); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts("Vertical flip:")
  $v_img = flip_vertical_image($image)
  $v_boxes = flip_vertical_boxes($boxes)
  print_image($v_img)
  puts(((x = $v_boxes); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
