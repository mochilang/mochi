# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def sqrt(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln(x)
    if x <= 0.0
      return 0.0
    end
    e = 2.718281828
    n = 0
    y = x
    while y >= e
      y = y / e
      n = _add(n, 1)
    end
    while y <= 1.0 / e
      y = y * e
      n = n - 1
    end
    y = y - 1.0
    term = y
    result = 0.0
    k = 1
    while k <= 20
      if k % 2 == 1
        result = _add(result, term / (1.0 * k))
      else
        result = result - term / (1.0 * k)
      end
      term = term * y
      k = _add(k, 1)
    end
    return _add(result, (1.0 * n))
  end
  def matrix_concurrency(image, coord)
    offset_x = coord[0]
    offset_y = coord[1]
    max_val = 0
    (0...image.length).each do |r|
      (0...image[r].length).each do |c|
        if image[r][c] > max_val
          max_val = image[r][c]
        end
      end
    end
    size = _add(max_val, 1)
    matrix = []
    (0...size).each do |i|
      row = []
      (0...size).each do |j|
        row = (row + [0.0])
      end
      matrix = (matrix + [row])
    end
    (1...image.length - 1).each do |x|
      (1...image[x].length - 1).each do |y|
        base = image[x][y]
        offset = image[_add(x, offset_x)][_add(y, offset_y)]
        matrix[base][offset] = _add(matrix[base][offset], 1.0)
      end
    end
    total = 0.0
    (0...size).each do |i|
      (0...size).each do |j|
        total = _add(total, matrix[i][j])
      end
    end
    if total == 0.0
      return matrix
    end
    (0...size).each do |i|
      (0...size).each do |j|
        matrix[i][j] = matrix[i][j] / total
      end
    end
    return matrix
  end
  def haralick_descriptors(matrix)
    rows = matrix.length
    cols = matrix[0].length
    maximum_prob = 0.0
    correlation = 0.0
    energy = 0.0
    contrast = 0.0
    dissimilarity = 0.0
    inverse_difference = 0.0
    homogeneity = 0.0
    entropy = 0.0
    i = 0
    while i < rows
      j = 0
      while j < cols
        val = matrix[i][j]
        if val > maximum_prob
          maximum_prob = val
        end
        correlation = _add(correlation, (1.0 * i * j) * val)
        energy = _add(energy, val * val)
        diff = i - j
        adiff = abs_int(diff)
        contrast = _add(contrast, val * (1.0 * diff * diff))
        dissimilarity = _add(dissimilarity, val * (1.0 * adiff))
        inverse_difference = _add(inverse_difference, val / (_add(1.0, (1.0 * adiff))))
        homogeneity = _add(homogeneity, val / (_add(1.0, (1.0 * diff * diff))))
        if val > 0.0
          entropy = entropy - (val * ln(val))
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return [maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy]
  end
  $image = [[0, 1, 0], [1, 0, 1], [0, 1, 0]]
  $glcm = matrix_concurrency($image, [0, 1])
  $descriptors = haralick_descriptors($glcm)
  $idx = 0
  while $idx < $descriptors.length
    puts(($descriptors[$idx]).to_s)
    $idx = _add($idx, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
