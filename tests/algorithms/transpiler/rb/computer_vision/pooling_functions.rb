# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def maxpooling(arr, size, stride)
    n = arr.length
    if n == 0 || arr[0].length != n
      panic("The input array is not a square matrix")
    end
    result = []
    i = 0
    while _add(i, size) <= n
      row = []
      j = 0
      while _add(j, size) <= n
        max_val = arr[i][j]
        r = i
        while r < _add(i, size)
          c = j
          while c < _add(j, size)
            val = arr[r][c]
            if val > max_val
              max_val = val
            end
            c = _add(c, 1)
          end
          r = _add(r, 1)
        end
        row = (row + [max_val])
        j = _add(j, stride)
      end
      result = (result + [row])
      i = _add(i, stride)
    end
    return result
  end
  def avgpooling(arr, size, stride)
    n = arr.length
    if n == 0 || arr[0].length != n
      panic("The input array is not a square matrix")
    end
    result = []
    i = 0
    while _add(i, size) <= n
      row = []
      j = 0
      while _add(j, size) <= n
        sum = 0
        r = i
        while r < _add(i, size)
          c = j
          while c < _add(j, size)
            sum = _add(sum, arr[r][c])
            c = _add(c, 1)
          end
          r = _add(r, 1)
        end
        row = (row + [sum / (size * size)])
        j = _add(j, stride)
      end
      result = (result + [row])
      i = _add(i, stride)
    end
    return result
  end
  def print_matrix(mat)
    i = 0
    while i < mat.length
      line = ""
      j = 0
      while j < mat[i].length
        line = _add(line, (mat[i][j]).to_s)
        if j < mat[i].length - 1
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  def main()
    arr1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    arr2 = [[147, 180, 122], [241, 76, 32], [126, 13, 157]]
    print_matrix(maxpooling(arr1, 2, 2))
    print_matrix(maxpooling(arr2, 2, 1))
    print_matrix(avgpooling(arr1, 2, 2))
    print_matrix(avgpooling(arr2, 2, 1))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
