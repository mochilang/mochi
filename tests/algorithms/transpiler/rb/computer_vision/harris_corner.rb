# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def zeros(h, w)
    m = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        row = (row + [0.0])
        x = _add(x, 1)
      end
      m = (m + [row])
      y = _add(y, 1)
    end
    return m
  end
  def gradient(img)
    h = img.length
    w = img[0].length
    dx = zeros(h, w)
    dy = zeros(h, w)
    y = 1
    while y < h - 1
      x = 1
      while x < w - 1
        dx[y][x] = ((img[y][_add(x, 1)]).to_f) - ((img[y][x - 1]).to_f)
        dy[y][x] = ((img[_add(y, 1)][x]).to_f) - ((img[y - 1][x]).to_f)
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return [dx, dy]
  end
  def harris(img, k, window, thresh)
    h = img.length
    w = img[0].length
    grads = gradient(img)
    dx = grads[0]
    dy = grads[1]
    ixx = zeros(h, w)
    iyy = zeros(h, w)
    ixy = zeros(h, w)
    y = 0
    while y < h
      x = 0
      while x < w
        gx = dx[y][x]
        gy = dy[y][x]
        ixx[y][x] = gx * gx
        iyy[y][x] = gy * gy
        ixy[y][x] = gx * gy
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    offset = window / 2
    corners = []
    y = offset
    while y < h - offset
      x = offset
      while x < w - offset
        wxx = 0.0
        wyy = 0.0
        wxy = 0.0
        yy = y - offset
        while yy <= _add(y, offset)
          xx = x - offset
          while xx <= _add(x, offset)
            wxx = _add(wxx, ixx[yy][xx])
            wyy = _add(wyy, iyy[yy][xx])
            wxy = _add(wxy, ixy[yy][xx])
            xx = _add(xx, 1)
          end
          yy = _add(yy, 1)
        end
        det = wxx * wyy - (wxy * wxy)
        trace = _add(wxx, wyy)
        r = det - k * (trace * trace)
        if r > thresh
          corners = (corners + [[x, y]])
        end
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return corners
  end
  $img = [[1, 1, 1, 1, 1], [1, 255, 255, 255, 1], [1, 255, 0, 255, 1], [1, 255, 255, 255, 1], [1, 1, 1, 1, 1]]
  $corners = harris($img, 0.04, 3, 10000000000.0)
  puts(((x = $corners); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
