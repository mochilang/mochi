# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def round_int(x)
    return ((_add(x, 0.5))).to_i
  end
  def hsv_to_rgb(h, s, v)
    i = ((h * 6.0)).to_i
    f = h * 6.0 - ((i).to_f)
    p = v * (1.0 - s)
    q = v * (1.0 - f * s)
    t = v * (1.0 - (1.0 - f) * s)
    mod = i % 6
    r = 0.0
    g = 0.0
    b = 0.0
    if mod == 0
      r = v
      g = t
      b = p
    else
      if mod == 1
        r = q
        g = v
        b = p
      else
        if mod == 2
          r = p
          g = v
          b = t
        else
          if mod == 3
            r = p
            g = q
            b = v
          else
            if mod == 4
              r = t
              g = p
              b = v
            else
              r = v
              g = p
              b = q
            end
          end
        end
      end
    end
    return RGB.new(r: round_int(r * 255.0), g: round_int(g * 255.0), b: round_int(b * 255.0))
  end
  def get_distance(x, y, max_step)
    a = x
    b = y
    step = -1
    while step < max_step - 1
      step = _add(step, 1)
      a_new = _add(a * a - b * b, x)
      b = _add(2.0 * a * b, y)
      a = a_new
      if _add(a * a, b * b) > 4.0
        break
      end
    end
    return ((step).to_f) / (((max_step - 1)).to_f)
  end
  def get_black_and_white_rgb(distance)
    if distance == 1.0
      return RGB.new(r: 0, g: 0, b: 0)
    else
      return RGB.new(r: 255, g: 255, b: 255)
    end
  end
  def get_color_coded_rgb(distance)
    if distance == 1.0
      return RGB.new(r: 0, g: 0, b: 0)
    else
      return hsv_to_rgb(distance, 1.0, 1.0)
    end
  end
  def get_image(image_width, image_height, figure_center_x, figure_center_y, figure_width, max_step, use_distance_color_coding)
    img = []
    figure_height = figure_width / ((image_width).to_f) * ((image_height).to_f)
    image_y = 0
    while image_y < image_height
      row = []
      image_x = 0
      while image_x < image_width
        fx = _add(figure_center_x, (((image_x).to_f) / ((image_width).to_f) - 0.5) * figure_width)
        fy = _add(figure_center_y, (((image_y).to_f) / ((image_height).to_f) - 0.5) * figure_height)
        distance = get_distance(fx, fy, max_step)
        rgb = {}
        if use_distance_color_coding
          rgb = get_color_coded_rgb(distance)
        else
          rgb = get_black_and_white_rgb(distance)
        end
        row = (row << (rgb))
        image_x = _add(image_x, 1)
      end
      img = (img << (row))
      image_y = _add(image_y, 1)
    end
    return img
  end
  def rgb_to_string(c)
    return _add(_add(_add(_add(_add(_add("(", _str(c.r)), ", "), _str(c.g)), ", "), _str(c.b)), ")")
  end
  RGB = Struct.new(:r, :g, :b, keyword_init: true)
  $img1 = get_image(10, 10, -0.6, 0.0, 3.2, 50, true)
  puts(rgb_to_string($img1[0][0]))
  $img2 = get_image(10, 10, -0.6, 0.0, 3.2, 50, false)
  puts(rgb_to_string($img2[0][0]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
