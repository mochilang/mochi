# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_mid(p1, p2)
    return Point.new(x: (_add(p1.x, p2.x)) / 2, y: (_add(p1.y, p2.y)) / 2)
  end
  def point_to_string(p)
    return _add(_add(_add(_add("(", _str(p.x)), ","), _str(p.y)), ")")
  end
  def triangle(v1, v2, v3, depth)
    puts(_add(_add(_add(_add(point_to_string(v1), " "), point_to_string(v2)), " "), point_to_string(v3)))
    if depth == 0
      return
    end
    triangle(v1, get_mid(v1, v2), get_mid(v1, v3), depth - 1)
    triangle(v2, get_mid(v1, v2), get_mid(v2, v3), depth - 1)
    triangle(v3, get_mid(v3, v2), get_mid(v1, v3), depth - 1)
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  triangle(Point.new(x: -175, y: -125), Point.new(x: 0, y: 175), Point.new(x: 175, y: -125), 2)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
