# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def sin(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
  end
  def cos(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y4 = y2 * y2
    y6 = y4 * y2
    return _add(1.0 - y2 / 2.0, y4 / 24.0) - y6 / 720.0
  end
  def rotate(v, angle_deg)
    theta = angle_deg * $PI / 180.0
    c = cos(theta)
    s = sin(theta)
    return Vec.new(x: v.x * c - v.y * s, y: _add(v.x * s, v.y * c))
  end
  def iteration_step(vectors)
    new_vectors = []
    i = 0
    while i < vectors.length - 1
      start = vectors[i]
      end_ = vectors[_add(i, 1)]
      new_vectors = (new_vectors << (start))
      dx = end_.x - start.x
      dy = end_.y - start.y
      one_third = Vec.new(x: _add(start.x, dx / 3.0), y: _add(start.y, dy / 3.0))
      mid = rotate(Vec.new(x: dx / 3.0, y: dy / 3.0), 60.0)
      peak = Vec.new(x: _add(one_third.x, mid.x), y: _add(one_third.y, mid.y))
      two_third = Vec.new(x: _add(start.x, dx * 2.0 / 3.0), y: _add(start.y, dy * 2.0 / 3.0))
      new_vectors = (new_vectors << (one_third))
      new_vectors = (new_vectors << (peak))
      new_vectors = (new_vectors << (two_third))
      i = _add(i, 1)
    end
    new_vectors = (new_vectors << (vectors[vectors.length - 1]))
    return new_vectors
  end
  def iterate(initial, steps)
    vectors = initial
    i = 0
    while i < steps
      vectors = iteration_step(vectors)
      i = _add(i, 1)
    end
    return vectors
  end
  def vec_to_string(v)
    return _add(_add(_add(_add("(", _str(v.x)), ", "), _str(v.y)), ")")
  end
  def vec_list_to_string(lst)
    res = "["
    i = 0
    while i < lst.length
      res = _add(res, vec_to_string(lst[i]))
      if i < lst.length - 1
        res = _add(res, ", ")
      end
      i = _add(i, 1)
    end
    res = _add(res, "]")
    return res
  end
  Vec = Struct.new(:x, :y, keyword_init: true)
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $VECTOR_1 = Vec.new(x: 0.0, y: 0.0)
  $VECTOR_2 = Vec.new(x: 0.5, y: 0.8660254)
  $VECTOR_3 = Vec.new(x: 1.0, y: 0.0)
  $INITIAL_VECTORS = [$VECTOR_1, $VECTOR_2, $VECTOR_3, $VECTOR_1]
  $example = iterate([$VECTOR_1, $VECTOR_3], 1)
  puts(vec_list_to_string($example))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
