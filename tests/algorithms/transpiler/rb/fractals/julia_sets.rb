# Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def complex_add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def complex_mul(a, b)
    real = a.re * b.re - a.im * b.im
    imag = _add(a.re * b.im, a.im * b.re)
    return Complex.new(re: real, im: imag)
  end
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def complex_abs(a)
    return sqrtApprox(_add(a.re * a.re, a.im * a.im))
  end
  def sin_taylor(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(2.0 * ((i).to_f), 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def exp_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1.0
    while i < 20.0
      term = term * x / i
      sum = _add(sum, term)
      i = _add(i, 1.0)
    end
    return sum
  end
  def complex_exp(z)
    e = exp_taylor(z.re)
    return Complex.new(re: e * cos_taylor(z.im), im: e * sin_taylor(z.im))
  end
  def eval_quadratic(c, z)
    return complex_add(complex_mul(z, z), c)
  end
  def eval_exponential(c, z)
    return complex_add(complex_exp(z), c)
  end
  def iterate_function(eval_function, c, nb_iterations, z0, infinity)
    z_n = z0
    i = 0
    while i < nb_iterations
      z_n = eval_function.call(c, z_n)
      if complex_abs(z_n) > infinity
        return z_n
      end
      i = _add(i, 1)
    end
    return z_n
  end
  def prepare_grid(window_size, nb_pixels)
    grid = []
    i = 0
    while i < nb_pixels
      row = []
      j = 0
      while j < nb_pixels
        real = _add(-window_size, 2.0 * window_size * ((i).to_f) / (((nb_pixels - 1)).to_f))
        imag = _add(-window_size, 2.0 * window_size * ((j).to_f) / (((nb_pixels - 1)).to_f))
        row = (row + [Complex.new(re: real, im: imag)])
        j = _add(j, 1)
      end
      grid = (grid + [row])
      i = _add(i, 1)
    end
    return grid
  end
  def julia_demo()
    grid = prepare_grid(1.0, 5)
    c_poly = Complex.new(re: -0.4, im: 0.6)
    c_exp = Complex.new(re: -2.0, im: 0.0)
    poly_result = []
    exp_result = []
    y = 0
    while y < _len(grid)
      row_poly = []
      row_exp = []
      x = 0
      while x < _len((__tmp1 = grid; __tmp1.is_a?(Hash) ? __tmp1[y] : _idx(__tmp1, y)))
        z0 = (__tmp2 = (__tmp3 = grid; __tmp3.is_a?(Hash) ? __tmp3[y] : _idx(__tmp3, y)); __tmp2.is_a?(Hash) ? __tmp2[x] : _idx(__tmp2, x))
        z_poly = iterate_function(method(:eval_quadratic), c_poly, 20, z0, 4.0)
        z_exp = iterate_function(method(:eval_exponential), c_exp, 10, z0, 1e+10)
        row_poly = (row_poly + [(complex_abs(z_poly) < 2.0 ? 1 : 0)])
        row_exp = (row_exp + [(complex_abs(z_exp) < 10000.0 ? 1 : 0)])
        x = _add(x, 1)
      end
      poly_result = (poly_result + [row_poly])
      exp_result = (exp_result + [row_exp])
      y = _add(y, 1)
    end
    puts(((x = poly_result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = exp_result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  Object.send(:remove_const, :Complex) if Object.const_defined?(:Complex)
  Complex = Struct.new(:re, :im, keyword_init: true)
  julia_demo()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
