# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def repeat_char(c, count)
    s = ""
    i = 0
    while i < count
      s = _add(s, c)
      i = _add(i, 1)
    end
    return s
  end
  def vicsek(order)
    if order == 0
      return ["#"]
    end
    prev = vicsek(order - 1)
    size = prev.length
    blank = repeat_char(" ", size)
    result = []
    i = 0
    while i < size
      result = (result << (_add(_add(blank, prev[i]), blank)))
      i = _add(i, 1)
    end
    i = 0
    while i < size
      result = (result << (_add(_add(prev[i], prev[i]), prev[i])))
      i = _add(i, 1)
    end
    i = 0
    while i < size
      result = (result << (_add(_add(blank, prev[i]), blank)))
      i = _add(i, 1)
    end
    return result
  end
  def print_pattern(pattern)
    i = 0
    while i < pattern.length
      puts(pattern[i])
      i = _add(i, 1)
    end
  end
  def main()
    depth = 3
    pattern = vicsek(depth)
    print_pattern(pattern)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
