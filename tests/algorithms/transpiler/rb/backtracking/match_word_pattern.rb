# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_value(keys, values, key)
    i = 0
    while i < keys.length
      if _eq(keys[i], key)
        return values[i]
      end
      i = _add(i, 1)
    end
    return nil
  end
  def contains_value(values, value)
    i = 0
    while i < values.length
      if _eq(values[i], value)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def backtrack(pattern, input_string, pi, si, keys, values)
    if _eq(pi, pattern.length) && _eq(si, input_string.length)
      return true
    end
    if _eq(pi, pattern.length) || _eq(si, input_string.length)
      return false
    end
    ch = pattern[pi..._add(pi, 1)]
    mapped = get_value(keys, values, ch)
    if !_eq(mapped, nil)
      if _eq(input_string[si..._add(si, mapped.length)], mapped)
        return backtrack(pattern, input_string, _add(pi, 1), _add(si, mapped.length), keys, values)
      end
      return false
    end
    end_ = _add(si, 1)
    while end_ <= input_string.length
      substr = input_string[si...end_]
      if contains_value(values, substr)
        end_ = _add(end_, 1)
        next
      end
      new_keys = (keys + [ch])
      new_values = (values + [substr])
      if backtrack(pattern, input_string, _add(pi, 1), end_, new_keys, new_values)
        return true
      end
      end_ = _add(end_, 1)
    end
    return false
  end
  def match_word_pattern(pattern, input_string)
    keys = []
    values = []
    return backtrack(pattern, input_string, 0, 0, keys, values)
  end
  def main()
    puts((match_word_pattern("aba", "GraphTreesGraph") ? 'true' : 'false'))
    puts((match_word_pattern("xyx", "PythonRubyPython") ? 'true' : 'false'))
    puts((match_word_pattern("GG", "PythonJavaPython") ? 'true' : 'false'))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
