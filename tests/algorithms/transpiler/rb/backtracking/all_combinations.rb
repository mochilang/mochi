# Generated by Mochi transpiler v0.10.59 on 2025-08-06 15:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_all_state(increment, total, level, current, result)
    if level == 0
      return (result + [current])
    end
    i = increment
    while i <= _add(total - level, 1)
      next_current = (current + [i])
      result = create_all_state(_add(i, 1), total, level - 1, next_current, result)
      i = _add(i, 1)
    end
    return result
  end
  def generate_all_combinations(n, k)
    if k < 0 || n < 0
      return []
    end
    result = []
    return create_all_state(1, n, k, [], result)
  end
  puts((generate_all_combinations(4, 2)).to_s)
  puts((generate_all_combinations(3, 1)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
