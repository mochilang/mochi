# Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:22 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def contains(xs, x)
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def get_point_key(len_board, len_board_column, row, column)
    return _add(len_board * len_board_column * row, column)
  end
  def search_from(board, word, row, column, word_index, visited)
    if !_eq(board[row][column], word[word_index..._add(word_index, 1)])
      return false
    end
    if _eq(word_index, word.length - 1)
      return true
    end
    len_board = board.length
    len_board_column = board[0].length
    dir_i = [0, 0, -1, 1]
    dir_j = [1, -1, 0, 0]
    k = 0
    while k < 4
      next_i = _add(row, dir_i[k])
      next_j = _add(column, dir_j[k])
      if !(0 <= next_i && next_i < len_board && 0 <= next_j && next_j < len_board_column)
        k = _add(k, 1)
        next
      end
      key = get_point_key(len_board, len_board_column, next_i, next_j)
      if contains(visited, key)
        k = _add(k, 1)
        next
      end
      new_visited = (visited + [key])
      if search_from(board, word, next_i, next_j, _add(word_index, 1), new_visited)
        return true
      end
      k = _add(k, 1)
    end
    return false
  end
  def word_exists(board, word)
    len_board = board.length
    len_board_column = board[0].length
    i = 0
    while i < len_board
      j = 0
      while j < len_board_column
        key = get_point_key(len_board, len_board_column, i, j)
        visited = ([] + [key])
        if search_from(board, word, i, j, 0, visited)
          return true
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return false
  end
  def main()
    board = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]]
    puts((word_exists(board, "ABCCED") ? 'true' : 'false'))
    puts((word_exists(board, "SEE") ? 'true' : 'false'))
    puts((word_exists(board, "ABCB") ? 'true' : 'false'))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000.0).round, "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
