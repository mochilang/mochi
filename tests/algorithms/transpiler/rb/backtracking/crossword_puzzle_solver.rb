# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_valid(puzzle, word, row, col, vertical)
    (0...word.length).each do |i|
      if vertical
        if _add(row, i) >= puzzle.length || !_eq(puzzle[_add(row, i)][col], "")
          return false
        end
      else
        if _add(col, i) >= puzzle[0].length || !_eq(puzzle[row][_add(col, i)], "")
          return false
        end
      end
    end
    return true
  end
  def place_word(puzzle, word, row, col, vertical)
    (0...word.length).each do |i|
      ch = word[i]
      if vertical
        puzzle[_add(row, i)][col] = ch
      else
        puzzle[row][_add(col, i)] = ch
      end
    end
  end
  def remove_word(puzzle, word, row, col, vertical)
    (0...word.length).each do |i|
      if vertical
        puzzle[_add(row, i)][col] = ""
      else
        puzzle[row][_add(col, i)] = ""
      end
    end
  end
  def solve_crossword(puzzle, words, used)
    (0...puzzle.length).each do |row|
      (0...puzzle[0].length).each do |col|
        if _eq(puzzle[row][col], "")
          (0...words.length).each do |i|
            if !used[i]
              word = words[i]
                            __tmp1 = [true, false]
              if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
                __tmp1 = __tmp1.keys
              end
              __tmp1.each do |vertical|
                if is_valid(puzzle, word, row, col, vertical)
                  place_word(puzzle, word, row, col, vertical)
                  used[i] = true
                  if solve_crossword(puzzle, words, used)
                    return true
                  end
                  used[i] = false
                  remove_word(puzzle, word, row, col, vertical)
                end
              end
            end
          end
          return false
        end
      end
    end
    return true
  end
  $puzzle = [["", "", ""], ["", "", ""], ["", "", ""]]
  $words = ["cat", "dog", "car"]
  $used = [false, false, false]
  if solve_crossword($puzzle, $words, $used)
    puts("Solution found:")
        __tmp2 = $puzzle
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |row|
      puts(((x = row); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    end
  else
    puts("No solution found:")
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
