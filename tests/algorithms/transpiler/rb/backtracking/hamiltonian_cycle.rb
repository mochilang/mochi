# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def valid_connection(graph, next_ver, curr_ind, path)
    if _eq(graph[path[curr_ind - 1]][next_ver], 0)
      return false
    end
        __tmp1 = path
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      if _eq(v, next_ver)
        return false
      end
    end
    return true
  end
  def util_hamilton_cycle(graph, path, curr_ind)
    if _eq(curr_ind, graph.length)
      return _eq(graph[path[curr_ind - 1]][path[0]], 1)
    end
    next_ver = 0
    while next_ver < graph.length
      if valid_connection(graph, next_ver, curr_ind, path)
        path[curr_ind] = next_ver
        if util_hamilton_cycle(graph, path, _add(curr_ind, 1))
          return true
        end
        path[curr_ind] = -1
      end
      next_ver = _add(next_ver, 1)
    end
    return false
  end
  def hamilton_cycle(graph, start_index)
    path = []
    i = 0
    while i < _add(graph.length, 1)
      path[i] = -1
      i = _add(i, 1)
    end
    path[0] = start_index
    last = path.length - 1
    path[last] = start_index
    if util_hamilton_cycle(graph, path, 1)
      return path
    end
    return []
  end
  # test case 1
  $graph = [[0, 1, 0, 1, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 1, 1, 1, 0]]
  raise 'assertion failed' unless _eq(hamilton_cycle($graph, 0), [0, 1, 2, 4, 3, 0])
  # test case 2
  $graph = [[0, 1, 0, 1, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 1, 1, 1, 0]]
  raise 'assertion failed' unless _eq(hamilton_cycle($graph, 3), [3, 0, 1, 2, 4, 3])
  # test case 3
  $graph = [[0, 1, 0, 1, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 0, 0], [0, 1, 1, 0, 0]]
  raise 'assertion failed' unless _eq(hamilton_cycle($graph, 4), [])
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
