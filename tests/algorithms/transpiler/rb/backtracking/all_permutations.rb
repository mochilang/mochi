# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def repeat_bool(times)
    res = []
    i = 0
    while i < times
      res = (res + [false])
      i = _add(i, 1)
    end
    return res
  end
  def set_bool(xs, idx, value)
    res = []
    i = 0
    while i < xs.length
      if _eq(i, idx)
        res = (res + [value])
      else
        res = (res + [xs[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def create_state_space_tree(sequence, current, index, used)
    if _eq(index, sequence.length)
      puts(((x = current); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
      return
    end
    i = 0
    while i < sequence.length
      if !used[i]
        next_current = (current + [sequence[i]])
        next_used = set_bool(used, i, true)
        create_state_space_tree(sequence, next_current, _add(index, 1), next_used)
      end
      i = _add(i, 1)
    end
  end
  def generate_all_permutations(sequence)
    used = repeat_bool(sequence.length)
    create_state_space_tree(sequence, [], 0, used)
  end
  $sequence = [3, 1, 2, 4]
  generate_all_permutations($sequence)
  $sequence_2 = ["A", "B", "C"]
  generate_all_permutations($sequence_2)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
