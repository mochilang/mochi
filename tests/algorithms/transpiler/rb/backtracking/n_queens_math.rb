# Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(xs, x)
    i = 0
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def repeat(s, times)
    result = ""
    i = 0
    while i < times
      result = _add(result, s)
      i = _add(i, 1)
    end
    return result
  end
  def build_board(pos, n)
    board = []
    i = 0
    while i < pos.length
      col = pos[i]
      line = _add(_add(_repeat(". ", col), "Q "), _repeat(". ", n - 1 - col))
      board = (board + [line])
      i = _add(i, 1)
    end
    return board
  end
  def depth_first_search(pos, dr, dl, n)
    row = pos.length
    if row == n
      single = []
      single = (single + [build_board(pos, n)])
      return single
    end
    boards = []
    col = 0
    while col < n
      if pos.include?(col) || dr.include?(row - col) || dl.include?(_add(row, col))
        col = _add(col, 1)
        next
      end
      result = depth_first_search((pos + [col]), (dr + [row - col]), (dl + [_add(row, col)]), n)
      boards = _add(boards, result)
      col = _add(col, 1)
    end
    return boards
  end
  def n_queens_solution(n)
    boards = depth_first_search([], [], [], n)
    i = 0
    while i < boards.length
      j = 0
      while j < boards[i].length
        puts(boards[i][j])
        j = _add(j, 1)
      end
      puts("")
      i = _add(i, 1)
    end
    puts(([boards.length, "solutions were found."]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    return boards.length
  end
  n_queens_solution(4)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
