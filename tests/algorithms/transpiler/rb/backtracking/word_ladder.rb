# Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:22 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def contains(xs, x)
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def remove_item(xs, x)
    res = []
    removed = false
    i = 0
    while i < xs.length
      if !removed && _eq(xs[i], x)
        removed = true
      else
        res = (res + [xs[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def word_ladder(current, path, target, words)
    if _eq(current, target)
      return path
    end
    i = 0
    while i < current.length
      j = 0
      while j < $alphabet.length
        c = $alphabet[j..._add(j, 1)]
        transformed = _add(_add(current[0...i], c), current[_add(i, 1)...current.length])
        if contains(words, transformed)
          new_words = remove_item(words, transformed)
          new_path = (path + [transformed])
          result = word_ladder(transformed, new_path, target, new_words)
          if result.length > 0
            return result
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return []
  end
  def main()
    w1 = ["hot", "dot", "dog", "lot", "log", "cog"]
    puts(((x = word_ladder("hit", ["hit"], "cog", w1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    w2 = ["hot", "dot", "dog", "lot", "log"]
    puts(((x = word_ladder("hit", ["hit"], "cog", w2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    w3 = ["load", "goad", "gold", "lead", "lord"]
    puts(((x = word_ladder("lead", ["lead"], "gold", w3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    w4 = ["came", "cage", "code", "cade", "gave"]
    puts(((x = word_ladder("game", ["game"], "code", w4)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  $alphabet = "abcdefghijklmnopqrstuvwxyz"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000.0).round, "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
