# Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def minimax(depth, node_index, is_max, scores, height)
    if depth < 0
      panic("Depth cannot be less than 0")
    end
    if scores.length == 0
      panic("Scores cannot be empty")
    end
    if depth == height
      return scores[node_index]
    end
    if is_max
      left = minimax(_add(depth, 1), node_index * 2, false, scores, height)
      right = minimax(_add(depth, 1), _add(node_index * 2, 1), false, scores, height)
      if left > right
        return left
      else
        return right
      end
    end
    left = minimax(_add(depth, 1), node_index * 2, true, scores, height)
    right = minimax(_add(depth, 1), _add(node_index * 2, 1), true, scores, height)
    if left < right
      return left
    else
      return right
    end
  end
  def tree_height(n)
    h = 0
    v = n
    while v > 1
      v = v / 2
      h = _add(h, 1)
    end
    return h
  end
  def main()
    scores = [90, 23, 6, 33, 21, 65, 123, 34423]
    height = tree_height(scores.length)
    puts(_add("Optimal value : ", (minimax(0, 0, true, scores, height)).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
