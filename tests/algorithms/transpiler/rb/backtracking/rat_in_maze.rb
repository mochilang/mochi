# Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:22 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def run_maze(maze, i, j, dr, dc, sol)
    size = maze.length
    if _eq(i, dr) && _eq(j, dc) && _eq(maze[i][j], 0)
      sol[i][j] = 0
      return true
    end
    lower_flag = (i >= 0) && (j >= 0)
    upper_flag = (i < size) && (j < size)
    if lower_flag && upper_flag
      block_flag = (_eq(sol[i][j], 1)) && (_eq(maze[i][j], 0))
      if block_flag
        sol[i][j] = 0
        if run_maze(maze, _add(i, 1), j, dr, dc, sol) || run_maze(maze, i, _add(j, 1), dr, dc, sol) || run_maze(maze, i - 1, j, dr, dc, sol) || run_maze(maze, i, j - 1, dr, dc, sol)
          return true
        end
        sol[i][j] = 1
        return false
      end
    end
    return false
  end
  def solve_maze(maze, sr, sc, dr, dc)
    size = maze.length
    if !(0 <= sr && sr < size && 0 <= sc && sc < size && 0 <= dr && dr < size && 0 <= dc && dc < size)
      panic("Invalid source or destination coordinates")
    end
    sol = []
    i = 0
    while i < size
      row = []
      j = 0
      while j < size
        row = (row + [1])
        j = _add(j, 1)
      end
      sol = (sol + [row])
      i = _add(i, 1)
    end
    solved = run_maze(maze, sr, sc, dr, dc, sol)
    if solved
      return sol
    else
      panic("No solution exists!")
    end
  end
  $maze = [[0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]]
  $n = $maze.length - 1
  puts(((x = solve_maze($maze, 0, 0, $n, $n)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000.0).round, "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
