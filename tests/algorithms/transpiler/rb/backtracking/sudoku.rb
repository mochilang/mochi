# Generated by Mochi transpiler v0.10.59 on 2025-08-06 18:11 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def is_safe(grid, row, column, n)
    (0...9).each do |i|
      if grid[row][i] == n || grid[i][column] == n
        return false
      end
    end
    (0...3).each do |i|
      (0...3).each do |j|
        if grid[_add((row - row % 3), i)][_add((column - column % 3), j)] == n
          return false
        end
      end
    end
    return true
  end
  def find_empty_location(grid)
    (0...9).each do |i|
      (0...9).each do |j|
        if grid[i][j] == 0
          return [i, j]
        end
      end
    end
    return []
  end
  def sudoku(grid)
    loc = find_empty_location(grid)
    if loc.length == 0
      return true
    end
    row = loc[0]
    column = loc[1]
    (1...10).each do |digit|
      if is_safe(grid, row, column, digit)
        grid[row][column] = digit
        if sudoku(grid)
          return true
        end
        grid[row][column] = 0
      end
    end
    return false
  end
  def print_solution(grid)
    (0...grid.length).each do |r|
      line = ""
      (0...grid[r].length).each do |c|
        line = _add(line, (grid[r][c]).to_s)
        if c < grid[r].length - 1
          line = _add(line, " ")
        end
      end
      puts(line)
    end
  end
  $initial_grid = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]
  $no_solution = [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0, 2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]
  $examples = [$initial_grid, $no_solution]
  $idx = 0
  while $idx < $examples.length
    puts("\nExample grid:\n====================")
    print_solution($examples[$idx])
    puts("\nExample grid solution:")
    if sudoku($examples[$idx])
      print_solution($examples[$idx])
    else
      puts("Cannot find a solution.")
    end
    $idx = _add($idx, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
