# Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:22 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def create_board(n)
    board = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [0])
        j = _add(j, 1)
      end
      board = (board + [row])
      i = _add(i, 1)
    end
    return board
  end
  def is_safe(board, row, column)
    n = board.length
    i = 0
    while i < row
      if _eq(board[i][column], 1)
        return false
      end
      i = _add(i, 1)
    end
    i = row - 1
    j = column - 1
    while i >= 0 && j >= 0
      if _eq(board[i][j], 1)
        return false
      end
      i = i - 1
      j = j - 1
    end
    i = row - 1
    j = _add(column, 1)
    while i >= 0 && j < n
      if _eq(board[i][j], 1)
        return false
      end
      i = i - 1
      j = _add(j, 1)
    end
    return true
  end
  def row_string(row)
    s = ""
    j = 0
    while j < row.length
      if _eq(row[j], 1)
        s = _add(s, "Q ")
      else
        s = _add(s, ". ")
      end
      j = _add(j, 1)
    end
    return s
  end
  def printboard(board)
    i = 0
    while i < board.length
      puts(row_string(board[i]))
      i = _add(i, 1)
    end
  end
  def solve(board, row)
    if row >= board.length
      printboard(board)
      puts("")
      return 1
    end
    count = 0
    i = 0
    while i < board.length
      if is_safe(board, row, i)
        board[row][i] = 1
        count = _add(count, solve(board, _add(row, 1)))
        board[row][i] = 0
      end
      i = _add(i, 1)
    end
    return count
  end
  def n_queens(n)
    board = create_board(n)
    total = solve(board, 0)
    puts(_add("The total number of solutions are: ", _str(total)))
    return total
  end
  n_queens(4)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000.0).round, "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
