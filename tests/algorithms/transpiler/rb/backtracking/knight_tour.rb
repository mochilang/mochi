# Generated by Mochi transpiler v0.10.59 on 2025-08-06 16:21 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_valid_pos(position, n)
    y = position[0]
    x = position[1]
    positions = [[_add(y, 1), _add(x, 2)], [y - 1, _add(x, 2)], [_add(y, 1), x - 2], [y - 1, x - 2], [_add(y, 2), _add(x, 1)], [_add(y, 2), x - 1], [y - 2, _add(x, 1)], [y - 2, x - 1]]
    permissible = []
    (0...positions.length).each do |idx|
      inner = positions[idx]
      y_test = inner[0]
      x_test = inner[1]
      if y_test >= 0 && y_test < n && x_test >= 0 && x_test < n
        permissible = (permissible + [inner])
      end
    end
    return permissible
  end
  def is_complete(board)
    (0...board.length).each do |i|
      row = board[i]
      (0...row.length).each do |j|
        if row[j] == 0
          return false
        end
      end
    end
    return true
  end
  def open_knight_tour_helper(board, pos, curr)
    if is_complete(board)
      return true
    end
    moves = get_valid_pos(pos, board.length)
    (0...moves.length).each do |i|
      position = moves[i]
      y = position[0]
      x = position[1]
      if board[y][x] == 0
        board[y][x] = _add(curr, 1)
        if open_knight_tour_helper(board, position, _add(curr, 1))
          return true
        end
        board[y][x] = 0
      end
    end
    return false
  end
  def open_knight_tour(n)
    board = []
    (0...n).each do |i|
      row = []
      (0...n).each do |j|
        row = (row + [0])
      end
      board = (board + [row])
    end
    (0...n).each do |i|
      (0...n).each do |j|
        board[i][j] = 1
        if open_knight_tour_helper(board, [i, j], 1)
          return board
        end
        board[i][j] = 0
      end
    end
    puts(_add("Open Knight Tour cannot be performed on a board of size ", (n).to_s))
    return board
  end
  $board = open_knight_tour(1)
  puts($board[0][0])
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
