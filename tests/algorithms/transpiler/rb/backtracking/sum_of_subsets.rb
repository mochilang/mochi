# Generated by Mochi transpiler v0.10.62 on 2025-08-09 10:22 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sum_list(nums)
    s = 0
        __tmp1 = nums
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |n|
      s = _add(s, n)
    end
    return s
  end
  def create_state_space_tree(nums, max_sum, num_index, path, curr_sum, remaining_sum)
    result = []
    if curr_sum > max_sum || _add(curr_sum, remaining_sum) < max_sum
      return result
    end
    if _eq(curr_sum, max_sum)
      result = (result + [path])
      return result
    end
    index = num_index
    while index < nums.length
      value = nums[index]
      subres = create_state_space_tree(nums, max_sum, _add(index, 1), (path + [value]), _add(curr_sum, value), remaining_sum - value)
      j = 0
      while j < subres.length
        result = (result + [subres[j]])
        j = _add(j, 1)
      end
      index = _add(index, 1)
    end
    return result
  end
  def generate_sum_of_subsets_solutions(nums, max_sum)
    total = sum_list(nums)
    return create_state_space_tree(nums, max_sum, 0, [], 0, total)
  end
  def main()
    puts(JSON.pretty_generate(generate_sum_of_subsets_solutions([3, 34, 4, 12, 5, 2], 9)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000.0).round, "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
