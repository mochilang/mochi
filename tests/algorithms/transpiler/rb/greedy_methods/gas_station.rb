# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_gas_stations(gas_quantities, costs)
    stations = [].clone
    i = 0.clone
    while i < gas_quantities.length
      stations = (stations << (GasStation.new(gas_quantity: gas_quantities[i], cost: costs[i]))).clone
      i = _add(i, 1).clone
    end
    return stations
  end
  def can_complete_journey(gas_stations)
    total_gas = 0.clone
    total_cost = 0.clone
    i = 0.clone
    while i < gas_stations.length
      total_gas = _add(total_gas, gas_stations[i].gas_quantity).clone
      total_cost = _add(total_cost, gas_stations[i].cost).clone
      i = _add(i, 1).clone
    end
    if total_gas < total_cost
      return -1
    end
    start = 0.clone
    net = 0.clone
    i = 0.clone
    while i < gas_stations.length
      station = gas_stations[i]
      net = _add(net, station.gas_quantity) - station.cost.clone
      if net < 0
        start = _add(i, 1).clone
        net = 0.clone
      end
      i = _add(i, 1).clone
    end
    return start
  end
  GasStation = Struct.new(:gas_quantity, :cost, keyword_init: true)
  $example1 = get_gas_stations([1, 2, 3, 4, 5], [3, 4, 5, 1, 2])
  puts(_str(can_complete_journey($example1)))
  $example2 = get_gas_stations([2, 3, 4], [3, 4, 3])
  puts(_str(can_complete_journey($example2)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
