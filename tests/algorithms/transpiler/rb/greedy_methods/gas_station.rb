# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_gas_stations(gas_quantities, costs)
    stations = []
    i = 0
    while i < _len(gas_quantities)
      stations = _append(stations, GasStation.new(gas_quantity: (__tmp1 = gas_quantities; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), cost: (__tmp2 = costs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))))
      i = _add(i, 1)
    end
    return stations
  end
  def can_complete_journey(gas_stations)
    total_gas = 0
    total_cost = 0
    i = 0
    while i < _len(gas_stations)
      total_gas = _add(total_gas, (__tmp3 = gas_stations; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)).gas_quantity)
      total_cost = _add(total_cost, (__tmp4 = gas_stations; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)).cost)
      i = _add(i, 1)
    end
    if total_gas < total_cost
      return -1
    end
    start = 0
    net = 0
    i = 0
    while i < _len(gas_stations)
      station = (__tmp5 = gas_stations; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      net = _add(net, station.gas_quantity) - station.cost
      if net < 0
        start = _add(i, 1)
        net = 0
      end
      i = _add(i, 1)
    end
    return start
  end
  Object.send(:remove_const, :GasStation) if Object.const_defined?(:GasStation)
  GasStation = Struct.new(:gas_quantity, :cost, keyword_init: true)
  $example1 = get_gas_stations([1, 2, 3, 4, 5], [3, 4, 5, 1, 2])
  puts(_str(can_complete_journey($example1)))
  $example2 = get_gas_stations([2, 3, 4], [3, 4, 3])
  puts(_str(can_complete_journey($example2)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
