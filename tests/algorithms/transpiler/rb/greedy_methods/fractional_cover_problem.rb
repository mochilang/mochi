# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ratio(item)
    return ((item.value).to_f) / ((item.weight).to_f)
  end
  def fractional_cover(items, capacity)
    if capacity < 0
      panic("Capacity cannot be negative")
    end
    total = 0.0.clone
    remaining = capacity.clone
    sorted = (begin
      _res = []
      items.each do |it|
        _res << it
      end
      _res = _res.each_with_index.sort_by do |it, __i|
        [-ratio(it), __i]
      end.map{ |x, _| x }
    _res
  end)
  idx = 0.clone
  while idx < sorted.length && remaining > 0
    item = sorted[idx]
    take = (item["weight"] < remaining ? item["weight"] : remaining)
    total = _add(total, ((take).to_f) * ratio(item)).clone
    remaining = remaining - take.clone
    idx = _add(idx, 1).clone
  end
  return total
end
Item = Struct.new(:weight, :value, keyword_init: true)
$items1 = [Item.new(weight: 10, value: 60), Item.new(weight: 20, value: 100), Item.new(weight: 30, value: 120)]
puts(_str(fractional_cover($items1, 50)))
$items2 = [Item.new(weight: 20, value: 100), Item.new(weight: 30, value: 120), Item.new(weight: 10, value: 60)]
puts(_str(fractional_cover($items2, 25)))
$items3 = []
puts(_str(fractional_cover($items3, 50)))
$items4 = [Item.new(weight: 10, value: 60)]
puts(_str(fractional_cover($items4, 5)))
puts(_str(fractional_cover($items4, 1)))
puts(_str(fractional_cover($items4, 0)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
