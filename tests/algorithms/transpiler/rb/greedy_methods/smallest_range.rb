# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def smallest_range(nums)
    heap = [].clone
    current_max = -$INF.clone
    i = 0.clone
    while i < nums.length
      first_val = nums[i][0]
      heap = (heap << (HeapItem.new(value: first_val, list_idx: i, elem_idx: 0))).clone
      if first_val > current_max
        current_max = first_val.clone
      end
      i = _add(i, 1).clone
    end
    best = [-$INF, $INF].clone
    while heap.length > 0
      min_idx = 0.clone
      j = 1.clone
      while j < heap.length
        hj = heap[j]
        hmin = heap[min_idx]
        if hj["value"] < hmin["value"]
          min_idx = j.clone
        end
        j = _add(j, 1).clone
      end
      item = heap[min_idx]
      new_heap = [].clone
      k = 0.clone
      while k < heap.length
        if k != min_idx
          new_heap = (new_heap << (heap[k])).clone
        end
        k = _add(k, 1).clone
      end
      heap = new_heap.clone
      current_min = item["value"]
      if current_max - current_min < best[1] - best[0]
        best = [current_min, current_max].clone
      end
      if item["elem_idx"] == nums[item["list_idx"]].length - 1
        break
      end
      next_val = nums[item["list_idx"]][_add(item["elem_idx"], 1)]
      heap = (heap << (HeapItem.new(value: next_val, list_idx: item["list_idx"], elem_idx: _add(item["elem_idx"], 1)))).clone
      if next_val > current_max
        current_max = next_val.clone
      end
    end
    return best
  end
  def list_to_string(arr)
    s = "[".clone
    i = 0.clone
    while i < arr.length
      s = _add(s, _str(arr[i])).clone
      if i < arr.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    return _add(s, "]")
  end
  def main()
    result1 = smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])
    puts(list_to_string(result1))
    result2 = smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
    puts(list_to_string(result2))
  end
  HeapItem = Struct.new(:value, :list_idx, :elem_idx, keyword_init: true)
  $INF = 1000000000
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
