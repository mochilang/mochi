# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def smallest_range(nums)
    heap = []
    current_max = -$INF
    i = 0
    while i < _len(nums)
      first_val = (__tmp1 = (__tmp2 = nums; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
      heap = _append(heap, HeapItem.new(value: first_val, list_idx: i, elem_idx: 0))
      if first_val > current_max
        current_max = first_val
      end
      i = _add(i, 1)
    end
    best = [-$INF, $INF]
    while _len(heap) > 0
      min_idx = 0
      j = 1
      while j < _len(heap)
        hj = (__tmp3 = heap; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
        hmin = (__tmp4 = heap; __tmp4.is_a?(Hash) ? __tmp4[min_idx] : _idx(__tmp4, min_idx))
        if (__tmp5 = hj; __tmp5.is_a?(Hash) ? __tmp5["value"] : _idx(__tmp5, "value")) < (__tmp6 = hmin; __tmp6.is_a?(Hash) ? __tmp6["value"] : _idx(__tmp6, "value"))
          min_idx = j
        end
        j = _add(j, 1)
      end
      item = (__tmp7 = heap; __tmp7.is_a?(Hash) ? __tmp7[min_idx] : _idx(__tmp7, min_idx))
      new_heap = []
      k = 0
      while k < _len(heap)
        if !_eq(k, min_idx)
          new_heap = _append(new_heap, (__tmp8 = heap; __tmp8.is_a?(Hash) ? __tmp8[k] : _idx(__tmp8, k)))
        end
        k = _add(k, 1)
      end
      heap = new_heap
      current_min = (__tmp9 = item; __tmp9.is_a?(Hash) ? __tmp9["value"] : _idx(__tmp9, "value"))
      if current_max - current_min < (__tmp10 = best; __tmp10.is_a?(Hash) ? __tmp10[1] : _idx(__tmp10, 1)) - (__tmp11 = best; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0))
        best = [current_min, current_max]
      end
      if _eq((__tmp12 = item; __tmp12.is_a?(Hash) ? __tmp12["elem_idx"] : _idx(__tmp12, "elem_idx")), _len((__tmp13 = nums; __tmp13.is_a?(Hash) ? __tmp13[(__tmp14 = item; __tmp14.is_a?(Hash) ? __tmp14["list_idx"] : _idx(__tmp14, "list_idx"))] : _idx(__tmp13, (__tmp15 = item; __tmp15.is_a?(Hash) ? __tmp15["list_idx"] : _idx(__tmp15, "list_idx"))))) - 1)
        break
      end
      next_val = (__tmp16 = (__tmp17 = nums; __tmp17.is_a?(Hash) ? __tmp17[(__tmp18 = item; __tmp18.is_a?(Hash) ? __tmp18["list_idx"] : _idx(__tmp18, "list_idx"))] : _idx(__tmp17, (__tmp19 = item; __tmp19.is_a?(Hash) ? __tmp19["list_idx"] : _idx(__tmp19, "list_idx")))); __tmp16.is_a?(Hash) ? __tmp16[_add((__tmp20 = item; __tmp20.is_a?(Hash) ? __tmp20["elem_idx"] : _idx(__tmp20, "elem_idx")), 1)] : _idx(__tmp16, _add((__tmp21 = item; __tmp21.is_a?(Hash) ? __tmp21["elem_idx"] : _idx(__tmp21, "elem_idx")), 1)))
      heap = _append(heap, HeapItem.new(value: next_val, list_idx: (__tmp22 = item; __tmp22.is_a?(Hash) ? __tmp22["list_idx"] : _idx(__tmp22, "list_idx")), elem_idx: _add((__tmp23 = item; __tmp23.is_a?(Hash) ? __tmp23["elem_idx"] : _idx(__tmp23, "elem_idx")), 1)))
      if next_val > current_max
        current_max = next_val
      end
    end
    return best
  end
  def list_to_string(arr)
    s = "["
    i = 0
    while i < _len(arr)
      s = _add(s, _str((__tmp24 = arr; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i))))
      if i < _len(arr) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def main()
    result1 = smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])
    puts(list_to_string(result1))
    result2 = smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
    puts(list_to_string(result2))
  end
  Object.send(:remove_const, :HeapItem) if Object.const_defined?(:HeapItem)
  HeapItem = Struct.new(:value, :list_idx, :elem_idx, keyword_init: true)
  $INF = 1000000000
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
