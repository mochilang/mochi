# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_by_ratio_desc(arr)
    i = 1
    while i < _len(arr)
      key = (__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      j = i - 1
      while j >= 0
        current = (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
        if current.value / current.weight < key.value / key.weight
          arr[_add(j, 1)] = current
          j = j - 1
        else
          break
        end
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return arr
  end
  def sum_first(arr, k)
    s = 0.0
    i = 0
    while i < k && i < _len(arr)
      s = _add(s, (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      i = _add(i, 1)
    end
    return s
  end
  def frac_knapsack(vl, wt, w, n)
    items = []
    i = 0
    while i < _len(vl) && i < _len(wt)
      items = _append(items, Item.new(value: (__tmp4 = vl; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), weight: (__tmp5 = wt; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))))
      i = _add(i, 1)
    end
    items = sort_by_ratio_desc(items)
    values = []
    weights = []
    i = 0
    while i < _len(items)
      itm = (__tmp6 = items; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
      values = _append(values, (__tmp7 = itm; __tmp7.is_a?(Hash) ? __tmp7["value"] : _idx(__tmp7, "value")))
      weights = _append(weights, (__tmp8 = itm; __tmp8.is_a?(Hash) ? __tmp8["weight"] : _idx(__tmp8, "weight")))
      i = _add(i, 1)
    end
    acc = []
    total = 0.0
    i = 0
    while i < _len(weights)
      total = _add(total, (__tmp9 = weights; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)))
      acc = _append(acc, total)
      i = _add(i, 1)
    end
    k = 0
    while k < _len(acc) && w >= (__tmp10 = acc; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k))
      k = _add(k, 1)
    end
    if _eq(k, 0)
      return 0.0
    end
    if k >= _len(values)
      return sum_first(values, _len(values))
    end
    if !_eq(k, n)
      return _add(sum_first(values, k), (w - (__tmp11 = acc; __tmp11.is_a?(Hash) ? __tmp11[k - 1] : _idx(__tmp11, k - 1))) * (__tmp12 = values; __tmp12.is_a?(Hash) ? __tmp12[k] : _idx(__tmp12, k)) / (__tmp13 = weights; __tmp13.is_a?(Hash) ? __tmp13[k] : _idx(__tmp13, k)))
    end
    return sum_first(values, k)
  end
  Object.send(:remove_const, :Item) if Object.const_defined?(:Item)
  Item = Struct.new(:value, :weight, keyword_init: true)
  $vl = [60.0, 100.0, 120.0]
  $wt = [10.0, 20.0, 30.0]
  $result = frac_knapsack($vl, $wt, 50.0, 3)
  puts(_str($result))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
