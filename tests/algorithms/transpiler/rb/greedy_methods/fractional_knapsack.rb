# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_by_ratio_desc(arr)
    i = 1.clone
    while i < arr.length
      key = arr[i]
      j = i - 1.clone
      while j >= 0
        current = arr[j]
        if current.value / current.weight < key.value / key.weight
          arr[_add(j, 1)] = current
          j = j - 1.clone
        else
          break
        end
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1).clone
    end
    return arr
  end
  def sum_first(arr, k)
    s = 0.0.clone
    i = 0.clone
    while i < k && i < arr.length
      s = _add(s, arr[i]).clone
      i = _add(i, 1).clone
    end
    return s
  end
  def frac_knapsack(vl, wt, w, n)
    items = [].clone
    i = 0.clone
    while i < vl.length && i < wt.length
      items = (items << (Item.new(value: vl[i], weight: wt[i]))).clone
      i = _add(i, 1).clone
    end
    items = sort_by_ratio_desc(items).clone
    values = [].clone
    weights = [].clone
    i = 0.clone
    while i < items.length
      itm = items[i]
      values = (values << (itm["value"])).clone
      weights = (weights << (itm["weight"])).clone
      i = _add(i, 1).clone
    end
    acc = [].clone
    total = 0.0.clone
    i = 0.clone
    while i < weights.length
      total = _add(total, weights[i]).clone
      acc = (acc << (total)).clone
      i = _add(i, 1).clone
    end
    k = 0.clone
    while k < acc.length && w >= acc[k]
      k = _add(k, 1).clone
    end
    if k == 0
      return 0.0
    end
    if k >= values.length
      return sum_first(values, values.length)
    end
    if k != n
      return _add(sum_first(values, k), (w - acc[k - 1]) * values[k] / weights[k])
    end
    return sum_first(values, k)
  end
  Item = Struct.new(:value, :weight, keyword_init: true)
  $vl = [60.0, 100.0, 120.0]
  $wt = [10.0, 20.0, 30.0]
  $result = frac_knapsack($vl, $wt, 50.0, 3)
  puts(_str($result))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
