# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def insertion_sort(a)
    i = 1.clone
    while i < a.length
      key = a[i]
      j = i - 1.clone
      while j >= 0 && a[j] > key
        a[_add(j, 1)] = a[j]
        j = j - 1.clone
      end
      a[_add(j, 1)] = key
      i = _add(i, 1).clone
    end
    return a
  end
  def minimum_waiting_time(queries)
    n = queries.length
    if n == 0 || n == 1
      return 0
    end
    sorted = insertion_sort(queries)
    total = 0.clone
    i = 0.clone
    while i < n
      total = _add(total, sorted[i] * (n - i - 1)).clone
      i = _add(i, 1).clone
    end
    return total
  end
  puts(minimum_waiting_time([3, 2, 1, 2, 6]))
  puts(minimum_waiting_time([3, 2, 1]))
  puts(minimum_waiting_time([1, 2, 3, 4]))
  puts(minimum_waiting_time([5, 5, 5, 5]))
  puts(minimum_waiting_time([]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
