# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_by_ratio(index, ratio)
    i = 1
    while i < _len(index)
      key = (__tmp1 = index; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      key_ratio = (__tmp2 = ratio; __tmp2.is_a?(Hash) ? __tmp2[key] : _idx(__tmp2, key))
      j = i - 1
      while j >= 0 && (__tmp3 = ratio; __tmp3.is_a?(Hash) ? __tmp3[(__tmp4 = index; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))] : _idx(__tmp3, (__tmp5 = index; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)))) < key_ratio
        index[_add(j, 1)] = (__tmp6 = index; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j))
        j = j - 1
      end
      index[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return index
  end
  def fractional_knapsack(value, weight, capacity)
    n = _len(value)
    index = []
    i = 0
    while i < n
      index = _append(index, i)
      i = _add(i, 1)
    end
    ratio = []
    i = 0
    while i < n
      ratio = _append(ratio, (__tmp7 = value; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)) / (__tmp8 = weight; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
      i = _add(i, 1)
    end
    index = sort_by_ratio(index, ratio)
    fractions = []
    i = 0
    while i < n
      fractions = _append(fractions, 0.0)
      i = _add(i, 1)
    end
    max_value = 0.0
    idx = 0
    while idx < _len(index)
      item = (__tmp9 = index; __tmp9.is_a?(Hash) ? __tmp9[idx] : _idx(__tmp9, idx))
      if (__tmp10 = weight; __tmp10.is_a?(Hash) ? __tmp10[item] : _idx(__tmp10, item)) <= capacity
        fractions[item] = 1.0
        max_value = _add(max_value, (__tmp11 = value; __tmp11.is_a?(Hash) ? __tmp11[item] : _idx(__tmp11, item)))
        capacity = capacity - (__tmp12 = weight; __tmp12.is_a?(Hash) ? __tmp12[item] : _idx(__tmp12, item))
      else
        fractions[item] = capacity / (__tmp13 = weight; __tmp13.is_a?(Hash) ? __tmp13[item] : _idx(__tmp13, item))
        max_value = _add(max_value, (__tmp14 = value; __tmp14.is_a?(Hash) ? __tmp14[item] : _idx(__tmp14, item)) * capacity / (__tmp15 = weight; __tmp15.is_a?(Hash) ? __tmp15[item] : _idx(__tmp15, item)))
        break
      end
      idx = _add(idx, 1)
    end
    return KnapsackResult.new(max_value: max_value, fractions: fractions)
  end
  Object.send(:remove_const, :KnapsackResult) if Object.const_defined?(:KnapsackResult)
  Object.const_set(:KnapsackResult, Struct.new(:max_value, :fractions, keyword_init: true))
  $v = [1.0, 3.0, 5.0, 7.0, 9.0]
  $w = [0.9, 0.7, 0.5, 0.3, 0.1]
  puts(fractional_knapsack($v, $w, 5.0))
  puts(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0))
  puts(fractional_knapsack([], [], 30.0))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
