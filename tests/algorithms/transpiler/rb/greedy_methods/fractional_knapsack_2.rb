# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_by_ratio(index, ratio)
    i = 1.clone
    while i < index.length
      key = index[i]
      key_ratio = ratio[key]
      j = i - 1.clone
      while j >= 0 && ratio[index[j]] < key_ratio
        index[_add(j, 1)] = index[j]
        j = j - 1.clone
      end
      index[_add(j, 1)] = key
      i = _add(i, 1).clone
    end
    return index
  end
  def fractional_knapsack(value, weight, capacity)
    n = value.length
    index = [].clone
    i = 0.clone
    while i < n
      index = (index << (i)).clone
      i = _add(i, 1).clone
    end
    ratio = [].clone
    i = 0.clone
    while i < n
      ratio = (ratio << (value[i] / weight[i])).clone
      i = _add(i, 1).clone
    end
    index = sort_by_ratio(index, ratio).clone
    fractions = [].clone
    i = 0.clone
    while i < n
      fractions = (fractions << (0.0)).clone
      i = _add(i, 1).clone
    end
    max_value = 0.0.clone
    idx = 0.clone
    while idx < index.length
      item = index[idx]
      if weight[item] <= capacity
        fractions[item] = 1.0
        max_value = _add(max_value, value[item]).clone
        capacity = capacity - weight[item].clone
      else
        fractions[item] = capacity / weight[item]
        max_value = _add(max_value, value[item] * capacity / weight[item]).clone
        break
      end
      idx = _add(idx, 1).clone
    end
    return KnapsackResult.new(max_value: max_value, fractions: fractions)
  end
  KnapsackResult = Struct.new(:max_value, :fractions, keyword_init: true)
  $v = [1.0, 3.0, 5.0, 7.0, 9.0]
  $w = [0.9, 0.7, 0.5, 0.3, 0.1]
  puts(fractional_knapsack($v, $w, 5.0))
  puts(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0))
  puts(fractional_knapsack([], [], 30.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
