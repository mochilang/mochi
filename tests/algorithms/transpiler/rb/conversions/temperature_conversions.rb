# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0
    i = 0
    while i < n
      p = p * 10.0
      i = _add(i, 1)
    end
    return p
  end
  def round_to(x, ndigits)
    m = pow10(ndigits)
    return floor(_add(x * m, 0.5)) / m
  end
  def celsius_to_fahrenheit(c, ndigits)
    return round_to(_add(c * 9.0 / 5.0, 32.0), ndigits)
  end
  def celsius_to_kelvin(c, ndigits)
    return round_to(_add(c, 273.15), ndigits)
  end
  def celsius_to_rankine(c, ndigits)
    return round_to(_add(c * 9.0 / 5.0, 491.67), ndigits)
  end
  def fahrenheit_to_celsius(f, ndigits)
    return round_to((f - 32.0) * 5.0 / 9.0, ndigits)
  end
  def fahrenheit_to_kelvin(f, ndigits)
    return round_to(_add((f - 32.0) * 5.0 / 9.0, 273.15), ndigits)
  end
  def fahrenheit_to_rankine(f, ndigits)
    return round_to(_add(f, 459.67), ndigits)
  end
  def kelvin_to_celsius(k, ndigits)
    return round_to(k - 273.15, ndigits)
  end
  def kelvin_to_fahrenheit(k, ndigits)
    return round_to(_add((k - 273.15) * 9.0 / 5.0, 32.0), ndigits)
  end
  def kelvin_to_rankine(k, ndigits)
    return round_to(k * 9.0 / 5.0, ndigits)
  end
  def rankine_to_celsius(r, ndigits)
    return round_to((r - 491.67) * 5.0 / 9.0, ndigits)
  end
  def rankine_to_fahrenheit(r, ndigits)
    return round_to(r - 459.67, ndigits)
  end
  def rankine_to_kelvin(r, ndigits)
    return round_to(r * 5.0 / 9.0, ndigits)
  end
  def reaumur_to_kelvin(r, ndigits)
    return round_to(_add(r * 1.25, 273.15), ndigits)
  end
  def reaumur_to_fahrenheit(r, ndigits)
    return round_to(_add(r * 2.25, 32.0), ndigits)
  end
  def reaumur_to_celsius(r, ndigits)
    return round_to(r * 1.25, ndigits)
  end
  def reaumur_to_rankine(r, ndigits)
    return round_to(_add(_add(r * 2.25, 32.0), 459.67), ndigits)
  end
  puts(celsius_to_fahrenheit(0.0, 2))
  puts(celsius_to_kelvin(0.0, 2))
  puts(celsius_to_rankine(0.0, 2))
  puts(fahrenheit_to_celsius(32.0, 2))
  puts(fahrenheit_to_kelvin(32.0, 2))
  puts(fahrenheit_to_rankine(32.0, 2))
  puts(kelvin_to_celsius(273.15, 2))
  puts(kelvin_to_fahrenheit(273.15, 2))
  puts(kelvin_to_rankine(273.15, 2))
  puts(rankine_to_celsius(491.67, 2))
  puts(rankine_to_fahrenheit(491.67, 2))
  puts(rankine_to_kelvin(491.67, 2))
  puts(reaumur_to_kelvin(80.0, 2))
  puts(reaumur_to_fahrenheit(80.0, 2))
  puts(reaumur_to_celsius(80.0, 2))
  puts(reaumur_to_rankine(80.0, 2))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
