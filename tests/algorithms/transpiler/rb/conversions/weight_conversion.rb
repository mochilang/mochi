# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow10(exp)
    result = 1.0
    if exp >= 0
      i = 0
      while i < exp
        result = result * 10.0
        i = _add(i, 1)
      end
    else
      i = 0
      while i < (0 - exp)
        result = result / 10.0
        i = _add(i, 1)
      end
    end
    return result
  end
  def weight_conversion(from_type, to_type, value)
    has_to = $KILOGRAM_CHART.include?(to_type)
    has_from = $WEIGHT_TYPE_CHART.include?(from_type)
    if has_to && has_from
      return value * $KILOGRAM_CHART[to_type] * $WEIGHT_TYPE_CHART[from_type]
    end
    puts("Invalid 'from_type' or 'to_type'")
    return 0.0
  end
  $KILOGRAM_CHART = {"kilogram" => 1.0, "gram" => 1000.0, "milligram" => 1000000.0, "metric-ton" => 0.001, "long-ton" => 0.0009842073, "short-ton" => 0.0011023122, "pound" => 2.2046244202, "stone" => 0.1574731728, "ounce" => 35.273990723, "carrat" => 5000.0, "atomic-mass-unit" => 6.022136652 * pow10(26)}
  $WEIGHT_TYPE_CHART = {"kilogram" => 1.0, "gram" => 0.001, "milligram" => 1e-06, "metric-ton" => 1000.0, "long-ton" => 1016.04608, "short-ton" => 907.184, "pound" => 0.453592, "stone" => 6.35029, "ounce" => 0.0283495, "carrat" => 0.0002, "atomic-mass-unit" => 1.660540199 * pow10(-27)}
  puts(weight_conversion("kilogram", "gram", 1.0))
  puts(weight_conversion("gram", "pound", 3.0))
  puts(weight_conversion("ounce", "kilogram", 3.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
