# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow(base, exp)
    result = 1.0
    e = exp
    if e < 0
      e = -e
      i = 0
      while i < e
        result = result * base
        i = _add(i, 1)
      end
      return 1.0 / result
    end
    i = 0
    while i < e
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def add_si_prefix(value)
    prefixes = []
    if value > 0.0
      prefixes = $si_positive
    else
      prefixes = $si_negative
    end
    i = 0
    while i < prefixes.length
      p = prefixes[i]
      num = value / 10.0 ** p["exp"]
      if num > 1.0
        return _add(_add((num).to_s, " "), p["name"])
      end
      i = _add(i, 1)
    end
    return (value).to_s
  end
  def add_binary_prefix(value)
    i = 0
    while i < $binary_prefixes.length
      p = $binary_prefixes[i]
      num = value / 2.0 ** p["exp"]
      if num > 1.0
        return _add(_add((num).to_s, " "), p["name"])
      end
      i = _add(i, 1)
    end
    return (value).to_s
  end
  Prefix = Struct.new(:name, :exp, keyword_init: true)
  $si_positive = [Prefix.new(name: "yotta", exp: 24), Prefix.new(name: "zetta", exp: 21), Prefix.new(name: "exa", exp: 18), Prefix.new(name: "peta", exp: 15), Prefix.new(name: "tera", exp: 12), Prefix.new(name: "giga", exp: 9), Prefix.new(name: "mega", exp: 6), Prefix.new(name: "kilo", exp: 3), Prefix.new(name: "hecto", exp: 2), Prefix.new(name: "deca", exp: 1)]
  $si_negative = [Prefix.new(name: "deci", exp: -1), Prefix.new(name: "centi", exp: -2), Prefix.new(name: "milli", exp: -3), Prefix.new(name: "micro", exp: -6), Prefix.new(name: "nano", exp: -9), Prefix.new(name: "pico", exp: -12), Prefix.new(name: "femto", exp: -15), Prefix.new(name: "atto", exp: -18), Prefix.new(name: "zepto", exp: -21), Prefix.new(name: "yocto", exp: -24)]
  $binary_prefixes = [Prefix.new(name: "yotta", exp: 80), Prefix.new(name: "zetta", exp: 70), Prefix.new(name: "exa", exp: 60), Prefix.new(name: "peta", exp: 50), Prefix.new(name: "tera", exp: 40), Prefix.new(name: "giga", exp: 30), Prefix.new(name: "mega", exp: 20), Prefix.new(name: "kilo", exp: 10)]
  puts(add_si_prefix(10000.0))
  puts(add_si_prefix(0.005))
  puts(add_binary_prefix(65536.0))
  puts(add_binary_prefix(512.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
