# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow10(exp)
    res = 1
    i = 0
    while i < exp
      res = res * 10
      i = _add(i, 1)
    end
    return res
  end
  def max_value(system)
    if system == "short"
      return pow10(18) - 1
    end
    if system == "long"
      return pow10(21) - 1
    end
    if system == "indian"
      return pow10(19) - 1
    end
    return 0
  end
  def join_words(words)
    res = ""
    i = 0
    while i < words.length
      if i > 0
        res = _add(res, " ")
      end
      res = _add(res, words[i])
      i = _add(i, 1)
    end
    return res
  end
  def convert_small_number(num)
    if num < 0
      return ""
    end
    if num >= 100
      return ""
    end
    tens_digit = num / 10
    ones_digit = num % 10
    if tens_digit == 0
      return $ones[ones_digit]
    end
    if tens_digit == 1
      return $teens[ones_digit]
    end
    hyphen = (ones_digit > 0 ? "-" : "")
    tail = (ones_digit > 0 ? $ones[ones_digit] : "")
    return _add(_add($tens[tens_digit], hyphen), tail)
  end
  def convert_number(num, system)
    word_groups = []
    n = num
    if n < 0
      word_groups = (word_groups + ["negative"])
      n = -n
    end
    if n > max_value(system)
      return ""
    end
    powers = []
    units = []
    if system == "short"
      powers = $short_powers
      units = $short_units
    else
      if system == "long"
        powers = $long_powers
        units = $long_units
      else
        if system == "indian"
          powers = $indian_powers
          units = $indian_units
        else
          return ""
        end
      end
    end
    i = 0
    while i < powers.length
      power = powers[i]
      unit = units[i]
      divisor = pow10(power)
      digit_group = n / divisor
      n = n % divisor
      if digit_group > 0
        word_group = (digit_group >= 100 ? convert_number(digit_group, system) : convert_small_number(digit_group))
        word_groups = (word_groups + [_add(_add(word_group, " "), unit)])
      end
      i = _add(i, 1)
    end
    if n > 0 || word_groups.length == 0
      word_groups = (word_groups + [convert_small_number(n)])
    end
    joined = join_words(word_groups)
    return joined
  end
  $ones = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
  $teens = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
  $tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
  $short_powers = [15, 12, 9, 6, 3, 2]
  $short_units = ["quadrillion", "trillion", "billion", "million", "thousand", "hundred"]
  $long_powers = [15, 9, 6, 3, 2]
  $long_units = ["billiard", "milliard", "million", "thousand", "hundred"]
  $indian_powers = [14, 12, 7, 5, 3, 2]
  $indian_units = ["crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"]
  puts(convert_number(123456789012345, "short"))
  puts(convert_number(123456789012345, "long"))
  puts(convert_number(123456789012345, "indian"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
