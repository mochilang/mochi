# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sanitize(unit)
    res = unit.downcase()
    if res.length > 0
      last = res[res.length - 1...res.length]
      if last == "s"
        res = res[0...res.length - 1]
      end
    end
    if $UNIT_SYMBOL.include?(res)
      return $UNIT_SYMBOL[res]
    end
    return res
  end
  def pow10(exp)
    if exp == 0
      return 1.0
    end
    e = exp
    res = 1.0
    if e < 0
      e = -e
    end
    i = 0
    while i < e
      res = res * 10.0
      i = _add(i, 1)
    end
    if exp < 0
      return 1.0 / res
    end
    return res
  end
  def length_conversion(value, from_type, to_type)
    from_sanitized = sanitize(from_type)
    to_sanitized = sanitize(to_type)
    if !($METRIC_CONVERSION.include?(from_sanitized))
      panic(_add(_add(_add("Invalid 'from_type' value: '", from_type), "'.\nConversion abbreviations are: "), $ABBREVIATIONS))
    end
    if !($METRIC_CONVERSION.include?(to_sanitized))
      panic(_add(_add(_add("Invalid 'to_type' value: '", to_type), "'.\nConversion abbreviations are: "), $ABBREVIATIONS))
    end
    from_exp = $METRIC_CONVERSION[from_sanitized]
    to_exp = $METRIC_CONVERSION[to_sanitized]
    exponent = 0
    if from_exp > to_exp
      exponent = from_exp - to_exp
    else
      exponent = -(to_exp - from_exp)
    end
    return value * pow10(exponent)
  end
  $UNIT_SYMBOL = {"meter" => "m", "kilometer" => "km", "megametre" => "Mm", "gigametre" => "Gm", "terametre" => "Tm", "petametre" => "Pm", "exametre" => "Em", "zettametre" => "Zm", "yottametre" => "Ym"}
  $METRIC_CONVERSION = {"m" => 0, "km" => 3, "Mm" => 6, "Gm" => 9, "Tm" => 12, "Pm" => 15, "Em" => 18, "Zm" => 21, "Ym" => 24}
  $ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"
  puts((length_conversion(1.0, "meter", "kilometer")).to_s)
  puts((length_conversion(1.0, "meter", "megametre")).to_s)
  puts((length_conversion(1.0, "gigametre", "meter")).to_s)
  puts((length_conversion(1.0, "terametre", "zettametre")).to_s)
  puts((length_conversion(1.0, "yottametre", "zettametre")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
