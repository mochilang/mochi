# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(arr, value)
    i = 0
    while i < arr.length
      if arr[i] == value
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def units_string(arr)
    s = ""
    i = 0
    while i < arr.length
      if i > 0
        s = _add(s, ", ")
      end
      s = _add(s, arr[i])
      i = _add(i, 1)
    end
    return s
  end
  def round3(x)
    y = _add(x * 1000.0, 0.5)
    z = (y).to_i
    zf = (z).to_f
    return zf / 1000.0
  end
  def convert_speed(speed, unit_from, unit_to)
    from_index = index_of($units, unit_from)
    to_index = index_of($units, unit_to)
    if from_index < 0 || to_index < 0
      msg = _add(_add(_add(_add(_add("Incorrect 'from_type' or 'to_type' value: ", unit_from), ", "), unit_to), "\nValid values are: "), units_string($units))
      panic(msg)
    end
    result = speed * $speed_chart[from_index] * $speed_chart_inverse[to_index]
    r = round3(result)
    return r
  end
  $units = ["km/h", "m/s", "mph", "knot"]
  $speed_chart = [1.0, 3.6, 1.609344, 1.852]
  $speed_chart_inverse = [1.0, 0.277777778, 0.621371192, 0.539956803]
  puts((convert_speed(100.0, "km/h", "m/s")).to_s)
  puts((convert_speed(100.0, "km/h", "mph")).to_s)
  puts((convert_speed(100.0, "km/h", "knot")).to_s)
  puts((convert_speed(100.0, "m/s", "km/h")).to_s)
  puts((convert_speed(100.0, "m/s", "mph")).to_s)
  puts((convert_speed(100.0, "m/s", "knot")).to_s)
  puts((convert_speed(100.0, "mph", "km/h")).to_s)
  puts((convert_speed(100.0, "mph", "m/s")).to_s)
  puts((convert_speed(100.0, "mph", "knot")).to_s)
  puts((convert_speed(100.0, "knot", "km/h")).to_s)
  puts((convert_speed(100.0, "knot", "m/s")).to_s)
  puts((convert_speed(100.0, "knot", "mph")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
