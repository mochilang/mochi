# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow(base, exp)
    if exp == 0
      return 1.0
    end
    e = exp
    if e < 0
      e = -e
    end
    result = 1.0
    i = 0
    while i < e
      result = result * base
      i = _add(i, 1)
    end
    if exp < 0
      return 1.0 / result
    end
    return result
  end
  def convert_si_prefix(known_amount, known_prefix, unknown_prefix)
    kp = known_prefix.downcase()
    up = unknown_prefix.downcase()
    if !($SI_UNITS.include?(kp))
      panic(_add("unknown prefix: ", known_prefix))
    end
    if !($SI_UNITS.include?(up))
      panic(_add("unknown prefix: ", unknown_prefix))
    end
    diff = $SI_UNITS[kp] - $SI_UNITS[up]
    return known_amount * 10.0 ** diff
  end
  def convert_binary_prefix(known_amount, known_prefix, unknown_prefix)
    kp = known_prefix.downcase()
    up = unknown_prefix.downcase()
    if !($BINARY_UNITS.include?(kp))
      panic(_add("unknown prefix: ", known_prefix))
    end
    if !($BINARY_UNITS.include?(up))
      panic(_add("unknown prefix: ", unknown_prefix))
    end
    diff = ($BINARY_UNITS[kp] - $BINARY_UNITS[up]) * 10
    return known_amount * 2.0 ** diff
  end
  $SI_UNITS = {"yotta" => 24, "zetta" => 21, "exa" => 18, "peta" => 15, "tera" => 12, "giga" => 9, "mega" => 6, "kilo" => 3, "hecto" => 2, "deca" => 1, "deci" => -1, "centi" => -2, "milli" => -3, "micro" => -6, "nano" => -9, "pico" => -12, "femto" => -15, "atto" => -18, "zepto" => -21, "yocto" => -24}
  $BINARY_UNITS = {"yotta" => 8, "zetta" => 7, "exa" => 6, "peta" => 5, "tera" => 4, "giga" => 3, "mega" => 2, "kilo" => 1}
  puts((convert_si_prefix(1.0, "giga", "mega")).to_s)
  puts((convert_si_prefix(1.0, "mega", "giga")).to_s)
  puts((convert_si_prefix(1.0, "kilo", "kilo")).to_s)
  puts((convert_binary_prefix(1.0, "giga", "mega")).to_s)
  puts((convert_binary_prefix(1.0, "mega", "giga")).to_s)
  puts((convert_binary_prefix(1.0, "kilo", "kilo")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
