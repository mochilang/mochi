# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def atanApprox(x)
    if x > 1.0
      return $PI / 2.0 - x / (_add(x * x, 0.28))
    end
    if x < (-1.0)
      return -$PI / 2.0 - x / (_add(x * x, 0.28))
    end
    return x / (_add(1.0, 0.28 * x * x))
  end
  def atan2Approx(y, x)
    if x > 0.0
      r = atanApprox(y / x)
      return r
    end
    if x < 0.0
      if y >= 0.0
        return _add(atanApprox(y / x), $PI)
      end
      return atanApprox(y / x) - $PI
    end
    if y > 0.0
      return $PI / 2.0
    end
    if y < 0.0
      return -$PI / 2.0
    end
    return 0.0
  end
  def deg(rad)
    return rad * 180.0 / $PI
  end
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0
    i = 0
    while i < n
      p = p * 10.0
      i = _add(i, 1)
    end
    return p
  end
  def round(x, n)
    m = pow10(n)
    return floor(_add(x * m, 0.5)) / m
  end
  def rectangular_to_polar(real, img)
    mod = round(sqrtApprox(_add(real * real, img * img)), 2)
    ang = round(deg(atan2Approx(img, real)), 2)
    return [mod, ang]
  end
  def show(real, img)
    r = rectangular_to_polar(real, img)
    puts(((x = r); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  $PI = 3.141592653589793
  show(5.0, -5.0)
  show(-1.0, 1.0)
  show(-1.0, -1.0)
  show(1e-10, 1e-10)
  show(-1e-10, 1e-10)
  show(9.75, 5.93)
  show(10000.0, 99999.0)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
