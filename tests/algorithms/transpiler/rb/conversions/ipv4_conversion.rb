# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def split_by_dot(s)
    res = []
    current = ""
    i = 0
    while i < s.length
      c = s[i]
      if c == "."
        res = (res + [current])
        current = ""
      else
        current = _add(current, c)
      end
      i = _add(i, 1)
    end
    res = (res + [current])
    return res
  end
  def parse_decimal(s)
    if s.length == 0
      panic("Invalid IPv4 address format")
    end
    value = 0
    i = 0
    while i < s.length
      c = s[i]
      if c < "0" || c > "9"
        panic("Invalid IPv4 address format")
      end
      value = _add(value * 10, ((c).to_i))
      i = _add(i, 1)
    end
    return value
  end
  def to_hex2(n)
    x = n
    res = ""
    while x > 0
      d = x % 16
      res = _add($hex_digits[d], res)
      x = x / 16
    end
    while res.length < 2
      res = _add("0", res)
    end
    return res
  end
  def ipv4_to_decimal(ipv4_address)
    parts = split_by_dot(ipv4_address)
    if parts.length != 4
      panic("Invalid IPv4 address format")
    end
    result = 0
    i = 0
    while i < 4
      oct = parse_decimal(parts[i])
      if oct < 0 || oct > 255
        panic(_add("Invalid IPv4 octet ", (oct).to_s))
      end
      result = _add(result * 256, oct)
      i = _add(i, 1)
    end
    return result
  end
  def alt_ipv4_to_decimal(ipv4_address)
    parts = split_by_dot(ipv4_address)
    if parts.length != 4
      panic("Invalid IPv4 address format")
    end
    hex_str = ""
    i = 0
    while i < 4
      oct = parse_decimal(parts[i])
      if oct < 0 || oct > 255
        panic(_add("Invalid IPv4 octet ", (oct).to_s))
      end
      hex_str = _add(hex_str, to_hex2(oct))
      i = _add(i, 1)
    end
    value = 0
    k = 0
    while k < hex_str.length
      c = hex_str[k]
      digit = 0 - 1
      j = 0
      while j < $hex_digits.length
        if $hex_digits[j] == c
          digit = j
        end
        j = _add(j, 1)
      end
      if digit < 0
        panic("Invalid hex digit")
      end
      value = _add(value * 16, digit)
      k = _add(k, 1)
    end
    return value
  end
  def decimal_to_ipv4(decimal_ipv4)
    if decimal_ipv4 < 0 || decimal_ipv4 > 4294967295
      panic("Invalid decimal IPv4 address")
    end
    n = decimal_ipv4
    parts = []
    i = 0
    while i < 4
      octet = n % 256
      parts = (parts + [(octet).to_s])
      n = n / 256
      i = _add(i, 1)
    end
    res = ""
    j = parts.length - 1
    while j >= 0
      res = _add(res, parts[j])
      if j > 0
        res = _add(res, ".")
      end
      j = j - 1
    end
    return res
  end
  $hex_digits = "0123456789abcdef"
  puts(ipv4_to_decimal("192.168.0.1"))
  puts(ipv4_to_decimal("10.0.0.255"))
  puts(alt_ipv4_to_decimal("192.168.0.1"))
  puts(alt_ipv4_to_decimal("10.0.0.255"))
  puts(decimal_to_ipv4(3232235521))
  puts(decimal_to_ipv4(167772415))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
