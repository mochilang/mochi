# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(arr, t)
    i = 0
    while i < arr.length
      if arr[i] == t
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def convert_time(time_value, unit_from, unit_to)
    if time_value < 0.0
      panic("'time_value' must be a non-negative number.")
    end
    from = unit_from.downcase()
    to = unit_to.downcase()
    if (!$units.include?(from)) || (!$units.include?(to))
      invalid_unit = from
      if $units.include?(from)
        invalid_unit = to
      end
      panic(_add(_add(_add(_add("Invalid unit ", invalid_unit), " is not in "), $units_str), "."))
    end
    seconds = time_value * $time_chart[from]
    converted = seconds * $time_chart_inverse[to]
    scaled = converted * 1000.0
    int_part = (_add(scaled, 0.5)).to_i
    return (_add(int_part, 0.0)) / 1000.0
  end
  $time_chart = {"seconds" => 1.0, "minutes" => 60.0, "hours" => 3600.0, "days" => 86400.0, "weeks" => 604800.0, "months" => 2629800.0, "years" => 31557600.0}
  $time_chart_inverse = {"seconds" => 1.0, "minutes" => 1.0 / 60.0, "hours" => 1.0 / 3600.0, "days" => 1.0 / 86400.0, "weeks" => 1.0 / 604800.0, "months" => 1.0 / 2629800.0, "years" => 1.0 / 31557600.0}
  $units = ["seconds", "minutes", "hours", "days", "weeks", "months", "years"]
  $units_str = "seconds, minutes, hours, days, weeks, months, years"
  puts(convert_time(3600.0, "seconds", "hours"))
  puts(convert_time(360.0, "days", "months"))
  puts(convert_time(360.0, "months", "years"))
  puts(convert_time(1.0, "years", "seconds"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
