# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def trim(s)
    start = 0
    while start < s.length
      ch = s[start..._add(start, 1)]
      if ch != " " && ch != "\n" && ch != "\t" && ch != "\r"
        break
      end
      start = _add(start, 1)
    end
    end_ = s.length
    while end_ > start
      ch = s[end_ - 1...end_]
      if ch != " " && ch != "\n" && ch != "\t" && ch != "\r"
        break
      end
      end_ = end_ - 1
    end
    return s[start...end_]
  end
  def bin_to_decimal(bin_string)
    trimmed = trim(bin_string)
    if trimmed == ""
      panic("Empty string was passed to the function")
    end
    is_negative = false
    s = trimmed
    if s[0...1] == "-"
      is_negative = true
      s = s[1...s.length]
    end
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if c != "0" && c != "1"
        panic("Non-binary value was passed to the function")
      end
      i = _add(i, 1)
    end
    decimal_number = 0
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      digit = (c).to_i
      decimal_number = _add(2 * decimal_number, digit)
      i = _add(i, 1)
    end
    if is_negative
      return -decimal_number
    end
    return decimal_number
  end
  puts((bin_to_decimal("101")).to_s)
  puts((bin_to_decimal(" 1010   ")).to_s)
  puts((bin_to_decimal("-11101")).to_s)
  puts((bin_to_decimal("0")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
