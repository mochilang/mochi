# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def strip(s)
    start = 0
    end_ = s.length
    while start < end_ && s[start..._add(start, 1)] == " "
      start = _add(start, 1)
    end
    while end_ > start && s[end_ - 1...end_] == " "
      end_ = end_ - 1
    end
    return s[start...end_]
  end
  def hex_digit_value(c)
    if c == "0"
      return 0
    end
    if c == "1"
      return 1
    end
    if c == "2"
      return 2
    end
    if c == "3"
      return 3
    end
    if c == "4"
      return 4
    end
    if c == "5"
      return 5
    end
    if c == "6"
      return 6
    end
    if c == "7"
      return 7
    end
    if c == "8"
      return 8
    end
    if c == "9"
      return 9
    end
    if c == "a" || c == "A"
      return 10
    end
    if c == "b" || c == "B"
      return 11
    end
    if c == "c" || c == "C"
      return 12
    end
    if c == "d" || c == "D"
      return 13
    end
    if c == "e" || c == "E"
      return 14
    end
    if c == "f" || c == "F"
      return 15
    end
    puts("Non-hexadecimal value was passed to the function")
    return 0
  end
  def hex_to_decimal(hex_string)
    s = strip(hex_string)
    if s.length == 0
      puts("Empty string was passed to the function")
      return 0
    end
    is_negative = false
    if s[0...1] == "-"
      is_negative = true
      s = s[1...s.length]
    end
    decimal_number = 0
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      value = hex_digit_value(c)
      decimal_number = _add(16 * decimal_number, value)
      i = _add(i, 1)
    end
    if is_negative
      return -decimal_number
    end
    return decimal_number
  end
  def main()
    puts((hex_to_decimal("a")).to_s)
    puts((hex_to_decimal("12f")).to_s)
    puts((hex_to_decimal("   12f   ")).to_s)
    puts((hex_to_decimal("FfFf")).to_s)
    puts((hex_to_decimal("-Ff")).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
