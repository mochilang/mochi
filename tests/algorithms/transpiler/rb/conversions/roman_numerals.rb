# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def char_value(c)
    if c == "I"
      return 1
    end
    if c == "V"
      return 5
    end
    if c == "X"
      return 10
    end
    if c == "L"
      return 50
    end
    if c == "C"
      return 100
    end
    if c == "D"
      return 500
    end
    if c == "M"
      return 1000
    end
    return 0
  end
  def roman_to_int(roman)
    total = 0
    i = 0
    while i < roman.length
      if _add(i, 1) < roman.length && char_value(roman[i]) < char_value(roman[_add(i, 1)])
        total = _add(total, char_value(roman[_add(i, 1)])) - char_value(roman[i])
        i = _add(i, 2)
      else
        total = _add(total, char_value(roman[i]))
        i = _add(i, 1)
      end
    end
    return total
  end
  def int_to_roman(number)
    num = number
    res = ""
    i = 0
    while i < $roman_values.length
      value = $roman_values[i]
      symbol = $roman_symbols[i]
      factor = num / value
      num = num % value
      j = 0
      while j < factor
        res = _add(res, symbol)
        j = _add(j, 1)
      end
      if num == 0
        break
      end
      i = _add(i, 1)
    end
    return res
  end
  $roman_values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
  $roman_symbols = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
  # test roman_to_int
  raise 'assertion failed' unless roman_to_int("III") == 3
  raise 'assertion failed' unless roman_to_int("CLIV") == 154
  raise 'assertion failed' unless roman_to_int("MIX") == 1009
  raise 'assertion failed' unless roman_to_int("MMD") == 2500
  raise 'assertion failed' unless roman_to_int("MMMCMXCIX") == 3999
  # test int_to_roman
  raise 'assertion failed' unless int_to_roman(3) == "III"
  raise 'assertion failed' unless int_to_roman(154) == "CLIV"
  raise 'assertion failed' unless int_to_roman(1009) == "MIX"
  raise 'assertion failed' unless int_to_roman(2500) == "MMD"
  raise 'assertion failed' unless int_to_roman(3999) == "MMMCMXCIX"
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
