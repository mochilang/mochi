# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def bin_to_octal(bin_string)
    i = 0
    while i < bin_string.length
      c = bin_string[i]
      if !(c == "0" || c == "1")
        panic("Non-binary value was passed to the function")
      end
      i = _add(i, 1)
    end
    if bin_string.length == 0
      panic("Empty string was passed to the function")
    end
    padded = bin_string
    while padded.length % 3 != 0
      padded = _add("0", padded)
    end
    oct_string = ""
    index = 0
    while index < padded.length
      group = padded[index..._add(index, 3)]
      b0 = (group[0] == "1" ? 1 : 0)
      b1 = (group[1] == "1" ? 1 : 0)
      b2 = (group[2] == "1" ? 1 : 0)
      oct_val = _add(_add(b0 * 4, b1 * 2), b2)
      oct_string = _add(oct_string, (oct_val).to_s)
      index = _add(index, 3)
    end
    return oct_string
  end
  puts(bin_to_octal("1111"))
  puts(bin_to_octal("101010101010011"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
