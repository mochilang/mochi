# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def energy_conversion(from_type, to_type, value)
    if ($ENERGY_CONVERSION.include?(from_type)) == false || ($ENERGY_CONVERSION.include?(to_type)) == false
      panic("Incorrect 'from_type' or 'to_type'")
    end
    return value * $ENERGY_CONVERSION[from_type] / $ENERGY_CONVERSION[to_type]
  end
  $ENERGY_CONVERSION = {"joule" => 1.0, "kilojoule" => 1000.0, "megajoule" => 1000000.0, "gigajoule" => 1000000000.0, "wattsecond" => 1.0, "watthour" => 3600.0, "kilowatthour" => 3600000.0, "newtonmeter" => 1.0, "calorie_nutr" => 4186.8, "kilocalorie_nutr" => 4186800.0, "electronvolt" => 1.602176634e-19, "britishthermalunit_it" => 1055.05585, "footpound" => 1.355818}
  puts((energy_conversion("joule", "kilojoule", 1.0)).to_s)
  puts((energy_conversion("kilowatthour", "joule", 10.0)).to_s)
  puts((energy_conversion("britishthermalunit_it", "footpound", 1.0)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
