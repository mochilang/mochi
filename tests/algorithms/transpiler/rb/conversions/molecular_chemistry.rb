# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def round_to_int(x)
    if x >= 0.0
      return (_add(x, 0.5)).to_i
    end
    return (x - 0.5).to_i
  end
  def molarity_to_normality(nfactor, moles, volume)
    return round_to_int((moles / volume) * nfactor)
  end
  def moles_to_pressure(volume, moles, temperature)
    return round_to_int((moles * 0.0821 * temperature) / volume)
  end
  def moles_to_volume(pressure, moles, temperature)
    return round_to_int((moles * 0.0821 * temperature) / pressure)
  end
  def pressure_and_volume_to_temperature(pressure, moles, volume)
    return round_to_int((pressure * volume) / (0.0821 * moles))
  end
  puts((molarity_to_normality(2.0, 3.1, 0.31)).to_s)
  puts((molarity_to_normality(4.0, 11.4, 5.7)).to_s)
  puts((moles_to_pressure(0.82, 3.0, 300.0)).to_s)
  puts((moles_to_pressure(8.2, 5.0, 200.0)).to_s)
  puts((moles_to_volume(0.82, 3.0, 300.0)).to_s)
  puts((moles_to_volume(8.2, 5.0, 200.0)).to_s)
  puts((pressure_and_volume_to_temperature(0.82, 1.0, 2.0)).to_s)
  puts((pressure_and_volume_to_temperature(8.2, 5.0, 3.0)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
