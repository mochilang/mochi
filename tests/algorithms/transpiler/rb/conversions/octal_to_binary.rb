# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def octal_to_binary(octal_number)
    if octal_number.length == 0
      panic("Empty string was passed to the function")
    end
    octal_digits = "01234567"
    binary_number = ""
    i = 0
    while i < octal_number.length
      digit = octal_number[i]
      valid = false
      j = 0
      while j < octal_digits.length
        if digit == octal_digits[j]
          valid = true
          break
        end
        j = _add(j, 1)
      end
      if !valid
        panic("Non-octal value was passed to the function")
      end
      value = (digit).to_i
      k = 0
      binary_digit = ""
      while k < 3
        binary_digit = _add((value % 2).to_s, binary_digit)
        value = value / 2
        k = _add(k, 1)
      end
      binary_number = _add(binary_number, binary_digit)
      i = _add(i, 1)
    end
    return binary_number
  end
  puts(octal_to_binary("17"))
  puts(octal_to_binary("7"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
