# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def supported_values()
    result = $units[0]
    i = 1
    while i < $units.length
      result = _add(_add(result, ", "), $units[i])
      i = _add(i, 1)
    end
    return result
  end
  def find_index(name)
    i = 0
    while i < $units.length
      if $units[i] == name
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def get_from_factor(name)
    idx = find_index(name)
    if idx < 0
      panic(_add(_add(_add("Invalid 'from_type' value: '", name), "' Supported values are: "), supported_values()))
    end
    return $from_factors[idx]
  end
  def get_to_factor(name)
    idx = find_index(name)
    if idx < 0
      panic(_add(_add(_add("Invalid 'to_type' value: '", name), "' Supported values are: "), supported_values()))
    end
    return $to_factors[idx]
  end
  def volume_conversion(value, from_type, to_type)
    from_factor = get_from_factor(from_type)
    to_factor = get_to_factor(to_type)
    return value * from_factor * to_factor
  end
  $units = ["cubic meter", "litre", "kilolitre", "gallon", "cubic yard", "cubic foot", "cup"]
  $from_factors = [1.0, 0.001, 1.0, 0.00454, 0.76455, 0.028, 0.000236588]
  $to_factors = [1.0, 1000.0, 1.0, 264.172, 1.30795, 35.3147, 4226.75]
  puts((volume_conversion(4.0, "cubic meter", "litre")).to_s)
  puts((volume_conversion(1.0, "litre", "gallon")).to_s)
  puts((volume_conversion(1.0, "kilolitre", "cubic meter")).to_s)
  puts((volume_conversion(3.0, "gallon", "cubic yard")).to_s)
  puts((volume_conversion(2.0, "cubic yard", "litre")).to_s)
  puts((volume_conversion(4.0, "cubic foot", "cup")).to_s)
  puts((volume_conversion(1.0, "cup", "kilolitre")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
