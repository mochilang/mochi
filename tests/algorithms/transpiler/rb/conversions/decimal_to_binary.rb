# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def decimal_to_binary_iterative(num)
    if num == 0
      return "0b0"
    end
    negative = false
    n = num
    if n < 0
      negative = true
      n = -n
    end
    result = ""
    while n > 0
      result = _add((n % 2).to_s, result)
      n = n / 2
    end
    if negative
      return _add("-0b", result)
    end
    return _add("0b", result)
  end
  def decimal_to_binary_recursive_helper(n)
    if n == 0
      return "0"
    end
    if n == 1
      return "1"
    end
    div = n / 2
    mod = n % 2
    return _add(decimal_to_binary_recursive_helper(div), (mod).to_s)
  end
  def decimal_to_binary_recursive(num)
    if num == 0
      return "0b0"
    end
    if num < 0
      return _add("-0b", decimal_to_binary_recursive_helper(-num))
    end
    return _add("0b", decimal_to_binary_recursive_helper(num))
  end
  puts(decimal_to_binary_iterative(0))
  puts(decimal_to_binary_iterative(2))
  puts(decimal_to_binary_iterative(7))
  puts(decimal_to_binary_iterative(35))
  puts(decimal_to_binary_iterative(-2))
  puts(decimal_to_binary_recursive(0))
  puts(decimal_to_binary_recursive(40))
  puts(decimal_to_binary_recursive(-40))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
