# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rstrip_s(s)
    if s.length > 0 && s[s.length - 1] == "s"
      return s[0...s.length - 1]
    end
    return s
  end
  def normalize_alias(u)
    if u == "millimeter"
      return "mm"
    end
    if u == "centimeter"
      return "cm"
    end
    if u == "meter"
      return "m"
    end
    if u == "kilometer"
      return "km"
    end
    if u == "inch"
      return "in"
    end
    if u == "inche"
      return "in"
    end
    if u == "feet"
      return "ft"
    end
    if u == "foot"
      return "ft"
    end
    if u == "yard"
      return "yd"
    end
    if u == "mile"
      return "mi"
    end
    return u
  end
  def has_unit(u)
    return u == "mm" || u == "cm" || u == "m" || u == "km" || u == "in" || u == "ft" || u == "yd" || u == "mi"
  end
  def from_factor(u)
    if u == "mm"
      return 0.001
    end
    if u == "cm"
      return 0.01
    end
    if u == "m"
      return 1.0
    end
    if u == "km"
      return 1000.0
    end
    if u == "in"
      return 0.0254
    end
    if u == "ft"
      return 0.3048
    end
    if u == "yd"
      return 0.9144
    end
    if u == "mi"
      return 1609.34
    end
    return 0.0
  end
  def to_factor(u)
    if u == "mm"
      return 1000.0
    end
    if u == "cm"
      return 100.0
    end
    if u == "m"
      return 1.0
    end
    if u == "km"
      return 0.001
    end
    if u == "in"
      return 39.3701
    end
    if u == "ft"
      return 3.28084
    end
    if u == "yd"
      return 1.09361
    end
    if u == "mi"
      return 0.000621371
    end
    return 0.0
  end
  def length_conversion(value, from_type, to_type)
    new_from = normalize_alias(rstrip_s(from_type.downcase()))
    new_to = normalize_alias(rstrip_s(to_type.downcase()))
    if !has_unit(new_from)
      panic(_add(_add("Invalid 'from_type' value: '", from_type), "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
    end
    if !has_unit(new_to)
      panic(_add(_add("Invalid 'to_type' value: '", to_type), "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
    end
    return value * from_factor(new_from) * to_factor(new_to)
  end
  puts(length_conversion(4.0, "METER", "FEET"))
  puts(length_conversion(1.0, "kilometer", "inch"))
  puts(length_conversion(2.0, "feet", "meter"))
  puts(length_conversion(2.0, "centimeter", "millimeter"))
  puts(length_conversion(4.0, "yard", "kilometer"))
  puts(length_conversion(3.0, "foot", "inch"))
  puts(length_conversion(3.0, "mm", "in"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
