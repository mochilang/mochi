# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def octal_to_hex(octal)
    s = octal
    if s.length >= 2 && s[0] == "0" && s[1] == "o"
      s = s[2...s.length]
    end
    if s.length == 0
      panic("Empty string was passed to the function")
    end
    j = 0
    while j < s.length
      c = s[j]
      if c != "0" && c != "1" && c != "2" && c != "3" && c != "4" && c != "5" && c != "6" && c != "7"
        panic("Not a Valid Octal Number")
      end
      j = _add(j, 1)
    end
    decimal = 0
    k = 0
    while k < s.length
      d = (s[k]).to_i
      decimal = _add(decimal * 8, d)
      k = _add(k, 1)
    end
    hex_chars = "0123456789ABCDEF"
    if decimal == 0
      return "0x"
    end
    hex = ""
    while decimal > 0
      idx = decimal % 16
      hex = _add(hex_chars[idx], hex)
      decimal = decimal / 16
    end
    return _add("0x", hex)
  end
  $nums = ["030", "100", "247", "235", "007"]
  $t = 0
  while $t < $nums.length
    num = $nums[$t]
    puts(octal_to_hex(num))
    $t = _add($t, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
