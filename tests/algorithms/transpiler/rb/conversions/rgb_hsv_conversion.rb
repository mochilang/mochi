# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def fmod(a, b)
    return a - b * (a / b).to_i
  end
  def roundf(x)
    if x >= 0.0
      return (_add(x, 0.5)).to_i
    end
    return (x - 0.5).to_i
  end
  def maxf(a, b, c)
    m = a
    if b > m
      m = b
    end
    if c > m
      m = c
    end
    return m
  end
  def minf(a, b, c)
    m = a
    if b < m
      m = b
    end
    if c < m
      m = c
    end
    return m
  end
  def hsv_to_rgb(hue, saturation, value)
    if hue < 0.0 || hue > 360.0
      puts("hue should be between 0 and 360")
      return []
    end
    if saturation < 0.0 || saturation > 1.0
      puts("saturation should be between 0 and 1")
      return []
    end
    if value < 0.0 || value > 1.0
      puts("value should be between 0 and 1")
      return []
    end
    chroma = value * saturation
    hue_section = hue / 60.0
    second_largest_component = chroma * (1.0 - absf(fmod(hue_section, 2.0) - 1.0))
    match_value = value - chroma
    red = 0
    green = 0
    blue = 0
    if hue_section >= 0.0 && hue_section <= 1.0
      red = roundf(255.0 * (_add(chroma, match_value)))
      green = roundf(255.0 * (_add(second_largest_component, match_value)))
      blue = roundf(255.0 * match_value)
    else
      if hue_section > 1.0 && hue_section <= 2.0
        red = roundf(255.0 * (_add(second_largest_component, match_value)))
        green = roundf(255.0 * (_add(chroma, match_value)))
        blue = roundf(255.0 * match_value)
      else
        if hue_section > 2.0 && hue_section <= 3.0
          red = roundf(255.0 * match_value)
          green = roundf(255.0 * (_add(chroma, match_value)))
          blue = roundf(255.0 * (_add(second_largest_component, match_value)))
        else
          if hue_section > 3.0 && hue_section <= 4.0
            red = roundf(255.0 * match_value)
            green = roundf(255.0 * (_add(second_largest_component, match_value)))
            blue = roundf(255.0 * (_add(chroma, match_value)))
          else
            if hue_section > 4.0 && hue_section <= 5.0
              red = roundf(255.0 * (_add(second_largest_component, match_value)))
              green = roundf(255.0 * match_value)
              blue = roundf(255.0 * (_add(chroma, match_value)))
            else
              red = roundf(255.0 * (_add(chroma, match_value)))
              green = roundf(255.0 * match_value)
              blue = roundf(255.0 * (_add(second_largest_component, match_value)))
            end
          end
        end
      end
    end
    return [red, green, blue]
  end
  def rgb_to_hsv(red, green, blue)
    if red < 0 || red > 255
      puts("red should be between 0 and 255")
      return []
    end
    if green < 0 || green > 255
      puts("green should be between 0 and 255")
      return []
    end
    if blue < 0 || blue > 255
      puts("blue should be between 0 and 255")
      return []
    end
    float_red = red / 255.0
    float_green = green / 255.0
    float_blue = blue / 255.0
    value = maxf(float_red, float_green, float_blue)
    min_val = minf(float_red, float_green, float_blue)
    chroma = value - min_val
    saturation = (value == 0.0 ? 0.0 : chroma / value)
    hue = 0.0
    if chroma == 0.0
      hue = 0.0
    else
      if value == float_red
        hue = 60.0 * (_add(0.0, (float_green - float_blue) / chroma))
      else
        if value == float_green
          hue = 60.0 * (_add(2.0, (float_blue - float_red) / chroma))
        else
          hue = 60.0 * (_add(4.0, (float_red - float_green) / chroma))
        end
      end
    end
    hue = fmod(_add(hue, 360.0), 360.0)
    return [hue, saturation, value]
  end
  def approximately_equal_hsv(hsv1, hsv2)
    check_hue = absf(hsv1[0] - hsv2[0]) < 0.2
    check_saturation = absf(hsv1[1] - hsv2[1]) < 0.002
    check_value = absf(hsv1[2] - hsv2[2]) < 0.002
    return check_hue && check_saturation && check_value
  end
  $rgb = hsv_to_rgb(180.0, 0.5, 0.5)
  puts(((x = $rgb); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $hsv = rgb_to_hsv(64, 128, 128)
  puts(((x = $hsv); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts((approximately_equal_hsv($hsv, [180.0, 0.5, 0.5])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
