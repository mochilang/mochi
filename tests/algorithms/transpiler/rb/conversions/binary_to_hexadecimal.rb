# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def strip_spaces(s)
    start = 0
    end_ = s.length - 1
    while start < s.length && s[start] == " "
      start = _add(start, 1)
    end
    while end_ >= start && s[end_] == " "
      end_ = end_ - 1
    end
    res = ""
    i = start
    while i <= end_
      res = _add(res, s[i])
      i = _add(i, 1)
    end
    return res
  end
  def repeat_char(ch, count)
    res = ""
    i = 0
    while i < count
      res = _add(res, ch)
      i = _add(i, 1)
    end
    return res
  end
  def slice(s, start, end_)
    res = ""
    i = start
    while i < end_
      res = _add(res, s[i])
      i = _add(i, 1)
    end
    return res
  end
  def bits_to_int(bits)
    value = 0
    i = 0
    while i < bits.length
      value = value * 2
      if bits[i] == "1"
        value = _add(value, 1)
      end
      i = _add(i, 1)
    end
    return value
  end
  def bin_to_hexadecimal(binary_str)
    s = strip_spaces(binary_str)
    if s.length == 0
      panic("Empty string was passed to the function")
    end
    is_negative = false
    if s[0] == "-"
      is_negative = true
      s = s[1...s.length]
    end
    i = 0
    while i < s.length
      c = s[i]
      if c != "0" && c != "1"
        panic("Non-binary value was passed to the function")
      end
      i = _add(i, 1)
    end
    groups = _add(s.length / 4, 1)
    pad_len = groups * 4 - s.length
    s = _add(repeat_char("0", pad_len), s)
    digits = "0123456789abcdef"
    res = "0x"
    j = 0
    while j < s.length
      chunk = s[j..._add(j, 4)]
      val = bits_to_int(chunk)
      res = _add(res, digits[val])
      j = _add(j, 4)
    end
    if is_negative
      return _add("-", res)
    end
    return res
  end
  puts(bin_to_hexadecimal("101011111"))
  puts(bin_to_hexadecimal(" 1010   "))
  puts(bin_to_hexadecimal("-11101"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
