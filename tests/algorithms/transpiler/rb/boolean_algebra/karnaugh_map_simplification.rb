# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def row_string(row)
    s = "["
    i = 0
    while i < row.length
      s = _add(s, _str(row[i]))
      if i < row.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def print_kmap(kmap)
    i = 0
    while i < kmap.length
      puts(row_string(kmap[i]))
      i = _add(i, 1)
    end
  end
  def join_terms(terms)
    if _eq(terms.length, 0)
      return ""
    end
    res = terms[0]
    i = 1
    while i < terms.length
      res = _add(_add(res, " + "), terms[i])
      i = _add(i, 1)
    end
    return res
  end
  def simplify_kmap(board)
    terms = []
    a = 0
    while a < board.length
      row = board[a]
      b = 0
      while b < row.length
        item = row[b]
        if !_eq(item, 0)
          term = _add(((!_eq(a, 0) ? "A" : "A'")), ((!_eq(b, 0) ? "B" : "B'")))
          terms = (terms + [term])
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
    expr = join_terms(terms)
    return expr
  end
  $kmap = [[0, 1], [1, 1]]
  print_kmap($kmap)
  puts("Simplified Expression:")
  puts(simplify_kmap($kmap))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
