# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def compare_string(string1, string2)
    result = ""
    count = 0
    i = 0
    while i < string1.length
      c1 = string1[i..._add(i, 1)]
      c2 = string2[i..._add(i, 1)]
      if c1 != c2
        count = _add(count, 1)
        result = _add(result, "_")
      else
        result = _add(result, c1)
      end
      i = _add(i, 1)
    end
    if count > 1
      return ""
    end
    return result
  end
  def contains_string(arr, value)
    i = 0
    while i < arr.length
      if arr[i] == value
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def unique_strings(arr)
    res = []
    i = 0
    while i < arr.length
      if !contains_string(res, arr[i])
        res = (res + [arr[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def check(binary)
    pi = []
    current = binary
    while true
      check1 = []
      i = 0
      while i < current.length
        check1 = (check1 + ["$"])
        i = _add(i, 1)
      end
      temp = []
      i = 0
      while i < current.length
        j = _add(i, 1)
        while j < current.length
          k = compare_string(current[i], current[j])
          if k == ""
            check1[i] = "*"
            check1[j] = "*"
            temp = (temp + ["X"])
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      i = 0
      while i < current.length
        if check1[i] == "$"
          pi = (pi + [current[i]])
        end
        i = _add(i, 1)
      end
      if temp.length == 0
        return pi
      end
      current = unique_strings(temp)
    end
  end
  def decimal_to_binary(no_of_variable, minterms)
    temp = []
    idx = 0
    while idx < minterms.length
      minterm = minterms[idx]
      string = ""
      i = 0
      while i < no_of_variable
        string = _add((minterm % 2).to_s, string)
        minterm = minterm / 2
        i = _add(i, 1)
      end
      temp = (temp + [string])
      idx = _add(idx, 1)
    end
    return temp
  end
  def is_for_table(string1, string2, count)
    count_n = 0
    i = 0
    while i < string1.length
      c1 = string1[i..._add(i, 1)]
      c2 = string2[i..._add(i, 1)]
      if c1 != c2
        count_n = _add(count_n, 1)
      end
      i = _add(i, 1)
    end
    return count_n == count
  end
  def count_ones(row)
    c = 0
    j = 0
    while j < row.length
      if row[j] == 1
        c = _add(c, 1)
      end
      j = _add(j, 1)
    end
    return c
  end
  def selection(chart, prime_implicants)
    temp = []
    select = []
    i = 0
    while i < chart.length
      select = (select + [0])
      i = _add(i, 1)
    end
    col = 0
    while col < chart[0].length
      count = 0
      row = 0
      while row < chart.length
        if chart[row][col] == 1
          count = _add(count, 1)
        end
        row = _add(row, 1)
      end
      if count == 1
        rem = 0
        row = 0
        while row < chart.length
          if chart[row][col] == 1
            rem = row
          end
          row = _add(row, 1)
        end
        select[rem] = 1
      end
      col = _add(col, 1)
    end
    i = 0
    while i < select.length
      if select[i] == 1
        j = 0
        while j < chart[0].length
          if chart[i][j] == 1
            r = 0
            while r < chart.length
              chart[r][j] = 0
              r = _add(r, 1)
            end
          end
          j = _add(j, 1)
        end
        temp = (temp + [prime_implicants[i]])
      end
      i = _add(i, 1)
    end
    while true
      counts = []
      r = 0
      while r < chart.length
        counts = (counts + [count_ones(chart[r])])
        r = _add(r, 1)
      end
      max_n = counts[0]
      rem = 0
      k = 1
      while k < counts.length
        if counts[k] > max_n
          max_n = counts[k]
          rem = k
        end
        k = _add(k, 1)
      end
      if max_n == 0
        return temp
      end
      temp = (temp + [prime_implicants[rem]])
      j = 0
      while j < chart[0].length
        if chart[rem][j] == 1
          r2 = 0
          while r2 < chart.length
            chart[r2][j] = 0
            r2 = _add(r2, 1)
          end
        end
        j = _add(j, 1)
      end
    end
  end
  def count_char(s, ch)
    cnt = 0
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        cnt = _add(cnt, 1)
      end
      i = _add(i, 1)
    end
    return cnt
  end
  def prime_implicant_chart(prime_implicants, binary)
    chart = []
    i = 0
    while i < prime_implicants.length
      row = []
      j = 0
      while j < binary.length
        row = (row + [0])
        j = _add(j, 1)
      end
      chart = (chart + [row])
      i = _add(i, 1)
    end
    i = 0
    while i < prime_implicants.length
      count = count_char(prime_implicants[i], "_")
      j = 0
      while j < binary.length
        if is_for_table(prime_implicants[i], binary[j], count)
          chart[i][j] = 1
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return chart
  end
  def main()
    no_of_variable = 3
    minterms = [1, 5, 7]
    binary = decimal_to_binary(no_of_variable, minterms)
    prime_implicants = check(binary)
    puts("Prime Implicants are:")
    puts(((x = prime_implicants); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    chart = prime_implicant_chart(prime_implicants, binary)
    essential_prime_implicants = selection(chart, prime_implicants)
    puts("Essential Prime Implicants are:")
    puts(((x = essential_prime_implicants); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
