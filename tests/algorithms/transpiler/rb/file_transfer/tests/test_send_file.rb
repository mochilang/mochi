# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_conn_mock()
    return ConnMock.new(recv_called: 0, send_called: 0, close_called: 0)
  end
  def conn_recv(conn, size)
    conn["recv_called"] = _add(conn.recv_called, 1)
    return 0
  end
  def conn_send(conn, data)
    conn["send_called"] = _add(conn.send_called, 1)
  end
  def conn_close(conn)
    conn["close_called"] = _add(conn.close_called, 1)
  end
  def make_socket_mock(conn)
    return SocketMock.new(bind_called: 0, listen_called: 0, accept_called: 0, shutdown_called: 0, close_called: 0, conn: conn)
  end
  def socket_bind(sock)
    sock["bind_called"] = _add(sock.bind_called, 1)
  end
  def socket_listen(sock)
    sock["listen_called"] = _add(sock.listen_called, 1)
  end
  def socket_accept(sock)
    sock["accept_called"] = _add(sock.accept_called, 1)
    return sock.conn
  end
  def socket_shutdown(sock)
    sock["shutdown_called"] = _add(sock.shutdown_called, 1)
  end
  def socket_close(sock)
    sock["close_called"] = _add(sock.close_called, 1)
  end
  def make_file_mock(values)
    return FileMock.new(read_called: 0, data: values)
  end
  def file_read(f, size)
    if f.read_called < f.data.length
      value = f.data[f.read_called]
      f["read_called"] = _add(f.read_called, 1)
      return value
    end
    f["read_called"] = _add(f.read_called, 1)
    return 0
  end
  def file_open()
    return make_file_mock([1, 0])
  end
  def send_file(sock, f)
    socket_bind(sock)
    socket_listen(sock)
    conn = socket_accept(sock)
    _ = conn_recv(conn, 1024)
    data = file_read(f, 1024)
    while data != 0
      conn_send(conn, data)
      data = file_read(f, 1024)
    end
    conn_close(conn)
    socket_shutdown(sock)
    socket_close(sock)
  end
  def test_send_file_running_as_expected()
    conn = make_conn_mock()
    sock = make_socket_mock(conn)
    f = file_open()
    send_file(sock, f)
    if sock.bind_called == 1 && sock.listen_called == 1 && sock.accept_called == 1 && conn.recv_called == 1 && f.read_called >= 1 && conn.send_called == 1 && conn.close_called == 1 && sock.shutdown_called == 1 && sock.close_called == 1
      return "pass"
    end
    return "fail"
  end
  ConnMock = Struct.new(:recv_called, :send_called, :close_called, keyword_init: true)
  SocketMock = Struct.new(:bind_called, :listen_called, :accept_called, :shutdown_called, :close_called, :conn, keyword_init: true)
  FileMock = Struct.new(:read_called, :data, keyword_init: true)
  puts(test_send_file_running_as_expected())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
