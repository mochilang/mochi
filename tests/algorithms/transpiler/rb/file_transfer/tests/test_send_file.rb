# Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_conn_mock()
    return ConnMock.new(recv_called: 0, send_called: 0, close_called: 0)
  end
  def conn_recv(conn, size)
    conn.recv_called = _add(conn.recv_called, 1)
    return 0
  end
  def conn_send(conn, data)
    conn.send_called = _add(conn.send_called, 1)
  end
  def conn_close(conn)
    conn.close_called = _add(conn.close_called, 1)
  end
  def make_socket_mock(conn)
    return SocketMock.new(bind_called: 0, listen_called: 0, accept_called: 0, shutdown_called: 0, close_called: 0, conn: conn)
  end
  def socket_bind(sock)
    sock.bind_called = _add(sock.bind_called, 1)
  end
  def socket_listen(sock)
    sock.listen_called = _add(sock.listen_called, 1)
  end
  def socket_accept(sock)
    sock.accept_called = _add(sock.accept_called, 1)
    return sock.conn
  end
  def socket_shutdown(sock)
    sock.shutdown_called = _add(sock.shutdown_called, 1)
  end
  def socket_close(sock)
    sock.close_called = _add(sock.close_called, 1)
  end
  def make_file_mock(values)
    return FileMock.new(read_called: 0, data: values)
  end
  def file_read(f, size)
    if f.read_called < _len(f.data)
      value = (__tmp1 = f.data; __tmp1.is_a?(Hash) ? __tmp1[f.read_called] : _idx(__tmp1, f.read_called))
      f.read_called = _add(f.read_called, 1)
      return value
    end
    f.read_called = _add(f.read_called, 1)
    return 0
  end
  def file_open()
    return make_file_mock([1, 0])
  end
  def send_file(sock, f)
    socket_bind(sock)
    socket_listen(sock)
    conn = socket_accept(sock)
    _ = conn_recv(conn, 1024)
    data = file_read(f, 1024)
    while !_eq(data, 0)
      conn_send(conn, data)
      data = file_read(f, 1024)
    end
    conn_close(conn)
    socket_shutdown(sock)
    socket_close(sock)
  end
  def test_send_file_running_as_expected()
    conn = make_conn_mock()
    sock = make_socket_mock(conn)
    f = file_open()
    send_file(sock, f)
    if _eq(sock.bind_called, 1) && _eq(sock.listen_called, 1) && _eq(sock.accept_called, 1) && _eq(conn.recv_called, 1) && f.read_called >= 1 && _eq(conn.send_called, 1) && _eq(conn.close_called, 1) && _eq(sock.shutdown_called, 1) && _eq(sock.close_called, 1)
      return "pass"
    end
    return "fail"
  end
  Object.send(:remove_const, :ConnMock) if Object.const_defined?(:ConnMock)
  ConnMock = Struct.new(:recv_called, :send_called, :close_called, keyword_init: true)
  Object.send(:remove_const, :SocketMock) if Object.const_defined?(:SocketMock)
  SocketMock = Struct.new(:bind_called, :listen_called, :accept_called, :shutdown_called, :close_called, :conn, keyword_init: true)
  Object.send(:remove_const, :FileMock) if Object.const_defined?(:FileMock)
  FileMock = Struct.new(:read_called, :data, keyword_init: true)
  puts(test_send_file_running_as_expected())
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
