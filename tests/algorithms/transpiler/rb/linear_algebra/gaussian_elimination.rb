# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def retroactive_resolution(coefficients, vector)
    rows = _len(coefficients)
    x = []
    i = 0
    while i < rows
      inner = []
      inner = _append(inner, 0.0)
      x = _append(x, inner)
      i = _add(i, 1)
    end
    r = rows - 1
    while r >= 0
      total = 0.0
      c = _add(r, 1)
      while c < rows
        total = _add(total, (__tmp1 = (__tmp2 = coefficients; __tmp2.is_a?(Hash) ? __tmp2[r] : _idx(__tmp2, r)); __tmp1.is_a?(Hash) ? __tmp1[c] : _idx(__tmp1, c)) * (__tmp3 = (__tmp4 = x; __tmp4.is_a?(Hash) ? __tmp4[c] : _idx(__tmp4, c)); __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
        c = _add(c, 1)
      end
      (__tmp5 = x; __tmp5.is_a?(Hash) ? __tmp5[r] : _idx(__tmp5, r))[0] = ((__tmp6 = (__tmp7 = vector; __tmp7.is_a?(Hash) ? __tmp7[r] : _idx(__tmp7, r)); __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)) - total) / (__tmp8 = (__tmp9 = coefficients; __tmp9.is_a?(Hash) ? __tmp9[r] : _idx(__tmp9, r)); __tmp8.is_a?(Hash) ? __tmp8[r] : _idx(__tmp8, r))
      r = r - 1
    end
    return x
  end
  def gaussian_elimination(coefficients, vector)
    rows = _len(coefficients)
    columns = _len((__tmp10 = coefficients; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)))
    if !_eq(rows, columns)
      return []
    end
    augmented = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < columns
        row = _append(row, (__tmp11 = (__tmp12 = coefficients; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j)))
        j = _add(j, 1)
      end
      row = _append(row, (__tmp13 = (__tmp14 = vector; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)))
      augmented = _append(augmented, row)
      i = _add(i, 1)
    end
    row_idx = 0
    while row_idx < rows - 1
      pivot = (__tmp15 = (__tmp16 = augmented; __tmp16.is_a?(Hash) ? __tmp16[row_idx] : _idx(__tmp16, row_idx)); __tmp15.is_a?(Hash) ? __tmp15[row_idx] : _idx(__tmp15, row_idx))
      col = _add(row_idx, 1)
      while col < rows
        factor = (__tmp17 = (__tmp18 = augmented; __tmp18.is_a?(Hash) ? __tmp18[col] : _idx(__tmp18, col)); __tmp17.is_a?(Hash) ? __tmp17[row_idx] : _idx(__tmp17, row_idx)) / pivot
        k = row_idx
        while k < _add(columns, 1)
          (__tmp19 = augmented; __tmp19.is_a?(Hash) ? __tmp19[col] : _idx(__tmp19, col))[k] = (__tmp20 = (__tmp21 = augmented; __tmp21.is_a?(Hash) ? __tmp21[col] : _idx(__tmp21, col)); __tmp20.is_a?(Hash) ? __tmp20[k] : _idx(__tmp20, k)) - factor * (__tmp22 = (__tmp23 = augmented; __tmp23.is_a?(Hash) ? __tmp23[row_idx] : _idx(__tmp23, row_idx)); __tmp22.is_a?(Hash) ? __tmp22[k] : _idx(__tmp22, k))
          k = _add(k, 1)
        end
        col = _add(col, 1)
      end
      row_idx = _add(row_idx, 1)
    end
    coeffs = []
    vec = []
    r = 0
    while r < rows
      row = []
      c = 0
      while c < columns
        row = _append(row, (__tmp24 = (__tmp25 = augmented; __tmp25.is_a?(Hash) ? __tmp25[r] : _idx(__tmp25, r)); __tmp24.is_a?(Hash) ? __tmp24[c] : _idx(__tmp24, c)))
        c = _add(c, 1)
      end
      coeffs = _append(coeffs, row)
      vec = _append(vec, [(__tmp26 = (__tmp27 = augmented; __tmp27.is_a?(Hash) ? __tmp27[r] : _idx(__tmp27, r)); __tmp26.is_a?(Hash) ? __tmp26[columns] : _idx(__tmp26, columns))])
      r = _add(r, 1)
    end
    x = retroactive_resolution(coeffs, vec)
    return x
  end
  puts(((x = gaussian_elimination([[1.0, -4.0, -2.0], [5.0, 2.0, -2.0], [1.0, -1.0, 0.0]], [[-2.0], [-3.0], [4.0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = gaussian_elimination([[1.0, 2.0], [5.0, 2.0]], [[5.0], [5.0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
