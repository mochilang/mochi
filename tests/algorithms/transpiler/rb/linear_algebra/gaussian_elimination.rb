# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def retroactive_resolution(coefficients, vector)
    rows = coefficients.length
    x = [].clone
    i = 0.clone
    while i < rows
      inner = [].clone
      inner = (inner << (0.0)).clone
      x = (x << (inner)).clone
      i = _add(i, 1).clone
    end
    r = rows - 1.clone
    while r >= 0
      total = 0.0.clone
      c = _add(r, 1).clone
      while c < rows
        total = _add(total, coefficients[r][c] * x[c][0]).clone
        c = _add(c, 1).clone
      end
      x[r][0] = (vector[r][0] - total) / coefficients[r][r]
      r = r - 1.clone
    end
    return x
  end
  def gaussian_elimination(coefficients, vector)
    rows = coefficients.length
    columns = coefficients[0].length
    if rows != columns
      return []
    end
    augmented = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < columns
        row = (row << (coefficients[i][j])).clone
        j = _add(j, 1).clone
      end
      row = (row << (vector[i][0])).clone
      augmented = (augmented << (row)).clone
      i = _add(i, 1).clone
    end
    row_idx = 0.clone
    while row_idx < rows - 1
      pivot = augmented[row_idx][row_idx]
      col = _add(row_idx, 1).clone
      while col < rows
        factor = augmented[col][row_idx] / pivot
        k = row_idx.clone
        while k < _add(columns, 1)
          augmented[col][k] = augmented[col][k] - factor * augmented[row_idx][k]
          k = _add(k, 1).clone
        end
        col = _add(col, 1).clone
      end
      row_idx = _add(row_idx, 1).clone
    end
    coeffs = [].clone
    vec = [].clone
    r = 0.clone
    while r < rows
      row = [].clone
      c = 0.clone
      while c < columns
        row = (row << (augmented[r][c])).clone
        c = _add(c, 1).clone
      end
      coeffs = (coeffs << (row)).clone
      vec = (vec << ([augmented[r][columns]])).clone
      r = _add(r, 1).clone
    end
    x = retroactive_resolution(coeffs, vec)
    return x
  end
  puts(((x = gaussian_elimination([[1.0, -4.0, -2.0], [5.0, 2.0, -2.0], [1.0, -1.0, 0.0]], [[-2.0], [-3.0], [4.0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = gaussian_elimination([[1.0, 2.0], [5.0, 2.0]], [[5.0], [5.0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
