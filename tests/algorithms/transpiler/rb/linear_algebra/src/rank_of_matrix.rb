# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rank_of_matrix(matrix)
    rows = matrix.length
    if rows == 0
      return 0
    end
    columns = (matrix[0].length > 0 ? matrix[0].length : 0)
    rank = (rows < columns ? rows : columns).clone
    row = 0.clone
    while row < rank
      if matrix[row][row] != 0.0
        col = _add(row, 1).clone
        while col < rows
          mult = matrix[col][row] / matrix[row][row]
          i = row.clone
          while i < columns
            matrix[col][i] = matrix[col][i] - mult * matrix[row][i]
            i = _add(i, 1).clone
          end
          col = _add(col, 1).clone
        end
      else
        reduce = true.clone
        i = _add(row, 1).clone
        while i < rows
          if matrix[i][row] != 0.0
            temp = matrix[row]
            matrix[row] = matrix[i]
            matrix[i] = temp
            reduce = false.clone
            break
          end
          i = _add(i, 1).clone
        end
        if reduce
          rank = rank - 1.clone
          j = 0.clone
          while j < rows
            matrix[j][row] = matrix[j][rank]
            j = _add(j, 1).clone
          end
        end
        row = row - 1.clone
      end
      row = _add(row, 1).clone
    end
    return rank
  end
  # test matrix1
  $matrix1 = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix1) == 2
  # test matrix2
  $matrix2 = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix2) == 2
  # test matrix3
  $matrix3 = [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix3) == 2
  # test matrix4
  $matrix4 = [[2.0, 3.0, -1.0, -1.0], [1.0, -1.0, -2.0, 4.0], [3.0, 1.0, 3.0, -2.0], [6.0, 3.0, 0.0, -7.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix4) == 4
  # test matrix5
  $matrix5 = [[2.0, 1.0, -3.0, -6.0], [3.0, -3.0, 1.0, 2.0], [1.0, 1.0, 1.0, 2.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix5) == 3
  # test matrix6
  $matrix6 = [[2.0, -1.0, 0.0], [1.0, 3.0, 4.0], [4.0, 1.0, -3.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix6) == 3
  # test matrix7
  $matrix7 = [[3.0, 2.0, 1.0], [-6.0, -4.0, -2.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix7) == 1
  # test matrix_empty_cols
  $matrix8 = [[], []]
  raise 'assertion failed' unless rank_of_matrix($matrix8) == 0
  # test matrix_single
  $matrix9 = [[1.0]]
  raise 'assertion failed' unless rank_of_matrix($matrix9) == 1
  # test matrix_empty
  $matrix10 = [[]]
  raise 'assertion failed' unless rank_of_matrix($matrix10) == 0
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
