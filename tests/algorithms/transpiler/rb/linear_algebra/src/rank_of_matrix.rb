# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rank_of_matrix(matrix)
    rows = _len(matrix)
    if _eq(rows, 0)
      return 0
    end
    columns = (_len((__tmp1 = matrix; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))) > 0 ? _len((__tmp2 = matrix; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))) : 0)
    rank = (rows < columns ? rows : columns)
    row = 0
    while row < rank
      if !_eq((__tmp3 = (__tmp4 = matrix; __tmp4.is_a?(Hash) ? __tmp4[row] : _idx(__tmp4, row)); __tmp3.is_a?(Hash) ? __tmp3[row] : _idx(__tmp3, row)), 0.0)
        col = _add(row, 1)
        while col < rows
          mult = (__tmp5 = (__tmp6 = matrix; __tmp6.is_a?(Hash) ? __tmp6[col] : _idx(__tmp6, col)); __tmp5.is_a?(Hash) ? __tmp5[row] : _idx(__tmp5, row)) / (__tmp7 = (__tmp8 = matrix; __tmp8.is_a?(Hash) ? __tmp8[row] : _idx(__tmp8, row)); __tmp7.is_a?(Hash) ? __tmp7[row] : _idx(__tmp7, row))
          i = row
          while i < columns
            (__tmp9 = matrix; __tmp9.is_a?(Hash) ? __tmp9[col] : _idx(__tmp9, col))[i] = (__tmp10 = (__tmp11 = matrix; __tmp11.is_a?(Hash) ? __tmp11[col] : _idx(__tmp11, col)); __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) - mult * (__tmp12 = (__tmp13 = matrix; __tmp13.is_a?(Hash) ? __tmp13[row] : _idx(__tmp13, row)); __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
            i = _add(i, 1)
          end
          col = _add(col, 1)
        end
      else
        reduce = true
        i = _add(row, 1)
        while i < rows
          if !_eq((__tmp14 = (__tmp15 = matrix; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)); __tmp14.is_a?(Hash) ? __tmp14[row] : _idx(__tmp14, row)), 0.0)
            temp = (__tmp16 = matrix; __tmp16.is_a?(Hash) ? __tmp16[row] : _idx(__tmp16, row))
            matrix[row] = (__tmp17 = matrix; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))
            matrix[i] = temp
            reduce = false
            break
          end
          i = _add(i, 1)
        end
        if reduce
          rank = rank - 1
          j = 0
          while j < rows
            (__tmp18 = matrix; __tmp18.is_a?(Hash) ? __tmp18[j] : _idx(__tmp18, j))[row] = (__tmp19 = (__tmp20 = matrix; __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j)); __tmp19.is_a?(Hash) ? __tmp19[rank] : _idx(__tmp19, rank))
            j = _add(j, 1)
          end
        end
        row = row - 1
      end
      row = _add(row, 1)
    end
    return rank
  end
  # test matrix1
  $matrix1 = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix1), 2)
  # test matrix2
  $matrix2 = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix2), 2)
  # test matrix3
  $matrix3 = [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix3), 2)
  # test matrix4
  $matrix4 = [[2.0, 3.0, -1.0, -1.0], [1.0, -1.0, -2.0, 4.0], [3.0, 1.0, 3.0, -2.0], [6.0, 3.0, 0.0, -7.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix4), 4)
  # test matrix5
  $matrix5 = [[2.0, 1.0, -3.0, -6.0], [3.0, -3.0, 1.0, 2.0], [1.0, 1.0, 1.0, 2.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix5), 3)
  # test matrix6
  $matrix6 = [[2.0, -1.0, 0.0], [1.0, 3.0, 4.0], [4.0, 1.0, -3.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix6), 3)
  # test matrix7
  $matrix7 = [[3.0, 2.0, 1.0], [-6.0, -4.0, -2.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix7), 1)
  # test matrix_empty_cols
  $matrix8 = [[], []]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix8), 0)
  # test matrix_single
  $matrix9 = [[1.0]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix9), 1)
  # test matrix_empty
  $matrix10 = [[]]
  raise 'assertion failed' unless _eq(rank_of_matrix($matrix10), 0)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
