# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def identity(n)
    mat = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = _append(row, 1.0)
        else
          row = _append(row, 0.0)
        end
        j = _add(j, 1)
      end
      mat = _append(mat, row)
      i = _add(i, 1)
    end
    return mat
  end
  def transpose(mat)
    rows = _len(mat)
    cols = _len((__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    res = []
    j = 0
    while j < cols
      row = []
      i = 0
      while i < rows
        row = _append(row, (__tmp2 = (__tmp3 = mat; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)); __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
        i = _add(i, 1)
      end
      res = _append(res, row)
      j = _add(j, 1)
    end
    return res
  end
  def matmul(a, b)
    rows = _len(a)
    cols = _len((__tmp4 = b; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)))
    inner = _len((__tmp5 = a; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)))
    res = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        sum = 0.0
        k = 0
        while k < inner
          sum = _add(sum, (__tmp6 = (__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)); __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k)) * (__tmp8 = (__tmp9 = b; __tmp9.is_a?(Hash) ? __tmp9[k] : _idx(__tmp9, k)); __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
          k = _add(k, 1)
        end
        row = _append(row, sum)
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def mat_sub(a, b)
    rows = _len(a)
    cols = _len((__tmp10 = a; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)))
    res = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        row = _append(row, (__tmp11 = (__tmp12 = a; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j)) - (__tmp13 = (__tmp14 = b; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)))
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def inverse(mat)
    n = _len(mat)
    id = identity(n)
    aug = []
    i = 0
    while i < n
      row = _add((__tmp15 = mat; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)), (__tmp16 = id; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)))
      aug = _append(aug, row)
      i = _add(i, 1)
    end
    col = 0
    while col < n
      pivot_row = (__tmp17 = aug; __tmp17.is_a?(Hash) ? __tmp17[col] : _idx(__tmp17, col))
      pivot = (__tmp18 = pivot_row; __tmp18.is_a?(Hash) ? __tmp18[col] : _idx(__tmp18, col))
      if _eq(pivot, 0.0)
        panic("matrix is singular")
      end
      j = 0
      while j < 2 * n
        pivot_row[j] = (__tmp19 = pivot_row; __tmp19.is_a?(Hash) ? __tmp19[j] : _idx(__tmp19, j)) / pivot
        j = _add(j, 1)
      end
      aug[col] = pivot_row
      r = 0
      while r < n
        if !_eq(r, col)
          row_r = (__tmp20 = aug; __tmp20.is_a?(Hash) ? __tmp20[r] : _idx(__tmp20, r))
          factor = (__tmp21 = row_r; __tmp21.is_a?(Hash) ? __tmp21[col] : _idx(__tmp21, col))
          j = 0
          while j < 2 * n
            row_r[j] = (__tmp22 = row_r; __tmp22.is_a?(Hash) ? __tmp22[j] : _idx(__tmp22, j)) - factor * (__tmp23 = pivot_row; __tmp23.is_a?(Hash) ? __tmp23[j] : _idx(__tmp23, j))
            j = _add(j, 1)
          end
          aug[r] = row_r
        end
        r = _add(r, 1)
      end
      col = _add(col, 1)
    end
    inv = []
    r = 0
    while r < n
      row = []
      c = n
      while c < 2 * n
        row = _append(row, (__tmp24 = (__tmp25 = aug; __tmp25.is_a?(Hash) ? __tmp25[r] : _idx(__tmp25, r)); __tmp24.is_a?(Hash) ? __tmp24[c] : _idx(__tmp24, c)))
        c = _add(c, 1)
      end
      inv = _append(inv, row)
      r = _add(r, 1)
    end
    return inv
  end
  def schur_complement(mat_a, mat_b, mat_c, pseudo_inv)
    a_rows = _len(mat_a)
    a_cols = _len((__tmp26 = mat_a; __tmp26.is_a?(Hash) ? __tmp26[0] : _idx(__tmp26, 0)))
    if !_eq(a_rows, a_cols)
      panic("Matrix A must be square")
    end
    if !_eq(a_rows, _len(mat_b))
      panic("Expected the same number of rows for A and B")
    end
    if !_eq(_len((__tmp27 = mat_b; __tmp27.is_a?(Hash) ? __tmp27[0] : _idx(__tmp27, 0))), _len((__tmp28 = mat_c; __tmp28.is_a?(Hash) ? __tmp28[0] : _idx(__tmp28, 0))))
      panic("Expected the same number of columns for B and C")
    end
    a_inv = []
    if pseudo_inv.ok
      a_inv = pseudo_inv.value
    else
      a_inv = inverse(mat_a)
    end
    bt = transpose(mat_b)
    a_inv_b = matmul(a_inv, mat_b)
    bt_a_inv_b = matmul(bt, a_inv_b)
    return mat_sub(mat_c, bt_a_inv_b)
  end
  def print_matrix(mat)
    i = 0
    while i < _len(mat)
      line = ""
      j = 0
      row = (__tmp29 = mat; __tmp29.is_a?(Hash) ? __tmp29[i] : _idx(__tmp29, i))
      while j < _len(row)
        line = _add(line, _str((__tmp30 = row; __tmp30.is_a?(Hash) ? __tmp30[j] : _idx(__tmp30, j))))
        if _add(j, 1) < _len(row)
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  def main()
    a = [[1.0, 2.0], [2.0, 1.0]]
    b = [[0.0, 3.0], [3.0, 0.0]]
    c = [[2.0, 1.0], [6.0, 3.0]]
    none = OptionMatrix.new(value: [], ok: false)
    s = schur_complement(a, b, c, none)
    print_matrix(s)
  end
  Object.send(:remove_const, :OptionMatrix) if Object.const_defined?(:OptionMatrix)
  OptionMatrix = Struct.new(:value, :ok, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
