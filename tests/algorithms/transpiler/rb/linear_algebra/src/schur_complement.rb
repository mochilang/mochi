# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def identity(n)
    mat = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1.0)).clone
        else
          row = (row << (0.0)).clone
        end
        j = _add(j, 1).clone
      end
      mat = (mat << (row)).clone
      i = _add(i, 1).clone
    end
    return mat
  end
  def transpose(mat)
    rows = mat.length
    cols = mat[0].length
    res = [].clone
    j = 0.clone
    while j < cols
      row = [].clone
      i = 0.clone
      while i < rows
        row = (row << (mat[i][j])).clone
        i = _add(i, 1).clone
      end
      res = (res << (row)).clone
      j = _add(j, 1).clone
    end
    return res
  end
  def matmul(a, b)
    rows = a.length
    cols = b[0].length
    inner = a[0].length
    res = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        sum = 0.0.clone
        k = 0.clone
        while k < inner
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def mat_sub(a, b)
    rows = a.length
    cols = a[0].length
    res = [].clone
    i = 0.clone
    while i < rows
      row = [].clone
      j = 0.clone
      while j < cols
        row = (row << (a[i][j] - b[i][j])).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def inverse(mat)
    n = mat.length
    id = identity(n)
    aug = [].clone
    i = 0.clone
    while i < n
      row = _add(mat[i], id[i])
      aug = (aug << (row)).clone
      i = _add(i, 1).clone
    end
    col = 0.clone
    while col < n
      pivot_row = aug[col].clone
      pivot = pivot_row[col]
      if pivot == 0.0
        panic("matrix is singular")
      end
      j = 0.clone
      while j < 2 * n
        pivot_row[j] = pivot_row[j] / pivot
        j = _add(j, 1).clone
      end
      aug[col] = pivot_row
      r = 0.clone
      while r < n
        if r != col
          row_r = aug[r].clone
          factor = row_r[col]
          j = 0.clone
          while j < 2 * n
            row_r[j] = row_r[j] - factor * pivot_row[j]
            j = _add(j, 1).clone
          end
          aug[r] = row_r
        end
        r = _add(r, 1).clone
      end
      col = _add(col, 1).clone
    end
    inv = [].clone
    r = 0.clone
    while r < n
      row = [].clone
      c = n.clone
      while c < 2 * n
        row = (row << (aug[r][c])).clone
        c = _add(c, 1).clone
      end
      inv = (inv << (row)).clone
      r = _add(r, 1).clone
    end
    return inv
  end
  def schur_complement(mat_a, mat_b, mat_c, pseudo_inv)
    a_rows = mat_a.length
    a_cols = mat_a[0].length
    if a_rows != a_cols
      panic("Matrix A must be square")
    end
    if a_rows != mat_b.length
      panic("Expected the same number of rows for A and B")
    end
    if mat_b[0].length != mat_c[0].length
      panic("Expected the same number of columns for B and C")
    end
    a_inv = [].clone
    if pseudo_inv.ok
      a_inv = pseudo_inv.value.clone
    else
      a_inv = inverse(mat_a).clone
    end
    bt = transpose(mat_b)
    a_inv_b = matmul(a_inv, mat_b)
    bt_a_inv_b = matmul(bt, a_inv_b)
    return mat_sub(mat_c, bt_a_inv_b)
  end
  def print_matrix(mat)
    i = 0.clone
    while i < mat.length
      line = "".clone
      j = 0.clone
      row = mat[i]
      while j < row.length
        line = _add(line, _str(row[j])).clone
        if _add(j, 1) < row.length
          line = _add(line, " ").clone
        end
        j = _add(j, 1).clone
      end
      puts(line)
      i = _add(i, 1).clone
    end
  end
  def main()
    a = [[1.0, 2.0], [2.0, 1.0]]
    b = [[0.0, 3.0], [3.0, 0.0]]
    c = [[2.0, 1.0], [6.0, 3.0]]
    none = OptionMatrix.new(value: [], ok: false)
    s = schur_complement(a, b, c, none)
    print_matrix(s)
  end
  OptionMatrix = Struct.new(:value, :ok, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
