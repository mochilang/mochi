# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def complex_conj(z)
    return Complex.new(re: z.re, im: -z.im)
  end
  def complex_eq(a, b)
    return a.re == b.re && a.im == b.im
  end
  def complex_add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def complex_mul(a, b)
    real = a.re * b.re - a.im * b.im
    imag = _add(a.re * b.im, a.im * b.re)
    return Complex.new(re: real, im: imag)
  end
  def conj_vector(v)
    res = [].clone
    i = 0.clone
    while i < v.length
      res = (res << (complex_conj(v[i]))).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def vec_mat_mul(v, m)
    result = [].clone
    col = 0.clone
    while col < m[0].length
      sum = Complex.new(re: 0.0, im: 0.0).clone
      row = 0.clone
      while row < v.length
        sum = complex_add(sum, complex_mul(v[row], m[row][col])).clone
        row = _add(row, 1).clone
      end
      result = (result << (sum)).clone
      col = _add(col, 1).clone
    end
    return result
  end
  def dot(a, b)
    sum = Complex.new(re: 0.0, im: 0.0).clone
    i = 0.clone
    while i < a.length
      sum = complex_add(sum, complex_mul(a[i], b[i])).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def is_hermitian(m)
    i = 0.clone
    while i < m.length
      j = 0.clone
      while j < m.length
        if !complex_eq(m[i][j], complex_conj(m[j][i]))
          return false
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def rayleigh_quotient(a, v)
    v_star = conj_vector(v)
    v_star_dot = vec_mat_mul(v_star, a)
    num = dot(v_star_dot, v)
    den = dot(v_star, v)
    return num.re / den.re
  end
  Complex = Struct.new(:re, :im, keyword_init: true)
  $a = [[Complex.new(re: 2.0, im: 0.0), Complex.new(re: 2.0, im: 1.0), Complex.new(re: 4.0, im: 0.0)], [Complex.new(re: 2.0, im: -1.0), Complex.new(re: 3.0, im: 0.0), Complex.new(re: 0.0, im: 1.0)], [Complex.new(re: 4.0, im: 0.0), Complex.new(re: 0.0, im: -1.0), Complex.new(re: 1.0, im: 0.0)]]
  $v = [Complex.new(re: 1.0, im: 0.0), Complex.new(re: 2.0, im: 0.0), Complex.new(re: 3.0, im: 0.0)]
  if is_hermitian($a)
    $r1 = rayleigh_quotient($a, $v)
    puts($r1)
    puts("\n")
  end
  $b = [[Complex.new(re: 1.0, im: 0.0), Complex.new(re: 2.0, im: 0.0), Complex.new(re: 4.0, im: 0.0)], [Complex.new(re: 2.0, im: 0.0), Complex.new(re: 3.0, im: 0.0), Complex.new(re: -1.0, im: 0.0)], [Complex.new(re: 4.0, im: 0.0), Complex.new(re: -1.0, im: 0.0), Complex.new(re: 1.0, im: 0.0)]]
  if is_hermitian($b)
    $r2 = rayleigh_quotient($b, $v)
    puts($r2)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
