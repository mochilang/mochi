# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def complex_conj(z)
    return Complex.new(re: z.re, im: -z.im)
  end
  def complex_eq(a, b)
    return _eq(a.re, b.re) && _eq(a.im, b.im)
  end
  def complex_add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def complex_mul(a, b)
    real = a.re * b.re - a.im * b.im
    imag = _add(a.re * b.im, a.im * b.re)
    return Complex.new(re: real, im: imag)
  end
  def conj_vector(v)
    res = []
    i = 0
    while i < _len(v)
      res = _append(res, complex_conj((__tmp1 = v; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))))
      i = _add(i, 1)
    end
    return res
  end
  def vec_mat_mul(v, m)
    result = []
    col = 0
    while col < _len((__tmp2 = m; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
      sum = Complex.new(re: 0.0, im: 0.0)
      row = 0
      while row < _len(v)
        sum = complex_add(sum, complex_mul((__tmp3 = v; __tmp3.is_a?(Hash) ? __tmp3[row] : _idx(__tmp3, row)), (__tmp4 = (__tmp5 = m; __tmp5.is_a?(Hash) ? __tmp5[row] : _idx(__tmp5, row)); __tmp4.is_a?(Hash) ? __tmp4[col] : _idx(__tmp4, col))))
        row = _add(row, 1)
      end
      result = _append(result, sum)
      col = _add(col, 1)
    end
    return result
  end
  def dot(a, b)
    sum = Complex.new(re: 0.0, im: 0.0)
    i = 0
    while i < _len(a)
      sum = complex_add(sum, complex_mul((__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)), (__tmp7 = b; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))))
      i = _add(i, 1)
    end
    return sum
  end
  def is_hermitian(m)
    i = 0
    while i < _len(m)
      j = 0
      while j < _len(m)
        if !complex_eq((__tmp8 = (__tmp9 = m; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)), complex_conj((__tmp10 = (__tmp11 = m; __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j)); __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))))
          return false
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return true
  end
  def rayleigh_quotient(a, v)
    v_star = conj_vector(v)
    v_star_dot = vec_mat_mul(v_star, a)
    num = dot(v_star_dot, v)
    den = dot(v_star, v)
    return num.re / den.re
  end
  Object.send(:remove_const, :Complex) if Object.const_defined?(:Complex)
  Complex = Struct.new(:re, :im, keyword_init: true)
  $a = [[Complex.new(re: 2.0, im: 0.0), Complex.new(re: 2.0, im: 1.0), Complex.new(re: 4.0, im: 0.0)], [Complex.new(re: 2.0, im: -1.0), Complex.new(re: 3.0, im: 0.0), Complex.new(re: 0.0, im: 1.0)], [Complex.new(re: 4.0, im: 0.0), Complex.new(re: 0.0, im: -1.0), Complex.new(re: 1.0, im: 0.0)]]
  $v = [Complex.new(re: 1.0, im: 0.0), Complex.new(re: 2.0, im: 0.0), Complex.new(re: 3.0, im: 0.0)]
  if is_hermitian($a)
    $r1 = rayleigh_quotient($a, $v)
    puts($r1)
    puts("\n")
  end
  $b = [[Complex.new(re: 1.0, im: 0.0), Complex.new(re: 2.0, im: 0.0), Complex.new(re: 4.0, im: 0.0)], [Complex.new(re: 2.0, im: 0.0), Complex.new(re: 3.0, im: 0.0), Complex.new(re: -1.0, im: 0.0)], [Complex.new(re: 4.0, im: 0.0), Complex.new(re: -1.0, im: 0.0), Complex.new(re: 1.0, im: 0.0)]]
  if is_hermitian($b)
    $r2 = rayleigh_quotient($b, $v)
    puts($r2)
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
