# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def modf(x, m)
    return x - (x / m).floor() * m
  end
  def sin_taylor(angle)
    x = modf(angle, 2.0 * $PI)
    if x > $PI
      x = x - 2.0 * $PI
    end
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(angle)
    x = modf(angle, 2.0 * $PI)
    if x > $PI
      x = x - 2.0 * $PI
    end
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def matrix_to_string(m)
    s = "["
    i = 0
    while i < _len(m)
      row = (__tmp1 = m; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      s = _add(s, "[")
      j = 0
      while j < _len(row)
        s = _add(s, _str((__tmp2 = row; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))))
        if j < _len(row) - 1
          s = _add(s, ", ")
        end
        j = _add(j, 1)
      end
      s = _add(s, "]")
      if i < _len(m) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def scaling(f)
    return [[f, 0.0], [0.0, f]]
  end
  def rotation(angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    return [[c, -s], [s, c]]
  end
  def projection(angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    cs = c * s
    return [[c * c, cs], [cs, s * s]]
  end
  def reflection(angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    cs = c * s
    return [[2.0 * c - 1.0, 2.0 * cs], [2.0 * cs, 2.0 * s - 1.0]]
  end
  $PI = 3.141592653589793
  puts(_add("    scaling(5) = ", matrix_to_string(scaling(5.0))))
  puts(_add("  rotation(45) = ", matrix_to_string(rotation(45.0))))
  puts(_add("projection(45) = ", matrix_to_string(projection(45.0))))
  puts(_add("reflection(45) = ", matrix_to_string(reflection(45.0))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
