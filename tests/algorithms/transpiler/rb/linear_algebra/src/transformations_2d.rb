# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def modf(x, m)
    return x - x / m.floor() * m
  end
  def sin_taylor(angle)
    x = modf(angle, 2.0 * $PI).clone
    if x > $PI
      x = x - 2.0 * $PI.clone
    end
    term = x.clone
    sum = x.clone
    i = 1.clone
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def cos_taylor(angle)
    x = modf(angle, 2.0 * $PI).clone
    if x > $PI
      x = x - 2.0 * $PI.clone
    end
    term = 1.0.clone
    sum = 1.0.clone
    i = 1.clone
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def matrix_to_string(m)
    s = "[".clone
    i = 0.clone
    while i < m.length
      row = m[i].clone
      s = _add(s, "[").clone
      j = 0.clone
      while j < row.length
        s = _add(s, _str(row[j])).clone
        if j < row.length - 1
          s = _add(s, ", ").clone
        end
        j = _add(j, 1).clone
      end
      s = _add(s, "]").clone
      if i < m.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def scaling(f)
    return [[f, 0.0], [0.0, f]]
  end
  def rotation(angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    return [[c, -s], [s, c]]
  end
  def projection(angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    cs = c * s
    return [[c * c, cs], [cs, s * s]]
  end
  def reflection(angle)
    c = cos_taylor(angle)
    s = sin_taylor(angle)
    cs = c * s
    return [[2.0 * c - 1.0, 2.0 * cs], [2.0 * cs, 2.0 * s - 1.0]]
  end
  $PI = 3.141592653589793
  puts(_add("    scaling(5) = ", matrix_to_string(scaling(5.0))))
  puts(_add("  rotation(45) = ", matrix_to_string(rotation(45.0))))
  puts(_add("projection(45) = ", matrix_to_string(projection(45.0))))
  puts(_add("reflection(45) = ", matrix_to_string(reflection(45.0))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
