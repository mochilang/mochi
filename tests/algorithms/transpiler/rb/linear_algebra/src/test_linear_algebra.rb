# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def int_to_string(n)
    if n == 0
      return "0"
    end
    num = n.clone
    neg = false.clone
    if num < 0
      neg = true.clone
      num = -num.clone
    end
    res = "".clone
    while num > 0
      digit = num % 10
      ch = "0123456789"[digit..._add(digit, 1)]
      res = _add(ch, res).clone
      num = num / 10.clone
    end
    if neg
      res = _add("-", res).clone
    end
    return res
  end
  def float_to_string(x, dec)
    neg = false.clone
    num = x.clone
    if num < 0.0
      neg = true.clone
      num = -num.clone
    end
    int_part = (num).to_i
    res = int_to_string(int_part).clone
    if dec > 0
      res = _add(res, ".").clone
      frac = num - ((int_part).to_f).clone
      i = 0.clone
      while i < dec
        frac = frac * 10.0.clone
        digit = (frac).to_i
        res = _add(res, "0123456789"[digit..._add(digit, 1)]).clone
        frac = frac - ((digit).to_f).clone
        i = _add(i, 1).clone
      end
    end
    if neg
      res = _add("-", res).clone
    end
    return res
  end
  def vector_component(v, i)
    return v[i]
  end
  def vector_str_int(v)
    s = "(".clone
    i = 0.clone
    while i < v.length
      s = _add(s, int_to_string(v[i])).clone
      if _add(i, 1) < v.length
        s = _add(s, ",").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, ")").clone
    return s
  end
  def vector_str_float(v, dec)
    s = "(".clone
    i = 0.clone
    while i < v.length
      s = _add(s, float_to_string(v[i], dec)).clone
      if _add(i, 1) < v.length
        s = _add(s, ",").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, ")").clone
    return s
  end
  def vector_add(a, b)
    res = [].clone
    i = 0.clone
    while i < a.length
      res = (res << (_add(a[i], b[i]))).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def vector_sub(a, b)
    res = [].clone
    i = 0.clone
    while i < a.length
      res = (res << (a[i] - b[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def vector_scalar_mul(v, s)
    res = [].clone
    i = 0.clone
    while i < v.length
      res = (res << (((v[i]).to_f) * s)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def vector_dot(a, b)
    sum = 0.clone
    i = 0.clone
    while i < a.length
      sum = _add(sum, a[i] * b[i]).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def sqrt_newton(x)
    if x == 0.0
      return 0.0
    end
    low = 0.0.clone
    high = x.clone
    if x < 1.0
      high = 1.0.clone
    end
    mid = 0.0.clone
    i = 0.clone
    while i < 40
      mid = (_add(low, high)) / 2.0.clone
      if mid * mid > x
        high = mid.clone
      else
        low = mid.clone
      end
      i = _add(i, 1).clone
    end
    return mid
  end
  def euclidean_length(v)
    sum = 0.0.clone
    i = 0.clone
    while i < v.length
      val = (v[i]).to_f
      sum = _add(sum, val * val).clone
      i = _add(i, 1).clone
    end
    return sqrt_newton(sum)
  end
  def zero_vector(n)
    v = [].clone
    i = 0.clone
    while i < n
      v = (v << (0)).clone
      i = _add(i, 1).clone
    end
    return v
  end
  def unit_basis_vector(n, idx)
    v = zero_vector(n).clone
    v[idx] = 1
    return v
  end
  def axpy(a, x, y)
    res = [].clone
    i = 0.clone
    while i < x.length
      res = (res << (_add(a * x[i], y[i]))).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def copy_vector(x)
    res = [].clone
    i = 0.clone
    while i < x.length
      res = (res << (x[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def change_component(v, idx, val)
    v[idx] = val
  end
  def matrix_str(m)
    s = "".clone
    i = 0.clone
    while i < m.length
      s = _add(s, "|").clone
      j = 0.clone
      while j < m[0].length
        s = _add(s, int_to_string(m[i][j])).clone
        if _add(j, 1) < m[0].length
          s = _add(s, ",").clone
        end
        j = _add(j, 1).clone
      end
      s = _add(s, "|\n").clone
      i = _add(i, 1).clone
    end
    return s
  end
  def submatrix(m, row, col)
    res = [].clone
    i = 0.clone
    while i < m.length
      if i != row
        r = [].clone
        j = 0.clone
        while j < m[0].length
          if j != col
            r = (r << (m[i][j])).clone
          end
          j = _add(j, 1).clone
        end
        res = (res << (r)).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def determinant(m)
    n = m.length
    if n == 1
      return m[0][0]
    end
    if n == 2
      return m[0][0] * m[1][1] - m[0][1] * m[1][0]
    end
    det = 0.clone
    c = 0.clone
    while c < n
      sub = submatrix(m, 0, c)
      sign = 1.clone
      if c % 2 == 1
        sign = -1.clone
      end
      det = _add(det, sign * m[0][c] * determinant(sub)).clone
      c = _add(c, 1).clone
    end
    return det
  end
  def matrix_minor(m, row, col)
    return determinant(submatrix(m, row, col))
  end
  def matrix_cofactor(m, row, col)
    sign = 1.clone
    if (_add(row, col)) % 2 == 1
      sign = -1.clone
    end
    return sign * matrix_minor(m, row, col)
  end
  def matrix_mul_vector(m, v)
    res = [].clone
    i = 0.clone
    while i < m.length
      sum = 0.clone
      j = 0.clone
      while j < m[0].length
        sum = _add(sum, m[i][j] * v[j]).clone
        j = _add(j, 1).clone
      end
      res = (res << (sum)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def matrix_mul_scalar(m, s)
    res = [].clone
    i = 0.clone
    while i < m.length
      row = [].clone
      j = 0.clone
      while j < m[0].length
        row = (row << (m[i][j] * s)).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def matrix_change_component(m, i, j, val)
    m[i][j] = val
  end
  def matrix_component(m, i, j)
    return m[i][j]
  end
  def matrix_add(a, b)
    res = [].clone
    i = 0.clone
    while i < a.length
      row = [].clone
      j = 0.clone
      while j < a[0].length
        row = (row << (_add(a[i][j], b[i][j]))).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def matrix_sub(a, b)
    res = [].clone
    i = 0.clone
    while i < a.length
      row = [].clone
      j = 0.clone
      while j < a[0].length
        row = (row << (a[i][j] - b[i][j])).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def square_zero_matrix(n)
    m = [].clone
    i = 0.clone
    while i < n
      m = (m << (zero_vector(n))).clone
      i = _add(i, 1).clone
    end
    return m
  end
  def assert_int(name, actual, expected)
    if actual == expected
      puts(_add(name, " ok"))
    else
      puts(_add(_add(_add(_add(name, " fail "), int_to_string(actual)), " != "), int_to_string(expected)))
    end
  end
  def assert_str(name, actual, expected)
    if actual == expected
      puts(_add(name, " ok"))
    else
      puts(_add(name, " fail"))
      puts(actual)
      puts(expected)
    end
  end
  def assert_float(name, actual, expected, eps)
    diff = actual - expected.clone
    if diff < 0.0
      diff = -diff.clone
    end
    if diff <= eps
      puts(_add(name, " ok"))
    else
      puts(_add(name, " fail"))
    end
  end
  $vx = [1, 2, 3]
  assert_int("component0", vector_component($vx, 0), 1)
  assert_int("component2", vector_component($vx, 2), 3)
  $vs = [0, 0, 0, 0, 0, 1]
  assert_str("str_vector", vector_str_int($vs), "(0,0,0,0,0,1)")
  $vsize = [1, 2, 3, 4]
  assert_int("size", $vsize.length, 4)
  $va = [1, 2, 3]
  $vb = [1, 1, 1]
  $vsum = vector_add($va, $vb)
  assert_int("add0", vector_component($vsum, 0), 2)
  assert_int("add1", vector_component($vsum, 1), 3)
  assert_int("add2", vector_component($vsum, 2), 4)
  $vsub = vector_sub($va, $vb)
  assert_int("sub0", vector_component($vsub, 0), 0)
  assert_int("sub1", vector_component($vsub, 1), 1)
  assert_int("sub2", vector_component($vsub, 2), 2)
  $vmul = vector_scalar_mul($va, 3.0)
  assert_str("scalar_mul", vector_str_float($vmul, 1), "(3.0,6.0,9.0)")
  assert_int("dot_product", vector_dot([2, -1, 4], [1, -2, -1]), 0)
  $zvec = zero_vector(10)
  $zstr = vector_str_int($zvec)
  $zcount = 0.clone
  $zi = 0.clone
  while $zi < $zstr.length
    if $zstr[$zi..._add($zi, 1)] == "0"
      $zcount = _add($zcount, 1).clone
    end
    $zi = _add($zi, 1).clone
  end
  assert_int("zero_vector", $zcount, 10)
  assert_str("unit_basis", vector_str_int(unit_basis_vector(3, 1)), "(0,1,0)")
  assert_str("axpy", vector_str_int(axpy(2, [1, 2, 3], [1, 0, 1])), "(3,4,7)")
  $vcopy = copy_vector([1, 0, 0, 0, 0, 0])
  assert_str("copy", vector_str_int($vcopy), "(1,0,0,0,0,0)")
  $vchange = [1, 0, 0].clone
  change_component($vchange, 0, 0)
  change_component($vchange, 1, 1)
  assert_str("change_component", vector_str_int($vchange), "(0,1,0)")
  $ma = [[1, 2, 3], [2, 4, 5], [6, 7, 8]].clone
  assert_str("matrix_str", matrix_str($ma), "|1,2,3|\n|2,4,5|\n|6,7,8|\n")
  assert_int("determinant", determinant($ma), -5)
  $mb = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].clone
  $mv = matrix_mul_vector($mb, [1, 2, 3])
  assert_str("matrix_vec_mul", vector_str_int($mv), "(14,32,50)")
  $msc = matrix_mul_scalar($mb, 2)
  assert_str("matrix_scalar_mul", matrix_str($msc), "|2,4,6|\n|8,10,12|\n|14,16,18|\n")
  $mc = [[1, 2, 3], [2, 4, 5], [6, 7, 8]].clone
  matrix_change_component($mc, 0, 2, 5)
  assert_str("change_component_matrix", matrix_str($mc), "|1,2,5|\n|2,4,5|\n|6,7,8|\n")
  assert_int("matrix_component", matrix_component($mc, 2, 1), 7)
  $madd = matrix_add([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]]).clone
  assert_str("matrix_add", matrix_str($madd), "|2,4,10|\n|4,8,10|\n|12,14,18|\n")
  $msub = matrix_sub([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]]).clone
  assert_str("matrix_sub", matrix_str($msub), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n")
  $mzero = square_zero_matrix(5)
  assert_str("square_zero_matrix", matrix_str($mzero), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n")
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
