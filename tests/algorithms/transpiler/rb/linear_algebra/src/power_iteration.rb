# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if _eq(x, 0.0)
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def dot(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      sum = _add(sum, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return sum
  end
  def mat_vec_mult(mat, vec)
    res = []
    i = 0
    while i < _len(mat)
      res = _append(res, dot((__tmp3 = mat; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), vec))
      i = _add(i, 1)
    end
    return res
  end
  def norm(vec)
    sum = 0.0
    i = 0
    while i < _len(vec)
      sum = _add(sum, (__tmp4 = vec; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)) * (__tmp5 = vec; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      i = _add(i, 1)
    end
    root = sqrtApprox(sum)
    return root
  end
  def normalize(vec)
    n = norm(vec)
    res = []
    i = 0
    while i < _len(vec)
      res = _append(res, (__tmp6 = vec; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)) / n)
      i = _add(i, 1)
    end
    return res
  end
  def power_iteration(matrix, vector, error_tol, max_iterations)
    v = normalize(vector)
    lambda_prev = 0.0
    lambda = 0.0
    err = 1e+12
    iterations = 0
    while err > error_tol && iterations < max_iterations
      w = mat_vec_mult(matrix, v)
      v = normalize(w)
      mv = mat_vec_mult(matrix, v)
      lambda = dot(v, mv)
      denom = (!_eq(lambda, 0.0) ? lambda.abs() : 1.0)
      err = (lambda - lambda_prev).abs() / denom
      lambda_prev = lambda
      iterations = _add(iterations, 1)
    end
    return PowerResult.new(eigenvalue: lambda, eigenvector: v)
  end
  Object.send(:remove_const, :PowerResult) if Object.const_defined?(:PowerResult)
  PowerResult = Struct.new(:eigenvalue, :eigenvector, keyword_init: true)
  $input_matrix = [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]]
  $vector = [41.0, 4.0, 20.0]
  $result = power_iteration($input_matrix, $vector, 1e-12, 100)
  puts(_str($result.eigenvalue))
  puts(((x = $result.eigenvector); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
