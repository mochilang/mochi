# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x == 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def dot(a, b)
    sum = 0.0.clone
    i = 0.clone
    while i < a.length
      sum = _add(sum, a[i] * b[i]).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def mat_vec_mult(mat, vec)
    res = [].clone
    i = 0.clone
    while i < mat.length
      res = (res << (dot(mat[i], vec))).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def norm(vec)
    sum = 0.0.clone
    i = 0.clone
    while i < vec.length
      sum = _add(sum, vec[i] * vec[i]).clone
      i = _add(i, 1).clone
    end
    root = sqrtApprox(sum).clone
    return root
  end
  def normalize(vec)
    n = norm(vec)
    res = [].clone
    i = 0.clone
    while i < vec.length
      res = (res << (vec[i] / n)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def power_iteration(matrix, vector, error_tol, max_iterations)
    v = normalize(vector).clone
    lambda_prev = 0.0.clone
    lambda = 0.0.clone
    err = 1000000000000.0.clone
    iterations = 0.clone
    while err > error_tol && iterations < max_iterations
      w = mat_vec_mult(matrix, v)
      v = normalize(w).clone
      mv = mat_vec_mult(matrix, v)
      lambda = dot(v, mv).clone
      denom = (lambda != 0.0 ? abs(lambda) : 1.0)
      err = abs(lambda - lambda_prev) / denom.clone
      lambda_prev = lambda.clone
      iterations = _add(iterations, 1).clone
    end
    return PowerResult.new(eigenvalue: lambda, eigenvector: v)
  end
  PowerResult = Struct.new(:eigenvalue, :eigenvector, keyword_init: true)
  $input_matrix = [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]]
  $vector = [41.0, 4.0, 20.0]
  $result = power_iteration($input_matrix, $vector, 1e-12, 100)
  puts(_str($result.eigenvalue))
  puts(((x = $result.eigenvector); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
