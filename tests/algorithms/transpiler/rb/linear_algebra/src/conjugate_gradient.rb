# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def zeros(n)
    res = []
    i = 0
    while i < n
      res = _append(res, 0.0)
      i = _add(i, 1)
    end
    return res
  end
  def dot(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      sum = _add(sum, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return sum
  end
  def mat_vec_mul(m, v)
    res = []
    i = 0
    while i < _len(m)
      s = 0.0
      j = 0
      while j < _len((__tmp3 = m; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
        s = _add(s, (__tmp4 = (__tmp5 = m; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)) * (__tmp6 = v; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)))
        j = _add(j, 1)
      end
      res = _append(res, s)
      i = _add(i, 1)
    end
    return res
  end
  def vec_add(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, _add((__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)), (__tmp8 = b; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))))
      i = _add(i, 1)
    end
    return res
  end
  def vec_sub(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, (__tmp9 = a; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)) - (__tmp10 = b; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
      i = _add(i, 1)
    end
    return res
  end
  def scalar_mul(s, v)
    res = []
    i = 0
    while i < _len(v)
      res = _append(res, s * (__tmp11 = v; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      i = _add(i, 1)
    end
    return res
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def norm(v)
    return sqrtApprox(dot(v, v))
  end
  def conjugate_gradient(a, b, max_iterations, tol)
    n = _len(b)
    x = zeros(n)
    r = vec_sub(b, mat_vec_mul($A, x))
    p = r
    rs_old = dot(r, r)
    i = 0
    while i < max_iterations
      _Ap = mat_vec_mul($A, p)
      alpha = rs_old / dot(p, _Ap)
      x = vec_add(x, scalar_mul(alpha, p))
      r = vec_sub(r, scalar_mul(alpha, _Ap))
      rs_new = dot(r, r)
      if sqrtApprox(rs_new) < tol
        break
      end
      beta = rs_new / rs_old
      p = vec_add(r, scalar_mul(beta, p))
      rs_old = rs_new
      i = _add(i, 1)
    end
    return x
  end
  $A = [[8.73256573, -5.02034289, -2.68709226], [-5.02034289, 3.78188322, 0.91980451], [-2.68709226, 0.91980451, 1.94746467]]
  $b = [-5.80872761, 3.23807431, 1.95381422]
  $x = conjugate_gradient($A, $b, 1000, 1e-08)
  puts(_str((__tmp12 = $x; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0))))
  puts(_str((__tmp13 = $x; __tmp13.is_a?(Hash) ? __tmp13[1] : _idx(__tmp13, 1))))
  puts(_str((__tmp14 = $x; __tmp14.is_a?(Hash) ? __tmp14[2] : _idx(__tmp14, 2))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
