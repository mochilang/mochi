# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def zeros(n)
    res = [].clone
    i = 0.clone
    while i < n
      res = (res << (0.0)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def dot(a, b)
    sum = 0.0.clone
    i = 0.clone
    while i < a.length
      sum = _add(sum, a[i] * b[i]).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def mat_vec_mul(m, v)
    res = [].clone
    i = 0.clone
    while i < m.length
      s = 0.0.clone
      j = 0.clone
      while j < m[i].length
        s = _add(s, m[i][j] * v[j]).clone
        j = _add(j, 1).clone
      end
      res = (res << (s)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def vec_add(a, b)
    res = [].clone
    i = 0.clone
    while i < a.length
      res = (res << (_add(a[i], b[i]))).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def vec_sub(a, b)
    res = [].clone
    i = 0.clone
    while i < a.length
      res = (res << (a[i] - b[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def scalar_mul(s, v)
    res = [].clone
    i = 0.clone
    while i < v.length
      res = (res << (s * v[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def norm(v)
    return sqrtApprox(dot(v, v))
  end
  def conjugate_gradient(a, b, max_iterations, tol)
    n = b.length
    x = zeros(n).clone
    r = vec_sub(b, mat_vec_mul($A, x)).clone
    p = r.clone
    rs_old = dot(r, r).clone
    i = 0.clone
    while i < max_iterations
      _Ap = mat_vec_mul($A, p)
      alpha = rs_old / dot(p, _Ap)
      x = vec_add(x, scalar_mul(alpha, p)).clone
      r = vec_sub(r, scalar_mul(alpha, _Ap)).clone
      rs_new = dot(r, r)
      if sqrtApprox(rs_new) < tol
        break
      end
      beta = rs_new / rs_old
      p = vec_add(r, scalar_mul(beta, p)).clone
      rs_old = rs_new.clone
      i = _add(i, 1).clone
    end
    return x
  end
  $A = [[8.73256573, -5.02034289, -2.68709226], [-5.02034289, 3.78188322, 0.91980451], [-2.68709226, 0.91980451, 1.94746467]]
  $b = [-5.80872761, 3.23807431, 1.95381422]
  $x = conjugate_gradient($A, $b, 1000, 1e-08)
  puts(_str($x[0]))
  puts(_str($x[1]))
  puts(_str($x[2]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
