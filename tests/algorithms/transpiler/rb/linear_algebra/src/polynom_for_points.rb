# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains_int(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def split(s, sep)
    res = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == sep
        res = (res << (current)).clone
        current = "".clone
      else
        current = _add(current, ch).clone
      end
      i = _add(i, 1).clone
    end
    res = (res << (current)).clone
    return res
  end
  def pow_int_float(base, exp)
    result = 1.0.clone
    i = 0.clone
    while i < exp
      result = result * ((base).to_f).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def points_to_polynomial(coordinates)
    if coordinates.length == 0
      panic("The program cannot work out a fitting polynomial.")
    end
    i = 0.clone
    while i < coordinates.length
      if coordinates[i].length != 2
        panic("The program cannot work out a fitting polynomial.")
      end
      i = _add(i, 1).clone
    end
    j = 0.clone
    while j < coordinates.length
      k = _add(j, 1).clone
      while k < coordinates.length
        if coordinates[j][0] == coordinates[k][0] && coordinates[j][1] == coordinates[k][1]
          panic("The program cannot work out a fitting polynomial.")
        end
        k = _add(k, 1).clone
      end
      j = _add(j, 1).clone
    end
    set_x = [].clone
    i = 0.clone
    while i < coordinates.length
      x_val = coordinates[i][0]
      if !contains_int(set_x, x_val)
        set_x = (set_x << (x_val)).clone
      end
      i = _add(i, 1).clone
    end
    if set_x.length == 1
      return _add("x=", _str(coordinates[0][0]))
    end
    if set_x.length != coordinates.length
      panic("The program cannot work out a fitting polynomial.")
    end
    n = coordinates.length
    matrix = [].clone
    row = 0.clone
    while row < n
      line = [].clone
      col = 0.clone
      while col < n
        power = pow_int_float(coordinates[row][0], n - (_add(col, 1)))
        line = (line << (power)).clone
        col = _add(col, 1).clone
      end
      matrix = (matrix << (line)).clone
      row = _add(row, 1).clone
    end
    vector = [].clone
    row = 0.clone
    while row < n
      vector = (vector << ((coordinates[row][1]).to_f)).clone
      row = _add(row, 1).clone
    end
    count = 0.clone
    while count < n
      number = 0.clone
      while number < n
        if count != number
          fraction = matrix[number][count] / matrix[count][count]
          cc = 0.clone
          while cc < n
            matrix[number][cc] = matrix[number][cc] - matrix[count][cc] * fraction
            cc = _add(cc, 1).clone
          end
          vector[number] = vector[number] - vector[count] * fraction
        end
        number = _add(number, 1).clone
      end
      count = _add(count, 1).clone
    end
    solution = [].clone
    count = 0.clone
    while count < n
      value = vector[count] / matrix[count][count]
      solution = (solution << (_str(value))).clone
      count = _add(count, 1).clone
    end
    solved = "f(x)=".clone
    count = 0.clone
    while count < n
      parts = split(solution[count], "e").clone
      coeff = solution[count].clone
      if parts.length > 1
        coeff = _add(_add(parts[0], "*10^"), parts[1]).clone
      end
      solved = _add(_add(_add(_add(solved, "x^"), _str(n - (_add(count, 1)))), "*"), coeff).clone
      if _add(count, 1) != n
        solved = _add(solved, "+").clone
      end
      count = _add(count, 1).clone
    end
    return solved
  end
  def main()
    puts(points_to_polynomial([[1, 0], [2, 0], [3, 0]]))
    puts(points_to_polynomial([[1, 1], [2, 1], [3, 1]]))
    puts(points_to_polynomial([[1, 1], [2, 4], [3, 9]]))
    puts(points_to_polynomial([[1, 3], [2, 6], [3, 11]]))
    puts(points_to_polynomial([[1, -3], [2, -6], [3, -11]]))
    puts(points_to_polynomial([[1, 1], [1, 2], [1, 3]]))
    puts(points_to_polynomial([[1, 5], [2, 2], [3, 9]]))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
