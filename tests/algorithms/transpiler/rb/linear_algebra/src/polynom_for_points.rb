# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def contains_int(xs, x)
    i = 0
    while i < _len(xs)
      if _eq((__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < _len(s)
      ch = s[i..._add(i, 1)]
      if _eq(ch, sep)
        res = _append(res, current)
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = _append(res, current)
    return res
  end
  def pow_int_float(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * ((base).to_f)
      i = _add(i, 1)
    end
    return result
  end
  def points_to_polynomial(coordinates)
    if _eq(_len(coordinates), 0)
      panic("The program cannot work out a fitting polynomial.")
    end
    i = 0
    while i < _len(coordinates)
      if !_eq(_len((__tmp2 = coordinates; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))), 2)
        panic("The program cannot work out a fitting polynomial.")
      end
      i = _add(i, 1)
    end
    j = 0
    while j < _len(coordinates)
      k = _add(j, 1)
      while k < _len(coordinates)
        if _eq((__tmp3 = (__tmp4 = coordinates; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)); __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)), (__tmp5 = (__tmp6 = coordinates; __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k)); __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))) && _eq((__tmp7 = (__tmp8 = coordinates; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)); __tmp7.is_a?(Hash) ? __tmp7[1] : _idx(__tmp7, 1)), (__tmp9 = (__tmp10 = coordinates; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)); __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1)))
          panic("The program cannot work out a fitting polynomial.")
        end
        k = _add(k, 1)
      end
      j = _add(j, 1)
    end
    set_x = []
    i = 0
    while i < _len(coordinates)
      x_val = (__tmp11 = (__tmp12 = coordinates; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)); __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0))
      if !contains_int(set_x, x_val)
        set_x = _append(set_x, x_val)
      end
      i = _add(i, 1)
    end
    if _eq(_len(set_x), 1)
      return _add("x=", _str((__tmp13 = (__tmp14 = coordinates; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0)); __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0))))
    end
    if !_eq(_len(set_x), _len(coordinates))
      panic("The program cannot work out a fitting polynomial.")
    end
    n = _len(coordinates)
    matrix = []
    row = 0
    while row < n
      line = []
      col = 0
      while col < n
        power = pow_int_float((__tmp15 = (__tmp16 = coordinates; __tmp16.is_a?(Hash) ? __tmp16[row] : _idx(__tmp16, row)); __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0)), n - (_add(col, 1)))
        line = _append(line, power)
        col = _add(col, 1)
      end
      matrix = _append(matrix, line)
      row = _add(row, 1)
    end
    vector = []
    row = 0
    while row < n
      vector = _append(vector, ((__tmp17 = (__tmp18 = coordinates; __tmp18.is_a?(Hash) ? __tmp18[row] : _idx(__tmp18, row)); __tmp17.is_a?(Hash) ? __tmp17[1] : _idx(__tmp17, 1))).to_f)
      row = _add(row, 1)
    end
    count = 0
    while count < n
      number = 0
      while number < n
        if !_eq(count, number)
          fraction = (__tmp19 = (__tmp20 = matrix; __tmp20.is_a?(Hash) ? __tmp20[number] : _idx(__tmp20, number)); __tmp19.is_a?(Hash) ? __tmp19[count] : _idx(__tmp19, count)) / (__tmp21 = (__tmp22 = matrix; __tmp22.is_a?(Hash) ? __tmp22[count] : _idx(__tmp22, count)); __tmp21.is_a?(Hash) ? __tmp21[count] : _idx(__tmp21, count))
          cc = 0
          while cc < n
            (__tmp23 = matrix; __tmp23.is_a?(Hash) ? __tmp23[number] : _idx(__tmp23, number))[cc] = (__tmp24 = (__tmp25 = matrix; __tmp25.is_a?(Hash) ? __tmp25[number] : _idx(__tmp25, number)); __tmp24.is_a?(Hash) ? __tmp24[cc] : _idx(__tmp24, cc)) - (__tmp26 = (__tmp27 = matrix; __tmp27.is_a?(Hash) ? __tmp27[count] : _idx(__tmp27, count)); __tmp26.is_a?(Hash) ? __tmp26[cc] : _idx(__tmp26, cc)) * fraction
            cc = _add(cc, 1)
          end
          vector[number] = (__tmp28 = vector; __tmp28.is_a?(Hash) ? __tmp28[number] : _idx(__tmp28, number)) - (__tmp29 = vector; __tmp29.is_a?(Hash) ? __tmp29[count] : _idx(__tmp29, count)) * fraction
        end
        number = _add(number, 1)
      end
      count = _add(count, 1)
    end
    solution = []
    count = 0
    while count < n
      value = (__tmp30 = vector; __tmp30.is_a?(Hash) ? __tmp30[count] : _idx(__tmp30, count)) / (__tmp31 = (__tmp32 = matrix; __tmp32.is_a?(Hash) ? __tmp32[count] : _idx(__tmp32, count)); __tmp31.is_a?(Hash) ? __tmp31[count] : _idx(__tmp31, count))
      solution = _append(solution, _str(value))
      count = _add(count, 1)
    end
    solved = "f(x)="
    count = 0
    while count < n
      parts = split((__tmp33 = solution; __tmp33.is_a?(Hash) ? __tmp33[count] : _idx(__tmp33, count)), "e")
      coeff = (__tmp34 = solution; __tmp34.is_a?(Hash) ? __tmp34[count] : _idx(__tmp34, count))
      if _len(parts) > 1
        coeff = _add(_add((__tmp35 = parts; __tmp35.is_a?(Hash) ? __tmp35[0] : _idx(__tmp35, 0)), "*10^"), (__tmp36 = parts; __tmp36.is_a?(Hash) ? __tmp36[1] : _idx(__tmp36, 1)))
      end
      solved = _add(_add(_add(_add(solved, "x^"), _str(n - (_add(count, 1)))), "*"), coeff)
      if !_eq(_add(count, 1), n)
        solved = _add(solved, "+")
      end
      count = _add(count, 1)
    end
    return solved
  end
  def main()
    puts(points_to_polynomial([[1, 0], [2, 0], [3, 0]]))
    puts(points_to_polynomial([[1, 1], [2, 1], [3, 1]]))
    puts(points_to_polynomial([[1, 1], [2, 4], [3, 9]]))
    puts(points_to_polynomial([[1, 3], [2, 6], [3, 11]]))
    puts(points_to_polynomial([[1, -3], [2, -6], [3, -11]]))
    puts(points_to_polynomial([[1, 1], [1, 2], [1, 3]]))
    puts(points_to_polynomial([[1, 5], [2, 2], [3, 9]]))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
