# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def panic(msg)
    puts(msg)
  end
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def copy_matrix(src)
    res = [].clone
    i = 0.clone
    while i < src.length
      row_src = src[i].clone
      row = [].clone
      j = 0.clone
      while j < row_src.length
        row = (row << (row_src[j])).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def solve_linear_system(matrix)
    ab = copy_matrix(matrix).clone
    num_rows = ab.length.clone
    num_cols = ab[0].length - 1.clone
    if num_rows != num_cols
      panic("Matrix is not square")
      return []
    end
    column_num = 0.clone
    while column_num < num_rows
      i = column_num.clone
      while i < num_cols
        if abs_float(ab[i][column_num]) > abs_float(ab[column_num][column_num])
          temp = ab[column_num].clone
          ab[column_num] = ab[i]
          ab[i] = temp
        end
        i = _add(i, 1).clone
      end
      if abs_float(ab[column_num][column_num]) < 1e-08
        panic("Matrix is singular")
        return []
      end
      if column_num != 0
        i = column_num.clone
        while i < num_rows
          factor = ab[i][column_num - 1] / ab[column_num - 1][column_num - 1].clone
          j = 0.clone
          while j < ab[i].length
            ab[i][j] = ab[i][j] - factor * ab[column_num - 1][j]
            j = _add(j, 1).clone
          end
          i = _add(i, 1).clone
        end
      end
      column_num = _add(column_num, 1).clone
    end
    x_lst = [].clone
    t = 0.clone
    while t < num_rows
      x_lst = (x_lst << (0.0)).clone
      t = _add(t, 1).clone
    end
    column_num = num_rows - 1.clone
    while column_num >= 0
      x = ab[column_num][num_cols] / ab[column_num][column_num].clone
      x_lst[column_num] = x
      i = column_num - 1.clone
      while i >= 0
        ab[i][num_cols] = ab[i][num_cols] - ab[i][column_num] * x
        i = i - 1.clone
      end
      column_num = column_num - 1.clone
    end
    return x_lst
  end
  $example_matrix = [[5.0, -5.0, -3.0, 4.0, -11.0], [1.0, -4.0, 6.0, -4.0, -10.0], [-2.0, -5.0, 4.0, -5.0, -12.0], [-3.0, -3.0, 5.0, -5.0, 8.0]].clone
  puts("Matrix:")
  puts(((x = $example_matrix); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $solution = solve_linear_system($example_matrix).clone
  puts(((x = $solution); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
