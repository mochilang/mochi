# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def panic(msg)
    puts(msg)
  end
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def copy_matrix(src)
    res = []
    i = 0
    while i < _len(src)
      row_src = (__tmp1 = src; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      row = []
      j = 0
      while j < _len(row_src)
        row = _append(row, (__tmp2 = row_src; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def solve_linear_system(matrix)
    ab = copy_matrix(matrix)
    num_rows = _len(ab)
    num_cols = _len((__tmp3 = ab; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))) - 1
    if !_eq(num_rows, num_cols)
      panic("Matrix is not square")
      return []
    end
    column_num = 0
    while column_num < num_rows
      i = column_num
      while i < num_cols
        if abs_float((__tmp4 = (__tmp5 = ab; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[column_num] : _idx(__tmp4, column_num))) > abs_float((__tmp6 = (__tmp7 = ab; __tmp7.is_a?(Hash) ? __tmp7[column_num] : _idx(__tmp7, column_num)); __tmp6.is_a?(Hash) ? __tmp6[column_num] : _idx(__tmp6, column_num)))
          temp = (__tmp8 = ab; __tmp8.is_a?(Hash) ? __tmp8[column_num] : _idx(__tmp8, column_num))
          ab[column_num] = (__tmp9 = ab; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))
          ab[i] = temp
        end
        i = _add(i, 1)
      end
      if abs_float((__tmp10 = (__tmp11 = ab; __tmp11.is_a?(Hash) ? __tmp11[column_num] : _idx(__tmp11, column_num)); __tmp10.is_a?(Hash) ? __tmp10[column_num] : _idx(__tmp10, column_num))) < 1e-08
        panic("Matrix is singular")
        return []
      end
      if !_eq(column_num, 0)
        i = column_num
        while i < num_rows
          factor = (__tmp12 = (__tmp13 = ab; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)); __tmp12.is_a?(Hash) ? __tmp12[column_num - 1] : _idx(__tmp12, column_num - 1)) / (__tmp14 = (__tmp15 = ab; __tmp15.is_a?(Hash) ? __tmp15[column_num - 1] : _idx(__tmp15, column_num - 1)); __tmp14.is_a?(Hash) ? __tmp14[column_num - 1] : _idx(__tmp14, column_num - 1))
          j = 0
          while j < _len((__tmp16 = ab; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)))
            (__tmp17 = ab; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))[j] = (__tmp18 = (__tmp19 = ab; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)); __tmp18.is_a?(Hash) ? __tmp18[j] : _idx(__tmp18, j)) - factor * (__tmp20 = (__tmp21 = ab; __tmp21.is_a?(Hash) ? __tmp21[column_num - 1] : _idx(__tmp21, column_num - 1)); __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j))
            j = _add(j, 1)
          end
          i = _add(i, 1)
        end
      end
      column_num = _add(column_num, 1)
    end
    x_lst = []
    t = 0
    while t < num_rows
      x_lst = _append(x_lst, 0.0)
      t = _add(t, 1)
    end
    column_num = num_rows - 1
    while column_num >= 0
      x = (__tmp22 = (__tmp23 = ab; __tmp23.is_a?(Hash) ? __tmp23[column_num] : _idx(__tmp23, column_num)); __tmp22.is_a?(Hash) ? __tmp22[num_cols] : _idx(__tmp22, num_cols)) / (__tmp24 = (__tmp25 = ab; __tmp25.is_a?(Hash) ? __tmp25[column_num] : _idx(__tmp25, column_num)); __tmp24.is_a?(Hash) ? __tmp24[column_num] : _idx(__tmp24, column_num))
      x_lst[column_num] = x
      i = column_num - 1
      while i >= 0
        (__tmp26 = ab; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i))[num_cols] = (__tmp27 = (__tmp28 = ab; __tmp28.is_a?(Hash) ? __tmp28[i] : _idx(__tmp28, i)); __tmp27.is_a?(Hash) ? __tmp27[num_cols] : _idx(__tmp27, num_cols)) - (__tmp29 = (__tmp30 = ab; __tmp30.is_a?(Hash) ? __tmp30[i] : _idx(__tmp30, i)); __tmp29.is_a?(Hash) ? __tmp29[column_num] : _idx(__tmp29, column_num)) * x
        i = i - 1
      end
      column_num = column_num - 1
    end
    return x_lst
  end
  $example_matrix = [[5.0, -5.0, -3.0, 4.0, -11.0], [1.0, -4.0, 6.0, -4.0, -10.0], [-2.0, -5.0, 4.0, -5.0, -12.0], [-3.0, -3.0, 5.0, -5.0, 8.0]]
  puts("Matrix:")
  puts(((x = $example_matrix); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $solution = solve_linear_system($example_matrix)
  puts(((x = $solution); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
