# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def invert_matrix(matrix)
    n = matrix.length
    aug = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        row = (row << (matrix[i][j])).clone
        j = _add(j, 1).clone
      end
      k = 0.clone
      while k < n
        if i == k
          row = (row << (1.0)).clone
        else
          row = (row << (0.0)).clone
        end
        k = _add(k, 1).clone
      end
      aug = (aug << (row)).clone
      i = _add(i, 1).clone
    end
    col = 0.clone
    while col < n
      pivot_row = col.clone
      r = col.clone
      while r < n
        if aug[r][col] != 0.0
          pivot_row = r.clone
          break
        end
        r = _add(r, 1).clone
      end
      if aug[pivot_row][col] == 0.0
        panic("Matrix is not invertible")
      end
      if pivot_row != col
        temp = aug[col]
        aug[col] = aug[pivot_row]
        aug[pivot_row] = temp
      end
      pivot = aug[col][col]
      c = 0.clone
      while c < 2 * n
        aug[col][c] = aug[col][c] / pivot
        c = _add(c, 1).clone
      end
      r2 = 0.clone
      while r2 < n
        if r2 != col
          factor = aug[r2][col]
          c2 = 0.clone
          while c2 < 2 * n
            aug[r2][c2] = aug[r2][c2] - factor * aug[col][c2]
            c2 = _add(c2, 1).clone
          end
        end
        r2 = _add(r2, 1).clone
      end
      col = _add(col, 1).clone
    end
    inv = [].clone
    r3 = 0.clone
    while r3 < n
      row = [].clone
      c3 = 0.clone
      while c3 < n
        row = (row << (aug[r3][_add(c3, n)])).clone
        c3 = _add(c3, 1).clone
      end
      inv = (inv << (row)).clone
      r3 = _add(r3, 1).clone
    end
    return inv
  end
  $mat = [[4.0, 7.0], [2.0, 6.0]].clone
  puts("Original Matrix:")
  puts(((x = $mat); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts("Inverted Matrix:")
  puts(((x = invert_matrix($mat)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
