# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def invert_matrix(matrix)
    n = _len(matrix)
    aug = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = _append(row, (__tmp1 = (__tmp2 = matrix; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)))
        j = _add(j, 1)
      end
      k = 0
      while k < n
        if _eq(i, k)
          row = _append(row, 1.0)
        else
          row = _append(row, 0.0)
        end
        k = _add(k, 1)
      end
      aug = _append(aug, row)
      i = _add(i, 1)
    end
    col = 0
    while col < n
      pivot_row = col
      r = col
      while r < n
        if !_eq((__tmp3 = (__tmp4 = aug; __tmp4.is_a?(Hash) ? __tmp4[r] : _idx(__tmp4, r)); __tmp3.is_a?(Hash) ? __tmp3[col] : _idx(__tmp3, col)), 0.0)
          pivot_row = r
          break
        end
        r = _add(r, 1)
      end
      if _eq((__tmp5 = (__tmp6 = aug; __tmp6.is_a?(Hash) ? __tmp6[pivot_row] : _idx(__tmp6, pivot_row)); __tmp5.is_a?(Hash) ? __tmp5[col] : _idx(__tmp5, col)), 0.0)
        panic("Matrix is not invertible")
      end
      if !_eq(pivot_row, col)
        temp = (__tmp7 = aug; __tmp7.is_a?(Hash) ? __tmp7[col] : _idx(__tmp7, col))
        aug[col] = (__tmp8 = aug; __tmp8.is_a?(Hash) ? __tmp8[pivot_row] : _idx(__tmp8, pivot_row))
        aug[pivot_row] = temp
      end
      pivot = (__tmp9 = (__tmp10 = aug; __tmp10.is_a?(Hash) ? __tmp10[col] : _idx(__tmp10, col)); __tmp9.is_a?(Hash) ? __tmp9[col] : _idx(__tmp9, col))
      c = 0
      while c < 2 * n
        (__tmp11 = aug; __tmp11.is_a?(Hash) ? __tmp11[col] : _idx(__tmp11, col))[c] = (__tmp12 = (__tmp13 = aug; __tmp13.is_a?(Hash) ? __tmp13[col] : _idx(__tmp13, col)); __tmp12.is_a?(Hash) ? __tmp12[c] : _idx(__tmp12, c)) / pivot
        c = _add(c, 1)
      end
      r2 = 0
      while r2 < n
        if !_eq(r2, col)
          factor = (__tmp14 = (__tmp15 = aug; __tmp15.is_a?(Hash) ? __tmp15[r2] : _idx(__tmp15, r2)); __tmp14.is_a?(Hash) ? __tmp14[col] : _idx(__tmp14, col))
          c2 = 0
          while c2 < 2 * n
            (__tmp16 = aug; __tmp16.is_a?(Hash) ? __tmp16[r2] : _idx(__tmp16, r2))[c2] = (__tmp17 = (__tmp18 = aug; __tmp18.is_a?(Hash) ? __tmp18[r2] : _idx(__tmp18, r2)); __tmp17.is_a?(Hash) ? __tmp17[c2] : _idx(__tmp17, c2)) - factor * (__tmp19 = (__tmp20 = aug; __tmp20.is_a?(Hash) ? __tmp20[col] : _idx(__tmp20, col)); __tmp19.is_a?(Hash) ? __tmp19[c2] : _idx(__tmp19, c2))
            c2 = _add(c2, 1)
          end
        end
        r2 = _add(r2, 1)
      end
      col = _add(col, 1)
    end
    inv = []
    r3 = 0
    while r3 < n
      row = []
      c3 = 0
      while c3 < n
        row = _append(row, (__tmp21 = (__tmp22 = aug; __tmp22.is_a?(Hash) ? __tmp22[r3] : _idx(__tmp22, r3)); __tmp21.is_a?(Hash) ? __tmp21[_add(c3, n)] : _idx(__tmp21, _add(c3, n))))
        c3 = _add(c3, 1)
      end
      inv = _append(inv, row)
      r3 = _add(r3, 1)
    end
    return inv
  end
  $mat = [[4.0, 7.0], [2.0, 6.0]]
  puts("Original Matrix:")
  puts(((x = $mat); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts("Inverted Matrix:")
  puts(((x = invert_matrix($mat)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
