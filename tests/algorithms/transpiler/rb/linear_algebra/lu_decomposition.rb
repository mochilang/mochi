# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def lu_decomposition(mat)
    n = _len(mat)
    if _eq(n, 0)
      return LU.new(lower: [], upper: [])
    end
    m = _len((__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    if !_eq(n, m)
      panic("Matrix must be square")
    end
    lower = []
    upper = []
    i = 0
    while i < n
      lrow = []
      urow = []
      j = 0
      while j < n
        lrow = _append(lrow, 0.0)
        urow = _append(urow, 0.0)
        j = _add(j, 1)
      end
      lower = _append(lower, lrow)
      upper = _append(upper, urow)
      i = _add(i, 1)
    end
    i = 0
    while i < n
      j1 = 0
      while j1 < i
        total = 0.0
        k = 0
        while k < i
          total = _add(total, (__tmp2 = (__tmp3 = lower; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)); __tmp2.is_a?(Hash) ? __tmp2[k] : _idx(__tmp2, k)) * (__tmp4 = (__tmp5 = upper; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k)); __tmp4.is_a?(Hash) ? __tmp4[j1] : _idx(__tmp4, j1)))
          k = _add(k, 1)
        end
        if _eq((__tmp6 = (__tmp7 = upper; __tmp7.is_a?(Hash) ? __tmp7[j1] : _idx(__tmp7, j1)); __tmp6.is_a?(Hash) ? __tmp6[j1] : _idx(__tmp6, j1)), 0.0)
          panic("No LU decomposition exists")
        end
        (__tmp8 = lower; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))[j1] = ((__tmp9 = (__tmp10 = mat; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j1] : _idx(__tmp9, j1)) - total) / (__tmp11 = (__tmp12 = upper; __tmp12.is_a?(Hash) ? __tmp12[j1] : _idx(__tmp12, j1)); __tmp11.is_a?(Hash) ? __tmp11[j1] : _idx(__tmp11, j1))
        j1 = _add(j1, 1)
      end
      (__tmp13 = lower; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))[i] = 1.0
      j2 = i
      while j2 < n
        total2 = 0.0
        k2 = 0
        while k2 < i
          total2 = _add(total2, (__tmp14 = (__tmp15 = lower; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)); __tmp14.is_a?(Hash) ? __tmp14[k2] : _idx(__tmp14, k2)) * (__tmp16 = (__tmp17 = upper; __tmp17.is_a?(Hash) ? __tmp17[k2] : _idx(__tmp17, k2)); __tmp16.is_a?(Hash) ? __tmp16[j2] : _idx(__tmp16, j2)))
          k2 = _add(k2, 1)
        end
        (__tmp18 = upper; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))[j2] = (__tmp19 = (__tmp20 = mat; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)); __tmp19.is_a?(Hash) ? __tmp19[j2] : _idx(__tmp19, j2)) - total2
        j2 = _add(j2, 1)
      end
      i = _add(i, 1)
    end
    return LU.new(lower: lower, upper: upper)
  end
  def print_matrix(mat)
    i = 0
    while i < _len(mat)
      line = ""
      j = 0
      while j < _len((__tmp21 = mat; __tmp21.is_a?(Hash) ? __tmp21[i] : _idx(__tmp21, i)))
        line = _add(line, _str((__tmp22 = (__tmp23 = mat; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i)); __tmp22.is_a?(Hash) ? __tmp22[j] : _idx(__tmp22, j))))
        if _add(j, 1) < _len((__tmp24 = mat; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)))
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  Object.send(:remove_const, :LU) if Object.const_defined?(:LU)
  LU = Struct.new(:lower, :upper, keyword_init: true)
  $matrix = [[2.0, -2.0, 1.0], [0.0, 1.0, 2.0], [5.0, 3.0, 1.0]]
  $result = lu_decomposition($matrix)
  print_matrix($result.lower)
  print_matrix($result.upper)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
