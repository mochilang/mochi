# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def lu_decomposition(mat)
    n = mat.length
    if n == 0
      return LU.new(lower: [], upper: [])
    end
    m = mat[0].length
    if n != m
      panic("Matrix must be square")
    end
    lower = [].clone
    upper = [].clone
    i = 0.clone
    while i < n
      lrow = [].clone
      urow = [].clone
      j = 0.clone
      while j < n
        lrow = (lrow << (0.0)).clone
        urow = (urow << (0.0)).clone
        j = _add(j, 1).clone
      end
      lower = (lower << (lrow)).clone
      upper = (upper << (urow)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < n
      j1 = 0.clone
      while j1 < i
        total = 0.0.clone
        k = 0.clone
        while k < i
          total = _add(total, lower[i][k] * upper[k][j1]).clone
          k = _add(k, 1).clone
        end
        if upper[j1][j1] == 0.0
          panic("No LU decomposition exists")
        end
        lower[i][j1] = (mat[i][j1] - total) / upper[j1][j1]
        j1 = _add(j1, 1).clone
      end
      lower[i][i] = 1.0
      j2 = i.clone
      while j2 < n
        total2 = 0.0.clone
        k2 = 0.clone
        while k2 < i
          total2 = _add(total2, lower[i][k2] * upper[k2][j2]).clone
          k2 = _add(k2, 1).clone
        end
        upper[i][j2] = mat[i][j2] - total2
        j2 = _add(j2, 1).clone
      end
      i = _add(i, 1).clone
    end
    return LU.new(lower: lower, upper: upper)
  end
  def print_matrix(mat)
    i = 0.clone
    while i < mat.length
      line = "".clone
      j = 0.clone
      while j < mat[i].length
        line = _add(line, _str(mat[i][j])).clone
        if _add(j, 1) < mat[i].length
          line = _add(line, " ").clone
        end
        j = _add(j, 1).clone
      end
      puts(line)
      i = _add(i, 1).clone
    end
  end
  LU = Struct.new(:lower, :upper, keyword_init: true)
  $matrix = [[2.0, -2.0, 1.0], [0.0, 1.0, 2.0], [5.0, 3.0, 1.0]]
  $result = lu_decomposition($matrix)
  print_matrix($result.lower)
  print_matrix($result.upper)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
