# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def absf(x)
    return (x < 0.0 ? -x : x)
  end
  def strictly_diagonally_dominant(matrix)
    n = matrix.length.clone
    i = 0.clone
    while i < n
      sum = 0.0.clone
      j = 0.clone
      while j < n
        if i != j
          sum = _add(sum, absf(matrix[i][j])).clone
        end
        j = _add(j, 1).clone
      end
      if absf(matrix[i][i]) <= sum
        panic("Coefficient matrix is not strictly diagonally dominant")
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def jacobi_iteration_method(coefficient, constant, init_val, iterations)
    n = coefficient.length
    if n == 0
      panic("Coefficient matrix cannot be empty")
    end
    if constant.length != n
      panic("Constant vector length must equal number of rows in coefficient matrix")
    end
    if init_val.length != n
      panic("Initial values count must match matrix size")
    end
    r = 0.clone
    while r < n
      if coefficient[r].length != n
        panic("Coefficient matrix must be square")
      end
      r = _add(r, 1).clone
    end
    if iterations <= 0
      panic("Iterations must be at least 1")
    end
    strictly_diagonally_dominant(coefficient)
    x = init_val.clone
    k = 0.clone
    while k < iterations
      new_x = [].clone
      i = 0.clone
      while i < n
        sum = 0.0.clone
        j = 0.clone
        while j < n
          if i != j
            sum = _add(sum, coefficient[i][j] * x[j]).clone
          end
          j = _add(j, 1).clone
        end
        value = (constant[i] - sum) / coefficient[i][i].clone
        new_x = (new_x << (value)).clone
        i = _add(i, 1).clone
      end
      x = new_x.clone
      k = _add(k, 1).clone
    end
    return x
  end
  $coefficient = [[4.0, 1.0, 1.0], [1.0, 5.0, 2.0], [1.0, 2.0, 4.0]]
  $constant = [2.0, -6.0, -4.0]
  $init_val = [0.5, -0.5, -0.5]
  $iterations = 3
  $result = jacobi_iteration_method($coefficient, $constant, $init_val, $iterations)
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
