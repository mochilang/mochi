# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def absf(x)
    return (x < 0.0 ? -x : x)
  end
  def strictly_diagonally_dominant(matrix)
    n = _len(matrix)
    i = 0
    while i < n
      sum = 0.0
      j = 0
      while j < n
        if !_eq(i, j)
          sum = _add(sum, absf((__tmp1 = (__tmp2 = matrix; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j))))
        end
        j = _add(j, 1)
      end
      if absf((__tmp3 = (__tmp4 = matrix; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))) <= sum
        panic("Coefficient matrix is not strictly diagonally dominant")
      end
      i = _add(i, 1)
    end
    return true
  end
  def jacobi_iteration_method(coefficient, constant, init_val, iterations)
    n = _len(coefficient)
    if _eq(n, 0)
      panic("Coefficient matrix cannot be empty")
    end
    if !_eq(_len(constant), n)
      panic("Constant vector length must equal number of rows in coefficient matrix")
    end
    if !_eq(_len(init_val), n)
      panic("Initial values count must match matrix size")
    end
    r = 0
    while r < n
      if !_eq(_len((__tmp5 = coefficient; __tmp5.is_a?(Hash) ? __tmp5[r] : _idx(__tmp5, r))), n)
        panic("Coefficient matrix must be square")
      end
      r = _add(r, 1)
    end
    if iterations <= 0
      panic("Iterations must be at least 1")
    end
    strictly_diagonally_dominant(coefficient)
    x = init_val
    k = 0
    while k < iterations
      new_x = []
      i = 0
      while i < n
        sum = 0.0
        j = 0
        while j < n
          if !_eq(i, j)
            sum = _add(sum, (__tmp6 = (__tmp7 = coefficient; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)); __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)) * (__tmp8 = x; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
          end
          j = _add(j, 1)
        end
        value = ((__tmp9 = constant; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)) - sum) / (__tmp10 = (__tmp11 = coefficient; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)); __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
        new_x = _append(new_x, value)
        i = _add(i, 1)
      end
      x = new_x
      k = _add(k, 1)
    end
    return x
  end
  $coefficient = [[4.0, 1.0, 1.0], [1.0, 5.0, 2.0], [1.0, 2.0, 4.0]]
  $constant = [2.0, -6.0, -4.0]
  $init_val = [0.5, -0.5, -0.5]
  $iterations = 3
  $result = jacobi_iteration_method($coefficient, $constant, $init_val, $iterations)
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
