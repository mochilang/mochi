# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_stack()
    return StackWithQueues.new(main_queue: [], temp_queue: [])
  end
  def push(s, item)
    s["temp_queue"] = (s.temp_queue << item)
    while s.main_queue.length > 0
      s["temp_queue"] = (s.temp_queue << s.main_queue[0])
      s["main_queue"] = s.main_queue[1...s.main_queue.length]
    end
    new_main = s.temp_queue
    s["temp_queue"] = s.main_queue
    s["main_queue"] = new_main
  end
  def pop(s)
    if s.main_queue.length == 0
      panic("pop from empty stack")
    end
    item = s.main_queue[0]
    s["main_queue"] = s.main_queue[1...s.main_queue.length]
    return item
  end
  def peek(s)
    if s.main_queue.length == 0
      panic("peek from empty stack")
    end
    return s.main_queue[0]
  end
  def is_empty(s)
    return s.main_queue.length == 0
  end
  StackWithQueues = Struct.new(:main_queue, :temp_queue, keyword_init: true)
  $stack = make_stack()
  push($stack, 1)
  push($stack, 2)
  push($stack, 3)
  puts((peek($stack)).to_s)
  puts((pop($stack)).to_s)
  puts((peek($stack)).to_s)
  puts((pop($stack)).to_s)
  puts((pop($stack)).to_s)
  puts((is_empty($stack)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
