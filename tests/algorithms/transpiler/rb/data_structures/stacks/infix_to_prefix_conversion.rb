# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def is_alpha(ch)
    i = 0
    while i < $LETTERS.length
      if $LETTERS[i] == ch
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def is_digit(ch)
    i = 0
    while i < $DIGITS.length
      if $DIGITS[i] == ch
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def reverse_string(s)
    out = ""
    i = s.length - 1
    while i >= 0
      out = _add(out, s[i])
      i = i - 1
    end
    return out
  end
  def infix_to_postfix(infix)
    stack = []
    post = []
    i = 0
    while i < infix.length
      x = infix[i]
      if is_alpha(x) || is_digit(x)
        post = (post << x)
      else
        if x == "("
          stack = (stack << x)
        else
          if x == ")"
            if stack.length == 0
              panic("list index out of range")
            end
            while stack[stack.length - 1] != "("
              post = (post << stack[stack.length - 1])
              stack = stack[0...stack.length - 1]
            end
            stack = stack[0...stack.length - 1]
          else
            if stack.length == 0
              stack = (stack << x)
            else
              while stack.length > 0 && stack[stack.length - 1] != "(" && $PRIORITY[x] <= $PRIORITY[stack[stack.length - 1]]
                post = (post << stack[stack.length - 1])
                stack = stack[0...stack.length - 1]
              end
              stack = (stack << x)
            end
          end
        end
      end
      i = _add(i, 1)
    end
    while stack.length > 0
      if stack[stack.length - 1] == "("
        panic("invalid expression")
      end
      post = (post << stack[stack.length - 1])
      stack = stack[0...stack.length - 1]
    end
    res = ""
    j = 0
    while j < post.length
      res = _add(res, post[j])
      j = _add(j, 1)
    end
    return res
  end
  def infix_to_prefix(infix)
    reversed = ""
    i = infix.length - 1
    while i >= 0
      ch = infix[i]
      if ch == "("
        reversed = _add(reversed, ")")
      else
        if ch == ")"
          reversed = _add(reversed, "(")
        else
          reversed = _add(reversed, ch)
        end
      end
      i = i - 1
    end
    postfix = infix_to_postfix(reversed)
    prefix = reverse_string(postfix)
    return prefix
  end
  $PRIORITY = {"^" => 3, "*" => 2, "/" => 2, "%" => 2, "+" => 1, "-" => 1}
  $LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $DIGITS = "0123456789"
  # test simple expression
  raise 'assertion failed' unless infix_to_prefix("a+b^c") == "+a^bc"
  # test complex expression
  raise 'assertion failed' unless infix_to_prefix("1*((-a)*2+b)") == "*1+*-a2b"
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
