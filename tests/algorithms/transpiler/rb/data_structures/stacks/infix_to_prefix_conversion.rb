# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_alpha(ch)
    i = 0
    while i < _len($LETTERS)
      if _eq((__tmp1 = $LETTERS; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), ch)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def is_digit(ch)
    i = 0
    while i < _len($DIGITS)
      if _eq((__tmp2 = $DIGITS; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), ch)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def reverse_string(s)
    out = ""
    i = _len(s) - 1
    while i >= 0
      out = _add(out, (__tmp3 = s; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      i = i - 1
    end
    return out
  end
  def infix_to_postfix(infix)
    stack = []
    post = []
    i = 0
    while i < _len(infix)
      x = (__tmp4 = infix; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      if is_alpha(x) || is_digit(x)
        post = _append(post, x)
      else
        if _eq(x, "(")
          stack = _append(stack, x)
        else
          if _eq(x, ")")
            if _eq(_len(stack), 0)
              panic("list index out of range")
            end
            while !_eq((__tmp5 = stack; __tmp5.is_a?(Hash) ? __tmp5[_len(stack) - 1] : _idx(__tmp5, _len(stack) - 1)), "(")
              post = _append(post, (__tmp6 = stack; __tmp6.is_a?(Hash) ? __tmp6[_len(stack) - 1] : _idx(__tmp6, _len(stack) - 1)))
              stack = stack[0..._len(stack) - 1]
            end
            stack = stack[0..._len(stack) - 1]
          else
            if _eq(_len(stack), 0)
              stack = _append(stack, x)
            else
              while _len(stack) > 0 && !_eq((__tmp7 = stack; __tmp7.is_a?(Hash) ? __tmp7[_len(stack) - 1] : _idx(__tmp7, _len(stack) - 1)), "(") && (__tmp8 = $PRIORITY; __tmp8.is_a?(Hash) ? __tmp8[x] : _idx(__tmp8, x)) <= (__tmp9 = $PRIORITY; __tmp9.is_a?(Hash) ? __tmp9[(__tmp10 = stack; __tmp10.is_a?(Hash) ? __tmp10[_len(stack) - 1] : _idx(__tmp10, _len(stack) - 1))] : _idx(__tmp9, (__tmp11 = stack; __tmp11.is_a?(Hash) ? __tmp11[_len(stack) - 1] : _idx(__tmp11, _len(stack) - 1))))
                post = _append(post, (__tmp12 = stack; __tmp12.is_a?(Hash) ? __tmp12[_len(stack) - 1] : _idx(__tmp12, _len(stack) - 1)))
                stack = stack[0..._len(stack) - 1]
              end
              stack = _append(stack, x)
            end
          end
        end
      end
      i = _add(i, 1)
    end
    while _len(stack) > 0
      if _eq((__tmp13 = stack; __tmp13.is_a?(Hash) ? __tmp13[_len(stack) - 1] : _idx(__tmp13, _len(stack) - 1)), "(")
        panic("invalid expression")
      end
      post = _append(post, (__tmp14 = stack; __tmp14.is_a?(Hash) ? __tmp14[_len(stack) - 1] : _idx(__tmp14, _len(stack) - 1)))
      stack = stack[0..._len(stack) - 1]
    end
    res = ""
    j = 0
    while j < _len(post)
      res = _add(res, (__tmp15 = post; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)))
      j = _add(j, 1)
    end
    return res
  end
  def infix_to_prefix(infix)
    reversed = ""
    i = _len(infix) - 1
    while i >= 0
      ch = (__tmp16 = infix; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i))
      if _eq(ch, "(")
        reversed = _add(reversed, ")")
      else
        if _eq(ch, ")")
          reversed = _add(reversed, "(")
        else
          reversed = _add(reversed, ch)
        end
      end
      i = i - 1
    end
    postfix = infix_to_postfix(reversed)
    prefix = reverse_string(postfix)
    return prefix
  end
  $PRIORITY = {"^" => 3, "*" => 2, "/" => 2, "%" => 2, "+" => 1, "-" => 1}
  $LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $DIGITS = "0123456789"
  # test simple expression
  raise 'assertion failed' unless _eq(infix_to_prefix("a+b^c"), "+a^bc")
  # test complex expression
  raise 'assertion failed' unless _eq(infix_to_prefix("1*((-a)*2+b)"), "*1+*-a2b")
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
