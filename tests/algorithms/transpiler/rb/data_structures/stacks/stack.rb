# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_stack(limit)
    return Stack.new(items: [], limit: limit)
  end
  def is_empty(s)
    return s.items.length == 0
  end
  def size(s)
    return s.items.length
  end
  def is_full(s)
    return s.items.length >= s.limit
  end
  def push(s, item)
    if is_full(s)
      panic("stack overflow")
    end
    s["items"] = (s.items << item)
  end
  def pop(s)
    if is_empty(s)
      panic("stack underflow")
    end
    n = s.items.length
    val = s.items[n - 1]
    s["items"] = s.items[0...n - 1]
    return val
  end
  def peek(s)
    if is_empty(s)
      panic("peek from empty stack")
    end
    return s.items[s.items.length - 1]
  end
  def contains(s, item)
    i = 0
    while i < s.items.length
      if s.items[i] == item
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def stack_repr(s)
    return ((x = s.items); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)
  end
  def main()
    s = make_stack(5)
    puts((is_empty(s)).to_s)
    push(s, 0)
    push(s, 1)
    push(s, 2)
    puts((peek(s)).to_s)
    puts((size(s)).to_s)
    puts((is_full(s)).to_s)
    push(s, 3)
    push(s, 4)
    puts((is_full(s)).to_s)
    puts(stack_repr(s))
    puts((pop(s)).to_s)
    puts((peek(s)).to_s)
    puts((s.include?(1)).to_s)
    puts((s.include?(9)).to_s)
  end
  Stack = Struct.new(:items, :limit, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
