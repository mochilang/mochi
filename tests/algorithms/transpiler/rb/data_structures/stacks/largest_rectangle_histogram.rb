# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def largest_rectangle_area(heights)
    stack = []
    max_area = 0
    hs = heights
    hs = (hs << 0)
    i = 0
    while i < hs.length
      while stack.length > 0 && hs[i] < hs[stack[stack.length - 1]]
        top = stack[stack.length - 1]
        stack = stack[0...stack.length - 1]
        height = hs[top]
        width = i
        if stack.length > 0
          width = i - stack[stack.length - 1] - 1
        end
        area = height * width
        if area > max_area
          max_area = area
        end
      end
      stack = (stack << i)
      i = _add(i, 1)
    end
    return max_area
  end
  puts((largest_rectangle_area([2, 1, 5, 6, 2, 3])).to_s)
  puts((largest_rectangle_area([2, 4])).to_s)
  puts((largest_rectangle_area([6, 2, 5, 4, 5, 1, 6])).to_s)
  puts((largest_rectangle_area([1])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
