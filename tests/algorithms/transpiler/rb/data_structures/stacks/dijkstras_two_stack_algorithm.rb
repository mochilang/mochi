# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_digit(ch)
    return _eq(ch, "0") || _eq(ch, "1") || _eq(ch, "2") || _eq(ch, "3") || _eq(ch, "4") || _eq(ch, "5") || _eq(ch, "6") || _eq(ch, "7") || _eq(ch, "8") || _eq(ch, "9")
  end
  def slice_without_last_int(xs)
    res = []
    i = 0
    while i < _len(xs) - 1
      res = _append(res, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return res
  end
  def slice_without_last_string(xs)
    res = []
    i = 0
    while i < _len(xs) - 1
      res = _append(res, (__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return res
  end
  def dijkstras_two_stack_algorithm(equation)
    operand_stack = []
    operator_stack = []
    idx = 0
    while idx < _len(equation)
      ch = equation[idx..._add(idx, 1)]
      if is_digit(ch)
        operand_stack = _append(operand_stack, (ch).to_i)
      else
        if _eq(ch, "+") || _eq(ch, "-") || _eq(ch, "*") || _eq(ch, "/")
          operator_stack = _append(operator_stack, ch)
        else
          if _eq(ch, ")")
            opr = (__tmp3 = operator_stack; __tmp3.is_a?(Hash) ? __tmp3[_len(operator_stack) - 1] : _idx(__tmp3, _len(operator_stack) - 1))
            operator_stack = slice_without_last_string(operator_stack)
            num1 = (__tmp4 = operand_stack; __tmp4.is_a?(Hash) ? __tmp4[_len(operand_stack) - 1] : _idx(__tmp4, _len(operand_stack) - 1))
            operand_stack = slice_without_last_int(operand_stack)
            num2 = (__tmp5 = operand_stack; __tmp5.is_a?(Hash) ? __tmp5[_len(operand_stack) - 1] : _idx(__tmp5, _len(operand_stack) - 1))
            operand_stack = slice_without_last_int(operand_stack)
            total = (_eq(opr, "+") ? _add(num2, num1) : (_eq(opr, "-") ? num2 - num1 : (_eq(opr, "*") ? num2 * num1 : num2 / num1)))
            operand_stack = _append(operand_stack, total)
          end
        end
      end
      idx = _add(idx, 1)
    end
    return (__tmp6 = operand_stack; __tmp6.is_a?(Hash) ? __tmp6[_len(operand_stack) - 1] : _idx(__tmp6, _len(operand_stack) - 1))
  end
  $equation = "(5 + ((4 * 2) * (2 + 3)))"
  puts(_add(_add($equation, " = "), _str(dijkstras_two_stack_algorithm($equation))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
