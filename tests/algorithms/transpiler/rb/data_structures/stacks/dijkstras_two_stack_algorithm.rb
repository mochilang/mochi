# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def is_digit(ch)
    return ch == "0" || ch == "1" || ch == "2" || ch == "3" || ch == "4" || ch == "5" || ch == "6" || ch == "7" || ch == "8" || ch == "9"
  end
  def slice_without_last_int(xs)
    res = []
    i = 0
    while i < xs.length - 1
      res = (res << xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def slice_without_last_string(xs)
    res = []
    i = 0
    while i < xs.length - 1
      res = (res << xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def dijkstras_two_stack_algorithm(equation)
    operand_stack = []
    operator_stack = []
    idx = 0
    while idx < equation.length
      ch = equation[idx..._add(idx, 1)]
      if is_digit(ch)
        operand_stack = (operand_stack << (ch).to_i)
      else
        if ch == "+" || ch == "-" || ch == "*" || ch == "/"
          operator_stack = (operator_stack << ch)
        else
          if ch == ")"
            opr = operator_stack[operator_stack.length - 1]
            operator_stack = slice_without_last_string(operator_stack)
            num1 = operand_stack[operand_stack.length - 1]
            operand_stack = slice_without_last_int(operand_stack)
            num2 = operand_stack[operand_stack.length - 1]
            operand_stack = slice_without_last_int(operand_stack)
            total = (opr == "+" ? _add(num2, num1) : (opr == "-" ? num2 - num1 : (opr == "*" ? num2 * num1 : num2 / num1)))
            operand_stack = (operand_stack << total)
          end
        end
      end
      idx = _add(idx, 1)
    end
    return operand_stack[operand_stack.length - 1]
  end
  $equation = "(5 + ((4 * 2) * (2 + 3)))"
  puts(_add(_add($equation, " = "), (dijkstras_two_stack_algorithm($equation)).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
