# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def precedence(ch)
    if $PRECEDENCES.include?(ch)
      return $PRECEDENCES[ch]
    end
    return -1
  end
  def associativity(ch)
    if $ASSOCIATIVITIES.include?(ch)
      return $ASSOCIATIVITIES[ch]
    end
    return ""
  end
  def balanced_parentheses(expr)
    count = 0
    i = 0
    while i < expr.length
      ch = expr[i..._add(i, 1)]
      if ch == "("
        count = _add(count, 1)
      end
      if ch == ")"
        count = count - 1
        if count < 0
          return false
        end
      end
      i = _add(i, 1)
    end
    return count == 0
  end
  def is_letter(ch)
    return ("a" <= ch && ch <= "z") || ("A" <= ch && ch <= "Z")
  end
  def is_digit(ch)
    return "0" <= ch && ch <= "9"
  end
  def is_alnum(ch)
    return is_letter(ch) || is_digit(ch)
  end
  def infix_to_postfix(expression)
    if balanced_parentheses(expression) == false
      panic("Mismatched parentheses")
    end
    stack = []
    postfix = []
    i = 0
    while i < expression.length
      ch = expression[i..._add(i, 1)]
      if is_alnum(ch)
        postfix = (postfix << ch)
      else
        if ch == "("
          stack = (stack << ch)
        else
          if ch == ")"
            while stack.length > 0 && stack[stack.length - 1] != "("
              postfix = (postfix << stack[stack.length - 1])
              stack = stack[0...stack.length - 1]
            end
            if stack.length > 0
              stack = stack[0...stack.length - 1]
            end
          else
            if ch == " "
            else
              while true
                if stack.length == 0
                  stack = (stack << ch)
                  break
                end
                cp = precedence(ch)
                tp = precedence(stack[stack.length - 1])
                if cp > tp
                  stack = (stack << ch)
                  break
                end
                if cp < tp
                  postfix = (postfix << stack[stack.length - 1])
                  stack = stack[0...stack.length - 1]
                  next
                end
                if associativity(ch) == "RL"
                  stack = (stack << ch)
                  break
                end
                postfix = (postfix << stack[stack.length - 1])
                stack = stack[0...stack.length - 1]
              end
            end
          end
        end
      end
      i = _add(i, 1)
    end
    while stack.length > 0
      postfix = (postfix << stack[stack.length - 1])
      stack = stack[0...stack.length - 1]
    end
    res = ""
    j = 0
    while j < postfix.length
      if j > 0
        res = _add(res, " ")
      end
      res = _add(res, postfix[j])
      j = _add(j, 1)
    end
    return res
  end
  def main()
    expression = "a+b*(c^d-e)^(f+g*h)-i"
    puts(expression)
    puts(infix_to_postfix(expression))
  end
  $PRECEDENCES = {"+" => 1, "-" => 1, "*" => 2, "/" => 2, "^" => 3}
  $ASSOCIATIVITIES = {"+" => "LR", "-" => "LR", "*" => "LR", "/" => "LR", "^" => "RL"}
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
