# Generated by Mochi transpiler v0.10.72 on 2025-08-24 16:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def next_greatest_element_slow(xs)
    res = []
    i = 0
    while i < _len(xs)
      next_ = -1.0
      j = _add(i, 1)
      while j < _len(xs)
        if (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) < (__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
          next_ = (__tmp3 = xs; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
          break
        end
        j = _add(j, 1)
      end
      res = _append(res, next_)
      i = _add(i, 1)
    end
    return res
  end
  def next_greatest_element_fast(xs)
    res = []
    i = 0
    while i < _len(xs)
      next_ = -1.0
      j = _add(i, 1)
      while j < _len(xs)
        inner = (__tmp4 = xs; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))
        if (__tmp5 = xs; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)) < inner
          next_ = inner
          break
        end
        j = _add(j, 1)
      end
      res = _append(res, next_)
      i = _add(i, 1)
    end
    return res
  end
  def set_at_float(xs, idx, value)
    i = 0
    res = []
    while i < _len(xs)
      if _eq(i, idx)
        res = _append(res, value)
      else
        res = _append(res, (__tmp6 = xs; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def next_greatest_element(xs)
    res = []
    k = 0
    while k < _len(xs)
      res = _append(res, -1.0)
      k = _add(k, 1)
    end
    stack = []
    i = 0
    while i < _len(xs)
      while _len(stack) > 0 && (__tmp7 = xs; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)) > (__tmp8 = xs; __tmp8.is_a?(Hash) ? __tmp8[(__tmp9 = stack; __tmp9.is_a?(Hash) ? __tmp9[_len(stack) - 1] : _idx(__tmp9, _len(stack) - 1))] : _idx(__tmp8, (__tmp10 = stack; __tmp10.is_a?(Hash) ? __tmp10[_len(stack) - 1] : _idx(__tmp10, _len(stack) - 1))))
        idx = (__tmp11 = stack; __tmp11.is_a?(Hash) ? __tmp11[_len(stack) - 1] : _idx(__tmp11, _len(stack) - 1))
        stack = stack[0..._len(stack) - 1]
        res = set_at_float(res, idx, (__tmp12 = xs; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)))
      end
      stack = _append(stack, i)
      i = _add(i, 1)
    end
    return res
  end
  $arr = [-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0]
  $expected = [-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0]
  puts(((x = next_greatest_element_slow($arr)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = next_greatest_element_fast($arr)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = next_greatest_element($arr)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
