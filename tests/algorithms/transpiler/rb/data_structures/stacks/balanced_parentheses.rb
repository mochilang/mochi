# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pop_last(xs)
    res = []
    i = 0
    while i < xs.length - 1
      res = (res << xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def balanced_parentheses(s)
    stack = []
    pairs = {"(" => ")", "[" => "]", "{" => "}"}
    i = 0
    while i < s.length
      ch = s[i]
      if pairs.include?(ch)
        stack = (stack << ch)
      else
        if ch == ")" || ch == "]" || ch == "}"
          if stack.length == 0
            return false
          end
          top = stack[stack.length - 1]
          if pairs[top] != ch
            return false
          end
          stack = pop_last(stack)
        end
      end
      i = _add(i, 1)
    end
    return stack.length == 0
  end
  $tests = ["([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""]
  $idx = 0
  while $idx < $tests.length
    puts((balanced_parentheses($tests[$idx]) ? 'true' : 'false'))
    $idx = _add($idx, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
