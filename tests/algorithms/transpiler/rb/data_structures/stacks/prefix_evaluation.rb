# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == sep
        res = (res << current)
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = (res << current)
    return res
  end
  def tokenize(s)
    parts = split(s, " ")
    res = []
    i = 0
    while i < parts.length
      p = parts[i]
      if p != ""
        res = (res << p)
      end
      i = _add(i, 1)
    end
    return res
  end
  def is_digit(ch)
    return ch >= "0" && ch <= "9"
  end
  def is_operand(token)
    if token == ""
      return false
    end
    i = 0
    while i < token.length
      ch = token[i..._add(i, 1)]
      if !is_digit(ch)
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def to_int(token)
    res = 0
    i = 0
    while i < token.length
      res = _add(res * 10, ((token[i..._add(i, 1)]).to_i))
      i = _add(i, 1)
    end
    return res
  end
  def apply_op(op, a, b)
    if op == "+"
      return _add(a, b)
    end
    if op == "-"
      return a - b
    end
    if op == "*"
      return a * b
    end
    if op == "/"
      return a / b
    end
    return 0.0
  end
  def evaluate(expression)
    tokens = tokenize(expression)
    stack = []
    i = tokens.length - 1
    while i >= 0
      token = tokens[i]
      if token != ""
        if is_operand(token)
          stack = (stack << ((to_int(token)).to_f))
        else
          o1 = stack[stack.length - 1]
          o2 = stack[stack.length - 2]
          stack = stack[0...stack.length - 2]
          res = apply_op(token, o1, o2)
          stack = (stack << res)
        end
      end
      i = i - 1
    end
    return stack[0]
  end
  def eval_rec(tokens, pos)
    token = tokens[pos]
    next_ = _add(pos, 1)
    if is_operand(token)
      return [((to_int(token)).to_f), ((next_).to_f)]
    end
    left = eval_rec(tokens, next_)
    a = left[0]
    p1 = (left[1]).to_i
    right = eval_rec(tokens, p1)
    b = right[0]
    p2 = right[1]
    return [apply_op(token, a, b), p2]
  end
  def evaluate_recursive(expression)
    tokens = tokenize(expression)
    res = eval_rec(tokens, 0)
    return res[0]
  end
  $test_expression = "+ 9 * 2 6"
  puts((evaluate($test_expression)).to_s)
  $test_expression2 = "/ * 10 2 + 4 1 "
  puts((evaluate($test_expression2)).to_s)
  $test_expression3 = "+ * 2 3 / 8 4"
  puts((evaluate_recursive($test_expression3)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
