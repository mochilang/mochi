# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def split_custom(s, sep)
    res = []
    current = ""
    i = 0
    while i < _len(s)
      ch = s[i..._add(i, 1)]
      if _eq(ch, sep)
        res = _append(res, current)
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = _append(res, current)
    return res
  end
  def tokenize(s)
    parts = split_custom(s, " ")
    res = []
    i = 0
    while i < _len(parts)
      p = (__tmp1 = parts; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      if !_eq(p, "")
        res = _append(res, p)
      end
      i = _add(i, 1)
    end
    return res
  end
  def is_digit(ch)
    return ch >= "0" && ch <= "9"
  end
  def is_operand(token)
    if _eq(token, "")
      return false
    end
    i = 0
    while i < _len(token)
      ch = token[i..._add(i, 1)]
      if !is_digit(ch)
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def to_int(token)
    res = 0
    i = 0
    while i < _len(token)
      res = _add(res * 10, ((token[i..._add(i, 1)]).to_i))
      i = _add(i, 1)
    end
    return res
  end
  def apply_op(op, a, b)
    if _eq(op, "+")
      return _add(a, b)
    end
    if _eq(op, "-")
      return a - b
    end
    if _eq(op, "*")
      return a * b
    end
    if _eq(op, "/")
      return a / b
    end
    return 0.0
  end
  def evaluate(expression)
    tokens = tokenize(expression)
    stack = []
    i = _len(tokens) - 1
    while i >= 0
      token = (__tmp2 = tokens; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      if !_eq(token, "")
        if is_operand(token)
          stack = _append(stack, ((to_int(token)).to_f))
        else
          o1 = (__tmp3 = stack; __tmp3.is_a?(Hash) ? __tmp3[_len(stack) - 1] : _idx(__tmp3, _len(stack) - 1))
          o2 = (__tmp4 = stack; __tmp4.is_a?(Hash) ? __tmp4[_len(stack) - 2] : _idx(__tmp4, _len(stack) - 2))
          stack = stack[0..._len(stack) - 2]
          res = apply_op(token, o1, o2)
          stack = _append(stack, res)
        end
      end
      i = i - 1
    end
    return (__tmp5 = stack; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
  end
  def eval_rec(tokens, pos)
    token = (__tmp6 = tokens; __tmp6.is_a?(Hash) ? __tmp6[pos] : _idx(__tmp6, pos))
    next_ = _add(pos, 1)
    if is_operand(token)
      return [((to_int(token)).to_f), ((next_).to_f)]
    end
    left = eval_rec(tokens, next_)
    a = (__tmp7 = left; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
    p1 = ((__tmp8 = left; __tmp8.is_a?(Hash) ? __tmp8[1] : _idx(__tmp8, 1))).to_i
    right = eval_rec(tokens, p1)
    b = (__tmp9 = right; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0))
    p2 = (__tmp10 = right; __tmp10.is_a?(Hash) ? __tmp10[1] : _idx(__tmp10, 1))
    return [apply_op(token, a, b), p2]
  end
  def evaluate_recursive(expression)
    tokens = tokenize(expression)
    res = eval_rec(tokens, 0)
    return (__tmp11 = res; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0))
  end
  $test_expression = "+ 9 * 2 6"
  puts(_str(evaluate($test_expression)))
  $test_expression2 = "/ * 10 2 + 4 1 "
  puts(_str(evaluate($test_expression2)))
  $test_expression3 = "+ * 2 3 / 8 4"
  puts(_str(evaluate_recursive($test_expression3)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
