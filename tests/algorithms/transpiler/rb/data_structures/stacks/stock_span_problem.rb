# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def calculation_span(price)
    n = price.length
    st = []
    span = []
    st = (st << 0)
    span = (span << 1)
    (1...n).each do |i|
      while st.length > 0 && price[st[st.length - 1]] <= price[i]
        st = st[0...st.length - 1]
      end
      s = (st.length <= 0 ? _add(i, 1) : i - st[st.length - 1])
      span = (span << s)
      st = (st << i)
    end
    return span
  end
  def print_array(arr)
    (0...arr.length).each do |i|
      puts(arr[i])
    end
  end
  $price = [10, 4, 5, 90, 120, 80]
  $spans = calculation_span($price)
  print_array($spans)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
