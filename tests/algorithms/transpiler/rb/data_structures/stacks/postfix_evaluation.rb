# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def slice_without_last(xs)
    res = []
    i = 0
    while i < xs.length - 1
      res = (res << xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def parse_float(token)
    sign = 1.0
    idx = 0
    if token.length > 0
      first = token[0...1]
      if first == "-"
        sign = -1.0
        idx = 1
      else
        if first == "+"
          idx = 1
        end
      end
    end
    int_part = 0
    while idx < token.length && token[idx..._add(idx, 1)] != "."
      int_part = _add(int_part * 10, (token[idx..._add(idx, 1)]).to_i)
      idx = _add(idx, 1)
    end
    result = 1.0 * int_part
    if idx < token.length && token[idx..._add(idx, 1)] == "."
      idx = _add(idx, 1)
      place = 0.1
      while idx < token.length
        digit = (token[idx..._add(idx, 1)]).to_i
        result = _add(result, place * (1.0 * digit))
        place = place / 10.0
        idx = _add(idx, 1)
      end
    end
    return sign * result
  end
  def pow_float(base, exp)
    result = 1.0
    i = 0
    e = (exp).to_i
    while i < e
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def apply_op(a, b, op)
    if op == "+"
      return _add(a, b)
    end
    if op == "-"
      return a - b
    end
    if op == "*"
      return a * b
    end
    if op == "/"
      return a / b
    end
    if op == "^"
      return pow_float(a, b)
    end
    return 0.0
  end
  def evaluate(tokens)
    if tokens.length == 0
      return 0.0
    end
    stack = []
        __tmp1 = tokens
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |token|
      if token == "+" || token == "-" || token == "*" || token == "/" || token == "^"
        if (token == "+" || token == "-") && stack.length < 2
          b = stack[stack.length - 1]
          stack = slice_without_last(stack)
          if token == "-"
            stack = (stack << 0.0 - b)
          else
            stack = (stack << b)
          end
        else
          b = stack[stack.length - 1]
          stack = slice_without_last(stack)
          a = stack[stack.length - 1]
          stack = slice_without_last(stack)
          result = apply_op(a, b, token)
          stack = (stack << result)
        end
      else
        stack = (stack << parse_float(token))
      end
    end
    if stack.length != 1
      panic("Invalid postfix expression")
    end
    return stack[0]
  end
  puts((evaluate(["2", "1", "+", "3", "*"])).to_s)
  puts((evaluate(["4", "13", "5", "/", "+"])).to_s)
  puts((evaluate(["5", "6", "9", "*", "+"])).to_s)
  puts((evaluate(["2", "-", "3", "+"])).to_s)
  puts((evaluate([])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
