# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def slice_without_last(xs)
    res = []
    i = 0
    while i < _len(xs) - 1
      res = _append(res, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return res
  end
  def parse_float(token)
    sign = 1.0
    idx = 0
    if _len(token) > 0
      first = token[0...1]
      if _eq(first, "-")
        sign = -1.0
        idx = 1
      else
        if _eq(first, "+")
          idx = 1
        end
      end
    end
    int_part = 0
    while idx < _len(token) && !_eq(token[idx..._add(idx, 1)], ".")
      int_part = _add(int_part * 10, (token[idx..._add(idx, 1)]).to_i)
      idx = _add(idx, 1)
    end
    result = 1.0 * int_part
    if idx < _len(token) && _eq(token[idx..._add(idx, 1)], ".")
      idx = _add(idx, 1)
      place = 0.1
      while idx < _len(token)
        digit = (token[idx..._add(idx, 1)]).to_i
        result = _add(result, place * (1.0 * digit))
        place = place / 10.0
        idx = _add(idx, 1)
      end
    end
    return sign * result
  end
  def pow_float(base, exp)
    result = 1.0
    i = 0
    e = (exp).to_i
    while i < e
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def apply_op(a, b, op)
    if _eq(op, "+")
      return _add(a, b)
    end
    if _eq(op, "-")
      return a - b
    end
    if _eq(op, "*")
      return a * b
    end
    if _eq(op, "/")
      return a / b
    end
    if _eq(op, "^")
      return pow_float(a, b)
    end
    return 0.0
  end
  def evaluate(tokens)
    if _eq(_len(tokens), 0)
      return 0.0
    end
    stack = []
        __tmp2 = tokens
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |token|
      if _eq(token, "+") || _eq(token, "-") || _eq(token, "*") || _eq(token, "/") || _eq(token, "^")
        if (_eq(token, "+") || _eq(token, "-")) && _len(stack) < 2
          b = (__tmp3 = stack; __tmp3.is_a?(Hash) ? __tmp3[_len(stack) - 1] : _idx(__tmp3, _len(stack) - 1))
          stack = slice_without_last(stack)
          if _eq(token, "-")
            stack = _append(stack, 0.0 - b)
          else
            stack = _append(stack, b)
          end
        else
          b = (__tmp4 = stack; __tmp4.is_a?(Hash) ? __tmp4[_len(stack) - 1] : _idx(__tmp4, _len(stack) - 1))
          stack = slice_without_last(stack)
          a = (__tmp5 = stack; __tmp5.is_a?(Hash) ? __tmp5[_len(stack) - 1] : _idx(__tmp5, _len(stack) - 1))
          stack = slice_without_last(stack)
          result = apply_op(a, b, token)
          stack = _append(stack, result)
        end
      else
        stack = _append(stack, parse_float(token))
      end
    end
    if !_eq(_len(stack), 1)
      panic("Invalid postfix expression")
    end
    return (__tmp6 = stack; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0))
  end
  puts(_str(evaluate(["2", "1", "+", "3", "*"])))
  puts(_str(evaluate(["4", "13", "5", "/", "+"])))
  puts(_str(evaluate(["5", "6", "9", "*", "+"])))
  puts(_str(evaluate(["2", "-", "3", "+"])))
  puts(_str(evaluate([])))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
