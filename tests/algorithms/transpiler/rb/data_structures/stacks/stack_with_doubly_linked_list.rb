# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_stack()
    return Stack.new(nodes: [], head: 0 - 1)
  end
  def push(stack, value)
    nodes = stack.nodes
    idx = nodes.length
    new_node = Node.new(data: value, next_: stack.head, prev: 0 - 1)
    nodes = (nodes << new_node)
    if stack.head != 0 - 1
      head_node = nodes[stack.head]
      head_node["prev"] = idx
      nodes[stack.head] = head_node
    end
    return Stack.new(nodes: nodes, head: idx)
  end
  def pop(stack)
    if stack.head == 0 - 1
      return PopResult.new(stack: stack, value: 0, ok: false)
    end
    nodes = stack.nodes
    head_node = nodes[stack.head]
    value = head_node.data
    next_idx = head_node.next_
    if next_idx != 0 - 1
      next_node = nodes[next_idx]
      next_node["prev"] = 0 - 1
      nodes[next_idx] = next_node
    end
    new_stack = Stack.new(nodes: nodes, head: next_idx)
    return PopResult.new(stack: new_stack, value: value, ok: true)
  end
  def top(stack)
    if stack.head == 0 - 1
      return TopResult.new(value: 0, ok: false)
    end
    node = stack.nodes[stack.head]
    return TopResult.new(value: node.data, ok: true)
  end
  def size(stack)
    count = 0
    idx = stack.head
    while idx != 0 - 1
      count = _add(count, 1)
      node = stack.nodes[idx]
      idx = node.next_
    end
    return count
  end
  def is_empty(stack)
    return stack.head == 0 - 1
  end
  def print_stack(stack)
    puts("stack elements are:")
    idx = stack.head
    s = ""
    while idx != 0 - 1
      node = stack.nodes[idx]
      s = _add(_add(s, (node.data).to_s), "->")
      idx = node.next_
    end
    if s.length > 0
      puts(s)
    end
  end
  def main()
    stack = empty_stack()
    puts("Stack operations using Doubly LinkedList")
    stack = push(stack, 4)
    stack = push(stack, 5)
    stack = push(stack, 6)
    stack = push(stack, 7)
    print_stack(stack)
    t = top(stack)
    if t.ok
      puts(_add("Top element is ", (t.value).to_s))
    else
      puts("Top element is None")
    end
    puts(_add("Size of the stack is ", (size(stack)).to_s))
    p = pop(stack)
    stack = p.stack
    p = pop(stack)
    stack = p.stack
    print_stack(stack)
    puts(_add("stack is empty: ", (is_empty(stack)).to_s))
  end
  Node = Struct.new(:data, :next_, :prev, keyword_init: true)
  Stack = Struct.new(:nodes, :head, keyword_init: true)
  PopResult = Struct.new(:stack, :value, :ok, keyword_init: true)
  TopResult = Struct.new(:value, :ok, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
