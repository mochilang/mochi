# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def empty_stack()
    return Stack.new(nodes: [], head: 0 - 1)
  end
  def push(stack, value)
    nodes = stack.nodes
    idx = _len(nodes)
    new_node = Node.new(data: value, next_: stack.head, prev: 0 - 1)
    nodes = _append(nodes, new_node)
    if !_eq(stack.head, 0 - 1)
      head_node = (__tmp1 = nodes; __tmp1.is_a?(Hash) ? __tmp1[stack.head] : _idx(__tmp1, stack.head))
      head_node.prev = idx
      nodes[stack.head] = head_node
    end
    return Stack.new(nodes: nodes, head: idx)
  end
  def pop(stack)
    if _eq(stack.head, 0 - 1)
      return PopResult.new(stack: stack, value: 0, ok: false)
    end
    nodes = stack.nodes
    head_node = (__tmp2 = nodes; __tmp2.is_a?(Hash) ? __tmp2[stack.head] : _idx(__tmp2, stack.head))
    value = head_node.data
    next_idx = head_node.next_
    if !_eq(next_idx, 0 - 1)
      next_node = (__tmp3 = nodes; __tmp3.is_a?(Hash) ? __tmp3[next_idx] : _idx(__tmp3, next_idx))
      next_node.prev = 0 - 1
      nodes[next_idx] = next_node
    end
    new_stack = Stack.new(nodes: nodes, head: next_idx)
    return PopResult.new(stack: new_stack, value: value, ok: true)
  end
  def top(stack)
    if _eq(stack.head, 0 - 1)
      return TopResult.new(value: 0, ok: false)
    end
    node = (__tmp4 = stack.nodes; __tmp4.is_a?(Hash) ? __tmp4[stack.head] : _idx(__tmp4, stack.head))
    return TopResult.new(value: node.data, ok: true)
  end
  def size(stack)
    count = 0
    idx = stack.head
    while !_eq(idx, 0 - 1)
      count = _add(count, 1)
      node = (__tmp5 = stack.nodes; __tmp5.is_a?(Hash) ? __tmp5[idx] : _idx(__tmp5, idx))
      idx = node.next_
    end
    return count
  end
  def is_empty(stack)
    return _eq(stack.head, 0 - 1)
  end
  def print_stack(stack)
    puts("stack elements are:")
    idx = stack.head
    s = ""
    while !_eq(idx, 0 - 1)
      node = (__tmp6 = stack.nodes; __tmp6.is_a?(Hash) ? __tmp6[idx] : _idx(__tmp6, idx))
      s = _add(_add(s, _str(node.data)), "->")
      idx = node.next_
    end
    if _len(s) > 0
      puts(s)
    end
  end
  def main()
    stack = empty_stack()
    puts("Stack operations using Doubly LinkedList")
    stack = push(stack, 4)
    stack = push(stack, 5)
    stack = push(stack, 6)
    stack = push(stack, 7)
    print_stack(stack)
    t = top(stack)
    if t.ok
      puts(_add("Top element is ", _str(t.value)))
    else
      puts("Top element is None")
    end
    puts(_add("Size of the stack is ", _str(size(stack))))
    p = pop(stack)
    stack = p.stack
    p = pop(stack)
    stack = p.stack
    print_stack(stack)
    puts(_add("stack is empty: ", _str(is_empty(stack))))
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:data, :next_, :prev, keyword_init: true))
  Object.send(:remove_const, :Stack) if Object.const_defined?(:Stack)
  Object.const_set(:Stack, Struct.new(:nodes, :head, keyword_init: true))
  Object.send(:remove_const, :PopResult) if Object.const_defined?(:PopResult)
  Object.const_set(:PopResult, Struct.new(:stack, :value, :ok, keyword_init: true))
  Object.send(:remove_const, :TopResult) if Object.const_defined?(:TopResult)
  Object.const_set(:TopResult, Struct.new(:value, :ok, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
