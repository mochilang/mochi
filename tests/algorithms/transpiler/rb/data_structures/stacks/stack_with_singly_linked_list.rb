# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_stack()
    return Stack.new(nodes: [], top: (-1))
  end
  def is_empty(stack)
    return stack.top == (-1)
  end
  def push(stack, item)
    new_node = Node.new(value: item, next_: stack.top)
    new_nodes = stack.nodes
    new_nodes = (new_nodes << new_node)
    new_top = new_nodes.length - 1
    return Stack.new(nodes: new_nodes, top: new_top)
  end
  def pop(stack)
    if stack.top == (-1)
      panic("pop from empty stack")
    end
    node = (stack.nodes[stack.top])
    new_top = node.next_
    new_stack = Stack.new(nodes: stack.nodes, top: new_top)
    return PopResult.new(stack: new_stack, value: node.value)
  end
  def peek(stack)
    if stack.top == (-1)
      panic("peek from empty stack")
    end
    node = (stack.nodes[stack.top])
    return node.value
  end
  def clear(stack)
    return Stack.new(nodes: [], top: (-1))
  end
  def main()
    stack = empty_stack()
    puts((is_empty(stack) ? 'true' : 'false'))
    stack = push(stack, "5")
    stack = push(stack, "9")
    stack = push(stack, "python")
    puts((is_empty(stack) ? 'true' : 'false'))
    res = pop(stack)
    stack = res.stack
    puts(res.value)
    stack = push(stack, "algorithms")
    res = pop(stack)
    stack = res.stack
    puts(res.value)
    res = pop(stack)
    stack = res.stack
    puts(res.value)
    res = pop(stack)
    stack = res.stack
    puts(res.value)
    puts((is_empty(stack) ? 'true' : 'false'))
  end
  Node = Struct.new(:value, :next_, keyword_init: true)
  Stack = Struct.new(:nodes, :top, keyword_init: true)
  PopResult = Struct.new(:stack, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
