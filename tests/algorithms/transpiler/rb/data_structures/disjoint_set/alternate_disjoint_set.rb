# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def max_list(xs)
    m = xs[0]
    i = 1
    while i < xs.length
      if xs[i] > m
        m = xs[i]
      end
      i = _add(i, 1)
    end
    return m
  end
  def disjoint_set_new(set_counts)
    max_set = max_list(set_counts)
    num_sets = set_counts.length
    ranks = []
    parents = []
    i = 0
    while i < num_sets
      ranks = (ranks << 1)
      parents = (parents << i)
      i = _add(i, 1)
    end
    return DisjointSet.new(set_counts: set_counts, max_set: max_set, ranks: ranks, parents: parents)
  end
  def get_parent(ds, idx)
    if ds.parents[idx] == idx
      return idx
    end
    parents = ds.parents
    parents[idx] = get_parent(ds, parents[idx])
    ds["parents"] = parents
    return ds.parents[idx]
  end
  def merge(ds, src, dst)
    src_parent = get_parent(ds, src)
    dst_parent = get_parent(ds, dst)
    if src_parent == dst_parent
      return false
    end
    if ds.ranks[dst_parent] >= ds.ranks[src_parent]
      counts = ds.set_counts
      counts[dst_parent] = _add(counts[dst_parent], counts[src_parent])
      counts[src_parent] = 0
      ds["set_counts"] = counts
      parents = ds.parents
      parents[src_parent] = dst_parent
      ds["parents"] = parents
      if ds.ranks[dst_parent] == ds.ranks[src_parent]
        ranks = ds.ranks
        ranks[dst_parent] = _add(ranks[dst_parent], 1)
        ds["ranks"] = ranks
      end
      joined = ds.set_counts[dst_parent]
      if joined > ds.max_set
        ds["max_set"] = joined
      end
    else
      counts = ds.set_counts
      counts[src_parent] = _add(counts[src_parent], counts[dst_parent])
      counts[dst_parent] = 0
      ds["set_counts"] = counts
      parents = ds.parents
      parents[dst_parent] = src_parent
      ds["parents"] = parents
      joined = ds.set_counts[src_parent]
      if joined > ds.max_set
        ds["max_set"] = joined
      end
    end
    return true
  end
  DisjointSet = Struct.new(:set_counts, :max_set, :ranks, :parents, keyword_init: true)
  $ds = disjoint_set_new([1, 1, 1])
  puts((merge($ds, 1, 2) ? 'true' : 'false'))
  puts((merge($ds, 0, 2) ? 'true' : 'false'))
  puts((merge($ds, 0, 1) ? 'true' : 'false'))
  puts(get_parent($ds, 0))
  puts(get_parent($ds, 1))
  puts($ds.max_set)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
