# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_set(ds, x)
    p = ds.parent
    r = ds.rank
    p[x] = x
    r[x] = 0
    return DS.new(parent: p, rank: r)
  end
  def find_set(ds, x)
    if ds.parent[x] == x
      return FindResult.new(ds: ds, root: x)
    end
    res = find_set(ds, ds.parent[x])
    p = res.ds.parent
    p[x] = res.root
    return FindResult.new(ds: DS.new(parent: p, rank: res.ds.rank), root: res.root)
  end
  def union_set(ds, x, y)
    fx = find_set(ds, x)
    ds1 = fx.ds
    x_root = fx.root
    fy = find_set(ds1, y)
    ds2 = fy.ds
    y_root = fy.root
    if x_root == y_root
      return ds2
    end
    p = ds2.parent
    r = ds2.rank
    if r[x_root] > r[y_root]
      p[y_root] = x_root
    else
      p[x_root] = y_root
      if r[x_root] == r[y_root]
        r[y_root] = _add(r[y_root], 1)
      end
    end
    return DS.new(parent: p, rank: r)
  end
  def same_python_set(a, b)
    if a < 3 && b < 3
      return true
    end
    if a >= 3 && a < 6 && b >= 3 && b < 6
      return true
    end
    return false
  end
  DS = Struct.new(:parent, :rank, keyword_init: true)
  FindResult = Struct.new(:ds, :root, keyword_init: true)
  $ds = DS.new(parent: [], rank: [])
  $i = 0
  while $i < 6
    $ds["parent"] = ($ds.parent << 0)
    $ds["rank"] = ($ds.rank << 0)
    $ds = make_set($ds, $i)
    $i = _add($i, 1)
  end
  $ds = union_set($ds, 0, 1)
  $ds = union_set($ds, 1, 2)
  $ds = union_set($ds, 3, 4)
  $ds = union_set($ds, 3, 5)
  $i = 0
  while $i < 6
    j = 0
    while j < 6
      res_i = find_set($ds, $i)
      $ds = res_i.ds
      root_i = res_i.root
      res_j = find_set($ds, j)
      $ds = res_j.ds
      root_j = res_j.root
      same = same_python_set($i, j)
      root_same = root_i == root_j
      if same
        if !root_same
          panic("nodes should be in same set")
        end
      else
        if root_same
          panic("nodes should be in different sets")
        end
      end
      j = _add(j, 1)
    end
    $i = _add($i, 1)
  end
  $i = 0
  while $i < 6
    res = find_set($ds, $i)
    $ds = res.ds
    puts((res.root).to_s)
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
