# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand_float()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return (($seed).to_f) / 2147483648.0
  end
  def hypercube_points(num_points, cube_size, num_dimensions)
    pts = []
    i = 0
    while i < num_points
      p = []
      j = 0
      while j < num_dimensions
        v = cube_size * rand_float()
        p = (p << v)
        j = _add(j, 1)
      end
      pts = (pts << p)
      i = _add(i, 1)
    end
    return pts
  end
  def build_kdtree(points, depth)
    return points
  end
  def distance_sq(a, b)
    sum = 0.0
    i = 0
    while i < a.length
      d = a[i] - b[i]
      sum = _add(sum, d * d)
      i = _add(i, 1)
    end
    return sum
  end
  def nearest_neighbour_search(points, query)
    if points.length == 0
      return {"index" => -1.0, "dist" => $INF, "visited" => 0.0}
    end
    nearest_idx = 0
    nearest_dist = $INF
    visited = 0
    i = 0
    while i < points.length
      d = distance_sq(query, points[i])
      visited = _add(visited, 1)
      if d < nearest_dist
        nearest_dist = d
        nearest_idx = i
      end
      i = _add(i, 1)
    end
    return {"index" => (nearest_idx).to_f, "dist" => nearest_dist, "visited" => (visited).to_f}
  end
  def test_build_cases()
    empty_pts = []
    tree0 = build_kdtree(empty_pts, 0)
    if tree0.length == 0
      puts("case1 true")
    else
      puts("case1 false")
    end
    pts1 = hypercube_points(10, 10.0, 2)
    tree1 = build_kdtree(pts1, 2)
    if tree1.length > 0 && tree1[0].length == 2
      puts("case2 true")
    else
      puts("case2 false")
    end
    pts2 = hypercube_points(10, 10.0, 3)
    tree2 = build_kdtree(pts2, -2)
    if tree2.length > 0 && tree2[0].length == 3
      puts("case3 true")
    else
      puts("case3 false")
    end
  end
  def test_search()
    pts = hypercube_points(10, 10.0, 2)
    tree = build_kdtree(pts, 0)
    qp = hypercube_points(1, 10.0, 2)[0]
    res = nearest_neighbour_search(tree, qp)
    if res["index"] != (-1.0) && res["dist"] >= 0.0 && res["visited"] > 0.0
      puts("search true")
    else
      puts("search false")
    end
  end
  def test_edge()
    empty_pts = []
    tree = build_kdtree(empty_pts, 0)
    query = [0.0, 0.0]
    res = nearest_neighbour_search(tree, query)
    if res["index"] == (-1.0) && res["dist"] > 100000000.0 && res["visited"] == 0.0
      puts("edge true")
    else
      puts("edge false")
    end
  end
  def main()
    $seed = 1
    test_build_cases()
    test_search()
    test_edge()
  end
  $INF = 1000000000.0
  $seed = 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
