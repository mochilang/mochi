# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand_float()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return (($seed).to_f) / 2.147483648e+09
  end
  def hypercube_points(num_points, cube_size, num_dimensions)
    pts = []
    i = 0
    while i < num_points
      p = []
      j = 0
      while j < num_dimensions
        v = cube_size * rand_float()
        p = _append(p, v)
        j = _add(j, 1)
      end
      pts = _append(pts, p)
      i = _add(i, 1)
    end
    return pts
  end
  def build_kdtree(points, depth)
    return points
  end
  def distance_sq(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      d = (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      sum = _add(sum, d * d)
      i = _add(i, 1)
    end
    return sum
  end
  def nearest_neighbour_search(points, query)
    if _eq(_len(points), 0)
      return {"index" => -1.0, "dist" => $INF, "visited" => 0.0}
    end
    nearest_idx = 0
    nearest_dist = $INF
    visited = 0
    i = 0
    while i < _len(points)
      d = distance_sq(query, (__tmp3 = points; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      visited = _add(visited, 1)
      if d < nearest_dist
        nearest_dist = d
        nearest_idx = i
      end
      i = _add(i, 1)
    end
    return {"index" => (nearest_idx).to_f, "dist" => nearest_dist, "visited" => (visited).to_f}
  end
  def test_build_cases()
    empty_pts = []
    tree0 = build_kdtree(empty_pts, 0)
    if _eq(_len(tree0), 0)
      puts("case1 true")
    else
      puts("case1 false")
    end
    pts1 = hypercube_points(10, 10.0, 2)
    tree1 = build_kdtree(pts1, 2)
    if _len(tree1) > 0 && _eq(_len((__tmp4 = tree1; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))), 2)
      puts("case2 true")
    else
      puts("case2 false")
    end
    pts2 = hypercube_points(10, 10.0, 3)
    tree2 = build_kdtree(pts2, -2)
    if _len(tree2) > 0 && _eq(_len((__tmp5 = tree2; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))), 3)
      puts("case3 true")
    else
      puts("case3 false")
    end
  end
  def test_search()
    pts = hypercube_points(10, 10.0, 2)
    tree = build_kdtree(pts, 0)
    qp = (__tmp6 = hypercube_points(1, 10.0, 2); __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0))
    res = nearest_neighbour_search(tree, qp)
    if !_eq((__tmp7 = res; __tmp7.is_a?(Hash) ? __tmp7["index"] : _idx(__tmp7, "index")), (-1.0)) && (__tmp8 = res; __tmp8.is_a?(Hash) ? __tmp8["dist"] : _idx(__tmp8, "dist")) >= 0.0 && (__tmp9 = res; __tmp9.is_a?(Hash) ? __tmp9["visited"] : _idx(__tmp9, "visited")) > 0.0
      puts("search true")
    else
      puts("search false")
    end
  end
  def test_edge()
    empty_pts = []
    tree = build_kdtree(empty_pts, 0)
    query = [0.0, 0.0]
    res = nearest_neighbour_search(tree, query)
    if _eq((__tmp10 = res; __tmp10.is_a?(Hash) ? __tmp10["index"] : _idx(__tmp10, "index")), (-1.0)) && (__tmp11 = res; __tmp11.is_a?(Hash) ? __tmp11["dist"] : _idx(__tmp11, "dist")) > 1e+08 && _eq((__tmp12 = res; __tmp12.is_a?(Hash) ? __tmp12["visited"] : _idx(__tmp12, "visited")), 0.0)
      puts("edge true")
    else
      puts("edge false")
    end
  end
  def main()
    $seed = 1
    test_build_cases()
    test_search()
    test_edge()
  end
  $INF = 1e+09
  $seed = 1
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
