# Generated by Mochi transpiler v0.10.72 on 2025-08-24 16:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def square_distance(a, b)
    i = 0
    total = 0.0
    while i < _len(a)
      diff = (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      total = _add(total, diff * diff)
      i = _add(i, 1)
    end
    return total
  end
  def search(nodes, index, query_point, depth, best)
    if _eq(index, (-1))
      return best
    end
    result = best
    result.nodes_visited = _add(result.nodes_visited, 1)
    node = (__tmp3 = nodes; __tmp3.is_a?(Hash) ? __tmp3[index] : _idx(__tmp3, index))
    current_point = node.point
    current_dist = square_distance(query_point, current_point)
    if _eq(_len(result.point), 0) || current_dist < result.distance
      result.point = current_point
      result.distance = current_dist
    end
    k = _len(query_point)
    axis = depth % k
    nearer = node.left
    further = node.right
    if (__tmp4 = query_point; __tmp4.is_a?(Hash) ? __tmp4[axis] : _idx(__tmp4, axis)) > (__tmp5 = current_point; __tmp5.is_a?(Hash) ? __tmp5[axis] : _idx(__tmp5, axis))
      nearer = node.right
      further = node.left
    end
    result = search(nodes, nearer, query_point, _add(depth, 1), result)
    diff = (__tmp6 = query_point; __tmp6.is_a?(Hash) ? __tmp6[axis] : _idx(__tmp6, axis)) - (__tmp7 = current_point; __tmp7.is_a?(Hash) ? __tmp7[axis] : _idx(__tmp7, axis))
    if diff * diff < result.distance
      result = search(nodes, further, query_point, _add(depth, 1), result)
    end
    return result
  end
  def nearest_neighbour_search(nodes, root, query_point)
    initial = SearchResult.new(point: [], distance: 1e+30, nodes_visited: 0)
    return search(nodes, root, query_point, 0, initial)
  end
  Object.send(:remove_const, :KDNode) if Object.const_defined?(:KDNode)
  Object.const_set(:KDNode, Struct.new(:point, :left, :right, keyword_init: true))
  Object.send(:remove_const, :SearchResult) if Object.const_defined?(:SearchResult)
  Object.const_set(:SearchResult, Struct.new(:point, :distance, :nodes_visited, keyword_init: true))
  $nodes = [KDNode.new(point: [9.0, 1.0], left: 1, right: 4), KDNode.new(point: [2.0, 7.0], left: 2, right: 3), KDNode.new(point: [3.0, 6.0], left: -1, right: -1), KDNode.new(point: [6.0, 12.0], left: -1, right: -1), KDNode.new(point: [17.0, 15.0], left: 5, right: 6), KDNode.new(point: [13.0, 15.0], left: -1, right: -1), KDNode.new(point: [10.0, 19.0], left: -1, right: -1)]
  $queries = [[9.0, 2.0], [12.0, 15.0], [1.0, 3.0]]
  $q = 0
  while $q < _len($queries)
    res = nearest_neighbour_search($nodes, 0, (__tmp8 = $queries; __tmp8.is_a?(Hash) ? __tmp8[$q] : _idx(__tmp8, $q)))
    puts(_add(_add(_add(_add(_add(((x = res.point); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s), " "), _str(res.distance)), " "), _str(res.nodes_visited)), "\n"))
    $q = _add($q, 1)
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
