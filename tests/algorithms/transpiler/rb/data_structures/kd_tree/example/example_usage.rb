# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2147483648.0
  end
  def hypercube_points(num_points, cube_size, num_dimensions)
    pts = []
    i = 0
    while i < num_points
      p = []
      j = 0
      while j < num_dimensions
        p = (p << cube_size * random())
        j = _add(j, 1)
      end
      pts = (pts << p)
      i = _add(i, 1)
    end
    return pts
  end
  def sort_points(points, axis)
    n = points.length
    i = 1
    while i < n
      key = points[i]
      j = i - 1
      while j >= 0 && points[j][axis] > key[axis]
        points[_add(j, 1)] = points[j]
        j = j - 1
      end
      points[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return points
  end
  def sublist(arr, start, end_)
    res = []
    i = start
    while i < end_
      res = (res << arr[i])
      i = _add(i, 1)
    end
    return res
  end
  def shift_nodes(nodes, offset)
    i = 0
    while i < nodes.length
      if nodes[i].left != 0 - 1
        nodes[i]["left"] = _add(nodes[i].left, offset)
      end
      if nodes[i].right != 0 - 1
        nodes[i]["right"] = _add(nodes[i].right, offset)
      end
      i = _add(i, 1)
    end
    return nodes
  end
  def build_kdtree(points, depth)
    if points.length == 0
      return BuildResult.new(index: 0 - 1, nodes: [])
    end
    k = points[0].length
    axis = depth % k
    points = sort_points(points, axis)
    median = points.length / 2
    left_points = sublist(points, 0, median)
    right_points = sublist(points, _add(median, 1), points.length)
    left_res = build_kdtree(left_points, _add(depth, 1))
    right_res = build_kdtree(right_points, _add(depth, 1))
    offset = _add(left_res.nodes.length, 1)
    shifted_right = shift_nodes(right_res.nodes, offset)
    nodes = left_res.nodes
    left_index = left_res.index
    right_index = (right_res.index == 0 - 1 ? 0 - 1 : _add(right_res.index, offset))
    nodes = (nodes << Node.new(point: points[median], left: left_index, right: right_index))
    nodes = _add(nodes, shifted_right)
    root_index = left_res.nodes.length
    return BuildResult.new(index: root_index, nodes: nodes)
  end
  def square_distance(a, b)
    sum = 0.0
    i = 0
    while i < a.length
      diff = a[i] - b[i]
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sum
  end
  def nearest_neighbour_search(tree, root, query_point)
    nearest_point = []
    nearest_dist = 0.0
    visited = 0
    i = 0
    while i < tree.length
      node = tree[i]
      dist = square_distance(query_point, node.point)
      visited = _add(visited, 1)
      if visited == 1 || dist < nearest_dist
        nearest_point = node.point
        nearest_dist = dist
      end
      i = _add(i, 1)
    end
    return SearchResult.new(point: nearest_point, dist: nearest_dist, visited: visited)
  end
  def list_to_string(arr)
    s = "["
    i = 0
    while i < arr.length
      s = _add(s, (arr[i]).to_s)
      if i < arr.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def main()
    num_points = 5000
    cube_size = 10.0
    num_dimensions = 10
    pts = hypercube_points(num_points, cube_size, num_dimensions)
    build = build_kdtree(pts, 0)
    root = build.index
    tree = build.nodes
    query = []
    i = 0
    while i < num_dimensions
      query = (query << random())
      i = _add(i, 1)
    end
    res = nearest_neighbour_search(tree, root, query)
    puts(_add("Query point: ", list_to_string(query)))
    puts(_add("Nearest point: ", list_to_string(res.point)))
    puts(_add("Distance: ", (res.dist).to_s))
    puts(_add("Nodes visited: ", (res.visited).to_s))
  end
  Node = Struct.new(:point, :left, :right, keyword_init: true)
  BuildResult = Struct.new(:index, :nodes, keyword_init: true)
  $seed = 1
  SearchResult = Struct.new(:point, :dist, :visited, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
