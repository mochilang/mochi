# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2.147483648e+09
  end
  def hypercube_points(num_points, cube_size, num_dimensions)
    pts = []
    i = 0
    while i < num_points
      p = []
      j = 0
      while j < num_dimensions
        p = _append(p, cube_size * random())
        j = _add(j, 1)
      end
      pts = _append(pts, p)
      i = _add(i, 1)
    end
    return pts
  end
  def sort_points(points, axis)
    n = _len(points)
    i = 1
    while i < n
      key = (__tmp1 = points; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      j = i - 1
      while j >= 0 && (__tmp2 = (__tmp3 = points; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)); __tmp2.is_a?(Hash) ? __tmp2[axis] : _idx(__tmp2, axis)) > (__tmp4 = key; __tmp4.is_a?(Hash) ? __tmp4[axis] : _idx(__tmp4, axis))
        points[_add(j, 1)] = (__tmp5 = points; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))
        j = j - 1
      end
      points[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return points
  end
  def sublist(arr, start, end_)
    res = []
    i = start
    while i < end_
      res = _append(res, (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)))
      i = _add(i, 1)
    end
    return res
  end
  def shift_nodes(nodes, offset)
    i = 0
    while i < _len(nodes)
      if !_eq((__tmp7 = nodes; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)).left, 0 - 1)
        (__tmp8 = nodes; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))["left"] = _add((__tmp9 = nodes; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)).left, offset)
      end
      if !_eq((__tmp10 = nodes; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)).right, 0 - 1)
        (__tmp11 = nodes; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))["right"] = _add((__tmp12 = nodes; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)).right, offset)
      end
      i = _add(i, 1)
    end
    return nodes
  end
  def build_kdtree(points, depth)
    if _eq(_len(points), 0)
      return BuildResult.new(index: 0 - 1, nodes: [])
    end
    k = _len((__tmp13 = points; __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)))
    axis = depth % k
    points = sort_points(points, axis)
    median = _len(points) / 2
    left_points = sublist(points, 0, median)
    right_points = sublist(points, _add(median, 1), _len(points))
    left_res = build_kdtree(left_points, _add(depth, 1))
    right_res = build_kdtree(right_points, _add(depth, 1))
    offset = _add(_len(left_res.nodes), 1)
    shifted_right = shift_nodes(right_res.nodes, offset)
    nodes = left_res.nodes
    left_index = left_res.index
    right_index = (_eq(right_res.index, 0 - 1) ? 0 - 1 : _add(right_res.index, offset))
    nodes = _append(nodes, Node.new(point: (__tmp14 = points; __tmp14.is_a?(Hash) ? __tmp14[median] : _idx(__tmp14, median)), left: left_index, right: right_index))
    nodes = _add(nodes, shifted_right)
    root_index = _len(left_res.nodes)
    return BuildResult.new(index: root_index, nodes: nodes)
  end
  def square_distance(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      diff = (__tmp15 = a; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)) - (__tmp16 = b; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i))
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sum
  end
  def nearest_neighbour_search(tree, root, query_point)
    nearest_point = []
    nearest_dist = 0.0
    visited = 0
    i = 0
    while i < _len(tree)
      node = (__tmp17 = tree; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))
      dist = square_distance(query_point, node.point)
      visited = _add(visited, 1)
      if _eq(visited, 1) || dist < nearest_dist
        nearest_point = node.point
        nearest_dist = dist
      end
      i = _add(i, 1)
    end
    return SearchResult.new(point: nearest_point, dist: nearest_dist, visited: visited)
  end
  def list_to_string(arr)
    s = "["
    i = 0
    while i < _len(arr)
      s = _add(s, _str((__tmp18 = arr; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))))
      if i < _len(arr) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def main()
    num_points = 5000
    cube_size = 10.0
    num_dimensions = 10
    pts = hypercube_points(num_points, cube_size, num_dimensions)
    build = build_kdtree(pts, 0)
    root = build.index
    tree = build.nodes
    query = []
    i = 0
    while i < num_dimensions
      query = _append(query, random())
      i = _add(i, 1)
    end
    res = nearest_neighbour_search(tree, root, query)
    puts(_add("Query point: ", list_to_string(query)))
    puts(_add("Nearest point: ", list_to_string(res.point)))
    puts(_add("Distance: ", _str(res.dist)))
    puts(_add("Nodes visited: ", _str(res.visited)))
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:point, :left, :right, keyword_init: true))
  Object.send(:remove_const, :BuildResult) if Object.const_defined?(:BuildResult)
  Object.const_set(:BuildResult, Struct.new(:index, :nodes, keyword_init: true))
  $seed = 1
  Object.send(:remove_const, :SearchResult) if Object.const_defined?(:SearchResult)
  Object.const_set(:SearchResult, Struct.new(:point, :dist, :visited, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
