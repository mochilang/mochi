# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_kd_node(point, left, right)
    return KDNode.new(point: point, left: left, right: right)
  end
  KDNode = Struct.new(:point, :left, :right, keyword_init: true)
  $nodes = []
  $nodes = ($nodes << make_kd_node([2.0, 3.0], 1, 2))
  $nodes = ($nodes << make_kd_node([1.0, 5.0], -1, -1))
  $nodes = ($nodes << make_kd_node([4.0, 2.0], -1, -1))
  $root = $nodes[0]
  $left_child = $nodes[1]
  $right_child = $nodes[2]
  puts(($root["point"]).to_s)
  puts(($root["left"]).to_s)
  puts(($root["right"]).to_s)
  puts(($left_child["point"]).to_s)
  puts(($right_child["point"]).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
