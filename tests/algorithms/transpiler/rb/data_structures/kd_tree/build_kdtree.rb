# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_points(points, axis)
    arr = points
    i = 0
    while i < arr.length
      j = 0
      while j < arr.length - 1
        if arr[j][axis] > arr[_add(j, 1)][axis]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def build_kdtree(points, depth)
    if points.length == 0
      return 0 - 1
    end
    k = points[0].length
    axis = depth % k
    sorted = sort_points(points, axis)
    median_idx = sorted.length / 2
    left_points = sorted[0...median_idx]
    right_points = sorted[_add(median_idx, 1)...sorted.length]
    idx = $tree.length
    $tree = ($tree << KDNode.new(point: sorted[median_idx], left: 0 - 1, right: 0 - 1))
    left_idx = build_kdtree(left_points, _add(depth, 1))
    right_idx = build_kdtree(right_points, _add(depth, 1))
    node = $tree[idx]
    node["left"] = left_idx
    node["right"] = right_idx
    $tree[idx] = node
    return idx
  end
  KDNode = Struct.new(:point, :left, :right, keyword_init: true)
  $tree = []
  $pts = [[2.0, 3.0], [5.0, 4.0], [9.0, 6.0], [4.0, 7.0], [8.0, 1.0], [7.0, 2.0]]
  $root = build_kdtree($pts, 0)
  puts(((x = $tree); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts($root)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
