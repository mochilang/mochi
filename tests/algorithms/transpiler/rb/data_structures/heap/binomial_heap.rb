# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_heap()
    return BinomialHeap.new(data: [])
  end
  def swap(data, i, j)
    tmp = data[i]
    data[i] = data[j]
    data[j] = tmp
  end
  def sift_up(data, idx)
    i = idx
    while i > 0
      parent = (i - 1) / 2
      if data[parent] <= data[i]
        break
      end
      swap(data, parent, i)
      i = parent
    end
  end
  def sift_down(data, idx)
    i = idx
    n = data.length
    while true
      left = _add(2 * i, 1)
      right = _add(left, 1)
      smallest = i
      if left < n && data[left] < data[smallest]
        smallest = left
      end
      if right < n && data[right] < data[smallest]
        smallest = right
      end
      if smallest == i
        break
      end
      swap(data, i, smallest)
      i = smallest
    end
  end
  def insert(heap, v)
    d = heap.data
    d = (d << v)
    sift_up(d, d.length - 1)
    return BinomialHeap.new(data: d)
  end
  def peek(heap)
    return heap.data[0]
  end
  def is_empty(heap)
    return heap.data.length == 0
  end
  def delete_min(heap)
    d = heap.data
    min = d[0]
    d[0] = d[d.length - 1]
    d = d[0...d.length - 1]
    if d.length > 0
      sift_down(d, 0)
    end
    return DeleteResult.new(heap: BinomialHeap.new(data: d), value: min)
  end
  def main()
    h = new_heap()
    h = insert(h, 10)
    h = insert(h, 3)
    h = insert(h, 7)
    puts((peek(h)).to_s)
    d1 = delete_min(h)
    h = d1.heap
    puts((d1.value).to_s)
    d2 = delete_min(h)
    h = d2.heap
    puts((d2.value).to_s)
    d3 = delete_min(h)
    h = d3.heap
    puts((d3.value).to_s)
  end
  BinomialHeap = Struct.new(:data, keyword_init: true)
  DeleteResult = Struct.new(:heap, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
