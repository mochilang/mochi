# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_parent_idx(idx)
    return (idx - 1) / 2
  end
  def get_left_child_idx(idx)
    return _add(idx * 2, 1)
  end
  def get_right_child_idx(idx)
    return _add(idx * 2, 2)
  end
  def remove_key(m, k)
    out = {}
        __tmp1 = m.keys()
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if !_eq(key, k)
        out[key] = (__tmp2 = m; __tmp2.is_a?(Hash) ? __tmp2[key] : _idx(__tmp2, key))
      end
    end
    return out
  end
  def slice_without_last(xs)
    res = []
    i = 0
    while i < _len(xs) - 1
      res = _append(res, (__tmp3 = xs; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      i = _add(i, 1)
    end
    return res
  end
  def sift_down(mh, idx)
    heap = mh.heap
    idx_map = mh.idx_of_element
    i = idx
    while true
      left = get_left_child_idx(i)
      right = get_right_child_idx(i)
      smallest = i
      if left < _len(heap) && (__tmp4 = heap; __tmp4.is_a?(Hash) ? __tmp4[left] : _idx(__tmp4, left)).val < (__tmp5 = heap; __tmp5.is_a?(Hash) ? __tmp5[smallest] : _idx(__tmp5, smallest)).val
        smallest = left
      end
      if right < _len(heap) && (__tmp6 = heap; __tmp6.is_a?(Hash) ? __tmp6[right] : _idx(__tmp6, right)).val < (__tmp7 = heap; __tmp7.is_a?(Hash) ? __tmp7[smallest] : _idx(__tmp7, smallest)).val
        smallest = right
      end
      if !_eq(smallest, i)
        tmp = (__tmp8 = heap; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
        heap[i] = (__tmp9 = heap; __tmp9.is_a?(Hash) ? __tmp9[smallest] : _idx(__tmp9, smallest))
        heap[smallest] = tmp
        idx_map[(__tmp10 = heap; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)).name] = i
        idx_map[(__tmp11 = heap; __tmp11.is_a?(Hash) ? __tmp11[smallest] : _idx(__tmp11, smallest)).name] = smallest
        i = smallest
      else
        break
      end
    end
    mh.heap = heap
    mh.idx_of_element = idx_map
  end
  def sift_up(mh, idx)
    heap = mh.heap
    idx_map = mh.idx_of_element
    i = idx
    p = get_parent_idx(i)
    while p >= 0 && (__tmp12 = heap; __tmp12.is_a?(Hash) ? __tmp12[p] : _idx(__tmp12, p)).val > (__tmp13 = heap; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)).val
      tmp = (__tmp14 = heap; __tmp14.is_a?(Hash) ? __tmp14[p] : _idx(__tmp14, p))
      heap[p] = (__tmp15 = heap; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))
      heap[i] = tmp
      idx_map[(__tmp16 = heap; __tmp16.is_a?(Hash) ? __tmp16[p] : _idx(__tmp16, p)).name] = p
      idx_map[(__tmp17 = heap; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)).name] = i
      i = p
      p = get_parent_idx(i)
    end
    mh.heap = heap
    mh.idx_of_element = idx_map
  end
  def new_min_heap(array)
    idx_map = {}
    val_map = {}
    heap = array
    i = 0
    while i < _len(array)
      n = (__tmp18 = array; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))
      idx_map[n.name] = i
      val_map[n.name] = n.val
      i = _add(i, 1)
    end
    mh = MinHeap.new(heap: heap, idx_of_element: idx_map, heap_dict: val_map)
    start = get_parent_idx(_len(array) - 1)
    while start >= 0
      sift_down(mh, start)
      start = start - 1
    end
    return mh
  end
  def peek(mh)
    return (__tmp19 = mh.heap; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0))
  end
  def remove_min(mh)
    heap = mh.heap
    idx_map = mh.idx_of_element
    val_map = mh.heap_dict
    last_idx = _len(heap) - 1
    top = (__tmp20 = heap; __tmp20.is_a?(Hash) ? __tmp20[0] : _idx(__tmp20, 0))
    last = (__tmp21 = heap; __tmp21.is_a?(Hash) ? __tmp21[last_idx] : _idx(__tmp21, last_idx))
    heap[0] = last
    idx_map[last.name] = 0
    heap = slice_without_last(heap)
    idx_map = remove_key(idx_map, top.name)
    val_map = remove_key(val_map, top.name)
    mh.heap = heap
    mh.idx_of_element = idx_map
    mh.heap_dict = val_map
    if _len(heap) > 0
      sift_down(mh, 0)
    end
    return top
  end
  def insert(mh, node)
    heap = mh.heap
    idx_map = mh.idx_of_element
    val_map = mh.heap_dict
    heap = _append(heap, node)
    idx = _len(heap) - 1
    idx_map[node.name] = idx
    val_map[node.name] = node.val
    mh.heap = heap
    mh.idx_of_element = idx_map
    mh.heap_dict = val_map
    sift_up(mh, idx)
  end
  def is_empty(mh)
    return _eq(_len(mh.heap), 0)
  end
  def get_value(mh, key)
    return (__tmp22 = mh.heap_dict; __tmp22.is_a?(Hash) ? __tmp22[key] : _idx(__tmp22, key))
  end
  def decrease_key(mh, node, new_value)
    heap = mh.heap
    val_map = mh.heap_dict
    idx_map = mh.idx_of_element
    idx = (__tmp23 = idx_map; __tmp23.is_a?(Hash) ? __tmp23[node.name] : _idx(__tmp23, node.name))
    if !((__tmp24 = heap; __tmp24.is_a?(Hash) ? __tmp24[idx] : _idx(__tmp24, idx)).val > new_value)
      panic("newValue must be less than current value")
    end
    node.val = new_value
    (__tmp25 = heap; __tmp25.is_a?(Hash) ? __tmp25[idx] : _idx(__tmp25, idx))["val"] = new_value
    val_map[node.name] = new_value
    mh.heap = heap
    mh.heap_dict = val_map
    sift_up(mh, idx)
  end
  def node_to_string(n)
    return _add(_add(_add(_add("Node(", n.name), ", "), _str(n.val)), ")")
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:name, :val, keyword_init: true))
  Object.send(:remove_const, :MinHeap) if Object.const_defined?(:MinHeap)
  Object.const_set(:MinHeap, Struct.new(:heap, :idx_of_element, :heap_dict, keyword_init: true))
  $r = Node.new(name: "R", val: -1)
  $b = Node.new(name: "B", val: 6)
  $a = Node.new(name: "A", val: 3)
  $x = Node.new(name: "X", val: 1)
  $e = Node.new(name: "E", val: 4)
  $my_min_heap = new_min_heap([$r, $b, $a, $x, $e])
  puts("Min Heap - before decrease key")
    __tmp26 = $my_min_heap.heap
  __tmp26 = [] if __tmp26.nil?
  if __tmp26.respond_to?(:keys) && !__tmp26.is_a?(String)
    __tmp26 = __tmp26.keys
  end
  __tmp26.each do |n|
    puts(node_to_string(n))
  end
  puts("Min Heap - After decrease key of node [B -> -17]")
  decrease_key($my_min_heap, $b, -17)
    __tmp27 = $my_min_heap.heap
  __tmp27 = [] if __tmp27.nil?
  if __tmp27.respond_to?(:keys) && !__tmp27.is_a?(String)
    __tmp27 = __tmp27.keys
  end
  __tmp27.each do |n|
    puts(node_to_string(n))
  end
  puts(_str(get_value($my_min_heap, "B")))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
