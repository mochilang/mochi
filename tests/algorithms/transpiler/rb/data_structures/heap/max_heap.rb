# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def swap_up(i)
    temp = (__tmp1 = $heap; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
    idx = i
    while idx / 2 > 0
      if (__tmp2 = $heap; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx)) > (__tmp3 = $heap; __tmp3.is_a?(Hash) ? __tmp3[idx / 2] : _idx(__tmp3, idx / 2))
        $heap[idx] = (__tmp4 = $heap; __tmp4.is_a?(Hash) ? __tmp4[idx / 2] : _idx(__tmp4, idx / 2))
        $heap[idx / 2] = temp
      end
      idx = idx / 2
    end
  end
  def insert(value)
    $heap = _append($heap, value)
    $size = _add($size, 1)
    swap_up($size)
  end
  def swap_down(i)
    idx = i
    while $size >= 2 * idx
      bigger_child = (_add(2 * idx, 1) > $size ? 2 * idx : ((__tmp5 = $heap; __tmp5.is_a?(Hash) ? __tmp5[2 * idx] : _idx(__tmp5, 2 * idx)) > (__tmp6 = $heap; __tmp6.is_a?(Hash) ? __tmp6[_add(2 * idx, 1)] : _idx(__tmp6, _add(2 * idx, 1))) ? 2 * idx : _add(2 * idx, 1)))
      temp = (__tmp7 = $heap; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx))
      if (__tmp8 = $heap; __tmp8.is_a?(Hash) ? __tmp8[idx] : _idx(__tmp8, idx)) < (__tmp9 = $heap; __tmp9.is_a?(Hash) ? __tmp9[bigger_child] : _idx(__tmp9, bigger_child))
        $heap[idx] = (__tmp10 = $heap; __tmp10.is_a?(Hash) ? __tmp10[bigger_child] : _idx(__tmp10, bigger_child))
        $heap[bigger_child] = temp
      end
      idx = bigger_child
    end
  end
  def shrink()
    new_heap = []
    i = 0
    while i <= $size
      new_heap = _append(new_heap, (__tmp11 = $heap; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      i = _add(i, 1)
    end
    $heap = new_heap
  end
  def pop()
    max_value = (__tmp12 = $heap; __tmp12.is_a?(Hash) ? __tmp12[1] : _idx(__tmp12, 1))
    $heap[1] = (__tmp13 = $heap; __tmp13.is_a?(Hash) ? __tmp13[$size] : _idx(__tmp13, $size))
    $size = $size - 1
    shrink()
    swap_down(1)
    return max_value
  end
  def get_list()
    out = []
    i = 1
    while i <= $size
      out = _append(out, (__tmp14 = $heap; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)))
      i = _add(i, 1)
    end
    return out
  end
  def len()
    return $size
  end
  $heap = [0]
  $size = 0
  insert(6)
  insert(10)
  insert(15)
  insert(12)
  puts(pop())
  puts(pop())
  puts(((x = get_list()); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(len())
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
