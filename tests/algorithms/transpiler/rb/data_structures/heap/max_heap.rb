# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def swap_up(i)
    temp = $heap[i]
    idx = i
    while idx / 2 > 0
      if $heap[idx] > $heap[idx / 2]
        $heap[idx] = $heap[idx / 2]
        $heap[idx / 2] = temp
      end
      idx = idx / 2
    end
  end
  def insert(value)
    $heap = ($heap << value)
    $size = _add($size, 1)
    swap_up($size)
  end
  def swap_down(i)
    idx = i
    while $size >= 2 * idx
      bigger_child = (_add(2 * idx, 1) > $size ? 2 * idx : ($heap[2 * idx] > $heap[_add(2 * idx, 1)] ? 2 * idx : _add(2 * idx, 1)))
      temp = $heap[idx]
      if $heap[idx] < $heap[bigger_child]
        $heap[idx] = $heap[bigger_child]
        $heap[bigger_child] = temp
      end
      idx = bigger_child
    end
  end
  def shrink()
    new_heap = []
    i = 0
    while i <= $size
      new_heap = (new_heap << $heap[i])
      i = _add(i, 1)
    end
    $heap = new_heap
  end
  def pop()
    max_value = $heap[1]
    $heap[1] = $heap[$size]
    $size = $size - 1
    shrink()
    swap_down(1)
    return max_value
  end
  def get_list()
    out = []
    i = 1
    while i <= $size
      out = (out << $heap[i])
      i = _add(i, 1)
    end
    return out
  end
  def len()
    return $size
  end
  $heap = [0]
  $size = 0
  insert(6)
  insert(10)
  insert(15)
  insert(12)
  puts(pop())
  puts(pop())
  puts(((x = get_list()); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(len())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
