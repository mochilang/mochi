# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_heap(key)
    return Heap.new(arr: [], pos_map: {}, size: 0, key: key)
  end
  def parent(i)
    if i > 0
      return (i - 1) / 2
    end
    return -1
  end
  def left(i, size)
    l = _add(2 * i, 1)
    if l < size
      return l
    end
    return -1
  end
  def right(i, size)
    r = _add(2 * i, 2)
    if r < size
      return r
    end
    return -1
  end
  def swap(h, i, j)
    arr = h.arr
    item_i = (__tmp1 = (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
    item_j = (__tmp3 = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)); __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
    pm = h.pos_map
    pm[item_i] = _add(j, 1)
    pm[item_j] = _add(i, 1)
    h.pos_map = pm
    tmp = (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
    arr[i] = (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j))
    arr[j] = tmp
    h.arr = arr
  end
  def cmp(h, i, j)
    arr = h.arr
    return (__tmp7 = (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[1] : _idx(__tmp7, 1)) < (__tmp9 = (__tmp10 = arr; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)); __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
  end
  def get_valid_parent(h, i)
    vp = i
    l = left(i, h.size)
    if !_eq(l, 0 - 1) && _eq(cmp(h, l, vp), false)
      vp = l
    end
    r = right(i, h.size)
    if !_eq(r, 0 - 1) && _eq(cmp(h, r, vp), false)
      vp = r
    end
    return vp
  end
  def heapify_up(h, index)
    idx = index
    p = parent(idx)
    while !_eq(p, 0 - 1) && _eq(cmp(h, idx, p), false)
      swap(h, idx, p)
      idx = p
      p = parent(p)
    end
  end
  def heapify_down(h, index)
    idx = index
    vp = get_valid_parent(h, idx)
    while !_eq(vp, idx)
      swap(h, idx, vp)
      idx = vp
      vp = get_valid_parent(h, idx)
    end
  end
  def update_item(h, item, item_value)
    pm = h.pos_map
    if _eq((__tmp11 = pm; __tmp11.is_a?(Hash) ? __tmp11[item] : _idx(__tmp11, item)), 0)
      return
    end
    index = (__tmp12 = pm; __tmp12.is_a?(Hash) ? __tmp12[item] : _idx(__tmp12, item)) - 1
    arr = h.arr
    arr[index] = [item, h.key.call(item_value)]
    h.arr = arr
    h.pos_map = pm
    heapify_up(h, index)
    heapify_down(h, index)
  end
  def delete_item(h, item)
    pm = h.pos_map
    if _eq((__tmp13 = pm; __tmp13.is_a?(Hash) ? __tmp13[item] : _idx(__tmp13, item)), 0)
      return
    end
    index = (__tmp14 = pm; __tmp14.is_a?(Hash) ? __tmp14[item] : _idx(__tmp14, item)) - 1
    pm[item] = 0
    arr = h.arr
    last_index = h.size - 1
    if !_eq(index, last_index)
      arr[index] = (__tmp15 = arr; __tmp15.is_a?(Hash) ? __tmp15[last_index] : _idx(__tmp15, last_index))
      moved = (__tmp16 = (__tmp17 = arr; __tmp17.is_a?(Hash) ? __tmp17[index] : _idx(__tmp17, index)); __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0))
      pm[moved] = _add(index, 1)
    end
    h.size = h.size - 1
    h.arr = arr
    h.pos_map = pm
    if h.size > index
      heapify_up(h, index)
      heapify_down(h, index)
    end
  end
  def insert_item(h, item, item_value)
    arr = h.arr
    arr_len = _len(arr)
    if _eq(arr_len, h.size)
      arr = _append(arr, [item, h.key.call(item_value)])
    else
      arr[h.size] = [item, h.key.call(item_value)]
    end
    pm = h.pos_map
    pm[item] = _add(h.size, 1)
    h.size = _add(h.size, 1)
    h.arr = arr
    h.pos_map = pm
    heapify_up(h, h.size - 1)
  end
  def get_top(h)
    arr = h.arr
    if h.size > 0
      return (__tmp18 = arr; __tmp18.is_a?(Hash) ? __tmp18[0] : _idx(__tmp18, 0))
    end
    return []
  end
  def extract_top(h)
    top = get_top(h)
    if _len(top) > 0
      delete_item(h, (__tmp19 = top; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0)))
    end
    return top
  end
  def identity(x)
    return x
  end
  def negate(x)
    return 0 - x
  end
  Object.send(:remove_const, :Heap) if Object.const_defined?(:Heap)
  Object.const_set(:Heap, Struct.new(:arr, :pos_map, :size, :key, keyword_init: true))
  $h = new_heap(method(:identity))
  insert_item($h, 5, 34)
  insert_item($h, 6, 31)
  insert_item($h, 7, 37)
  puts(((x = get_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extract_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extract_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extract_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $h = new_heap(method(:negate))
  insert_item($h, 5, 34)
  insert_item($h, 6, 31)
  insert_item($h, 7, 37)
  puts(((x = get_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extract_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extract_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extract_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  insert_item($h, 8, 45)
  insert_item($h, 9, 40)
  insert_item($h, 10, 50)
  puts(((x = get_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  update_item($h, 10, 30)
  puts(((x = get_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  delete_item($h, 10)
  puts(((x = get_top($h)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
