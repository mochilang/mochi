# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def parent_index(child_idx)
    if child_idx > 0
      return (child_idx - 1) / 2
    end
    return -1
  end
  def left_child_idx(parent_idx)
    return _add(2 * parent_idx, 1)
  end
  def right_child_idx(parent_idx)
    return _add(2 * parent_idx, 2)
  end
  def max_heapify(h, heap_size, index)
    largest = index
    left = left_child_idx(index)
    right = right_child_idx(index)
    if left < heap_size && h[left] > h[largest]
      largest = left
    end
    if right < heap_size && h[right] > h[largest]
      largest = right
    end
    if largest != index
      temp = h[index]
      h[index] = h[largest]
      h[largest] = temp
      max_heapify(h, heap_size, largest)
    end
  end
  def build_max_heap(h)
    heap_size = h.length
    i = heap_size / 2 - 1
    while i >= 0
      max_heapify(h, heap_size, i)
      i = i - 1
    end
    return heap_size
  end
  def extract_max(h, heap_size)
    max_value = h[0]
    h[0] = h[heap_size - 1]
    max_heapify(h, heap_size - 1, 0)
    return max_value
  end
  def insert(h, heap_size, value)
    if heap_size < h.length
      h[heap_size] = value
    else
      h = (h << value)
    end
    heap_size = _add(heap_size, 1)
    idx = (heap_size - 1) / 2
    while idx >= 0
      max_heapify(h, heap_size, idx)
      idx = (idx - 1) / 2
    end
    return heap_size
  end
  def heap_sort(h, heap_size)
    size = heap_size
    j = size - 1
    while j > 0
      temp = h[0]
      h[0] = h[j]
      h[j] = temp
      size = size - 1
      max_heapify(h, size, 0)
      j = j - 1
    end
  end
  def heap_to_string(h, heap_size)
    s = "["
    i = 0
    while i < heap_size
      s = _add(s, (h[i]).to_s)
      if i < heap_size - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  $heap = [103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0]
  $size = build_max_heap($heap)
  puts(heap_to_string($heap, $size))
  $m = extract_max($heap, $size)
  $size = $size - 1
  puts(($m).to_s)
  puts(heap_to_string($heap, $size))
  $size = insert($heap, $size, 100.0)
  puts(heap_to_string($heap, $size))
  heap_sort($heap, $size)
  puts(heap_to_string($heap, $size))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
