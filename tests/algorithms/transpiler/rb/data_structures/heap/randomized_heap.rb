# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def set_seed(s)
    $seed = s
  end
  def randint(a, b)
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return _add(($seed % (_add(b - a, 1))), a)
  end
  def rand_bool()
    return randint(0, 1) == 1
  end
  def new_heap()
    $nodes = []
    $root = $NIL
  end
  def merge(r1, r2)
    if r1 == $NIL
      return r2
    end
    if r2 == $NIL
      return r1
    end
    if $nodes[r1]["value"] > $nodes[r2]["value"]
      tmp = r1
      r1 = r2
      r2 = tmp
    end
    if rand_bool()
      tmp = $nodes[r1]["left"]
      $nodes[r1]["left"] = $nodes[r1]["right"]
      $nodes[r1]["right"] = tmp
    end
    $nodes[r1]["left"] = merge($nodes[r1]["left"], r2)
    return r1
  end
  def insert(value)
    node = {"value" => value, "left" => $NIL, "right" => $NIL}
    $nodes = ($nodes << node)
    idx = $nodes.length - 1
    $root = merge($root, idx)
  end
  def top()
    if $root == $NIL
      return 0
    end
    return $nodes[$root]["value"]
  end
  def pop()
    result = top()
    l = $nodes[$root]["left"]
    r = $nodes[$root]["right"]
    $root = merge(l, r)
    return result
  end
  def is_empty()
    return $root == $NIL
  end
  def to_sorted_list()
    res = []
    while !is_empty()
      res = (res << pop())
    end
    return res
  end
  $NIL = 0 - 1
  $seed = 1
  $nodes = []
  $root = $NIL
  set_seed(1)
  new_heap()
  insert(2)
  insert(3)
  insert(1)
  insert(5)
  insert(1)
  insert(7)
  puts(((x = to_sorted_list()); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  new_heap()
  insert(1)
  insert(-1)
  insert(0)
  puts(((x = to_sorted_list()); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  new_heap()
  insert(3)
  insert(1)
  insert(3)
  insert(7)
  puts(pop())
  puts(pop())
  puts(pop())
  puts(pop())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
