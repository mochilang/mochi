# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def set_seed(s)
    $seed = s
  end
  def randint(a, b)
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return _add(($seed % (_add(b - a, 1))), a)
  end
  def rand_bool()
    return _eq(randint(0, 1), 1)
  end
  def new_heap()
    $nodes = []
    $root = $NIL
  end
  def merge(r1, r2)
    if _eq(r1, $NIL)
      return r2
    end
    if _eq(r2, $NIL)
      return r1
    end
    if (__tmp1 = (__tmp2 = $nodes; __tmp2.is_a?(Hash) ? __tmp2[r1] : _idx(__tmp2, r1)); __tmp1.is_a?(Hash) ? __tmp1["value"] : _idx(__tmp1, "value")) > (__tmp3 = (__tmp4 = $nodes; __tmp4.is_a?(Hash) ? __tmp4[r2] : _idx(__tmp4, r2)); __tmp3.is_a?(Hash) ? __tmp3["value"] : _idx(__tmp3, "value"))
      tmp = r1
      r1 = r2
      r2 = tmp
    end
    if rand_bool()
      tmp = (__tmp5 = (__tmp6 = $nodes; __tmp6.is_a?(Hash) ? __tmp6[r1] : _idx(__tmp6, r1)); __tmp5.is_a?(Hash) ? __tmp5["left"] : _idx(__tmp5, "left"))
      (__tmp7 = $nodes; __tmp7.is_a?(Hash) ? __tmp7[r1] : _idx(__tmp7, r1))["left"] = (__tmp8 = (__tmp9 = $nodes; __tmp9.is_a?(Hash) ? __tmp9[r1] : _idx(__tmp9, r1)); __tmp8.is_a?(Hash) ? __tmp8["right"] : _idx(__tmp8, "right"))
      (__tmp10 = $nodes; __tmp10.is_a?(Hash) ? __tmp10[r1] : _idx(__tmp10, r1))["right"] = tmp
    end
    (__tmp11 = $nodes; __tmp11.is_a?(Hash) ? __tmp11[r1] : _idx(__tmp11, r1))["left"] = merge((__tmp12 = (__tmp13 = $nodes; __tmp13.is_a?(Hash) ? __tmp13[r1] : _idx(__tmp13, r1)); __tmp12.is_a?(Hash) ? __tmp12["left"] : _idx(__tmp12, "left")), r2)
    return r1
  end
  def insert(value)
    node = {"value" => value, "left" => $NIL, "right" => $NIL}
    $nodes = _append($nodes, node)
    idx = _len($nodes) - 1
    $root = merge($root, idx)
  end
  def top()
    if _eq($root, $NIL)
      return 0
    end
    return (__tmp14 = (__tmp15 = $nodes; __tmp15.is_a?(Hash) ? __tmp15[$root] : _idx(__tmp15, $root)); __tmp14.is_a?(Hash) ? __tmp14["value"] : _idx(__tmp14, "value"))
  end
  def pop()
    result = top()
    l = (__tmp16 = (__tmp17 = $nodes; __tmp17.is_a?(Hash) ? __tmp17[$root] : _idx(__tmp17, $root)); __tmp16.is_a?(Hash) ? __tmp16["left"] : _idx(__tmp16, "left"))
    r = (__tmp18 = (__tmp19 = $nodes; __tmp19.is_a?(Hash) ? __tmp19[$root] : _idx(__tmp19, $root)); __tmp18.is_a?(Hash) ? __tmp18["right"] : _idx(__tmp18, "right"))
    $root = merge(l, r)
    return result
  end
  def is_empty()
    return _eq($root, $NIL)
  end
  def to_sorted_list()
    res = []
    while !is_empty()
      res = _append(res, pop())
    end
    return res
  end
  $NIL = 0 - 1
  $seed = 1
  $nodes = []
  $root = $NIL
  set_seed(1)
  new_heap()
  insert(2)
  insert(3)
  insert(1)
  insert(5)
  insert(1)
  insert(7)
  puts(((x = to_sorted_list()); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  new_heap()
  insert(1)
  insert(-1)
  insert(0)
  puts(((x = to_sorted_list()); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  new_heap()
  insert(3)
  insert(1)
  insert(3)
  insert(7)
  puts(pop())
  puts(pop())
  puts(pop())
  puts(pop())
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
