# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def tail(xs)
    res = []
    i = 1
    while i < xs.length
      res = (res + [xs[i]])
      i = _add(i, 1)
    end
    return res
  end
  def rotate_left(xs)
    if xs.length == 0
      return xs
    end
    res = []
    i = 1
    while i < xs.length
      res = (res + [xs[i]])
      i = _add(i, 1)
    end
    res = (res + [xs[0]])
    return res
  end
  def permute_recursive(nums)
    if nums.length == 0
      base = []
      return (base + [[]])
    end
    result = []
    current = nums
    count = 0
    while count < nums.length
      n = current[0]
      rest = tail(current)
      perms = permute_recursive(rest)
      j = 0
      while j < perms.length
        perm = (perms[j] + [n])
        result = (result + [perm])
        j = _add(j, 1)
      end
      current = rotate_left(current)
      count = _add(count, 1)
    end
    return result
  end
  def swap(xs, i, j)
    res = []
    k = 0
    while k < xs.length
      if k == i
        res = (res + [xs[j]])
      else
        if k == j
          res = (res + [xs[i]])
        else
          res = (res + [xs[k]])
        end
      end
      k = _add(k, 1)
    end
    return res
  end
  def permute_backtrack_helper(nums, start, output)
    if start == nums.length - 1
      return (output + [nums])
    end
    i = start
    res = output
    while i < nums.length
      swapped = swap(nums, start, i)
      res = permute_backtrack_helper(swapped, _add(start, 1), res)
      i = _add(i, 1)
    end
    return res
  end
  def permute_backtrack(nums)
    output = []
    return permute_backtrack_helper(nums, 0, output)
  end
  puts(((x = permute_recursive([1, 2, 3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = permute_backtrack([1, 2, 3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
