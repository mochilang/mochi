# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_triplet(a, b, c)
    x = a
    y = b
    z = c
    if x > y
      t = x
      x = y
      y = t
    end
    if y > z
      t = y
      y = z
      z = t
    end
    if x > y
      t = x
      x = y
      y = t
    end
    return [x, y, z]
  end
  def contains_triplet(arr, target)
    (0...arr.length).each do |i|
      item = arr[i]
      same = true
      (0...target.length).each do |j|
        if item[j] != target[j]
          same = false
          break
        end
      end
      if same
        return true
      end
    end
    return false
  end
  def contains_int(arr, value)
    (0...arr.length).each do |i|
      if arr[i] == value
        return true
      end
    end
    return false
  end
  def find_triplets_with_0_sum(nums)
    n = nums.length
    result = []
    (0...n).each do |i|
      ((_add(i, 1))...n).each do |j|
        ((_add(j, 1))...n).each do |k|
          a = nums[i]
          b = nums[j]
          c = nums[k]
          if _add(_add(a, b), c) == 0
            trip = sort_triplet(a, b, c)
            if !contains_triplet(result, trip)
              result = (result + [trip])
            end
          end
        end
      end
    end
    return result
  end
  def find_triplets_with_0_sum_hashing(arr)
    target_sum = 0
    output = []
    (0...arr.length).each do |i|
      seen = []
      current_sum = target_sum - arr[i]
      ((_add(i, 1))...arr.length).each do |j|
        other = arr[j]
        required = current_sum - other
        if contains_int(seen, required)
          trip = sort_triplet(arr[i], other, required)
          if !contains_triplet(output, trip)
            output = (output + [trip])
          end
        end
        seen = (seen + [other])
      end
    end
    return output
  end
  puts(((x = find_triplets_with_0_sum([-1, 0, 1, 2, -1, -4])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum([0, 0, 0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum([1, 2, 3, 0, -1, -2, -3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum_hashing([-1, 0, 1, 2, -1, -4])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum_hashing([])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum_hashing([0, 0, 0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = find_triplets_with_0_sum_hashing([1, 2, 3, 0, -1, -2, -3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
