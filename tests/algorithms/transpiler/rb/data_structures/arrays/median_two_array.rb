# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sortFloats(xs)
    arr = xs
    i = 0
    while i < arr.length
      j = 0
      while j < arr.length - 1
        if arr[j] > arr[_add(j, 1)]
          t = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = t
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def find_median_sorted_arrays(nums1, nums2)
    if nums1.length == 0 && nums2.length == 0
      panic("Both input arrays are empty.")
    end
    merged = []
    i = 0
    while i < nums1.length
      merged = (merged + [nums1[i]])
      i = _add(i, 1)
    end
    j = 0
    while j < nums2.length
      merged = (merged + [nums2[j]])
      j = _add(j, 1)
    end
    sorted = sortFloats(merged)
    total = sorted.length
    if total % 2 == 1
      return sorted[total / 2]
    end
    middle1 = sorted[total / 2 - 1]
    middle2 = sorted[total / 2]
    return (_add(middle1, middle2)) / 2.0
  end
  puts(find_median_sorted_arrays([1.0, 3.0], [2.0]))
  puts(find_median_sorted_arrays([1.0, 2.0], [3.0, 4.0]))
  puts(find_median_sorted_arrays([0.0, 0.0], [0.0, 0.0]))
  puts(find_median_sorted_arrays([], [1.0]))
  puts(find_median_sorted_arrays([-1000.0], [1000.0]))
  puts(find_median_sorted_arrays([-1.1, -2.2], [-3.3, -4.4]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
