# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pairs_with_sum(arr, req_sum)
    n = arr.length
    count = 0
    i = 0
    while i < n
      j = _add(i, 1)
      while j < n
        if _add(arr[i], arr[j]) == req_sum
          count = _add(count, 1)
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return count
  end
  puts(pairs_with_sum([1, 5, 7, 1], 6))
  puts(pairs_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 2))
  puts(pairs_with_sum([1, 7, 6, 2, 5, 4, 3, 1, 9, 8], 7))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
