# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def iterator_values(matrix)
    result = []
        __tmp22 = matrix
    if __tmp22.respond_to?(:keys) && !__tmp22.is_a?(String)
      __tmp22 = __tmp22.keys
    end
    __tmp22.each do |row|
            __tmp23 = row
      if __tmp23.respond_to?(:keys) && !__tmp23.is_a?(String)
        __tmp23 = __tmp23.keys
      end
      __tmp23.each do |value|
        result = (result + [value])
      end
    end
    return result
  end
  def index_2d_array_in_1d(array, index)
    rows = array.length
    cols = array[0].length
    if rows == 0 || cols == 0
      panic("no items in array")
    end
    if index < 0 || index >= rows * cols
      panic("index out of range")
    end
    return array[(index / cols).to_i][index % cols]
  end
  puts(((x = iterator_values([[5], [-523], [-1], [34], [0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = iterator_values([[5, -523, -1], [34, 0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts((index_2d_array_in_1d([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], 5)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
