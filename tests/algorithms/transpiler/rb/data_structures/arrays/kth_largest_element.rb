# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def partition(arr, low, high)
    pivot = arr[high]
    i = low - 1
    j = low
    while j < high
      if arr[j] >= pivot
        i = _add(i, 1)
        tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
      end
      j = _add(j, 1)
    end
    k = _add(i, 1)
    tmp = arr[k]
    arr[k] = arr[high]
    arr[high] = tmp
    return k
  end
  def kth_largest_element(arr, position)
    if arr.length == 0
      return -1
    end
    if position < 1 || position > arr.length
      return -1
    end
    low = 0
    high = arr.length - 1
    while low <= high
      if low > arr.length - 1 || high < 0
        return -1
      end
      pivot_index = partition(arr, low, high)
      if pivot_index == position - 1
        return arr[pivot_index]
      else
        if pivot_index > position - 1
          high = pivot_index - 1
        else
          low = _add(pivot_index, 1)
        end
      end
    end
    return -1
  end
  $arr1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
  puts(kth_largest_element($arr1, 3))
  puts("\n")
  $arr2 = [2, 5, 6, 1, 9, 3, 8, 4, 7, 3, 5]
  puts(kth_largest_element($arr2, 1))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
