# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_prefix_sum(arr)
    prefix = []
    running = 0
    i = 0
    while i < arr.length
      running = _add(running, arr[i])
      prefix = (prefix + [running])
      i = _add(i, 1)
    end
    return PrefixSum.new(prefix_sum: prefix)
  end
  def get_sum(ps, start, end_)
    prefix = ps["prefix_sum"]
    if prefix.length == 0
      panic("The array is empty.")
    end
    if start < 0 || end_ >= prefix.length || start > end_
      panic("Invalid range specified.")
    end
    if start == 0
      return prefix[end_]
    end
    return prefix[end_] - prefix[start - 1]
  end
  def contains_sum(ps, target_sum)
    prefix = ps["prefix_sum"]
    sums = [0]
    i = 0
    while i < prefix.length
      sum_item = prefix[i]
      j = 0
      while j < sums.length
        if sums[j] == sum_item - target_sum
          return true
        end
        j = _add(j, 1)
      end
      sums = (sums + [sum_item])
      i = _add(i, 1)
    end
    return false
  end
  PrefixSum = Struct.new(:prefix_sum, keyword_init: true)
  $ps = make_prefix_sum([1, 2, 3])
  puts((get_sum($ps, 0, 2)).to_s)
  puts((get_sum($ps, 1, 2)).to_s)
  puts((get_sum($ps, 2, 2)).to_s)
  puts((contains_sum($ps, 6)).to_s)
  puts((contains_sum($ps, 5)).to_s)
  puts((contains_sum($ps, 3)).to_s)
  puts((contains_sum($ps, 4)).to_s)
  puts((contains_sum($ps, 7)).to_s)
  $ps2 = make_prefix_sum([1, -2, 3])
  puts((contains_sum($ps2, 2)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
