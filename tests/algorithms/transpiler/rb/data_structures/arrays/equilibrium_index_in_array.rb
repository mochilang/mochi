# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def equilibrium_index(arr)
    total = 0
    i = 0
    while i < arr.length
      total = _add(total, arr[i])
      i = _add(i, 1)
    end
    left = 0
    i = 0
    while i < arr.length
      total = total - arr[i]
      if left == total
        return i
      end
      left = _add(left, arr[i])
      i = _add(i, 1)
    end
    return -1
  end
  $arr1 = [-7, 1, 5, 2, -4, 3, 0]
  puts(equilibrium_index($arr1))
  $arr2 = [1, 2, 3, 4, 5]
  puts(equilibrium_index($arr2))
  $arr3 = [1, 1, 1, 1, 1]
  puts(equilibrium_index($arr3))
  $arr4 = [2, 4, 6, 8, 10, 3]
  puts(equilibrium_index($arr4))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
