# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def left_child(idx)
    return idx * 2
  end
  def right_child(idx)
    return _add(idx * 2, 1)
  end
  def build(idx, left, right)
    if left == right
      $st[idx] = $A[left]
    else
      mid = (_add(left, right)) / 2
      build(left_child(idx), left, mid)
      build(right_child(idx), _add(mid, 1), right)
      left_val = $st[left_child(idx)]
      right_val = $st[right_child(idx)]
      $st[idx] = (left_val > right_val ? left_val : right_val)
    end
  end
  def update_recursive(idx, left, right, a, b, val)
    if right < a || left > b
      return true
    end
    if left == right
      $st[idx] = val
      return true
    end
    mid = (_add(left, right)) / 2
    update_recursive(left_child(idx), left, mid, a, b, val)
    update_recursive(right_child(idx), _add(mid, 1), right, a, b, val)
    left_val = $st[left_child(idx)]
    right_val = $st[right_child(idx)]
    $st[idx] = (left_val > right_val ? left_val : right_val)
    return true
  end
  def update(a, b, val)
    return update_recursive(1, 0, $N - 1, a - 1, b - 1, val)
  end
  def query_recursive(idx, left, right, a, b)
    if right < a || left > b
      return $NEG_INF
    end
    if left >= a && right <= b
      return $st[idx]
    end
    mid = (_add(left, right)) / 2
    q1 = query_recursive(left_child(idx), left, mid, a, b)
    q2 = query_recursive(right_child(idx), _add(mid, 1), right, a, b)
    return (q1 > q2 ? q1 : q2)
  end
  def query(a, b)
    return query_recursive(1, 0, $N - 1, a - 1, b - 1)
  end
  def show_data()
    i = 0
    show_list = []
    while i < $N
      show_list = (show_list << query(_add(i, 1), _add(i, 1)))
      i = _add(i, 1)
    end
    puts(((x = show_list); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  def main()
    $A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]
    $N = $A.length
    i = 0
    while i < 4 * $N
      $st = ($st << 0)
      i = _add(i, 1)
    end
    if $N > 0
      build(1, 0, $N - 1)
    end
    puts(query(4, 6))
    puts(query(7, 11))
    puts(query(7, 12))
    update(1, 3, 111)
    puts(query(1, 15))
    update(7, 8, 235)
    show_data()
  end
  $A = []
  $N = 0
  $st = []
  $NEG_INF = -1000000000
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
