# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dfs(node, target, current)
    return (node == Empty ? 0 : (node.is_a?(Node) ? ->(l) { ->(v) { ->(r) { _add(_add(((_add(current, v) == target ? 1 : 0)), dfs(l, target, _add(current, v))), dfs(r, target, _add(current, v))) }.call(node["right"]) }.call(node["value"]) }.call(node["left"]) : nil))
  end
  def path_sum(node, target)
    return (node == Empty ? 0 : (node.is_a?(Node) ? ->(l) { ->(v) { ->(r) { _add(_add(dfs(node, target, 0), path_sum(l, target)), path_sum(r, target)) }.call(node["right"]) }.call(node["value"]) }.call(node["left"]) : nil))
  end
  def sample_tree_one()
    return Node.new(value: 10, left: Node.new(value: 5, left: Node.new(value: 3, left: Node.new(value: 3, left: Empty, right: Empty), right: Node.new(value: -2, left: Empty, right: Empty)), right: Node.new(value: 2, left: Empty, right: Node.new(value: 1, left: Empty, right: Empty))), right: Node.new(value: -3, left: Empty, right: Node.new(value: 11, left: Empty, right: Empty)))
  end
  def sample_tree_two()
    return Node.new(value: 10, left: Node.new(value: 5, left: Node.new(value: 3, left: Node.new(value: 3, left: Empty, right: Empty), right: Node.new(value: -2, left: Empty, right: Empty)), right: Node.new(value: 2, left: Empty, right: Node.new(value: 1, left: Empty, right: Empty))), right: Node.new(value: -3, left: Empty, right: Node.new(value: 10, left: Empty, right: Empty)))
  end
  def main()
    tree1 = sample_tree_one()
    puts(path_sum(tree1, 8))
    puts(path_sum(tree1, 7))
    tree2 = sample_tree_two()
    puts(path_sum(tree2, 8))
  end
  Empty = nil
  Node = Struct.new(:left, :value, :right, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
