# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def tree_sum(nodes, idx)
    if idx == (-1)
      return 0
    end
    node = nodes[idx]
    return _add(_add(node["value"], tree_sum(nodes, node["left"])), tree_sum(nodes, node["right"]))
  end
  def is_sum_node(nodes, idx)
    node = nodes[idx]
    if node["left"] == (-1) && node["right"] == (-1)
      return true
    end
    left_sum = tree_sum(nodes, node["left"])
    right_sum = tree_sum(nodes, node["right"])
    if node["value"] != _add(left_sum, right_sum)
      return false
    end
    left_ok = true
    if node["left"] != (-1)
      left_ok = is_sum_node(nodes, node["left"])
    end
    right_ok = true
    if node["right"] != (-1)
      right_ok = is_sum_node(nodes, node["right"])
    end
    return left_ok && right_ok
  end
  def build_a_tree()
    return [Node.new(value: 11, left: 1, right: 2), Node.new(value: 2, left: 3, right: 4), Node.new(value: 29, left: 5, right: 6), Node.new(value: 1, left: (-1), right: (-1)), Node.new(value: 7, left: (-1), right: (-1)), Node.new(value: 15, left: (-1), right: (-1)), Node.new(value: 40, left: 7, right: (-1)), Node.new(value: 35, left: (-1), right: (-1))]
  end
  def build_a_sum_tree()
    return [Node.new(value: 26, left: 1, right: 2), Node.new(value: 10, left: 3, right: 4), Node.new(value: 3, left: (-1), right: 5), Node.new(value: 4, left: (-1), right: (-1)), Node.new(value: 6, left: (-1), right: (-1)), Node.new(value: 3, left: (-1), right: (-1))]
  end
  Node = Struct.new(:value, :left, :right, keyword_init: true)
  # test non sum tree
  $tree = build_a_tree()
  raise 'assertion failed' unless is_sum_node($tree, 0) == false
  # test sum tree
  $tree = build_a_sum_tree()
  raise 'assertion failed' unless is_sum_node($tree, 0) == true
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
