# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_node(value)
    return [value, nil, nil]
  end
  def insert(node, value)
    if node == nil
      return create_node(value)
    end
    if value < node[0]
      node[1] = insert(node[1], value)
    else
      if value > node[0]
        node[2] = insert(node[2], value)
      end
    end
    return node
  end
  def search(node, value)
    if node == nil
      return false
    end
    if value == node[0]
      return true
    end
    if value < node[0]
      return search(node[1], value)
    end
    return search(node[2], value)
  end
  def inorder(node, acc)
    if node == nil
      return acc
    end
    left_acc = inorder(node[1], acc)
    with_node = (left_acc + [node[0]])
    return inorder(node[2], with_node)
  end
  def find_min(node)
    current = node
    while current[1] != nil
      current = current[1]
    end
    return current[0]
  end
  def find_max(node)
    current = node
    while current[2] != nil
      current = current[2]
    end
    return current[0]
  end
  def delete(node, value)
    if node == nil
      return nil
    end
    if value < node[0]
      node[1] = delete(node[1], value)
    else
      if value > node[0]
        node[2] = delete(node[2], value)
      else
        if node[1] == nil
          return node[2]
        end
        if node[2] == nil
          return node[1]
        end
        min_val = find_min(node[2])
        node[0] = min_val
        node[2] = delete(node[2], min_val)
      end
    end
    return node
  end
  def main()
    root = nil
    nums = [8, 3, 6, 1, 10, 14, 13, 4, 7]
        __tmp24 = nums
    if __tmp24.respond_to?(:keys) && !__tmp24.is_a?(String)
      __tmp24 = __tmp24.keys
    end
    __tmp24.each do |v|
      root = insert(root, v)
    end
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts((search(root, 6) ? 'true' : 'false'))
    puts((search(root, 20) ? 'true' : 'false'))
    puts(find_min(root))
    puts(find_max(root))
    root = delete(root, 6)
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
