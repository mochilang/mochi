# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def digit(ch)
    digits = "0123456789"
    i = 0
    while i < digits.length
      if digits[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return 0
  end
  def to_int(s)
    i = 0
    sign = 1
    if s.length > 0 && s[0...1] == "-"
      sign = -1
      i = 1
    end
    num = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      num = _add(num * 10, digit(ch))
      i = _add(i, 1)
    end
    return sign * num
  end
  def split(s, sep)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == sep
        res = (res << current)
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    res = (res << current)
    return res
  end
  def serialize(node)
    return (node == Empty ? "null" : (node.is_a?(Node) ? ->(l) { ->(v) { ->(r) { _add(_add(_add(_add((v).to_s, ","), serialize(l)), ","), serialize(r)) }.call(node.right) }.call(node.value) }.call(node.left) : nil))
  end
  def build(nodes, idx)
    value = nodes[idx]
    if value == "null"
      return BuildResult.new(node: Empty, next_: _add(idx, 1))
    end
    left_res = build(nodes, _add(idx, 1))
    right_res = build(nodes, left_res.next_)
    node = Node.new(left: left_res.node, value: to_int(value), right: right_res.node)
    return BuildResult.new(node: node, next_: right_res.next_)
  end
  def deserialize(data)
    nodes = split(data, ",")
    res = build(nodes, 0)
    return res.node
  end
  def five_tree()
    left_child = Node.new(value: 2, left: Empty, right: Empty)
    right_left = Node.new(value: 4, left: Empty, right: Empty)
    right_right = Node.new(value: 5, left: Empty, right: Empty)
    right_child = Node.new(value: 3, left: right_left, right: right_right)
    return Node.new(value: 1, left: left_child, right: right_child)
  end
  def main()
    root = five_tree()
    serial = serialize(root)
    puts(serial)
    rebuilt = deserialize(serial)
    serial2 = serialize(rebuilt)
    puts(serial2)
    puts((serial == serial2 ? 'true' : 'false'))
  end
  Empty = Object.new()
  Node = Struct.new(:left, :value, :right, keyword_init: true)
  BuildResult = Struct.new(:node, :next_, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
