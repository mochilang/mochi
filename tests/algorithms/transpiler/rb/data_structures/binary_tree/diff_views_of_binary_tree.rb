# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_tree()
    return Tree.new(values: [3, 9, 20, 15, 7], lefts: [1, $NIL, 3, $NIL, $NIL], rights: [2, $NIL, 4, $NIL, $NIL], root: 0)
  end
  def index_of(xs, x)
    i = 0
    while i < xs.length
      if xs[i] == x
        return i
      end
      i = _add(i, 1)
    end
    return $NIL
  end
  def sort_pairs(hds, vals)
    i = 0
    while i < hds.length
      j = i
      while j > 0 && hds[j - 1] > hds[j]
        hd_tmp = hds[j - 1]
        hds[j - 1] = hds[j]
        hds[j] = hd_tmp
        val_tmp = vals[j - 1]
        vals[j - 1] = vals[j]
        vals[j] = val_tmp
        j = j - 1
      end
      i = _add(i, 1)
    end
  end
  def right_view(t)
    res = []
    queue = [t["root"]]
    while queue.length > 0
      size = queue.length
      i = 0
      while i < size
        idx = queue[i]
        if t["lefts"][idx] != $NIL
          queue = (queue + [t["lefts"][idx]])
        end
        if t["rights"][idx] != $NIL
          queue = (queue + [t["rights"][idx]])
        end
        i = _add(i, 1)
      end
      res = (res + [t["values"][queue[size - 1]]])
      queue = queue[size...queue.length]
    end
    return res
  end
  def left_view(t)
    res = []
    queue = [t["root"]]
    while queue.length > 0
      size = queue.length
      i = 0
      while i < size
        idx = queue[i]
        if t["lefts"][idx] != $NIL
          queue = (queue + [t["lefts"][idx]])
        end
        if t["rights"][idx] != $NIL
          queue = (queue + [t["rights"][idx]])
        end
        i = _add(i, 1)
      end
      res = (res + [t["values"][queue[0]]])
      queue = queue[size...queue.length]
    end
    return res
  end
  def top_view(t)
    hds = []
    vals = []
    queue_idx = [t["root"]]
    queue_hd = [0]
    while queue_idx.length > 0
      idx = queue_idx[0]
      queue_idx = queue_idx[1...queue_idx.length]
      hd = queue_hd[0]
      queue_hd = queue_hd[1...queue_hd.length]
      if index_of(hds, hd) == $NIL
        hds = (hds + [hd])
        vals = (vals + [t["values"][idx]])
      end
      if t["lefts"][idx] != $NIL
        queue_idx = (queue_idx + [t["lefts"][idx]])
        queue_hd = (queue_hd + [hd - 1])
      end
      if t["rights"][idx] != $NIL
        queue_idx = (queue_idx + [t["rights"][idx]])
        queue_hd = (queue_hd + [_add(hd, 1)])
      end
    end
    sort_pairs(hds, vals)
    return vals
  end
  def bottom_view(t)
    hds = []
    vals = []
    queue_idx = [t["root"]]
    queue_hd = [0]
    while queue_idx.length > 0
      idx = queue_idx[0]
      queue_idx = queue_idx[1...queue_idx.length]
      hd = queue_hd[0]
      queue_hd = queue_hd[1...queue_hd.length]
      pos = index_of(hds, hd)
      if pos == $NIL
        hds = (hds + [hd])
        vals = (vals + [t["values"][idx]])
      else
        vals[pos] = t["values"][idx]
      end
      if t["lefts"][idx] != $NIL
        queue_idx = (queue_idx + [t["lefts"][idx]])
        queue_hd = (queue_hd + [hd - 1])
      end
      if t["rights"][idx] != $NIL
        queue_idx = (queue_idx + [t["rights"][idx]])
        queue_hd = (queue_hd + [_add(hd, 1)])
      end
    end
    sort_pairs(hds, vals)
    return vals
  end
  Tree = Struct.new(:values, :lefts, :rights, :root, keyword_init: true)
  $NIL = 0 - 1
  Pair = Struct.new(:idx, :hd, keyword_init: true)
  $tree = make_tree()
  puts(((x = right_view($tree)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = left_view($tree)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = top_view($tree)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = bottom_view($tree)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
