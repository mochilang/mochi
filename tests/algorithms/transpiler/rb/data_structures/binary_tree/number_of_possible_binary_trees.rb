# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def binomial_coefficient(n, k)
    result = 1
    kk = k
    if k > n - k
      kk = n - k
    end
    (0...kk).each do |i|
      result = result * (n - i)
      result = result / (_add(i, 1))
    end
    return result
  end
  def catalan_number(node_count)
    return binomial_coefficient(2 * node_count, node_count) / (_add(node_count, 1))
  end
  def factorial(n)
    if n < 0
      puts("factorial() not defined for negative values")
      return 0
    end
    result = 1
    (1...(_add(n, 1))).each do |i|
      result = result * i
    end
    return result
  end
  def binary_tree_count(node_count)
    return catalan_number(node_count) * factorial(node_count)
  end
  puts("Enter the number of nodes:")
  $input_str = _input()
  $node_count = ($input_str).to_i
  if $node_count <= 0
    puts("We need some nodes to work with.")
  else
    $bst = catalan_number($node_count)
    $bt = binary_tree_count($node_count)
    puts((["Given", $node_count, "nodes, there are", $bt, "binary trees and", $bst, "binary search trees."]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
