# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow2(exp)
    res = 1
    i = 0
    while i < exp
      res = res * 2
      i = _add(i, 1)
    end
    return res
  end
  def create_sparse(max_node, parent)
    j = 1
    while pow2(j) < max_node
      i = 1
      while i <= max_node
        parent[j][i] = parent[j - 1][parent[j - 1][i]]
        i = _add(i, 1)
      end
      j = _add(j, 1)
    end
    return parent
  end
  def lowest_common_ancestor(u, v, level, parent)
    if level[u] < level[v]
      temp = u
      u = v
      v = temp
    end
    i = 18
    while i >= 0
      if level[u] - pow2(i) >= level[v]
        u = parent[i][u]
      end
      i = i - 1
    end
    if u == v
      return u
    end
    i = 18
    while i >= 0
      pu = parent[i][u]
      pv = parent[i][v]
      if pu != 0 && pu != pv
        u = pu
        v = pv
      end
      i = i - 1
    end
    return parent[0][u]
  end
  def breadth_first_search(level, parent, max_node, graph, root)
    level[root] = 0
    q = []
    q = (q << root)
    head = 0
    while head < q.length
      u = q[head]
      head = _add(head, 1)
      adj = graph[u]
      j = 0
      while j < adj.length
        v = adj[j]
        if level[v] == 0 - 1
          level[v] = _add(level[u], 1)
          parent[0][v] = u
          q = (q << v)
        end
        j = _add(j, 1)
      end
    end
  end
  def main()
    max_node = 13
    parent = []
    i = 0
    while i < 20
      row = []
      j = 0
      while j < _add(max_node, 10)
        row = (row << 0)
        j = _add(j, 1)
      end
      parent = (parent << row)
      i = _add(i, 1)
    end
    level = []
    i = 0
    while i < _add(max_node, 10)
      level = (level << 0 - 1)
      i = _add(i, 1)
    end
    graph = {}
    graph[1] = [2, 3, 4]
    graph[2] = [5]
    graph[3] = [6, 7]
    graph[4] = [8]
    graph[5] = [9, 10]
    graph[6] = [11]
    graph[7] = []
    graph[8] = [12, 13]
    graph[9] = []
    graph[10] = []
    graph[11] = []
    graph[12] = []
    graph[13] = []
    breadth_first_search(level, parent, max_node, graph, 1)
    parent = create_sparse(max_node, parent)
    puts(_add("LCA of node 1 and 3 is: ", (lowest_common_ancestor(1, 3, level, parent)).to_s))
    puts(_add("LCA of node 5 and 6 is: ", (lowest_common_ancestor(5, 6, level, parent)).to_s))
    puts(_add("LCA of node 7 and 11 is: ", (lowest_common_ancestor(7, 11, level, parent)).to_s))
    puts(_add("LCA of node 6 and 7 is: ", (lowest_common_ancestor(6, 7, level, parent)).to_s))
    puts(_add("LCA of node 4 and 12 is: ", (lowest_common_ancestor(4, 12, level, parent)).to_s))
    puts(_add("LCA of node 8 and 8 is: ", (lowest_common_ancestor(8, 8, level, parent)).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
