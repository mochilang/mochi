# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def build(arr, combine)
    n = arr.length
    st = []
    i = 0
    while i < 2 * n
      st = (st << 0)
      i = _add(i, 1)
    end
    i = 0
    while i < n
      st[_add(n, i)] = arr[i]
      i = _add(i, 1)
    end
    i = n - 1
    while i > 0
      st[i] = combine.call(st[i * 2], st[_add(i * 2, 1)])
      i = i - 1
    end
    return st
  end
  def update(st, n, combine, p, v)
    idx = _add(p, n)
    st[idx] = v
    while idx > 1
      idx = ((idx / 2)).to_i
      st[idx] = combine.call(st[idx * 2], st[_add(idx * 2, 1)])
    end
  end
  def query(st, n, combine, left, right)
    l = _add(left, n)
    r = _add(right, n)
    res = 0
    has = false
    while l <= r
      if l % 2 == 1
        if !has
          res = st[l]
          has = true
        else
          res = combine.call(res, st[l])
        end
        l = _add(l, 1)
      end
      if r % 2 == 0
        if !has
          res = st[r]
          has = true
        else
          res = combine.call(res, st[r])
        end
        r = r - 1
      end
      l = ((l / 2)).to_i
      r = ((r / 2)).to_i
    end
    return res
  end
  def add(a, b)
    return _add(a, b)
  end
  def min_int(a, b)
    if a < b
      return a
    else
      return b
    end
  end
  def max_int(a, b)
    if a > b
      return a
    else
      return b
    end
  end
  $arr1 = [1, 2, 3]
  $st1 = build($arr1, method(:add))
  puts((query($st1, $arr1.length, method(:add), 0, 2)).to_s)
  $arr2 = [3, 1, 2]
  $st2 = build($arr2, method(:min_int))
  puts((query($st2, $arr2.length, method(:min_int), 0, 2)).to_s)
  $arr3 = [2, 3, 1]
  $st3 = build($arr3, method(:max_int))
  puts((query($st3, $arr3.length, method(:max_int), 0, 2)).to_s)
  $arr4 = [1, 5, 7, -1, 6]
  $n4 = $arr4.length
  $st4 = build($arr4, method(:add))
  update($st4, $n4, method(:add), 1, -1)
  update($st4, $n4, method(:add), 2, 3)
  puts((query($st4, $n4, method(:add), 1, 2)).to_s)
  puts((query($st4, $n4, method(:add), 1, 1)).to_s)
  update($st4, $n4, method(:add), 4, 1)
  puts((query($st4, $n4, method(:add), 3, 4)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
