# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def merge_two_binary_trees(t1, t2)
    return (t1 == Leaf ? t2 : (t1.is_a?(Node) ? ->(l1) { ->(v1) { ->(r1) { (t2 == Leaf ? t1 : (t2.is_a?(Node) ? ->(l2) { ->(v2) { ->(r2) { Node.new(left: merge_two_binary_trees(l1, l2), value: _add(v1, v2), right: merge_two_binary_trees(r1, r2)) }.call(t2["right"]) }.call(t2["value"]) }.call(t2["left"]) : nil)) }.call(t1["right"]) }.call(t1["value"]) }.call(t1["left"]) : nil))
  end
  def is_leaf(t)
    return (t == Leaf ? true : false)
  end
  def get_left(t)
    return (t.is_a?(Node) ? ->(l) { l }.call(t["left"]) : Leaf)
  end
  def get_right(t)
    return (t.is_a?(Node) ? ->(r) { r }.call(t["right"]) : Leaf)
  end
  def get_value(t)
    return (t.is_a?(Node) ? ->(v) { v }.call(t["value"]) : 0)
  end
  def print_preorder(t)
    if !is_leaf(t)
      v = get_value(t)
      l = get_left(t)
      r = get_right(t)
      puts(v)
      print_preorder(l)
      print_preorder(r)
    end
  end
  Leaf = Object.new()
  Node = Struct.new(:left, :value, :right, keyword_init: true)
  $tree1 = Node.new(left: Node.new(left: Node.new(left: Leaf, value: 4, right: Leaf), value: 2, right: Leaf), value: 1, right: Node.new(left: Leaf, value: 3, right: Leaf))
  $tree2 = Node.new(left: Node.new(left: Leaf, value: 4, right: Node.new(left: Leaf, value: 9, right: Leaf)), value: 2, right: Node.new(left: Leaf, value: 6, right: Node.new(left: Leaf, value: 5, right: Leaf)))
  puts("Tree1 is:")
  print_preorder($tree1)
  puts("Tree2 is:")
  print_preorder($tree2)
  $merged_tree = merge_two_binary_trees($tree1, $tree2)
  puts("Merged Tree is:")
  print_preorder($merged_tree)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
