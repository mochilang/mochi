# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mirror_node(left, right, idx)
    if idx == (-1)
      return
    end
    temp = left[idx]
    left[idx] = right[idx]
    right[idx] = temp
    mirror_node(left, right, left[idx])
    mirror_node(left, right, right[idx])
  end
  def mirror(tree)
    mirror_node(tree["left"], tree["right"], tree["root"])
    return tree
  end
  def inorder(tree, idx)
    if idx == (-1)
      return []
    end
    left_vals = inorder(tree, tree["left"][idx])
    right_vals = inorder(tree, tree["right"][idx])
    return _add(_add(left_vals, [tree["values"][idx]]), right_vals)
  end
  def make_tree_zero()
    return Tree.new(values: [0], left: [-1], right: [-1], root: 0)
  end
  def make_tree_seven()
    return Tree.new(values: [1, 2, 3, 4, 5, 6, 7], left: [1, 3, 5, -1, -1, -1, -1], right: [2, 4, 6, -1, -1, -1, -1], root: 0)
  end
  def make_tree_nine()
    return Tree.new(values: [1, 2, 3, 4, 5, 6, 7, 8, 9], left: [1, 3, -1, 6, -1, -1, -1, -1, -1], right: [2, 4, 5, 7, 8, -1, -1, -1, -1], root: 0)
  end
  def main()
    names = ["zero", "seven", "nine"]
    trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()]
    i = 0
    while i < trees.length
      tree = trees[i]
      puts(_add(_add(_add("      The ", names[i]), " tree: "), ((x = inorder(tree, tree["root"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
      mirrored = mirror(tree)
      puts(_add(_add(_add("Mirror of ", names[i]), " tree: "), ((x = inorder(mirrored, mirrored["root"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
      i = _add(i, 1)
    end
  end
  Tree = Struct.new(:values, :left, :right, :root, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
