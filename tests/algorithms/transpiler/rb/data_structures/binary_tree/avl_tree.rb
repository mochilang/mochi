# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_node(value)
    node = {"data" => value, "left" => $NIL, "right" => $NIL, "height" => 1}
    $nodes = ($nodes + [node])
    return $nodes.length - 1
  end
  def get_height(i)
    if i == $NIL
      return 0
    end
    return $nodes[i]["height"]
  end
  def my_max(a, b)
    if a > b
      return a
    end
    return b
  end
  def update_height(i)
    $nodes[i]["height"] = _add(my_max(get_height($nodes[i]["left"]), get_height($nodes[i]["right"])), 1)
  end
  def right_rotation(i)
    left = $nodes[i]["left"]
    $nodes[i]["left"] = $nodes[left]["right"]
    $nodes[left]["right"] = i
    update_height(i)
    update_height(left)
    return left
  end
  def left_rotation(i)
    right = $nodes[i]["right"]
    $nodes[i]["right"] = $nodes[right]["left"]
    $nodes[right]["left"] = i
    update_height(i)
    update_height(right)
    return right
  end
  def lr_rotation(i)
    $nodes[i]["left"] = left_rotation($nodes[i]["left"])
    return right_rotation(i)
  end
  def rl_rotation(i)
    $nodes[i]["right"] = right_rotation($nodes[i]["right"])
    return left_rotation(i)
  end
  def insert_node(i, value)
    if i == $NIL
      return new_node(value)
    end
    if value < $nodes[i]["data"]
      $nodes[i]["left"] = insert_node($nodes[i]["left"], value)
      if get_height($nodes[i]["left"]) - get_height($nodes[i]["right"]) == 2
        if value < $nodes[$nodes[i]["left"]]["data"]
          i = right_rotation(i)
        else
          i = lr_rotation(i)
        end
      end
    else
      $nodes[i]["right"] = insert_node($nodes[i]["right"], value)
      if get_height($nodes[i]["right"]) - get_height($nodes[i]["left"]) == 2
        if value < $nodes[$nodes[i]["right"]]["data"]
          i = rl_rotation(i)
        else
          i = left_rotation(i)
        end
      end
    end
    update_height(i)
    return i
  end
  def get_left_most(i)
    cur = i
    while $nodes[cur]["left"] != $NIL
      cur = $nodes[cur]["left"]
    end
    return $nodes[cur]["data"]
  end
  def del_node(i, value)
    if i == $NIL
      return $NIL
    end
    if value < $nodes[i]["data"]
      $nodes[i]["left"] = del_node($nodes[i]["left"], value)
    else
      if value > $nodes[i]["data"]
        $nodes[i]["right"] = del_node($nodes[i]["right"], value)
      else
        if $nodes[i]["left"] != $NIL && $nodes[i]["right"] != $NIL
          temp = get_left_most($nodes[i]["right"])
          $nodes[i]["data"] = temp
          $nodes[i]["right"] = del_node($nodes[i]["right"], temp)
        else
          if $nodes[i]["left"] != $NIL
            i = $nodes[i]["left"]
          else
            i = $nodes[i]["right"]
          end
        end
      end
    end
    if i == $NIL
      return $NIL
    end
    lh = get_height($nodes[i]["left"])
    rh = get_height($nodes[i]["right"])
    if rh - lh == 2
      if get_height($nodes[$nodes[i]["right"]]["right"]) > get_height($nodes[$nodes[i]["right"]]["left"])
        i = left_rotation(i)
      else
        i = rl_rotation(i)
      end
    else
      if lh - rh == 2
        if get_height($nodes[$nodes[i]["left"]]["left"]) > get_height($nodes[$nodes[i]["left"]]["right"])
          i = right_rotation(i)
        else
          i = lr_rotation(i)
        end
      end
    end
    update_height(i)
    return i
  end
  def inorder(i)
    if i == $NIL
      return ""
    end
    left = inorder($nodes[i]["left"])
    right = inorder($nodes[i]["right"])
    res = ($nodes[i]["data"]).to_s
    if left != ""
      res = _add(_add(left, " "), res)
    end
    if right != ""
      res = _add(_add(res, " "), right)
    end
    return res
  end
  def main()
    $nodes = []
    root = $NIL
    root = insert_node(root, 4)
    root = insert_node(root, 2)
    root = insert_node(root, 3)
    puts(inorder(root))
    puts((get_height(root)).to_s)
    root = del_node(root, 3)
    puts(inorder(root))
  end
  $NIL = 0 - 1
  $nodes = []
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
