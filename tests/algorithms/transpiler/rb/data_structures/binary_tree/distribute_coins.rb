# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def count_nodes(nodes, idx)
    if idx == 0
      return 0
    end
    node = nodes[idx]
    return _add(_add(count_nodes(nodes, node["left"]), count_nodes(nodes, node["right"])), 1)
  end
  def count_coins(nodes, idx)
    if idx == 0
      return 0
    end
    node = nodes[idx]
    return _add(_add(count_coins(nodes, node["left"]), count_coins(nodes, node["right"])), node["data"])
  end
  def iabs(x)
    if x < 0
      return -x
    end
    return x
  end
  def dfs(nodes, idx)
    if idx == 0
      return 0
    end
    node = nodes[idx]
    left_excess = dfs(nodes, node["left"])
    right_excess = dfs(nodes, node["right"])
    abs_left = iabs(left_excess)
    abs_right = iabs(right_excess)
    $total_moves = _add(_add($total_moves, abs_left), abs_right)
    return _add(_add(node["data"], left_excess), right_excess) - 1
  end
  def distribute_coins(nodes, root)
    if root == 0
      return 0
    end
    if count_nodes(nodes, root) != count_coins(nodes, root)
      panic("The nodes number should be same as the number of coins")
    end
    $total_moves = 0
    dfs(nodes, root)
    return $total_moves
  end
  def main()
    example1 = [TreeNode.new(data: 0, left: 0, right: 0), TreeNode.new(data: 3, left: 2, right: 3), TreeNode.new(data: 0, left: 0, right: 0), TreeNode.new(data: 0, left: 0, right: 0)]
    example2 = [TreeNode.new(data: 0, left: 0, right: 0), TreeNode.new(data: 0, left: 2, right: 3), TreeNode.new(data: 3, left: 0, right: 0), TreeNode.new(data: 0, left: 0, right: 0)]
    example3 = [TreeNode.new(data: 0, left: 0, right: 0), TreeNode.new(data: 0, left: 2, right: 3), TreeNode.new(data: 0, left: 0, right: 0), TreeNode.new(data: 3, left: 0, right: 0)]
    puts(distribute_coins(example1, 1))
    puts(distribute_coins(example2, 1))
    puts(distribute_coins(example3, 1))
    puts(distribute_coins([TreeNode.new(data: 0, left: 0, right: 0)], 0))
  end
  TreeNode = Struct.new(:data, :left, :right, keyword_init: true)
  $total_moves = 0
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
