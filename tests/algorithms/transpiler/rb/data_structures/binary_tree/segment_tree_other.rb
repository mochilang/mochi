# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def combine(a, b, op)
    if op == 0
      return _add(a, b)
    end
    if op == 1
      if a > b
        return a
      end
      return b
    end
    if a < b
      return a
    end
    return b
  end
  def build_tree(nodes, arr, start, end_, op)
    if start == end_
      node = Node.new(start: start, end_: end_, val: arr[start], mid: start, left: -1, right: -1)
      new_nodes = (nodes << node)
      return BuildResult.new(nodes: new_nodes, idx: new_nodes.length - 1)
    end
    mid = (_add(start, end_)) / 2
    left_res = build_tree(nodes, arr, start, mid, op)
    right_res = build_tree(left_res.nodes, arr, _add(mid, 1), end_, op)
    left_node = right_res.nodes[left_res.idx]
    right_node = right_res.nodes[right_res.idx]
    val = combine(left_node.val, right_node.val, op)
    parent = Node.new(start: start, end_: end_, val: val, mid: mid, left: left_res.idx, right: right_res.idx)
    new_nodes = (right_res.nodes << parent)
    return BuildResult.new(nodes: new_nodes, idx: new_nodes.length - 1)
  end
  def new_segment_tree(collection, op)
    return SegmentTree.new(arr: collection, op: op)
  end
  def update(tree, i, val)
    new_arr = []
    idx = 0
    while idx < tree.arr.length
      if idx == i
        new_arr = (new_arr << val)
      else
        new_arr = (new_arr << tree.arr[idx])
      end
      idx = _add(idx, 1)
    end
    return SegmentTree.new(arr: new_arr, op: tree.op)
  end
  def query_range(tree, i, j)
    result = tree.arr[i]
    idx = _add(i, 1)
    while idx <= j
      result = combine(result, tree.arr[idx], tree.op)
      idx = _add(idx, 1)
    end
    return result
  end
  def traverse(tree)
    if tree.arr.length == 0
      return []
    end
    res = build_tree([], tree.arr, 0, tree.arr.length - 1, tree.op)
    return res.nodes
  end
  def node_to_string(node)
    return _add(_add(_add(_add(_add(_add("SegmentTreeNode(start=", (node.start).to_s), ", end="), (node.end_).to_s), ", val="), (node.val).to_s), ")")
  end
  def print_traverse(tree)
    nodes = traverse(tree)
    i = 0
    while i < nodes.length
      puts(node_to_string(nodes[i]))
      i = _add(i, 1)
    end
    puts("")
  end
  Node = Struct.new(:start, :end_, :val, :mid, :left, :right, keyword_init: true)
  BuildResult = Struct.new(:nodes, :idx, keyword_init: true)
  SegmentTree = Struct.new(:arr, :op, keyword_init: true)
  $arr = [2, 1, 5, 3, 4]
    __tmp1 = [0, 1, 2]
  if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
    __tmp1 = __tmp1.keys
  end
  __tmp1.each do |op|
    puts("**************************************************")
    tree = new_segment_tree($arr, op)
    print_traverse(tree)
    tree = update(tree, 1, 5)
    print_traverse(tree)
    puts(query_range(tree, 3, 4))
    puts(query_range(tree, 2, 2))
    puts(query_range(tree, 1, 3))
    puts("")
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
