# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def binary_tree_mirror_dict(tree, root)
    if (root == 0) || (!(tree.key?(root)))
      return
    end
    children = tree[root]
    left = children[0]
    right = children[1]
    tree[root] = [right, left]
    binary_tree_mirror_dict(tree, left)
    binary_tree_mirror_dict(tree, right)
  end
  def binary_tree_mirror(binary_tree, root)
    if binary_tree.length == 0
      panic("binary tree cannot be empty")
    end
    if !(binary_tree.key?(root))
      panic(_add(_add("root ", (root).to_s), " is not present in the binary_tree"))
    end
    tree_copy = {}
        __tmp1 = binary_tree.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      tree_copy[k] = binary_tree[k]
    end
    binary_tree_mirror_dict(tree_copy, root)
    return tree_copy
  end
  def main()
    binary_tree = {1 => [2, 3], 2 => [4, 5], 3 => [6, 7], 7 => [8, 9]}
    puts(_add("Binary tree: ", (binary_tree).to_s))
    mirrored = binary_tree_mirror(binary_tree, 1)
    puts(_add("Binary tree mirror: ", (mirrored).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
