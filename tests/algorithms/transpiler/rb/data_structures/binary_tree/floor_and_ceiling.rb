# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def inorder(nodes, idx)
    if idx == (-1)
      return []
    end
    node = nodes[idx]
    result = inorder(nodes, node["left"])
    result = (result + [node["key"]])
    result = _add(result, inorder(nodes, node["right"]))
    return result
  end
  def floor_ceiling(nodes, idx, key)
    floor_val = nil
    ceiling_val = nil
    current = idx
    while current != (-1)
      node = nodes[current]
      if node["key"] == key
        floor_val = node["key"]
        ceiling_val = node["key"]
        break
      end
      if key < node["key"]
        ceiling_val = node["key"]
        current = node["left"]
      else
        floor_val = node["key"]
        current = node["right"]
      end
    end
    return [floor_val, ceiling_val]
  end
  Node = Struct.new(:key, :left, :right, keyword_init: true)
  $tree = [Node.new(key: 10, left: 1, right: 2), Node.new(key: 5, left: 3, right: 4), Node.new(key: 20, left: 5, right: 6), Node.new(key: 3, left: -1, right: -1), Node.new(key: 7, left: -1, right: -1), Node.new(key: 15, left: -1, right: -1), Node.new(key: 25, left: -1, right: -1)]
  puts(((x = inorder($tree, 0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = floor_ceiling($tree, 0, 8)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = floor_ceiling($tree, 0, 14)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = floor_ceiling($tree, 0, -1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = floor_ceiling($tree, 0, 30)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
