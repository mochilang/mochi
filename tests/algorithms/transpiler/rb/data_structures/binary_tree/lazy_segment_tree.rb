# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def init_int_array(n)
    arr = []
    i = 0
    while i < _add(4 * n, 5)
      arr = (arr << 0)
      i = _add(i, 1)
    end
    return arr
  end
  def init_bool_array(n)
    arr = []
    i = 0
    while i < _add(4 * n, 5)
      arr = (arr << false)
      i = _add(i, 1)
    end
    return arr
  end
  def left(idx)
    return idx * 2
  end
  def right(idx)
    return _add(idx * 2, 1)
  end
  def build(segment_tree, idx, l, r, a)
    if l == r
      segment_tree[idx] = a[l - 1]
    else
      mid = (_add(l, r)) / 2
      build(segment_tree, left(idx), l, mid, a)
      build(segment_tree, right(idx), _add(mid, 1), r, a)
      lv = segment_tree[left(idx)]
      rv = segment_tree[right(idx)]
      if lv > rv
        segment_tree[idx] = lv
      else
        segment_tree[idx] = rv
      end
    end
  end
  def update(segment_tree, lazy, flag, idx, l, r, a, b, val)
    if flag[idx]
      segment_tree[idx] = lazy[idx]
      flag[idx] = false
      if l != r
        lazy[left(idx)] = lazy[idx]
        lazy[right(idx)] = lazy[idx]
        flag[left(idx)] = true
        flag[right(idx)] = true
      end
    end
    if r < a || l > b
      return
    end
    if l >= a && r <= b
      segment_tree[idx] = val
      if l != r
        lazy[left(idx)] = val
        lazy[right(idx)] = val
        flag[left(idx)] = true
        flag[right(idx)] = true
      end
      return
    end
    mid = (_add(l, r)) / 2
    update(segment_tree, lazy, flag, left(idx), l, mid, a, b, val)
    update(segment_tree, lazy, flag, right(idx), _add(mid, 1), r, a, b, val)
    lv = segment_tree[left(idx)]
    rv = segment_tree[right(idx)]
    if lv > rv
      segment_tree[idx] = lv
    else
      segment_tree[idx] = rv
    end
  end
  def query(segment_tree, lazy, flag, idx, l, r, a, b)
    if flag[idx]
      segment_tree[idx] = lazy[idx]
      flag[idx] = false
      if l != r
        lazy[left(idx)] = lazy[idx]
        lazy[right(idx)] = lazy[idx]
        flag[left(idx)] = true
        flag[right(idx)] = true
      end
    end
    if r < a || l > b
      return $NEG_INF
    end
    if l >= a && r <= b
      return segment_tree[idx]
    end
    mid = (_add(l, r)) / 2
    q1 = query(segment_tree, lazy, flag, left(idx), l, mid, a, b)
    q2 = query(segment_tree, lazy, flag, right(idx), _add(mid, 1), r, a, b)
    if q1 > q2
      return q1
    else
      return q2
    end
  end
  def segtree_to_string(segment_tree, lazy, flag, n)
    res = "["
    i = 1
    while i <= n
      v = query(segment_tree, lazy, flag, 1, 1, n, i, i)
      res = _add(res, (v).to_s)
      if i < n
        res = _add(res, ", ")
      end
      i = _add(i, 1)
    end
    res = _add(res, "]")
    return res
  end
  $NEG_INF = -1000000000
  $A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]
  $n = 15
  $segment_tree = init_int_array($n)
  $lazy = init_int_array($n)
  $flag = init_bool_array($n)
  build($segment_tree, 1, 1, $n, $A)
  puts(query($segment_tree, $lazy, $flag, 1, 1, $n, 4, 6))
  puts(query($segment_tree, $lazy, $flag, 1, 1, $n, 7, 11))
  puts(query($segment_tree, $lazy, $flag, 1, 1, $n, 7, 12))
  update($segment_tree, $lazy, $flag, 1, 1, $n, 1, 3, 111)
  puts(query($segment_tree, $lazy, $flag, 1, 1, $n, 1, 15))
  update($segment_tree, $lazy, $flag, 1, 1, $n, 7, 8, 235)
  puts(segtree_to_string($segment_tree, $lazy, $flag, $n))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
