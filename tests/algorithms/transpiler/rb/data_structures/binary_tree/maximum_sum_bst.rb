# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def min_int(a, b)
    if a < b
      return a
    end
    return b
  end
  def max_int(a, b)
    if a > b
      return a
    end
    return b
  end
  def solver(nodes, idx)
    if idx == 0 - 1
      return Info.new(is_bst: true, min_val: 2147483647, max_val: -2147483648, total: 0, best: 0)
    end
    node = nodes[idx]
    left_info = solver(nodes, node["left"])
    right_info = solver(nodes, node["right"])
    current_best = max_int(left_info["best"], right_info["best"])
    if left_info["is_bst"] && right_info["is_bst"] && left_info["max_val"] < node["val"] && node["val"] < right_info["min_val"]
      sum_val = _add(_add(left_info["total"], right_info["total"]), node["val"])
      current_best = max_int(current_best, sum_val)
      return Info.new(is_bst: true, min_val: min_int(left_info["min_val"], node["val"]), max_val: max_int(right_info["max_val"], node["val"]), total: sum_val, best: current_best)
    end
    return Info.new(is_bst: false, min_val: 0, max_val: 0, total: 0, best: current_best)
  end
  def max_sum_bst(nodes, root)
    info = solver(nodes, root)
    return info["best"]
  end
  def main()
    t1_nodes = [Node.new(val: 4, left: 1, right: 0 - 1), Node.new(val: 3, left: 2, right: 3), Node.new(val: 1, left: 0 - 1, right: 0 - 1), Node.new(val: 2, left: 0 - 1, right: 0 - 1)]
    puts(max_sum_bst(t1_nodes, 0))
    t2_nodes = [Node.new(val: -4, left: 1, right: 2), Node.new(val: -2, left: 0 - 1, right: 0 - 1), Node.new(val: -5, left: 0 - 1, right: 0 - 1)]
    puts(max_sum_bst(t2_nodes, 0))
    t3_nodes = [Node.new(val: 1, left: 1, right: 2), Node.new(val: 4, left: 3, right: 4), Node.new(val: 3, left: 5, right: 6), Node.new(val: 2, left: 0 - 1, right: 0 - 1), Node.new(val: 4, left: 0 - 1, right: 0 - 1), Node.new(val: 2, left: 0 - 1, right: 0 - 1), Node.new(val: 5, left: 7, right: 8), Node.new(val: 4, left: 0 - 1, right: 0 - 1), Node.new(val: 6, left: 0 - 1, right: 0 - 1)]
    puts(max_sum_bst(t3_nodes, 0))
  end
  Node = Struct.new(:val, :left, :right, keyword_init: true)
  Info = Struct.new(:is_bst, :min_val, :max_val, :total, :best, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
