# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_node(value)
    $node_data = ($node_data + [value])
    $left_child = ($left_child + [0])
    $right_child = ($right_child + [0])
    return $node_data.length - 1
  end
  def build_tree()
    root = new_node(1)
    n2 = new_node(2)
    n5 = new_node(5)
    n3 = new_node(3)
    n4 = new_node(4)
    n6 = new_node(6)
    $left_child[root] = n2
    $right_child[root] = n5
    $left_child[n2] = n3
    $right_child[n2] = n4
    $right_child[n5] = n6
    return root
  end
  def flatten(root)
    if root == 0
      return []
    end
    res = [$node_data[root]]
    left_vals = flatten($left_child[root])
    right_vals = flatten($right_child[root])
    i = 0
    while i < left_vals.length
      res = (res + [left_vals[i]])
      i = _add(i, 1)
    end
    i = 0
    while i < right_vals.length
      res = (res + [right_vals[i]])
      i = _add(i, 1)
    end
    return res
  end
  def display(values)
    s = ""
    i = 0
    while i < values.length
      if i == 0
        s = (values[i]).to_s
      else
        s = _add(_add(s, " "), (values[i]).to_s)
      end
      i = _add(i, 1)
    end
    puts(s)
  end
  $node_data = [0]
  $left_child = [0]
  $right_child = [0]
  puts("Flattened Linked List:")
  $root = build_tree()
  $vals = flatten($root)
  display($vals)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
