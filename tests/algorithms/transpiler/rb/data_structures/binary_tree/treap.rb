# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def random()
    $seed = (_add($seed * 13, 7)) % 100
    return (($seed).to_f) / 100.0
  end
  def new_node(value)
    $node_values = ($node_values << value)
    $node_priors = ($node_priors << random())
    $node_lefts = ($node_lefts << $NIL)
    $node_rights = ($node_rights << $NIL)
    return $node_values.length - 1
  end
  def split(root, value)
    if root == $NIL
      return SplitResult.new(left: $NIL, right: $NIL)
    end
    if value < $node_values[root]
      res = split($node_lefts[root], value)
      $node_lefts[root] = res.right
      return SplitResult.new(left: res.left, right: root)
    end
    res = split($node_rights[root], value)
    $node_rights[root] = res.left
    return SplitResult.new(left: root, right: res.right)
  end
  def merge(left, right)
    if left == $NIL
      return right
    end
    if right == $NIL
      return left
    end
    if $node_priors[left] < $node_priors[right]
      $node_rights[left] = merge($node_rights[left], right)
      return left
    end
    $node_lefts[right] = merge(left, $node_lefts[right])
    return right
  end
  def insert(root, value)
    node = new_node(value)
    res = split(root, value)
    return merge(merge(res.left, node), res.right)
  end
  def erase(root, value)
    res1 = split(root, value - 1)
    res2 = split(res1.right, value)
    return merge(res1.left, res2.right)
  end
  def inorder(i, acc)
    if i == $NIL
      return acc
    end
    left_acc = inorder($node_lefts[i], acc)
    with_node = (left_acc << $node_values[i])
    return inorder($node_rights[i], with_node)
  end
  def main()
    root = $NIL
    root = insert(root, 1)
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    root = insert(root, 3)
    root = insert(root, 5)
    root = insert(root, 17)
    root = insert(root, 19)
    root = insert(root, 2)
    root = insert(root, 16)
    root = insert(root, 4)
    root = insert(root, 0)
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    root = insert(root, 4)
    root = insert(root, 4)
    root = insert(root, 4)
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    root = erase(root, 0)
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    root = erase(root, 4)
    puts(((x = inorder(root, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  $NIL = 0 - 1
  $node_values = []
  $node_priors = []
  $node_lefts = []
  $node_rights = []
  $seed = 1
  SplitResult = Struct.new(:left, :right, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
