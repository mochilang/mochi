# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_node(state, value)
    state["nodes"] = (state["nodes"] << Node.new(data: value, left: (-1), right: (-1)))
    return state["nodes"].length - 1
  end
  def insert(state, value)
    if state["root"] == (-1)
      state["root"] = new_node(state, value)
      return
    end
    current = state["root"]
    nodes = state["nodes"]
    while true
      node = nodes[current]
      if value < node["data"]
        if node["left"] == (-1)
          node["left"] = new_node(state, value)
          nodes[current] = node
          state["nodes"] = nodes
          return
        end
        current = node["left"]
      else
        if node["right"] == (-1)
          node["right"] = new_node(state, value)
          nodes[current] = node
          state["nodes"] = nodes
          return
        end
        current = node["right"]
      end
    end
  end
  def inorder(state, idx)
    if idx == (-1)
      return []
    end
    node = state["nodes"][idx]
    result = inorder(state, node["left"])
    result = (result << node["data"])
    right_part = inorder(state, node["right"])
    i = 0
    while i < right_part.length
      result = (result << right_part[i])
      i = _add(i, 1)
    end
    return result
  end
  def make_tree()
    state = TreeState.new(nodes: [], root: (-1))
    insert(state, 15)
    insert(state, 10)
    insert(state, 25)
    insert(state, 6)
    insert(state, 14)
    insert(state, 20)
    insert(state, 60)
    return state
  end
  def main()
    state = make_tree()
    puts("Printing values of binary search tree in Inorder Traversal.")
    puts(((x = inorder(state, state["root"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  Node = Struct.new(:data, :left, :right, keyword_init: true)
  TreeState = Struct.new(:nodes, :root, keyword_init: true)
  main()
  # test inorder traversal
  $state = make_tree()
  raise 'assertion failed' unless inorder($state, $state["root"]) == [6, 10, 14, 15, 20, 25, 60]
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
