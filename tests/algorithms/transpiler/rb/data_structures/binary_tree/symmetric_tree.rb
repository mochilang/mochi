# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_symmetric_tree()
    return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [4, -1, -1], [3, -1, -1]]
  end
  def make_asymmetric_tree()
    return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [3, -1, -1], [4, -1, -1]]
  end
  def is_symmetric_tree(tree)
    stack = [tree[0][1], tree[0][2]]
    while stack.length >= 2
      left = stack[stack.length - 2]
      right = stack[stack.length - 1]
      stack = stack[0...stack.length - 2]
      if left == (-1) && right == (-1)
        next
      end
      if left == (-1) || right == (-1)
        return false
      end
      lnode = tree[left]
      rnode = tree[right]
      if lnode[0] != rnode[0]
        return false
      end
      stack = (stack << lnode[1])
      stack = (stack << rnode[2])
      stack = (stack << lnode[2])
      stack = (stack << rnode[1])
    end
    return true
  end
  $symmetric_tree = make_symmetric_tree()
  $asymmetric_tree = make_asymmetric_tree()
  puts((is_symmetric_tree($symmetric_tree)).to_s)
  puts((is_symmetric_tree($asymmetric_tree)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
