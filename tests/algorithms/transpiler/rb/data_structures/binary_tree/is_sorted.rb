# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def inorder(tree, index)
    res = []
    if index == $NONE
      return res
    end
    left_idx = tree["left"][index]
    if left_idx != $NONE
      res = _add(res, inorder(tree, left_idx))
    end
    res = (res << tree["data"][index])
    right_idx = tree["right"][index]
    if right_idx != $NONE
      res = _add(res, inorder(tree, right_idx))
    end
    return res
  end
  def is_sorted(tree, index)
    if index == $NONE
      return true
    end
    left_idx = tree["left"][index]
    if left_idx != $NONE
      if tree["data"][index] < tree["data"][left_idx]
        return false
      end
      if !is_sorted(tree, left_idx)
        return false
      end
    end
    right_idx = tree["right"][index]
    if right_idx != $NONE
      if tree["data"][index] > tree["data"][right_idx]
        return false
      end
      if !is_sorted(tree, right_idx)
        return false
      end
    end
    return true
  end
  $NONE = 0 - 1
  Tree = Struct.new(:data, :left, :right, keyword_init: true)
  $tree1 = Tree.new(data: [2.1, 2.0, 2.2], left: [1, $NONE, $NONE], right: [2, $NONE, $NONE])
  puts(_add(_add(_add("Tree ", ((x = inorder($tree1, 0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " is sorted: "), (is_sorted($tree1, 0)).to_s))
  $tree2 = Tree.new(data: [2.1, 2.0, 2.0], left: [1, $NONE, $NONE], right: [2, $NONE, $NONE])
  puts(_add(_add(_add("Tree ", ((x = inorder($tree2, 0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " is sorted: "), (is_sorted($tree2, 0)).to_s))
  $tree3 = Tree.new(data: [2.1, 2.0, 2.1], left: [1, $NONE, $NONE], right: [2, $NONE, $NONE])
  puts(_add(_add(_add("Tree ", ((x = inorder($tree3, 0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), " is sorted: "), (is_sorted($tree3, 0)).to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
