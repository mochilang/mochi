# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def inorder(nodes, index, acc)
    if index == 0 - 1
      return acc
    end
    node = nodes[index]
    res = inorder(nodes, node["left"], acc)
    res = (res + [node["data"]])
    res = inorder(nodes, node["right"], res)
    return res
  end
  def size(nodes, index)
    if index == 0 - 1
      return 0
    end
    node = nodes[index]
    return _add(_add(1, size(nodes, node["left"])), size(nodes, node["right"]))
  end
  def depth(nodes, index)
    if index == 0 - 1
      return 0
    end
    node = nodes[index]
    left_depth = depth(nodes, node["left"])
    right_depth = depth(nodes, node["right"])
    if left_depth > right_depth
      return _add(left_depth, 1)
    end
    return _add(right_depth, 1)
  end
  def is_full(nodes, index)
    if index == 0 - 1
      return true
    end
    node = nodes[index]
    if node["left"] == 0 - 1 && node["right"] == 0 - 1
      return true
    end
    if node["left"] != 0 - 1 && node["right"] != 0 - 1
      return is_full(nodes, node["left"]) && is_full(nodes, node["right"])
    end
    return false
  end
  def small_tree()
    arr = []
    arr = (arr + [Node.new(data: 2, left: 1, right: 2)])
    arr = (arr + [Node.new(data: 1, left: 0 - 1, right: 0 - 1)])
    arr = (arr + [Node.new(data: 3, left: 0 - 1, right: 0 - 1)])
    return arr
  end
  def medium_tree()
    arr = []
    arr = (arr + [Node.new(data: 4, left: 1, right: 4)])
    arr = (arr + [Node.new(data: 2, left: 2, right: 3)])
    arr = (arr + [Node.new(data: 1, left: 0 - 1, right: 0 - 1)])
    arr = (arr + [Node.new(data: 3, left: 0 - 1, right: 0 - 1)])
    arr = (arr + [Node.new(data: 5, left: 0 - 1, right: 5)])
    arr = (arr + [Node.new(data: 6, left: 0 - 1, right: 6)])
    arr = (arr + [Node.new(data: 7, left: 0 - 1, right: 0 - 1)])
    return arr
  end
  Node = Struct.new(:data, :left, :right, keyword_init: true)
  $small = small_tree()
  puts(size($small, 0))
  puts(((x = inorder($small, 0, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(depth($small, 0))
  puts((is_full($small, 0) ? 'true' : 'false'))
  $medium = medium_tree()
  puts(size($medium, 0))
  puts(((x = inorder($medium, 0, [])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(depth($medium, 0))
  puts((is_full($medium, 0) ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
