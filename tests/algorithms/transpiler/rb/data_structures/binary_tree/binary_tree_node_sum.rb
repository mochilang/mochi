# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:56 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def node_sum(tree, index)
    if index == (-1)
      return 0
    end
    node = tree[index]
    return _add(_add(node["value"], node_sum(tree, node["left"])), node_sum(tree, node["right"]))
  end
  Node = Struct.new(:value, :left, :right, keyword_init: true)
  $example = [Node.new(value: 10, left: 1, right: 2), Node.new(value: 5, left: 3, right: -1), Node.new(value: -3, left: 4, right: 5), Node.new(value: 12, left: -1, right: -1), Node.new(value: 8, left: -1, right: -1), Node.new(value: 0, left: -1, right: -1)]
  puts(node_sum($example, 0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
