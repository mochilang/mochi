# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def random()
    $seed = (_add($seed * 13, 7)) % 100
    return (($seed).to_f) / 100.0
  end
  def random_level()
    lvl = 1
    while random() < $P && lvl < $MAX_LEVEL
      lvl = _add(lvl, 1)
    end
    return lvl
  end
  def empty_forward()
    f = []
    i = 0
    while i < $MAX_LEVEL
      f = (f << $NIL)
      i = _add(i, 1)
    end
    return f
  end
  def init()
    $node_keys = [-1]
    $node_vals = [0]
    $node_forwards = [empty_forward()]
    $level = 1
  end
  def insert(key, value)
    update = []
    i = 0
    while i < $MAX_LEVEL
      update = (update << 0)
      i = _add(i, 1)
    end
    x = 0
    i = $level - 1
    while i >= 0
      while $node_forwards[x][i] != $NIL && $node_keys[$node_forwards[x][i]] < key
        x = $node_forwards[x][i]
      end
      update[i] = x
      i = i - 1
    end
    x = $node_forwards[x][0]
    if x != $NIL && $node_keys[x] == key
      $node_vals[x] = value
      return
    end
    lvl = random_level()
    if lvl > $level
      j = $level
      while j < lvl
        update[j] = 0
        j = _add(j, 1)
      end
      $level = lvl
    end
    $node_keys = ($node_keys << key)
    $node_vals = ($node_vals << value)
    forwards = empty_forward()
    idx = $node_keys.length - 1
    i = 0
    while i < lvl
      forwards[i] = $node_forwards[update[i]][i]
      $node_forwards[update[i]][i] = idx
      i = _add(i, 1)
    end
    $node_forwards = ($node_forwards << forwards)
  end
  def find(key)
    x = 0
    i = $level - 1
    while i >= 0
      while $node_forwards[x][i] != $NIL && $node_keys[$node_forwards[x][i]] < key
        x = $node_forwards[x][i]
      end
      i = i - 1
    end
    x = $node_forwards[x][0]
    if x != $NIL && $node_keys[x] == key
      return $node_vals[x]
    end
    return -1
  end
  def delete(key)
    update = []
    i = 0
    while i < $MAX_LEVEL
      update = (update << 0)
      i = _add(i, 1)
    end
    x = 0
    i = $level - 1
    while i >= 0
      while $node_forwards[x][i] != $NIL && $node_keys[$node_forwards[x][i]] < key
        x = $node_forwards[x][i]
      end
      update[i] = x
      i = i - 1
    end
    x = $node_forwards[x][0]
    if x == $NIL || $node_keys[x] != key
      return
    end
    i = 0
    while i < $level
      if $node_forwards[update[i]][i] == x
        $node_forwards[update[i]][i] = $node_forwards[x][i]
      end
      i = _add(i, 1)
    end
    while $level > 1 && $node_forwards[0][$level - 1] == $NIL
      $level = $level - 1
    end
  end
  def to_string()
    s = ""
    x = $node_forwards[0][0]
    while x != $NIL
      if s != ""
        s = _add(s, " -> ")
      end
      s = _add(_add(_add(s, ($node_keys[x]).to_s), ":"), ($node_vals[x]).to_s)
      x = $node_forwards[x][0]
    end
    return s
  end
  def main()
    init()
    insert(2, 2)
    insert(4, 4)
    insert(6, 4)
    insert(4, 5)
    insert(8, 4)
    insert(9, 4)
    delete(4)
    puts(to_string())
  end
  $NIL = 0 - 1
  $MAX_LEVEL = 6
  $P = 0.5
  $seed = 1
  $node_keys = []
  $node_vals = []
  $node_forwards = []
  $level = 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
