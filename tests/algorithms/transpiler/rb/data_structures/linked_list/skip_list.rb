# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def random()
    $seed = (_add($seed * 13, 7)) % 100
    return (($seed).to_f) / 100.0
  end
  def random_level()
    lvl = 1
    while random() < $P && lvl < $MAX_LEVEL
      lvl = _add(lvl, 1)
    end
    return lvl
  end
  def empty_forward()
    f = []
    i = 0
    while i < $MAX_LEVEL
      f = _append(f, $NIL)
      i = _add(i, 1)
    end
    return f
  end
  def init()
    $node_keys = [-1]
    $node_vals = [0]
    $node_forwards = [empty_forward()]
    $level = 1
  end
  def insert(key, value)
    update = []
    i = 0
    while i < $MAX_LEVEL
      update = _append(update, 0)
      i = _add(i, 1)
    end
    x = 0
    i = $level - 1
    while i >= 0
      while !_eq((__tmp1 = (__tmp2 = $node_forwards; __tmp2.is_a?(Hash) ? __tmp2[x] : _idx(__tmp2, x)); __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), $NIL) && (__tmp3 = $node_keys; __tmp3.is_a?(Hash) ? __tmp3[(__tmp4 = (__tmp5 = $node_forwards; __tmp5.is_a?(Hash) ? __tmp5[x] : _idx(__tmp5, x)); __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))] : _idx(__tmp3, (__tmp6 = (__tmp7 = $node_forwards; __tmp7.is_a?(Hash) ? __tmp7[x] : _idx(__tmp7, x)); __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)))) < key
        x = (__tmp8 = (__tmp9 = $node_forwards; __tmp9.is_a?(Hash) ? __tmp9[x] : _idx(__tmp9, x)); __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      end
      update[i] = x
      i = i - 1
    end
    x = (__tmp10 = (__tmp11 = $node_forwards; __tmp11.is_a?(Hash) ? __tmp11[x] : _idx(__tmp11, x)); __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0))
    if !_eq(x, $NIL) && _eq((__tmp12 = $node_keys; __tmp12.is_a?(Hash) ? __tmp12[x] : _idx(__tmp12, x)), key)
      $node_vals[x] = value
      return
    end
    lvl = random_level()
    if lvl > $level
      j = $level
      while j < lvl
        update[j] = 0
        j = _add(j, 1)
      end
      $level = lvl
    end
    $node_keys = _append($node_keys, key)
    $node_vals = _append($node_vals, value)
    forwards = empty_forward()
    idx = _len($node_keys) - 1
    i = 0
    while i < lvl
      forwards[i] = (__tmp13 = (__tmp14 = $node_forwards; __tmp14.is_a?(Hash) ? __tmp14[(__tmp15 = update; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))] : _idx(__tmp14, (__tmp16 = update; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)))); __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      (__tmp17 = $node_forwards; __tmp17.is_a?(Hash) ? __tmp17[(__tmp18 = update; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))] : _idx(__tmp17, (__tmp19 = update; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))))[i] = idx
      i = _add(i, 1)
    end
    $node_forwards = _append($node_forwards, forwards)
  end
  def find(key)
    x = 0
    i = $level - 1
    while i >= 0
      while !_eq((__tmp20 = (__tmp21 = $node_forwards; __tmp21.is_a?(Hash) ? __tmp21[x] : _idx(__tmp21, x)); __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), $NIL) && (__tmp22 = $node_keys; __tmp22.is_a?(Hash) ? __tmp22[(__tmp23 = (__tmp24 = $node_forwards; __tmp24.is_a?(Hash) ? __tmp24[x] : _idx(__tmp24, x)); __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i))] : _idx(__tmp22, (__tmp25 = (__tmp26 = $node_forwards; __tmp26.is_a?(Hash) ? __tmp26[x] : _idx(__tmp26, x)); __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i)))) < key
        x = (__tmp27 = (__tmp28 = $node_forwards; __tmp28.is_a?(Hash) ? __tmp28[x] : _idx(__tmp28, x)); __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i))
      end
      i = i - 1
    end
    x = (__tmp29 = (__tmp30 = $node_forwards; __tmp30.is_a?(Hash) ? __tmp30[x] : _idx(__tmp30, x)); __tmp29.is_a?(Hash) ? __tmp29[0] : _idx(__tmp29, 0))
    if !_eq(x, $NIL) && _eq((__tmp31 = $node_keys; __tmp31.is_a?(Hash) ? __tmp31[x] : _idx(__tmp31, x)), key)
      return (__tmp32 = $node_vals; __tmp32.is_a?(Hash) ? __tmp32[x] : _idx(__tmp32, x))
    end
    return -1
  end
  def delete(key)
    update = []
    i = 0
    while i < $MAX_LEVEL
      update = _append(update, 0)
      i = _add(i, 1)
    end
    x = 0
    i = $level - 1
    while i >= 0
      while !_eq((__tmp33 = (__tmp34 = $node_forwards; __tmp34.is_a?(Hash) ? __tmp34[x] : _idx(__tmp34, x)); __tmp33.is_a?(Hash) ? __tmp33[i] : _idx(__tmp33, i)), $NIL) && (__tmp35 = $node_keys; __tmp35.is_a?(Hash) ? __tmp35[(__tmp36 = (__tmp37 = $node_forwards; __tmp37.is_a?(Hash) ? __tmp37[x] : _idx(__tmp37, x)); __tmp36.is_a?(Hash) ? __tmp36[i] : _idx(__tmp36, i))] : _idx(__tmp35, (__tmp38 = (__tmp39 = $node_forwards; __tmp39.is_a?(Hash) ? __tmp39[x] : _idx(__tmp39, x)); __tmp38.is_a?(Hash) ? __tmp38[i] : _idx(__tmp38, i)))) < key
        x = (__tmp40 = (__tmp41 = $node_forwards; __tmp41.is_a?(Hash) ? __tmp41[x] : _idx(__tmp41, x)); __tmp40.is_a?(Hash) ? __tmp40[i] : _idx(__tmp40, i))
      end
      update[i] = x
      i = i - 1
    end
    x = (__tmp42 = (__tmp43 = $node_forwards; __tmp43.is_a?(Hash) ? __tmp43[x] : _idx(__tmp43, x)); __tmp42.is_a?(Hash) ? __tmp42[0] : _idx(__tmp42, 0))
    if _eq(x, $NIL) || !_eq((__tmp44 = $node_keys; __tmp44.is_a?(Hash) ? __tmp44[x] : _idx(__tmp44, x)), key)
      return
    end
    i = 0
    while i < $level
      if _eq((__tmp45 = (__tmp46 = $node_forwards; __tmp46.is_a?(Hash) ? __tmp46[(__tmp47 = update; __tmp47.is_a?(Hash) ? __tmp47[i] : _idx(__tmp47, i))] : _idx(__tmp46, (__tmp48 = update; __tmp48.is_a?(Hash) ? __tmp48[i] : _idx(__tmp48, i)))); __tmp45.is_a?(Hash) ? __tmp45[i] : _idx(__tmp45, i)), x)
        (__tmp49 = $node_forwards; __tmp49.is_a?(Hash) ? __tmp49[(__tmp50 = update; __tmp50.is_a?(Hash) ? __tmp50[i] : _idx(__tmp50, i))] : _idx(__tmp49, (__tmp51 = update; __tmp51.is_a?(Hash) ? __tmp51[i] : _idx(__tmp51, i))))[i] = (__tmp52 = (__tmp53 = $node_forwards; __tmp53.is_a?(Hash) ? __tmp53[x] : _idx(__tmp53, x)); __tmp52.is_a?(Hash) ? __tmp52[i] : _idx(__tmp52, i))
      end
      i = _add(i, 1)
    end
    while $level > 1 && _eq((__tmp54 = (__tmp55 = $node_forwards; __tmp55.is_a?(Hash) ? __tmp55[0] : _idx(__tmp55, 0)); __tmp54.is_a?(Hash) ? __tmp54[$level - 1] : _idx(__tmp54, $level - 1)), $NIL)
      $level = $level - 1
    end
  end
  def to_string()
    s = ""
    x = (__tmp56 = (__tmp57 = $node_forwards; __tmp57.is_a?(Hash) ? __tmp57[0] : _idx(__tmp57, 0)); __tmp56.is_a?(Hash) ? __tmp56[0] : _idx(__tmp56, 0))
    while !_eq(x, $NIL)
      if !_eq(s, "")
        s = _add(s, " -> ")
      end
      s = _add(_add(_add(s, _str((__tmp58 = $node_keys; __tmp58.is_a?(Hash) ? __tmp58[x] : _idx(__tmp58, x)))), ":"), _str((__tmp59 = $node_vals; __tmp59.is_a?(Hash) ? __tmp59[x] : _idx(__tmp59, x))))
      x = (__tmp60 = (__tmp61 = $node_forwards; __tmp61.is_a?(Hash) ? __tmp61[x] : _idx(__tmp61, x)); __tmp60.is_a?(Hash) ? __tmp60[0] : _idx(__tmp60, 0))
    end
    return s
  end
  def main()
    init()
    insert(2, 2)
    insert(4, 4)
    insert(6, 4)
    insert(4, 5)
    insert(8, 4)
    insert(9, 4)
    delete(4)
    puts(to_string())
  end
  $NIL = 0 - 1
  $MAX_LEVEL = 6
  $P = 0.5
  $seed = 1
  $node_keys = []
  $node_vals = []
  $node_forwards = []
  $level = 1
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
