# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_deque()
    nodes = []
    nodes = _append(nodes, Node.new(data: "", prev: -1, next_: 1))
    nodes = _append(nodes, Node.new(data: "", prev: 0, next_: -1))
    return LinkedDeque.new(nodes: nodes, header: 0, trailer: 1, size: 0)
  end
  def is_empty(d)
    return _eq(d.size, 0)
  end
  def front(d)
    if is_empty(d)
      panic("List is empty")
    end
    head = (__tmp1 = d.nodes; __tmp1.is_a?(Hash) ? __tmp1[d.header] : _idx(__tmp1, d.header))
    idx = head.next_
    node = (__tmp2 = d.nodes; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx))
    return node.data
  end
  def back(d)
    if is_empty(d)
      panic("List is empty")
    end
    tail = (__tmp3 = d.nodes; __tmp3.is_a?(Hash) ? __tmp3[d.trailer] : _idx(__tmp3, d.trailer))
    idx = tail.prev
    node = (__tmp4 = d.nodes; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))
    return node.data
  end
  def insert(d, pred, value, succ)
    nodes = d.nodes
    new_idx = _len(nodes)
    nodes = _append(nodes, Node.new(data: value, prev: pred, next_: succ))
    pred_node = (__tmp5 = nodes; __tmp5.is_a?(Hash) ? __tmp5[pred] : _idx(__tmp5, pred))
    pred_node.next_ = new_idx
    nodes[pred] = pred_node
    succ_node = (__tmp6 = nodes; __tmp6.is_a?(Hash) ? __tmp6[succ] : _idx(__tmp6, succ))
    succ_node.prev = new_idx
    nodes[succ] = succ_node
    d.nodes = nodes
    d.size = _add(d.size, 1)
    return d
  end
  def delete(d, idx)
    nodes = d.nodes
    node = (__tmp7 = nodes; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx))
    pred = node.prev
    succ = node.next_
    pred_node = (__tmp8 = nodes; __tmp8.is_a?(Hash) ? __tmp8[pred] : _idx(__tmp8, pred))
    pred_node.next_ = succ
    nodes[pred] = pred_node
    succ_node = (__tmp9 = nodes; __tmp9.is_a?(Hash) ? __tmp9[succ] : _idx(__tmp9, succ))
    succ_node.prev = pred
    nodes[succ] = succ_node
    val = node.data
    d.nodes = nodes
    d.size = d.size - 1
    return DeleteResult.new(deque: d, value: val)
  end
  def add_first(d, value)
    head = (__tmp10 = d.nodes; __tmp10.is_a?(Hash) ? __tmp10[d.header] : _idx(__tmp10, d.header))
    succ = head.next_
    return insert(d, d.header, value, succ)
  end
  def add_last(d, value)
    tail = (__tmp11 = d.nodes; __tmp11.is_a?(Hash) ? __tmp11[d.trailer] : _idx(__tmp11, d.trailer))
    pred = tail.prev
    return insert(d, pred, value, d.trailer)
  end
  def remove_first(d)
    if is_empty(d)
      panic("remove_first from empty list")
    end
    head = (__tmp12 = d.nodes; __tmp12.is_a?(Hash) ? __tmp12[d.header] : _idx(__tmp12, d.header))
    idx = head.next_
    return delete(d, idx)
  end
  def remove_last(d)
    if is_empty(d)
      panic("remove_first from empty list")
    end
    tail = (__tmp13 = d.nodes; __tmp13.is_a?(Hash) ? __tmp13[d.trailer] : _idx(__tmp13, d.trailer))
    idx = tail.prev
    return delete(d, idx)
  end
  def main()
    d = new_deque()
    d = add_first(d, "A")
    puts(front(d))
    d = add_last(d, "B")
    puts(back(d))
    r = remove_first(d)
    d = r.deque
    puts(r.value)
    r = remove_last(d)
    d = r.deque
    puts(r.value)
    puts(_str(is_empty(d)))
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:data, :prev, :next_, keyword_init: true))
  Object.send(:remove_const, :LinkedDeque) if Object.const_defined?(:LinkedDeque)
  Object.const_set(:LinkedDeque, Struct.new(:nodes, :header, :trailer, :size, keyword_init: true))
  Object.send(:remove_const, :DeleteResult) if Object.const_defined?(:DeleteResult)
  Object.const_set(:DeleteResult, Struct.new(:deque, :value, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
