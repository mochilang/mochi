# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_deque()
    nodes = []
    nodes = (nodes << Node.new(data: "", prev: -1, next_: 1))
    nodes = (nodes << Node.new(data: "", prev: 0, next_: -1))
    return LinkedDeque.new(nodes: nodes, header: 0, trailer: 1, size: 0)
  end
  def is_empty(d)
    return d.size == 0
  end
  def front(d)
    if is_empty(d)
      panic("List is empty")
    end
    head = d.nodes[d.header]
    idx = head.next_
    node = d.nodes[idx]
    return node.data
  end
  def back(d)
    if is_empty(d)
      panic("List is empty")
    end
    tail = d.nodes[d.trailer]
    idx = tail.prev
    node = d.nodes[idx]
    return node.data
  end
  def insert(d, pred, value, succ)
    nodes = d.nodes
    new_idx = nodes.length
    nodes = (nodes << Node.new(data: value, prev: pred, next_: succ))
    pred_node = nodes[pred]
    pred_node["next_"] = new_idx
    nodes[pred] = pred_node
    succ_node = nodes[succ]
    succ_node["prev"] = new_idx
    nodes[succ] = succ_node
    d["nodes"] = nodes
    d["size"] = _add(d.size, 1)
    return d
  end
  def delete(d, idx)
    nodes = d.nodes
    node = nodes[idx]
    pred = node.prev
    succ = node.next_
    pred_node = nodes[pred]
    pred_node["next_"] = succ
    nodes[pred] = pred_node
    succ_node = nodes[succ]
    succ_node["prev"] = pred
    nodes[succ] = succ_node
    val = node.data
    d["nodes"] = nodes
    d["size"] = d.size - 1
    return DeleteResult.new(deque: d, value: val)
  end
  def add_first(d, value)
    head = d.nodes[d.header]
    succ = head.next_
    return insert(d, d.header, value, succ)
  end
  def add_last(d, value)
    tail = d.nodes[d.trailer]
    pred = tail.prev
    return insert(d, pred, value, d.trailer)
  end
  def remove_first(d)
    if is_empty(d)
      panic("remove_first from empty list")
    end
    head = d.nodes[d.header]
    idx = head.next_
    return delete(d, idx)
  end
  def remove_last(d)
    if is_empty(d)
      panic("remove_first from empty list")
    end
    tail = d.nodes[d.trailer]
    idx = tail.prev
    return delete(d, idx)
  end
  def main()
    d = new_deque()
    d = add_first(d, "A")
    puts(front(d))
    d = add_last(d, "B")
    puts(back(d))
    r = remove_first(d)
    d = r.deque
    puts(r.value)
    r = remove_last(d)
    d = r.deque
    puts(r.value)
    puts((is_empty(d)).to_s)
  end
  Node = Struct.new(:data, :prev, :next_, keyword_init: true)
  LinkedDeque = Struct.new(:nodes, :header, :trailer, :size, keyword_init: true)
  DeleteResult = Struct.new(:deque, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
