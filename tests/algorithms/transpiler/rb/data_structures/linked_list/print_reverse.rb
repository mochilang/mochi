# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_list()
    return LinkedList.new(data: [])
  end
  def append_value(list, value)
    d = list.data
    d = (d << value)
    return LinkedList.new(data: d)
  end
  def extend_list(list, items)
    result = list
    i = 0
    while i < items.length
      result = append_value(result, items[i])
      i = _add(i, 1)
    end
    return result
  end
  def to_string(list)
    if list.data.length == 0
      return ""
    end
    s = (list.data[0]).to_s
    i = 1
    while i < list.data.length
      s = _add(_add(s, " -> "), (list.data[i]).to_s)
      i = _add(i, 1)
    end
    return s
  end
  def make_linked_list(items)
    if items.length == 0
      panic("The Elements List is empty")
    end
    ll = empty_list()
    ll = extend_list(ll, items)
    return ll
  end
  def in_reverse(list)
    if list.data.length == 0
      return ""
    end
    i = list.data.length - 1
    s = (list.data[i]).to_s
    i = i - 1
    while i >= 0
      s = _add(_add(s, " <- "), (list.data[i]).to_s)
      i = i - 1
    end
    return s
  end
  def main()
    linked_list = make_linked_list([14, 52, 14, 12, 43])
    puts(_add("Linked List:  ", to_string(linked_list)))
    puts(_add("Reverse List: ", in_reverse(linked_list)))
  end
  LinkedList = Struct.new(:data, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
