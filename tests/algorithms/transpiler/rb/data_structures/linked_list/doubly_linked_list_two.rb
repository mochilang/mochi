# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_list()
    return LinkedList.new(nodes: [], head_idx: -1, tail_idx: -1)
  end
  def get_head_data(ll)
    if ll.head_idx == (-1)
      return -1
    end
    node = ll.nodes[ll.head_idx]
    return node.data
  end
  def get_tail_data(ll)
    if ll.tail_idx == (-1)
      return -1
    end
    node = ll.nodes[ll.tail_idx]
    return node.data
  end
  def insert_before_node(ll, idx, new_idx)
    nodes = ll.nodes
    new_node = nodes[new_idx]
    new_node["next_index"] = idx
    node = nodes[idx]
    p = node.prev_index
    new_node["prev_index"] = p
    nodes[new_idx] = new_node
    if p == (-1)
      ll["head_idx"] = new_idx
    else
      prev_node = nodes[p]
      prev_node["next_index"] = new_idx
      nodes[p] = prev_node
    end
    node["prev_index"] = new_idx
    nodes[idx] = node
    ll["nodes"] = nodes
  end
  def insert_after_node(ll, idx, new_idx)
    nodes = ll.nodes
    new_node = nodes[new_idx]
    new_node["prev_index"] = idx
    node = nodes[idx]
    nxt = node.next_index
    new_node["next_index"] = nxt
    nodes[new_idx] = new_node
    if nxt == (-1)
      ll["tail_idx"] = new_idx
    else
      next_node = nodes[nxt]
      next_node["prev_index"] = new_idx
      nodes[nxt] = next_node
    end
    node["next_index"] = new_idx
    nodes[idx] = node
    ll["nodes"] = nodes
  end
  def set_head(ll, idx)
    if ll.head_idx == (-1)
      ll["head_idx"] = idx
      ll["tail_idx"] = idx
    else
      insert_before_node(ll, ll.head_idx, idx)
    end
  end
  def set_tail(ll, idx)
    if ll.tail_idx == (-1)
      ll["head_idx"] = idx
      ll["tail_idx"] = idx
    else
      insert_after_node(ll, ll.tail_idx, idx)
    end
  end
  def insert(ll, value)
    nodes = ll.nodes
    nodes = (nodes << Node.new(data: value, prev_index: -1, next_index: -1))
    idx = nodes.length - 1
    ll["nodes"] = nodes
    if ll.head_idx == (-1)
      ll["head_idx"] = idx
      ll["tail_idx"] = idx
    else
      insert_after_node(ll, ll.tail_idx, idx)
    end
  end
  def insert_at_position(ll, position, value)
    current = ll.head_idx
    current_pos = 1
    while current != (-1)
      if current_pos == position
        nodes = ll.nodes
        nodes = (nodes << Node.new(data: value, prev_index: -1, next_index: -1))
        new_idx = nodes.length - 1
        ll["nodes"] = nodes
        insert_before_node(ll, current, new_idx)
        return
      end
      node = ll.nodes[current]
      current = node.next_index
      current_pos = _add(current_pos, 1)
    end
    insert(ll, value)
  end
  def get_node(ll, item)
    current = ll.head_idx
    while current != (-1)
      node = ll.nodes[current]
      if node.data == item
        return current
      end
      current = node.next_index
    end
    return -1
  end
  def remove_node_pointers(ll, idx)
    nodes = ll.nodes
    node = nodes[idx]
    nxt = node.next_index
    p = node.prev_index
    if nxt != (-1)
      nxt_node = nodes[nxt]
      nxt_node["prev_index"] = p
      nodes[nxt] = nxt_node
    end
    if p != (-1)
      prev_node = nodes[p]
      prev_node["next_index"] = nxt
      nodes[p] = prev_node
    end
    node["next_index"] = -1
    node["prev_index"] = -1
    nodes[idx] = node
    ll["nodes"] = nodes
  end
  def delete_value(ll, value)
    idx = get_node(ll, value)
    if idx == (-1)
      return
    end
    if idx == ll.head_idx
      node = ll.nodes[idx]
      ll["head_idx"] = node.next_index
    end
    if idx == ll.tail_idx
      node = ll.nodes[idx]
      ll["tail_idx"] = node.prev_index
    end
    remove_node_pointers(ll, idx)
  end
  def contains(ll, value)
    return get_node(ll, value) != (-1)
  end
  def is_empty(ll)
    return ll.head_idx == (-1)
  end
  def to_string(ll)
    res = ""
    first = true
    current = ll.head_idx
    while current != (-1)
      node = ll.nodes[current]
      val = (node.data).to_s
      if first
        res = val
        first = false
      else
        res = _add(_add(res, " "), val)
      end
      current = node.next_index
    end
    return res
  end
  def print_list(ll)
    current = ll.head_idx
    while current != (-1)
      node = ll.nodes[current]
      puts((node.data).to_s)
      current = node.next_index
    end
  end
  def main()
    ll = empty_list()
    puts((get_head_data(ll)).to_s)
    puts((get_tail_data(ll)).to_s)
    puts((is_empty(ll)).to_s)
    insert(ll, 10)
    puts((get_head_data(ll)).to_s)
    puts((get_tail_data(ll)).to_s)
    insert_at_position(ll, 3, 20)
    puts((get_head_data(ll)).to_s)
    puts((get_tail_data(ll)).to_s)
    nodes = ll.nodes
    nodes = (nodes << Node.new(data: 1000, prev_index: -1, next_index: -1))
    idx_head = nodes.length - 1
    ll["nodes"] = nodes
    set_head(ll, idx_head)
    nodes = ll.nodes
    nodes = (nodes << Node.new(data: 2000, prev_index: -1, next_index: -1))
    idx_tail = nodes.length - 1
    ll["nodes"] = nodes
    set_tail(ll, idx_tail)
    print_list(ll)
    puts((is_empty(ll)).to_s)
    print_list(ll)
    puts((ll.include?(10)).to_s)
    delete_value(ll, 10)
    puts((ll.include?(10)).to_s)
    delete_value(ll, 2000)
    puts((get_tail_data(ll)).to_s)
    delete_value(ll, 1000)
    puts((get_tail_data(ll)).to_s)
    puts((get_head_data(ll)).to_s)
    print_list(ll)
    delete_value(ll, 20)
    print_list(ll)
    i = 1
    while i < 10
      insert(ll, i)
      i = _add(i, 1)
    end
    print_list(ll)
    ll2 = empty_list()
    insert_at_position(ll2, 1, 10)
    puts(to_string(ll2))
    insert_at_position(ll2, 2, 20)
    puts(to_string(ll2))
    insert_at_position(ll2, 1, 30)
    puts(to_string(ll2))
    insert_at_position(ll2, 3, 40)
    puts(to_string(ll2))
    insert_at_position(ll2, 5, 50)
    puts(to_string(ll2))
  end
  Node = Struct.new(:data, :prev_index, :next_index, keyword_init: true)
  LinkedList = Struct.new(:nodes, :head_idx, :tail_idx, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
