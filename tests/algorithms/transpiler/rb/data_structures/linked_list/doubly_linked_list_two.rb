# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def empty_list()
    return LinkedList.new(nodes: [], head_idx: -1, tail_idx: -1)
  end
  def get_head_data(ll)
    if _eq(ll.head_idx, (-1))
      return -1
    end
    node = (__tmp1 = ll.nodes; __tmp1.is_a?(Hash) ? __tmp1[ll.head_idx] : _idx(__tmp1, ll.head_idx))
    return node.data
  end
  def get_tail_data(ll)
    if _eq(ll.tail_idx, (-1))
      return -1
    end
    node = (__tmp2 = ll.nodes; __tmp2.is_a?(Hash) ? __tmp2[ll.tail_idx] : _idx(__tmp2, ll.tail_idx))
    return node.data
  end
  def insert_before_node(ll, idx, new_idx)
    nodes = ll.nodes
    new_node = (__tmp3 = nodes; __tmp3.is_a?(Hash) ? __tmp3[new_idx] : _idx(__tmp3, new_idx))
    new_node.next_index = idx
    node = (__tmp4 = nodes; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))
    p = node.prev_index
    new_node.prev_index = p
    nodes[new_idx] = new_node
    if _eq(p, (-1))
      ll.head_idx = new_idx
    else
      prev_node = (__tmp5 = nodes; __tmp5.is_a?(Hash) ? __tmp5[p] : _idx(__tmp5, p))
      prev_node.next_index = new_idx
      nodes[p] = prev_node
    end
    node.prev_index = new_idx
    nodes[idx] = node
    ll.nodes = nodes
  end
  def insert_after_node(ll, idx, new_idx)
    nodes = ll.nodes
    new_node = (__tmp6 = nodes; __tmp6.is_a?(Hash) ? __tmp6[new_idx] : _idx(__tmp6, new_idx))
    new_node.prev_index = idx
    node = (__tmp7 = nodes; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx))
    nxt = node.next_index
    new_node.next_index = nxt
    nodes[new_idx] = new_node
    if _eq(nxt, (-1))
      ll.tail_idx = new_idx
    else
      next_node = (__tmp8 = nodes; __tmp8.is_a?(Hash) ? __tmp8[nxt] : _idx(__tmp8, nxt))
      next_node.prev_index = new_idx
      nodes[nxt] = next_node
    end
    node.next_index = new_idx
    nodes[idx] = node
    ll.nodes = nodes
  end
  def set_head(ll, idx)
    if _eq(ll.head_idx, (-1))
      ll.head_idx = idx
      ll.tail_idx = idx
    else
      insert_before_node(ll, ll.head_idx, idx)
    end
  end
  def set_tail(ll, idx)
    if _eq(ll.tail_idx, (-1))
      ll.head_idx = idx
      ll.tail_idx = idx
    else
      insert_after_node(ll, ll.tail_idx, idx)
    end
  end
  def insert(ll, value)
    nodes = ll.nodes
    nodes = _append(nodes, Node.new(data: value, prev_index: -1, next_index: -1))
    idx = _len(nodes) - 1
    ll.nodes = nodes
    if _eq(ll.head_idx, (-1))
      ll.head_idx = idx
      ll.tail_idx = idx
    else
      insert_after_node(ll, ll.tail_idx, idx)
    end
  end
  def insert_at_position(ll, position, value)
    current = ll.head_idx
    current_pos = 1
    while !_eq(current, (-1))
      if _eq(current_pos, position)
        nodes = ll.nodes
        nodes = _append(nodes, Node.new(data: value, prev_index: -1, next_index: -1))
        new_idx = _len(nodes) - 1
        ll.nodes = nodes
        insert_before_node(ll, current, new_idx)
        return
      end
      node = (__tmp9 = ll.nodes; __tmp9.is_a?(Hash) ? __tmp9[current] : _idx(__tmp9, current))
      current = node.next_index
      current_pos = _add(current_pos, 1)
    end
    insert(ll, value)
  end
  def get_node(ll, item)
    current = ll.head_idx
    while !_eq(current, (-1))
      node = (__tmp10 = ll.nodes; __tmp10.is_a?(Hash) ? __tmp10[current] : _idx(__tmp10, current))
      if _eq(node.data, item)
        return current
      end
      current = node.next_index
    end
    return -1
  end
  def remove_node_pointers(ll, idx)
    nodes = ll.nodes
    node = (__tmp11 = nodes; __tmp11.is_a?(Hash) ? __tmp11[idx] : _idx(__tmp11, idx))
    nxt = node.next_index
    p = node.prev_index
    if !_eq(nxt, (-1))
      nxt_node = (__tmp12 = nodes; __tmp12.is_a?(Hash) ? __tmp12[nxt] : _idx(__tmp12, nxt))
      nxt_node.prev_index = p
      nodes[nxt] = nxt_node
    end
    if !_eq(p, (-1))
      prev_node = (__tmp13 = nodes; __tmp13.is_a?(Hash) ? __tmp13[p] : _idx(__tmp13, p))
      prev_node.next_index = nxt
      nodes[p] = prev_node
    end
    node.next_index = -1
    node.prev_index = -1
    nodes[idx] = node
    ll.nodes = nodes
  end
  def delete_value(ll, value)
    idx = get_node(ll, value)
    if _eq(idx, (-1))
      return
    end
    if _eq(idx, ll.head_idx)
      node = (__tmp14 = ll.nodes; __tmp14.is_a?(Hash) ? __tmp14[idx] : _idx(__tmp14, idx))
      ll.head_idx = node.next_index
    end
    if _eq(idx, ll.tail_idx)
      node = (__tmp15 = ll.nodes; __tmp15.is_a?(Hash) ? __tmp15[idx] : _idx(__tmp15, idx))
      ll.tail_idx = node.prev_index
    end
    remove_node_pointers(ll, idx)
  end
  def contains(ll, value)
    return !_eq(get_node(ll, value), (-1))
  end
  def is_empty(ll)
    return _eq(ll.head_idx, (-1))
  end
  def to_string(ll)
    res = ""
    first = true
    current = ll.head_idx
    while !_eq(current, (-1))
      node = (__tmp16 = ll.nodes; __tmp16.is_a?(Hash) ? __tmp16[current] : _idx(__tmp16, current))
      val = _str(node.data)
      if first
        res = val
        first = false
      else
        res = _add(_add(res, " "), val)
      end
      current = node.next_index
    end
    return res
  end
  def print_list(ll)
    current = ll.head_idx
    while !_eq(current, (-1))
      node = (__tmp17 = ll.nodes; __tmp17.is_a?(Hash) ? __tmp17[current] : _idx(__tmp17, current))
      puts(_str(node.data))
      current = node.next_index
    end
  end
  def main()
    ll = empty_list()
    puts(_str(get_head_data(ll)))
    puts(_str(get_tail_data(ll)))
    puts(_str(is_empty(ll)))
    insert(ll, 10)
    puts(_str(get_head_data(ll)))
    puts(_str(get_tail_data(ll)))
    insert_at_position(ll, 3, 20)
    puts(_str(get_head_data(ll)))
    puts(_str(get_tail_data(ll)))
    nodes = ll.nodes
    nodes = _append(nodes, Node.new(data: 1000, prev_index: -1, next_index: -1))
    idx_head = _len(nodes) - 1
    ll.nodes = nodes
    set_head(ll, idx_head)
    nodes = ll.nodes
    nodes = _append(nodes, Node.new(data: 2000, prev_index: -1, next_index: -1))
    idx_tail = _len(nodes) - 1
    ll.nodes = nodes
    set_tail(ll, idx_tail)
    print_list(ll)
    puts(_str(is_empty(ll)))
    print_list(ll)
    puts(_str(contains(ll, 10)))
    delete_value(ll, 10)
    puts(_str(contains(ll, 10)))
    delete_value(ll, 2000)
    puts(_str(get_tail_data(ll)))
    delete_value(ll, 1000)
    puts(_str(get_tail_data(ll)))
    puts(_str(get_head_data(ll)))
    print_list(ll)
    delete_value(ll, 20)
    print_list(ll)
    i = 1
    while i < 10
      insert(ll, i)
      i = _add(i, 1)
    end
    print_list(ll)
    ll2 = empty_list()
    insert_at_position(ll2, 1, 10)
    puts(to_string(ll2))
    insert_at_position(ll2, 2, 20)
    puts(to_string(ll2))
    insert_at_position(ll2, 1, 30)
    puts(to_string(ll2))
    insert_at_position(ll2, 3, 40)
    puts(to_string(ll2))
    insert_at_position(ll2, 5, 50)
    puts(to_string(ll2))
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:data, :prev_index, :next_index, keyword_init: true))
  Object.send(:remove_const, :LinkedList) if Object.const_defined?(:LinkedList)
  Object.const_set(:LinkedList, Struct.new(:nodes, :head_idx, :tail_idx, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
