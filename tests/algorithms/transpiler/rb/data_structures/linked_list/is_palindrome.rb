# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def is_palindrome(values)
    stack = []
    fast = 0
    slow = 0
    n = values.length
    while fast < n && _add(fast, 1) < n
      stack = (stack << values[slow])
      slow = _add(slow, 1)
      fast = _add(fast, 2)
    end
    if fast == n - 1
      slow = _add(slow, 1)
    end
    i = stack.length - 1
    while slow < n
      if stack[i] != values[slow]
        return false
      end
      i = i - 1
      slow = _add(slow, 1)
    end
    return true
  end
  def main()
    puts((is_palindrome([]) ? 'true' : 'false'))
    puts((is_palindrome([1]) ? 'true' : 'false'))
    puts((is_palindrome([1, 2]) ? 'true' : 'false'))
    puts((is_palindrome([1, 2, 1]) ? 'true' : 'false'))
    puts((is_palindrome([1, 2, 2, 1]) ? 'true' : 'false'))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
