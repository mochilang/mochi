# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_list()
    return List.new(data: [])
  end
  def push(lst, value)
    res = [value]
    i = 0
    while i < lst.data.length
      res = (res << lst.data[i])
      i = _add(i, 1)
    end
    return List.new(data: res)
  end
  def middle_element(lst)
    n = lst.data.length
    if n == 0
      puts("No element found.")
      return 0
    end
    slow = 0
    fast = 0
    while _add(fast, 1) < n
      fast = _add(fast, 2)
      slow = _add(slow, 1)
    end
    return lst.data[slow]
  end
  def main()
    lst = empty_list()
    middle_element(lst)
    lst = push(lst, 5)
    puts(5)
    lst = push(lst, 6)
    puts(6)
    lst = push(lst, 8)
    puts(8)
    lst = push(lst, 8)
    puts(8)
    lst = push(lst, 10)
    puts(10)
    lst = push(lst, 12)
    puts(12)
    lst = push(lst, 17)
    puts(17)
    lst = push(lst, 7)
    puts(7)
    lst = push(lst, 3)
    puts(3)
    lst = push(lst, 20)
    puts(20)
    lst = push(lst, -20)
    puts(-20)
    puts(middle_element(lst))
  end
  List = Struct.new(:data, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
