# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_string(list)
    if list.data.length == 0
      return ""
    end
    s = (list.data[0]).to_s
    i = 1
    while i < list.data.length
      s = _add(_add(s, " -> "), (list.data[i]).to_s)
      i = _add(i, 1)
    end
    return s
  end
  def reverse_k_nodes(list, k)
    if k <= 1
      return list
    end
    res = []
    i = 0
    while i < list.data.length
      j = 0
      group = []
      while j < k && _add(i, j) < list.data.length
        group = (group << list.data[_add(i, j)])
        j = _add(j, 1)
      end
      if group.length == k
        g = k - 1
        while g >= 0
          res = (res << group[g])
          g = g - 1
        end
      else
        g = 0
        while g < group.length
          res = (res << group[g])
          g = _add(g, 1)
        end
      end
      i = _add(i, k)
    end
    return LinkedList.new(data: res)
  end
  def main()
    ll = LinkedList.new(data: [1, 2, 3, 4, 5])
    puts(_add("Original Linked List: ", to_string(ll)))
    k = 2
    ll = reverse_k_nodes(ll, k)
    puts(_add(_add(_add("After reversing groups of size ", (k).to_s), ": "), to_string(ll)))
  end
  LinkedList = Struct.new(:data, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
