# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_list()
    return LinkedList.new(next_: [], head: $NULL)
  end
  def add_node(list, value)
    nexts = list.next_
    new_index = nexts.length
    nexts = (nexts << $NULL)
    if list.head == $NULL
      return LinkedList.new(next_: nexts, head: new_index)
    end
    last = list.head
    while nexts[last] != $NULL
      last = nexts[last]
    end
    new_nexts = []
    i = 0
    while i < nexts.length
      if i == last
        new_nexts = (new_nexts << new_index)
      else
        new_nexts = (new_nexts << nexts[i])
      end
      i = _add(i, 1)
    end
    return LinkedList.new(next_: new_nexts, head: list.head)
  end
  def set_next(list, index, next_index)
    nexts = list.next_
    new_nexts = []
    i = 0
    while i < nexts.length
      if i == index
        new_nexts = (new_nexts << next_index)
      else
        new_nexts = (new_nexts << nexts[i])
      end
      i = _add(i, 1)
    end
    return LinkedList.new(next_: new_nexts, head: list.head)
  end
  def detect_cycle(list)
    if list.head == $NULL
      return false
    end
    nexts = list.next_
    slow = list.head
    fast = list.head
    while fast != $NULL && nexts[fast] != $NULL
      slow = nexts[slow]
      fast = nexts[nexts[fast]]
      if slow == fast
        return true
      end
    end
    return false
  end
  def main()
    ll = empty_list()
    ll = add_node(ll, 1)
    ll = add_node(ll, 2)
    ll = add_node(ll, 3)
    ll = add_node(ll, 4)
    ll = set_next(ll, 3, 1)
    puts((detect_cycle(ll) ? 'true' : 'false'))
  end
  LinkedList = Struct.new(:next_, :head, keyword_init: true)
  $NULL = 0 - 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
