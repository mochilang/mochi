# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def empty_list()
    return LinkedList.new(next_: [], head: $NULL)
  end
  def add_node(list, value)
    nexts = list.next_
    new_index = _len(nexts)
    nexts = _append(nexts, $NULL)
    if _eq(list.head, $NULL)
      return LinkedList.new(next_: nexts, head: new_index)
    end
    last = list.head
    while !_eq((__tmp1 = nexts; __tmp1.is_a?(Hash) ? __tmp1[last] : _idx(__tmp1, last)), $NULL)
      last = (__tmp2 = nexts; __tmp2.is_a?(Hash) ? __tmp2[last] : _idx(__tmp2, last))
    end
    new_nexts = []
    i = 0
    while i < _len(nexts)
      if _eq(i, last)
        new_nexts = _append(new_nexts, new_index)
      else
        new_nexts = _append(new_nexts, (__tmp3 = nexts; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      end
      i = _add(i, 1)
    end
    return LinkedList.new(next_: new_nexts, head: list.head)
  end
  def set_next(list, index, next_index)
    nexts = list.next_
    new_nexts = []
    i = 0
    while i < _len(nexts)
      if _eq(i, index)
        new_nexts = _append(new_nexts, next_index)
      else
        new_nexts = _append(new_nexts, (__tmp4 = nexts; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
      end
      i = _add(i, 1)
    end
    return LinkedList.new(next_: new_nexts, head: list.head)
  end
  def detect_cycle(list)
    if _eq(list.head, $NULL)
      return false
    end
    nexts = list.next_
    slow = list.head
    fast = list.head
    while !_eq(fast, $NULL) && !_eq((__tmp5 = nexts; __tmp5.is_a?(Hash) ? __tmp5[fast] : _idx(__tmp5, fast)), $NULL)
      slow = (__tmp6 = nexts; __tmp6.is_a?(Hash) ? __tmp6[slow] : _idx(__tmp6, slow))
      fast = (__tmp7 = nexts; __tmp7.is_a?(Hash) ? __tmp7[(__tmp8 = nexts; __tmp8.is_a?(Hash) ? __tmp8[fast] : _idx(__tmp8, fast))] : _idx(__tmp7, (__tmp9 = nexts; __tmp9.is_a?(Hash) ? __tmp9[fast] : _idx(__tmp9, fast))))
      if _eq(slow, fast)
        return true
      end
    end
    return false
  end
  def main()
    ll = empty_list()
    ll = add_node(ll, 1)
    ll = add_node(ll, 2)
    ll = add_node(ll, 3)
    ll = add_node(ll, 4)
    ll = set_next(ll, 3, 1)
    puts((detect_cycle(ll) ? 'true' : 'false'))
  end
  Object.send(:remove_const, :LinkedList) if Object.const_defined?(:LinkedList)
  Object.const_set(:LinkedList, Struct.new(:next_, :head, keyword_init: true))
  $NULL = 0 - 1
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
