# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def has_loop(nodes, head)
    slow = head
    fast = head
    while fast != 0 - 1
      fast_node1 = nodes[fast]
      if fast_node1.next_ == 0 - 1
        return false
      end
      fast_node2 = nodes[fast_node1.next_]
      if fast_node2.next_ == 0 - 1
        return false
      end
      slow_node = nodes[slow]
      slow = slow_node.next_
      fast = fast_node2.next_
      if slow == fast
        return true
      end
    end
    return false
  end
  def make_nodes(values)
    nodes = []
    i = 0
    while i < values.length
      next_idx = (i == values.length - 1 ? 0 - 1 : _add(i, 1))
      nodes = (nodes << Node.new(data: values[i], next_: next_idx))
      i = _add(i, 1)
    end
    return nodes
  end
  def main()
    list1 = make_nodes([1, 2, 3, 4])
    puts((has_loop(list1, 0)).to_s)
    list1[3]["next_"] = 1
    puts((has_loop(list1, 0)).to_s)
    list2 = make_nodes([5, 6, 5, 6])
    puts((has_loop(list2, 0)).to_s)
    list3 = make_nodes([1])
    puts((has_loop(list3, 0)).to_s)
  end
  Node = Struct.new(:data, :next_, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
