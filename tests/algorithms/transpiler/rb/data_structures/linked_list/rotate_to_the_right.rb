# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def list_to_string(xs)
    if xs.length == 0
      return ""
    end
    s = (xs[0]).to_s
    i = 1
    while i < xs.length
      s = _add(_add(s, "->"), (xs[i]).to_s)
      i = _add(i, 1)
    end
    return s
  end
  def insert_node(xs, data)
    return (xs << data)
  end
  def rotate_to_the_right(xs, places)
    if xs.length == 0
      panic("The linked list is empty.")
    end
    n = xs.length
    k = places % n
    if k == 0
      return xs
    end
    split = n - k
    res = []
    i = split
    while i < n
      res = (res << xs[i])
      i = _add(i, 1)
    end
    j = 0
    while j < split
      res = (res << xs[j])
      j = _add(j, 1)
    end
    return res
  end
  def main()
    head = []
    head = insert_node(head, 5)
    head = insert_node(head, 1)
    head = insert_node(head, 2)
    head = insert_node(head, 4)
    head = insert_node(head, 3)
    puts(_add("Original list: ", list_to_string(head)))
    places = 3
    new_head = rotate_to_the_right(head, places)
    puts(_add(_add(_add("After ", (places).to_s), " iterations: "), list_to_string(new_head)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
