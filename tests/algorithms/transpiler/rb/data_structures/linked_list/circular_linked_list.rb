# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_list()
    return CircularLinkedList.new(data: [])
  end
  def length(list)
    return list.data.length
  end
  def is_empty(list)
    return list.data.length == 0
  end
  def to_string(list)
    if list.data.length == 0
      return ""
    end
    s = (list.data[0]).to_s
    i = 1
    while i < list.data.length
      s = _add(_add(s, "->"), (list.data[i]).to_s)
      i = _add(i, 1)
    end
    return s
  end
  def insert_nth(list, index, value)
    if index < 0 || index > list.data.length
      panic("index out of range")
    end
    res = []
    i = 0
    while i < index
      res = (res << list.data[i])
      i = _add(i, 1)
    end
    res = (res << value)
    while i < list.data.length
      res = (res << list.data[i])
      i = _add(i, 1)
    end
    return CircularLinkedList.new(data: res)
  end
  def insert_head(list, value)
    return insert_nth(list, 0, value)
  end
  def insert_tail(list, value)
    return insert_nth(list, list.data.length, value)
  end
  def delete_nth(list, index)
    if index < 0 || index >= list.data.length
      panic("index out of range")
    end
    res = []
    i = 0
    val = 0
    while i < list.data.length
      if i == index
        val = list.data[i]
      else
        res = (res << list.data[i])
      end
      i = _add(i, 1)
    end
    return DeleteResult.new(list: CircularLinkedList.new(data: res), value: val)
  end
  def delete_front(list)
    return delete_nth(list, 0)
  end
  def delete_tail(list)
    return delete_nth(list, list.data.length - 1)
  end
  def main()
    cll = empty_list()
    i = 0
    while i < 5
      cll = insert_tail(cll, _add(i, 1))
      i = _add(i, 1)
    end
    puts(to_string(cll))
    cll = insert_tail(cll, 6)
    puts(to_string(cll))
    cll = insert_head(cll, 0)
    puts(to_string(cll))
    res = delete_front(cll)
    cll = res.list
    puts(res.value)
    res = delete_tail(cll)
    cll = res.list
    puts(res.value)
    res = delete_nth(cll, 2)
    cll = res.list
    puts(res.value)
    puts(to_string(cll))
  end
  CircularLinkedList = Struct.new(:data, keyword_init: true)
  DeleteResult = Struct.new(:list, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
