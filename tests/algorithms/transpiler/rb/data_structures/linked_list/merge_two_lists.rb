# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_list(nums)
    arr = []
    i = 0
    while i < nums.length
      arr = (arr << nums[i])
      i = _add(i, 1)
    end
    j = 0
    while j < arr.length
      k = _add(j, 1)
      while k < arr.length
        if arr[k] < arr[j]
          tmp = arr[j]
          arr[j] = arr[k]
          arr[k] = tmp
        end
        k = _add(k, 1)
      end
      j = _add(j, 1)
    end
    return arr
  end
  def make_sorted_linked_list(ints)
    return SortedLinkedList.new(values: sort_list(ints))
  end
  def len_sll(sll)
    return sll.values.length
  end
  def str_sll(sll)
    res = ""
    i = 0
    while i < sll.values.length
      res = _add(res, (sll.values[i]).to_s)
      if _add(i, 1) < sll.values.length
        res = _add(res, " -> ")
      end
      i = _add(i, 1)
    end
    return res
  end
  def merge_lists(a, b)
    combined = []
    i = 0
    while i < a.values.length
      combined = (combined << a.values[i])
      i = _add(i, 1)
    end
    i = 0
    while i < b.values.length
      combined = (combined << b.values[i])
      i = _add(i, 1)
    end
    return make_sorted_linked_list(combined)
  end
  def main()
    test_data_odd = [3, 9, -11, 0, 7, 5, 1, -1]
    test_data_even = [4, 6, 2, 0, 8, 10, 3, -2]
    sll_one = make_sorted_linked_list(test_data_odd)
    sll_two = make_sorted_linked_list(test_data_even)
    merged = merge_lists(sll_one, sll_two)
    puts((len_sll(merged)).to_s)
    puts(str_sll(merged))
  end
  SortedLinkedList = Struct.new(:values, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
