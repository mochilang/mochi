# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_list(nums)
    arr = []
    i = 0
    while i < _len(nums)
      arr = _append(arr, (__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    j = 0
    while j < _len(arr)
      k = _add(j, 1)
      while k < _len(arr)
        if (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[k] : _idx(__tmp2, k)) < (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
          tmp = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))
          arr[j] = (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k))
          arr[k] = tmp
        end
        k = _add(k, 1)
      end
      j = _add(j, 1)
    end
    return arr
  end
  def make_sorted_linked_list(ints)
    return SortedLinkedList.new(values: sort_list(ints))
  end
  def len_sll(sll)
    return _len(sll.values)
  end
  def str_sll(sll)
    res = ""
    i = 0
    while i < _len(sll.values)
      res = _add(res, _str((__tmp6 = sll.values; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))))
      if _add(i, 1) < _len(sll.values)
        res = _add(res, " -> ")
      end
      i = _add(i, 1)
    end
    return res
  end
  def merge_lists(a, b)
    combined = []
    i = 0
    while i < _len(a.values)
      combined = _append(combined, (__tmp7 = a.values; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)))
      i = _add(i, 1)
    end
    i = 0
    while i < _len(b.values)
      combined = _append(combined, (__tmp8 = b.values; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
      i = _add(i, 1)
    end
    return make_sorted_linked_list(combined)
  end
  def main()
    test_data_odd = [3, 9, -11, 0, 7, 5, 1, -1]
    test_data_even = [4, 6, 2, 0, 8, 10, 3, -2]
    sll_one = make_sorted_linked_list(test_data_odd)
    sll_two = make_sorted_linked_list(test_data_even)
    merged = merge_lists(sll_one, sll_two)
    puts(_str(len_sll(merged)))
    puts(str_sll(merged))
  end
  Object.send(:remove_const, :SortedLinkedList) if Object.const_defined?(:SortedLinkedList)
  Object.const_set(:SortedLinkedList, Struct.new(:values, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
