# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_linked_list(elements)
    if elements.length == 0
      panic("The Elements List is empty")
    end
    $nodes = []
    $nodes = ($nodes << Node.new(data: elements[0], next_: $NIL))
    head = 0
    current = head
    i = 1
    while i < elements.length
      $nodes = ($nodes << Node.new(data: elements[i], next_: $NIL))
      $nodes[current]["next_"] = $nodes.length - 1
      current = $nodes.length - 1
      i = _add(i, 1)
    end
    return head
  end
  def node_to_string(head)
    s = ""
    index = head
    while index != $NIL
      node = $nodes[index]
      s = _add(_add(_add(s, "<"), (node["data"]).to_s), "> ---> ")
      index = node["next_"]
    end
    s = _add(s, "<END>")
    return s
  end
  def main()
    list_data = [1, 3, 5, 32, 44, 12, 43]
    puts(_add("List: ", ((x = list_data); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts("Creating Linked List from List.")
    head = make_linked_list(list_data)
    puts("Linked List:")
    puts(node_to_string(head))
  end
  Node = Struct.new(:data, :next_, keyword_init: true)
  $NIL = 0 - 1
  $nodes = []
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
