# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_list()
    return LinkedList.new(data: [])
  end
  def push(list, value)
    res = [value]
    res = _add(res, list.data)
    return LinkedList.new(data: res)
  end
  def swap_nodes(list, v1, v2)
    if v1 == v2
      return list
    end
    idx1 = 0 - 1
    idx2 = 0 - 1
    i = 0
    while i < list.data.length
      if list.data[i] == v1 && idx1 == 0 - 1
        idx1 = i
      end
      if list.data[i] == v2 && idx2 == 0 - 1
        idx2 = i
      end
      i = _add(i, 1)
    end
    if idx1 == 0 - 1 || idx2 == 0 - 1
      return list
    end
    res = list.data
    temp = res[idx1]
    res[idx1] = res[idx2]
    res[idx2] = temp
    return LinkedList.new(data: res)
  end
  def to_string(list)
    return ((x = list.data); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)
  end
  def main()
    ll = empty_list()
    i = 5
    while i > 0
      ll = push(ll, i)
      i = i - 1
    end
    puts(_add("Original Linked List: ", to_string(ll)))
    ll = swap_nodes(ll, 1, 4)
    puts(_add("Modified Linked List: ", to_string(ll)))
    puts("After swapping the nodes whose data is 1 and 4.")
  end
  LinkedList = Struct.new(:data, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
