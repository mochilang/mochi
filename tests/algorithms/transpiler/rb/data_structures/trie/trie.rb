# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_trie()
    return Trie.new(nodes: [Node.new(children: {}, is_leaf: false)])
  end
  def remove_key(m, k)
    out = {}
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if key != k
        out[key] = m[key]
      end
    end
    return out
  end
  def insert(trie, word)
    nodes = trie.nodes
    curr = 0
    i = 0
    while i < word.length
      ch = word[i]
      child_idx = -1
      children = nodes[curr].children
      if children.include?(ch)
        child_idx = children[ch]
      else
        new_node = Node.new(children: {}, is_leaf: false)
        nodes = (nodes << new_node)
        child_idx = nodes.length - 1
        new_children = children
        new_children[ch] = child_idx
        node = nodes[curr]
        node["children"] = new_children
        nodes[curr] = node
      end
      curr = child_idx
      i = _add(i, 1)
    end
    node = nodes[curr]
    node["is_leaf"] = true
    nodes[curr] = node
    trie["nodes"] = nodes
  end
  def insert_many(trie, words)
        __tmp2 = words
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |w|
      insert(trie, w)
    end
  end
  def find(trie, word)
    nodes = trie.nodes
    curr = 0
    i = 0
    while i < word.length
      ch = word[i]
      children = nodes[curr].children
      if !(children.include?(ch))
        return false
      end
      curr = children[ch]
      i = _add(i, 1)
    end
    node = nodes[curr]
    return node.is_leaf
  end
  def delete(trie, word)
    nodes = trie.nodes
    _delete = ->(idx, pos) {
      if pos == word.length
        node = nodes[idx]
        if node.is_leaf == false
          return false
        end
        node["is_leaf"] = false
        nodes[idx] = node
        return node.children.length == 0
      end
      node = nodes[idx]
      children = node.children
      ch = word[pos]
      if !(children.key?(ch))
        return false
      end
      child_idx = children[ch]
      should_delete = _delete.call(child_idx, _add(pos, 1))
      node = nodes[idx]
      if should_delete
        new_children = remove_key(node.children, ch)
        node["children"] = new_children
        nodes[idx] = node
        return new_children.length == 0 && node.is_leaf == false
      end
      nodes[idx] = node
      return false
    }
    _delete.call(0, 0)
    trie["nodes"] = nodes
  end
  def print_words(trie)
    dfs = ->(idx, word) {
      node = trie.nodes[idx]
      if node.is_leaf
        puts(word)
      end
            __tmp3 = node.children.keys()
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |key|
        dfs.call(node.children[key], _add(word, key))
      end
    }
    dfs.call(0, "")
  end
  def test_trie()
    words = ["banana", "bananas", "bandana", "band", "apple", "all", "beast"]
    trie = new_trie()
    insert_many(trie, words)
    ok = true
        __tmp4 = words
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |w|
      ok = ok && find(trie, w)
    end
    ok = ok && find(trie, "banana")
    t = find(trie, "bandanas")
    ok = ok && (t == false)
    t2 = find(trie, "apps")
    ok = ok && (t2 == false)
    ok = ok && find(trie, "apple")
    ok = ok && find(trie, "all")
    delete(trie, "all")
    t3 = find(trie, "all")
    ok = ok && (t3 == false)
    delete(trie, "banana")
    t4 = find(trie, "banana")
    ok = ok && (t4 == false)
    ok = ok && find(trie, "bananas")
    return ok
  end
  def print_results(msg, passes)
    if passes
      puts(_add(msg, " works!"))
    else
      puts(_add(msg, " doesn't work :("))
    end
  end
  Node = Struct.new(:children, :is_leaf, keyword_init: true)
  Trie = Struct.new(:nodes, keyword_init: true)
  $trie = new_trie()
  print_results("Testing trie functionality", test_trie())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
