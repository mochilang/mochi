# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:57 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = [] if arr.nil?
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_node(prefix, is_leaf)
    return RadixNode.new(prefix: prefix, is_leaf: is_leaf, children: {})
  end
  def new_tree()
    nodes = [new_node("", false)]
    return RadixTree.new(nodes: nodes)
  end
  def match_prefix(node, word)
    x = 0
    p = node.prefix
    w = word
    min_len = _len(p)
    if _len(w) < min_len
      min_len = _len(w)
    end
    while x < min_len
      if !_eq(p[x..._add(x, 1)], w[x..._add(x, 1)])
        break
      end
      x = _add(x, 1)
    end
    common = p[0...x]
    rem_prefix = p[x..._len(p)]
    rem_word = w[x..._len(w)]
    return MatchResult.new(common: common, rem_prefix: rem_prefix, rem_word: rem_word)
  end
  def insert_many(tree, words)
        __tmp1 = words
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |w|
      insert(tree, 0, w)
    end
  end
  def insert(tree, idx, word)
    nodes = tree.nodes
    node = (__tmp2 = nodes; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx))
    if (_eq(node.prefix, word)) && (!node.is_leaf)
      node.is_leaf = true
      nodes[idx] = node
      tree.nodes = nodes
      return
    end
    first = word[0...1]
    children = node.children
    if !has_key(children, first)
      new_idx = _len(nodes)
      nodes = _append(nodes, new_node(word, true))
      children[first] = new_idx
      node.children = children
      nodes[idx] = node
      tree.nodes = nodes
      return
    end
    child_idx = (__tmp3 = children; __tmp3.is_a?(Hash) ? __tmp3[first] : _idx(__tmp3, first))
    child = (__tmp4 = nodes; __tmp4.is_a?(Hash) ? __tmp4[child_idx] : _idx(__tmp4, child_idx))
    res = match_prefix(child, word)
    if _eq(res.rem_prefix, "")
      insert(tree, child_idx, res.rem_word)
      return
    end
    child.prefix = res.rem_prefix
    nodes[child_idx] = child
    new_children = {}
    new_children[res.rem_prefix[0...1]] = child_idx
    new_idx = _len(nodes)
    nodes = _append(nodes, new_node(res.common, false))
    (__tmp5 = nodes; __tmp5.is_a?(Hash) ? __tmp5[new_idx] : _idx(__tmp5, new_idx))["children"] = new_children
    if _eq(res.rem_word, "")
      (__tmp6 = nodes; __tmp6.is_a?(Hash) ? __tmp6[new_idx] : _idx(__tmp6, new_idx))["is_leaf"] = true
    else
      insert(tree, new_idx, res.rem_word)
    end
    children[first] = new_idx
    node.children = children
    nodes[idx] = node
    tree.nodes = nodes
  end
  def find(tree, idx, word)
    nodes = tree.nodes
    node = (__tmp7 = nodes; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx))
    first = word[0...1]
    children = node.children
    if !has_key(children, first)
      return false
    end
    child_idx = (__tmp8 = children; __tmp8.is_a?(Hash) ? __tmp8[first] : _idx(__tmp8, first))
    child = (__tmp9 = nodes; __tmp9.is_a?(Hash) ? __tmp9[child_idx] : _idx(__tmp9, child_idx))
    res = match_prefix(child, word)
    if !_eq(res.rem_prefix, "")
      return false
    end
    if _eq(res.rem_word, "")
      return child.is_leaf
    end
    return find(tree, child_idx, res.rem_word)
  end
  def remove_key(m, k)
    out = {}
        __tmp10 = m.keys()
    __tmp10 = [] if __tmp10.nil?
    if __tmp10.respond_to?(:keys) && !__tmp10.is_a?(String)
      __tmp10 = __tmp10.keys
    end
    __tmp10.each do |key|
      if !_eq(key, k)
        out[key] = (__tmp11 = m; __tmp11.is_a?(Hash) ? __tmp11[key] : _idx(__tmp11, key))
      end
    end
    return out
  end
  def has_key(m, k)
        __tmp12 = m.keys()
    __tmp12 = [] if __tmp12.nil?
    if __tmp12.respond_to?(:keys) && !__tmp12.is_a?(String)
      __tmp12 = __tmp12.keys
    end
    __tmp12.each do |key|
      if _eq(key, k)
        return true
      end
    end
    return false
  end
  def delete(tree, idx, word)
    nodes = tree.nodes
    node = (__tmp13 = nodes; __tmp13.is_a?(Hash) ? __tmp13[idx] : _idx(__tmp13, idx))
    first = word[0...1]
    children = node.children
    if !has_key(children, first)
      return false
    end
    child_idx = (__tmp14 = children; __tmp14.is_a?(Hash) ? __tmp14[first] : _idx(__tmp14, first))
    child = (__tmp15 = nodes; __tmp15.is_a?(Hash) ? __tmp15[child_idx] : _idx(__tmp15, child_idx))
    res = match_prefix(child, word)
    if !_eq(res.rem_prefix, "")
      return false
    end
    if !_eq(res.rem_word, "")
      deleted = delete(tree, child_idx, res.rem_word)
      if deleted
        nodes = tree.nodes
        node = (__tmp16 = nodes; __tmp16.is_a?(Hash) ? __tmp16[idx] : _idx(__tmp16, idx))
      end
      return deleted
    end
    if !child.is_leaf
      return false
    end
    if _eq(_len(child.children), 0)
      children = remove_key(children, first)
      node.children = children
      nodes[idx] = node
      tree.nodes = nodes
      if (_eq(_len(children), 1)) && (!node.is_leaf)
        only_key = ""
                __tmp17 = children.keys()
        __tmp17 = [] if __tmp17.nil?
        if __tmp17.respond_to?(:keys) && !__tmp17.is_a?(String)
          __tmp17 = __tmp17.keys
        end
        __tmp17.each do |k|
          only_key = k
        end
        merge_idx = (__tmp18 = children; __tmp18.is_a?(Hash) ? __tmp18[only_key] : _idx(__tmp18, only_key))
        merge_node = (__tmp19 = nodes; __tmp19.is_a?(Hash) ? __tmp19[merge_idx] : _idx(__tmp19, merge_idx))
        node.is_leaf = merge_node.is_leaf
        node.prefix = _add(node.prefix, merge_node.prefix)
        node.children = merge_node.children
        nodes[idx] = node
        tree.nodes = nodes
      end
    else
      if _len(child.children) > 1
        child.is_leaf = false
        nodes[child_idx] = child
        tree.nodes = nodes
      else
        only_key = ""
                __tmp20 = child.children.keys()
        __tmp20 = [] if __tmp20.nil?
        if __tmp20.respond_to?(:keys) && !__tmp20.is_a?(String)
          __tmp20 = __tmp20.keys
        end
        __tmp20.each do |k|
          only_key = k
        end
        merge_idx = (__tmp21 = child.children; __tmp21.is_a?(Hash) ? __tmp21[only_key] : _idx(__tmp21, only_key))
        merge_node = (__tmp22 = nodes; __tmp22.is_a?(Hash) ? __tmp22[merge_idx] : _idx(__tmp22, merge_idx))
        child.is_leaf = merge_node.is_leaf
        child.prefix = _add(child.prefix, merge_node.prefix)
        child.children = merge_node.children
        nodes[child_idx] = child
        tree.nodes = nodes
      end
    end
    return true
  end
  def print_tree(tree, idx, height)
    nodes = tree.nodes
    node = (__tmp23 = nodes; __tmp23.is_a?(Hash) ? __tmp23[idx] : _idx(__tmp23, idx))
    if !_eq(node.prefix, "")
      line = ""
      i = 0
      while i < height
        line = _add(line, "-")
        i = _add(i, 1)
      end
      line = _add(_add(line, " "), node.prefix)
      if node.is_leaf
        line = _add(line, "  (leaf)")
      end
      puts(line)
    end
    children = node.children
        __tmp24 = children.keys()
    __tmp24 = [] if __tmp24.nil?
    if __tmp24.respond_to?(:keys) && !__tmp24.is_a?(String)
      __tmp24 = __tmp24.keys
    end
    __tmp24.each do |k|
      child_idx = (__tmp25 = children; __tmp25.is_a?(Hash) ? __tmp25[k] : _idx(__tmp25, k))
      print_tree(tree, child_idx, _add(height, 1))
    end
  end
  def test_trie()
    words = ["banana", "bananas", "bandana", "band", "apple", "all", "beast"]
    tree = new_tree()
    insert_many(tree, words)
    ok = true
        __tmp26 = words
    __tmp26 = [] if __tmp26.nil?
    if __tmp26.respond_to?(:keys) && !__tmp26.is_a?(String)
      __tmp26 = __tmp26.keys
    end
    __tmp26.each do |w|
      if !find(tree, 0, w)
        ok = false
      end
    end
    if find(tree, 0, "bandanas")
      ok = false
    end
    if find(tree, 0, "apps")
      ok = false
    end
    delete(tree, 0, "all")
    if find(tree, 0, "all")
      ok = false
    end
    delete(tree, 0, "banana")
    if find(tree, 0, "banana")
      ok = false
    end
    if !find(tree, 0, "bananas")
      ok = false
    end
    return ok
  end
  def pytests()
    if !test_trie()
      panic("test failed")
    end
  end
  def main()
    tree = new_tree()
    words = ["banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast"]
    insert_many(tree, words)
    puts(_add("Words: ", ((x = words); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts("Tree:")
    print_tree(tree, 0, 0)
  end
  Object.send(:remove_const, :RadixNode) if Object.const_defined?(:RadixNode)
  Object.const_set(:RadixNode, Struct.new(:prefix, :is_leaf, :children, keyword_init: true))
  Object.send(:remove_const, :RadixTree) if Object.const_defined?(:RadixTree)
  Object.const_set(:RadixTree, Struct.new(:nodes, keyword_init: true))
  Object.send(:remove_const, :MatchResult) if Object.const_defined?(:MatchResult)
  Object.const_set(:MatchResult, Struct.new(:common, :rem_prefix, :rem_word, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
