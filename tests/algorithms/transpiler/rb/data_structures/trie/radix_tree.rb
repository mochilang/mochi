# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_node(prefix, is_leaf)
    return RadixNode.new(prefix: prefix, is_leaf: is_leaf, children: {})
  end
  def new_tree()
    nodes = [new_node("", false)]
    return RadixTree.new(nodes: nodes)
  end
  def match_prefix(node, word)
    x = 0
    p = node.prefix
    w = word
    min_len = p.length
    if w.length < min_len
      min_len = w.length
    end
    while x < min_len
      if p[x..._add(x, 1)] != w[x..._add(x, 1)]
        break
      end
      x = _add(x, 1)
    end
    common = p[0...x]
    rem_prefix = p[x...p.length]
    rem_word = w[x...w.length]
    return MatchResult.new(common: common, rem_prefix: rem_prefix, rem_word: rem_word)
  end
  def insert_many(tree, words)
        __tmp1 = words
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |w|
      insert(tree, 0, w)
    end
  end
  def insert(tree, idx, word)
    nodes = tree.nodes
    node = nodes[idx]
    if (node.prefix == word) && (!node.is_leaf)
      node["is_leaf"] = true
      nodes[idx] = node
      tree["nodes"] = nodes
      return
    end
    first = word[0...1]
    children = node.children
    if !has_key(children, first)
      new_idx = nodes.length
      nodes = (nodes << new_node(word, true))
      children[first] = new_idx
      node["children"] = children
      nodes[idx] = node
      tree["nodes"] = nodes
      return
    end
    child_idx = children[first]
    child = nodes[child_idx]
    res = match_prefix(child, word)
    if res.rem_prefix == ""
      insert(tree, child_idx, res.rem_word)
      return
    end
    child["prefix"] = res.rem_prefix
    nodes[child_idx] = child
    new_children = {}
    new_children[res.rem_prefix[0...1]] = child_idx
    new_idx = nodes.length
    nodes = (nodes << new_node(res.common, false))
    nodes[new_idx]["children"] = new_children
    if res.rem_word == ""
      nodes[new_idx]["is_leaf"] = true
    else
      insert(tree, new_idx, res.rem_word)
    end
    children[first] = new_idx
    node["children"] = children
    nodes[idx] = node
    tree["nodes"] = nodes
  end
  def find(tree, idx, word)
    nodes = tree.nodes
    node = nodes[idx]
    first = word[0...1]
    children = node.children
    if !has_key(children, first)
      return false
    end
    child_idx = children[first]
    child = nodes[child_idx]
    res = match_prefix(child, word)
    if res.rem_prefix != ""
      return false
    end
    if res.rem_word == ""
      return child.is_leaf
    end
    return find(tree, child_idx, res.rem_word)
  end
  def remove_key(m, k)
    out = {}
        __tmp2 = m.keys()
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |key|
      if key != k
        out[key] = m[key]
      end
    end
    return out
  end
  def has_key(m, k)
        __tmp3 = m.keys()
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |key|
      if key == k
        return true
      end
    end
    return false
  end
  def delete(tree, idx, word)
    nodes = tree.nodes
    node = nodes[idx]
    first = word[0...1]
    children = node.children
    if !has_key(children, first)
      return false
    end
    child_idx = children[first]
    child = nodes[child_idx]
    res = match_prefix(child, word)
    if res.rem_prefix != ""
      return false
    end
    if res.rem_word != ""
      deleted = delete(tree, child_idx, res.rem_word)
      if deleted
        nodes = tree.nodes
        node = nodes[idx]
      end
      return deleted
    end
    if !child.is_leaf
      return false
    end
    if child.children.length == 0
      children = remove_key(children, first)
      node["children"] = children
      nodes[idx] = node
      tree["nodes"] = nodes
      if (children.length == 1) && (!node.is_leaf)
        only_key = ""
                __tmp4 = children.keys()
        if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
          __tmp4 = __tmp4.keys
        end
        __tmp4.each do |k|
          only_key = k
        end
        merge_idx = children[only_key]
        merge_node = nodes[merge_idx]
        node["is_leaf"] = merge_node.is_leaf
        node["prefix"] = _add(node.prefix, merge_node.prefix)
        node["children"] = merge_node.children
        nodes[idx] = node
        tree["nodes"] = nodes
      end
    else
      if child.children.length > 1
        child["is_leaf"] = false
        nodes[child_idx] = child
        tree["nodes"] = nodes
      else
        only_key = ""
                __tmp5 = child.children.keys()
        if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
          __tmp5 = __tmp5.keys
        end
        __tmp5.each do |k|
          only_key = k
        end
        merge_idx = child.children[only_key]
        merge_node = nodes[merge_idx]
        child["is_leaf"] = merge_node.is_leaf
        child["prefix"] = _add(child.prefix, merge_node.prefix)
        child["children"] = merge_node.children
        nodes[child_idx] = child
        tree["nodes"] = nodes
      end
    end
    return true
  end
  def print_tree(tree, idx, height)
    nodes = tree.nodes
    node = nodes[idx]
    if node.prefix != ""
      line = ""
      i = 0
      while i < height
        line = _add(line, "-")
        i = _add(i, 1)
      end
      line = _add(_add(line, " "), node.prefix)
      if node.is_leaf
        line = _add(line, "  (leaf)")
      end
      puts(line)
    end
    children = node.children
        __tmp6 = children.keys()
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |k|
      child_idx = children[k]
      print_tree(tree, child_idx, _add(height, 1))
    end
  end
  def test_trie()
    words = ["banana", "bananas", "bandana", "band", "apple", "all", "beast"]
    tree = new_tree()
    insert_many(tree, words)
    ok = true
        __tmp7 = words
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |w|
      if !find(tree, 0, w)
        ok = false
      end
    end
    if find(tree, 0, "bandanas")
      ok = false
    end
    if find(tree, 0, "apps")
      ok = false
    end
    delete(tree, 0, "all")
    if find(tree, 0, "all")
      ok = false
    end
    delete(tree, 0, "banana")
    if find(tree, 0, "banana")
      ok = false
    end
    if !find(tree, 0, "bananas")
      ok = false
    end
    return ok
  end
  def pytests()
    if !test_trie()
      panic("test failed")
    end
  end
  def main()
    tree = new_tree()
    words = ["banana", "bananas", "bandanas", "bandana", "band", "apple", "all", "beast"]
    insert_many(tree, words)
    puts(_add("Words: ", ((x = words); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts("Tree:")
    print_tree(tree, 0, 0)
  end
  RadixNode = Struct.new(:prefix, :is_leaf, :children, keyword_init: true)
  RadixTree = Struct.new(:nodes, keyword_init: true)
  MatchResult = Struct.new(:common, :rem_prefix, :rem_word, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
