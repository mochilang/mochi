# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_queue()
    return Queue.new(stack: [], length: 0)
  end
  def put(q, item)
    s = (q.stack << item)
    return Queue.new(stack: s, length: _add(q.length, 1))
  end
  def drop_first(xs)
    res = []
    i = 1
    while i < xs.length
      res = (res << xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def drop_last(xs)
    res = []
    i = 0
    while i < xs.length - 1
      res = (res << xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def rotate(q, rotation)
    s = q.stack
    i = 0
    while i < rotation && s.length > 0
      temp = s[0]
      s = drop_first(s)
      s = (s << temp)
      i = _add(i, 1)
    end
    return Queue.new(stack: s, length: q.length)
  end
  def get(q)
    if q.length == 0
      panic("queue empty")
    end
    q1 = rotate(q, 1)
    v = q1.stack[q1.length - 1]
    s = drop_last(q1.stack)
    q2 = Queue.new(stack: s, length: q1.length)
    q2 = rotate(q2, q2.length - 1)
    q2 = Queue.new(stack: q2.stack, length: q2.length - 1)
    return GetResult.new(queue: q2, value: v)
  end
  def front(q)
    r = get(q)
    q2 = put(r.queue, r.value)
    q2 = rotate(q2, q2.length - 1)
    return FrontResult.new(queue: q2, value: r.value)
  end
  def size(q)
    return q.length
  end
  def to_string(q)
    s = "<"
    if q.length > 0
      s = _add(s, (q.stack[0]).to_s)
      i = 1
      while i < q.length
        s = _add(_add(s, ", "), (q.stack[i]).to_s)
        i = _add(i, 1)
      end
    end
    s = _add(s, ">")
    return s
  end
  def main()
    q = empty_queue()
    q = put(q, 1)
    q = put(q, 2)
    q = put(q, 3)
    puts(to_string(q))
    g = get(q)
    q = g.queue
    puts(g.value)
    puts(to_string(q))
    f = front(q)
    q = f.queue
    puts(f.value)
    puts(to_string(q))
    puts(size(q))
  end
  Queue = Struct.new(:stack, :length, keyword_init: true)
  GetResult = Struct.new(:queue, :value, keyword_init: true)
  FrontResult = Struct.new(:queue, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
