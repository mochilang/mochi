# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def empty_queue()
    return Queue.new(stack: [], length: 0)
  end
  def put(q, item)
    s = _append(q.stack, item)
    return Queue.new(stack: s, length: _add(q.length, 1))
  end
  def drop_first(xs)
    res = []
    i = 1
    while i < _len(xs)
      res = _append(res, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return res
  end
  def drop_last(xs)
    res = []
    i = 0
    while i < _len(xs) - 1
      res = _append(res, (__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return res
  end
  def rotate(q, rotation)
    s = q.stack
    i = 0
    while i < rotation && _len(s) > 0
      temp = (__tmp3 = s; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
      s = drop_first(s)
      s = _append(s, temp)
      i = _add(i, 1)
    end
    return Queue.new(stack: s, length: q.length)
  end
  def get(q)
    if _eq(q.length, 0)
      panic("queue empty")
    end
    q1 = rotate(q, 1)
    v = (__tmp4 = q1.stack; __tmp4.is_a?(Hash) ? __tmp4[q1.length - 1] : _idx(__tmp4, q1.length - 1))
    s = drop_last(q1.stack)
    q2 = Queue.new(stack: s, length: q1.length)
    q2 = rotate(q2, q2.length - 1)
    q2 = Queue.new(stack: q2.stack, length: q2.length - 1)
    return GetResult.new(queue: q2, value: v)
  end
  def front(q)
    r = get(q)
    q2 = put(r.queue, r.value)
    q2 = rotate(q2, q2.length - 1)
    return FrontResult.new(queue: q2, value: r.value)
  end
  def size(q)
    return q.length
  end
  def to_string(q)
    s = "<"
    if q.length > 0
      s = _add(s, _str((__tmp5 = q.stack; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))))
      i = 1
      while i < q.length
        s = _add(_add(s, ", "), _str((__tmp6 = q.stack; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))))
        i = _add(i, 1)
      end
    end
    s = _add(s, ">")
    return s
  end
  def main()
    q = empty_queue()
    q = put(q, 1)
    q = put(q, 2)
    q = put(q, 3)
    puts(to_string(q))
    g = get(q)
    q = g.queue
    puts(g.value)
    puts(to_string(q))
    f = front(q)
    q = f.queue
    puts(f.value)
    puts(to_string(q))
    puts(size(q))
  end
  Object.send(:remove_const, :Queue) if Object.const_defined?(:Queue)
  Object.const_set(:Queue, Struct.new(:stack, :length, keyword_init: true))
  Object.send(:remove_const, :GetResult) if Object.const_defined?(:GetResult)
  Object.const_set(:GetResult, Struct.new(:queue, :value, keyword_init: true))
  Object.send(:remove_const, :FrontResult) if Object.const_defined?(:FrontResult)
  Object.const_set(:FrontResult, Struct.new(:queue, :value, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
