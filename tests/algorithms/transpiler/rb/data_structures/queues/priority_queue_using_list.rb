# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def panic(msg)
    puts(msg)
  end
  def fpq_new()
    return FixedPriorityQueue.new(queues: [[], [], []])
  end
  def fpq_enqueue(fpq, priority, data)
    if priority < 0 || priority >= _len(fpq.queues)
      panic("Valid priorities are 0, 1, and 2")
      return fpq
    end
    if _len((__tmp1 = fpq.queues; __tmp1.is_a?(Hash) ? __tmp1[priority] : _idx(__tmp1, priority))) >= 100
      panic("Maximum queue size is 100")
      return fpq
    end
    qs = fpq.queues
    qs[priority] = _append((__tmp2 = qs; __tmp2.is_a?(Hash) ? __tmp2[priority] : _idx(__tmp2, priority)), data)
    fpq.queues = qs
    return fpq
  end
  def fpq_dequeue(fpq)
    qs = fpq.queues
    i = 0
    while i < _len(qs)
      q = (__tmp3 = qs; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      if _len(q) > 0
        val = (__tmp4 = q; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
        new_q = []
        j = 1
        while j < _len(q)
          new_q = _append(new_q, (__tmp5 = q; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)))
          j = _add(j, 1)
        end
        qs[i] = new_q
        fpq.queues = qs
        return FPQDequeueResult.new(queue: fpq, value: val)
      end
      i = _add(i, 1)
    end
    panic("All queues are empty")
    return FPQDequeueResult.new(queue: fpq, value: 0)
  end
  def fpq_to_string(fpq)
    lines = []
    i = 0
    while i < _len(fpq.queues)
      q_str = "["
      q = (__tmp6 = fpq.queues; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
      j = 0
      while j < _len(q)
        if j > 0
          q_str = _add(q_str, ", ")
        end
        q_str = _add(q_str, _str((__tmp7 = q; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j))))
        j = _add(j, 1)
      end
      q_str = _add(q_str, "]")
      lines = _append(lines, _add(_add(_add("Priority ", _str(i)), ": "), q_str))
      i = _add(i, 1)
    end
    res = ""
    i = 0
    while i < _len(lines)
      if i > 0
        res = _add(res, "\n")
      end
      res = _add(res, (__tmp8 = lines; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
      i = _add(i, 1)
    end
    return res
  end
  def epq_new()
    return ElementPriorityQueue.new(queue: [])
  end
  def epq_enqueue(epq, data)
    if _len(epq.queue) >= 100
      panic("Maximum queue size is 100")
      return epq
    end
    epq.queue = _append(epq.queue, data)
    return epq
  end
  def epq_dequeue(epq)
    if _eq(_len(epq.queue), 0)
      panic("The queue is empty")
      return EPQDequeueResult.new(queue: epq, value: 0)
    end
    min_val = (__tmp9 = epq.queue; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0))
    idx = 0
    i = 1
    while i < _len(epq.queue)
      v = (__tmp10 = epq.queue; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
      if v < min_val
        min_val = v
        idx = i
      end
      i = _add(i, 1)
    end
    new_q = []
    i = 0
    while i < _len(epq.queue)
      if !_eq(i, idx)
        new_q = _append(new_q, (__tmp11 = epq.queue; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      end
      i = _add(i, 1)
    end
    epq.queue = new_q
    return EPQDequeueResult.new(queue: epq, value: min_val)
  end
  def epq_to_string(epq)
    return ((x = epq.queue); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)
  end
  def fixed_priority_queue()
    fpq = fpq_new()
    fpq = fpq_enqueue(fpq, 0, 10)
    fpq = fpq_enqueue(fpq, 1, 70)
    fpq = fpq_enqueue(fpq, 0, 100)
    fpq = fpq_enqueue(fpq, 2, 1)
    fpq = fpq_enqueue(fpq, 2, 5)
    fpq = fpq_enqueue(fpq, 1, 7)
    fpq = fpq_enqueue(fpq, 2, 4)
    fpq = fpq_enqueue(fpq, 1, 64)
    fpq = fpq_enqueue(fpq, 0, 128)
    puts(fpq_to_string(fpq))
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    puts(fpq_to_string(fpq))
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
  end
  def element_priority_queue()
    epq = epq_new()
    epq = epq_enqueue(epq, 10)
    epq = epq_enqueue(epq, 70)
    epq = epq_enqueue(epq, 100)
    epq = epq_enqueue(epq, 1)
    epq = epq_enqueue(epq, 5)
    epq = epq_enqueue(epq, 7)
    epq = epq_enqueue(epq, 4)
    epq = epq_enqueue(epq, 64)
    epq = epq_enqueue(epq, 128)
    puts(epq_to_string(epq))
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    puts(epq_to_string(epq))
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
  end
  def main()
    fixed_priority_queue()
    element_priority_queue()
  end
  Object.send(:remove_const, :FixedPriorityQueue) if Object.const_defined?(:FixedPriorityQueue)
  Object.const_set(:FixedPriorityQueue, Struct.new(:queues, keyword_init: true))
  Object.send(:remove_const, :FPQDequeueResult) if Object.const_defined?(:FPQDequeueResult)
  Object.const_set(:FPQDequeueResult, Struct.new(:queue, :value, keyword_init: true))
  Object.send(:remove_const, :ElementPriorityQueue) if Object.const_defined?(:ElementPriorityQueue)
  Object.const_set(:ElementPriorityQueue, Struct.new(:queue, keyword_init: true))
  Object.send(:remove_const, :EPQDequeueResult) if Object.const_defined?(:EPQDequeueResult)
  Object.const_set(:EPQDequeueResult, Struct.new(:queue, :value, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
