# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def panic(msg)
    puts(msg)
  end
  def fpq_new()
    return FixedPriorityQueue.new(queues: [[], [], []])
  end
  def fpq_enqueue(fpq, priority, data)
    if priority < 0 || priority >= fpq.queues.length
      panic("Valid priorities are 0, 1, and 2")
      return fpq
    end
    if fpq.queues[priority].length >= 100
      panic("Maximum queue size is 100")
      return fpq
    end
    qs = fpq.queues
    qs[priority] = (qs[priority] << data)
    fpq["queues"] = qs
    return fpq
  end
  def fpq_dequeue(fpq)
    qs = fpq.queues
    i = 0
    while i < qs.length
      q = qs[i]
      if q.length > 0
        val = q[0]
        new_q = []
        j = 1
        while j < q.length
          new_q = (new_q << q[j])
          j = _add(j, 1)
        end
        qs[i] = new_q
        fpq["queues"] = qs
        return FPQDequeueResult.new(queue: fpq, value: val)
      end
      i = _add(i, 1)
    end
    panic("All queues are empty")
    return FPQDequeueResult.new(queue: fpq, value: 0)
  end
  def fpq_to_string(fpq)
    lines = []
    i = 0
    while i < fpq.queues.length
      q_str = "["
      q = fpq.queues[i]
      j = 0
      while j < q.length
        if j > 0
          q_str = _add(q_str, ", ")
        end
        q_str = _add(q_str, (q[j]).to_s)
        j = _add(j, 1)
      end
      q_str = _add(q_str, "]")
      lines = (lines << _add(_add(_add("Priority ", (i).to_s), ": "), q_str))
      i = _add(i, 1)
    end
    res = ""
    i = 0
    while i < lines.length
      if i > 0
        res = _add(res, "\n")
      end
      res = _add(res, lines[i])
      i = _add(i, 1)
    end
    return res
  end
  def epq_new()
    return ElementPriorityQueue.new(queue: [])
  end
  def epq_enqueue(epq, data)
    if epq.queue.length >= 100
      panic("Maximum queue size is 100")
      return epq
    end
    epq["queue"] = (epq.queue << data)
    return epq
  end
  def epq_dequeue(epq)
    if epq.queue.length == 0
      panic("The queue is empty")
      return EPQDequeueResult.new(queue: epq, value: 0)
    end
    min_val = epq.queue[0]
    idx = 0
    i = 1
    while i < epq.queue.length
      v = epq.queue[i]
      if v < min_val
        min_val = v
        idx = i
      end
      i = _add(i, 1)
    end
    new_q = []
    i = 0
    while i < epq.queue.length
      if i != idx
        new_q = (new_q << epq.queue[i])
      end
      i = _add(i, 1)
    end
    epq["queue"] = new_q
    return EPQDequeueResult.new(queue: epq, value: min_val)
  end
  def epq_to_string(epq)
    return ((x = epq.queue); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)
  end
  def fixed_priority_queue()
    fpq = fpq_new()
    fpq = fpq_enqueue(fpq, 0, 10)
    fpq = fpq_enqueue(fpq, 1, 70)
    fpq = fpq_enqueue(fpq, 0, 100)
    fpq = fpq_enqueue(fpq, 2, 1)
    fpq = fpq_enqueue(fpq, 2, 5)
    fpq = fpq_enqueue(fpq, 1, 7)
    fpq = fpq_enqueue(fpq, 2, 4)
    fpq = fpq_enqueue(fpq, 1, 64)
    fpq = fpq_enqueue(fpq, 0, 128)
    puts(fpq_to_string(fpq))
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    puts(fpq_to_string(fpq))
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    puts(res.value)
  end
  def element_priority_queue()
    epq = epq_new()
    epq = epq_enqueue(epq, 10)
    epq = epq_enqueue(epq, 70)
    epq = epq_enqueue(epq, 100)
    epq = epq_enqueue(epq, 1)
    epq = epq_enqueue(epq, 5)
    epq = epq_enqueue(epq, 7)
    epq = epq_enqueue(epq, 4)
    epq = epq_enqueue(epq, 64)
    epq = epq_enqueue(epq, 128)
    puts(epq_to_string(epq))
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    puts(epq_to_string(epq))
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    puts(res.value)
  end
  def main()
    fixed_priority_queue()
    element_priority_queue()
  end
  FixedPriorityQueue = Struct.new(:queues, keyword_init: true)
  FPQDequeueResult = Struct.new(:queue, :value, keyword_init: true)
  ElementPriorityQueue = Struct.new(:queue, keyword_init: true)
  EPQDequeueResult = Struct.new(:queue, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
