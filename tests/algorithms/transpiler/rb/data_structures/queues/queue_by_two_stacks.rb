# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_queue(items)
    return Queue.new(stack1: items, stack2: [])
  end
  def len_queue(q)
    return _add(q.stack1.length, q.stack2.length)
  end
  def str_queue(q)
    items = []
    i = q.stack2.length - 1
    while i >= 0
      items = (items << q.stack2[i])
      i = i - 1
    end
    j = 0
    while j < q.stack1.length
      items = (items << q.stack1[j])
      j = _add(j, 1)
    end
    s = "Queue(("
    k = 0
    while k < items.length
      s = _add(s, (items[k]).to_s)
      if k < items.length - 1
        s = _add(s, ", ")
      end
      k = _add(k, 1)
    end
    s = _add(s, "))")
    return s
  end
  def put(q, item)
    s1 = q.stack1
    s1 = (s1 << item)
    return Queue.new(stack1: s1, stack2: q.stack2)
  end
  def get(q)
    s1 = q.stack1
    s2 = q.stack2
    if s2.length == 0
      while s1.length > 0
        idx = s1.length - 1
        v = s1[idx]
        new_s1 = []
        i = 0
        while i < idx
          new_s1 = (new_s1 << s1[i])
          i = _add(i, 1)
        end
        s1 = new_s1
        s2 = (s2 << v)
      end
    end
    if s2.length == 0
      panic("Queue is empty")
    end
    idx2 = s2.length - 1
    value = s2[idx2]
    new_s2 = []
    j = 0
    while j < idx2
      new_s2 = (new_s2 << s2[j])
      j = _add(j, 1)
    end
    s2 = new_s2
    return GetResult.new(queue: Queue.new(stack1: s1, stack2: s2), value: value)
  end
  Queue = Struct.new(:stack1, :stack2, keyword_init: true)
  GetResult = Struct.new(:queue, :value, keyword_init: true)
  $q = new_queue([10, 20, 30])
  $r1 = get($q)
  $q = $r1.queue
  puts($r1.value)
  $q = put($q, 40)
  $r2 = get($q)
  $q = $r2.queue
  puts($r2.value)
  $r3 = get($q)
  $q = $r3.queue
  puts($r3.value)
  puts(len_queue($q))
  $r4 = get($q)
  $q = $r4.queue
  puts($r4.value)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
