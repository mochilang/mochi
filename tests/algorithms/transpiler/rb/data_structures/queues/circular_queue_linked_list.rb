# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_queue(capacity)
    data = []
    next_ = []
    prev = []
    i = 0
    while i < capacity
      data = (data << "")
      next_ = (next_ << (_add(i, 1)) % capacity)
      prev = (prev << (_add(i - 1, capacity)) % capacity)
      i = _add(i, 1)
    end
    return CircularQueue.new(data: data, next_: next_, prev: prev, front: 0, rear: 0)
  end
  def is_empty(q)
    return q.front == q.rear && q.data[q.front] == ""
  end
  def check_can_perform(q)
    if is_empty(q)
      panic("Empty Queue")
    end
  end
  def check_is_full(q)
    if q.next_[q.rear] == q.front
      panic("Full Queue")
    end
  end
  def peek(q)
    check_can_perform(q)
    return q.data[q.front]
  end
  def enqueue(q, value)
    check_is_full(q)
    if !is_empty(q)
      q["rear"] = q.next_[q.rear]
    end
    data = q.data
    data[q.rear] = value
    q["data"] = data
    return q
  end
  def dequeue(q)
    check_can_perform(q)
    data = q.data
    val = data[q.front]
    data[q.front] = ""
    q["data"] = data
    if q.front != q.rear
      q["front"] = q.next_[q.front]
    end
    return DequeueResult.new(queue: q, value: val)
  end
  def main()
    q = create_queue(3)
    puts((is_empty(q)).to_s)
    q = enqueue(q, "a")
    q = enqueue(q, "b")
    puts(peek(q))
    res = dequeue(q)
    q = res.queue
    puts(res.value)
    res = dequeue(q)
    q = res.queue
    puts(res.value)
    puts((is_empty(q)).to_s)
  end
  CircularQueue = Struct.new(:data, :next_, :prev, :front, :rear, keyword_init: true)
  DequeueResult = Struct.new(:queue, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
