# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_queue(items)
    return Queue.new(entries: items)
  end
  def len_queue(q)
    return q.entries.length
  end
  def str_queue(q)
    s = "Queue(("
    i = 0
    while i < q.entries.length
      s = _add(s, (q.entries[i]).to_s)
      if i < q.entries.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "))")
    return s
  end
  def put(q, item)
    e = q.entries
    e = (e << item)
    return Queue.new(entries: e)
  end
  def get(q)
    if q.entries.length == 0
      panic("Queue is empty")
    end
    value = q.entries[0]
    new_entries = []
    i = 1
    while i < q.entries.length
      new_entries = (new_entries << q.entries[i])
      i = _add(i, 1)
    end
    return GetResult.new(queue: Queue.new(entries: new_entries), value: value)
  end
  def rotate(q, rotation)
    e = q.entries
    r = 0
    while r < rotation
      if e.length > 0
        first = e[0]
        rest = []
        i = 1
        while i < e.length
          rest = (rest << e[i])
          i = _add(i, 1)
        end
        rest = (rest << first)
        e = rest
      end
      r = _add(r, 1)
    end
    return Queue.new(entries: e)
  end
  def get_front(q)
    return q.entries[0]
  end
  Queue = Struct.new(:entries, keyword_init: true)
  GetResult = Struct.new(:queue, :value, keyword_init: true)
  $q = new_queue([])
  puts(len_queue($q))
  $q = put($q, 10)
  $q = put($q, 20)
  $q = put($q, 30)
  $q = put($q, 40)
  puts(str_queue($q))
  $res = get($q)
  $q = $res.queue
  puts($res.value)
  puts(str_queue($q))
  $q = rotate($q, 2)
  puts(str_queue($q))
  $front = get_front($q)
  puts($front)
  puts(str_queue($q))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
