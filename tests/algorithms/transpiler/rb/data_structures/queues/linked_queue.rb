# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_queue()
    return LinkedQueue.new(nodes: [], front: 0 - 1, rear: 0 - 1)
  end
  def is_empty(q)
    return q.front == 0 - 1
  end
  def put(q, item)
    node = Node.new(data: item, next_: 0 - 1)
    q["nodes"] = (q.nodes << node)
    idx = q.nodes.length - 1
    if q.front == 0 - 1
      q["front"] = idx
      q["rear"] = idx
    else
      nodes = q.nodes
      nodes[q.rear]["next_"] = idx
      q["nodes"] = nodes
      q["rear"] = idx
    end
  end
  def get(q)
    if is_empty(q)
      panic("dequeue from empty queue")
    end
    idx = q.front
    node = q.nodes[idx]
    q["front"] = node.next_
    if q.front == 0 - 1
      q["rear"] = 0 - 1
    end
    return node.data
  end
  def length(q)
    count = 0
    idx = q.front
    while idx != 0 - 1
      count = _add(count, 1)
      idx = q.nodes[idx].next_
    end
    return count
  end
  def to_string(q)
    res = ""
    idx = q.front
    first = true
    while idx != 0 - 1
      node = q.nodes[idx]
      if first
        res = node.data
        first = false
      else
        res = _add(_add(res, " <- "), node.data)
      end
      idx = node.next_
    end
    return res
  end
  def clear(q)
    q["nodes"] = []
    q["front"] = 0 - 1
    q["rear"] = 0 - 1
  end
  Node = Struct.new(:data, :next_, keyword_init: true)
  LinkedQueue = Struct.new(:nodes, :front, :rear, keyword_init: true)
  $queue = new_queue()
  puts((is_empty($queue)).to_s)
  put($queue, "5")
  put($queue, "9")
  put($queue, "python")
  puts((is_empty($queue)).to_s)
  puts(get($queue))
  put($queue, "algorithms")
  puts(get($queue))
  puts(get($queue))
  puts(get($queue))
  puts((is_empty($queue)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
