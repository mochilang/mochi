# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def empty_deque()
    return Deque.new(data: [])
  end
  def push_back(dq, value)
    return Deque.new(data: (dq.data << value))
  end
  def push_front(dq, value)
    res = [value]
    i = 0
    while i < dq.data.length
      res = (res << dq.data[i])
      i = _add(i, 1)
    end
    return Deque.new(data: res)
  end
  def extend_back(dq, values)
    res = dq.data
    i = 0
    while i < values.length
      res = (res << values[i])
      i = _add(i, 1)
    end
    return Deque.new(data: res)
  end
  def extend_front(dq, values)
    res = []
    i = values.length - 1
    while i >= 0
      res = (res << values[i])
      i = i - 1
    end
    j = 0
    while j < dq.data.length
      res = (res << dq.data[j])
      j = _add(j, 1)
    end
    return Deque.new(data: res)
  end
  def pop_back(dq)
    if dq.data.length == 0
      panic("pop from empty deque")
    end
    res = []
    i = 0
    while i < dq.data.length - 1
      res = (res << dq.data[i])
      i = _add(i, 1)
    end
    return PopResult.new(deque: Deque.new(data: res), value: dq.data[dq.data.length - 1])
  end
  def pop_front(dq)
    if dq.data.length == 0
      panic("popleft from empty deque")
    end
    res = []
    i = 1
    while i < dq.data.length
      res = (res << dq.data[i])
      i = _add(i, 1)
    end
    return PopResult.new(deque: Deque.new(data: res), value: dq.data[0])
  end
  def is_empty(dq)
    return dq.data.length == 0
  end
  def length(dq)
    return dq.data.length
  end
  def to_string(dq)
    if dq.data.length == 0
      return "[]"
    end
    s = _add("[", (dq.data[0]).to_s)
    i = 1
    while i < dq.data.length
      s = _add(_add(s, ", "), (dq.data[i]).to_s)
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def main()
    dq = empty_deque()
    dq = push_back(dq, 2)
    dq = push_front(dq, 1)
    dq = extend_back(dq, [3, 4])
    dq = extend_front(dq, [0])
    puts(to_string(dq))
    r = pop_back(dq)
    dq = r.deque
    puts(r.value)
    r = pop_front(dq)
    dq = r.deque
    puts(r.value)
    puts(to_string(dq))
    puts((is_empty(empty_deque()) ? 'true' : 'false'))
  end
  Deque = Struct.new(:data, keyword_init: true)
  PopResult = Struct.new(:deque, :value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
