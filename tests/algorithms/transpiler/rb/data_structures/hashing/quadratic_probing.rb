# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_hash_table(size)
    vals = []
    i = 0
    while i < size
      vals = (vals << nil)
      i = _add(i, 1)
    end
    return HashTable.new(size_table: size, values: vals, lim_charge: 0.75)
  end
  def hash_function(table, key)
    return key % table.size_table
  end
  def balanced_factor(table)
    count = 0
    i = 0
    while i < table.values.length
      if table.values[i] != nil
        count = _add(count, 1)
      end
      i = _add(i, 1)
    end
    return ((count).to_f) / ((table.size_table).to_f)
  end
  def collision_resolution(table, key)
    i = 1
    new_key = hash_function(table, _add(key, i * i))
    while table.values[new_key] != nil && table.values[new_key] != key
      i = _add(i, 1)
      if balanced_factor(table) >= table.lim_charge
        return table.size_table
      end
      new_key = hash_function(table, _add(key, i * i))
    end
    return new_key
  end
  def insert_data(table, data)
    key = hash_function(table, data)
    vals = table.values
    if vals[key] == nil
      vals[key] = data
    else
      if vals[key] == data
        table["values"] = vals
        return
      else
        new_key = collision_resolution(table, key)
        if new_key < vals.length && vals[new_key] == nil
          vals[new_key] = data
        end
      end
    end
    table["values"] = vals
  end
  def int_to_string(n)
    if n == 0
      return "0"
    end
    num = n
    neg = false
    if num < 0
      neg = true
      num = -num
    end
    res = ""
    while num > 0
      digit = num % 10
      ch = "0123456789"[digit..._add(digit, 1)]
      res = _add(ch, res)
      num = num / 10
    end
    if neg
      res = _add("-", res)
    end
    return res
  end
  def keys_to_string(table)
    result = "{"
    first = true
    i = 0
    while i < table.values.length
      v = table.values[i]
      if v != nil
        if !first
          result = _add(result, ", ")
        end
        result = _add(_add(_add(result, int_to_string(i)), ": "), int_to_string(v))
        first = false
      end
      i = _add(i, 1)
    end
    result = _add(result, "}")
    return result
  end
  HashTable = Struct.new(:size_table, :values, :lim_charge, keyword_init: true)
  $qp = create_hash_table(8)
  insert_data($qp, 0)
  insert_data($qp, 999)
  insert_data($qp, 111)
  puts(keys_to_string($qp))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
