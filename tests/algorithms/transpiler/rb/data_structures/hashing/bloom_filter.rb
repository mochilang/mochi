# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ord(ch)
    i = 0
    while i < $ascii.length
      if $ascii[i..._add(i, 1)] == ch
        return _add(32, i)
      end
      i = _add(i, 1)
    end
    return 0
  end
  def new_bloom(size)
    bits = []
    i = 0
    while i < size
      bits = (bits << 0)
      i = _add(i, 1)
    end
    return Bloom.new(size: size, bits: bits)
  end
  def hash1(value, size)
    h = 0
    i = 0
    while i < value.length
      h = (_add(h * 31, ord(value[i..._add(i, 1)]))) % size
      i = _add(i, 1)
    end
    return h
  end
  def hash2(value, size)
    h = 0
    i = 0
    while i < value.length
      h = (_add(h * 131, ord(value[i..._add(i, 1)]))) % size
      i = _add(i, 1)
    end
    return h
  end
  def hash_positions(value, size)
    h1 = hash1(value, size)
    h2 = hash2(value, size)
    res = []
    res = (res << h1)
    res = (res << h2)
    return res
  end
  def bloom_add(b, value)
    pos = hash_positions(value, b.size)
    bits = b.bits
    i = 0
    while i < pos.length
      idx = b.size - 1 - pos[i]
      bits[idx] = 1
      i = _add(i, 1)
    end
    return Bloom.new(size: b.size, bits: bits)
  end
  def bloom_exists(b, value)
    pos = hash_positions(value, b.size)
    i = 0
    while i < pos.length
      idx = b.size - 1 - pos[i]
      if b.bits[idx] != 1
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def bitstring(b)
    res = ""
    i = 0
    while i < b.size
      res = _add(res, (b.bits[i]).to_s)
      i = _add(i, 1)
    end
    return res
  end
  def format_hash(b, value)
    pos = hash_positions(value, b.size)
    bits = []
    i = 0
    while i < b.size
      bits = (bits << 0)
      i = _add(i, 1)
    end
    i = 0
    while i < pos.length
      idx = b.size - 1 - pos[i]
      bits[idx] = 1
      i = _add(i, 1)
    end
    res = ""
    i = 0
    while i < b.size
      res = _add(res, (bits[i]).to_s)
      i = _add(i, 1)
    end
    return res
  end
  def estimated_error_rate(b)
    ones = 0
    i = 0
    while i < b.size
      if b.bits[i] == 1
        ones = _add(ones, 1)
      end
      i = _add(i, 1)
    end
    frac = ((ones).to_f) / ((b.size).to_f)
    return frac * frac
  end
  def any_in(b, items)
    i = 0
    while i < items.length
      if bloom_exists(b, items[i])
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def main()
    bloom = new_bloom(8)
    puts(bitstring(bloom))
    puts((bloom_exists(bloom, "Titanic") ? 'true' : 'false'))
    bloom = bloom_add(bloom, "Titanic")
    puts(bitstring(bloom))
    puts((bloom_exists(bloom, "Titanic") ? 'true' : 'false'))
    bloom = bloom_add(bloom, "Avatar")
    puts((bloom_exists(bloom, "Avatar") ? 'true' : 'false'))
    puts(format_hash(bloom, "Avatar"))
    puts(bitstring(bloom))
    not_present = ["The Godfather", "Interstellar", "Parasite", "Pulp Fiction"]
    i = 0
    while i < not_present.length
      film = not_present[i]
      puts(_add(_add(film, ":"), format_hash(bloom, film)))
      i = _add(i, 1)
    end
    puts((any_in(bloom, not_present) ? 'true' : 'false'))
    puts((bloom_exists(bloom, "Ratatouille") ? 'true' : 'false'))
    puts(format_hash(bloom, "Ratatouille"))
    puts((estimated_error_rate(bloom)).to_s)
    bloom = bloom_add(bloom, "The Godfather")
    puts((estimated_error_rate(bloom)).to_s)
    puts(bitstring(bloom))
  end
  $ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  Bloom = Struct.new(:size, :bits, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
