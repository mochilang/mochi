# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def repeat_int(n, val)
    res = []
    i = 0
    while i < n
      res = (res << val)
      i = _add(i, 1)
    end
    return res
  end
  def repeat_bool(n, val)
    res = []
    i = 0
    while i < n
      res = (res << val)
      i = _add(i, 1)
    end
    return res
  end
  def set_int(xs, idx, value)
    res = []
    i = 0
    while i < xs.length
      if i == idx
        res = (res << value)
      else
        res = (res << xs[i])
      end
      i = _add(i, 1)
    end
    return res
  end
  def set_bool(xs, idx, value)
    res = []
    i = 0
    while i < xs.length
      if i == idx
        res = (res << value)
      else
        res = (res << xs[i])
      end
      i = _add(i, 1)
    end
    return res
  end
  def create_table(size_table, charge_factor, lim_charge)
    return HashTable.new(size_table: size_table, values: repeat_int(size_table, 0), filled: repeat_bool(size_table, false), charge_factor: charge_factor, lim_charge: lim_charge)
  end
  def hash_function(ht, key)
    k = key % ht.size_table
    if k < 0
      k = _add(k, ht.size_table)
    end
    return k
  end
  def is_prime(n)
    if n < 2
      return false
    end
    if n % 2 == 0
      return n == 2
    end
    i = 3
    while i * i <= n
      if n % i == 0
        return false
      end
      i = _add(i, 2)
    end
    return true
  end
  def next_prime(value, factor)
    candidate = _add(value * factor, 1)
    while !is_prime(candidate)
      candidate = _add(candidate, 1)
    end
    return candidate
  end
  def set_value(ht, key, data)
    new_values = set_int(ht.values, key, data)
    new_filled = set_bool(ht.filled, key, true)
    return HashTable.new(size_table: ht.size_table, values: new_values, filled: new_filled, charge_factor: ht.charge_factor, lim_charge: ht.lim_charge)
  end
  def collision_resolution(ht, key)
    new_key = hash_function(ht, _add(key, 1))
    steps = 0
    while ht.filled[new_key]
      new_key = hash_function(ht, _add(new_key, 1))
      steps = _add(steps, 1)
      if steps >= ht.size_table
        return -1
      end
    end
    return new_key
  end
  def rehashing(ht)
    survivors = []
    i = 0
    while i < ht.values.length
      if ht.filled[i]
        survivors = (survivors << ht.values[i])
      end
      i = _add(i, 1)
    end
    new_size = next_prime(ht.size_table, 2)
    new_ht = create_table(new_size, ht.charge_factor, ht.lim_charge)
    i = 0
    while i < survivors.length
      new_ht = insert_data(new_ht, survivors[i])
      i = _add(i, 1)
    end
    return new_ht
  end
  def insert_data(ht, data)
    key = hash_function(ht, data)
    if !ht.filled[key]
      return set_value(ht, key, data)
    end
    if ht.values[key] == data
      return ht
    end
    new_key = collision_resolution(ht, key)
    if new_key >= 0
      return set_value(ht, new_key, data)
    end
    resized = rehashing(ht)
    return insert_data(resized, data)
  end
  def keys(ht)
    res = []
    i = 0
    while i < ht.values.length
      if ht.filled[i]
        res = (res << [i, ht.values[i]])
      end
      i = _add(i, 1)
    end
    return res
  end
  def main()
    ht = create_table(3, 1, 0.75)
    ht = insert_data(ht, 17)
    ht = insert_data(ht, 18)
    ht = insert_data(ht, 99)
    puts(((x = keys(ht)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  HashTable = Struct.new(:size_table, :values, :filled, :charge_factor, :lim_charge, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
