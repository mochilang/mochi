# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_hash_map()
    return HashMap.new(entries: [])
  end
  def hm_len(m)
    return m.entries.length
  end
  def hm_set(m, key, value)
    entries = m.entries
    updated = false
    new_entries = []
    i = 0
    while i < entries.length
      e = entries[i]
      if e.key == key
        new_entries = (new_entries << Entry.new(key: key, value: value))
        updated = true
      else
        new_entries = (new_entries << e)
      end
      i = _add(i, 1)
    end
    if !updated
      new_entries = (new_entries << Entry.new(key: key, value: value))
    end
    return HashMap.new(entries: new_entries)
  end
  def hm_get(m, key)
    i = 0
    while i < m.entries.length
      e = m.entries[i]
      if e.key == key
        return GetResult.new(found: true, value: e.value)
      end
      i = _add(i, 1)
    end
    return GetResult.new(found: false, value: "")
  end
  def hm_del(m, key)
    entries = m.entries
    new_entries = []
    removed = false
    i = 0
    while i < entries.length
      e = entries[i]
      if e.key == key
        removed = true
      else
        new_entries = (new_entries << e)
      end
      i = _add(i, 1)
    end
    if removed
      return DelResult.new(map: HashMap.new(entries: new_entries), ok: true)
    end
    return DelResult.new(map: m, ok: false)
  end
  def test_add_items()
    h = make_hash_map()
    h = hm_set(h, "key_a", "val_a")
    h = hm_set(h, "key_b", "val_b")
    a = hm_get(h, "key_a")
    b = hm_get(h, "key_b")
    return hm_len(h) == 2 && a.found && b.found && a.value == "val_a" && b.value == "val_b"
  end
  def test_overwrite_items()
    h = make_hash_map()
    h = hm_set(h, "key_a", "val_a")
    h = hm_set(h, "key_a", "val_b")
    a = hm_get(h, "key_a")
    return hm_len(h) == 1 && a.found && a.value == "val_b"
  end
  def test_delete_items()
    h = make_hash_map()
    h = hm_set(h, "key_a", "val_a")
    h = hm_set(h, "key_b", "val_b")
    d1 = hm_del(h, "key_a")
    h = d1.map
    d2 = hm_del(h, "key_b")
    h = d2.map
    h = hm_set(h, "key_a", "val_a")
    d3 = hm_del(h, "key_a")
    h = d3.map
    return hm_len(h) == 0
  end
  def test_access_absent_items()
    h = make_hash_map()
    g1 = hm_get(h, "key_a")
    d1 = hm_del(h, "key_a")
    h = d1.map
    h = hm_set(h, "key_a", "val_a")
    d2 = hm_del(h, "key_a")
    h = d2.map
    d3 = hm_del(h, "key_a")
    h = d3.map
    g2 = hm_get(h, "key_a")
    return g1.found == false && d1.ok == false && d2.ok && d3.ok == false && g2.found == false && hm_len(h) == 0
  end
  def test_add_with_resize_up()
    h = make_hash_map()
    i = 0
    while i < 5
      s = (i).to_s
      h = hm_set(h, s, s)
      i = _add(i, 1)
    end
    return hm_len(h) == 5
  end
  def test_add_with_resize_down()
    h = make_hash_map()
    i = 0
    while i < 5
      s = (i).to_s
      h = hm_set(h, s, s)
      i = _add(i, 1)
    end
    j = 0
    while j < 5
      s = (j).to_s
      d = hm_del(h, s)
      h = d.map
      j = _add(j, 1)
    end
    h = hm_set(h, "key_a", "val_b")
    a = hm_get(h, "key_a")
    return hm_len(h) == 1 && a.found && a.value == "val_b"
  end
  Entry = Struct.new(:key, :value, keyword_init: true)
  HashMap = Struct.new(:entries, keyword_init: true)
  GetResult = Struct.new(:found, :value, keyword_init: true)
  DelResult = Struct.new(:map, :ok, keyword_init: true)
  puts((test_add_items() ? 'true' : 'false'))
  puts((test_overwrite_items() ? 'true' : 'false'))
  puts((test_delete_items() ? 'true' : 'false'))
  puts((test_access_absent_items() ? 'true' : 'false'))
  puts((test_add_with_resize_up() ? 'true' : 'false'))
  puts((test_add_with_resize_down() ? 'true' : 'false'))
  puts((true ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
