# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_table(size_table, charge_factor)
    vals = []
    i = 0
    while i < size_table
      vals = (vals << [])
      i = _add(i, 1)
    end
    return HashTableWithLinkedList.new(size_table: size_table, charge_factor: charge_factor, values: vals, keys: {})
  end
  def hash_function(ht, key)
    res = key % ht.size_table
    if res < 0
      res = _add(res, ht.size_table)
    end
    return res
  end
  def prepend(lst, value)
    result = [value]
    i = 0
    while i < lst.length
      result = (result << lst[i])
      i = _add(i, 1)
    end
    return result
  end
  def set_value(ht, key, data)
    current = ht.values[key]
    updated = prepend(current, data)
    vals = ht.values
    vals[key] = updated
    ht["values"] = vals
    ks = ht.keys
    ks[key] = updated
    ht["keys"] = ks
  end
  def count_empty(ht)
    count = 0
    i = 0
    while i < ht.values.length
      if ht.values[i].length == 0
        count = _add(count, 1)
      end
      i = _add(i, 1)
    end
    return count
  end
  def balanced_factor(ht)
    total = 0
    i = 0
    while i < ht.values.length
      total = _add(total, (ht.charge_factor - ht.values[i].length))
      i = _add(i, 1)
    end
    return ((total).to_f) / ((ht.size_table).to_f) * ((ht.charge_factor).to_f)
  end
  def collision_resolution(ht, key)
    if !(ht.values[key].length == ht.charge_factor && count_empty(ht) == 0)
      return key
    end
    new_key = (_add(key, 1)) % ht.size_table
    steps = 0
    while ht.values[new_key].length == ht.charge_factor && steps < ht.size_table - 1
      new_key = (_add(new_key, 1)) % ht.size_table
      steps = _add(steps, 1)
    end
    if ht.values[new_key].length < ht.charge_factor
      return new_key
    end
    return -1
  end
  def insert(ht, data)
    key = hash_function(ht, data)
    if ht.values[key].length == 0 || ht.values[key].length < ht.charge_factor
      set_value(ht, key, data)
      return
    end
    dest = collision_resolution(ht, key)
    if dest >= 0
      set_value(ht, dest, data)
    else
      puts("table full")
    end
  end
  def main()
    ht = make_table(3, 2)
    insert(ht, 10)
    insert(ht, 20)
    insert(ht, 30)
    insert(ht, 40)
    insert(ht, 50)
    puts(((x = ht.values); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts((balanced_factor(ht)).to_s)
  end
  HashTableWithLinkedList = Struct.new(:size_table, :charge_factor, :values, :keys, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
