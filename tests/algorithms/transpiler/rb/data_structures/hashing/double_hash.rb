# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def is_prime(n)
    if n < 2
      return false
    end
    i = 2
    while i * i <= n
      if n % i == 0
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def prev_prime(n)
    p = n - 1
    while p >= 2
      if is_prime(p)
        return p
      end
      p = p - 1
    end
    return 1
  end
  def create_table(size)
    vals = []
    i = 0
    while i < size
      vals = (vals << (-1))
      i = _add(i, 1)
    end
    return vals
  end
  def hash1(size, key)
    return key % size
  end
  def hash2(prime, key)
    return prime - (key % prime)
  end
  def insert_double_hash(values, size, prime, value)
    vals = values
    idx = hash1(size, value)
    step = hash2(prime, value)
    count = 0
    while vals[idx] != (-1) && count < size
      idx = (_add(idx, step)) % size
      count = _add(count, 1)
    end
    if vals[idx] == (-1)
      vals[idx] = value
    end
    return vals
  end
  def table_keys(values)
    res = {}
    i = 0
    while i < values.length
      if values[i] != (-1)
        res[i] = values[i]
      end
      i = _add(i, 1)
    end
    return res
  end
  def run_example(size, data)
    prime = prev_prime(size)
    table = create_table(size)
    i = 0
    while i < data.length
      table = insert_double_hash(table, size, prime, data[i])
      i = _add(i, 1)
    end
    puts((table_keys(table)).to_s)
  end
  run_example(3, [10, 20, 30])
  run_example(4, [10, 20, 30])
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
