# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_buckets(n)
    buckets = []
    i = 0
    while i < n
      buckets = (buckets << Bucket.new(state: 0, key: 0, val: 0))
      i = _add(i, 1)
    end
    return buckets
  end
  def hashmap_new(initial_size)
    return HashMap.new(buckets: make_buckets(initial_size), len: 0, cap_num: 3, cap_den: 4, initial_size: initial_size)
  end
  def bucket_index(hm, key)
    ind = key % hm.buckets.length
    if ind < 0
      ind = _add(ind, hm.buckets.length)
    end
    return ind
  end
  def next_index(hm, ind)
    return (_add(ind, 1)) % hm.buckets.length
  end
  def try_set(hm, ind, key, val)
    buckets = hm.buckets
    b = buckets[ind]
    if b.state == 0 || b.state == 2
      buckets[ind] = Bucket.new(state: 1, key: key, val: val)
      hm["buckets"] = buckets
      hm["len"] = _add(hm.len, 1)
      return true
    end
    if b.key == key
      buckets[ind] = Bucket.new(state: 1, key: key, val: val)
      hm["buckets"] = buckets
      return true
    end
    return false
  end
  def is_full(hm)
    limit = hm.buckets.length * hm.cap_num / hm.cap_den
    return hm.len >= limit
  end
  def is_sparse(hm)
    if hm.buckets.length <= hm.initial_size
      return false
    end
    limit = hm.buckets.length * hm.cap_num / (2 * hm.cap_den)
    return hm.len < limit
  end
  def resize(hm, new_size)
    old = hm.buckets
    hm["buckets"] = make_buckets(new_size)
    hm["len"] = 0
    i = 0
    while i < old.length
      it = old[i]
      if it.state == 1
        add_item(hm, it.key, it.val)
      end
      i = _add(i, 1)
    end
  end
  def size_up(hm)
    resize(hm, hm.buckets.length * 2)
  end
  def size_down(hm)
    resize(hm, hm.buckets.length / 2)
  end
  def add_item(hm, key, val)
    ind = bucket_index(hm, key)
    i = 0
    while i < hm.buckets.length
      if try_set(hm, ind, key, val)
        break
      end
      ind = next_index(hm, ind)
      i = _add(i, 1)
    end
  end
  def hashmap_set(hm, key, val)
    if is_full(hm)
      size_up(hm)
    end
    add_item(hm, key, val)
  end
  def hashmap_get(hm, key)
    buckets = hm.buckets
    ind = bucket_index(hm, key)
    i = 0
    while i < buckets.length
      it = buckets[ind]
      if it.state == 0
        break
      end
      if it.state == 1 && it.key == key
        return it.val
      end
      ind = next_index(hm, ind)
      i = _add(i, 1)
    end
    return 0
  end
  def hashmap_del(hm, key)
    buckets = hm.buckets
    ind = bucket_index(hm, key)
    i = 0
    while i < buckets.length
      it = buckets[ind]
      if it.state == 0
        puts(_add("KeyError: ", (key).to_s))
        return
      end
      if it.state == 1 && it.key == key
        buckets[ind] = Bucket.new(state: 2, key: 0, val: 0)
        hm["buckets"] = buckets
        hm["len"] = hm.len - 1
        break
      end
      ind = next_index(hm, ind)
      i = _add(i, 1)
    end
    if is_sparse(hm)
      size_down(hm)
    end
  end
  def hashmap_len(hm)
    return hm.len
  end
  def hashmap_repr(hm)
    out = "HashMap("
    first = true
    i = 0
    while i < hm.buckets.length
      b = hm.buckets[i]
      if b.state == 1
        if !first
          out = _add(out, ", ")
        else
          first = false
        end
        out = _add(_add(_add(out, (b.key).to_s), ": "), (b.val).to_s)
      end
      i = _add(i, 1)
    end
    out = _add(out, ")")
    return out
  end
  Bucket = Struct.new(:state, :key, :val, keyword_init: true)
  HashMap = Struct.new(:buckets, :len, :cap_num, :cap_den, :initial_size, keyword_init: true)
  $hm = hashmap_new(5)
  hashmap_set($hm, 1, 10)
  hashmap_set($hm, 2, 20)
  hashmap_set($hm, 3, 30)
  puts(hashmap_repr($hm))
  puts((hashmap_get($hm, 2)).to_s)
  hashmap_del($hm, 1)
  puts(hashmap_repr($hm))
  puts((hashmap_len($hm)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
