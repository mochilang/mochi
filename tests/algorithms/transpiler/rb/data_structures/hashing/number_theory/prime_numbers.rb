# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:22 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def isPrime(number)
    if number < 2
      return false
    end
    if number < 4
      return true
    end
    if number % 2 == 0
      return false
    end
    i = 3
    while i * i <= number
      if number % i == 0
        return false
      end
      i = _add(i, 2)
    end
    return true
  end
  def nextPrime(value, factor, desc)
    v = value * factor
    firstValue = v
    while !isPrime(v)
      if desc
        v = v - 1
      else
        v = _add(v, 1)
      end
    end
    if v == firstValue
      if desc
        return nextPrime(v - 1, 1, desc)
      else
        return nextPrime(_add(v, 1), 1, desc)
      end
    end
    return v
  end
  puts((isPrime(0) ? 'true' : 'false'))
  puts((isPrime(1) ? 'true' : 'false'))
  puts((isPrime(2) ? 'true' : 'false'))
  puts((isPrime(3) ? 'true' : 'false'))
  puts((isPrime(27) ? 'true' : 'false'))
  puts((isPrime(87) ? 'true' : 'false'))
  puts((isPrime(563) ? 'true' : 'false'))
  puts((isPrime(2999) ? 'true' : 'false'))
  puts((isPrime(67483) ? 'true' : 'false'))
  puts(nextPrime(14, 1, false))
  puts(nextPrime(14, 1, true))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
