# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_node()
    return Node.new(children: {}, is_end_of_string: false, start: -1, end_: -1)
  end
  def has_key(m, k)
        __tmp1 = m.keys()
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if _eq(key, k)
        return true
      end
    end
    return false
  end
  def add_suffix(tree, suffix, index)
    nodes = tree.nodes
    node_idx = 0
    j = 0
    while j < _len(suffix)
      ch = suffix[j..._add(j, 1)]
      node = (__tmp2 = nodes; __tmp2.is_a?(Hash) ? __tmp2[node_idx] : _idx(__tmp2, node_idx))
      children = node.children
      if !has_key(children, ch)
        nodes = _append(nodes, new_node())
        new_idx = _len(nodes) - 1
        children[ch] = new_idx
      end
      node.children = children
      nodes[node_idx] = node
      node_idx = (__tmp3 = children; __tmp3.is_a?(Hash) ? __tmp3[ch] : _idx(__tmp3, ch))
      j = _add(j, 1)
    end
    node = (__tmp4 = nodes; __tmp4.is_a?(Hash) ? __tmp4[node_idx] : _idx(__tmp4, node_idx))
    node.is_end_of_string = true
    node.start = index
    node.end_ = _add(index, _len(suffix)) - 1
    nodes[node_idx] = node
    tree.nodes = nodes
    return tree
  end
  def build_suffix_tree(tree)
    text = tree.text
    n = _len(text)
    i = 0
    t = tree
    while i < n
      suffix = ""
      k = i
      while k < n
        suffix = _add(suffix, text[k..._add(k, 1)])
        k = _add(k, 1)
      end
      t = add_suffix(t, suffix, i)
      i = _add(i, 1)
    end
    return t
  end
  def new_suffix_tree(text)
    tree = SuffixTree.new(text: text, nodes: [])
    tree.nodes = _append(tree.nodes, new_node())
    tree = build_suffix_tree(tree)
    return tree
  end
  def search(tree, pattern)
    node_idx = 0
    i = 0
    nodes = tree.nodes
    while i < _len(pattern)
      ch = pattern[i..._add(i, 1)]
      node = (__tmp5 = nodes; __tmp5.is_a?(Hash) ? __tmp5[node_idx] : _idx(__tmp5, node_idx))
      children = node.children
      if !has_key(children, ch)
        return false
      end
      node_idx = (__tmp6 = children; __tmp6.is_a?(Hash) ? __tmp6[ch] : _idx(__tmp6, ch))
      i = _add(i, 1)
    end
    return true
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:children, :is_end_of_string, :start, :end_, keyword_init: true))
  Object.send(:remove_const, :SuffixTree) if Object.const_defined?(:SuffixTree)
  Object.const_set(:SuffixTree, Struct.new(:text, :nodes, keyword_init: true))
  $st = new_suffix_tree("bananas")
  puts(_str(search($st, "ana")))
  puts(_str(search($st, "apple")))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
