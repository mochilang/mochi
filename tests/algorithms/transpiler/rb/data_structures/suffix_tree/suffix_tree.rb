# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_node()
    return Node.new(children: {}, is_end_of_string: false, start: -1, end_: -1)
  end
  def has_key(m, k)
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if key == k
        return true
      end
    end
    return false
  end
  def add_suffix(tree, suffix, index)
    nodes = tree.nodes
    node_idx = 0
    j = 0
    while j < suffix.length
      ch = suffix[j]
      node = nodes[node_idx]
      children = node.children
      if !has_key(children, ch)
        nodes = (nodes << new_node())
        new_idx = nodes.length - 1
        children[ch] = new_idx
      end
      node["children"] = children
      nodes[node_idx] = node
      node_idx = children[ch]
      j = _add(j, 1)
    end
    node = nodes[node_idx]
    node["is_end_of_string"] = true
    node["start"] = index
    node["end_"] = _add(index, suffix.length) - 1
    nodes[node_idx] = node
    tree["nodes"] = nodes
    return tree
  end
  def build_suffix_tree(tree)
    text = tree.text
    n = text.length
    i = 0
    t = tree
    while i < n
      suffix = ""
      k = i
      while k < n
        suffix = _add(suffix, text[k])
        k = _add(k, 1)
      end
      t = add_suffix(t, suffix, i)
      i = _add(i, 1)
    end
    return t
  end
  def new_suffix_tree(text)
    tree = SuffixTree.new(text: text, nodes: [])
    tree["nodes"] = (tree.nodes << new_node())
    tree = build_suffix_tree(tree)
    return tree
  end
  def search(tree, pattern)
    node_idx = 0
    i = 0
    nodes = tree.nodes
    while i < pattern.length
      ch = pattern[i]
      node = nodes[node_idx]
      children = node.children
      if !has_key(children, ch)
        return false
      end
      node_idx = children[ch]
      i = _add(i, 1)
    end
    return true
  end
  Node = Struct.new(:children, :is_end_of_string, :start, :end_, keyword_init: true)
  SuffixTree = Struct.new(:text, :nodes, keyword_init: true)
  $st = new_suffix_tree("bananas")
  puts((search($st, "ana")).to_s)
  puts((search($st, "apple")).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
