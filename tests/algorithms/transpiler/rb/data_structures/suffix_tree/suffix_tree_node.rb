# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_suffix_tree_node(children, is_end_of_string, start, end_, suffix_link)
    return SuffixTreeNode.new(children: children, is_end_of_string: is_end_of_string, start: start, end_: end_, suffix_link: suffix_link)
  end
  def empty_suffix_tree_node()
    return new_suffix_tree_node({}, false, 0 - 1, 0 - 1, 0 - 1)
  end
  def has_key(m, k)
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if key == k
        return true
      end
    end
    return false
  end
  SuffixTreeNode = Struct.new(:children, :is_end_of_string, :start, :end_, :suffix_link, keyword_init: true)
  $root = new_suffix_tree_node({"a" => 1}, false, 0 - 1, 0 - 1, 0 - 1)
  $leaf = new_suffix_tree_node({}, true, 0, 2, 0)
  $nodes = [$root, $leaf]
  $root_check = $nodes[0]
  $leaf_check = $nodes[1]
  puts((has_key($root_check.children, "a")).to_s)
  puts(($leaf_check.is_end_of_string).to_s)
  puts(($leaf_check.start).to_s)
  puts(($leaf_check.end_).to_s)
  puts(($leaf_check.suffix_link).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
