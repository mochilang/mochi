# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_suffix_tree(text)
    return SuffixTree.new(text: text)
  end
  def search(tree, pattern)
    n = tree.text.length
    m = pattern.length
    if m == 0
      return true
    end
    if m > n
      return false
    end
    i = 0
    while i <= n - m
      if tree.text[i..._add(i, m)] == pattern
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def main()
    text = "monkey banana"
    suffix_tree = new_suffix_tree(text)
    patterns = ["ana", "ban", "na", "xyz", "mon"]
    i = 0
    while i < patterns.length
      pattern = patterns[i]
      found = search(suffix_tree, pattern)
      puts(_add(_add(_add("Pattern '", pattern), "' found: "), (found).to_s))
      i = _add(i, 1)
    end
  end
  SuffixTree = Struct.new(:text, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
