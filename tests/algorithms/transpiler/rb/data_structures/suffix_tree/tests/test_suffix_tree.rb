# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def suffix_tree_new(text)
    return SuffixTree.new(text: text)
  end
  def suffix_tree_search(st, pattern)
    if pattern.length == 0
      return true
    end
    i = 0
    n = st.text.length
    m = pattern.length
    while i <= n - m
      j = 0
      found = true
      while j < m
        if st.text[_add(i, j)] != pattern[j]
          found = false
          break
        end
        j = _add(j, 1)
      end
      if found
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  SuffixTree = Struct.new(:text, keyword_init: true)
  $text = "banana"
  $st = suffix_tree_new($text)
  $patterns_exist = ["ana", "ban", "na"]
  $i = 0
  while $i < $patterns_exist.length
    puts((suffix_tree_search($st, $patterns_exist[$i])).to_s)
    $i = _add($i, 1)
  end
  $patterns_none = ["xyz", "apple", "cat"]
  $i = 0
  while $i < $patterns_none.length
    puts((suffix_tree_search($st, $patterns_none[$i])).to_s)
    $i = _add($i, 1)
  end
  puts((suffix_tree_search($st, "")).to_s)
  puts((suffix_tree_search($st, $text)).to_s)
  $substrings = ["ban", "ana", "a", "na"]
  $i = 0
  while $i < $substrings.length
    puts((suffix_tree_search($st, $substrings[$i])).to_s)
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
