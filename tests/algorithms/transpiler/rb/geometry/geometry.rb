# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_angle(deg)
    if deg < 0.0 || deg > 360.0
      panic("degrees must be between 0 and 360")
    end
    return Angle.new(degrees: deg)
  end
  def make_side(length, angle)
    if length <= 0.0
      panic("length must be positive")
    end
    return Side.new(length: length, angle: angle, next_: -1)
  end
  def ellipse_area(e)
    return $PI * e.major * e.minor
  end
  def ellipse_perimeter(e)
    return $PI * (_add(e.major, e.minor))
  end
  def circle_area(c)
    e = Ellipse.new(major: c.radius, minor: c.radius)
    area = ellipse_area(e)
    return area
  end
  def circle_perimeter(c)
    e = Ellipse.new(major: c.radius, minor: c.radius)
    per = ellipse_perimeter(e)
    return per
  end
  def circle_diameter(c)
    return c.radius * 2.0
  end
  def circle_max_parts(num_cuts)
    if num_cuts < 0.0
      panic("num_cuts must be positive")
    end
    return (_add(_add(num_cuts, 2.0), num_cuts * num_cuts)) * 0.5
  end
  def make_polygon()
    s = []
    return Polygon.new(sides: s)
  end
  def polygon_add_side(p, s)
    p["sides"] = (p.sides << (s))
  end
  def polygon_get_side(p, index)
    return p.sides[index]
  end
  def polygon_set_side(p, index, s)
    tmp = p.sides
    tmp[index] = s
    p["sides"] = tmp
  end
  def make_rectangle(short_len, long_len)
    if short_len <= 0.0 || long_len <= 0.0
      panic("length must be positive")
    end
    short = make_side(short_len, make_angle(90.0))
    long = make_side(long_len, make_angle(90.0))
    p = make_polygon()
    polygon_add_side(p, short)
    polygon_add_side(p, long)
    return Rectangle.new(short_side: short, long_side: long, poly: p)
  end
  def rectangle_perimeter(r)
    return (_add(r.short_side.length, r.long_side.length)) * 2.0
  end
  def rectangle_area(r)
    return r.short_side.length * r.long_side.length
  end
  def make_square(side_len)
    rect = make_rectangle(side_len, side_len)
    return Square.new(side: rect.short_side, rect: rect)
  end
  def square_perimeter(s)
    p = rectangle_perimeter(s.rect)
    return p
  end
  def square_area(s)
    a = rectangle_area(s.rect)
    return a
  end
  def main()
    a = make_angle(90.0)
    puts(a.degrees)
    s = make_side(5.0, a)
    puts(s.length)
    e = Ellipse.new(major: 5.0, minor: 10.0)
    puts(ellipse_area(e))
    puts(ellipse_perimeter(e))
    c = Circle.new(radius: 5.0)
    puts(circle_area(c))
    puts(circle_perimeter(c))
    puts(circle_diameter(c))
    puts(circle_max_parts(7.0))
    r = make_rectangle(5.0, 10.0)
    puts(rectangle_perimeter(r))
    puts(rectangle_area(r))
    q = make_square(5.0)
    puts(square_perimeter(q))
    puts(square_area(q))
  end
  $PI = 3.141592653589793
  Angle = Struct.new(:degrees, keyword_init: true)
  Side = Struct.new(:length, :angle, :next_, keyword_init: true)
  Ellipse = Struct.new(:major, :minor, keyword_init: true)
  Circle = Struct.new(:radius, keyword_init: true)
  Polygon = Struct.new(:sides, keyword_init: true)
  Rectangle = Struct.new(:short_side, :long_side, :poly, keyword_init: true)
  Square = Struct.new(:side, :rect, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
