# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def calculate_waitingtime(arrival_time, burst_time, no_of_processes)
    waiting_time = [].clone
    remaining_time = [].clone
    i = 0.clone
    while i < no_of_processes
      waiting_time = (waiting_time << (0)).clone
      remaining_time = (remaining_time << (burst_time[i])).clone
      i = _add(i, 1).clone
    end
    completed = 0.clone
    total_time = 0.clone
    while completed != no_of_processes
      ready_process = [].clone
      target_process = -1.clone
      j = 0.clone
      while j < no_of_processes
        if arrival_time[j] <= total_time && remaining_time[j] > 0
          ready_process = (ready_process << (j)).clone
        end
        j = _add(j, 1).clone
      end
      if ready_process.length > 0
        target_process = ready_process[0].clone
        k = 0.clone
        while k < ready_process.length
          idx = ready_process[k]
          if remaining_time[idx] < remaining_time[target_process]
            target_process = idx.clone
          end
          k = _add(k, 1).clone
        end
        total_time = _add(total_time, burst_time[target_process]).clone
        completed = _add(completed, 1).clone
        remaining_time[target_process] = 0
        waiting_time[target_process] = total_time - arrival_time[target_process] - burst_time[target_process]
      else
        total_time = _add(total_time, 1).clone
      end
    end
    return waiting_time
  end
  def calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
    turn_around_time = [].clone
    i = 0.clone
    while i < no_of_processes
      turn_around_time = (turn_around_time << (_add(burst_time[i], waiting_time[i]))).clone
      i = _add(i, 1).clone
    end
    return turn_around_time
  end
  def average(values)
    total = 0.clone
    i = 0.clone
    while i < values.length
      total = _add(total, values[i]).clone
      i = _add(i, 1).clone
    end
    return ((total).to_f) / ((values.length).to_f)
  end
  puts("[TEST CASE 01]")
  $no_of_processes = 4
  $burst_time = [2, 5, 3, 7]
  $arrival_time = [0, 0, 0, 0]
  $waiting_time = calculate_waitingtime($arrival_time, $burst_time, $no_of_processes)
  $turn_around_time = calculate_turnaroundtime($burst_time, $no_of_processes, $waiting_time)
  puts("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")
  $i = 0.clone
  while $i < $no_of_processes
    pid = _add($i, 1)
    puts(_add(_add(_add(_add(_add(_add(_add(_add(_str(pid), "\t"), _str($burst_time[$i])), "\t\t\t"), _str($arrival_time[$i])), "\t\t\t\t"), _str($waiting_time[$i])), "\t\t\t\t"), _str($turn_around_time[$i])))
    $i = _add($i, 1).clone
  end
  $avg_wait = average($waiting_time)
  $avg_turn = average($turn_around_time)
  puts(_add("\nAverage waiting time = ", _str($avg_wait)))
  puts(_add("Average turnaround time = ", _str($avg_turn)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
