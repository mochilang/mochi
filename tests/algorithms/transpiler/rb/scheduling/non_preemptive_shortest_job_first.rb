# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def calculate_waitingtime(arrival_time, burst_time, no_of_processes)
    waiting_time = []
    remaining_time = []
    i = 0
    while i < no_of_processes
      waiting_time = (waiting_time + [0])
      remaining_time = (remaining_time + [burst_time[i]])
      i = _add(i, 1)
    end
    completed = 0
    total_time = 0
    while !_eq(completed, no_of_processes)
      ready_process = []
      target_process = -1
      j = 0
      while j < no_of_processes
        if arrival_time[j] <= total_time && remaining_time[j] > 0
          ready_process = (ready_process + [j])
        end
        j = _add(j, 1)
      end
      if ready_process.length > 0
        target_process = ready_process[0]
        k = 0
        while k < ready_process.length
          idx = ready_process[k]
          if remaining_time[idx] < remaining_time[target_process]
            target_process = idx
          end
          k = _add(k, 1)
        end
        total_time = _add(total_time, burst_time[target_process])
        completed = _add(completed, 1)
        remaining_time[target_process] = 0
        waiting_time[target_process] = total_time - arrival_time[target_process] - burst_time[target_process]
      else
        total_time = _add(total_time, 1)
      end
    end
    return waiting_time
  end
  def calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
    turn_around_time = []
    i = 0
    while i < no_of_processes
      turn_around_time = (turn_around_time + [_add(burst_time[i], waiting_time[i])])
      i = _add(i, 1)
    end
    return turn_around_time
  end
  def average(values)
    total = 0
    i = 0
    while i < values.length
      total = _add(total, values[i])
      i = _add(i, 1)
    end
    return ((total).to_f) / ((values.length).to_f)
  end
  puts("[TEST CASE 01]")
  $no_of_processes = 4
  $burst_time = [2, 5, 3, 7]
  $arrival_time = [0, 0, 0, 0]
  $waiting_time = calculate_waitingtime($arrival_time, $burst_time, $no_of_processes)
  $turn_around_time = calculate_turnaroundtime($burst_time, $no_of_processes, $waiting_time)
  puts("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")
  $i = 0
  while $i < $no_of_processes
    pid = _add($i, 1)
    puts(_add(_add(_add(_add(_add(_add(_add(_add(_str(pid), "\t"), _str($burst_time[$i])), "\t\t\t"), _str($arrival_time[$i])), "\t\t\t\t"), _str($waiting_time[$i])), "\t\t\t\t"), _str($turn_around_time[$i])))
    $i = _add($i, 1)
  end
  $avg_wait = average($waiting_time)
  $avg_turn = average($turn_around_time)
  puts(_add("\nAverage waiting time = ", _str($avg_wait)))
  puts(_add("Average turnaround time = ", _str($avg_turn)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
