# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sort_jobs_by_profit(jobs)
    js = jobs.clone
    i = 0.clone
    while i < js.length
      j = 0.clone
      while j < js.length - i - 1
        a = js[j]
        b = js[_add(j, 1)]
        if a.profit < b.profit
          js[j] = b
          js[_add(j, 1)] = a
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return js
  end
  def max_deadline(jobs)
    max_d = 0.clone
    i = 0.clone
    while i < jobs.length
      job = jobs[i]
      d = job.deadline
      if d > max_d
        max_d = d.clone
      end
      i = _add(i, 1).clone
    end
    return max_d
  end
  def job_sequencing_with_deadlines(jobs)
    js = sort_jobs_by_profit(jobs).clone
    max_d = max_deadline(js)
    time_slots = [].clone
    t = 0.clone
    while t < max_d
      time_slots = (time_slots << (0 - 1)).clone
      t = _add(t, 1).clone
    end
    count = 0.clone
    max_profit = 0.clone
    i = 0.clone
    while i < js.length
      job = js[i]
      j = job.deadline - 1.clone
      while j >= 0
        if time_slots[j] == 0 - 1
          time_slots[j] = job.id
          count = _add(count, 1).clone
          max_profit = _add(max_profit, job.profit).clone
          break
        end
        j = j - 1.clone
      end
      i = _add(i, 1).clone
    end
    result = [].clone
    result = (result << (count)).clone
    result = (result << (max_profit)).clone
    return result
  end
  Job = Struct.new(:id, :deadline, :profit, keyword_init: true)
  $jobs1 = [].clone
  $jobs1 = ($jobs1 << (Job.new(id: 1, deadline: 4, profit: 20))).clone
  $jobs1 = ($jobs1 << (Job.new(id: 2, deadline: 1, profit: 10))).clone
  $jobs1 = ($jobs1 << (Job.new(id: 3, deadline: 1, profit: 40))).clone
  $jobs1 = ($jobs1 << (Job.new(id: 4, deadline: 1, profit: 30))).clone
  puts(((x = job_sequencing_with_deadlines($jobs1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $jobs2 = [].clone
  $jobs2 = ($jobs2 << (Job.new(id: 1, deadline: 2, profit: 100))).clone
  $jobs2 = ($jobs2 << (Job.new(id: 2, deadline: 1, profit: 19))).clone
  $jobs2 = ($jobs2 << (Job.new(id: 3, deadline: 2, profit: 27))).clone
  $jobs2 = ($jobs2 << (Job.new(id: 4, deadline: 1, profit: 25))).clone
  $jobs2 = ($jobs2 << (Job.new(id: 5, deadline: 1, profit: 15))).clone
  puts(((x = job_sequencing_with_deadlines($jobs2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
