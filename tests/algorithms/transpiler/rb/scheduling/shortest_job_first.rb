# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def calculate_waitingtime(arrival_time, burst_time, no_of_processes)
    remaining_time = []
    i = 0
    while i < no_of_processes
      remaining_time = (remaining_time + [burst_time[i]])
      i = _add(i, 1)
    end
    waiting_time = []
    i = 0
    while i < no_of_processes
      waiting_time = (waiting_time + [0])
      i = _add(i, 1)
    end
    complete = 0
    increment_time = 0
    minm = 1000000000
    short = 0
    check = false
    while !_eq(complete, no_of_processes)
      j = 0
      while j < no_of_processes
        if arrival_time[j] <= increment_time && remaining_time[j] > 0 && remaining_time[j] < minm
          minm = remaining_time[j]
          short = j
          check = true
        end
        j = _add(j, 1)
      end
      if !check
        increment_time = _add(increment_time, 1)
        next
      end
      remaining_time[short] = remaining_time[short] - 1
      minm = remaining_time[short]
      if _eq(minm, 0)
        minm = 1000000000
      end
      if _eq(remaining_time[short], 0)
        complete = _add(complete, 1)
        check = false
        finish_time = _add(increment_time, 1)
        finar = finish_time - arrival_time[short]
        waiting_time[short] = finar - burst_time[short]
        if waiting_time[short] < 0
          waiting_time[short] = 0
        end
      end
      increment_time = _add(increment_time, 1)
    end
    return waiting_time
  end
  def calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
    turn_around_time = []
    i = 0
    while i < no_of_processes
      turn_around_time = (turn_around_time + [_add(burst_time[i], waiting_time[i])])
      i = _add(i, 1)
    end
    return turn_around_time
  end
  def to_float(x)
    return x * 1.0
  end
  def calculate_average_times(waiting_time, turn_around_time, no_of_processes)
    total_waiting_time = 0
    total_turn_around_time = 0
    i = 0
    while i < no_of_processes
      total_waiting_time = _add(total_waiting_time, waiting_time[i])
      total_turn_around_time = _add(total_turn_around_time, turn_around_time[i])
      i = _add(i, 1)
    end
    avg_wait = (total_waiting_time).to_f / (no_of_processes).to_f
    avg_turn = (total_turn_around_time).to_f / (no_of_processes).to_f
    puts(_add("Average waiting time = ", _str(avg_wait)))
    puts(_add("Average turn around time = ", _str(avg_turn)))
  end
  puts(((x = calculate_waitingtime([1, 2, 3, 4], [3, 3, 5, 1], 4)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = calculate_waitingtime([1, 2, 3], [2, 5, 1], 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = calculate_waitingtime([2, 3], [5, 1], 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = calculate_turnaroundtime([3, 3, 5, 1], 4, [0, 3, 5, 0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = calculate_turnaroundtime([3, 3], 2, [0, 3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = calculate_turnaroundtime([8, 10, 1], 3, [1, 0, 3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  calculate_average_times([0, 3, 5, 0], [3, 6, 10, 1], 4)
  calculate_average_times([2, 3], [3, 6], 2)
  calculate_average_times([10, 4, 3], [2, 7, 6], 3)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
