# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def calculate_waiting_times(burst_times)
    quantum = 2
    rem = [].clone
    i = 0.clone
    while i < burst_times.length
      rem = (rem << (burst_times[i])).clone
      i = _add(i, 1).clone
    end
    waiting = [].clone
    i = 0.clone
    while i < burst_times.length
      waiting = (waiting << (0)).clone
      i = _add(i, 1).clone
    end
    t = 0.clone
    while true
      done = true.clone
      j = 0.clone
      while j < burst_times.length
        if rem[j] > 0
          done = false.clone
          if rem[j] > quantum
            t = _add(t, quantum).clone
            rem[j] = rem[j] - quantum
          else
            t = _add(t, rem[j]).clone
            waiting[j] = t - burst_times[j]
            rem[j] = 0
          end
        end
        j = _add(j, 1).clone
      end
      if done
        return waiting
      end
    end
    return waiting
  end
  def calculate_turn_around_times(burst_times, waiting_times)
    result = [].clone
    i = 0.clone
    while i < burst_times.length
      result = (result << (_add(burst_times[i], waiting_times[i]))).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def mean(values)
    total = 0.clone
    i = 0.clone
    while i < values.length
      total = _add(total, values[i]).clone
      i = _add(i, 1).clone
    end
    return ((total).to_f) / ((values.length).to_f)
  end
  def format_float_5(x)
    scaled = (_add(x * 100000.0, 0.5)).to_i
    int_part = scaled / 100000
    frac_part = scaled % 100000
    frac_str = _str(frac_part).clone
    while frac_str.length < 5
      frac_str = _add("0", frac_str).clone
    end
    return _add(_add(_str(int_part), "."), frac_str)
  end
  def main()
    burst_times = [3, 5, 7]
    waiting_times = calculate_waiting_times(burst_times)
    turn_around_times = calculate_turn_around_times(burst_times, waiting_times)
    puts("Process ID \tBurst Time \tWaiting Time \tTurnaround Time")
    i = 0.clone
    while i < burst_times.length
      line = _add(_add(_add(_add(_add(_add(_add("  ", _str(_add(i, 1))), "\t\t  "), _str(burst_times[i])), "\t\t  "), _str(waiting_times[i])), "\t\t  "), _str(turn_around_times[i]))
      puts(line)
      i = _add(i, 1).clone
    end
    puts("")
    puts(_add("Average waiting time = ", format_float_5(mean(waiting_times))))
    puts(_add("Average turn around time = ", format_float_5(mean(turn_around_times))))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
