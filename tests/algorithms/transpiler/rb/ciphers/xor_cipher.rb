# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def xor(a, b)
    res = 0
    bit = 1
    x = a
    y = b
    while x > 0 || y > 0
      abit = x % 2
      bbit = y % 2
      if abit != bbit
        res = _add(res, bit)
      end
      x = x / 2
      y = y / 2
      bit = bit * 2
    end
    return res
  end
  def ord(ch)
    i = 0
    while i < $ascii.length
      if $ascii[i..._add(i, 1)] == ch
        return _add(32, i)
      end
      i = _add(i, 1)
    end
    return 0
  end
  def chr(n)
    if n >= 32 && n < 127
      return $ascii[n - 32...n - 31]
    end
    return ""
  end
  def normalize_key(key)
    k = key
    if k == 0
      k = 1
    end
    k = k % 256
    if k < 0
      k = _add(k, 256)
    end
    return k
  end
  def encrypt(content, key)
    k = normalize_key(key)
    result = []
    i = 0
    while i < content.length
      c = ord(content[i..._add(i, 1)])
      e = xor(c, k)
      result = (result + [chr(e)])
      i = _add(i, 1)
    end
    return result
  end
  def encrypt_string(content, key)
    chars = encrypt(content, key)
    out = ""
        __tmp15 = chars
    if __tmp15.respond_to?(:keys) && !__tmp15.is_a?(String)
      __tmp15 = __tmp15.keys
    end
    __tmp15.each do |ch|
      out = _add(out, ch)
    end
    return out
  end
  $ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  $sample = "hallo welt"
  $enc = encrypt_string($sample, 1)
  $dec = encrypt_string($enc, 1)
  puts(((x = encrypt($sample, 1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts($enc)
  puts($dec)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
