# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = a
    y = b
    while y != 0
      temp = x % y
      x = y
      y = temp
    end
    return x
  end
  def mod_inverse(a, m)
    if gcd(a, m) != 1
      panic(_add(_add(_add(_add("mod inverse of ", (a).to_s), " and "), (m).to_s), " does not exist"))
    end
    u1 = 1
    u2 = 0
    u3 = a
    v1 = 0
    v2 = 1
    v3 = m
    while v3 != 0
      q = u3 / v3
      t1 = u1 - q * v1
      t2 = u2 - q * v2
      t3 = u3 - q * v3
      u1 = v1
      u2 = v2
      u3 = v3
      v1 = t1
      v2 = t2
      v3 = t3
    end
    res = u1 % m
    if res < 0
      return _add(res, m)
    end
    return res
  end
  def find_symbol(ch)
    i = 0
    while i < $SYMBOLS.length
      if $SYMBOLS[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def check_keys(key_a, key_b, mode)
    m = $SYMBOLS.length
    if mode == "encrypt"
      if key_a == 1
        panic("The affine cipher becomes weak when key A is set to 1. Choose different key")
      end
      if key_b == 0
        panic("The affine cipher becomes weak when key B is set to 0. Choose different key")
      end
    end
    if key_a < 0 || key_b < 0 || key_b > m - 1
      panic(_add("Key A must be greater than 0 and key B must be between 0 and ", (m - 1).to_s))
    end
    if gcd(key_a, m) != 1
      panic(_add(_add(_add(_add("Key A ", (key_a).to_s), " and the symbol set size "), (m).to_s), " are not relatively prime. Choose a different key."))
    end
  end
  def encrypt_message(key, message)
    m = $SYMBOLS.length
    key_a = key / m
    key_b = key % m
    check_keys(key_a, key_b, "encrypt")
    cipher_text = ""
    i = 0
    while i < message.length
      ch = message[i]
      index = find_symbol(ch)
      if index >= 0
        cipher_text = _add(cipher_text, $SYMBOLS[(_add(index * key_a, key_b)) % m])
      else
        cipher_text = _add(cipher_text, ch)
      end
      i = _add(i, 1)
    end
    return cipher_text
  end
  def decrypt_message(key, message)
    m = $SYMBOLS.length
    key_a = key / m
    key_b = key % m
    check_keys(key_a, key_b, "decrypt")
    inv = mod_inverse(key_a, m)
    plain_text = ""
    i = 0
    while i < message.length
      ch = message[i]
      index = find_symbol(ch)
      if index >= 0
        n = (index - key_b) * inv
        pos = n % m
        final = (pos < 0 ? _add(pos, m) : pos)
        plain_text = _add(plain_text, $SYMBOLS[final])
      else
        plain_text = _add(plain_text, ch)
      end
      i = _add(i, 1)
    end
    return plain_text
  end
  def main()
    key = 4545
    msg = "The affine cipher is a type of monoalphabetic substitution cipher."
    enc = encrypt_message(key, msg)
    puts(enc)
    puts(decrypt_message(key, enc))
  end
  $SYMBOLS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
