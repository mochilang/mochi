# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mod36(n)
    r = n % 36
    if r < 0
      r = _add(r, 36)
    end
    return r
  end
  def gcd(a, b)
    x = a
    y = b
    while y != 0
      t = y
      y = x % y
      x = t
    end
    if x < 0
      x = -x
    end
    return x
  end
  def replace_letters(letter)
    i = 0
    while i < $KEY_STRING.length
      if $KEY_STRING[i] == letter
        return i
      end
      i = _add(i, 1)
    end
    return 0
  end
  def replace_digits(num)
    idx = mod36(num)
    return $KEY_STRING[idx]
  end
  def to_upper(c)
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    i = 0
    while i < lower.length
      if c == lower[i]
        return upper[i]
      end
      i = _add(i, 1)
    end
    return c
  end
  def process_text(text, break_key)
    chars = []
    i = 0
    while i < text.length
      c = to_upper(text[i])
      j = 0
      ok = false
      while j < $KEY_STRING.length
        if $KEY_STRING[j] == c
          ok = true
          break
        end
        j = _add(j, 1)
      end
      if ok
        chars = (chars + [c])
      end
      i = _add(i, 1)
    end
    if chars.length == 0
      return ""
    end
    last = chars[chars.length - 1]
    while chars.length % break_key != 0
      chars = (chars + [last])
    end
    res = ""
    k = 0
    while k < chars.length
      res = _add(res, chars[k])
      k = _add(k, 1)
    end
    return res
  end
  def matrix_minor(m, row, col)
    res = []
    i = 0
    while i < m.length
      if i != row
        r = []
        j = 0
        while j < m[i].length
          if j != col
            r = (r + [m[i][j]])
          end
          j = _add(j, 1)
        end
        res = (res + [r])
      end
      i = _add(i, 1)
    end
    return res
  end
  def determinant(m)
    n = m.length
    if n == 1
      return m[0][0]
    end
    if n == 2
      return m[0][0] * m[1][1] - m[0][1] * m[1][0]
    end
    det = 0
    col = 0
    while col < n
      minor_mat = matrix_minor(m, 0, col)
      sign = 1
      if col % 2 == 1
        sign = -1
      end
      det = _add(det, sign * m[0][col] * determinant(minor_mat))
      col = _add(col, 1)
    end
    return det
  end
  def cofactor_matrix(m)
    n = m.length
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        minor_mat = matrix_minor(m, i, j)
        det_minor = determinant(minor_mat)
        sign = 1
        if (_add(i, j)) % 2 == 1
          sign = -1
        end
        row = (row + [sign * det_minor])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def transpose(m)
    rows = m.length
    cols = m[0].length
    res = []
    j = 0
    while j < cols
      row = []
      i = 0
      while i < rows
        row = (row + [m[i][j]])
        i = _add(i, 1)
      end
      res = (res + [row])
      j = _add(j, 1)
    end
    return res
  end
  def matrix_mod(m)
    res = []
    i = 0
    while i < m.length
      row = []
      j = 0
      while j < m[i].length
        row = (row + [mod36(m[i][j])])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def scalar_matrix_mult(s, m)
    res = []
    i = 0
    while i < m.length
      row = []
      j = 0
      while j < m[i].length
        row = (row + [mod36(s * m[i][j])])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def adjugate(m)
    cof = cofactor_matrix(m)
    n = cof.length
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [cof[j][i]])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def multiply_matrix_vector(m, v)
    n = m.length
    res = []
    i = 0
    while i < n
      sum = 0
      j = 0
      while j < n
        sum = _add(sum, m[i][j] * v[j])
        j = _add(j, 1)
      end
      res = (res + [mod36(sum)])
      i = _add(i, 1)
    end
    return res
  end
  def inverse_key(key)
    det_val = determinant(key)
    det_mod = mod36(det_val)
    det_inv = 0
    i = 0
    while i < 36
      if (det_mod * i) % 36 == 1
        det_inv = i
        break
      end
      i = _add(i, 1)
    end
    adj = adjugate(key)
    tmp = scalar_matrix_mult(det_inv, adj)
    res = matrix_mod(tmp)
    return res
  end
  def hill_encrypt(key, text)
    break_key = key.length
    processed = process_text(text, break_key)
    encrypted = ""
    i = 0
    while i < processed.length
      vec = []
      j = 0
      while j < break_key
        vec = (vec + [replace_letters(processed[_add(i, j)])])
        j = _add(j, 1)
      end
      enc_vec = multiply_matrix_vector(key, vec)
      k = 0
      while k < break_key
        encrypted = _add(encrypted, replace_digits(enc_vec[k]))
        k = _add(k, 1)
      end
      i = _add(i, break_key)
    end
    return encrypted
  end
  def hill_decrypt(key, text)
    break_key = key.length
    decrypt_key = inverse_key(key)
    processed = process_text(text, break_key)
    decrypted = ""
    i = 0
    while i < processed.length
      vec = []
      j = 0
      while j < break_key
        vec = (vec + [replace_letters(processed[_add(i, j)])])
        j = _add(j, 1)
      end
      dec_vec = multiply_matrix_vector(decrypt_key, vec)
      k = 0
      while k < break_key
        decrypted = _add(decrypted, replace_digits(dec_vec[k]))
        k = _add(k, 1)
      end
      i = _add(i, break_key)
    end
    return decrypted
  end
  $KEY_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
  $key = [[2, 5], [1, 6]]
  puts(hill_encrypt($key, "testing hill cipher"))
  puts(hill_encrypt($key, "hello"))
  puts(hill_decrypt($key, "WHXYJOLM9C6XT085LL"))
  puts(hill_decrypt($key, "85FF00"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
