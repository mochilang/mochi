# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return $NEG_ONE
  end
  def to_uppercase(s)
    result = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      idx = index_of($ASCII_LOWERCASE, ch)
      if idx == $NEG_ONE
        result = _add(result, ch)
      else
        result = _add(result, $ASCII_UPPERCASE[idx..._add(idx, 1)])
      end
      i = _add(i, 1)
    end
    return result
  end
  def gronsfeld(text, key)
    ascii_len = $ASCII_UPPERCASE.length
    key_len = key.length
    if key_len == 0
      panic("integer modulo by zero")
    end
    upper_text = to_uppercase(text)
    encrypted = ""
    i = 0
    while i < upper_text.length
      ch = upper_text[i..._add(i, 1)]
      idx = index_of($ASCII_UPPERCASE, ch)
      if idx == $NEG_ONE
        encrypted = _add(encrypted, ch)
      else
        key_idx = i % key_len
        shift = (key[key_idx..._add(key_idx, 1)]).to_i
        new_position = (_add(idx, shift)) % ascii_len
        encrypted = _add(encrypted, $ASCII_UPPERCASE[new_position..._add(new_position, 1)])
      end
      i = _add(i, 1)
    end
    return encrypted
  end
  $ASCII_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $ASCII_LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
  $NEG_ONE = 0 - 1
  puts(gronsfeld("hello", "412"))
  puts(gronsfeld("hello", "123"))
  puts(gronsfeld("", "123"))
  puts(gronsfeld("yes, ¥€$ - _!@#%?", "0"))
  puts(gronsfeld("yes, ¥€$ - _!@#%?", "01"))
  puts(gronsfeld("yes, ¥€$ - _!@#%?", "012"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
