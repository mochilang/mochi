# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand(n)
    $seed = (_add($seed * 1664525, 1013904223)) % 2147483647
    return $seed % n
  end
  def get_random_key()
    chars = []
    i = 0
    while i < $LETTERS.length
      chars = (chars + [$LETTERS[i]])
      i = _add(i, 1)
    end
    j = chars.length - 1
    while j > 0
      k = rand(_add(j, 1))
      tmp = chars[j]
      chars[j] = chars[k]
      chars[k] = tmp
      j = j - 1
    end
    res = ""
    i = 0
    while i < chars.length
      res = _add(res, chars[i])
      i = _add(i, 1)
    end
    return res
  end
  def check_valid_key(key)
    if key.length != $LETTERS.length
      return false
    end
    used = {}
    i = 0
    while i < key.length
      ch = key[i]
      if used[ch]
        return false
      end
      used[ch] = true
      i = _add(i, 1)
    end
    i = 0
    while i < $LETTERS.length
      ch = $LETTERS[i]
      if !used[ch]
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def index_in(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def char_to_upper(c)
    i = 0
    while i < $LOWERCASE.length
      if c == $LOWERCASE[i]
        return $LETTERS[i]
      end
      i = _add(i, 1)
    end
    return c
  end
  def char_to_lower(c)
    i = 0
    while i < $LETTERS.length
      if c == $LETTERS[i]
        return $LOWERCASE[i]
      end
      i = _add(i, 1)
    end
    return c
  end
  def is_upper(c)
    i = 0
    while i < $LETTERS.length
      if c == $LETTERS[i]
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def translate_message(key, message, mode)
    chars_a = $LETTERS
    chars_b = key
    if mode == "decrypt"
      tmp = chars_a
      chars_a = chars_b
      chars_b = tmp
    end
    translated = ""
    i = 0
    while i < message.length
      symbol = message[i]
      upper_symbol = char_to_upper(symbol)
      idx = index_in(chars_a, upper_symbol)
      if idx >= 0
        mapped = chars_b[idx]
        if is_upper(symbol)
          translated = _add(translated, mapped)
        else
          translated = _add(translated, char_to_lower(mapped))
        end
      else
        translated = _add(translated, symbol)
      end
      i = _add(i, 1)
    end
    return translated
  end
  def encrypt_message(key, message)
    res = translate_message(key, message, "encrypt")
    return res
  end
  def decrypt_message(key, message)
    res = translate_message(key, message, "decrypt")
    return res
  end
  $LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
  $seed = 1
  $key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
  puts(encrypt_message($key, "Harshil Darji"))
  puts(decrypt_message($key, "Ilcrism Olcvs"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
