# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def encrypt(input_string, key, alphabet)
    result = ""
    i = 0
    n = alphabet.length
    while i < input_string.length
      ch = input_string[i..._add(i, 1)]
      idx = index_of(alphabet, ch)
      if idx < 0
        result = _add(result, ch)
      else
        new_key = (_add(idx, key)) % n
        if new_key < 0
          new_key = _add(new_key, n)
        end
        result = _add(result, alphabet[new_key..._add(new_key, 1)])
      end
      i = _add(i, 1)
    end
    return result
  end
  def decrypt(input_string, key, alphabet)
    result = ""
    i = 0
    n = alphabet.length
    while i < input_string.length
      ch = input_string[i..._add(i, 1)]
      idx = index_of(alphabet, ch)
      if idx < 0
        result = _add(result, ch)
      else
        new_key = (idx - key) % n
        if new_key < 0
          new_key = _add(new_key, n)
        end
        result = _add(result, alphabet[new_key..._add(new_key, 1)])
      end
      i = _add(i, 1)
    end
    return result
  end
  def brute_force(input_string, alphabet)
    results = []
    key = 1
    n = alphabet.length
    while key <= n
      message = decrypt(input_string, key, alphabet)
      results = (results + [message])
      key = _add(key, 1)
    end
    return results
  end
  def main()
    alpha = $default_alphabet
    enc = encrypt("The quick brown fox jumps over the lazy dog", 8, alpha)
    puts(enc)
    dec = decrypt(enc, 8, alpha)
    puts(dec)
    brute = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", alpha)
    puts(brute[19])
  end
  $default_alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
