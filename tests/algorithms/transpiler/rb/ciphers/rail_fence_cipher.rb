# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def encrypt(input_string, key)
    if key <= 0
      panic("Height of grid can't be 0 or negative")
    end
    if key == 1 || input_string.length <= key
      return input_string
    end
    lowest = key - 1
    temp_grid = []
    i = 0
    while i < key
      temp_grid = (temp_grid + [[]])
      i = _add(i, 1)
    end
    position = 0
    while position < input_string.length
      num = position % (lowest * 2)
      alt = lowest * 2 - num
      if num > alt
        num = alt
      end
      row = temp_grid[num]
      row = (row + [input_string[position..._add(position, 1)]])
      temp_grid[num] = row
      position = _add(position, 1)
    end
    output = ""
    i = 0
    while i < key
      row = temp_grid[i]
      j = 0
      while j < row.length
        output = _add(output, row[j])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return output
  end
  def decrypt(input_string, key)
    if key <= 0
      panic("Height of grid can't be 0 or negative")
    end
    if key == 1
      return input_string
    end
    lowest = key - 1
    counts = []
    i = 0
    while i < key
      counts = (counts + [0])
      i = _add(i, 1)
    end
    pos = 0
    while pos < input_string.length
      num = pos % (lowest * 2)
      alt = lowest * 2 - num
      if num > alt
        num = alt
      end
      counts[num] = _add(counts[num], 1)
      pos = _add(pos, 1)
    end
    grid = []
    counter = 0
    i = 0
    while i < key
      length = counts[i]
      slice = input_string[counter..._add(counter, length)]
      row = []
      j = 0
      while j < slice.length
        row = (row + [slice[j]])
        j = _add(j, 1)
      end
      grid = (grid + [row])
      counter = _add(counter, length)
      i = _add(i, 1)
    end
    indices = []
    i = 0
    while i < key
      indices = (indices + [0])
      i = _add(i, 1)
    end
    output = ""
    pos = 0
    while pos < input_string.length
      num = pos % (lowest * 2)
      alt = lowest * 2 - num
      if num > alt
        num = alt
      end
      output = _add(output, grid[num][indices[num]])
      indices[num] = _add(indices[num], 1)
      pos = _add(pos, 1)
    end
    return output
  end
  def bruteforce(input_string)
    results = {}
    key_guess = 1
    while key_guess < input_string.length
      results[key_guess] = decrypt(input_string, key_guess)
      key_guess = _add(key_guess, 1)
    end
    return results
  end
  puts(encrypt("Hello World", 4))
  puts(decrypt("HWe olordll", 4))
  $bf = bruteforce("HWe olordll")
  puts($bf[4])
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
