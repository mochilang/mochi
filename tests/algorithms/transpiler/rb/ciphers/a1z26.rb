# Generated by Mochi transpiler v0.10.63 on 2025-08-09 23:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if _eq(s[i..._add(i, 1)], ch)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def charToNum(ch)
    letters = "abcdefghijklmnopqrstuvwxyz"
    idx = _indexOf(letters, ch)
    if idx >= 0
      return _add(idx, 1)
    end
    return 0
  end
  def numToChar(n)
    letters = "abcdefghijklmnopqrstuvwxyz"
    if n >= 1 && n <= 26
      return letters[n - 1...n]
    end
    return "?"
  end
  def encode(plain)
    res = []
    i = 0
    while i < plain.length
      ch = (plain[i..._add(i, 1)]).downcase()
      val = charToNum(ch)
      if val > 0
        res = (res + [val])
      end
      i = _add(i, 1)
    end
    return res
  end
  def decode(encoded)
    out = ""
        __tmp1 = encoded
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |n|
      out = _add(out, numToChar(n))
    end
    return out
  end
  def main()
    puts("-> ")
    text = (_input()).downcase()
    enc = encode(text)
    puts(_add("Encoded: ", ((x = enc); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts(_add("Decoded: ", decode(enc)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
