# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def charToNum(ch)
    letters = "abcdefghijklmnopqrstuvwxyz"
    idx = _indexOf(letters, ch)
    if idx >= 0
      return _add(idx, 1)
    end
    return 0
  end
  def numToChar(n)
    letters = "abcdefghijklmnopqrstuvwxyz"
    if n >= 1 && n <= 26
      return letters[n - 1...n]
    end
    return "?"
  end
  def encode(plain)
    res = []
    i = 0
    while i < plain.length
      ch = plain[i..._add(i, 1)].downcase()
      val = charToNum(ch)
      if val > 0
        res = (res + [val])
      end
      i = _add(i, 1)
    end
    return res
  end
  def decode(encoded)
    out = ""
        __tmp7 = encoded
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |n|
      out = _add(out, numToChar(n))
    end
    return out
  end
  def main()
    puts("-> ")
    text = _input().downcase()
    enc = encode(text)
    puts(_add("Encoded: ", ((x = enc); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts(_add("Decoded: ", decode(enc)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
