# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = _indexOf(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = _indexOf(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    return 0
  end
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    if n >= 97 && n < 123
      return lower[n - 97...n - 96]
    end
    return "?"
  end
  def clean_text(s)
    out = ""
    i = 0
    while i < s.length
      ch = s[i]
      if ch >= "A" && ch <= "Z"
        out = _add(out, ch)
      else
        if ch >= "a" && ch <= "z"
          out = _add(out, chr(ord(ch) - 32))
        end
      end
      i = _add(i, 1)
    end
    return out
  end
  def running_key_encrypt(key, plaintext)
    pt = clean_text(plaintext)
    k = clean_text(key)
    key_len = k.length
    res = ""
    ord_a = ord("A")
    i = 0
    while i < pt.length
      p = ord(pt[i]) - ord_a
      kv = ord(k[i % key_len]) - ord_a
      c = (_add(p, kv)) % 26
      res = _add(res, chr(_add(c, ord_a)))
      i = _add(i, 1)
    end
    return res
  end
  def running_key_decrypt(key, ciphertext)
    ct = clean_text(ciphertext)
    k = clean_text(key)
    key_len = k.length
    res = ""
    ord_a = ord("A")
    i = 0
    while i < ct.length
      c = ord(ct[i]) - ord_a
      kv = ord(k[i % key_len]) - ord_a
      p = (_add(c - kv, 26)) % 26
      res = _add(res, chr(_add(p, ord_a)))
      i = _add(i, 1)
    end
    return res
  end
  $key = "How does the duck know that? said Victor"
  $plaintext = "DEFEND THIS"
  $ciphertext = running_key_encrypt($key, $plaintext)
  puts($ciphertext)
  puts(running_key_decrypt($key, $ciphertext))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
