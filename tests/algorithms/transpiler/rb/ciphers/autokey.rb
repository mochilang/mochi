# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_lowercase(s)
    res = ""
    i = 0
    while i < s.length
      c = s[i]
      j = 0
      found = false
      while j < 26
        if c == $UPPER[j]
          res = _add(res, $LOWER[j])
          found = true
          break
        end
        j = _add(j, 1)
      end
      if !found
        res = _add(res, c)
      end
      i = _add(i, 1)
    end
    return res
  end
  def char_index(c)
    i = 0
    while i < 26
      if c == $LOWER[i]
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def index_char(i)
    return $LOWER[i]
  end
  def encrypt(plaintext, key)
    if plaintext.length == 0
      panic("plaintext is empty")
    end
    if key.length == 0
      panic("key is empty")
    end
    full_key = _add(key, plaintext)
    plaintext = to_lowercase(plaintext)
    full_key = to_lowercase(full_key)
    p_i = 0
    k_i = 0
    ciphertext = ""
    while p_i < plaintext.length
      p_char = plaintext[p_i]
      p_idx = char_index(p_char)
      if p_idx < 0
        ciphertext = _add(ciphertext, p_char)
        p_i = _add(p_i, 1)
      else
        k_char = full_key[k_i]
        k_idx = char_index(k_char)
        if k_idx < 0
          k_i = _add(k_i, 1)
        else
          c_idx = (_add(p_idx, k_idx)) % 26
          ciphertext = _add(ciphertext, index_char(c_idx))
          k_i = _add(k_i, 1)
          p_i = _add(p_i, 1)
        end
      end
    end
    return ciphertext
  end
  def decrypt(ciphertext, key)
    if ciphertext.length == 0
      panic("ciphertext is empty")
    end
    if key.length == 0
      panic("key is empty")
    end
    current_key = to_lowercase(key)
    c_i = 0
    k_i = 0
    plaintext = ""
    while c_i < ciphertext.length
      c_char = ciphertext[c_i]
      c_idx = char_index(c_char)
      if c_idx < 0
        plaintext = _add(plaintext, c_char)
      else
        k_char = current_key[k_i]
        k_idx = char_index(k_char)
        p_idx = (_add(c_idx - k_idx, 26)) % 26
        p_char = index_char(p_idx)
        plaintext = _add(plaintext, p_char)
        current_key = _add(current_key, p_char)
        k_i = _add(k_i, 1)
      end
      c_i = _add(c_i, 1)
    end
    return plaintext
  end
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  puts(encrypt("hello world", "coffee"))
  puts(decrypt("jsqqs avvwo", "coffee"))
  puts(encrypt("coffee is good as python", "TheAlgorithms"))
  puts(decrypt("vvjfpk wj ohvp su ddylsv", "TheAlgorithms"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
