# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def int_to_hex(n)
    if n == 0
      return "0"
    end
    digits = "0123456789abcdef"
    num = n
    res = ""
    while num > 0
      d = num % 16
      res = _add(digits[d], res)
      num = num / 16
    end
    return res
  end
  def rand_int()
    $seed = (_add(1103515245 * $seed, 12345)) % 2147483648
    return $seed
  end
  def mod_pow(base, exp)
    result = 1
    b = base % $PRIME
    e = exp
    while e > 0
      if e % 2 == 1
        result = (result * b) % $PRIME
      end
      b = (b * b) % $PRIME
      e = e / 2
    end
    return result
  end
  def is_valid_public_key(key)
    if key < 2 || key > $PRIME - 2
      return false
    end
    return mod_pow(key, ($PRIME - 1) / 2) == 1
  end
  def generate_private_key()
    return _add(rand_int() % ($PRIME - 2), 2)
  end
  $seed = 123456789
  $PRIME = 23
  $generator = 5
  $alice_private = generate_private_key()
  $alice_public = mod_pow($generator, $alice_private)
  $bob_private = generate_private_key()
  $bob_public = mod_pow($generator, $bob_private)
  if !is_valid_public_key($alice_public)
    panic("Invalid public key")
  end
  if !is_valid_public_key($bob_public)
    panic("Invalid public key")
  end
  $alice_shared = mod_pow($bob_public, $alice_private)
  $bob_shared = mod_pow($alice_public, $bob_private)
  puts(int_to_hex($alice_shared))
  puts(int_to_hex($bob_shared))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
