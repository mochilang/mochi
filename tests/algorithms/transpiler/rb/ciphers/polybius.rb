# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def letter_to_numbers(letter)
    i = 0
    while i < $square.length
      j = 0
      while j < $square[i].length
        if $square[i][j] == letter
          return [_add(i, 1), _add(j, 1)]
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return [0, 0]
  end
  def numbers_to_letter(index1, index2)
    return $square[index1 - 1][index2 - 1]
  end
  def char_to_int(ch)
    if ch == "1"
      return 1
    end
    if ch == "2"
      return 2
    end
    if ch == "3"
      return 3
    end
    if ch == "4"
      return 4
    end
    if ch == "5"
      return 5
    end
    return 0
  end
  def encode(message)
    message = message.downcase()
    encoded = ""
    i = 0
    while i < message.length
      ch = message[i]
      if ch == "j"
        ch = "i"
      end
      if ch != " "
        nums = letter_to_numbers(ch)
        encoded = _add(_add(encoded, (nums[0]).to_s), (nums[1]).to_s)
      else
        encoded = _add(encoded, " ")
      end
      i = _add(i, 1)
    end
    return encoded
  end
  def decode(message)
    decoded = ""
    i = 0
    while i < message.length
      if message[i] == " "
        decoded = _add(decoded, " ")
        i = _add(i, 1)
      else
        index1 = char_to_int(message[i])
        index2 = char_to_int(message[_add(i, 1)])
        letter = numbers_to_letter(index1, index2)
        decoded = _add(decoded, letter)
        i = _add(i, 2)
      end
    end
    return decoded
  end
  $square = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]]
  puts(encode("test message"))
  puts(encode("Test Message"))
  puts(decode("44154344 32154343112215"))
  puts(decode("4415434432154343112215"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
