# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = (a < 0 ? -a : a)
    y = (b < 0 ? -b : b)
    while y != 0
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def find_mod_inverse(a, m)
    if gcd(a, m) != 1
      error(_add(_add(_add(_add("mod inverse of ", (a).to_s), " and "), (m).to_s), " does not exist"))
    end
    u1 = 1
    u2 = 0
    u3 = a
    v1 = 0
    v2 = 1
    v3 = m
    while v3 != 0
      q = u3 / v3
      t1 = u1 - q * v1
      t2 = u2 - q * v2
      t3 = u3 - q * v3
      u1 = v1
      u2 = v2
      u3 = v3
      v1 = t1
      v2 = t2
      v3 = t3
    end
    res = u1 % m
    if res < 0
      res = _add(res, m)
    end
    return res
  end
  puts((find_mod_inverse(3, 11)).to_s)
  puts((find_mod_inverse(7, 26)).to_s)
  puts((find_mod_inverse(11, 26)).to_s)
  puts((find_mod_inverse(17, 43)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
