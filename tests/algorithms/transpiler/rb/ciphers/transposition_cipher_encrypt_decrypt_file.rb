# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def encrypt_message(key, message)
    result = ""
    col = 0
    while col < key
      pointer = col
      while pointer < message.length
        result = _add(result, message[pointer])
        pointer = _add(pointer, key)
      end
      col = _add(col, 1)
    end
    return result
  end
  def decrypt_message(key, message)
    msg_len = message.length
    num_cols = msg_len / key
    if msg_len % key != 0
      num_cols = _add(num_cols, 1)
    end
    num_rows = key
    num_shaded_boxes = num_cols * num_rows - msg_len
    plain = []
    i = 0
    while i < num_cols
      plain = (plain + [""])
      i = _add(i, 1)
    end
    col = 0
    row = 0
    idx = 0
    while idx < msg_len
      ch = message[idx]
      plain[col] = _add(plain[col], ch)
      col = _add(col, 1)
      if col == num_cols || (col == num_cols - 1 && row >= num_rows - num_shaded_boxes)
        col = 0
        row = _add(row, 1)
      end
      idx = _add(idx, 1)
    end
    result = ""
    i = 0
    while i < num_cols
      result = _add(result, plain[i])
      i = _add(i, 1)
    end
    return result
  end
  $key = 6
  $message = "Harshil Darji"
  $encrypted = encrypt_message($key, $message)
  puts($encrypted)
  $decrypted = decrypt_message($key, $encrypted)
  puts($decrypted)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
