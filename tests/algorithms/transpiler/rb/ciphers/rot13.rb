# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(s, c)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == c
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def dencrypt(s, n)
    out = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      idx_u = index_of($uppercase, ch)
      if idx_u >= 0
        new_idx = (_add(idx_u, n)) % 26
        out = _add(out, $uppercase[new_idx..._add(new_idx, 1)])
      else
        idx_l = index_of($lowercase, ch)
        if idx_l >= 0
          new_idx = (_add(idx_l, n)) % 26
          out = _add(out, $lowercase[new_idx..._add(new_idx, 1)])
        else
          out = _add(out, ch)
        end
      end
      i = _add(i, 1)
    end
    return out
  end
  def main()
    msg = "My secret bank account number is 173-52946 so don't tell anyone!!"
    s = dencrypt(msg, 13)
    puts(s)
    puts((dencrypt(s, 13) == msg).to_s)
  end
  $uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $lowercase = "abcdefghijklmnopqrstuvwxyz"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
