# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def remove_spaces(s)
    res = ""
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if c != " "
        res = _add(res, c)
      end
      i = _add(i, 1)
    end
    return res
  end
  def char_to_trigram(ch, alphabet)
    i = 0
    while i < alphabet.length
      if alphabet[i..._add(i, 1)] == ch
        return $triagrams[i]
      end
      i = _add(i, 1)
    end
    return ""
  end
  def trigram_to_char(tri, alphabet)
    i = 0
    while i < $triagrams.length
      if $triagrams[i] == tri
        return alphabet[i..._add(i, 1)]
      end
      i = _add(i, 1)
    end
    return ""
  end
  def encrypt_part(part, alphabet)
    one = ""
    two = ""
    three = ""
    i = 0
    while i < part.length
      tri = char_to_trigram(part[i..._add(i, 1)], alphabet)
      one = _add(one, tri[0...1])
      two = _add(two, tri[1...2])
      three = _add(three, tri[2...3])
      i = _add(i, 1)
    end
    return _add(_add(one, two), three)
  end
  def encrypt_message(message, alphabet, period)
    msg = remove_spaces(message)
    alpha = remove_spaces(alphabet)
    if alpha.length != 27
      return ""
    end
    encrypted_numeric = ""
    i = 0
    while i < msg.length
      end_ = _add(i, period)
      if end_ > msg.length
        end_ = msg.length
      end
      part = msg[i...end_]
      encrypted_numeric = _add(encrypted_numeric, encrypt_part(part, alpha))
      i = _add(i, period)
    end
    encrypted = ""
    j = 0
    while j < encrypted_numeric.length
      tri = encrypted_numeric[j..._add(j, 3)]
      encrypted = _add(encrypted, trigram_to_char(tri, alpha))
      j = _add(j, 3)
    end
    return encrypted
  end
  def decrypt_part(part, alphabet)
    converted = ""
    i = 0
    while i < part.length
      tri = char_to_trigram(part[i..._add(i, 1)], alphabet)
      converted = _add(converted, tri)
      i = _add(i, 1)
    end
    result = []
    tmp = ""
    j = 0
    while j < converted.length
      tmp = _add(tmp, converted[j..._add(j, 1)])
      if tmp.length == part.length
        result = (result + [tmp])
        tmp = ""
      end
      j = _add(j, 1)
    end
    return result
  end
  def decrypt_message(message, alphabet, period)
    msg = remove_spaces(message)
    alpha = remove_spaces(alphabet)
    if alpha.length != 27
      return ""
    end
    decrypted_numeric = []
    i = 0
    while i < msg.length
      end_ = _add(i, period)
      if end_ > msg.length
        end_ = msg.length
      end
      part = msg[i...end_]
      groups = decrypt_part(part, alpha)
      k = 0
      while k < groups[0].length
        tri = _add(_add(groups[0][k..._add(k, 1)], groups[1][k..._add(k, 1)]), groups[2][k..._add(k, 1)])
        decrypted_numeric = (decrypted_numeric + [tri])
        k = _add(k, 1)
      end
      i = _add(i, period)
    end
    decrypted = ""
    j = 0
    while j < decrypted_numeric.length
      decrypted = _add(decrypted, trigram_to_char(decrypted_numeric[j], alpha))
      j = _add(j, 1)
    end
    return decrypted
  end
  def main()
    msg = "DEFEND THE EAST WALL OF THE CASTLE."
    alphabet = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ"
    encrypted = encrypt_message(msg, alphabet, 5)
    decrypted = decrypt_message(encrypted, alphabet, 5)
    puts(_add("Encrypted: ", encrypted))
    puts(_add("Decrypted: ", decrypted))
  end
  $triagrams = ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
