# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def find_char(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def encrypt_message(key, message)
    chars_a = key
    chars_b = $LETTERS
    translated = ""
    i = 0
    while i < message.length
      symbol = message[i]
      upper_sym = symbol.upcase()
      sym_index = find_char(chars_a, upper_sym)
      if sym_index >= 0
        sub_char = chars_b[sym_index]
        if symbol == upper_sym
          translated = _add(translated, sub_char.upcase())
        else
          translated = _add(translated, sub_char.downcase())
        end
      else
        translated = _add(translated, symbol)
      end
      i = _add(i, 1)
    end
    return translated
  end
  def decrypt_message(key, message)
    chars_a = $LETTERS
    chars_b = key
    translated = ""
    i = 0
    while i < message.length
      symbol = message[i]
      upper_sym = symbol.upcase()
      sym_index = find_char(chars_a, upper_sym)
      if sym_index >= 0
        sub_char = chars_b[sym_index]
        if symbol == upper_sym
          translated = _add(translated, sub_char.upcase())
        else
          translated = _add(translated, sub_char.downcase())
        end
      else
        translated = _add(translated, symbol)
      end
      i = _add(i, 1)
    end
    return translated
  end
  def main()
    message = "Hello World"
    key = "QWERTYUIOPASDFGHJKLZXCVBNM"
    mode = "decrypt"
    translated = ""
    if mode == "encrypt"
      translated = encrypt_message(key, message)
    else
      if mode == "decrypt"
        translated = decrypt_message(key, message)
      end
    end
    puts(_add(_add(_add(_add(_add("Using the key ", key), ", the "), mode), "ed message is: "), translated))
  end
  $LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
