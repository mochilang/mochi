# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def indexOfChar(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    digits = "0123456789"
    idx = indexOfChar(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = indexOfChar(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    idx = indexOfChar(digits, ch)
    if idx >= 0
      return _add(48, idx)
    end
    if ch == " "
      return 32
    end
    if ch == "!"
      return 33
    end
    return 0
  end
  def chr(code)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    digits = "0123456789"
    if code == 32
      return " "
    end
    if code == 33
      return "!"
    end
    idx = code - 65
    if idx >= 0 && idx < upper.length
      return upper[idx]
    end
    idx = code - 97
    if idx >= 0 && idx < lower.length
      return lower[idx]
    end
    idx = code - 48
    if idx >= 0 && idx < digits.length
      return digits[idx]
    end
    return ""
  end
  def repeat(s, n)
    out = ""
    i = 0
    while i < n
      out = _add(out, s)
      i = _add(i, 1)
    end
    return out
  end
  def to_binary(n, bits)
    v = n
    out = ""
    i = 0
    while i < bits
      out = _add((v % 2).to_s, out)
      v = v / 2
      i = _add(i, 1)
    end
    return out
  end
  def binary_to_int(bits)
    n = 0
    i = 0
    while i < bits.length
      n = n * 2
      if bits[i] == "1"
        n = _add(n, 1)
      end
      i = _add(i, 1)
    end
    return n
  end
  def base32_encode(data)
    binary_data = ""
    i = 0
    while i < data.length
      binary_data = _add(binary_data, to_binary(ord(data[i]), 8))
      i = _add(i, 1)
    end
    remainder = binary_data.length % 5
    if remainder != 0
      binary_data = _add(binary_data, _repeat("0", 5 - remainder))
    end
    b32_result = ""
    j = 0
    while j < binary_data.length
      chunk = binary_data[j..._add(j, 5)]
      index = binary_to_int(chunk)
      b32_result = _add(b32_result, $B32_CHARSET[index])
      j = _add(j, 5)
    end
    rem = b32_result.length % 8
    if rem != 0
      b32_result = _add(b32_result, _repeat("=", 8 - rem))
    end
    return b32_result
  end
  def base32_decode(data)
    clean = ""
    i = 0
    while i < data.length
      ch = data[i]
      if ch != "="
        clean = _add(clean, ch)
      end
      i = _add(i, 1)
    end
    binary_chunks = ""
    i = 0
    while i < clean.length
      idx = indexOfChar($B32_CHARSET, clean[i])
      binary_chunks = _add(binary_chunks, to_binary(idx, 5))
      i = _add(i, 1)
    end
    result = ""
    j = 0
    while _add(j, 8) <= binary_chunks.length
      byte_bits = binary_chunks[j..._add(j, 8)]
      code = binary_to_int(byte_bits)
      result = _add(result, chr(code))
      j = _add(j, 8)
    end
    return result
  end
  $B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
  puts(base32_encode("Hello World!"))
  puts(base32_encode("123456"))
  puts(base32_encode("some long complex string"))
  puts(base32_decode("JBSWY3DPEBLW64TMMQQQ===="))
  puts(base32_decode("GEZDGNBVGY======"))
  puts(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
