# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_in_string(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def contains_char(s, ch)
    return index_in_string(s, ch) >= 0
  end
  def is_alpha(ch)
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    return contains_char(lower, ch) || contains_char(upper, ch)
  end
  def to_upper(s)
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    res = ""
    i = 0
    while i < s.length
      ch = s[i]
      idx = index_in_string(lower, ch)
      if idx >= 0
        res = _add(res, upper[idx])
      else
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def remove_duplicates(key)
    res = ""
    i = 0
    while i < key.length
      ch = key[i]
      if ch == " " || (is_alpha(ch) && contains_char(res, ch) == false)
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def create_cipher_map(key)
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    cleaned = remove_duplicates(to_upper(key))
    cipher = []
    i = 0
    while i < cleaned.length
      cipher = (cipher + [cleaned[i]])
      i = _add(i, 1)
    end
    offset = cleaned.length
    j = cipher.length
    while j < 26
      char = alphabet[j - offset]
      while contains_char(cleaned, char)
        offset = offset - 1
        char = alphabet[j - offset]
      end
      cipher = (cipher + [char])
      j = _add(j, 1)
    end
    return cipher
  end
  def index_in_list(lst, ch)
    i = 0
    while i < lst.length
      if lst[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def encipher(message, cipher)
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    msg = to_upper(message)
    res = ""
    i = 0
    while i < msg.length
      ch = msg[i]
      idx = index_in_string(alphabet, ch)
      if idx >= 0
        res = _add(res, cipher[idx])
      else
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def decipher(message, cipher)
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    msg = to_upper(message)
    res = ""
    i = 0
    while i < msg.length
      ch = msg[i]
      idx = index_in_list(cipher, ch)
      if idx >= 0
        res = _add(res, alphabet[idx])
      else
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  $cipher_map = create_cipher_map("Goodbye!!")
  $encoded = encipher("Hello World!!", $cipher_map)
  puts($encoded)
  puts(decipher($encoded, $cipher_map))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
