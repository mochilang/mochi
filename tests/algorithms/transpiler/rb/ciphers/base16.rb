# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def base16_encode(data)
    digits = "0123456789ABCDEF"
    res = ""
    i = 0
    while i < data.length
      b = data[i]
      if b < 0 || b > 255
        panic("byte out of range")
      end
      hi = b / 16
      lo = b % 16
      res = _add(_add(res, digits[hi..._add(hi, 1)]), digits[lo..._add(lo, 1)])
      i = _add(i, 1)
    end
    return res
  end
  def base16_decode(data)
    digits = "0123456789ABCDEF"
    if data.length % 2 != 0
      panic("Base16 encoded data is invalid: Data does not have an even number of hex digits.")
    end
    hex_value = ->(ch) {
      j = 0
      while j < 16
        if digits[j..._add(j, 1)] == ch
          return j
        end
        j = _add(j, 1)
      end
      return -1
    }
    out = []
    i = 0
    while i < data.length
      hi_char = data[i..._add(i, 1)]
      lo_char = data[_add(i, 1)..._add(i, 2)]
      hi = hex_value.call(hi_char)
      lo = hex_value.call(lo_char)
      if hi < 0 || lo < 0
        panic("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.")
      end
      out = (out + [_add(hi * 16, lo)])
      i = _add(i, 2)
    end
    return out
  end
  $example1 = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
  $example2 = [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33]
  puts(base16_encode($example1))
  puts(base16_encode($example2))
  puts(base16_encode([]))
  puts(((x = base16_decode("48656C6C6F20576F726C6421")); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = base16_decode("48454C4C4F20574F524C4421")); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = base16_decode("")); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
