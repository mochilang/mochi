# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_binary(n)
    if n == 0
      return "0"
    end
    num = n
    res = ""
    while num > 0
      bit = num % 2
      res = _add((bit).to_s, res)
      num = num / 2
    end
    return res
  end
  def zfill(s, width)
    res = s
    pad = width - s.length
    while pad > 0
      res = _add("0", res)
      pad = pad - 1
    end
    return res
  end
  def from_binary(s)
    i = 0
    result = 0
    while i < s.length
      result = result * 2
      if s[i..._add(i, 1)] == "1"
        result = _add(result, 1)
      end
      i = _add(i, 1)
    end
    return result
  end
  def repeat(ch, times)
    res = ""
    i = 0
    while i < times
      res = _add(res, ch)
      i = _add(i, 1)
    end
    return res
  end
  def char_index(s, c)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == c
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def base64_encode(data)
    bits = ""
    i = 0
    while i < data.length
      bits = _add(bits, zfill(to_binary(data[i]), 8))
      i = _add(i, 1)
    end
    pad_bits = 0
    if bits.length % 6 != 0
      pad_bits = 6 - bits.length % 6
      bits = _add(bits, _repeat("0", pad_bits))
    end
    j = 0
    encoded = ""
    while j < bits.length
      chunk = bits[j..._add(j, 6)]
      idx = from_binary(chunk)
      encoded = _add(encoded, $B64_CHARSET[idx..._add(idx, 1)])
      j = _add(j, 6)
    end
    pad = pad_bits / 2
    while pad > 0
      encoded = _add(encoded, "=")
      pad = pad - 1
    end
    return encoded
  end
  def base64_decode(s)
    padding = 0
    end_ = s.length
    while end_ > 0 && s[end_ - 1...end_] == "="
      padding = _add(padding, 1)
      end_ = end_ - 1
    end
    bits = ""
    k = 0
    while k < end_
      c = s[k..._add(k, 1)]
      idx = char_index($B64_CHARSET, c)
      bits = _add(bits, zfill(to_binary(idx), 6))
      k = _add(k, 1)
    end
    if padding > 0
      bits = bits[0...bits.length - padding * 2]
    end
    bytes = []
    m = 0
    while m < bits.length
      byte = from_binary(bits[m..._add(m, 8)])
      bytes = (bytes + [byte])
      m = _add(m, 8)
    end
    return bytes
  end
  def main()
    data = [77, 111, 99, 104, 105]
    encoded = base64_encode(data)
    puts(encoded)
    puts(JSON.pretty_generate(base64_decode(encoded)))
  end
  $B64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
