# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_upper(s)
    res = ""
    i = 0
    while i < s.length
      ch = s[i]
      j = 0
      found = false
      while j < 26
        if ch == $LOWER[j]
          res = _add(res, $UPPER[j])
          found = true
          break
        end
        j = _add(j, 1)
      end
      if found == false
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def contains(xs, x)
    i = 0
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def contains_char(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def get_value(keys, values, key)
    i = 0
    while i < keys.length
      if keys[i] == key
        return values[i]
      end
      i = _add(i, 1)
    end
    return nil
  end
  def print_mapping(keys, values)
    s = "{"
    i = 0
    while i < keys.length
      s = _add(_add(_add(_add(_add(s, "'"), keys[i]), "': '"), values[i]), "'")
      if _add(i, 1) < keys.length
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "}")
    puts(s)
  end
  def mixed_keyword(keyword, plaintext, verbose)
    alphabet = $UPPER
    keyword_u = to_upper(keyword)
    plaintext_u = to_upper(plaintext)
    unique = []
    i = 0
    while i < keyword_u.length
      ch = keyword_u[i]
      if contains_char(alphabet, ch) && unique.include?(ch) == false
        unique = (unique + [ch])
      end
      i = _add(i, 1)
    end
    num_unique = unique.length
    shifted = []
    i = 0
    while i < unique.length
      shifted = (shifted + [unique[i]])
      i = _add(i, 1)
    end
    i = 0
    while i < alphabet.length
      ch = alphabet[i]
      if unique.include?(ch) == false
        shifted = (shifted + [ch])
      end
      i = _add(i, 1)
    end
    modified = []
    k = 0
    while k < shifted.length
      row = []
      r = 0
      while r < num_unique && _add(k, r) < shifted.length
        row = (row + [shifted[_add(k, r)]])
        r = _add(r, 1)
      end
      modified = (modified + [row])
      k = _add(k, num_unique)
    end
    keys = []
    values = []
    column = 0
    letter_index = 0
    while column < num_unique
      row_idx = 0
      while row_idx < modified.length
        row = modified[row_idx]
        if row.length <= column
          break
        end
        keys = (keys + [alphabet[letter_index]])
        values = (values + [row[column]])
        letter_index = _add(letter_index, 1)
        row_idx = _add(row_idx, 1)
      end
      column = _add(column, 1)
    end
    if verbose
      print_mapping(keys, values)
    end
    result = ""
    i = 0
    while i < plaintext_u.length
      ch = plaintext_u[i]
      mapped = get_value(keys, values, ch)
      if mapped == nil
        result = _add(result, ch)
      else
        result = _add(result, mapped)
      end
      i = _add(i, 1)
    end
    return result
  end
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  puts(mixed_keyword("college", "UNIVERSITY", true))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
