# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def set_seed(s)
    $seed = s
  end
  def randint(a, b)
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return _add(($seed % (_add(b - a, 1))), a)
  end
  def ord(ch)
    i = 0
    while i < $ascii_chars.length
      if $ascii_chars[i] == ch
        return _add(32, i)
      end
      i = _add(i, 1)
    end
    return 0
  end
  def chr(code)
    if code < 32 || code > 126
      return ""
    end
    return $ascii_chars[code - 32]
  end
  def encrypt(text)
    cipher = []
    key = []
    i = 0
    while i < text.length
      p = ord(text[i])
      k = randint(1, 300)
      c = (_add(p, k)) * k
      cipher = (cipher + [c])
      key = (key + [k])
      i = _add(i, 1)
    end
    res = {}
    res["cipher"] = cipher
    res["key"] = key
    return res
  end
  def decrypt(cipher, key)
    plain = ""
    i = 0
    while i < key.length
      p = ((cipher[i] - key[i] * key[i]) / key[i])
      plain = _add(plain, chr(p))
      i = _add(i, 1)
    end
    return plain
  end
  $seed = 1
  $ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  set_seed(1)
  $res = encrypt("Hello")
  $cipher = $res["cipher"]
  $key = $res["key"]
  puts(((x = $cipher); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $key); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(decrypt($cipher, $key))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
