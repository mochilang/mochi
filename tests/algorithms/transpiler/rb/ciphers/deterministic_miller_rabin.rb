# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mod_pow(base, exp, mod)
    result = 1
    b = base % mod
    e = exp
    while e > 0
      if e % 2 == 1
        result = (result * b) % mod
      end
      b = (b * b) % mod
      e = e / 2
    end
    return result
  end
  def miller_rabin(n, allow_probable)
    if n == 2
      return true
    end
    if n < 2 || n % 2 == 0
      return false
    end
    if n > 5
      last = n % 10
      if !(last == 1 || last == 3 || last == 7 || last == 9)
        return false
      end
    end
    limit = 3825123056546413051
    if n > limit && (!allow_probable)
      panic("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.")
    end
    bounds = [2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, limit]
    primes = [2, 3, 5, 7, 11, 13, 17, 19]
    i = 0
    plist_len = primes.length
    while i < bounds.length
      if n < bounds[i]
        plist_len = _add(i, 1)
        i = bounds.length
      else
        i = _add(i, 1)
      end
    end
    d = n - 1
    s = 0
    while d % 2 == 0
      d = d / 2
      s = _add(s, 1)
    end
    j = 0
    while j < plist_len
      prime = primes[j]
      x = mod_pow(prime, d, n)
      pr = false
      if x == 1 || x == n - 1
        pr = true
      else
        r = 1
        while r < s && (!pr)
          x = (x * x) % n
          if x == n - 1
            pr = true
          end
          r = _add(r, 1)
        end
      end
      if !pr
        return false
      end
      j = _add(j, 1)
    end
    return true
  end
  puts((miller_rabin(561, false)).to_s)
  puts((miller_rabin(563, false)).to_s)
  puts((miller_rabin(838201, false)).to_s)
  puts((miller_rabin(838207, false)).to_s)
  puts((miller_rabin(17316001, false)).to_s)
  puts((miller_rabin(17316017, false)).to_s)
  puts((miller_rabin(3078386641, false)).to_s)
  puts((miller_rabin(3078386653, false)).to_s)
  puts((miller_rabin(1713045574801, false)).to_s)
  puts((miller_rabin(1713045574819, false)).to_s)
  puts((miller_rabin(2779799728307, false)).to_s)
  puts((miller_rabin(2779799728327, false)).to_s)
  puts((miller_rabin(113850023909441, false)).to_s)
  puts((miller_rabin(113850023909527, false)).to_s)
  puts((miller_rabin(1275041018848804351, false)).to_s)
  puts((miller_rabin(1275041018848804391, false)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
