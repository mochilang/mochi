# Generated by Mochi transpiler v0.10.63 on 2025-08-09 23:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_pow(base, exp)
    result = 1
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def pow_mod(base, exp, mod)
    result = 1
    b = base % mod
    e = exp
    while e > 0
      if _eq(e % 2, 1)
        result = (result * b) % mod
      end
      e = e / 2
      b = (b * b) % mod
    end
    return result
  end
  def rand_range(low, high)
    return _add((_now() % (high - low)), low)
  end
  def rabin_miller(num)
    s = num - 1
    t = 0
    while _eq(s % 2, 0)
      s = s / 2
      t = _add(t, 1)
    end
    k = 0
    while k < 5
      a = rand_range(2, num - 1)
      v = pow_mod(a, s, num)
      if !_eq(v, 1)
        i = 0
        while !_eq(v, (num - 1))
          if _eq(i, t - 1)
            return false
          end
          i = _add(i, 1)
          v = (v * v) % num
        end
      end
      k = _add(k, 1)
    end
    return true
  end
  def is_prime_low_num(num)
    if num < 2
      return false
    end
    low_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
    if low_primes.include?(num)
      return true
    end
    i = 0
    while i < low_primes.length
      p = low_primes[i]
      if _eq(num % p, 0)
        return false
      end
      i = _add(i, 1)
    end
    return rabin_miller(num)
  end
  def generate_large_prime(keysize)
    start = int_pow(2, keysize - 1)
    end_ = int_pow(2, keysize)
    while true
      num = rand_range(start, end_)
      if is_prime_low_num(num)
        return num
      end
    end
  end
  $p = generate_large_prime(16)
  puts(_add("Prime number: ", _str($p)))
  puts(_add("is_prime_low_num: ", _str(is_prime_low_num($p))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
