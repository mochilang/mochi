# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(ch)
    (0...$ALPHABET.length).each do |i|
      if $ALPHABET[i] == ch
        return i
      end
    end
    return -1
  end
  def generate_key(message, key)
    key_new = key
    i = 0
    while key_new.length < message.length
      key_new = _add(key_new, key[i])
      i = _add(i, 1)
      if i == key.length
        i = 0
      end
    end
    return key_new
  end
  def cipher_text(message, key_new)
    res = ""
    i = 0
    (0...message.length).each do |idx|
      ch = message[idx]
      if ch == " "
        res = _add(res, " ")
      else
        x = (_add(index_of(ch) - index_of(key_new[i]), 26)) % 26
        i = _add(i, 1)
        res = _add(res, $ALPHABET[x])
      end
    end
    return res
  end
  def original_text(cipher, key_new)
    res = ""
    i = 0
    (0...cipher.length).each do |idx|
      ch = cipher[idx]
      if ch == " "
        res = _add(res, " ")
      else
        x = (_add(_add(index_of(ch), index_of(key_new[i])), 26)) % 26
        i = _add(i, 1)
        res = _add(res, $ALPHABET[x])
      end
    end
    return res
  end
  $ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $message = "THE GERMAN ATTACK"
  $key = "SECRET"
  $key_new = generate_key($message, $key)
  $encrypted = cipher_text($message, $key_new)
  puts(_add("Encrypted Text = ", $encrypted))
  puts(_add("Original Text = ", original_text($encrypted, $key_new)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
