# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def to_lower_without_spaces(message, replace_j)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    res = ""
    i = 0
    while i < message.length
      ch = message[i]
      pos = index_of(upper, ch)
      if pos >= 0
        ch = lower[pos]
      end
      if ch != " "
        if replace_j && ch == "j"
          ch = "i"
        end
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def letter_to_numbers(letter)
    r = 0
    while r < $SQUARE.length
      c = 0
      while c < $SQUARE[r].length
        if $SQUARE[r][c] == letter
          return [_add(r, 1), _add(c, 1)]
        end
        c = _add(c, 1)
      end
      r = _add(r, 1)
    end
    return [0, 0]
  end
  def numbers_to_letter(row, col)
    return $SQUARE[row - 1][col - 1]
  end
  def encode(message)
    clean = to_lower_without_spaces(message, true)
    l = clean.length
    rows = []
    cols = []
    i = 0
    while i < l
      nums = letter_to_numbers(clean[i])
      rows = (rows + [nums[0]])
      cols = (cols + [nums[1]])
      i = _add(i, 1)
    end
    seq = []
    i = 0
    while i < l
      seq = (seq + [rows[i]])
      i = _add(i, 1)
    end
    i = 0
    while i < l
      seq = (seq + [cols[i]])
      i = _add(i, 1)
    end
    encoded = ""
    i = 0
    while i < l
      r = seq[2 * i]
      c = seq[_add(2 * i, 1)]
      encoded = _add(encoded, numbers_to_letter(r, c))
      i = _add(i, 1)
    end
    return encoded
  end
  def decode(message)
    clean = to_lower_without_spaces(message, false)
    l = clean.length
    first = []
    i = 0
    while i < l
      nums = letter_to_numbers(clean[i])
      first = (first + [nums[0]])
      first = (first + [nums[1]])
      i = _add(i, 1)
    end
    top = []
    bottom = []
    i = 0
    while i < l
      top = (top + [first[i]])
      bottom = (bottom + [first[_add(i, l)]])
      i = _add(i, 1)
    end
    decoded = ""
    i = 0
    while i < l
      r = top[i]
      c = bottom[i]
      decoded = _add(decoded, numbers_to_letter(r, c))
      i = _add(i, 1)
    end
    return decoded
  end
  $SQUARE = [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]]
  puts(encode("testmessage"))
  puts(encode("Test Message"))
  puts(encode("test j"))
  puts(encode("test i"))
  puts(decode("qtltbdxrxlk"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
