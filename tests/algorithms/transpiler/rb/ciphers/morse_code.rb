# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_upper_char(c)
    if c == "a"
      return "A"
    end
    if c == "b"
      return "B"
    end
    if c == "c"
      return "C"
    end
    if c == "d"
      return "D"
    end
    if c == "e"
      return "E"
    end
    if c == "f"
      return "F"
    end
    if c == "g"
      return "G"
    end
    if c == "h"
      return "H"
    end
    if c == "i"
      return "I"
    end
    if c == "j"
      return "J"
    end
    if c == "k"
      return "K"
    end
    if c == "l"
      return "L"
    end
    if c == "m"
      return "M"
    end
    if c == "n"
      return "N"
    end
    if c == "o"
      return "O"
    end
    if c == "p"
      return "P"
    end
    if c == "q"
      return "Q"
    end
    if c == "r"
      return "R"
    end
    if c == "s"
      return "S"
    end
    if c == "t"
      return "T"
    end
    if c == "u"
      return "U"
    end
    if c == "v"
      return "V"
    end
    if c == "w"
      return "W"
    end
    if c == "x"
      return "X"
    end
    if c == "y"
      return "Y"
    end
    if c == "z"
      return "Z"
    end
    return c
  end
  def to_upper(s)
    res = ""
    i = 0
    while i < s.length
      res = _add(res, to_upper_char(s[i]))
      i = _add(i, 1)
    end
    return res
  end
  def index_of(xs, target)
    i = 0
    while i < xs.length
      if xs[i] == target
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def encrypt(message)
    msg = to_upper(message)
    res = ""
    i = 0
    while i < msg.length
      c = msg[i]
      idx = index_of($CHARS, c)
      if idx >= 0
        if res != ""
          res = _add(res, " ")
        end
        res = _add(res, $CODES[idx])
      end
      i = _add(i, 1)
    end
    return res
  end
  def split_spaces(s)
    res = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i]
      if ch == " "
        if current != ""
          res = (res + [current])
          current = ""
        end
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    if current != ""
      res = (res + [current])
    end
    return res
  end
  def decrypt(message)
    parts = split_spaces(message)
    res = ""
        __tmp10 = parts
    if __tmp10.respond_to?(:keys) && !__tmp10.is_a?(String)
      __tmp10 = __tmp10.keys
    end
    __tmp10.each do |code|
      idx = index_of($CODES, code)
      if idx >= 0
        res = _add(res, $CHARS[idx])
      end
    end
    return res
  end
  $CHARS = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "]
  $CODES = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"]
  $msg = "Morse code here!"
  puts($msg)
  $enc = encrypt($msg)
  puts($enc)
  $dec = decrypt($enc)
  puts($dec)
  puts(encrypt("Sos!"))
  puts(decrypt("... --- ... -.-.--"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
