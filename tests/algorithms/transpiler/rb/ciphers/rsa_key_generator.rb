# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow2(exp)
    res = 1
    i = 0
    while i < exp
      res = res * 2
      i = _add(i, 1)
    end
    return res
  end
  def next_seed(x)
    return (_add(x * 1103515245, 12345)) % 2147483648
  end
  def rand_range(min, max)
    $seed = next_seed($seed)
    return _add(min, $seed % (max - min))
  end
  def gcd(a, b)
    x = a
    y = b
    while y != 0
      temp = x % y
      x = y
      y = temp
    end
    return x
  end
  def mod_inverse(e, phi)
    t = 0
    newt = 1
    r = phi
    newr = e
    while newr != 0
      quotient = r / newr
      tmp = newt
      newt = t - quotient * newt
      t = tmp
      tmp_r = newr
      newr = r - quotient * newr
      r = tmp_r
    end
    if r > 1
      return 0
    end
    if t < 0
      t = _add(t, phi)
    end
    return t
  end
  def is_prime(n)
    if n < 2
      return false
    end
    i = 2
    while i * i <= n
      if n % i == 0
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def generate_prime(bits)
    min = pow2(bits - 1)
    max = pow2(bits)
    p = rand_range(min, max)
    if p % 2 == 0
      p = _add(p, 1)
    end
    while !is_prime(p)
      p = _add(p, 2)
      if p >= max
        p = _add(min, 1)
      end
    end
    return p
  end
  def generate_key(bits)
    p = generate_prime(bits)
    q = generate_prime(bits)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = rand_range(2, phi)
    while gcd(e, phi) != 1
      e = _add(e, 1)
      if e >= phi
        e = 2
      end
    end
    d = mod_inverse(e, phi)
    return Keys.new(public_key: [n, e], private_key: [n, d])
  end
  $seed = 1
  Keys = Struct.new(:public_key, :private_key, keyword_init: true)
  $keys = generate_key(8)
  $pub = $keys["public_key"]
  $priv = $keys["private_key"]
  puts(_add(_add(_add(_add("Public key: (", ($pub[0]).to_s), ", "), ($pub[1]).to_s), ")"))
  puts(_add(_add(_add(_add("Private key: (", ($priv[0]).to_s), ", "), ($priv[1]).to_s), ")"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
