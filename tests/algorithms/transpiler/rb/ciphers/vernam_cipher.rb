# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def indexOf(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    idx = _indexOf(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    return 0
  end
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    return "?"
  end
  def vernam_encrypt(plaintext, key)
    ciphertext = ""
    i = 0
    while i < plaintext.length
      p = ord(plaintext[i..._add(i, 1)]) - 65
      k = ord(key[i % key.length..._add(i % key.length, 1)]) - 65
      ct = _add(p, k)
      while ct > 25
        ct = ct - 26
      end
      ciphertext = _add(ciphertext, chr(_add(ct, 65)))
      i = _add(i, 1)
    end
    return ciphertext
  end
  def vernam_decrypt(ciphertext, key)
    decrypted = ""
    i = 0
    while i < ciphertext.length
      c = ord(ciphertext[i..._add(i, 1)])
      k = ord(key[i % key.length..._add(i % key.length, 1)])
      val = c - k
      while val < 0
        val = _add(val, 26)
      end
      decrypted = _add(decrypted, chr(_add(val, 65)))
      i = _add(i, 1)
    end
    return decrypted
  end
  $plaintext = "HELLO"
  $key = "KEY"
  $encrypted = vernam_encrypt($plaintext, $key)
  $decrypted = vernam_decrypt($encrypted, $key)
  puts(_add("Plaintext: ", $plaintext))
  puts(_add("Encrypted: ", $encrypted))
  puts(_add("Decrypted: ", $decrypted))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
