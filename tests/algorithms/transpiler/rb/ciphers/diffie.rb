# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mod_pow(base, exp, mod)
    result = 1
    b = base % mod
    e = exp
    while e > 0
      if e % 2 == 1
        result = (result * b) % mod
      end
      e = e / 2
      b = (b * b) % mod
    end
    return result
  end
  def contains(xs, val)
    i = 0
    while i < xs.length
      if xs[i] == val
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def find_primitive(modulus)
    r = 1
    while r < modulus
      li = []
      x = 0
      valid = true
      while x < modulus - 1 && valid
        value = mod_pow(r, x, modulus)
        if li.include?(value)
          valid = false
        else
          li = (li + [value])
          x = _add(x, 1)
        end
      end
      if valid
        return r
      end
      r = _add(r, 1)
    end
    return -1
  end
  puts(find_primitive(7))
  puts(find_primitive(11))
  puts(find_primitive(8))
  $prime = 23
  $primitive_root = find_primitive($prime)
  if $primitive_root == (0 - 1)
    puts("Cannot find the primitive for the value: -1")
  else
    $a_private = 6
    $b_private = 15
    $a_public = mod_pow($primitive_root, $a_private, $prime)
    $b_public = mod_pow($primitive_root, $b_private, $prime)
    $a_secret = mod_pow($b_public, $a_private, $prime)
    $b_secret = mod_pow($a_public, $b_private, $prime)
    puts(_add("The key value generated by A is: ", ($a_secret).to_s))
    puts(_add("The key value generated by B is: ", ($b_secret).to_s))
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
