# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_upper(s)
    res = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      j = 0
      replaced = false
      while j < $LOWER.length
        if $LOWER[j..._add(j, 1)] == ch
          res = _add(res, $UPPER[j..._add(j, 1)])
          replaced = true
          break
        end
        j = _add(j, 1)
      end
      if !replaced
        res = _add(res, ch)
      end
      i = _add(i, 1)
    end
    return res
  end
  def char_index(c)
    i = 0
    while i < $UPPER.length
      if $UPPER[i..._add(i, 1)] == c
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def rotate_right(s, k)
    n = s.length
    shift = k % n
    return _add(s[n - shift...n], s[0...n - shift])
  end
  def table_for(c)
    idx = char_index(c)
    shift = idx / 2
    row1 = rotate_right($BASE_BOTTOM, shift)
    pair = [$BASE_TOP, row1]
    return pair
  end
  def generate_table(key)
    up = to_upper(key)
    i = 0
    result = []
    while i < up.length
      ch = up[i..._add(i, 1)]
      pair = table_for(ch)
      result = (result + [pair])
      i = _add(i, 1)
    end
    return result
  end
  def str_index(s, ch)
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        return i
      end
      i = _add(i, 1)
    end
    return 0 - 1
  end
  def get_position(table, ch)
    row = 0
    if str_index(table[0], ch) == 0 - 1
      row = 1
    end
    col = str_index(table[row], ch)
    return [row, col]
  end
  def get_opponent(table, ch)
    pos = get_position(table, ch)
    row = pos[0]
    col = pos[1]
    if col == 0 - 1
      return ch
    end
    if row == 1
      return table[0][col..._add(col, 1)]
    end
    return table[1][col..._add(col, 1)]
  end
  def encrypt(key, words)
    table = generate_table(key)
    up_words = to_upper(words)
    cipher = ""
    count = 0
    i = 0
    while i < up_words.length
      ch = up_words[i..._add(i, 1)]
      cipher = _add(cipher, get_opponent(table[count], ch))
      count = (_add(count, 1)) % table.length
      i = _add(i, 1)
    end
    return cipher
  end
  def decrypt(key, words)
    res = encrypt(key, words)
    return res
  end
  def main()
    puts(encrypt("marvin", "jessica"))
    puts(decrypt("marvin", "QRACRWU"))
  end
  $UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LOWER = "abcdefghijklmnopqrstuvwxyz"
  $BASE_TOP = "ABCDEFGHIJKLM"
  $BASE_BOTTOM = "NOPQRSTUVWXYZ"
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
