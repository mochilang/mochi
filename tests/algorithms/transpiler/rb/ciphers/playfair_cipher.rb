# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(xs, x)
    i = 0
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def index_of(xs, x)
    i = 0
    while i < xs.length
      if xs[i] == x
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def prepare_input(dirty)
    letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    upper_dirty = dirty.upcase()
    filtered = ""
    i = 0
    while i < upper_dirty.length
      c = upper_dirty[i..._add(i, 1)]
      if letters.include?(c)
        filtered = _add(filtered, c)
      end
      i = _add(i, 1)
    end
    if filtered.length < 2
      return filtered
    end
    clean = ""
    i = 0
    while i < filtered.length - 1
      c1 = filtered[i..._add(i, 1)]
      c2 = filtered[_add(i, 1)..._add(i, 2)]
      clean = _add(clean, c1)
      if c1 == c2
        clean = _add(clean, "X")
      end
      i = _add(i, 1)
    end
    clean = _add(clean, filtered[filtered.length - 1...filtered.length])
    if clean.length % 2 == 1
      clean = _add(clean, "X")
    end
    return clean
  end
  def generate_table(key)
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    table = []
    upper_key = key.upcase()
    i = 0
    while i < upper_key.length
      c = upper_key[i..._add(i, 1)]
      if alphabet.include?(c)
        if !(table.include?(c))
          table = (table + [c])
        end
      end
      i = _add(i, 1)
    end
    i = 0
    while i < alphabet.length
      c = alphabet[i..._add(i, 1)]
      if !(table.include?(c))
        table = (table + [c])
      end
      i = _add(i, 1)
    end
    return table
  end
  def encode(plaintext, key)
    table = generate_table(key)
    text = prepare_input(plaintext)
    cipher = ""
    i = 0
    while i < text.length
      c1 = text[i..._add(i, 1)]
      c2 = text[_add(i, 1)..._add(i, 2)]
      idx1 = index_of(table, c1)
      idx2 = index_of(table, c2)
      row1 = idx1 / 5
      col1 = idx1 % 5
      row2 = idx2 / 5
      col2 = idx2 % 5
      if row1 == row2
        cipher = _add(cipher, table[_add(row1 * 5, (_add(col1, 1)) % 5)])
        cipher = _add(cipher, table[_add(row2 * 5, (_add(col2, 1)) % 5)])
      else
        if col1 == col2
          cipher = _add(cipher, table[_add(((_add(row1, 1)) % 5) * 5, col1)])
          cipher = _add(cipher, table[_add(((_add(row2, 1)) % 5) * 5, col2)])
        else
          cipher = _add(cipher, table[_add(row1 * 5, col2)])
          cipher = _add(cipher, table[_add(row2 * 5, col1)])
        end
      end
      i = _add(i, 2)
    end
    return cipher
  end
  def decode(cipher, key)
    table = generate_table(key)
    plain = ""
    i = 0
    while i < cipher.length
      c1 = cipher[i..._add(i, 1)]
      c2 = cipher[_add(i, 1)..._add(i, 2)]
      idx1 = index_of(table, c1)
      idx2 = index_of(table, c2)
      row1 = idx1 / 5
      col1 = idx1 % 5
      row2 = idx2 / 5
      col2 = idx2 % 5
      if row1 == row2
        plain = _add(plain, table[_add(row1 * 5, (_add(col1, 4)) % 5)])
        plain = _add(plain, table[_add(row2 * 5, (_add(col2, 4)) % 5)])
      else
        if col1 == col2
          plain = _add(plain, table[_add(((_add(row1, 4)) % 5) * 5, col1)])
          plain = _add(plain, table[_add(((_add(row2, 4)) % 5) * 5, col2)])
        else
          plain = _add(plain, table[_add(row1 * 5, col2)])
          plain = _add(plain, table[_add(row2 * 5, col1)])
        end
      end
      i = _add(i, 2)
    end
    return plain
  end
  def main()
    puts((["Encoded:", encode("BYE AND THANKS", "GREETING")]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
    puts((["Decoded:", decode("CXRBANRLBALQ", "GREETING")]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
