# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def default_alphabet()
    return ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  end
  def default_frequencies()
    return {"a" => 0.08497, "b" => 0.01492, "c" => 0.02202, "d" => 0.04253, "e" => 0.11162, "f" => 0.02228, "g" => 0.02015, "h" => 0.06094, "i" => 0.07546, "j" => 0.00153, "k" => 0.01292, "l" => 0.04025, "m" => 0.02406, "n" => 0.06749, "o" => 0.07507, "p" => 0.01929, "q" => 0.00095, "r" => 0.07587, "s" => 0.06327, "t" => 0.09356, "u" => 0.02758, "v" => 0.00978, "w" => 0.0256, "x" => 0.0015, "y" => 0.01994, "z" => 0.00077}
  end
  def index_of(xs, ch)
    i = 0
    while i < xs.length
      if xs[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def count_char(s, ch)
    count = 0
    i = 0
    while i < s.length
      if s[i..._add(i, 1)] == ch
        count = _add(count, 1)
      end
      i = _add(i, 1)
    end
    return count
  end
  def decrypt_caesar_with_chi_squared(ciphertext, cipher_alphabet, frequencies_dict, case_sensitive)
    alphabet_letters = cipher_alphabet
    if alphabet_letters.length == 0
      alphabet_letters = default_alphabet()
    end
    frequencies = frequencies_dict
    if frequencies.length == 0
      frequencies = default_frequencies()
    end
    if !case_sensitive
      ciphertext = ciphertext.downcase()
    end
    best_shift = 0
    best_chi = 0.0
    best_text = ""
    shift = 0
    while shift < alphabet_letters.length
      decrypted = ""
      i = 0
      while i < ciphertext.length
        ch = ciphertext[i..._add(i, 1)]
        idx = index_of(alphabet_letters, ch.downcase())
        if idx >= 0
          m = alphabet_letters.length
          new_idx = (idx - shift) % m
          if new_idx < 0
            new_idx = _add(new_idx, m)
          end
          new_char = alphabet_letters[new_idx]
          if case_sensitive && ch != ch.downcase()
            decrypted = _add(decrypted, new_char.upcase())
          else
            decrypted = _add(decrypted, new_char)
          end
        else
          decrypted = _add(decrypted, ch)
        end
        i = _add(i, 1)
      end
      chi = 0.0
      lowered = (case_sensitive ? decrypted.downcase() : decrypted)
      j = 0
      while j < alphabet_letters.length
        letter = alphabet_letters[j]
        occ = count_char(lowered, letter)
        if occ > 0
          occf = (occ).to_f
          expected = frequencies[letter] * occf
          diff = occf - expected
          chi = _add(chi, ((diff * diff) / expected) * occf)
        end
        j = _add(j, 1)
      end
      if shift == 0 || chi < best_chi
        best_shift = shift
        best_chi = chi
        best_text = decrypted
      end
      shift = _add(shift, 1)
    end
    return Result.new(shift: best_shift, chi: best_chi, decoded: best_text)
  end
  Result = Struct.new(:shift, :chi, :decoded, keyword_init: true)
  $r1 = decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", [], {}, false)
  puts(_add(_add(_add(_add(($r1["shift"]).to_s, ", "), ($r1["chi"]).to_s), ", "), $r1["decoded"]))
  $r2 = decrypt_caesar_with_chi_squared("crybd cdbsxq", [], {}, false)
  puts(_add(_add(_add(_add(($r2["shift"]).to_s, ", "), ($r2["chi"]).to_s), ", "), $r2["decoded"]))
  $r3 = decrypt_caesar_with_chi_squared("Crybd Cdbsxq", [], {}, true)
  puts(_add(_add(_add(_add(($r3["shift"]).to_s, ", "), ($r3["chi"]).to_s), ", "), $r3["decoded"]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
