# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_decode_map()
    m = {}
        __tmp8 = $encode_map
    if __tmp8.respond_to?(:keys) && !__tmp8.is_a?(String)
      __tmp8 = __tmp8.keys
    end
    __tmp8.each do |k|
      m[$encode_map[k]] = k
    end
    return m
  end
  def split_spaces(s)
    parts = []
    current = ""
    i = 0
    while i < s.length
      ch = s[i..._add(i, 1)]
      if ch == " "
        parts = (parts + [current])
        current = ""
      else
        current = _add(current, ch)
      end
      i = _add(i, 1)
    end
    parts = (parts + [current])
    return parts
  end
  def encode(word)
    w = word.downcase()
    encoded = ""
    i = 0
    while i < w.length
      ch = w[i..._add(i, 1)]
      if $encode_map.include?(ch)
        encoded = _add(encoded, $encode_map[ch])
      else
        panic("encode() accepts only letters of the alphabet and spaces")
      end
      i = _add(i, 1)
    end
    return encoded
  end
  def decode(coded)
    i = 0
    while i < coded.length
      ch = coded[i..._add(i, 1)]
      if ch != "A" && ch != "B" && ch != " "
        panic("decode() accepts only 'A', 'B' and spaces")
      end
      i = _add(i, 1)
    end
    words = split_spaces(coded)
    decoded = ""
    w = 0
    while w < words.length
      word = words[w]
      j = 0
      while j < word.length
        segment = word[j..._add(j, 5)]
        decoded = _add(decoded, $decode_map[segment])
        j = _add(j, 5)
      end
      if w < words.length - 1
        decoded = _add(decoded, " ")
      end
      w = _add(w, 1)
    end
    return decoded
  end
  $encode_map = {"a" => "AAAAA", "b" => "AAAAB", "c" => "AAABA", "d" => "AAABB", "e" => "AABAA", "f" => "AABAB", "g" => "AABBA", "h" => "AABBB", "i" => "ABAAA", "j" => "BBBAA", "k" => "ABAAB", "l" => "ABABA", "m" => "ABABB", "n" => "ABBAA", "o" => "ABBAB", "p" => "ABBBA", "q" => "ABBBB", "r" => "BAAAA", "s" => "BAAAB", "t" => "BAABA", "u" => "BAABB", "v" => "BBBAB", "w" => "BABAA", "x" => "BABAB", "y" => "BABBA", "z" => "BABBB", " " => " "}
  $decode_map = make_decode_map()
  puts(encode("hello"))
  puts(encode("hello world"))
  puts(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))
  puts(decode("AABBBAABAAABABAABABAABBAB"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
