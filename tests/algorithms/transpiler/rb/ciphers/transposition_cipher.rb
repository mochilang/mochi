# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def join_strings(xs)
    res = ""
    i = 0
    while i < xs.length
      res = _add(res, xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def encrypt_message(key, message)
    result = ""
    col = 0
    while col < key
      pointer = col
      while pointer < message.length
        result = _add(result, message[pointer..._add(pointer, 1)])
        pointer = _add(pointer, key)
      end
      col = _add(col, 1)
    end
    return result
  end
  def decrypt_message(key, message)
    num_cols = (_add(message.length, key) - 1) / key
    num_rows = key
    num_shaded_boxes = (num_cols * num_rows) - message.length
    plain_text = []
    i = 0
    while i < num_cols
      plain_text = (plain_text + [""])
      i = _add(i, 1)
    end
    col = 0
    row = 0
    index = 0
    while index < message.length
      plain_text[col] = _add(plain_text[col], message[index..._add(index, 1)])
      col = _add(col, 1)
      if col == num_cols || (col == num_cols - 1 && row >= num_rows - num_shaded_boxes)
        col = 0
        row = _add(row, 1)
      end
      index = _add(index, 1)
    end
    return join_strings(plain_text)
  end
  def main()
    puts("Enter message: ")
    message = _input()
    max_key = message.length - 1
    puts(_add(_add("Enter key [2-", (max_key).to_s), "]: "))
    key = (_input()).to_i
    puts("Encryption/Decryption [e/d]: ")
    mode = _input()
    text = ""
    first = mode[0...1]
    if first == "e" || first == "E"
      text = encrypt_message(key, message)
    else
      if first == "d" || first == "D"
        text = decrypt_message(key, message)
      end
    end
    puts(_add(_add("Output:\n", text), "|"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
