# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def find_index(s, ch)
    i = 0
    while i < s.length
      if s[i] == ch
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def to_upper_char(ch)
    idx = find_index($LETTERS_LOWER, ch)
    if idx >= 0
      return $LETTERS[idx]
    end
    return ch
  end
  def to_lower_char(ch)
    idx = find_index($LETTERS, ch)
    if idx >= 0
      return $LETTERS_LOWER[idx]
    end
    return ch
  end
  def is_upper(ch)
    return find_index($LETTERS, ch) >= 0
  end
  def to_upper_string(s)
    res = ""
    i = 0
    while i < s.length
      res = _add(res, to_upper_char(s[i]))
      i = _add(i, 1)
    end
    return res
  end
  $LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  $LETTERS_LOWER = "abcdefghijklmnopqrstuvwxyz"
  $key = "HDarji"
  $message = "This is Harshil Darji from Dharmaj."
  $key_up = to_upper_string($key)
  $encrypted = ""
  $key_index = 0
  $i = 0
  while $i < $message.length
    symbol = $message[$i]
    upper_symbol = to_upper_char(symbol)
    num = find_index($LETTERS, upper_symbol)
    if num >= 0
      num = _add(num, find_index($LETTERS, $key_up[$key_index]))
      num = num % $LETTERS.length
      if is_upper(symbol)
        $encrypted = _add($encrypted, $LETTERS[num])
      else
        $encrypted = _add($encrypted, to_lower_char($LETTERS[num]))
      end
      $key_index = _add($key_index, 1)
      if $key_index == $key_up.length
        $key_index = 0
      end
    else
      $encrypted = _add($encrypted, symbol)
    end
    $i = _add($i, 1)
  end
  puts($encrypted)
  $decrypted = ""
  $key_index = 0
  $i = 0
  while $i < $encrypted.length
    symbol = $encrypted[$i]
    upper_symbol = to_upper_char(symbol)
    num = find_index($LETTERS, upper_symbol)
    if num >= 0
      num = num - find_index($LETTERS, $key_up[$key_index])
      num = num % $LETTERS.length
      if is_upper(symbol)
        $decrypted = _add($decrypted, $LETTERS[num])
      else
        $decrypted = _add($decrypted, to_lower_char($LETTERS[num]))
      end
      $key_index = _add($key_index, 1)
      if $key_index == $key_up.length
        $key_index = 0
      end
    else
      $decrypted = _add($decrypted, symbol)
    end
    $i = _add($i, 1)
  end
  puts($decrypted)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
