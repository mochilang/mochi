# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand(max)
    $seed = (_add($seed * 1103515245, 12345)) % 2147483647
    return $seed % max
  end
  def generate_valid_block_size(message_length)
    factors = []
    i = 2
    while i <= message_length
      if message_length % i == 0
        factors = (factors + [i])
      end
      i = _add(i, 1)
    end
    idx = rand(factors.length)
    return factors[idx]
  end
  def generate_permutation_key(block_size)
    digits = []
    i = 0
    while i < block_size
      digits = (digits + [i])
      i = _add(i, 1)
    end
    j = block_size - 1
    while j > 0
      k = rand(_add(j, 1))
      temp = digits[j]
      digits[j] = digits[k]
      digits[k] = temp
      j = j - 1
    end
    return digits
  end
  def encrypt(message, key, block_size)
    encrypted = ""
    i = 0
    while i < message.length
      block = message[i..._add(i, block_size)]
      j = 0
      while j < block_size
        encrypted = _add(encrypted, block[key[j]..._add(key[j], 1)])
        j = _add(j, 1)
      end
      i = _add(i, block_size)
    end
    return encrypted
  end
  def repeat_string(times)
    res = []
    i = 0
    while i < times
      res = (res + [""])
      i = _add(i, 1)
    end
    return res
  end
  def decrypt(encrypted, key)
    klen = key.length
    decrypted = ""
    i = 0
    while i < encrypted.length
      block = encrypted[i..._add(i, klen)]
      original = repeat_string(klen)
      j = 0
      while j < klen
        original[key[j]] = block[j..._add(j, 1)]
        j = _add(j, 1)
      end
      j = 0
      while j < klen
        decrypted = _add(decrypted, original[j])
        j = _add(j, 1)
      end
      i = _add(i, klen)
    end
    return decrypted
  end
  $seed = 1
  $message = "HELLO WORLD"
  $block_size = generate_valid_block_size($message.length)
  $key = generate_permutation_key($block_size)
  $encrypted = encrypt($message, $key, $block_size)
  $decrypted = decrypt($encrypted, $key)
  puts(_add("Block size: ", ($block_size).to_s))
  puts(_add("Key: ", ((x = $key); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
  puts(_add("Encrypted: ", $encrypted))
  puts(_add("Decrypted: ", $decrypted))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
