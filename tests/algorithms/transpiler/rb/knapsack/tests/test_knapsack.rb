# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def knapsack(capacity, weights, values, counter)
    if _eq(counter, 0) || _eq(capacity, 0)
      return 0
    end
    if (__tmp1 = weights; __tmp1.is_a?(Hash) ? __tmp1[counter - 1] : _idx(__tmp1, counter - 1)) > capacity
      return knapsack(capacity, weights, values, counter - 1)
    end
    left_capacity = capacity - (__tmp2 = weights; __tmp2.is_a?(Hash) ? __tmp2[counter - 1] : _idx(__tmp2, counter - 1))
    include_val = _add((__tmp3 = values; __tmp3.is_a?(Hash) ? __tmp3[counter - 1] : _idx(__tmp3, counter - 1)), knapsack(left_capacity, weights, values, counter - 1))
    exclude_val = knapsack(capacity, weights, values, counter - 1)
    if include_val > exclude_val
      return include_val
    end
    return exclude_val
  end
  def test_base_case()
    cap = 0
    val = [0]
    w = [0]
    c = _len(val)
    if !_eq(knapsack(cap, w, val, c), 0)
      return false
    end
    val2 = [60]
    w2 = [10]
    c2 = _len(val2)
    return _eq(knapsack(cap, w2, val2, c2), 0)
  end
  def test_easy_case()
    cap = 3
    val = [1, 2, 3]
    w = [3, 2, 1]
    c = _len(val)
    return _eq(knapsack(cap, w, val, c), 5)
  end
  def test_knapsack()
    cap = 50
    val = [60, 100, 120]
    w = [10, 20, 30]
    c = _len(val)
    return _eq(knapsack(cap, w, val, c), 220)
  end
  puts((test_base_case() ? 'true' : 'false'))
  puts((test_easy_case() ? 'true' : 'false'))
  puts((test_knapsack() ? 'true' : 'false'))
  puts((true ? 'true' : 'false'))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
