# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def knapsack(capacity, weights, values, counter)
    if counter == 0 || capacity == 0
      return 0
    end
    if weights[counter - 1] > capacity
      return knapsack(capacity, weights, values, counter - 1)
    end
    left_capacity = capacity - weights[counter - 1]
    include_val = _add(values[counter - 1], knapsack(left_capacity, weights, values, counter - 1))
    exclude_val = knapsack(capacity, weights, values, counter - 1)
    if include_val > exclude_val
      return include_val
    end
    return exclude_val
  end
  def test_base_case()
    cap = 0
    val = [0]
    w = [0]
    c = val.length
    if knapsack(cap, w, val, c) != 0
      return false
    end
    val2 = [60]
    w2 = [10]
    c2 = val2.length
    return knapsack(cap, w2, val2, c2) == 0
  end
  def test_easy_case()
    cap = 3
    val = [1, 2, 3]
    w = [3, 2, 1]
    c = val.length
    return knapsack(cap, w, val, c) == 5
  end
  def test_knapsack()
    cap = 50
    val = [60, 100, 120]
    w = [10, 20, 30]
    c = val.length
    return knapsack(cap, w, val, c) == 220
  end
  puts((test_base_case() ? 'true' : 'false'))
  puts((test_easy_case() ? 'true' : 'false'))
  puts((test_knapsack() ? 'true' : 'false'))
  puts((true ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
