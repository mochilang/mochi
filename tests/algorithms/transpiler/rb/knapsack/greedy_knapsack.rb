# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def calc_profit(profit, weight, max_weight)
    if profit.length != weight.length
      panic("The length of profit and weight must be same.")
    end
    if max_weight <= 0
      panic("max_weight must greater than zero.")
    end
    i = 0.clone
    while i < profit.length
      if profit[i] < 0
        panic("Profit can not be negative.")
      end
      if weight[i] < 0
        panic("Weight can not be negative.")
      end
      i = _add(i, 1).clone
    end
    n = profit.length
    used = [].clone
    j = 0.clone
    while j < n
      used = (used << (false)).clone
      j = _add(j, 1).clone
    end
    limit = 0.clone
    gain = 0.0.clone
    count = 0.clone
    while limit < max_weight && count < n
      maxRatio = -1.0.clone
      maxIndex = -1.clone
      k = 0.clone
      while k < n
        if !used[k]
          ratio = ((profit[k]).to_f) / ((weight[k]).to_f)
          if ratio > maxRatio
            maxRatio = ratio.clone
            maxIndex = k.clone
          end
        end
        k = _add(k, 1).clone
      end
      if maxIndex < 0
        break
      end
      used[maxIndex] = true
      if max_weight - limit >= weight[maxIndex]
        limit = _add(limit, weight[maxIndex]).clone
        gain = _add(gain, ((profit[maxIndex]).to_f)).clone
      else
        gain = _add(gain, (((max_weight - limit)).to_f / ((weight[maxIndex]).to_f)) * ((profit[maxIndex]).to_f)).clone
        break
      end
      count = _add(count, 1).clone
    end
    return gain
  end
  def main()
    puts(calc_profit([1, 2, 3], [3, 4, 5], 15))
    puts(calc_profit([10, 9, 8], [3, 4, 5], 25))
    puts(calc_profit([10, 9, 8], [3, 4, 5], 5))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
