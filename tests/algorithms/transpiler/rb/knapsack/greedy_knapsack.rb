# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def calc_profit(profit, weight, max_weight)
    if !_eq(_len(profit), _len(weight))
      panic("The length of profit and weight must be same.")
    end
    if max_weight <= 0
      panic("max_weight must greater than zero.")
    end
    i = 0
    while i < _len(profit)
      if (__tmp1 = profit; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) < 0
        panic("Profit can not be negative.")
      end
      if (__tmp2 = weight; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)) < 0
        panic("Weight can not be negative.")
      end
      i = _add(i, 1)
    end
    n = _len(profit)
    used = []
    j = 0
    while j < n
      used = _append(used, false)
      j = _add(j, 1)
    end
    limit = 0
    gain = 0.0
    count = 0
    while limit < max_weight && count < n
      maxRatio = -1.0
      maxIndex = -1
      k = 0
      while k < n
        if !(__tmp3 = used; __tmp3.is_a?(Hash) ? __tmp3[k] : _idx(__tmp3, k))
          ratio = (((__tmp4 = profit; __tmp4.is_a?(Hash) ? __tmp4[k] : _idx(__tmp4, k))).to_f) / (((__tmp5 = weight; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k))).to_f)
          if ratio > maxRatio
            maxRatio = ratio
            maxIndex = k
          end
        end
        k = _add(k, 1)
      end
      if maxIndex < 0
        break
      end
      used[maxIndex] = true
      if max_weight - limit >= (__tmp6 = weight; __tmp6.is_a?(Hash) ? __tmp6[maxIndex] : _idx(__tmp6, maxIndex))
        limit = _add(limit, (__tmp7 = weight; __tmp7.is_a?(Hash) ? __tmp7[maxIndex] : _idx(__tmp7, maxIndex)))
        gain = _add(gain, (((__tmp8 = profit; __tmp8.is_a?(Hash) ? __tmp8[maxIndex] : _idx(__tmp8, maxIndex))).to_f))
      else
        gain = _add(gain, (((max_weight - limit)).to_f / (((__tmp9 = weight; __tmp9.is_a?(Hash) ? __tmp9[maxIndex] : _idx(__tmp9, maxIndex))).to_f)) * (((__tmp10 = profit; __tmp10.is_a?(Hash) ? __tmp10[maxIndex] : _idx(__tmp10, maxIndex))).to_f))
        break
      end
      count = _add(count, 1)
    end
    return gain
  end
  def main()
    puts(calc_profit([1, 2, 3], [3, 4, 5], 15))
    puts(calc_profit([10, 9, 8], [3, 4, 5], 25))
    puts(calc_profit([10, 9, 8], [3, 4, 5], 5))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
