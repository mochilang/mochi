# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def breadth_first_search(graph, source, sink, parent)
    visited = [].clone
    i = 0.clone
    while i < graph.length
      visited = (visited << (false)).clone
      i = _add(i, 1).clone
    end
    queue = [].clone
    queue = (queue << (source)).clone
    visited[source] = true
    head = 0.clone
    while head < queue.length
      u = queue[head]
      head = _add(head, 1).clone
      row = graph[u]
      ind = 0.clone
      while ind < row.length
        capacity = row[ind]
        if visited[ind] == false && capacity > 0
          queue = (queue << (ind)).clone
          visited[ind] = true
          parent[ind] = u
        end
        ind = _add(ind, 1).clone
      end
    end
    return visited[sink]
  end
  def ford_fulkerson(graph, source, sink)
    parent = [].clone
    i = 0.clone
    while i < graph.length
      parent = (parent << (-1)).clone
      i = _add(i, 1).clone
    end
    max_flow = 0.clone
    while breadth_first_search(graph, source, sink, parent)
      path_flow = $INF.clone
      s = sink.clone
      while s != source
        prev = parent[s]
        cap = graph[prev][s]
        if cap < path_flow
          path_flow = cap.clone
        end
        s = prev.clone
      end
      max_flow = _add(max_flow, path_flow).clone
      v = sink.clone
      while v != source
        u = parent[v]
        graph[u][v] = graph[u][v] - path_flow
        graph[v][u] = _add(graph[v][u], path_flow)
        v = u.clone
      end
      j = 0.clone
      while j < parent.length
        parent[j] = -1
        j = _add(j, 1).clone
      end
    end
    return max_flow
  end
  $INF = 1000000000
  $graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]
  puts(_str(ford_fulkerson($graph, 0, 5)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
