# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def breadth_first_search(graph, source, sink, parent)
    visited = []
    i = 0
    while i < _len(graph)
      visited = _append(visited, false)
      i = _add(i, 1)
    end
    queue = []
    queue = _append(queue, source)
    visited[source] = true
    head = 0
    while head < _len(queue)
      u = (__tmp1 = queue; __tmp1.is_a?(Hash) ? __tmp1[head] : _idx(__tmp1, head))
      head = _add(head, 1)
      row = (__tmp2 = graph; __tmp2.is_a?(Hash) ? __tmp2[u] : _idx(__tmp2, u))
      ind = 0
      while ind < _len(row)
        capacity = (__tmp3 = row; __tmp3.is_a?(Hash) ? __tmp3[ind] : _idx(__tmp3, ind))
        if _eq((__tmp4 = visited; __tmp4.is_a?(Hash) ? __tmp4[ind] : _idx(__tmp4, ind)), false) && capacity > 0
          queue = _append(queue, ind)
          visited[ind] = true
          parent[ind] = u
        end
        ind = _add(ind, 1)
      end
    end
    return (__tmp5 = visited; __tmp5.is_a?(Hash) ? __tmp5[sink] : _idx(__tmp5, sink))
  end
  def ford_fulkerson(graph, source, sink)
    parent = []
    i = 0
    while i < _len(graph)
      parent = _append(parent, -1)
      i = _add(i, 1)
    end
    max_flow = 0
    while breadth_first_search(graph, source, sink, parent)
      path_flow = $INF
      s = sink
      while !_eq(s, source)
        prev = (__tmp6 = parent; __tmp6.is_a?(Hash) ? __tmp6[s] : _idx(__tmp6, s))
        cap = (__tmp7 = (__tmp8 = graph; __tmp8.is_a?(Hash) ? __tmp8[prev] : _idx(__tmp8, prev)); __tmp7.is_a?(Hash) ? __tmp7[s] : _idx(__tmp7, s))
        if cap < path_flow
          path_flow = cap
        end
        s = prev
      end
      max_flow = _add(max_flow, path_flow)
      v = sink
      while !_eq(v, source)
        u = (__tmp9 = parent; __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v))
        (__tmp10 = graph; __tmp10.is_a?(Hash) ? __tmp10[u] : _idx(__tmp10, u))[v] = (__tmp11 = (__tmp12 = graph; __tmp12.is_a?(Hash) ? __tmp12[u] : _idx(__tmp12, u)); __tmp11.is_a?(Hash) ? __tmp11[v] : _idx(__tmp11, v)) - path_flow
        (__tmp13 = graph; __tmp13.is_a?(Hash) ? __tmp13[v] : _idx(__tmp13, v))[u] = _add((__tmp14 = (__tmp15 = graph; __tmp15.is_a?(Hash) ? __tmp15[v] : _idx(__tmp15, v)); __tmp14.is_a?(Hash) ? __tmp14[u] : _idx(__tmp14, u)), path_flow)
        v = u
      end
      j = 0
      while j < _len(parent)
        parent[j] = -1
        j = _add(j, 1)
      end
    end
    return max_flow
  end
  $INF = 1000000000
  $graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]
  puts(_str(ford_fulkerson($graph, 0, 5)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
