# Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def bfs(graph, s, t, parent)
    visited = []
    i = 0
    while i < graph.length
      visited = (visited + [false])
      i = _add(i, 1)
    end
    queue = [s]
    head = 0
    visited[s] = true
    while head < queue.length
      u = queue[head]
      head = _add(head, 1)
      ind = 0
      while ind < graph[u].length
        if _eq(visited[ind], false) && graph[u][ind] > 0
          queue = (queue + [ind])
          visited[ind] = true
          parent[ind] = u
        end
        ind = _add(ind, 1)
      end
    end
    return visited[t]
  end
  def mincut(graph, source, sink)
    g = graph
    parent = []
    i = 0
    while i < g.length
      parent = (parent + [-1])
      i = _add(i, 1)
    end
    temp = []
    i = 0
    while i < g.length
      row = []
      j = 0
      while j < g[i].length
        row = (row + [g[i][j]])
        j = _add(j, 1)
      end
      temp = (temp + [row])
      i = _add(i, 1)
    end
    while bfs(g, source, sink, parent)
      path_flow = 1000000000
      s = sink
      while !_eq(s, source)
        p = parent[s]
        cap = g[p][s]
        if cap < path_flow
          path_flow = cap
        end
        s = p
      end
      v = sink
      while !_eq(v, source)
        u = parent[v]
        g[u][v] = g[u][v] - path_flow
        g[v][u] = _add(g[v][u], path_flow)
        v = u
      end
    end
    res = []
    i = 0
    while i < g.length
      j = 0
      while j < g[0].length
        if _eq(g[i][j], 0) && temp[i][j] > 0
          res = (res + [[i, j]])
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return res
  end
  $test_graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]
  $result = mincut($test_graph, 0, 5)
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
