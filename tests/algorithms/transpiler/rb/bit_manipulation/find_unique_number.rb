# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def bit_xor(a, b)
    ua = a
    ub = b
    res = 0
    bit = 1
    while ua > 0 || ub > 0
      abit = ua % 2
      bbit = ub % 2
      if (abit == 1 && bbit == 0) || (abit == 0 && bbit == 1)
        res = _add(res, bit)
      end
      ua = ((ua / 2)).to_i
      ub = ((ub / 2)).to_i
      bit = bit * 2
    end
    return res
  end
  def find_unique_number(arr)
    if arr.length == 0
      panic("input list must not be empty")
    end
    result = 0
        __tmp6 = arr
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |num|
      result = bit_xor(result, num)
    end
    return result
  end
  puts((find_unique_number([1, 1, 2, 2, 3])).to_s)
  puts((find_unique_number([4, 5, 4, 6, 6])).to_s)
  puts((find_unique_number([7])).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
