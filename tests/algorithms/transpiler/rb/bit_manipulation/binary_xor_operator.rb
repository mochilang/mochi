# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def int_to_binary(n)
    if n == 0
      return "0"
    end
    res = ""
    num = n
    while num > 0
      res = _add((num % 2).to_s, res)
      num = num / 2
    end
    return res
  end
  def pad_left(s, width)
    res = s
    while res.length < width
      res = _add("0", res)
    end
    return res
  end
  def binary_xor(a, b)
    if a < 0 || b < 0
      panic("the value of both inputs must be positive")
    end
    a_bin = int_to_binary(a)
    b_bin = int_to_binary(b)
    max_len = (a_bin.length > b_bin.length ? a_bin.length : b_bin.length)
    a_pad = pad_left(a_bin, max_len)
    b_pad = pad_left(b_bin, max_len)
    i = 0
    result = ""
    while i < max_len
      if a_pad[i] != b_pad[i]
        result = _add(result, "1")
      else
        result = _add(result, "0")
      end
      i = _add(i, 1)
    end
    return _add("0b", result)
  end
  puts(binary_xor(25, 32))
  puts(binary_xor(37, 50))
  puts(binary_xor(21, 30))
  puts(binary_xor(58, 73))
  puts(binary_xor(0, 255))
  puts(binary_xor(256, 256))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
