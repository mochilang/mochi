# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pad_left_num(n)
    s = _str(n)
    while s.length < 5
      s = _add(" ", s)
    end
    return s
  end
  def to_binary(n)
    sign = ""
    num = n
    if num < 0
      sign = "-"
      num = 0 - num
    end
    bits = ""
    while num > 0
      bits = _add(_str(num % 2), bits)
      num = (num - (num % 2)) / 2
    end
    if _eq(bits, "")
      bits = "0"
    end
    min_width = 8
    while bits.length < (min_width - sign.length)
      bits = _add("0", bits)
    end
    return _add(sign, bits)
  end
  def show_bits(before, after)
    return _add(_add(_add(_add(_add(_add(pad_left_num(before), ": "), to_binary(before)), "\n"), pad_left_num(after)), ": "), to_binary(after))
  end
  def lshift(num, k)
    result = num
    i = 0
    while i < k
      result = result * 2
      i = _add(i, 1)
    end
    return result
  end
  def rshift(num, k)
    result = num
    i = 0
    while i < k
      result = (result - (result % 2)) / 2
      i = _add(i, 1)
    end
    return result
  end
  def swap_odd_even_bits(num)
    n = num
    if n < 0
      n = _add(n, 4294967296)
    end
    result = 0
    i = 0
    while i < 32
      bit1 = rshift(n, i) % 2
      bit2 = rshift(n, _add(i, 1)) % 2
      result = _add(_add(result, lshift(bit1, _add(i, 1))), lshift(bit2, i))
      i = _add(i, 2)
    end
    return result
  end
  def main()
    nums = [-1, 0, 1, 2, 3, 4, 23, 24]
    i = 0
    while i < nums.length
      n = nums[i]
      puts(show_bits(n, swap_odd_even_bits(n)))
      puts("")
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
