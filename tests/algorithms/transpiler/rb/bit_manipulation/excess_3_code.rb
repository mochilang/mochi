# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def excess_3_code(number)
    n = number
    if n < 0
      n = 0
    end
    mapping = ["0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100"]
    res = ""
    if n == 0
      res = mapping[0]
    else
      while n > 0
        digit = n % 10
        res = _add(mapping[digit], res)
        n = n / 10
      end
    end
    return _add("0b", res)
  end
  def main()
    puts(excess_3_code(0))
    puts(excess_3_code(3))
    puts(excess_3_code(2))
    puts(excess_3_code(20))
    puts(excess_3_code(120))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
