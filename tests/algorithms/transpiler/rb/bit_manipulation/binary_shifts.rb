# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def repeat_char(ch, count)
    res = ""
    i = 0
    while i < count
      res = _add(res, ch)
      i = _add(i, 1)
    end
    return res
  end
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def pow2(exp)
    res = 1
    i = 0
    while i < exp
      res = res * 2
      i = _add(i, 1)
    end
    return res
  end
  def to_binary_no_prefix(n)
    v = n
    if v < 0
      v = -v
    end
    if v == 0
      return "0"
    end
    res = ""
    while v > 0
      res = _add((v % 2).to_s, res)
      v = v / 2
    end
    return res
  end
  def logical_left_shift(number, shift_amount)
    if number < 0 || shift_amount < 0
      panic("both inputs must be positive integers")
    end
    binary_number = _add("0b", to_binary_no_prefix(number))
    return _add(binary_number, repeat_char("0", shift_amount))
  end
  def logical_right_shift(number, shift_amount)
    if number < 0 || shift_amount < 0
      panic("both inputs must be positive integers")
    end
    binary_number = to_binary_no_prefix(number)
    if shift_amount >= binary_number.length
      return "0b0"
    end
    shifted = binary_number[0...binary_number.length - shift_amount]
    return _add("0b", shifted)
  end
  def arithmetic_right_shift(number, shift_amount)
    binary_number = ""
    if number >= 0
      binary_number = _add("0", to_binary_no_prefix(number))
    else
      length = to_binary_no_prefix(-number).length
      intermediate = abs_int(number) - pow2(length)
      bin_repr = to_binary_no_prefix(intermediate)
      binary_number = _add(_add("1", repeat_char("0", length - bin_repr.length)), bin_repr)
    end
    if shift_amount >= binary_number.length
      sign = binary_number[0...1]
      return _add("0b", repeat_char(sign, binary_number.length))
    end
    sign = binary_number[0...1]
    shifted = binary_number[0...binary_number.length - shift_amount]
    return _add(_add("0b", repeat_char(sign, shift_amount)), shifted)
  end
  def main()
    puts(logical_left_shift(17, 2))
    puts(logical_right_shift(1983, 4))
    puts(arithmetic_right_shift(-17, 2))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
