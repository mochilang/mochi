# Generated by Mochi transpiler v0.10.62 on 2025-08-09 16:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bit_and(a, b)
    ua = a
    ub = b
    res = 0
    bit = 1
    while ua > 0 || ub > 0
      if _eq(ua % 2, 1) && _eq(ub % 2, 1)
        res = _add(res, bit)
      end
      ua = ((ua / 2)).to_i
      ub = ((ub / 2)).to_i
      bit = bit * 2
    end
    return res
  end
  def count_bits_kernighan(n)
    if n < 0
      panic("the value of input must not be negative")
    end
    num = n
    result = 0
    while !_eq(num, 0)
      num = bit_and(num, num - 1)
      result = _add(result, 1)
    end
    return result
  end
  def count_bits_modulo(n)
    if n < 0
      panic("the value of input must not be negative")
    end
    num = n
    result = 0
    while !_eq(num, 0)
      if _eq(num % 2, 1)
        result = _add(result, 1)
      end
      num = ((num / 2)).to_i
    end
    return result
  end
  def main()
    numbers = [25, 37, 21, 58, 0, 256]
    i = 0
    while i < numbers.length
      puts(_str(count_bits_kernighan(numbers[i])))
      i = _add(i, 1)
    end
    i = 0
    while i < numbers.length
      puts(_str(count_bits_modulo(numbers[i])))
      i = _add(i, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
