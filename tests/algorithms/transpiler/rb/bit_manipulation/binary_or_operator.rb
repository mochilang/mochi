# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def binary_or(a, b)
    if a < 0 || b < 0
      return "ValueError"
    end
    res = ""
    x = a
    y = b
    while x > 0 || y > 0
      bit_a = x % 2
      bit_b = y % 2
      if bit_a == 1 || bit_b == 1
        res = _add("1", res)
      else
        res = _add("0", res)
      end
      x = x / 2
      y = y / 2
    end
    if res == ""
      res = "0"
    end
    return _add("0b", res)
  end
  puts(binary_or(25, 32))
  puts(binary_or(37, 50))
  puts(binary_or(21, 30))
  puts(binary_or(58, 73))
  puts(binary_or(0, 255))
  puts(binary_or(0, 256))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
