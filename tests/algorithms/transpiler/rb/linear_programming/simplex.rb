# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pivot(t, row, col)
    pivotRow = [].clone
    pivotVal = t[row][col]
    (0...t[row].length).each do |j|
      pivotRow = (pivotRow << (t[row][j] / pivotVal)).clone
    end
    t[row] = pivotRow
    (0...t.length).each do |i|
      if i != row
        factor = t[i][col]
        newRow = [].clone
        (0...t[i].length).each do |j|
          value = t[i][j] - factor * pivotRow[j]
          newRow = (newRow << (value)).clone
        end
        t[i] = newRow
      end
    end
    return t
  end
  def findPivot(t)
    col = 0.clone
    minVal = 0.0.clone
    (0...t[0].length - 1).each do |j|
      v = t[0][j]
      if v < minVal
        minVal = v.clone
        col = j.clone
      end
    end
    if minVal >= 0.0
      return [-1, -1]
    end
    row = -1.clone
    minRatio = 0.0.clone
    first = true.clone
    (1...t.length).each do |i|
      coeff = t[i][col]
      if coeff > 0.0
        rhs = t[i][t[i].length - 1]
        ratio = rhs / coeff
        if first || ratio < minRatio
          minRatio = ratio.clone
          row = i.clone
          first = false.clone
        end
      end
    end
    return [row, col]
  end
  def interpret(t, nVars)
    lastCol = t[0].length - 1
    p = t[0][lastCol].clone
    if p < 0.0
      p = -p.clone
    end
    result = {}.clone
    result["P"] = p
    (0...nVars).each do |i|
      nzRow = -1.clone
      nzCount = 0.clone
      (0...t.length).each do |r|
        val = t[r][i]
        if val != 0.0
          nzCount = _add(nzCount, 1).clone
          nzRow = r.clone
        end
      end
      if nzCount == 1 && t[nzRow][i] == 1.0
        result[_add("x", _str(_add(i, 1)))] = t[nzRow][lastCol]
      end
    end
    return result
  end
  def simplex(tab)
    t = tab.clone
    while true
      p = findPivot(t)
      row = p[0]
      col = p[1]
      if row < 0
        break
      end
      t = pivot(t, row, col).clone
    end
    return t
  end
  $tableau = [[-1.0, -1.0, 0.0, 0.0, 0.0], [1.0, 3.0, 1.0, 0.0, 4.0], [3.0, 1.0, 0.0, 1.0, 4.0]].clone
  $finalTab = simplex($tableau).clone
  $res = interpret($finalTab, 2)
  puts(_add("P: ", _str($res["P"])))
  (0...2).each do |i|
    key = _add("x", _str(_add(i, 1)))
    if $res.key?(key)
      puts(_add(_add(key, ": "), _str($res[key])))
    end
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
