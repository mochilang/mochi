# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pivot(t, row, col)
    pivotRow = []
    pivotVal = (__tmp1 = (__tmp2 = t; __tmp2.is_a?(Hash) ? __tmp2[row] : _idx(__tmp2, row)); __tmp1.is_a?(Hash) ? __tmp1[col] : _idx(__tmp1, col))
    (0..._len((__tmp3 = t; __tmp3.is_a?(Hash) ? __tmp3[row] : _idx(__tmp3, row)))).each do |j|
      pivotRow = _append(pivotRow, (__tmp4 = (__tmp5 = t; __tmp5.is_a?(Hash) ? __tmp5[row] : _idx(__tmp5, row)); __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)) / pivotVal)
    end
    t[row] = pivotRow
    (0..._len(t)).each do |i|
      if !_eq(i, row)
        factor = (__tmp6 = (__tmp7 = t; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)); __tmp6.is_a?(Hash) ? __tmp6[col] : _idx(__tmp6, col))
        newRow = []
        (0..._len((__tmp8 = t; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))).each do |j|
          value = (__tmp9 = (__tmp10 = t; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)) - factor * (__tmp11 = pivotRow; __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
          newRow = _append(newRow, value)
        end
        t[i] = newRow
      end
    end
    return t
  end
  def findPivot(t)
    col = 0
    minVal = 0.0
    (0..._len((__tmp12 = t; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0))) - 1).each do |j|
      v = (__tmp13 = (__tmp14 = t; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j))
      if v < minVal
        minVal = v
        col = j
      end
    end
    if minVal >= 0.0
      return [-1, -1]
    end
    row = -1
    minRatio = 0.0
    first = true
    (1..._len(t)).each do |i|
      coeff = (__tmp15 = (__tmp16 = t; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[col] : _idx(__tmp15, col))
      if coeff > 0.0
        rhs = (__tmp17 = (__tmp18 = t; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)); __tmp17.is_a?(Hash) ? __tmp17[_len((__tmp19 = t; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))) - 1] : _idx(__tmp17, _len((__tmp20 = t; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i))) - 1))
        ratio = rhs / coeff
        if first || ratio < minRatio
          minRatio = ratio
          row = i
          first = false
        end
      end
    end
    return [row, col]
  end
  def interpret(t, nVars)
    lastCol = _len((__tmp21 = t; __tmp21.is_a?(Hash) ? __tmp21[0] : _idx(__tmp21, 0))) - 1
    p = (__tmp22 = (__tmp23 = t; __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0)); __tmp22.is_a?(Hash) ? __tmp22[lastCol] : _idx(__tmp22, lastCol))
    if p < 0.0
      p = -p
    end
    result = {}
    result["P"] = p
    (0...nVars).each do |i|
      nzRow = -1
      nzCount = 0
      (0..._len(t)).each do |r|
        val = (__tmp24 = (__tmp25 = t; __tmp25.is_a?(Hash) ? __tmp25[r] : _idx(__tmp25, r)); __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i))
        if !_eq(val, 0.0)
          nzCount = _add(nzCount, 1)
          nzRow = r
        end
      end
      if _eq(nzCount, 1) && _eq((__tmp26 = (__tmp27 = t; __tmp27.is_a?(Hash) ? __tmp27[nzRow] : _idx(__tmp27, nzRow)); __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i)), 1.0)
        result[_add("x", _str(_add(i, 1)))] = (__tmp28 = (__tmp29 = t; __tmp29.is_a?(Hash) ? __tmp29[nzRow] : _idx(__tmp29, nzRow)); __tmp28.is_a?(Hash) ? __tmp28[lastCol] : _idx(__tmp28, lastCol))
      end
    end
    return result
  end
  def simplex(tab)
    t = tab
    while true
      p = findPivot(t)
      row = (__tmp30 = p; __tmp30.is_a?(Hash) ? __tmp30[0] : _idx(__tmp30, 0))
      col = (__tmp31 = p; __tmp31.is_a?(Hash) ? __tmp31[1] : _idx(__tmp31, 1))
      if row < 0
        break
      end
      t = pivot(t, row, col)
    end
    return t
  end
  $tableau = [[-1.0, -1.0, 0.0, 0.0, 0.0], [1.0, 3.0, 1.0, 0.0, 4.0], [3.0, 1.0, 0.0, 1.0, 4.0]]
  $finalTab = simplex($tableau)
  $res = interpret($finalTab, 2)
  puts(_add("P: ", _str((__tmp32 = $res; __tmp32.is_a?(Hash) ? __tmp32["P"] : _idx(__tmp32, "P")))))
  (0...2).each do |i|
    key = _add("x", _str(_add(i, 1)))
    if _has($res, key)
      puts(_add(_add(key, ": "), _str((__tmp33 = $res; __tmp33.is_a?(Hash) ? __tmp33[key] : _idx(__tmp33, key)))))
    end
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
