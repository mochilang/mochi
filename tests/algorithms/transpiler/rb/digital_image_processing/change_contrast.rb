# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def change_contrast(img, level)
    factor = (259.0 * (_add(((level).to_f), 255.0))) / (255.0 * (259.0 - ((level).to_f)))
    result = []
    i = 0
    while i < img.length
      row = img[i]
      new_row = []
      j = 0
      while j < row.length
        c = row[j]
        contrasted = ((_add(128.0, factor * (((c).to_f) - 128.0)))).to_i
        clamped = (contrasted < 0 ? 0 : (contrasted > 255 ? 255 : contrasted))
        new_row = (new_row << clamped)
        j = _add(j, 1)
      end
      result = (result << new_row)
      i = _add(i, 1)
    end
    return result
  end
  def print_image(img)
    i = 0
    while i < img.length
      row = img[i]
      j = 0
      line = ""
      while j < row.length
        line = _add(_add(line, (row[j]).to_s), " ")
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  $image = [[100, 125, 150], [175, 200, 225], [50, 75, 100]]
  puts("Original image:")
  print_image($image)
  $contrasted = change_contrast($image, 170)
  puts("After contrast:")
  print_image($contrasted)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
