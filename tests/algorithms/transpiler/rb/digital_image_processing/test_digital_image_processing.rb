# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def clamp_byte(x)
    if x < 0
      return 0
    end
    if x > 255
      return 255
    end
    return x
  end
  def convert_to_negative(img)
    h = img.length
    w = img[0].length
    out = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        row = (row << (255 - img[y][x]))
        x = _add(x, 1)
      end
      out = (out << (row))
      y = _add(y, 1)
    end
    return out
  end
  def change_contrast(img, factor)
    h = img.length
    w = img[0].length
    out = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        p = img[y][x]
        v = _add(((p - 128) * factor) / 100, 128)
        v = clamp_byte(v)
        row = (row << (v))
        x = _add(x, 1)
      end
      out = (out << (row))
      y = _add(y, 1)
    end
    return out
  end
  def gen_gaussian_kernel(n, sigma)
    if n == 3
      return [[1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0], [2.0 / 16.0, 4.0 / 16.0, 2.0 / 16.0], [1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0]]
    end
    k = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row << (0.0))
        j = _add(j, 1)
      end
      k = (k << (row))
      i = _add(i, 1)
    end
    return k
  end
  def img_convolve(img, kernel)
    h = img.length
    w = img[0].length
    out = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        acc = 0.0
        ky = 0
        while ky < kernel.length
          kx = 0
          while kx < kernel[0].length
            iy = _add(y, ky) - 1
            ix = _add(x, kx) - 1
            pixel = 0
            if iy >= 0 && iy < h && ix >= 0 && ix < w
              pixel = img[iy][ix]
            end
            acc = _add(acc, kernel[ky][kx] * (1.0 * pixel))
            kx = _add(kx, 1)
          end
          ky = _add(ky, 1)
        end
        row = (row << ((acc).to_i))
        x = _add(x, 1)
      end
      out = (out << (row))
      y = _add(y, 1)
    end
    return out
  end
  def sort_ints(xs)
    arr = xs
    i = 0
    while i < arr.length
      j = 0
      while j < arr.length - 1 - i
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def median_filter(img, k)
    h = img.length
    w = img[0].length
    offset = k / 2
    out = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        vals = []
        ky = 0
        while ky < k
          kx = 0
          while kx < k
            iy = _add(y, ky) - offset
            ix = _add(x, kx) - offset
            pixel = 0
            if iy >= 0 && iy < h && ix >= 0 && ix < w
              pixel = img[iy][ix]
            end
            vals = (vals << (pixel))
            kx = _add(kx, 1)
          end
          ky = _add(ky, 1)
        end
        sorted = sort_ints(vals)
        row = (row << (sorted[sorted.length / 2]))
        x = _add(x, 1)
      end
      out = (out << (row))
      y = _add(y, 1)
    end
    return out
  end
  def iabs(x)
    if x < 0
      return -x
    end
    return x
  end
  def sobel_filter(img)
    gx = [[1, 0, -1], [2, 0, -2], [1, 0, -1]]
    gy = [[1, 2, 1], [0, 0, 0], [-1, -2, -1]]
    h = img.length
    w = img[0].length
    out = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        sx = 0
        sy = 0
        ky = 0
        while ky < 3
          kx = 0
          while kx < 3
            iy = _add(y, ky) - 1
            ix = _add(x, kx) - 1
            pixel = 0
            if iy >= 0 && iy < h && ix >= 0 && ix < w
              pixel = img[iy][ix]
            end
            sx = _add(sx, gx[ky][kx] * pixel)
            sy = _add(sy, gy[ky][kx] * pixel)
            kx = _add(kx, 1)
          end
          ky = _add(ky, 1)
        end
        row = (row << (_add(iabs(sx), iabs(sy))))
        x = _add(x, 1)
      end
      out = (out << (row))
      y = _add(y, 1)
    end
    return out
  end
  def get_neighbors_pixel(img, x, y)
    h = img.length
    w = img[0].length
    neighbors = []
    dy = -1
    while dy <= 1
      dx = -1
      while dx <= 1
        if !(dx == 0 && dy == 0)
          ny = _add(y, dy)
          nx = _add(x, dx)
          val = 0
          if ny >= 0 && ny < h && nx >= 0 && nx < w
            val = img[ny][nx]
          end
          neighbors = (neighbors << (val))
        end
        dx = _add(dx, 1)
      end
      dy = _add(dy, 1)
    end
    return neighbors
  end
  def pow2(e)
    r = 1
    i = 0
    while i < e
      r = r * 2
      i = _add(i, 1)
    end
    return r
  end
  def local_binary_value(img, x, y)
    center = img[y][x]
    neighbors = get_neighbors_pixel(img, x, y)
    v = 0
    i = 0
    while i < neighbors.length
      if neighbors[i] >= center
        v = _add(v, pow2(i))
      end
      i = _add(i, 1)
    end
    return v
  end
  def local_binary_pattern(img)
    h = img.length
    w = img[0].length
    out = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        row = (row << (local_binary_value(img, x, y)))
        x = _add(x, 1)
      end
      out = (out << (row))
      y = _add(y, 1)
    end
    return out
  end
  $img = [[52, 55, 61], [62, 59, 55], [63, 65, 66]]
  $negative = convert_to_negative($img)
  $contrast = change_contrast($img, 110)
  $kernel = gen_gaussian_kernel(3, 1.0)
  $laplace = [[0.25, 0.5, 0.25], [0.5, -3.0, 0.5], [0.25, 0.5, 0.25]]
  $convolved = img_convolve($img, $laplace)
  $medianed = median_filter($img, 3)
  $sobel = sobel_filter($img)
  $lbp_img = local_binary_pattern($img)
  puts(((x = $negative); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $contrast); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $kernel); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $convolved); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $medianed); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $sobel); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $lbp_img); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
