# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ndvi(red, nir)
    return (nir - red) / (_add(nir, red))
  end
  def bndvi(blue, nir)
    return (nir - blue) / (_add(nir, blue))
  end
  def gndvi(green, nir)
    return (nir - green) / (_add(nir, green))
  end
  def ndre(redEdge, nir)
    return (nir - redEdge) / (_add(nir, redEdge))
  end
  def ccci(red, redEdge, nir)
    return ndre(redEdge, nir) / ndvi(red, nir)
  end
  def cvi(red, green, nir)
    return (nir * red) / (green * green)
  end
  def gli(red, green, blue)
    return (2.0 * green - red - blue) / (_add(_add(2.0 * green, red), blue))
  end
  def dvi(red, nir)
    return nir / red
  end
  def calc(index, red, green, blue, redEdge, nir)
    if index == "NDVI"
      return ndvi(red, nir)
    end
    if index == "BNDVI"
      return bndvi(blue, nir)
    end
    if index == "GNDVI"
      return gndvi(green, nir)
    end
    if index == "NDRE"
      return ndre(redEdge, nir)
    end
    if index == "CCCI"
      return ccci(red, redEdge, nir)
    end
    if index == "CVI"
      return cvi(red, green, nir)
    end
    if index == "GLI"
      return gli(red, green, blue)
    end
    if index == "DVI"
      return dvi(red, nir)
    end
    return 0.0
  end
  def main()
    red = 50.0
    green = 30.0
    blue = 10.0
    redEdge = 40.0
    nir = 100.0
    puts(_add("NDVI=", (ndvi(red, nir)).to_s))
    puts(_add("CCCI=", (ccci(red, redEdge, nir)).to_s))
    puts(_add("CVI=", (cvi(red, green, nir)).to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
