# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mat_inverse3(m)
    a = m[0][0]
    b = m[0][1]
    c = m[0][2]
    d = m[1][0]
    e = m[1][1]
    f = m[1][2]
    g = m[2][0]
    h = m[2][1]
    i = m[2][2]
    det = _add(a * (e * i - f * h) - b * (d * i - f * g), c * (d * h - e * g))
    if det == 0.0
      panic("singular matrix")
    end
    adj00 = e * i - f * h
    adj01 = c * h - b * i
    adj02 = b * f - c * e
    adj10 = f * g - d * i
    adj11 = a * i - c * g
    adj12 = c * d - a * f
    adj20 = d * h - e * g
    adj21 = b * g - a * h
    adj22 = a * e - b * d
    inv = []
    inv = (inv << ([adj00 / det, adj01 / det, adj02 / det]))
    inv = (inv << ([adj10 / det, adj11 / det, adj12 / det]))
    inv = (inv << ([adj20 / det, adj21 / det, adj22 / det]))
    return inv
  end
  def mat_vec_mul(m, v)
    res = []
    i = 0
    while i < 3
      val = _add(_add(m[i][0] * v[0], m[i][1] * v[1]), m[i][2] * v[2])
      res = (res << (val))
      i = _add(i, 1)
    end
    return res
  end
  def create_matrix(rows, cols, value)
    result = []
    r = 0
    while r < rows
      row = []
      c = 0
      while c < cols
        row = (row << (value))
        c = _add(c, 1)
      end
      result = (result << (row))
      r = _add(r, 1)
    end
    return result
  end
  def round_to_int(x)
    if x >= 0.0
      return (_add(x, 0.5)).to_i
    end
    return (x - 0.5).to_i
  end
  def get_rotation(img, pt1, pt2, rows, cols)
    src = [[pt1[0][0], pt1[0][1], 1.0], [pt1[1][0], pt1[1][1], 1.0], [pt1[2][0], pt1[2][1], 1.0]]
    inv = mat_inverse3(src)
    vecx = [pt2[0][0], pt2[1][0], pt2[2][0]]
    vecy = [pt2[0][1], pt2[1][1], pt2[2][1]]
    avec = mat_vec_mul(inv, vecx)
    bvec = mat_vec_mul(inv, vecy)
    a0 = avec[0]
    a1 = avec[1]
    a2 = avec[2]
    b0 = bvec[0]
    b1 = bvec[1]
    b2 = bvec[2]
    out = create_matrix(rows, cols, 0)
    y = 0
    while y < rows
      x = 0
      while x < cols
        xf = _add(_add(a0 * (1.0 * x), a1 * (1.0 * y)), a2)
        yf = _add(_add(b0 * (1.0 * x), b1 * (1.0 * y)), b2)
        sx = round_to_int(xf)
        sy = round_to_int(yf)
        if sx >= 0 && sx < cols && sy >= 0 && sy < rows
          out[sy][sx] = img[y][x]
        end
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return out
  end
  $img = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  $pts1 = [[0.0, 0.0], [2.0, 0.0], [0.0, 2.0]]
  $pts2 = [[0.0, 2.0], [0.0, 0.0], [2.0, 2.0]]
  $rotated = get_rotation($img, $pts1, $pts2, 3, 3)
  puts(((x = $rotated); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
