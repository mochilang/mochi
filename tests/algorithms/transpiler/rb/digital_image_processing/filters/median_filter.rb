# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def insertion_sort(a)
    i = 1
    while i < a.length
      key = a[i]
      j = i - 1
      while j >= 0 && a[j] > key
        a[_add(j, 1)] = a[j]
        j = j - 1
      end
      a[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return a
  end
  def median_filter(gray_img, mask)
    rows = gray_img.length
    cols = gray_img[0].length
    bd = mask / 2
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        row = (row << 0)
        j = _add(j, 1)
      end
      result = (result << row)
      i = _add(i, 1)
    end
    i = bd
    while i < rows - bd
      j = bd
      while j < cols - bd
        kernel = []
        x = i - bd
        while x <= _add(i, bd)
          y = j - bd
          while y <= _add(j, bd)
            kernel = (kernel << gray_img[x][y])
            y = _add(y, 1)
          end
          x = _add(x, 1)
        end
        kernel = insertion_sort(kernel)
        idx = (mask * mask) / 2
        result[i][j] = kernel[idx]
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return result
  end
  def main()
    img = [[10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10]]
    filtered = median_filter(img, 3)
    puts(((x = filtered); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
