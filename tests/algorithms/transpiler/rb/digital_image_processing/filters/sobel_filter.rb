# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def atanApprox(x)
    if x > 1.0
      return $PI / 2.0 - x / (_add(x * x, 0.28))
    end
    if x < (-1.0)
      return -$PI / 2.0 - x / (_add(x * x, 0.28))
    end
    return x / (_add(1.0, 0.28 * x * x))
  end
  def atan2Approx(y, x)
    if x == 0.0
      if y > 0.0
        return $PI / 2.0
      end
      if y < 0.0
        return -$PI / 2.0
      end
      return 0.0
    end
    a = atanApprox(y / x)
    if x > 0.0
      return a
    end
    if y >= 0.0
      return _add(a, $PI)
    end
    return a - $PI
  end
  def zeros(h, w)
    m = []
    y = 0
    while y < h
      row = []
      x = 0
      while x < w
        row = (row << 0.0)
        x = _add(x, 1)
      end
      m = (m << row)
      y = _add(y, 1)
    end
    return m
  end
  def pad_edge(img, pad)
    h = img.length
    w = img[0].length
    out = zeros(_add(h, pad * 2), _add(w, pad * 2))
    y = 0
    while y < _add(h, pad * 2)
      x = 0
      while x < _add(w, pad * 2)
        sy = y - pad
        if sy < 0
          sy = 0
        end
        if sy >= h
          sy = h - 1
        end
        sx = x - pad
        if sx < 0
          sx = 0
        end
        if sx >= w
          sx = w - 1
        end
        out[y][x] = img[sy][sx]
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return out
  end
  def img_convolve(img, kernel)
    h = img.length
    w = img[0].length
    k = kernel.length
    pad = k / 2
    padded = pad_edge(img, pad)
    out = zeros(h, w)
    y = 0
    while y < h
      x = 0
      while x < w
        sum = 0.0
        i = 0
        while i < k
          j = 0
          while j < k
            sum = _add(sum, padded[_add(y, i)][_add(x, j)] * ((kernel[i][j]).to_f))
            j = _add(j, 1)
          end
          i = _add(i, 1)
        end
        out[y][x] = sum
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return out
  end
  def abs_matrix(mat)
    h = mat.length
    w = mat[0].length
    out = zeros(h, w)
    y = 0
    while y < h
      x = 0
      while x < w
        v = mat[y][x]
        if v < 0.0
          out[y][x] = -v
        else
          out[y][x] = v
        end
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return out
  end
  def max_matrix(mat)
    max_val = mat[0][0]
    y = 0
    while y < mat.length
      x = 0
      while x < mat[0].length
        if mat[y][x] > max_val
          max_val = mat[y][x]
        end
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return max_val
  end
  def scale_matrix(mat, factor)
    h = mat.length
    w = mat[0].length
    out = zeros(h, w)
    y = 0
    while y < h
      x = 0
      while x < w
        out[y][x] = mat[y][x] * factor
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    return out
  end
  def sobel_filter(image)
    h = image.length
    w = image[0].length
    img = []
    y0 = 0
    while y0 < h
      row = []
      x0 = 0
      while x0 < w
        row = (row << (image[y0][x0]).to_f)
        x0 = _add(x0, 1)
      end
      img = (img << row)
      y0 = _add(y0, 1)
    end
    kernel_x = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]
    kernel_y = [[1, 2, 1], [0, 0, 0], [-1, -2, -1]]
    dst_x = abs_matrix(img_convolve(img, kernel_x))
    dst_y = abs_matrix(img_convolve(img, kernel_y))
    max_x = max_matrix(dst_x)
    max_y = max_matrix(dst_y)
    dst_x = scale_matrix(dst_x, 255.0 / max_x)
    dst_y = scale_matrix(dst_y, 255.0 / max_y)
    mag = zeros(h, w)
    theta = zeros(h, w)
    y = 0
    while y < h
      x = 0
      while x < w
        gx = dst_x[y][x]
        gy = dst_y[y][x]
        mag[y][x] = sqrtApprox(_add(gx * gx, gy * gy))
        theta[y][x] = atan2Approx(gy, gx)
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    max_m = max_matrix(mag)
    mag = scale_matrix(mag, 255.0 / max_m)
    return [mag, theta]
  end
  def print_matrix_int(mat)
    y = 0
    while y < mat.length
      line = ""
      x = 0
      while x < mat[y].length
        line = _add(line, ((mat[y][x]).to_i).to_s)
        if x < mat[y].length - 1
          line = _add(line, " ")
        end
        x = _add(x, 1)
      end
      puts(line)
      y = _add(y, 1)
    end
  end
  def print_matrix_float(mat)
    y = 0
    while y < mat.length
      line = ""
      x = 0
      while x < mat[y].length
        line = _add(line, (mat[y][x]).to_s)
        if x < mat[y].length - 1
          line = _add(line, " ")
        end
        x = _add(x, 1)
      end
      puts(line)
      y = _add(y, 1)
    end
  end
  def main()
    img = [[10, 10, 10, 10, 10], [10, 50, 50, 50, 10], [10, 50, 80, 50, 10], [10, 50, 50, 50, 10], [10, 10, 10, 10, 10]]
    res = sobel_filter(img)
    mag = res[0]
    theta = res[1]
    print_matrix_int(mag)
    print_matrix_float(theta)
  end
  $PI = 3.141592653589793
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
