# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def expApprox(x)
    term = 1.0
    sum = 1.0
    n = 1
    while n < 10
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def vec_gaussian(mat, variance)
    i = 0
    out = []
    while i < mat.length
      row = []
      j = 0
      while j < mat[i].length
        v = mat[i][j]
        e = -(v * v) / (2.0 * variance)
        row = _add(row, [expApprox(e)])
        j = _add(j, 1)
      end
      out = _add(out, [row])
      i = _add(i, 1)
    end
    return out
  end
  def get_slice(img, x, y, kernel_size)
    half = kernel_size / 2
    i = x - half
    slice = []
    while i <= _add(x, half)
      row = []
      j = y - half
      while j <= _add(y, half)
        row = _add(row, [img[i][j]])
        j = _add(j, 1)
      end
      slice = _add(slice, [row])
      i = _add(i, 1)
    end
    return slice
  end
  def get_gauss_kernel(kernel_size, spatial_variance)
    arr = []
    i = 0
    while i < kernel_size
      row = []
      j = 0
      while j < kernel_size
        di = ((i - kernel_size / 2)).to_f
        dj = ((j - kernel_size / 2)).to_f
        dist = sqrtApprox(_add(di * di, dj * dj))
        row = _add(row, [dist])
        j = _add(j, 1)
      end
      arr = _add(arr, [row])
      i = _add(i, 1)
    end
    return vec_gaussian(arr, spatial_variance)
  end
  def elementwise_sub(mat, value)
    res = []
    i = 0
    while i < mat.length
      row = []
      j = 0
      while j < mat[i].length
        row = _add(row, [mat[i][j] - value])
        j = _add(j, 1)
      end
      res = _add(res, [row])
      i = _add(i, 1)
    end
    return res
  end
  def elementwise_mul(a, b)
    res = []
    i = 0
    while i < a.length
      row = []
      j = 0
      while j < a[i].length
        row = _add(row, [a[i][j] * b[i][j]])
        j = _add(j, 1)
      end
      res = _add(res, [row])
      i = _add(i, 1)
    end
    return res
  end
  def matrix_sum(mat)
    total = 0.0
    i = 0
    while i < mat.length
      j = 0
      while j < mat[i].length
        total = _add(total, mat[i][j])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return total
  end
  def bilateral_filter(img, spatial_variance, intensity_variance, kernel_size)
    gauss_ker = get_gauss_kernel(kernel_size, spatial_variance)
    img_s = img
    center = img_s[kernel_size / 2][kernel_size / 2]
    img_i = elementwise_sub(img_s, center)
    img_ig = vec_gaussian(img_i, intensity_variance)
    weights = elementwise_mul(gauss_ker, img_ig)
    vals = elementwise_mul(img_s, weights)
    sum_weights = matrix_sum(weights)
    val = 0.0
    if sum_weights != 0.0
      val = matrix_sum(vals) / sum_weights
    end
    return val
  end
  $PI = 3.141592653589793
  $img = [[0.2, 0.3, 0.4], [0.3, 0.4, 0.5], [0.4, 0.5, 0.6]]
  $result = bilateral_filter($img, 1.0, 1.0, 3)
  puts($result)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
