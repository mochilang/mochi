# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def expApprox(x)
    sum = 1.0
    term = 1.0
    n = 1
    while n < 10
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def gen_gaussian_kernel(k_size, sigma)
    center = k_size / 2
    kernel = []
    i = 0
    while i < k_size
      row = []
      j = 0
      while j < k_size
        x = ((i - center)).to_f
        y = ((j - center)).to_f
        exponent = -((_add(x * x, y * y)) / (2.0 * sigma * sigma))
        value = (1.0 / (2.0 * $PI * sigma)) * expApprox(exponent)
        row = (row << value)
        j = _add(j, 1)
      end
      kernel = (kernel << row)
      i = _add(i, 1)
    end
    return kernel
  end
  def gaussian_filter(image, k_size, sigma)
    height = image.length
    width = image[0].length
    dst_height = _add(height - k_size, 1)
    dst_width = _add(width - k_size, 1)
    kernel = gen_gaussian_kernel(k_size, sigma)
    dst = []
    i = 0
    while i < dst_height
      row = []
      j = 0
      while j < dst_width
        sum = 0.0
        ki = 0
        while ki < k_size
          kj = 0
          while kj < k_size
            sum = _add(sum, ((image[_add(i, ki)][_add(j, kj)]).to_f) * kernel[ki][kj])
            kj = _add(kj, 1)
          end
          ki = _add(ki, 1)
        end
        row = (row << (sum).to_i)
        j = _add(j, 1)
      end
      dst = (dst << row)
      i = _add(i, 1)
    end
    return dst
  end
  def print_image(image)
    i = 0
    while i < image.length
      puts(((x = image[i]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      i = _add(i, 1)
    end
  end
  $PI = 3.141592653589793
  $img = [[52, 55, 61, 59, 79], [62, 59, 55, 104, 94], [63, 65, 66, 113, 144], [68, 70, 70, 126, 154], [70, 72, 69, 128, 155]]
  $gaussian3 = gaussian_filter($img, 3, 1.0)
  $gaussian5 = gaussian_filter($img, 5, 0.8)
  print_image($gaussian3)
  print_image($gaussian5)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
