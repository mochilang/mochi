# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_neighbors_pixel(image, x, y, center)
    if x < 0 || y < 0
      return 0
    end
    if x >= image.length || y >= image[0].length
      return 0
    end
    if image[x][y] >= center
      return 1
    end
    return 0
  end
  def local_binary_value(image, x, y)
    center = image[x][y]
    powers = [1, 2, 4, 8, 16, 32, 64, 128]
    neighbors = [get_neighbors_pixel(image, x - 1, _add(y, 1), center), get_neighbors_pixel(image, x, _add(y, 1), center), get_neighbors_pixel(image, x - 1, y, center), get_neighbors_pixel(image, _add(x, 1), _add(y, 1), center), get_neighbors_pixel(image, _add(x, 1), y, center), get_neighbors_pixel(image, _add(x, 1), y - 1, center), get_neighbors_pixel(image, x, y - 1, center), get_neighbors_pixel(image, x - 1, y - 1, center)]
    sum = 0
    i = 0
    while i < neighbors.length
      sum = _add(sum, neighbors[i] * powers[i])
      i = _add(i, 1)
    end
    return sum
  end
  $image = [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]]
  $i = 0
  while $i < $image.length
    j = 0
    line = ""
    while j < $image[0].length
      value = local_binary_value($image, $i, j)
      line = _add(line, (value).to_s)
      if j < $image[0].length - 1
        line = _add(line, " ")
      end
      j = _add(j, 1)
    end
    puts(line)
    $i = _add($i, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
