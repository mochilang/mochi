# Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:57 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = [] if arr.nil?
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pad_edge(image, pad_size)
    height = _len(image)
    width = _len((__tmp1 = image; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    new_height = _add(height, pad_size * 2)
    new_width = _add(width, pad_size * 2)
    padded = []
    i = 0
    while i < new_height
      row = []
      src_i = i
      if src_i < pad_size
        src_i = 0
      end
      if src_i >= _add(height, pad_size)
        src_i = height - 1
      else
        src_i = src_i - pad_size
      end
      j = 0
      while j < new_width
        src_j = j
        if src_j < pad_size
          src_j = 0
        end
        if src_j >= _add(width, pad_size)
          src_j = width - 1
        else
          src_j = src_j - pad_size
        end
        row = _append(row, (__tmp2 = (__tmp3 = image; __tmp3.is_a?(Hash) ? __tmp3[src_i] : _idx(__tmp3, src_i)); __tmp2.is_a?(Hash) ? __tmp2[src_j] : _idx(__tmp2, src_j)))
        j = _add(j, 1)
      end
      padded = _append(padded, row)
      i = _add(i, 1)
    end
    return padded
  end
  def im2col(image, block_h, block_w)
    rows = _len(image)
    cols = _len((__tmp4 = image; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)))
    dst_height = _add(rows - block_h, 1)
    dst_width = _add(cols - block_w, 1)
    image_array = []
    i = 0
    while i < dst_height
      j = 0
      while j < dst_width
        window = []
        bi = 0
        while bi < block_h
          bj = 0
          while bj < block_w
            window = _append(window, (__tmp5 = (__tmp6 = image; __tmp6.is_a?(Hash) ? __tmp6[_add(i, bi)] : _idx(__tmp6, _add(i, bi))); __tmp5.is_a?(Hash) ? __tmp5[_add(j, bj)] : _idx(__tmp5, _add(j, bj))))
            bj = _add(bj, 1)
          end
          bi = _add(bi, 1)
        end
        image_array = _append(image_array, window)
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return image_array
  end
  def flatten(matrix)
    out = []
    i = 0
    while i < _len(matrix)
      j = 0
      while j < _len((__tmp7 = matrix; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)))
        out = _append(out, (__tmp8 = (__tmp9 = matrix; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return out
  end
  def dot(a, b)
    sum = 0
    i = 0
    while i < _len(a)
      sum = _add(sum, (__tmp10 = a; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) * (__tmp11 = b; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      i = _add(i, 1)
    end
    return sum
  end
  def img_convolve(image, kernel)
    height = _len(image)
    width = _len((__tmp12 = image; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0)))
    k_size = _len(kernel)
    pad_size = k_size / 2
    padded = pad_edge(image, pad_size)
    image_array = im2col(padded, k_size, k_size)
    kernel_flat = flatten(kernel)
    dst = []
    idx = 0
    i = 0
    while i < height
      row = []
      j = 0
      while j < width
        val = dot((__tmp13 = image_array; __tmp13.is_a?(Hash) ? __tmp13[idx] : _idx(__tmp13, idx)), kernel_flat)
        row = _append(row, val)
        idx = _add(idx, 1)
        j = _add(j, 1)
      end
      dst = _append(dst, row)
      i = _add(i, 1)
    end
    return dst
  end
  def print_matrix(m)
    i = 0
    while i < _len(m)
      line = ""
      j = 0
      while j < _len((__tmp14 = m; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)))
        if j > 0
          line = _add(line, " ")
        end
        line = _add(line, _str((__tmp15 = (__tmp16 = m; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j))))
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  $image = [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
  $laplace_kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]]
  $result = img_convolve($image, $laplace_kernel)
  print_matrix($result)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
