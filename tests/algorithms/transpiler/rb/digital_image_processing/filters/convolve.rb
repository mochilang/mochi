# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pad_edge(image, pad_size)
    height = image.length
    width = image[0].length
    new_height = _add(height, pad_size * 2)
    new_width = _add(width, pad_size * 2)
    padded = []
    i = 0
    while i < new_height
      row = []
      src_i = i
      if src_i < pad_size
        src_i = 0
      end
      if src_i >= _add(height, pad_size)
        src_i = height - 1
      else
        src_i = src_i - pad_size
      end
      j = 0
      while j < new_width
        src_j = j
        if src_j < pad_size
          src_j = 0
        end
        if src_j >= _add(width, pad_size)
          src_j = width - 1
        else
          src_j = src_j - pad_size
        end
        row = (row << image[src_i][src_j])
        j = _add(j, 1)
      end
      padded = (padded << row)
      i = _add(i, 1)
    end
    return padded
  end
  def im2col(image, block_h, block_w)
    rows = image.length
    cols = image[0].length
    dst_height = _add(rows - block_h, 1)
    dst_width = _add(cols - block_w, 1)
    image_array = []
    i = 0
    while i < dst_height
      j = 0
      while j < dst_width
        window = []
        bi = 0
        while bi < block_h
          bj = 0
          while bj < block_w
            window = (window << image[_add(i, bi)][_add(j, bj)])
            bj = _add(bj, 1)
          end
          bi = _add(bi, 1)
        end
        image_array = (image_array << window)
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return image_array
  end
  def flatten(matrix)
    out = []
    i = 0
    while i < matrix.length
      j = 0
      while j < matrix[i].length
        out = (out << matrix[i][j])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return out
  end
  def dot(a, b)
    sum = 0
    i = 0
    while i < a.length
      sum = _add(sum, a[i] * b[i])
      i = _add(i, 1)
    end
    return sum
  end
  def img_convolve(image, kernel)
    height = image.length
    width = image[0].length
    k_size = kernel.length
    pad_size = k_size / 2
    padded = pad_edge(image, pad_size)
    image_array = im2col(padded, k_size, k_size)
    kernel_flat = flatten(kernel)
    dst = []
    idx = 0
    i = 0
    while i < height
      row = []
      j = 0
      while j < width
        val = dot(image_array[idx], kernel_flat)
        row = (row << val)
        idx = _add(idx, 1)
        j = _add(j, 1)
      end
      dst = (dst << row)
      i = _add(i, 1)
    end
    return dst
  end
  def print_matrix(m)
    i = 0
    while i < m.length
      line = ""
      j = 0
      while j < m[i].length
        if j > 0
          line = _add(line, " ")
        end
        line = _add(line, (m[i][j]).to_s)
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  $image = [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
  $laplace_kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]]
  $result = img_convolve($image, $laplace_kernel)
  print_matrix($result)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
