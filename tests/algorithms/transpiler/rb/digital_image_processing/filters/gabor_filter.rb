# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_radians(deg)
    return deg * $PI / 180.0
  end
  def sin_taylor(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def exp_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1.0
    while i < 20.0
      term = term * x / i
      sum = _add(sum, term)
      i = _add(i, 1.0)
    end
    return sum
  end
  def gabor_filter_kernel(ksize, sigma, theta, lambd, gamma, psi)
    size = ksize
    if size % 2 == 0
      size = _add(size, 1)
    end
    gabor = []
    y = 0
    while y < size
      row = []
      x = 0
      while x < size
        px = ((x - size / 2)).to_f
        py = ((y - size / 2)).to_f
        rad = to_radians(theta)
        cos_theta = cos_taylor(rad)
        sin_theta = sin_taylor(rad)
        x_rot = _add(cos_theta * px, sin_theta * py)
        y_rot = _add(-sin_theta * px, cos_theta * py)
        exponent = -(_add(x_rot * x_rot, gamma * gamma * y_rot * y_rot)) / (2.0 * sigma * sigma)
        value = exp_taylor(exponent) * cos_taylor(_add(2.0 * $PI * x_rot / lambd, psi))
        row = (row << value)
        x = _add(x, 1)
      end
      gabor = (gabor << row)
      y = _add(y, 1)
    end
    return gabor
  end
  $PI = 3.141592653589793
  $kernel = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0)
  puts(((x = $kernel); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
