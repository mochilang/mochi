# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_matrix(rows, cols, value)
    result = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        row = (row << value)
        j = _add(j, 1)
      end
      result = (result << row)
      i = _add(i, 1)
    end
    return result
  end
  def my_laplacian(src, ksize)
    kernel = []
    if ksize == 1
      kernel = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]]
    else
      if ksize == 3
        kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]]
      else
        if ksize == 5
          kernel = [[0, 0, -1, 0, 0], [0, -1, -2, -1, 0], [-1, -2, 16, -2, -1], [0, -1, -2, -1, 0], [0, 0, -1, 0, 0]]
        else
          if ksize == 7
            kernel = [[0, 0, 0, -1, 0, 0, 0], [0, 0, -2, -3, -2, 0, 0], [0, -2, -7, -10, -7, -2, 0], [-1, -3, -10, 68, -10, -3, -1], [0, -2, -7, -10, -7, -2, 0], [0, 0, -2, -3, -2, 0, 0], [0, 0, 0, -1, 0, 0, 0]]
          else
            panic("ksize must be in (1, 3, 5, 7)")
          end
        end
      end
    end
    rows = src.length
    cols = src[0].length
    k = kernel.length
    pad = k / 2
    output = make_matrix(rows, cols, 0)
    i = 0
    while i < rows
      j = 0
      while j < cols
        sum = 0
        ki = 0
        while ki < k
          kj = 0
          while kj < k
            ii = _add(i, ki) - pad
            jj = _add(j, kj) - pad
            val = 0
            if ii >= 0 && ii < rows && jj >= 0 && jj < cols
              val = src[ii][jj]
            end
            sum = _add(sum, val * kernel[ki][kj])
            kj = _add(kj, 1)
          end
          ki = _add(ki, 1)
        end
        output[i][j] = sum
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return output
  end
  $image = [[0, 0, 0, 0, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 0, 0, 0, 0]]
  $result = my_laplacian($image, 3)
  $r = 0
  while $r < $result.length
    row_str = "["
    c = 0
    while c < $result[$r].length
      row_str = _add(row_str, ($result[$r][c]).to_s)
      if _add(c, 1) < $result[$r].length
        row_str = _add(row_str, ", ")
      end
      c = _add(c, 1)
    end
    row_str = _add(row_str, "]")
    puts(row_str)
    $r = _add($r, 1)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
