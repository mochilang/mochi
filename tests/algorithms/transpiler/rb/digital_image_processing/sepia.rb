# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def normalize(value)
    if value > 255
      return 255
    end
    return value
  end
  def to_grayscale(blue, green, red)
    gs = _add(_add(0.2126 * ((red).to_f), 0.587 * ((green).to_f)), 0.114 * ((blue).to_f))
    return (gs).to_i
  end
  def make_sepia(img, factor)
    pixel_h = img.length
    pixel_v = img[0].length
    i = 0
    while i < pixel_h
      j = 0
      while j < pixel_v
        pixel = img[i][j]
        grey = to_grayscale(pixel[0], pixel[1], pixel[2])
        img[i][j] = [normalize(grey), normalize(_add(grey, factor)), normalize(_add(grey, 2 * factor))]
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return img
  end
  $image = [[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [200, 150, 100]]]
  $sepia = make_sepia($image, 20)
  puts(((x = $sepia); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
