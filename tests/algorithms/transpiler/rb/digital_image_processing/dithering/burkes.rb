# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_greyscale(blue, green, red)
    b = (blue).to_f
    g = (green).to_f
    r = (red).to_f
    return ((_add(_add(0.114 * b, 0.587 * g), 0.299 * r))).to_i
  end
  def zeros(h, w)
    table = []
    i = 0
    while i < h
      row = []
      j = 0
      while j < w
        row = (row << 0)
        j = _add(j, 1)
      end
      table = (table << row)
      i = _add(i, 1)
    end
    return table
  end
  def burkes_dither(img, threshold)
    height = img.length
    width = img[0].length
    error_table = zeros(_add(height, 1), _add(width, 4))
    output = []
    y = 0
    while y < height
      row = []
      x = 0
      while x < width
        px = img[y][x]
        grey = get_greyscale(px[0], px[1], px[2])
        total = _add(grey, error_table[y][_add(x, 2)])
        new_val = 0
        current_error = 0
        if threshold > total
          new_val = 0
          current_error = total
        else
          new_val = 255
          current_error = total - 255
        end
        row = (row << new_val)
        error_table[y][_add(x, 3)] = _add(error_table[y][_add(x, 3)], (8 * current_error) / 32)
        error_table[y][_add(x, 4)] = _add(error_table[y][_add(x, 4)], (4 * current_error) / 32)
        error_table[_add(y, 1)][_add(x, 2)] = _add(error_table[_add(y, 1)][_add(x, 2)], (8 * current_error) / 32)
        error_table[_add(y, 1)][_add(x, 3)] = _add(error_table[_add(y, 1)][_add(x, 3)], (4 * current_error) / 32)
        error_table[_add(y, 1)][_add(x, 4)] = _add(error_table[_add(y, 1)][_add(x, 4)], (2 * current_error) / 32)
        error_table[_add(y, 1)][_add(x, 1)] = _add(error_table[_add(y, 1)][_add(x, 1)], (4 * current_error) / 32)
        error_table[_add(y, 1)][x] = _add(error_table[_add(y, 1)][x], (2 * current_error) / 32)
        x = _add(x, 1)
      end
      output = (output << row)
      y = _add(y, 1)
    end
    return output
  end
  def main()
    img = [[[0, 0, 0], [64, 64, 64], [128, 128, 128], [192, 192, 192]], [[255, 255, 255], [200, 200, 200], [150, 150, 150], [100, 100, 100]], [[30, 144, 255], [255, 0, 0], [0, 255, 0], [0, 0, 255]], [[50, 100, 150], [80, 160, 240], [70, 140, 210], [60, 120, 180]]]
    result = burkes_dither(img, 128)
    y = 0
    while y < result.length
      line = ""
      x = 0
      while x < result[y].length
        line = _add(line, (result[y][x]).to_s)
        if x < result[y].length - 1
          line = _add(line, " ")
        end
        x = _add(x, 1)
      end
      puts(line)
      y = _add(y, 1)
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
