# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rgb_to_gray(rgb)
    result = []
    i = 0
    while i < rgb.length
      row = []
      j = 0
      while j < rgb[i].length
        r = rgb[i][j][0]
        g = rgb[i][j][1]
        b = rgb[i][j][2]
        gray = _add(_add(0.2989 * (1.0 * r), 0.587 * (1.0 * g)), 0.114 * (1.0 * b))
        row = (row << gray)
        j = _add(j, 1)
      end
      result = (result << row)
      i = _add(i, 1)
    end
    return result
  end
  def gray_to_binary(gray)
    result = []
    i = 0
    while i < gray.length
      row = []
      j = 0
      while j < gray[i].length
        v = gray[i][j]
        if v > 127.0 && v <= 255.0
          row = (row << 1)
        else
          row = (row << 0)
        end
        j = _add(j, 1)
      end
      result = (result << row)
      i = _add(i, 1)
    end
    return result
  end
  def dilation(image, kernel)
    img_h = image.length
    img_w = image[0].length
    k_h = kernel.length
    k_w = kernel[0].length
    pad_h = k_h / 2
    pad_w = k_w / 2
    p_h = _add(img_h, 2 * pad_h)
    p_w = _add(img_w, 2 * pad_w)
    padded = []
    i = 0
    while i < p_h
      row = []
      j = 0
      while j < p_w
        row = (row << 0)
        j = _add(j, 1)
      end
      padded = (padded << row)
      i = _add(i, 1)
    end
    i = 0
    while i < img_h
      j = 0
      while j < img_w
        padded[_add(pad_h, i)][_add(pad_w, j)] = image[i][j]
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    output = []
    i = 0
    while i < img_h
      row = []
      j = 0
      while j < img_w
        sum = 0
        ky = 0
        while ky < k_h
          kx = 0
          while kx < k_w
            if kernel[ky][kx] == 1
              sum = _add(sum, padded[_add(i, ky)][_add(j, kx)])
            end
            kx = _add(kx, 1)
          end
          ky = _add(ky, 1)
        end
        if sum > 0
          row = (row << 1)
        else
          row = (row << 0)
        end
        j = _add(j, 1)
      end
      output = (output << row)
      i = _add(i, 1)
    end
    return output
  end
  def print_float_matrix(mat)
    i = 0
    while i < mat.length
      line = ""
      j = 0
      while j < mat[i].length
        line = _add(line, (mat[i][j]).to_s)
        if j < mat[i].length - 1
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  def print_int_matrix(mat)
    i = 0
    while i < mat.length
      line = ""
      j = 0
      while j < mat[i].length
        line = _add(line, (mat[i][j]).to_s)
        if j < mat[i].length - 1
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  def main()
    rgb_example = [[[127, 255, 0]]]
    print_float_matrix(rgb_to_gray(rgb_example))
    gray_example = [[26.0, 255.0, 14.0], [5.0, 147.0, 20.0], [1.0, 200.0, 0.0]]
    print_int_matrix(gray_to_binary(gray_example))
    binary_image = [[0, 1, 0], [0, 1, 0], [0, 1, 0]]
    kernel = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
    print_int_matrix(dilation(binary_image, kernel))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
