# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rgb_to_gray(rgb)
    gray = []
    i = 0
    while i < rgb.length
      row = []
      j = 0
      while j < rgb[i].length
        r = (rgb[i][j][0]).to_f
        g = (rgb[i][j][1]).to_f
        b = (rgb[i][j][2]).to_f
        value = _add(_add(0.2989 * r, 0.587 * g), 0.114 * b)
        row = (row << (value))
        j = _add(j, 1)
      end
      gray = (gray << (row))
      i = _add(i, 1)
    end
    return gray
  end
  def gray_to_binary(gray)
    binary = []
    i = 0
    while i < gray.length
      row = []
      j = 0
      while j < gray[i].length
        row = (row << (gray[i][j] > 127.0 && gray[i][j] <= 255.0))
        j = _add(j, 1)
      end
      binary = (binary << (row))
      i = _add(i, 1)
    end
    return binary
  end
  def erosion(image, kernel)
    h = image.length
    w = image[0].length
    k_h = kernel.length
    k_w = kernel[0].length
    pad_y = k_h / 2
    pad_x = k_w / 2
    padded = []
    y = 0
    while y < _add(h, 2 * pad_y)
      row = []
      x = 0
      while x < _add(w, 2 * pad_x)
        row = (row << (false))
        x = _add(x, 1)
      end
      padded = (padded << (row))
      y = _add(y, 1)
    end
    y = 0
    while y < h
      x = 0
      while x < w
        padded[_add(pad_y, y)][_add(pad_x, x)] = image[y][x]
        x = _add(x, 1)
      end
      y = _add(y, 1)
    end
    output = []
    y = 0
    while y < h
      row_out = []
      x = 0
      while x < w
        sum = 0
        ky = 0
        while ky < k_h
          kx = 0
          while kx < k_w
            if kernel[ky][kx] == 1 && padded[_add(y, ky)][_add(x, kx)]
              sum = _add(sum, 1)
            end
            kx = _add(kx, 1)
          end
          ky = _add(ky, 1)
        end
        row_out = (row_out << (sum == 5))
        x = _add(x, 1)
      end
      output = (output << (row_out))
      y = _add(y, 1)
    end
    return output
  end
  $rgb_img = [[[127, 255, 0]]]
  puts(((x = rgb_to_gray($rgb_img)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $gray_img = [[127.0, 255.0, 0.0]]
  puts(((x = gray_to_binary($gray_img)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $img1 = [[true, true, false]]
  $kernel1 = [[0, 1, 0]]
  puts(((x = erosion($img1, $kernel1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $img2 = [[true, false, false]]
  $kernel2 = [[1, 1, 0]]
  puts(((x = erosion($img2, $kernel2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
