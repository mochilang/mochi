# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    parts = [].clone
    cur = "".clone
    i = 0.clone
    while i < s.length
      if sep.length > 0 && _add(i, sep.length) <= s.length && s[i..._add(i, sep.length)] == sep
        parts = (parts << (cur)).clone
        cur = "".clone
        i = _add(i, sep.length).clone
      else
        cur = _add(cur, s[i..._add(i, 1)]).clone
        i = _add(i, 1).clone
      end
    end
    parts = (parts << (cur)).clone
    return parts
  end
  def join(xs, sep)
    res = "".clone
    i = 0.clone
    while i < xs.length
      if i > 0
        res = _add(res, sep).clone
      end
      res = _add(res, xs[i]).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def repeat(s, n)
    out = "".clone
    i = 0.clone
    while i < n
      out = _add(out, s).clone
      i = _add(i, 1).clone
    end
    return out
  end
  def replace_char(s, old, new)
    out = "".clone
    i = 0.clone
    while i < s.length
      c = s[i..._add(i, 1)]
      if c == old
        out = _add(out, new).clone
      else
        out = _add(out, c).clone
      end
      i = _add(i, 1).clone
    end
    return out
  end
  def contains(s, sub)
    if sub.length == 0
      return true
    end
    i = 0.clone
    while _add(i, sub.length) <= s.length
      if s[i..._add(i, sub.length)] == sub
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def file_extension(name)
    i = name.length - 1.clone
    while i >= 0
      if name[i..._add(i, 1)] == "."
        return name[i...]
      end
      i = i - 1.clone
    end
    return ""
  end
  def remove_extension(name)
    i = name.length - 1.clone
    while i >= 0
      if name[i..._add(i, 1)] == "."
        return name[...i]
      end
      i = i - 1.clone
    end
    return name
  end
  def title_case(s)
    out = "".clone
    cap = true.clone
    i = 0.clone
    while i < s.length
      c = s[i..._add(i, 1)]
      if c == " "
        out = _add(out, c).clone
        cap = true.clone
      else
        if cap
          out = _add(out, c.upcase()).clone
          cap = false.clone
        else
          out = _add(out, c.downcase()).clone
        end
      end
      i = _add(i, 1).clone
    end
    return out
  end
  def count_char(s, ch)
    cnt = 0.clone
    i = 0.clone
    while i < s.length
      if s[i..._add(i, 1)] == ch
        cnt = _add(cnt, 1).clone
      end
      i = _add(i, 1).clone
    end
    return cnt
  end
  def md_prefix(level)
    if level == 0
      return "\n##"
    end
    return _add(_repeat("  ", level), "*")
  end
  def print_path(old_path, new_path)
    old_parts = split(old_path, "/")
    new_parts = split(new_path, "/")
    i = 0.clone
    while i < new_parts.length
      if (i >= old_parts.length || old_parts[i] != new_parts[i]) && new_parts[i] != ""
        title = title_case(replace_char(new_parts[i], "_", " "))
        puts(_add(_add(md_prefix(i), " "), title))
      end
      i = _add(i, 1).clone
    end
    return new_path
  end
  def sort_strings(xs)
    arr = xs.clone
    i = 0.clone
    while i < arr.length
      min_idx = i.clone
      j = _add(i, 1).clone
      while j < arr.length
        if arr[j] < arr[min_idx]
          min_idx = j.clone
        end
        j = _add(j, 1).clone
      end
      tmp = arr[i]
      arr[i] = arr[min_idx]
      arr[min_idx] = tmp
      i = _add(i, 1).clone
    end
    return arr
  end
  def good_file_paths(paths)
    res = [].clone
        __tmp1 = paths
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |p|
      parts = split(p, "/")
      skip = false.clone
      k = 0.clone
      while k < parts.length - 1
        part = parts[k]
        if part == "scripts" || part[0...1] == "." || part[0...1] == "_" || contains(part, "venv")
          skip = true.clone
        end
        k = _add(k, 1).clone
      end
      if skip
        next
      end
      filename = parts[parts.length - 1]
      if filename == "__init__.py"
        next
      end
      ext = file_extension(filename)
      if ext == ".py" || ext == ".ipynb"
        res = (res << (p)).clone
      end
    end
    return res
  end
  def print_directory_md(paths)
    files = sort_strings(good_file_paths(paths)).clone
    old_path = "".clone
    i = 0.clone
    while i < files.length
      fp = files[i]
      parts = split(fp, "/")
      filename = parts[parts.length - 1]
      filepath = "".clone
      if parts.length > 1
        filepath = join(parts[...parts.length - 1], "/").clone
      end
      if filepath != old_path
        old_path = print_path(old_path, filepath).clone
      end
      indent = 0.clone
      if filepath.length > 0
        indent = _add(count_char(filepath, "/"), 1).clone
      end
      url = replace_char(fp, " ", "%20")
      name = title_case(replace_char(remove_extension(filename), "_", " "))
      puts(_add(_add(_add(_add(_add(md_prefix(indent), " ["), name), "]("), url), ")"))
      i = _add(i, 1).clone
    end
  end
  $sample = ["data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"]
  print_directory_md($sample)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
