# Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:20 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _repeat(s, n)
  s * n.to_i
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def split(s, sep)
    parts = []
    cur = ""
    i = 0
    while i < s.length
      if sep.length > 0 && _add(i, sep.length) <= s.length && _eq(s[i..._add(i, sep.length)], sep)
        parts = (parts + [cur])
        cur = ""
        i = _add(i, sep.length)
      else
        cur = _add(cur, s[i..._add(i, 1)])
        i = _add(i, 1)
      end
    end
    parts = (parts + [cur])
    return parts
  end
  def join(xs, sep)
    res = ""
    i = 0
    while i < xs.length
      if i > 0
        res = _add(res, sep)
      end
      res = _add(res, xs[i])
      i = _add(i, 1)
    end
    return res
  end
  def repeat(s, n)
    out = ""
    i = 0
    while i < n
      out = _add(out, s)
      i = _add(i, 1)
    end
    return out
  end
  def replace_char(s, old, new)
    out = ""
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if _eq(c, old)
        out = _add(out, new)
      else
        out = _add(out, c)
      end
      i = _add(i, 1)
    end
    return out
  end
  def contains(s, sub)
    if _eq(sub.length, 0)
      return true
    end
    i = 0
    while _add(i, sub.length) <= s.length
      if _eq(s[i..._add(i, sub.length)], sub)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def file_extension(name)
    i = name.length - 1
    while i >= 0
      if _eq(name[i..._add(i, 1)], ".")
        return name[i...]
      end
      i = i - 1
    end
    return ""
  end
  def remove_extension(name)
    i = name.length - 1
    while i >= 0
      if _eq(name[i..._add(i, 1)], ".")
        return name[...i]
      end
      i = i - 1
    end
    return name
  end
  def title_case(s)
    out = ""
    cap = true
    i = 0
    while i < s.length
      c = s[i..._add(i, 1)]
      if _eq(c, " ")
        out = _add(out, c)
        cap = true
      else
        if cap
          out = _add(out, c.upcase())
          cap = false
        else
          out = _add(out, c.downcase())
        end
      end
      i = _add(i, 1)
    end
    return out
  end
  def count_char(s, ch)
    cnt = 0
    i = 0
    while i < s.length
      if _eq(s[i..._add(i, 1)], ch)
        cnt = _add(cnt, 1)
      end
      i = _add(i, 1)
    end
    return cnt
  end
  def md_prefix(level)
    if _eq(level, 0)
      return "\n##"
    end
    return _add(_repeat("  ", level), "*")
  end
  def print_path(old_path, new_path)
    old_parts = split(old_path, "/")
    new_parts = split(new_path, "/")
    i = 0
    while i < new_parts.length
      if (i >= old_parts.length || !_eq(old_parts[i], new_parts[i])) && !_eq(new_parts[i], "")
        title = title_case(replace_char(new_parts[i], "_", " "))
        puts(_add(_add(md_prefix(i), " "), title))
      end
      i = _add(i, 1)
    end
    return new_path
  end
  def sort_strings(xs)
    arr = xs
    i = 0
    while i < arr.length
      min_idx = i
      j = _add(i, 1)
      while j < arr.length
        if arr[j] < arr[min_idx]
          min_idx = j
        end
        j = _add(j, 1)
      end
      tmp = arr[i]
      arr[i] = arr[min_idx]
      arr[min_idx] = tmp
      i = _add(i, 1)
    end
    return arr
  end
  def good_file_paths(paths)
    res = []
        __tmp1 = paths
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |p|
      parts = split(p, "/")
      skip = false
      k = 0
      while k < parts.length - 1
        part = parts[k]
        if _eq(part, "scripts") || _eq(part[0...1], ".") || _eq(part[0...1], "_") || contains(part, "venv")
          skip = true
        end
        k = _add(k, 1)
      end
      if skip
        next
      end
      filename = parts[parts.length - 1]
      if _eq(filename, "__init__.py")
        next
      end
      ext = file_extension(filename)
      if _eq(ext, ".py") || _eq(ext, ".ipynb")
        res = (res + [p])
      end
    end
    return res
  end
  def print_directory_md(paths)
    files = sort_strings(good_file_paths(paths))
    old_path = ""
    i = 0
    while i < files.length
      fp = files[i]
      parts = split(fp, "/")
      filename = parts[parts.length - 1]
      filepath = ""
      if parts.length > 1
        filepath = join(parts[...parts.length - 1], "/")
      end
      if !_eq(filepath, old_path)
        old_path = print_path(old_path, filepath)
      end
      indent = 0
      if filepath.length > 0
        indent = _add(count_char(filepath, "/"), 1)
      end
      url = replace_char(fp, " ", "%20")
      name = title_case(replace_char(remove_extension(filename), "_", " "))
      puts(_add(_add(_add(_add(_add(md_prefix(indent), " ["), name), "]("), url), ")"))
      i = _add(i, 1)
    end
  end
  $sample = ["data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"]
  print_directory_md($sample)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
