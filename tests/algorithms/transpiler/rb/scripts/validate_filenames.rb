# Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _indexOf(s, ch)
  idx = s.index(ch)
  idx ? idx : -1
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def indexOf(s, sub)
    n = s.length
    m = sub.length
    i = 0.clone
    while i <= n - m
      if s[i..._add(i, m)] == sub
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def contains(s, sub)
    return _indexOf(s, sub) >= 0
  end
  def validate(files)
    upper = [].clone
    space = [].clone
    hyphen = [].clone
    nodir = [].clone
        __tmp1 = files
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |f|
      if f != f.downcase()
        upper = (upper << (f)).clone
      end
      if contains(f, " ")
        space = (space << (f)).clone
      end
      if contains(f, "-") && contains(f, "/site-packages/") == false
        hyphen = (hyphen << (f)).clone
      end
      if !contains(f, "/")
        nodir = (nodir << (f)).clone
      end
    end
    if upper.length > 0
      puts(_add(_str(upper.length), " files contain uppercase characters:"))
            __tmp2 = upper
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |f|
        puts(f)
      end
      puts("")
    end
    if space.length > 0
      puts(_add(_str(space.length), " files contain space characters:"))
            __tmp3 = space
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |f|
        puts(f)
      end
      puts("")
    end
    if hyphen.length > 0
      puts(_add(_str(hyphen.length), " files contain hyphen characters:"))
            __tmp4 = hyphen
      if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
        __tmp4 = __tmp4.keys
      end
      __tmp4.each do |f|
        puts(f)
      end
      puts("")
    end
    if nodir.length > 0
      puts(_add(_str(nodir.length), " files are not in a directory:"))
            __tmp5 = nodir
      if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
        __tmp5 = __tmp5.keys
      end
      __tmp5.each do |f|
        puts(f)
      end
      puts("")
    end
    return _add(_add(_add(upper.length, space.length), hyphen.length), nodir.length)
  end
  def main()
    files = ["scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py"]
    bad = validate(files)
    puts(_str(bad))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
