# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def default_matrix_multiplication(a, b)
    return [[_add(a[0][0] * b[0][0], a[0][1] * b[1][0]), _add(a[0][0] * b[0][1], a[0][1] * b[1][1])], [_add(a[1][0] * b[0][0], a[1][1] * b[1][0]), _add(a[1][0] * b[0][1], a[1][1] * b[1][1])]]
  end
  def matrix_addition(matrix_a, matrix_b)
    result = []
    i = 0
    while i < matrix_a.length
      row = []
      j = 0
      while j < matrix_a[i].length
        row = (row << (_add(matrix_a[i][j], matrix_b[i][j])))
        j = _add(j, 1)
      end
      result = (result << (row))
      i = _add(i, 1)
    end
    return result
  end
  def matrix_subtraction(matrix_a, matrix_b)
    result = []
    i = 0
    while i < matrix_a.length
      row = []
      j = 0
      while j < matrix_a[i].length
        row = (row << (matrix_a[i][j] - matrix_b[i][j]))
        j = _add(j, 1)
      end
      result = (result << (row))
      i = _add(i, 1)
    end
    return result
  end
  def split_matrix(a)
    n = a.length
    mid = n / 2
    top_left = []
    top_right = []
    bot_left = []
    bot_right = []
    i = 0
    while i < mid
      left_row = []
      right_row = []
      j = 0
      while j < mid
        left_row = (left_row << (a[i][j]))
        right_row = (right_row << (a[i][_add(j, mid)]))
        j = _add(j, 1)
      end
      top_left = (top_left << (left_row))
      top_right = (top_right << (right_row))
      i = _add(i, 1)
    end
    i = mid
    while i < n
      left_row = []
      right_row = []
      j = 0
      while j < mid
        left_row = (left_row << (a[i][j]))
        right_row = (right_row << (a[i][_add(j, mid)]))
        j = _add(j, 1)
      end
      bot_left = (bot_left << (left_row))
      bot_right = (bot_right << (right_row))
      i = _add(i, 1)
    end
    return [top_left, top_right, bot_left, bot_right]
  end
  def matrix_dimensions(matrix)
    return [matrix.length, matrix[0].length]
  end
  def next_power_of_two(n)
    p = 1
    while p < n
      p = p * 2
    end
    return p
  end
  def pad_matrix(mat, rows, cols)
    res = []
    i = 0
    while i < rows
      row = []
      j = 0
      while j < cols
        v = 0
        if i < mat.length && j < mat[0].length
          v = mat[i][j]
        end
        row = (row << (v))
        j = _add(j, 1)
      end
      res = (res << (row))
      i = _add(i, 1)
    end
    return res
  end
  def actual_strassen(matrix_a, matrix_b)
    if matrix_dimensions(matrix_a)[0] == 2
      return default_matrix_multiplication(matrix_a, matrix_b)
    end
    parts_a = split_matrix(matrix_a)
    a = parts_a[0]
    b = parts_a[1]
    c = parts_a[2]
    d = parts_a[3]
    parts_b = split_matrix(matrix_b)
    e = parts_b[0]
    f = parts_b[1]
    g = parts_b[2]
    h = parts_b[3]
    t1 = actual_strassen(a, matrix_subtraction(f, h))
    t2 = actual_strassen(matrix_addition(a, b), h)
    t3 = actual_strassen(matrix_addition(c, d), e)
    t4 = actual_strassen(d, matrix_subtraction(g, e))
    t5 = actual_strassen(matrix_addition(a, d), matrix_addition(e, h))
    t6 = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h))
    t7 = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f))
    top_left = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6)
    top_right = matrix_addition(t1, t2)
    bot_left = matrix_addition(t3, t4)
    bot_right = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7)
    new_matrix = []
    i = 0
    while i < top_right.length
      new_matrix = (new_matrix << (_add(top_left[i], top_right[i])))
      i = _add(i, 1)
    end
    i = 0
    while i < bot_right.length
      new_matrix = (new_matrix << (_add(bot_left[i], bot_right[i])))
      i = _add(i, 1)
    end
    return new_matrix
  end
  def strassen(matrix1, matrix2)
    dims1 = matrix_dimensions(matrix1)
    dims2 = matrix_dimensions(matrix2)
    if dims1[1] != dims2[0]
      return []
    end
    maximum = ([dims1[0], dims1[1], dims2[0], dims2[1]].max()).to_i
    size = next_power_of_two(maximum)
    new_matrix1 = pad_matrix(matrix1, size, size)
    new_matrix2 = pad_matrix(matrix2, size, size)
    result_padded = actual_strassen(new_matrix1, new_matrix2)
    final_matrix = []
    i = 0
    while i < dims1[0]
      row = []
      j = 0
      while j < dims2[1]
        row = (row << (result_padded[i][j]))
        j = _add(j, 1)
      end
      final_matrix = (final_matrix << (row))
      i = _add(i, 1)
    end
    return final_matrix
  end
  def main()
    matrix1 = [[2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 2, 3, 1]]
    matrix2 = [[0, 2, 1, 1], [16, 2, 3, 3], [2, 2, 7, 7], [13, 11, 22, 4]]
    res = strassen(matrix1, matrix2)
    puts(((x = res); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
