# Generated by Mochi transpiler v0.10.72 on 2025-08-24 16:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0.0
      return 0.0 - x
    end
    return x
  end
  def sqrtApprox(x)
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def euclidean_distance_sqr(p1, p2)
    dx = (__tmp1 = p1; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)) - (__tmp2 = p2; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))
    dy = (__tmp3 = p1; __tmp3.is_a?(Hash) ? __tmp3[1] : _idx(__tmp3, 1)) - (__tmp4 = p2; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1))
    return _add(dx * dx, dy * dy)
  end
  def column_based_sort(arr, column)
    points = arr
    i = 0
    while i < _len(points)
      j = 0
      while j < _len(points) - 1
        if (__tmp5 = (__tmp6 = points; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)); __tmp5.is_a?(Hash) ? __tmp5[column] : _idx(__tmp5, column)) > (__tmp7 = (__tmp8 = points; __tmp8.is_a?(Hash) ? __tmp8[_add(j, 1)] : _idx(__tmp8, _add(j, 1))); __tmp7.is_a?(Hash) ? __tmp7[column] : _idx(__tmp7, column))
          tmp = (__tmp9 = points; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
          points[j] = (__tmp10 = points; __tmp10.is_a?(Hash) ? __tmp10[_add(j, 1)] : _idx(__tmp10, _add(j, 1)))
          points[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return points
  end
  def dis_between_closest_pair(points, count, min_dis)
    i = 0
    while i < count - 1
      j = _add(i, 1)
      while j < count
        current = euclidean_distance_sqr((__tmp11 = points; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)), (__tmp12 = points; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)))
        if current < min_dis
          min_dis = current
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return min_dis
  end
  def dis_between_closest_in_strip(points, count, min_dis)
    i_start = 0
    if 6 < count - 1
      i_start = 6
    else
      i_start = count - 1
    end
    i = i_start
    while i < count
      j_start = 0
      if i - 6 > 0
        j_start = i - 6
      end
      j = j_start
      while j < i
        current = euclidean_distance_sqr((__tmp13 = points; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)), (__tmp14 = points; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j)))
        if current < min_dis
          min_dis = current
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return min_dis
  end
  def closest_pair_of_points_sqr(px, py, count)
    if count <= 3
      return dis_between_closest_pair(px, count, 1e+18)
    end
    mid = count / 2
    left = closest_pair_of_points_sqr(px, py[0...mid], mid)
    right = closest_pair_of_points_sqr(py, py[mid...count], count - mid)
    best = left
    if right < best
      best = right
    end
    strip = []
    i = 0
    while i < _len(px)
      if ((__tmp15 = (__tmp16 = px; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0)) - (__tmp17 = (__tmp18 = px; __tmp18.is_a?(Hash) ? __tmp18[mid] : _idx(__tmp18, mid)); __tmp17.is_a?(Hash) ? __tmp17[0] : _idx(__tmp17, 0))).abs() < best
        strip = _append(strip, (__tmp19 = px; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)))
      end
      i = _add(i, 1)
    end
    strip_best = dis_between_closest_in_strip(strip, _len(strip), best)
    if strip_best < best
      best = strip_best
    end
    return best
  end
  def closest_pair_of_points(points, count)
    points_sorted_on_x = column_based_sort(points, 0)
    points_sorted_on_y = column_based_sort(points, 1)
    dist_sqr = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count)
    return sqrtApprox(dist_sqr)
  end
  $points = [[2.0, 3.0], [12.0, 30.0], [40.0, 50.0], [5.0, 1.0], [12.0, 10.0], [3.0, 4.0]]
  puts(_add("Distance: ", _str(closest_pair_of_points($points, _len($points)))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
