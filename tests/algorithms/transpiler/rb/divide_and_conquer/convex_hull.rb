# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def cross(o, a, b)
    return (a.x - o.x) * (b.y - o.y) - (a.y - o.y) * (b.x - o.x)
  end
  def sortPoints(ps)
    arr = ps
    n = arr.length
    i = 0
    while i < n
      j = 0
      while j < n - 1
        p = arr[j]
        q = arr[_add(j, 1)]
        if p.x > q.x || (p.x == q.x && p.y > q.y)
          arr[j] = q
          arr[_add(j, 1)] = p
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def convex_hull(ps)
    ps = sortPoints(ps)
    lower = []
        __tmp1 = ps
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |p|
      while lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], p) <= 0
        lower = lower[...lower.length - 1]
      end
      lower = (lower << (p))
    end
    upper = []
    i = ps.length - 1
    while i >= 0
      p = ps[i]
      while upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], p) <= 0
        upper = upper[...upper.length - 1]
      end
      upper = (upper << (p))
      i = i - 1
    end
    hull = lower[...lower.length - 1]
    j = 0
    while j < upper.length - 1
      hull = (hull << (upper[j]))
      j = _add(j, 1)
    end
    return hull
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  # test convex hull
  $pts = [Point.new(x: 0, y: 3), Point.new(x: 2, y: 2), Point.new(x: 1, y: 1), Point.new(x: 2, y: 1), Point.new(x: 3, y: 0), Point.new(x: 0, y: 0), Point.new(x: 3, y: 3), Point.new(x: 2, y: -1), Point.new(x: 2, y: -4), Point.new(x: 1, y: -3)]
  $hull = convex_hull($pts)
  raise 'assertion failed' unless $hull == [Point.new(x: 0, y: 0), Point.new(x: 1, y: -3), Point.new(x: 2, y: -4), Point.new(x: 3, y: 0), Point.new(x: 3, y: 3), Point.new(x: 0, y: 3)]
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
