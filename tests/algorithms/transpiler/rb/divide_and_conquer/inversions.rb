# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def slice_list(arr, start, end_)
    res = []
    k = start
    while k < end_
      res = (res << (arr[k]))
      k = _add(k, 1)
    end
    return res
  end
  def count_inversions_bf(arr)
    n = arr.length
    inv = 0
    i = 0
    while i < n - 1
      j = _add(i, 1)
      while j < n
        if arr[i] > arr[j]
          inv = _add(inv, 1)
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return inv
  end
  def count_cross_inversions(p, q)
    r = []
    i = 0
    j = 0
    inv = 0
    while i < p.length && j < q.length
      if p[i] > q[j]
        inv = _add(inv, (p.length - i))
        r = (r << (q[j]))
        j = _add(j, 1)
      else
        r = (r << (p[i]))
        i = _add(i, 1)
      end
    end
    if i < p.length
      r = _add(r, slice_list(p, i, p.length))
    else
      r = _add(r, slice_list(q, j, q.length))
    end
    return InvResult.new(arr: r, inv: inv)
  end
  def count_inversions_recursive(arr)
    if arr.length <= 1
      return InvResult.new(arr: arr, inv: 0)
    end
    mid = arr.length / 2
    p = slice_list(arr, 0, mid)
    q = slice_list(arr, mid, arr.length)
    res_p = count_inversions_recursive(p)
    res_q = count_inversions_recursive(q)
    res_cross = count_cross_inversions(res_p.arr, res_q.arr)
    total = _add(_add(res_p.inv, res_q.inv), res_cross.inv)
    return InvResult.new(arr: res_cross.arr, inv: total)
  end
  InvResult = Struct.new(:arr, :inv, keyword_init: true)
  $arr_1 = [10, 2, 1, 5, 5, 2, 11]
  $nbf = count_inversions_bf($arr_1)
  $nrec = count_inversions_recursive($arr_1).inv
  puts((["number of inversions = ", $nbf]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
  $arr_1 = [1, 2, 2, 5, 5, 10, 11]
  $nbf2 = count_inversions_bf($arr_1)
  $nrec2 = count_inversions_recursive($arr_1).inv
  puts((["number of inversions = ", $nbf2]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
  $arr_1 = []
  $nbf3 = count_inversions_bf($arr_1)
  $nrec3 = count_inversions_recursive($arr_1).inv
  puts((["number of inversions = ", $nbf3]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
