# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def min_slice(a, start, end_)
    m = a[start]
    i = _add(start, 1)
    while i < end_
      if a[i] < m
        m = a[i]
      end
      i = _add(i, 1)
    end
    return m
  end
  def max_slice(a, start, end_)
    m = a[start]
    i = _add(start, 1)
    while i < end_
      if a[i] > m
        m = a[i]
      end
      i = _add(i, 1)
    end
    return m
  end
  def max_diff_range(a, start, end_)
    if end_ - start == 1
      v = a[start]
      return [v, v]
    end
    mid = (_add(start, end_)) / 2
    left = max_diff_range(a, start, mid)
    right = max_diff_range(a, mid, end_)
    small1 = left[0]
    big1 = left[1]
    small2 = right[0]
    big2 = right[1]
    min_left = min_slice(a, start, mid)
    max_right = max_slice(a, mid, end_)
    cross_diff = max_right - min_left
    left_diff = big1 - small1
    right_diff = big2 - small2
    if right_diff > cross_diff && right_diff > left_diff
      return [small2, big2]
    else
      if left_diff > cross_diff
        return [small1, big1]
      else
        return [min_left, max_right]
      end
    end
  end
  def max_difference(a)
    return max_diff_range(a, 0, a.length)
  end
  def main()
    result = max_difference([5, 11, 2, 1, 7, 9, 0, 7])
    puts(((x = result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
