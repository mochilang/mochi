# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pivot(lst)
    return lst[0]
  end
  def kth_number(lst, k)
    p = pivot(lst)
    small = []
    big = []
    i = 0
    while i < lst.length
      e = lst[i]
      if e < p
        small = (small << (e))
      else
        if e > p
          big = (big << (e))
        end
      end
      i = _add(i, 1)
    end
    if small.length == k - 1
      return p
    else
      if small.length < k - 1
        return kth_number(big, k - small.length - 1)
      else
        return kth_number(small, k)
      end
    end
  end
  puts((kth_number([2, 1, 3, 4, 5], 3)).to_s)
  puts((kth_number([2, 1, 3, 4, 5], 1)).to_s)
  puts((kth_number([2, 1, 3, 4, 5], 5)).to_s)
  puts((kth_number([3, 2, 5, 6, 7, 8], 2)).to_s)
  puts((kth_number([25, 21, 98, 100, 76, 22, 43, 60, 89, 87], 4)).to_s)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
