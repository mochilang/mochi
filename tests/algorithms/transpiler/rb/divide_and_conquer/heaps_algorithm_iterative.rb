# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def copy_list(arr)
    result = []
    i = 0
    while i < arr.length
      result = (result << (arr[i]))
      i = _add(i, 1)
    end
    return result
  end
  def heaps(arr)
    if arr.length <= 1
      single = []
      return (single << (copy_list(arr)))
    end
    n = arr.length
    c = []
    i = 0
    while i < n
      c = (c << (0))
      i = _add(i, 1)
    end
    res = []
    res = (res << (copy_list(arr)))
    i = 0
    while i < n
      if c[i] < i
        if i % 2 == 0
          temp = arr[0]
          arr[0] = arr[i]
          arr[i] = temp
        else
          temp = arr[c[i]]
          arr[c[i]] = arr[i]
          arr[i] = temp
        end
        res = (res << (copy_list(arr)))
        c[i] = _add(c[i], 1)
        i = 0
      else
        c[i] = 0
        i = _add(i, 1)
      end
    end
    return res
  end
  puts(((x = heaps([1, 2, 3])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
