# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def max_cross_sum(arr, low, mid, high)
    left_sum = -1000000000000000000.0
    max_left = -1
    sum = 0.0
    i = mid
    while i >= low
      sum = _add(sum, arr[i])
      if sum > left_sum
        left_sum = sum
        max_left = i
      end
      i = i - 1
    end
    right_sum = -1000000000000000000.0
    max_right = -1
    sum = 0.0
    i = _add(mid, 1)
    while i <= high
      sum = _add(sum, arr[i])
      if sum > right_sum
        right_sum = sum
        max_right = i
      end
      i = _add(i, 1)
    end
    return Result.new(start: max_left, end_: max_right, sum: _add(left_sum, right_sum))
  end
  def max_subarray(arr, low, high)
    if arr.length == 0
      return Result.new(start: -1, end_: -1, sum: 0.0)
    end
    if low == high
      return Result.new(start: low, end_: high, sum: arr[low])
    end
    mid = (_add(low, high)) / 2
    left = max_subarray(arr, low, mid)
    right = max_subarray(arr, _add(mid, 1), high)
    cross = max_cross_sum(arr, low, mid, high)
    if left.sum >= right.sum && left.sum >= cross.sum
      return left
    end
    if right.sum >= left.sum && right.sum >= cross.sum
      return right
    end
    return cross
  end
  def show(res)
    puts(_add(_add(_add(_add(_add(_add("[", (res.start).to_s), ", "), (res.end_).to_s), ", "), (res.sum).to_s), "]"))
  end
  def main()
    nums1 = [-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0]
    res1 = max_subarray(nums1, 0, nums1.length - 1)
    show(res1)
    nums2 = [2.0, 8.0, 9.0]
    res2 = max_subarray(nums2, 0, nums2.length - 1)
    show(res2)
    nums3 = [0.0, 0.0]
    res3 = max_subarray(nums3, 0, nums3.length - 1)
    show(res3)
    nums4 = [-1.0, 0.0, 1.0]
    res4 = max_subarray(nums4, 0, nums4.length - 1)
    show(res4)
    nums5 = [-2.0, -3.0, -1.0, -4.0, -6.0]
    res5 = max_subarray(nums5, 0, nums5.length - 1)
    show(res5)
    nums6 = []
    res6 = max_subarray(nums6, 0, 0)
    show(res6)
  end
  Result = Struct.new(:start, :end_, :sum, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
