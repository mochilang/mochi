# Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def peak(lst)
    low = 0
    high = lst.length - 1
    while low < high
      mid = (_add(low, high)) / 2
      if lst[mid] < lst[_add(mid, 1)]
        low = _add(mid, 1)
      else
        high = mid
      end
    end
    return lst[low]
  end
  def main()
    puts((peak([1, 2, 3, 4, 5, 4, 3, 2, 1])).to_s)
    puts((peak([1, 10, 9, 8, 7, 6, 5, 4])).to_s)
    puts((peak([1, 9, 8, 7])).to_s)
    puts((peak([1, 2, 3, 4, 5, 6, 7, 0])).to_s)
    puts((peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2])).to_s)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
