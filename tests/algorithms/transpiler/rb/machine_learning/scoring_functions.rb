# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0
      return 0 - x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0
      return 0
    end
    guess = x.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def ln_series(x)
    t = (x - 1) / (_add(x, 1))
    term = t.clone
    sum = 0.clone
    n = 1.clone
    while n <= 19
      sum = _add(sum, term / ((n).to_f)).clone
      term = term * t * t.clone
      n = _add(n, 2).clone
    end
    return 2 * sum
  end
  def ln(x)
    y = x.clone
    k = 0.clone
    while y >= 10
      y = y / 10.clone
      k = _add(k, 1).clone
    end
    while y < 1
      y = y * 10.clone
      k = k - 1.clone
    end
    return _add(ln_series(y), ((k).to_f) * ln_series(10))
  end
  def mae(predict, actual)
    sum = 0.clone
    i = 0.clone
    while i < predict.length
      diff = predict[i] - actual[i]
      sum = _add(sum, absf(diff)).clone
      i = _add(i, 1).clone
    end
    return sum / ((predict.length).to_f)
  end
  def mse(predict, actual)
    sum = 0.clone
    i = 0.clone
    while i < predict.length
      diff = predict[i] - actual[i]
      sum = _add(sum, diff * diff).clone
      i = _add(i, 1).clone
    end
    return sum / ((predict.length).to_f)
  end
  def rmse(predict, actual)
    return sqrtApprox(mse(predict, actual))
  end
  def rmsle(predict, actual)
    sum = 0.clone
    i = 0.clone
    while i < predict.length
      lp = ln(_add(predict[i], 1))
      la = ln(_add(actual[i], 1))
      diff = lp - la
      sum = _add(sum, diff * diff).clone
      i = _add(i, 1).clone
    end
    return sqrtApprox(sum / ((predict.length).to_f))
  end
  def mbd(predict, actual)
    diff_sum = 0.clone
    actual_sum = 0.clone
    i = 0.clone
    while i < predict.length
      diff_sum = _add(diff_sum, (predict[i] - actual[i])).clone
      actual_sum = _add(actual_sum, actual[i]).clone
      i = _add(i, 1).clone
    end
    n = (predict.length).to_f
    numerator = diff_sum / n
    denominator = actual_sum / n
    return numerator / denominator * 100
  end
  def manual_accuracy(predict, actual)
    correct = 0.clone
    i = 0.clone
    while i < predict.length
      if predict[i] == actual[i]
        correct = _add(correct, 1).clone
      end
      i = _add(i, 1).clone
    end
    return ((correct).to_f) / ((predict.length).to_f)
  end
  def main()
    actual = [1, 2, 3]
    predict = [1, 4, 3]
    puts(_str(mae(predict, actual)))
    puts(_str(mse(predict, actual)))
    puts(_str(rmse(predict, actual)))
    puts(_str(rmsle([10, 2, 30], [10, 10, 30])))
    puts(_str(mbd([2, 3, 4], [1, 2, 3])))
    puts(_str(mbd([0, 1, 1], [1, 2, 3])))
    puts(_str(manual_accuracy(predict, actual)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
