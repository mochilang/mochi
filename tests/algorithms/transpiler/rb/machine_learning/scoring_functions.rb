# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def absf(x)
    if x < 0.0
      return 0.0 - x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln_series(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def ln(x)
    return Math.log(x)
  end
  def mae(predict, actual)
    sum = 0.0
    i = 0
    while i < _len(predict)
      diff = (__tmp1 = predict; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = actual; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      sum = _add(sum, absf(diff))
      i = _add(i, 1)
    end
    return sum / ((_len(predict)).to_f)
  end
  def mse(predict, actual)
    sum = 0.0
    i = 0
    while i < _len(predict)
      diff = (__tmp3 = predict; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) - (__tmp4 = actual; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sum / ((_len(predict)).to_f)
  end
  def rmse(predict, actual)
    return sqrtApprox(mse(predict, actual))
  end
  def rmsle(predict, actual)
    sum = 0.0
    i = 0
    while i < _len(predict)
      lp = ln(_add((__tmp5 = predict; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)), 1.0))
      la = ln(_add((__tmp6 = actual; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)), 1.0))
      diff = lp - la
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sqrtApprox(sum / ((_len(predict)).to_f))
  end
  def mbd(predict, actual)
    diff_sum = 0.0
    actual_sum = 0.0
    i = 0
    while i < _len(predict)
      diff_sum = _add(diff_sum, ((__tmp7 = predict; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)) - (__tmp8 = actual; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))))
      actual_sum = _add(actual_sum, (__tmp9 = actual; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)))
      i = _add(i, 1)
    end
    n = (_len(predict)).to_f
    numerator = diff_sum / n
    denominator = actual_sum / n
    return numerator / denominator * 100.0
  end
  def manual_accuracy(predict, actual)
    correct = 0
    i = 0
    while i < _len(predict)
      if _eq((__tmp10 = predict; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)), (__tmp11 = actual; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
        correct = _add(correct, 1)
      end
      i = _add(i, 1)
    end
    return ((correct).to_f) / ((_len(predict)).to_f)
  end
  def main()
    actual = [1.0, 2.0, 3.0]
    predict = [1.0, 4.0, 3.0]
    puts(_str(mae(predict, actual)))
    puts(_str(mse(predict, actual)))
    puts(_str(rmse(predict, actual)))
    puts(_str(rmsle([10.0, 2.0, 30.0], [10.0, 10.0, 30.0])))
    puts(_str(mbd([2.0, 3.0, 4.0], [1.0, 2.0, 3.0])))
    puts(_str(mbd([0.0, 1.0, 1.0], [1.0, 2.0, 3.0])))
    puts(_str(manual_accuracy(predict, actual)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
