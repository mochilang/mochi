# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return 0.0 - x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln_series(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def ln(x)
    y = x
    k = 0
    while y >= 10.0
      y = y / 10.0
      k = _add(k, 1)
    end
    while y < 1.0
      y = y * 10.0
      k = k - 1
    end
    return _add(ln_series(y), ((k).to_f) * ln_series(10.0))
  end
  def mae(predict, actual)
    sum = 0.0
    i = 0
    while i < predict.length
      diff = predict[i] - actual[i]
      sum = _add(sum, absf(diff))
      i = _add(i, 1)
    end
    return sum / ((predict.length).to_f)
  end
  def mse(predict, actual)
    sum = 0.0
    i = 0
    while i < predict.length
      diff = predict[i] - actual[i]
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sum / ((predict.length).to_f)
  end
  def rmse(predict, actual)
    return sqrtApprox(mse(predict, actual))
  end
  def rmsle(predict, actual)
    sum = 0.0
    i = 0
    while i < predict.length
      lp = ln(_add(predict[i], 1.0))
      la = ln(_add(actual[i], 1.0))
      diff = lp - la
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sqrtApprox(sum / ((predict.length).to_f))
  end
  def mbd(predict, actual)
    diff_sum = 0.0
    actual_sum = 0.0
    i = 0
    while i < predict.length
      diff_sum = _add(diff_sum, (predict[i] - actual[i]))
      actual_sum = _add(actual_sum, actual[i])
      i = _add(i, 1)
    end
    n = (predict.length).to_f
    numerator = diff_sum / n
    denominator = actual_sum / n
    return numerator / denominator * 100.0
  end
  def manual_accuracy(predict, actual)
    correct = 0
    i = 0
    while i < predict.length
      if _eq(predict[i], actual[i])
        correct = _add(correct, 1)
      end
      i = _add(i, 1)
    end
    return ((correct).to_f) / ((predict.length).to_f)
  end
  def main()
    actual = [1.0, 2.0, 3.0]
    predict = [1.0, 4.0, 3.0]
    puts(_str(mae(predict, actual)))
    puts(_str(mse(predict, actual)))
    puts(_str(rmse(predict, actual)))
    puts(_str(rmsle([10.0, 2.0, 30.0], [10.0, 10.0, 30.0])))
    puts(_str(mbd([2.0, 3.0, 4.0], [1.0, 2.0, 3.0])))
    puts(_str(mbd([0.0, 1.0, 1.0], [1.0, 2.0, 3.0])))
    puts(_str(manual_accuracy(predict, actual)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
