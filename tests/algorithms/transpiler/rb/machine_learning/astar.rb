# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_neighbours(p, x_limit, y_limit)
    deltas = [Point.new(x: (0 - 1), y: (0 - 1)), Point.new(x: (0 - 1), y: 0), Point.new(x: (0 - 1), y: 1), Point.new(x: 0, y: (0 - 1)), Point.new(x: 0, y: 1), Point.new(x: 1, y: (0 - 1)), Point.new(x: 1, y: 0), Point.new(x: 1, y: 1)]
    neighbours = [].clone
        __tmp1 = deltas
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |d|
      nx = _add(p.x, d.x)
      ny = _add(p.y, d.y)
      if 0 <= nx && nx < x_limit && 0 <= ny && ny < y_limit
        neighbours = (neighbours << (Point.new(x: nx, y: ny))).clone
      end
    end
    return neighbours
  end
  def contains(nodes, p)
        __tmp2 = nodes
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |n|
      if n.pos.x == p.x && n.pos.y == p.y
        return true
      end
    end
    return false
  end
  def get_node(nodes, p)
        __tmp3 = nodes
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |n|
      if n.pos.x == p.x && n.pos.y == p.y
        return n
      end
    end
    return Node.new(pos: p, parent: Point.new(x: (0 - 1), y: (0 - 1)), g: 0, h: 0, f: 0)
  end
  def astar(x_limit, y_limit, start, goal)
    open = [].clone
    closed = [].clone
    open = (open << (Node.new(pos: start, parent: Point.new(x: (0 - 1), y: (0 - 1)), g: 0, h: 0, f: 0))).clone
    current = open[0].clone
    while open.length > 0
      min_index = 0.clone
      i = 1.clone
      while i < open.length
        if open[i]["f"] < open[min_index]["f"]
          min_index = i.clone
        end
        i = _add(i, 1).clone
      end
      current = open[min_index].clone
      new_open = [].clone
      j = 0.clone
      while j < open.length
        if j != min_index
          new_open = (new_open << (open[j])).clone
        end
        j = _add(j, 1).clone
      end
      open = new_open.clone
      closed = (closed << (current)).clone
      if current["pos"]["x"] == goal.x && current["pos"]["y"] == goal.y
        break
      end
      neighbours = get_neighbours(current["pos"], x_limit, y_limit)
            __tmp4 = neighbours
      if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
        __tmp4 = __tmp4.keys
      end
      __tmp4.each do |np|
        if closed.include?(np)
          next
        end
        g = _add(current["g"], 1)
        dx = goal.x - np.x
        dy = goal.y - np.y
        h = _add(dx * dx, dy * dy)
        f = _add(g, h)
        skip = false.clone
                __tmp5 = open
        if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
          __tmp5 = __tmp5.keys
        end
        __tmp5.each do |node|
          if node["pos"]["x"] == np.x && node["pos"]["y"] == np.y && node["f"] < f
            skip = true.clone
          end
        end
        if skip
          next
        end
        open = (open << (Node.new(pos: np, parent: current["pos"], g: g, h: h, f: f))).clone
      end
    end
    path = [].clone
    path = (path << (current["pos"])).clone
    while !(current["parent"]["x"] == (0 - 1) && current["parent"]["y"] == (0 - 1))
      current = get_node(closed, current["parent"]).clone
      path = (path << (current["pos"])).clone
    end
    rev = [].clone
    k = path.length - 1.clone
    while k >= 0
      rev = (rev << (path[k])).clone
      k = k - 1.clone
    end
    return rev
  end
  def create_world(x_limit, y_limit)
    world = [].clone
    i = 0.clone
    while i < x_limit
      row = [].clone
      j = 0.clone
      while j < y_limit
        row = (row << (0)).clone
        j = _add(j, 1).clone
      end
      world = (world << (row)).clone
      i = _add(i, 1).clone
    end
    return world
  end
  def mark_path(world, path)
        __tmp6 = path
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |p|
      world[p.x][p.y] = 1
    end
  end
  def print_world(world)
        __tmp7 = world
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |row|
      puts(((x = row); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    end
  end
  Point = Struct.new(:x, :y, keyword_init: true)
  Node = Struct.new(:pos, :parent, :g, :h, :f, keyword_init: true)
  $world_x = 5
  $world_y = 5
  $start = Point.new(x: 0, y: 0)
  $goal = Point.new(x: 4, y: 4)
  $path = astar($world_x, $world_y, $start, $goal)
  puts(_add(_add(_add(_add(_add(_add(_add(_add("path from (", _str($start.x)), ", "), _str($start.y)), ") to ("), _str($goal.x)), ", "), _str($goal.y)), ")"))
  $world = create_world($world_x, $world_y)
  mark_path($world, $path)
  print_world($world)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
