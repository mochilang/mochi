# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def exp_approx(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      term = term * x / ((i).to_f)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def signf(x)
    if x >= 0.0
      return 1.0
    end
    return -1.0
  end
  def gradient(target, preds)
    n = target.length
    residuals = []
    i = 0
    while i < n
      t = target[i]
      y = preds[i]
      exp_val = exp_approx(t * y)
      res = -t / (_add(1.0, exp_val))
      residuals = (residuals + [res])
      i = _add(i, 1)
    end
    return residuals
  end
  def predict_raw(models, features, learning_rate)
    n = features.length
    preds = []
    i = 0
    while i < n
      preds = (preds + [0.0])
      i = _add(i, 1)
    end
    m = 0
    while m < models.length
      stump = models[m]
      i = 0
      while i < n
        value = features[i][stump.feature]
        if value <= stump.threshold
          preds[i] = _add(preds[i], learning_rate * stump.left)
        else
          preds[i] = _add(preds[i], learning_rate * stump.right)
        end
        i = _add(i, 1)
      end
      m = _add(m, 1)
    end
    return preds
  end
  def predict(models, features, learning_rate)
    raw = predict_raw(models, features, learning_rate)
    result = []
    i = 0
    while i < raw.length
      result = (result + [signf(raw[i])])
      i = _add(i, 1)
    end
    return result
  end
  def train_stump(features, residuals)
    n_samples = features.length
    n_features = features[0].length
    best_feature = 0
    best_threshold = 0.0
    best_error = 1000000000.0
    best_left = 0.0
    best_right = 0.0
    j = 0
    while j < n_features
      t_index = 0
      while t_index < n_samples
        t = features[t_index][j]
        sum_left = 0.0
        count_left = 0
        sum_right = 0.0
        count_right = 0
        i = 0
        while i < n_samples
          if features[i][j] <= t
            sum_left = _add(sum_left, residuals[i])
            count_left = _add(count_left, 1)
          else
            sum_right = _add(sum_right, residuals[i])
            count_right = _add(count_right, 1)
          end
          i = _add(i, 1)
        end
        left_val = 0.0
        if !_eq(count_left, 0)
          left_val = sum_left / ((count_left).to_f)
        end
        right_val = 0.0
        if !_eq(count_right, 0)
          right_val = sum_right / ((count_right).to_f)
        end
        error = 0.0
        i = 0
        while i < n_samples
          pred = (features[i][j] <= t ? left_val : right_val)
          diff = residuals[i] - pred
          error = _add(error, diff * diff)
          i = _add(i, 1)
        end
        if error < best_error
          best_error = error
          best_feature = j
          best_threshold = t
          best_left = left_val
          best_right = right_val
        end
        t_index = _add(t_index, 1)
      end
      j = _add(j, 1)
    end
    return Stump.new(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right)
  end
  def fit(n_estimators, learning_rate, features, target)
    models = []
    m = 0
    while m < n_estimators
      preds = predict_raw(models, features, learning_rate)
      grad = gradient(target, preds)
      residuals = []
      i = 0
      while i < grad.length
        residuals = (residuals + [-grad[i]])
        i = _add(i, 1)
      end
      stump = train_stump(features, residuals)
      models = (models + [stump])
      m = _add(m, 1)
    end
    return models
  end
  def accuracy(preds, target)
    n = target.length
    correct = 0
    i = 0
    while i < n
      if _eq(preds[i], target[i])
        correct = _add(correct, 1)
      end
      i = _add(i, 1)
    end
    return ((correct).to_f) / ((n).to_f)
  end
  Stump = Struct.new(:feature, :threshold, :left, :right, keyword_init: true)
  $features = [[1.0], [2.0], [3.0], [4.0]]
  $target = [-1.0, -1.0, 1.0, 1.0]
  $models = fit(5, 0.5, $features, $target)
  $predictions = predict($models, $features, 0.5)
  $acc = accuracy($predictions, $target)
  puts(_add("Accuracy: ", _str($acc)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
