# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def exp_approx(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      term = term * x / ((i).to_f)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def signf(x)
    if x >= 0.0
      return 1.0
    end
    return -1.0
  end
  def gradient(target, preds)
    n = _len(target)
    residuals = []
    i = 0
    while i < n
      t = (__tmp1 = target; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      y = (__tmp2 = preds; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      exp_val = exp_approx(t * y)
      res = -t / (_add(1.0, exp_val))
      residuals = _append(residuals, res)
      i = _add(i, 1)
    end
    return residuals
  end
  def predict_raw(models, features, learning_rate)
    n = _len(features)
    preds = []
    i = 0
    while i < n
      preds = _append(preds, 0.0)
      i = _add(i, 1)
    end
    m = 0
    while m < _len(models)
      stump = (__tmp3 = models; __tmp3.is_a?(Hash) ? __tmp3[m] : _idx(__tmp3, m))
      i = 0
      while i < n
        value = (__tmp4 = (__tmp5 = features; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[stump.feature] : _idx(__tmp4, stump.feature))
        if value <= stump.threshold
          preds[i] = _add((__tmp6 = preds; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)), learning_rate * stump.left)
        else
          preds[i] = _add((__tmp7 = preds; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)), learning_rate * stump.right)
        end
        i = _add(i, 1)
      end
      m = _add(m, 1)
    end
    return preds
  end
  def predict(models, features, learning_rate)
    raw = predict_raw(models, features, learning_rate)
    result = []
    i = 0
    while i < _len(raw)
      result = _append(result, signf((__tmp8 = raw; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))))
      i = _add(i, 1)
    end
    return result
  end
  def train_stump(features, residuals)
    n_samples = _len(features)
    n_features = _len((__tmp9 = features; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0)))
    best_feature = 0
    best_threshold = 0.0
    best_error = 1e+09
    best_left = 0.0
    best_right = 0.0
    j = 0
    while j < n_features
      t_index = 0
      while t_index < n_samples
        t = (__tmp10 = (__tmp11 = features; __tmp11.is_a?(Hash) ? __tmp11[t_index] : _idx(__tmp11, t_index)); __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j))
        sum_left = 0.0
        count_left = 0
        sum_right = 0.0
        count_right = 0
        i = 0
        while i < n_samples
          if (__tmp12 = (__tmp13 = features; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)); __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)) <= t
            sum_left = _add(sum_left, (__tmp14 = residuals; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)))
            count_left = _add(count_left, 1)
          else
            sum_right = _add(sum_right, (__tmp15 = residuals; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)))
            count_right = _add(count_right, 1)
          end
          i = _add(i, 1)
        end
        left_val = 0.0
        if !_eq(count_left, 0)
          left_val = sum_left / ((count_left).to_f)
        end
        right_val = 0.0
        if !_eq(count_right, 0)
          right_val = sum_right / ((count_right).to_f)
        end
        error = 0.0
        i = 0
        while i < n_samples
          pred = ((__tmp16 = (__tmp17 = features; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)); __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j)) <= t ? left_val : right_val)
          diff = (__tmp18 = residuals; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)) - pred
          error = _add(error, diff * diff)
          i = _add(i, 1)
        end
        if error < best_error
          best_error = error
          best_feature = j
          best_threshold = t
          best_left = left_val
          best_right = right_val
        end
        t_index = _add(t_index, 1)
      end
      j = _add(j, 1)
    end
    return Stump.new(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right)
  end
  def fit(n_estimators, learning_rate, features, target)
    models = []
    m = 0
    while m < n_estimators
      preds = predict_raw(models, features, learning_rate)
      grad = gradient(target, preds)
      residuals = []
      i = 0
      while i < _len(grad)
        residuals = _append(residuals, -(__tmp19 = grad; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)))
        i = _add(i, 1)
      end
      stump = train_stump(features, residuals)
      models = _append(models, stump)
      m = _add(m, 1)
    end
    return models
  end
  def accuracy(preds, target)
    n = _len(target)
    correct = 0
    i = 0
    while i < n
      if _eq((__tmp20 = preds; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), (__tmp21 = target; __tmp21.is_a?(Hash) ? __tmp21[i] : _idx(__tmp21, i)))
        correct = _add(correct, 1)
      end
      i = _add(i, 1)
    end
    return ((correct).to_f) / ((n).to_f)
  end
  Object.send(:remove_const, :Stump) if Object.const_defined?(:Stump)
  Object.const_set(:Stump, Struct.new(:feature, :threshold, :left, :right, keyword_init: true))
  $features = [[1.0], [2.0], [3.0], [4.0]]
  $target = [-1.0, -1.0, 1.0, 1.0]
  $models = fit(5, 0.5, $features, $target)
  $predictions = predict($models, $features, 0.5)
  $acc = accuracy($predictions, $target)
  puts(_add("Accuracy: ", _str($acc)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
