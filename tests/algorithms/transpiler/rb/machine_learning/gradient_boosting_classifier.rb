# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def exp_approx(x)
    term = 1.0.clone
    sum = 1.0.clone
    i = 1.clone
    while i < 10
      term = term * x / ((i).to_f).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def signf(x)
    if x >= 0.0
      return 1.0
    end
    return -1.0
  end
  def gradient(target, preds)
    n = target.length
    residuals = [].clone
    i = 0.clone
    while i < n
      t = target[i]
      y = preds[i]
      exp_val = exp_approx(t * y)
      res = -t / (_add(1.0, exp_val))
      residuals = (residuals << (res)).clone
      i = _add(i, 1).clone
    end
    return residuals
  end
  def predict_raw(models, features, learning_rate)
    n = features.length
    preds = [].clone
    i = 0.clone
    while i < n
      preds = (preds << (0.0)).clone
      i = _add(i, 1).clone
    end
    m = 0.clone
    while m < models.length
      stump = models[m]
      i = 0.clone
      while i < n
        value = features[i][stump.feature]
        if value <= stump.threshold
          preds[i] = _add(preds[i], learning_rate * stump.left)
        else
          preds[i] = _add(preds[i], learning_rate * stump.right)
        end
        i = _add(i, 1).clone
      end
      m = _add(m, 1).clone
    end
    return preds
  end
  def predict(models, features, learning_rate)
    raw = predict_raw(models, features, learning_rate)
    result = [].clone
    i = 0.clone
    while i < raw.length
      result = (result << (signf(raw[i]))).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def train_stump(features, residuals)
    n_samples = features.length
    n_features = features[0].length
    best_feature = 0.clone
    best_threshold = 0.0.clone
    best_error = 1000000000.0.clone
    best_left = 0.0.clone
    best_right = 0.0.clone
    j = 0.clone
    while j < n_features
      t_index = 0.clone
      while t_index < n_samples
        t = features[t_index][j]
        sum_left = 0.0.clone
        count_left = 0.clone
        sum_right = 0.0.clone
        count_right = 0.clone
        i = 0.clone
        while i < n_samples
          if features[i][j] <= t
            sum_left = _add(sum_left, residuals[i]).clone
            count_left = _add(count_left, 1).clone
          else
            sum_right = _add(sum_right, residuals[i]).clone
            count_right = _add(count_right, 1).clone
          end
          i = _add(i, 1).clone
        end
        left_val = 0.0.clone
        if count_left != 0
          left_val = sum_left / ((count_left).to_f).clone
        end
        right_val = 0.0.clone
        if count_right != 0
          right_val = sum_right / ((count_right).to_f).clone
        end
        error = 0.0.clone
        i = 0.clone
        while i < n_samples
          pred = (features[i][j] <= t ? left_val : right_val)
          diff = residuals[i] - pred
          error = _add(error, diff * diff).clone
          i = _add(i, 1).clone
        end
        if error < best_error
          best_error = error.clone
          best_feature = j.clone
          best_threshold = t.clone
          best_left = left_val.clone
          best_right = right_val.clone
        end
        t_index = _add(t_index, 1).clone
      end
      j = _add(j, 1).clone
    end
    return Stump.new(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right)
  end
  def fit(n_estimators, learning_rate, features, target)
    models = [].clone
    m = 0.clone
    while m < n_estimators
      preds = predict_raw(models, features, learning_rate)
      grad = gradient(target, preds)
      residuals = [].clone
      i = 0.clone
      while i < grad.length
        residuals = (residuals << (-grad[i])).clone
        i = _add(i, 1).clone
      end
      stump = train_stump(features, residuals)
      models = (models << (stump)).clone
      m = _add(m, 1).clone
    end
    return models
  end
  def accuracy(preds, target)
    n = target.length
    correct = 0.clone
    i = 0.clone
    while i < n
      if preds[i] == target[i]
        correct = _add(correct, 1).clone
      end
      i = _add(i, 1).clone
    end
    return ((correct).to_f) / ((n).to_f)
  end
  Stump = Struct.new(:feature, :threshold, :left, :right, keyword_init: true)
  $features = [[1.0], [2.0], [3.0], [4.0]]
  $target = [-1.0, -1.0, 1.0, 1.0]
  $models = fit(5, 0.5, $features, $target)
  $predictions = predict($models, $features, 0.5)
  $acc = accuracy($predictions, $target)
  puts(_add("Accuracy: ", _str($acc)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
