# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def expApprox(x)
    y = x.clone
    is_neg = false.clone
    if x < 0
      is_neg = true.clone
      y = -x.clone
    end
    term = 1.clone
    sum = 1.clone
    n = 1.clone
    while n < 30
      term = term * y / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    if is_neg
      return 1 / sum
    end
    return sum
  end
  def sigmoid(z)
    return 1 / (_add(1, expApprox(-z)))
  end
  def dot(a, b)
    s = 0.clone
    i = 0.clone
    while i < a.length
      s = _add(s, a[i] * b[i]).clone
      i = _add(i, 1).clone
    end
    return s
  end
  def zeros(n)
    res = [].clone
    i = 0.clone
    while i < n
      res = (res << (0)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def logistic_reg(alpha, x, y, iterations)
    m = x.length
    n = x[0].length
    theta = zeros(n).clone
    iter = 0.clone
    while iter < iterations
      grad = zeros(n).clone
      i = 0.clone
      while i < m
        z = dot(x[i], theta)
        h = sigmoid(z)
        k = 0.clone
        while k < n
          grad[k] = _add(grad[k], (h - y[i]) * x[i][k])
          k = _add(k, 1).clone
        end
        i = _add(i, 1).clone
      end
      k2 = 0.clone
      while k2 < n
        theta[k2] = theta[k2] - alpha * grad[k2] / ((m).to_f)
        k2 = _add(k2, 1).clone
      end
      iter = _add(iter, 1).clone
    end
    return theta
  end
  $x = [[0.5, 1.5], [1, 1], [1.5, 0.5], [3, 3.5], [3.5, 3], [4, 4]]
  $y = [0, 0, 0, 1, 1, 1]
  $alpha = 0.1
  $iterations = 1000
  $theta = logistic_reg($alpha, $x, $y, $iterations)
  (0...$theta.length).each do |i|
    puts($theta[i])
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
