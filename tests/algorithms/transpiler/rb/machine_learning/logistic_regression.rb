# Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def expApprox(x)
    y = x
    is_neg = false
    if x < 0.0
      is_neg = true
      y = -x
    end
    term = 1.0
    sum = 1.0
    n = 1
    while n < 30
      term = term * y / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    if is_neg
      return 1.0 / sum
    end
    return sum
  end
  def sigmoid(z)
    return 1.0 / (_add(1.0, expApprox(-z)))
  end
  def dot(a, b)
    s = 0.0
    i = 0
    while i < _len(a)
      s = _add(s, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return s
  end
  def zeros(n)
    res = []
    i = 0
    while i < n
      res = _append(res, 0.0)
      i = _add(i, 1)
    end
    return res
  end
  def logistic_reg(alpha, x, y, iterations)
    m = _len(x)
    n = _len((__tmp3 = x; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    theta = zeros(n)
    iter = 0
    while iter < iterations
      grad = zeros(n)
      i = 0
      while i < m
        z = dot((__tmp4 = x; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), theta)
        h = sigmoid(z)
        k = 0
        while k < n
          grad[k] = _add((__tmp5 = grad; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k)), (h - (__tmp6 = y; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))) * (__tmp7 = (__tmp8 = x; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)))
          k = _add(k, 1)
        end
        i = _add(i, 1)
      end
      k2 = 0
      while k2 < n
        theta[k2] = (__tmp9 = theta; __tmp9.is_a?(Hash) ? __tmp9[k2] : _idx(__tmp9, k2)) - alpha * (__tmp10 = grad; __tmp10.is_a?(Hash) ? __tmp10[k2] : _idx(__tmp10, k2)) / ((m).to_f)
        k2 = _add(k2, 1)
      end
      iter = _add(iter, 1)
    end
    return theta
  end
  $x = [[0.5, 1.5], [1.0, 1.0], [1.5, 0.5], [3.0, 3.5], [3.5, 3.0], [4.0, 4.0]]
  $y = [0.0, 0.0, 0.0, 1.0, 1.0, 1.0]
  $alpha = 0.1
  $iterations = 1000
  $theta = logistic_reg($alpha, $x, $y, $iterations)
  (0..._len($theta)).each do |i|
    puts((__tmp11 = $theta; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
