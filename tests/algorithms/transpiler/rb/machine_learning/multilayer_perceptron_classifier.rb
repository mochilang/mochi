# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def exp_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1.0
    while i < 20.0
      term = term * x / i
      sum = _add(sum, term)
      i = _add(i, 1.0)
    end
    return sum
  end
  def sigmoid(x)
    return 1.0 / (_add(1.0, exp_taylor(-x)))
  end
  def train(epochs, lr)
    e = 0
    while e < epochs
      i = 0
      while i < $X.length
        x0 = $X[i][0]
        x1 = $X[i][1]
        target = $Y[i]
        z1 = _add(_add($w1[0][0] * x0, $w1[1][0] * x1), $b1[0])
        z2 = _add(_add($w1[0][1] * x0, $w1[1][1] * x1), $b1[1])
        h1 = sigmoid(z1)
        h2 = sigmoid(z2)
        z3 = _add(_add($w2[0] * h1, $w2[1] * h2), $b2)
        out = sigmoid(z3)
        error = out - target
        d1 = h1 * (1.0 - h1) * $w2[0] * error
        d2 = h2 * (1.0 - h2) * $w2[1] * error
        $w2[0] = $w2[0] - lr * error * h1
        $w2[1] = $w2[1] - lr * error * h2
        $b2 = $b2 - lr * error
        $w1[0][0] = $w1[0][0] - lr * d1 * x0
        $w1[1][0] = $w1[1][0] - lr * d1 * x1
        $b1[0] = $b1[0] - lr * d1
        $w1[0][1] = $w1[0][1] - lr * d2 * x0
        $w1[1][1] = $w1[1][1] - lr * d2 * x1
        $b1[1] = $b1[1] - lr * d2
        i = _add(i, 1)
      end
      e = _add(e, 1)
    end
  end
  def predict(samples)
    preds = []
    i = 0
    while i < samples.length
      x0 = samples[i][0]
      x1 = samples[i][1]
      z1 = _add(_add($w1[0][0] * x0, $w1[1][0] * x1), $b1[0])
      z2 = _add(_add($w1[0][1] * x0, $w1[1][1] * x1), $b1[1])
      h1 = sigmoid(z1)
      h2 = sigmoid(z2)
      z3 = _add(_add($w2[0] * h1, $w2[1] * h2), $b2)
      out = sigmoid(z3)
      label = 0
      if out >= 0.5
        label = 1
      end
      preds = (preds + [label])
      i = _add(i, 1)
    end
    return preds
  end
  def wrapper(y)
    return y
  end
  $X = [[0.0, 0.0], [1.0, 1.0], [1.0, 0.0], [0.0, 1.0]]
  $Y = [0.0, 1.0, 0.0, 0.0]
  $test_data = [[0.0, 0.0], [0.0, 1.0], [1.0, 1.0]]
  $w1 = [[0.5, -0.5], [0.5, 0.5]]
  $b1 = [0.0, 0.0]
  $w2 = [0.5, -0.5]
  $b2 = 0.0
  train(4000, 0.5)
  $preds = wrapper(predict($test_data))
  puts(((x = $preds); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
