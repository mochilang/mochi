# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def exp_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1.0
    while i < 20.0
      term = term * x / i
      sum = _add(sum, term)
      i = _add(i, 1.0)
    end
    return sum
  end
  def sigmoid(x)
    return 1.0 / (_add(1.0, exp_taylor(-x)))
  end
  def train(epochs, lr)
    e = 0
    while e < epochs
      i = 0
      while i < _len($X)
        x0 = (__tmp1 = (__tmp2 = $X; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
        x1 = (__tmp3 = (__tmp4 = $X; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[1] : _idx(__tmp3, 1))
        target = (__tmp5 = $Y; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
        z1 = _add(_add((__tmp6 = (__tmp7 = $w1; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)); __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)) * x0, (__tmp8 = (__tmp9 = $w1; __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1)); __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)) * x1), (__tmp10 = $b1; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)))
        z2 = _add(_add((__tmp11 = (__tmp12 = $w1; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0)); __tmp11.is_a?(Hash) ? __tmp11[1] : _idx(__tmp11, 1)) * x0, (__tmp13 = (__tmp14 = $w1; __tmp14.is_a?(Hash) ? __tmp14[1] : _idx(__tmp14, 1)); __tmp13.is_a?(Hash) ? __tmp13[1] : _idx(__tmp13, 1)) * x1), (__tmp15 = $b1; __tmp15.is_a?(Hash) ? __tmp15[1] : _idx(__tmp15, 1)))
        h1 = sigmoid(z1)
        h2 = sigmoid(z2)
        z3 = _add(_add((__tmp16 = $w2; __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0)) * h1, (__tmp17 = $w2; __tmp17.is_a?(Hash) ? __tmp17[1] : _idx(__tmp17, 1)) * h2), $b2)
        out = sigmoid(z3)
        error = out - target
        d1 = h1 * (1.0 - h1) * (__tmp18 = $w2; __tmp18.is_a?(Hash) ? __tmp18[0] : _idx(__tmp18, 0)) * error
        d2 = h2 * (1.0 - h2) * (__tmp19 = $w2; __tmp19.is_a?(Hash) ? __tmp19[1] : _idx(__tmp19, 1)) * error
        $w2[0] = (__tmp20 = $w2; __tmp20.is_a?(Hash) ? __tmp20[0] : _idx(__tmp20, 0)) - lr * error * h1
        $w2[1] = (__tmp21 = $w2; __tmp21.is_a?(Hash) ? __tmp21[1] : _idx(__tmp21, 1)) - lr * error * h2
        $b2 = $b2 - lr * error
        (__tmp22 = $w1; __tmp22.is_a?(Hash) ? __tmp22[0] : _idx(__tmp22, 0))[0] = (__tmp23 = (__tmp24 = $w1; __tmp24.is_a?(Hash) ? __tmp24[0] : _idx(__tmp24, 0)); __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0)) - lr * d1 * x0
        (__tmp25 = $w1; __tmp25.is_a?(Hash) ? __tmp25[1] : _idx(__tmp25, 1))[0] = (__tmp26 = (__tmp27 = $w1; __tmp27.is_a?(Hash) ? __tmp27[1] : _idx(__tmp27, 1)); __tmp26.is_a?(Hash) ? __tmp26[0] : _idx(__tmp26, 0)) - lr * d1 * x1
        $b1[0] = (__tmp28 = $b1; __tmp28.is_a?(Hash) ? __tmp28[0] : _idx(__tmp28, 0)) - lr * d1
        (__tmp29 = $w1; __tmp29.is_a?(Hash) ? __tmp29[0] : _idx(__tmp29, 0))[1] = (__tmp30 = (__tmp31 = $w1; __tmp31.is_a?(Hash) ? __tmp31[0] : _idx(__tmp31, 0)); __tmp30.is_a?(Hash) ? __tmp30[1] : _idx(__tmp30, 1)) - lr * d2 * x0
        (__tmp32 = $w1; __tmp32.is_a?(Hash) ? __tmp32[1] : _idx(__tmp32, 1))[1] = (__tmp33 = (__tmp34 = $w1; __tmp34.is_a?(Hash) ? __tmp34[1] : _idx(__tmp34, 1)); __tmp33.is_a?(Hash) ? __tmp33[1] : _idx(__tmp33, 1)) - lr * d2 * x1
        $b1[1] = (__tmp35 = $b1; __tmp35.is_a?(Hash) ? __tmp35[1] : _idx(__tmp35, 1)) - lr * d2
        i = _add(i, 1)
      end
      e = _add(e, 1)
    end
  end
  def predict(samples)
    preds = []
    i = 0
    while i < _len(samples)
      x0 = (__tmp36 = (__tmp37 = samples; __tmp37.is_a?(Hash) ? __tmp37[i] : _idx(__tmp37, i)); __tmp36.is_a?(Hash) ? __tmp36[0] : _idx(__tmp36, 0))
      x1 = (__tmp38 = (__tmp39 = samples; __tmp39.is_a?(Hash) ? __tmp39[i] : _idx(__tmp39, i)); __tmp38.is_a?(Hash) ? __tmp38[1] : _idx(__tmp38, 1))
      z1 = _add(_add((__tmp40 = (__tmp41 = $w1; __tmp41.is_a?(Hash) ? __tmp41[0] : _idx(__tmp41, 0)); __tmp40.is_a?(Hash) ? __tmp40[0] : _idx(__tmp40, 0)) * x0, (__tmp42 = (__tmp43 = $w1; __tmp43.is_a?(Hash) ? __tmp43[1] : _idx(__tmp43, 1)); __tmp42.is_a?(Hash) ? __tmp42[0] : _idx(__tmp42, 0)) * x1), (__tmp44 = $b1; __tmp44.is_a?(Hash) ? __tmp44[0] : _idx(__tmp44, 0)))
      z2 = _add(_add((__tmp45 = (__tmp46 = $w1; __tmp46.is_a?(Hash) ? __tmp46[0] : _idx(__tmp46, 0)); __tmp45.is_a?(Hash) ? __tmp45[1] : _idx(__tmp45, 1)) * x0, (__tmp47 = (__tmp48 = $w1; __tmp48.is_a?(Hash) ? __tmp48[1] : _idx(__tmp48, 1)); __tmp47.is_a?(Hash) ? __tmp47[1] : _idx(__tmp47, 1)) * x1), (__tmp49 = $b1; __tmp49.is_a?(Hash) ? __tmp49[1] : _idx(__tmp49, 1)))
      h1 = sigmoid(z1)
      h2 = sigmoid(z2)
      z3 = _add(_add((__tmp50 = $w2; __tmp50.is_a?(Hash) ? __tmp50[0] : _idx(__tmp50, 0)) * h1, (__tmp51 = $w2; __tmp51.is_a?(Hash) ? __tmp51[1] : _idx(__tmp51, 1)) * h2), $b2)
      out = sigmoid(z3)
      label = 0
      if out >= 0.5
        label = 1
      end
      preds = _append(preds, label)
      i = _add(i, 1)
    end
    return preds
  end
  def wrapper(y)
    return y
  end
  $X = [[0.0, 0.0], [1.0, 1.0], [1.0, 0.0], [0.0, 1.0]]
  $Y = [0.0, 1.0, 0.0, 0.0]
  $test_data = [[0.0, 0.0], [0.0, 1.0], [1.0, 1.0]]
  $w1 = [[0.5, -0.5], [0.5, 0.5]]
  $b1 = [0.0, 0.0]
  $w2 = [0.5, -0.5]
  $b2 = 0.0
  train(4000, 0.5)
  $preds = wrapper(predict($test_data))
  puts(((x = $preds); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
