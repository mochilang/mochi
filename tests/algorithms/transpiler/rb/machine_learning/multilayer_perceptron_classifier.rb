# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def exp_taylor(x)
    term = 1.clone
    sum = 1.clone
    i = 1.clone
    while i < 20
      term = term * x / i.clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def sigmoid(x)
    return 1 / (_add(1, exp_taylor(-x)))
  end
  def train(epochs, lr)
    e = 0.clone
    while e < epochs
      i = 0.clone
      while i < $X.length
        x0 = $X[i][0]
        x1 = $X[i][1]
        target = $Y[i]
        z1 = _add(_add($w1[0][0] * x0, $w1[1][0] * x1), $b1[0])
        z2 = _add(_add($w1[0][1] * x0, $w1[1][1] * x1), $b1[1])
        h1 = sigmoid(z1)
        h2 = sigmoid(z2)
        z3 = _add(_add($w2[0] * h1, $w2[1] * h2), $b2)
        out = sigmoid(z3)
        error = out - target
        d1 = h1 * (1 - h1) * $w2[0] * error
        d2 = h2 * (1 - h2) * $w2[1] * error
        $w2[0] = $w2[0] - lr * error * h1
        $w2[1] = $w2[1] - lr * error * h2
        $b2 = $b2 - lr * error.clone
        $w1[0][0] = $w1[0][0] - lr * d1 * x0
        $w1[1][0] = $w1[1][0] - lr * d1 * x1
        $b1[0] = $b1[0] - lr * d1
        $w1[0][1] = $w1[0][1] - lr * d2 * x0
        $w1[1][1] = $w1[1][1] - lr * d2 * x1
        $b1[1] = $b1[1] - lr * d2
        i = _add(i, 1).clone
      end
      e = _add(e, 1).clone
    end
  end
  def predict(samples)
    preds = [].clone
    i = 0.clone
    while i < samples.length
      x0 = samples[i][0]
      x1 = samples[i][1]
      z1 = _add(_add($w1[0][0] * x0, $w1[1][0] * x1), $b1[0])
      z2 = _add(_add($w1[0][1] * x0, $w1[1][1] * x1), $b1[1])
      h1 = sigmoid(z1)
      h2 = sigmoid(z2)
      z3 = _add(_add($w2[0] * h1, $w2[1] * h2), $b2)
      out = sigmoid(z3)
      label = 0.clone
      if out >= 0.5
        label = 1.clone
      end
      preds = (preds << (label)).clone
      i = _add(i, 1).clone
    end
    return preds
  end
  def wrapper(y)
    return y
  end
  $X = [[0, 0], [1, 1], [1, 0], [0, 1]]
  $Y = [0, 1, 0, 0]
  $test_data = [[0, 0], [0, 1], [1, 1]]
  $w1 = [[0.5, -0.5], [0.5, 0.5]].clone
  $b1 = [0, 0].clone
  $w2 = [0.5, -0.5].clone
  $b2 = 0.clone
  train(4000, 0.5)
  $preds = wrapper(predict($test_data))
  puts(((x = $preds); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
