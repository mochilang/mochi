# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def sqrt(x)
    return Math.sqrt(x)
  end
  def euclidean(a, b)
    sum = 0.0
    i = 0
    while i < a.length
      diff = a[i] - b[i]
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    res = sqrt(sum)
    return res
  end
  def similarity_search(dataset, value_array)
    dim = dataset[0].length
    if !_eq(dim, value_array[0].length)
      return []
    end
    result = []
    i = 0
    while i < value_array.length
      value = value_array[i]
      dist = euclidean(value, dataset[0])
      vec = dataset[0]
      j = 1
      while j < dataset.length
        d = euclidean(value, dataset[j])
        if d < dist
          dist = d
          vec = dataset[j]
        end
        j = _add(j, 1)
      end
      nb = Neighbor.new(vector: vec, distance: dist)
      result = (result + [nb])
      i = _add(i, 1)
    end
    return result
  end
  def cosine_similarity(a, b)
    dot = 0.0
    norm_a = 0.0
    norm_b = 0.0
    i = 0
    while i < a.length
      dot = _add(dot, a[i] * b[i])
      norm_a = _add(norm_a, a[i] * a[i])
      norm_b = _add(norm_b, b[i] * b[i])
      i = _add(i, 1)
    end
    if _eq(norm_a, 0.0) || _eq(norm_b, 0.0)
      return 0.0
    end
    return dot / (sqrt(norm_a) * sqrt(norm_b))
  end
  Neighbor = Struct.new(:vector, :distance, keyword_init: true)
  $dataset = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]
  $value_array = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]]
  $neighbors = similarity_search($dataset, $value_array)
  $k = 0
  while $k < $neighbors.length
    n = $neighbors[$k]
    puts(_add(_add(_add(_add("[", ((x = n.vector); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), ", "), _str(n.distance)), "]"))
    $k = _add($k, 1)
  end
  puts(_str(cosine_similarity([1.0, 2.0], [6.0, 32.0])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
