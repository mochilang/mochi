# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrt(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def euclidean(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      diff = (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    res = sqrt(sum)
    return res
  end
  def similarity_search(dataset, value_array)
    dim = _len((__tmp3 = dataset; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    if !_eq(dim, _len((__tmp4 = value_array; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))))
      return []
    end
    result = []
    i = 0
    while i < _len(value_array)
      value = (__tmp5 = value_array; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      dist = euclidean(value, (__tmp6 = dataset; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
      vec = (__tmp7 = dataset; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
      j = 1
      while j < _len(dataset)
        d = euclidean(value, (__tmp8 = dataset; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
        if d < dist
          dist = d
          vec = (__tmp9 = dataset; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
        end
        j = _add(j, 1)
      end
      nb = Neighbor.new(vector: vec, distance: dist)
      result = _append(result, nb)
      i = _add(i, 1)
    end
    return result
  end
  def cosine_similarity(a, b)
    dot = 0.0
    norm_a = 0.0
    norm_b = 0.0
    i = 0
    while i < _len(a)
      dot = _add(dot, (__tmp10 = a; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) * (__tmp11 = b; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      norm_a = _add(norm_a, (__tmp12 = a; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)) * (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)))
      norm_b = _add(norm_b, (__tmp14 = b; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)) * (__tmp15 = b; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)))
      i = _add(i, 1)
    end
    if _eq(norm_a, 0.0) || _eq(norm_b, 0.0)
      return 0.0
    end
    return dot / (sqrt(norm_a) * sqrt(norm_b))
  end
  Object.send(:remove_const, :Neighbor) if Object.const_defined?(:Neighbor)
  Object.const_set(:Neighbor, Struct.new(:vector, :distance, keyword_init: true))
  $dataset = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]
  $value_array = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]]
  $neighbors = similarity_search($dataset, $value_array)
  $k = 0
  while $k < _len($neighbors)
    n = (__tmp16 = $neighbors; __tmp16.is_a?(Hash) ? __tmp16[$k] : _idx(__tmp16, $k))
    puts(_add(_add(_add(_add("[", ((x = n.vector); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), ", "), _str(n.distance)), "]"))
    $k = _add($k, 1)
  end
  puts(_str(cosine_similarity([1.0, 2.0], [6.0, 32.0])))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
