# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:13 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrt(x)
    if x <= 0
      return 0
    end
    guess = x.clone
    i = 0.clone
    while i < 10
      guess = (_add(guess, x / guess)) / 2.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def euclidean(a, b)
    sum = 0.clone
    i = 0.clone
    while i < a.length
      diff = a[i] - b[i]
      sum = _add(sum, diff * diff).clone
      i = _add(i, 1).clone
    end
    res = sqrt(sum)
    return res
  end
  def similarity_search(dataset, value_array)
    dim = dataset[0].length
    if dim != value_array[0].length
      return []
    end
    result = [].clone
    i = 0.clone
    while i < value_array.length
      value = value_array[i]
      dist = euclidean(value, dataset[0]).clone
      vec = dataset[0].clone
      j = 1.clone
      while j < dataset.length
        d = euclidean(value, dataset[j])
        if d < dist
          dist = d.clone
          vec = dataset[j].clone
        end
        j = _add(j, 1).clone
      end
      nb = Neighbor.new(vector: vec, distance: dist)
      result = (result << (nb)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def cosine_similarity(a, b)
    dot = 0.clone
    norm_a = 0.clone
    norm_b = 0.clone
    i = 0.clone
    while i < a.length
      dot = _add(dot, a[i] * b[i]).clone
      norm_a = _add(norm_a, a[i] * a[i]).clone
      norm_b = _add(norm_b, b[i] * b[i]).clone
      i = _add(i, 1).clone
    end
    if norm_a == 0 || norm_b == 0
      return 0
    end
    return dot / (sqrt(norm_a) * sqrt(norm_b))
  end
  Neighbor = Struct.new(:vector, :distance, keyword_init: true)
  $dataset = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]
  $value_array = [[0, 0, 0], [0, 0, 1]]
  $neighbors = similarity_search($dataset, $value_array)
  $k = 0.clone
  while $k < $neighbors.length
    n = $neighbors[$k]
    puts(_add(_add(_add(_add("[", ((x = n.vector); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)), ", "), _str(n.distance)), "]"))
    $k = _add($k, 1).clone
  end
  puts(_str(cosine_similarity([1, 2], [6, 32])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
