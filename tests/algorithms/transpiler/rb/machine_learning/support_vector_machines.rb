# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def dot(a, b)
    s = 0.0
    i = 0
    while i < a.length
      s = _add(s, a[i] * b[i])
      i = _add(i, 1)
    end
    return s
  end
  def new_svc(lr, lambda, epochs)
    return SVC.new(weights: [], bias: 0.0, lr: lr, lambda: lambda, epochs: epochs)
  end
  def fit(model, xs, ys)
    n_features = xs[0].length
    w = []
    i = 0
    while i < n_features
      w = (w + [0.0])
      i = _add(i, 1)
    end
    b = 0.0
    epoch = 0
    while epoch < model.epochs
      j = 0
      while j < xs.length
        x = xs[j]
        y = (ys[j]).to_f
        prod = _add(dot(w, x), b)
        if y * prod < 1.0
          k = 0
          while k < w.length
            w[k] = _add(w[k], model.lr * (y * x[k] - 2.0 * model.lambda * w[k]))
            k = _add(k, 1)
          end
          b = _add(b, model.lr * y)
        else
          k = 0
          while k < w.length
            w[k] = w[k] - model.lr * (2.0 * model.lambda * w[k])
            k = _add(k, 1)
          end
        end
        j = _add(j, 1)
      end
      epoch = _add(epoch, 1)
    end
    return SVC.new(weights: w, bias: b, lr: model.lr, lambda: model.lambda, epochs: model.epochs)
  end
  def predict(model, x)
    s = _add(dot(model.weights, x), model.bias)
    if s >= 0.0
      return 1
    else
      return -1
    end
  end
  SVC = Struct.new(:weights, :bias, :lr, :lambda, :epochs, keyword_init: true)
  $xs = [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]]
  $ys = [1, 1, -1, -1]
  $base = new_svc(0.01, 0.01, 1000)
  $model = fit($base, $xs, $ys)
  puts(predict($model, [0.0, 1.0]))
  puts(predict($model, [1.0, 1.0]))
  puts(predict($model, [2.0, 2.0]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
