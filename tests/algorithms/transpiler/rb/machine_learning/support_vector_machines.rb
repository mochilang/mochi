# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def dot(a, b)
    s = 0.0
    i = 0
    while i < _len(a)
      s = _add(s, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return s
  end
  def new_svc(lr, lambda, epochs)
    return SVC.new(weights: [], bias: 0.0, lr: lr, lambda: lambda, epochs: epochs)
  end
  def fit(model, xs, ys)
    n_features = _len((__tmp3 = xs; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    w = []
    i = 0
    while i < n_features
      w = _append(w, 0.0)
      i = _add(i, 1)
    end
    b = 0.0
    epoch = 0
    while epoch < model.epochs
      j = 0
      while j < _len(xs)
        x = (__tmp4 = xs; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))
        y = ((__tmp5 = ys; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))).to_f
        prod = _add(dot(w, x), b)
        if y * prod < 1.0
          k = 0
          while k < _len(w)
            w[k] = _add((__tmp6 = w; __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k)), model.lr * (y * (__tmp7 = x; __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)) - 2.0 * model.lambda * (__tmp8 = w; __tmp8.is_a?(Hash) ? __tmp8[k] : _idx(__tmp8, k))))
            k = _add(k, 1)
          end
          b = _add(b, model.lr * y)
        else
          k = 0
          while k < _len(w)
            w[k] = (__tmp9 = w; __tmp9.is_a?(Hash) ? __tmp9[k] : _idx(__tmp9, k)) - model.lr * (2.0 * model.lambda * (__tmp10 = w; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)))
            k = _add(k, 1)
          end
        end
        j = _add(j, 1)
      end
      epoch = _add(epoch, 1)
    end
    return SVC.new(weights: w, bias: b, lr: model.lr, lambda: model.lambda, epochs: model.epochs)
  end
  def predict(model, x)
    s = _add(dot(model.weights, x), model.bias)
    if s >= 0.0
      return 1
    else
      return -1
    end
  end
  Object.send(:remove_const, :SVC) if Object.const_defined?(:SVC)
  Object.const_set(:SVC, Struct.new(:weights, :bias, :lr, :lambda, :epochs, keyword_init: true))
  $xs = [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]]
  $ys = [1, 1, -1, -1]
  $base = new_svc(0.01, 0.01, 1000)
  $model = fit($base, $xs, $ys)
  puts(predict($model, [0.0, 1.0]))
  puts(predict($model, [1.0, 1.0]))
  puts(predict($model, [2.0, 2.0]))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
