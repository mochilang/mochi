# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def mean(xs)
    sum = 0.0
    i = 0
    while i < xs.length
      sum = _add(sum, xs[i])
      i = _add(i, 1)
    end
    return sum / (xs.length * 1.0)
  end
  def stump_predict(s, x)
    if x[s.feature] < s.threshold
      return s.left
    end
    return s.right
  end
  def train_stump(features, residuals)
    best_feature = 0
    best_threshold = 0.0
    best_error = 1000000000.0
    best_left = 0.0
    best_right = 0.0
    num_features = features[0].length
    f = 0
    while f < num_features
      i = 0
      while i < features.length
        threshold = features[i][f]
        left = []
        right = []
        j = 0
        while j < features.length
          if features[j][f] < threshold
            left = _add(left, [residuals[j]])
          else
            right = _add(right, [residuals[j]])
          end
          j = _add(j, 1)
        end
        if !_eq(left.length, 0) && !_eq(right.length, 0)
          left_mean = mean(left)
          right_mean = mean(right)
          err = 0.0
          j = 0
          while j < features.length
            pred = (features[j][f] < threshold ? left_mean : right_mean)
            diff = residuals[j] - pred
            err = _add(err, diff * diff)
            j = _add(j, 1)
          end
          if err < best_error
            best_error = err
            best_feature = f
            best_threshold = threshold
            best_left = left_mean
            best_right = right_mean
          end
        end
        i = _add(i, 1)
      end
      f = _add(f, 1)
    end
    return Stump.new(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right)
  end
  def boost(features, targets, rounds)
    model = []
    preds = []
    i = 0
    while i < targets.length
      preds = _add(preds, [0.0])
      i = _add(i, 1)
    end
    r = 0
    while r < rounds
      residuals = []
      j = 0
      while j < targets.length
        residuals = _add(residuals, [targets[j] - preds[j]])
        j = _add(j, 1)
      end
      stump = train_stump(features, residuals)
      model = _add(model, [stump])
      j = 0
      while j < preds.length
        preds[j] = _add(preds[j], stump_predict(stump, features[j]))
        j = _add(j, 1)
      end
      r = _add(r, 1)
    end
    return model
  end
  def predict(model, x)
    score = 0.0
    i = 0
    while i < model.length
      s = model[i]
      if x[s.feature] < s.threshold
        score = _add(score, s.left)
      else
        score = _add(score, s.right)
      end
      i = _add(i, 1)
    end
    return score
  end
  def main()
    features = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]]
    targets = [0, 0, 1, 1]
    model = boost(features, targets, 3)
    out = ""
    i = 0
    while i < features.length
      s = predict(model, features[i])
      label = (s >= 0.5 ? 1 : 0)
      if _eq(i, 0)
        out = _str(label)
      else
        out = _add(_add(out, " "), _str(label))
      end
      i = _add(i, 1)
    end
    puts(out)
  end
  Stump = Struct.new(:feature, :threshold, :left, :right, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
