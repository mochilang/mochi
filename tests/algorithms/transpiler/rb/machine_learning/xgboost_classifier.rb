# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def mean(xs)
    sum = 0.0
    i = 0
    while i < _len(xs)
      sum = _add(sum, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return sum / (_len(xs) * 1.0)
  end
  def stump_predict(s, x)
    if (__tmp2 = x; __tmp2.is_a?(Hash) ? __tmp2[s.feature] : _idx(__tmp2, s.feature)) < s.threshold
      return s.left
    end
    return s.right
  end
  def train_stump(features, residuals)
    best_feature = 0
    best_threshold = 0.0
    best_error = 1e+09
    best_left = 0.0
    best_right = 0.0
    num_features = _len((__tmp3 = features; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    f = 0
    while f < num_features
      i = 0
      while i < _len(features)
        threshold = (__tmp4 = (__tmp5 = features; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[f] : _idx(__tmp4, f))
        left = []
        right = []
        j = 0
        while j < _len(features)
          if (__tmp6 = (__tmp7 = features; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)); __tmp6.is_a?(Hash) ? __tmp6[f] : _idx(__tmp6, f)) < threshold
            left = _add(left, [(__tmp8 = residuals; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j))])
          else
            right = _add(right, [(__tmp9 = residuals; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))])
          end
          j = _add(j, 1)
        end
        if !_eq(_len(left), 0) && !_eq(_len(right), 0)
          left_mean = mean(left)
          right_mean = mean(right)
          err = 0.0
          j = 0
          while j < _len(features)
            pred = ((__tmp10 = (__tmp11 = features; __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j)); __tmp10.is_a?(Hash) ? __tmp10[f] : _idx(__tmp10, f)) < threshold ? left_mean : right_mean)
            diff = (__tmp12 = residuals; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)) - pred
            err = _add(err, diff * diff)
            j = _add(j, 1)
          end
          if err < best_error
            best_error = err
            best_feature = f
            best_threshold = threshold
            best_left = left_mean
            best_right = right_mean
          end
        end
        i = _add(i, 1)
      end
      f = _add(f, 1)
    end
    return Stump.new(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right)
  end
  def boost(features, targets, rounds)
    model = []
    preds = []
    i = 0
    while i < _len(targets)
      preds = _add(preds, [0.0])
      i = _add(i, 1)
    end
    r = 0
    while r < rounds
      residuals = []
      j = 0
      while j < _len(targets)
        residuals = _add(residuals, [(__tmp13 = targets; __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)) - (__tmp14 = preds; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j))])
        j = _add(j, 1)
      end
      stump = train_stump(features, residuals)
      model = _add(model, [stump])
      j = 0
      while j < _len(preds)
        preds[j] = _add((__tmp15 = preds; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)), stump_predict(stump, (__tmp16 = features; __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j))))
        j = _add(j, 1)
      end
      r = _add(r, 1)
    end
    return model
  end
  def predict(model, x)
    score = 0.0
    i = 0
    while i < _len(model)
      s = (__tmp17 = model; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))
      if (__tmp18 = x; __tmp18.is_a?(Hash) ? __tmp18[s.feature] : _idx(__tmp18, s.feature)) < s.threshold
        score = _add(score, s.left)
      else
        score = _add(score, s.right)
      end
      i = _add(i, 1)
    end
    return score
  end
  def main()
    features = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]]
    targets = [0, 0, 1, 1]
    model = boost(features, targets, 3)
    out = ""
    i = 0
    while i < _len(features)
      s = predict(model, (__tmp19 = features; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)))
      label = (s >= 0.5 ? 1 : 0)
      if _eq(i, 0)
        out = _str(label)
      else
        out = _add(_add(out, " "), _str(label))
      end
      i = _add(i, 1)
    end
    puts(out)
  end
  Object.send(:remove_const, :Stump) if Object.const_defined?(:Stump)
  Object.const_set(:Stump, Struct.new(:feature, :threshold, :left, :right, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
