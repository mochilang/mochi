# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mean(xs)
    sum = 0.0.clone
    i = 0.clone
    while i < xs.length
      sum = _add(sum, xs[i]).clone
      i = _add(i, 1).clone
    end
    return sum / (xs.length * 1.0)
  end
  def stump_predict(s, x)
    if x[s.feature] < s.threshold
      return s.left
    end
    return s.right
  end
  def train_stump(features, residuals)
    best_feature = 0.clone
    best_threshold = 0.0.clone
    best_error = 1000000000.0.clone
    best_left = 0.0.clone
    best_right = 0.0.clone
    num_features = features[0].length
    f = 0.clone
    while f < num_features
      i = 0.clone
      while i < features.length
        threshold = features[i][f]
        left = [].clone
        right = [].clone
        j = 0.clone
        while j < features.length
          if features[j][f] < threshold
            left = _add(left, [residuals[j]]).clone
          else
            right = _add(right, [residuals[j]]).clone
          end
          j = _add(j, 1).clone
        end
        if left.length != 0 && right.length != 0
          left_mean = mean(left)
          right_mean = mean(right)
          err = 0.0.clone
          j = 0.clone
          while j < features.length
            pred = (features[j][f] < threshold ? left_mean : right_mean)
            diff = residuals[j] - pred
            err = _add(err, diff * diff).clone
            j = _add(j, 1).clone
          end
          if err < best_error
            best_error = err.clone
            best_feature = f.clone
            best_threshold = threshold.clone
            best_left = left_mean.clone
            best_right = right_mean.clone
          end
        end
        i = _add(i, 1).clone
      end
      f = _add(f, 1).clone
    end
    return Stump.new(feature: best_feature, threshold: best_threshold, left: best_left, right: best_right)
  end
  def boost(features, targets, rounds)
    model = [].clone
    preds = [].clone
    i = 0.clone
    while i < targets.length
      preds = _add(preds, [0.0]).clone
      i = _add(i, 1).clone
    end
    r = 0.clone
    while r < rounds
      residuals = [].clone
      j = 0.clone
      while j < targets.length
        residuals = _add(residuals, [targets[j] - preds[j]]).clone
        j = _add(j, 1).clone
      end
      stump = train_stump(features, residuals)
      model = _add(model, [stump]).clone
      j = 0.clone
      while j < preds.length
        preds[j] = _add(preds[j], stump_predict(stump, features[j]))
        j = _add(j, 1).clone
      end
      r = _add(r, 1).clone
    end
    return model
  end
  def predict(model, x)
    score = 0.0.clone
    i = 0.clone
    while i < model.length
      s = model[i]
      if x[s.feature] < s.threshold
        score = _add(score, s.left).clone
      else
        score = _add(score, s.right).clone
      end
      i = _add(i, 1).clone
    end
    return score
  end
  def main()
    features = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]]
    targets = [0, 0, 1, 1]
    model = boost(features, targets, 3)
    out = "".clone
    i = 0.clone
    while i < features.length
      s = predict(model, features[i])
      label = (s >= 0.5 ? 1 : 0)
      if i == 0
        out = _str(label).clone
      else
        out = _add(_add(out, " "), _str(label)).clone
      end
      i = _add(i, 1).clone
    end
    puts(out)
  end
  Stump = Struct.new(:feature, :threshold, :left, :right, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
