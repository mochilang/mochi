# Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrt(x)
    guess = (x > 1.0 ? x / 2.0 : 1.0)
    i = 0
    while i < 20
      guess = 0.5 * (_add(guess, x / guess))
      i = _add(i, 1)
    end
    return guess
  end
  def mean(xs)
    sum = 0.0
    i = 0
    while i < _len(xs)
      sum = _add(sum, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return sum / _len(xs)
  end
  def standardize(data)
    n_samples = _len(data)
    n_features = _len((__tmp2 = data; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
    means = []
    stds = []
    j = 0
    while j < n_features
      column = []
      i = 0
      while i < n_samples
        column = _append(column, (__tmp3 = (__tmp4 = data; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)))
        i = _add(i, 1)
      end
      m = mean(column)
      means = _append(means, m)
      variance = 0.0
      k = 0
      while k < n_samples
        diff = (__tmp5 = column; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k)) - m
        variance = _add(variance, diff * diff)
        k = _add(k, 1)
      end
      stds = _append(stds, sqrt(variance / (n_samples - 1)))
      j = _add(j, 1)
    end
    standardized = []
    r = 0
    while r < n_samples
      row = []
      c = 0
      while c < n_features
        row = _append(row, ((__tmp6 = (__tmp7 = data; __tmp7.is_a?(Hash) ? __tmp7[r] : _idx(__tmp7, r)); __tmp6.is_a?(Hash) ? __tmp6[c] : _idx(__tmp6, c)) - (__tmp8 = means; __tmp8.is_a?(Hash) ? __tmp8[c] : _idx(__tmp8, c))) / (__tmp9 = stds; __tmp9.is_a?(Hash) ? __tmp9[c] : _idx(__tmp9, c)))
        c = _add(c, 1)
      end
      standardized = _append(standardized, row)
      r = _add(r, 1)
    end
    return standardized
  end
  def covariance_matrix(data)
    n_samples = _len(data)
    n_features = _len((__tmp10 = data; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)))
    cov = []
    i = 0
    while i < n_features
      row = []
      j = 0
      while j < n_features
        sum = 0.0
        k = 0
        while k < n_samples
          sum = _add(sum, (__tmp11 = (__tmp12 = data; __tmp12.is_a?(Hash) ? __tmp12[k] : _idx(__tmp12, k)); __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)) * (__tmp13 = (__tmp14 = data; __tmp14.is_a?(Hash) ? __tmp14[k] : _idx(__tmp14, k)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)))
          k = _add(k, 1)
        end
        row = _append(row, sum / (n_samples - 1))
        j = _add(j, 1)
      end
      cov = _append(cov, row)
      i = _add(i, 1)
    end
    return cov
  end
  def normalize(vec)
    sum = 0.0
    i = 0
    while i < _len(vec)
      sum = _add(sum, (__tmp15 = vec; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)) * (__tmp16 = vec; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)))
      i = _add(i, 1)
    end
    n = sqrt(sum)
    res = []
    j = 0
    while j < _len(vec)
      res = _append(res, (__tmp17 = vec; __tmp17.is_a?(Hash) ? __tmp17[j] : _idx(__tmp17, j)) / n)
      j = _add(j, 1)
    end
    return res
  end
  def eigen_decomposition_2x2(matrix)
    a = (__tmp18 = (__tmp19 = matrix; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0)); __tmp18.is_a?(Hash) ? __tmp18[0] : _idx(__tmp18, 0))
    b = (__tmp20 = (__tmp21 = matrix; __tmp21.is_a?(Hash) ? __tmp21[0] : _idx(__tmp21, 0)); __tmp20.is_a?(Hash) ? __tmp20[1] : _idx(__tmp20, 1))
    c = (__tmp22 = (__tmp23 = matrix; __tmp23.is_a?(Hash) ? __tmp23[1] : _idx(__tmp23, 1)); __tmp22.is_a?(Hash) ? __tmp22[1] : _idx(__tmp22, 1))
    diff = a - c
    discriminant = sqrt(_add(diff * diff, 4.0 * b * b))
    lambda1 = (_add(_add(a, c), discriminant)) / 2.0
    lambda2 = (_add(a, c) - discriminant) / 2.0
    v1 = []
    v2 = []
    if !_eq(b, 0.0)
      v1 = normalize([lambda1 - c, b])
      v2 = normalize([lambda2 - c, b])
    else
      v1 = [1.0, 0.0]
      v2 = [0.0, 1.0]
    end
    eigenvalues = [lambda1, lambda2]
    eigenvectors = [v1, v2]
    if (__tmp24 = eigenvalues; __tmp24.is_a?(Hash) ? __tmp24[0] : _idx(__tmp24, 0)) < (__tmp25 = eigenvalues; __tmp25.is_a?(Hash) ? __tmp25[1] : _idx(__tmp25, 1))
      tmp_val = (__tmp26 = eigenvalues; __tmp26.is_a?(Hash) ? __tmp26[0] : _idx(__tmp26, 0))
      eigenvalues[0] = (__tmp27 = eigenvalues; __tmp27.is_a?(Hash) ? __tmp27[1] : _idx(__tmp27, 1))
      eigenvalues[1] = tmp_val
      tmp_vec = (__tmp28 = eigenvectors; __tmp28.is_a?(Hash) ? __tmp28[0] : _idx(__tmp28, 0))
      eigenvectors[0] = (__tmp29 = eigenvectors; __tmp29.is_a?(Hash) ? __tmp29[1] : _idx(__tmp29, 1))
      eigenvectors[1] = tmp_vec
    end
    return Eigen.new(values: eigenvalues, vectors: eigenvectors)
  end
  def transpose(matrix)
    rows = _len(matrix)
    cols = _len((__tmp30 = matrix; __tmp30.is_a?(Hash) ? __tmp30[0] : _idx(__tmp30, 0)))
    trans = []
    i = 0
    while i < cols
      row = []
      j = 0
      while j < rows
        row = _append(row, (__tmp31 = (__tmp32 = matrix; __tmp32.is_a?(Hash) ? __tmp32[j] : _idx(__tmp32, j)); __tmp31.is_a?(Hash) ? __tmp31[i] : _idx(__tmp31, i)))
        j = _add(j, 1)
      end
      trans = _append(trans, row)
      i = _add(i, 1)
    end
    return trans
  end
  def matrix_multiply(a, b)
    rows_a = _len(a)
    cols_a = _len((__tmp33 = a; __tmp33.is_a?(Hash) ? __tmp33[0] : _idx(__tmp33, 0)))
    rows_b = _len(b)
    cols_b = _len((__tmp34 = b; __tmp34.is_a?(Hash) ? __tmp34[0] : _idx(__tmp34, 0)))
    if !_eq(cols_a, rows_b)
      panic("Incompatible matrices")
    end
    result = []
    i = 0
    while i < rows_a
      row = []
      j = 0
      while j < cols_b
        sum = 0.0
        k = 0
        while k < cols_a
          sum = _add(sum, (__tmp35 = (__tmp36 = a; __tmp36.is_a?(Hash) ? __tmp36[i] : _idx(__tmp36, i)); __tmp35.is_a?(Hash) ? __tmp35[k] : _idx(__tmp35, k)) * (__tmp37 = (__tmp38 = b; __tmp38.is_a?(Hash) ? __tmp38[k] : _idx(__tmp38, k)); __tmp37.is_a?(Hash) ? __tmp37[j] : _idx(__tmp37, j)))
          k = _add(k, 1)
        end
        row = _append(row, sum)
        j = _add(j, 1)
      end
      result = _append(result, row)
      i = _add(i, 1)
    end
    return result
  end
  def apply_pca(data, n_components)
    standardized = standardize(data)
    cov = covariance_matrix(standardized)
    eig = eigen_decomposition_2x2(cov)
    eigenvalues = eig.values
    eigenvectors = eig.vectors
    components = transpose(eigenvectors)
    transformed = matrix_multiply(standardized, components)
    total = _add((__tmp39 = eigenvalues; __tmp39.is_a?(Hash) ? __tmp39[0] : _idx(__tmp39, 0)), (__tmp40 = eigenvalues; __tmp40.is_a?(Hash) ? __tmp40[1] : _idx(__tmp40, 1)))
    ratios = []
    i = 0
    while i < n_components
      ratios = _append(ratios, (__tmp41 = eigenvalues; __tmp41.is_a?(Hash) ? __tmp41[i] : _idx(__tmp41, i)) / total)
      i = _add(i, 1)
    end
    return PCAResult.new(transformed: transformed, variance_ratio: ratios)
  end
  Object.send(:remove_const, :PCAResult) if Object.const_defined?(:PCAResult)
  Object.const_set(:PCAResult, Struct.new(:transformed, :variance_ratio, keyword_init: true))
  Object.send(:remove_const, :Eigen) if Object.const_defined?(:Eigen)
  Object.const_set(:Eigen, Struct.new(:values, :vectors, keyword_init: true))
  $data = [[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2.0, 1.6], [1.0, 1.1], [1.5, 1.6], [1.1, 0.9]]
  $result = apply_pca($data, 2)
  puts("Transformed Data (first 5 rows):")
  $idx = 0
  while $idx < 5
    puts(((x = (__tmp42 = $result.transformed; __tmp42.is_a?(Hash) ? __tmp42[$idx] : _idx(__tmp42, $idx))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    $idx = _add($idx, 1)
  end
  puts("Explained Variance Ratio:")
  puts(((x = $result.variance_ratio); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
