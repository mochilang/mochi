# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrt(x)
    guess = (x > 1 ? x / 2 : 1).clone
    i = 0.clone
    while i < 20
      guess = 0.5 * (_add(guess, x / guess)).clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def mean(xs)
    sum = 0.clone
    i = 0.clone
    while i < xs.length
      sum = _add(sum, xs[i]).clone
      i = _add(i, 1).clone
    end
    return sum / xs.length
  end
  def standardize(data)
    n_samples = data.length
    n_features = data[0].length
    means = [].clone
    stds = [].clone
    j = 0.clone
    while j < n_features
      column = [].clone
      i = 0.clone
      while i < n_samples
        column = (column << (data[i][j])).clone
        i = _add(i, 1).clone
      end
      m = mean(column)
      means = (means << (m)).clone
      variance = 0.clone
      k = 0.clone
      while k < n_samples
        diff = column[k] - m
        variance = _add(variance, diff * diff).clone
        k = _add(k, 1).clone
      end
      stds = (stds << (sqrt(variance / (n_samples - 1)))).clone
      j = _add(j, 1).clone
    end
    standardized = [].clone
    r = 0.clone
    while r < n_samples
      row = [].clone
      c = 0.clone
      while c < n_features
        row = (row << ((data[r][c] - means[c]) / stds[c])).clone
        c = _add(c, 1).clone
      end
      standardized = (standardized << (row)).clone
      r = _add(r, 1).clone
    end
    return standardized
  end
  def covariance_matrix(data)
    n_samples = data.length
    n_features = data[0].length
    cov = [].clone
    i = 0.clone
    while i < n_features
      row = [].clone
      j = 0.clone
      while j < n_features
        sum = 0.clone
        k = 0.clone
        while k < n_samples
          sum = _add(sum, data[k][i] * data[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum / (n_samples - 1))).clone
        j = _add(j, 1).clone
      end
      cov = (cov << (row)).clone
      i = _add(i, 1).clone
    end
    return cov
  end
  def normalize(vec)
    sum = 0.clone
    i = 0.clone
    while i < vec.length
      sum = _add(sum, vec[i] * vec[i]).clone
      i = _add(i, 1).clone
    end
    n = sqrt(sum)
    res = [].clone
    j = 0.clone
    while j < vec.length
      res = (res << (vec[j] / n)).clone
      j = _add(j, 1).clone
    end
    return res
  end
  def eigen_decomposition_2x2(matrix)
    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[1][1]
    diff = a - c
    discriminant = sqrt(_add(diff * diff, 4 * b * b))
    lambda1 = (_add(_add(a, c), discriminant)) / 2
    lambda2 = (_add(a, c) - discriminant) / 2
    v1 = [].clone
    v2 = [].clone
    if b != 0
      v1 = normalize([lambda1 - c, b]).clone
      v2 = normalize([lambda2 - c, b]).clone
    else
      v1 = [1, 0].clone
      v2 = [0, 1].clone
    end
    eigenvalues = [lambda1, lambda2].clone
    eigenvectors = [v1, v2].clone
    if eigenvalues[0] < eigenvalues[1]
      tmp_val = eigenvalues[0]
      eigenvalues[0] = eigenvalues[1]
      eigenvalues[1] = tmp_val
      tmp_vec = eigenvectors[0]
      eigenvectors[0] = eigenvectors[1]
      eigenvectors[1] = tmp_vec
    end
    return Eigen.new(values: eigenvalues, vectors: eigenvectors)
  end
  def transpose(matrix)
    rows = matrix.length
    cols = matrix[0].length
    trans = [].clone
    i = 0.clone
    while i < cols
      row = [].clone
      j = 0.clone
      while j < rows
        row = (row << (matrix[j][i])).clone
        j = _add(j, 1).clone
      end
      trans = (trans << (row)).clone
      i = _add(i, 1).clone
    end
    return trans
  end
  def matrix_multiply(a, b)
    rows_a = a.length
    cols_a = a[0].length
    rows_b = b.length
    cols_b = b[0].length
    if cols_a != rows_b
      panic("Incompatible matrices")
    end
    result = [].clone
    i = 0.clone
    while i < rows_a
      row = [].clone
      j = 0.clone
      while j < cols_b
        sum = 0.clone
        k = 0.clone
        while k < cols_a
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def apply_pca(data, n_components)
    standardized = standardize(data)
    cov = covariance_matrix(standardized)
    eig = eigen_decomposition_2x2(cov)
    eigenvalues = eig.values
    eigenvectors = eig.vectors
    components = transpose(eigenvectors)
    transformed = matrix_multiply(standardized, components)
    total = _add(eigenvalues[0], eigenvalues[1])
    ratios = [].clone
    i = 0.clone
    while i < n_components
      ratios = (ratios << (eigenvalues[i] / total)).clone
      i = _add(i, 1).clone
    end
    return PCAResult.new(transformed: transformed, variance_ratio: ratios)
  end
  PCAResult = Struct.new(:transformed, :variance_ratio, keyword_init: true)
  Eigen = Struct.new(:values, :vectors, keyword_init: true)
  $data = [[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]]
  $result = apply_pca($data, 2)
  puts("Transformed Data (first 5 rows):")
  $idx = 0.clone
  while $idx < 5
    puts(((x = $result.transformed[$idx]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    $idx = _add($idx, 1).clone
  end
  puts("Explained Variance Ratio:")
  puts(((x = $result.variance_ratio); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
