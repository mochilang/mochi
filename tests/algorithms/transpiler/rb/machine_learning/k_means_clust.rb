# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def distance_sq(a, b)
    sum = 0.0
    (0...a.length).each do |i|
      diff = a[i] - b[i]
      sum = _add(sum, diff * diff)
    end
    return sum
  end
  def assign_clusters(data, centroids)
    assignments = []
    (0...data.length).each do |i|
      best_idx = 0
      best = distance_sq(data[i], centroids[0])
      (1...centroids.length).each do |j|
        dist = distance_sq(data[i], centroids[j])
        if dist < best
          best = dist
          best_idx = j
        end
      end
      assignments = (assignments + [best_idx])
    end
    return assignments
  end
  def revise_centroids(data, k, assignment)
    dim = data[0].length
    sums = []
    counts = []
    (0...k).each do |i|
      row = []
      (0...dim).each do |j|
        row = (row + [0.0])
      end
      sums = (sums + [row])
      counts = (counts + [0])
    end
    (0...data.length).each do |i|
      c = assignment[i]
      counts[c] = _add(counts[c], 1)
      (0...dim).each do |j|
        sums[c][j] = _add(sums[c][j], data[i][j])
      end
    end
    centroids = []
    (0...k).each do |i|
      row = []
      if counts[i] > 0
        (0...dim).each do |j|
          row = (row + [sums[i][j] / ((counts[i]).to_f)])
        end
      else
        (0...dim).each do |j|
          row = (row + [0.0])
        end
      end
      centroids = (centroids + [row])
    end
    return centroids
  end
  def compute_heterogeneity(data, centroids, assignment)
    total = 0.0
    (0...data.length).each do |i|
      c = assignment[i]
      total = _add(total, distance_sq(data[i], centroids[c]))
    end
    return total
  end
  def lists_equal(a, b)
    if !_eq(a.length, b.length)
      return false
    end
    (0...a.length).each do |i|
      if !_eq(a[i], b[i])
        return false
      end
    end
    return true
  end
  def kmeans(data, k, initial_centroids, max_iter)
    centroids = initial_centroids
    assignment = []
    prev = []
    heterogeneity = []
    iter = 0
    while iter < max_iter
      assignment = assign_clusters(data, centroids)
      centroids = revise_centroids(data, k, assignment)
      h = compute_heterogeneity(data, centroids, assignment)
      heterogeneity = (heterogeneity + [h])
      if iter > 0 && lists_equal(prev, assignment)
        break
      end
      prev = assignment
      iter = _add(iter, 1)
    end
    return KMeansResult.new(centroids: centroids, assignments: assignment, heterogeneity: heterogeneity)
  end
  KMeansResult = Struct.new(:centroids, :assignments, :heterogeneity, keyword_init: true)
  $data = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]
  $k = 3
  $initial_centroids = [$data[0], $data[2], $data[5]]
  $result = kmeans($data, $k, $initial_centroids, 10)
  puts(((x = $result.centroids); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = $result.assignments); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = $result.heterogeneity); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
