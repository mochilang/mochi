# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def distance_sq(a, b)
    sum = 0.0
    (0..._len(a)).each do |i|
      diff = (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      sum = _add(sum, diff * diff)
    end
    return sum
  end
  def assign_clusters(data, centroids)
    assignments = []
    (0..._len(data)).each do |i|
      best_idx = 0
      best = distance_sq((__tmp3 = data; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), (__tmp4 = centroids; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)))
      (1..._len(centroids)).each do |j|
        dist = distance_sq((__tmp5 = data; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)), (__tmp6 = centroids; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)))
        if dist < best
          best = dist
          best_idx = j
        end
      end
      assignments = _append(assignments, best_idx)
    end
    return assignments
  end
  def revise_centroids(data, k, assignment)
    dim = _len((__tmp7 = data; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)))
    sums = []
    counts = []
    (0...k).each do |i|
      row = []
      (0...dim).each do |j|
        row = _append(row, 0.0)
      end
      sums = _append(sums, row)
      counts = _append(counts, 0)
    end
    (0..._len(data)).each do |i|
      c = (__tmp8 = assignment; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      counts[c] = _add((__tmp9 = counts; __tmp9.is_a?(Hash) ? __tmp9[c] : _idx(__tmp9, c)), 1)
      (0...dim).each do |j|
        (__tmp10 = sums; __tmp10.is_a?(Hash) ? __tmp10[c] : _idx(__tmp10, c))[j] = _add((__tmp11 = (__tmp12 = sums; __tmp12.is_a?(Hash) ? __tmp12[c] : _idx(__tmp12, c)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j)), (__tmp13 = (__tmp14 = data; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)))
      end
    end
    centroids = []
    (0...k).each do |i|
      row = []
      if (__tmp15 = counts; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)) > 0
        (0...dim).each do |j|
          row = _append(row, (__tmp16 = (__tmp17 = sums; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)); __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j)) / (((__tmp18 = counts; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))).to_f))
        end
      else
        (0...dim).each do |j|
          row = _append(row, 0.0)
        end
      end
      centroids = _append(centroids, row)
    end
    return centroids
  end
  def compute_heterogeneity(data, centroids, assignment)
    total = 0.0
    (0..._len(data)).each do |i|
      c = (__tmp19 = assignment; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))
      total = _add(total, distance_sq((__tmp20 = data; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), (__tmp21 = centroids; __tmp21.is_a?(Hash) ? __tmp21[c] : _idx(__tmp21, c))))
    end
    return total
  end
  def lists_equal(a, b)
    if !_eq(_len(a), _len(b))
      return false
    end
    (0..._len(a)).each do |i|
      if !_eq((__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)), (__tmp23 = b; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i)))
        return false
      end
    end
    return true
  end
  def kmeans(data, k, initial_centroids, max_iter)
    centroids = initial_centroids
    assignment = []
    prev = []
    heterogeneity = []
    iter = 0
    while iter < max_iter
      assignment = assign_clusters(data, centroids)
      centroids = revise_centroids(data, k, assignment)
      h = compute_heterogeneity(data, centroids, assignment)
      heterogeneity = _append(heterogeneity, h)
      if iter > 0 && lists_equal(prev, assignment)
        break
      end
      prev = assignment
      iter = _add(iter, 1)
    end
    return KMeansResult.new(centroids: centroids, assignments: assignment, heterogeneity: heterogeneity)
  end
  Object.send(:remove_const, :KMeansResult) if Object.const_defined?(:KMeansResult)
  Object.const_set(:KMeansResult, Struct.new(:centroids, :assignments, :heterogeneity, keyword_init: true))
  $data = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]
  $k = 3
  $initial_centroids = [(__tmp24 = $data; __tmp24.is_a?(Hash) ? __tmp24[0] : _idx(__tmp24, 0)), (__tmp25 = $data; __tmp25.is_a?(Hash) ? __tmp25[2] : _idx(__tmp25, 2)), (__tmp26 = $data; __tmp26.is_a?(Hash) ? __tmp26[5] : _idx(__tmp26, 5))]
  $result = kmeans($data, $k, $initial_centroids, 10)
  puts(((x = $result.centroids); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = $result.assignments); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = $result.heterogeneity); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
