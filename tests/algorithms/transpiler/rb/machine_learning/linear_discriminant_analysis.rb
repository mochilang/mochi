# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return ((rand()).to_f) / 2.147483648e+09
  end
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def cos(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y4 = y2 * y2
    y6 = y4 * y2
    return _add(1.0 - y2 / 2.0, y4 / 24.0) - y6 / 720.0
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def gaussian_distribution(mean, std_dev, instance_count)
    res = []
    i = 0
    while i < instance_count
      u1 = random()
      u2 = random()
      r = sqrtApprox(-2.0 * ln(u1))
      theta = $TWO_PI * u2
      z = r * cos(theta)
      res = _append(res, _add(mean, z * std_dev))
      i = _add(i, 1)
    end
    return res
  end
  def y_generator(class_count, instance_count)
    res = []
    k = 0
    while k < class_count
      i = 0
      while i < (__tmp1 = instance_count; __tmp1.is_a?(Hash) ? __tmp1[k] : _idx(__tmp1, k))
        res = _append(res, k)
        i = _add(i, 1)
      end
      k = _add(k, 1)
    end
    return res
  end
  def calculate_mean(instance_count, items)
    total = 0.0
    i = 0
    while i < instance_count
      total = _add(total, (__tmp2 = items; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return total / ((instance_count).to_f)
  end
  def calculate_probabilities(instance_count, total_count)
    return ((instance_count).to_f) / ((total_count).to_f)
  end
  def calculate_variance(items, means, total_count)
    squared_diff = []
    i = 0
    while i < _len(items)
      j = 0
      while j < _len((__tmp3 = items; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
        diff = (__tmp4 = (__tmp5 = items; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)) - (__tmp6 = means; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
        squared_diff = _append(squared_diff, diff * diff)
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    sum_sq = 0.0
    k = 0
    while k < _len(squared_diff)
      sum_sq = _add(sum_sq, (__tmp7 = squared_diff; __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)))
      k = _add(k, 1)
    end
    n_classes = _len(means)
    return (1.0 / (((total_count - n_classes)).to_f)) * sum_sq
  end
  def predict_y_values(x_items, means, variance, probabilities)
    results = []
    i = 0
    while i < _len(x_items)
      j = 0
      while j < _len((__tmp8 = x_items; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
        temp = []
        k = 0
        while k < _len(x_items)
          discr = _add((__tmp9 = (__tmp10 = x_items; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)) * ((__tmp11 = means; __tmp11.is_a?(Hash) ? __tmp11[k] : _idx(__tmp11, k)) / variance) - ((__tmp12 = means; __tmp12.is_a?(Hash) ? __tmp12[k] : _idx(__tmp12, k)) * (__tmp13 = means; __tmp13.is_a?(Hash) ? __tmp13[k] : _idx(__tmp13, k))) / (2.0 * variance), ln((__tmp14 = probabilities; __tmp14.is_a?(Hash) ? __tmp14[k] : _idx(__tmp14, k))))
          temp = _append(temp, discr)
          k = _add(k, 1)
        end
        max_idx = 0
        max_val = (__tmp15 = temp; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0))
        t = 1
        while t < _len(temp)
          if (__tmp16 = temp; __tmp16.is_a?(Hash) ? __tmp16[t] : _idx(__tmp16, t)) > max_val
            max_val = (__tmp17 = temp; __tmp17.is_a?(Hash) ? __tmp17[t] : _idx(__tmp17, t))
            max_idx = t
          end
          t = _add(t, 1)
        end
        results = _append(results, max_idx)
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return results
  end
  def accuracy(actual_y, predicted_y)
    correct = 0
    i = 0
    while i < _len(actual_y)
      if _eq((__tmp18 = actual_y; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)), (__tmp19 = predicted_y; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)))
        correct = _add(correct, 1)
      end
      i = _add(i, 1)
    end
    return ((correct).to_f) / ((_len(actual_y)).to_f) * 100.0
  end
  def main()
    $seed = 1
    counts = [20, 20, 20]
    means = [5.0, 10.0, 15.0]
    std_dev = 1.0
    x = []
    i = 0
    while i < _len(counts)
      x = _append(x, gaussian_distribution((__tmp20 = means; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), std_dev, (__tmp21 = counts; __tmp21.is_a?(Hash) ? __tmp21[i] : _idx(__tmp21, i))))
      i = _add(i, 1)
    end
    y = y_generator(_len(counts), counts)
    actual_means = []
    i = 0
    while i < _len(counts)
      actual_means = _append(actual_means, calculate_mean((__tmp22 = counts; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)), (__tmp23 = x; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i))))
      i = _add(i, 1)
    end
    total_count = 0
    i = 0
    while i < _len(counts)
      total_count = _add(total_count, (__tmp24 = counts; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)))
      i = _add(i, 1)
    end
    probabilities = []
    i = 0
    while i < _len(counts)
      probabilities = _append(probabilities, calculate_probabilities((__tmp25 = counts; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i)), total_count))
      i = _add(i, 1)
    end
    variance = calculate_variance(x, actual_means, total_count)
    predicted = predict_y_values(x, actual_means, variance, probabilities)
    puts(((x = predicted); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(accuracy(y, predicted))
  end
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $seed = 1
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
