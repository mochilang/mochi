# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return ((rand()).to_f) / 2147483648.0
  end
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def cos(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y4 = y2 * y2
    y6 = y4 * y2
    return _add(1.0 - y2 / 2.0, y4 / 24.0) - y6 / 720.0
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def gaussian_distribution(mean, std_dev, instance_count)
    res = []
    i = 0
    while i < instance_count
      u1 = random()
      u2 = random()
      r = sqrtApprox(-2.0 * ln(u1))
      theta = $TWO_PI * u2
      z = r * cos(theta)
      res = (res + [_add(mean, z * std_dev)])
      i = _add(i, 1)
    end
    return res
  end
  def y_generator(class_count, instance_count)
    res = []
    k = 0
    while k < class_count
      i = 0
      while i < instance_count[k]
        res = (res + [k])
        i = _add(i, 1)
      end
      k = _add(k, 1)
    end
    return res
  end
  def calculate_mean(instance_count, items)
    total = 0.0
    i = 0
    while i < instance_count
      total = _add(total, items[i])
      i = _add(i, 1)
    end
    return total / ((instance_count).to_f)
  end
  def calculate_probabilities(instance_count, total_count)
    return ((instance_count).to_f) / ((total_count).to_f)
  end
  def calculate_variance(items, means, total_count)
    squared_diff = []
    i = 0
    while i < items.length
      j = 0
      while j < items[i].length
        diff = items[i][j] - means[i]
        squared_diff = (squared_diff + [diff * diff])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    sum_sq = 0.0
    k = 0
    while k < squared_diff.length
      sum_sq = _add(sum_sq, squared_diff[k])
      k = _add(k, 1)
    end
    n_classes = means.length
    return (1.0 / (((total_count - n_classes)).to_f)) * sum_sq
  end
  def predict_y_values(x_items, means, variance, probabilities)
    results = []
    i = 0
    while i < x_items.length
      j = 0
      while j < x_items[i].length
        temp = []
        k = 0
        while k < x_items.length
          discr = _add(x_items[i][j] * (means[k] / variance) - (means[k] * means[k]) / (2.0 * variance), ln(probabilities[k]))
          temp = (temp + [discr])
          k = _add(k, 1)
        end
        max_idx = 0
        max_val = temp[0]
        t = 1
        while t < temp.length
          if temp[t] > max_val
            max_val = temp[t]
            max_idx = t
          end
          t = _add(t, 1)
        end
        results = (results + [max_idx])
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return results
  end
  def accuracy(actual_y, predicted_y)
    correct = 0
    i = 0
    while i < actual_y.length
      if _eq(actual_y[i], predicted_y[i])
        correct = _add(correct, 1)
      end
      i = _add(i, 1)
    end
    return ((correct).to_f) / ((actual_y.length).to_f) * 100.0
  end
  def main()
    $seed = 1
    counts = [20, 20, 20]
    means = [5.0, 10.0, 15.0]
    std_dev = 1.0
    x = []
    i = 0
    while i < counts.length
      x = (x + [gaussian_distribution(means[i], std_dev, counts[i])])
      i = _add(i, 1)
    end
    y = y_generator(counts.length, counts)
    actual_means = []
    i = 0
    while i < counts.length
      actual_means = (actual_means + [calculate_mean(counts[i], x[i])])
      i = _add(i, 1)
    end
    total_count = 0
    i = 0
    while i < counts.length
      total_count = _add(total_count, counts[i])
      i = _add(i, 1)
    end
    probabilities = []
    i = 0
    while i < counts.length
      probabilities = (probabilities + [calculate_probabilities(counts[i], total_count)])
      i = _add(i, 1)
    end
    variance = calculate_variance(x, actual_means, total_count)
    predicted = predict_y_values(x, actual_means, variance, probabilities)
    puts(((x = predicted); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(accuracy(y, predicted))
  end
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $seed = 1
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
