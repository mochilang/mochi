# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    result = 1.0
    i = 0
    while i < n
      result = result * 10.0
      i = _add(i, 1)
    end
    return result
  end
  def round(x, n)
    m = pow10(n)
    y = ((_add(x * m, 0.5)).floor()).to_f
    return y / m
  end
  def sqrtApprox(x)
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def mean(data)
    total = 0.0
    i = 0
    n = data.length
    while i < n
      total = _add(total, data[i])
      i = _add(i, 1)
    end
    return total / ((n).to_f)
  end
  def stdev(data)
    n = data.length
    if n <= 1
      panic("data length must be > 1")
    end
    m = mean(data)
    sum_sq = 0.0
    i = 0
    while i < n
      diff = data[i] - m
      sum_sq = _add(sum_sq, diff * diff)
      i = _add(i, 1)
    end
    return sqrtApprox(sum_sq / (((n - 1)).to_f))
  end
  def normalization(data, ndigits)
    x_min = (data.min()).to_f
    x_max = (data.max()).to_f
    denom = x_max - x_min
    result = []
    i = 0
    n = data.length
    while i < n
      norm = (data[i] - x_min) / denom
      result = (result + [round(norm, ndigits)])
      i = _add(i, 1)
    end
    return result
  end
  def standardization(data, ndigits)
    mu = mean(data)
    sigma = stdev(data)
    result = []
    i = 0
    n = data.length
    while i < n
      z = (data[i] - mu) / sigma
      result = (result + [round(z, ndigits)])
      i = _add(i, 1)
    end
    return result
  end
  puts(((x = normalization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = normalization([5.0, 10.0, 15.0, 20.0, 25.0], 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = standardization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = standardization([5.0, 10.0, 15.0, 20.0, 25.0], 3)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
