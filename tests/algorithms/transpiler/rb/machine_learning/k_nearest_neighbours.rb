# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0
      return 0
    end
    guess = x.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def make_knn(train_data, train_target, class_labels)
    items = [].clone
    i = 0.clone
    while i < train_data.length
      pl = PointLabel.new(point: train_data[i], label: train_target[i])
      items = (items << (pl)).clone
      i = _add(i, 1).clone
    end
    return KNN.new(data: items, labels: class_labels)
  end
  def euclidean_distance(a, b)
    sum = 0.clone
    i = 0.clone
    while i < a.length
      diff = a[i] - b[i]
      sum = _add(sum, diff * diff).clone
      i = _add(i, 1).clone
    end
    return sqrtApprox(sum)
  end
  def classify(knn, pred_point, k)
    distances = [].clone
    i = 0.clone
    while i < knn.data.length
      d = euclidean_distance(knn.data[i].point, pred_point)
      distances = (distances << (DistLabel.new(dist: d, label: knn.data[i].label))).clone
      i = _add(i, 1).clone
    end
    votes = [].clone
    count = 0.clone
    while count < k
      min_index = 0.clone
      j = 1.clone
      while j < distances.length
        if distances[j]["dist"] < distances[min_index]["dist"]
          min_index = j.clone
        end
        j = _add(j, 1).clone
      end
      votes = (votes << (distances[min_index]["label"])).clone
      distances[min_index]["dist"] = 1
      e18
      count = _add(count, 1).clone
    end
    tally = [].clone
    t = 0.clone
    while t < knn.labels.length
      tally = (tally << (0)).clone
      t = _add(t, 1).clone
    end
    v = 0.clone
    while v < votes.length
      lbl = votes[v]
      tally[lbl] = _add(tally[lbl], 1)
      v = _add(v, 1).clone
    end
    max_idx = 0.clone
    m = 1.clone
    while m < tally.length
      if tally[m] > tally[max_idx]
        max_idx = m.clone
      end
      m = _add(m, 1).clone
    end
    return knn.labels[max_idx]
  end
  PointLabel = Struct.new(:point, :label, keyword_init: true)
  KNN = Struct.new(:data, :labels, keyword_init: true)
  DistLabel = Struct.new(:dist, :label, keyword_init: true)
  $train_X = [[0, 0], [1, 0], [0, 1], [0.5, 0.5], [3, 3], [2, 3], [3, 2]]
  $train_y = [0, 0, 0, 0, 1, 1, 1]
  $classes = ["A", "B"]
  $knn = make_knn($train_X, $train_y, $classes)
  $point = [1.2, 1.2]
  puts(classify($knn, $point, 5))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
