# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def make_knn(train_data, train_target, class_labels)
    items = []
    i = 0
    while i < _len(train_data)
      pl = PointLabel.new(point: (__tmp1 = train_data; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), label: (__tmp2 = train_target; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      items = _append(items, pl)
      i = _add(i, 1)
    end
    return KNN.new(data: items, labels: class_labels)
  end
  def euclidean_distance(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      diff = (__tmp3 = a; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) - (__tmp4 = b; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return sqrtApprox(sum)
  end
  def classify(knn, pred_point, k)
    distances = []
    i = 0
    while i < _len(knn.data)
      d = euclidean_distance((__tmp5 = knn.data; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)).point, pred_point)
      distances = _append(distances, DistLabel.new(dist: d, label: (__tmp6 = knn.data; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)).label))
      i = _add(i, 1)
    end
    votes = []
    count = 0
    while count < k
      min_index = 0
      j = 1
      while j < _len(distances)
        if (__tmp7 = (__tmp8 = distances; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)); __tmp7.is_a?(Hash) ? __tmp7["dist"] : _idx(__tmp7, "dist")) < (__tmp9 = (__tmp10 = distances; __tmp10.is_a?(Hash) ? __tmp10[min_index] : _idx(__tmp10, min_index)); __tmp9.is_a?(Hash) ? __tmp9["dist"] : _idx(__tmp9, "dist"))
          min_index = j
        end
        j = _add(j, 1)
      end
      votes = _append(votes, (__tmp11 = (__tmp12 = distances; __tmp12.is_a?(Hash) ? __tmp12[min_index] : _idx(__tmp12, min_index)); __tmp11.is_a?(Hash) ? __tmp11["label"] : _idx(__tmp11, "label")))
      (__tmp13 = distances; __tmp13.is_a?(Hash) ? __tmp13[min_index] : _idx(__tmp13, min_index))["dist"] = 1e+18
      count = _add(count, 1)
    end
    tally = []
    t = 0
    while t < _len(knn.labels)
      tally = _append(tally, 0)
      t = _add(t, 1)
    end
    v = 0
    while v < _len(votes)
      lbl = (__tmp14 = votes; __tmp14.is_a?(Hash) ? __tmp14[v] : _idx(__tmp14, v))
      tally[lbl] = _add((__tmp15 = tally; __tmp15.is_a?(Hash) ? __tmp15[lbl] : _idx(__tmp15, lbl)), 1)
      v = _add(v, 1)
    end
    max_idx = 0
    m = 1
    while m < _len(tally)
      if (__tmp16 = tally; __tmp16.is_a?(Hash) ? __tmp16[m] : _idx(__tmp16, m)) > (__tmp17 = tally; __tmp17.is_a?(Hash) ? __tmp17[max_idx] : _idx(__tmp17, max_idx))
        max_idx = m
      end
      m = _add(m, 1)
    end
    return (__tmp18 = knn.labels; __tmp18.is_a?(Hash) ? __tmp18[max_idx] : _idx(__tmp18, max_idx))
  end
  Object.send(:remove_const, :PointLabel) if Object.const_defined?(:PointLabel)
  Object.const_set(:PointLabel, Struct.new(:point, :label, keyword_init: true))
  Object.send(:remove_const, :KNN) if Object.const_defined?(:KNN)
  Object.const_set(:KNN, Struct.new(:data, :labels, keyword_init: true))
  Object.send(:remove_const, :DistLabel) if Object.const_defined?(:DistLabel)
  Object.const_set(:DistLabel, Struct.new(:dist, :label, keyword_init: true))
  $train_X = [[0.0, 0.0], [1.0, 0.0], [0.0, 1.0], [0.5, 0.5], [3.0, 3.0], [2.0, 3.0], [3.0, 2.0]]
  $train_y = [0, 0, 0, 0, 1, 1, 1]
  $classes = ["A", "B"]
  $knn = make_knn($train_X, $train_y, $classes)
  $point = [1.2, 1.2]
  puts(classify($knn, $point, 5))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
