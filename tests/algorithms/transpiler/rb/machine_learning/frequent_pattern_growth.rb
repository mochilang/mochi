# Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_node(name, count, parent)
    return {"name" => name, "count" => count, "parent" => parent, "children" => {}, "node_link" => nil}
  end
  def update_header(node_to_test, target_node)
    current = node_to_test
    while !_eq((__tmp1 = current; __tmp1.is_a?(Hash) ? __tmp1["node_link"] : _idx(__tmp1, "node_link")), nil)
      current = (__tmp2 = current; __tmp2.is_a?(Hash) ? __tmp2["node_link"] : _idx(__tmp2, "node_link"))
    end
    current["node_link"] = target_node
  end
  def update_tree(items, in_tree, header_table, count)
    first = (__tmp3 = items; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
    children = (__tmp4 = in_tree; __tmp4.is_a?(Hash) ? __tmp4["children"] : _idx(__tmp4, "children"))
    if _has(children, first)
      child = (__tmp5 = children; __tmp5.is_a?(Hash) ? __tmp5[first] : _idx(__tmp5, first))
      child["count"] = _add((__tmp6 = child; __tmp6.is_a?(Hash) ? __tmp6["count"] : _idx(__tmp6, "count")), count)
      children[first] = child
      in_tree["children"] = children
    else
      new_node = make_node(first, count, in_tree)
      children[first] = new_node
      in_tree["children"] = children
      entry = (__tmp7 = header_table; __tmp7.is_a?(Hash) ? __tmp7[first] : _idx(__tmp7, first))
      if _eq((__tmp8 = entry; __tmp8.is_a?(Hash) ? __tmp8["node"] : _idx(__tmp8, "node")), nil)
        entry["node"] = new_node
      else
        update_header((__tmp9 = entry; __tmp9.is_a?(Hash) ? __tmp9["node"] : _idx(__tmp9, "node")), new_node)
      end
      header_table[first] = entry
    end
    if _len(items) > 1
      rest = items[1..._len(items)]
      update_tree(rest, (__tmp10 = children; __tmp10.is_a?(Hash) ? __tmp10[first] : _idx(__tmp10, first)), header_table, count)
    end
  end
  def sort_items(items, header_table)
    arr = items
    i = 0
    while i < _len(arr)
      j = _add(i, 1)
      while j < _len(arr)
        if (__tmp11 = (__tmp12 = header_table; __tmp12.is_a?(Hash) ? __tmp12[(__tmp13 = arr; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))] : _idx(__tmp12, (__tmp14 = arr; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)))); __tmp11.is_a?(Hash) ? __tmp11["count"] : _idx(__tmp11, "count")) < (__tmp15 = (__tmp16 = header_table; __tmp16.is_a?(Hash) ? __tmp16[(__tmp17 = arr; __tmp17.is_a?(Hash) ? __tmp17[j] : _idx(__tmp17, j))] : _idx(__tmp16, (__tmp18 = arr; __tmp18.is_a?(Hash) ? __tmp18[j] : _idx(__tmp18, j)))); __tmp15.is_a?(Hash) ? __tmp15["count"] : _idx(__tmp15, "count"))
          tmp = (__tmp19 = arr; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))
          arr[i] = (__tmp20 = arr; __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j))
          arr[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def create_tree(data_set, min_sup)
    counts = {}
    i = 0
    while i < _len(data_set)
      trans = (__tmp21 = data_set; __tmp21.is_a?(Hash) ? __tmp21[i] : _idx(__tmp21, i))
      j = 0
      while j < _len(trans)
        item = (__tmp22 = trans; __tmp22.is_a?(Hash) ? __tmp22[j] : _idx(__tmp22, j))
        if _has(counts, item)
          counts[item] = _add((__tmp23 = counts; __tmp23.is_a?(Hash) ? __tmp23[item] : _idx(__tmp23, item)), 1)
        else
          counts[item] = 1
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    header_table = {}
        __tmp24 = counts.keys()
    __tmp24 = [] if __tmp24.nil?
    if __tmp24.respond_to?(:keys) && !__tmp24.is_a?(String)
      __tmp24 = __tmp24.keys
    end
    __tmp24.each do |k|
      cnt = (__tmp25 = counts; __tmp25.is_a?(Hash) ? __tmp25[k] : _idx(__tmp25, k))
      if cnt >= min_sup
        header_table[k] = {"count" => cnt, "node" => nil}
      end
    end
    freq_items = []
        __tmp26 = header_table.keys()
    __tmp26 = [] if __tmp26.nil?
    if __tmp26.respond_to?(:keys) && !__tmp26.is_a?(String)
      __tmp26 = __tmp26.keys
    end
    __tmp26.each do |k|
      freq_items = _append(freq_items, k)
    end
    if _eq(_len(freq_items), 0)
      return {"tree" => make_node("Null Set", 1, nil), "header" => {}}
    end
    fp_tree = make_node("Null Set", 1, nil)
    i = 0
    while i < _len(data_set)
      tran = (__tmp27 = data_set; __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i))
      local_items = []
      j = 0
      while j < _len(tran)
        item = (__tmp28 = tran; __tmp28.is_a?(Hash) ? __tmp28[j] : _idx(__tmp28, j))
        if _has(header_table, item)
          local_items = _append(local_items, item)
        end
        j = _add(j, 1)
      end
      if _len(local_items) > 0
        local_items = sort_items(local_items, header_table)
        update_tree(local_items, fp_tree, header_table, 1)
      end
      i = _add(i, 1)
    end
    return {"tree" => fp_tree, "header" => header_table}
  end
  def ascend_tree(leaf_node, path)
    prefix = path
    if !_eq((__tmp29 = leaf_node; __tmp29.is_a?(Hash) ? __tmp29["parent"] : _idx(__tmp29, "parent")), nil)
      prefix = _append(prefix, (__tmp30 = leaf_node; __tmp30.is_a?(Hash) ? __tmp30["name"] : _idx(__tmp30, "name")))
      prefix = ascend_tree((__tmp31 = leaf_node; __tmp31.is_a?(Hash) ? __tmp31["parent"] : _idx(__tmp31, "parent")), prefix)
    else
      prefix = _append(prefix, (__tmp32 = leaf_node; __tmp32.is_a?(Hash) ? __tmp32["name"] : _idx(__tmp32, "name")))
    end
    return prefix
  end
  def find_prefix_path(base_pat, tree_node)
    cond_pats = []
    node = tree_node
    while !_eq(node, nil)
      prefix = ascend_tree(node, [])
      if _len(prefix) > 1
        items = prefix[1..._len(prefix)]
        cond_pats = _append(cond_pats, {"items" => items, "count" => (__tmp33 = node; __tmp33.is_a?(Hash) ? __tmp33["count"] : _idx(__tmp33, "count"))})
      end
      node = (__tmp34 = node; __tmp34.is_a?(Hash) ? __tmp34["node_link"] : _idx(__tmp34, "node_link"))
    end
    return cond_pats
  end
  def mine_tree(in_tree, header_table, min_sup, pre_fix, freq_item_list)
    freq_list = freq_item_list
    items = []
        __tmp35 = header_table
    __tmp35 = [] if __tmp35.nil?
    if __tmp35.respond_to?(:keys) && !__tmp35.is_a?(String)
      __tmp35 = __tmp35.keys
    end
    __tmp35.each do |k|
      items = _append(items, k)
    end
    sorted_items = items
    i = 0
    while i < _len(sorted_items)
      j = _add(i, 1)
      while j < _len(sorted_items)
        if (__tmp36 = (__tmp37 = header_table; __tmp37.is_a?(Hash) ? __tmp37[(__tmp38 = sorted_items; __tmp38.is_a?(Hash) ? __tmp38[i] : _idx(__tmp38, i))] : _idx(__tmp37, (__tmp39 = sorted_items; __tmp39.is_a?(Hash) ? __tmp39[i] : _idx(__tmp39, i)))); __tmp36.is_a?(Hash) ? __tmp36["count"] : _idx(__tmp36, "count")) > (__tmp40 = (__tmp41 = header_table; __tmp41.is_a?(Hash) ? __tmp41[(__tmp42 = sorted_items; __tmp42.is_a?(Hash) ? __tmp42[j] : _idx(__tmp42, j))] : _idx(__tmp41, (__tmp43 = sorted_items; __tmp43.is_a?(Hash) ? __tmp43[j] : _idx(__tmp43, j)))); __tmp40.is_a?(Hash) ? __tmp40["count"] : _idx(__tmp40, "count"))
          tmp = (__tmp44 = sorted_items; __tmp44.is_a?(Hash) ? __tmp44[i] : _idx(__tmp44, i))
          sorted_items[i] = (__tmp45 = sorted_items; __tmp45.is_a?(Hash) ? __tmp45[j] : _idx(__tmp45, j))
          sorted_items[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    idx = 0
    while idx < _len(sorted_items)
      base_pat = (__tmp46 = sorted_items; __tmp46.is_a?(Hash) ? __tmp46[idx] : _idx(__tmp46, idx))
      new_freq = pre_fix
      new_freq = _append(new_freq, base_pat)
      freq_list = _append(freq_list, new_freq)
      cond_pats = find_prefix_path(base_pat, (__tmp47 = (__tmp48 = header_table; __tmp48.is_a?(Hash) ? __tmp48[base_pat] : _idx(__tmp48, base_pat)); __tmp47.is_a?(Hash) ? __tmp47["node"] : _idx(__tmp47, "node")))
      cond_dataset = []
      p = 0
      while p < _len(cond_pats)
        pat = (__tmp49 = cond_pats; __tmp49.is_a?(Hash) ? __tmp49[p] : _idx(__tmp49, p))
        r = 0
        while r < (__tmp50 = pat; __tmp50.is_a?(Hash) ? __tmp50["count"] : _idx(__tmp50, "count"))
          cond_dataset = _append(cond_dataset, (__tmp51 = pat; __tmp51.is_a?(Hash) ? __tmp51["items"] : _idx(__tmp51, "items")))
          r = _add(r, 1)
        end
        p = _add(p, 1)
      end
      res2 = create_tree(cond_dataset, min_sup)
      my_tree = (__tmp52 = res2; __tmp52.is_a?(Hash) ? __tmp52["tree"] : _idx(__tmp52, "tree"))
      my_head = (__tmp53 = res2; __tmp53.is_a?(Hash) ? __tmp53["header"] : _idx(__tmp53, "header"))
      if _len(my_head) > 0
        freq_list = mine_tree(my_tree, my_head, min_sup, new_freq, freq_list)
      end
      idx = _add(idx, 1)
    end
    return freq_list
  end
  def list_to_string(xs)
    s = "["
    i = 0
    while i < _len(xs)
      s = _add(s, (__tmp54 = xs; __tmp54.is_a?(Hash) ? __tmp54[i] : _idx(__tmp54, i)))
      if i < _len(xs) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def main()
    data_set = [["bread", "milk", "cheese"], ["bread", "milk"], ["bread", "diapers"], ["bread", "milk", "diapers"], ["milk", "diapers"], ["milk", "cheese"], ["diapers", "cheese"], ["bread", "milk", "cheese", "diapers"]]
    res = create_tree(data_set, 3)
    fp_tree = (__tmp55 = res; __tmp55.is_a?(Hash) ? __tmp55["tree"] : _idx(__tmp55, "tree"))
    header_table = (__tmp56 = res; __tmp56.is_a?(Hash) ? __tmp56["header"] : _idx(__tmp56, "header"))
    freq_items = []
    freq_items = mine_tree(fp_tree, header_table, 3, [], freq_items)
    puts(_len(data_set))
    puts(_len(header_table))
    i = 0
    while i < _len(freq_items)
      puts(list_to_string((__tmp57 = freq_items; __tmp57.is_a?(Hash) ? __tmp57[i] : _idx(__tmp57, i))))
      i = _add(i, 1)
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
