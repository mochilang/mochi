# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def dot(a, b)
    sum = 0.0
    i = 0
    while i < _len(a)
      sum = _add(sum, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return sum
  end
  def maxf(a, b)
    if a > b
      return a
    end
    return b
  end
  def minf(a, b)
    if a < b
      return a
    end
    return b
  end
  def absf(x)
    if x >= 0.0
      return x
    end
    return 0.0 - x
  end
  def predict_raw(samples, labels, alphas, b, x)
    res = 0.0
    i = 0
    while i < _len(samples)
      res = _add(res, (__tmp3 = alphas; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) * (__tmp4 = labels; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)) * dot((__tmp5 = samples; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)), x))
      i = _add(i, 1)
    end
    return _add(res, b)
  end
  def smo_train(samples, labels, c, tol, max_passes)
    m = _len(samples)
    alphas = []
    i = 0
    while i < m
      alphas = _append(alphas, 0.0)
      i = _add(i, 1)
    end
    b = 0.0
    passes = 0
    while passes < max_passes
      num_changed = 0
      i1 = 0
      while i1 < m
        _Ei = predict_raw(samples, labels, alphas, b, (__tmp6 = samples; __tmp6.is_a?(Hash) ? __tmp6[i1] : _idx(__tmp6, i1))) - (__tmp7 = labels; __tmp7.is_a?(Hash) ? __tmp7[i1] : _idx(__tmp7, i1))
        if ((__tmp8 = labels; __tmp8.is_a?(Hash) ? __tmp8[i1] : _idx(__tmp8, i1)) * _Ei < 0.0 - tol && (__tmp9 = alphas; __tmp9.is_a?(Hash) ? __tmp9[i1] : _idx(__tmp9, i1)) < c) || ((__tmp10 = labels; __tmp10.is_a?(Hash) ? __tmp10[i1] : _idx(__tmp10, i1)) * _Ei > tol && (__tmp11 = alphas; __tmp11.is_a?(Hash) ? __tmp11[i1] : _idx(__tmp11, i1)) > 0.0)
          i2 = (_add(i1, 1)) % m
          _Ej = predict_raw(samples, labels, alphas, b, (__tmp12 = samples; __tmp12.is_a?(Hash) ? __tmp12[i2] : _idx(__tmp12, i2))) - (__tmp13 = labels; __tmp13.is_a?(Hash) ? __tmp13[i2] : _idx(__tmp13, i2))
          alpha1_old = (__tmp14 = alphas; __tmp14.is_a?(Hash) ? __tmp14[i1] : _idx(__tmp14, i1))
          alpha2_old = (__tmp15 = alphas; __tmp15.is_a?(Hash) ? __tmp15[i2] : _idx(__tmp15, i2))
          _L = 0.0
          _H = 0.0
          if !_eq((__tmp16 = labels; __tmp16.is_a?(Hash) ? __tmp16[i1] : _idx(__tmp16, i1)), (__tmp17 = labels; __tmp17.is_a?(Hash) ? __tmp17[i2] : _idx(__tmp17, i2)))
            _L = maxf(0.0, alpha2_old - alpha1_old)
            _H = minf(c, _add(c, alpha2_old) - alpha1_old)
          else
            _L = maxf(0.0, _add(alpha2_old, alpha1_old) - c)
            _H = minf(c, _add(alpha2_old, alpha1_old))
          end
          if _eq(_L, _H)
            i1 = _add(i1, 1)
            next
          end
          eta = 2.0 * dot((__tmp18 = samples; __tmp18.is_a?(Hash) ? __tmp18[i1] : _idx(__tmp18, i1)), (__tmp19 = samples; __tmp19.is_a?(Hash) ? __tmp19[i2] : _idx(__tmp19, i2))) - dot((__tmp20 = samples; __tmp20.is_a?(Hash) ? __tmp20[i1] : _idx(__tmp20, i1)), (__tmp21 = samples; __tmp21.is_a?(Hash) ? __tmp21[i1] : _idx(__tmp21, i1))) - dot((__tmp22 = samples; __tmp22.is_a?(Hash) ? __tmp22[i2] : _idx(__tmp22, i2)), (__tmp23 = samples; __tmp23.is_a?(Hash) ? __tmp23[i2] : _idx(__tmp23, i2)))
          if eta >= 0.0
            i1 = _add(i1, 1)
            next
          end
          alphas[i2] = alpha2_old - (__tmp24 = labels; __tmp24.is_a?(Hash) ? __tmp24[i2] : _idx(__tmp24, i2)) * (_Ei - _Ej) / eta
          if (__tmp25 = alphas; __tmp25.is_a?(Hash) ? __tmp25[i2] : _idx(__tmp25, i2)) > _H
            alphas[i2] = _H
          end
          if (__tmp26 = alphas; __tmp26.is_a?(Hash) ? __tmp26[i2] : _idx(__tmp26, i2)) < _L
            alphas[i2] = _L
          end
          if absf((__tmp27 = alphas; __tmp27.is_a?(Hash) ? __tmp27[i2] : _idx(__tmp27, i2)) - alpha2_old) < 1e-05
            i1 = _add(i1, 1)
            next
          end
          alphas[i1] = _add(alpha1_old, (__tmp28 = labels; __tmp28.is_a?(Hash) ? __tmp28[i1] : _idx(__tmp28, i1)) * (__tmp29 = labels; __tmp29.is_a?(Hash) ? __tmp29[i2] : _idx(__tmp29, i2)) * (alpha2_old - (__tmp30 = alphas; __tmp30.is_a?(Hash) ? __tmp30[i2] : _idx(__tmp30, i2))))
          b1 = b - _Ei - (__tmp31 = labels; __tmp31.is_a?(Hash) ? __tmp31[i1] : _idx(__tmp31, i1)) * ((__tmp32 = alphas; __tmp32.is_a?(Hash) ? __tmp32[i1] : _idx(__tmp32, i1)) - alpha1_old) * dot((__tmp33 = samples; __tmp33.is_a?(Hash) ? __tmp33[i1] : _idx(__tmp33, i1)), (__tmp34 = samples; __tmp34.is_a?(Hash) ? __tmp34[i1] : _idx(__tmp34, i1))) - (__tmp35 = labels; __tmp35.is_a?(Hash) ? __tmp35[i2] : _idx(__tmp35, i2)) * ((__tmp36 = alphas; __tmp36.is_a?(Hash) ? __tmp36[i2] : _idx(__tmp36, i2)) - alpha2_old) * dot((__tmp37 = samples; __tmp37.is_a?(Hash) ? __tmp37[i1] : _idx(__tmp37, i1)), (__tmp38 = samples; __tmp38.is_a?(Hash) ? __tmp38[i2] : _idx(__tmp38, i2)))
          b2 = b - _Ej - (__tmp39 = labels; __tmp39.is_a?(Hash) ? __tmp39[i1] : _idx(__tmp39, i1)) * ((__tmp40 = alphas; __tmp40.is_a?(Hash) ? __tmp40[i1] : _idx(__tmp40, i1)) - alpha1_old) * dot((__tmp41 = samples; __tmp41.is_a?(Hash) ? __tmp41[i1] : _idx(__tmp41, i1)), (__tmp42 = samples; __tmp42.is_a?(Hash) ? __tmp42[i2] : _idx(__tmp42, i2))) - (__tmp43 = labels; __tmp43.is_a?(Hash) ? __tmp43[i2] : _idx(__tmp43, i2)) * ((__tmp44 = alphas; __tmp44.is_a?(Hash) ? __tmp44[i2] : _idx(__tmp44, i2)) - alpha2_old) * dot((__tmp45 = samples; __tmp45.is_a?(Hash) ? __tmp45[i2] : _idx(__tmp45, i2)), (__tmp46 = samples; __tmp46.is_a?(Hash) ? __tmp46[i2] : _idx(__tmp46, i2)))
          if (__tmp47 = alphas; __tmp47.is_a?(Hash) ? __tmp47[i1] : _idx(__tmp47, i1)) > 0.0 && (__tmp48 = alphas; __tmp48.is_a?(Hash) ? __tmp48[i1] : _idx(__tmp48, i1)) < c
            b = b1
          else
            if (__tmp49 = alphas; __tmp49.is_a?(Hash) ? __tmp49[i2] : _idx(__tmp49, i2)) > 0.0 && (__tmp50 = alphas; __tmp50.is_a?(Hash) ? __tmp50[i2] : _idx(__tmp50, i2)) < c
              b = b2
            else
              b = (_add(b1, b2)) / 2.0
            end
          end
          num_changed = _add(num_changed, 1)
        end
        i1 = _add(i1, 1)
      end
      if _eq(num_changed, 0)
        passes = _add(passes, 1)
      else
        passes = 0
      end
    end
    return [alphas, [b]]
  end
  def predict(samples, labels, model, x)
    alphas = (__tmp51 = model; __tmp51.is_a?(Hash) ? __tmp51[0] : _idx(__tmp51, 0))
    b = (__tmp52 = (__tmp53 = model; __tmp53.is_a?(Hash) ? __tmp53[1] : _idx(__tmp53, 1)); __tmp52.is_a?(Hash) ? __tmp52[0] : _idx(__tmp52, 0))
    val = predict_raw(samples, labels, alphas, b, x)
    if val >= 0.0
      return 1.0
    end
    return -1.0
  end
  $samples = [[2.0, 2.0], [1.5, 1.5], [0.0, 0.0], [0.5, 0.0]]
  $labels = [1.0, 1.0, -1.0, -1.0]
  $model = smo_train($samples, $labels, 1.0, 0.001, 10)
  puts(predict($samples, $labels, $model, [1.5, 1.0]))
  puts(predict($samples, $labels, $model, [0.2, 0.1]))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
