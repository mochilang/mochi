# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dot(a, b)
    sum = 0.clone
    i = 0.clone
    while i < a.length
      sum = _add(sum, a[i] * b[i]).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def maxf(a, b)
    if a > b
      return a
    end
    return b
  end
  def minf(a, b)
    if a < b
      return a
    end
    return b
  end
  def absf(x)
    if x >= 0
      return x
    end
    return 0 - x
  end
  def predict_raw(samples, labels, alphas, b, x)
    res = 0.clone
    i = 0.clone
    while i < samples.length
      res = _add(res, alphas[i] * labels[i] * dot(samples[i], x)).clone
      i = _add(i, 1).clone
    end
    return _add(res, b)
  end
  def smo_train(samples, labels, c, tol, max_passes)
    m = samples.length
    alphas = [].clone
    i = 0.clone
    while i < m
      alphas = (alphas << (0)).clone
      i = _add(i, 1).clone
    end
    b = 0.clone
    passes = 0.clone
    while passes < max_passes
      num_changed = 0.clone
      i1 = 0.clone
      while i1 < m
        _Ei = predict_raw(samples, labels, alphas, b, samples[i1]) - labels[i1]
        if (labels[i1] * _Ei < 0 - tol && alphas[i1] < c) || (labels[i1] * _Ei > tol && alphas[i1] > 0)
          i2 = (_add(i1, 1)) % m.clone
          _Ej = predict_raw(samples, labels, alphas, b, samples[i2]) - labels[i2]
          alpha1_old = alphas[i1]
          alpha2_old = alphas[i2]
          _L = 0.clone
          _H = 0.clone
          if labels[i1] != labels[i2]
            _L = maxf(0, alpha2_old - alpha1_old).clone
            _H = minf(c, _add(c, alpha2_old) - alpha1_old).clone
          else
            _L = maxf(0, _add(alpha2_old, alpha1_old) - c).clone
            _H = minf(c, _add(alpha2_old, alpha1_old)).clone
          end
          if _L == _H
            i1 = _add(i1, 1).clone
            next
          end
          eta = 2 * dot(samples[i1], samples[i2]) - dot(samples[i1], samples[i1]) - dot(samples[i2], samples[i2])
          if eta >= 0
            i1 = _add(i1, 1).clone
            next
          end
          alphas[i2] = alpha2_old - labels[i2] * (_Ei - _Ej) / eta
          if alphas[i2] > _H
            alphas[i2] = _H
          end
          if alphas[i2] < _L
            alphas[i2] = _L
          end
          if absf(alphas[i2] - alpha2_old) < 1e-05
            i1 = _add(i1, 1).clone
            next
          end
          alphas[i1] = _add(alpha1_old, labels[i1] * labels[i2] * (alpha2_old - alphas[i2]))
          b1 = b - _Ei - labels[i1] * (alphas[i1] - alpha1_old) * dot(samples[i1], samples[i1]) - labels[i2] * (alphas[i2] - alpha2_old) * dot(samples[i1], samples[i2])
          b2 = b - _Ej - labels[i1] * (alphas[i1] - alpha1_old) * dot(samples[i1], samples[i2]) - labels[i2] * (alphas[i2] - alpha2_old) * dot(samples[i2], samples[i2])
          if alphas[i1] > 0 && alphas[i1] < c
            b = b1.clone
          else
            if alphas[i2] > 0 && alphas[i2] < c
              b = b2.clone
            else
              b = (_add(b1, b2)) / 2.clone
            end
          end
          num_changed = _add(num_changed, 1).clone
        end
        i1 = _add(i1, 1).clone
      end
      if num_changed == 0
        passes = _add(passes, 1).clone
      else
        passes = 0.clone
      end
    end
    return [alphas, [b]]
  end
  def predict(samples, labels, model, x)
    alphas = model[0]
    b = model[1][0]
    val = predict_raw(samples, labels, alphas, b, x)
    if val >= 0
      return 1
    end
    return -1
  end
  $samples = [[2, 2], [1.5, 1.5], [0, 0], [0.5, 0]]
  $labels = [1, 1, -1, -1]
  $model = smo_train($samples, $labels, 1, 0.001, 10)
  puts(predict($samples, $labels, $model, [1.5, 1]))
  puts(predict($samples, $labels, $model, [0.2, 0.1]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
