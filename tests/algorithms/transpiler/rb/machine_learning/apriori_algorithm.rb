# Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def load_data()
    return [["milk"], ["milk", "butter"], ["milk", "bread"], ["milk", "bread", "chips"]]
  end
  def contains_string(xs, s)
        __tmp1 = xs
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      if _eq(v, s)
        return true
      end
    end
    return false
  end
  def is_subset(candidate, transaction)
        __tmp2 = candidate
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |it|
      if !contains_string(transaction, it)
        return false
      end
    end
    return true
  end
  def lists_equal(a, b)
    if !_eq(_len(a), _len(b))
      return false
    end
    i = 0
    while i < _len(a)
      if !_eq((__tmp3 = a; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), (__tmp4 = b; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def contains_list(itemset, item)
        __tmp5 = itemset
    __tmp5 = [] if __tmp5.nil?
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |l|
      if lists_equal(l, item)
        return true
      end
    end
    return false
  end
  def count_list(itemset, item)
    c = 0
        __tmp6 = itemset
    __tmp6 = [] if __tmp6.nil?
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |l|
      if lists_equal(l, item)
        c = _add(c, 1)
      end
    end
    return c
  end
  def slice_list(xs, start)
    res = []
    i = start
    while i < _len(xs)
      res = _append(res, (__tmp7 = xs; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)))
      i = _add(i, 1)
    end
    return res
  end
  def combinations_lists(xs, k)
    result = []
    if _eq(k, 0)
      result = _append(result, [])
      return result
    end
    i = 0
    while i < _len(xs)
      head = (__tmp8 = xs; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      tail = slice_list(xs, _add(i, 1))
      tail_combos = combinations_lists(tail, k - 1)
            __tmp9 = tail_combos
      __tmp9 = [] if __tmp9.nil?
      if __tmp9.respond_to?(:keys) && !__tmp9.is_a?(String)
        __tmp9 = __tmp9.keys
      end
      __tmp9.each do |combo|
        new_combo = []
        new_combo = _append(new_combo, head)
                __tmp10 = combo
        __tmp10 = [] if __tmp10.nil?
        if __tmp10.respond_to?(:keys) && !__tmp10.is_a?(String)
          __tmp10 = __tmp10.keys
        end
        __tmp10.each do |c|
          new_combo = _append(new_combo, c)
        end
        result = _append(result, new_combo)
      end
      i = _add(i, 1)
    end
    return result
  end
  def prune(itemset, candidates, length)
    pruned = []
        __tmp11 = candidates
    __tmp11 = [] if __tmp11.nil?
    if __tmp11.respond_to?(:keys) && !__tmp11.is_a?(String)
      __tmp11 = __tmp11.keys
    end
    __tmp11.each do |candidate|
      is_subsequence = true
            __tmp12 = candidate
      __tmp12 = [] if __tmp12.nil?
      if __tmp12.respond_to?(:keys) && !__tmp12.is_a?(String)
        __tmp12 = __tmp12.keys
      end
      __tmp12.each do |item|
        if !contains_list(itemset, item) || count_list(itemset, item) < length - 1
          is_subsequence = false
          break
        end
      end
      if is_subsequence
        merged = []
                __tmp13 = candidate
        __tmp13 = [] if __tmp13.nil?
        if __tmp13.respond_to?(:keys) && !__tmp13.is_a?(String)
          __tmp13 = __tmp13.keys
        end
        __tmp13.each do |item|
                    __tmp14 = item
          __tmp14 = [] if __tmp14.nil?
          if __tmp14.respond_to?(:keys) && !__tmp14.is_a?(String)
            __tmp14 = __tmp14.keys
          end
          __tmp14.each do |s|
            if !contains_string(merged, s)
              merged = _append(merged, s)
            end
          end
        end
        pruned = _append(pruned, merged)
      end
    end
    return pruned
  end
  def sort_strings(xs)
    res = []
        __tmp15 = xs
    __tmp15 = [] if __tmp15.nil?
    if __tmp15.respond_to?(:keys) && !__tmp15.is_a?(String)
      __tmp15 = __tmp15.keys
    end
    __tmp15.each do |s|
      res = _append(res, s)
    end
    i = 0
    while i < _len(res)
      j = _add(i, 1)
      while j < _len(res)
        if (__tmp16 = res; __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j)) < (__tmp17 = res; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))
          tmp = (__tmp18 = res; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))
          res[i] = (__tmp19 = res; __tmp19.is_a?(Hash) ? __tmp19[j] : _idx(__tmp19, j))
          res[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return res
  end
  def itemset_to_string(xs)
    s = "["
    i = 0
    while i < _len(xs)
      if i > 0
        s = _add(s, ", ")
      end
      s = _add(_add(_add(s, "'"), (__tmp20 = xs; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i))), "'")
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def apriori(data, min_support)
    itemset = []
        __tmp21 = data
    __tmp21 = [] if __tmp21.nil?
    if __tmp21.respond_to?(:keys) && !__tmp21.is_a?(String)
      __tmp21 = __tmp21.keys
    end
    __tmp21.each do |transaction|
      t = []
            __tmp22 = transaction
      __tmp22 = [] if __tmp22.nil?
      if __tmp22.respond_to?(:keys) && !__tmp22.is_a?(String)
        __tmp22 = __tmp22.keys
      end
      __tmp22.each do |v|
        t = _append(t, v)
      end
      itemset = _append(itemset, t)
    end
    frequent = []
    length = 1
    while _len(itemset) > 0
      counts = []
      idx = 0
      while idx < _len(itemset)
        counts = _append(counts, 0)
        idx = _add(idx, 1)
      end
            __tmp23 = data
      __tmp23 = [] if __tmp23.nil?
      if __tmp23.respond_to?(:keys) && !__tmp23.is_a?(String)
        __tmp23 = __tmp23.keys
      end
      __tmp23.each do |transaction|
        j = 0
        while j < _len(itemset)
          candidate = (__tmp24 = itemset; __tmp24.is_a?(Hash) ? __tmp24[j] : _idx(__tmp24, j))
          if is_subset(candidate, transaction)
            counts[j] = _add((__tmp25 = counts; __tmp25.is_a?(Hash) ? __tmp25[j] : _idx(__tmp25, j)), 1)
          end
          j = _add(j, 1)
        end
      end
      new_itemset = []
      k = 0
      while k < _len(itemset)
        if (__tmp26 = counts; __tmp26.is_a?(Hash) ? __tmp26[k] : _idx(__tmp26, k)) >= min_support
          new_itemset = _append(new_itemset, (__tmp27 = itemset; __tmp27.is_a?(Hash) ? __tmp27[k] : _idx(__tmp27, k)))
        end
        k = _add(k, 1)
      end
      itemset = new_itemset
      m = 0
      while m < _len(itemset)
        sorted_item = sort_strings((__tmp28 = itemset; __tmp28.is_a?(Hash) ? __tmp28[m] : _idx(__tmp28, m)))
        frequent = _append(frequent, Itemset.new(items: sorted_item, support: (__tmp29 = counts; __tmp29.is_a?(Hash) ? __tmp29[m] : _idx(__tmp29, m))))
        m = _add(m, 1)
      end
      length = _add(length, 1)
      combos = combinations_lists(itemset, length)
      itemset = prune(itemset, combos, length)
    end
    return frequent
  end
  Object.send(:remove_const, :Itemset) if Object.const_defined?(:Itemset)
  Object.const_set(:Itemset, Struct.new(:items, :support, keyword_init: true))
  $frequent_itemsets = apriori(load_data(), 2)
    __tmp30 = $frequent_itemsets
  __tmp30 = [] if __tmp30.nil?
  if __tmp30.respond_to?(:keys) && !__tmp30.is_a?(String)
    __tmp30 = __tmp30.keys
  end
  __tmp30.each do |fi|
    puts(_add(_add(itemset_to_string(fi.items), ": "), _str(fi.support)))
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
