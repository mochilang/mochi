# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_winner(weights, sample)
    d0 = 0.0
    d1 = 0.0
    (0..._len(sample)).each do |i|
      diff0 = (__tmp1 = sample; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) - (__tmp2 = (__tmp3 = weights; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)); __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      diff1 = (__tmp4 = sample; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)) - (__tmp5 = (__tmp6 = weights; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1)); __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      d0 = _add(d0, diff0 * diff0)
      d1 = _add(d1, diff1 * diff1)
      return (d0 > d1 ? 0 : 1)
    end
    return 0
  end
  def update(weights, sample, j, alpha)
    (0..._len(weights)).each do |i|
      (__tmp7 = weights; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j))[i] = _add((__tmp8 = (__tmp9 = weights; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)); __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)), alpha * ((__tmp10 = sample; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) - (__tmp11 = (__tmp12 = weights; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)); __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))))
    end
    return weights
  end
  def list_to_string(xs)
    s = "["
    i = 0
    while i < _len(xs)
      s = _add(s, _str((__tmp13 = xs; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))))
      if i < _len(xs) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def matrix_to_string(m)
    s = "["
    i = 0
    while i < _len(m)
      s = _add(s, list_to_string((__tmp14 = m; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))))
      if i < _len(m) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def main()
    training_samples = [[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]]
    weights = [[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]]
    epochs = 3
    alpha = 0.5
    (0...epochs).each do |_|
      (0..._len(training_samples)).each do |j|
        sample = (__tmp15 = training_samples; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j))
        winner = get_winner(weights, sample)
        weights = update(weights, sample, winner, alpha)
      end
    end
    sample = [0, 0, 0, 1]
    winner = get_winner(weights, sample)
    puts(_add("Clusters that the test sample belongs to : ", _str(winner)))
    puts(_add("Weights that have been trained : ", matrix_to_string(weights)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
