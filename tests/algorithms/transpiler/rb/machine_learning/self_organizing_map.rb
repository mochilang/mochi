# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def get_winner(weights, sample)
    d0 = 0.clone
    d1 = 0.clone
    (0...sample.length).each do |i|
      diff0 = sample[i] - weights[0][i]
      diff1 = sample[i] - weights[1][i]
      d0 = _add(d0, diff0 * diff0).clone
      d1 = _add(d1, diff1 * diff1).clone
      return (d0 > d1 ? 0 : 1)
    end
    return 0
  end
  def update(weights, sample, j, alpha)
    (0...weights.length).each do |i|
      weights[j][i] = _add(weights[j][i], alpha * (sample[i] - weights[j][i]))
    end
    return weights
  end
  def list_to_string(xs)
    s = "[".clone
    i = 0.clone
    while i < xs.length
      s = _add(s, _str(xs[i])).clone
      if i < xs.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def matrix_to_string(m)
    s = "[".clone
    i = 0.clone
    while i < m.length
      s = _add(s, list_to_string(m[i])).clone
      if i < m.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def main()
    training_samples = [[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]]
    weights = [[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]].clone
    epochs = 3
    alpha = 0.5
    (0...epochs).each do |_|
      (0...training_samples.length).each do |j|
        sample = training_samples[j]
        winner = get_winner(weights, sample)
        weights = update(weights, sample, winner, alpha).clone
      end
    end
    sample = [0, 0, 0, 1]
    winner = get_winner(weights, sample)
    puts(_add("Clusters that the test sample belongs to : ", _str(winner)))
    puts(_add("Weights that have been trained : ", matrix_to_string(weights)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
