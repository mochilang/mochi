# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dual(v, d)
    return Dual.new(value: v, deriv: d)
  end
  def pow_float(base, exp)
    res = 1.0.clone
    i = 0.clone
    while i < exp
      res = res * base.clone
      i = _add(i, 1).clone
    end
    return res
  end
  def add(a, b)
    return Dual.new(value: _add(a.value, b.value), deriv: _add(a.deriv, b.deriv))
  end
  def sub(a, b)
    return Dual.new(value: a.value - b.value, deriv: a.deriv - b.deriv)
  end
  def mul(a, b)
    return Dual.new(value: a.value * b.value, deriv: _add(a.deriv * b.value, b.deriv * a.value))
  end
  def div(a, b)
    return Dual.new(value: a.value / b.value, deriv: (a.deriv * b.value - b.deriv * a.value) / (b.value * b.value))
  end
  def power(a, p)
    return Dual.new(value: pow_float(a.value, p), deriv: (1.0 * p) * pow_float(a.value, p - 1) * a.deriv)
  end
  def main()
    a = dual(2.0, 1.0)
    b = dual(1.0, 0.0)
    c = add(a, b)
    d = mul(a, b)
    e = div(c, d)
    puts(_str(e.deriv))
    x = dual(2.0, 1.0)
    y = power(x, 3)
    puts(_str(y.deriv))
  end
  Dual = Struct.new(:value, :deriv, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
