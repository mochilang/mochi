# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def sin(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
  end
  def rand()
    $seed = (_add(1103515245 * $seed, 12345)) % 2147483648
    return ($seed).to_f / 2.147483648e+09
  end
  def mean(vals)
    sum = 0.0
    i = 0
    while i < _len(vals)
      sum = _add(sum, (__tmp1 = vals; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return sum / _len(vals)
  end
  def mean_squared_error(labels, prediction)
    total = 0.0
    i = 0
    while i < _len(labels)
      diff = (__tmp2 = labels; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)) - prediction
      total = _add(total, diff * diff)
      i = _add(i, 1)
    end
    return total / _len(labels)
  end
  def train_tree(x, y, depth, min_leaf_size)
    if _len(x) < 2 * min_leaf_size
      return Leaf.new(prediction: mean(y))
    end
    if _eq(depth, 1)
      return Leaf.new(prediction: mean(y))
    end
    best_split = 0
    min_error = mean_squared_error(x, mean(y)) * 2.0
    i = 0
    while i < _len(x)
      if _len(x[0...i]) < min_leaf_size
        i = i
      else
        if _len(x[i...]) < min_leaf_size
          i = i
        else
          err_left = mean_squared_error(x[0...i], mean(y[0...i]))
          err_right = mean_squared_error(x[i...], mean(y[i...]))
          err = _add(err_left, err_right)
          if err < min_error
            best_split = i
            min_error = err
          end
        end
      end
      i = _add(i, 1)
    end
    if !_eq(best_split, 0)
      left_x = x[0...best_split]
      left_y = y[0...best_split]
      right_x = x[best_split...]
      right_y = y[best_split...]
      boundary = (__tmp3 = x; __tmp3.is_a?(Hash) ? __tmp3[best_split] : _idx(__tmp3, best_split))
      left_tree = train_tree(left_x, left_y, depth - 1, min_leaf_size)
      right_tree = train_tree(right_x, right_y, depth - 1, min_leaf_size)
      return Branch.new(decision_boundary: boundary, left: left_tree, right: right_tree)
    end
    return Leaf.new(prediction: mean(y))
  end
  def predict(tree, value)
    return (tree.is_a?(Leaf) ? (->(p) { p }).call(tree.prediction) : (tree.is_a?(Branch) ? (->(b) { (->(l) { (->(r) { (value >= b ? predict(r, value) : predict(l, value)) }).call(tree.right) }).call(tree.left) }).call(tree.decision_boundary) : nil))
  end
  def main()
    x = []
    v = -1.0
    while v < 1.0
      x = _append(x, v)
      v = _add(v, 0.005)
    end
    y = []
    i = 0
    while i < _len(x)
      y = _append(y, sin((__tmp4 = x; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))))
      i = _add(i, 1)
    end
    tree = train_tree(x, y, 10, 10)
    test_cases = []
    i = 0
    while i < 10
      test_cases = _append(test_cases, rand() * 2.0 - 1.0)
      i = _add(i, 1)
    end
    predictions = []
    i = 0
    while i < _len(test_cases)
      predictions = _append(predictions, predict(tree, (__tmp5 = test_cases; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))))
      i = _add(i, 1)
    end
    sum_err = 0.0
    i = 0
    while i < _len(test_cases)
      diff = (__tmp6 = predictions; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)) - (__tmp7 = test_cases; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
      sum_err = _add(sum_err, diff * diff)
      i = _add(i, 1)
    end
    avg_error = sum_err / _len(test_cases)
    puts(_add("Test values: ", ((x = test_cases); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts(_add("Predictions: ", ((x = predictions); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts(_add("Average error: ", _str(avg_error)))
  end
  Object.send(:remove_const, :Leaf) if Object.const_defined?(:Leaf)
  Leaf = Struct.new(:prediction, keyword_init: true)
  Object.send(:remove_const, :Branch) if Object.const_defined?(:Branch)
  Branch = Struct.new(:decision_boundary, :left, :right, keyword_init: true)
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $seed = 123456789
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
