# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def sin(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
  end
  def rand()
    $seed = (_add(1103515245 * $seed, 12345)) % 2147483648.clone
    return ($seed).to_f / 2147483648.0
  end
  def mean(vals)
    sum = 0.0.clone
    i = 0.clone
    while i < vals.length
      sum = _add(sum, vals[i]).clone
      i = _add(i, 1).clone
    end
    return sum / vals.length
  end
  def mean_squared_error(labels, prediction)
    total = 0.0.clone
    i = 0.clone
    while i < labels.length
      diff = labels[i] - prediction
      total = _add(total, diff * diff).clone
      i = _add(i, 1).clone
    end
    return total / labels.length
  end
  def train_tree(x, y, depth, min_leaf_size)
    if x.length < 2 * min_leaf_size
      return Leaf.new(prediction: mean(y))
    end
    if depth == 1
      return Leaf.new(prediction: mean(y))
    end
    best_split = 0.clone
    min_error = mean_squared_error(x, mean(y)) * 2.0.clone
    i = 0.clone
    while i < x.length
      if x[0...i].length < min_leaf_size
        i = i.clone
      else
        if x[i...].length < min_leaf_size
          i = i.clone
        else
          err_left = mean_squared_error(x[0...i], mean(y[0...i]))
          err_right = mean_squared_error(x[i...], mean(y[i...]))
          err = _add(err_left, err_right)
          if err < min_error
            best_split = i.clone
            min_error = err.clone
          end
        end
      end
      i = _add(i, 1).clone
    end
    if best_split != 0
      left_x = x[0...best_split]
      left_y = y[0...best_split]
      right_x = x[best_split...]
      right_y = y[best_split...]
      boundary = x[best_split]
      left_tree = train_tree(left_x, left_y, depth - 1, min_leaf_size)
      right_tree = train_tree(right_x, right_y, depth - 1, min_leaf_size)
      return Branch.new(decision_boundary: boundary, left: left_tree, right: right_tree)
    end
    return Leaf.new(prediction: mean(y))
  end
  def predict(tree, value)
    return (tree.is_a?(Leaf) ? ->(p) { p }.call(tree.prediction) : (tree.is_a?(Branch) ? ->(b) { ->(l) { ->(r) { (value >= b ? predict(r, value) : predict(l, value)) }.call(tree.right) }.call(tree.left) }.call(tree.decision_boundary) : nil))
  end
  def main()
    x = [].clone
    v = -1.0.clone
    while v < 1.0
      x = (x << (v)).clone
      v = _add(v, 0.005).clone
    end
    y = [].clone
    i = 0.clone
    while i < x.length
      y = (y << (sin(x[i]))).clone
      i = _add(i, 1).clone
    end
    tree = train_tree(x, y, 10, 10)
    test_cases = [].clone
    i = 0.clone
    while i < 10
      test_cases = (test_cases << (rand() * 2.0 - 1.0)).clone
      i = _add(i, 1).clone
    end
    predictions = [].clone
    i = 0.clone
    while i < test_cases.length
      predictions = (predictions << (predict(tree, test_cases[i]))).clone
      i = _add(i, 1).clone
    end
    sum_err = 0.0.clone
    i = 0.clone
    while i < test_cases.length
      diff = predictions[i] - test_cases[i]
      sum_err = _add(sum_err, diff * diff).clone
      i = _add(i, 1).clone
    end
    avg_error = sum_err / test_cases.length
    puts(_add("Test values: ", ((x = test_cases); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts(_add("Predictions: ", ((x = predictions); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s)))
    puts(_add("Average error: ", _str(avg_error)))
  end
  Leaf = Struct.new(:prediction, keyword_init: true)
  Branch = Struct.new(:decision_boundary, :left, :right, keyword_init: true)
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $seed = 123456789.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
