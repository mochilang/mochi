# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def data_handling(dataset)
    return dataset
  end
  def xgboost(features, target, test_features)
    learning_rate = 0.5
    n_estimators = 3
    trees = [].clone
    predictions = [].clone
    i = 0.clone
    while i < target.length
      predictions = (predictions << (0.0)).clone
      i = _add(i, 1).clone
    end
    est = 0.clone
    while est < n_estimators
      residuals = [].clone
      j = 0.clone
      while j < target.length
        residuals = (residuals << (target[j] - predictions[j])).clone
        j = _add(j, 1).clone
      end
      sum_feat = 0.0.clone
      j = 0.clone
      while j < features.length
        sum_feat = _add(sum_feat, features[j][0]).clone
        j = _add(j, 1).clone
      end
      threshold = sum_feat / ((features.length).to_f)
      left_sum = 0.0.clone
      left_count = 0.clone
      right_sum = 0.0.clone
      right_count = 0.clone
      j = 0.clone
      while j < features.length
        if features[j][0] <= threshold
          left_sum = _add(left_sum, residuals[j]).clone
          left_count = _add(left_count, 1).clone
        else
          right_sum = _add(right_sum, residuals[j]).clone
          right_count = _add(right_count, 1).clone
        end
        j = _add(j, 1).clone
      end
      left_value = 0.0.clone
      if left_count > 0
        left_value = left_sum / ((left_count).to_f).clone
      end
      right_value = 0.0.clone
      if right_count > 0
        right_value = right_sum / ((right_count).to_f).clone
      end
      j = 0.clone
      while j < features.length
        if features[j][0] <= threshold
          predictions[j] = _add(predictions[j], learning_rate * left_value)
        else
          predictions[j] = _add(predictions[j], learning_rate * right_value)
        end
        j = _add(j, 1).clone
      end
      trees = (trees << (Tree.new(threshold: threshold, left_value: left_value, right_value: right_value))).clone
      est = _add(est, 1).clone
    end
    preds = [].clone
    t = 0.clone
    while t < test_features.length
      pred = 0.0.clone
      k = 0.clone
      while k < trees.length
        if test_features[t][0] <= trees[k]["threshold"]
          pred = _add(pred, learning_rate * trees[k]["left_value"]).clone
        else
          pred = _add(pred, learning_rate * trees[k]["right_value"]).clone
        end
        k = _add(k, 1).clone
      end
      preds = (preds << (pred)).clone
      t = _add(t, 1).clone
    end
    return preds
  end
  def mean_absolute_error(y_true, y_pred)
    sum = 0.0.clone
    i = 0.clone
    while i < y_true.length
      diff = y_true[i] - y_pred[i].clone
      if diff < 0.0
        diff = -diff.clone
      end
      sum = _add(sum, diff).clone
      i = _add(i, 1).clone
    end
    return sum / ((y_true.length).to_f)
  end
  def mean_squared_error(y_true, y_pred)
    sum = 0.0.clone
    i = 0.clone
    while i < y_true.length
      diff = y_true[i] - y_pred[i]
      sum = _add(sum, diff * diff).clone
      i = _add(i, 1).clone
    end
    return sum / ((y_true.length).to_f)
  end
  def main()
    california = Dataset.new(data: [[1.0], [2.0], [3.0], [4.0]], target: [2.0, 3.0, 4.0, 5.0])
    ds = data_handling(california)
    x_train = ds.data
    y_train = ds.target
    x_test = [[1.5], [3.5]]
    y_test = [2.5, 4.5]
    predictions = xgboost(x_train, y_train, x_test)
    puts("Predictions:")
    puts(((x = predictions); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts("Mean Absolute Error:")
    puts(mean_absolute_error(y_test, predictions))
    puts("Mean Square Error:")
    puts(mean_squared_error(y_test, predictions))
  end
  Dataset = Struct.new(:data, :target, keyword_init: true)
  Tree = Struct.new(:threshold, :left_value, :right_value, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
