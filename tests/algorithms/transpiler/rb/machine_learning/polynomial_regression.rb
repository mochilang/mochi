# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def design_matrix(xs, degree)
    i = 0.clone
    matrix = [].clone
    while i < xs.length
      row = [].clone
      j = 0.clone
      pow = 1.clone
      while j <= degree
        row = (row << (pow)).clone
        pow = pow * xs[i].clone
        j = _add(j, 1).clone
      end
      matrix = (matrix << (row)).clone
      i = _add(i, 1).clone
    end
    return matrix
  end
  def transpose(matrix)
    rows = matrix.length
    cols = matrix[0].length
    j = 0.clone
    result = [].clone
    while j < cols
      row = [].clone
      i = 0.clone
      while i < rows
        row = (row << (matrix[i][j])).clone
        i = _add(i, 1).clone
      end
      result = (result << (row)).clone
      j = _add(j, 1).clone
    end
    return result
  end
  def matmul(a, b)
    n = a.length
    m = a[0].length
    p = b[0].length
    i = 0.clone
    result = [].clone
    while i < n
      row = [].clone
      k = 0.clone
      while k < p
        sum = 0.clone
        j = 0.clone
        while j < m
          sum = _add(sum, a[i][j] * b[j][k]).clone
          j = _add(j, 1).clone
        end
        row = (row << (sum)).clone
        k = _add(k, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def matvec_mul(a, v)
    n = a.length
    m = a[0].length
    i = 0.clone
    result = [].clone
    while i < n
      sum = 0.clone
      j = 0.clone
      while j < m
        sum = _add(sum, a[i][j] * v[j]).clone
        j = _add(j, 1).clone
      end
      result = (result << (sum)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def gaussian_elimination(a, b)
    n = a.length
    _M = [].clone
    i = 0.clone
    while i < n
      _M = (_M << ((a[i] << (b[i])))).clone
      i = _add(i, 1).clone
    end
    k = 0.clone
    while k < n
      j = _add(k, 1).clone
      while j < n
        factor = _M[j][k] / _M[k][k]
        rowj = _M[j].clone
        rowk = _M[k].clone
        l = k.clone
        while l <= n
          rowj[l] = rowj[l] - factor * rowk[l]
          l = _add(l, 1).clone
        end
        _M[j] = rowj
        j = _add(j, 1).clone
      end
      k = _add(k, 1).clone
    end
    x = [].clone
    t = 0.clone
    while t < n
      x = (x << (0)).clone
      t = _add(t, 1).clone
    end
    i2 = n - 1.clone
    while i2 >= 0
      sum = _M[i2][n].clone
      j2 = _add(i2, 1).clone
      while j2 < n
        sum = sum - _M[i2][j2] * x[j2].clone
        j2 = _add(j2, 1).clone
      end
      x[i2] = sum / _M[i2][i2]
      i2 = i2 - 1.clone
    end
    return x
  end
  def predict(xs, coeffs)
    i = 0.clone
    result = [].clone
    while i < xs.length
      x = xs[i]
      j = 0.clone
      pow = 1.clone
      sum = 0.clone
      while j < coeffs.length
        sum = _add(sum, coeffs[j] * pow).clone
        pow = pow * x.clone
        j = _add(j, 1).clone
      end
      result = (result << (sum)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  $xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  $ys = [].clone
  $i = 0.clone
  while $i < $xs.length
    x = $xs[$i]
    $ys = ($ys << (_add(x * x * x - 2 * x * x, 3 * x) - 5)).clone
    $i = _add($i, 1).clone
  end
  $X = design_matrix($xs, 3).clone
  $Xt = transpose($X).clone
  $XtX = matmul($Xt, $X).clone
  $Xty = matvec_mul($Xt, $ys).clone
  $coeffs = gaussian_elimination($XtX, $Xty)
  puts(((x = $coeffs); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([-1], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([-2], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([6], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
