# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def design_matrix(xs, degree)
    i = 0
    matrix = []
    while i < xs.length
      row = []
      j = 0
      pow = 1.0
      while j <= degree
        row = (row + [pow])
        pow = pow * xs[i]
        j = _add(j, 1)
      end
      matrix = (matrix + [row])
      i = _add(i, 1)
    end
    return matrix
  end
  def transpose(matrix)
    rows = matrix.length
    cols = matrix[0].length
    j = 0
    result = []
    while j < cols
      row = []
      i = 0
      while i < rows
        row = (row + [matrix[i][j]])
        i = _add(i, 1)
      end
      result = (result + [row])
      j = _add(j, 1)
    end
    return result
  end
  def matmul(a, b)
    n = a.length
    m = a[0].length
    p = b[0].length
    i = 0
    result = []
    while i < n
      row = []
      k = 0
      while k < p
        sum = 0.0
        j = 0
        while j < m
          sum = _add(sum, a[i][j] * b[j][k])
          j = _add(j, 1)
        end
        row = (row + [sum])
        k = _add(k, 1)
      end
      result = (result + [row])
      i = _add(i, 1)
    end
    return result
  end
  def matvec_mul(a, v)
    n = a.length
    m = a[0].length
    i = 0
    result = []
    while i < n
      sum = 0.0
      j = 0
      while j < m
        sum = _add(sum, a[i][j] * v[j])
        j = _add(j, 1)
      end
      result = (result + [sum])
      i = _add(i, 1)
    end
    return result
  end
  def gaussian_elimination(a, b)
    n = a.length
    _M = []
    i = 0
    while i < n
      _M = (_M + [(a[i] + [b[i]])])
      i = _add(i, 1)
    end
    k = 0
    while k < n
      j = _add(k, 1)
      while j < n
        factor = _M[j][k] / _M[k][k]
        rowj = _M[j]
        rowk = _M[k]
        l = k
        while l <= n
          rowj[l] = rowj[l] - factor * rowk[l]
          l = _add(l, 1)
        end
        _M[j] = rowj
        j = _add(j, 1)
      end
      k = _add(k, 1)
    end
    x = []
    t = 0
    while t < n
      x = (x + [0.0])
      t = _add(t, 1)
    end
    i2 = n - 1
    while i2 >= 0
      sum = _M[i2][n]
      j2 = _add(i2, 1)
      while j2 < n
        sum = sum - _M[i2][j2] * x[j2]
        j2 = _add(j2, 1)
      end
      x[i2] = sum / _M[i2][i2]
      i2 = i2 - 1
    end
    return x
  end
  def predict(xs, coeffs)
    i = 0
    result = []
    while i < xs.length
      x = xs[i]
      j = 0
      pow = 1.0
      sum = 0.0
      while j < coeffs.length
        sum = _add(sum, coeffs[j] * pow)
        pow = pow * x
        j = _add(j, 1)
      end
      result = (result + [sum])
      i = _add(i, 1)
    end
    return result
  end
  $xs = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
  $ys = []
  $i = 0
  while $i < $xs.length
    x = $xs[$i]
    $ys = ($ys + [_add(x * x * x - 2.0 * x * x, 3.0 * x) - 5.0])
    $i = _add($i, 1)
  end
  $X = design_matrix($xs, 3)
  $Xt = transpose($X)
  $XtX = matmul($Xt, $X)
  $Xty = matvec_mul($Xt, $ys)
  $coeffs = gaussian_elimination($XtX, $Xty)
  puts(((x = $coeffs); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([-1.0], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([-2.0], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([6.0], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
