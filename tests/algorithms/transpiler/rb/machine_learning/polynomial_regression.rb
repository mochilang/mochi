# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def design_matrix(xs, degree)
    i = 0
    matrix = []
    while i < _len(xs)
      row = []
      j = 0
      pow = 1.0
      while j <= degree
        row = _append(row, pow)
        pow = pow * (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
        j = _add(j, 1)
      end
      matrix = _append(matrix, row)
      i = _add(i, 1)
    end
    return matrix
  end
  def transpose(matrix)
    rows = _len(matrix)
    cols = _len((__tmp2 = matrix; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
    j = 0
    result = []
    while j < cols
      row = []
      i = 0
      while i < rows
        row = _append(row, (__tmp3 = (__tmp4 = matrix; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)))
        i = _add(i, 1)
      end
      result = _append(result, row)
      j = _add(j, 1)
    end
    return result
  end
  def matmul(a, b)
    n = _len(a)
    m = _len((__tmp5 = a; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)))
    p = _len((__tmp6 = b; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
    i = 0
    result = []
    while i < n
      row = []
      k = 0
      while k < p
        sum = 0.0
        j = 0
        while j < m
          sum = _add(sum, (__tmp7 = (__tmp8 = a; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)) * (__tmp9 = (__tmp10 = b; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)); __tmp9.is_a?(Hash) ? __tmp9[k] : _idx(__tmp9, k)))
          j = _add(j, 1)
        end
        row = _append(row, sum)
        k = _add(k, 1)
      end
      result = _append(result, row)
      i = _add(i, 1)
    end
    return result
  end
  def matvec_mul(a, v)
    n = _len(a)
    m = _len((__tmp11 = a; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)))
    i = 0
    result = []
    while i < n
      sum = 0.0
      j = 0
      while j < m
        sum = _add(sum, (__tmp12 = (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)); __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)) * (__tmp14 = v; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j)))
        j = _add(j, 1)
      end
      result = _append(result, sum)
      i = _add(i, 1)
    end
    return result
  end
  def gaussian_elimination(a, b)
    n = _len(a)
    _M = []
    i = 0
    while i < n
      _M = _append(_M, _append((__tmp15 = a; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)), (__tmp16 = b; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i))))
      i = _add(i, 1)
    end
    k = 0
    while k < n
      j = _add(k, 1)
      while j < n
        factor = (__tmp17 = (__tmp18 = _M; __tmp18.is_a?(Hash) ? __tmp18[j] : _idx(__tmp18, j)); __tmp17.is_a?(Hash) ? __tmp17[k] : _idx(__tmp17, k)) / (__tmp19 = (__tmp20 = _M; __tmp20.is_a?(Hash) ? __tmp20[k] : _idx(__tmp20, k)); __tmp19.is_a?(Hash) ? __tmp19[k] : _idx(__tmp19, k))
        rowj = (__tmp21 = _M; __tmp21.is_a?(Hash) ? __tmp21[j] : _idx(__tmp21, j))
        rowk = (__tmp22 = _M; __tmp22.is_a?(Hash) ? __tmp22[k] : _idx(__tmp22, k))
        l = k
        while l <= n
          rowj[l] = (__tmp23 = rowj; __tmp23.is_a?(Hash) ? __tmp23[l] : _idx(__tmp23, l)) - factor * (__tmp24 = rowk; __tmp24.is_a?(Hash) ? __tmp24[l] : _idx(__tmp24, l))
          l = _add(l, 1)
        end
        _M[j] = rowj
        j = _add(j, 1)
      end
      k = _add(k, 1)
    end
    x = []
    t = 0
    while t < n
      x = _append(x, 0.0)
      t = _add(t, 1)
    end
    i2 = n - 1
    while i2 >= 0
      sum = (__tmp25 = (__tmp26 = _M; __tmp26.is_a?(Hash) ? __tmp26[i2] : _idx(__tmp26, i2)); __tmp25.is_a?(Hash) ? __tmp25[n] : _idx(__tmp25, n))
      j2 = _add(i2, 1)
      while j2 < n
        sum = sum - (__tmp27 = (__tmp28 = _M; __tmp28.is_a?(Hash) ? __tmp28[i2] : _idx(__tmp28, i2)); __tmp27.is_a?(Hash) ? __tmp27[j2] : _idx(__tmp27, j2)) * (__tmp29 = x; __tmp29.is_a?(Hash) ? __tmp29[j2] : _idx(__tmp29, j2))
        j2 = _add(j2, 1)
      end
      x[i2] = sum / (__tmp30 = (__tmp31 = _M; __tmp31.is_a?(Hash) ? __tmp31[i2] : _idx(__tmp31, i2)); __tmp30.is_a?(Hash) ? __tmp30[i2] : _idx(__tmp30, i2))
      i2 = i2 - 1
    end
    return x
  end
  def predict(xs, coeffs)
    i = 0
    result = []
    while i < _len(xs)
      x = (__tmp32 = xs; __tmp32.is_a?(Hash) ? __tmp32[i] : _idx(__tmp32, i))
      j = 0
      pow = 1.0
      sum = 0.0
      while j < _len(coeffs)
        sum = _add(sum, (__tmp33 = coeffs; __tmp33.is_a?(Hash) ? __tmp33[j] : _idx(__tmp33, j)) * pow)
        pow = pow * x
        j = _add(j, 1)
      end
      result = _append(result, sum)
      i = _add(i, 1)
    end
    return result
  end
  $xs = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
  $ys = []
  $i = 0
  while $i < _len($xs)
    x = (__tmp34 = $xs; __tmp34.is_a?(Hash) ? __tmp34[$i] : _idx(__tmp34, $i))
    $ys = _append($ys, _add(x * x * x - 2.0 * x * x, 3.0 * x) - 5.0)
    $i = _add($i, 1)
  end
  $X = design_matrix($xs, 3)
  $Xt = transpose($X)
  $XtX = matmul($Xt, $X)
  $Xty = matvec_mul($Xt, $ys)
  $coeffs = gaussian_elimination($XtX, $Xty)
  puts(((x = $coeffs); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([-1.0], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([-2.0], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = predict([6.0], $coeffs)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
