# Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def int_to_float(x)
    return x * 1.0
  end
  def abs_float(x)
    if x < 0.0
      return 0.0 - x
    end
    return x
  end
  def exp_approx(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      term = term * x / int_to_float(i)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def floor_int(x)
    i = 0
    while int_to_float(_add(i, 1)) <= x
      i = _add(i, 1)
    end
    return i
  end
  def dot(a, b)
    s = 0.0
    i = 0
    while i < _len(a)
      s = _add(s, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return s
  end
  def transpose(m)
    rows = _len(m)
    cols = _len((__tmp3 = m; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)))
    res = []
    j = 0
    while j < cols
      row = []
      i = 0
      while i < rows
        row = _append(row, (__tmp4 = (__tmp5 = m; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)))
        i = _add(i, 1)
      end
      res = _append(res, row)
      j = _add(j, 1)
    end
    return res
  end
  def matmul(a, b)
    n = _len(a)
    m = _len((__tmp6 = b; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
    p = _len(b)
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < m
        s = 0.0
        k = 0
        while k < p
          s = _add(s, (__tmp7 = (__tmp8 = a; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)) * (__tmp9 = (__tmp10 = b; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)))
          k = _add(k, 1)
        end
        row = _append(row, s)
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def matvec(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, dot((__tmp11 = a; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)), b))
      i = _add(i, 1)
    end
    return res
  end
  def identity(n)
    res = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = _append(row, (_eq(i, j) ? 1.0 : 0.0))
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def invert(mat)
    n = _len(mat)
    a = mat
    inv = identity(n)
    i = 0
    while i < n
      pivot = (__tmp12 = (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)); __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
      j = 0
      while j < n
        (__tmp14 = a; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))[j] = (__tmp15 = (__tmp16 = a; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)) / pivot
        (__tmp17 = inv; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))[j] = (__tmp18 = (__tmp19 = inv; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)); __tmp18.is_a?(Hash) ? __tmp18[j] : _idx(__tmp18, j)) / pivot
        j = _add(j, 1)
      end
      k = 0
      while k < n
        if !_eq(k, i)
          factor = (__tmp20 = (__tmp21 = a; __tmp21.is_a?(Hash) ? __tmp21[k] : _idx(__tmp21, k)); __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i))
          j = 0
          while j < n
            (__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[k] : _idx(__tmp22, k))[j] = (__tmp23 = (__tmp24 = a; __tmp24.is_a?(Hash) ? __tmp24[k] : _idx(__tmp24, k)); __tmp23.is_a?(Hash) ? __tmp23[j] : _idx(__tmp23, j)) - factor * (__tmp25 = (__tmp26 = a; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i)); __tmp25.is_a?(Hash) ? __tmp25[j] : _idx(__tmp25, j))
            (__tmp27 = inv; __tmp27.is_a?(Hash) ? __tmp27[k] : _idx(__tmp27, k))[j] = (__tmp28 = (__tmp29 = inv; __tmp29.is_a?(Hash) ? __tmp29[k] : _idx(__tmp29, k)); __tmp28.is_a?(Hash) ? __tmp28[j] : _idx(__tmp28, j)) - factor * (__tmp30 = (__tmp31 = inv; __tmp31.is_a?(Hash) ? __tmp31[i] : _idx(__tmp31, i)); __tmp30.is_a?(Hash) ? __tmp30[j] : _idx(__tmp30, j))
            j = _add(j, 1)
          end
        end
        k = _add(k, 1)
      end
      i = _add(i, 1)
    end
    return inv
  end
  def normal_equation(x, y)
    _Xt = transpose(x)
    _XtX = matmul(_Xt, x)
    _XtX_inv = invert(_XtX)
    _Xty = matvec(_Xt, y)
    return matvec(_XtX_inv, _Xty)
  end
  def linear_regression_prediction(train_dt, train_usr, train_mtch, test_dt, test_mtch)
    _X = []
    i = 0
    while i < _len(train_dt)
      _X = _append(_X, [1.0, (__tmp32 = train_dt; __tmp32.is_a?(Hash) ? __tmp32[i] : _idx(__tmp32, i)), (__tmp33 = train_mtch; __tmp33.is_a?(Hash) ? __tmp33[i] : _idx(__tmp33, i))])
      i = _add(i, 1)
    end
    beta = normal_equation(_X, train_usr)
    return abs_float(_add(_add((__tmp34 = beta; __tmp34.is_a?(Hash) ? __tmp34[0] : _idx(__tmp34, 0)), (__tmp35 = test_dt; __tmp35.is_a?(Hash) ? __tmp35[0] : _idx(__tmp35, 0)) * (__tmp36 = beta; __tmp36.is_a?(Hash) ? __tmp36[1] : _idx(__tmp36, 1))), (__tmp37 = test_mtch; __tmp37.is_a?(Hash) ? __tmp37[0] : _idx(__tmp37, 0)) * (__tmp38 = beta; __tmp38.is_a?(Hash) ? __tmp38[2] : _idx(__tmp38, 2))))
  end
  def sarimax_predictor(train_user, train_match, test_match)
    n = _len(train_user)
    _X = []
    y = []
    i = 1
    while i < n
      _X = _append(_X, [1.0, (__tmp39 = train_user; __tmp39.is_a?(Hash) ? __tmp39[i - 1] : _idx(__tmp39, i - 1)), (__tmp40 = train_match; __tmp40.is_a?(Hash) ? __tmp40[i] : _idx(__tmp40, i))])
      y = _append(y, (__tmp41 = train_user; __tmp41.is_a?(Hash) ? __tmp41[i] : _idx(__tmp41, i)))
      i = _add(i, 1)
    end
    beta = normal_equation(_X, y)
    return _add(_add((__tmp42 = beta; __tmp42.is_a?(Hash) ? __tmp42[0] : _idx(__tmp42, 0)), (__tmp43 = beta; __tmp43.is_a?(Hash) ? __tmp43[1] : _idx(__tmp43, 1)) * (__tmp44 = train_user; __tmp44.is_a?(Hash) ? __tmp44[n - 1] : _idx(__tmp44, n - 1))), (__tmp45 = beta; __tmp45.is_a?(Hash) ? __tmp45[2] : _idx(__tmp45, 2)) * (__tmp46 = test_match; __tmp46.is_a?(Hash) ? __tmp46[0] : _idx(__tmp46, 0)))
  end
  def rbf_kernel(a, b, gamma)
    sum = 0.0
    i = 0
    while i < _len(a)
      diff = (__tmp47 = a; __tmp47.is_a?(Hash) ? __tmp47[i] : _idx(__tmp47, i)) - (__tmp48 = b; __tmp48.is_a?(Hash) ? __tmp48[i] : _idx(__tmp48, i))
      sum = _add(sum, diff * diff)
      i = _add(i, 1)
    end
    return exp_approx(-gamma * sum)
  end
  def support_vector_regressor(x_train, x_test, train_user)
    gamma = 0.1
    weights = []
    i = 0
    while i < _len(x_train)
      weights = _append(weights, rbf_kernel((__tmp49 = x_train; __tmp49.is_a?(Hash) ? __tmp49[i] : _idx(__tmp49, i)), (__tmp50 = x_test; __tmp50.is_a?(Hash) ? __tmp50[0] : _idx(__tmp50, 0)), gamma))
      i = _add(i, 1)
    end
    num = 0.0
    den = 0.0
    i = 0
    while i < _len(train_user)
      num = _add(num, (__tmp51 = weights; __tmp51.is_a?(Hash) ? __tmp51[i] : _idx(__tmp51, i)) * (__tmp52 = train_user; __tmp52.is_a?(Hash) ? __tmp52[i] : _idx(__tmp52, i)))
      den = _add(den, (__tmp53 = weights; __tmp53.is_a?(Hash) ? __tmp53[i] : _idx(__tmp53, i)))
      i = _add(i, 1)
    end
    return num / den
  end
  def set_at_float(xs, idx, value)
    i = 0
    res = []
    while i < _len(xs)
      if _eq(i, idx)
        res = _append(res, value)
      else
        res = _append(res, (__tmp54 = xs; __tmp54.is_a?(Hash) ? __tmp54[i] : _idx(__tmp54, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def sort_float(xs)
    res = xs
    i = 1
    while i < _len(res)
      key = (__tmp55 = res; __tmp55.is_a?(Hash) ? __tmp55[i] : _idx(__tmp55, i))
      j = i - 1
      while j >= 0 && (__tmp56 = res; __tmp56.is_a?(Hash) ? __tmp56[j] : _idx(__tmp56, j)) > key
        res = set_at_float(res, _add(j, 1), (__tmp57 = res; __tmp57.is_a?(Hash) ? __tmp57[j] : _idx(__tmp57, j)))
        j = j - 1
      end
      res = set_at_float(res, _add(j, 1), key)
      i = _add(i, 1)
    end
    return res
  end
  def percentile(data, q)
    sorted = sort_float(data)
    n = _len(sorted)
    pos = (q / 100.0) * int_to_float(n - 1)
    idx = floor_int(pos)
    frac = pos - int_to_float(idx)
    if _add(idx, 1) < n
      return _add((__tmp58 = sorted; __tmp58.is_a?(Hash) ? __tmp58[idx] : _idx(__tmp58, idx)) * (1.0 - frac), (__tmp59 = sorted; __tmp59.is_a?(Hash) ? __tmp59[_add(idx, 1)] : _idx(__tmp59, _add(idx, 1))) * frac)
    end
    return (__tmp60 = sorted; __tmp60.is_a?(Hash) ? __tmp60[idx] : _idx(__tmp60, idx))
  end
  def interquartile_range_checker(train_user)
    q1 = percentile(train_user, 25.0)
    q3 = percentile(train_user, 75.0)
    iqr = q3 - q1
    return q1 - iqr * 0.1
  end
  def data_safety_checker(list_vote, actual_result)
    safe = 0
    not_safe = 0
    i = 0
    while i < _len(list_vote)
      v = (__tmp61 = list_vote; __tmp61.is_a?(Hash) ? __tmp61[i] : _idx(__tmp61, i))
      if v > actual_result
        safe = _add(not_safe, 1)
      else
        if abs_float(abs_float(v) - abs_float(actual_result)) <= 0.1
          safe = _add(safe, 1)
        else
          not_safe = _add(not_safe, 1)
        end
      end
      i = _add(i, 1)
    end
    return safe > not_safe
  end
  def main()
    vote = [linear_regression_prediction([2.0, 3.0, 4.0, 5.0], [5.0, 3.0, 4.0, 6.0], [3.0, 1.0, 2.0, 4.0], [2.0], [2.0]), sarimax_predictor([4.0, 2.0, 6.0, 8.0], [3.0, 1.0, 2.0, 4.0], [2.0]), support_vector_regressor([[5.0, 2.0], [1.0, 5.0], [6.0, 2.0]], [[3.0, 2.0]], [2.0, 1.0, 4.0])]
    puts((__tmp62 = vote; __tmp62.is_a?(Hash) ? __tmp62[0] : _idx(__tmp62, 0)))
    puts((__tmp63 = vote; __tmp63.is_a?(Hash) ? __tmp63[1] : _idx(__tmp63, 1)))
    puts((__tmp64 = vote; __tmp64.is_a?(Hash) ? __tmp64[2] : _idx(__tmp64, 2)))
    puts((data_safety_checker(vote, 5.0) ? 'true' : 'false'))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
