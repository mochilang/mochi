# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def expApprox(x)
    if x < 0
      return 1 / expApprox(-x)
    end
    if x > 1
      half = expApprox(x / 2)
      return half * half
    end
    sum = 1.clone
    term = 1.clone
    n = 1.clone
    while n < 20
      term = term * x / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def transpose(mat)
    rows = mat.length
    cols = mat[0].length
    res = [].clone
    i = 0.clone
    while i < cols
      row = [].clone
      j = 0.clone
      while j < rows
        row = (row << (mat[j][i])).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def matMul(a, b)
    a_rows = a.length
    a_cols = a[0].length
    b_cols = b[0].length
    res = [].clone
    i = 0.clone
    while i < a_rows
      row = [].clone
      j = 0.clone
      while j < b_cols
        sum = 0.clone
        k = 0.clone
        while k < a_cols
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def matInv(mat)
    n = mat.length
    aug = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        row = (row << (mat[i][j])).clone
        j = _add(j, 1).clone
      end
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1)).clone
        else
          row = (row << (0)).clone
        end
        j = _add(j, 1).clone
      end
      aug = (aug << (row)).clone
      i = _add(i, 1).clone
    end
    col = 0.clone
    while col < n
      pivot = aug[col][col]
      if pivot == 0
        panic("Matrix is singular")
      end
      j = 0.clone
      while j < 2 * n
        aug[col][j] = aug[col][j] / pivot
        j = _add(j, 1).clone
      end
      r = 0.clone
      while r < n
        if r != col
          factor = aug[r][col]
          j = 0.clone
          while j < 2 * n
            aug[r][j] = aug[r][j] - factor * aug[col][j]
            j = _add(j, 1).clone
          end
        end
        r = _add(r, 1).clone
      end
      col = _add(col, 1).clone
    end
    inv = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        row = (row << (aug[i][_add(j, n)])).clone
        j = _add(j, 1).clone
      end
      inv = (inv << (row)).clone
      i = _add(i, 1).clone
    end
    return inv
  end
  def weight_matrix(point, x_train, tau)
    m = x_train.length
    weights = [].clone
    i = 0.clone
    while i < m
      row = [].clone
      j = 0.clone
      while j < m
        if i == j
          row = (row << (1)).clone
        else
          row = (row << (0)).clone
        end
        j = _add(j, 1).clone
      end
      weights = (weights << (row)).clone
      i = _add(i, 1).clone
    end
    j = 0.clone
    while j < m
      diff_sq = 0.clone
      k = 0.clone
      while k < point.length
        diff = point[k] - x_train[j][k]
        diff_sq = _add(diff_sq, diff * diff).clone
        k = _add(k, 1).clone
      end
      weights[j][j] = expApprox(-diff_sq / (2 * tau * tau))
      j = _add(j, 1).clone
    end
    return weights
  end
  def local_weight(point, x_train, y_train, tau)
    w = weight_matrix(point, x_train, tau)
    x_t = transpose(x_train)
    x_t_w = matMul(x_t, w)
    x_t_w_x = matMul(x_t_w, x_train)
    inv_part = matInv(x_t_w_x)
    y_col = [].clone
    i = 0.clone
    while i < y_train.length
      y_col = (y_col << ([y_train[i]])).clone
      i = _add(i, 1).clone
    end
    x_t_w_y = matMul(x_t_w, y_col)
    return matMul(inv_part, x_t_w_y)
  end
  def local_weight_regression(x_train, y_train, tau)
    m = x_train.length
    preds = [].clone
    i = 0.clone
    while i < m
      theta = local_weight(x_train[i], x_train, y_train, tau)
      weights_vec = [].clone
      k = 0.clone
      while k < theta.length
        weights_vec = (weights_vec << (theta[k][0])).clone
        k = _add(k, 1).clone
      end
      pred = 0.clone
      j = 0.clone
      while j < x_train[i].length
        pred = _add(pred, x_train[i][j] * weights_vec[j]).clone
        j = _add(j, 1).clone
      end
      preds = (preds << (pred)).clone
      i = _add(i, 1).clone
    end
    return preds
  end
  $x_train = [[16.99, 10.34], [21.01, 23.68], [24.59, 25.69]]
  $y_train = [1.01, 1.66, 3.5]
  $preds = local_weight_regression($x_train, $y_train, 0.6)
  puts(JSON.pretty_generate($preds))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
