# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def expApprox(x)
    if x < 0.0
      return 1.0 / expApprox(-x)
    end
    if x > 1.0
      half = expApprox(x / 2.0)
      return half * half
    end
    sum = 1.0
    term = 1.0
    n = 1
    while n < 20
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def transpose(mat)
    rows = mat.length
    cols = mat[0].length
    res = []
    i = 0
    while i < cols
      row = []
      j = 0
      while j < rows
        row = (row + [mat[j][i]])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def matMul(a, b)
    a_rows = a.length
    a_cols = a[0].length
    b_cols = b[0].length
    res = []
    i = 0
    while i < a_rows
      row = []
      j = 0
      while j < b_cols
        sum = 0.0
        k = 0
        while k < a_cols
          sum = _add(sum, a[i][k] * b[k][j])
          k = _add(k, 1)
        end
        row = (row + [sum])
        j = _add(j, 1)
      end
      res = (res + [row])
      i = _add(i, 1)
    end
    return res
  end
  def matInv(mat)
    n = mat.length
    aug = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [mat[i][j]])
        j = _add(j, 1)
      end
      j = 0
      while j < n
        if _eq(i, j)
          row = (row + [1.0])
        else
          row = (row + [0.0])
        end
        j = _add(j, 1)
      end
      aug = (aug + [row])
      i = _add(i, 1)
    end
    col = 0
    while col < n
      pivot = aug[col][col]
      if _eq(pivot, 0.0)
        panic("Matrix is singular")
      end
      j = 0
      while j < 2 * n
        aug[col][j] = aug[col][j] / pivot
        j = _add(j, 1)
      end
      r = 0
      while r < n
        if !_eq(r, col)
          factor = aug[r][col]
          j = 0
          while j < 2 * n
            aug[r][j] = aug[r][j] - factor * aug[col][j]
            j = _add(j, 1)
          end
        end
        r = _add(r, 1)
      end
      col = _add(col, 1)
    end
    inv = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [aug[i][_add(j, n)]])
        j = _add(j, 1)
      end
      inv = (inv + [row])
      i = _add(i, 1)
    end
    return inv
  end
  def weight_matrix(point, x_train, tau)
    m = x_train.length
    weights = []
    i = 0
    while i < m
      row = []
      j = 0
      while j < m
        if _eq(i, j)
          row = (row + [1.0])
        else
          row = (row + [0.0])
        end
        j = _add(j, 1)
      end
      weights = (weights + [row])
      i = _add(i, 1)
    end
    j = 0
    while j < m
      diff_sq = 0.0
      k = 0
      while k < point.length
        diff = point[k] - x_train[j][k]
        diff_sq = _add(diff_sq, diff * diff)
        k = _add(k, 1)
      end
      weights[j][j] = expApprox(-diff_sq / (2.0 * tau * tau))
      j = _add(j, 1)
    end
    return weights
  end
  def local_weight(point, x_train, y_train, tau)
    w = weight_matrix(point, x_train, tau)
    x_t = transpose(x_train)
    x_t_w = matMul(x_t, w)
    x_t_w_x = matMul(x_t_w, x_train)
    inv_part = matInv(x_t_w_x)
    y_col = []
    i = 0
    while i < y_train.length
      y_col = (y_col + [[y_train[i]]])
      i = _add(i, 1)
    end
    x_t_w_y = matMul(x_t_w, y_col)
    return matMul(inv_part, x_t_w_y)
  end
  def local_weight_regression(x_train, y_train, tau)
    m = x_train.length
    preds = []
    i = 0
    while i < m
      theta = local_weight(x_train[i], x_train, y_train, tau)
      weights_vec = []
      k = 0
      while k < theta.length
        weights_vec = (weights_vec + [theta[k][0]])
        k = _add(k, 1)
      end
      pred = 0.0
      j = 0
      while j < x_train[i].length
        pred = _add(pred, x_train[i][j] * weights_vec[j])
        j = _add(j, 1)
      end
      preds = (preds + [pred])
      i = _add(i, 1)
    end
    return preds
  end
  $x_train = [[16.99, 10.34], [21.01, 23.68], [24.59, 25.69]]
  $y_train = [1.01, 1.66, 3.5]
  $preds = local_weight_regression($x_train, $y_train, 0.6)
  puts(JSON.pretty_generate($preds))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
