# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def expApprox(x)
    if x < 0.0
      return 1.0 / expApprox(-x)
    end
    if x > 1.0
      half = expApprox(x / 2.0)
      return half * half
    end
    sum = 1.0
    term = 1.0
    n = 1
    while n < 20
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def transpose(mat)
    rows = _len(mat)
    cols = _len((__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
    res = []
    i = 0
    while i < cols
      row = []
      j = 0
      while j < rows
        row = _append(row, (__tmp2 = (__tmp3 = mat; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)); __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def matMul(a, b)
    a_rows = _len(a)
    a_cols = _len((__tmp4 = a; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0)))
    b_cols = _len((__tmp5 = b; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)))
    res = []
    i = 0
    while i < a_rows
      row = []
      j = 0
      while j < b_cols
        sum = 0.0
        k = 0
        while k < a_cols
          sum = _add(sum, (__tmp6 = (__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)); __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k)) * (__tmp8 = (__tmp9 = b; __tmp9.is_a?(Hash) ? __tmp9[k] : _idx(__tmp9, k)); __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
          k = _add(k, 1)
        end
        row = _append(row, sum)
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def matInv(mat)
    n = _len(mat)
    aug = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = _append(row, (__tmp10 = (__tmp11 = mat; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)); __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)))
        j = _add(j, 1)
      end
      j = 0
      while j < n
        if _eq(i, j)
          row = _append(row, 1.0)
        else
          row = _append(row, 0.0)
        end
        j = _add(j, 1)
      end
      aug = _append(aug, row)
      i = _add(i, 1)
    end
    col = 0
    while col < n
      pivot = (__tmp12 = (__tmp13 = aug; __tmp13.is_a?(Hash) ? __tmp13[col] : _idx(__tmp13, col)); __tmp12.is_a?(Hash) ? __tmp12[col] : _idx(__tmp12, col))
      if _eq(pivot, 0.0)
        panic("Matrix is singular")
      end
      j = 0
      while j < 2 * n
        (__tmp14 = aug; __tmp14.is_a?(Hash) ? __tmp14[col] : _idx(__tmp14, col))[j] = (__tmp15 = (__tmp16 = aug; __tmp16.is_a?(Hash) ? __tmp16[col] : _idx(__tmp16, col)); __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)) / pivot
        j = _add(j, 1)
      end
      r = 0
      while r < n
        if !_eq(r, col)
          factor = (__tmp17 = (__tmp18 = aug; __tmp18.is_a?(Hash) ? __tmp18[r] : _idx(__tmp18, r)); __tmp17.is_a?(Hash) ? __tmp17[col] : _idx(__tmp17, col))
          j = 0
          while j < 2 * n
            (__tmp19 = aug; __tmp19.is_a?(Hash) ? __tmp19[r] : _idx(__tmp19, r))[j] = (__tmp20 = (__tmp21 = aug; __tmp21.is_a?(Hash) ? __tmp21[r] : _idx(__tmp21, r)); __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j)) - factor * (__tmp22 = (__tmp23 = aug; __tmp23.is_a?(Hash) ? __tmp23[col] : _idx(__tmp23, col)); __tmp22.is_a?(Hash) ? __tmp22[j] : _idx(__tmp22, j))
            j = _add(j, 1)
          end
        end
        r = _add(r, 1)
      end
      col = _add(col, 1)
    end
    inv = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = _append(row, (__tmp24 = (__tmp25 = aug; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i)); __tmp24.is_a?(Hash) ? __tmp24[_add(j, n)] : _idx(__tmp24, _add(j, n))))
        j = _add(j, 1)
      end
      inv = _append(inv, row)
      i = _add(i, 1)
    end
    return inv
  end
  def weight_matrix(point, x_train, tau)
    m = _len(x_train)
    weights = []
    i = 0
    while i < m
      row = []
      j = 0
      while j < m
        if _eq(i, j)
          row = _append(row, 1.0)
        else
          row = _append(row, 0.0)
        end
        j = _add(j, 1)
      end
      weights = _append(weights, row)
      i = _add(i, 1)
    end
    j = 0
    while j < m
      diff_sq = 0.0
      k = 0
      while k < _len(point)
        diff = (__tmp26 = point; __tmp26.is_a?(Hash) ? __tmp26[k] : _idx(__tmp26, k)) - (__tmp27 = (__tmp28 = x_train; __tmp28.is_a?(Hash) ? __tmp28[j] : _idx(__tmp28, j)); __tmp27.is_a?(Hash) ? __tmp27[k] : _idx(__tmp27, k))
        diff_sq = _add(diff_sq, diff * diff)
        k = _add(k, 1)
      end
      (__tmp29 = weights; __tmp29.is_a?(Hash) ? __tmp29[j] : _idx(__tmp29, j))[j] = expApprox(-diff_sq / (2.0 * tau * tau))
      j = _add(j, 1)
    end
    return weights
  end
  def local_weight(point, x_train, y_train, tau)
    w = weight_matrix(point, x_train, tau)
    x_t = transpose(x_train)
    x_t_w = matMul(x_t, w)
    x_t_w_x = matMul(x_t_w, x_train)
    inv_part = matInv(x_t_w_x)
    y_col = []
    i = 0
    while i < _len(y_train)
      y_col = _append(y_col, [(__tmp30 = y_train; __tmp30.is_a?(Hash) ? __tmp30[i] : _idx(__tmp30, i))])
      i = _add(i, 1)
    end
    x_t_w_y = matMul(x_t_w, y_col)
    return matMul(inv_part, x_t_w_y)
  end
  def local_weight_regression(x_train, y_train, tau)
    m = _len(x_train)
    preds = []
    i = 0
    while i < m
      theta = local_weight((__tmp31 = x_train; __tmp31.is_a?(Hash) ? __tmp31[i] : _idx(__tmp31, i)), x_train, y_train, tau)
      weights_vec = []
      k = 0
      while k < _len(theta)
        weights_vec = _append(weights_vec, (__tmp32 = (__tmp33 = theta; __tmp33.is_a?(Hash) ? __tmp33[k] : _idx(__tmp33, k)); __tmp32.is_a?(Hash) ? __tmp32[0] : _idx(__tmp32, 0)))
        k = _add(k, 1)
      end
      pred = 0.0
      j = 0
      while j < _len((__tmp34 = x_train; __tmp34.is_a?(Hash) ? __tmp34[i] : _idx(__tmp34, i)))
        pred = _add(pred, (__tmp35 = (__tmp36 = x_train; __tmp36.is_a?(Hash) ? __tmp36[i] : _idx(__tmp36, i)); __tmp35.is_a?(Hash) ? __tmp35[j] : _idx(__tmp35, j)) * (__tmp37 = weights_vec; __tmp37.is_a?(Hash) ? __tmp37[j] : _idx(__tmp37, j)))
        j = _add(j, 1)
      end
      preds = _append(preds, pred)
      i = _add(i, 1)
    end
    return preds
  end
  $x_train = [[16.99, 10.34], [21.01, 23.68], [24.59, 25.69]]
  $y_train = [1.01, 1.66, 3.5]
  $preds = local_weight_regression($x_train, $y_train, 0.6)
  puts(JSON.pretty_generate($preds))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
