# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:41 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sinApprox(x)
    term = x.clone
    sum = x.clone
    n = 1.clone
    while n <= 10
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom.clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def cosApprox(x)
    term = 1.clone
    sum = 1.clone
    n = 1.clone
    while n <= 10
      denom = (((2 * n - 1) * (2 * n))).to_f
      term = -term * x * x / denom.clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def expApprox(x)
    sum = 1.clone
    term = 1.clone
    n = 1.clone
    while n < 10
      term = term * x / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def ln(x)
    t = (x - 1) / (_add(x, 1))
    term = t.clone
    sum = 0.clone
    n = 1.clone
    while n <= 19
      sum = _add(sum, term / ((n).to_f)).clone
      term = term * t * t.clone
      n = _add(n, 2).clone
    end
    return 2 * sum
  end
  def log10(x)
    return ln(x) / ln(10)
  end
  def sqrtApprox(x)
    if x <= 0
      return 0
    end
    guess = x.clone
    i = 0.clone
    while i < 10
      guess = (_add(guess, x / guess)) / 2.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def absf(x)
    if x < 0
      return -x
    end
    return x
  end
  def normalize(audio)
    max_val = 0.clone
    i = 0.clone
    while i < audio.length
      v = absf(audio[i])
      if v > max_val
        max_val = v.clone
      end
      i = _add(i, 1).clone
    end
    res = [].clone
    i = 0.clone
    while i < audio.length
      res = (res << (audio[i] / max_val)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def dft(frame, bins)
    _N = frame.length
    spec = [].clone
    k = 0.clone
    while k < bins
      real = 0.clone
      imag = 0.clone
      n = 0.clone
      while n < _N
        angle = -2 * $PI * ((k).to_f) * ((n).to_f) / ((_N).to_f)
        real = _add(real, frame[n] * cosApprox(angle)).clone
        imag = _add(imag, frame[n] * sinApprox(angle)).clone
        n = _add(n, 1).clone
      end
      spec = (spec << (_add(real * real, imag * imag))).clone
      k = _add(k, 1).clone
    end
    return spec
  end
  def triangular_filters(bins, spectrum_size)
    filters = [].clone
    b = 0.clone
    while b < bins
      center = ((_add(b, 1)) * spectrum_size) / (_add(bins, 1))
      filt = [].clone
      i = 0.clone
      while i < spectrum_size
        v = 0.clone
        if i <= center
          v = ((i).to_f) / ((center).to_f).clone
        else
          v = (((spectrum_size - i)).to_f) / (((spectrum_size - center)).to_f).clone
        end
        filt = (filt << (v)).clone
        i = _add(i, 1).clone
      end
      filters = (filters << (filt)).clone
      b = _add(b, 1).clone
    end
    return filters
  end
  def dot(mat, vec)
    res = [].clone
    i = 0.clone
    while i < mat.length
      sum = 0.clone
      j = 0.clone
      while j < vec.length
        sum = _add(sum, mat[i][j] * vec[j]).clone
        j = _add(j, 1).clone
      end
      res = (res << (sum)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def discrete_cosine_transform(dct_filter_num, filter_num)
    basis = [].clone
    i = 0.clone
    while i < dct_filter_num
      row = [].clone
      j = 0.clone
      while j < filter_num
        if i == 0
          row = (row << (1 / sqrtApprox((filter_num).to_f))).clone
        else
          angle = (((_add(2 * j, 1))).to_f) * ((i).to_f) * $PI / (2 * ((filter_num).to_f))
          row = (row << (cosApprox(angle) * sqrtApprox(2 / ((filter_num).to_f)))).clone
        end
        j = _add(j, 1).clone
      end
      basis = (basis << (row)).clone
      i = _add(i, 1).clone
    end
    return basis
  end
  def mfcc(audio, bins, dct_num)
    norm = normalize(audio)
    spec = dft(norm, _add(bins, 2))
    filters = triangular_filters(bins, spec.length)
    energies = dot(filters, spec)
    logfb = [].clone
    i = 0.clone
    while i < energies.length
      logfb = (logfb << (10 * log10(_add(energies[i], 1e-10)))).clone
      i = _add(i, 1).clone
    end
    dct_basis = discrete_cosine_transform(dct_num, bins)
    res = dot(dct_basis, logfb).clone
    if res.length == 0
      res = [0, 0, 0].clone
    end
    return res
  end
  $PI = 3.141592653589793
  $sample_rate = 8000
  $size = 16
  $audio = [].clone
  $n = 0.clone
  while $n < $size
    t = (($n).to_f) / (($sample_rate).to_f)
    $audio = ($audio << (sinApprox(2 * $PI * 440 * t))).clone
    $n = _add($n, 1).clone
  end
  $coeffs = mfcc($audio, 5, 3)
    __tmp1 = $coeffs
  if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
    __tmp1 = __tmp1.keys
  end
  __tmp1.each do |c|
    puts(c)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
