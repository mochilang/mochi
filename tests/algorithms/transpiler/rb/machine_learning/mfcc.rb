# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sinApprox(x)
    term = x
    sum = x
    n = 1
    while n <= 10
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def cosApprox(x)
    term = 1.0
    sum = 1.0
    n = 1
    while n <= 10
      denom = (((2 * n - 1) * (2 * n))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def expApprox(x)
    sum = 1.0
    term = 1.0
    n = 1
    while n < 10
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def ln(x)
    return Math.log(x)
  end
  def log10(x)
    return ln(x) / ln(10.0)
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def normalize(audio)
    max_val = 0.0
    i = 0
    while i < _len(audio)
      v = absf((__tmp1 = audio; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      if v > max_val
        max_val = v
      end
      i = _add(i, 1)
    end
    res = []
    i = 0
    while i < _len(audio)
      res = _append(res, (__tmp2 = audio; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)) / max_val)
      i = _add(i, 1)
    end
    return res
  end
  def dft(frame, bins)
    _N = _len(frame)
    spec = []
    k = 0
    while k < bins
      real = 0.0
      imag = 0.0
      n = 0
      while n < _N
        angle = -2.0 * $PI * ((k).to_f) * ((n).to_f) / ((_N).to_f)
        real = _add(real, (__tmp3 = frame; __tmp3.is_a?(Hash) ? __tmp3[n] : _idx(__tmp3, n)) * cosApprox(angle))
        imag = _add(imag, (__tmp4 = frame; __tmp4.is_a?(Hash) ? __tmp4[n] : _idx(__tmp4, n)) * sinApprox(angle))
        n = _add(n, 1)
      end
      spec = _append(spec, _add(real * real, imag * imag))
      k = _add(k, 1)
    end
    return spec
  end
  def triangular_filters(bins, spectrum_size)
    filters = []
    b = 0
    while b < bins
      center = ((_add(b, 1)) * spectrum_size) / (_add(bins, 1))
      filt = []
      i = 0
      while i < spectrum_size
        v = 0.0
        if i <= center
          v = ((i).to_f) / ((center).to_f)
        else
          v = (((spectrum_size - i)).to_f) / (((spectrum_size - center)).to_f)
        end
        filt = _append(filt, v)
        i = _add(i, 1)
      end
      filters = _append(filters, filt)
      b = _add(b, 1)
    end
    return filters
  end
  def dot(mat, vec)
    res = []
    i = 0
    while i < _len(mat)
      sum = 0.0
      j = 0
      while j < _len(vec)
        sum = _add(sum, (__tmp5 = (__tmp6 = mat; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)); __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)) * (__tmp7 = vec; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)))
        j = _add(j, 1)
      end
      res = _append(res, sum)
      i = _add(i, 1)
    end
    return res
  end
  def discrete_cosine_transform(dct_filter_num, filter_num)
    basis = []
    i = 0
    while i < dct_filter_num
      row = []
      j = 0
      while j < filter_num
        if _eq(i, 0)
          row = _append(row, 1.0 / sqrtApprox((filter_num).to_f))
        else
          angle = (((_add(2 * j, 1))).to_f) * ((i).to_f) * $PI / (2.0 * ((filter_num).to_f))
          row = _append(row, cosApprox(angle) * sqrtApprox(2.0 / ((filter_num).to_f)))
        end
        j = _add(j, 1)
      end
      basis = _append(basis, row)
      i = _add(i, 1)
    end
    return basis
  end
  def mfcc(audio, bins, dct_num)
    norm = normalize(audio)
    spec = dft(norm, _add(bins, 2))
    filters = triangular_filters(bins, _len(spec))
    energies = dot(filters, spec)
    logfb = []
    i = 0
    while i < _len(energies)
      logfb = _append(logfb, 10.0 * log10(_add((__tmp8 = energies; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)), 1e-10)))
      i = _add(i, 1)
    end
    dct_basis = discrete_cosine_transform(dct_num, bins)
    res = dot(dct_basis, logfb)
    if _eq(_len(res), 0)
      res = [0.0, 0.0, 0.0]
    end
    return res
  end
  $PI = 3.141592653589793
  $sample_rate = 8000
  $size = 16
  $audio = []
  $n = 0
  while $n < $size
    t = (($n).to_f) / (($sample_rate).to_f)
    $audio = _append($audio, sinApprox(2.0 * $PI * 440.0 * t))
    $n = _add($n, 1)
  end
  $coeffs = mfcc($audio, 5, 3)
    __tmp9 = $coeffs
  __tmp9 = [] if __tmp9.nil?
  if __tmp9.respond_to?(:keys) && !__tmp9.is_a?(String)
    __tmp9 = __tmp9.keys
  end
  __tmp9.each do |c|
    puts(c)
  end
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
