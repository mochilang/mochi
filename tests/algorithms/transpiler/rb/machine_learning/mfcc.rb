# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def sinApprox(x)
    term = x
    sum = x
    n = 1
    while n <= 10
      denom = (((2 * n) * (_add(2 * n, 1)))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def cosApprox(x)
    term = 1.0
    sum = 1.0
    n = 1
    while n <= 10
      denom = (((2 * n - 1) * (2 * n))).to_f
      term = -term * x * x / denom
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def expApprox(x)
    sum = 1.0
    term = 1.0
    n = 1
    while n < 10
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def ln(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    n = 1
    while n <= 19
      sum = _add(sum, term / ((n).to_f))
      term = term * t * t
      n = _add(n, 2)
    end
    return 2.0 * sum
  end
  def log10(x)
    return ln(x) / ln(10.0)
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def normalize(audio)
    max_val = 0.0
    i = 0
    while i < audio.length
      v = absf(audio[i])
      if v > max_val
        max_val = v
      end
      i = _add(i, 1)
    end
    res = []
    i = 0
    while i < audio.length
      res = (res + [audio[i] / max_val])
      i = _add(i, 1)
    end
    return res
  end
  def dft(frame, bins)
    _N = frame.length
    spec = []
    k = 0
    while k < bins
      real = 0.0
      imag = 0.0
      n = 0
      while n < _N
        angle = -2.0 * $PI * ((k).to_f) * ((n).to_f) / ((_N).to_f)
        real = _add(real, frame[n] * cosApprox(angle))
        imag = _add(imag, frame[n] * sinApprox(angle))
        n = _add(n, 1)
      end
      spec = (spec + [_add(real * real, imag * imag)])
      k = _add(k, 1)
    end
    return spec
  end
  def triangular_filters(bins, spectrum_size)
    filters = []
    b = 0
    while b < bins
      center = ((_add(b, 1)) * spectrum_size) / (_add(bins, 1))
      filt = []
      i = 0
      while i < spectrum_size
        v = 0.0
        if i <= center
          v = ((i).to_f) / ((center).to_f)
        else
          v = (((spectrum_size - i)).to_f) / (((spectrum_size - center)).to_f)
        end
        filt = (filt + [v])
        i = _add(i, 1)
      end
      filters = (filters + [filt])
      b = _add(b, 1)
    end
    return filters
  end
  def dot(mat, vec)
    res = []
    i = 0
    while i < mat.length
      sum = 0.0
      j = 0
      while j < vec.length
        sum = _add(sum, mat[i][j] * vec[j])
        j = _add(j, 1)
      end
      res = (res + [sum])
      i = _add(i, 1)
    end
    return res
  end
  def discrete_cosine_transform(dct_filter_num, filter_num)
    basis = []
    i = 0
    while i < dct_filter_num
      row = []
      j = 0
      while j < filter_num
        if _eq(i, 0)
          row = (row + [1.0 / sqrtApprox((filter_num).to_f)])
        else
          angle = (((_add(2 * j, 1))).to_f) * ((i).to_f) * $PI / (2.0 * ((filter_num).to_f))
          row = (row + [cosApprox(angle) * sqrtApprox(2.0 / ((filter_num).to_f))])
        end
        j = _add(j, 1)
      end
      basis = (basis + [row])
      i = _add(i, 1)
    end
    return basis
  end
  def mfcc(audio, bins, dct_num)
    norm = normalize(audio)
    spec = dft(norm, _add(bins, 2))
    filters = triangular_filters(bins, spec.length)
    energies = dot(filters, spec)
    logfb = []
    i = 0
    while i < energies.length
      logfb = (logfb + [10.0 * log10(_add(energies[i], 1e-10))])
      i = _add(i, 1)
    end
    dct_basis = discrete_cosine_transform(dct_num, bins)
    res = dot(dct_basis, logfb)
    if _eq(res.length, 0)
      res = [0.0, 0.0, 0.0]
    end
    return res
  end
  $PI = 3.141592653589793
  $sample_rate = 8000
  $size = 16
  $audio = []
  $n = 0
  while $n < $size
    t = (($n).to_f) / (($sample_rate).to_f)
    $audio = ($audio + [sinApprox(2.0 * $PI * 440.0 * t)])
    $n = _add($n, 1)
  end
  $coeffs = mfcc($audio, 5, 3)
    __tmp1 = $coeffs
  if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
    __tmp1 = __tmp1.keys
  end
  __tmp1.each do |c|
    puts(c)
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
