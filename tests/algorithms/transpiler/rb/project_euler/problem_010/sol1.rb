# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(number)
    if number < 2
      return false
    end
    if number < 4
      return true
    end
    if number % 2 == 0 || number % 3 == 0
      return false
    end
    i = 5.clone
    while i * i <= number
      if number % i == 0 || number % (_add(i, 2)) == 0
        return false
      end
      i = _add(i, 6).clone
    end
    return true
  end
  def solution(n)
    if n <= 2
      return 0
    end
    total = 2.clone
    num = 3.clone
    while num < n
      if is_prime(num)
        total = _add(total, num).clone
      end
      num = _add(num, 2).clone
    end
    return total
  end
  $result = solution(1000)
  puts(_add("solution() = ", _str($result)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
