# Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:32 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def join_digits(xs)
    s = "".clone
    i = 0.clone
    while i < xs.length
      s = _add(s, xs[i]).clone
      i = _add(i, 1).clone
    end
    return s
  end
  def digits_to_int(xs)
    return (join_digits(xs)).to_i
  end
  def contains_int(xs, value)
    i = 0.clone
    while i < xs.length
      if _eq(xs[i], value)
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def remove_at(xs, idx)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if !_eq(i, idx)
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def is_combination_valid(comb)
    prod = digits_to_int(comb[5...9])
    mul2 = digits_to_int(comb[0...2])
    mul3 = digits_to_int(comb[2...5])
    if _eq(mul2 * mul3, prod)
      return true
    end
    mul1 = digits_to_int(comb[0...1])
    mul4 = digits_to_int(comb[1...5])
    return _eq(mul1 * mul4, prod)
  end
  def search(prefix, remaining, products)
    if _eq(remaining.length, 0)
      if is_combination_valid(prefix)
        p = digits_to_int(prefix[5...9])
        if !contains_int(products, p)
          products = (products << (p)).clone
        end
      end
      return products
    end
    i = 0.clone
    while i < remaining.length
      next_prefix = (prefix << (remaining[i]))
      next_remaining = remove_at(remaining, i)
      products = search(next_prefix, next_remaining, products).clone
      i = _add(i, 1).clone
    end
    return products
  end
  $digits = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
  $products = [].clone
  $products = search([], $digits, $products).clone
  $total = 0.clone
  $i = 0.clone
  while $i < $products.length
    $total = _add($total, $products[$i]).clone
    $i = _add($i, 1).clone
  end
  puts(_str($total))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
