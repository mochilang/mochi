# Generated by Mochi transpiler v0.10.67 on 2025-08-17 09:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def join_digits(xs)
    s = ""
    i = 0
    while i < _len(xs)
      s = _add(s, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return s
  end
  def digits_to_int(xs)
    return (join_digits(xs)).to_i
  end
  def contains_int(xs, value)
    i = 0
    while i < _len(xs)
      if _eq((__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), value)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def remove_at(xs, idx)
    res = []
    i = 0
    while i < _len(xs)
      if !_eq(i, idx)
        res = _append(res, (__tmp3 = xs; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def is_combination_valid(comb)
    prod = digits_to_int(comb[5...9])
    mul2 = digits_to_int(comb[0...2])
    mul3 = digits_to_int(comb[2...5])
    if _eq(mul2 * mul3, prod)
      return true
    end
    mul1 = digits_to_int(comb[0...1])
    mul4 = digits_to_int(comb[1...5])
    return _eq(mul1 * mul4, prod)
  end
  def search(prefix, remaining, products)
    if _eq(_len(remaining), 0)
      if is_combination_valid(prefix)
        p = digits_to_int(prefix[5...9])
        if !contains_int(products, p)
          products = _append(products, p)
        end
      end
      return products
    end
    i = 0
    while i < _len(remaining)
      next_prefix = _append(prefix, (__tmp4 = remaining; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
      next_remaining = remove_at(remaining, i)
      products = search(next_prefix, next_remaining, products)
      i = _add(i, 1)
    end
    return products
  end
  $digits = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
  $products = []
  $products = search([], $digits, $products)
  $total = 0
  $i = 0
  while $i < _len($products)
    $total = _add($total, (__tmp5 = $products; __tmp5.is_a?(Hash) ? __tmp5[$i] : _idx(__tmp5, $i)))
    $i = _add($i, 1)
  end
  puts(_str($total))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
