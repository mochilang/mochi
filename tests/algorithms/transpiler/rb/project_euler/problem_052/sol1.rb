# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def digits_count(n)
    counts = [].clone
    i = 0.clone
    while i < 10
      counts = (counts << (0)).clone
      i = _add(i, 1).clone
    end
    x = n.clone
    if _eq(x, 0)
      counts[0] = _add(counts[0], 1)
    end
    while x > 0
      d = x % 10
      counts[d] = _add(counts[d], 1)
      x = x / 10.clone
    end
    return counts
  end
  def equal_lists(a, b)
    i = 0.clone
    while i < a.length
      if !_eq(a[i], b[i])
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def solution()
    i = 1.clone
    while true
      c = digits_count(i)
      if equal_lists(c, digits_count(2 * i)) && equal_lists(c, digits_count(3 * i)) && equal_lists(c, digits_count(4 * i)) && equal_lists(c, digits_count(5 * i)) && equal_lists(c, digits_count(6 * i))
        return i
      end
      i = _add(i, 1).clone
    end
  end
  puts(_str(solution()))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
