# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def range_desc(start, end_)
    res = [].clone
    i = start.clone
    while i >= end_
      res = (res << (i)).clone
      i = i - 1.clone
    end
    return res
  end
  def range_asc(start, end_)
    res = [].clone
    i = start.clone
    while i <= end_
      res = (res << (i)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def concat_lists(a, b)
    res = a.clone
    i = 0.clone
    while i < b.length
      res = (res << (b[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def swap(xs, i, j)
    res = [].clone
    k = 0.clone
    while k < xs.length
      if _eq(k, i)
        res = (res << (xs[j])).clone
      else
        if _eq(k, j)
          res = (res << (xs[i])).clone
        else
          res = (res << (xs[k])).clone
        end
      end
      k = _add(k, 1).clone
    end
    return res
  end
  def generate_gon_ring(gon_side, perm)
    result = [].clone
    result = (result << (perm[0])).clone
    result = (result << (perm[1])).clone
    result = (result << (perm[2])).clone
    extended = (perm << (perm[1])).clone
    magic_number = (gon_side < 5 ? 1 : 2)
    i = 1.clone
    while i < _add(extended.length / 3, magic_number)
      result = (result << (extended[_add(2 * i, 1)])).clone
      result = (result << (result[3 * i - 1])).clone
      result = (result << (extended[_add(2 * i, 2)])).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def min_outer(numbers)
    min_val = numbers[0].clone
    i = 3.clone
    while i < numbers.length
      if numbers[i] < min_val
        min_val = numbers[i].clone
      end
      i = _add(i, 3).clone
    end
    return min_val
  end
  def is_magic_gon(numbers)
    if !_eq(numbers.length % 3, 0)
      return false
    end
    if !_eq(min_outer(numbers), numbers[0])
      return false
    end
    total = _add(_add(numbers[0], numbers[1]), numbers[2])
    i = 3.clone
    while i < numbers.length
      if !_eq(_add(_add(numbers[i], numbers[_add(i, 1)]), numbers[_add(i, 2)]), total)
        return false
      end
      i = _add(i, 3).clone
    end
    return true
  end
  def permute_search(nums, start, gon_side, current_max)
    if _eq(start, nums.length)
      ring = generate_gon_ring(gon_side, nums)
      if is_magic_gon(ring)
        s = "".clone
        k = 0.clone
        while k < ring.length
          s = _add(s, _str(ring[k])).clone
          k = _add(k, 1).clone
        end
        if s > current_max
          return s
        end
      end
      return current_max
    end
    res = current_max.clone
    i = start.clone
    while i < nums.length
      swapped = swap(nums, start, i)
      candidate = permute_search(swapped, _add(start, 1), gon_side, res)
      if candidate > res
        res = candidate.clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def solution(gon_side)
    if gon_side < 3 || gon_side > 5
      return ""
    end
    small = range_desc(_add(gon_side, 1), 1)
    big = range_asc(_add(gon_side, 2), gon_side * 2)
    numbers = concat_lists(small, big)
    max_str = permute_search(numbers, 0, gon_side, "")
    return max_str
  end
  puts(solution(5))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
