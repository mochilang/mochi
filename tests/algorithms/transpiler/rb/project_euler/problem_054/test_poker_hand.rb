# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split(s, sep)
    parts = [].clone
    cur = "".clone
    i = 0.clone
    while i < s.length
      if sep.length > 0 && _add(i, sep.length) <= s.length && _eq(s[i..._add(i, sep.length)], sep)
        parts = (parts << (cur)).clone
        cur = "".clone
        i = _add(i, sep.length).clone
      else
        cur = _add(cur, s[i..._add(i, 1)]).clone
        i = _add(i, 1).clone
      end
    end
    parts = (parts << (cur)).clone
    return parts
  end
  def card_value(ch)
    if _eq(ch, "A")
      return 14
    else
      if _eq(ch, "K")
        return 13
      else
        if _eq(ch, "Q")
          return 12
        else
          if _eq(ch, "J")
            return 11
          else
            if _eq(ch, "T")
              return 10
            else
              if _eq(ch, "9")
                return 9
              else
                if _eq(ch, "8")
                  return 8
                else
                  if _eq(ch, "7")
                    return 7
                  else
                    if _eq(ch, "6")
                      return 6
                    else
                      if _eq(ch, "5")
                        return 5
                      else
                        if _eq(ch, "4")
                          return 4
                        else
                          if _eq(ch, "3")
                            return 3
                          else
                            return 2
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  def parse_hand(hand)
    counts = [].clone
    i = 0.clone
    while i <= 14
      counts = (counts << (0)).clone
      i = _add(i, 1).clone
    end
    suits = [].clone
        __tmp1 = split(hand, " ")
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |card|
      v = card_value(card[0...1])
      counts[v] = _add(counts[v], 1)
      suits = (suits << (card[1...2])).clone
    end
    vals = [].clone
    v = 14.clone
    while v >= 2
      c = counts[v].clone
      k = 0.clone
      while k < c
        vals = (vals << (v)).clone
        k = _add(k, 1).clone
      end
      v = v - 1.clone
    end
    is_straight = false.clone
    if _eq(vals.length, 5) && _eq(vals[0], 14) && _eq(vals[1], 5) && _eq(vals[2], 4) && _eq(vals[3], 3) && _eq(vals[4], 2)
      is_straight = true.clone
      vals[0] = 5
      vals[1] = 4
      vals[2] = 3
      vals[3] = 2
      vals[4] = 14
    else
      is_straight = true.clone
      j = 0.clone
      while j < 4
        if !_eq(vals[j] - vals[_add(j, 1)], 1)
          is_straight = false.clone
        end
        j = _add(j, 1).clone
      end
    end
    is_flush = true.clone
    s0 = suits[0].clone
    t = 1.clone
    while t < suits.length
      if !_eq(suits[t], s0)
        is_flush = false.clone
      end
      t = _add(t, 1).clone
    end
    four_val = 0.clone
    three_val = 0.clone
    pair_vals = [].clone
    v = 14.clone
    while v >= 2
      if _eq(counts[v], 4)
        four_val = v.clone
      else
        if _eq(counts[v], 3)
          three_val = v.clone
        else
          if _eq(counts[v], 2)
            pair_vals = (pair_vals << (v)).clone
          end
        end
      end
      v = v - 1.clone
    end
    rank = 1.clone
    if is_flush && is_straight && _eq(vals[0], 14) && _eq(vals[4], 10)
      rank = 10.clone
    else
      if is_flush && is_straight
        rank = 9.clone
      else
        if !_eq(four_val, 0)
          rank = 8.clone
        else
          if !_eq(three_val, 0) && _eq(pair_vals.length, 1)
            rank = 7.clone
          else
            if is_flush
              rank = 6.clone
            else
              if is_straight
                rank = 5.clone
              else
                if !_eq(three_val, 0)
                  rank = 4.clone
                else
                  if _eq(pair_vals.length, 2)
                    rank = 3.clone
                  else
                    if _eq(pair_vals.length, 1)
                      rank = 2.clone
                    else
                      rank = 1.clone
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    return Hand.new(rank: rank, values: vals)
  end
  def compare(a, b)
    if a.rank > b.rank
      return "Win"
    end
    if a.rank < b.rank
      return "Loss"
    end
    i = 0.clone
    while i < a.values.length
      if a.values[i] > b.values[i]
        return "Win"
      end
      if a.values[i] < b.values[i]
        return "Loss"
      end
      i = _add(i, 1).clone
    end
    return "Tie"
  end
  def main()
    tests = [["2H 3H 4H 5H 6H", "KS AS TS QS JS", "Loss"], ["2H 3H 4H 5H 6H", "AS AD AC AH JD", "Win"], ["AS AH 2H AD AC", "JS JD JC JH 3D", "Win"], ["2S AH 2H AS AC", "JS JD JC JH AD", "Loss"], ["2S AH 2H AS AC", "2H 3H 5H 6H 7H", "Win"]]
        __tmp2 = tests
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |t|
      res = compare(parse_hand(t[0]), parse_hand(t[1]))
      puts(_add(_add(res, " expected "), t[2]))
    end
  end
  Hand = Struct.new(:rank, :values, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
