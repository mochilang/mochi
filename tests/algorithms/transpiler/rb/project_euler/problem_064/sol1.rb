# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def intSqrt(n)
    if _eq(n, 0)
      return 0
    end
    x = n.clone
    y = (_add(x, 1)) / 2.clone
    while y < x
      x = y.clone
      y = (_add(x, n / x)) / 2.clone
    end
    return x
  end
  def continuousFractionPeriod(n)
    m = 0.clone
    d = 1.clone
    a0 = intSqrt(n)
    a = a0.clone
    period = 0.clone
    while !_eq(a, 2 * a0)
      m = d * a - m.clone
      d = (n - m * m) / d.clone
      a = (_add(a0, m)) / d.clone
      period = _add(period, 1).clone
    end
    return period
  end
  def solution(n)
    count = 0.clone
    (2...(_add(n, 1))).each do |i|
      r = intSqrt(i)
      if !_eq(r * r, i)
        p = continuousFractionPeriod(i)
        if _eq(p % 2, 1)
          count = _add(count, 1).clone
        end
      end
    end
    return count
  end
  def main()
    nStr = _input()
    n = (nStr).to_i
    puts(solution(n))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
