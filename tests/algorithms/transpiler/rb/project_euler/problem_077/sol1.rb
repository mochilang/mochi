# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def generate_primes(limit)
    is_prime = [].clone
    i = 0.clone
    while i <= limit
      is_prime = (is_prime << (true)).clone
      i = _add(i, 1).clone
    end
    is_prime[0] = false
    is_prime[1] = false
    i = 2.clone
    while i * i <= limit
      if is_prime[i]
        j = i * i.clone
        while j <= limit
          is_prime[j] = false
          j = _add(j, i).clone
        end
      end
      i = _add(i, 1).clone
    end
    primes = [].clone
    i = 2.clone
    while i <= limit
      if is_prime[i]
        primes = (primes << (i)).clone
      end
      i = _add(i, 1).clone
    end
    return primes
  end
  def contains(xs, value)
    i = 0.clone
    while i < xs.length
      if _eq(xs[i], value)
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def partition(n)
    if n < 0
      return []
    end
    if _eq(n, 0)
      return [1]
    end
    if $partition_cache.key?(n)
      return $partition_cache[n]
    end
    ret = [].clone
        __tmp1 = $primes
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |prime|
      if prime > n
        next
      end
      subs = partition(n - prime)
            __tmp2 = subs
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |sub|
        prod = sub * prime
        if !contains(ret, prod)
          ret = (ret << (prod)).clone
        end
      end
    end
    $partition_cache[n] = ret
    return ret
  end
  def solution(threshold)
    number_to_partition = 1.clone
    while number_to_partition < $NUM_PRIMES
      parts = partition(number_to_partition)
      if parts.length > threshold
        return number_to_partition
      end
      number_to_partition = _add(number_to_partition, 1).clone
    end
    return 0
  end
  $NUM_PRIMES = 100
  $primes = generate_primes($NUM_PRIMES)
  $partition_cache = {}.clone
  $result = solution(5000)
  puts(_add("solution() = ", _str($result)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
