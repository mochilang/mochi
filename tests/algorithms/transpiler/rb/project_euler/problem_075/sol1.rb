# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = a.clone
    y = b.clone
    while !_eq(y, 0)
      t = x % y
      x = y.clone
      y = t.clone
    end
    return x
  end
  def solution(limit)
    frequencies = {}.clone
    m = 2.clone
    while 2 * m * (_add(m, 1)) <= limit
      n = _add((m % 2), 1).clone
      while n < m
        if gcd(m, n) > 1
          n = _add(n, 2).clone
          next
        end
        primitive_perimeter = 2 * m * (_add(m, n))
        perimeter = primitive_perimeter.clone
        while perimeter <= limit
          if !(frequencies.key?(perimeter))
            frequencies[perimeter] = 0
          end
          frequencies[perimeter] = _add(frequencies[perimeter], 1)
          perimeter = _add(perimeter, primitive_perimeter).clone
        end
        n = _add(n, 2).clone
      end
      m = _add(m, 1).clone
    end
    count = 0.clone
        __tmp1 = frequencies.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |p|
      if _eq(frequencies[p], 1)
        count = _add(count, 1).clone
      end
    end
    return count
  end
  $result = solution(1500000)
  puts(_add("solution() = ", _str($result)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
