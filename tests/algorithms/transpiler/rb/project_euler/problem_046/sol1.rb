# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_sqrt(n)
    r = 0.clone
    while (_add(r, 1)) * (_add(r, 1)) <= n
      r = _add(r, 1).clone
    end
    return r
  end
  def is_prime(number)
    if 1 < number && number < 4
      return true
    end
    if number < 2 || _eq(number % 2, 0) || _eq(number % 3, 0)
      return false
    end
    i = 5.clone
    limit = int_sqrt(number)
    while i <= limit
      if _eq(number % i, 0) || _eq(number % (_add(i, 2)), 0)
        return false
      end
      i = _add(i, 6).clone
    end
    return true
  end
  def compute_nums(n)
    if n <= 0
      panic("n must be >= 0")
    end
    list_nums = [].clone
    num = 3.clone
    while list_nums.length < n
      if !is_prime(num)
        i = 0.clone
        found = false.clone
        while 2 * i * i <= num
          rem = num - 2 * i * i
          if is_prime(rem)
            found = true.clone
            break
          end
          i = _add(i, 1).clone
        end
        if !found
          list_nums = (list_nums << (num)).clone
        end
      end
      num = _add(num, 2).clone
    end
    return list_nums
  end
  def solution()
    return compute_nums(1)[0]
  end
  puts(_str(solution()))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
