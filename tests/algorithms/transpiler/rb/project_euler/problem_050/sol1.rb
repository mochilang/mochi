# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:53 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def prime_sieve(limit)
    if limit <= 2
      return []
    end
    is_prime = []
    i = 0
    while i < limit
      is_prime = (is_prime << (true))
      i = _add(i, 1)
    end
    is_prime[0] = false
    is_prime[1] = false
    p = 3
    while p * p < limit
      index = p * 2
      while index < limit
        is_prime[index] = false
        index = _add(index, p)
      end
      p = _add(p, 2)
    end
    primes = [2]
    n = 3
    while n < limit
      if is_prime[n]
        primes = (primes << (n))
      end
      n = _add(n, 2)
    end
    return primes
  end
  def solution(ceiling)
    primes = prime_sieve(ceiling)
    prime_map = {}
    i = 0
    while i < primes.length
      prime_map[primes[i]] = true
      i = _add(i, 1)
    end
    prefix = [0]
    i = 0
    while i < primes.length
      prefix = (prefix << (_add(prefix[i], primes[i])))
      i = _add(i, 1)
    end
    max_len = 0
    while max_len < prefix.length && prefix[max_len] < ceiling
      max_len = _add(max_len, 1)
    end
    _L = max_len
    while _L > 0
      start = 0
      while _add(start, _L) <= primes.length
        s = prefix[_add(start, _L)] - prefix[start]
        if s >= ceiling
          break
        end
        if prime_map[s]
          return s
        end
        start = _add(start, 1)
      end
      _L = _L - 1
    end
    return 0
  end
  $ans = solution(1000000)
  puts(_add("solution() = ", _str($ans)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
