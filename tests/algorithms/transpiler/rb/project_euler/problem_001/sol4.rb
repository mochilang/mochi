# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def contains(xs, value)
    i = 0.clone
    while i < xs.length
      if xs[i] == value
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def solution(n)
    zmulti = [].clone
    xmulti = [].clone
    temp = 1.clone
    while true
      result = 3 * temp
      if result < n
        zmulti = (zmulti << (result)).clone
        temp = _add(temp, 1).clone
      else
        break
      end
    end
    temp = 1.clone
    while true
      result = 5 * temp
      if result < n
        xmulti = (xmulti << (result)).clone
        temp = _add(temp, 1).clone
      else
        break
      end
    end
    collection = [].clone
    i = 0.clone
    while i < zmulti.length
      v = zmulti[i]
      if !contains(collection, v)
        collection = (collection << (v)).clone
      end
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < xmulti.length
      v = xmulti[i]
      if !contains(collection, v)
        collection = (collection << (v)).clone
      end
      i = _add(i, 1).clone
    end
    total = 0.clone
    i = 0.clone
    while i < collection.length
      total = _add(total, collection[i]).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def test_solution()
    if solution(3) != 0
      panic("solution(3) failed")
    end
    if solution(4) != 3
      panic("solution(4) failed")
    end
    if solution(10) != 23
      panic("solution(10) failed")
    end
    if solution(600) != 83700
      panic("solution(600) failed")
    end
  end
  def main()
    test_solution()
    puts(_add("solution() = ", _str(solution(1000))))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
