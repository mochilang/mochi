# Generated by Mochi transpiler v0.10.71 on 2025-08-23 15:31 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_9_pandigital(n)
    digits = []
    i = 0
    while i < 10
      digits = _append(digits, 0)
      i = _add(i, 1)
    end
    count = 0
    x = n
    while x > 0
      digit = x % 10
      if _eq(digit, 0)
        return false
      end
      if _eq((__tmp1 = digits; __tmp1.is_a?(Hash) ? __tmp1[digit] : _idx(__tmp1, digit)), 1)
        return false
      end
      digits[digit] = 1
      x = x / 10
      count = _add(count, 1)
    end
    return _eq(count, 9) && _eq((__tmp2 = digits; __tmp2.is_a?(Hash) ? __tmp2[1] : _idx(__tmp2, 1)), 1) && _eq((__tmp3 = digits; __tmp3.is_a?(Hash) ? __tmp3[2] : _idx(__tmp3, 2)), 1) && _eq((__tmp4 = digits; __tmp4.is_a?(Hash) ? __tmp4[3] : _idx(__tmp4, 3)), 1) && _eq((__tmp5 = digits; __tmp5.is_a?(Hash) ? __tmp5[4] : _idx(__tmp5, 4)), 1) && _eq((__tmp6 = digits; __tmp6.is_a?(Hash) ? __tmp6[5] : _idx(__tmp6, 5)), 1) && _eq((__tmp7 = digits; __tmp7.is_a?(Hash) ? __tmp7[6] : _idx(__tmp7, 6)), 1) && _eq((__tmp8 = digits; __tmp8.is_a?(Hash) ? __tmp8[7] : _idx(__tmp8, 7)), 1) && _eq((__tmp9 = digits; __tmp9.is_a?(Hash) ? __tmp9[8] : _idx(__tmp9, 8)), 1) && _eq((__tmp10 = digits; __tmp10.is_a?(Hash) ? __tmp10[9] : _idx(__tmp10, 9)), 1)
  end
  def solution()
    base_num = 9999
    while base_num >= 5000
      candidate = 100002 * base_num
      if is_9_pandigital(candidate)
        return candidate
      end
      base_num = base_num - 1
    end
    base_num = 333
    while base_num >= 100
      candidate = 1002003 * base_num
      if is_9_pandigital(candidate)
        return candidate
      end
      base_num = base_num - 1
    end
    return 0
  end
  puts(_add("solution() = ", _str(solution())))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
