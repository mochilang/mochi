# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_substring_divisible(num)
    if !_eq(num[3] % 2, 0)
      return false
    end
    if !_eq((_add(_add(num[2], num[3]), num[4])) % 3, 0)
      return false
    end
    if !_eq(num[5] % 5, 0)
      return false
    end
    primes = [7, 11, 13, 17]
    i = 0.clone
    while i < primes.length
      p = primes[i]
      idx = _add(i, 4)
      val = _add(_add(num[idx] * 100, num[_add(idx, 1)] * 10), num[_add(idx, 2)])
      if !_eq(val % p, 0)
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def remove_at(xs, idx)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if !_eq(i, idx)
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def digits_to_number(xs)
    value = 0.clone
    i = 0.clone
    while i < xs.length
      value = _add(value * 10, xs[i]).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def search(prefix, remaining)
    if _eq(remaining.length, 0)
      if is_substring_divisible(prefix)
        return digits_to_number(prefix)
      end
      return 0
    end
    total = 0.clone
    i = 0.clone
    while i < remaining.length
      d = remaining[i]
      next_prefix = (prefix << (d))
      next_remaining = remove_at(remaining, i)
      total = _add(total, search(next_prefix, next_remaining)).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def solution(n)
    digits = [].clone
    i = 0.clone
    while i < n
      digits = (digits << (i)).clone
      i = _add(i, 1).clone
    end
    return search([], digits)
  end
  puts(((["solution() =", solution(10)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
