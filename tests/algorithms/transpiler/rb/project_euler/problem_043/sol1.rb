# Generated by Mochi transpiler v0.10.71 on 2025-08-23 15:31 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_substring_divisible(num)
    if !_eq((__tmp1 = num; __tmp1.is_a?(Hash) ? __tmp1[3] : _idx(__tmp1, 3)) % 2, 0)
      return false
    end
    if !_eq((_add(_add((__tmp2 = num; __tmp2.is_a?(Hash) ? __tmp2[2] : _idx(__tmp2, 2)), (__tmp3 = num; __tmp3.is_a?(Hash) ? __tmp3[3] : _idx(__tmp3, 3))), (__tmp4 = num; __tmp4.is_a?(Hash) ? __tmp4[4] : _idx(__tmp4, 4)))) % 3, 0)
      return false
    end
    if !_eq((__tmp5 = num; __tmp5.is_a?(Hash) ? __tmp5[5] : _idx(__tmp5, 5)) % 5, 0)
      return false
    end
    primes = [7, 11, 13, 17]
    i = 0
    while i < _len(primes)
      p = (__tmp6 = primes; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
      idx = _add(i, 4)
      val = _add(_add((__tmp7 = num; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx)) * 100, (__tmp8 = num; __tmp8.is_a?(Hash) ? __tmp8[_add(idx, 1)] : _idx(__tmp8, _add(idx, 1))) * 10), (__tmp9 = num; __tmp9.is_a?(Hash) ? __tmp9[_add(idx, 2)] : _idx(__tmp9, _add(idx, 2))))
      if !_eq(val % p, 0)
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def remove_at(xs, idx)
    res = []
    i = 0
    while i < _len(xs)
      if !_eq(i, idx)
        res = _append(res, (__tmp10 = xs; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def digits_to_number(xs)
    value = 0
    i = 0
    while i < _len(xs)
      value = _add(value * 10, (__tmp11 = xs; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)))
      i = _add(i, 1)
    end
    return value
  end
  def search(prefix, remaining)
    if _eq(_len(remaining), 0)
      if is_substring_divisible(prefix)
        return digits_to_number(prefix)
      end
      return 0
    end
    total = 0
    i = 0
    while i < _len(remaining)
      d = (__tmp12 = remaining; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
      next_prefix = _append(prefix, d)
      next_remaining = remove_at(remaining, i)
      total = _add(total, search(next_prefix, next_remaining))
      i = _add(i, 1)
    end
    return total
  end
  def solution(n)
    digits = []
    i = 0
    while i < n
      digits = _append(digits, i)
      i = _add(i, 1)
    end
    return search([], digits)
  end
  puts(((["solution() =", solution(10)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ')).rstrip())
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
