# Generated by Mochi transpiler v0.10.60 on 2025-08-07 14:57 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_sqrt(n)
    x = 1.clone
    while (_add(x, 1)) * (_add(x, 1)) <= n
      x = _add(x, 1).clone
    end
    return x
  end
  def solution(limit)
    sum_divs = [].clone
    i = 0.clone
    while i <= limit
      sum_divs = (sum_divs << (1)).clone
      i = _add(i, 1).clone
    end
    sqrt_limit = int_sqrt(limit)
    i = 2.clone
    while i <= sqrt_limit
      sum_divs[i * i] = _add(sum_divs[i * i], i)
      k = _add(i, 1).clone
      while k <= limit / i
        sum_divs[k * i] = _add(_add(sum_divs[k * i], k), i)
        k = _add(k, 1).clone
      end
      i = _add(i, 1).clone
    end
    is_abundant = [].clone
    i = 0.clone
    while i <= limit
      is_abundant = (is_abundant << (false)).clone
      i = _add(i, 1).clone
    end
    abundants = [].clone
    res = 0.clone
    n = 1.clone
    while n <= limit
      if sum_divs[n] > n
        abundants = (abundants << (n)).clone
        is_abundant[n] = true
      end
      has_pair = false.clone
      j = 0.clone
      while j < abundants.length
        a = abundants[j]
        if a > n
          break
        end
        b = n - a
        if b <= limit && is_abundant[b]
          has_pair = true.clone
          break
        end
        j = _add(j, 1).clone
      end
      if !has_pair
        res = _add(res, n).clone
      end
      n = _add(n, 1).clone
    end
    return res
  end
  puts(_str(solution(28123)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
