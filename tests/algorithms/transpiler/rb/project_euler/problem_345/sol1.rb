# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_row(row_str)
    nums = [].clone
    current = 0.clone
    has_digit = false.clone
    i = 0.clone
    while i < row_str.length
      ch = row_str[i..._add(i, 1)]
      if _eq(ch, " ")
        if has_digit
          nums = (nums << (current)).clone
          current = 0.clone
          has_digit = false.clone
        end
      else
        current = _add(current * 10, ((ch).to_i)).clone
        has_digit = true.clone
      end
      i = _add(i, 1).clone
    end
    if has_digit
      nums = (nums << (current)).clone
    end
    return nums
  end
  def parse_matrix(matrix_str)
    matrix = [].clone
        __tmp1 = matrix_str
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |row_str|
      row = parse_row(row_str)
      matrix = (matrix << (row)).clone
    end
    return matrix
  end
  def bitcount(x)
    count = 0.clone
    y = x.clone
    while y > 0
      if _eq(y % 2, 1)
        count = _add(count, 1).clone
      end
      y = y / 2.clone
    end
    return count
  end
  def build_powers(n)
    powers = [].clone
    i = 0.clone
    current = 1.clone
    while i <= n
      powers = (powers << (current)).clone
      current = current * 2.clone
      i = _add(i, 1).clone
    end
    return powers
  end
  def solution(matrix_str)
    arr = parse_matrix(matrix_str)
    n = arr.length
    powers = build_powers(n)
    size = powers[n]
    dp = [].clone
    i = 0.clone
    while i < size
      dp = (dp << (0)).clone
      i = _add(i, 1).clone
    end
    mask = 0.clone
    while mask < size
      row = bitcount(mask)
      if row < n
        col = 0.clone
        while col < n
          if _eq((mask / powers[col]) % 2, 0)
            new_mask = _add(mask, powers[col])
            value = _add(dp[mask], arr[row][col])
            if value > dp[new_mask]
              dp[new_mask] = value
            end
          end
          col = _add(col, 1).clone
        end
      end
      mask = _add(mask, 1).clone
    end
    return dp[size - 1]
  end
  $MATRIX_2 = ["7 53 183 439 863 497 383 563 79 973 287 63 343 169 583", "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913", "447 283 463 29 23 487 463 993 119 883 327 493 423 159 743", "217 623 3 399 853 407 103 983 89 463 290 516 212 462 350", "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350", "870 456 192 162 593 473 915 45 989 873 823 965 425 329 803", "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326", "322 148 972 962 286 255 941 541 265 323 925 281 601 95 973", "445 721 11 525 473 65 511 164 138 672 18 428 154 448 848", "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198", "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390", "821 461 843 513 17 901 711 993 293 157 274 94 192 156 574", "34 124 4 878 450 476 712 914 838 669 875 299 823 329 699", "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107", "813 883 451 509 615 77 281 613 459 205 380 274 302 35 805"]
  $result = solution($MATRIX_2)
  puts(_add("solution() = ", _str($result)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
