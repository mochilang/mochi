# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def solution(n)
    counters = [].clone
    i = 0.clone
    while i <= n
      counters = (counters << (0)).clone
      i = _add(i, 1).clone
    end
    counters[1] = 1
    largest_number = 1.clone
    pre_counter = 1.clone
    start = 2.clone
    while start < n
      number = start.clone
      counter = 0.clone
      while true
        if number < counters.length && counters[number] != 0
          counter = _add(counter, counters[number]).clone
          break
        end
        if number % 2 == 0
          number = number / 2.clone
        else
          number = _add(3 * number, 1).clone
        end
        counter = _add(counter, 1).clone
      end
      if start < counters.length && counters[start] == 0
        counters[start] = counter
      end
      if counter > pre_counter
        largest_number = start.clone
        pre_counter = counter.clone
      end
      start = _add(start, 1).clone
    end
    return largest_number
  end
  $input_str = _input()
  $n = ($input_str).to_i
  puts(_str(solution($n)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
