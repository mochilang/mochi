# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrt(x)
    return Math.sqrt(x)
  end
  def is_pentagonal(n)
    root = sqrt(_add(1.0, 24.0 * (1.0 * n)))
    val = (_add(1.0, root)) / 6.0
    val_int = (val).to_i
    return _eq(val, (1.0 * val_int))
  end
  def pentagonal(k)
    return (k * (3 * k - 1)) / 2
  end
  def solution(limit)
    pentagonal_nums = [].clone
    i = 1.clone
    while i < limit
      pentagonal_nums = (pentagonal_nums << (pentagonal(i))).clone
      i = _add(i, 1).clone
    end
    a_idx = 0.clone
    while a_idx < pentagonal_nums.length
      pentagonal_i = pentagonal_nums[a_idx]
      b_idx = a_idx.clone
      while b_idx < pentagonal_nums.length
        pentagonal_j = pentagonal_nums[b_idx]
        s = _add(pentagonal_i, pentagonal_j)
        d = pentagonal_j - pentagonal_i
        if is_pentagonal(s) && is_pentagonal(d)
          return d
        end
        b_idx = _add(b_idx, 1).clone
      end
      a_idx = _add(a_idx, 1).clone
    end
    return -1
  end
  $result = solution(5000)
  puts(_add("solution() = ", _str($result)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
