# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_int(s)
    value = 0.clone
    i = 0.clone
    while i < s.length
      c = s[i]
      value = _add(value * 10, ((c).to_i)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def join(xs)
    s = "".clone
    i = 0.clone
    while i < xs.length
      s = _add(s, xs[i]).clone
      i = _add(i, 1).clone
    end
    return s
  end
  def contains(xs, c)
    i = 0.clone
    while i < xs.length
      if _eq(xs[i], c)
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def index_of(xs, c)
    i = 0.clone
    while i < xs.length
      if _eq(xs[i], c)
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def remove_at(xs, idx)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if !_eq(i, idx)
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def unique_chars(logins)
    chars = [].clone
    i = 0.clone
    while i < logins.length
      login = logins[i]
      j = 0.clone
      while j < login.length
        c = login[j]
        if !contains(chars, c)
          chars = (chars << (c)).clone
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return chars
  end
  def satisfies(permutation, logins)
    i = 0.clone
    while i < logins.length
      login = logins[i]
      i0 = index_of(permutation, login[0])
      i1 = index_of(permutation, login[1])
      i2 = index_of(permutation, login[2])
      if !(i0 < i1 && i1 < i2)
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def search(chars, current, logins)
    if _eq(chars.length, 0)
      if satisfies(current, logins)
        return join(current)
      end
      return ""
    end
    i = 0.clone
    while i < chars.length
      c = chars[i]
      rest = remove_at(chars, i)
      next_ = (current << (c))
      res = search(rest, next_, logins)
      if !_eq(res, "")
        return res
      end
      i = _add(i, 1).clone
    end
    return ""
  end
  def find_secret_passcode(logins)
    chars = unique_chars(logins)
    s = search(chars, [], logins)
    if _eq(s, "")
      return -1
    end
    return parse_int(s)
  end
  $logins1 = ["135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"]
  puts(_str(find_secret_passcode($logins1)))
  $logins2 = ["426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"]
  puts(_str(find_secret_passcode($logins2)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
