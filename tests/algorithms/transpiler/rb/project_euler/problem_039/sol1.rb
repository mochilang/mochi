# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_sqrt(n)
    low = 0.clone
    high = n.clone
    while low <= high
      mid = (_add(low, high)) / 2
      sq = mid * mid
      if _eq(sq, n)
        return mid
      end
      if sq < n
        low = _add(mid, 1).clone
      else
        high = mid - 1.clone
      end
    end
    return high
  end
  def pythagorean_triple(max_perimeter)
    triplets = {}.clone
    base = 1.clone
    while base <= max_perimeter
      perpendicular = base.clone
      while perpendicular <= max_perimeter
        hyp_sq = _add(base * base, perpendicular * perpendicular)
        hyp = int_sqrt(hyp_sq)
        if _eq(hyp * hyp, hyp_sq)
          perimeter = _add(_add(base, perpendicular), hyp)
          if perimeter <= max_perimeter
            if triplets.key?(perimeter)
              triplets[perimeter] = _add(triplets[perimeter], 1)
            else
              triplets[perimeter] = 1
            end
          end
        end
        perpendicular = _add(perpendicular, 1).clone
      end
      base = _add(base, 1).clone
    end
    return triplets
  end
  def max_perimeter(counts)
    best_p = 0.clone
    max_count = 0.clone
        __tmp1 = counts.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |p|
      count = counts[p]
      if (count > max_count) || ((_eq(count, max_count)) && (p > best_p))
        max_count = count.clone
        best_p = p.clone
      end
    end
    return best_p
  end
  def solution(n)
    triplets = pythagorean_triple(n)
    return max_perimeter(triplets)
  end
  def main()
    s200 = max_perimeter(pythagorean_triple(200))
    s100 = max_perimeter(pythagorean_triple(100))
    puts(_str(s100))
    puts(_str(s200))
    best = max_perimeter(pythagorean_triple(1000))
    puts(_str(best))
    puts(_add(_add("Perimeter ", _str(best)), " has maximum solutions"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
