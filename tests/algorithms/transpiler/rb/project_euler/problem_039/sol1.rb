# Generated by Mochi transpiler v0.10.71 on 2025-08-23 15:31 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def int_sqrt(n)
    low = 0
    high = n
    while low <= high
      mid = (_add(low, high)) / 2
      sq = mid * mid
      if _eq(sq, n)
        return mid
      end
      if sq < n
        low = _add(mid, 1)
      else
        high = mid - 1
      end
    end
    return high
  end
  def pythagorean_triple(max_perimeter)
    triplets = {}
    base = 1
    while base <= max_perimeter
      perpendicular = base
      while perpendicular <= max_perimeter
        hyp_sq = _add(base * base, perpendicular * perpendicular)
        hyp = int_sqrt(hyp_sq)
        if _eq(hyp * hyp, hyp_sq)
          perimeter = _add(_add(base, perpendicular), hyp)
          if perimeter <= max_perimeter
            if _has(triplets, perimeter)
              triplets[perimeter] = _add((__tmp1 = triplets; __tmp1.is_a?(Hash) ? __tmp1[perimeter] : _idx(__tmp1, perimeter)), 1)
            else
              triplets[perimeter] = 1
            end
          end
        end
        perpendicular = _add(perpendicular, 1)
      end
      base = _add(base, 1)
    end
    return triplets
  end
  def max_perimeter(counts)
    best_p = 0
    max_count = 0
        __tmp2 = counts.keys()
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |p|
      count = (__tmp3 = counts; __tmp3.is_a?(Hash) ? __tmp3[p] : _idx(__tmp3, p))
      if (count > max_count) || ((_eq(count, max_count)) && (p > best_p))
        max_count = count
        best_p = p
      end
    end
    return best_p
  end
  def solution(n)
    triplets = pythagorean_triple(n)
    return max_perimeter(triplets)
  end
  def main()
    s200 = max_perimeter(pythagorean_triple(200))
    s100 = max_perimeter(pythagorean_triple(100))
    puts(_str(s100))
    puts(_str(s200))
    best = max_perimeter(pythagorean_triple(1000))
    puts(_str(best))
    puts(_add(_add("Perimeter ", _str(best)), " has maximum solutions"))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
