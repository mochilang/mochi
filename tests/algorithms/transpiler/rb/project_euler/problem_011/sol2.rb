# Generated by Mochi transpiler v0.10.69 on 2025-08-22 14:19 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def max_product_four(grid)
    maximum = 0
    i = 0
    while i < 20
      j = 0
      while j < 17
        temp = (__tmp1 = (__tmp2 = grid; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)) * (__tmp3 = (__tmp4 = grid; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[_add(j, 1)] : _idx(__tmp3, _add(j, 1))) * (__tmp5 = (__tmp6 = grid; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)); __tmp5.is_a?(Hash) ? __tmp5[_add(j, 2)] : _idx(__tmp5, _add(j, 2))) * (__tmp7 = (__tmp8 = grid; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[_add(j, 3)] : _idx(__tmp7, _add(j, 3)))
        if temp > maximum
          maximum = temp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    i = 0
    while i < 17
      j = 0
      while j < 20
        temp = (__tmp9 = (__tmp10 = grid; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)) * (__tmp11 = (__tmp12 = grid; __tmp12.is_a?(Hash) ? __tmp12[_add(i, 1)] : _idx(__tmp12, _add(i, 1))); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j)) * (__tmp13 = (__tmp14 = grid; __tmp14.is_a?(Hash) ? __tmp14[_add(i, 2)] : _idx(__tmp14, _add(i, 2))); __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j)) * (__tmp15 = (__tmp16 = grid; __tmp16.is_a?(Hash) ? __tmp16[_add(i, 3)] : _idx(__tmp16, _add(i, 3))); __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j))
        if temp > maximum
          maximum = temp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    i = 0
    while i < 17
      j = 0
      while j < 17
        temp = (__tmp17 = (__tmp18 = grid; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)); __tmp17.is_a?(Hash) ? __tmp17[j] : _idx(__tmp17, j)) * (__tmp19 = (__tmp20 = grid; __tmp20.is_a?(Hash) ? __tmp20[_add(i, 1)] : _idx(__tmp20, _add(i, 1))); __tmp19.is_a?(Hash) ? __tmp19[_add(j, 1)] : _idx(__tmp19, _add(j, 1))) * (__tmp21 = (__tmp22 = grid; __tmp22.is_a?(Hash) ? __tmp22[_add(i, 2)] : _idx(__tmp22, _add(i, 2))); __tmp21.is_a?(Hash) ? __tmp21[_add(j, 2)] : _idx(__tmp21, _add(j, 2))) * (__tmp23 = (__tmp24 = grid; __tmp24.is_a?(Hash) ? __tmp24[_add(i, 3)] : _idx(__tmp24, _add(i, 3))); __tmp23.is_a?(Hash) ? __tmp23[_add(j, 3)] : _idx(__tmp23, _add(j, 3)))
        if temp > maximum
          maximum = temp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    i = 0
    while i < 17
      j = 3
      while j < 20
        temp = (__tmp25 = (__tmp26 = grid; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i)); __tmp25.is_a?(Hash) ? __tmp25[j] : _idx(__tmp25, j)) * (__tmp27 = (__tmp28 = grid; __tmp28.is_a?(Hash) ? __tmp28[_add(i, 1)] : _idx(__tmp28, _add(i, 1))); __tmp27.is_a?(Hash) ? __tmp27[j - 1] : _idx(__tmp27, j - 1)) * (__tmp29 = (__tmp30 = grid; __tmp30.is_a?(Hash) ? __tmp30[_add(i, 2)] : _idx(__tmp30, _add(i, 2))); __tmp29.is_a?(Hash) ? __tmp29[j - 2] : _idx(__tmp29, j - 2)) * (__tmp31 = (__tmp32 = grid; __tmp32.is_a?(Hash) ? __tmp32[_add(i, 3)] : _idx(__tmp32, _add(i, 3))); __tmp31.is_a?(Hash) ? __tmp31[j - 3] : _idx(__tmp31, j - 3))
        if temp > maximum
          maximum = temp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return maximum
  end
  $grid = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
  puts(_str(max_product_four($grid)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
