# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


def _input()
  line = STDIN.gets
  line ? line.chomp : ''
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_names(line)
    names = [].clone
    current = "".clone
    i = 0.clone
    while i < line.length
      ch = line[i..._add(i, 1)]
      if ch == ","
        names = (names << (current)).clone
        current = "".clone
      else
        if ch != "\""
          current = _add(current, ch).clone
        end
      end
      i = _add(i, 1).clone
    end
    names = (names << (current)).clone
    return names
  end
  def insertion_sort(arr)
    a = arr.clone
    i = 1.clone
    while i < a.length
      key = a[i]
      j = i - 1.clone
      while j >= 0 && a[j] > key
        a[_add(j, 1)] = a[j]
        j = j - 1.clone
      end
      a[_add(j, 1)] = key
      i = _add(i, 1).clone
    end
    return a
  end
  def letter_value(ch)
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    idx = 0.clone
    while idx < alphabet.length
      if alphabet[idx..._add(idx, 1)] == ch
        return _add(idx, 1)
      end
      idx = _add(idx, 1).clone
    end
    return 0
  end
  def name_score(name)
    score = 0.clone
    i = 0.clone
    while i < name.length
      score = _add(score, letter_value(name[i..._add(i, 1)])).clone
      i = _add(i, 1).clone
    end
    return score
  end
  def main()
    line = _input()
    names = insertion_sort(parse_names(line))
    total = 0.clone
    i = 0.clone
    while i < names.length
      total = _add(total, (_add(i, 1)) * name_score(names[i])).clone
      i = _add(i, 1).clone
    end
    puts(_str(total))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
