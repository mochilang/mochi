# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_int(s)
    value = 0.clone
    i = 0.clone
    while i < s.length
      value = _add(value * 10, ((s[i]).to_i)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def digit_replacements(number)
    num_str = _str(number)
    counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].clone
    i = 0.clone
    while i < num_str.length
      d = ((num_str[i]).to_i)
      counts[d] = _add(counts[d], 1)
      i = _add(i, 1).clone
    end
    result = [].clone
    digits = "0123456789"
    digit = 0.clone
    while digit < 10
      if counts[digit] > 1
        family = [].clone
        repl = 0.clone
        while repl < 10
          new_str = "".clone
          j = 0.clone
          while j < num_str.length
            c = num_str[j]
            if _eq(c, digits[digit])
              new_str = _add(new_str, digits[repl]).clone
            else
              new_str = _add(new_str, c).clone
            end
            j = _add(j, 1).clone
          end
          family = (family << (parse_int(new_str))).clone
          repl = _add(repl, 1).clone
        end
        result = (result << (family)).clone
      end
      digit = _add(digit, 1).clone
    end
    return result
  end
  def is_prime(num)
    if num < 2
      return false
    end
    if _eq(num % 2, 0)
      return _eq(num, 2)
    end
    i = 3.clone
    while i * i <= num
      if _eq(num % i, 0)
        return false
      end
      i = _add(i, 2).clone
    end
    return true
  end
  def solution(family_length)
    candidate = 121313
    if !is_prime(candidate)
      return -1
    end
    reps = digit_replacements(candidate)
    r = 0.clone
    while r < reps.length
      family = reps[r]
      count = 0.clone
      min_prime = 0.clone
      first = true.clone
      i = 0.clone
      while i < family.length
        num = family[i]
        if is_prime(num)
          if first
            min_prime = num.clone
            first = false.clone
          else
            if num < min_prime
              min_prime = num.clone
            end
          end
          count = _add(count, 1).clone
        end
        i = _add(i, 1).clone
      end
      if _eq(count, family_length)
        return min_prime
      end
      r = _add(r, 1).clone
    end
    return -1
  end
  puts(_str(solution(8)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
