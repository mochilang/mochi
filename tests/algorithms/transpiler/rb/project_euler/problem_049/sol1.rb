# Generated by Mochi transpiler v0.10.71 on 2025-08-23 15:31 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_prime(number)
    if 1 < number && number < 4
      return true
    end
    if number < 2 || _eq(number % 2, 0) || _eq(number % 3, 0)
      return false
    end
    i = 5
    while i * i <= number
      if _eq(number % i, 0) || _eq(number % (_add(i, 2)), 0)
        return false
      end
      i = _add(i, 6)
    end
    return true
  end
  def search(target, arr)
    left = 0
    right = _len(arr) - 1
    while left <= right
      middle = (_add(left, right)) / 2
      if _eq((__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[middle] : _idx(__tmp1, middle)), target)
        return true
      end
      if (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[middle] : _idx(__tmp2, middle)) < target
        left = _add(middle, 1)
      else
        right = middle - 1
      end
    end
    return false
  end
  def sort_int(xs)
    arr = xs
    i = 0
    while i < _len(arr)
      j = _add(i, 1)
      while j < _len(arr)
        if (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)) < (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
          tmp = (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
          arr[i] = (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j))
          arr[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def permutations_of_number(n)
    s = _str(n)
    d = []
    i = 0
    while i < _len(s)
      d = _append(d, ((__tmp7 = s; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))).to_i)
      i = _add(i, 1)
    end
    res = []
    a = 0
    while a < _len(d)
      b = 0
      while b < _len(d)
        if !_eq(b, a)
          c = 0
          while c < _len(d)
            if !_eq(c, a) && !_eq(c, b)
              e = 0
              while e < _len(d)
                if !_eq(e, a) && !_eq(e, b) && !_eq(e, c)
                  val = _add(_add(_add((__tmp8 = d; __tmp8.is_a?(Hash) ? __tmp8[a] : _idx(__tmp8, a)) * 1000, (__tmp9 = d; __tmp9.is_a?(Hash) ? __tmp9[b] : _idx(__tmp9, b)) * 100), (__tmp10 = d; __tmp10.is_a?(Hash) ? __tmp10[c] : _idx(__tmp10, c)) * 10), (__tmp11 = d; __tmp11.is_a?(Hash) ? __tmp11[e] : _idx(__tmp11, e)))
                  res = _append(res, val)
                end
                e = _add(e, 1)
              end
            end
            c = _add(c, 1)
          end
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
    return res
  end
  def abs_int(x)
    if x < 0
      return -x
    end
    return x
  end
  def contains_int(xs, v)
    i = 0
    while i < _len(xs)
      if _eq((__tmp12 = xs; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)), v)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def solution()
    prime_list = []
    n = 1001
    while n < 10000
      if is_prime(n)
        prime_list = _append(prime_list, n)
      end
      n = _add(n, 2)
    end
    candidates = []
    i = 0
    while i < _len(prime_list)
      number = (__tmp13 = prime_list; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      tmp = []
      perms = permutations_of_number(number)
      j = 0
      while j < _len(perms)
        prime = (__tmp14 = perms; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j))
        if !_eq(prime % 2, 0) && search(prime, prime_list)
          tmp = _append(tmp, prime)
        end
        j = _add(j, 1)
      end
      tmp = sort_int(tmp)
      if _len(tmp) >= 3
        candidates = _append(candidates, tmp)
      end
      i = _add(i, 1)
    end
    passed = []
    i = 0
    while i < _len(candidates)
      candidate = (__tmp15 = candidates; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))
      found = false
      a = 0
      while a < _len(candidate)
        b = _add(a, 1)
        while b < _len(candidate)
          c = _add(b, 1)
          while c < _len(candidate)
            x = (__tmp16 = candidate; __tmp16.is_a?(Hash) ? __tmp16[a] : _idx(__tmp16, a))
            y = (__tmp17 = candidate; __tmp17.is_a?(Hash) ? __tmp17[b] : _idx(__tmp17, b))
            z = (__tmp18 = candidate; __tmp18.is_a?(Hash) ? __tmp18[c] : _idx(__tmp18, c))
            if _eq(abs_int(x - y), abs_int(y - z)) && !_eq(x, y) && !_eq(x, z) && !_eq(y, z)
              triple = sort_int([x, y, z])
              passed = _append(passed, triple)
              found = true
              break
            end
            c = _add(c, 1)
          end
          if found
            break
          end
          b = _add(b, 1)
        end
        if found
          break
        end
        a = _add(a, 1)
      end
      i = _add(i, 1)
    end
    answer_nums = []
    i = 0
    while i < _len(passed)
      seq = (__tmp19 = passed; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))
      val = (_add(_add(_str((__tmp20 = seq; __tmp20.is_a?(Hash) ? __tmp20[0] : _idx(__tmp20, 0))), _str((__tmp21 = seq; __tmp21.is_a?(Hash) ? __tmp21[1] : _idx(__tmp21, 1)))), _str((__tmp22 = seq; __tmp22.is_a?(Hash) ? __tmp22[2] : _idx(__tmp22, 2))))).to_i
      if !contains_int(answer_nums, val)
        answer_nums = _append(answer_nums, val)
      end
      i = _add(i, 1)
    end
    max_val = (__tmp23 = answer_nums; __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0))
    i = 1
    while i < _len(answer_nums)
      if (__tmp24 = answer_nums; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)) > max_val
        max_val = (__tmp25 = answer_nums; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i))
      end
      i = _add(i, 1)
    end
    return max_val
  end
  puts(solution())
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
