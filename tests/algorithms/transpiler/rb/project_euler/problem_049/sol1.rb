# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(number)
    if 1 < number && number < 4
      return true
    end
    if number < 2 || _eq(number % 2, 0) || _eq(number % 3, 0)
      return false
    end
    i = 5.clone
    while i * i <= number
      if _eq(number % i, 0) || _eq(number % (_add(i, 2)), 0)
        return false
      end
      i = _add(i, 6).clone
    end
    return true
  end
  def search(target, arr)
    left = 0.clone
    right = arr.length - 1.clone
    while left <= right
      middle = (_add(left, right)) / 2
      if _eq(arr[middle], target)
        return true
      end
      if arr[middle] < target
        left = _add(middle, 1).clone
      else
        right = middle - 1.clone
      end
    end
    return false
  end
  def sort_int(xs)
    arr = xs.clone
    i = 0.clone
    while i < arr.length
      j = _add(i, 1).clone
      while j < arr.length
        if arr[j] < arr[i]
          tmp = arr[i]
          arr[i] = arr[j]
          arr[j] = tmp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def permutations_of_number(n)
    s = _str(n)
    d = [].clone
    i = 0.clone
    while i < s.length
      d = (d << ((s[i]).to_i)).clone
      i = _add(i, 1).clone
    end
    res = [].clone
    a = 0.clone
    while a < d.length
      b = 0.clone
      while b < d.length
        if !_eq(b, a)
          c = 0.clone
          while c < d.length
            if !_eq(c, a) && !_eq(c, b)
              e = 0.clone
              while e < d.length
                if !_eq(e, a) && !_eq(e, b) && !_eq(e, c)
                  val = _add(_add(_add(d[a] * 1000, d[b] * 100), d[c] * 10), d[e])
                  res = (res << (val)).clone
                end
                e = _add(e, 1).clone
              end
            end
            c = _add(c, 1).clone
          end
        end
        b = _add(b, 1).clone
      end
      a = _add(a, 1).clone
    end
    return res
  end
  def abs_int(x)
    if x < 0
      return -x
    end
    return x
  end
  def contains_int(xs, v)
    i = 0.clone
    while i < xs.length
      if _eq(xs[i], v)
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def solution()
    prime_list = [].clone
    n = 1001.clone
    while n < 10000
      if is_prime(n)
        prime_list = (prime_list << (n)).clone
      end
      n = _add(n, 2).clone
    end
    candidates = [].clone
    i = 0.clone
    while i < prime_list.length
      number = prime_list[i]
      tmp = [].clone
      perms = permutations_of_number(number)
      j = 0.clone
      while j < perms.length
        prime = perms[j]
        if !_eq(prime % 2, 0) && search(prime, prime_list)
          tmp = (tmp << (prime)).clone
        end
        j = _add(j, 1).clone
      end
      tmp = sort_int(tmp).clone
      if tmp.length >= 3
        candidates = (candidates << (tmp)).clone
      end
      i = _add(i, 1).clone
    end
    passed = [].clone
    i = 0.clone
    while i < candidates.length
      candidate = candidates[i]
      found = false.clone
      a = 0.clone
      while a < candidate.length
        b = _add(a, 1).clone
        while b < candidate.length
          c = _add(b, 1).clone
          while c < candidate.length
            x = candidate[a]
            y = candidate[b]
            z = candidate[c]
            if _eq(abs_int(x - y), abs_int(y - z)) && !_eq(x, y) && !_eq(x, z) && !_eq(y, z)
              triple = sort_int([x, y, z])
              passed = (passed << (triple)).clone
              found = true.clone
              break
            end
            c = _add(c, 1).clone
          end
          if found
            break
          end
          b = _add(b, 1).clone
        end
        if found
          break
        end
        a = _add(a, 1).clone
      end
      i = _add(i, 1).clone
    end
    answer_nums = [].clone
    i = 0.clone
    while i < passed.length
      seq = passed[i]
      val = (_add(_add(_str(seq[0]), _str(seq[1])), _str(seq[2]))).to_i
      if !contains_int(answer_nums, val)
        answer_nums = (answer_nums << (val)).clone
      end
      i = _add(i, 1).clone
    end
    max_val = answer_nums[0].clone
    i = 1.clone
    while i < answer_nums.length
      if answer_nums[i] > max_val
        max_val = answer_nums[i].clone
      end
      i = _add(i, 1).clone
    end
    return max_val
  end
  puts(solution())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
