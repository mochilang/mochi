# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = (a < 0 ? -a : a).clone
    y = (b < 0 ? -b : b).clone
    while !_eq(y, 0)
      t = x % y
      x = y.clone
      y = t.clone
    end
    return x
  end
  def is_digit_cancelling(num, den)
    if num >= den
      return false
    end
    num_unit = num % 10
    num_tens = num / 10
    den_unit = den % 10
    den_tens = den / 10
    if !_eq(num_unit, den_tens)
      return false
    end
    if _eq(den_unit, 0)
      return false
    end
    return _eq(num * den_unit, num_tens * den)
  end
  def find_fractions()
    sols = [].clone
    num = 10.clone
    while num < 100
      den = _add(num, 1).clone
      while den < 100
        if is_digit_cancelling(num, den)
          sols = (sols << (FractionPair.new(num: num, den: den))).clone
        end
        den = _add(den, 1).clone
      end
      num = _add(num, 1).clone
    end
    return sols
  end
  def solution()
    fracs = find_fractions()
    num_prod = 1.clone
    den_prod = 1.clone
    i = 0.clone
    while i < fracs.length
      f = fracs[i]
      num_prod = num_prod * f.num.clone
      den_prod = den_prod * f.den.clone
      i = _add(i, 1).clone
    end
    g = gcd(num_prod, den_prod)
    return den_prod / g
  end
  def main()
    puts(_str(solution()))
  end
  FractionPair = Struct.new(:num, :den, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
