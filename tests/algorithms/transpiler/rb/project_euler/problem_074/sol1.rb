# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sum_digit_factorials(n)
    if $cache_sum_digit_factorials.key?(n)
      return $cache_sum_digit_factorials[n]
    end
    m = n.clone
    ret = 0.clone
    if _eq(m, 0)
      ret = $DIGIT_FACTORIALS[0].clone
    end
    while m > 0
      digit = m % 10
      ret = _add(ret, $DIGIT_FACTORIALS[digit]).clone
      m = m / 10.clone
    end
    $cache_sum_digit_factorials[n] = ret
    return ret
  end
  def chain_length(n)
    if $chain_length_cache.key?(n)
      return $chain_length_cache[n]
    end
    chain = [].clone
    seen = {}.clone
    current = n.clone
    while true
      if $chain_length_cache.key?(current)
        known = $chain_length_cache[current]
        total = known.clone
        i = chain.length - 1.clone
        while i >= 0
          total = _add(total, 1).clone
          $chain_length_cache[chain[i]] = total
          i = i - 1.clone
        end
        return $chain_length_cache[n]
      end
      if seen.key?(current)
        loop_start = seen[current]
        loop_len = chain.length - loop_start
        i = chain.length - 1.clone
        ahead = 0.clone
        while i >= 0
          if i >= loop_start
            $chain_length_cache[chain[i]] = loop_len
          else
            $chain_length_cache[chain[i]] = _add(loop_len, (_add(ahead, 1)))
          end
          ahead = _add(ahead, 1).clone
          i = i - 1.clone
        end
        return $chain_length_cache[n]
      end
      seen[current] = chain.length
      chain = (chain << (current)).clone
      current = sum_digit_factorials(current).clone
    end
  end
  def solution(num_terms, max_start)
    count = 0.clone
    i = 1.clone
    while i < max_start
      if _eq(chain_length(i), num_terms)
        count = _add(count, 1).clone
      end
      i = _add(i, 1).clone
    end
    return count
  end
  $DIGIT_FACTORIALS = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
  $cache_sum_digit_factorials = {145 => 145}.clone
  $chain_length_cache = {145 => 0, 169 => 3, 36301 => 3, 1454 => 3, 871 => 2, 45361 => 2, 872 => 2}.clone
  puts(_add("solution() = ", _str(solution(60, 1000))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
