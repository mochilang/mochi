# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def run(n)
    limit = 200000
    counts = {}.clone
    p = 2.clone
    while p <= limit
      if !(counts.key?(p))
        m = p.clone
        while m <= limit
          if counts.key?(m)
            counts[m] = _add(counts[m], 1)
          else
            counts[m] = 1
          end
          m = _add(m, p).clone
        end
      end
      p = _add(p, 1).clone
    end
    streak = 0.clone
    num = 2.clone
    while num <= limit
      c = (counts.key?(num) ? counts[num] : 0)
      if _eq(c, n)
        streak = _add(streak, 1).clone
        if _eq(streak, n)
          result = [].clone
          start = _add(num - n, 1).clone
          j = 0.clone
          while j < n
            result = (result << (_add(start, j))).clone
            j = _add(j, 1).clone
          end
          return result
        end
      else
        streak = 0.clone
      end
      num = _add(num, 1).clone
    end
    return []
  end
  def solution(n)
    res = run(n)
    return res[0]
  end
  puts(_str(solution(4)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
