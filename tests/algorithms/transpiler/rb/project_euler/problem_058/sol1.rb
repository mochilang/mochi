# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(number)
    if 1 < number && number < 4
      return true
    end
    if number < 2 || _eq(number % 2, 0) || _eq(number % 3, 0)
      return false
    end
    i = 5.clone
    while i * i <= number
      if _eq(number % i, 0) || _eq(number % (_add(i, 2)), 0)
        return false
      end
      i = _add(i, 6).clone
    end
    return true
  end
  def solution(ratio)
    j = 3.clone
    primes = 3.clone
    while ((primes).to_f) / (2 * j - 1) >= ratio
      i = _add(_add(j * j, j), 1).clone
      limit = (_add(j, 2)) * (_add(j, 2))
      step = _add(j, 1)
      while i < limit
        if is_prime(i)
          primes = _add(primes, 1).clone
        end
        i = _add(i, step).clone
      end
      j = _add(j, 2).clone
    end
    return j
  end
  def test_solution()
    if !_eq(solution(0.5), 11)
      panic("solution 0.5 failed")
    end
    if !_eq(solution(0.2), 309)
      panic("solution 0.2 failed")
    end
    if !_eq(solution(0.111), 11317)
      panic("solution 0.111 failed")
    end
  end
  def main()
    test_solution()
    puts(_str(solution(0.1)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
