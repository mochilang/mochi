# Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:29 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def solution(n)
    largest_product = 0
    i = 0
    while i <= n.length - 13
      product = 1
      j = 0
      while j < 13
        product = product * (n[_add(i, j)..._add(_add(i, j), 1)]).to_i
        j = _add(j, 1)
      end
      if product > largest_product
        largest_product = product
      end
      i = _add(i, 1)
    end
    return largest_product
  end
  $N = _add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add(_add("73167176531330624919225119674426574742355349194934", "96983520312774506326239578318016984801869478851843"), "85861560789112949495459501737958331952853208805511"), "12540698747158523863050715693290963295227443043557"), "66896648950445244523161731856403098711121722383113"), "62229893423380308135336276614282806444486645238749"), "30358907296290491560440772390713810515859307960866"), "70172427121883998797908792274921901699720888093776"), "65727333001053367881220235421809751254540594752243"), "52584907711670556013604839586446706324415722155397"), "53697817977846174064955149290862569321978468622482"), "83972241375657056057490261407972968652414535100474"), "82166370484403199890008895243450658541227588666881"), "16427171479924442928230863465674813919123162824586"), "17866458359124566529476545682848912883142607690042"), "24219022671055626321111109370544217506941658960408"), "07198403850962455444362981230987879927244284909188"), "84580156166097919133875499200524063689912560717606"), "05886116467109405077541002256983155200055935729725"), "71636269561882670428252483600823257530420752963450")
  puts(_add("solution() = ", _str(solution($N))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
