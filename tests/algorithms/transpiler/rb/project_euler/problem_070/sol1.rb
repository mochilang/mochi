# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_totients(max_one)
    totients = [].clone
    i = 0.clone
    while i < max_one
      totients = (totients << (i)).clone
      i = _add(i, 1).clone
    end
    i = 2.clone
    while i < max_one
      if _eq(totients[i], i)
        x = i.clone
        while x < max_one
          totients[x] = totients[x] - totients[x] / i
          x = _add(x, i).clone
        end
      end
      i = _add(i, 1).clone
    end
    return totients
  end
  def has_same_digits(num1, num2)
    count1 = [].clone
    count2 = [].clone
    i = 0.clone
    while i < 10
      count1 = (count1 << (0)).clone
      count2 = (count2 << (0)).clone
      i = _add(i, 1).clone
    end
    n1 = num1.clone
    n2 = num2.clone
    if _eq(n1, 0)
      count1[0] = _add(count1[0], 1)
    end
    if _eq(n2, 0)
      count2[0] = _add(count2[0], 1)
    end
    while n1 > 0
      d1 = n1 % 10
      count1[d1] = _add(count1[d1], 1)
      n1 = n1 / 10.clone
    end
    while n2 > 0
      d2 = n2 % 10
      count2[d2] = _add(count2[d2], 1)
      n2 = n2 / 10.clone
    end
    i = 0.clone
    while i < 10
      if !_eq(count1[i], count2[i])
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def solution(max_n)
    min_numerator = 1.clone
    min_denominator = 0.clone
    totients = get_totients(_add(max_n, 1))
    i = 2.clone
    while i <= max_n
      t = totients[i]
      if i * min_denominator < min_numerator * t && has_same_digits(i, t)
        min_numerator = i.clone
        min_denominator = t.clone
      end
      i = _add(i, 1).clone
    end
    return min_numerator
  end
  puts(_str(solution(10000)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
