# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(number)
    if (1 < number) && (number < 4)
      return true
    else
      if (number < 2) || (_eq(number % 2, 0)) || (_eq(number % 3, 0))
        return false
      end
    end
    i = 5.clone
    while i * i <= number
      if (_eq(number % i, 0)) || (_eq(number % (_add(i, 2)), 0))
        return false
      end
      i = _add(i, 6).clone
    end
    return true
  end
  def remove_at(xs, index)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if !_eq(i, index)
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def collect_primes(nums, current, primes)
    if _eq(nums.length, 0)
      if is_prime(current)
        primes = (primes << (current)).clone
      end
      return primes
    end
    i = 0.clone
    res = primes.clone
    while i < nums.length
      digit = nums[i]
      remaining = remove_at(nums, i)
      res = collect_primes(remaining, _add(current * 10, digit), res).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def max_list(nums)
    m = 0.clone
    i = 0.clone
    while i < nums.length
      if nums[i] > m
        m = nums[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def solution(n)
    digits = [].clone
    i = 1.clone
    while i <= n
      digits = (digits << (i)).clone
      i = _add(i, 1).clone
    end
    primes = collect_primes(digits, 0, [])
    if _eq(primes.length, 0)
      return 0
    end
    return max_list(primes)
  end
  puts(_add("solution() = ", _str(solution(7))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
