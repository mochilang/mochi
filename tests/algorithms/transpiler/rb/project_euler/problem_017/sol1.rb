# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def solution(n)
    ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8]
    tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6]
    count = 0.clone
    i = 1.clone
    while i <= n
      if i < 1000
        if i >= 100
          count = _add(_add(count, ones_counts[i / 100]), 7).clone
          if i % 100 != 0
            count = _add(count, 3).clone
          end
        end
        remainder = i % 100
        if remainder > 0 && remainder < 20
          count = _add(count, ones_counts[remainder]).clone
        else
          count = _add(count, ones_counts[i % 10]).clone
          count = _add(count, tens_counts[(remainder - i % 10) / 10]).clone
        end
      else
        count = _add(_add(count, ones_counts[i / 1000]), 8).clone
      end
      i = _add(i, 1).clone
    end
    return count
  end
  puts(_str(solution(1000)))
  puts(_str(solution(5)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
