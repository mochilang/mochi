# Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:44 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(number)
    if 1 < number && number < 4
      return true
    else
      if number < 2 || _eq(number % 2, 0) || _eq(number % 3, 0)
        return false
      end
    end
    i = 5.clone
    while i * i <= number
      if _eq(number % i, 0) || _eq(number % (_add(i, 2)), 0)
        return false
      end
      i = _add(i, 6).clone
    end
    return true
  end
  def solution(a_limit, b_limit)
    longest_len = 0.clone
    longest_a = 0.clone
    longest_b = 0.clone
    a = _add((-1 * a_limit), 1).clone
    while a < a_limit
      b = 2.clone
      while b < b_limit
        if is_prime(b)
          count = 0.clone
          n = 0.clone
          while is_prime(_add(_add(n * n, a * n), b))
            count = _add(count, 1).clone
            n = _add(n, 1).clone
          end
          if count > longest_len
            longest_len = count.clone
            longest_a = a.clone
            longest_b = b.clone
          end
        end
        b = _add(b, 1).clone
      end
      a = _add(a, 1).clone
    end
    return longest_a * longest_b
  end
  puts(_str(solution(1000, 1000)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
