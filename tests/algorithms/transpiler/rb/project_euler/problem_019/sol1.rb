# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_leap(year)
    if (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)
      return true
    end
    return false
  end
  def count_sundays()
    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = 6.clone
    month = 1.clone
    year = 1901.clone
    sundays = 0.clone
    while year < 2001
      day = _add(day, 7).clone
      if is_leap(year)
        if day > days_per_month[month - 1] && month != 2
          month = _add(month, 1).clone
          day = day - days_per_month[month - 2].clone
        else
          if day > 29 && month == 2
            month = _add(month, 1).clone
            day = day - 29.clone
          end
        end
      else
        if day > days_per_month[month - 1]
          month = _add(month, 1).clone
          day = day - days_per_month[month - 2].clone
        end
      end
      if month > 12
        year = _add(year, 1).clone
        month = 1.clone
      end
      if year < 2001 && day == 1
        sundays = _add(sundays, 1).clone
      end
    end
    return sundays
  end
  puts(count_sundays())
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
