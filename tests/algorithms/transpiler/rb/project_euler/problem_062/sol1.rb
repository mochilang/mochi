# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def get_digits(num)
    cube = num * num * num
    s = _str(cube)
    counts = [].clone
    j = 0.clone
    while j < 10
      counts = (counts << (0)).clone
      j = _add(j, 1).clone
    end
    i = 0.clone
    while i < s.length
      d = (s[i]).to_i
      counts[d] = _add(counts[d], 1)
      i = _add(i, 1).clone
    end
    result = "".clone
    d = 0.clone
    while d < 10
      c = counts[d].clone
      while c > 0
        result = _add(result, _str(d)).clone
        c = c - 1.clone
      end
      d = _add(d, 1).clone
    end
    return result
  end
  def solution(max_base)
    freqs = {}.clone
    num = 0.clone
    while true
      digits = get_digits(num)
      arr = [].clone
      if freqs.key?(digits)
        arr = freqs[digits].clone
      end
      arr = (arr << (num)).clone
      freqs[digits] = arr
      if _eq(arr.length, max_base)
        base = arr[0]
        return base * base * base
      end
      num = _add(num, 1).clone
    end
  end
  puts(_add("solution() = ", _str(solution(5))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
