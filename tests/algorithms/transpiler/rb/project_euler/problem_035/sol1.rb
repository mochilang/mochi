# Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(n)
    return $sieve[n]
  end
  def contains_an_even_digit(n)
    s = _str(n)
    idx = 0.clone
    while idx < s.length
      c = s[idx]
      if _eq(c, "0") || _eq(c, "2") || _eq(c, "4") || _eq(c, "6") || _eq(c, "8")
        return true
      end
      idx = _add(idx, 1).clone
    end
    return false
  end
  def parse_int(s)
    value = 0.clone
    k = 0.clone
    while k < s.length
      ch = s[k]
      value = _add(value * 10, ((ch).to_i)).clone
      k = _add(k, 1).clone
    end
    return value
  end
  def find_circular_primes(limit)
    result = [2].clone
    num = 3.clone
    while num <= limit
      if is_prime(num) && (_eq(contains_an_even_digit(num), false))
        s = _str(num)
        all_prime = true.clone
        j = 0.clone
        while j < s.length
          rotated_str = _add(s[j...s.length], s[0...j])
          rotated = parse_int(rotated_str)
          if !is_prime(rotated)
            all_prime = false.clone
            break
          end
          j = _add(j, 1).clone
        end
        if all_prime
          result = (result << (num)).clone
        end
      end
      num = _add(num, 2).clone
    end
    return result
  end
  def solution()
    return find_circular_primes($LIMIT).length
  end
  $LIMIT = 10000
  $sieve = [].clone
  $i = 0.clone
  while $i <= $LIMIT
    $sieve = ($sieve << (true)).clone
    $i = _add($i, 1).clone
  end
  $p = 2.clone
  while $p * $p <= $LIMIT
    if $sieve[$p]
      j = $p * $p.clone
      while j <= $LIMIT
        $sieve[j] = false
        j = _add(j, $p).clone
      end
    end
    $p = _add($p, 1).clone
  end
  puts(_add("len(find_circular_primes()) = ", _str(solution())))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
