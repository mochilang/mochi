# Generated by Mochi transpiler v0.10.60 on 2025-08-07 16:01 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def xor(a, b)
    res = 0.clone
    bit = 1.clone
    x = a.clone
    y = b.clone
    while x > 0 || y > 0
      abit = x % 2
      bbit = y % 2
      if !_eq(abit, bbit)
        res = _add(res, bit).clone
      end
      x = x / 2.clone
      y = y / 2.clone
      bit = bit * 2.clone
    end
    return res
  end
  def chr(code)
    if _eq(code, 10)
      return "\n"
    end
    if _eq(code, 13)
      return "\r"
    end
    if _eq(code, 9)
      return "\t"
    end
    if code >= 32 && code < 127
      return $ascii_chars[code - 32...code - 31]
    end
    return ""
  end
  def ord(ch)
    if _eq(ch, "\n")
      return 10
    end
    if _eq(ch, "\r")
      return 13
    end
    if _eq(ch, "\t")
      return 9
    end
    i = 0.clone
    while i < $ascii_chars.length
      if _eq($ascii_chars[i..._add(i, 1)], ch)
        return _add(32, i)
      end
      i = _add(i, 1).clone
    end
    return 0
  end
  def is_valid_ascii(code)
    if code >= 32 && code <= 126
      return true
    end
    if _eq(code, 9) || _eq(code, 10) || _eq(code, 13)
      return true
    end
    return false
  end
  def try_key(ciphertext, key)
    decoded = "".clone
    i = 0.clone
    klen = key.length
    while i < ciphertext.length
      decodedchar = xor(ciphertext[i], key[i % klen])
      if !is_valid_ascii(decodedchar)
        return nil
      end
      decoded = _add(decoded, chr(decodedchar)).clone
      i = _add(i, 1).clone
    end
    return decoded
  end
  def filter_valid_chars(ciphertext)
    possibles = [].clone
    i = 0.clone
    while i < $LOWERCASE_INTS.length
      j = 0.clone
      while j < $LOWERCASE_INTS.length
        k = 0.clone
        while k < $LOWERCASE_INTS.length
          key = [$LOWERCASE_INTS[i], $LOWERCASE_INTS[j], $LOWERCASE_INTS[k]]
          decoded = try_key(ciphertext, key)
          if !_eq(decoded, nil)
            possibles = (possibles << (decoded)).clone
          end
          k = _add(k, 1).clone
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return possibles
  end
  def contains(s, sub)
    n = s.length
    m = sub.length
    if _eq(m, 0)
      return true
    end
    i = 0.clone
    while i <= n - m
      j = 0.clone
      is_match = true.clone
      while j < m
        if !_eq(s[_add(i, j)], sub[j])
          is_match = false.clone
          break
        end
        j = _add(j, 1).clone
      end
      if is_match
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def filter_common_word(possibles, common_word)
    res = [].clone
    i = 0.clone
    while i < possibles.length
      p = possibles[i]
      if contains(p.downcase(), common_word)
        res = (res << (p)).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def solution(ciphertext)
    possibles = filter_valid_chars(ciphertext).clone
    i = 0.clone
    while i < $COMMON_WORDS.length
      word = $COMMON_WORDS[i]
      possibles = filter_common_word(possibles, word).clone
      if _eq(possibles.length, 1)
        break
      end
      i = _add(i, 1).clone
    end
    decoded_text = possibles[0]
    sum = 0.clone
    j = 0.clone
    while j < decoded_text.length
      sum = _add(sum, ord(decoded_text[j..._add(j, 1)])).clone
      j = _add(j, 1).clone
    end
    return sum
  end
  $ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  $LOWERCASE_INTS = [].clone
  $i = 97.clone
  while $i <= 122
    $LOWERCASE_INTS = ($LOWERCASE_INTS << ($i)).clone
    $i = _add($i, 1).clone
  end
  $COMMON_WORDS = ["the", "be", "to", "of", "and", "in", "that", "have"].clone
  $ciphertext = [17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11]
  puts(_str(solution($ciphertext)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
