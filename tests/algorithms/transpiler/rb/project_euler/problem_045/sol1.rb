# Generated by Mochi transpiler v0.10.60 on 2025-08-07 14:57 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def to_float(x)
    return x * 1.0
  end
  def sqrt(x)
    return Math.sqrt(x)
  end
  def floor(x)
    n = 0.clone
    y = x.clone
    while y >= 1.0
      y = y - 1.0.clone
      n = _add(n, 1).clone
    end
    return n
  end
  def hexagonal_num(n)
    return n * (2 * n - 1)
  end
  def is_pentagonal(n)
    root = sqrt(_add(1.0, 24.0 * (n).to_f))
    val = (_add(1.0, root)) / 6.0
    return _eq(val, (val.floor()).to_f)
  end
  def solution(start)
    idx = start.clone
    num = hexagonal_num(idx).clone
    while !is_pentagonal(num)
      idx = _add(idx, 1).clone
      num = hexagonal_num(idx).clone
    end
    return num
  end
  def test_hexagonal_num()
    if !_eq(hexagonal_num(143), 40755)
      panic("hexagonal_num(143) failed")
    end
    if !_eq(hexagonal_num(21), 861)
      panic("hexagonal_num(21) failed")
    end
    if !_eq(hexagonal_num(10), 190)
      panic("hexagonal_num(10) failed")
    end
  end
  def test_is_pentagonal()
    if !is_pentagonal(330)
      panic("330 should be pentagonal")
    end
    if is_pentagonal(7683)
      panic("7683 should not be pentagonal")
    end
    if !is_pentagonal(2380)
      panic("2380 should be pentagonal")
    end
  end
  def test_solution()
    if !_eq(solution(144), 1533776805)
      panic("solution failed")
    end
  end
  test_hexagonal_num()
  test_is_pentagonal()
  test_solution()
  puts(_add(_str(solution(144)), " = "))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
