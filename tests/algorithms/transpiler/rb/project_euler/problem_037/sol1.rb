# Generated by Mochi transpiler v0.10.71 on 2025-08-23 15:31 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def is_prime(number)
    if 1 < number && number < 4
      return true
    end
    if number < 2 || _eq(number % 2, 0) || _eq(number % 3, 0)
      return false
    end
    i = 5
    while i * i <= number
      if _eq(number % i, 0) || _eq(number % (_add(i, 2)), 0)
        return false
      end
      i = _add(i, 6)
    end
    return true
  end
  def list_truncated_nums(n)
    str_num = _str(n)
    list_nums = [n]
    i = 1
    length = _len(str_num)
    while i < length
      right = (str_num[i...length]).to_i
      left = (str_num[0...length - i]).to_i
      list_nums = _append(list_nums, right)
      list_nums = _append(list_nums, left)
      i = _add(i, 1)
    end
    return list_nums
  end
  def validate(n)
    s = _str(n)
    length = _len(s)
    if length > 3
      last3 = (s[length - 3...length]).to_i
      first3 = (s[0...3]).to_i
      if !(is_prime(last3) && is_prime(first3))
        return false
      end
    end
    return true
  end
  def compute_truncated_primes(count)
    list_truncated_primes = []
    num = 13
    while !_eq(_len(list_truncated_primes), count)
      if validate(num)
        list_nums = list_truncated_nums(num)
        all_prime = true
        j = 0
        while j < _len(list_nums)
          if !is_prime((__tmp1 = list_nums; __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)))
            all_prime = false
            break
          end
          j = _add(j, 1)
        end
        if all_prime
          list_truncated_primes = _append(list_truncated_primes, num)
        end
      end
      num = _add(num, 2)
    end
    return list_truncated_primes
  end
  def solution()
    primes = compute_truncated_primes(11)
    total = 0
    i = 0
    while i < _len(primes)
      total = _add(total, (__tmp2 = primes; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return total
  end
  puts(_add("sum(compute_truncated_primes(11)) = ", _str(solution())))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
