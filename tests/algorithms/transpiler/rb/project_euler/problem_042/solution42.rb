# Generated by Mochi transpiler v0.10.70 on 2025-08-22 15:25 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end

$_dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/project_euler/problem_042"

def _read_file(path)
  p = path
  if defined?($_dataDir) && !$_dataDir.nil? && !File.exist?(p)
    p = File.join($_dataDir, path)
  end
  begin
    File.read(p)
  rescue StandardError
    ''
  end
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def triangular_numbers(limit)
    res = []
    n = 1
    while n <= limit
      res = _append(res, (n * (_add(n, 1))) / 2)
      n = _add(n, 1)
    end
    return res
  end
  def parse_words(text)
    words = []
    current = ""
    i = 0
    while i < _len(text)
      c = text[i..._add(i, 1)]
      if _eq(c, ",")
        words = _append(words, current)
        current = ""
      else
        if _eq(c, "\"")
        else
          if _eq(c, "\r") || _eq(c, "\n")
          else
            current = _add(current, c)
          end
        end
      end
      i = _add(i, 1)
    end
    if _len(current) > 0
      words = _append(words, current)
    end
    return words
  end
  def word_value(word)
    total = 0
    i = 0
    while i < _len(word)
      total = _add(total, (word[i..._add(i, 1)]).ord()) - 64
      i = _add(i, 1)
    end
    return total
  end
  def contains(xs, target)
        __tmp1 = xs
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |x|
      if _eq(x, target)
        return true
      end
    end
    return false
  end
  def solution()
    text = _read_file("words.txt")
    words = parse_words(text)
    tri = triangular_numbers(100)
    count = 0
        __tmp2 = words
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |w|
      v = word_value(w)
      if contains(tri, v)
        count = _add(count, 1)
      end
    end
    return count
  end
  puts(_str(solution()))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
