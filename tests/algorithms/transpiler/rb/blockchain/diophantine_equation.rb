# Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:30 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = (a < 0 ? -a : a)
    y = (b < 0 ? -b : b)
    while y != 0
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def extended_gcd(a, b)
    if b == 0
      return [a, 1, 0]
    end
    res = extended_gcd(b, a % b)
    d = res[0]
    p = res[1]
    q = res[2]
    x = q
    y = p - q * (a / b)
    return [d, x, y]
  end
  def diophantine(a, b, c)
    d = gcd(a, b)
    if c % d != 0
      panic("No solution")
    end
    eg = extended_gcd(a, b)
    r = c / d
    x = eg[1] * r
    y = eg[2] * r
    return [x, y]
  end
  def diophantine_all_soln(a, b, c, n)
    base = diophantine(a, b, c)
    x0 = base[0]
    y0 = base[1]
    d = gcd(a, b)
    p = a / d
    q = b / d
    sols = []
    i = 0
    while i < n
      x = _add(x0, i * q)
      y = y0 - i * p
      sols = (sols + [[x, y]])
      i = _add(i, 1)
    end
    return sols
  end
  $s1 = diophantine(10, 6, 14)
  puts(((x = $s1); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $sols = diophantine_all_soln(10, 6, 14, 4)
  $j = 0
  while $j < $sols.length
    puts(((x = $sols[$j]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    $j = _add($j, 1)
  end
  puts(((x = diophantine(391, 299, -69)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extended_gcd(10, 6)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = extended_gcd(7, 5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
