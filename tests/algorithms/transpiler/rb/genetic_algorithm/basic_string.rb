# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def evaluate(item, target)
    score = 0
    i = 0
    while i < item.length && i < target.length
      if item[i..._add(i, 1)] == target[i..._add(i, 1)]
        score = _add(score, 1)
      end
      i = _add(i, 1)
    end
    return score
  end
  def crossover(parent1, parent2)
    cut = parent1.length / 2
    child1 = _add(parent1[0...cut], parent2[cut...parent2.length])
    child2 = _add(parent2[0...cut], parent1[cut...parent1.length])
    return PairString.new(first: child1, second: child2)
  end
  def mutate(child, genes)
    if child.length == 0
      return child
    end
    gene = genes[0]
    return _add(child[0...child.length - 1], gene)
  end
  def main()
    puts(_str(evaluate("Helxo Worlx", "Hello World")))
    pair = crossover("123456", "abcdef")
    puts(pair.first)
    puts(pair.second)
    mut = mutate("123456", ["A", "B", "C", "D", "E", "F"])
    puts(mut)
  end
  PairString = Struct.new(:first, :second, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
