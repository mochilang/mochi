# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def ord(ch)
    i = 0
    while i < _len($ASCII)
      if _eq($ASCII[i..._add(i, 1)], ch)
        return _add(32, i)
      end
      i = _add(i, 1)
    end
    return 0
  end
  def pow2(n)
    res = 1
    i = 0
    while i < n
      res = res * 2
      i = _add(i, 1)
    end
    return res
  end
  def bit_and(a, b)
    x = a
    y = b
    res = 0
    bit = 1
    i = 0
    while i < 32
      if (_eq(x % 2, 1)) && (_eq(y % 2, 1))
        res = _add(res, bit)
      end
      x = x / 2
      y = y / 2
      bit = bit * 2
      i = _add(i, 1)
    end
    return res
  end
  def bit_or(a, b)
    x = a
    y = b
    res = 0
    bit = 1
    i = 0
    while i < 32
      abit = x % 2
      bbit = y % 2
      if _eq(abit, 1) || _eq(bbit, 1)
        res = _add(res, bit)
      end
      x = x / 2
      y = y / 2
      bit = bit * 2
      i = _add(i, 1)
    end
    return res
  end
  def bit_xor(a, b)
    x = a
    y = b
    res = 0
    bit = 1
    i = 0
    while i < 32
      abit = x % 2
      bbit = y % 2
      if (_eq(abit, 1) && _eq(bbit, 0)) || (_eq(abit, 0) && _eq(bbit, 1))
        res = _add(res, bit)
      end
      x = x / 2
      y = y / 2
      bit = bit * 2
      i = _add(i, 1)
    end
    return res
  end
  def bit_not(a)
    return ($MOD - 1) - a
  end
  def rotate_left(n, b)
    left = (n * pow2(b)) % $MOD
    right = n / pow2(32 - b)
    return (_add(left, right)) % $MOD
  end
  def to_hex32(n)
    digits = "0123456789abcdef"
    num = n
    s = ""
    if _eq(num, 0)
      s = "0"
    end
    while num > 0
      d = num % 16
      s = _add(digits[d..._add(d, 1)], s)
      num = num / 16
    end
    while _len(s) < 8
      s = _add("0", s)
    end
    if _len(s) > 8
      s = s[_len(s) - 8..._len(s)]
    end
    return s
  end
  def sha1(message)
    bytes = []
    i = 0
    while i < _len(message)
      bytes = _append(bytes, ord(message[i..._add(i, 1)]))
      i = _add(i, 1)
    end
    bytes = _append(bytes, 128)
    while !_eq((_add(_len(bytes), 8)) % 64, 0)
      bytes = _append(bytes, 0)
    end
    bit_len = _len(message) * 8
    len_bytes = [0, 0, 0, 0, 0, 0, 0, 0]
    bl = bit_len
    k = 7
    while k >= 0
      len_bytes[k] = bl % 256
      bl = bl / 256
      k = k - 1
    end
    j = 0
    while j < 8
      bytes = _append(bytes, (__tmp1 = len_bytes; __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)))
      j = _add(j, 1)
    end
    blocks = []
    pos = 0
    while pos < _len(bytes)
      block = []
      j2 = 0
      while j2 < 64
        block = _append(block, (__tmp2 = bytes; __tmp2.is_a?(Hash) ? __tmp2[_add(pos, j2)] : _idx(__tmp2, _add(pos, j2))))
        j2 = _add(j2, 1)
      end
      blocks = _append(blocks, block)
      pos = _add(pos, 64)
    end
    h0 = 1732584193
    h1 = 4023233417
    h2 = 2562383102
    h3 = 271733878
    h4 = 3285377520
    bindex = 0
    while bindex < _len(blocks)
      block = (__tmp3 = blocks; __tmp3.is_a?(Hash) ? __tmp3[bindex] : _idx(__tmp3, bindex))
      w = []
      t = 0
      while t < 16
        j3 = t * 4
        word = (_add((_add((_add((__tmp4 = block; __tmp4.is_a?(Hash) ? __tmp4[j3] : _idx(__tmp4, j3)) * 256, (__tmp5 = block; __tmp5.is_a?(Hash) ? __tmp5[_add(j3, 1)] : _idx(__tmp5, _add(j3, 1))))) * 256, (__tmp6 = block; __tmp6.is_a?(Hash) ? __tmp6[_add(j3, 2)] : _idx(__tmp6, _add(j3, 2))))) * 256, (__tmp7 = block; __tmp7.is_a?(Hash) ? __tmp7[_add(j3, 3)] : _idx(__tmp7, _add(j3, 3)))))
        w = _append(w, word)
        t = _add(t, 1)
      end
      while t < 80
        tmp = bit_xor(bit_xor(bit_xor((__tmp8 = w; __tmp8.is_a?(Hash) ? __tmp8[t - 3] : _idx(__tmp8, t - 3)), (__tmp9 = w; __tmp9.is_a?(Hash) ? __tmp9[t - 8] : _idx(__tmp9, t - 8))), (__tmp10 = w; __tmp10.is_a?(Hash) ? __tmp10[t - 14] : _idx(__tmp10, t - 14))), (__tmp11 = w; __tmp11.is_a?(Hash) ? __tmp11[t - 16] : _idx(__tmp11, t - 16)))
        w = _append(w, rotate_left(tmp, 1))
        t = _add(t, 1)
      end
      a = h0
      b = h1
      c = h2
      d = h3
      e = h4
      i2 = 0
      while i2 < 80
        f = 0
        kconst = 0
        if i2 < 20
          f = bit_or(bit_and(b, c), bit_and(bit_not(b), d))
          kconst = 1518500249
        else
          if i2 < 40
            f = bit_xor(bit_xor(b, c), d)
            kconst = 1859775393
          else
            if i2 < 60
              f = bit_or(bit_or(bit_and(b, c), bit_and(b, d)), bit_and(c, d))
              kconst = 2400959708
            else
              f = bit_xor(bit_xor(b, c), d)
              kconst = 3395469782
            end
          end
        end
        temp = (_add(_add(_add(_add(rotate_left(a, 5), f), e), kconst), (__tmp12 = w; __tmp12.is_a?(Hash) ? __tmp12[i2] : _idx(__tmp12, i2)))) % $MOD
        e = d
        d = c
        c = rotate_left(b, 30)
        b = a
        a = temp
        i2 = _add(i2, 1)
      end
      h0 = (_add(h0, a)) % $MOD
      h1 = (_add(h1, b)) % $MOD
      h2 = (_add(h2, c)) % $MOD
      h3 = (_add(h3, d)) % $MOD
      h4 = (_add(h4, e)) % $MOD
      bindex = _add(bindex, 1)
    end
    return _add(_add(_add(_add(to_hex32(h0), to_hex32(h1)), to_hex32(h2)), to_hex32(h3)), to_hex32(h4))
  end
  def main()
    puts(sha1("Test String"))
  end
  $MOD = 4294967296
  $ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
