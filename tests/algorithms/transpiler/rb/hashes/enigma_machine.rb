# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def build_alphabet()
    result = []
    i = 0
    while i < _len($ASCII)
      result = _append(result, (__tmp1 = $ASCII; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return result
  end
  def range_list(n)
    lst = []
    i = 0
    while i < n
      lst = _append(lst, i)
      i = _add(i, 1)
    end
    return lst
  end
  def reversed_range_list(n)
    lst = []
    i = n - 1
    while i >= 0
      lst = _append(lst, i)
      i = i - 1
    end
    return lst
  end
  def index_of_char(lst, ch)
    i = 0
    while i < _len(lst)
      if _eq((__tmp2 = lst; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), ch)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def index_of_int(lst, value)
    i = 0
    while i < _len(lst)
      if _eq((__tmp3 = lst; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), value)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def enigma_encrypt(message, token)
    alphabets = build_alphabet()
    n = _len(alphabets)
    gear_one = range_list(n)
    gear_two = range_list(n)
    gear_three = range_list(n)
    reflector = reversed_range_list(n)
    gear_one_pos = 0
    gear_two_pos = 0
    gear_three_pos = 0
    rotator = ->() {
      i = (__tmp4 = gear_one; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
      gear_one = gear_one[1..._len(gear_one)]
      gear_one = _append(gear_one, i)
      gear_one_pos = _add(gear_one_pos, 1)
      if _eq(gear_one_pos % n, 0)
        i = (__tmp5 = gear_two; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
        gear_two = gear_two[1..._len(gear_two)]
        gear_two = _append(gear_two, i)
        gear_two_pos = _add(gear_two_pos, 1)
        if _eq(gear_two_pos % n, 0)
          i = (__tmp6 = gear_three; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0))
          gear_three = gear_three[1..._len(gear_three)]
          gear_three = _append(gear_three, i)
          gear_three_pos = _add(gear_three_pos, 1)
        end
      end
    }
    engine = ->(ch) {
      target = index_of_char(alphabets, ch)
      target = (__tmp7 = gear_one; __tmp7.is_a?(Hash) ? __tmp7[target] : _idx(__tmp7, target))
      target = (__tmp8 = gear_two; __tmp8.is_a?(Hash) ? __tmp8[target] : _idx(__tmp8, target))
      target = (__tmp9 = gear_three; __tmp9.is_a?(Hash) ? __tmp9[target] : _idx(__tmp9, target))
      target = (__tmp10 = reflector; __tmp10.is_a?(Hash) ? __tmp10[target] : _idx(__tmp10, target))
      target = index_of_int(gear_three, target)
      target = index_of_int(gear_two, target)
      target = index_of_int(gear_one, target)
      rotator.call()
      return (__tmp11 = alphabets; __tmp11.is_a?(Hash) ? __tmp11[target] : _idx(__tmp11, target))
    }
    t = 0
    while t < token
      rotator.call()
      t = _add(t, 1)
    end
    result = ""
    idx = 0
    while idx < _len(message)
      result = _add(result, engine.call((__tmp12 = message; __tmp12.is_a?(Hash) ? __tmp12[idx] : _idx(__tmp12, idx))))
      idx = _add(idx, 1)
    end
    return result
  end
  $ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
  $message = "HELLO WORLD"
  $token = 123
  $encoded = enigma_encrypt($message, $token)
  puts($encoded)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
