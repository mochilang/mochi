# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def build_alphabet()
    result = [].clone
    i = 0.clone
    while i < $ASCII.length
      result = (result << ($ASCII[i])).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def range_list(n)
    lst = [].clone
    i = 0.clone
    while i < n
      lst = (lst << (i)).clone
      i = _add(i, 1).clone
    end
    return lst
  end
  def reversed_range_list(n)
    lst = [].clone
    i = n - 1.clone
    while i >= 0
      lst = (lst << (i)).clone
      i = i - 1.clone
    end
    return lst
  end
  def index_of_char(lst, ch)
    i = 0.clone
    while i < lst.length
      if lst[i] == ch
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def index_of_int(lst, value)
    i = 0.clone
    while i < lst.length
      if lst[i] == value
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def enigma_encrypt(message, token)
    alphabets = build_alphabet()
    n = alphabets.length
    gear_one = range_list(n).clone
    gear_two = range_list(n).clone
    gear_three = range_list(n).clone
    reflector = reversed_range_list(n)
    gear_one_pos = 0.clone
    gear_two_pos = 0.clone
    gear_three_pos = 0.clone
    rotator = ->() {
      i = gear_one[0].clone
      gear_one = gear_one[1...gear_one.length].clone
      gear_one = (gear_one << (i)).clone
      gear_one_pos = _add(gear_one_pos, 1).clone
      if gear_one_pos % n == 0
        i = gear_two[0].clone
        gear_two = gear_two[1...gear_two.length].clone
        gear_two = (gear_two << (i)).clone
        gear_two_pos = _add(gear_two_pos, 1).clone
        if gear_two_pos % n == 0
          i = gear_three[0].clone
          gear_three = gear_three[1...gear_three.length].clone
          gear_three = (gear_three << (i)).clone
          gear_three_pos = _add(gear_three_pos, 1).clone
        end
      end
    }
    engine = ->(ch) {
      target = index_of_char(alphabets, ch).clone
      target = gear_one[target].clone
      target = gear_two[target].clone
      target = gear_three[target].clone
      target = reflector[target].clone
      target = index_of_int(gear_three, target).clone
      target = index_of_int(gear_two, target).clone
      target = index_of_int(gear_one, target).clone
      rotator.call()
      return alphabets[target]
    }
    t = 0.clone
    while t < token
      rotator.call()
      t = _add(t, 1).clone
    end
    result = "".clone
    idx = 0.clone
    while idx < message.length
      result = _add(result, engine.call(message[idx])).clone
      idx = _add(idx, 1).clone
    end
    return result
  end
  $ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
  $message = "HELLO WORLD"
  $token = 123
  $encoded = enigma_encrypt($message, $token)
  puts($encoded)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
