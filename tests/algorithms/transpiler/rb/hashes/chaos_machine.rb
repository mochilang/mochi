# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def round_dec(x, n)
    m10 = 1.0
    i = 0
    while i < n
      m10 = m10 * 10.0
      i = _add(i, 1)
    end
    y = _add(x * m10, 0.5)
    return (1.0 * (y).to_i) / m10
  end
  def reset()
    return Machine.new(buffer: $K, params: [0.0, 0.0, 0.0, 0.0, 0.0], time: 0)
  end
  def push(m, seed)
    buf = m.buffer
    par = m.params
    i = 0
    while i < _len(buf)
      value = (__tmp1 = buf; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      e = (1.0 * seed) / value
      next_value = _add((__tmp2 = buf; __tmp2.is_a?(Hash) ? __tmp2[(_add(i, 1)) % $size] : _idx(__tmp2, (_add(i, 1)) % $size)), e)
      next_value = next_value - (1.0 * (next_value).to_i)
      r = _add((__tmp3 = par; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), e)
      r = r - (1.0 * (r).to_i)
      r = _add(r, 3.0)
      buf[i] = round_dec(r * next_value * (1.0 - next_value), 10)
      par[i] = r
      i = _add(i, 1)
    end
    return Machine.new(buffer: buf, params: par, time: _add(m.time, 1))
  end
  def xor(a, b)
    aa = a
    bb = b
    res = 0
    bit = 1
    while aa > 0 || bb > 0
      abit = aa % 2
      bbit = bb % 2
      if !_eq(abit, bbit)
        res = _add(res, bit)
      end
      aa = aa / 2
      bb = bb / 2
      bit = bit * 2
    end
    return res
  end
  def xorshift(x, y)
    xv = x
    yv = y
    xv = xor(xv, yv / 8192)
    yv = xor(yv, xv * 131072)
    xv = xor(xv, yv / 32)
    return xv
  end
  def pull(m)
    buf = m.buffer
    par = m.params
    key = m.time % $size
    i = 0
    while i < $t
      r = (__tmp4 = par; __tmp4.is_a?(Hash) ? __tmp4[key] : _idx(__tmp4, key))
      value = (__tmp5 = buf; __tmp5.is_a?(Hash) ? __tmp5[key] : _idx(__tmp5, key))
      buf[key] = round_dec(r * value * (1.0 - value), 10)
      new_r = _add((1.0 * m.time) * 0.01, r * 1.01)
      new_r = new_r - (1.0 * (new_r).to_i)
      par[key] = _add(new_r, 3.0)
      i = _add(i, 1)
    end
    x = ((__tmp6 = buf; __tmp6.is_a?(Hash) ? __tmp6[(_add(key, 2)) % $size] : _idx(__tmp6, (_add(key, 2)) % $size)) * 1e+10).to_i
    y = ((__tmp7 = buf; __tmp7.is_a?(Hash) ? __tmp7[(_add(key, $size) - 2) % $size] : _idx(__tmp7, (_add(key, $size) - 2) % $size)) * 1e+10).to_i
    new_machine = Machine.new(buffer: buf, params: par, time: _add(m.time, 1))
    value = xorshift(x, y) % 4294967295
    return PullResult.new(value: value, machine: new_machine)
  end
  $K = [0.33, 0.44, 0.55, 0.44, 0.33]
  $t = 3
  $size = 5
  Object.send(:remove_const, :Machine) if Object.const_defined?(:Machine)
  Machine = Struct.new(:buffer, :params, :time, keyword_init: true)
  Object.send(:remove_const, :PullResult) if Object.const_defined?(:PullResult)
  PullResult = Struct.new(:value, :machine, keyword_init: true)
  $machine = reset()
  $i = 0
  while $i < 100
    $machine = push($machine, $i)
    $i = _add($i, 1)
  end
  $res = pull($machine)
  puts($res.value)
  puts(((x = $res.machine.buffer); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $res.machine.params); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
