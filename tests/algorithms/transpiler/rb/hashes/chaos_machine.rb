# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def round_dec(x, n)
    m10 = 1.0.clone
    i = 0.clone
    while i < n
      m10 = m10 * 10.0.clone
      i = _add(i, 1).clone
    end
    y = _add(x * m10, 0.5)
    return (1.0 * (y).to_i) / m10
  end
  def reset()
    return Machine.new(buffer: $K, params: [0.0, 0.0, 0.0, 0.0, 0.0], time: 0)
  end
  def push(m, seed)
    buf = m.buffer.clone
    par = m.params.clone
    i = 0.clone
    while i < buf.length
      value = buf[i]
      e = (1.0 * seed) / value
      next_value = _add(buf[(_add(i, 1)) % $size], e).clone
      next_value = next_value - (1.0 * (next_value).to_i).clone
      r = _add(par[i], e).clone
      r = r - (1.0 * (r).to_i).clone
      r = _add(r, 3.0).clone
      buf[i] = round_dec(r * next_value * (1.0 - next_value), 10)
      par[i] = r
      i = _add(i, 1).clone
    end
    return Machine.new(buffer: buf, params: par, time: _add(m.time, 1))
  end
  def xor(a, b)
    aa = a.clone
    bb = b.clone
    res = 0.clone
    bit = 1.clone
    while aa > 0 || bb > 0
      abit = aa % 2
      bbit = bb % 2
      if abit != bbit
        res = _add(res, bit).clone
      end
      aa = aa / 2.clone
      bb = bb / 2.clone
      bit = bit * 2.clone
    end
    return res
  end
  def xorshift(x, y)
    xv = x.clone
    yv = y.clone
    xv = xor(xv, yv / 8192).clone
    yv = xor(yv, xv * 131072).clone
    xv = xor(xv, yv / 32).clone
    return xv
  end
  def pull(m)
    buf = m.buffer.clone
    par = m.params.clone
    key = m.time % $size
    i = 0.clone
    while i < $t
      r = par[key]
      value = buf[key]
      buf[key] = round_dec(r * value * (1.0 - value), 10)
      new_r = _add((1.0 * m.time) * 0.01, r * 1.01).clone
      new_r = new_r - (1.0 * (new_r).to_i).clone
      par[key] = _add(new_r, 3.0)
      i = _add(i, 1).clone
    end
    x = (buf[(_add(key, 2)) % $size] * 10000000000.0).to_i
    y = (buf[(_add(key, $size) - 2) % $size] * 10000000000.0).to_i
    new_machine = Machine.new(buffer: buf, params: par, time: _add(m.time, 1))
    value = xorshift(x, y) % 4294967295
    return PullResult.new(value: value, machine: new_machine)
  end
  $K = [0.33, 0.44, 0.55, 0.44, 0.33]
  $t = 3
  $size = 5
  Machine = Struct.new(:buffer, :params, :time, keyword_init: true)
  PullResult = Struct.new(:value, :machine, keyword_init: true)
  $machine = reset().clone
  $i = 0.clone
  while $i < 100
    $machine = push($machine, $i).clone
    $i = _add($i, 1).clone
  end
  $res = pull($machine)
  puts($res.value)
  puts(((x = $res.machine.buffer); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = $res.machine.params); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
