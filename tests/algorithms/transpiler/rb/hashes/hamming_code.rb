# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def index_of(s, ch)
    i = 0
    while i < _len(s)
      if _eq((__tmp1 = s; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), ch)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def ord(ch)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = index_of(upper, ch)
    if idx >= 0
      return _add(65, idx)
    end
    idx = index_of(lower, ch)
    if idx >= 0
      return _add(97, idx)
    end
    return 0
  end
  def chr(n)
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91
      return upper[n - 65...n - 64]
    end
    if n >= 97 && n < 123
      return lower[n - 97...n - 96]
    end
    return "?"
  end
  def text_to_bits(text)
    bits = ""
    i = 0
    while i < _len(text)
      code = ord((__tmp2 = text; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      j = 7
      while j >= 0
        p = pow2(j)
        if _eq(((code / p) % 2), 1)
          bits = _add(bits, "1")
        else
          bits = _add(bits, "0")
        end
        j = j - 1
      end
      i = _add(i, 1)
    end
    return bits
  end
  def text_from_bits(bits)
    text = ""
    i = 0
    while i < _len(bits)
      code = 0
      j = 0
      while j < 8 && _add(i, j) < _len(bits)
        code = code * 2
        if _eq((__tmp3 = bits; __tmp3.is_a?(Hash) ? __tmp3[_add(i, j)] : _idx(__tmp3, _add(i, j))), "1")
          code = _add(code, 1)
        end
        j = _add(j, 1)
      end
      text = _add(text, chr(code))
      i = _add(i, 8)
    end
    return text
  end
  def bool_to_string(b)
    if b
      return "True"
    end
    return "False"
  end
  def string_to_bitlist(s)
    res = []
    i = 0
    while i < _len(s)
      if _eq((__tmp4 = s; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), "1")
        res = _append(res, 1)
      else
        res = _append(res, 0)
      end
      i = _add(i, 1)
    end
    return res
  end
  def bitlist_to_string(bits)
    s = ""
    i = 0
    while i < _len(bits)
      if _eq((__tmp5 = bits; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)), 1)
        s = _add(s, "1")
      else
        s = _add(s, "0")
      end
      i = _add(i, 1)
    end
    return s
  end
  def is_power_of_two(x)
    if x < 1
      return false
    end
    p = 1
    while p < x
      p = p * 2
    end
    return _eq(p, x)
  end
  def list_eq(a, b)
    if !_eq(_len(a), _len(b))
      return false
    end
    i = 0
    while i < _len(a)
      if !_eq((__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)), (__tmp7 = b; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def pow2(e)
    res = 1
    i = 0
    while i < e
      res = res * 2
      i = _add(i, 1)
    end
    return res
  end
  def has_bit(n, b)
    p = pow2(b)
    if _eq(((n / p) % 2), 1)
      return true
    end
    return false
  end
  def hamming_encode(r, data_bits)
    total = _add(r, _len(data_bits))
    data_ord = []
    cont_data = 0
    x = 1
    while x <= total
      if is_power_of_two(x)
        data_ord = _append(data_ord, -1)
      else
        data_ord = _append(data_ord, (__tmp8 = data_bits; __tmp8.is_a?(Hash) ? __tmp8[cont_data] : _idx(__tmp8, cont_data)))
        cont_data = _add(cont_data, 1)
      end
      x = _add(x, 1)
    end
    parity = []
    bp = 0
    while bp < r
      cont_bo = 0
      j = 0
      while j < _len(data_ord)
        bit = (__tmp9 = data_ord; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
        if bit >= 0
          pos = _add(j, 1)
          if has_bit(pos, bp) && _eq(bit, 1)
            cont_bo = _add(cont_bo, 1)
          end
        end
        j = _add(j, 1)
      end
      parity = _append(parity, cont_bo % 2)
      bp = _add(bp, 1)
    end
    result = []
    cont_bp = 0
    i = 0
    while i < _len(data_ord)
      if (__tmp10 = data_ord; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) < 0
        result = _append(result, (__tmp11 = parity; __tmp11.is_a?(Hash) ? __tmp11[cont_bp] : _idx(__tmp11, cont_bp)))
        cont_bp = _add(cont_bp, 1)
      else
        result = _append(result, (__tmp12 = data_ord; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)))
      end
      i = _add(i, 1)
    end
    return result
  end
  def hamming_decode(r, code)
    data_output = []
    parity_received = []
    i = 1
    idx = 0
    while i <= _len(code)
      if is_power_of_two(i)
        parity_received = _append(parity_received, (__tmp13 = code; __tmp13.is_a?(Hash) ? __tmp13[idx] : _idx(__tmp13, idx)))
      else
        data_output = _append(data_output, (__tmp14 = code; __tmp14.is_a?(Hash) ? __tmp14[idx] : _idx(__tmp14, idx)))
      end
      idx = _add(idx, 1)
      i = _add(i, 1)
    end
    recomputed = hamming_encode(r, data_output)
    parity_calc = []
    j = 0
    while j < _len(recomputed)
      if is_power_of_two(_add(j, 1))
        parity_calc = _append(parity_calc, (__tmp15 = recomputed; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)))
      end
      j = _add(j, 1)
    end
    ack = list_eq(parity_received, parity_calc)
    return DecodeResult.new(data: data_output, ack: ack)
  end
  def main()
    sizePari = 4
    be = 2
    text = "Message01"
    binary = text_to_bits(text)
    puts(_add(_add("Text input in binary is '", binary), "'"))
    data_bits = string_to_bitlist(binary)
    encoded = hamming_encode(sizePari, data_bits)
    puts(_add("Data converted ----------> ", bitlist_to_string(encoded)))
    decoded = hamming_decode(sizePari, encoded)
    puts(_add(_add(_add("Data receive ------------> ", bitlist_to_string(decoded.data)), " -- Data integrity: "), bool_to_string(decoded.ack)))
    corrupted = []
    i = 0
    while i < _len(encoded)
      corrupted = _append(corrupted, (__tmp16 = encoded; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)))
      i = _add(i, 1)
    end
    pos = be - 1
    if _eq((__tmp17 = corrupted; __tmp17.is_a?(Hash) ? __tmp17[pos] : _idx(__tmp17, pos)), 0)
      corrupted[pos] = 1
    else
      corrupted[pos] = 0
    end
    decoded_err = hamming_decode(sizePari, corrupted)
    puts(_add(_add(_add("Data receive (error) ----> ", bitlist_to_string(decoded_err.data)), " -- Data integrity: "), bool_to_string(decoded_err.ack)))
  end
  Object.send(:remove_const, :DecodeResult) if Object.const_defined?(:DecodeResult)
  DecodeResult = Struct.new(:data, :ack, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
