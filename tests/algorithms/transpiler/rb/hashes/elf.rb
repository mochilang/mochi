# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ord(ch)
    i = 0.clone
    while i < $ascii.length
      if $ascii[i..._add(i, 1)] == ch
        return _add(32, i)
      end
      i = _add(i, 1).clone
    end
    return 0
  end
  def bit_and(a, b)
    ua = a.clone
    ub = b.clone
    res = 0.clone
    bit = 1.clone
    while ua > 0 || ub > 0
      if ua % 2 == 1 && ub % 2 == 1
        res = _add(res, bit).clone
      end
      ua = ((ua / 2)).to_i.clone
      ub = ((ub / 2)).to_i.clone
      bit = bit * 2.clone
    end
    return res
  end
  def bit_xor(a, b)
    ua = a.clone
    ub = b.clone
    res = 0.clone
    bit = 1.clone
    while ua > 0 || ub > 0
      abit = ua % 2
      bbit = ub % 2
      if abit != bbit
        res = _add(res, bit).clone
      end
      ua = ((ua / 2)).to_i.clone
      ub = ((ub / 2)).to_i.clone
      bit = bit * 2.clone
    end
    return res
  end
  def bit_not32(x)
    ux = x.clone
    res = 0.clone
    bit = 1.clone
    count = 0.clone
    while count < 32
      if ux % 2 == 0
        res = _add(res, bit).clone
      end
      ux = ((ux / 2)).to_i.clone
      bit = bit * 2.clone
      count = _add(count, 1).clone
    end
    return res
  end
  def elf_hash(data)
    hash_ = 0.clone
    i = 0.clone
    while i < data.length
      c = ord(data[i..._add(i, 1)])
      hash_ = _add(hash_ * 16, c).clone
      x = bit_and(hash_, 4026531840)
      if x != 0
        hash_ = bit_xor(hash_, ((x / 16777216)).to_i).clone
      end
      hash_ = bit_and(hash_, bit_not32(x)).clone
      i = _add(i, 1).clone
    end
    return hash_
  end
  $ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  puts(_str(elf_hash("lorem ipsum")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
