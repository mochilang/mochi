# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ord(ch)
    i = 0.clone
    while i < $ascii_chars.length
      if $ascii_chars[i] == ch
        return _add(32, i)
      end
      i = _add(i, 1).clone
    end
    return 0
  end
  def fletcher16(text)
    sum1 = 0.clone
    sum2 = 0.clone
    i = 0.clone
    while i < text.length
      code = ord(text[i])
      sum1 = (_add(sum1, code)) % 255.clone
      sum2 = (_add(sum1, sum2)) % 255.clone
      i = _add(i, 1).clone
    end
    return _add(sum2 * 256, sum1)
  end
  $ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  # test fletcher16 checksum
  raise 'assertion failed' unless fletcher16("hello world") == 6752
  raise 'assertion failed' unless fletcher16("onethousandfourhundredthirtyfour") == 28347
  raise 'assertion failed' unless fletcher16("The quick brown fox jumps over the lazy dog.") == 5655
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
