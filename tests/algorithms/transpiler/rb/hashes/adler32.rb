# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ord(ch)
    lower = "abcdefghijklmnopqrstuvwxyz"
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    digits = "0123456789"
    i = 0.clone
    while i < lower.length
      if lower[i] == ch
        return _add(97, i)
      end
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < upper.length
      if upper[i] == ch
        return _add(65, i)
      end
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < digits.length
      if digits[i] == ch
        return _add(48, i)
      end
      i = _add(i, 1).clone
    end
    if ch == " "
      return 32
    end
    return 0
  end
  def adler32(plain_text)
    a = 1.clone
    b = 0.clone
    i = 0.clone
    while i < plain_text.length
      code = ord(plain_text[i])
      a = (_add(a, code)) % $MOD_ADLER.clone
      b = (_add(b, a)) % $MOD_ADLER.clone
      i = _add(i, 1).clone
    end
    return _add(b * 65536, a)
  end
  def main()
    puts(_str(adler32("Algorithms")))
    puts(_str(adler32("go adler em all")))
  end
  $MOD_ADLER = 65521
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
