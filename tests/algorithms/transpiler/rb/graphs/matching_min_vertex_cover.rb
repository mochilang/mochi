# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(xs, v)
        __tmp1 = xs
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |x|
      if x == v
        return true
      end
    end
    return false
  end
  def get_edges(graph)
    n = graph.length
    edges = [].clone
    (0...n).each do |i|
            __tmp2 = graph[i]
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |j|
        edges = (edges << ([i, j])).clone
      end
    end
    return edges
  end
  def matching_min_vertex_cover(graph)
    chosen = [].clone
    edges = get_edges(graph).clone
    while edges.length > 0
      idx = edges.length - 1
      e = edges[idx]
      edges = edges[0...idx].clone
      u = e[0]
      v = e[1]
      if !chosen.include?(u)
        chosen = (chosen << (u)).clone
      end
      if !chosen.include?(v)
        chosen = (chosen << (v)).clone
      end
      filtered = [].clone
            __tmp3 = edges
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |edge|
        a = edge[0]
        b = edge[1]
        if a != u && b != u && a != v && b != v
          filtered = (filtered << (edge)).clone
        end
      end
      edges = filtered.clone
    end
    return chosen
  end
  $graph = {0 => [1, 3], 1 => [0, 3], 2 => [0, 3, 4], 3 => [0, 1, 2], 4 => [2, 3]}
  $cover = matching_min_vertex_cover($graph)
  puts(((x = $cover); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
