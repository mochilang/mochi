# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def contains(xs, v)
        __tmp1 = xs
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |x|
      if _eq(x, v)
        return true
      end
    end
    return false
  end
  def get_edges(graph)
    n = _len(graph)
    edges = []
    (0...n).each do |i|
            __tmp2 = (__tmp3 = graph; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      __tmp2 = [] if __tmp2.nil?
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |j|
        edges = _append(edges, [i, j])
      end
    end
    return edges
  end
  def matching_min_vertex_cover(graph)
    chosen = []
    edges = get_edges(graph)
    while _len(edges) > 0
      idx = _len(edges) - 1
      e = (__tmp4 = edges; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))
      edges = edges[0...idx]
      u = (__tmp5 = e; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
      v = (__tmp6 = e; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1))
      if !contains(chosen, u)
        chosen = _append(chosen, u)
      end
      if !contains(chosen, v)
        chosen = _append(chosen, v)
      end
      filtered = []
            __tmp7 = edges
      __tmp7 = [] if __tmp7.nil?
      if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
        __tmp7 = __tmp7.keys
      end
      __tmp7.each do |edge|
        a = (__tmp8 = edge; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0))
        b = (__tmp9 = edge; __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
        if !_eq(a, u) && !_eq(b, u) && !_eq(a, v) && !_eq(b, v)
          filtered = _append(filtered, edge)
        end
      end
      edges = filtered
    end
    return chosen
  end
  $graph = {0 => [1, 3], 1 => [0, 3], 2 => [0, 3, 4], 3 => [0, 1, 2], 4 => [2, 3]}
  $cover = matching_min_vertex_cover($graph)
  puts(((x = $cover); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
