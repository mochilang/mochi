# Generated by Mochi transpiler v0.10.73 on 2025-08-25 16:44 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    idx += arr.length if idx < 0
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  arr = [] if arr.nil?
  x = x.clone if x.is_a?(Array)
  arr << x
  arr
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    "[" + x.map { |e| _str(e) }.join(' ') + "]"
  elsif x.is_a?(Float)
    x.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def get_min_index(q)
    idx = 0
    i = 1
    while i < _len(q)
      if (__tmp1 = q; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)).cost < (__tmp2 = q; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx)).cost
        idx = i
      end
      i = _add(i, 1)
    end
    return idx
  end
  def remove_at(q, idx)
    res = []
    i = 0
    while i < _len(q)
      if !_eq(i, idx)
        res = _append(res, (__tmp3 = q; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def pass_and_relaxation(graph, v, visited_forward, visited_backward, cst_fwd, cst_bwd, queue, parent, shortest_distance)
    q = queue
    sd = shortest_distance
        __tmp4 = (__tmp5 = graph; __tmp5.is_a?(Hash) ? __tmp5[v] : _idx(__tmp5, v))
    __tmp4 = [] if __tmp4.nil?
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |e|
      nxt = e.to
      d = e.cost
      if _has(visited_forward, nxt)
        next
      end
      old_cost = (_has(cst_fwd, nxt) ? (__tmp6 = cst_fwd; __tmp6.is_a?(Hash) ? __tmp6[nxt] : _idx(__tmp6, nxt)) : 2147483647)
      new_cost = _add((__tmp7 = cst_fwd; __tmp7.is_a?(Hash) ? __tmp7[v] : _idx(__tmp7, v)), d)
      if new_cost < old_cost
        q = _append(q, QItem.new(node: nxt, cost: new_cost))
        cst_fwd[nxt] = new_cost
        parent[nxt] = v
      end
      if _has(visited_backward, nxt)
        alt = _add(_add((__tmp8 = cst_fwd; __tmp8.is_a?(Hash) ? __tmp8[v] : _idx(__tmp8, v)), d), (__tmp9 = cst_bwd; __tmp9.is_a?(Hash) ? __tmp9[nxt] : _idx(__tmp9, nxt)))
        if alt < sd
          sd = alt
        end
      end
    end
    return PassResult.new(queue: q, dist: sd)
  end
  def bidirectional_dij(source, destination, graph_forward, graph_backward)
    shortest_path_distance = -1
    visited_forward = {}
    visited_backward = {}
    cst_fwd = {}
    cst_fwd[source] = 0
    cst_bwd = {}
    cst_bwd[destination] = 0
    parent_forward = {}
    parent_forward[source] = ""
    parent_backward = {}
    parent_backward[destination] = ""
    queue_forward = []
    queue_forward = _append(queue_forward, QItem.new(node: source, cost: 0))
    queue_backward = []
    queue_backward = _append(queue_backward, QItem.new(node: destination, cost: 0))
    shortest_distance = 2147483647
    if _eq(source, destination)
      return 0
    end
    while _len(queue_forward) > 0 && _len(queue_backward) > 0
      idx_f = get_min_index(queue_forward)
      item_f = (__tmp10 = queue_forward; __tmp10.is_a?(Hash) ? __tmp10[idx_f] : _idx(__tmp10, idx_f))
      queue_forward = remove_at(queue_forward, idx_f)
      v_fwd = (__tmp11 = item_f; __tmp11.is_a?(Hash) ? __tmp11["node"] : _idx(__tmp11, "node"))
      visited_forward[v_fwd] = true
      idx_b = get_min_index(queue_backward)
      item_b = (__tmp12 = queue_backward; __tmp12.is_a?(Hash) ? __tmp12[idx_b] : _idx(__tmp12, idx_b))
      queue_backward = remove_at(queue_backward, idx_b)
      v_bwd = (__tmp13 = item_b; __tmp13.is_a?(Hash) ? __tmp13["node"] : _idx(__tmp13, "node"))
      visited_backward[v_bwd] = true
      res_f = pass_and_relaxation(graph_forward, v_fwd, visited_forward, visited_backward, cst_fwd, cst_bwd, queue_forward, parent_forward, shortest_distance)
      queue_forward = res_f.queue
      shortest_distance = res_f.dist
      res_b = pass_and_relaxation(graph_backward, v_bwd, visited_backward, visited_forward, cst_bwd, cst_fwd, queue_backward, parent_backward, shortest_distance)
      queue_backward = res_b.queue
      shortest_distance = res_b.dist
      if _add((__tmp14 = cst_fwd; __tmp14.is_a?(Hash) ? __tmp14[v_fwd] : _idx(__tmp14, v_fwd)), (__tmp15 = cst_bwd; __tmp15.is_a?(Hash) ? __tmp15[v_bwd] : _idx(__tmp15, v_bwd))) >= shortest_distance
        break
      end
    end
    if !_eq(shortest_distance, 2147483647)
      shortest_path_distance = shortest_distance
    end
    return shortest_path_distance
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Object.const_set(:Edge, Struct.new(:to, :cost, keyword_init: true))
  Object.send(:remove_const, :QItem) if Object.const_defined?(:QItem)
  Object.const_set(:QItem, Struct.new(:node, :cost, keyword_init: true))
  Object.send(:remove_const, :PassResult) if Object.const_defined?(:PassResult)
  Object.const_set(:PassResult, Struct.new(:queue, :dist, keyword_init: true))
  $graph_fwd = {"B" => [Edge.new(to: "C", cost: 1)], "C" => [Edge.new(to: "D", cost: 1)], "D" => [Edge.new(to: "F", cost: 1)], "E" => [Edge.new(to: "B", cost: 1), Edge.new(to: "G", cost: 2)], "F" => [], "G" => [Edge.new(to: "F", cost: 1)]}
  $graph_bwd = {"B" => [Edge.new(to: "E", cost: 1)], "C" => [Edge.new(to: "B", cost: 1)], "D" => [Edge.new(to: "C", cost: 1)], "F" => [Edge.new(to: "D", cost: 1), Edge.new(to: "G", cost: 1)], "E" => [], "G" => [Edge.new(to: "E", cost: 2)]}
  puts(_str(bidirectional_dij("E", "F", $graph_fwd, $graph_bwd)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
