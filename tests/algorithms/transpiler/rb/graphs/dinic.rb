# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow2(k)
    res = 1
    i = 0
    while i < k
      res = res * 2
      i = _add(i, 1)
    end
    return res
  end
  def min2(a, b)
    if a < b
      return a
    end
    return b
  end
  def new_dinic(n)
    lvl = []
    ptr = []
    q = []
    adj = []
    i = 0
    while i < n
      lvl = _append(lvl, 0)
      ptr = _append(ptr, 0)
      q = _append(q, 0)
      edges = []
      adj = _append(adj, edges)
      i = _add(i, 1)
    end
    return Dinic.new(n: n, lvl: lvl, ptr: ptr, q: q, adj: adj)
  end
  def add_edge(g, a, b, c, rcap)
    adj = g.adj
    list_a = (__tmp1 = adj; __tmp1.is_a?(Hash) ? __tmp1[a] : _idx(__tmp1, a))
    list_b = (__tmp2 = adj; __tmp2.is_a?(Hash) ? __tmp2[b] : _idx(__tmp2, b))
    e1 = [b, _len(list_b), c, 0]
    e2 = [a, _len(list_a), rcap, 0]
    list_a = _append(list_a, e1)
    list_b = _append(list_b, e2)
    adj[a] = list_a
    adj[b] = list_b
    g.adj = adj
  end
  def dfs(g, v, sink, flow)
    if _eq(v, sink) || _eq(flow, 0)
      return flow
    end
    ptr = g.ptr
    i = (__tmp3 = ptr; __tmp3.is_a?(Hash) ? __tmp3[v] : _idx(__tmp3, v))
    adj_all = g.adj
    adj_v = (__tmp4 = adj_all; __tmp4.is_a?(Hash) ? __tmp4[v] : _idx(__tmp4, v))
    while i < _len(adj_v)
      e = (__tmp5 = adj_v; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      to = (__tmp6 = e; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0))
      if _eq((__tmp7 = g.lvl; __tmp7.is_a?(Hash) ? __tmp7[to] : _idx(__tmp7, to)), _add((__tmp8 = g.lvl; __tmp8.is_a?(Hash) ? __tmp8[v] : _idx(__tmp8, v)), 1))
        avail = (__tmp9 = e; __tmp9.is_a?(Hash) ? __tmp9[2] : _idx(__tmp9, 2)) - (__tmp10 = e; __tmp10.is_a?(Hash) ? __tmp10[3] : _idx(__tmp10, 3))
        pushed = dfs(g, to, sink, min2(flow, avail))
        if pushed > 0
          e[3] = _add((__tmp11 = e; __tmp11.is_a?(Hash) ? __tmp11[3] : _idx(__tmp11, 3)), pushed)
          adj_v[i] = e
          adj_to = (__tmp12 = adj_all; __tmp12.is_a?(Hash) ? __tmp12[to] : _idx(__tmp12, to))
          back = (__tmp13 = adj_to; __tmp13.is_a?(Hash) ? __tmp13[(__tmp14 = e; __tmp14.is_a?(Hash) ? __tmp14[1] : _idx(__tmp14, 1))] : _idx(__tmp13, (__tmp15 = e; __tmp15.is_a?(Hash) ? __tmp15[1] : _idx(__tmp15, 1))))
          back[3] = (__tmp16 = back; __tmp16.is_a?(Hash) ? __tmp16[3] : _idx(__tmp16, 3)) - pushed
          adj_to[(__tmp17 = e; __tmp17.is_a?(Hash) ? __tmp17[1] : _idx(__tmp17, 1))] = back
          adj_all[to] = adj_to
          adj_all[v] = adj_v
          g.adj = adj_all
          return pushed
        end
      end
      i = _add(i, 1)
      ptr[v] = i
    end
    g.ptr = ptr
    adj_all[v] = adj_v
    g.adj = adj_all
    return 0
  end
  def max_flow(g, source, sink)
    flow = 0
    l = 0
    while l < 31
      threshold = pow2(30 - l)
      while true
        lvl = []
        ptr = []
        i = 0
        while i < g.n
          lvl = _append(lvl, 0)
          ptr = _append(ptr, 0)
          i = _add(i, 1)
        end
        g.lvl = lvl
        g.ptr = ptr
        qi = 0
        qe = 1
        lvl[source] = 1
        g.lvl = lvl
        q = g.q
        q[0] = source
        while qi < qe && _eq((__tmp18 = g.lvl; __tmp18.is_a?(Hash) ? __tmp18[sink] : _idx(__tmp18, sink)), 0)
          v = (__tmp19 = q; __tmp19.is_a?(Hash) ? __tmp19[qi] : _idx(__tmp19, qi))
          qi = _add(qi, 1)
          edges = (__tmp20 = g.adj; __tmp20.is_a?(Hash) ? __tmp20[v] : _idx(__tmp20, v))
          j = 0
          while j < _len(edges)
            e = (__tmp21 = edges; __tmp21.is_a?(Hash) ? __tmp21[j] : _idx(__tmp21, j))
            to = (__tmp22 = e; __tmp22.is_a?(Hash) ? __tmp22[0] : _idx(__tmp22, 0))
            residual = (__tmp23 = e; __tmp23.is_a?(Hash) ? __tmp23[2] : _idx(__tmp23, 2)) - (__tmp24 = e; __tmp24.is_a?(Hash) ? __tmp24[3] : _idx(__tmp24, 3))
            lvl_inner = g.lvl
            if _eq((__tmp25 = lvl_inner; __tmp25.is_a?(Hash) ? __tmp25[to] : _idx(__tmp25, to)), 0) && residual >= threshold
              q[qe] = to
              qe = _add(qe, 1)
              lvl_inner[to] = _add((__tmp26 = lvl_inner; __tmp26.is_a?(Hash) ? __tmp26[v] : _idx(__tmp26, v)), 1)
              g.lvl = lvl_inner
            end
            j = _add(j, 1)
          end
        end
        p = dfs(g, source, sink, $INF)
        while p > 0
          flow = _add(flow, p)
          p = dfs(g, source, sink, $INF)
        end
        if _eq((__tmp27 = g.lvl; __tmp27.is_a?(Hash) ? __tmp27[sink] : _idx(__tmp27, sink)), 0)
          break
        end
      end
      l = _add(l, 1)
    end
    return flow
  end
  $INF = 1000000000
  Object.send(:remove_const, :Dinic) if Object.const_defined?(:Dinic)
  Dinic = Struct.new(:n, :lvl, :ptr, :q, :adj, keyword_init: true)
  $graph = new_dinic(10)
  $source = 0
  $sink = 9
  $v = 1
  while $v < 5
    add_edge($graph, $source, $v, 1, 0)
    $v = _add($v, 1)
  end
  $v = 5
  while $v < 9
    add_edge($graph, $v, $sink, 1, 0)
    $v = _add($v, 1)
  end
  $v = 1
  while $v < 5
    add_edge($graph, $v, _add($v, 4), 1, 0)
    $v = _add($v, 1)
  end
  puts(_str(max_flow($graph, $source, $sink)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
