# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_matrix(n)
    matrix = []
    i = 0
    while i <= n
      row = []
      j = 0
      while j <= n
        row = _append(row, false)
        j = _add(j, 1)
      end
      matrix = _append(matrix, row)
      i = _add(i, 1)
    end
    return matrix
  end
  def dfs(u, graph, visited_edge, path)
    path = _append(path, u)
    if _has(graph, u)
      neighbors = (__tmp1 = graph; __tmp1.is_a?(Hash) ? __tmp1[u] : _idx(__tmp1, u))
      i = 0
      while i < _len(neighbors)
        v = (__tmp2 = neighbors; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
        if _eq((__tmp3 = (__tmp4 = visited_edge; __tmp4.is_a?(Hash) ? __tmp4[u] : _idx(__tmp4, u)); __tmp3.is_a?(Hash) ? __tmp3[v] : _idx(__tmp3, v)), false)
          (__tmp5 = visited_edge; __tmp5.is_a?(Hash) ? __tmp5[u] : _idx(__tmp5, u))[v] = true
          (__tmp6 = visited_edge; __tmp6.is_a?(Hash) ? __tmp6[v] : _idx(__tmp6, v))[u] = true
          path = dfs(v, graph, visited_edge, path)
        end
        i = _add(i, 1)
      end
    end
    return path
  end
  def check_circuit_or_path(graph, max_node)
    odd_degree_nodes = 0
    odd_node = -1
    i = 0
    while i < max_node
      if _has(graph, i)
        if _eq(_len((__tmp7 = graph; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))) % 2, 1)
          odd_degree_nodes = _add(odd_degree_nodes, 1)
          odd_node = i
        end
      end
      i = _add(i, 1)
    end
    if _eq(odd_degree_nodes, 0)
      return CheckResult.new(status: 1, odd_node: odd_node)
    end
    if _eq(odd_degree_nodes, 2)
      return CheckResult.new(status: 2, odd_node: odd_node)
    end
    return CheckResult.new(status: 3, odd_node: odd_node)
  end
  def check_euler(graph, max_node)
    visited_edge = make_matrix(max_node)
    res = check_circuit_or_path(graph, max_node)
    if _eq(res.status, 3)
      puts("graph is not Eulerian")
      puts("no path")
      return
    end
    start_node = 1
    if _eq(res.status, 2)
      start_node = res.odd_node
      puts("graph has a Euler path")
    end
    if _eq(res.status, 1)
      puts("graph has a Euler cycle")
    end
    path = dfs(start_node, graph, visited_edge, [])
    puts(((x = path); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  Object.send(:remove_const, :CheckResult) if Object.const_defined?(:CheckResult)
  CheckResult = Struct.new(:status, :odd_node, keyword_init: true)
  $g1 = {1 => [2, 3, 4], 2 => [1, 3], 3 => [1, 2], 4 => [1, 5], 5 => [4]}
  $g2 = {1 => [2, 3, 4, 5], 2 => [1, 3], 3 => [1, 2], 4 => [1, 5], 5 => [1, 4]}
  $g3 = {1 => [2, 3, 4], 2 => [1, 3, 4], 3 => [1, 2], 4 => [1, 2, 5], 5 => [4]}
  $g4 = {1 => [2, 3], 2 => [1, 3], 3 => [1, 2]}
  $g5 = {1 => [], 2 => []}
  $max_node = 10
  check_euler($g1, $max_node)
  check_euler($g2, $max_node)
  check_euler($g3, $max_node)
  check_euler($g4, $max_node)
  check_euler($g5, $max_node)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
