# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_matrix(n)
    matrix = [].clone
    i = 0.clone
    while i <= n
      row = [].clone
      j = 0.clone
      while j <= n
        row = (row << (false)).clone
        j = _add(j, 1).clone
      end
      matrix = (matrix << (row)).clone
      i = _add(i, 1).clone
    end
    return matrix
  end
  def dfs(u, graph, visited_edge, path)
    path = (path << (u)).clone
    if graph.key?(u)
      neighbors = graph[u]
      i = 0.clone
      while i < neighbors.length
        v = neighbors[i]
        if visited_edge[u][v] == false
          visited_edge[u][v] = true
          visited_edge[v][u] = true
          path = dfs(v, graph, visited_edge, path).clone
        end
        i = _add(i, 1).clone
      end
    end
    return path
  end
  def check_circuit_or_path(graph, max_node)
    odd_degree_nodes = 0.clone
    odd_node = -1.clone
    i = 0.clone
    while i < max_node
      if graph.key?(i)
        if graph[i].length % 2 == 1
          odd_degree_nodes = _add(odd_degree_nodes, 1).clone
          odd_node = i.clone
        end
      end
      i = _add(i, 1).clone
    end
    if odd_degree_nodes == 0
      return CheckResult.new(status: 1, odd_node: odd_node)
    end
    if odd_degree_nodes == 2
      return CheckResult.new(status: 2, odd_node: odd_node)
    end
    return CheckResult.new(status: 3, odd_node: odd_node)
  end
  def check_euler(graph, max_node)
    visited_edge = make_matrix(max_node).clone
    res = check_circuit_or_path(graph, max_node)
    if res.status == 3
      puts("graph is not Eulerian")
      puts("no path")
      return
    end
    start_node = 1.clone
    if res.status == 2
      start_node = res.odd_node.clone
      puts("graph has a Euler path")
    end
    if res.status == 1
      puts("graph has a Euler cycle")
    end
    path = dfs(start_node, graph, visited_edge, [])
    puts(((x = path); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  CheckResult = Struct.new(:status, :odd_node, keyword_init: true)
  $g1 = {1 => [2, 3, 4], 2 => [1, 3], 3 => [1, 2], 4 => [1, 5], 5 => [4]}
  $g2 = {1 => [2, 3, 4, 5], 2 => [1, 3], 3 => [1, 2], 4 => [1, 5], 5 => [1, 4]}
  $g3 = {1 => [2, 3, 4], 2 => [1, 3, 4], 3 => [1, 2], 4 => [1, 2, 5], 5 => [4]}
  $g4 = {1 => [2, 3], 2 => [1, 3], 3 => [1, 2]}
  $g5 = {1 => [], 2 => []}
  $max_node = 10
  check_euler($g1, $max_node)
  check_euler($g2, $max_node)
  check_euler($g3, $max_node)
  check_euler($g4, $max_node)
  check_euler($g5, $max_node)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
