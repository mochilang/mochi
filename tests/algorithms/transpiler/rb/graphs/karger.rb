# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand_int(n)
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed % n
  end
  def contains(list, value)
    i = 0
    while i < _len(list)
      if _eq((__tmp1 = list; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), value)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def remove_all(list, value)
    res = []
    i = 0
    while i < _len(list)
      if !_eq((__tmp2 = list; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), value)
        res = _append(res, (__tmp3 = list; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def partition_graph(graph)
    contracted = {}
        __tmp4 = graph.keys()
    __tmp4 = [] if __tmp4.nil?
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |node|
      contracted[node] = [node]
    end
    graph_copy = {}
        __tmp5 = graph.keys()
    __tmp5 = [] if __tmp5.nil?
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |node|
      lst = []
      neigh = (__tmp6 = graph; __tmp6.is_a?(Hash) ? __tmp6[node] : _idx(__tmp6, node))
      i = 0
      while i < _len(neigh)
        lst = _append(lst, (__tmp7 = neigh; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)))
        i = _add(i, 1)
      end
      graph_copy[node] = lst
    end
    nodes = graph_copy.keys()
    while _len(nodes) > 2
      u = (__tmp8 = nodes; __tmp8.is_a?(Hash) ? __tmp8[rand_int(_len(nodes))] : _idx(__tmp8, rand_int(_len(nodes))))
      u_neighbors = (__tmp9 = graph_copy; __tmp9.is_a?(Hash) ? __tmp9[u] : _idx(__tmp9, u))
      v = (__tmp10 = u_neighbors; __tmp10.is_a?(Hash) ? __tmp10[rand_int(_len(u_neighbors))] : _idx(__tmp10, rand_int(_len(u_neighbors))))
      uv = _add(u, v)
      uv_neighbors = []
      i = 0
      while i < _len((__tmp11 = graph_copy; __tmp11.is_a?(Hash) ? __tmp11[u] : _idx(__tmp11, u)))
        n = (__tmp12 = (__tmp13 = graph_copy; __tmp13.is_a?(Hash) ? __tmp13[u] : _idx(__tmp13, u)); __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
        if !_eq(n, u) && !_eq(n, v) && _eq(contains(uv_neighbors, n), false)
          uv_neighbors = _append(uv_neighbors, n)
        end
        i = _add(i, 1)
      end
      i = 0
      while i < _len((__tmp14 = graph_copy; __tmp14.is_a?(Hash) ? __tmp14[v] : _idx(__tmp14, v)))
        n = (__tmp15 = (__tmp16 = graph_copy; __tmp16.is_a?(Hash) ? __tmp16[v] : _idx(__tmp16, v)); __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))
        if !_eq(n, u) && !_eq(n, v) && _eq(contains(uv_neighbors, n), false)
          uv_neighbors = _append(uv_neighbors, n)
        end
        i = _add(i, 1)
      end
      graph_copy[uv] = uv_neighbors
      k = 0
      while k < _len(uv_neighbors)
        nb = (__tmp17 = uv_neighbors; __tmp17.is_a?(Hash) ? __tmp17[k] : _idx(__tmp17, k))
        graph_copy[nb] = _append((__tmp18 = graph_copy; __tmp18.is_a?(Hash) ? __tmp18[nb] : _idx(__tmp18, nb)), uv)
        graph_copy[nb] = remove_all((__tmp19 = graph_copy; __tmp19.is_a?(Hash) ? __tmp19[nb] : _idx(__tmp19, nb)), u)
        graph_copy[nb] = remove_all((__tmp20 = graph_copy; __tmp20.is_a?(Hash) ? __tmp20[nb] : _idx(__tmp20, nb)), v)
        k = _add(k, 1)
      end
      group = []
      i = 0
      while i < _len((__tmp21 = contracted; __tmp21.is_a?(Hash) ? __tmp21[u] : _idx(__tmp21, u)))
        group = _append(group, (__tmp22 = (__tmp23 = contracted; __tmp23.is_a?(Hash) ? __tmp23[u] : _idx(__tmp23, u)); __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)))
        i = _add(i, 1)
      end
      i = 0
      while i < _len((__tmp24 = contracted; __tmp24.is_a?(Hash) ? __tmp24[v] : _idx(__tmp24, v)))
        val = (__tmp25 = (__tmp26 = contracted; __tmp26.is_a?(Hash) ? __tmp26[v] : _idx(__tmp26, v)); __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i))
        if _eq(contains(group, val), false)
          group = _append(group, val)
        end
        i = _add(i, 1)
      end
      contracted[uv] = group
      nodes = remove_all(nodes, u)
      nodes = remove_all(nodes, v)
      nodes = _append(nodes, uv)
    end
    groups = []
    j = 0
    while j < _len(nodes)
      n = (__tmp27 = nodes; __tmp27.is_a?(Hash) ? __tmp27[j] : _idx(__tmp27, j))
      groups = _append(groups, (__tmp28 = contracted; __tmp28.is_a?(Hash) ? __tmp28[n] : _idx(__tmp28, n)))
      j = _add(j, 1)
    end
    groupA = (__tmp29 = groups; __tmp29.is_a?(Hash) ? __tmp29[0] : _idx(__tmp29, 0))
    groupB = (__tmp30 = groups; __tmp30.is_a?(Hash) ? __tmp30[1] : _idx(__tmp30, 1))
    cut = []
    j = 0
    while j < _len(groupA)
      node = (__tmp31 = groupA; __tmp31.is_a?(Hash) ? __tmp31[j] : _idx(__tmp31, j))
      neigh = (__tmp32 = graph; __tmp32.is_a?(Hash) ? __tmp32[node] : _idx(__tmp32, node))
      l = 0
      while l < _len(neigh)
        nb = (__tmp33 = neigh; __tmp33.is_a?(Hash) ? __tmp33[l] : _idx(__tmp33, l))
        if contains(groupB, nb)
          cut = _append(cut, Pair.new(a: node, b: nb))
        end
        l = _add(l, 1)
      end
      j = _add(j, 1)
    end
    return cut
  end
  def cut_to_string(cut)
    s = "{"
    i = 0
    while i < _len(cut)
      p = (__tmp34 = cut; __tmp34.is_a?(Hash) ? __tmp34[i] : _idx(__tmp34, i))
      s = _add(_add(_add(_add(_add(s, "("), p.a), ", "), p.b), ")")
      if i < _len(cut) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "}")
    return s
  end
  $seed = 1
  Object.send(:remove_const, :Pair) if Object.const_defined?(:Pair)
  Object.const_set(:Pair, Struct.new(:a, :b, keyword_init: true))
  $TEST_GRAPH = {"1" => ["2", "3", "4", "5"], "2" => ["1", "3", "4", "5"], "3" => ["1", "2", "4", "5", "10"], "4" => ["1", "2", "3", "5", "6"], "5" => ["1", "2", "3", "4", "7"], "6" => ["7", "8", "9", "10", "4"], "7" => ["6", "8", "9", "10", "5"], "8" => ["6", "7", "9", "10"], "9" => ["6", "7", "8", "10"], "10" => ["6", "7", "8", "9", "3"]}
  $result = partition_graph($TEST_GRAPH)
  puts(cut_to_string($result))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
