# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def key(p)
    return _add(_add(_str(p.x), ","), _str(p.y))
  end
  def path_to_string(path)
    s = "["
    i = 0
    while i < _len(path)
      pt = (__tmp1 = path; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      s = _add(_add(_add(_add(_add(s, "("), _str(pt.x)), ", "), _str(pt.y)), ")")
      if i < _len(path) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def dijkstra(grid, source, destination, allow_diagonal)
    rows = _len(grid)
    cols = _len((__tmp2 = grid; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
    if allow_diagonal
      dx = _add(dx, [-1, -1, 1, 1])
      dy = _add(dy, [-1, 1, -1, 1])
    end
    _INF = 1e+12
    queue = [source]
    front = 0
    dist_map = {key(source) => 0.0}
    prev = {}
    while front < _len(queue)
      current = (__tmp3 = queue; __tmp3.is_a?(Hash) ? __tmp3[front] : _idx(__tmp3, front))
      front = _add(front, 1)
      cur_key = key(current)
      if _eq(current.x, destination.x) && _eq(current.y, destination.y)
        break
      end
      i = 0
      while i < _len(dx)
        nx = _add(current.x, (__tmp4 = dx; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
        ny = _add(current.y, (__tmp5 = dy; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
        if nx >= 0 && nx < rows && ny >= 0 && ny < cols
          if _eq((__tmp6 = (__tmp7 = grid; __tmp7.is_a?(Hash) ? __tmp7[nx] : _idx(__tmp7, nx)); __tmp6.is_a?(Hash) ? __tmp6[ny] : _idx(__tmp6, ny)), 1)
            n_key = _add(_add(_str(nx), ","), _str(ny))
            if !(_has(dist_map, n_key))
              dist_map[n_key] = _add((__tmp8 = dist_map; __tmp8.is_a?(Hash) ? __tmp8[cur_key] : _idx(__tmp8, cur_key)), 1.0)
              prev[n_key] = current
              queue = _append(queue, Point.new(x: nx, y: ny))
            end
          end
        end
        i = _add(i, 1)
      end
    end
    dest_key = key(destination)
    if _has(dist_map, dest_key)
      path_rev = [destination]
      step_key = dest_key
      step_pt = destination
      while !_eq(step_key, key(source))
        step_pt = (__tmp9 = prev; __tmp9.is_a?(Hash) ? __tmp9[step_key] : _idx(__tmp9, step_key))
        step_key = key(step_pt)
        path_rev = _append(path_rev, step_pt)
      end
      path = []
      k = _len(path_rev) - 1
      while k >= 0
        path = _append(path, (__tmp10 = path_rev; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)))
        k = k - 1
      end
      return Result.new(distance: (__tmp11 = dist_map; __tmp11.is_a?(Hash) ? __tmp11[dest_key] : _idx(__tmp11, dest_key)), path: path)
    end
    return Result.new(distance: _INF, path: [])
  end
  def print_result(res)
    puts(_add(_add(_str(res.distance), ", "), path_to_string(res.path)))
  end
  Object.send(:remove_const, :Point) if Object.const_defined?(:Point)
  Point = Struct.new(:x, :y, keyword_init: true)
  Object.send(:remove_const, :Result) if Object.const_defined?(:Result)
  Result = Struct.new(:distance, :path, keyword_init: true)
  $grid1 = [[1, 1, 1], [0, 1, 0], [0, 1, 1]]
  print_result(dijkstra($grid1, Point.new(x: 0, y: 0), Point.new(x: 2, y: 2), false))
  print_result(dijkstra($grid1, Point.new(x: 0, y: 0), Point.new(x: 2, y: 2), true))
  $grid2 = [[1, 1, 1], [0, 0, 1], [0, 1, 1]]
  print_result(dijkstra($grid2, Point.new(x: 0, y: 0), Point.new(x: 2, y: 2), false))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
