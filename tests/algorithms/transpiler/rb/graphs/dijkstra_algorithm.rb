# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_int_list(n, value)
    lst = [].clone
    i = 0.clone
    while i < n
      lst = (lst << (value)).clone
      i = _add(i, 1).clone
    end
    return lst
  end
  def make_bool_list(n)
    lst = [].clone
    i = 0.clone
    while i < n
      lst = (lst << (false)).clone
      i = _add(i, 1).clone
    end
    return lst
  end
  def dijkstra(graph, src)
    n = graph.length
    dist = make_int_list(n, 1000000000).clone
    visited = make_bool_list(n).clone
    dist[src] = 0
    count = 0.clone
    while count < n
      u = -1.clone
      min_dist = 1000000000.clone
      i = 0.clone
      while i < n
        if !visited[i] && dist[i] < min_dist
          min_dist = dist[i].clone
          u = i.clone
        end
        i = _add(i, 1).clone
      end
      if u < 0
        break
      end
      visited[u] = true
      j = 0.clone
      while j < graph[u].length
        e = graph[u][j]
        v = e.node
        w = e.weight
        if !visited[v]
          new_dist = _add(dist[u], w)
          if new_dist < dist[v]
            dist[v] = new_dist
          end
        end
        j = _add(j, 1).clone
      end
      count = _add(count, 1).clone
    end
    return dist
  end
  Edge = Struct.new(:node, :weight, keyword_init: true)
  $graph = [[Edge.new(node: 1, weight: 10), Edge.new(node: 3, weight: 5)], [Edge.new(node: 2, weight: 1), Edge.new(node: 3, weight: 2)], [Edge.new(node: 4, weight: 4)], [Edge.new(node: 1, weight: 3), Edge.new(node: 2, weight: 9), Edge.new(node: 4, weight: 2)], [Edge.new(node: 0, weight: 7), Edge.new(node: 2, weight: 6)]]
  $dist = dijkstra($graph, 0)
  puts(_str($dist[0]))
  puts(_str($dist[1]))
  puts(_str($dist[2]))
  puts(_str($dist[3]))
  puts(_str($dist[4]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
