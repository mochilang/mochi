# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def tarjan(g)
    n = _len(g)
    stack = []
    on_stack = []
    index_of = []
    lowlink_of = []
    i = 0
    while i < n
      on_stack = _append(on_stack, false)
      index_of = _append(index_of, 0 - 1)
      lowlink_of = _append(lowlink_of, 0 - 1)
      i = _add(i, 1)
    end
    components = []
    strong_connect = ->(v, index) {
      index_of[v] = index
      lowlink_of[v] = index
      current_index = _add(index, 1)
      stack = _append(stack, v)
      on_stack[v] = true
            __tmp1 = (__tmp2 = g; __tmp2.is_a?(Hash) ? __tmp2[v] : _idx(__tmp2, v))
      __tmp1 = [] if __tmp1.nil?
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |w|
        if _eq((__tmp3 = index_of; __tmp3.is_a?(Hash) ? __tmp3[w] : _idx(__tmp3, w)), 0 - 1)
          current_index = strong_connect.call(w, current_index)
          if (__tmp4 = lowlink_of; __tmp4.is_a?(Hash) ? __tmp4[w] : _idx(__tmp4, w)) < (__tmp5 = lowlink_of; __tmp5.is_a?(Hash) ? __tmp5[v] : _idx(__tmp5, v))
            lowlink_of[v] = (__tmp6 = lowlink_of; __tmp6.is_a?(Hash) ? __tmp6[w] : _idx(__tmp6, w))
          end
        else
          if (__tmp7 = on_stack; __tmp7.is_a?(Hash) ? __tmp7[w] : _idx(__tmp7, w))
            if (__tmp8 = lowlink_of; __tmp8.is_a?(Hash) ? __tmp8[w] : _idx(__tmp8, w)) < (__tmp9 = lowlink_of; __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v))
              lowlink_of[v] = (__tmp10 = lowlink_of; __tmp10.is_a?(Hash) ? __tmp10[w] : _idx(__tmp10, w))
            end
          end
        end
      end
      if _eq((__tmp11 = lowlink_of; __tmp11.is_a?(Hash) ? __tmp11[v] : _idx(__tmp11, v)), (__tmp12 = index_of; __tmp12.is_a?(Hash) ? __tmp12[v] : _idx(__tmp12, v)))
        component = []
        w = (__tmp13 = stack; __tmp13.is_a?(Hash) ? __tmp13[_len(stack) - 1] : _idx(__tmp13, _len(stack) - 1))
        stack = stack[0..._len(stack) - 1]
        on_stack[w] = false
        component = _append(component, w)
        while !_eq(w, v)
          w = (__tmp14 = stack; __tmp14.is_a?(Hash) ? __tmp14[_len(stack) - 1] : _idx(__tmp14, _len(stack) - 1))
          stack = stack[0..._len(stack) - 1]
          on_stack[w] = false
          component = _append(component, w)
        end
        components = _append(components, component)
      end
      return current_index
    }
    v = 0
    while v < n
      if _eq((__tmp15 = index_of; __tmp15.is_a?(Hash) ? __tmp15[v] : _idx(__tmp15, v)), 0 - 1)
        strong_connect.call(v, 0)
      end
      v = _add(v, 1)
    end
    return components
  end
  def create_graph(n, edges)
    g = []
    i = 0
    while i < n
      g = _append(g, [])
      i = _add(i, 1)
    end
        __tmp16 = edges
    __tmp16 = [] if __tmp16.nil?
    if __tmp16.respond_to?(:keys) && !__tmp16.is_a?(String)
      __tmp16 = __tmp16.keys
    end
    __tmp16.each do |e|
      u = (__tmp17 = e; __tmp17.is_a?(Hash) ? __tmp17[0] : _idx(__tmp17, 0))
      v = (__tmp18 = e; __tmp18.is_a?(Hash) ? __tmp18[1] : _idx(__tmp18, 1))
      g[u] = _append((__tmp19 = g; __tmp19.is_a?(Hash) ? __tmp19[u] : _idx(__tmp19, u)), v)
    end
    return g
  end
  def main()
    n_vertices = 7
    source = [0, 0, 1, 2, 3, 3, 4, 4, 6]
    target = [1, 3, 2, 0, 1, 4, 5, 6, 5]
    edges = []
    i = 0
    while i < _len(source)
      edges = _append(edges, [(__tmp20 = source; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), (__tmp21 = target; __tmp21.is_a?(Hash) ? __tmp21[i] : _idx(__tmp21, i))])
      i = _add(i, 1)
    end
    g = create_graph(n_vertices, edges)
    puts(((x = tarjan(g)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
