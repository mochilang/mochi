# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_graph(vertices, edges, directed)
    g = Graph.new(directed: directed, vertex_to_index: {}, adj_matrix: []).clone
    i = 0.clone
    while i < vertices.length
      add_vertex(g, vertices[i])
      i = _add(i, 1).clone
    end
    j = 0.clone
    while j < edges.length
      e = edges[j]
      add_edge(g, e[0], e[1])
      j = _add(j, 1).clone
    end
    return g
  end
  def contains_vertex(g, v)
    return g.vertex_to_index.key?(v)
  end
  def add_vertex(g, v)
    if contains_vertex(g, v)
      panic("vertex already exists")
    end
    matrix = g.adj_matrix.clone
    i = 0.clone
    while i < matrix.length
      matrix[i] = (matrix[i] << (0))
      i = _add(i, 1).clone
    end
    row = [].clone
    j = 0.clone
    while j < _add(matrix.length, 1)
      row = (row << (0)).clone
      j = _add(j, 1).clone
    end
    matrix = (matrix << (row)).clone
    g["adj_matrix"] = matrix
    idx_map = g.vertex_to_index.clone
    idx_map[v] = matrix.length - 1
    g["vertex_to_index"] = idx_map
  end
  def remove_key(m, k)
    out = {}.clone
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |key|
      if key != k
        out[key] = m[key]
      end
    end
    return out
  end
  def decrement_indices(m, start)
    out = {}.clone
        __tmp2 = m.keys()
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |key|
      idx = m[key]
      if idx > start
        out[key] = idx - 1
      else
        out[key] = idx
      end
    end
    return out
  end
  def remove_vertex(g, v)
    if !contains_vertex(g, v)
      panic("vertex does not exist")
    end
    idx = (g.vertex_to_index)[v]
    new_matrix = [].clone
    i = 0.clone
    while i < g.adj_matrix.length
      if i != idx
        row = g.adj_matrix[i]
        new_row = [].clone
        j = 0.clone
        while j < row.length
          if j != idx
            new_row = (new_row << (row[j])).clone
          end
          j = _add(j, 1).clone
        end
        new_matrix = (new_matrix << (new_row)).clone
      end
      i = _add(i, 1).clone
    end
    g["adj_matrix"] = new_matrix
    m = remove_key(g.vertex_to_index, v).clone
    g["vertex_to_index"] = decrement_indices(m, idx)
  end
  def add_edge(g, u, v)
    if !(contains_vertex(g, u) && contains_vertex(g, v))
      panic("missing vertex")
    end
    i = (g.vertex_to_index)[u]
    j = (g.vertex_to_index)[v]
    matrix = g.adj_matrix.clone
    matrix[i][j] = 1
    if !g.directed
      matrix[j][i] = 1
    end
    g["adj_matrix"] = matrix
  end
  def remove_edge(g, u, v)
    if !(contains_vertex(g, u) && contains_vertex(g, v))
      panic("missing vertex")
    end
    i = (g.vertex_to_index)[u]
    j = (g.vertex_to_index)[v]
    matrix = g.adj_matrix.clone
    matrix[i][j] = 0
    if !g.directed
      matrix[j][i] = 0
    end
    g["adj_matrix"] = matrix
  end
  def contains_edge(g, u, v)
    if !(contains_vertex(g, u) && contains_vertex(g, v))
      panic("missing vertex")
    end
    i = (g.vertex_to_index)[u]
    j = (g.vertex_to_index)[v]
    matrix = g.adj_matrix
    return matrix[i][j] == 1
  end
  def clear_graph(g)
    g["vertex_to_index"] = {}
    g["adj_matrix"] = []
  end
  Graph = Struct.new(:directed, :vertex_to_index, :adj_matrix, keyword_init: true)
  $g = make_graph([1, 2, 3], [[1, 2], [2, 3]], false).clone
  puts(((x = $g.adj_matrix); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(contains_edge($g, 1, 2)))
  puts(_str(contains_edge($g, 2, 1)))
  remove_edge($g, 1, 2)
  puts(_str(contains_edge($g, 1, 2)))
  remove_vertex($g, 2)
  puts(((x = $g.adj_matrix); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
