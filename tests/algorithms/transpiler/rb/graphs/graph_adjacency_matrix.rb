# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_graph(vertices, edges, directed)
    g = Graph.new(directed: directed, vertex_to_index: {}, adj_matrix: [])
    i = 0
    while i < _len(vertices)
      add_vertex(g, (__tmp1 = vertices; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    j = 0
    while j < _len(edges)
      e = (__tmp2 = edges; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
      add_edge(g, (__tmp3 = e; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)), (__tmp4 = e; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1)))
      j = _add(j, 1)
    end
    return g
  end
  def contains_vertex(g, v)
    return _has(g.vertex_to_index, v)
  end
  def add_vertex(g, v)
    if contains_vertex(g, v)
      panic("vertex already exists")
    end
    matrix = g.adj_matrix
    i = 0
    while i < _len(matrix)
      matrix[i] = _append((__tmp5 = matrix; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)), 0)
      i = _add(i, 1)
    end
    row = []
    j = 0
    while j < _add(_len(matrix), 1)
      row = _append(row, 0)
      j = _add(j, 1)
    end
    matrix = _append(matrix, row)
    g.adj_matrix = matrix
    idx_map = g.vertex_to_index
    idx_map[v] = _len(matrix) - 1
    g.vertex_to_index = idx_map
  end
  def remove_key(m, k)
    out = {}
        __tmp6 = m.keys()
    __tmp6 = [] if __tmp6.nil?
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |key|
      if !_eq(key, k)
        out[key] = (__tmp7 = m; __tmp7.is_a?(Hash) ? __tmp7[key] : _idx(__tmp7, key))
      end
    end
    return out
  end
  def decrement_indices(m, start)
    out = {}
        __tmp8 = m.keys()
    __tmp8 = [] if __tmp8.nil?
    if __tmp8.respond_to?(:keys) && !__tmp8.is_a?(String)
      __tmp8 = __tmp8.keys
    end
    __tmp8.each do |key|
      idx = (__tmp9 = m; __tmp9.is_a?(Hash) ? __tmp9[key] : _idx(__tmp9, key))
      if idx > start
        out[key] = idx - 1
      else
        out[key] = idx
      end
    end
    return out
  end
  def remove_vertex(g, v)
    if !contains_vertex(g, v)
      panic("vertex does not exist")
    end
    idx = (__tmp10 = (g.vertex_to_index); __tmp10.is_a?(Hash) ? __tmp10[v] : _idx(__tmp10, v))
    new_matrix = []
    i = 0
    while i < _len(g.adj_matrix)
      if !_eq(i, idx)
        row = (__tmp11 = g.adj_matrix; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
        new_row = []
        j = 0
        while j < _len(row)
          if !_eq(j, idx)
            new_row = _append(new_row, (__tmp12 = row; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)))
          end
          j = _add(j, 1)
        end
        new_matrix = _append(new_matrix, new_row)
      end
      i = _add(i, 1)
    end
    g.adj_matrix = new_matrix
    m = remove_key(g.vertex_to_index, v)
    g.vertex_to_index = decrement_indices(m, idx)
  end
  def add_edge(g, u, v)
    if !(contains_vertex(g, u) && contains_vertex(g, v))
      panic("missing vertex")
    end
    i = (__tmp13 = (g.vertex_to_index); __tmp13.is_a?(Hash) ? __tmp13[u] : _idx(__tmp13, u))
    j = (__tmp14 = (g.vertex_to_index); __tmp14.is_a?(Hash) ? __tmp14[v] : _idx(__tmp14, v))
    matrix = g.adj_matrix
    (__tmp15 = matrix; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))[j] = 1
    if !g.directed
      (__tmp16 = matrix; __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j))[i] = 1
    end
    g.adj_matrix = matrix
  end
  def remove_edge(g, u, v)
    if !(contains_vertex(g, u) && contains_vertex(g, v))
      panic("missing vertex")
    end
    i = (__tmp17 = (g.vertex_to_index); __tmp17.is_a?(Hash) ? __tmp17[u] : _idx(__tmp17, u))
    j = (__tmp18 = (g.vertex_to_index); __tmp18.is_a?(Hash) ? __tmp18[v] : _idx(__tmp18, v))
    matrix = g.adj_matrix
    (__tmp19 = matrix; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))[j] = 0
    if !g.directed
      (__tmp20 = matrix; __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j))[i] = 0
    end
    g.adj_matrix = matrix
  end
  def contains_edge(g, u, v)
    if !(contains_vertex(g, u) && contains_vertex(g, v))
      panic("missing vertex")
    end
    i = (__tmp21 = (g.vertex_to_index); __tmp21.is_a?(Hash) ? __tmp21[u] : _idx(__tmp21, u))
    j = (__tmp22 = (g.vertex_to_index); __tmp22.is_a?(Hash) ? __tmp22[v] : _idx(__tmp22, v))
    matrix = g.adj_matrix
    return _eq((__tmp23 = (__tmp24 = matrix; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)); __tmp23.is_a?(Hash) ? __tmp23[j] : _idx(__tmp23, j)), 1)
  end
  def clear_graph(g)
    g.vertex_to_index = {}
    g.adj_matrix = []
  end
  Object.send(:remove_const, :Graph) if Object.const_defined?(:Graph)
  Graph = Struct.new(:directed, :vertex_to_index, :adj_matrix, keyword_init: true)
  $g = make_graph([1, 2, 3], [[1, 2], [2, 3]], false)
  puts(((x = $g.adj_matrix); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(contains_edge($g, 1, 2)))
  puts(_str(contains_edge($g, 2, 1)))
  remove_edge($g, 1, 2)
  puts(_str(contains_edge($g, 1, 2)))
  remove_vertex($g, 2)
  puts(((x = $g.adj_matrix); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
