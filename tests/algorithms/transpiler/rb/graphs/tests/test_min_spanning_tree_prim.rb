# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def prims_algorithm(adjacency)
    visited = {}
    visited[0] = true
    mst = []
    count = 1
    total = 0
        __tmp1 = adjacency.keys()
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      total = _add(total, 1)
    end
    while count < total
      best_u = 0
      best_v = 0
      best_cost = 2147483647
            __tmp2 = adjacency.keys()
      __tmp2 = [] if __tmp2.nil?
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |u_str|
        u = (u_str).to_i
        if (__tmp3 = visited; __tmp3.is_a?(Hash) ? __tmp3[u] : _idx(__tmp3, u))
                    __tmp4 = (__tmp5 = adjacency; __tmp5.is_a?(Hash) ? __tmp5[u] : _idx(__tmp5, u))
          __tmp4 = [] if __tmp4.nil?
          if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
            __tmp4 = __tmp4.keys
          end
          __tmp4.each do |n|
            if !(__tmp6 = visited; __tmp6.is_a?(Hash) ? __tmp6[n.node] : _idx(__tmp6, n.node)) && n.cost < best_cost
              best_cost = n.cost
              best_u = u
              best_v = n.node
            end
          end
        end
      end
      visited[best_v] = true
      mst = _append(mst, EdgePair.new(u: best_u, v: best_v))
      count = _add(count, 1)
    end
    return mst
  end
  def test_prim_successful_result()
    edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
    adjacency = {}
        __tmp7 = edges
    __tmp7 = [] if __tmp7.nil?
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |e|
      u = (__tmp8 = e; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0))
      v = (__tmp9 = e; __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
      w = (__tmp10 = e; __tmp10.is_a?(Hash) ? __tmp10[2] : _idx(__tmp10, 2))
      if !(_has(adjacency, u))
        adjacency[u] = []
      end
      if !(_has(adjacency, v))
        adjacency[v] = []
      end
      adjacency[u] = _append((__tmp11 = adjacency; __tmp11.is_a?(Hash) ? __tmp11[u] : _idx(__tmp11, u)), Neighbor.new(node: v, cost: w))
      adjacency[v] = _append((__tmp12 = adjacency; __tmp12.is_a?(Hash) ? __tmp12[v] : _idx(__tmp12, v)), Neighbor.new(node: u, cost: w))
    end
    result = prims_algorithm(adjacency)
    seen = {}
        __tmp13 = result
    __tmp13 = [] if __tmp13.nil?
    if __tmp13.respond_to?(:keys) && !__tmp13.is_a?(String)
      __tmp13 = __tmp13.keys
    end
    __tmp13.each do |e|
      key1 = _add(_add(_str(e.u), ","), _str(e.v))
      key2 = _add(_add(_str(e.v), ","), _str(e.u))
      seen[key1] = true
      seen[key2] = true
    end
    expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
        __tmp14 = expected
    __tmp14 = [] if __tmp14.nil?
    if __tmp14.respond_to?(:keys) && !__tmp14.is_a?(String)
      __tmp14 = __tmp14.keys
    end
    __tmp14.each do |ans|
      key = _add(_add(_str((__tmp15 = ans; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0))), ","), _str((__tmp16 = ans; __tmp16.is_a?(Hash) ? __tmp16[1] : _idx(__tmp16, 1))))
      if !(__tmp17 = seen; __tmp17.is_a?(Hash) ? __tmp17[key] : _idx(__tmp17, key))
        return false
      end
    end
    return true
  end
  Object.send(:remove_const, :Neighbor) if Object.const_defined?(:Neighbor)
  Neighbor = Struct.new(:node, :cost, keyword_init: true)
  Object.send(:remove_const, :EdgePair) if Object.const_defined?(:EdgePair)
  EdgePair = Struct.new(:u, :v, keyword_init: true)
  puts((test_prim_successful_result() ? 'true' : 'false'))
  puts((true ? 'true' : 'false'))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
