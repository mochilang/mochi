# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def prims_algorithm(adjacency)
    visited = {}.clone
    visited[0] = true
    mst = [].clone
    count = 1.clone
    total = 0.clone
        __tmp1 = adjacency.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      total = _add(total, 1).clone
    end
    while count < total
      best_u = 0.clone
      best_v = 0.clone
      best_cost = 2147483647.clone
            __tmp2 = adjacency.keys()
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |u_str|
        u = (u_str).to_i
        if visited[u]
                    __tmp3 = adjacency[u]
          if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
            __tmp3 = __tmp3.keys
          end
          __tmp3.each do |n|
            if !visited[n.node] && n.cost < best_cost
              best_cost = n.cost.clone
              best_u = u.clone
              best_v = n.node.clone
            end
          end
        end
      end
      visited[best_v] = true
      mst = (mst << (EdgePair.new(u: best_u, v: best_v))).clone
      count = _add(count, 1).clone
    end
    return mst
  end
  def test_prim_successful_result()
    edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
    adjacency = {}.clone
        __tmp4 = edges
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |e|
      u = e[0]
      v = e[1]
      w = e[2]
      if !(adjacency.key?(u))
        adjacency[u] = []
      end
      if !(adjacency.key?(v))
        adjacency[v] = []
      end
      adjacency[u] = (adjacency[u] << (Neighbor.new(node: v, cost: w)))
      adjacency[v] = (adjacency[v] << (Neighbor.new(node: u, cost: w)))
    end
    result = prims_algorithm(adjacency)
    seen = {}.clone
        __tmp5 = result
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |e|
      key1 = _add(_add(_str(e.u), ","), _str(e.v))
      key2 = _add(_add(_str(e.v), ","), _str(e.u))
      seen[key1] = true
      seen[key2] = true
    end
    expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
        __tmp6 = expected
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |ans|
      key = _add(_add(_str(ans[0]), ","), _str(ans[1]))
      if !seen[key]
        return false
      end
    end
    return true
  end
  Neighbor = Struct.new(:node, :cost, keyword_init: true)
  EdgePair = Struct.new(:u, :v, keyword_init: true)
  puts((test_prim_successful_result() ? 'true' : 'false'))
  puts((true ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
