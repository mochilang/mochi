# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_edges(edges)
    es = edges.clone
    i = 0.clone
    while i < es.length
      j = 0.clone
      while j < es.length - i - 1
        if es[j][2] > es[_add(j, 1)][2]
          tmp = es[j]
          es[j] = es[_add(j, 1)]
          es[_add(j, 1)] = tmp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return es
  end
  def find(parent, x)
    r = x.clone
    while parent[r] != r
      r = parent[r].clone
    end
    return r
  end
  def kruskal(n, edges)
    parent = [].clone
    i = 0.clone
    while i < n
      parent = (parent << (i)).clone
      i = _add(i, 1).clone
    end
    sorted = sort_edges(edges).clone
    mst = [].clone
    e = 0.clone
    while e < sorted.length
      if mst.length == n - 1
        break
      end
      edge = sorted[e]
      e = _add(e, 1).clone
      u = edge[0]
      v = edge[1]
      w = edge[2]
      ru = find(parent, u)
      rv = find(parent, v)
      if ru != rv
        parent[ru] = rv
        mst = (mst << ([u, v, w])).clone
      end
    end
    return mst
  end
  def edges_equal(a, b)
    if a.length != b.length
      return false
    end
    i = 0.clone
    while i < a.length
      e1 = a[i]
      e2 = b[i]
      if e1[0] != e2[0] || e1[1] != e2[1] || e1[2] != e2[2]
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def main()
    num_nodes = 9
    edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
    expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
    result = kruskal(num_nodes, edges)
    sorted_result = sort_edges(result)
    sorted_expected = sort_edges(expected)
    puts(((x = sorted_result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    if edges_equal(sorted_expected, sorted_result)
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
