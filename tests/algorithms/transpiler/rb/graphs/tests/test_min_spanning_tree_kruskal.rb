# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:33 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_edges(edges)
    es = edges
    i = 0
    while i < _len(es)
      j = 0
      while j < _len(es) - i - 1
        if (__tmp1 = (__tmp2 = es; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)); __tmp1.is_a?(Hash) ? __tmp1[2] : _idx(__tmp1, 2)) > (__tmp3 = (__tmp4 = es; __tmp4.is_a?(Hash) ? __tmp4[_add(j, 1)] : _idx(__tmp4, _add(j, 1))); __tmp3.is_a?(Hash) ? __tmp3[2] : _idx(__tmp3, 2))
          tmp = (__tmp5 = es; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))
          es[j] = (__tmp6 = es; __tmp6.is_a?(Hash) ? __tmp6[_add(j, 1)] : _idx(__tmp6, _add(j, 1)))
          es[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return es
  end
  def find(parent, x)
    r = x
    while !_eq((__tmp7 = parent; __tmp7.is_a?(Hash) ? __tmp7[r] : _idx(__tmp7, r)), r)
      r = (__tmp8 = parent; __tmp8.is_a?(Hash) ? __tmp8[r] : _idx(__tmp8, r))
    end
    return r
  end
  def kruskal(n, edges)
    parent = []
    i = 0
    while i < n
      parent = _append(parent, i)
      i = _add(i, 1)
    end
    sorted = sort_edges(edges)
    mst = []
    e = 0
    while e < _len(sorted)
      if _eq(_len(mst), n - 1)
        break
      end
      edge = (__tmp9 = sorted; __tmp9.is_a?(Hash) ? __tmp9[e] : _idx(__tmp9, e))
      e = _add(e, 1)
      u = (__tmp10 = edge; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0))
      v = (__tmp11 = edge; __tmp11.is_a?(Hash) ? __tmp11[1] : _idx(__tmp11, 1))
      w = (__tmp12 = edge; __tmp12.is_a?(Hash) ? __tmp12[2] : _idx(__tmp12, 2))
      ru = find(parent, u)
      rv = find(parent, v)
      if !_eq(ru, rv)
        parent[ru] = rv
        mst = _append(mst, [u, v, w])
      end
    end
    return mst
  end
  def edges_equal(a, b)
    if !_eq(_len(a), _len(b))
      return false
    end
    i = 0
    while i < _len(a)
      e1 = (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      e2 = (__tmp14 = b; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i))
      if !_eq((__tmp15 = e1; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0)), (__tmp16 = e2; __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0))) || !_eq((__tmp17 = e1; __tmp17.is_a?(Hash) ? __tmp17[1] : _idx(__tmp17, 1)), (__tmp18 = e2; __tmp18.is_a?(Hash) ? __tmp18[1] : _idx(__tmp18, 1))) || !_eq((__tmp19 = e1; __tmp19.is_a?(Hash) ? __tmp19[2] : _idx(__tmp19, 2)), (__tmp20 = e2; __tmp20.is_a?(Hash) ? __tmp20[2] : _idx(__tmp20, 2)))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def main()
    num_nodes = 9
    edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]]
    expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]]
    result = kruskal(num_nodes, edges)
    sorted_result = sort_edges(result)
    sorted_expected = sort_edges(expected)
    puts(((x = sorted_result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    if edges_equal(sorted_expected, sorted_result)
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
