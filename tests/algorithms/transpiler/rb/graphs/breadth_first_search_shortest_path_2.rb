# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def contains_key(m, key)
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      if k == key
        return true
      end
    end
    return false
  end
  def bfs_shortest_path(graph, start, goal)
    explored = [].clone
    queue = [[start]].clone
    if start == goal
      return [start]
    end
    while queue.length > 0
      path = queue[0]
      queue = queue[1...queue.length].clone
      node = path[path.length - 1]
      if !explored.include?(node)
        neighbours = graph[node]
        i = 0.clone
        while i < neighbours.length
          neighbour = neighbours[i]
          new_path = path.clone
          new_path = (new_path << (neighbour)).clone
          queue = (queue << (new_path)).clone
          if neighbour == goal
            return new_path
          end
          i = _add(i, 1).clone
        end
        explored = (explored << (node)).clone
      end
    end
    return []
  end
  def bfs_shortest_path_distance(graph, start, target)
    if (contains_key(graph, start) == false) || (contains_key(graph, target) == false)
      return -1
    end
    if start == target
      return 0
    end
    queue = [start].clone
    visited = [start].clone
    dist = {}.clone
    dist[start] = 0
    dist[target] = (-1)
    while queue.length > 0
      node = queue[0]
      queue = queue[1...queue.length].clone
      if node == target
        if dist[target] == (-1) || dist[node] < dist[target]
          dist[target] = dist[node]
        end
      end
      adj = graph[node]
      i = 0.clone
      while i < adj.length
        next_ = adj[i]
        if !visited.include?(next_)
          visited = (visited << (next_)).clone
          queue = (queue << (next_)).clone
          dist[next_] = _add(dist[node], 1)
        end
        i = _add(i, 1).clone
      end
    end
    return dist[target]
  end
  $demo_graph = {"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]}
  # test path found
  raise 'assertion failed' unless bfs_shortest_path($demo_graph, "G", "D") == ["G", "C", "A", "B", "D"]
  # test path to self
  raise 'assertion failed' unless bfs_shortest_path($demo_graph, "G", "G") == ["G"]
  # test path not found
  raise 'assertion failed' unless bfs_shortest_path($demo_graph, "G", "Unknown").length == 0
  # test distance found
  raise 'assertion failed' unless bfs_shortest_path_distance($demo_graph, "G", "D") == 4
  # test distance to self
  raise 'assertion failed' unless bfs_shortest_path_distance($demo_graph, "A", "A") == 0
  # test distance not found
  raise 'assertion failed' unless bfs_shortest_path_distance($demo_graph, "A", "Unknown") == (-1)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
