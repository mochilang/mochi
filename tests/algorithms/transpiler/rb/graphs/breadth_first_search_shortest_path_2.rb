# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def contains(xs, x)
    i = 0
    while i < _len(xs)
      if _eq((__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def contains_key(m, key)
        __tmp2 = m.keys()
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |k|
      if _eq(k, key)
        return true
      end
    end
    return false
  end
  def bfs_shortest_path(graph, start, goal)
    explored = []
    queue = [[start]]
    if _eq(start, goal)
      return [start]
    end
    while _len(queue) > 0
      path = (__tmp3 = queue; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
      queue = queue[1..._len(queue)]
      node = (__tmp4 = path; __tmp4.is_a?(Hash) ? __tmp4[_len(path) - 1] : _idx(__tmp4, _len(path) - 1))
      if !contains(explored, node)
        neighbours = (__tmp5 = graph; __tmp5.is_a?(Hash) ? __tmp5[node] : _idx(__tmp5, node))
        i = 0
        while i < _len(neighbours)
          neighbour = (__tmp6 = neighbours; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
          new_path = path
          new_path = _append(new_path, neighbour)
          queue = _append(queue, new_path)
          if _eq(neighbour, goal)
            return new_path
          end
          i = _add(i, 1)
        end
        explored = _append(explored, node)
      end
    end
    return []
  end
  def bfs_shortest_path_distance(graph, start, target)
    if (_eq(contains_key(graph, start), false)) || (_eq(contains_key(graph, target), false))
      return -1
    end
    if _eq(start, target)
      return 0
    end
    queue = [start]
    visited = [start]
    dist = {}
    dist[start] = 0
    dist[target] = (-1)
    while _len(queue) > 0
      node = (__tmp7 = queue; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
      queue = queue[1..._len(queue)]
      if _eq(node, target)
        if _eq((__tmp8 = dist; __tmp8.is_a?(Hash) ? __tmp8[target] : _idx(__tmp8, target)), (-1)) || (__tmp9 = dist; __tmp9.is_a?(Hash) ? __tmp9[node] : _idx(__tmp9, node)) < (__tmp10 = dist; __tmp10.is_a?(Hash) ? __tmp10[target] : _idx(__tmp10, target))
          dist[target] = (__tmp11 = dist; __tmp11.is_a?(Hash) ? __tmp11[node] : _idx(__tmp11, node))
        end
      end
      adj = (__tmp12 = graph; __tmp12.is_a?(Hash) ? __tmp12[node] : _idx(__tmp12, node))
      i = 0
      while i < _len(adj)
        next_ = (__tmp13 = adj; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
        if !contains(visited, next_)
          visited = _append(visited, next_)
          queue = _append(queue, next_)
          dist[next_] = _add((__tmp14 = dist; __tmp14.is_a?(Hash) ? __tmp14[node] : _idx(__tmp14, node)), 1)
        end
        i = _add(i, 1)
      end
    end
    return (__tmp15 = dist; __tmp15.is_a?(Hash) ? __tmp15[target] : _idx(__tmp15, target))
  end
  $demo_graph = {"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]}
  # test path found
  raise 'assertion failed' unless _eq(bfs_shortest_path($demo_graph, "G", "D"), ["G", "C", "A", "B", "D"])
  # test path to self
  raise 'assertion failed' unless _eq(bfs_shortest_path($demo_graph, "G", "G"), ["G"])
  # test path not found
  raise 'assertion failed' unless _eq(_len(bfs_shortest_path($demo_graph, "G", "Unknown")), 0)
  # test distance found
  raise 'assertion failed' unless _eq(bfs_shortest_path_distance($demo_graph, "G", "D"), 4)
  # test distance to self
  raise 'assertion failed' unless _eq(bfs_shortest_path_distance($demo_graph, "A", "A"), 0)
  # test distance not found
  raise 'assertion failed' unless _eq(bfs_shortest_path_distance($demo_graph, "A", "Unknown"), (-1))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
