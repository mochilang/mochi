# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_graph(directed)
    m = {}.clone
    return GraphAdjacencyList.new(adj_list: m, directed: directed)
  end
  def contains_vertex(m, v)
    return m.key?(v)
  end
  def add_edge(g, s, d)
    adj = g.adj_list.clone
    if !g.directed
      if contains_vertex(adj, s) && contains_vertex(adj, d)
        adj[s] = (adj[s] << (d))
        adj[d] = (adj[d] << (s))
      else
        if contains_vertex(adj, s)
          adj[s] = (adj[s] << (d))
          adj[d] = [s]
        else
          if contains_vertex(adj, d)
            adj[d] = (adj[d] << (s))
            adj[s] = [d]
          else
            adj[s] = [d]
            adj[d] = [s]
          end
        end
      end
    else
      if contains_vertex(adj, s) && contains_vertex(adj, d)
        adj[s] = (adj[s] << (d))
      else
        if contains_vertex(adj, s)
          adj[s] = (adj[s] << (d))
          adj[d] = []
        else
          if contains_vertex(adj, d)
            adj[s] = [d]
          else
            adj[s] = [d]
            adj[d] = []
          end
        end
      end
    end
    g["adj_list"] = adj
    return g
  end
  def graph_to_string(g)
    return _str(g.adj_list)
  end
  GraphAdjacencyList = Struct.new(:adj_list, :directed, keyword_init: true)
  $d_graph = make_graph(true).clone
  $d_graph = add_edge($d_graph, _str(0), _str(1)).clone
  puts(graph_to_string($d_graph))
  $d_graph = add_edge($d_graph, _str(1), _str(2)).clone
  $d_graph = add_edge($d_graph, _str(1), _str(4)).clone
  $d_graph = add_edge($d_graph, _str(1), _str(5)).clone
  puts(graph_to_string($d_graph))
  $d_graph = add_edge($d_graph, _str(2), _str(0)).clone
  $d_graph = add_edge($d_graph, _str(2), _str(6)).clone
  $d_graph = add_edge($d_graph, _str(2), _str(7)).clone
  puts(graph_to_string($d_graph))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
