# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_graph(directed)
    m = {}
    return GraphAdjacencyList.new(adj_list: m, directed: directed)
  end
  def contains_vertex(m, v)
    return _has(m, v)
  end
  def add_edge(g, s, d)
    adj = g.adj_list
    if !g.directed
      if contains_vertex(adj, s) && contains_vertex(adj, d)
        adj[s] = _append((__tmp1 = adj; __tmp1.is_a?(Hash) ? __tmp1[s] : _idx(__tmp1, s)), d)
        adj[d] = _append((__tmp2 = adj; __tmp2.is_a?(Hash) ? __tmp2[d] : _idx(__tmp2, d)), s)
      else
        if contains_vertex(adj, s)
          adj[s] = _append((__tmp3 = adj; __tmp3.is_a?(Hash) ? __tmp3[s] : _idx(__tmp3, s)), d)
          adj[d] = [s]
        else
          if contains_vertex(adj, d)
            adj[d] = _append((__tmp4 = adj; __tmp4.is_a?(Hash) ? __tmp4[d] : _idx(__tmp4, d)), s)
            adj[s] = [d]
          else
            adj[s] = [d]
            adj[d] = [s]
          end
        end
      end
    else
      if contains_vertex(adj, s) && contains_vertex(adj, d)
        adj[s] = _append((__tmp5 = adj; __tmp5.is_a?(Hash) ? __tmp5[s] : _idx(__tmp5, s)), d)
      else
        if contains_vertex(adj, s)
          adj[s] = _append((__tmp6 = adj; __tmp6.is_a?(Hash) ? __tmp6[s] : _idx(__tmp6, s)), d)
          adj[d] = []
        else
          if contains_vertex(adj, d)
            adj[s] = [d]
          else
            adj[s] = [d]
            adj[d] = []
          end
        end
      end
    end
    g.adj_list = adj
    return g
  end
  def graph_to_string(g)
    return _str(g.adj_list)
  end
  Object.send(:remove_const, :GraphAdjacencyList) if Object.const_defined?(:GraphAdjacencyList)
  Object.const_set(:GraphAdjacencyList, Struct.new(:adj_list, :directed, keyword_init: true))
  $d_graph = make_graph(true)
  $d_graph = add_edge($d_graph, _str(0), _str(1))
  puts(graph_to_string($d_graph))
  $d_graph = add_edge($d_graph, _str(1), _str(2))
  $d_graph = add_edge($d_graph, _str(1), _str(4))
  $d_graph = add_edge($d_graph, _str(1), _str(5))
  puts(graph_to_string($d_graph))
  $d_graph = add_edge($d_graph, _str(2), _str(0))
  $d_graph = add_edge($d_graph, _str(2), _str(6))
  $d_graph = add_edge($d_graph, _str(2), _str(7))
  puts(graph_to_string($d_graph))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
