# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def minimum_distance(distances, visited)
    minimum = 10000000.clone
    min_index = 0.clone
    vertex = 0.clone
    while vertex < distances.length
      if distances[vertex] < minimum && visited[vertex] == false
        minimum = distances[vertex].clone
        min_index = vertex.clone
      end
      vertex = _add(vertex, 1).clone
    end
    return min_index
  end
  def dijkstra(graph, source)
    vertices = graph.length
    distances = [].clone
    i = 0.clone
    while i < vertices
      distances = (distances << (10000000)).clone
      i = _add(i, 1).clone
    end
    distances[source] = 0
    visited = [].clone
    i = 0.clone
    while i < vertices
      visited = (visited << (false)).clone
      i = _add(i, 1).clone
    end
    count = 0.clone
    while count < vertices
      u = minimum_distance(distances, visited)
      visited[u] = true
      v = 0.clone
      while v < vertices
        if graph[u][v] > 0 && visited[v] == false && distances[v] > _add(distances[u], graph[u][v])
          distances[v] = _add(distances[u], graph[u][v])
        end
        v = _add(v, 1).clone
      end
      count = _add(count, 1).clone
    end
    return distances
  end
  def print_solution(distances)
    puts("Vertex \t Distance from Source")
    v = 0.clone
    while v < distances.length
      puts(_add(_add(_str(v), "\t\t"), _str(distances[v])))
      v = _add(v, 1).clone
    end
  end
  $graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]]
  $distances = dijkstra($graph, 0)
  print_solution($distances)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
