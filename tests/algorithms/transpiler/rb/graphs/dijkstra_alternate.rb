# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def minimum_distance(distances, visited)
    minimum = 10000000
    min_index = 0
    vertex = 0
    while vertex < _len(distances)
      if (__tmp1 = distances; __tmp1.is_a?(Hash) ? __tmp1[vertex] : _idx(__tmp1, vertex)) < minimum && _eq((__tmp2 = visited; __tmp2.is_a?(Hash) ? __tmp2[vertex] : _idx(__tmp2, vertex)), false)
        minimum = (__tmp3 = distances; __tmp3.is_a?(Hash) ? __tmp3[vertex] : _idx(__tmp3, vertex))
        min_index = vertex
      end
      vertex = _add(vertex, 1)
    end
    return min_index
  end
  def dijkstra(graph, source)
    vertices = _len(graph)
    distances = []
    i = 0
    while i < vertices
      distances = _append(distances, 10000000)
      i = _add(i, 1)
    end
    distances[source] = 0
    visited = []
    i = 0
    while i < vertices
      visited = _append(visited, false)
      i = _add(i, 1)
    end
    count = 0
    while count < vertices
      u = minimum_distance(distances, visited)
      visited[u] = true
      v = 0
      while v < vertices
        if (__tmp4 = (__tmp5 = graph; __tmp5.is_a?(Hash) ? __tmp5[u] : _idx(__tmp5, u)); __tmp4.is_a?(Hash) ? __tmp4[v] : _idx(__tmp4, v)) > 0 && _eq((__tmp6 = visited; __tmp6.is_a?(Hash) ? __tmp6[v] : _idx(__tmp6, v)), false) && (__tmp7 = distances; __tmp7.is_a?(Hash) ? __tmp7[v] : _idx(__tmp7, v)) > _add((__tmp8 = distances; __tmp8.is_a?(Hash) ? __tmp8[u] : _idx(__tmp8, u)), (__tmp9 = (__tmp10 = graph; __tmp10.is_a?(Hash) ? __tmp10[u] : _idx(__tmp10, u)); __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v)))
          distances[v] = _add((__tmp11 = distances; __tmp11.is_a?(Hash) ? __tmp11[u] : _idx(__tmp11, u)), (__tmp12 = (__tmp13 = graph; __tmp13.is_a?(Hash) ? __tmp13[u] : _idx(__tmp13, u)); __tmp12.is_a?(Hash) ? __tmp12[v] : _idx(__tmp12, v)))
        end
        v = _add(v, 1)
      end
      count = _add(count, 1)
    end
    return distances
  end
  def print_solution(distances)
    puts("Vertex \t Distance from Source")
    v = 0
    while v < _len(distances)
      puts(_add(_add(_str(v), "\t\t"), _str((__tmp14 = distances; __tmp14.is_a?(Hash) ? __tmp14[v] : _idx(__tmp14, v)))))
      v = _add(v, 1)
    end
  end
  $graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]]
  $distances = dijkstra($graph, 0)
  print_solution($distances)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
