# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def list_to_string(arr)
    s = "["
    i = 0
    while i < arr.length
      s = _add(s, _str(arr[i]))
      if i < arr.length - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def check_negative_cycle(graph, distance, edge_count)
    j = 0
    while j < edge_count
      e = graph[j]
      u = e.src
      v = e.dst
      w = (e.weight).to_f
      if distance[u] < $INF && _add(distance[u], w) < distance[v]
        return true
      end
      j = _add(j, 1)
    end
    return false
  end
  def bellman_ford(graph, vertex_count, edge_count, src)
    distance = []
    i = 0
    while i < vertex_count
      distance = (distance << ($INF))
      i = _add(i, 1)
    end
    distance[src] = 0.0
    k = 0
    while k < vertex_count - 1
      j = 0
      while j < edge_count
        e = graph[j]
        u = e.src
        v = e.dst
        w = (e.weight).to_f
        if distance[u] < $INF && _add(distance[u], w) < distance[v]
          distance[v] = _add(distance[u], w)
        end
        j = _add(j, 1)
      end
      k = _add(k, 1)
    end
    if check_negative_cycle(graph, distance, edge_count)
      panic("Negative cycle found")
    end
    return distance
  end
  Edge = Struct.new(:src, :dst, :weight, keyword_init: true)
  $INF = 1000000000.0
  $edges = [Edge.new(src: 2, dst: 1, weight: -10), Edge.new(src: 3, dst: 2, weight: 3), Edge.new(src: 0, dst: 3, weight: 5), Edge.new(src: 0, dst: 1, weight: 4)]
  $distances = bellman_ford($edges, 4, $edges.length, 0)
  puts(list_to_string($distances))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
