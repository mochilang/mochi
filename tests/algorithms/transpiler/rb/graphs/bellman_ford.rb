# Generated by Mochi transpiler v0.10.65 on 2025-08-14 10:00 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def list_to_string(arr)
    s = "["
    i = 0
    while i < _len(arr)
      s = _add(s, _str((__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))))
      if i < _len(arr) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def check_negative_cycle(graph, distance, edge_count)
    j = 0
    while j < edge_count
      e = (__tmp2 = graph; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
      u = e.src
      v = e.dst
      w = (e.weight).to_f
      if (__tmp3 = distance; __tmp3.is_a?(Hash) ? __tmp3[u] : _idx(__tmp3, u)) < $INF && _add((__tmp4 = distance; __tmp4.is_a?(Hash) ? __tmp4[u] : _idx(__tmp4, u)), w) < (__tmp5 = distance; __tmp5.is_a?(Hash) ? __tmp5[v] : _idx(__tmp5, v))
        return true
      end
      j = _add(j, 1)
    end
    return false
  end
  def bellman_ford(graph, vertex_count, edge_count, src)
    distance = []
    i = 0
    while i < vertex_count
      distance = (distance + [$INF])
      i = _add(i, 1)
    end
    distance[src] = 0.0
    k = 0
    while k < vertex_count - 1
      j = 0
      while j < edge_count
        e = (__tmp6 = graph; __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j))
        u = e.src
        v = e.dst
        w = (e.weight).to_f
        if (__tmp7 = distance; __tmp7.is_a?(Hash) ? __tmp7[u] : _idx(__tmp7, u)) < $INF && _add((__tmp8 = distance; __tmp8.is_a?(Hash) ? __tmp8[u] : _idx(__tmp8, u)), w) < (__tmp9 = distance; __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v))
          distance[v] = _add((__tmp10 = distance; __tmp10.is_a?(Hash) ? __tmp10[u] : _idx(__tmp10, u)), w)
        end
        j = _add(j, 1)
      end
      k = _add(k, 1)
    end
    if check_negative_cycle(graph, distance, edge_count)
      panic("Negative cycle found")
    end
    return distance
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Edge = Struct.new(:src, :dst, :weight, keyword_init: true)
  $INF = 1e+09
  $edges = [Edge.new(src: 2, dst: 1, weight: -10), Edge.new(src: 3, dst: 2, weight: 3), Edge.new(src: 0, dst: 3, weight: 5), Edge.new(src: 0, dst: 1, weight: 4)]
  $distances = bellman_ford($edges, 4, _len($edges), 0)
  puts(list_to_string($distances))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
