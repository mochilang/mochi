# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_graph()
    return Graph.new(edges: [], num_nodes: 0)
  end
  def add_edge(g, u, v, w)
    es = g.edges
    es = _append(es, Edge.new(u: u, v: v, w: w))
    n = g.num_nodes
    if u > n
      n = u
    end
    if v > n
      n = v
    end
    return Graph.new(edges: es, num_nodes: n)
  end
  def make_ds(n)
    parent = []
    rank = []
    i = 0
    while i <= n
      parent = _append(parent, i)
      rank = _append(rank, 0)
      i = _add(i, 1)
    end
    return DS.new(parent: parent, rank: rank)
  end
  def find_set(ds, x)
    if _eq((__tmp1 = ds.parent; __tmp1.is_a?(Hash) ? __tmp1[x] : _idx(__tmp1, x)), x)
      return FindResult.new(ds: ds, root: x)
    end
    res = find_set(ds, (__tmp2 = ds.parent; __tmp2.is_a?(Hash) ? __tmp2[x] : _idx(__tmp2, x)))
    p = res.ds.parent
    p[x] = res.root
    return FindResult.new(ds: DS.new(parent: p, rank: res.ds.rank), root: res.root)
  end
  def union_set(ds, x, y)
    fx = find_set(ds, x)
    ds1 = fx.ds
    x_root = fx.root
    fy = find_set(ds1, y)
    ds2 = fy.ds
    y_root = fy.root
    if _eq(x_root, y_root)
      return ds2
    end
    p = ds2.parent
    r = ds2.rank
    if (__tmp3 = r; __tmp3.is_a?(Hash) ? __tmp3[x_root] : _idx(__tmp3, x_root)) > (__tmp4 = r; __tmp4.is_a?(Hash) ? __tmp4[y_root] : _idx(__tmp4, y_root))
      p[y_root] = x_root
    else
      p[x_root] = y_root
      if _eq((__tmp5 = r; __tmp5.is_a?(Hash) ? __tmp5[x_root] : _idx(__tmp5, x_root)), (__tmp6 = r; __tmp6.is_a?(Hash) ? __tmp6[y_root] : _idx(__tmp6, y_root)))
        r[y_root] = _add((__tmp7 = r; __tmp7.is_a?(Hash) ? __tmp7[y_root] : _idx(__tmp7, y_root)), 1)
      end
    end
    return DS.new(parent: p, rank: r)
  end
  def sort_edges(edges)
    arr = edges
    i = 1
    while i < _len(arr)
      key = (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      j = i - 1
      while j >= 0
        temp = (__tmp9 = arr; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
        if temp.w > key.w || (_eq(temp.w, key.w) && (temp.u > key.u || (_eq(temp.u, key.u) && temp.v > key.v)))
          arr[_add(j, 1)] = temp
          j = j - 1
        else
          break
        end
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1)
    end
    return arr
  end
  def kruskal(g)
    edges = sort_edges(g.edges)
    ds = make_ds(g.num_nodes)
    mst_edges = []
    i = 0
    added = 0
    while added < g.num_nodes - 1 && i < _len(edges)
      e = (__tmp10 = edges; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
      i = _add(i, 1)
      fu = find_set(ds, e.u)
      ds = fu.ds
      ru = fu.root
      fv = find_set(ds, e.v)
      ds = fv.ds
      rv = fv.root
      if !_eq(ru, rv)
        mst_edges = _append(mst_edges, e)
        added = _add(added, 1)
        ds = union_set(ds, ru, rv)
      end
    end
    return Graph.new(edges: mst_edges, num_nodes: g.num_nodes)
  end
  def print_mst(g)
    es = sort_edges(g.edges)
        __tmp11 = es
    __tmp11 = [] if __tmp11.nil?
    if __tmp11.respond_to?(:keys) && !__tmp11.is_a?(String)
      __tmp11 = __tmp11.keys
    end
    __tmp11.each do |e|
      puts(_add(_add(_add(_add(_str(e.u), "-"), _str(e.v)), ":"), _str(e.w)))
    end
  end
  def main()
    g = new_graph()
    g = add_edge(g, 1, 2, 1)
    g = add_edge(g, 2, 3, 2)
    g = add_edge(g, 3, 4, 1)
    g = add_edge(g, 3, 5, 100)
    g = add_edge(g, 4, 5, 5)
    mst = kruskal(g)
    print_mst(mst)
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Edge = Struct.new(:u, :v, :w, keyword_init: true)
  Object.send(:remove_const, :Graph) if Object.const_defined?(:Graph)
  Graph = Struct.new(:edges, :num_nodes, keyword_init: true)
  Object.send(:remove_const, :DS) if Object.const_defined?(:DS)
  DS = Struct.new(:parent, :rank, keyword_init: true)
  Object.send(:remove_const, :FindResult) if Object.const_defined?(:FindResult)
  FindResult = Struct.new(:ds, :root, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
