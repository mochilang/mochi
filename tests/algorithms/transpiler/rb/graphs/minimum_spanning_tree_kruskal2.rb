# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_graph()
    return Graph.new(edges: [], num_nodes: 0)
  end
  def add_edge(g, u, v, w)
    es = g.edges.clone
    es = (es << (Edge.new(u: u, v: v, w: w))).clone
    n = g.num_nodes.clone
    if u > n
      n = u.clone
    end
    if v > n
      n = v.clone
    end
    return Graph.new(edges: es, num_nodes: n)
  end
  def make_ds(n)
    parent = [].clone
    rank = [].clone
    i = 0.clone
    while i <= n
      parent = (parent << (i)).clone
      rank = (rank << (0)).clone
      i = _add(i, 1).clone
    end
    return DS.new(parent: parent, rank: rank)
  end
  def find_set(ds, x)
    if ds.parent[x] == x
      return FindResult.new(ds: ds, root: x)
    end
    res = find_set(ds, ds.parent[x])
    p = res.ds.parent.clone
    p[x] = res.root
    return FindResult.new(ds: DS.new(parent: p, rank: res.ds.rank), root: res.root)
  end
  def union_set(ds, x, y)
    fx = find_set(ds, x)
    ds1 = fx.ds
    x_root = fx.root
    fy = find_set(ds1, y)
    ds2 = fy.ds.clone
    y_root = fy.root
    if x_root == y_root
      return ds2
    end
    p = ds2.parent.clone
    r = ds2.rank.clone
    if r[x_root] > r[y_root]
      p[y_root] = x_root
    else
      p[x_root] = y_root
      if r[x_root] == r[y_root]
        r[y_root] = _add(r[y_root], 1)
      end
    end
    return DS.new(parent: p, rank: r)
  end
  def sort_edges(edges)
    arr = edges.clone
    i = 1.clone
    while i < arr.length
      key = arr[i]
      j = i - 1.clone
      while j >= 0
        temp = arr[j]
        if temp.w > key.w || (temp.w == key.w && (temp.u > key.u || (temp.u == key.u && temp.v > key.v)))
          arr[_add(j, 1)] = temp
          j = j - 1.clone
        else
          break
        end
      end
      arr[_add(j, 1)] = key
      i = _add(i, 1).clone
    end
    return arr
  end
  def kruskal(g)
    edges = sort_edges(g.edges).clone
    ds = make_ds(g.num_nodes).clone
    mst_edges = [].clone
    i = 0.clone
    added = 0.clone
    while added < g.num_nodes - 1 && i < edges.length
      e = edges[i]
      i = _add(i, 1).clone
      fu = find_set(ds, e.u)
      ds = fu.ds.clone
      ru = fu.root
      fv = find_set(ds, e.v)
      ds = fv.ds.clone
      rv = fv.root
      if ru != rv
        mst_edges = (mst_edges << (e)).clone
        added = _add(added, 1).clone
        ds = union_set(ds, ru, rv).clone
      end
    end
    return Graph.new(edges: mst_edges, num_nodes: g.num_nodes)
  end
  def print_mst(g)
    es = sort_edges(g.edges).clone
        __tmp1 = es
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |e|
      puts(_add(_add(_add(_add(_str(e.u), "-"), _str(e.v)), ":"), _str(e.w)))
    end
  end
  def main()
    g = new_graph().clone
    g = add_edge(g, 1, 2, 1).clone
    g = add_edge(g, 2, 3, 2).clone
    g = add_edge(g, 3, 4, 1).clone
    g = add_edge(g, 3, 5, 100).clone
    g = add_edge(g, 4, 5, 5).clone
    mst = kruskal(g)
    print_mst(mst)
  end
  Edge = Struct.new(:u, :v, :w, keyword_init: true)
  Graph = Struct.new(:edges, :num_nodes, keyword_init: true)
  DS = Struct.new(:parent, :rank, keyword_init: true)
  FindResult = Struct.new(:ds, :root, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
