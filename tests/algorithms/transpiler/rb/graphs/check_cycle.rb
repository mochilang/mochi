# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def depth_first_search(graph, vertex, visited, rec_stk)
    visited[vertex] = true
    rec_stk[vertex] = true
        __tmp1 = graph[vertex]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |node|
      if !visited[node]
        if depth_first_search(graph, node, visited, rec_stk)
          return true
        end
      else
        if rec_stk[node]
          return true
        end
      end
    end
    rec_stk[vertex] = false
    return false
  end
  def check_cycle(graph)
    n = graph.length
    visited = [].clone
    rec_stk = [].clone
    i = 0.clone
    while i < n
      visited = (visited << (false)).clone
      rec_stk = (rec_stk << (false)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < n
      if !visited[i]
        if depth_first_search(graph, i, visited, rec_stk)
          return true
        end
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  $g1 = [[], [0, 3], [0, 4], [5], [5], []]
  print_bool(check_cycle($g1))
  $g2 = [[1, 2], [2], [0, 3], [3]]
  print_bool(check_cycle($g2))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
