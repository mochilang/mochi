# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pairs_to_string(edges)
    s = "[".clone
    i = 0.clone
    while i < edges.length
      e = edges[i]
      s = _add(_add(_add(_add(_add(s, "("), _str(e.u)), ", "), _str(e.v)), ")").clone
      if i < edges.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    return _add(s, "]")
  end
  def prim_mst(graph)
    n = graph.length
    visited = [].clone
    dist = [].clone
    parent = [].clone
    i = 0.clone
    while i < n
      visited = (visited << (false)).clone
      dist = (dist << ($INF)).clone
      parent = (parent << (-1)).clone
      i = _add(i, 1).clone
    end
    dist[0] = 0
    result = [].clone
    count = 0.clone
    while count < n
      min_val = $INF.clone
      u = 0.clone
      v = 0.clone
      while v < n
        if visited[v] == false && dist[v] < min_val
          min_val = dist[v].clone
          u = v.clone
        end
        v = _add(v, 1).clone
      end
      if min_val == $INF
        break
      end
      visited[u] = true
      if u != 0
        result = (result << (Pair.new(u: parent[u], v: u))).clone
      end
            __tmp1 = graph[u]
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |e|
        if visited[e.to] == false && e.weight < dist[e.to]
          dist[e.to] = e.weight
          parent[e.to] = u
        end
      end
      count = _add(count, 1).clone
    end
    return result
  end
  Edge = Struct.new(:to, :weight, keyword_init: true)
  Pair = Struct.new(:u, :v, keyword_init: true)
  $INF = 1000000000
  $adjacency_list = [[Edge.new(to: 1, weight: 1), Edge.new(to: 3, weight: 3)], [Edge.new(to: 0, weight: 1), Edge.new(to: 2, weight: 6), Edge.new(to: 3, weight: 5), Edge.new(to: 4, weight: 1)], [Edge.new(to: 1, weight: 6), Edge.new(to: 4, weight: 5), Edge.new(to: 5, weight: 2)], [Edge.new(to: 0, weight: 3), Edge.new(to: 1, weight: 5), Edge.new(to: 4, weight: 1)], [Edge.new(to: 1, weight: 1), Edge.new(to: 2, weight: 5), Edge.new(to: 3, weight: 1), Edge.new(to: 5, weight: 4)], [Edge.new(to: 2, weight: 2), Edge.new(to: 4, weight: 4)]]
  $mst_edges = prim_mst($adjacency_list)
  puts(pairs_to_string($mst_edges))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
