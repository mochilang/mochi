# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pairs_to_string(edges)
    s = "["
    i = 0
    while i < _len(edges)
      e = (__tmp1 = edges; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      s = _add(_add(_add(_add(_add(s, "("), _str(e.u)), ", "), _str(e.v)), ")")
      if i < _len(edges) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def prim_mst(graph)
    n = _len(graph)
    visited = []
    dist = []
    parent = []
    i = 0
    while i < n
      visited = _append(visited, false)
      dist = _append(dist, $INF)
      parent = _append(parent, -1)
      i = _add(i, 1)
    end
    dist[0] = 0
    result = []
    count = 0
    while count < n
      min_val = $INF
      u = 0
      v = 0
      while v < n
        if _eq((__tmp2 = visited; __tmp2.is_a?(Hash) ? __tmp2[v] : _idx(__tmp2, v)), false) && (__tmp3 = dist; __tmp3.is_a?(Hash) ? __tmp3[v] : _idx(__tmp3, v)) < min_val
          min_val = (__tmp4 = dist; __tmp4.is_a?(Hash) ? __tmp4[v] : _idx(__tmp4, v))
          u = v
        end
        v = _add(v, 1)
      end
      if _eq(min_val, $INF)
        break
      end
      visited[u] = true
      if !_eq(u, 0)
        result = _append(result, Pair.new(u: (__tmp5 = parent; __tmp5.is_a?(Hash) ? __tmp5[u] : _idx(__tmp5, u)), v: u))
      end
            __tmp6 = (__tmp7 = graph; __tmp7.is_a?(Hash) ? __tmp7[u] : _idx(__tmp7, u))
      __tmp6 = [] if __tmp6.nil?
      if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
        __tmp6 = __tmp6.keys
      end
      __tmp6.each do |e|
        if _eq((__tmp8 = visited; __tmp8.is_a?(Hash) ? __tmp8[e.to] : _idx(__tmp8, e.to)), false) && e.weight < (__tmp9 = dist; __tmp9.is_a?(Hash) ? __tmp9[e.to] : _idx(__tmp9, e.to))
          dist[e.to] = e.weight
          parent[e.to] = u
        end
      end
      count = _add(count, 1)
    end
    return result
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Edge = Struct.new(:to, :weight, keyword_init: true)
  Object.send(:remove_const, :Pair) if Object.const_defined?(:Pair)
  Pair = Struct.new(:u, :v, keyword_init: true)
  $INF = 1000000000
  $adjacency_list = [[Edge.new(to: 1, weight: 1), Edge.new(to: 3, weight: 3)], [Edge.new(to: 0, weight: 1), Edge.new(to: 2, weight: 6), Edge.new(to: 3, weight: 5), Edge.new(to: 4, weight: 1)], [Edge.new(to: 1, weight: 6), Edge.new(to: 4, weight: 5), Edge.new(to: 5, weight: 2)], [Edge.new(to: 0, weight: 3), Edge.new(to: 1, weight: 5), Edge.new(to: 4, weight: 1)], [Edge.new(to: 1, weight: 1), Edge.new(to: 2, weight: 5), Edge.new(to: 3, weight: 1), Edge.new(to: 5, weight: 4)], [Edge.new(to: 2, weight: 2), Edge.new(to: 4, weight: 4)]]
  $mst_edges = prim_mst($adjacency_list)
  puts(pairs_to_string($mst_edges))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
