# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def dfs(graph, at, parent, visited, ids, low, id, bridges)
    visited[at] = true
    ids[at] = id
    low[at] = id
    current_id = _add(id, 1)
    res_bridges = bridges
        __tmp1 = (__tmp2 = graph; __tmp2.is_a?(Hash) ? __tmp2[at] : _idx(__tmp2, at))
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |to|
      if _eq(to, parent)
        next
      else
        if !(__tmp3 = visited; __tmp3.is_a?(Hash) ? __tmp3[to] : _idx(__tmp3, to))
          result = dfs(graph, to, at, visited, ids, low, current_id, res_bridges)
          current_id = result.id
          res_bridges = result.bridges
          if (__tmp4 = low; __tmp4.is_a?(Hash) ? __tmp4[at] : _idx(__tmp4, at)) > (__tmp5 = low; __tmp5.is_a?(Hash) ? __tmp5[to] : _idx(__tmp5, to))
            low[at] = (__tmp6 = low; __tmp6.is_a?(Hash) ? __tmp6[to] : _idx(__tmp6, to))
          end
          if (__tmp7 = ids; __tmp7.is_a?(Hash) ? __tmp7[at] : _idx(__tmp7, at)) < (__tmp8 = low; __tmp8.is_a?(Hash) ? __tmp8[to] : _idx(__tmp8, to))
            edge = (at < to ? [at, to] : [to, at])
            res_bridges = _append(res_bridges, edge)
          end
        else
          if (__tmp9 = low; __tmp9.is_a?(Hash) ? __tmp9[at] : _idx(__tmp9, at)) > (__tmp10 = ids; __tmp10.is_a?(Hash) ? __tmp10[to] : _idx(__tmp10, to))
            low[at] = (__tmp11 = ids; __tmp11.is_a?(Hash) ? __tmp11[to] : _idx(__tmp11, to))
          end
        end
      end
    end
    return DfsResult.new(id: current_id, bridges: res_bridges)
  end
  def compute_bridges(graph)
    n = _len(graph)
    visited = []
    ids = []
    low = []
    i = 0
    while i < n
      visited = _append(visited, false)
      ids = _append(ids, 0)
      low = _append(low, 0)
      i = _add(i, 1)
    end
    bridges = []
    id = 0
    i = 0
    while i < n
      if !(__tmp12 = visited; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
        result = dfs(graph, i, -1, visited, ids, low, id, bridges)
        id = result.id
        bridges = result.bridges
      end
      i = _add(i, 1)
    end
    return bridges
  end
  def get_demo_graph(index)
    if _eq(index, 0)
      return {0 => [1, 2], 1 => [0, 2], 2 => [0, 1, 3, 5], 3 => [2, 4], 4 => [3], 5 => [2, 6, 8], 6 => [5, 7], 7 => [6, 8], 8 => [5, 7]}
    end
    if _eq(index, 1)
      return {0 => [6], 1 => [9], 2 => [4, 5], 3 => [4], 4 => [2, 3], 5 => [2], 6 => [0, 7], 7 => [6], 8 => [], 9 => [1]}
    end
    if _eq(index, 2)
      return {0 => [4], 1 => [6], 2 => [], 3 => [5, 6, 7], 4 => [0, 6], 5 => [3, 8, 9], 6 => [1, 3, 4, 7], 7 => [3, 6, 8, 9], 8 => [5, 7], 9 => [5, 7]}
    end
    return {0 => [1, 3], 1 => [0, 2, 4], 2 => [1, 3, 4], 3 => [0, 2, 4], 4 => [1, 2, 3]}
  end
  Object.send(:remove_const, :DfsResult) if Object.const_defined?(:DfsResult)
  DfsResult = Struct.new(:id, :bridges, keyword_init: true)
  puts(((x = compute_bridges(get_demo_graph(0))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = compute_bridges(get_demo_graph(1))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = compute_bridges(get_demo_graph(2))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = compute_bridges(get_demo_graph(3))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = compute_bridges({})); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
