# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def newGraph(g, s)
    return Graph.new(graph: g, parent: {}, source: s)
  end
  def breath_first_search(g)
    parent = g.parent
    parent[g.source] = g.source
    queue = [g.source]
    idx = 0
    while idx < queue.length
      vertex = queue[idx]
            __tmp1 = g.graph[vertex]
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |adj|
        if !(parent.key?(adj))
          parent[adj] = vertex
          queue = (queue << (adj))
        end
      end
      idx = _add(idx, 1)
    end
    g["parent"] = parent
    return g
  end
  def shortest_path(g, target)
    if target == g.source
      return g.source
    end
    if !(g.parent.key?(target))
      return _add(_add(_add("No path from vertex: ", g.source), " to vertex: "), target)
    end
    p = g.parent[target]
    return _add(_add(shortest_path(g, p), "->"), target)
  end
  Graph = Struct.new(:graph, :parent, :source, keyword_init: true)
  $graph = {"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]}
  $g = newGraph($graph, "G")
  $g = breath_first_search($g)
  puts(shortest_path($g, "D"))
  puts(shortest_path($g, "G"))
  puts(shortest_path($g, "Foo"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
