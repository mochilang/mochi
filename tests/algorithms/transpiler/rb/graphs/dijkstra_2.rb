# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def print_dist(dist)
    puts("Vertex Distance")
    i = 0.clone
    while i < dist.length
      if dist[i] >= $INF
        puts(([i, "\tINF"]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
      else
        puts(([i, "\t", (dist[i]).to_i]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ').rstrip())
      end
      i = _add(i, 1).clone
    end
  end
  def min_dist(mdist, vset)
    min_val = $INF.clone
    min_ind = -1.clone
    i = 0.clone
    while i < mdist.length
      if !(vset[i]) && mdist[i] < min_val
        min_val = mdist[i].clone
        min_ind = i.clone
      end
      i = _add(i, 1).clone
    end
    return min_ind
  end
  def dijkstra(graph, src)
    v = graph.length
    mdist = [].clone
    vset = [].clone
    i = 0.clone
    while i < v
      mdist = (mdist << ($INF)).clone
      vset = (vset << (false)).clone
      i = _add(i, 1).clone
    end
    mdist[src] = 0.0
    count = 0.clone
    while count < v - 1
      u = min_dist(mdist, vset)
      vset[u] = true
      i = 0.clone
      while i < v
        alt = _add(mdist[u], graph[u][i])
        if !(vset[i]) && graph[u][i] < $INF && alt < mdist[i]
          mdist[i] = alt
        end
        i = _add(i, 1).clone
      end
      count = _add(count, 1).clone
    end
    return mdist
  end
  def main()
    graph = [[0.0, 10.0, $INF, $INF, 5.0], [$INF, 0.0, 1.0, $INF, 2.0], [$INF, $INF, 0.0, 4.0, $INF], [$INF, $INF, 6.0, 0.0, $INF], [$INF, 3.0, 9.0, 2.0, 0.0]]
    dist = dijkstra(graph, 0)
    print_dist(dist)
  end
  $INF = 1000000000.0
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
