# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def print_dist(dist)
    puts("Vertex Distance")
    i = 0
    while i < _len(dist)
      if (__tmp1 = dist; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) >= $INF
        puts((([i, "\tINF"]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
      else
        puts((([i, "\t", ((__tmp2 = dist; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))).to_i]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
      end
      i = _add(i, 1)
    end
  end
  def min_dist(mdist, vset)
    min_val = $INF
    min_ind = -1
    i = 0
    while i < _len(mdist)
      if !((__tmp3 = vset; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))) && (__tmp4 = mdist; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)) < min_val
        min_val = (__tmp5 = mdist; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
        min_ind = i
      end
      i = _add(i, 1)
    end
    return min_ind
  end
  def dijkstra(graph, src)
    v = _len(graph)
    mdist = []
    vset = []
    i = 0
    while i < v
      mdist = _append(mdist, $INF)
      vset = _append(vset, false)
      i = _add(i, 1)
    end
    mdist[src] = 0.0
    count = 0
    while count < v - 1
      u = min_dist(mdist, vset)
      vset[u] = true
      i = 0
      while i < v
        alt = _add((__tmp6 = mdist; __tmp6.is_a?(Hash) ? __tmp6[u] : _idx(__tmp6, u)), (__tmp7 = (__tmp8 = graph; __tmp8.is_a?(Hash) ? __tmp8[u] : _idx(__tmp8, u)); __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)))
        if !((__tmp9 = vset; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))) && (__tmp10 = (__tmp11 = graph; __tmp11.is_a?(Hash) ? __tmp11[u] : _idx(__tmp11, u)); __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) < $INF && alt < (__tmp12 = mdist; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))
          mdist[i] = alt
        end
        i = _add(i, 1)
      end
      count = _add(count, 1)
    end
    return mdist
  end
  def main()
    graph = [[0.0, 10.0, $INF, $INF, 5.0], [$INF, 0.0, 1.0, $INF, 2.0], [$INF, $INF, 0.0, 4.0, $INF], [$INF, $INF, 6.0, 0.0, $INF], [$INF, 3.0, 9.0, 2.0, 0.0]]
    dist = dijkstra(graph, 0)
    print_dist(dist)
  end
  $INF = 1e+09
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
