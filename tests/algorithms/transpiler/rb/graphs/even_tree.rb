# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dfs(start, visited)
    size = 1.clone
    cuts = 0.clone
    visited[start] = true
        __tmp1 = $tree[start]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      if !(visited.key?(v))
        res = dfs(v, visited)
        size = _add(size, res[0]).clone
        cuts = _add(cuts, res[1]).clone
      end
    end
    if size % 2 == 0
      cuts = _add(cuts, 1).clone
    end
    return [size, cuts]
  end
  def even_tree()
    visited = {}
    res = dfs(1, visited)
    return res[1] - 1
  end
  def main()
    edges = [[2, 1], [3, 1], [4, 3], [5, 2], [6, 1], [7, 2], [8, 6], [9, 8], [10, 8]]
    i = 0.clone
    while i < edges.length
      u = edges[i][0]
      v = edges[i][1]
      if !($tree.key?(u))
        $tree[u] = []
      end
      if !($tree.key?(v))
        $tree[v] = []
      end
      $tree[u] = ($tree[u] << (v))
      $tree[v] = ($tree[v] << (u))
      i = _add(i, 1).clone
    end
    puts(_str(even_tree()))
  end
  $tree = {}.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
