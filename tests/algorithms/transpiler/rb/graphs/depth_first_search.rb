# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains(lst, v)
    i = 0.clone
    while i < lst.length
      if lst[i] == v
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def depth_first_search(graph, start)
    explored = [].clone
    stack = [].clone
    stack = (stack << (start)).clone
    explored = (explored << (start)).clone
    while stack.length > 0
      idx = stack.length - 1
      v = stack[idx]
      stack = stack[0...idx].clone
      neighbors = graph[v]
      i = neighbors.length - 1.clone
      while i >= 0
        adj = neighbors[i]
        if !explored.include?(adj)
          explored = (explored << (adj)).clone
          stack = (stack << (adj)).clone
        end
        i = i - 1.clone
      end
    end
    return explored
  end
  $G = {"A" => ["B", "C", "D"], "B" => ["A", "D", "E"], "C" => ["A", "F"], "D" => ["B", "D"], "E" => ["B", "F"], "F" => ["C", "E", "G"], "G" => ["F"]}
  $result = depth_first_search($G, "A")
  puts(((x = $result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
