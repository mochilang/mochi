# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dfs(graph, vert, visited)
    visited[vert] = true
    connected_verts = [].clone
        __tmp1 = graph[vert]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |neighbour|
      if !visited[neighbour]
        connected_verts = _add(connected_verts, dfs(graph, neighbour, visited)).clone
      end
    end
    return _add([vert], connected_verts)
  end
  def connected_components(graph)
    graph_size = graph.length
    visited = [].clone
    (0...graph_size).each do |_|
      visited = (visited << (false)).clone
    end
    components_list = [].clone
    (0...graph_size).each do |i|
      if !visited[i]
        component = dfs(graph, i, visited)
        components_list = (components_list << (component)).clone
      end
    end
    return components_list
  end
  $test_graph_1 = {0 => [1, 2], 1 => [0, 3], 2 => [0], 3 => [1], 4 => [5, 6], 5 => [4, 6], 6 => [4, 5]}
  $test_graph_2 = {0 => [1, 2, 3], 1 => [0, 3], 2 => [0], 3 => [0, 1], 4 => [], 5 => []}
  puts(((x = connected_components($test_graph_1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = connected_components($test_graph_2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
