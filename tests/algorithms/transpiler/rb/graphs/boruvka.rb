# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_graph(num_nodes)
    return Graph.new(num_nodes: num_nodes, edges: [], component: {})
  end
  def add_edge(g, u, v, w)
    es = g.edges
    es = _append(es, Edge.new(u: u, v: v, w: w))
    return Graph.new(num_nodes: g.num_nodes, edges: es, component: g.component)
  end
  def find_component(g, node)
    if _eq((__tmp1 = g.component; __tmp1.is_a?(Hash) ? __tmp1[node] : _idx(__tmp1, node)), node)
      return node
    end
    return find_component(g, (__tmp2 = g.component; __tmp2.is_a?(Hash) ? __tmp2[node] : _idx(__tmp2, node)))
  end
  def set_component(g, node)
    if !_eq((__tmp3 = g.component; __tmp3.is_a?(Hash) ? __tmp3[node] : _idx(__tmp3, node)), node)
      comp = g.component
      k = 0
      while k < g.num_nodes
        comp[k] = find_component(g, k)
        k = _add(k, 1)
      end
      g = Graph.new(num_nodes: g.num_nodes, edges: g.edges, component: comp)
    end
    return g
  end
  def union(g, component_size, u, v)
    comp_size = component_size
    comp = g.component
    if (__tmp4 = comp_size; __tmp4.is_a?(Hash) ? __tmp4[u] : _idx(__tmp4, u)) <= (__tmp5 = comp_size; __tmp5.is_a?(Hash) ? __tmp5[v] : _idx(__tmp5, v))
      comp[u] = v
      comp_size[v] = _add((__tmp6 = comp_size; __tmp6.is_a?(Hash) ? __tmp6[v] : _idx(__tmp6, v)), (__tmp7 = comp_size; __tmp7.is_a?(Hash) ? __tmp7[u] : _idx(__tmp7, u)))
      g = Graph.new(num_nodes: g.num_nodes, edges: g.edges, component: comp)
      g = set_component(g, u)
    else
      comp[v] = u
      comp_size[u] = _add((__tmp8 = comp_size; __tmp8.is_a?(Hash) ? __tmp8[u] : _idx(__tmp8, u)), (__tmp9 = comp_size; __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v)))
      g = Graph.new(num_nodes: g.num_nodes, edges: g.edges, component: comp)
      g = set_component(g, v)
    end
    return UnionResult.new(graph: g, component_size: comp_size)
  end
  def create_empty_edges(n)
    res = []
    i = 0
    while i < n
      res = _append(res, Edge.new(u: 0 - 1, v: 0 - 1, w: 0 - 1))
      i = _add(i, 1)
    end
    return res
  end
  def boruvka(g)
    component_size = []
    i = 0
    while i < g.num_nodes
      component_size = _append(component_size, 1)
      comp = g.component
      comp[i] = i
      g = Graph.new(num_nodes: g.num_nodes, edges: g.edges, component: comp)
      i = _add(i, 1)
    end
    mst_weight = 0
    num_components = g.num_nodes
    minimum_weight_edge = create_empty_edges(g.num_nodes)
    while num_components > 1
            __tmp10 = g.edges
      __tmp10 = [] if __tmp10.nil?
      if __tmp10.respond_to?(:keys) && !__tmp10.is_a?(String)
        __tmp10 = __tmp10.keys
      end
      __tmp10.each do |e|
        u = e.u
        v = e.v
        w = e.w
        u_comp = (__tmp11 = g.component; __tmp11.is_a?(Hash) ? __tmp11[u] : _idx(__tmp11, u))
        v_comp = (__tmp12 = g.component; __tmp12.is_a?(Hash) ? __tmp12[v] : _idx(__tmp12, v))
        if !_eq(u_comp, v_comp)
          current_u = (__tmp13 = minimum_weight_edge; __tmp13.is_a?(Hash) ? __tmp13[u_comp] : _idx(__tmp13, u_comp))
          if _eq(current_u.u, 0 - 1) || current_u.w > w
            minimum_weight_edge[u_comp] = Edge.new(u: u, v: v, w: w)
          end
          current_v = (__tmp14 = minimum_weight_edge; __tmp14.is_a?(Hash) ? __tmp14[v_comp] : _idx(__tmp14, v_comp))
          if _eq(current_v.u, 0 - 1) || current_v.w > w
            minimum_weight_edge[v_comp] = Edge.new(u: u, v: v, w: w)
          end
        end
      end
            __tmp15 = minimum_weight_edge
      __tmp15 = [] if __tmp15.nil?
      if __tmp15.respond_to?(:keys) && !__tmp15.is_a?(String)
        __tmp15 = __tmp15.keys
      end
      __tmp15.each do |e|
        if !_eq(e.u, 0 - 1)
          u = e.u
          v = e.v
          w = e.w
          u_comp = (__tmp16 = g.component; __tmp16.is_a?(Hash) ? __tmp16[u] : _idx(__tmp16, u))
          v_comp = (__tmp17 = g.component; __tmp17.is_a?(Hash) ? __tmp17[v] : _idx(__tmp17, v))
          if !_eq(u_comp, v_comp)
            mst_weight = _add(mst_weight, w)
            res = union(g, component_size, u_comp, v_comp)
            g = res.graph
            component_size = res.component_size
            puts(_add(_add(_add(_add("Added edge [", _str(u)), " - "), _str(v)), "]"))
            puts(_add("Added weight: ", _str(w)))
            puts("")
            num_components = num_components - 1
          end
        end
      end
      minimum_weight_edge = create_empty_edges(g.num_nodes)
    end
    puts(_add("The total weight of the minimal spanning tree is: ", _str(mst_weight)))
    return mst_weight
  end
  def main()
    g = new_graph(8)
    edges = [[0, 1, 10], [0, 2, 6], [0, 3, 5], [1, 3, 15], [2, 3, 4], [3, 4, 8], [4, 5, 10], [4, 6, 6], [4, 7, 5], [5, 7, 15], [6, 7, 4]]
        __tmp18 = edges
    __tmp18 = [] if __tmp18.nil?
    if __tmp18.respond_to?(:keys) && !__tmp18.is_a?(String)
      __tmp18 = __tmp18.keys
    end
    __tmp18.each do |e|
      g = add_edge(g, (__tmp19 = e; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0)), (__tmp20 = e; __tmp20.is_a?(Hash) ? __tmp20[1] : _idx(__tmp20, 1)), (__tmp21 = e; __tmp21.is_a?(Hash) ? __tmp21[2] : _idx(__tmp21, 2)))
    end
    boruvka(g)
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Edge = Struct.new(:u, :v, :w, keyword_init: true)
  Object.send(:remove_const, :Graph) if Object.const_defined?(:Graph)
  Graph = Struct.new(:num_nodes, :edges, :component, keyword_init: true)
  Object.send(:remove_const, :UnionResult) if Object.const_defined?(:UnionResult)
  UnionResult = Struct.new(:graph, :component_size, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
