# Generated by Mochi transpiler v0.10.72 on 2025-08-24 16:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-8 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      x.to_s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def deep_clone_graph(node)
    clones = {}
    dfs = ->(n) {
      return (_eq(n, Nil) ? Nil : (n.is_a?(N) ? (->(v) { (->(neigh) { (->() {
        result = Nil
        if _has(clones, v)
          result = (__tmp1 = clones; __tmp1.is_a?(Hash) ? __tmp1[v] : _idx(__tmp1, v))
        else
          clones[v] = N.new(value: v, neighbors: [])
          cloned_neighbors = []
                    __tmp2 = neigh
          __tmp2 = [] if __tmp2.nil?
          if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
            __tmp2 = __tmp2.keys
          end
          __tmp2.each do |nb|
            cloned_neighbors = _add(cloned_neighbors, [dfs.call(nb)])
          end
          node_copy = N.new(value: v, neighbors: cloned_neighbors)
          clones[v] = node_copy
          result = node_copy
        end
        return result
        nil
      }).call() }).call(n.neighbors) }).call(n.value) : nil))
    }
    return dfs.call(node)
  end
  def serialize(node)
    seen = {}
    lines = []
    dfs = ->(n) {
      (_eq(n, Nil) ? {} : (n.is_a?(N) ? (->(v) { (->(neigh) { (->() {
        if _has(seen, v)
          return
        end
        seen[v] = true
        vals = []
                __tmp3 = neigh
        __tmp3 = [] if __tmp3.nil?
        if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
          __tmp3 = __tmp3.keys
        end
        __tmp3.each do |nb|
          (_eq(nb, Nil) ? {} : (nb.is_a?(N) ? (->(val) { (->() {
            vals = _add(vals, [val])
            nil
          }).call() }).call(nb.value) : nil))
        end
        lines = _add(lines, [_add(_add(_str(v), ":"), ((x = vals); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))])
                __tmp4 = neigh
        __tmp4 = [] if __tmp4.nil?
        if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
          __tmp4 = __tmp4.keys
        end
        __tmp4.each do |nb|
          dfs.call(nb)
        end
        nil
      }).call() }).call(n.neighbors) }).call(n.value) : nil))
    }
    dfs.call(node)
    return lines.join("\n")
  end
  def main()
    g4 = N.new(value: 4, neighbors: [])
    g3 = N.new(value: 3, neighbors: [g4])
    g2 = N.new(value: 2, neighbors: [g3])
    g1 = N.new(value: 1, neighbors: [g2])
    clone = deep_clone_graph(g1)
    puts(serialize(clone))
  end
  Nil = Object.new()
  Object.send(:remove_const, :N) if Object.const_defined?(:N)
  Object.const_set(:N, Struct.new(:value, :neighbors, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
