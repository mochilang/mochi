# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def floyd_warshall(graph)
    v = _len(graph)
    dist = []
    i = 0
    while i < v
      row = []
      j = 0
      while j < v
        row = _append(row, (__tmp1 = (__tmp2 = graph; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)))
        j = _add(j, 1)
      end
      dist = _append(dist, row)
      i = _add(i, 1)
    end
    k = 0
    while k < v
      i = 0
      while i < v
        j = 0
        while j < v
          if (__tmp3 = (__tmp4 = dist; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)); __tmp3.is_a?(Hash) ? __tmp3[k] : _idx(__tmp3, k)) < $INF && (__tmp5 = (__tmp6 = dist; __tmp6.is_a?(Hash) ? __tmp6[k] : _idx(__tmp6, k)); __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)) < $INF && _add((__tmp7 = (__tmp8 = dist; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)); __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k)), (__tmp9 = (__tmp10 = dist; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)); __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))) < (__tmp11 = (__tmp12 = dist; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
            (__tmp13 = dist; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))[j] = _add((__tmp14 = (__tmp15 = dist; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)); __tmp14.is_a?(Hash) ? __tmp14[k] : _idx(__tmp14, k)), (__tmp16 = (__tmp17 = dist; __tmp17.is_a?(Hash) ? __tmp17[k] : _idx(__tmp17, k)); __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j)))
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      k = _add(k, 1)
    end
    return dist
  end
  def print_dist(dist)
    puts("\nThe shortest path matrix using Floyd Warshall algorithm\n")
    i = 0
    while i < _len(dist)
      j = 0
      line = ""
      while j < _len((__tmp18 = dist; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)))
        if (__tmp19 = (__tmp20 = dist; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)); __tmp19.is_a?(Hash) ? __tmp19[j] : _idx(__tmp19, j)) >= $INF / 2.0
          line = _add(line, "INF\t")
        else
          line = _add(_add(line, _str(((__tmp21 = (__tmp22 = dist; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)); __tmp21.is_a?(Hash) ? __tmp21[j] : _idx(__tmp21, j))).to_i)), "\t")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  $INF = 1e+09
  $graph = [[0.0, 5.0, $INF, 10.0], [$INF, 0.0, 3.0, $INF], [$INF, $INF, 0.0, 1.0], [$INF, $INF, $INF, 0.0]]
  $result = floyd_warshall($graph)
  print_dist($result)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
