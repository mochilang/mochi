# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def floyd_warshall(graph)
    v = graph.length
    dist = [].clone
    i = 0.clone
    while i < v
      row = [].clone
      j = 0.clone
      while j < v
        row = (row << (graph[i][j])).clone
        j = _add(j, 1).clone
      end
      dist = (dist << (row)).clone
      i = _add(i, 1).clone
    end
    k = 0.clone
    while k < v
      i = 0.clone
      while i < v
        j = 0.clone
        while j < v
          if dist[i][k] < $INF && dist[k][j] < $INF && _add(dist[i][k], dist[k][j]) < dist[i][j]
            dist[i][j] = _add(dist[i][k], dist[k][j])
          end
          j = _add(j, 1).clone
        end
        i = _add(i, 1).clone
      end
      k = _add(k, 1).clone
    end
    return dist
  end
  def print_dist(dist)
    puts("\nThe shortest path matrix using Floyd Warshall algorithm\n")
    i = 0.clone
    while i < dist.length
      j = 0.clone
      line = "".clone
      while j < dist[i].length
        if dist[i][j] >= $INF / 2.0
          line = _add(line, "INF\t").clone
        else
          line = _add(_add(line, _str((dist[i][j]).to_i)), "\t").clone
        end
        j = _add(j, 1).clone
      end
      puts(line)
      i = _add(i, 1).clone
    end
  end
  $INF = 1000000000.0
  $graph = [[0.0, 5.0, $INF, 10.0], [$INF, 0.0, 3.0, $INF], [$INF, $INF, 0.0, 1.0], [$INF, $INF, $INF, 0.0]]
  $result = floyd_warshall($graph)
  print_dist($result)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
