# Generated by Mochi transpiler v0.10.65 on 2025-08-14 10:00 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def dfs(g, s)
    visited = {}
    stack = []
    visited[s] = true
    stack = (stack + [s])
    puts(s)
    while _len(stack) > 0
      u = (__tmp1 = stack; __tmp1.is_a?(Hash) ? __tmp1[_len(stack) - 1] : _idx(__tmp1, _len(stack) - 1))
      found = false
            __tmp2 = (__tmp3 = g; __tmp3.is_a?(Hash) ? __tmp3[u] : _idx(__tmp3, u))
      __tmp2 = [] if __tmp2.nil?
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |v|
        if !(_has(visited, v))
          visited[v] = true
          stack = (stack + [v])
          puts(v)
          found = true
          break
        end
      end
      if !found
        stack = stack[0..._len(stack) - 1]
      end
    end
  end
  def bfs(g, s)
    visited = {}
    q = []
    visited[s] = true
    q = (q + [s])
    puts(s)
    while _len(q) > 0
      u = (__tmp4 = q; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
      q = q[1..._len(q)]
            __tmp5 = (__tmp6 = g; __tmp6.is_a?(Hash) ? __tmp6[u] : _idx(__tmp6, u))
      __tmp5 = [] if __tmp5.nil?
      if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
        __tmp5 = __tmp5.keys
      end
      __tmp5.each do |v|
        if !(_has(visited, v))
          visited[v] = true
          q = (q + [v])
          puts(v)
        end
      end
    end
  end
  def sort_ints(a)
    arr = a
    i = 0
    while i < _len(arr)
      j = 0
      while j < _len(arr) - i - 1
        if (__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j)) > (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[_add(j, 1)] : _idx(__tmp8, _add(j, 1)))
          tmp = (__tmp9 = arr; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j))
          arr[j] = (__tmp10 = arr; __tmp10.is_a?(Hash) ? __tmp10[_add(j, 1)] : _idx(__tmp10, _add(j, 1)))
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def dijkstra(g, s)
    dist = {}
    dist[s] = 0
    path = {}
    path[s] = 0
    known = []
    keys = [s]
    while _len(known) < _len(keys)
      mini = 100000
      u = -1
      i = 0
      while i < _len(keys)
        k = (__tmp11 = keys; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
        d = (__tmp12 = dist; __tmp12.is_a?(Hash) ? __tmp12[k] : _idx(__tmp12, k))
        if !(_has(known, k)) && d < mini
          mini = d
          u = k
        end
        i = _add(i, 1)
      end
      known = (known + [u])
            __tmp13 = (__tmp14 = g; __tmp14.is_a?(Hash) ? __tmp14[u] : _idx(__tmp14, u))
      __tmp13 = [] if __tmp13.nil?
      if __tmp13.respond_to?(:keys) && !__tmp13.is_a?(String)
        __tmp13 = __tmp13.keys
      end
      __tmp13.each do |e|
        v = (__tmp15 = e; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0))
        w = (__tmp16 = e; __tmp16.is_a?(Hash) ? __tmp16[1] : _idx(__tmp16, 1))
        if !(_has(keys, v))
          keys = (keys + [v])
        end
        alt = _add((__tmp17 = dist; __tmp17.is_a?(Hash) ? __tmp17[u] : _idx(__tmp17, u)), w)
        cur = (_has(dist, v) ? (__tmp18 = dist; __tmp18.is_a?(Hash) ? __tmp18[v] : _idx(__tmp18, v)) : 100000)
        if !(_has(known, v)) && alt < cur
          dist[v] = alt
          path[v] = u
        end
      end
    end
    ordered = sort_ints(keys)
    idx = 0
    while idx < _len(ordered)
      k = (__tmp19 = ordered; __tmp19.is_a?(Hash) ? __tmp19[idx] : _idx(__tmp19, idx))
      if !_eq(k, s)
        puts((__tmp20 = dist; __tmp20.is_a?(Hash) ? __tmp20[k] : _idx(__tmp20, k)))
      end
      idx = _add(idx, 1)
    end
  end
  def topo(g, n)
    ind = []
    i = 0
    while i <= n
      ind = (ind + [0])
      i = _add(i, 1)
    end
    node = 1
    while node <= n
            __tmp21 = (__tmp22 = g; __tmp22.is_a?(Hash) ? __tmp22[node] : _idx(__tmp22, node))
      __tmp21 = [] if __tmp21.nil?
      if __tmp21.respond_to?(:keys) && !__tmp21.is_a?(String)
        __tmp21 = __tmp21.keys
      end
      __tmp21.each do |v|
        ind[v] = _add((__tmp23 = ind; __tmp23.is_a?(Hash) ? __tmp23[v] : _idx(__tmp23, v)), 1)
      end
      node = _add(node, 1)
    end
    q = []
    j = 1
    while j <= n
      if _eq((__tmp24 = ind; __tmp24.is_a?(Hash) ? __tmp24[j] : _idx(__tmp24, j)), 0)
        q = (q + [j])
      end
      j = _add(j, 1)
    end
    while _len(q) > 0
      v = (__tmp25 = q; __tmp25.is_a?(Hash) ? __tmp25[0] : _idx(__tmp25, 0))
      q = q[1..._len(q)]
      puts(v)
            __tmp26 = (__tmp27 = g; __tmp27.is_a?(Hash) ? __tmp27[v] : _idx(__tmp27, v))
      __tmp26 = [] if __tmp26.nil?
      if __tmp26.respond_to?(:keys) && !__tmp26.is_a?(String)
        __tmp26 = __tmp26.keys
      end
      __tmp26.each do |w|
        ind[w] = (__tmp28 = ind; __tmp28.is_a?(Hash) ? __tmp28[w] : _idx(__tmp28, w)) - 1
        if _eq((__tmp29 = ind; __tmp29.is_a?(Hash) ? __tmp29[w] : _idx(__tmp29, w)), 0)
          q = (q + [w])
        end
      end
    end
  end
  def floyd(a)
    n = _len(a)
    dist = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = (row + [(__tmp30 = (__tmp31 = a; __tmp31.is_a?(Hash) ? __tmp31[i] : _idx(__tmp31, i)); __tmp30.is_a?(Hash) ? __tmp30[j] : _idx(__tmp30, j))])
        j = _add(j, 1)
      end
      dist = (dist + [row])
      i = _add(i, 1)
    end
    k = 0
    while k < n
      ii = 0
      while ii < n
        jj = 0
        while jj < n
          if (__tmp32 = (__tmp33 = dist; __tmp33.is_a?(Hash) ? __tmp33[ii] : _idx(__tmp33, ii)); __tmp32.is_a?(Hash) ? __tmp32[jj] : _idx(__tmp32, jj)) > _add((__tmp34 = (__tmp35 = dist; __tmp35.is_a?(Hash) ? __tmp35[ii] : _idx(__tmp35, ii)); __tmp34.is_a?(Hash) ? __tmp34[k] : _idx(__tmp34, k)), (__tmp36 = (__tmp37 = dist; __tmp37.is_a?(Hash) ? __tmp37[k] : _idx(__tmp37, k)); __tmp36.is_a?(Hash) ? __tmp36[jj] : _idx(__tmp36, jj)))
            (__tmp38 = dist; __tmp38.is_a?(Hash) ? __tmp38[ii] : _idx(__tmp38, ii))[jj] = _add((__tmp39 = (__tmp40 = dist; __tmp40.is_a?(Hash) ? __tmp40[ii] : _idx(__tmp40, ii)); __tmp39.is_a?(Hash) ? __tmp39[k] : _idx(__tmp39, k)), (__tmp41 = (__tmp42 = dist; __tmp42.is_a?(Hash) ? __tmp42[k] : _idx(__tmp42, k)); __tmp41.is_a?(Hash) ? __tmp41[jj] : _idx(__tmp41, jj)))
          end
          jj = _add(jj, 1)
        end
        ii = _add(ii, 1)
      end
      k = _add(k, 1)
    end
    puts(((x = dist); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  def prim(g, s, n)
    dist = {}
    dist[s] = 0
    known = []
    keys = [s]
    total = 0
    while _len(known) < n
      mini = 100000
      u = -1
      i = 0
      while i < _len(keys)
        k = (__tmp43 = keys; __tmp43.is_a?(Hash) ? __tmp43[i] : _idx(__tmp43, i))
        d = (__tmp44 = dist; __tmp44.is_a?(Hash) ? __tmp44[k] : _idx(__tmp44, k))
        if !(_has(known, k)) && d < mini
          mini = d
          u = k
        end
        i = _add(i, 1)
      end
      known = (known + [u])
      total = _add(total, mini)
            __tmp45 = (__tmp46 = g; __tmp46.is_a?(Hash) ? __tmp46[u] : _idx(__tmp46, u))
      __tmp45 = [] if __tmp45.nil?
      if __tmp45.respond_to?(:keys) && !__tmp45.is_a?(String)
        __tmp45 = __tmp45.keys
      end
      __tmp45.each do |e|
        v = (__tmp47 = e; __tmp47.is_a?(Hash) ? __tmp47[0] : _idx(__tmp47, 0))
        w = (__tmp48 = e; __tmp48.is_a?(Hash) ? __tmp48[1] : _idx(__tmp48, 1))
        if !(_has(keys, v))
          keys = (keys + [v])
        end
        cur = (_has(dist, v) ? (__tmp49 = dist; __tmp49.is_a?(Hash) ? __tmp49[v] : _idx(__tmp49, v)) : 100000)
        if !(_has(known, v)) && w < cur
          dist[v] = w
        end
      end
    end
    return total
  end
  def sort_edges(edges)
    es = edges
    i = 0
    while i < _len(es)
      j = 0
      while j < _len(es) - i - 1
        if (__tmp50 = (__tmp51 = es; __tmp51.is_a?(Hash) ? __tmp51[j] : _idx(__tmp51, j)); __tmp50.is_a?(Hash) ? __tmp50[2] : _idx(__tmp50, 2)) > (__tmp52 = (__tmp53 = es; __tmp53.is_a?(Hash) ? __tmp53[_add(j, 1)] : _idx(__tmp53, _add(j, 1))); __tmp52.is_a?(Hash) ? __tmp52[2] : _idx(__tmp52, 2))
          tmp = (__tmp54 = es; __tmp54.is_a?(Hash) ? __tmp54[j] : _idx(__tmp54, j))
          es[j] = (__tmp55 = es; __tmp55.is_a?(Hash) ? __tmp55[_add(j, 1)] : _idx(__tmp55, _add(j, 1)))
          es[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return es
  end
  def find_parent(parent, x)
    r = x
    while !_eq((__tmp56 = parent; __tmp56.is_a?(Hash) ? __tmp56[r] : _idx(__tmp56, r)), r)
      r = (__tmp57 = parent; __tmp57.is_a?(Hash) ? __tmp57[r] : _idx(__tmp57, r))
    end
    return r
  end
  def union_parent(parent, a, b)
    parent[a] = b
  end
  def kruskal(edges, n)
    es = sort_edges(edges)
    parent = []
    i = 0
    while i <= n
      parent = (parent + [i])
      i = _add(i, 1)
    end
    total = 0
    count = 0
    idx = 0
    while count < n - 1 && idx < _len(es)
      e = (__tmp58 = es; __tmp58.is_a?(Hash) ? __tmp58[idx] : _idx(__tmp58, idx))
      idx = _add(idx, 1)
      u = (__tmp59 = e; __tmp59.is_a?(Hash) ? __tmp59[0] : _idx(__tmp59, 0))
      v = (__tmp60 = e; __tmp60.is_a?(Hash) ? __tmp60[1] : _idx(__tmp60, 1))
      w = (__tmp61 = e; __tmp61.is_a?(Hash) ? __tmp61[2] : _idx(__tmp61, 2))
      ru = find_parent(parent, u)
      rv = find_parent(parent, v)
      if !_eq(ru, rv)
        union_parent(parent, ru, rv)
        total = _add(total, w)
        count = _add(count, 1)
      end
    end
    return total
  end
  def find_isolated_nodes(g, nodes)
    isolated = []
        __tmp62 = nodes
    __tmp62 = [] if __tmp62.nil?
    if __tmp62.respond_to?(:keys) && !__tmp62.is_a?(String)
      __tmp62 = __tmp62.keys
    end
    __tmp62.each do |node|
      if _eq(_len((__tmp63 = g; __tmp63.is_a?(Hash) ? __tmp63[node] : _idx(__tmp63, node))), 0)
        isolated = (isolated + [node])
      end
    end
    return isolated
  end
  $g_dfs = {1 => [2, 3], 2 => [4, 5], 3 => [], 4 => [], 5 => []}
  $g_bfs = {1 => [2, 3], 2 => [4, 5], 3 => [6, 7], 4 => [], 5 => [8], 6 => [], 7 => [], 8 => []}
  $g_weighted = {1 => [[2, 7], [3, 9], [6, 14]], 2 => [[1, 7], [3, 10], [4, 15]], 3 => [[1, 9], [2, 10], [4, 11], [6, 2]], 4 => [[2, 15], [3, 11], [5, 6]], 5 => [[4, 6], [6, 9]], 6 => [[1, 14], [3, 2], [5, 9]]}
  $g_topo = {1 => [2, 3], 2 => [4], 3 => [4], 4 => []}
  $matrix = [[0, 5, 9, 100000], [100000, 0, 2, 8], [100000, 100000, 0, 7], [4, 100000, 100000, 0]]
  $g_prim = {1 => [[2, 1], [3, 3]], 2 => [[1, 1], [3, 1], [4, 6]], 3 => [[1, 3], [2, 1], [4, 2]], 4 => [[2, 6], [3, 2]]}
  $edges_kruskal = [[1, 2, 1], [2, 3, 2], [1, 3, 2], [3, 4, 1]]
  $g_iso = {1 => [2, 3], 2 => [1, 3], 3 => [1, 2], 4 => []}
  dfs($g_dfs, 1)
  bfs($g_bfs, 1)
  dijkstra($g_weighted, 1)
  topo($g_topo, 4)
  floyd($matrix)
  puts(prim($g_prim, 1, 4))
  puts(kruskal($edges_kruskal, 4))
  $iso = find_isolated_nodes($g_iso, [1, 2, 3, 4])
  puts(((x = $iso); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
