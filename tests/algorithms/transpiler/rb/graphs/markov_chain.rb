# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2.147483648e+09
  end
  def get_nodes(trans)
    seen = {}
        __tmp1 = trans
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |t|
      seen[t.src] = true
      seen[t.dst] = true
    end
    nodes = []
        __tmp2 = seen.keys()
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |k|
      nodes = _append(nodes, k)
    end
    return nodes
  end
  def transition(current, trans)
    current_probability = 0.0
    random_value = random()
        __tmp3 = trans
    __tmp3 = [] if __tmp3.nil?
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |t|
      if _eq(t.src, current)
        current_probability = _add(current_probability, t.prob)
        if current_probability > random_value
          return t.dst
        end
      end
    end
    return ""
  end
  def get_transitions(start, trans, steps)
    visited = {}
        __tmp4 = get_nodes(trans)
    __tmp4 = [] if __tmp4.nil?
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |node|
      one = 1
      visited[node] = one
    end
    node = start
    i = 0
    while i < steps
      node = transition(node, trans)
      count = (__tmp5 = visited; __tmp5.is_a?(Hash) ? __tmp5[node] : _idx(__tmp5, node))
      count = _add(count, 1)
      visited[node] = count
      i = _add(i, 1)
    end
    return visited
  end
  def main()
    transitions = [Transition.new(src: "a", dst: "a", prob: 0.9), Transition.new(src: "a", dst: "b", prob: 0.075), Transition.new(src: "a", dst: "c", prob: 0.025), Transition.new(src: "b", dst: "a", prob: 0.15), Transition.new(src: "b", dst: "b", prob: 0.8), Transition.new(src: "b", dst: "c", prob: 0.05), Transition.new(src: "c", dst: "a", prob: 0.25), Transition.new(src: "c", dst: "b", prob: 0.25), Transition.new(src: "c", dst: "c", prob: 0.5)]
    result = get_transitions("a", transitions, 5000)
    puts(_add(_add(_add(_add(_str((__tmp6 = result; __tmp6.is_a?(Hash) ? __tmp6["a"] : _idx(__tmp6, "a"))), " "), _str((__tmp7 = result; __tmp7.is_a?(Hash) ? __tmp7["b"] : _idx(__tmp7, "b")))), " "), _str((__tmp8 = result; __tmp8.is_a?(Hash) ? __tmp8["c"] : _idx(__tmp8, "c")))))
  end
  Object.send(:remove_const, :Transition) if Object.const_defined?(:Transition)
  Transition = Struct.new(:src, :dst, :prob, keyword_init: true)
  $seed = 1
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
