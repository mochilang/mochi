# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2147483648.0
  end
  def get_nodes(trans)
    seen = {}.clone
        __tmp1 = trans
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |t|
      seen[t.src] = true
      seen[t.dst] = true
    end
    nodes = [].clone
        __tmp2 = seen.keys()
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |k|
      nodes = (nodes << (k)).clone
    end
    return nodes
  end
  def transition(current, trans)
    current_probability = 0.0.clone
    random_value = random()
        __tmp3 = trans
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |t|
      if t.src == current
        current_probability = _add(current_probability, t.prob).clone
        if current_probability > random_value
          return t.dst
        end
      end
    end
    return ""
  end
  def get_transitions(start, trans, steps)
    visited = {}.clone
        __tmp4 = get_nodes(trans)
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |node|
      one = 1.clone
      visited[node] = one
    end
    node = start.clone
    i = 0.clone
    while i < steps
      node = transition(node, trans).clone
      count = visited[node].clone
      count = _add(count, 1).clone
      visited[node] = count
      i = _add(i, 1).clone
    end
    return visited
  end
  def main()
    transitions = [Transition.new(src: "a", dst: "a", prob: 0.9), Transition.new(src: "a", dst: "b", prob: 0.075), Transition.new(src: "a", dst: "c", prob: 0.025), Transition.new(src: "b", dst: "a", prob: 0.15), Transition.new(src: "b", dst: "b", prob: 0.8), Transition.new(src: "b", dst: "c", prob: 0.05), Transition.new(src: "c", dst: "a", prob: 0.25), Transition.new(src: "c", dst: "b", prob: 0.25), Transition.new(src: "c", dst: "c", prob: 0.5)]
    result = get_transitions("a", transitions, 5000)
    puts(_add(_add(_add(_add(_str(result["a"]), " "), _str(result["b"])), " "), _str(result["c"])))
  end
  Transition = Struct.new(:src, :dst, :prob, keyword_init: true)
  $seed = 1.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
