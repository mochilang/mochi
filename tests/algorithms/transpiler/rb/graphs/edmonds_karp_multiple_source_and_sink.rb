# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def push_relabel_max_flow(graph, sources, sinks)
    if _eq(_len(sources), 0) || _eq(_len(sinks), 0)
      return 0
    end
    g = graph
    source_index = (__tmp1 = sources; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
    sink_index = (__tmp2 = sinks; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))
    if _len(sources) > 1 || _len(sinks) > 1
      max_input_flow = 0
      i = 0
      while i < _len(sources)
        j = 0
        while j < _len((__tmp3 = g; __tmp3.is_a?(Hash) ? __tmp3[(__tmp4 = sources; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))] : _idx(__tmp3, (__tmp5 = sources; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))))
          max_input_flow = _add(max_input_flow, (__tmp6 = (__tmp7 = g; __tmp7.is_a?(Hash) ? __tmp7[(__tmp8 = sources; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))] : _idx(__tmp7, (__tmp9 = sources; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)))); __tmp6.is_a?(Hash) ? __tmp6[j] : _idx(__tmp6, j)))
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      size = _add(_len(g), 1)
      new_graph = []
      zero_row = []
      j = 0
      while j < size
        zero_row = _append(zero_row, 0)
        j = _add(j, 1)
      end
      new_graph = _append(new_graph, zero_row)
      r = 0
      while r < _len(g)
        row = [0]
        c = 0
        while c < _len((__tmp10 = g; __tmp10.is_a?(Hash) ? __tmp10[r] : _idx(__tmp10, r)))
          row = _append(row, (__tmp11 = (__tmp12 = g; __tmp12.is_a?(Hash) ? __tmp12[r] : _idx(__tmp12, r)); __tmp11.is_a?(Hash) ? __tmp11[c] : _idx(__tmp11, c)))
          c = _add(c, 1)
        end
        new_graph = _append(new_graph, row)
        r = _add(r, 1)
      end
      g = new_graph
      i = 0
      while i < _len(sources)
        (__tmp13 = g; __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0))[_add((__tmp14 = sources; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)), 1)] = max_input_flow
        i = _add(i, 1)
      end
      source_index = 0
      size = _add(_len(g), 1)
      new_graph = []
      r = 0
      while r < _len(g)
        row2 = (__tmp15 = g; __tmp15.is_a?(Hash) ? __tmp15[r] : _idx(__tmp15, r))
        row2 = _append(row2, 0)
        new_graph = _append(new_graph, row2)
        r = _add(r, 1)
      end
      last_row = []
      j = 0
      while j < size
        last_row = _append(last_row, 0)
        j = _add(j, 1)
      end
      new_graph = _append(new_graph, last_row)
      g = new_graph
      i = 0
      while i < _len(sinks)
        (__tmp16 = g; __tmp16.is_a?(Hash) ? __tmp16[_add((__tmp17 = sinks; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)), 1)] : _idx(__tmp16, _add((__tmp18 = sinks; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)), 1)))[size - 1] = max_input_flow
        i = _add(i, 1)
      end
      sink_index = size - 1
    end
    n = _len(g)
    preflow = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = _append(row, 0)
        j = _add(j, 1)
      end
      preflow = _append(preflow, row)
      i = _add(i, 1)
    end
    heights = []
    i = 0
    while i < n
      heights = _append(heights, 0)
      i = _add(i, 1)
    end
    excesses = []
    i = 0
    while i < n
      excesses = _append(excesses, 0)
      i = _add(i, 1)
    end
    heights[source_index] = n
    i = 0
    while i < n
      bandwidth = (__tmp19 = (__tmp20 = g; __tmp20.is_a?(Hash) ? __tmp20[source_index] : _idx(__tmp20, source_index)); __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))
      (__tmp21 = preflow; __tmp21.is_a?(Hash) ? __tmp21[source_index] : _idx(__tmp21, source_index))[i] = _add((__tmp22 = (__tmp23 = preflow; __tmp23.is_a?(Hash) ? __tmp23[source_index] : _idx(__tmp23, source_index)); __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i)), bandwidth)
      (__tmp24 = preflow; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i))[source_index] = (__tmp25 = (__tmp26 = preflow; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i)); __tmp25.is_a?(Hash) ? __tmp25[source_index] : _idx(__tmp25, source_index)) - bandwidth
      excesses[i] = _add((__tmp27 = excesses; __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i)), bandwidth)
      i = _add(i, 1)
    end
    vertices_list = []
    i = 0
    while i < n
      if !_eq(i, source_index) && !_eq(i, sink_index)
        vertices_list = _append(vertices_list, i)
      end
      i = _add(i, 1)
    end
    idx = 0
    while idx < _len(vertices_list)
      v = (__tmp28 = vertices_list; __tmp28.is_a?(Hash) ? __tmp28[idx] : _idx(__tmp28, idx))
      prev_height = (__tmp29 = heights; __tmp29.is_a?(Hash) ? __tmp29[v] : _idx(__tmp29, v))
      while (__tmp30 = excesses; __tmp30.is_a?(Hash) ? __tmp30[v] : _idx(__tmp30, v)) > 0
        nb = 0
        while nb < n
          if (__tmp31 = (__tmp32 = g; __tmp32.is_a?(Hash) ? __tmp32[v] : _idx(__tmp32, v)); __tmp31.is_a?(Hash) ? __tmp31[nb] : _idx(__tmp31, nb)) - (__tmp33 = (__tmp34 = preflow; __tmp34.is_a?(Hash) ? __tmp34[v] : _idx(__tmp34, v)); __tmp33.is_a?(Hash) ? __tmp33[nb] : _idx(__tmp33, nb)) > 0 && (__tmp35 = heights; __tmp35.is_a?(Hash) ? __tmp35[v] : _idx(__tmp35, v)) > (__tmp36 = heights; __tmp36.is_a?(Hash) ? __tmp36[nb] : _idx(__tmp36, nb))
            delta = (__tmp37 = excesses; __tmp37.is_a?(Hash) ? __tmp37[v] : _idx(__tmp37, v))
            capacity = (__tmp38 = (__tmp39 = g; __tmp39.is_a?(Hash) ? __tmp39[v] : _idx(__tmp39, v)); __tmp38.is_a?(Hash) ? __tmp38[nb] : _idx(__tmp38, nb)) - (__tmp40 = (__tmp41 = preflow; __tmp41.is_a?(Hash) ? __tmp41[v] : _idx(__tmp41, v)); __tmp40.is_a?(Hash) ? __tmp40[nb] : _idx(__tmp40, nb))
            if delta > capacity
              delta = capacity
            end
            (__tmp42 = preflow; __tmp42.is_a?(Hash) ? __tmp42[v] : _idx(__tmp42, v))[nb] = _add((__tmp43 = (__tmp44 = preflow; __tmp44.is_a?(Hash) ? __tmp44[v] : _idx(__tmp44, v)); __tmp43.is_a?(Hash) ? __tmp43[nb] : _idx(__tmp43, nb)), delta)
            (__tmp45 = preflow; __tmp45.is_a?(Hash) ? __tmp45[nb] : _idx(__tmp45, nb))[v] = (__tmp46 = (__tmp47 = preflow; __tmp47.is_a?(Hash) ? __tmp47[nb] : _idx(__tmp47, nb)); __tmp46.is_a?(Hash) ? __tmp46[v] : _idx(__tmp46, v)) - delta
            excesses[v] = (__tmp48 = excesses; __tmp48.is_a?(Hash) ? __tmp48[v] : _idx(__tmp48, v)) - delta
            excesses[nb] = _add((__tmp49 = excesses; __tmp49.is_a?(Hash) ? __tmp49[nb] : _idx(__tmp49, nb)), delta)
          end
          nb = _add(nb, 1)
        end
        min_height = -1
        nb = 0
        while nb < n
          if (__tmp50 = (__tmp51 = g; __tmp51.is_a?(Hash) ? __tmp51[v] : _idx(__tmp51, v)); __tmp50.is_a?(Hash) ? __tmp50[nb] : _idx(__tmp50, nb)) - (__tmp52 = (__tmp53 = preflow; __tmp53.is_a?(Hash) ? __tmp53[v] : _idx(__tmp53, v)); __tmp52.is_a?(Hash) ? __tmp52[nb] : _idx(__tmp52, nb)) > 0
            if _eq(min_height, (-1)) || (__tmp54 = heights; __tmp54.is_a?(Hash) ? __tmp54[nb] : _idx(__tmp54, nb)) < min_height
              min_height = (__tmp55 = heights; __tmp55.is_a?(Hash) ? __tmp55[nb] : _idx(__tmp55, nb))
            end
          end
          nb = _add(nb, 1)
        end
        if !_eq(min_height, (-1))
          heights[v] = _add(min_height, 1)
        else
          break
        end
      end
      if (__tmp56 = heights; __tmp56.is_a?(Hash) ? __tmp56[v] : _idx(__tmp56, v)) > prev_height
        vertex = (__tmp57 = vertices_list; __tmp57.is_a?(Hash) ? __tmp57[idx] : _idx(__tmp57, idx))
        j = idx
        while j > 0
          vertices_list[j] = (__tmp58 = vertices_list; __tmp58.is_a?(Hash) ? __tmp58[j - 1] : _idx(__tmp58, j - 1))
          j = j - 1
        end
        vertices_list[0] = vertex
        idx = 0
      else
        idx = _add(idx, 1)
      end
    end
    flow = 0
    i = 0
    while i < n
      flow = _add(flow, (__tmp59 = (__tmp60 = preflow; __tmp60.is_a?(Hash) ? __tmp60[source_index] : _idx(__tmp60, source_index)); __tmp59.is_a?(Hash) ? __tmp59[i] : _idx(__tmp59, i)))
      i = _add(i, 1)
    end
    if flow < 0
      flow = -flow
    end
    return flow
  end
  $graph = [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]]
  $sources = [0]
  $sinks = [3]
  $result = push_relabel_max_flow($graph, $sources, $sinks)
  puts(_add("maximum flow is ", _str($result)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
