# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def longest_distance(graph)
    n = graph.length
    indegree = [].clone
    i = 0.clone
    while i < n
      indegree = (indegree << (0)).clone
      i = _add(i, 1).clone
    end
    long_dist = [].clone
    j = 0.clone
    while j < n
      long_dist = (long_dist << (1)).clone
      j = _add(j, 1).clone
    end
    u = 0.clone
    while u < n
            __tmp1 = graph[u]
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |v|
        indegree[v] = _add(indegree[v], 1)
      end
      u = _add(u, 1).clone
    end
    queue = [].clone
    head = 0.clone
    k = 0.clone
    while k < n
      if indegree[k] == 0
        queue = (queue << (k)).clone
      end
      k = _add(k, 1).clone
    end
    while head < queue.length
      vertex = queue[head]
      head = _add(head, 1).clone
            __tmp2 = graph[vertex]
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |x|
        indegree[x] = indegree[x] - 1
        new_dist = _add(long_dist[vertex], 1)
        if new_dist > long_dist[x]
          long_dist[x] = new_dist
        end
        if indegree[x] == 0
          queue = (queue << (x)).clone
        end
      end
    end
    max_len = long_dist[0].clone
    m = 1.clone
    while m < n
      if long_dist[m] > max_len
        max_len = long_dist[m].clone
      end
      m = _add(m, 1).clone
    end
    return max_len
  end
  $graph = [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []]
  puts(longest_distance($graph))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
