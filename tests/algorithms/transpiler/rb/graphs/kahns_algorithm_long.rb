# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def longest_distance(graph)
    n = _len(graph)
    indegree = []
    i = 0
    while i < n
      indegree = _append(indegree, 0)
      i = _add(i, 1)
    end
    long_dist = []
    j = 0
    while j < n
      long_dist = _append(long_dist, 1)
      j = _add(j, 1)
    end
    u = 0
    while u < n
            __tmp1 = (__tmp2 = graph; __tmp2.is_a?(Hash) ? __tmp2[u] : _idx(__tmp2, u))
      __tmp1 = [] if __tmp1.nil?
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |v|
        indegree[v] = _add((__tmp3 = indegree; __tmp3.is_a?(Hash) ? __tmp3[v] : _idx(__tmp3, v)), 1)
      end
      u = _add(u, 1)
    end
    queue = []
    head = 0
    k = 0
    while k < n
      if _eq((__tmp4 = indegree; __tmp4.is_a?(Hash) ? __tmp4[k] : _idx(__tmp4, k)), 0)
        queue = _append(queue, k)
      end
      k = _add(k, 1)
    end
    while head < _len(queue)
      vertex = (__tmp5 = queue; __tmp5.is_a?(Hash) ? __tmp5[head] : _idx(__tmp5, head))
      head = _add(head, 1)
            __tmp6 = (__tmp7 = graph; __tmp7.is_a?(Hash) ? __tmp7[vertex] : _idx(__tmp7, vertex))
      __tmp6 = [] if __tmp6.nil?
      if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
        __tmp6 = __tmp6.keys
      end
      __tmp6.each do |x|
        indegree[x] = (__tmp8 = indegree; __tmp8.is_a?(Hash) ? __tmp8[x] : _idx(__tmp8, x)) - 1
        new_dist = _add((__tmp9 = long_dist; __tmp9.is_a?(Hash) ? __tmp9[vertex] : _idx(__tmp9, vertex)), 1)
        if new_dist > (__tmp10 = long_dist; __tmp10.is_a?(Hash) ? __tmp10[x] : _idx(__tmp10, x))
          long_dist[x] = new_dist
        end
        if _eq((__tmp11 = indegree; __tmp11.is_a?(Hash) ? __tmp11[x] : _idx(__tmp11, x)), 0)
          queue = _append(queue, x)
        end
      end
    end
    max_len = (__tmp12 = long_dist; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0))
    m = 1
    while m < n
      if (__tmp13 = long_dist; __tmp13.is_a?(Hash) ? __tmp13[m] : _idx(__tmp13, m)) > max_len
        max_len = (__tmp14 = long_dist; __tmp14.is_a?(Hash) ? __tmp14[m] : _idx(__tmp14, m))
      end
      m = _add(m, 1)
    end
    return max_len
  end
  $graph = [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []]
  puts(longest_distance($graph))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
