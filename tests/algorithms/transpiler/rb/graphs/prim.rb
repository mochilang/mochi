# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def connect(graph, a, b, w)
    u = a - 1
    v = b - 1
    g = graph.clone
    g[u] = (g[u] << ([v, w]))
    g[v] = (g[v] << ([u, w]))
    return g
  end
  def in_list(arr, x)
    i = 0.clone
    while i < arr.length
      if arr[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def prim(graph, s, n)
    dist = {}.clone
    parent = {}.clone
    dist[s] = 0
    parent[s] = -1
    known = [].clone
    keys = [s].clone
    while known.length < n
      mini = $INF.clone
      u = -1.clone
      i = 0.clone
      while i < keys.length
        k = keys[i]
        d = dist[k]
        if !(in_list(known, k)) && d < mini
          mini = d.clone
          u = k.clone
        end
        i = _add(i, 1).clone
      end
      known = (known << (u)).clone
            __tmp1 = graph[u]
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |e|
        v = e[0]
        w = e[1]
        if !(in_list(keys, v))
          keys = (keys << (v)).clone
        end
        cur = (dist.key?(v) ? dist[v] : $INF)
        if !(in_list(known, v)) && w < cur
          dist[v] = w
          parent[v] = u
        end
      end
    end
    edges = [].clone
    j = 0.clone
    while j < keys.length
      v = keys[j]
      if v != s
        edges = (edges << ([_add(v, 1), _add(parent[v], 1)])).clone
      end
      j = _add(j, 1).clone
    end
    return edges
  end
  def sort_heap(h, dist)
    a = h.clone
    i = 0.clone
    while i < a.length
      j = 0.clone
      while j < a.length - i - 1
        dj = (dist.key?(a[j]) ? dist[a[j]] : $INF)
        dj1 = (dist.key?(a[_add(j, 1)]) ? dist[a[_add(j, 1)]] : $INF)
        if dj > dj1
          t = a[j]
          a[j] = a[_add(j, 1)]
          a[_add(j, 1)] = t
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return a
  end
  def prim_heap(graph, s, n)
    dist = {}.clone
    parent = {}.clone
    dist[s] = 0
    parent[s] = -1
    h = [].clone
    i = 0.clone
    while i < n
      h = (h << (i)).clone
      i = _add(i, 1).clone
    end
    h = sort_heap(h, dist).clone
    known = [].clone
    while h.length > 0
      u = h[0]
      h = h[1...h.length].clone
      known = (known << (u)).clone
            __tmp2 = graph[u]
      if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
        __tmp2 = __tmp2.keys
      end
      __tmp2.each do |e|
        v = e[0]
        w = e[1]
        cur = (dist.key?(v) ? dist[v] : $INF)
        if !(in_list(known, v)) && w < cur
          dist[v] = w
          parent[v] = u
        end
      end
      h = sort_heap(h, dist).clone
    end
    edges = [].clone
    j = 0.clone
    while j < n
      if j != s
        edges = (edges << ([_add(j, 1), _add(parent[j], 1)])).clone
      end
      j = _add(j, 1).clone
    end
    return edges
  end
  def print_edges(edges)
    i = 0.clone
    while i < edges.length
      e = edges[i]
      puts(_add(_add(_add(_add("(", _str(e[0])), ", "), _str(e[1])), ")"))
      i = _add(i, 1).clone
    end
  end
  def test_vector()
    x = 5
    _G = {}.clone
    i = 0.clone
    while i < x
      _G[i] = []
      i = _add(i, 1).clone
    end
    _G = connect(_G, 1, 2, 15).clone
    _G = connect(_G, 1, 3, 12).clone
    _G = connect(_G, 2, 4, 13).clone
    _G = connect(_G, 2, 5, 5).clone
    _G = connect(_G, 3, 2, 6).clone
    _G = connect(_G, 3, 4, 6).clone
    mst = prim(_G, 0, x)
    print_edges(mst)
    mst_heap = prim_heap(_G, 0, x)
    print_edges(mst_heap)
  end
  $INF = 1000000000
  test_vector()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
