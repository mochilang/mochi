# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def connect(graph, a, b, w)
    u = a - 1
    v = b - 1
    g = graph
    g[u] = _append((__tmp1 = g; __tmp1.is_a?(Hash) ? __tmp1[u] : _idx(__tmp1, u)), [v, w])
    g[v] = _append((__tmp2 = g; __tmp2.is_a?(Hash) ? __tmp2[v] : _idx(__tmp2, v)), [u, w])
    return g
  end
  def in_list(arr, x)
    i = 0
    while i < _len(arr)
      if _eq((__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def prim(graph, s, n)
    dist = {}
    parent = {}
    dist[s] = 0
    parent[s] = -1
    known = []
    keys = [s]
    while _len(known) < n
      mini = $INF
      u = -1
      i = 0
      while i < _len(keys)
        k = (__tmp4 = keys; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
        d = (__tmp5 = dist; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k))
        if !(in_list(known, k)) && d < mini
          mini = d
          u = k
        end
        i = _add(i, 1)
      end
      known = _append(known, u)
            __tmp6 = (__tmp7 = graph; __tmp7.is_a?(Hash) ? __tmp7[u] : _idx(__tmp7, u))
      __tmp6 = [] if __tmp6.nil?
      if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
        __tmp6 = __tmp6.keys
      end
      __tmp6.each do |e|
        v = (__tmp8 = e; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0))
        w = (__tmp9 = e; __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1))
        if !(in_list(keys, v))
          keys = _append(keys, v)
        end
        cur = (_has(dist, v) ? (__tmp10 = dist; __tmp10.is_a?(Hash) ? __tmp10[v] : _idx(__tmp10, v)) : $INF)
        if !(in_list(known, v)) && w < cur
          dist[v] = w
          parent[v] = u
        end
      end
    end
    edges = []
    j = 0
    while j < _len(keys)
      v = (__tmp11 = keys; __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
      if !_eq(v, s)
        edges = _append(edges, [_add(v, 1), _add((__tmp12 = parent; __tmp12.is_a?(Hash) ? __tmp12[v] : _idx(__tmp12, v)), 1)])
      end
      j = _add(j, 1)
    end
    return edges
  end
  def sort_heap(h, dist)
    a = h
    i = 0
    while i < _len(a)
      j = 0
      while j < _len(a) - i - 1
        dj = (_has(dist, (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[j] : _idx(__tmp13, j))) ? (__tmp14 = dist; __tmp14.is_a?(Hash) ? __tmp14[(__tmp15 = a; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j))] : _idx(__tmp14, (__tmp16 = a; __tmp16.is_a?(Hash) ? __tmp16[j] : _idx(__tmp16, j)))) : $INF)
        dj1 = (_has(dist, (__tmp17 = a; __tmp17.is_a?(Hash) ? __tmp17[_add(j, 1)] : _idx(__tmp17, _add(j, 1)))) ? (__tmp18 = dist; __tmp18.is_a?(Hash) ? __tmp18[(__tmp19 = a; __tmp19.is_a?(Hash) ? __tmp19[_add(j, 1)] : _idx(__tmp19, _add(j, 1)))] : _idx(__tmp18, (__tmp20 = a; __tmp20.is_a?(Hash) ? __tmp20[_add(j, 1)] : _idx(__tmp20, _add(j, 1))))) : $INF)
        if dj > dj1
          t = (__tmp21 = a; __tmp21.is_a?(Hash) ? __tmp21[j] : _idx(__tmp21, j))
          a[j] = (__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[_add(j, 1)] : _idx(__tmp22, _add(j, 1)))
          a[_add(j, 1)] = t
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return a
  end
  def prim_heap(graph, s, n)
    dist = {}
    parent = {}
    dist[s] = 0
    parent[s] = -1
    h = []
    i = 0
    while i < n
      h = _append(h, i)
      i = _add(i, 1)
    end
    h = sort_heap(h, dist)
    known = []
    while _len(h) > 0
      u = (__tmp23 = h; __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0))
      h = h[1..._len(h)]
      known = _append(known, u)
            __tmp24 = (__tmp25 = graph; __tmp25.is_a?(Hash) ? __tmp25[u] : _idx(__tmp25, u))
      __tmp24 = [] if __tmp24.nil?
      if __tmp24.respond_to?(:keys) && !__tmp24.is_a?(String)
        __tmp24 = __tmp24.keys
      end
      __tmp24.each do |e|
        v = (__tmp26 = e; __tmp26.is_a?(Hash) ? __tmp26[0] : _idx(__tmp26, 0))
        w = (__tmp27 = e; __tmp27.is_a?(Hash) ? __tmp27[1] : _idx(__tmp27, 1))
        cur = (_has(dist, v) ? (__tmp28 = dist; __tmp28.is_a?(Hash) ? __tmp28[v] : _idx(__tmp28, v)) : $INF)
        if !(in_list(known, v)) && w < cur
          dist[v] = w
          parent[v] = u
        end
      end
      h = sort_heap(h, dist)
    end
    edges = []
    j = 0
    while j < n
      if !_eq(j, s)
        edges = _append(edges, [_add(j, 1), _add((__tmp29 = parent; __tmp29.is_a?(Hash) ? __tmp29[j] : _idx(__tmp29, j)), 1)])
      end
      j = _add(j, 1)
    end
    return edges
  end
  def print_edges(edges)
    i = 0
    while i < _len(edges)
      e = (__tmp30 = edges; __tmp30.is_a?(Hash) ? __tmp30[i] : _idx(__tmp30, i))
      puts(_add(_add(_add(_add("(", _str((__tmp31 = e; __tmp31.is_a?(Hash) ? __tmp31[0] : _idx(__tmp31, 0)))), ", "), _str((__tmp32 = e; __tmp32.is_a?(Hash) ? __tmp32[1] : _idx(__tmp32, 1)))), ")"))
      i = _add(i, 1)
    end
  end
  def test_vector()
    x = 5
    _G = {}
    i = 0
    while i < x
      _G[i] = []
      i = _add(i, 1)
    end
    _G = connect(_G, 1, 2, 15)
    _G = connect(_G, 1, 3, 12)
    _G = connect(_G, 2, 4, 13)
    _G = connect(_G, 2, 5, 5)
    _G = connect(_G, 3, 2, 6)
    _G = connect(_G, 3, 4, 6)
    mst = prim(_G, 0, x)
    print_edges(mst)
    mst_heap = prim_heap(_G, 0, x)
    print_edges(mst_heap)
  end
  $INF = 1000000000
  test_vector()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
