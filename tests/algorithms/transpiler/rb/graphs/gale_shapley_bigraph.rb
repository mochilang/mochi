# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def index_of(xs, x)
    i = 0
    while i < _len(xs)
      if _eq((__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), x)
        return i
      end
      i = _add(i, 1)
    end
    return -1
  end
  def remove_item(xs, x)
    res = []
    removed = false
    i = 0
    while i < _len(xs)
      if !removed && _eq((__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), x)
        removed = true
      else
        res = _append(res, (__tmp3 = xs; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def stable_matching(donor_pref, recipient_pref)
    if !_eq(_len(donor_pref), _len(recipient_pref))
      panic("unequal groups")
    end
    n = _len(donor_pref)
    unmatched = []
    i = 0
    while i < n
      unmatched = _append(unmatched, i)
      i = _add(i, 1)
    end
    donor_record = []
    i = 0
    while i < n
      donor_record = _append(donor_record, -1)
      i = _add(i, 1)
    end
    rec_record = []
    i = 0
    while i < n
      rec_record = _append(rec_record, -1)
      i = _add(i, 1)
    end
    num_donations = []
    i = 0
    while i < n
      num_donations = _append(num_donations, 0)
      i = _add(i, 1)
    end
    while _len(unmatched) > 0
      donor = (__tmp4 = unmatched; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
      donor_preference = (__tmp5 = donor_pref; __tmp5.is_a?(Hash) ? __tmp5[donor] : _idx(__tmp5, donor))
      recipient = (__tmp6 = donor_preference; __tmp6.is_a?(Hash) ? __tmp6[(__tmp7 = num_donations; __tmp7.is_a?(Hash) ? __tmp7[donor] : _idx(__tmp7, donor))] : _idx(__tmp6, (__tmp8 = num_donations; __tmp8.is_a?(Hash) ? __tmp8[donor] : _idx(__tmp8, donor))))
      num_donations[donor] = _add((__tmp9 = num_donations; __tmp9.is_a?(Hash) ? __tmp9[donor] : _idx(__tmp9, donor)), 1)
      rec_preference = (__tmp10 = recipient_pref; __tmp10.is_a?(Hash) ? __tmp10[recipient] : _idx(__tmp10, recipient))
      prev_donor = (__tmp11 = rec_record; __tmp11.is_a?(Hash) ? __tmp11[recipient] : _idx(__tmp11, recipient))
      if !_eq(prev_donor, 0 - 1)
        prev_index = index_of(rec_preference, prev_donor)
        new_index = index_of(rec_preference, donor)
        if prev_index > new_index
          rec_record[recipient] = donor
          donor_record[donor] = recipient
          unmatched = _append(unmatched, prev_donor)
          unmatched = remove_item(unmatched, donor)
        end
      else
        rec_record[recipient] = donor
        donor_record[donor] = recipient
        unmatched = remove_item(unmatched, donor)
      end
    end
    return donor_record
  end
  $donor_pref = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]]
  $recipient_pref = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]]
  puts(((x = stable_matching($donor_pref, $recipient_pref)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
