# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def index_of(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return i
      end
      i = _add(i, 1).clone
    end
    return -1
  end
  def remove_item(xs, x)
    res = [].clone
    removed = false.clone
    i = 0.clone
    while i < xs.length
      if !removed && xs[i] == x
        removed = true.clone
      else
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def stable_matching(donor_pref, recipient_pref)
    if donor_pref.length != recipient_pref.length
      panic("unequal groups")
    end
    n = donor_pref.length
    unmatched = [].clone
    i = 0.clone
    while i < n
      unmatched = (unmatched << (i)).clone
      i = _add(i, 1).clone
    end
    donor_record = [].clone
    i = 0.clone
    while i < n
      donor_record = (donor_record << (-1)).clone
      i = _add(i, 1).clone
    end
    rec_record = [].clone
    i = 0.clone
    while i < n
      rec_record = (rec_record << (-1)).clone
      i = _add(i, 1).clone
    end
    num_donations = [].clone
    i = 0.clone
    while i < n
      num_donations = (num_donations << (0)).clone
      i = _add(i, 1).clone
    end
    while unmatched.length > 0
      donor = unmatched[0]
      donor_preference = donor_pref[donor]
      recipient = donor_preference[num_donations[donor]]
      num_donations[donor] = _add(num_donations[donor], 1)
      rec_preference = recipient_pref[recipient]
      prev_donor = rec_record[recipient]
      if prev_donor != 0 - 1
        prev_index = index_of(rec_preference, prev_donor)
        new_index = index_of(rec_preference, donor)
        if prev_index > new_index
          rec_record[recipient] = donor
          donor_record[donor] = recipient
          unmatched = (unmatched << (prev_donor)).clone
          unmatched = remove_item(unmatched, donor).clone
        end
      else
        rec_record[recipient] = donor
        donor_record[donor] = recipient
        unmatched = remove_item(unmatched, donor).clone
      end
    end
    return donor_record
  end
  $donor_pref = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]]
  $recipient_pref = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]]
  puts(((x = stable_matching($donor_pref, $recipient_pref)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
