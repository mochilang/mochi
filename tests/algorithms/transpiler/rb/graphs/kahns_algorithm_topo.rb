# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def topological_sort(graph)
    indegree = [].clone
    i = 0.clone
    while i < graph.length
      indegree = (indegree << (0)).clone
      i = _add(i, 1).clone
    end
        __tmp1 = graph.values
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |edges|
      j = 0.clone
      while j < edges.length
        v = edges[j]
        indegree[v] = _add(indegree[v], 1)
        j = _add(j, 1).clone
      end
    end
    queue = [].clone
    i = 0.clone
    while i < indegree.length
      if indegree[i] == 0
        queue = (queue << (i)).clone
      end
      i = _add(i, 1).clone
    end
    order = [].clone
    head = 0.clone
    processed = 0.clone
    while head < queue.length
      v = queue[head]
      head = _add(head, 1).clone
      processed = _add(processed, 1).clone
      order = (order << (v)).clone
      neighbors = graph[v]
      k = 0.clone
      while k < neighbors.length
        nb = neighbors[k]
        indegree[nb] = indegree[nb] - 1
        if indegree[nb] == 0
          queue = (queue << (nb)).clone
        end
        k = _add(k, 1).clone
      end
    end
    if processed != graph.length
      return nil
    end
    return order
  end
  def main()
    graph = {0 => [1, 2], 1 => [3], 2 => [3], 3 => [4, 5], 4 => [], 5 => []}
    puts(((x = topological_sort(graph)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    cyclic = {0 => [1], 1 => [2], 2 => [0]}
    puts(((x = topological_sort(cyclic)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
