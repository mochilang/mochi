# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def topological_sort(graph)
    indegree = []
    i = 0
    while i < _len(graph)
      indegree = _append(indegree, 0)
      i = _add(i, 1)
    end
        __tmp1 = graph.values
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |edges|
      j = 0
      while j < _len(edges)
        v = (__tmp2 = edges; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
        indegree[v] = _add((__tmp3 = indegree; __tmp3.is_a?(Hash) ? __tmp3[v] : _idx(__tmp3, v)), 1)
        j = _add(j, 1)
      end
    end
    queue = []
    i = 0
    while i < _len(indegree)
      if _eq((__tmp4 = indegree; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), 0)
        queue = _append(queue, i)
      end
      i = _add(i, 1)
    end
    order = []
    head = 0
    processed = 0
    while head < _len(queue)
      v = (__tmp5 = queue; __tmp5.is_a?(Hash) ? __tmp5[head] : _idx(__tmp5, head))
      head = _add(head, 1)
      processed = _add(processed, 1)
      order = _append(order, v)
      neighbors = (__tmp6 = graph; __tmp6.is_a?(Hash) ? __tmp6[v] : _idx(__tmp6, v))
      k = 0
      while k < _len(neighbors)
        nb = (__tmp7 = neighbors; __tmp7.is_a?(Hash) ? __tmp7[k] : _idx(__tmp7, k))
        indegree[nb] = (__tmp8 = indegree; __tmp8.is_a?(Hash) ? __tmp8[nb] : _idx(__tmp8, nb)) - 1
        if _eq((__tmp9 = indegree; __tmp9.is_a?(Hash) ? __tmp9[nb] : _idx(__tmp9, nb)), 0)
          queue = _append(queue, nb)
        end
        k = _add(k, 1)
      end
    end
    if !_eq(processed, _len(graph))
      return nil
    end
    return order
  end
  def main()
    graph = {0 => [1, 2], 1 => [3], 2 => [3], 3 => [4, 5], 4 => [], 5 => []}
    puts(((x = topological_sort(graph)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    cyclic = {0 => [1], 1 => [2], 2 => [0]}
    puts(((x = topological_sort(cyclic)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
