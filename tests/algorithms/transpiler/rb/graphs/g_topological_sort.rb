# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def depth_first_search(u, visited, graph, stack)
    visited[u] = true
    i = 0
    while i < _len((__tmp1 = graph; __tmp1.is_a?(Hash) ? __tmp1[u] : _idx(__tmp1, u)))
      v = (__tmp2 = (__tmp3 = graph; __tmp3.is_a?(Hash) ? __tmp3[u] : _idx(__tmp3, u)); __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      if !(__tmp4 = visited; __tmp4.is_a?(Hash) ? __tmp4[v] : _idx(__tmp4, v))
        stack = depth_first_search(v, visited, graph, stack)
      end
      i = _add(i, 1)
    end
    stack = _append(stack, u)
    return stack
  end
  def topological_sort(graph)
    visited = []
    i = 0
    while i < _len(graph)
      visited = _append(visited, false)
      i = _add(i, 1)
    end
    stack = []
    i = 0
    while i < _len(graph)
      if !(__tmp5 = visited; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
        stack = depth_first_search(i, visited, graph, stack)
      end
      i = _add(i, 1)
    end
    return stack
  end
  def print_stack(stack, clothes)
    order = 1
    s = stack
    while _len(s) > 0
      idx = (__tmp6 = s; __tmp6.is_a?(Hash) ? __tmp6[_len(s) - 1] : _idx(__tmp6, _len(s) - 1))
      s = s[0..._len(s) - 1]
      puts(_add(_add(_str(order), " "), (__tmp7 = clothes; __tmp7.is_a?(Hash) ? __tmp7[idx] : _idx(__tmp7, idx))))
      order = _add(order, 1)
    end
  end
  def format_list(xs)
    res = "["
    i = 0
    while i < _len(xs)
      res = _add(res, _str((__tmp8 = xs; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))))
      if i < _len(xs) - 1
        res = _add(res, ", ")
      end
      i = _add(i, 1)
    end
    res = _add(res, "]")
    return res
  end
  def main()
    clothes = {0 => "underwear", 1 => "pants", 2 => "belt", 3 => "suit", 4 => "shoe", 5 => "socks", 6 => "shirt", 7 => "tie", 8 => "watch"}
    graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]
    stack = topological_sort(graph)
    puts(format_list(stack))
    print_stack(stack, clothes)
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
