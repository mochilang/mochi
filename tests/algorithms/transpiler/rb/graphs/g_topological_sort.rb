# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def depth_first_search(u, visited, graph, stack)
    visited[u] = true
    i = 0.clone
    while i < graph[u].length
      v = graph[u][i]
      if !visited[v]
        stack = depth_first_search(v, visited, graph, stack).clone
      end
      i = _add(i, 1).clone
    end
    stack = (stack << (u)).clone
    return stack
  end
  def topological_sort(graph)
    visited = [].clone
    i = 0.clone
    while i < graph.length
      visited = (visited << (false)).clone
      i = _add(i, 1).clone
    end
    stack = [].clone
    i = 0.clone
    while i < graph.length
      if !visited[i]
        stack = depth_first_search(i, visited, graph, stack).clone
      end
      i = _add(i, 1).clone
    end
    return stack
  end
  def print_stack(stack, clothes)
    order = 1.clone
    s = stack.clone
    while s.length > 0
      idx = s[s.length - 1]
      s = s[0...s.length - 1].clone
      puts(_add(_add(_str(order), " "), clothes[idx]))
      order = _add(order, 1).clone
    end
  end
  def format_list(xs)
    res = "[".clone
    i = 0.clone
    while i < xs.length
      res = _add(res, _str(xs[i])).clone
      if i < xs.length - 1
        res = _add(res, ", ").clone
      end
      i = _add(i, 1).clone
    end
    res = _add(res, "]").clone
    return res
  end
  def main()
    clothes = {0 => "underwear", 1 => "pants", 2 => "belt", 3 => "suit", 4 => "shoe", 5 => "socks", 6 => "shirt", 7 => "tie", 8 => "watch"}
    graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]
    stack = topological_sort(graph)
    puts(format_list(stack))
    print_stack(stack, clothes)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
