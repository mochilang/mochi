# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def fill_row(current_row, row_above)
    current_row[0] = _add(current_row[0], row_above[0])
    cell_n = 1.clone
    while cell_n < current_row.length
      left = current_row[cell_n - 1]
      up = row_above[cell_n]
      if left < up
        current_row[cell_n] = _add(current_row[cell_n], left)
      else
        current_row[cell_n] = _add(current_row[cell_n], up)
      end
      cell_n = _add(cell_n, 1).clone
    end
    return current_row
  end
  def min_path_sum(grid)
    if grid.length == 0 || grid[0].length == 0
      error("The grid does not contain the appropriate information")
    end
    cell_n = 1.clone
    while cell_n < grid[0].length
      grid[0][cell_n] = _add(grid[0][cell_n], grid[0][cell_n - 1])
      cell_n = _add(cell_n, 1).clone
    end
    row_above = grid[0].clone
    row_n = 1.clone
    while row_n < grid.length
      current_row = grid[row_n]
      grid[row_n] = fill_row(current_row, row_above)
      row_above = grid[row_n].clone
      row_n = _add(row_n, 1).clone
    end
    return grid[grid.length - 1][grid[0].length - 1]
  end
  $grid1 = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]
  puts(_str(min_path_sum($grid1)))
  $grid2 = [[1, 0, 5, 6, 7], [8, 9, 0, 4, 2], [4, 4, 4, 5, 1], [9, 6, 3, 1, 0], [8, 4, 3, 2, 7]]
  puts(_str(min_path_sum($grid2)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
