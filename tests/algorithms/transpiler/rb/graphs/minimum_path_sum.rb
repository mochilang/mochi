# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def fill_row(current_row, row_above)
    current_row[0] = _add((__tmp1 = current_row; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)), (__tmp2 = row_above; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)))
    cell_n = 1
    while cell_n < _len(current_row)
      left = (__tmp3 = current_row; __tmp3.is_a?(Hash) ? __tmp3[cell_n - 1] : _idx(__tmp3, cell_n - 1))
      up = (__tmp4 = row_above; __tmp4.is_a?(Hash) ? __tmp4[cell_n] : _idx(__tmp4, cell_n))
      if left < up
        current_row[cell_n] = _add((__tmp5 = current_row; __tmp5.is_a?(Hash) ? __tmp5[cell_n] : _idx(__tmp5, cell_n)), left)
      else
        current_row[cell_n] = _add((__tmp6 = current_row; __tmp6.is_a?(Hash) ? __tmp6[cell_n] : _idx(__tmp6, cell_n)), up)
      end
      cell_n = _add(cell_n, 1)
    end
    return current_row
  end
  def min_path_sum(grid)
    if _eq(_len(grid), 0) || _eq(_len((__tmp7 = grid; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))), 0)
      panic("The grid does not contain the appropriate information")
    end
    cell_n = 1
    while cell_n < _len((__tmp8 = grid; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)))
      (__tmp9 = grid; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0))[cell_n] = _add((__tmp10 = (__tmp11 = grid; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)); __tmp10.is_a?(Hash) ? __tmp10[cell_n] : _idx(__tmp10, cell_n)), (__tmp12 = (__tmp13 = grid; __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)); __tmp12.is_a?(Hash) ? __tmp12[cell_n - 1] : _idx(__tmp12, cell_n - 1)))
      cell_n = _add(cell_n, 1)
    end
    row_above = (__tmp14 = grid; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0))
    row_n = 1
    while row_n < _len(grid)
      current_row = (__tmp15 = grid; __tmp15.is_a?(Hash) ? __tmp15[row_n] : _idx(__tmp15, row_n))
      grid[row_n] = fill_row(current_row, row_above)
      row_above = (__tmp16 = grid; __tmp16.is_a?(Hash) ? __tmp16[row_n] : _idx(__tmp16, row_n))
      row_n = _add(row_n, 1)
    end
    return (__tmp17 = (__tmp18 = grid; __tmp18.is_a?(Hash) ? __tmp18[_len(grid) - 1] : _idx(__tmp18, _len(grid) - 1)); __tmp17.is_a?(Hash) ? __tmp17[_len((__tmp19 = grid; __tmp19.is_a?(Hash) ? __tmp19[0] : _idx(__tmp19, 0))) - 1] : _idx(__tmp17, _len((__tmp20 = grid; __tmp20.is_a?(Hash) ? __tmp20[0] : _idx(__tmp20, 0))) - 1))
  end
  $grid1 = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]
  puts(_str(min_path_sum($grid1)))
  $grid2 = [[1, 0, 5, 6, 7], [8, 9, 0, 4, 2], [4, 4, 4, 5, 1], [9, 6, 3, 1, 0], [8, 4, 3, 2, 7]]
  puts(_str(min_path_sum($grid2)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
