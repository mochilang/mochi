# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def node_to_string(n)
    return _add(_add(_add(_add(_add(_add("<node=", n.name), " inbound="), n.inbound), " outbound="), n.outbound), ">")
  end
  def page_rank(nodes, limit, d)
    ranks = {}.clone
        __tmp1 = nodes
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |n|
      ranks[n.name] = 1.0
    end
    outbounds = {}.clone
        __tmp2 = nodes
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |n|
      outbounds[n.name] = 1.0 * n.outbound.length
    end
    i = 0.clone
    while i < limit
      puts(_add(_add("======= Iteration ", _str(_add(i, 1))), " ======="))
            __tmp3 = nodes
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |n|
        sum_val = 0.0.clone
                __tmp4 = n.inbound
        if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
          __tmp4 = __tmp4.keys
        end
        __tmp4.each do |ib|
          sum_val = _add(sum_val, ranks[ib] / outbounds[ib]).clone
        end
        ranks[n.name] = _add((1.0 - d), d * sum_val)
      end
      puts(ranks)
      i = _add(i, 1).clone
    end
    return ranks
  end
  Node = Struct.new(:name, :inbound, :outbound, keyword_init: true)
  $names = ["A", "B", "C"]
  $graph = [[0, 1, 1], [0, 0, 1], [1, 0, 0]]
  $nodes = [].clone
    __tmp5 = $names
  if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
    __tmp5 = __tmp5.keys
  end
  __tmp5.each do |name|
    $nodes = ($nodes << (Node.new(name: name, inbound: [], outbound: []))).clone
  end
  $ri = 0.clone
  while $ri < $graph.length
    row = $graph[$ri].clone
    ci = 0.clone
    while ci < row.length
      if row[ci] == 1
        n_in = $nodes[ci].clone
        n_in["inbound"] = (n_in["inbound"] << ($names[$ri]))
        $nodes[ci] = n_in
        n_out = $nodes[$ri].clone
        n_out["outbound"] = (n_out["outbound"] << ($names[ci]))
        $nodes[$ri] = n_out
      end
      ci = _add(ci, 1).clone
    end
    $ri = _add($ri, 1).clone
  end
  puts("======= Nodes =======")
    __tmp6 = $nodes
  if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
    __tmp6 = __tmp6.keys
  end
  __tmp6.each do |n|
    puts(n)
  end
  page_rank($nodes, 3, 0.85)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
