# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def node_to_string(n)
    return _add(_add(_add(_add(_add(_add("<node=", n.name), " inbound="), n.inbound), " outbound="), n.outbound), ">")
  end
  def page_rank(nodes, limit, d)
    ranks = {}
        __tmp1 = nodes
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |n|
      ranks[n.name] = 1.0
    end
    outbounds = {}
        __tmp2 = nodes
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |n|
      outbounds[n.name] = 1.0 * _len(n.outbound)
    end
    i = 0
    while i < limit
      puts(_add(_add("======= Iteration ", _str(_add(i, 1))), " ======="))
            __tmp3 = nodes
      __tmp3 = [] if __tmp3.nil?
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |n|
        sum_val = 0.0
                __tmp4 = n.inbound
        __tmp4 = [] if __tmp4.nil?
        if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
          __tmp4 = __tmp4.keys
        end
        __tmp4.each do |ib|
          sum_val = _add(sum_val, (__tmp5 = ranks; __tmp5.is_a?(Hash) ? __tmp5[ib] : _idx(__tmp5, ib)) / (__tmp6 = outbounds; __tmp6.is_a?(Hash) ? __tmp6[ib] : _idx(__tmp6, ib)))
        end
        ranks[n.name] = _add((1.0 - d), d * sum_val)
      end
      puts(ranks)
      i = _add(i, 1)
    end
    return ranks
  end
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Node = Struct.new(:name, :inbound, :outbound, keyword_init: true)
  $names = ["A", "B", "C"]
  $graph = [[0, 1, 1], [0, 0, 1], [1, 0, 0]]
  $nodes = []
    __tmp7 = $names
  __tmp7 = [] if __tmp7.nil?
  if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
    __tmp7 = __tmp7.keys
  end
  __tmp7.each do |name|
    $nodes = _append($nodes, Node.new(name: name, inbound: [], outbound: []))
  end
  $ri = 0
  while $ri < _len($graph)
    row = (__tmp8 = $graph; __tmp8.is_a?(Hash) ? __tmp8[$ri] : _idx(__tmp8, $ri))
    ci = 0
    while ci < _len(row)
      if _eq((__tmp9 = row; __tmp9.is_a?(Hash) ? __tmp9[ci] : _idx(__tmp9, ci)), 1)
        n_in = (__tmp10 = $nodes; __tmp10.is_a?(Hash) ? __tmp10[ci] : _idx(__tmp10, ci))
        n_in["inbound"] = _append((__tmp11 = n_in; __tmp11.is_a?(Hash) ? __tmp11["inbound"] : _idx(__tmp11, "inbound")), (__tmp12 = $names; __tmp12.is_a?(Hash) ? __tmp12[$ri] : _idx(__tmp12, $ri)))
        $nodes[ci] = n_in
        n_out = (__tmp13 = $nodes; __tmp13.is_a?(Hash) ? __tmp13[$ri] : _idx(__tmp13, $ri))
        n_out["outbound"] = _append((__tmp14 = n_out; __tmp14.is_a?(Hash) ? __tmp14["outbound"] : _idx(__tmp14, "outbound")), (__tmp15 = $names; __tmp15.is_a?(Hash) ? __tmp15[ci] : _idx(__tmp15, ci)))
        $nodes[$ri] = n_out
      end
      ci = _add(ci, 1)
    end
    $ri = _add($ri, 1)
  end
  puts("======= Nodes =======")
    __tmp16 = $nodes
  __tmp16 = [] if __tmp16.nil?
  if __tmp16.respond_to?(:keys) && !__tmp16.is_a?(String)
    __tmp16 = __tmp16.keys
  end
  __tmp16.each do |n|
    puts(n)
  end
  page_rank($nodes, 3, 0.85)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
