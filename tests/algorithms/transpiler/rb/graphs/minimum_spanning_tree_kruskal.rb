# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sort_edges(edges)
    es = edges
    i = 0
    while i < _len(es)
      j = 0
      while j < _len(es) - i - 1
        if (__tmp1 = (__tmp2 = es; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)); __tmp1.is_a?(Hash) ? __tmp1[2] : _idx(__tmp1, 2)) > (__tmp3 = (__tmp4 = es; __tmp4.is_a?(Hash) ? __tmp4[_add(j, 1)] : _idx(__tmp4, _add(j, 1))); __tmp3.is_a?(Hash) ? __tmp3[2] : _idx(__tmp3, 2))
          temp = (__tmp5 = es; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j))
          es[j] = (__tmp6 = es; __tmp6.is_a?(Hash) ? __tmp6[_add(j, 1)] : _idx(__tmp6, _add(j, 1)))
          es[_add(j, 1)] = temp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return es
  end
  def find_parent(parent, i)
    if !_eq((__tmp7 = parent; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)), i)
      parent[i] = find_parent(parent, (__tmp8 = parent; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
    end
    return (__tmp9 = parent; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))
  end
  def kruskal(num_nodes, edges)
    es = sort_edges(edges)
    parent = []
    i = 0
    while i < num_nodes
      parent = _append(parent, i)
      i = _add(i, 1)
    end
    mst = []
    idx = 0
    while idx < _len(es)
      e = (__tmp10 = es; __tmp10.is_a?(Hash) ? __tmp10[idx] : _idx(__tmp10, idx))
      pa = find_parent(parent, (__tmp11 = e; __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)))
      pb = find_parent(parent, (__tmp12 = e; __tmp12.is_a?(Hash) ? __tmp12[1] : _idx(__tmp12, 1)))
      if !_eq(pa, pb)
        mst = _append(mst, e)
        parent[pa] = pb
      end
      idx = _add(idx, 1)
    end
    return mst
  end
  def edges_to_string(es)
    s = "["
    i = 0
    while i < _len(es)
      e = (__tmp13 = es; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))
      s = _add(_add(_add(_add(_add(_add(_add(s, "("), _str((__tmp14 = e; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0)))), ", "), _str((__tmp15 = e; __tmp15.is_a?(Hash) ? __tmp15[1] : _idx(__tmp15, 1)))), ", "), _str((__tmp16 = e; __tmp16.is_a?(Hash) ? __tmp16[2] : _idx(__tmp16, 2)))), ")")
      if i < _len(es) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  $edges1 = [[0, 1, 3], [1, 2, 5], [2, 3, 1]]
  puts(edges_to_string(kruskal(4, $edges1)))
  $edges2 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2]]
  puts(edges_to_string(kruskal(4, $edges2)))
  $edges3 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2], [2, 1, 1]]
  puts(edges_to_string(kruskal(4, $edges3)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
