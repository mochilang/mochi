# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sort_edges(edges)
    es = edges.clone
    i = 0.clone
    while i < es.length
      j = 0.clone
      while j < es.length - i - 1
        if es[j][2] > es[_add(j, 1)][2]
          temp = es[j]
          es[j] = es[_add(j, 1)]
          es[_add(j, 1)] = temp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return es
  end
  def find_parent(parent, i)
    if parent[i] != i
      parent[i] = find_parent(parent, parent[i])
    end
    return parent[i]
  end
  def kruskal(num_nodes, edges)
    es = sort_edges(edges).clone
    parent = [].clone
    i = 0.clone
    while i < num_nodes
      parent = (parent << (i)).clone
      i = _add(i, 1).clone
    end
    mst = [].clone
    idx = 0.clone
    while idx < es.length
      e = es[idx]
      pa = find_parent(parent, e[0])
      pb = find_parent(parent, e[1])
      if pa != pb
        mst = (mst << (e)).clone
        parent[pa] = pb
      end
      idx = _add(idx, 1).clone
    end
    return mst
  end
  def edges_to_string(es)
    s = "[".clone
    i = 0.clone
    while i < es.length
      e = es[i]
      s = _add(_add(_add(_add(_add(_add(_add(s, "("), _str(e[0])), ", "), _str(e[1])), ", "), _str(e[2])), ")").clone
      if i < es.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  $edges1 = [[0, 1, 3], [1, 2, 5], [2, 3, 1]]
  puts(edges_to_string(kruskal(4, $edges1)))
  $edges2 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2]]
  puts(edges_to_string(kruskal(4, $edges2)))
  $edges3 = [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2], [2, 1, 1]]
  puts(edges_to_string(kruskal(4, $edges3)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
