# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def remove_value(lst, val)
    res = [].clone
    i = 0.clone
    while i < lst.length
      if lst[i] != val
        res = (res << (lst[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def greedy_min_vertex_cover(graph)
    g = graph.clone
    cover = [].clone
    while true
      max_v = 0.clone
      max_deg = 0.clone
            __tmp1 = g.keys()
      if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
        __tmp1 = __tmp1.keys
      end
      __tmp1.each do |v|
        key = (v).to_i
        deg = g[key].length
        if deg > max_deg
          max_deg = deg.clone
          max_v = key.clone
        end
      end
      if max_deg == 0
        break
      end
      cover = (cover << (max_v)).clone
      neighbors = g[max_v]
      i = 0.clone
      while i < neighbors.length
        n = neighbors[i]
        g[n] = remove_value(g[n], max_v)
        i = _add(i, 1).clone
      end
      g[max_v] = []
    end
    return cover
  end
  $graph = {0 => [1, 3], 1 => [0, 3], 2 => [0, 3, 4], 3 => [0, 1, 2], 4 => [2, 3]}.clone
  puts(((x = greedy_min_vertex_cover($graph)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
