# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def join(xs)
    s = ""
    i = 0
    while i < xs.length
      s = _add(s, xs[i])
      i = _add(i, 1)
    end
    return s
  end
  def breadth_first_search(graph, start)
    explored = {}
    explored[start] = true
    result = [start]
    queue = [start]
    while queue.length > 0
      v = queue[0]
      queue = queue[1...queue.length]
      children = graph[v]
      i = 0
      while i < children.length
        w = children[i]
        if !(explored.key?(w))
          explored[w] = true
          result = (result << (w))
          queue = (queue << (w))
        end
        i = _add(i, 1)
      end
    end
    return result
  end
  def breadth_first_search_with_deque(graph, start)
    visited = {}
    visited[start] = true
    result = [start]
    queue = [start]
    head = 0
    while head < queue.length
      v = queue[head]
      head = _add(head, 1)
      children = graph[v]
      i = 0
      while i < children.length
        child = children[i]
        if !(visited.key?(child))
          visited[child] = true
          result = (result << (child))
          queue = (queue << (child))
        end
        i = _add(i, 1)
      end
    end
    return result
  end
  $G = {"A" => ["B", "C"], "B" => ["A", "D", "E"], "C" => ["A", "F"], "D" => ["B"], "E" => ["B", "F"], "F" => ["C", "E"]}
  puts(join(breadth_first_search($G, "A")))
  puts(join(breadth_first_search_with_deque($G, "A")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
