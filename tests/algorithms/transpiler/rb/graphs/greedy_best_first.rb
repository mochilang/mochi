# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0
      return 0 - x
    end
    return x
  end
  def manhattan(x1, y1, x2, y2)
    return _add((x1 - x2).abs(), (y1 - y2).abs())
  end
  def clone_path(p)
    res = []
    i = 0
    while i < _len(p)
      res = _append(res, (__tmp1 = p; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return res
  end
  def make_node(pos_x, pos_y, goal_x, goal_y, g_cost, path)
    f = manhattan(pos_x, pos_y, goal_x, goal_y)
    return Node.new(pos_x: pos_x, pos_y: pos_y, goal_x: goal_x, goal_y: goal_y, g_cost: g_cost, f_cost: f, path: path)
  end
  def node_equal(a, b)
    return _eq(a.pos_x, b.pos_x) && _eq(a.pos_y, b.pos_y)
  end
  def contains(nodes, node)
    i = 0
    while i < _len(nodes)
      if node_equal((__tmp2 = nodes; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), node)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def sort_nodes(nodes)
    arr = nodes
    i = 1
    while i < _len(arr)
      key_node = (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      j = i - 1
      while j >= 0
        temp = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))
        if temp.f_cost > key_node.f_cost
          arr[_add(j, 1)] = temp
          j = j - 1
        else
          break
        end
      end
      arr[_add(j, 1)] = key_node
      i = _add(i, 1)
    end
    return arr
  end
  def get_successors(grid, parent, target)
    res = []
    i = 0
    while i < _len($delta)
      d = (__tmp5 = $delta; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      pos_x = _add(parent.pos_x, d.x)
      pos_y = _add(parent.pos_y, d.y)
      if pos_x >= 0 && pos_x < _len((__tmp6 = grid; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0))) && pos_y >= 0 && pos_y < _len(grid) && _eq((__tmp7 = (__tmp8 = grid; __tmp8.is_a?(Hash) ? __tmp8[pos_y] : _idx(__tmp8, pos_y)); __tmp7.is_a?(Hash) ? __tmp7[pos_x] : _idx(__tmp7, pos_x)), 0)
        new_path = clone_path(parent.path)
        new_path = _append(new_path, Pos.new(y: pos_y, x: pos_x))
        res = _append(res, make_node(pos_x, pos_y, target.x, target.y, _add(parent.g_cost, 1), new_path))
      end
      i = _add(i, 1)
    end
    return res
  end
  def greedy_best_first(grid, init, goal)
    start_path = [init]
    start = make_node(init.x, init.y, goal.x, goal.y, 0, start_path)
    open_nodes = [start]
    closed_nodes = []
    while _len(open_nodes) > 0
      open_nodes = sort_nodes(open_nodes)
      current = (__tmp9 = open_nodes; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0))
      new_open = []
      idx = 1
      while idx < _len(open_nodes)
        new_open = _append(new_open, (__tmp10 = open_nodes; __tmp10.is_a?(Hash) ? __tmp10[idx] : _idx(__tmp10, idx)))
        idx = _add(idx, 1)
      end
      open_nodes = new_open
      if _eq(current.pos_x, goal.x) && _eq(current.pos_y, goal.y)
        return current.path
      end
      closed_nodes = _append(closed_nodes, current)
      successors = get_successors(grid, current, goal)
      i = 0
      while i < _len(successors)
        child = (__tmp11 = successors; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
        if (!contains(closed_nodes, child)) && (!contains(open_nodes, child))
          open_nodes = _append(open_nodes, child)
        end
        i = _add(i, 1)
      end
    end
    r = [init]
    return r
  end
  def print_grid(grid)
    i = 0
    while i < _len(grid)
      puts(((x = (__tmp12 = grid; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
      i = _add(i, 1)
    end
  end
  def main()
    idx = 0
    while idx < _len($TEST_GRIDS)
      puts(_add(_add("==grid-", _str(_add(idx, 1))), "=="))
      grid = (__tmp13 = $TEST_GRIDS; __tmp13.is_a?(Hash) ? __tmp13[idx] : _idx(__tmp13, idx))
      init = Pos.new(y: 0, x: 0)
      goal = Pos.new(y: _len(grid) - 1, x: _len((__tmp14 = grid; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0))) - 1)
      print_grid(grid)
      puts("------")
      path = greedy_best_first(grid, init, goal)
      j = 0
      while j < _len(path)
        p = (__tmp15 = path; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j))
        (__tmp16 = grid; __tmp16.is_a?(Hash) ? __tmp16[p.y] : _idx(__tmp16, p.y))[p.x] = 2
        j = _add(j, 1)
      end
      print_grid(grid)
      idx = _add(idx, 1)
    end
  end
  Object.send(:remove_const, :Pos) if Object.const_defined?(:Pos)
  Object.const_set(:Pos, Struct.new(:y, :x, keyword_init: true))
  Object.send(:remove_const, :Node) if Object.const_defined?(:Node)
  Object.const_set(:Node, Struct.new(:pos_x, :pos_y, :goal_x, :goal_y, :g_cost, :f_cost, :path, keyword_init: true))
  $delta = [Pos.new(y: -1, x: 0), Pos.new(y: 0, x: -1), Pos.new(y: 1, x: 0), Pos.new(y: 0, x: 1)]
  $TEST_GRIDS = [[[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]], [[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0]]]
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
