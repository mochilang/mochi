# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0
      return 0 - x
    end
    return x
  end
  def manhattan(x1, y1, x2, y2)
    return _add(abs(x1 - x2), abs(y1 - y2))
  end
  def clone_path(p)
    res = [].clone
    i = 0.clone
    while i < p.length
      res = (res << (p[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def make_node(pos_x, pos_y, goal_x, goal_y, g_cost, path)
    f = manhattan(pos_x, pos_y, goal_x, goal_y)
    return Node.new(pos_x: pos_x, pos_y: pos_y, goal_x: goal_x, goal_y: goal_y, g_cost: g_cost, f_cost: f, path: path)
  end
  def node_equal(a, b)
    return a.pos_x == b.pos_x && a.pos_y == b.pos_y
  end
  def contains(nodes, node)
    i = 0.clone
    while i < nodes.length
      if node_equal(nodes[i], node)
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def sort_nodes(nodes)
    arr = nodes.clone
    i = 1.clone
    while i < arr.length
      key_node = arr[i]
      j = i - 1.clone
      while j >= 0
        temp = arr[j]
        if temp.f_cost > key_node.f_cost
          arr[_add(j, 1)] = temp
          j = j - 1.clone
        else
          break
        end
      end
      arr[_add(j, 1)] = key_node
      i = _add(i, 1).clone
    end
    return arr
  end
  def get_successors(grid, parent, target)
    res = [].clone
    i = 0.clone
    while i < $delta.length
      d = $delta[i]
      pos_x = _add(parent.pos_x, d.x)
      pos_y = _add(parent.pos_y, d.y)
      if pos_x >= 0 && pos_x < grid[0].length && pos_y >= 0 && pos_y < grid.length && grid[pos_y][pos_x] == 0
        new_path = clone_path(parent.path).clone
        new_path = (new_path << (Pos.new(y: pos_y, x: pos_x))).clone
        res = (res << (make_node(pos_x, pos_y, target.x, target.y, _add(parent.g_cost, 1), new_path))).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def greedy_best_first(grid, init, goal)
    start_path = [init]
    start = make_node(init.x, init.y, goal.x, goal.y, 0, start_path)
    open_nodes = [start].clone
    closed_nodes = [].clone
    while open_nodes.length > 0
      open_nodes = sort_nodes(open_nodes).clone
      current = open_nodes[0]
      new_open = [].clone
      idx = 1.clone
      while idx < open_nodes.length
        new_open = (new_open << (open_nodes[idx])).clone
        idx = _add(idx, 1).clone
      end
      open_nodes = new_open.clone
      if current.pos_x == goal.x && current.pos_y == goal.y
        return current.path
      end
      closed_nodes = (closed_nodes << (current)).clone
      successors = get_successors(grid, current, goal)
      i = 0.clone
      while i < successors.length
        child = successors[i]
        if (!closed_nodes.include?(child)) && (!open_nodes.include?(child))
          open_nodes = (open_nodes << (child)).clone
        end
        i = _add(i, 1).clone
      end
    end
    r = [init]
    return r
  end
  def print_grid(grid)
    i = 0.clone
    while i < grid.length
      puts(((x = grid[i]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
      i = _add(i, 1).clone
    end
  end
  def main()
    idx = 0.clone
    while idx < $TEST_GRIDS.length
      puts(_add(_add("==grid-", _str(_add(idx, 1))), "=="))
      grid = $TEST_GRIDS[idx].clone
      init = Pos.new(y: 0, x: 0)
      goal = Pos.new(y: grid.length - 1, x: grid[0].length - 1)
      print_grid(grid)
      puts("------")
      path = greedy_best_first(grid, init, goal)
      j = 0.clone
      while j < path.length
        p = path[j]
        grid[p.y][p.x] = 2
        j = _add(j, 1).clone
      end
      print_grid(grid)
      idx = _add(idx, 1).clone
    end
  end
  Pos = Struct.new(:y, :x, keyword_init: true)
  Node = Struct.new(:pos_x, :pos_y, :goal_x, :goal_y, :g_cost, :f_cost, :path, keyword_init: true)
  $delta = [Pos.new(y: -1, x: 0), Pos.new(y: 0, x: -1), Pos.new(y: 1, x: 0), Pos.new(y: 0, x: 1)]
  $TEST_GRIDS = [[[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]], [[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0]]]
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
