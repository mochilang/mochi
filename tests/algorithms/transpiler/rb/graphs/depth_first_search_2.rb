# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def add_edge(g, from_vertex, to_vertex)
    v = g.vertex
    if _has(v, from_vertex)
      lst = (__tmp1 = v; __tmp1.is_a?(Hash) ? __tmp1[from_vertex] : _idx(__tmp1, from_vertex))
      lst = _append(lst, to_vertex)
      v[from_vertex] = lst
    else
      v[from_vertex] = [to_vertex]
    end
    g.vertex = v
    if _add(from_vertex, 1) > g.size
      g.size = _add(from_vertex, 1)
    end
    if _add(to_vertex, 1) > g.size
      g.size = _add(to_vertex, 1)
    end
    return g
  end
  def list_to_string(lst)
    res = ""
    i = 0
    while i < _len(lst)
      res = _add(res, _str((__tmp2 = lst; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))))
      if i < _len(lst) - 1
        res = _add(res, " ")
      end
      i = _add(i, 1)
    end
    return res
  end
  def list_to_arrow(lst)
    res = ""
    i = 0
    while i < _len(lst)
      res = _add(res, _str((__tmp3 = lst; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))))
      if i < _len(lst) - 1
        res = _add(res, " -> ")
      end
      i = _add(i, 1)
    end
    return res
  end
  def print_graph(g)
    puts(_str(g.vertex))
    i = 0
    while i < g.size
      edges = []
      if _has(g.vertex, i)
        edges = (__tmp4 = g.vertex; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      end
      line = _add(_add(_str(i), "  ->  "), list_to_arrow(edges))
      puts(line)
      i = _add(i, 1)
    end
  end
  def dfs_recursive(g, start_vertex, visited, order)
    visited[start_vertex] = true
    order = _append(order, start_vertex)
    if _has(g.vertex, start_vertex)
      neighbors = (__tmp5 = g.vertex; __tmp5.is_a?(Hash) ? __tmp5[start_vertex] : _idx(__tmp5, start_vertex))
      i = 0
      while i < _len(neighbors)
        nb = (__tmp6 = neighbors; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
        if !(__tmp7 = visited; __tmp7.is_a?(Hash) ? __tmp7[nb] : _idx(__tmp7, nb))
          order = dfs_recursive(g, nb, visited, order)
        end
        i = _add(i, 1)
      end
    end
    return order
  end
  def dfs(g)
    n = g.size
    visited = []
    i = 0
    while i < n
      visited = _append(visited, false)
      i = _add(i, 1)
    end
    order = []
    i = 0
    while i < n
      if !(__tmp8 = visited; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
        order = dfs_recursive(g, i, visited, order)
      end
      i = _add(i, 1)
    end
    return order
  end
  Object.send(:remove_const, :Graph) if Object.const_defined?(:Graph)
  Graph = Struct.new(:vertex, :size, keyword_init: true)
  $g = Graph.new(vertex: {}, size: 0)
  $g = add_edge($g, 0, 1)
  $g = add_edge($g, 0, 2)
  $g = add_edge($g, 1, 2)
  $g = add_edge($g, 2, 0)
  $g = add_edge($g, 2, 3)
  $g = add_edge($g, 3, 3)
  print_graph($g)
  puts("DFS:")
  puts(list_to_string(dfs($g)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
