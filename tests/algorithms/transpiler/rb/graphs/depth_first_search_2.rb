# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def add_edge(g, from_vertex, to_vertex)
    v = g.vertex.clone
    if v.key?(from_vertex)
      lst = v[from_vertex].clone
      lst = (lst << (to_vertex)).clone
      v[from_vertex] = lst
    else
      v[from_vertex] = [to_vertex]
    end
    g["vertex"] = v
    if _add(from_vertex, 1) > g.size
      g["size"] = _add(from_vertex, 1)
    end
    if _add(to_vertex, 1) > g.size
      g["size"] = _add(to_vertex, 1)
    end
    return g
  end
  def list_to_string(lst)
    res = "".clone
    i = 0.clone
    while i < lst.length
      res = _add(res, _str(lst[i])).clone
      if i < lst.length - 1
        res = _add(res, " ").clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def list_to_arrow(lst)
    res = "".clone
    i = 0.clone
    while i < lst.length
      res = _add(res, _str(lst[i])).clone
      if i < lst.length - 1
        res = _add(res, " -> ").clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def print_graph(g)
    puts(_str(g.vertex))
    i = 0.clone
    while i < g.size
      edges = [].clone
      if g.vertex.key?(i)
        edges = g.vertex[i].clone
      end
      line = _add(_add(_str(i), "  ->  "), list_to_arrow(edges))
      puts(line)
      i = _add(i, 1).clone
    end
  end
  def dfs_recursive(g, start_vertex, visited, order)
    visited[start_vertex] = true
    order = (order << (start_vertex)).clone
    if g.vertex.key?(start_vertex)
      neighbors = g.vertex[start_vertex].clone
      i = 0.clone
      while i < neighbors.length
        nb = neighbors[i]
        if !visited[nb]
          order = dfs_recursive(g, nb, visited, order).clone
        end
        i = _add(i, 1).clone
      end
    end
    return order
  end
  def dfs(g)
    n = g.size
    visited = [].clone
    i = 0.clone
    while i < n
      visited = (visited << (false)).clone
      i = _add(i, 1).clone
    end
    order = [].clone
    i = 0.clone
    while i < n
      if !visited[i]
        order = dfs_recursive(g, i, visited, order).clone
      end
      i = _add(i, 1).clone
    end
    return order
  end
  Graph = Struct.new(:vertex, :size, keyword_init: true)
  $g = Graph.new(vertex: {}, size: 0).clone
  $g = add_edge($g, 0, 1).clone
  $g = add_edge($g, 0, 2).clone
  $g = add_edge($g, 1, 2).clone
  $g = add_edge($g, 2, 0).clone
  $g = add_edge($g, 2, 3).clone
  $g = add_edge($g, 3, 3).clone
  print_graph($g)
  puts("DFS:")
  puts(list_to_string(dfs($g)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
