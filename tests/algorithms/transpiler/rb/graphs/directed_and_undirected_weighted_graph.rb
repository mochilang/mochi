# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def list_contains_int(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def edge_exists(edges, w, v)
    i = 0.clone
    while i < edges.length
      if edges[i][0] == w && edges[i][1] == v
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def first_key(m)
        __tmp1 = m.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |k|
      return k
    end
    return 0
  end
  def rand_range(low, high)
    return _add((_now() % (high - low)), low)
  end
  def dg_make_graph()
    return DirectedGraph.new(graph: {})
  end
  def dg_add_pair(g, u, v, w)
    if g.graph.key?(u)
      edges = g.graph[u].clone
      if !edge_exists(edges, w, v)
        edges = (edges << ([w, v])).clone
        m = g.graph.clone
        m[u] = edges
        g["graph"] = m
      end
    else
      m0 = g.graph.clone
      m0[u] = [[w, v]]
      g["graph"] = m0
    end
    if !(g.graph.key?(v))
      m1 = g.graph.clone
      m1[v] = []
      g["graph"] = m1
    end
  end
  def dg_remove_pair(g, u, v)
    if g.graph.key?(u)
      edges = g.graph[u].clone
      new_edges = [].clone
      i = 0.clone
      while i < edges.length
        if edges[i][1] != v
          new_edges = (new_edges << (edges[i])).clone
        end
        i = _add(i, 1).clone
      end
      m = g.graph.clone
      m[u] = new_edges
      g["graph"] = m
    end
  end
  def dg_all_nodes(g)
    res = [].clone
        __tmp2 = g.graph.keys()
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |k|
      res = (res << (k)).clone
    end
    return res
  end
  def dg_dfs_util(g, node, visited, order, d)
    visited[node] = true
    order = (order << (node)).clone
    if d != (-1) && node == d
      return order
    end
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        order = dg_dfs_util(g, neigh, visited, order, d).clone
        if d != (-1) && order[order.length - 1] == d
          return order
        end
      end
      i = _add(i, 1).clone
    end
    return order
  end
  def dg_dfs(g, s, d)
    if s == d
      return []
    end
    start = (s == (-2) ? first_key(g.graph) : s)
    visited = {}.clone
    order = [].clone
    order = dg_dfs_util(g, start, visited, order, d).clone
    return order
  end
  def dg_bfs(g, s)
    queue = [].clone
    visited = {}.clone
    order = [].clone
    start = (s == (-2) ? first_key(g.graph) : s)
    queue = (queue << (start)).clone
    visited[start] = true
    while queue.length > 0
      node = queue[0]
      queue = queue[1...queue.length].clone
      order = (order << (node)).clone
      edges = g.graph[node].clone
      i = 0.clone
      while i < edges.length
        neigh = edges[i][1]
        if !(visited.key?(neigh))
          queue = (queue << (neigh)).clone
          visited[neigh] = true
        end
        i = _add(i, 1).clone
      end
    end
    return order
  end
  def dg_in_degree(g, u)
    count = 0.clone
        __tmp3 = g.graph.keys()
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |k|
      edges = g.graph[k].clone
      i = 0.clone
      while i < edges.length
        if edges[i][1] == u
          count = _add(count, 1).clone
        end
        i = _add(i, 1).clone
      end
    end
    return count
  end
  def dg_out_degree(g, u)
    if g.graph.key?(u)
      return g.graph[u].length
    end
    return 0
  end
  def dg_topo_util(g, node, visited, stack)
    visited[node] = true
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        stack = dg_topo_util(g, neigh, visited, stack).clone
      end
      i = _add(i, 1).clone
    end
    stack = (stack << (node)).clone
    return stack
  end
  def dg_topological_sort(g)
    visited = {}.clone
    stack = [].clone
        __tmp4 = g.graph.keys()
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |k|
      if !(visited.key?(k))
        stack = dg_topo_util(g, k, visited, stack).clone
      end
    end
    res = [].clone
    i = stack.length - 1.clone
    while i >= 0
      res = (res << (stack[i])).clone
      i = i - 1.clone
    end
    return res
  end
  def dg_cycle_util(g, node, visited, rec, res)
    visited[node] = true
    rec[node] = true
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        res = dg_cycle_util(g, neigh, visited, rec, res).clone
      else
        if rec[neigh]
          if !list_contains_int(res, neigh)
            res = (res << (neigh)).clone
          end
          if !list_contains_int(res, node)
            res = (res << (node)).clone
          end
        end
      end
      i = _add(i, 1).clone
    end
    rec[node] = false
    return res
  end
  def dg_cycle_nodes(g)
    visited = {}.clone
    rec = {}.clone
    res = [].clone
        __tmp5 = g.graph.keys()
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |k|
      if !(visited.key?(k))
        res = dg_cycle_util(g, k, visited, rec, res).clone
      end
    end
    return res
  end
  def dg_has_cycle_util(g, node, visited, rec)
    visited[node] = true
    rec[node] = true
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        if dg_has_cycle_util(g, neigh, visited, rec)
          return true
        end
      else
        if rec[neigh]
          return true
        end
      end
      i = _add(i, 1).clone
    end
    rec[node] = false
    return false
  end
  def dg_has_cycle(g)
    visited = {}.clone
    rec = {}.clone
        __tmp6 = g.graph.keys()
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |k|
      if !(visited.key?(k))
        if dg_has_cycle_util(g, k, visited, rec)
          return true
        end
      end
    end
    return false
  end
  def dg_fill_graph_randomly(g, c)
    count = c.clone
    if count == (-1)
      count = rand_range(10, 10010).clone
    end
    i = 0.clone
    while i < count
      edge_count = rand_range(1, 103).clone
      j = 0.clone
      while j < edge_count
        n = rand_range(0, count)
        if n != i
          dg_add_pair(g, i, n, 1)
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
  end
  def dg_dfs_time(g, s, e)
    begin_ = _now()
    dg_dfs(g, s, e)
    end_ = _now()
    return end_ - begin_
  end
  def dg_bfs_time(g, s)
    begin_ = _now()
    dg_bfs(g, s)
    end_ = _now()
    return end_ - begin_
  end
  def g_make_graph()
    return Graph.new(graph: {})
  end
  def g_add_pair(g, u, v, w)
    if g.graph.key?(u)
      edges = g.graph[u].clone
      if !edge_exists(edges, w, v)
        edges = (edges << ([w, v])).clone
        m = g.graph.clone
        m[u] = edges
        g["graph"] = m
      end
    else
      m0 = g.graph.clone
      m0[u] = [[w, v]]
      g["graph"] = m0
    end
    if g.graph.key?(v)
      edges2 = g.graph[v].clone
      if !edge_exists(edges2, w, u)
        edges2 = (edges2 << ([w, u])).clone
        m2 = g.graph.clone
        m2[v] = edges2
        g["graph"] = m2
      end
    else
      m3 = g.graph.clone
      m3[v] = [[w, u]]
      g["graph"] = m3
    end
  end
  def g_remove_pair(g, u, v)
    if g.graph.key?(u)
      edges = g.graph[u].clone
      new_edges = [].clone
      i = 0.clone
      while i < edges.length
        if edges[i][1] != v
          new_edges = (new_edges << (edges[i])).clone
        end
        i = _add(i, 1).clone
      end
      m = g.graph.clone
      m[u] = new_edges
      g["graph"] = m
    end
    if g.graph.key?(v)
      edges2 = g.graph[v].clone
      new_edges2 = [].clone
      j = 0.clone
      while j < edges2.length
        if edges2[j][1] != u
          new_edges2 = (new_edges2 << (edges2[j])).clone
        end
        j = _add(j, 1).clone
      end
      m2 = g.graph.clone
      m2[v] = new_edges2
      g["graph"] = m2
    end
  end
  def g_all_nodes(g)
    res = [].clone
        __tmp7 = g.graph.keys()
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |k|
      res = (res << (k)).clone
    end
    return res
  end
  def g_dfs_util(g, node, visited, order, d)
    visited[node] = true
    order = (order << (node)).clone
    if d != (-1) && node == d
      return order
    end
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        order = g_dfs_util(g, neigh, visited, order, d).clone
        if d != (-1) && order[order.length - 1] == d
          return order
        end
      end
      i = _add(i, 1).clone
    end
    return order
  end
  def g_dfs(g, s, d)
    if s == d
      return []
    end
    start = (s == (-2) ? first_key(g.graph) : s)
    visited = {}.clone
    order = [].clone
    order = g_dfs_util(g, start, visited, order, d).clone
    return order
  end
  def g_bfs(g, s)
    queue = [].clone
    visited = {}.clone
    order = [].clone
    start = (s == (-2) ? first_key(g.graph) : s)
    queue = (queue << (start)).clone
    visited[start] = true
    while queue.length > 0
      node = queue[0]
      queue = queue[1...queue.length].clone
      order = (order << (node)).clone
      edges = g.graph[node].clone
      i = 0.clone
      while i < edges.length
        neigh = edges[i][1]
        if !(visited.key?(neigh))
          queue = (queue << (neigh)).clone
          visited[neigh] = true
        end
        i = _add(i, 1).clone
      end
    end
    return order
  end
  def g_degree(g, u)
    if g.graph.key?(u)
      return g.graph[u].length
    end
    return 0
  end
  def g_cycle_util(g, node, visited, parent, res)
    visited[node] = true
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        res = g_cycle_util(g, neigh, visited, node, res).clone
      else
        if neigh != parent
          if !list_contains_int(res, neigh)
            res = (res << (neigh)).clone
          end
          if !list_contains_int(res, node)
            res = (res << (node)).clone
          end
        end
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def g_cycle_nodes(g)
    visited = {}.clone
    res = [].clone
        __tmp8 = g.graph.keys()
    if __tmp8.respond_to?(:keys) && !__tmp8.is_a?(String)
      __tmp8 = __tmp8.keys
    end
    __tmp8.each do |k|
      if !(visited.key?(k))
        res = g_cycle_util(g, k, visited, -1, res).clone
      end
    end
    return res
  end
  def g_has_cycle_util(g, node, visited, parent)
    visited[node] = true
    edges = g.graph[node].clone
    i = 0.clone
    while i < edges.length
      neigh = edges[i][1]
      if !(visited.key?(neigh))
        if g_has_cycle_util(g, neigh, visited, node)
          return true
        end
      else
        if neigh != parent
          return true
        end
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def g_has_cycle(g)
    visited = {}.clone
        __tmp9 = g.graph.keys()
    if __tmp9.respond_to?(:keys) && !__tmp9.is_a?(String)
      __tmp9 = __tmp9.keys
    end
    __tmp9.each do |k|
      if !(visited.key?(k))
        if g_has_cycle_util(g, k, visited, -1)
          return true
        end
      end
    end
    return false
  end
  def g_fill_graph_randomly(g, c)
    count = c.clone
    if count == (-1)
      count = rand_range(10, 10010).clone
    end
    i = 0.clone
    while i < count
      edge_count = rand_range(1, 103).clone
      j = 0.clone
      while j < edge_count
        n = rand_range(0, count)
        if n != i
          g_add_pair(g, i, n, 1)
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
  end
  def g_dfs_time(g, s, e)
    begin_ = _now()
    g_dfs(g, s, e)
    end_ = _now()
    return end_ - begin_
  end
  def g_bfs_time(g, s)
    begin_ = _now()
    g_bfs(g, s)
    end_ = _now()
    return end_ - begin_
  end
  def main()
    dg = dg_make_graph().clone
    dg_add_pair(dg, 0, 1, 5)
    dg_add_pair(dg, 0, 2, 3)
    dg_add_pair(dg, 1, 3, 2)
    dg_add_pair(dg, 2, 3, 4)
    puts(((x = dg_dfs(dg, -2, -1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = dg_bfs(dg, -2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_str(dg_in_degree(dg, 3)))
    puts(_str(dg_out_degree(dg, 0)))
    puts(((x = dg_topological_sort(dg)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_str(dg_has_cycle(dg)))
    ug = g_make_graph().clone
    g_add_pair(ug, 0, 1, 1)
    g_add_pair(ug, 1, 2, 1)
    g_add_pair(ug, 2, 0, 1)
    puts(((x = g_dfs(ug, -2, -1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = g_bfs(ug, -2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(_str(g_degree(ug, 1)))
    puts(_str(g_has_cycle(ug)))
  end
  DirectedGraph = Struct.new(:graph, keyword_init: true)
  Graph = Struct.new(:graph, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
