# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def topology_sort(graph, vert, visited)
    visited[vert] = true
    order = [].clone
        __tmp1 = graph[vert]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |neighbour|
      if !visited[neighbour]
        order = _add(order, topology_sort(graph, neighbour, visited)).clone
      end
    end
    order = (order << (vert)).clone
    return order
  end
  def find_component(graph, vert, visited)
    visited[vert] = true
    comp = [vert].clone
        __tmp2 = graph[vert]
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |neighbour|
      if !visited[neighbour]
        comp = _add(comp, find_component(graph, neighbour, visited)).clone
      end
    end
    return comp
  end
  def strongly_connected_components(graph)
    n = graph.length
    visited = [].clone
    (0...n).each do |_|
      visited = (visited << (false)).clone
    end
    reversed = [].clone
    (0...n).each do |_|
      reversed = (reversed << ([])).clone
    end
    (0...n).each do |i|
            __tmp3 = graph[i]
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |neighbour|
        reversed[neighbour] = (reversed[neighbour] << (i))
      end
    end
    order = [].clone
    (0...n).each do |i|
      if !visited[i]
        order = _add(order, topology_sort(graph, i, visited)).clone
      end
    end
    visited = [].clone
    (0...n).each do |_|
      visited = (visited << (false)).clone
    end
    components = [].clone
    i = 0.clone
    while i < n
      v = order[n - i - 1]
      if !visited[v]
        comp = find_component(reversed, v, visited)
        components = (components << (comp)).clone
      end
      i = _add(i, 1).clone
    end
    return components
  end
  def main()
    test_graph_1 = [[2, 3], [0], [1], [4], []]
    test_graph_2 = [[1, 2, 3], [2], [0], [4], [5], [3]]
    puts(((x = strongly_connected_components(test_graph_1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = strongly_connected_components(test_graph_2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
