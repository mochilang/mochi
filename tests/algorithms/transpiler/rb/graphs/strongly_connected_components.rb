# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def topology_sort(graph, vert, visited)
    visited[vert] = true
    order = []
        __tmp1 = (__tmp2 = graph; __tmp2.is_a?(Hash) ? __tmp2[vert] : _idx(__tmp2, vert))
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |neighbour|
      if !(__tmp3 = visited; __tmp3.is_a?(Hash) ? __tmp3[neighbour] : _idx(__tmp3, neighbour))
        order = _add(order, topology_sort(graph, neighbour, visited))
      end
    end
    order = _append(order, vert)
    return order
  end
  def find_component(graph, vert, visited)
    visited[vert] = true
    comp = [vert]
        __tmp4 = (__tmp5 = graph; __tmp5.is_a?(Hash) ? __tmp5[vert] : _idx(__tmp5, vert))
    __tmp4 = [] if __tmp4.nil?
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |neighbour|
      if !(__tmp6 = visited; __tmp6.is_a?(Hash) ? __tmp6[neighbour] : _idx(__tmp6, neighbour))
        comp = _add(comp, find_component(graph, neighbour, visited))
      end
    end
    return comp
  end
  def strongly_connected_components(graph)
    n = _len(graph)
    visited = []
    (0...n).each do |_|
      visited = _append(visited, false)
    end
    reversed = []
    (0...n).each do |_|
      reversed = _append(reversed, [])
    end
    (0...n).each do |i|
            __tmp7 = (__tmp8 = graph; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      __tmp7 = [] if __tmp7.nil?
      if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
        __tmp7 = __tmp7.keys
      end
      __tmp7.each do |neighbour|
        reversed[neighbour] = _append((__tmp9 = reversed; __tmp9.is_a?(Hash) ? __tmp9[neighbour] : _idx(__tmp9, neighbour)), i)
      end
    end
    order = []
    (0...n).each do |i|
      if !(__tmp10 = visited; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
        order = _add(order, topology_sort(graph, i, visited))
      end
    end
    visited = []
    (0...n).each do |_|
      visited = _append(visited, false)
    end
    components = []
    i = 0
    while i < n
      v = (__tmp11 = order; __tmp11.is_a?(Hash) ? __tmp11[n - i - 1] : _idx(__tmp11, n - i - 1))
      if !(__tmp12 = visited; __tmp12.is_a?(Hash) ? __tmp12[v] : _idx(__tmp12, v))
        comp = find_component(reversed, v, visited)
        components = _append(components, comp)
      end
      i = _add(i, 1)
    end
    return components
  end
  def main()
    test_graph_1 = [[2, 3], [0], [1], [4], []]
    test_graph_2 = [[1, 2, 3], [2], [0], [4], [5], [3]]
    puts(((x = strongly_connected_components(test_graph_1)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = strongly_connected_components(test_graph_2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
