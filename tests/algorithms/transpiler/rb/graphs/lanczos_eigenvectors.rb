# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2.147483648e+09
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def absf(x)
    return (x < 0.0 ? -x : x)
  end
  def dot(a, b)
    s = 0.0
    i = 0
    while i < _len(a)
      s = _add(s, (__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = b; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return s
  end
  def vector_scale(v, s)
    res = []
    i = 0
    while i < _len(v)
      res = _append(res, (__tmp3 = v; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) * s)
      i = _add(i, 1)
    end
    return res
  end
  def vector_sub(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, (__tmp4 = a; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)) - (__tmp5 = b; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      i = _add(i, 1)
    end
    return res
  end
  def vector_add(a, b)
    res = []
    i = 0
    while i < _len(a)
      res = _append(res, _add((__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)), (__tmp7 = b; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))))
      i = _add(i, 1)
    end
    return res
  end
  def zeros_matrix(r, c)
    m = []
    i = 0
    while i < r
      row = []
      j = 0
      while j < c
        row = _append(row, 0.0)
        j = _add(j, 1)
      end
      m = _append(m, row)
      i = _add(i, 1)
    end
    return m
  end
  def column(m, idx)
    col = []
    i = 0
    while i < _len(m)
      col = _append(col, (__tmp8 = (__tmp9 = m; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[idx] : _idx(__tmp8, idx)))
      i = _add(i, 1)
    end
    return col
  end
  def validate_adjacency_list(graph)
    i = 0
    while i < _len(graph)
      j = 0
      while j < _len((__tmp10 = graph; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
        v = (__tmp11 = (__tmp12 = graph; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)); __tmp11.is_a?(Hash) ? __tmp11[j] : _idx(__tmp11, j))
        if v < 0 || v >= _len(graph)
          panic("Invalid neighbor")
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
  end
  def multiply_matrix_vector(graph, vector)
    n = _len(graph)
    if !_eq(_len(vector), n)
      panic("Vector length must match number of nodes")
    end
    result = []
    i = 0
    while i < n
      sum = 0.0
      j = 0
      while j < _len((__tmp13 = graph; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)))
        nb = (__tmp14 = (__tmp15 = graph; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)); __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j))
        sum = _add(sum, (__tmp16 = vector; __tmp16.is_a?(Hash) ? __tmp16[nb] : _idx(__tmp16, nb)))
        j = _add(j, 1)
      end
      result = _append(result, sum)
      i = _add(i, 1)
    end
    return result
  end
  def lanczos_iteration(graph, k)
    n = _len(graph)
    if k < 1 || k > n
      panic("invalid number of eigenvectors")
    end
    q = zeros_matrix(n, k)
    t = zeros_matrix(k, k)
    v = []
    i = 0
    while i < n
      v = _append(v, random())
      i = _add(i, 1)
    end
    ss = 0.0
    i = 0
    while i < n
      ss = _add(ss, (__tmp17 = v; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)) * (__tmp18 = v; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)))
      i = _add(i, 1)
    end
    vnorm = sqrtApprox(ss)
    i = 0
    while i < n
      (__tmp19 = q; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i))[0] = (__tmp20 = v; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)) / vnorm
      i = _add(i, 1)
    end
    beta = 0.0
    j = 0
    while j < k
      w = multiply_matrix_vector(graph, column(q, j))
      if j > 0
        w = vector_sub(w, vector_scale(column(q, j - 1), beta))
      end
      alpha = dot(column(q, j), w)
      w = vector_sub(w, vector_scale(column(q, j), alpha))
      ss2 = 0.0
      p = 0
      while p < n
        ss2 = _add(ss2, (__tmp21 = w; __tmp21.is_a?(Hash) ? __tmp21[p] : _idx(__tmp21, p)) * (__tmp22 = w; __tmp22.is_a?(Hash) ? __tmp22[p] : _idx(__tmp22, p)))
        p = _add(p, 1)
      end
      beta = sqrtApprox(ss2)
      (__tmp23 = t; __tmp23.is_a?(Hash) ? __tmp23[j] : _idx(__tmp23, j))[j] = alpha
      if j < k - 1
        (__tmp24 = t; __tmp24.is_a?(Hash) ? __tmp24[j] : _idx(__tmp24, j))[_add(j, 1)] = beta
        (__tmp25 = t; __tmp25.is_a?(Hash) ? __tmp25[_add(j, 1)] : _idx(__tmp25, _add(j, 1)))[j] = beta
        if beta > 1e-10
          wnorm = vector_scale(w, 1.0 / beta)
          r = 0
          while r < n
            (__tmp26 = q; __tmp26.is_a?(Hash) ? __tmp26[r] : _idx(__tmp26, r))[_add(j, 1)] = (__tmp27 = wnorm; __tmp27.is_a?(Hash) ? __tmp27[r] : _idx(__tmp27, r))
            r = _add(r, 1)
          end
        end
      end
      j = _add(j, 1)
    end
    return LanczosResult.new(t: t, q: q)
  end
  def jacobi_eigen(a_in, max_iter)
    n = _len(a_in)
    a = a_in
    v = zeros_matrix(n, n)
    i = 0
    while i < n
      (__tmp28 = v; __tmp28.is_a?(Hash) ? __tmp28[i] : _idx(__tmp28, i))[i] = 1.0
      i = _add(i, 1)
    end
    iter = 0
    while iter < max_iter
      p = 0
      q = 1
      max = absf((__tmp29 = (__tmp30 = a; __tmp30.is_a?(Hash) ? __tmp30[p] : _idx(__tmp30, p)); __tmp29.is_a?(Hash) ? __tmp29[q] : _idx(__tmp29, q)))
      i = 0
      while i < n
        j = _add(i, 1)
        while j < n
          val = absf((__tmp31 = (__tmp32 = a; __tmp32.is_a?(Hash) ? __tmp32[i] : _idx(__tmp32, i)); __tmp31.is_a?(Hash) ? __tmp31[j] : _idx(__tmp31, j)))
          if val > max
            max = val
            p = i
            q = j
          end
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      if max < 1e-08
        break
      end
      app = (__tmp33 = (__tmp34 = a; __tmp34.is_a?(Hash) ? __tmp34[p] : _idx(__tmp34, p)); __tmp33.is_a?(Hash) ? __tmp33[p] : _idx(__tmp33, p))
      aqq = (__tmp35 = (__tmp36 = a; __tmp36.is_a?(Hash) ? __tmp36[q] : _idx(__tmp36, q)); __tmp35.is_a?(Hash) ? __tmp35[q] : _idx(__tmp35, q))
      apq = (__tmp37 = (__tmp38 = a; __tmp38.is_a?(Hash) ? __tmp38[p] : _idx(__tmp38, p)); __tmp37.is_a?(Hash) ? __tmp37[q] : _idx(__tmp37, q))
      theta = (aqq - app) / (2.0 * apq)
      t = 1.0 / (_add(absf(theta), sqrtApprox(_add(theta * theta, 1.0))))
      if theta < 0.0
        t = -t
      end
      c = 1.0 / sqrtApprox(_add(1.0, t * t))
      s = t * c
      tau = s / (_add(1.0, c))
      (__tmp39 = a; __tmp39.is_a?(Hash) ? __tmp39[p] : _idx(__tmp39, p))[p] = app - t * apq
      (__tmp40 = a; __tmp40.is_a?(Hash) ? __tmp40[q] : _idx(__tmp40, q))[q] = _add(aqq, t * apq)
      (__tmp41 = a; __tmp41.is_a?(Hash) ? __tmp41[p] : _idx(__tmp41, p))[q] = 0.0
      (__tmp42 = a; __tmp42.is_a?(Hash) ? __tmp42[q] : _idx(__tmp42, q))[p] = 0.0
      k = 0
      while k < n
        if !_eq(k, p) && !_eq(k, q)
          akp = (__tmp43 = (__tmp44 = a; __tmp44.is_a?(Hash) ? __tmp44[k] : _idx(__tmp44, k)); __tmp43.is_a?(Hash) ? __tmp43[p] : _idx(__tmp43, p))
          akq = (__tmp45 = (__tmp46 = a; __tmp46.is_a?(Hash) ? __tmp46[k] : _idx(__tmp46, k)); __tmp45.is_a?(Hash) ? __tmp45[q] : _idx(__tmp45, q))
          (__tmp47 = a; __tmp47.is_a?(Hash) ? __tmp47[k] : _idx(__tmp47, k))[p] = akp - s * (_add(akq, tau * akp))
          (__tmp48 = a; __tmp48.is_a?(Hash) ? __tmp48[p] : _idx(__tmp48, p))[k] = (__tmp49 = (__tmp50 = a; __tmp50.is_a?(Hash) ? __tmp50[k] : _idx(__tmp50, k)); __tmp49.is_a?(Hash) ? __tmp49[p] : _idx(__tmp49, p))
          (__tmp51 = a; __tmp51.is_a?(Hash) ? __tmp51[k] : _idx(__tmp51, k))[q] = _add(akq, s * (akp - tau * akq))
          (__tmp52 = a; __tmp52.is_a?(Hash) ? __tmp52[q] : _idx(__tmp52, q))[k] = (__tmp53 = (__tmp54 = a; __tmp54.is_a?(Hash) ? __tmp54[k] : _idx(__tmp54, k)); __tmp53.is_a?(Hash) ? __tmp53[q] : _idx(__tmp53, q))
        end
        k = _add(k, 1)
      end
      k = 0
      while k < n
        vkp = (__tmp55 = (__tmp56 = v; __tmp56.is_a?(Hash) ? __tmp56[k] : _idx(__tmp56, k)); __tmp55.is_a?(Hash) ? __tmp55[p] : _idx(__tmp55, p))
        vkq = (__tmp57 = (__tmp58 = v; __tmp58.is_a?(Hash) ? __tmp58[k] : _idx(__tmp58, k)); __tmp57.is_a?(Hash) ? __tmp57[q] : _idx(__tmp57, q))
        (__tmp59 = v; __tmp59.is_a?(Hash) ? __tmp59[k] : _idx(__tmp59, k))[p] = vkp - s * (_add(vkq, tau * vkp))
        (__tmp60 = v; __tmp60.is_a?(Hash) ? __tmp60[k] : _idx(__tmp60, k))[q] = _add(vkq, s * (vkp - tau * vkq))
        k = _add(k, 1)
      end
      iter = _add(iter, 1)
    end
    eigenvalues = []
    i = 0
    while i < n
      eigenvalues = _append(eigenvalues, (__tmp61 = (__tmp62 = a; __tmp62.is_a?(Hash) ? __tmp62[i] : _idx(__tmp62, i)); __tmp61.is_a?(Hash) ? __tmp61[i] : _idx(__tmp61, i)))
      i = _add(i, 1)
    end
    return EigenResult.new(values: eigenvalues, vectors: v)
  end
  def matmul(a, b)
    rows = _len(a)
    cols = _len((__tmp63 = b; __tmp63.is_a?(Hash) ? __tmp63[0] : _idx(__tmp63, 0)))
    inner = _len(b)
    m = zeros_matrix(rows, cols)
    i = 0
    while i < rows
      j = 0
      while j < cols
        s = 0.0
        k = 0
        while k < inner
          s = _add(s, (__tmp64 = (__tmp65 = a; __tmp65.is_a?(Hash) ? __tmp65[i] : _idx(__tmp65, i)); __tmp64.is_a?(Hash) ? __tmp64[k] : _idx(__tmp64, k)) * (__tmp66 = (__tmp67 = b; __tmp67.is_a?(Hash) ? __tmp67[k] : _idx(__tmp67, k)); __tmp66.is_a?(Hash) ? __tmp66[j] : _idx(__tmp66, j)))
          k = _add(k, 1)
        end
        (__tmp68 = m; __tmp68.is_a?(Hash) ? __tmp68[i] : _idx(__tmp68, i))[j] = s
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return m
  end
  def sort_eigenpairs(vals, vecs)
    n = _len(vals)
    values = vals
    vectors = vecs
    i = 0
    while i < n
      j = 0
      while j < n - 1
        if (__tmp69 = values; __tmp69.is_a?(Hash) ? __tmp69[j] : _idx(__tmp69, j)) < (__tmp70 = values; __tmp70.is_a?(Hash) ? __tmp70[_add(j, 1)] : _idx(__tmp70, _add(j, 1)))
          tmp = (__tmp71 = values; __tmp71.is_a?(Hash) ? __tmp71[j] : _idx(__tmp71, j))
          values[j] = (__tmp72 = values; __tmp72.is_a?(Hash) ? __tmp72[_add(j, 1)] : _idx(__tmp72, _add(j, 1)))
          values[_add(j, 1)] = tmp
          r = 0
          while r < _len(vectors)
            tv = (__tmp73 = (__tmp74 = vectors; __tmp74.is_a?(Hash) ? __tmp74[r] : _idx(__tmp74, r)); __tmp73.is_a?(Hash) ? __tmp73[j] : _idx(__tmp73, j))
            (__tmp75 = vectors; __tmp75.is_a?(Hash) ? __tmp75[r] : _idx(__tmp75, r))[j] = (__tmp76 = (__tmp77 = vectors; __tmp77.is_a?(Hash) ? __tmp77[r] : _idx(__tmp77, r)); __tmp76.is_a?(Hash) ? __tmp76[_add(j, 1)] : _idx(__tmp76, _add(j, 1)))
            (__tmp78 = vectors; __tmp78.is_a?(Hash) ? __tmp78[r] : _idx(__tmp78, r))[_add(j, 1)] = tv
            r = _add(r, 1)
          end
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return EigenResult.new(values: values, vectors: vectors)
  end
  def find_lanczos_eigenvectors(graph, k)
    validate_adjacency_list(graph)
    res = lanczos_iteration(graph, k)
    eig = jacobi_eigen(res.t, 50)
    sorted = sort_eigenpairs(eig.values, eig.vectors)
    final_vectors = matmul(res.q, sorted.vectors)
    return EigenResult.new(values: sorted.values, vectors: final_vectors)
  end
  def list_to_string(arr)
    s = "["
    i = 0
    while i < _len(arr)
      s = _add(s, _str((__tmp79 = arr; __tmp79.is_a?(Hash) ? __tmp79[i] : _idx(__tmp79, i))))
      if i < _len(arr) - 1
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  def matrix_to_string(m)
    s = "["
    i = 0
    while i < _len(m)
      s = _add(s, list_to_string((__tmp80 = m; __tmp80.is_a?(Hash) ? __tmp80[i] : _idx(__tmp80, i))))
      if i < _len(m) - 1
        s = _add(s, "; ")
      end
      i = _add(i, 1)
    end
    return _add(s, "]")
  end
  $seed = 123456789
  Object.send(:remove_const, :LanczosResult) if Object.const_defined?(:LanczosResult)
  LanczosResult = Struct.new(:t, :q, keyword_init: true)
  Object.send(:remove_const, :EigenResult) if Object.const_defined?(:EigenResult)
  EigenResult = Struct.new(:values, :vectors, keyword_init: true)
  $graph = [[1, 2], [0, 2], [0, 1]]
  $result = find_lanczos_eigenvectors($graph, 2)
  puts(list_to_string($result.values))
  puts(matrix_to_string($result.vectors))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
