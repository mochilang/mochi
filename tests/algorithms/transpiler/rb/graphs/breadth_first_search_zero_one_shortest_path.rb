# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def new_adjacency_list(size)
    g = []
    i = 0
    while i < size
      g = _append(g, [])
      i = _add(i, 1)
    end
    return AdjacencyList.new(graph: g, size: size)
  end
  def add_edge(al, from_vertex, to_vertex, weight)
    if !(_eq(weight, 0) || _eq(weight, 1))
      panic("Edge weight must be either 0 or 1.")
    end
    if to_vertex < 0 || to_vertex >= al.size
      panic("Vertex indexes must be in [0; size).")
    end
    g = al.graph
    edges = (__tmp1 = g; __tmp1.is_a?(Hash) ? __tmp1[from_vertex] : _idx(__tmp1, from_vertex))
    g[from_vertex] = _append(edges, Edge.new(destination_vertex: to_vertex, weight: weight))
    al.graph = g
  end
  def push_front(q, v)
    res = [v]
    i = 0
    while i < _len(q)
      res = _append(res, (__tmp2 = q; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    return res
  end
  def pop_front(q)
    res = []
    i = 1
    while i < _len(q)
      res = _append(res, (__tmp3 = q; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
      i = _add(i, 1)
    end
    return res
  end
  def front(q)
    return (__tmp4 = q; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
  end
  def get_shortest_path(al, start_vertex, finish_vertex)
    queue = [start_vertex]
    distances = []
    i = 0
    while i < al.size
      distances = _append(distances, -1)
      i = _add(i, 1)
    end
    distances[start_vertex] = 0
    while _len(queue) > 0
      current_vertex = front(queue)
      queue = pop_front(queue)
      current_distance = (__tmp5 = distances; __tmp5.is_a?(Hash) ? __tmp5[current_vertex] : _idx(__tmp5, current_vertex))
      edges = (__tmp6 = al.graph; __tmp6.is_a?(Hash) ? __tmp6[current_vertex] : _idx(__tmp6, current_vertex))
      j = 0
      while j < _len(edges)
        edge = (__tmp7 = edges; __tmp7.is_a?(Hash) ? __tmp7[j] : _idx(__tmp7, j))
        new_distance = _add(current_distance, edge.weight)
        dest = edge.destination_vertex
        dest_distance = (__tmp8 = distances; __tmp8.is_a?(Hash) ? __tmp8[dest] : _idx(__tmp8, dest))
        if dest_distance >= 0 && new_distance >= dest_distance
          j = _add(j, 1)
          next
        end
        distances[dest] = new_distance
        if _eq(edge.weight, 0)
          queue = push_front(queue, dest)
        else
          queue = _append(queue, dest)
        end
        j = _add(j, 1)
      end
    end
    result = (__tmp9 = distances; __tmp9.is_a?(Hash) ? __tmp9[finish_vertex] : _idx(__tmp9, finish_vertex))
    if result < 0
      panic("No path from start_vertex to finish_vertex.")
    end
    return result
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Edge = Struct.new(:destination_vertex, :weight, keyword_init: true)
  Object.send(:remove_const, :AdjacencyList) if Object.const_defined?(:AdjacencyList)
  AdjacencyList = Struct.new(:graph, :size, keyword_init: true)
  $g = new_adjacency_list(11)
  add_edge($g, 0, 1, 0)
  add_edge($g, 0, 3, 1)
  add_edge($g, 1, 2, 0)
  add_edge($g, 2, 3, 0)
  add_edge($g, 4, 2, 1)
  add_edge($g, 4, 5, 1)
  add_edge($g, 4, 6, 1)
  add_edge($g, 5, 9, 0)
  add_edge($g, 6, 7, 1)
  add_edge($g, 7, 8, 1)
  add_edge($g, 8, 10, 1)
  add_edge($g, 9, 7, 0)
  add_edge($g, 9, 10, 1)
  puts(_str(get_shortest_path($g, 0, 3)))
  puts(_str(get_shortest_path($g, 4, 10)))
  puts(_str(get_shortest_path($g, 4, 8)))
  puts(_str(get_shortest_path($g, 0, 1)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
