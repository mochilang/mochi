# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def new_adjacency_list(size)
    g = [].clone
    i = 0.clone
    while i < size
      g = (g << ([])).clone
      i = _add(i, 1).clone
    end
    return AdjacencyList.new(graph: g, size: size)
  end
  def add_edge(al, from_vertex, to_vertex, weight)
    if !(weight == 0 || weight == 1)
      panic("Edge weight must be either 0 or 1.")
    end
    if to_vertex < 0 || to_vertex >= al.size
      panic("Vertex indexes must be in [0; size).")
    end
    g = al.graph.clone
    edges = g[from_vertex]
    g[from_vertex] = (edges << (Edge.new(destination_vertex: to_vertex, weight: weight)))
    al["graph"] = g
  end
  def push_front(q, v)
    res = [v].clone
    i = 0.clone
    while i < q.length
      res = (res << (q[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def pop_front(q)
    res = [].clone
    i = 1.clone
    while i < q.length
      res = (res << (q[i])).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def front(q)
    return q[0]
  end
  def get_shortest_path(al, start_vertex, finish_vertex)
    queue = [start_vertex].clone
    distances = [].clone
    i = 0.clone
    while i < al.size
      distances = (distances << (-1)).clone
      i = _add(i, 1).clone
    end
    distances[start_vertex] = 0
    while queue.length > 0
      current_vertex = front(queue)
      queue = pop_front(queue).clone
      current_distance = distances[current_vertex]
      edges = al.graph[current_vertex].clone
      j = 0.clone
      while j < edges.length
        edge = edges[j]
        new_distance = _add(current_distance, edge.weight)
        dest = edge.destination_vertex
        dest_distance = distances[dest]
        if dest_distance >= 0 && new_distance >= dest_distance
          j = _add(j, 1).clone
          next
        end
        distances[dest] = new_distance
        if edge.weight == 0
          queue = push_front(queue, dest).clone
        else
          queue = (queue << (dest)).clone
        end
        j = _add(j, 1).clone
      end
    end
    result = distances[finish_vertex]
    if result < 0
      panic("No path from start_vertex to finish_vertex.")
    end
    return result
  end
  Edge = Struct.new(:destination_vertex, :weight, keyword_init: true)
  AdjacencyList = Struct.new(:graph, :size, keyword_init: true)
  $g = new_adjacency_list(11)
  add_edge($g, 0, 1, 0)
  add_edge($g, 0, 3, 1)
  add_edge($g, 1, 2, 0)
  add_edge($g, 2, 3, 0)
  add_edge($g, 4, 2, 1)
  add_edge($g, 4, 5, 1)
  add_edge($g, 4, 6, 1)
  add_edge($g, 5, 9, 0)
  add_edge($g, 6, 7, 1)
  add_edge($g, 7, 8, 1)
  add_edge($g, 8, 10, 1)
  add_edge($g, 9, 7, 0)
  add_edge($g, 9, 10, 1)
  puts(_str(get_shortest_path($g, 0, 3)))
  puts(_str(get_shortest_path($g, 4, 10)))
  puts(_str(get_shortest_path($g, 4, 8)))
  puts(_str(get_shortest_path($g, 0, 1)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
