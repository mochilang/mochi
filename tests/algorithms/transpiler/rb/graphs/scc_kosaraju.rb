# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dfs(u, graph, visit, stack)
    if visit[u]
      return stack
    end
    visit[u] = true
        __tmp1 = graph[u]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      stack = dfs(v, graph, visit, stack).clone
    end
    stack = (stack << (u)).clone
    return stack
  end
  def dfs2(u, reversed_graph, visit, component)
    if visit[u]
      return component
    end
    visit[u] = true
    component = (component << (u)).clone
        __tmp2 = reversed_graph[u]
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |v|
      component = dfs2(v, reversed_graph, visit, component).clone
    end
    return component
  end
  def kosaraju(graph)
    n = graph.length
    reversed_graph = [].clone
    i = 0.clone
    while i < n
      reversed_graph = (reversed_graph << ([])).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < n
            __tmp3 = graph[i]
      if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
        __tmp3 = __tmp3.keys
      end
      __tmp3.each do |v|
        reversed_graph[v] = (reversed_graph[v] << (i))
      end
      i = _add(i, 1).clone
    end
    visit = [].clone
    i = 0.clone
    while i < n
      visit = (visit << (false)).clone
      i = _add(i, 1).clone
    end
    stack = [].clone
    i = 0.clone
    while i < n
      if visit[i] == false
        stack = dfs(i, graph, visit, stack).clone
      end
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < n
      visit[i] = false
      i = _add(i, 1).clone
    end
    scc = [].clone
    idx = stack.length - 1.clone
    while idx >= 0
      node = stack[idx]
      if visit[node] == false
        component = [].clone
        component = dfs2(node, reversed_graph, visit, component).clone
        scc = (scc << (component)).clone
      end
      idx = idx - 1.clone
    end
    return scc
  end
  def main()
    graph = [[1], [2], [0, 3], [4], []]
    comps = kosaraju(graph)
    i = 0.clone
    while i < comps.length
      puts(((x = comps[i]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      i = _add(i, 1).clone
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
