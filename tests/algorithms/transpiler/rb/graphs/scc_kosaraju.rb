# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def dfs(u, graph, visit, stack)
    if (__tmp1 = visit; __tmp1.is_a?(Hash) ? __tmp1[u] : _idx(__tmp1, u))
      return stack
    end
    visit[u] = true
        __tmp2 = (__tmp3 = graph; __tmp3.is_a?(Hash) ? __tmp3[u] : _idx(__tmp3, u))
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |v|
      stack = dfs(v, graph, visit, stack)
    end
    stack = _append(stack, u)
    return stack
  end
  def dfs2(u, reversed_graph, visit, component)
    if (__tmp4 = visit; __tmp4.is_a?(Hash) ? __tmp4[u] : _idx(__tmp4, u))
      return component
    end
    visit[u] = true
    component = _append(component, u)
        __tmp5 = (__tmp6 = reversed_graph; __tmp6.is_a?(Hash) ? __tmp6[u] : _idx(__tmp6, u))
    __tmp5 = [] if __tmp5.nil?
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |v|
      component = dfs2(v, reversed_graph, visit, component)
    end
    return component
  end
  def kosaraju(graph)
    n = _len(graph)
    reversed_graph = []
    i = 0
    while i < n
      reversed_graph = _append(reversed_graph, [])
      i = _add(i, 1)
    end
    i = 0
    while i < n
            __tmp7 = (__tmp8 = graph; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i))
      __tmp7 = [] if __tmp7.nil?
      if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
        __tmp7 = __tmp7.keys
      end
      __tmp7.each do |v|
        reversed_graph[v] = _append((__tmp9 = reversed_graph; __tmp9.is_a?(Hash) ? __tmp9[v] : _idx(__tmp9, v)), i)
      end
      i = _add(i, 1)
    end
    visit = []
    i = 0
    while i < n
      visit = _append(visit, false)
      i = _add(i, 1)
    end
    stack = []
    i = 0
    while i < n
      if _eq((__tmp10 = visit; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)), false)
        stack = dfs(i, graph, visit, stack)
      end
      i = _add(i, 1)
    end
    i = 0
    while i < n
      visit[i] = false
      i = _add(i, 1)
    end
    scc = []
    idx = _len(stack) - 1
    while idx >= 0
      node = (__tmp11 = stack; __tmp11.is_a?(Hash) ? __tmp11[idx] : _idx(__tmp11, idx))
      if _eq((__tmp12 = visit; __tmp12.is_a?(Hash) ? __tmp12[node] : _idx(__tmp12, node)), false)
        component = []
        component = dfs2(node, reversed_graph, visit, component)
        scc = _append(scc, component)
      end
      idx = idx - 1
    end
    return scc
  end
  def main()
    graph = [[1], [2], [0, 3], [4], []]
    comps = kosaraju(graph)
    i = 0
    while i < _len(comps)
      puts(((x = (__tmp13 = comps; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      i = _add(i, 1)
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
