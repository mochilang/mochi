# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def add_edge(graph, from, to)
    if _has(graph, from)
      graph[from] = _append((__tmp1 = graph; __tmp1.is_a?(Hash) ? __tmp1[from] : _idx(__tmp1, from)), to)
    else
      graph[from] = [to]
    end
  end
  def print_graph(graph)
        __tmp2 = graph.keys()
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |v|
      adj = (__tmp3 = graph; __tmp3.is_a?(Hash) ? __tmp3[v] : _idx(__tmp3, v))
      line = _add(_str(v), "  :  ")
      i = 0
      while i < _len(adj)
        line = _add(line, _str((__tmp4 = adj; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))))
        if i < _len(adj) - 1
          line = _add(line, " -> ")
        end
        i = _add(i, 1)
      end
      puts(line)
    end
  end
  def bfs(graph, start)
    visited = {}
    queue = []
    order = []
    queue = _append(queue, start)
    visited[start] = true
    head = 0
    while head < _len(queue)
      vertex = (__tmp5 = queue; __tmp5.is_a?(Hash) ? __tmp5[head] : _idx(__tmp5, head))
      head = _add(head, 1)
      order = _append(order, vertex)
      neighbors = (__tmp6 = graph; __tmp6.is_a?(Hash) ? __tmp6[vertex] : _idx(__tmp6, vertex))
      i = 0
      while i < _len(neighbors)
        neighbor = (__tmp7 = neighbors; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
        if !(_has(visited, neighbor))
          visited[neighbor] = true
          queue = _append(queue, neighbor)
        end
        i = _add(i, 1)
      end
    end
    return order
  end
  $g = {}
  add_edge($g, 0, 1)
  add_edge($g, 0, 2)
  add_edge($g, 1, 2)
  add_edge($g, 2, 0)
  add_edge($g, 2, 3)
  add_edge($g, 3, 3)
  print_graph($g)
  puts(((x = bfs($g, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
