# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def add_edge(graph, from, to)
    if graph.key?(from)
      graph[from] = (graph[from] << (to))
    else
      graph[from] = [to]
    end
  end
  def print_graph(graph)
        __tmp1 = graph.keys()
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      adj = graph[v]
      line = _add(_str(v), "  :  ")
      i = 0
      while i < adj.length
        line = _add(line, _str(adj[i]))
        if i < adj.length - 1
          line = _add(line, " -> ")
        end
        i = _add(i, 1)
      end
      puts(line)
    end
  end
  def bfs(graph, start)
    visited = {}
    queue = []
    order = []
    queue = (queue << (start))
    visited[start] = true
    head = 0
    while head < queue.length
      vertex = queue[head]
      head = _add(head, 1)
      order = (order << (vertex))
      neighbors = graph[vertex]
      i = 0
      while i < neighbors.length
        neighbor = neighbors[i]
        if !(visited.key?(neighbor))
          visited[neighbor] = true
          queue = (queue << (neighbor))
        end
        i = _add(i, 1)
      end
    end
    return order
  end
  $g = {}
  add_edge($g, 0, 1)
  add_edge($g, 0, 2)
  add_edge($g, 1, 2)
  add_edge($g, 2, 0)
  add_edge($g, 2, 3)
  add_edge($g, 3, 3)
  print_graph($g)
  puts(((x = bfs($g, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
