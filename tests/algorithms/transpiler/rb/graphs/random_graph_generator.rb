# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def rand()
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return $seed
  end
  def random()
    return (1.0 * rand()) / 2147483648.0
  end
  def complete_graph(vertices_number)
    graph = {}.clone
    i = 0.clone
    while i < vertices_number
      neighbors = [].clone
      j = 0.clone
      while j < vertices_number
        if j != i
          neighbors = (neighbors << (j)).clone
        end
        j = _add(j, 1).clone
      end
      graph[i] = neighbors
      i = _add(i, 1).clone
    end
    return graph
  end
  def random_graph(vertices_number, probability, directed)
    graph = {}.clone
    i = 0.clone
    while i < vertices_number
      graph[i] = []
      i = _add(i, 1).clone
    end
    if probability >= 1.0
      return complete_graph(vertices_number)
    end
    if probability <= 0.0
      return graph
    end
    i = 0.clone
    while i < vertices_number
      j = _add(i, 1).clone
      while j < vertices_number
        if random() < probability
          graph[i] = (graph[i] << (j))
          if !directed
            graph[j] = (graph[j] << (i))
          end
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return graph
  end
  def main()
    $seed = 1.clone
    g1 = random_graph(4, 0.5, false)
    puts(g1)
    $seed = 1.clone
    g2 = random_graph(4, 0.5, true)
    puts(g2)
  end
  $seed = 1.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
