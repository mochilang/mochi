# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def uf_make(n)
    p = [].clone
    r = [].clone
    i = 0.clone
    while i < n
      p = (p << (i)).clone
      r = (r << (0)).clone
      i = _add(i, 1).clone
    end
    return UF.new(parent: p, rank: r)
  end
  def uf_find(uf, x)
    p = uf.parent.clone
    if p[x] != x
      res = uf_find(UF.new(parent: p, rank: uf.rank), p[x])
      p = res.uf.parent.clone
      p[x] = res.root
      return FindRes.new(root: res.root, uf: UF.new(parent: p, rank: res.uf.rank))
    end
    return FindRes.new(root: x, uf: uf)
  end
  def uf_union(uf, x, y)
    fr1 = uf_find(uf, x)
    uf1 = fr1.uf.clone
    root1 = fr1.root
    fr2 = uf_find(uf1, y)
    uf1 = fr2.uf.clone
    root2 = fr2.root
    if root1 == root2
      return uf1
    end
    p = uf1.parent.clone
    r = uf1.rank.clone
    if r[root1] > r[root2]
      p[root2] = root1
    else
      if r[root1] < r[root2]
        p[root1] = root2
      else
        p[root2] = root1
        r[root1] = _add(r[root1], 1)
      end
    end
    return UF.new(parent: p, rank: r)
  end
  def boruvka(n, edges)
    uf = uf_make(n).clone
    num_components = n.clone
    mst = [].clone
    while num_components > 1
      cheap = [].clone
      i = 0.clone
      while i < n
        cheap = (cheap << (0 - 1)).clone
        i = _add(i, 1).clone
      end
      idx = 0.clone
      while idx < edges.length
        e = edges[idx]
        fr1 = uf_find(uf, e.u)
        uf = fr1.uf.clone
        set1 = fr1.root
        fr2 = uf_find(uf, e.v)
        uf = fr2.uf.clone
        set2 = fr2.root
        if set1 != set2
          if cheap[set1] == 0 - 1 || edges[cheap[set1]].w > e.w
            cheap[set1] = idx
          end
          if cheap[set2] == 0 - 1 || edges[cheap[set2]].w > e.w
            cheap[set2] = idx
          end
        end
        idx = _add(idx, 1).clone
      end
      v = 0.clone
      while v < n
        idxe = cheap[v]
        if idxe != 0 - 1
          e = edges[idxe]
          fr1 = uf_find(uf, e.u)
          uf = fr1.uf.clone
          set1 = fr1.root
          fr2 = uf_find(uf, e.v)
          uf = fr2.uf.clone
          set2 = fr2.root
          if set1 != set2
            mst = (mst << (e)).clone
            uf = uf_union(uf, set1, set2).clone
            num_components = num_components - 1.clone
          end
        end
        v = _add(v, 1).clone
      end
    end
    return mst
  end
  def main()
    edges = [Edge.new(u: 0, v: 1, w: 1), Edge.new(u: 0, v: 2, w: 2), Edge.new(u: 2, v: 3, w: 3)]
    mst = boruvka(4, edges)
        __tmp1 = mst
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |e|
      puts(_add(_add(_add(_add(_str(e.u), " - "), _str(e.v)), " : "), _str(e.w)))
    end
  end
  Edge = Struct.new(:u, :v, :w, keyword_init: true)
  UF = Struct.new(:parent, :rank, keyword_init: true)
  FindRes = Struct.new(:root, :uf, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
