# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def uf_make(n)
    p = []
    r = []
    i = 0
    while i < n
      p = _append(p, i)
      r = _append(r, 0)
      i = _add(i, 1)
    end
    return UF.new(parent: p, rank: r)
  end
  def uf_find(uf, x)
    p = uf.parent
    if !_eq((__tmp1 = p; __tmp1.is_a?(Hash) ? __tmp1[x] : _idx(__tmp1, x)), x)
      res = uf_find(UF.new(parent: p, rank: uf.rank), (__tmp2 = p; __tmp2.is_a?(Hash) ? __tmp2[x] : _idx(__tmp2, x)))
      p = res.uf.parent
      p[x] = res.root
      return FindRes.new(root: res.root, uf: UF.new(parent: p, rank: res.uf.rank))
    end
    return FindRes.new(root: x, uf: uf)
  end
  def uf_union(uf, x, y)
    fr1 = uf_find(uf, x)
    uf1 = fr1.uf
    root1 = fr1.root
    fr2 = uf_find(uf1, y)
    uf1 = fr2.uf
    root2 = fr2.root
    if _eq(root1, root2)
      return uf1
    end
    p = uf1.parent
    r = uf1.rank
    if (__tmp3 = r; __tmp3.is_a?(Hash) ? __tmp3[root1] : _idx(__tmp3, root1)) > (__tmp4 = r; __tmp4.is_a?(Hash) ? __tmp4[root2] : _idx(__tmp4, root2))
      p[root2] = root1
    else
      if (__tmp5 = r; __tmp5.is_a?(Hash) ? __tmp5[root1] : _idx(__tmp5, root1)) < (__tmp6 = r; __tmp6.is_a?(Hash) ? __tmp6[root2] : _idx(__tmp6, root2))
        p[root1] = root2
      else
        p[root2] = root1
        r[root1] = _add((__tmp7 = r; __tmp7.is_a?(Hash) ? __tmp7[root1] : _idx(__tmp7, root1)), 1)
      end
    end
    return UF.new(parent: p, rank: r)
  end
  def boruvka(n, edges)
    uf = uf_make(n)
    num_components = n
    mst = []
    while num_components > 1
      cheap = []
      i = 0
      while i < n
        cheap = _append(cheap, 0 - 1)
        i = _add(i, 1)
      end
      idx = 0
      while idx < _len(edges)
        e = (__tmp8 = edges; __tmp8.is_a?(Hash) ? __tmp8[idx] : _idx(__tmp8, idx))
        fr1 = uf_find(uf, e.u)
        uf = fr1.uf
        set1 = fr1.root
        fr2 = uf_find(uf, e.v)
        uf = fr2.uf
        set2 = fr2.root
        if !_eq(set1, set2)
          if _eq((__tmp9 = cheap; __tmp9.is_a?(Hash) ? __tmp9[set1] : _idx(__tmp9, set1)), 0 - 1) || (__tmp10 = edges; __tmp10.is_a?(Hash) ? __tmp10[(__tmp11 = cheap; __tmp11.is_a?(Hash) ? __tmp11[set1] : _idx(__tmp11, set1))] : _idx(__tmp10, (__tmp12 = cheap; __tmp12.is_a?(Hash) ? __tmp12[set1] : _idx(__tmp12, set1)))).w > e.w
            cheap[set1] = idx
          end
          if _eq((__tmp13 = cheap; __tmp13.is_a?(Hash) ? __tmp13[set2] : _idx(__tmp13, set2)), 0 - 1) || (__tmp14 = edges; __tmp14.is_a?(Hash) ? __tmp14[(__tmp15 = cheap; __tmp15.is_a?(Hash) ? __tmp15[set2] : _idx(__tmp15, set2))] : _idx(__tmp14, (__tmp16 = cheap; __tmp16.is_a?(Hash) ? __tmp16[set2] : _idx(__tmp16, set2)))).w > e.w
            cheap[set2] = idx
          end
        end
        idx = _add(idx, 1)
      end
      v = 0
      while v < n
        idxe = (__tmp17 = cheap; __tmp17.is_a?(Hash) ? __tmp17[v] : _idx(__tmp17, v))
        if !_eq(idxe, 0 - 1)
          e = (__tmp18 = edges; __tmp18.is_a?(Hash) ? __tmp18[idxe] : _idx(__tmp18, idxe))
          fr1 = uf_find(uf, e.u)
          uf = fr1.uf
          set1 = fr1.root
          fr2 = uf_find(uf, e.v)
          uf = fr2.uf
          set2 = fr2.root
          if !_eq(set1, set2)
            mst = _append(mst, e)
            uf = uf_union(uf, set1, set2)
            num_components = num_components - 1
          end
        end
        v = _add(v, 1)
      end
    end
    return mst
  end
  def main()
    edges = [Edge.new(u: 0, v: 1, w: 1), Edge.new(u: 0, v: 2, w: 2), Edge.new(u: 2, v: 3, w: 3)]
    mst = boruvka(4, edges)
        __tmp19 = mst
    __tmp19 = [] if __tmp19.nil?
    if __tmp19.respond_to?(:keys) && !__tmp19.is_a?(String)
      __tmp19 = __tmp19.keys
    end
    __tmp19.each do |e|
      puts(_add(_add(_add(_add(_str(e.u), " - "), _str(e.v)), " : "), _str(e.w)))
    end
  end
  Object.send(:remove_const, :Edge) if Object.const_defined?(:Edge)
  Edge = Struct.new(:u, :v, :w, keyword_init: true)
  Object.send(:remove_const, :UF) if Object.const_defined?(:UF)
  UF = Struct.new(:parent, :rank, keyword_init: true)
  Object.send(:remove_const, :FindRes) if Object.const_defined?(:FindRes)
  FindRes = Struct.new(:root, :uf, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
