# Generated by Mochi transpiler v0.10.64 on 2025-08-13 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def iabs(x)
    if x < 0
      return -x
    end
    return x
  end
  def search(grid, init, goal, cost, heuristic)
    closed = []
    r = 0
    while r < _len(grid)
      row = []
      c = 0
      while c < _len((__tmp1 = grid; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))
        row = (row + [0])
        c = _add(c, 1)
      end
      closed = (closed + [row])
      r = _add(r, 1)
    end
    (__tmp2 = closed; __tmp2.is_a?(Hash) ? __tmp2[(__tmp3 = init; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))] : _idx(__tmp2, (__tmp4 = init; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))))[(__tmp5 = init; __tmp5.is_a?(Hash) ? __tmp5[1] : _idx(__tmp5, 1))] = 1
    action = []
    r = 0
    while r < _len(grid)
      row = []
      c = 0
      while c < _len((__tmp6 = grid; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
        row = (row + [0])
        c = _add(c, 1)
      end
      action = (action + [row])
      r = _add(r, 1)
    end
    x = (__tmp7 = init; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
    y = (__tmp8 = init; __tmp8.is_a?(Hash) ? __tmp8[1] : _idx(__tmp8, 1))
    g = 0
    f = _add(g, (__tmp9 = (__tmp10 = heuristic; __tmp10.is_a?(Hash) ? __tmp10[x] : _idx(__tmp10, x)); __tmp9.is_a?(Hash) ? __tmp9[y] : _idx(__tmp9, y)))
    cell = [[f, g, x, y]]
    found = false
    resign = false
    while (!found) && (!resign)
      if _eq(_len(cell), 0)
        panic("Algorithm is unable to find solution")
      else
        best_i = 0
        best_f = (__tmp11 = (__tmp12 = cell; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0)); __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0))
        i = 1
        while i < _len(cell)
          if (__tmp13 = (__tmp14 = cell; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)) < best_f
            best_f = (__tmp15 = (__tmp16 = cell; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)); __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0))
            best_i = i
          end
          i = _add(i, 1)
        end
        next_cell = (__tmp17 = cell; __tmp17.is_a?(Hash) ? __tmp17[best_i] : _idx(__tmp17, best_i))
        new_cell = []
        i = 0
        while i < _len(cell)
          if !_eq(i, best_i)
            new_cell = (new_cell + [(__tmp18 = cell; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))])
          end
          i = _add(i, 1)
        end
        cell = new_cell
        x = (__tmp19 = next_cell; __tmp19.is_a?(Hash) ? __tmp19[2] : _idx(__tmp19, 2))
        y = (__tmp20 = next_cell; __tmp20.is_a?(Hash) ? __tmp20[3] : _idx(__tmp20, 3))
        g = (__tmp21 = next_cell; __tmp21.is_a?(Hash) ? __tmp21[1] : _idx(__tmp21, 1))
        if _eq(x, (__tmp22 = goal; __tmp22.is_a?(Hash) ? __tmp22[0] : _idx(__tmp22, 0))) && _eq(y, (__tmp23 = goal; __tmp23.is_a?(Hash) ? __tmp23[1] : _idx(__tmp23, 1)))
          found = true
        else
          d = 0
          while d < _len($DIRECTIONS)
            x2 = _add(x, (__tmp24 = (__tmp25 = $DIRECTIONS; __tmp25.is_a?(Hash) ? __tmp25[d] : _idx(__tmp25, d)); __tmp24.is_a?(Hash) ? __tmp24[0] : _idx(__tmp24, 0)))
            y2 = _add(y, (__tmp26 = (__tmp27 = $DIRECTIONS; __tmp27.is_a?(Hash) ? __tmp27[d] : _idx(__tmp27, d)); __tmp26.is_a?(Hash) ? __tmp26[1] : _idx(__tmp26, 1)))
            if x2 >= 0 && x2 < _len(grid) && y2 >= 0 && y2 < _len((__tmp28 = grid; __tmp28.is_a?(Hash) ? __tmp28[0] : _idx(__tmp28, 0))) && _eq((__tmp29 = (__tmp30 = closed; __tmp30.is_a?(Hash) ? __tmp30[x2] : _idx(__tmp30, x2)); __tmp29.is_a?(Hash) ? __tmp29[y2] : _idx(__tmp29, y2)), 0) && _eq((__tmp31 = (__tmp32 = grid; __tmp32.is_a?(Hash) ? __tmp32[x2] : _idx(__tmp32, x2)); __tmp31.is_a?(Hash) ? __tmp31[y2] : _idx(__tmp31, y2)), 0)
              g2 = _add(g, cost)
              f2 = _add(g2, (__tmp33 = (__tmp34 = heuristic; __tmp34.is_a?(Hash) ? __tmp34[x2] : _idx(__tmp34, x2)); __tmp33.is_a?(Hash) ? __tmp33[y2] : _idx(__tmp33, y2)))
              cell = (cell + [[f2, g2, x2, y2]])
              (__tmp35 = closed; __tmp35.is_a?(Hash) ? __tmp35[x2] : _idx(__tmp35, x2))[y2] = 1
              (__tmp36 = action; __tmp36.is_a?(Hash) ? __tmp36[x2] : _idx(__tmp36, x2))[y2] = d
            end
            d = _add(d, 1)
          end
        end
      end
    end
    invpath = []
    x = (__tmp37 = goal; __tmp37.is_a?(Hash) ? __tmp37[0] : _idx(__tmp37, 0))
    y = (__tmp38 = goal; __tmp38.is_a?(Hash) ? __tmp38[1] : _idx(__tmp38, 1))
    invpath = (invpath + [[x, y]])
    while !_eq(x, (__tmp39 = init; __tmp39.is_a?(Hash) ? __tmp39[0] : _idx(__tmp39, 0))) || !_eq(y, (__tmp40 = init; __tmp40.is_a?(Hash) ? __tmp40[1] : _idx(__tmp40, 1)))
      dir = (__tmp41 = (__tmp42 = action; __tmp42.is_a?(Hash) ? __tmp42[x] : _idx(__tmp42, x)); __tmp41.is_a?(Hash) ? __tmp41[y] : _idx(__tmp41, y))
      x2 = x - (__tmp43 = (__tmp44 = $DIRECTIONS; __tmp44.is_a?(Hash) ? __tmp44[dir] : _idx(__tmp44, dir)); __tmp43.is_a?(Hash) ? __tmp43[0] : _idx(__tmp43, 0))
      y2 = y - (__tmp45 = (__tmp46 = $DIRECTIONS; __tmp46.is_a?(Hash) ? __tmp46[dir] : _idx(__tmp46, dir)); __tmp45.is_a?(Hash) ? __tmp45[1] : _idx(__tmp45, 1))
      x = x2
      y = y2
      invpath = (invpath + [[x, y]])
    end
    path = []
    idx = _len(invpath) - 1
    while idx >= 0
      path = (path + [(__tmp47 = invpath; __tmp47.is_a?(Hash) ? __tmp47[idx] : _idx(__tmp47, idx))])
      idx = idx - 1
    end
    return SearchResult.new(path: path, action: action)
  end
  def main()
    grid = [[0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0]]
    init = [0, 0]
    goal = [_len(grid) - 1, _len((__tmp48 = grid; __tmp48.is_a?(Hash) ? __tmp48[0] : _idx(__tmp48, 0))) - 1]
    cost = 1
    heuristic = []
    i = 0
    while i < _len(grid)
      row = []
      j = 0
      while j < _len((__tmp49 = grid; __tmp49.is_a?(Hash) ? __tmp49[0] : _idx(__tmp49, 0)))
        h = _add(iabs(i - (__tmp50 = goal; __tmp50.is_a?(Hash) ? __tmp50[0] : _idx(__tmp50, 0))), iabs(j - (__tmp51 = goal; __tmp51.is_a?(Hash) ? __tmp51[1] : _idx(__tmp51, 1))))
        if _eq((__tmp52 = (__tmp53 = grid; __tmp53.is_a?(Hash) ? __tmp53[i] : _idx(__tmp53, i)); __tmp52.is_a?(Hash) ? __tmp52[j] : _idx(__tmp52, j)), 1)
          row = (row + [99])
        else
          row = (row + [h])
        end
        j = _add(j, 1)
      end
      heuristic = (heuristic + [row])
      i = _add(i, 1)
    end
    result = search(grid, init, goal, cost, heuristic)
    puts("ACTION MAP")
    rr = 0
    while rr < _len(result.action)
      puts(((x = (__tmp54 = result.action; __tmp54.is_a?(Hash) ? __tmp54[rr] : _idx(__tmp54, rr))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      rr = _add(rr, 1)
    end
    p = 0
    while p < _len(result.path)
      puts(((x = (__tmp55 = result.path; __tmp55.is_a?(Hash) ? __tmp55[p] : _idx(__tmp55, p))); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      p = _add(p, 1)
    end
  end
  $DIRECTIONS = [[-1, 0], [0, -1], [1, 0], [0, 1]]
  Object.send(:remove_const, :SearchResult) if Object.const_defined?(:SearchResult)
  SearchResult = Struct.new(:path, :action, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
