# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def iabs(x)
    if x < 0
      return -x
    end
    return x
  end
  def search(grid, init, goal, cost, heuristic)
    closed = []
    r = 0
    while r < grid.length
      row = []
      c = 0
      while c < grid[0].length
        row = (row << (0))
        c = _add(c, 1)
      end
      closed = (closed << (row))
      r = _add(r, 1)
    end
    closed[init[0]][init[1]] = 1
    action = []
    r = 0
    while r < grid.length
      row = []
      c = 0
      while c < grid[0].length
        row = (row << (0))
        c = _add(c, 1)
      end
      action = (action << (row))
      r = _add(r, 1)
    end
    x = init[0]
    y = init[1]
    g = 0
    f = _add(g, heuristic[x][y])
    cell = [[f, g, x, y]]
    found = false
    resign = false
    while (!found) && (!resign)
      if cell.length == 0
        panic("Algorithm is unable to find solution")
      else
        best_i = 0
        best_f = cell[0][0]
        i = 1
        while i < cell.length
          if cell[i][0] < best_f
            best_f = cell[i][0]
            best_i = i
          end
          i = _add(i, 1)
        end
        next_cell = cell[best_i]
        new_cell = []
        i = 0
        while i < cell.length
          if i != best_i
            new_cell = (new_cell << (cell[i]))
          end
          i = _add(i, 1)
        end
        cell = new_cell
        x = next_cell[2]
        y = next_cell[3]
        g = next_cell[1]
        if x == goal[0] && y == goal[1]
          found = true
        else
          d = 0
          while d < $DIRECTIONS.length
            x2 = _add(x, $DIRECTIONS[d][0])
            y2 = _add(y, $DIRECTIONS[d][1])
            if x2 >= 0 && x2 < grid.length && y2 >= 0 && y2 < grid[0].length && closed[x2][y2] == 0 && grid[x2][y2] == 0
              g2 = _add(g, cost)
              f2 = _add(g2, heuristic[x2][y2])
              cell = (cell << ([f2, g2, x2, y2]))
              closed[x2][y2] = 1
              action[x2][y2] = d
            end
            d = _add(d, 1)
          end
        end
      end
    end
    invpath = []
    x = goal[0]
    y = goal[1]
    invpath = (invpath << ([x, y]))
    while x != init[0] || y != init[1]
      dir = action[x][y]
      x2 = x - $DIRECTIONS[dir][0]
      y2 = y - $DIRECTIONS[dir][1]
      x = x2
      y = y2
      invpath = (invpath << ([x, y]))
    end
    path = []
    idx = invpath.length - 1
    while idx >= 0
      path = (path << (invpath[idx]))
      idx = idx - 1
    end
    return SearchResult.new(path: path, action: action)
  end
  def main()
    grid = [[0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0]]
    init = [0, 0]
    goal = [grid.length - 1, grid[0].length - 1]
    cost = 1
    heuristic = []
    i = 0
    while i < grid.length
      row = []
      j = 0
      while j < grid[0].length
        h = _add(iabs(i - goal[0]), iabs(j - goal[1]))
        if grid[i][j] == 1
          row = (row << (99))
        else
          row = (row << (h))
        end
        j = _add(j, 1)
      end
      heuristic = (heuristic << (row))
      i = _add(i, 1)
    end
    result = search(grid, init, goal, cost, heuristic)
    puts("ACTION MAP")
    rr = 0
    while rr < result.action.length
      puts(((x = result.action[rr]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      rr = _add(rr, 1)
    end
    p = 0
    while p < result.path.length
      puts(((x = result.path[p]); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
      p = _add(p, 1)
    end
  end
  $DIRECTIONS = [[-1, 0], [0, -1], [1, 0], [0, 1]]
  SearchResult = Struct.new(:path, :action, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
