# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def create_graph(vertices, edges, directed)
    adj = {}
        __tmp1 = vertices
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      adj[v] = []
    end
        __tmp2 = edges
    __tmp2 = [] if __tmp2.nil?
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |e|
      s = (__tmp3 = e; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
      d = (__tmp4 = e; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1))
      if !(_has(adj, s))
        adj[s] = []
      end
      if !(_has(adj, d))
        adj[d] = []
      end
      adj[s] = _append((__tmp5 = adj; __tmp5.is_a?(Hash) ? __tmp5[s] : _idx(__tmp5, s)), d)
      if !directed
        adj[d] = _append((__tmp6 = adj; __tmp6.is_a?(Hash) ? __tmp6[d] : _idx(__tmp6, d)), s)
      end
    end
    return Graph.new(adj: adj, directed: directed)
  end
  def add_vertex(graph, v)
    if _has(graph.adj, v)
      panic("vertex exists")
    end
    adj = {}
        __tmp7 = graph.adj.keys()
    __tmp7 = [] if __tmp7.nil?
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |k|
      adj[k] = (__tmp8 = graph.adj; __tmp8.is_a?(Hash) ? __tmp8[k] : _idx(__tmp8, k))
    end
    adj[v] = []
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def remove_from_list(lst, value)
    res = []
    i = 0
    while i < _len(lst)
      if !_eq((__tmp9 = lst; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)), value)
        res = _append(res, (__tmp10 = lst; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def remove_key(m, key)
    res = {}
        __tmp11 = m.keys()
    __tmp11 = [] if __tmp11.nil?
    if __tmp11.respond_to?(:keys) && !__tmp11.is_a?(String)
      __tmp11 = __tmp11.keys
    end
    __tmp11.each do |k|
      if !_eq(k, key)
        res[k] = (__tmp12 = m; __tmp12.is_a?(Hash) ? __tmp12[k] : _idx(__tmp12, k))
      end
    end
    return res
  end
  def add_edge(graph, s, d)
    if ((!(_has(graph.adj, s))) || (!(_has(graph.adj, d))))
      panic("vertex missing")
    end
    if contains_edge(graph, s, d)
      panic("edge exists")
    end
    adj = {}
        __tmp13 = graph.adj.keys()
    __tmp13 = [] if __tmp13.nil?
    if __tmp13.respond_to?(:keys) && !__tmp13.is_a?(String)
      __tmp13 = __tmp13.keys
    end
    __tmp13.each do |k|
      adj[k] = (__tmp14 = graph.adj; __tmp14.is_a?(Hash) ? __tmp14[k] : _idx(__tmp14, k))
    end
    list_s = (__tmp15 = adj; __tmp15.is_a?(Hash) ? __tmp15[s] : _idx(__tmp15, s))
    list_s = _append(list_s, d)
    adj[s] = list_s
    if !graph.directed
      list_d = (__tmp16 = adj; __tmp16.is_a?(Hash) ? __tmp16[d] : _idx(__tmp16, d))
      list_d = _append(list_d, s)
      adj[d] = list_d
    end
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def remove_edge(graph, s, d)
    if ((!(_has(graph.adj, s))) || (!(_has(graph.adj, d))))
      panic("vertex missing")
    end
    if !contains_edge(graph, s, d)
      panic("edge missing")
    end
    adj = {}
        __tmp17 = graph.adj.keys()
    __tmp17 = [] if __tmp17.nil?
    if __tmp17.respond_to?(:keys) && !__tmp17.is_a?(String)
      __tmp17 = __tmp17.keys
    end
    __tmp17.each do |k|
      adj[k] = (__tmp18 = graph.adj; __tmp18.is_a?(Hash) ? __tmp18[k] : _idx(__tmp18, k))
    end
    adj[s] = remove_from_list((__tmp19 = adj; __tmp19.is_a?(Hash) ? __tmp19[s] : _idx(__tmp19, s)), d)
    if !graph.directed
      adj[d] = remove_from_list((__tmp20 = adj; __tmp20.is_a?(Hash) ? __tmp20[d] : _idx(__tmp20, d)), s)
    end
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def remove_vertex(graph, v)
    if !(_has(graph.adj, v))
      panic("vertex missing")
    end
    adj = {}
        __tmp21 = graph.adj.keys()
    __tmp21 = [] if __tmp21.nil?
    if __tmp21.respond_to?(:keys) && !__tmp21.is_a?(String)
      __tmp21 = __tmp21.keys
    end
    __tmp21.each do |k|
      if !_eq(k, v)
        adj[k] = remove_from_list((__tmp22 = graph.adj; __tmp22.is_a?(Hash) ? __tmp22[k] : _idx(__tmp22, k)), v)
      end
    end
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def contains_vertex(graph, v)
    return _has(graph.adj, v)
  end
  def contains_edge(graph, s, d)
    if ((!(_has(graph.adj, s))) || (!(_has(graph.adj, d))))
      panic("vertex missing")
    end
        __tmp23 = (__tmp24 = graph.adj; __tmp24.is_a?(Hash) ? __tmp24[s] : _idx(__tmp24, s))
    __tmp23 = [] if __tmp23.nil?
    if __tmp23.respond_to?(:keys) && !__tmp23.is_a?(String)
      __tmp23 = __tmp23.keys
    end
    __tmp23.each do |x|
      if _eq(x, d)
        return true
      end
    end
    return false
  end
  def clear_graph(graph)
    return Graph.new(adj: {}, directed: graph.directed)
  end
  def to_string(graph)
    return _str(graph.adj)
  end
  def main()
    vertices = ["1", "2", "3", "4"]
    edges = [["1", "2"], ["2", "3"], ["3", "4"]]
    g = create_graph(vertices, edges, false)
    puts(to_string(g))
    g = add_vertex(g, "5")
    g = add_edge(g, "4", "5")
    puts(_str(contains_edge(g, "4", "5")))
    g = remove_edge(g, "1", "2")
    g = remove_vertex(g, "3")
    puts(to_string(g))
  end
  Object.send(:remove_const, :Graph) if Object.const_defined?(:Graph)
  Graph = Struct.new(:adj, :directed, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
