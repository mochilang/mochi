# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def create_graph(vertices, edges, directed)
    adj = {}.clone
        __tmp1 = vertices
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |v|
      adj[v] = []
    end
        __tmp2 = edges
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |e|
      s = e[0]
      d = e[1]
      if !(adj.key?(s))
        adj[s] = []
      end
      if !(adj.key?(d))
        adj[d] = []
      end
      adj[s] = (adj[s] << (d))
      if !directed
        adj[d] = (adj[d] << (s))
      end
    end
    return Graph.new(adj: adj, directed: directed)
  end
  def add_vertex(graph, v)
    if graph.adj.key?(v)
      panic("vertex exists")
    end
    adj = {}.clone
        __tmp3 = graph.adj.keys()
    if __tmp3.respond_to?(:keys) && !__tmp3.is_a?(String)
      __tmp3 = __tmp3.keys
    end
    __tmp3.each do |k|
      adj[k] = graph.adj[k]
    end
    adj[v] = []
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def remove_from_list(lst, value)
    res = [].clone
    i = 0.clone
    while i < lst.length
      if lst[i] != value
        res = (res << (lst[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def remove_key(m, key)
    res = {}.clone
        __tmp4 = m.keys()
    if __tmp4.respond_to?(:keys) && !__tmp4.is_a?(String)
      __tmp4 = __tmp4.keys
    end
    __tmp4.each do |k|
      if k != key
        res[k] = m[k]
      end
    end
    return res
  end
  def add_edge(graph, s, d)
    if ((!(graph.adj.key?(s))) || (!(graph.adj.key?(d))))
      panic("vertex missing")
    end
    if contains_edge(graph, s, d)
      panic("edge exists")
    end
    adj = {}.clone
        __tmp5 = graph.adj.keys()
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |k|
      adj[k] = graph.adj[k]
    end
    list_s = adj[s].clone
    list_s = (list_s << (d)).clone
    adj[s] = list_s
    if !graph.directed
      list_d = adj[d].clone
      list_d = (list_d << (s)).clone
      adj[d] = list_d
    end
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def remove_edge(graph, s, d)
    if ((!(graph.adj.key?(s))) || (!(graph.adj.key?(d))))
      panic("vertex missing")
    end
    if !contains_edge(graph, s, d)
      panic("edge missing")
    end
    adj = {}.clone
        __tmp6 = graph.adj.keys()
    if __tmp6.respond_to?(:keys) && !__tmp6.is_a?(String)
      __tmp6 = __tmp6.keys
    end
    __tmp6.each do |k|
      adj[k] = graph.adj[k]
    end
    adj[s] = remove_from_list(adj[s], d)
    if !graph.directed
      adj[d] = remove_from_list(adj[d], s)
    end
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def remove_vertex(graph, v)
    if !(graph.adj.key?(v))
      panic("vertex missing")
    end
    adj = {}.clone
        __tmp7 = graph.adj.keys()
    if __tmp7.respond_to?(:keys) && !__tmp7.is_a?(String)
      __tmp7 = __tmp7.keys
    end
    __tmp7.each do |k|
      if k != v
        adj[k] = remove_from_list(graph.adj[k], v)
      end
    end
    return Graph.new(adj: adj, directed: graph.directed)
  end
  def contains_vertex(graph, v)
    return graph.adj.key?(v)
  end
  def contains_edge(graph, s, d)
    if ((!(graph.adj.key?(s))) || (!(graph.adj.key?(d))))
      panic("vertex missing")
    end
        __tmp8 = graph.adj[s]
    if __tmp8.respond_to?(:keys) && !__tmp8.is_a?(String)
      __tmp8 = __tmp8.keys
    end
    __tmp8.each do |x|
      if x == d
        return true
      end
    end
    return false
  end
  def clear_graph(graph)
    return Graph.new(adj: {}, directed: graph.directed)
  end
  def to_string(graph)
    return _str(graph.adj)
  end
  def main()
    vertices = ["1", "2", "3", "4"]
    edges = [["1", "2"], ["2", "3"], ["3", "4"]]
    g = create_graph(vertices, edges, false).clone
    puts(to_string(g))
    g = add_vertex(g, "5").clone
    g = add_edge(g, "4", "5").clone
    puts(_str(contains_edge(g, "4", "5")))
    g = remove_edge(g, "1", "2").clone
    g = remove_vertex(g, "3").clone
    puts(to_string(g))
  end
  Graph = Struct.new(:adj, :directed, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
