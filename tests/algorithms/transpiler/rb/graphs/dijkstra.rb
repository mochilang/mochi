# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  Object.send(:remove_const, :NodeCost) if Object.const_defined?(:NodeCost)
  NodeCost = Struct.new(:node, :cost, keyword_init: true)
  $G = {"A" => {"B" => 2, "C" => 5}, "B" => {"A" => 2, "D" => 3, "E" => 1, "F" => 1}, "C" => {"A" => 5, "F" => 3}, "D" => {"B" => 3}, "E" => {"B" => 4, "F" => 3}, "F" => {"C" => 3, "E" => 3}}
  $heap = [NodeCost.new(node: "E", cost: 0)]
  $visited = {}
  $result = -1
  while _len($heap) > 0
    best_idx = 0
    i = 1
    while i < _len($heap)
      if (__tmp1 = $heap; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)).cost < (__tmp2 = $heap; __tmp2.is_a?(Hash) ? __tmp2[best_idx] : _idx(__tmp2, best_idx)).cost
        best_idx = i
      end
      i = _add(i, 1)
    end
    best = (__tmp3 = $heap; __tmp3.is_a?(Hash) ? __tmp3[best_idx] : _idx(__tmp3, best_idx))
    new_heap = []
    j = 0
    while j < _len($heap)
      if !_eq(j, best_idx)
        new_heap = _append(new_heap, (__tmp4 = $heap; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)))
      end
      j = _add(j, 1)
    end
    $heap = new_heap
    u = best.node
    cost = best.cost
    if _has($visited, u)
      next
    end
    $visited[u] = true
    if _eq(u, "C")
      $result = cost
      break
    end
        __tmp5 = (__tmp6 = $G; __tmp6.is_a?(Hash) ? __tmp6[u] : _idx(__tmp6, u))
    __tmp5 = [] if __tmp5.nil?
    if __tmp5.respond_to?(:keys) && !__tmp5.is_a?(String)
      __tmp5 = __tmp5.keys
    end
    __tmp5.each do |v|
      if _has($visited, v)
        next
      end
      next_cost = _add(cost, (__tmp7 = (__tmp8 = $G; __tmp8.is_a?(Hash) ? __tmp8[u] : _idx(__tmp8, u)); __tmp7.is_a?(Hash) ? __tmp7[v] : _idx(__tmp7, v)))
      $heap = _append($heap, NodeCost.new(node: v, cost: next_cost))
    end
  end
  puts($result)
  $G2 = {"B" => {"C" => 1}, "C" => {"D" => 1}, "D" => {"F" => 1}, "E" => {"B" => 1, "F" => 3}, "F" => {}}
  $heap2 = [NodeCost.new(node: "E", cost: 0)]
  $visited2 = {}
  $result2 = -1
  while _len($heap2) > 0
    best2_idx = 0
    i2 = 1
    while i2 < _len($heap2)
      if (__tmp9 = $heap2; __tmp9.is_a?(Hash) ? __tmp9[i2] : _idx(__tmp9, i2)).cost < (__tmp10 = $heap2; __tmp10.is_a?(Hash) ? __tmp10[best2_idx] : _idx(__tmp10, best2_idx)).cost
        best2_idx = i2
      end
      i2 = _add(i2, 1)
    end
    best2 = (__tmp11 = $heap2; __tmp11.is_a?(Hash) ? __tmp11[best2_idx] : _idx(__tmp11, best2_idx))
    new_heap2 = []
    j2 = 0
    while j2 < _len($heap2)
      if !_eq(j2, best2_idx)
        new_heap2 = _append(new_heap2, (__tmp12 = $heap2; __tmp12.is_a?(Hash) ? __tmp12[j2] : _idx(__tmp12, j2)))
      end
      j2 = _add(j2, 1)
    end
    $heap2 = new_heap2
    u2 = best2.node
    cost2 = best2.cost
    if _has($visited2, u2)
      next
    end
    $visited2[u2] = true
    if _eq(u2, "F")
      $result2 = cost2
      break
    end
        __tmp13 = (__tmp14 = $G2; __tmp14.is_a?(Hash) ? __tmp14[u2] : _idx(__tmp14, u2))
    __tmp13 = [] if __tmp13.nil?
    if __tmp13.respond_to?(:keys) && !__tmp13.is_a?(String)
      __tmp13 = __tmp13.keys
    end
    __tmp13.each do |v2|
      if _has($visited2, v2)
        next
      end
      next_cost2 = _add(cost2, (__tmp15 = (__tmp16 = $G2; __tmp16.is_a?(Hash) ? __tmp16[u2] : _idx(__tmp16, u2)); __tmp15.is_a?(Hash) ? __tmp15[v2] : _idx(__tmp15, v2)))
      $heap2 = _append($heap2, NodeCost.new(node: v2, cost: next_cost2))
    end
  end
  puts($result2)
  $G3 = {"B" => {"C" => 1}, "C" => {"D" => 1}, "D" => {"F" => 1}, "E" => {"B" => 1, "G" => 2}, "F" => {}, "G" => {"F" => 1}}
  $heap3 = [NodeCost.new(node: "E", cost: 0)]
  $visited3 = {}
  $result3 = -1
  while _len($heap3) > 0
    best3_idx = 0
    i3 = 1
    while i3 < _len($heap3)
      if (__tmp17 = $heap3; __tmp17.is_a?(Hash) ? __tmp17[i3] : _idx(__tmp17, i3)).cost < (__tmp18 = $heap3; __tmp18.is_a?(Hash) ? __tmp18[best3_idx] : _idx(__tmp18, best3_idx)).cost
        best3_idx = i3
      end
      i3 = _add(i3, 1)
    end
    best3 = (__tmp19 = $heap3; __tmp19.is_a?(Hash) ? __tmp19[best3_idx] : _idx(__tmp19, best3_idx))
    new_heap3 = []
    j3 = 0
    while j3 < _len($heap3)
      if !_eq(j3, best3_idx)
        new_heap3 = _append(new_heap3, (__tmp20 = $heap3; __tmp20.is_a?(Hash) ? __tmp20[j3] : _idx(__tmp20, j3)))
      end
      j3 = _add(j3, 1)
    end
    $heap3 = new_heap3
    u3 = best3.node
    cost3 = best3.cost
    if _has($visited3, u3)
      next
    end
    $visited3[u3] = true
    if _eq(u3, "F")
      $result3 = cost3
      break
    end
        __tmp21 = (__tmp22 = $G3; __tmp22.is_a?(Hash) ? __tmp22[u3] : _idx(__tmp22, u3))
    __tmp21 = [] if __tmp21.nil?
    if __tmp21.respond_to?(:keys) && !__tmp21.is_a?(String)
      __tmp21 = __tmp21.keys
    end
    __tmp21.each do |v3|
      if _has($visited3, v3)
        next
      end
      next_cost3 = _add(cost3, (__tmp23 = (__tmp24 = $G3; __tmp24.is_a?(Hash) ? __tmp24[u3] : _idx(__tmp24, u3)); __tmp23.is_a?(Hash) ? __tmp23[v3] : _idx(__tmp23, v3)))
      $heap3 = _append($heap3, NodeCost.new(node: v3, cost: next_cost3))
    end
  end
  puts($result3)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
