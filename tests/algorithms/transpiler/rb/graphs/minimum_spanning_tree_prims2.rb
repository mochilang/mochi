# Generated by Mochi transpiler v0.10.66 on 2025-08-15 09:59 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def prims_algo(graph)
    _INF = 2147483647
    dist = {}
    parent = {}
    queue = []
        __tmp1 = graph.keys()
    __tmp1 = [] if __tmp1.nil?
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |node|
      dist[node] = _INF
      parent[node] = ""
      queue = _append(queue, QueueNode.new(node: node, weight: _INF))
    end
    if _eq(_len(queue), 0)
      return MSTResult.new(dist: dist, parent: parent)
    end
    min_idx = 0
    i = 1
    while i < _len(queue)
      if (__tmp2 = (__tmp3 = queue; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)); __tmp2.is_a?(Hash) ? __tmp2["weight"] : _idx(__tmp2, "weight")) < (__tmp4 = (__tmp5 = queue; __tmp5.is_a?(Hash) ? __tmp5[min_idx] : _idx(__tmp5, min_idx)); __tmp4.is_a?(Hash) ? __tmp4["weight"] : _idx(__tmp4, "weight"))
        min_idx = i
      end
      i = _add(i, 1)
    end
    start_node = (__tmp6 = queue; __tmp6.is_a?(Hash) ? __tmp6[min_idx] : _idx(__tmp6, min_idx))
    start = (__tmp7 = start_node; __tmp7.is_a?(Hash) ? __tmp7["node"] : _idx(__tmp7, "node"))
    new_q = []
    j = 0
    while j < _len(queue)
      if !_eq(j, min_idx)
        new_q = _append(new_q, (__tmp8 = queue; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
      end
      j = _add(j, 1)
    end
    queue = new_q
    dist[start] = 0
        __tmp9 = ((__tmp10 = graph; __tmp10.is_a?(Hash) ? __tmp10[start] : _idx(__tmp10, start))).keys()
    __tmp9 = [] if __tmp9.nil?
    if __tmp9.respond_to?(:keys) && !__tmp9.is_a?(String)
      __tmp9 = __tmp9.keys
    end
    __tmp9.each do |neighbour|
      w = (__tmp11 = (__tmp12 = graph; __tmp12.is_a?(Hash) ? __tmp12[start] : _idx(__tmp12, start)); __tmp11.is_a?(Hash) ? __tmp11[neighbour] : _idx(__tmp11, neighbour))
      if (__tmp13 = dist; __tmp13.is_a?(Hash) ? __tmp13[neighbour] : _idx(__tmp13, neighbour)) > _add((__tmp14 = dist; __tmp14.is_a?(Hash) ? __tmp14[start] : _idx(__tmp14, start)), w)
        dist[neighbour] = _add((__tmp15 = dist; __tmp15.is_a?(Hash) ? __tmp15[start] : _idx(__tmp15, start)), w)
        parent[neighbour] = start
        k = 0
        while k < _len(queue)
          if _eq((__tmp16 = (__tmp17 = queue; __tmp17.is_a?(Hash) ? __tmp17[k] : _idx(__tmp17, k)); __tmp16.is_a?(Hash) ? __tmp16["node"] : _idx(__tmp16, "node")), neighbour)
            (__tmp18 = queue; __tmp18.is_a?(Hash) ? __tmp18[k] : _idx(__tmp18, k))["weight"] = (__tmp19 = dist; __tmp19.is_a?(Hash) ? __tmp19[neighbour] : _idx(__tmp19, neighbour))
            break
          end
          k = _add(k, 1)
        end
      end
    end
    while _len(queue) > 0
      best_idx = 0
      p = 1
      while p < _len(queue)
        if (__tmp20 = (__tmp21 = queue; __tmp21.is_a?(Hash) ? __tmp21[p] : _idx(__tmp21, p)); __tmp20.is_a?(Hash) ? __tmp20["weight"] : _idx(__tmp20, "weight")) < (__tmp22 = (__tmp23 = queue; __tmp23.is_a?(Hash) ? __tmp23[best_idx] : _idx(__tmp23, best_idx)); __tmp22.is_a?(Hash) ? __tmp22["weight"] : _idx(__tmp22, "weight"))
          best_idx = p
        end
        p = _add(p, 1)
      end
      node_entry = (__tmp24 = queue; __tmp24.is_a?(Hash) ? __tmp24[best_idx] : _idx(__tmp24, best_idx))
      node = (__tmp25 = node_entry; __tmp25.is_a?(Hash) ? __tmp25["node"] : _idx(__tmp25, "node"))
      tmp = []
      q = 0
      while q < _len(queue)
        if !_eq(q, best_idx)
          tmp = _append(tmp, (__tmp26 = queue; __tmp26.is_a?(Hash) ? __tmp26[q] : _idx(__tmp26, q)))
        end
        q = _add(q, 1)
      end
      queue = tmp
            __tmp27 = ((__tmp28 = graph; __tmp28.is_a?(Hash) ? __tmp28[node] : _idx(__tmp28, node))).keys()
      __tmp27 = [] if __tmp27.nil?
      if __tmp27.respond_to?(:keys) && !__tmp27.is_a?(String)
        __tmp27 = __tmp27.keys
      end
      __tmp27.each do |neighbour|
        w = (__tmp29 = (__tmp30 = graph; __tmp30.is_a?(Hash) ? __tmp30[node] : _idx(__tmp30, node)); __tmp29.is_a?(Hash) ? __tmp29[neighbour] : _idx(__tmp29, neighbour))
        if (__tmp31 = dist; __tmp31.is_a?(Hash) ? __tmp31[neighbour] : _idx(__tmp31, neighbour)) > _add((__tmp32 = dist; __tmp32.is_a?(Hash) ? __tmp32[node] : _idx(__tmp32, node)), w)
          dist[neighbour] = _add((__tmp33 = dist; __tmp33.is_a?(Hash) ? __tmp33[node] : _idx(__tmp33, node)), w)
          parent[neighbour] = node
          r = 0
          while r < _len(queue)
            if _eq((__tmp34 = (__tmp35 = queue; __tmp35.is_a?(Hash) ? __tmp35[r] : _idx(__tmp35, r)); __tmp34.is_a?(Hash) ? __tmp34["node"] : _idx(__tmp34, "node")), neighbour)
              (__tmp36 = queue; __tmp36.is_a?(Hash) ? __tmp36[r] : _idx(__tmp36, r))["weight"] = (__tmp37 = dist; __tmp37.is_a?(Hash) ? __tmp37[neighbour] : _idx(__tmp37, neighbour))
              break
            end
            r = _add(r, 1)
          end
        end
      end
    end
    return MSTResult.new(dist: dist, parent: parent)
  end
  def iabs(x)
    if x < 0
      return -x
    end
    return x
  end
  Object.send(:remove_const, :QueueNode) if Object.const_defined?(:QueueNode)
  Object.const_set(:QueueNode, Struct.new(:node, :weight, keyword_init: true))
  Object.send(:remove_const, :MSTResult) if Object.const_defined?(:MSTResult)
  Object.const_set(:MSTResult, Struct.new(:dist, :parent, keyword_init: true))
  $graph = {}
  $graph["a"] = {"b" => 3, "c" => 15}
  $graph["b"] = {"a" => 3, "c" => 10, "d" => 100}
  $graph["c"] = {"a" => 15, "b" => 10, "d" => 5}
  $graph["d"] = {"b" => 100, "c" => 5}
  $res = prims_algo($graph)
  $dist = $res.dist
  puts(_str(iabs((__tmp38 = $dist; __tmp38.is_a?(Hash) ? __tmp38["a"] : _idx(__tmp38, "a")) - (__tmp39 = $dist; __tmp39.is_a?(Hash) ? __tmp39["b"] : _idx(__tmp39, "b")))))
  puts(_str(iabs((__tmp40 = $dist; __tmp40.is_a?(Hash) ? __tmp40["d"] : _idx(__tmp40, "d")) - (__tmp41 = $dist; __tmp41.is_a?(Hash) ? __tmp41["b"] : _idx(__tmp41, "b")))))
  puts(_str(iabs((__tmp42 = $dist; __tmp42.is_a?(Hash) ? __tmp42["a"] : _idx(__tmp42, "a")) - (__tmp43 = $dist; __tmp43.is_a?(Hash) ? __tmp43["c"] : _idx(__tmp43, "c")))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
