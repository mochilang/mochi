# Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:14 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def dfs_skip(graph, visited, skip, at)
    visited[at] = true
    count = 1
        __tmp1 = graph[at]
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |to|
      if to == skip
        next
      end
      if visited[to] == false
        count = _add(count, dfs_skip(graph, visited, skip, to))
      end
    end
    return count
  end
  def articulation_points(graph)
    n = graph.length
    result = []
    v = 0
    while v < n
      visited = []
      i = 0
      while i < n
        visited = (visited << (false))
        i = _add(i, 1)
      end
      start = 0
      while start == v && start < n
        start = _add(start, 1)
      end
      reach = dfs_skip(graph, visited, v, start)
      if reach < n - 1
        result = (result << (v))
        puts(v)
      end
      v = _add(v, 1)
    end
    return result
  end
  def main()
    graph = [[1, 2], [0, 2], [0, 1, 3, 5], [2, 4], [3], [2, 6, 8], [5, 7], [6, 8], [5, 7]]
    articulation_points(graph)
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
