# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:08 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pos_equal(a, b)
    return _eq(a.x, b.x) && _eq(a.y, b.y)
  end
  def pos_key(p)
    return _add(_add(_str(p.x), ","), _str(p.y))
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def consistent_heuristic(p, goal)
    dx = ((p.x - goal.x)).to_f
    dy = ((p.y - goal.y)).to_f
    return sqrtApprox(_add(dx * dx, dy * dy))
  end
  def iabs(x)
    if x < 0
      return -x
    end
    return x
  end
  def heuristic_1(p, goal)
    return ((_add(iabs(p.x - goal.x), iabs(p.y - goal.y)))).to_f
  end
  def heuristic_2(p, goal)
    h = consistent_heuristic(p, goal)
    return h / (($t).to_f)
  end
  def heuristic(i, p, goal)
    if _eq(i, 0)
      return consistent_heuristic(p, goal)
    end
    if _eq(i, 1)
      return heuristic_1(p, goal)
    end
    return heuristic_2(p, goal)
  end
  def key_fn(start, i, goal, g_func)
    g = (__tmp1 = g_func; __tmp1.is_a?(Hash) ? __tmp1[pos_key(start)] : _idx(__tmp1, pos_key(start)))
    return _add(g, $W1 * heuristic(i, start, goal))
  end
  def valid(p)
    if p.x < 0 || p.x > $n - 1
      return false
    end
    if p.y < 0 || p.y > $n - 1
      return false
    end
    return true
  end
  def in_blocks(p)
    i = 0
    while i < _len($blocks)
      if pos_equal((__tmp2 = $blocks; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), p)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def pq_put(pq, node, pri)
    updated = false
    i = 0
    while i < _len(pq)
      if pos_equal((__tmp3 = pq; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)).pos, node)
        if pri < (__tmp4 = pq; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)).pri
          pq[i] = PQNode.new(pos: node, pri: pri)
        end
        updated = true
      end
      i = _add(i, 1)
    end
    if !updated
      pq = _append(pq, PQNode.new(pos: node, pri: pri))
    end
    return pq
  end
  def pq_minkey(pq)
    if _eq(_len(pq), 0)
      return $INF
    end
    first = (__tmp5 = pq; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
    m = first.pri
    i = 1
    while i < _len(pq)
      item = (__tmp6 = pq; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
      if item.pri < m
        m = item.pri
      end
      i = _add(i, 1)
    end
    return m
  end
  def pq_pop_min(pq)
    best = (__tmp7 = pq; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
    idx = 0
    i = 1
    while i < _len(pq)
      if (__tmp8 = pq; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)).pri < best.pri
        best = (__tmp9 = pq; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))
        idx = i
      end
      i = _add(i, 1)
    end
    new_pq = []
    i = 0
    while i < _len(pq)
      if !_eq(i, idx)
        new_pq = _append(new_pq, (__tmp10 = pq; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
      end
      i = _add(i, 1)
    end
    return PQPopResult.new(pq: new_pq, node: best)
  end
  def pq_remove(pq, node)
    new_pq = []
    i = 0
    while i < _len(pq)
      if !pos_equal((__tmp11 = pq; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)).pos, node)
        new_pq = _append(new_pq, (__tmp12 = pq; __tmp12.is_a?(Hash) ? __tmp12[i] : _idx(__tmp12, i)))
      end
      i = _add(i, 1)
    end
    return new_pq
  end
  def reconstruct(back_pointer, goal, start)
    path = []
    current = goal
    key = pos_key(current)
    path = _append(path, current)
    while !(pos_equal(current, start))
      current = (__tmp13 = back_pointer; __tmp13.is_a?(Hash) ? __tmp13[key] : _idx(__tmp13, key))
      key = pos_key(current)
      path = _append(path, current)
    end
    rev = []
    i = _len(path) - 1
    while i >= 0
      rev = _append(rev, (__tmp14 = path; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)))
      i = i - 1
    end
    return rev
  end
  def neighbours(p)
    left = Pos.new(x: p.x - 1, y: p.y)
    right = Pos.new(x: _add(p.x, 1), y: p.y)
    up = Pos.new(x: p.x, y: _add(p.y, 1))
    down = Pos.new(x: p.x, y: p.y - 1)
    return [left, right, up, down]
  end
  def multi_a_star(start, goal, n_heuristic)
    g_function = {}
    back_pointer = {}
    visited = {}
    open_list = []
    g_function[pos_key(start)] = 0.0
    g_function[pos_key(goal)] = $INF
    back_pointer[pos_key(start)] = Pos.new(x: -1, y: -1)
    back_pointer[pos_key(goal)] = Pos.new(x: -1, y: -1)
    visited[pos_key(start)] = true
    i = 0
    while i < n_heuristic
      open_list = _append(open_list, [])
      pri = key_fn(start, i, goal, g_function)
      open_list[i] = pq_put((__tmp15 = open_list; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)), start, pri)
      i = _add(i, 1)
    end
    while pq_minkey((__tmp16 = open_list; __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0))) < $INF
      chosen = 0
      i = 1
      while i < n_heuristic
        if pq_minkey((__tmp17 = open_list; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))) <= $W2 * pq_minkey((__tmp18 = open_list; __tmp18.is_a?(Hash) ? __tmp18[0] : _idx(__tmp18, 0)))
          chosen = i
          break
        end
        i = _add(i, 1)
      end
      if !_eq(chosen, 0)
        $t = _add($t, 1)
      end
      pair = pq_pop_min((__tmp19 = open_list; __tmp19.is_a?(Hash) ? __tmp19[chosen] : _idx(__tmp19, chosen)))
      open_list[chosen] = pair.pq
      current = pair.node
      i = 0
      while i < n_heuristic
        if !_eq(i, chosen)
          open_list[i] = pq_remove((__tmp20 = open_list; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), current.pos)
        end
        i = _add(i, 1)
      end
      ckey = pos_key(current.pos)
      if _has(visited, ckey)
        next
      end
      visited[ckey] = true
      if pos_equal(current.pos, goal)
        path = reconstruct(back_pointer, goal, start)
        j = 0
        while j < _len(path)
          p = (__tmp21 = path; __tmp21.is_a?(Hash) ? __tmp21[j] : _idx(__tmp21, j))
          puts(_add(_add(_add(_add("(", _str(p.x)), ","), _str(p.y)), ")"))
          j = _add(j, 1)
        end
        return
      end
      neighs = neighbours(current.pos)
      k = 0
      while k < _len(neighs)
        nb = (__tmp22 = neighs; __tmp22.is_a?(Hash) ? __tmp22[k] : _idx(__tmp22, k))
        if valid(nb) && (_eq(in_blocks(nb), false))
          nkey = pos_key(nb)
          tentative = _add((__tmp23 = g_function; __tmp23.is_a?(Hash) ? __tmp23[ckey] : _idx(__tmp23, ckey)), 1.0)
          if !(_has(g_function, nkey)) || tentative < (__tmp24 = g_function; __tmp24.is_a?(Hash) ? __tmp24[nkey] : _idx(__tmp24, nkey))
            g_function[nkey] = tentative
            back_pointer[nkey] = current.pos
            i = 0
            while i < n_heuristic
              pri2 = _add(tentative, $W1 * heuristic(i, nb, goal))
              open_list[i] = pq_put((__tmp25 = open_list; __tmp25.is_a?(Hash) ? __tmp25[i] : _idx(__tmp25, i)), nb, pri2)
              i = _add(i, 1)
            end
          end
        end
        k = _add(k, 1)
      end
    end
    puts("No path found to goal")
  end
  $W1 = 1.0
  $W2 = 1.0
  $n = 20
  $n_heuristic = 3
  Object.send(:remove_const, :Pos) if Object.const_defined?(:Pos)
  Pos = Struct.new(:x, :y, keyword_init: true)
  Object.send(:remove_const, :PQNode) if Object.const_defined?(:PQNode)
  PQNode = Struct.new(:pos, :pri, keyword_init: true)
  Object.send(:remove_const, :PQPopResult) if Object.const_defined?(:PQPopResult)
  PQPopResult = Struct.new(:pq, :node, keyword_init: true)
  $INF = 1e+09
  $t = 1
  $blocks = [Pos.new(x: 0, y: 1), Pos.new(x: 1, y: 1), Pos.new(x: 2, y: 1), Pos.new(x: 3, y: 1), Pos.new(x: 4, y: 1), Pos.new(x: 5, y: 1), Pos.new(x: 6, y: 1), Pos.new(x: 7, y: 1), Pos.new(x: 8, y: 1), Pos.new(x: 9, y: 1), Pos.new(x: 10, y: 1), Pos.new(x: 11, y: 1), Pos.new(x: 12, y: 1), Pos.new(x: 13, y: 1), Pos.new(x: 14, y: 1), Pos.new(x: 15, y: 1), Pos.new(x: 16, y: 1), Pos.new(x: 17, y: 1), Pos.new(x: 18, y: 1), Pos.new(x: 19, y: 1)]
  $start = Pos.new(x: 0, y: 0)
  $goal = Pos.new(x: $n - 1, y: $n - 1)
  multi_a_star($start, $goal, $n_heuristic)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
