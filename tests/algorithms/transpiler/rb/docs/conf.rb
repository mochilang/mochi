# Generated by Mochi transpiler v0.10.62 on 2025-08-09 15:58 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_project_name(toml)
    i = 0
    name = ""
    n = toml.length
    while _add(i, 4) < n
      if _eq(toml[i], "n") && _eq(toml[_add(i, 1)], "a") && _eq(toml[_add(i, 2)], "m") && _eq(toml[_add(i, 3)], "e")
        i = _add(i, 4)
        while i < n && !_eq(toml[i], "\"")
          i = _add(i, 1)
        end
        i = _add(i, 1)
        while i < n && !_eq(toml[i], "\"")
          name = _add(name, toml[i])
          i = _add(i, 1)
        end
        return name
      end
      i = _add(i, 1)
    end
    return name
  end
  $pyproject = "[project]\nname = \"thealgorithms-python\""
  $project = parse_project_name($pyproject)
  puts($project)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
