# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pressure_of_gas_system(moles, kelvin, volume)
    if moles < 0 || kelvin < 0 || volume < 0
      throw
      "Invalid inputs. Enter positive value."
    end
    return moles * kelvin * $UNIVERSAL_GAS_CONSTANT / volume
  end
  def volume_of_gas_system(moles, kelvin, pressure)
    if moles < 0 || kelvin < 0 || pressure < 0
      throw
      "Invalid inputs. Enter positive value."
    end
    return moles * kelvin * $UNIVERSAL_GAS_CONSTANT / pressure
  end
  def temperature_of_gas_system(moles, volume, pressure)
    if moles < 0 || volume < 0 || pressure < 0
      throw
      "Invalid inputs. Enter positive value."
    end
    return pressure * volume / (moles * $UNIVERSAL_GAS_CONSTANT)
  end
  def moles_of_gas_system(kelvin, volume, pressure)
    if kelvin < 0 || volume < 0 || pressure < 0
      throw
      "Invalid inputs. Enter positive value."
    end
    return pressure * volume / (kelvin * $UNIVERSAL_GAS_CONSTANT)
  end
  $UNIVERSAL_GAS_CONSTANT = 8.314462
  puts(pressure_of_gas_system(2.0, 100.0, 5.0))
  puts(volume_of_gas_system(0.5, 273.0, 0.004))
  puts(temperature_of_gas_system(2.0, 100.0, 5.0))
  puts(moles_of_gas_system(100.0, 5.0, 10.0))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
