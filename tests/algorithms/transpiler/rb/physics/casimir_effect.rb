# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 100
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def casimir_force(force, area, distance)
    zero_count = 0.clone
    if force == 0.0
      zero_count = _add(zero_count, 1).clone
    end
    if area == 0.0
      zero_count = _add(zero_count, 1).clone
    end
    if distance == 0.0
      zero_count = _add(zero_count, 1).clone
    end
    if zero_count != 1
      panic("One and only one argument must be 0")
    end
    if force < 0.0
      panic("Magnitude of force can not be negative")
    end
    if distance < 0.0
      panic("Distance can not be negative")
    end
    if area < 0.0
      panic("Area can not be negative")
    end
    if force == 0.0
      num = $REDUCED_PLANCK_CONSTANT * $SPEED_OF_LIGHT * $PI * $PI * area
      den = 240.0 * distance * distance * distance * distance
      f = num / den
      return {"force" => f}
    end
    if area == 0.0
      num = 240.0 * force * distance * distance * distance * distance
      den = $REDUCED_PLANCK_CONSTANT * $SPEED_OF_LIGHT * $PI * $PI
      a = num / den
      return {"area" => a}
    end
    num = $REDUCED_PLANCK_CONSTANT * $SPEED_OF_LIGHT * $PI * $PI * area
    den = 240.0 * force
    inner = num / den
    d = sqrtApprox(sqrtApprox(inner))
    return {"distance" => d}
  end
  def main()
    puts(_str(casimir_force(0.0, 4.0, 0.03)))
    puts(_str(casimir_force(2.635e-10, 0.0023, 0.0)))
    puts(_str(casimir_force(2.737e-18, 0.0, 0.0023746)))
  end
  $PI = 3.141592653589793
  $REDUCED_PLANCK_CONSTANT = 1.054571817e-34
  $SPEED_OF_LIGHT = 300000000.0
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
