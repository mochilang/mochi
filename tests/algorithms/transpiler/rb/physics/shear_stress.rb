# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def shear_stress(stress, tangential_force, area)
    zeros = 0.clone
    if stress == 0.0
      zeros = _add(zeros, 1).clone
    end
    if tangential_force == 0.0
      zeros = _add(zeros, 1).clone
    end
    if area == 0.0
      zeros = _add(zeros, 1).clone
    end
    if zeros != 1
      panic("You cannot supply more or less than 2 values")
    else
      if stress < 0.0
        panic("Stress cannot be negative")
      else
        if tangential_force < 0.0
          panic("Tangential Force cannot be negative")
        else
          if area < 0.0
            panic("Area cannot be negative")
          else
            if stress == 0.0
              return Result.new(name: "stress", value: tangential_force / area)
            else
              if tangential_force == 0.0
                return Result.new(name: "tangential_force", value: stress * area)
              else
                return Result.new(name: "area", value: tangential_force / stress)
              end
            end
          end
        end
      end
    end
  end
  def str_result(r)
    return _add(_add(_add(_add("Result(name='", r.name), "', value="), _str(r.value)), ")")
  end
  Result = Struct.new(:name, :value, keyword_init: true)
  $r1 = shear_stress(25.0, 100.0, 0.0)
  puts(str_result($r1))
  $r2 = shear_stress(0.0, 1600.0, 200.0)
  puts(str_result($r2))
  $r3 = shear_stress(1000.0, 0.0, 1200.0)
  puts(str_result($r3))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
