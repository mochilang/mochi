# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow10(n)
    p = 1.0
    k = 0
    if n >= 0
      while k < n
        p = p * 10.0
        k = _add(k, 1)
      end
    else
      m = -n
      while k < m
        p = p / 10.0
        k = _add(k, 1)
      end
    end
    return p
  end
  def sqrt_newton(n)
    if _eq(n, 0.0)
      return 0.0
    end
    x = n
    j = 0
    while j < 20
      x = (_add(x, n / x)) / 2.0
      j = _add(j, 1)
    end
    return x
  end
  def round3(x)
    y = _add(x * 1000.0, 0.5)
    yi = (y).to_i
    if ((yi).to_f) > y
      yi = yi - 1
    end
    return ((yi).to_f) / 1000.0
  end
  def escape_velocity(mass, radius)
    if _eq(radius, 0.0)
      panic("Radius cannot be zero.")
    end
    _G = 6.6743 * pow10(-11)
    velocity = sqrt_newton(2.0 * _G * mass / radius)
    return round3(velocity)
  end
  puts(escape_velocity(5.972 * pow10(24), 6.371 * pow10(6)))
  puts(escape_velocity(7.348 * pow10(22), 1.737 * pow10(6)))
  puts(escape_velocity(1.898 * pow10(27), 6.9911 * pow10(7)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
