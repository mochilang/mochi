# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def focal_length_of_lens(object_distance_from_lens, image_distance_from_lens)
    if object_distance_from_lens == 0.0 || image_distance_from_lens == 0.0
      panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    end
    return 1.0 / ((1.0 / image_distance_from_lens) - (1.0 / object_distance_from_lens))
  end
  def object_distance(focal_length_of_lens, image_distance_from_lens)
    if image_distance_from_lens == 0.0 || focal_length_of_lens == 0.0
      panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    end
    return 1.0 / ((1.0 / image_distance_from_lens) - (1.0 / focal_length_of_lens))
  end
  def image_distance(focal_length_of_lens, object_distance_from_lens)
    if object_distance_from_lens == 0.0 || focal_length_of_lens == 0.0
      panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    end
    return 1.0 / (_add((1.0 / object_distance_from_lens), (1.0 / focal_length_of_lens)))
  end
  puts(_str(focal_length_of_lens(10.0, 4.0)))
  puts(_str(focal_length_of_lens(2.7, 5.8)))
  puts(_str(object_distance(10.0, 40.0)))
  puts(_str(object_distance(6.2, 1.5)))
  puts(_str(image_distance(50.0, 40.0)))
  puts(_str(image_distance(5.3, 7.9)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
