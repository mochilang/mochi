# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrt(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def rms_speed_of_molecule(temperature, molar_mass)
    if temperature < 0.0
      panic("Temperature cannot be less than 0 K")
    end
    if molar_mass <= 0.0
      panic("Molar mass cannot be less than or equal to 0 kg/mol")
    end
    num = 3.0 * $UNIVERSAL_GAS_CONSTANT * temperature
    val = num / molar_mass
    result = sqrt(val)
    return result
  end
  $UNIVERSAL_GAS_CONSTANT = 8.3144598
  puts(_add("rms_speed_of_molecule(100, 2) = ", _str(rms_speed_of_molecule(100.0, 2.0))))
  puts(_add("rms_speed_of_molecule(273, 12) = ", _str(rms_speed_of_molecule(273.0, 12.0))))
  $vrms = rms_speed_of_molecule(300.0, 28.0)
  puts(_add(_add("Vrms of Nitrogen gas at 300 K is ", _str($vrms)), " m/s"))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
