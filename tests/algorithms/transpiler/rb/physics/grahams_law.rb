# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def to_float(x)
    return x * 1.0
  end
  def round6(x)
    factor = 1000000.0
    return ((_add(x * factor, 0.5)).to_i).to_f / factor
  end
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def validate(values)
    if _eq(_len(values), 0)
      return false
    end
    i = 0
    while i < _len(values)
      if (__tmp1 = values; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) <= 0.0
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def effusion_ratio(m1, m2)
    if !validate([m1, m2])
      puts("ValueError: Molar mass values must greater than 0.")
      return 0.0
    end
    return round6(sqrtApprox(m2 / m1))
  end
  def first_effusion_rate(rate, m1, m2)
    if !validate([rate, m1, m2])
      puts("ValueError: Molar mass and effusion rate values must greater than 0.")
      return 0.0
    end
    return round6(rate * sqrtApprox(m2 / m1))
  end
  def second_effusion_rate(rate, m1, m2)
    if !validate([rate, m1, m2])
      puts("ValueError: Molar mass and effusion rate values must greater than 0.")
      return 0.0
    end
    return round6(rate / sqrtApprox(m2 / m1))
  end
  def first_molar_mass(mass, r1, r2)
    if !validate([mass, r1, r2])
      puts("ValueError: Molar mass and effusion rate values must greater than 0.")
      return 0.0
    end
    ratio = r1 / r2
    return round6(mass / (ratio * ratio))
  end
  def second_molar_mass(mass, r1, r2)
    if !validate([mass, r1, r2])
      puts("ValueError: Molar mass and effusion rate values must greater than 0.")
      return 0.0
    end
    ratio = r1 / r2
    return round6((ratio * ratio) / mass)
  end
  puts(effusion_ratio(2.016, 4.002))
  puts(first_effusion_rate(1.0, 2.016, 4.002))
  puts(second_effusion_rate(1.0, 2.016, 4.002))
  puts(first_molar_mass(2.0, 1.408943, 0.709752))
  puts(second_molar_mass(2.0, 1.408943, 0.709752))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
