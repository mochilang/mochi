# Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:29 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def gravitational_law(force, mass_1, mass_2, distance)
    zero_count = 0
    if _eq(force, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(mass_1, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(mass_2, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if _eq(distance, 0.0)
      zero_count = _add(zero_count, 1)
    end
    if !_eq(zero_count, 1)
      panic("One and only one argument must be 0")
    end
    if force < 0.0
      panic("Gravitational force can not be negative")
    end
    if distance < 0.0
      panic("Distance can not be negative")
    end
    if mass_1 < 0.0
      panic("Mass can not be negative")
    end
    if mass_2 < 0.0
      panic("Mass can not be negative")
    end
    product_of_mass = mass_1 * mass_2
    if _eq(force, 0.0)
      f = $GRAVITATIONAL_CONSTANT * product_of_mass / (distance * distance)
      return Result.new(kind: "force", value: f)
    end
    if _eq(mass_1, 0.0)
      m1 = force * (distance * distance) / ($GRAVITATIONAL_CONSTANT * mass_2)
      return Result.new(kind: "mass_1", value: m1)
    end
    if _eq(mass_2, 0.0)
      m2 = force * (distance * distance) / ($GRAVITATIONAL_CONSTANT * mass_1)
      return Result.new(kind: "mass_2", value: m2)
    end
    d = sqrtApprox($GRAVITATIONAL_CONSTANT * product_of_mass / force)
    return Result.new(kind: "distance", value: d)
  end
  $GRAVITATIONAL_CONSTANT = 6.6743e-11
  Object.send(:remove_const, :Result) if Object.const_defined?(:Result)
  Result = Struct.new(:kind, :value, keyword_init: true)
  $r1 = gravitational_law(0.0, 5.0, 10.0, 20.0)
  $r2 = gravitational_law(7367.382, 0.0, 74.0, 3048.0)
  $r3 = gravitational_law(100.0, 5.0, 0.0, 3.0)
  $r4 = gravitational_law(100.0, 5.0, 10.0, 0.0)
  puts(_add(_add($r1.kind, " "), _str($r1.value)))
  puts(_add(_add($r2.kind, " "), _str($r2.value)))
  puts(_add(_add($r3.kind, " "), _str($r3.value)))
  puts(_add(_add($r4.kind, " "), _str($r4.value)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
