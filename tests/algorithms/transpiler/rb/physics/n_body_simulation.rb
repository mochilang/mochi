# Generated by Mochi transpiler v0.10.68 on 2025-08-17 21:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      s = x.to_s
      if s.include?('e') || s.include?('E')
        s
      else
        s
      end
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_body(px, py, vx, vy, mass)
    return Body.new(position_x: px, position_y: py, velocity_x: vx, velocity_y: vy, mass: mass)
  end
  def update_velocity(body, force_x, force_y, delta_time)
    body.velocity_x = _add(body.velocity_x, force_x * delta_time)
    body.velocity_y = _add(body.velocity_y, force_y * delta_time)
    return body
  end
  def update_position(body, delta_time)
    body.position_x = _add(body.position_x, body.velocity_x * delta_time)
    body.position_y = _add(body.position_y, body.velocity_y * delta_time)
    return body
  end
  def make_body_system(bodies, g, tf, sf)
    return BodySystem.new(bodies: bodies, gravitation_constant: g, time_factor: tf, softening_factor: sf)
  end
  def sqrtApprox(x)
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def update_system(system, delta_time)
    bodies = system.bodies
    i = 0
    while i < _len(bodies)
      body1 = (__tmp1 = bodies; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      force_x = 0.0
      force_y = 0.0
      j = 0
      while j < _len(bodies)
        if !_eq(i, j)
          body2 = (__tmp2 = bodies; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j))
          dif_x = body2.position_x - body1.position_x
          dif_y = body2.position_y - body1.position_y
          distance_sq = _add(_add(dif_x * dif_x, dif_y * dif_y), system.softening_factor)
          distance = sqrtApprox(distance_sq)
          denom = distance * distance * distance
          force_x = _add(force_x, system.gravitation_constant * body2.mass * dif_x / denom)
          force_y = _add(force_y, system.gravitation_constant * body2.mass * dif_y / denom)
        end
        j = _add(j, 1)
      end
      body1 = update_velocity(body1, force_x, force_y, delta_time * system.time_factor)
      bodies[i] = body1
      i = _add(i, 1)
    end
    i = 0
    while i < _len(bodies)
      body = (__tmp3 = bodies; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      body = update_position(body, delta_time * system.time_factor)
      bodies[i] = body
      i = _add(i, 1)
    end
    system.bodies = bodies
    return system
  end
  def main()
    b1 = make_body(0.0, 0.0, 0.0, 0.0, 1.0)
    b2 = make_body(10.0, 0.0, 0.0, 0.0, 1.0)
    sys1 = make_body_system([b1, b2], 1.0, 1.0, 0.0)
    sys1 = update_system(sys1, 1.0)
    b1_after = (__tmp4 = sys1.bodies; __tmp4.is_a?(Hash) ? __tmp4[0] : _idx(__tmp4, 0))
    pos1x = b1_after.position_x
    pos1y = b1_after.position_y
    puts(JSON.pretty_generate({"x" => pos1x, "y" => pos1y}))
    vel1x = b1_after.velocity_x
    vel1y = b1_after.velocity_y
    puts(JSON.pretty_generate({"vx" => vel1x, "vy" => vel1y}))
    b3 = make_body(-10.0, 0.0, 0.0, 0.0, 1.0)
    b4 = make_body(10.0, 0.0, 0.0, 0.0, 4.0)
    sys2 = make_body_system([b3, b4], 1.0, 10.0, 0.0)
    sys2 = update_system(sys2, 1.0)
    b2_after = (__tmp5 = sys2.bodies; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
    pos2x = b2_after.position_x
    pos2y = b2_after.position_y
    puts(JSON.pretty_generate({"x" => pos2x, "y" => pos2y}))
    vel2x = b2_after.velocity_x
    vel2y = b2_after.velocity_y
    puts(JSON.pretty_generate({"vx" => vel2x, "vy" => vel2y}))
  end
  Object.send(:remove_const, :Body) if Object.const_defined?(:Body)
  Object.const_set(:Body, Struct.new(:position_x, :position_y, :velocity_x, :velocity_y, :mass, keyword_init: true))
  Object.send(:remove_const, :BodySystem) if Object.const_defined?(:BodySystem)
  Object.const_set(:BodySystem, Struct.new(:bodies, :gravitation_constant, :time_factor, :softening_factor, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
