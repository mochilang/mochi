# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def sin(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
  end
  def deg_to_rad(deg)
    return deg * $PI / 180.0
  end
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def pow10(n)
    result = 1.0.clone
    i = 0.clone
    while i < n
      result = result * 10.0.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def round(x, n)
    m = pow10(n)
    y = (_add(x * m, 0.5)).floor()
    return y / m
  end
  def check_args(init_velocity, angle)
    if angle > 90.0 || angle < 1.0
      panic("Invalid angle. Range is 1-90 degrees.")
    end
    if init_velocity < 0.0
      panic("Invalid velocity. Should be a positive number.")
    end
  end
  def horizontal_distance(init_velocity, angle)
    check_args(init_velocity, angle)
    radians = deg_to_rad(2.0 * angle)
    return round((init_velocity * init_velocity * sin(radians)) / $g, 2)
  end
  def max_height(init_velocity, angle)
    check_args(init_velocity, angle)
    radians = deg_to_rad(angle)
    s = sin(radians)
    return round((init_velocity * init_velocity * s * s) / (2.0 * $g), 2)
  end
  def total_time(init_velocity, angle)
    check_args(init_velocity, angle)
    radians = deg_to_rad(angle)
    return round((2.0 * init_velocity * sin(radians)) / $g, 2)
  end
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $g = 9.80665
  $v0 = 25.0
  $angle = 20.0
  puts(horizontal_distance($v0, $angle))
  puts(max_height($v0, $angle))
  puts(total_time($v0, $angle))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
