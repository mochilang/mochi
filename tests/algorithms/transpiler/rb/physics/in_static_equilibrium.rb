# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def sin_approx(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
  end
  def cos_approx(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y4 = y2 * y2
    y6 = y4 * y2
    return _add(1.0 - y2 / 2.0, y4 / 24.0) - y6 / 720.0
  end
  def polar_force(magnitude, angle, radian_mode)
    theta = (radian_mode ? angle : angle * $PI / 180.0)
    return [magnitude * cos_approx(theta), magnitude * sin_approx(theta)]
  end
  def abs_float(x)
    if x < 0.0
      return -x
    else
      return x
    end
  end
  def in_static_equilibrium(forces, location, eps)
    sum_moments = 0.0.clone
    i = 0.clone
    n = forces.length
    while i < n
      r = location[i]
      f = forces[i]
      moment = r[0] * f[1] - r[1] * f[0]
      sum_moments = _add(sum_moments, moment).clone
      i = _add(i, 1).clone
    end
    return abs_float(sum_moments) < eps
  end
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  $forces1 = [[1.0, 1.0], [-1.0, 2.0]]
  $location1 = [[1.0, 0.0], [10.0, 0.0]]
  puts(_str(in_static_equilibrium($forces1, $location1, 0.1)))
  $forces2 = [polar_force(718.4, 150.0, false), polar_force(879.54, 45.0, false), polar_force(100.0, -90.0, false)]
  $location2 = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]
  puts(_str(in_static_equilibrium($forces2, $location2, 0.1)))
  $forces3 = [polar_force(30.0 * 9.81, 15.0, false), polar_force(215.0, 135.0, false), polar_force(264.0, 60.0, false)]
  $location3 = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]
  puts(_str(in_static_equilibrium($forces3, $location3, 0.1)))
  $forces4 = [[0.0, -2000.0], [0.0, -1200.0], [0.0, 15600.0], [0.0, -12400.0]]
  $location4 = [[0.0, 0.0], [6.0, 0.0], [10.0, 0.0], [12.0, 0.0]]
  puts(_str(in_static_equilibrium($forces4, $location4, 0.1)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
