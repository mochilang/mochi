# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def round2(x)
    scaled = x * 100.0
    rounded = ((((_add(scaled, 0.5))).to_i)).to_f
    return rounded / 100.0
  end
  def center_of_mass(ps)
    if ps.length == 0
      panic("No particles provided")
    end
    i = 0.clone
    total_mass = 0.0.clone
    while i < ps.length
      p = ps[i]
      if p.mass <= 0.0
        panic("Mass of all particles must be greater than 0")
      end
      total_mass = _add(total_mass, p.mass).clone
      i = _add(i, 1).clone
    end
    sum_x = 0.0.clone
    sum_y = 0.0.clone
    sum_z = 0.0.clone
    i = 0.clone
    while i < ps.length
      p = ps[i]
      sum_x = _add(sum_x, p.x * p.mass).clone
      sum_y = _add(sum_y, p.y * p.mass).clone
      sum_z = _add(sum_z, p.z * p.mass).clone
      i = _add(i, 1).clone
    end
    cm_x = round2(sum_x / total_mass)
    cm_y = round2(sum_y / total_mass)
    cm_z = round2(sum_z / total_mass)
    return Coord3D.new(x: cm_x, y: cm_y, z: cm_z)
  end
  def coord_to_string(c)
    return _add(_add(_add(_add(_add(_add("Coord3D(x=", _str(c.x)), ", y="), _str(c.y)), ", z="), _str(c.z)), ")")
  end
  Particle = Struct.new(:x, :y, :z, :mass, keyword_init: true)
  Coord3D = Struct.new(:x, :y, :z, keyword_init: true)
  $r1 = center_of_mass([Particle.new(x: 1.5, y: 4.0, z: 3.4, mass: 4.0), Particle.new(x: 5.0, y: 6.8, z: 7.0, mass: 8.1), Particle.new(x: 9.4, y: 10.1, z: 11.6, mass: 12.0)])
  puts(coord_to_string($r1))
  $r2 = center_of_mass([Particle.new(x: 1.0, y: 2.0, z: 3.0, mass: 4.0), Particle.new(x: 5.0, y: 6.0, z: 7.0, mass: 8.0), Particle.new(x: 9.0, y: 10.0, z: 11.0, mass: 12.0)])
  puts(coord_to_string($r2))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
