# Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:05 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && b.is_a?(Array)
    a + b
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      sprintf('%.17g', x)
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def round2(x)
    scaled = x * 100.0
    rounded = ((((_add(scaled, 0.5))).to_i)).to_f
    return rounded / 100.0
  end
  def center_of_mass(ps)
    if _eq(_len(ps), 0)
      panic("No particles provided")
    end
    i = 0
    total_mass = 0.0
    while i < _len(ps)
      p = (__tmp1 = ps; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      if p.mass <= 0.0
        panic("Mass of all particles must be greater than 0")
      end
      total_mass = _add(total_mass, p.mass)
      i = _add(i, 1)
    end
    sum_x = 0.0
    sum_y = 0.0
    sum_z = 0.0
    i = 0
    while i < _len(ps)
      p = (__tmp2 = ps; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      sum_x = _add(sum_x, p.x * p.mass)
      sum_y = _add(sum_y, p.y * p.mass)
      sum_z = _add(sum_z, p.z * p.mass)
      i = _add(i, 1)
    end
    cm_x = round2(sum_x / total_mass)
    cm_y = round2(sum_y / total_mass)
    cm_z = round2(sum_z / total_mass)
    return Coord3D.new(x: cm_x, y: cm_y, z: cm_z)
  end
  def coord_to_string(c)
    return _add(_add(_add(_add(_add(_add("Coord3D(x=", _str(c.x)), ", y="), _str(c.y)), ", z="), _str(c.z)), ")")
  end
  Object.send(:remove_const, :Particle) if Object.const_defined?(:Particle)
  Object.const_set(:Particle, Struct.new(:x, :y, :z, :mass, keyword_init: true))
  Object.send(:remove_const, :Coord3D) if Object.const_defined?(:Coord3D)
  Object.const_set(:Coord3D, Struct.new(:x, :y, :z, keyword_init: true))
  $r1 = center_of_mass([Particle.new(x: 1.5, y: 4.0, z: 3.4, mass: 4.0), Particle.new(x: 5.0, y: 6.8, z: 7.0, mass: 8.1), Particle.new(x: 9.4, y: 10.1, z: 11.6, mass: 12.0)])
  puts(coord_to_string($r1))
  $r2 = center_of_mass([Particle.new(x: 1.0, y: 2.0, z: 3.0, mass: 4.0), Particle.new(x: 5.0, y: 6.0, z: 7.0, mass: 8.0), Particle.new(x: 9.0, y: 10.0, z: 11.0, mass: 12.0)])
  puts(coord_to_string($r2))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
