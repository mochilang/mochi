# Generated by Mochi transpiler v0.10.68 on 2025-08-17 21:09 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    if x == x.to_i
      x.to_i.to_s
    else
      s = x.to_s
      if s.include?('e') || s.include?('E')
        s
      else
        s
      end
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def isclose(a, b, tolerance)
    return abs_float(a - b) < tolerance
  end
  def focal_length(distance_of_object, distance_of_image)
    if _eq(distance_of_object, 0.0) || _eq(distance_of_image, 0.0)
      panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    end
    return 1.0 / (_add((1.0 / distance_of_object), (1.0 / distance_of_image)))
  end
  def object_distance(focal_length, distance_of_image)
    if _eq(distance_of_image, 0.0) || _eq(focal_length, 0.0)
      panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    end
    return 1.0 / ((1.0 / focal_length) - (1.0 / distance_of_image))
  end
  def image_distance(focal_length, distance_of_object)
    if _eq(distance_of_object, 0.0) || _eq(focal_length, 0.0)
      panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    end
    return 1.0 / ((1.0 / focal_length) - (1.0 / distance_of_object))
  end
  def test_focal_length()
    f1 = focal_length(10.0, 20.0)
    if !isclose(f1, 6.66666666666666, 1e-08)
      panic("focal_length test1 failed")
    end
    f2 = focal_length(9.5, 6.7)
    if !isclose(f2, 3.929012346, 1e-08)
      panic("focal_length test2 failed")
    end
  end
  def test_object_distance()
    u1 = object_distance(30.0, 20.0)
    if !isclose(u1, -60.0, 1e-08)
      panic("object_distance test1 failed")
    end
    u2 = object_distance(10.5, 11.7)
    if !isclose(u2, 102.375, 1e-08)
      panic("object_distance test2 failed")
    end
  end
  def test_image_distance()
    v1 = image_distance(10.0, 40.0)
    if !isclose(v1, 13.33333333, 1e-08)
      panic("image_distance test1 failed")
    end
    v2 = image_distance(1.5, 6.7)
    if !isclose(v2, 1.932692308, 1e-08)
      panic("image_distance test2 failed")
    end
  end
  def main()
    test_focal_length()
    test_object_distance()
    test_image_distance()
    puts(_str(focal_length(10.0, 20.0)))
    puts(_str(object_distance(30.0, 20.0)))
    puts(_str(image_distance(10.0, 40.0)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
