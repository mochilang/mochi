# Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:29 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow10(n)
    p = 1.0
    if n >= 0
      i = 0
      while i < n
        p = p * 10.0
        i = _add(i, 1)
      end
    else
      i = 0
      while i > n
        p = p / 10.0
        i = i - 1
      end
    end
    return p
  end
  def floor(x)
    i = (x).to_i
    f = (i).to_f
    if f > x
      return ((i - 1)).to_f
    end
    return f
  end
  def format_scientific_3(x)
    if _eq(x, 0.0)
      return "0.000e+00"
    end
    sign = ""
    num = x
    if num < 0.0
      sign = "-"
      num = -num
    end
    exp = 0
    while num >= 10.0
      num = num / 10.0
      exp = _add(exp, 1)
    end
    while num < 1.0
      num = num * 10.0
      exp = exp - 1
    end
    temp = (_add(num * 1000.0, 0.5)).floor()
    scaled = (temp).to_i
    if _eq(scaled, 10000)
      scaled = 1000
      exp = _add(exp, 1)
    end
    int_part = scaled / 1000
    frac_part = scaled % 1000
    frac_str = _str(frac_part)
    while frac_str.length < 3
      frac_str = _add("0", frac_str)
    end
    mantissa = _add(_add(_str(int_part), "."), frac_str)
    exp_sign = "+"
    exp_abs = exp
    if exp < 0
      exp_sign = "-"
      exp_abs = -exp
    end
    exp_str = _str(exp_abs)
    if exp_abs < 10
      exp_str = _add("0", exp_str)
    end
    return _add(_add(_add(_add(sign, mantissa), "e"), exp_sign), exp_str)
  end
  def orbital_transfer_work(mass_central, mass_object, r_initial, r_final)
    _G = 6.6743 * pow10(-11)
    if r_initial <= 0.0 || r_final <= 0.0
      panic("Orbital radii must be greater than zero.")
    end
    work = (_G * mass_central * mass_object / 2.0) * (1.0 / r_initial - 1.0 / r_final)
    return format_scientific_3(work)
  end
  def test_orbital_transfer_work()
    if !_eq(orbital_transfer_work(5.972 * pow10(24), 1000.0, 6.371 * pow10(6), 7.0 * pow10(6)), "2.811e+09")
      panic("case1 failed")
    end
    if !_eq(orbital_transfer_work(5.972 * pow10(24), 500.0, 7.0 * pow10(6), 6.371 * pow10(6)), "-1.405e+09")
      panic("case2 failed")
    end
    if !_eq(orbital_transfer_work(1.989 * pow10(30), 1000.0, 1.5 * pow10(11), 2.28 * pow10(11)), "1.514e+11")
      panic("case3 failed")
    end
  end
  def main()
    test_orbital_transfer_work()
    puts(orbital_transfer_work(5.972 * pow10(24), 1000.0, 6.371 * pow10(6), 7.0 * pow10(6)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
