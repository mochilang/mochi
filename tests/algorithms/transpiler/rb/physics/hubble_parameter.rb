# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def sqrt_approx(x)
    if _eq(x, 0.0)
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def hubble_parameter(hubble_constant, radiation_density, matter_density, dark_energy, redshift)
    parameters = [redshift, radiation_density, matter_density, dark_energy]
    i = 0
    while i < _len(parameters)
      if (__tmp1 = parameters; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) < 0.0
        panic("All input parameters must be positive")
      end
      i = _add(i, 1)
    end
    i = 1
    while i < 4
      if (__tmp2 = parameters; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)) > 1.0
        panic("Relative densities cannot be greater than one")
      end
      i = _add(i, 1)
    end
    curvature = 1.0 - (_add(_add(matter_density, radiation_density), dark_energy))
    zp1 = _add(redshift, 1.0)
    e2 = _add(_add(_add(radiation_density * zp1 ** 4, matter_density * zp1 ** 3), curvature * zp1 ** 2), dark_energy)
    return hubble_constant * sqrt_approx(e2)
  end
  def test_hubble_parameter()
    h = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)
    if h < 68.2999 || h > 68.3001
      panic("hubble_parameter test failed")
    end
  end
  def main()
    test_hubble_parameter()
    puts(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
