# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pow(base, exp)
    result = 1.0.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def sqrt_approx(x)
    if x == 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def hubble_parameter(hubble_constant, radiation_density, matter_density, dark_energy, redshift)
    parameters = [redshift, radiation_density, matter_density, dark_energy]
    i = 0.clone
    while i < parameters.length
      if parameters[i] < 0.0
        panic("All input parameters must be positive")
      end
      i = _add(i, 1).clone
    end
    i = 1.clone
    while i < 4
      if parameters[i] > 1.0
        panic("Relative densities cannot be greater than one")
      end
      i = _add(i, 1).clone
    end
    curvature = 1.0 - (_add(_add(matter_density, radiation_density), dark_energy))
    zp1 = _add(redshift, 1.0)
    e2 = _add(_add(_add(radiation_density * zp1 ** 4, matter_density * zp1 ** 3), curvature * zp1 ** 2), dark_energy)
    return hubble_constant * sqrt_approx(e2)
  end
  def test_hubble_parameter()
    h = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)
    if h < 68.2999 || h > 68.3001
      panic("hubble_parameter test failed")
    end
  end
  def main()
    test_hubble_parameter()
    puts(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
