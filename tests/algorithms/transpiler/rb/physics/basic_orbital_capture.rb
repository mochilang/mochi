# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pow10(n)
    result = 1.0.clone
    i = 0.clone
    while i < n
      result = result * 10.0.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def sqrt(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def capture_radii(target_body_radius, target_body_mass, projectile_velocity)
    if target_body_mass < 0.0
      panic("Mass cannot be less than 0")
    end
    if target_body_radius < 0.0
      panic("Radius cannot be less than 0")
    end
    if projectile_velocity > $C
      panic("Cannot go beyond speed of light")
    end
    escape_velocity_squared = (2.0 * $G * target_body_mass) / target_body_radius
    denom = projectile_velocity * projectile_velocity
    capture_radius = target_body_radius * sqrt(_add(1.0, escape_velocity_squared / denom))
    return capture_radius
  end
  def capture_area(capture_radius)
    if capture_radius < 0.0
      panic("Cannot have a capture radius less than 0")
    end
    sigma = $PI * capture_radius * capture_radius
    return sigma
  end
  def run_tests()
    r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0)
    if (r - 1.720959069143714 * pow10(10)).abs() > 1.0
      panic("capture_radii failed")
    end
    a = capture_area(r)
    if (a - 9.304455331801812 * pow10(20)).abs() > 1.0
      panic("capture_area failed")
    end
  end
  def main()
    run_tests()
    r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0)
    puts(_str(r))
    puts(_str(capture_area(r)))
  end
  $G = 6.6743e-11
  $C = 299792458.0
  $PI = 3.141592653589793
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
