# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exp_approx(x)
    y = x.clone
    is_neg = false.clone
    if x < 0.0
      is_neg = true.clone
      y = -x.clone
    end
    term = 1.0.clone
    sum = 1.0.clone
    n = 1.clone
    while n < 30
      term = term * y / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    if is_neg
      return 1.0 / sum
    end
    return sum
  end
  def ln_series(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t.clone
    sum = 0.0.clone
    n = 1.clone
    while n <= 19
      sum = _add(sum, term / ((n).to_f)).clone
      term = term * t * t.clone
      n = _add(n, 2).clone
    end
    return 2.0 * sum
  end
  def ln(x)
    y = x.clone
    k = 0.clone
    while y >= 10.0
      y = y / 10.0.clone
      k = _add(k, 1).clone
    end
    while y < 1.0
      y = y * 10.0.clone
      k = k - 1.clone
    end
    return _add(ln_series(y), ((k).to_f) * ln_series(10.0))
  end
  def powf(base, exponent)
    return exp_approx(exponent * ln(base))
  end
  def rainfall_intensity(coefficient_k, coefficient_a, coefficient_b, coefficient_c, return_period, duration)
    if coefficient_k <= 0.0
      panic("All parameters must be positive.")
    end
    if coefficient_a <= 0.0
      panic("All parameters must be positive.")
    end
    if coefficient_b <= 0.0
      panic("All parameters must be positive.")
    end
    if coefficient_c <= 0.0
      panic("All parameters must be positive.")
    end
    if return_period <= 0.0
      panic("All parameters must be positive.")
    end
    if duration <= 0.0
      panic("All parameters must be positive.")
    end
    numerator = coefficient_k * powf(return_period, coefficient_a)
    denominator = powf(_add(duration, coefficient_b), coefficient_c)
    return numerator / denominator
  end
  $r1 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0)
  puts(_str($r1))
  $r2 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0)
  puts(_str($r2))
  $r3 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0)
  puts(_str($r3))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
