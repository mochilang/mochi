# Generated by Mochi transpiler v0.10.64 on 2025-08-12 15:27 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:to_h)
    obj.to_h.key?(key.to_sym)
  else
    obj.respond_to?(:include?) && obj.include?(key)
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def beta(velocity)
    if velocity > $c
      panic("Speed must not exceed light speed 299,792,458 [m/s]!")
    end
    if velocity < 1.0
      panic("Speed must be greater than or equal to 1!")
    end
    return velocity / $c
  end
  def gamma(velocity)
    b = beta(velocity)
    return 1.0 / sqrtApprox(1.0 - b * b)
  end
  def transformation_matrix(velocity)
    g = gamma(velocity)
    b = beta(velocity)
    return [[g, -g * b, 0.0, 0.0], [-g * b, g, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]
  end
  def mat_vec_mul(mat, vec)
    res = []
    i = 0
    while i < 4
      row = (__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      value = _add(_add(_add((__tmp2 = row; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0)) * (__tmp3 = vec; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0)), (__tmp4 = row; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1)) * (__tmp5 = vec; __tmp5.is_a?(Hash) ? __tmp5[1] : _idx(__tmp5, 1))), (__tmp6 = row; __tmp6.is_a?(Hash) ? __tmp6[2] : _idx(__tmp6, 2)) * (__tmp7 = vec; __tmp7.is_a?(Hash) ? __tmp7[2] : _idx(__tmp7, 2))), (__tmp8 = row; __tmp8.is_a?(Hash) ? __tmp8[3] : _idx(__tmp8, 3)) * (__tmp9 = vec; __tmp9.is_a?(Hash) ? __tmp9[3] : _idx(__tmp9, 3)))
      res = _add(res, [value])
      i = _add(i, 1)
    end
    return res
  end
  def transform(velocity, event)
    g = gamma(velocity)
    b = beta(velocity)
    ct = (__tmp10 = event; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)) * $c
    x = (__tmp11 = event; __tmp11.is_a?(Hash) ? __tmp11[1] : _idx(__tmp11, 1))
    return [g * ct - g * b * x, _add(-g * b * ct, g * x), (__tmp12 = event; __tmp12.is_a?(Hash) ? __tmp12[2] : _idx(__tmp12, 2)), (__tmp13 = event; __tmp13.is_a?(Hash) ? __tmp13[3] : _idx(__tmp13, 3))]
  end
  $c = 299792458.0
  puts(_str(beta($c)))
  puts(_str(beta(199792458.0)))
  puts(_str(beta(100000.0)))
  puts(_str(gamma(4.0)))
  puts(_str(gamma(100000.0)))
  puts(_str(gamma(30000000.0)))
  puts(((x = transformation_matrix(29979245.0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $v = transform(29979245.0, [1.0, 2.0, 3.0, 4.0])
  puts(((x = $v); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
