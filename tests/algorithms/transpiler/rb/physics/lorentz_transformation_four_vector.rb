# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def beta(velocity)
    if velocity > $c
      panic("Speed must not exceed light speed 299,792,458 [m/s]!")
    end
    if velocity < 1.0
      panic("Speed must be greater than or equal to 1!")
    end
    return velocity / $c
  end
  def gamma(velocity)
    b = beta(velocity)
    return 1.0 / sqrtApprox(1.0 - b * b)
  end
  def transformation_matrix(velocity)
    g = gamma(velocity)
    b = beta(velocity)
    return [[g, -g * b, 0.0, 0.0], [-g * b, g, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]
  end
  def mat_vec_mul(mat, vec)
    res = [].clone
    i = 0.clone
    while i < 4
      row = mat[i]
      value = _add(_add(_add(row[0] * vec[0], row[1] * vec[1]), row[2] * vec[2]), row[3] * vec[3])
      res = _add(res, [value]).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def transform(velocity, event)
    g = gamma(velocity)
    b = beta(velocity)
    ct = event[0] * $c
    x = event[1]
    return [g * ct - g * b * x, _add(-g * b * ct, g * x), event[2], event[3]]
  end
  $c = 299792458.0
  puts(_str(beta($c)))
  puts(_str(beta(199792458.0)))
  puts(_str(beta(100000.0)))
  puts(_str(gamma(4.0)))
  puts(_str(gamma(100000.0)))
  puts(_str(gamma(30000000.0)))
  puts(((x = transformation_matrix(29979245.0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  $v = transform(29979245.0, [1.0, 2.0, 3.0, 4.0])
  puts(((x = $v); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
