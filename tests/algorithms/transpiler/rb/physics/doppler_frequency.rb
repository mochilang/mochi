# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def doppler_effect(org_freq, wave_vel, obs_vel, src_vel)
    if wave_vel == src_vel
      panic("division by zero implies vs=v and observer in front of the source")
    end
    doppler_freq = (org_freq * (_add(wave_vel, obs_vel))) / (wave_vel - src_vel)
    if doppler_freq <= 0.0
      panic("non-positive frequency implies vs>v or v0>v (in the opposite direction)")
    end
    return doppler_freq
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def almost_equal(a, b, tol)
    return absf(a - b) <= tol
  end
  def test_doppler_effect()
    if !almost_equal(doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 1e-07)
      panic("test 1 failed")
    end
    if !almost_equal(doppler_effect(100.0, 330.0, -10.0, 0.0), 96.96969696969697, 1e-07)
      panic("test 2 failed")
    end
    if !almost_equal(doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 1e-07)
      panic("test 3 failed")
    end
    if !almost_equal(doppler_effect(100.0, 330.0, 0.0, -10.0), 97.05882352941177, 1e-07)
      panic("test 4 failed")
    end
    if !almost_equal(doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 1e-07)
      panic("test 5 failed")
    end
    if !almost_equal(doppler_effect(100.0, 330.0, -10.0, -10.0), 94.11764705882354, 1e-07)
      panic("test 6 failed")
    end
  end
  def main()
    test_doppler_effect()
    puts(doppler_effect(100.0, 330.0, 10.0, 0.0))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
