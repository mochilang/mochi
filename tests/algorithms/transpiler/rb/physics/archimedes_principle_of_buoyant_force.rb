# Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:16 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def archimedes_principle(fluid_density, volume, gravity)
    if fluid_density <= 0.0
      panic("Impossible fluid density")
    end
    if volume <= 0.0
      panic("Impossible object volume")
    end
    if gravity < 0.0
      panic("Impossible gravity")
    end
    return fluid_density * volume * gravity
  end
  def archimedes_principle_default(fluid_density, volume)
    res = archimedes_principle(fluid_density, volume, $G)
    return res
  end
  $G = 9.80665
  # test archimedes principle
  raise 'assertion failed' unless archimedes_principle(500.0, 4.0, 9.8) == 19600.0
  raise 'assertion failed' unless archimedes_principle(997.0, 0.5, 9.8) == 4885.3
  $r = archimedes_principle_default(997.0, 0.7)
  $expected = archimedes_principle(997.0, 0.7, $G)
  raise 'assertion failed' unless $r == $expected
  raise 'assertion failed' unless archimedes_principle(997.0, 0.7, 0.0) == 0.0
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
