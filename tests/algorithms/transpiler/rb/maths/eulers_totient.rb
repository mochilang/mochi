# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def totient(n)
    is_prime = [].clone
    totients = [].clone
    primes = [].clone
    i = 0.clone
    while i <= n
      is_prime = (is_prime << (true)).clone
      totients = (totients << (i - 1)).clone
      i = _add(i, 1).clone
    end
    i = 2.clone
    while i <= n
      if is_prime[i]
        primes = (primes << (i)).clone
      end
      j = 0.clone
      while j < primes.length
        p = primes[j]
        if i * p >= n
          break
        end
        is_prime[i * p] = false
        if i % p == 0
          totients[i * p] = totients[i] * p
          break
        end
        totients[i * p] = totients[i] * (p - 1)
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return totients
  end
  def test_totient()
    expected = [-1, 0, 1, 2, 2, 4, 2, 6, 4, 6, 9]
    res = totient(10)
    idx = 0.clone
    while idx < expected.length
      if res[idx] != expected[idx]
        panic(_add("totient mismatch at ", _str(idx)))
      end
      idx = _add(idx, 1).clone
    end
  end
  def main()
    test_totient()
    n = 10
    res = totient(n)
    i = 1.clone
    while i < n
      puts(_add(_add(_add(_str(i), " has "), _str(res[i])), " relative primes."))
      i = _add(i, 1).clone
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
