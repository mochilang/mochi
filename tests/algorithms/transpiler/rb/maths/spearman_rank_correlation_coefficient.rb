# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def assign_ranks(data)
    ranks = [].clone
    n = data.length
    i = 0.clone
    while i < n
      rank = 1.clone
      j = 0.clone
      while j < n
        if data[j] < data[i] || (data[j] == data[i] && j < i)
          rank = _add(rank, 1).clone
        end
        j = _add(j, 1).clone
      end
      ranks = (ranks << (rank)).clone
      i = _add(i, 1).clone
    end
    return ranks
  end
  def calculate_spearman_rank_correlation(var1, var2)
    if var1.length != var2.length
      panic("Lists must have equal length")
    end
    n = var1.length
    rank1 = assign_ranks(var1)
    rank2 = assign_ranks(var2)
    i = 0.clone
    d_sq = 0.0.clone
    while i < n
      diff = (((rank1[i] - rank2[i])).to_f)
      d_sq = _add(d_sq, diff * diff).clone
      i = _add(i, 1).clone
    end
    n_f = ((n).to_f)
    return 1.0 - (6.0 * d_sq) / (n_f * (n_f * n_f - 1.0))
  end
  def test_spearman()
    x = [1.0, 2.0, 3.0, 4.0, 5.0]
    y_inc = [2.0, 4.0, 6.0, 8.0, 10.0]
    if calculate_spearman_rank_correlation(x, y_inc) != 1.0
      panic("case1")
    end
    y_dec = [5.0, 4.0, 3.0, 2.0, 1.0]
    if calculate_spearman_rank_correlation(x, y_dec) != (-1.0)
      panic("case2")
    end
    y_mix = [5.0, 1.0, 2.0, 9.0, 5.0]
    if calculate_spearman_rank_correlation(x, y_mix) != 0.6
      panic("case3")
    end
  end
  def main()
    test_spearman()
    puts(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 4.0, 6.0, 8.0, 10.0])))
    puts(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 4.0, 3.0, 2.0, 1.0])))
    puts(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 1.0, 2.0, 9.0, 5.0])))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
