# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow_int(base, exp)
    result = 1.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def prime_factors(n)
    if n <= 0
      panic("Only positive integers have prime factors")
    end
    num = n.clone
    pf = [].clone
    while num % 2 == 0
      pf = (pf << (2)).clone
      num = num / 2.clone
    end
    i = 3.clone
    while i * i <= num
      while num % i == 0
        pf = (pf << (i)).clone
        num = num / i.clone
      end
      i = _add(i, 2).clone
    end
    if num > 2
      pf = (pf << (num)).clone
    end
    return pf
  end
  def number_of_divisors(n)
    if n <= 0
      panic("Only positive numbers are accepted")
    end
    num = n.clone
    div = 1.clone
    temp = 1.clone
    while num % 2 == 0
      temp = _add(temp, 1).clone
      num = num / 2.clone
    end
    div = div * temp.clone
    i = 3.clone
    while i * i <= num
      temp = 1.clone
      while num % i == 0
        temp = _add(temp, 1).clone
        num = num / i.clone
      end
      div = div * temp.clone
      i = _add(i, 2).clone
    end
    if num > 1
      div = div * 2.clone
    end
    return div
  end
  def sum_of_divisors(n)
    if n <= 0
      panic("Only positive numbers are accepted")
    end
    num = n.clone
    s = 1.clone
    temp = 1.clone
    while num % 2 == 0
      temp = _add(temp, 1).clone
      num = num / 2.clone
    end
    if temp > 1
      s = s * ((pow_int(2, temp) - 1) / (2 - 1)).clone
    end
    i = 3.clone
    while i * i <= num
      temp = 1.clone
      while num % i == 0
        temp = _add(temp, 1).clone
        num = num / i.clone
      end
      if temp > 1
        s = s * ((pow_int(i, temp) - 1) / (i - 1)).clone
      end
      i = _add(i, 2).clone
    end
    return s
  end
  def contains(arr, x)
    idx = 0.clone
    while idx < arr.length
      if arr[idx] == x
        return true
      end
      idx = _add(idx, 1).clone
    end
    return false
  end
  def unique(arr)
    result = [].clone
    idx = 0.clone
    while idx < arr.length
      v = arr[idx]
      if !result.include?(v)
        result = (result << (v)).clone
      end
      idx = _add(idx, 1).clone
    end
    return result
  end
  def euler_phi(n)
    if n <= 0
      panic("Only positive numbers are accepted")
    end
    s = n.clone
    factors = unique(prime_factors(n))
    idx = 0.clone
    while idx < factors.length
      x = factors[idx]
      s = (s / x) * (x - 1).clone
      idx = _add(idx, 1).clone
    end
    return s
  end
  puts(((x = prime_factors(100)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(number_of_divisors(100)))
  puts(_str(sum_of_divisors(100)))
  puts(_str(euler_phi(100)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
