# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow_int(base, exp)
    result = 1
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def prime_factors(n)
    if n <= 0
      panic("Only positive integers have prime factors")
    end
    num = n
    pf = []
    while _eq(num % 2, 0)
      pf = _append(pf, 2)
      num = num / 2
    end
    i = 3
    while i * i <= num
      while _eq(num % i, 0)
        pf = _append(pf, i)
        num = num / i
      end
      i = _add(i, 2)
    end
    if num > 2
      pf = _append(pf, num)
    end
    return pf
  end
  def number_of_divisors(n)
    if n <= 0
      panic("Only positive numbers are accepted")
    end
    num = n
    div = 1
    temp = 1
    while _eq(num % 2, 0)
      temp = _add(temp, 1)
      num = num / 2
    end
    div = div * temp
    i = 3
    while i * i <= num
      temp = 1
      while _eq(num % i, 0)
        temp = _add(temp, 1)
        num = num / i
      end
      div = div * temp
      i = _add(i, 2)
    end
    if num > 1
      div = div * 2
    end
    return div
  end
  def sum_of_divisors(n)
    if n <= 0
      panic("Only positive numbers are accepted")
    end
    num = n
    s = 1
    temp = 1
    while _eq(num % 2, 0)
      temp = _add(temp, 1)
      num = num / 2
    end
    if temp > 1
      s = s * ((pow_int(2, temp) - 1) / (2 - 1))
    end
    i = 3
    while i * i <= num
      temp = 1
      while _eq(num % i, 0)
        temp = _add(temp, 1)
        num = num / i
      end
      if temp > 1
        s = s * ((pow_int(i, temp) - 1) / (i - 1))
      end
      i = _add(i, 2)
    end
    return s
  end
  def contains(arr, x)
    idx = 0
    while idx < _len(arr)
      if _eq((__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[idx] : _idx(__tmp1, idx)), x)
        return true
      end
      idx = _add(idx, 1)
    end
    return false
  end
  def unique(arr)
    result = []
    idx = 0
    while idx < _len(arr)
      v = (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx))
      if !contains(result, v)
        result = _append(result, v)
      end
      idx = _add(idx, 1)
    end
    return result
  end
  def euler_phi(n)
    if n <= 0
      panic("Only positive numbers are accepted")
    end
    s = n
    factors = unique(prime_factors(n))
    idx = 0
    while idx < _len(factors)
      x = (__tmp3 = factors; __tmp3.is_a?(Hash) ? __tmp3[idx] : _idx(__tmp3, idx))
      s = (s / x) * (x - 1)
      idx = _add(idx, 1)
    end
    return s
  end
  puts(((x = prime_factors(100)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(number_of_divisors(100)))
  puts(_str(sum_of_divisors(100)))
  puts(_str(euler_phi(100)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
