# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def double_factorial_recursive(n)
    if n < 0
      panic("double_factorial_recursive() not defined for negative values")
    end
    if n <= 1
      return 1
    end
    return n * double_factorial_recursive(n - 2)
  end
  def double_factorial_iterative(n)
    if n < 0
      panic("double_factorial_iterative() not defined for negative values")
    end
    result = 1.clone
    i = n.clone
    while i > 0
      result = result * i.clone
      i = i - 2.clone
    end
    return result
  end
  def test_double_factorial()
    if double_factorial_recursive(0) != 1
      panic("0!! recursive failed")
    end
    if double_factorial_iterative(0) != 1
      panic("0!! iterative failed")
    end
    if double_factorial_recursive(1) != 1
      panic("1!! recursive failed")
    end
    if double_factorial_iterative(1) != 1
      panic("1!! iterative failed")
    end
    if double_factorial_recursive(5) != 15
      panic("5!! recursive failed")
    end
    if double_factorial_iterative(5) != 15
      panic("5!! iterative failed")
    end
    if double_factorial_recursive(6) != 48
      panic("6!! recursive failed")
    end
    if double_factorial_iterative(6) != 48
      panic("6!! iterative failed")
    end
    n = 0.clone
    while n <= 10
      if double_factorial_recursive(n) != double_factorial_iterative(n)
        panic("double factorial mismatch")
      end
      n = _add(n, 1).clone
    end
  end
  def main()
    test_double_factorial()
    puts(double_factorial_iterative(10))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
