# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def mod_pow(base, exponent, modulus)
    result = 1.clone
    b = base % modulus.clone
    e = exponent.clone
    while e > 0
      if e % 2 == 1
        result = (result * b) % modulus.clone
      end
      b = (b * b) % modulus.clone
      e = e / 2.clone
    end
    return result
  end
  def pow_float(base, exponent)
    exp = exponent.clone
    result = 1.0.clone
    if exp < 0
      exp = -exp.clone
    end
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    if exponent < 0
      result = 1.0 / result.clone
    end
    return result
  end
  def hex_digit(n)
    if n < 10
      return _str(n)
    end
    letters = ["a", "b", "c", "d", "e", "f"]
    return letters[n - 10]
  end
  def floor_float(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def subsum(digit_pos_to_extract, denominator_addend, precision)
    total = 0.0.clone
    sum_index = 0.clone
    while sum_index < _add(digit_pos_to_extract, precision)
      denominator = _add(8 * sum_index, denominator_addend)
      if sum_index < digit_pos_to_extract
        exponent = digit_pos_to_extract - 1 - sum_index
        exponential_term = mod_pow(16, exponent, denominator)
        total = _add(total, ((exponential_term).to_f) / ((denominator).to_f)).clone
      else
        exponent = digit_pos_to_extract - 1 - sum_index
        exponential_term = pow_float(16.0, exponent)
        total = _add(total, exponential_term / ((denominator).to_f)).clone
      end
      sum_index = _add(sum_index, 1).clone
    end
    return total
  end
  def bailey_borwein_plouffe(digit_position, precision)
    if digit_position <= 0
      panic("Digit position must be a positive integer")
    end
    if precision < 0
      panic("Precision must be a nonnegative integer")
    end
    sum_result = 4.0 * subsum(digit_position, 1, precision) - 2.0 * subsum(digit_position, 4, precision) - 1.0 * subsum(digit_position, 5, precision) - 1.0 * subsum(digit_position, 6, precision)
    fraction = sum_result - floor_float(sum_result)
    digit = ((fraction * 16.0)).to_i
    hd = hex_digit(digit)
    return hd
  end
  $digits = "".clone
  $i = 1.clone
  while $i <= 10
    $digits = _add($digits, bailey_borwein_plouffe($i, 1000)).clone
    $i = _add($i, 1).clone
  end
  puts($digits)
  puts(bailey_borwein_plouffe(5, 10000))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
