# Generated by Mochi transpiler v0.10.67 on 2025-08-17 08:49 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def mod_pow(base, exponent, modulus)
    result = 1
    b = base % modulus
    e = exponent
    while e > 0
      if _eq(e % 2, 1)
        result = (result * b) % modulus
      end
      b = (b * b) % modulus
      e = e / 2
    end
    return result
  end
  def pow_float(base, exponent)
    exp = exponent
    result = 1.0
    if exp < 0
      exp = -exp
    end
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    if exponent < 0
      result = 1.0 / result
    end
    return result
  end
  def hex_digit(n)
    if n < 10
      return _str(n)
    end
    letters = ["a", "b", "c", "d", "e", "f"]
    return (__tmp1 = letters; __tmp1.is_a?(Hash) ? __tmp1[n - 10] : _idx(__tmp1, n - 10))
  end
  def floor_float(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def subsum(digit_pos_to_extract, denominator_addend, precision)
    total = 0.0
    sum_index = 0
    while sum_index < _add(digit_pos_to_extract, precision)
      denominator = _add(8 * sum_index, denominator_addend)
      if sum_index < digit_pos_to_extract
        exponent = digit_pos_to_extract - 1 - sum_index
        exponential_term = mod_pow(16, exponent, denominator)
        total = _add(total, ((exponential_term).to_f) / ((denominator).to_f))
      else
        exponent = digit_pos_to_extract - 1 - sum_index
        exponential_term = pow_float(16.0, exponent)
        total = _add(total, exponential_term / ((denominator).to_f))
      end
      sum_index = _add(sum_index, 1)
    end
    return total
  end
  def bailey_borwein_plouffe(digit_position, precision)
    if digit_position <= 0
      panic("Digit position must be a positive integer")
    end
    if precision < 0
      panic("Precision must be a nonnegative integer")
    end
    sum_result = 4.0 * subsum(digit_position, 1, precision) - 2.0 * subsum(digit_position, 4, precision) - 1.0 * subsum(digit_position, 5, precision) - 1.0 * subsum(digit_position, 6, precision)
    fraction = sum_result - floor_float(sum_result)
    digit = ((fraction * 16.0)).to_i
    hd = hex_digit(digit)
    return hd
  end
  $digits = ""
  $i = 1
  while $i <= 10
    $digits = _add($digits, bailey_borwein_plouffe($i, 1000))
    $i = _add($i, 1)
  end
  puts($digits)
  puts(bailey_borwein_plouffe(5, 10000))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
