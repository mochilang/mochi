# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def minf(a, b)
    if a < b
      return a
    end
    return b
  end
  def maxf(a, b)
    if a > b
      return a
    end
    return b
  end
  def vol_cube(side_length)
    if side_length < 0.0
      panic("vol_cube() only accepts non-negative values")
    end
    return side_length * side_length * side_length
  end
  def vol_spherical_cap(height, radius)
    if height < 0.0 || radius < 0.0
      panic("vol_spherical_cap() only accepts non-negative values")
    end
    return (1.0 / 3.0) * $PI * height * height * (3.0 * radius - height)
  end
  def vol_sphere(radius)
    if radius < 0.0
      panic("vol_sphere() only accepts non-negative values")
    end
    return (4.0 / 3.0) * $PI * radius * radius * radius
  end
  def vol_spheres_intersect(radius_1, radius_2, centers_distance)
    if radius_1 < 0.0 || radius_2 < 0.0 || centers_distance < 0.0
      panic("vol_spheres_intersect() only accepts non-negative values")
    end
    if _eq(centers_distance, 0.0)
      return vol_sphere(minf(radius_1, radius_2))
    end
    h1 = (_add(radius_1 - radius_2, centers_distance)) * (_add(radius_1, radius_2) - centers_distance) / (2.0 * centers_distance)
    h2 = (_add(radius_2 - radius_1, centers_distance)) * (_add(radius_2, radius_1) - centers_distance) / (2.0 * centers_distance)
    return _add(vol_spherical_cap(h1, radius_2), vol_spherical_cap(h2, radius_1))
  end
  def vol_spheres_union(radius_1, radius_2, centers_distance)
    if radius_1 <= 0.0 || radius_2 <= 0.0 || centers_distance < 0.0
      panic("vol_spheres_union() only accepts non-negative values, non-zero radius")
    end
    if _eq(centers_distance, 0.0)
      return vol_sphere(maxf(radius_1, radius_2))
    end
    return _add(vol_sphere(radius_1), vol_sphere(radius_2)) - vol_spheres_intersect(radius_1, radius_2, centers_distance)
  end
  def vol_cuboid(width, height, length)
    if width < 0.0 || height < 0.0 || length < 0.0
      panic("vol_cuboid() only accepts non-negative values")
    end
    return width * height * length
  end
  def vol_cone(area_of_base, height)
    if height < 0.0 || area_of_base < 0.0
      panic("vol_cone() only accepts non-negative values")
    end
    return area_of_base * height / 3.0
  end
  def vol_right_circ_cone(radius, height)
    if height < 0.0 || radius < 0.0
      panic("vol_right_circ_cone() only accepts non-negative values")
    end
    return $PI * radius * radius * height / 3.0
  end
  def vol_prism(area_of_base, height)
    if height < 0.0 || area_of_base < 0.0
      panic("vol_prism() only accepts non-negative values")
    end
    return area_of_base * height
  end
  def vol_pyramid(area_of_base, height)
    if height < 0.0 || area_of_base < 0.0
      panic("vol_pyramid() only accepts non-negative values")
    end
    return area_of_base * height / 3.0
  end
  def vol_hemisphere(radius)
    if radius < 0.0
      panic("vol_hemisphere() only accepts non-negative values")
    end
    return radius * radius * radius * $PI * 2.0 / 3.0
  end
  def vol_circular_cylinder(radius, height)
    if height < 0.0 || radius < 0.0
      panic("vol_circular_cylinder() only accepts non-negative values")
    end
    return radius * radius * height * $PI
  end
  def vol_hollow_circular_cylinder(inner_radius, outer_radius, height)
    if inner_radius < 0.0 || outer_radius < 0.0 || height < 0.0
      panic("vol_hollow_circular_cylinder() only accepts non-negative values")
    end
    if outer_radius <= inner_radius
      panic("outer_radius must be greater than inner_radius")
    end
    return $PI * (outer_radius * outer_radius - inner_radius * inner_radius) * height
  end
  def vol_conical_frustum(height, radius_1, radius_2)
    if radius_1 < 0.0 || radius_2 < 0.0 || height < 0.0
      panic("vol_conical_frustum() only accepts non-negative values")
    end
    return (1.0 / 3.0) * $PI * height * (_add(_add(radius_1 * radius_1, radius_2 * radius_2), radius_1 * radius_2))
  end
  def vol_torus(torus_radius, tube_radius)
    if torus_radius < 0.0 || tube_radius < 0.0
      panic("vol_torus() only accepts non-negative values")
    end
    return 2.0 * $PI * $PI * torus_radius * tube_radius * tube_radius
  end
  def vol_icosahedron(tri_side)
    if tri_side < 0.0
      panic("vol_icosahedron() only accepts non-negative values")
    end
    return tri_side * tri_side * tri_side * (_add(3.0, $SQRT5)) * 5.0 / 12.0
  end
  def main()
    puts("Volumes:")
    puts(_add("Cube: ", _str(vol_cube(2.0))))
    puts(_add("Cuboid: ", _str(vol_cuboid(2.0, 2.0, 2.0))))
    puts(_add("Cone: ", _str(vol_cone(2.0, 2.0))))
    puts(_add("Right Circular Cone: ", _str(vol_right_circ_cone(2.0, 2.0))))
    puts(_add("Prism: ", _str(vol_prism(2.0, 2.0))))
    puts(_add("Pyramid: ", _str(vol_pyramid(2.0, 2.0))))
    puts(_add("Sphere: ", _str(vol_sphere(2.0))))
    puts(_add("Hemisphere: ", _str(vol_hemisphere(2.0))))
    puts(_add("Circular Cylinder: ", _str(vol_circular_cylinder(2.0, 2.0))))
    puts(_add("Torus: ", _str(vol_torus(2.0, 2.0))))
    puts(_add("Conical Frustum: ", _str(vol_conical_frustum(2.0, 2.0, 4.0))))
    puts(_add("Spherical cap: ", _str(vol_spherical_cap(1.0, 2.0))))
    puts(_add("Spheres intersection: ", _str(vol_spheres_intersect(2.0, 2.0, 1.0))))
    puts(_add("Spheres union: ", _str(vol_spheres_union(2.0, 2.0, 1.0))))
    puts(_add("Hollow Circular Cylinder: ", _str(vol_hollow_circular_cylinder(1.0, 2.0, 3.0))))
    puts(_add("Icosahedron: ", _str(vol_icosahedron(2.5))))
  end
  $PI = 3.141592653589793
  $SQRT5 = 2.23606797749979
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
