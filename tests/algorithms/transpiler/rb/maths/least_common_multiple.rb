# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = (a >= 0 ? a : -a).clone
    y = (b >= 0 ? b : -b).clone
    while y != 0
      temp = x % y
      x = y.clone
      y = temp.clone
    end
    return x
  end
  def lcm_slow(a, b)
    max = (a >= b ? a : b)
    multiple = max.clone
    while (multiple % a != 0) || (multiple % b != 0)
      multiple = _add(multiple, max).clone
    end
    return multiple
  end
  def lcm_fast(a, b)
    return (a / gcd(a, b)) * b
  end
  puts(_str(lcm_slow(5, 2)))
  puts(_str(lcm_slow(12, 76)))
  puts(_str(lcm_fast(5, 2)))
  puts(_str(lcm_fast(12, 76)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
