# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ceil_int(x)
    n = (x).to_i.clone
    if (n).to_f < x
      n = _add(n, 1).clone
    end
    return n
  end
  def explicit_euler(ode_func, y0, x0, step_size, x_end)
    n = ceil_int((x_end - x0) / step_size)
    y = [].clone
    i = 0.clone
    while i <= n
      y = (y << (0.0)).clone
      i = _add(i, 1).clone
    end
    y[0] = y0
    x = x0.clone
    k = 0.clone
    while k < n
      y[_add(k, 1)] = _add(y[k], step_size * ode_func.call(x, y[k]))
      x = _add(x, step_size).clone
      k = _add(k, 1).clone
    end
    return y
  end
  def abs_float(a)
    if a < 0.0
      return -a
    end
    return a
  end
  def test_explicit_euler()
    f = ->(x, y) { y }
    ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
    last = ys[ys.length - 1]
    if abs_float(last - 144.77277243257308) > 0.001
      panic("explicit_euler failed")
    end
  end
  def main()
    test_explicit_euler()
    f = ->(x, y) { y }
    ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
    puts(ys[ys.length - 1])
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
