# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exact_prime_factor_count(n)
    count = 0.clone
    num = n.clone
    if num % 2 == 0
      count = _add(count, 1).clone
      while num % 2 == 0
        num = num / 2.clone
      end
    end
    i = 3.clone
    while i * i <= num
      if num % i == 0
        count = _add(count, 1).clone
        while num % i == 0
          num = num / i.clone
        end
      end
      i = _add(i, 2).clone
    end
    if num > 2
      count = _add(count, 1).clone
    end
    return count
  end
  def ln(x)
    ln2 = 0.6931471805599453
    y = x.clone
    k = 0.0.clone
    while y > 2.0
      y = y / 2.0.clone
      k = _add(k, ln2).clone
    end
    while y < 1.0
      y = y * 2.0.clone
      k = k - ln2.clone
    end
    t = (y - 1.0) / (_add(y, 1.0))
    term = t.clone
    sum = 0.0.clone
    n = 1.clone
    while n <= 19
      sum = _add(sum, term / ((n).to_f)).clone
      term = term * t * t.clone
      n = _add(n, 2).clone
    end
    return _add(k, 2.0 * sum)
  end
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def round4(x)
    m = 10000.0
    return (_add(x * m, 0.5)).floor() / m
  end
  def main()
    n = 51242183
    count = exact_prime_factor_count(n)
    puts(_add("The number of distinct prime factors is/are ", _str(count)))
    loglog = ln(ln((n).to_f))
    puts(_add("The value of log(log(n)) is ", _str(round4(loglog))))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
