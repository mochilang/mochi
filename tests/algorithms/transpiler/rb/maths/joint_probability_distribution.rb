# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def key(x, y)
    return _add(_add(_str(x), ","), _str(y))
  end
  def joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities)
    result = {}.clone
    i = 0.clone
    while i < x_values.length
      j = 0.clone
      while j < y_values.length
        k = key(x_values[i], y_values[j])
        result[k] = x_probabilities[i] * y_probabilities[j]
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return result
  end
  def expectation(values, probabilities)
    total = 0.0.clone
    i = 0.clone
    while i < values.length
      total = _add(total, ((values[i]).to_f) * probabilities[i]).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def variance(values, probabilities)
    mean = expectation(values, probabilities)
    total = 0.0.clone
    i = 0.clone
    while i < values.length
      diff = ((values[i]).to_f) - mean
      total = _add(total, diff * diff * probabilities[i]).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def covariance(x_values, y_values, x_probabilities, y_probabilities)
    mean_x = expectation(x_values, x_probabilities)
    mean_y = expectation(y_values, y_probabilities)
    total = 0.0.clone
    i = 0.clone
    while i < x_values.length
      j = 0.clone
      while j < y_values.length
        diff_x = ((x_values[i]).to_f) - mean_x
        diff_y = ((y_values[j]).to_f) - mean_y
        total = _add(total, diff_x * diff_y * x_probabilities[i] * y_probabilities[j]).clone
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return total
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def standard_deviation(v)
    return sqrtApprox(v)
  end
  def main()
    x_values = [1, 2]
    y_values = [-2, 5, 8]
    x_probabilities = [0.7, 0.3]
    y_probabilities = [0.3, 0.5, 0.2]
    jpd = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities)
    i = 0.clone
    while i < x_values.length
      j = 0.clone
      while j < y_values.length
        k = key(x_values[i], y_values[j])
        prob = jpd[k]
        puts(_add(_add(k, "="), _str(prob)))
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    ex = expectation(x_values, x_probabilities)
    ey = expectation(y_values, y_probabilities)
    vx = variance(x_values, x_probabilities)
    vy = variance(y_values, y_probabilities)
    cov = covariance(x_values, y_values, x_probabilities, y_probabilities)
    puts(_add("Ex=", _str(ex)))
    puts(_add("Ey=", _str(ey)))
    puts(_add("Vx=", _str(vx)))
    puts(_add("Vy=", _str(vy)))
    puts(_add("Cov=", _str(cov)))
    puts(_add("Sx=", _str(standard_deviation(vx))))
    puts(_add("Sy=", _str(standard_deviation(vy))))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
