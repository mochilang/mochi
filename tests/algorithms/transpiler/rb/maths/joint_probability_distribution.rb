# Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def key(x, y)
    return _add(_add(_str(x), ","), _str(y))
  end
  def joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities)
    result = {}
    i = 0
    while i < _len(x_values)
      j = 0
      while j < _len(y_values)
        k = key((__tmp1 = x_values; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), (__tmp2 = y_values; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
        result[k] = (__tmp3 = x_probabilities; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) * (__tmp4 = y_probabilities; __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j))
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return result
  end
  def expectation(values, probabilities)
    total = 0.0
    i = 0
    while i < _len(values)
      total = _add(total, (((__tmp5 = values; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))).to_f) * (__tmp6 = probabilities; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)))
      i = _add(i, 1)
    end
    return total
  end
  def variance(values, probabilities)
    mean = expectation(values, probabilities)
    total = 0.0
    i = 0
    while i < _len(values)
      diff = (((__tmp7 = values; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))).to_f) - mean
      total = _add(total, diff * diff * (__tmp8 = probabilities; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
      i = _add(i, 1)
    end
    return total
  end
  def covariance(x_values, y_values, x_probabilities, y_probabilities)
    mean_x = expectation(x_values, x_probabilities)
    mean_y = expectation(y_values, y_probabilities)
    total = 0.0
    i = 0
    while i < _len(x_values)
      j = 0
      while j < _len(y_values)
        diff_x = (((__tmp9 = x_values; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))).to_f) - mean_x
        diff_y = (((__tmp10 = y_values; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j))).to_f) - mean_y
        total = _add(total, diff_x * diff_y * (__tmp11 = x_probabilities; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)) * (__tmp12 = y_probabilities; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j)))
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return total
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def standard_deviation(v)
    return sqrtApprox(v)
  end
  def main()
    x_values = [1, 2]
    y_values = [-2, 5, 8]
    x_probabilities = [0.7, 0.3]
    y_probabilities = [0.3, 0.5, 0.2]
    jpd = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities)
    i = 0
    while i < _len(x_values)
      j = 0
      while j < _len(y_values)
        k = key((__tmp13 = x_values; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)), (__tmp14 = y_values; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j)))
        prob = (__tmp15 = jpd; __tmp15.is_a?(Hash) ? __tmp15[k] : _idx(__tmp15, k))
        puts(_add(_add(k, "="), _str(prob)))
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    ex = expectation(x_values, x_probabilities)
    ey = expectation(y_values, y_probabilities)
    vx = variance(x_values, x_probabilities)
    vy = variance(y_values, y_probabilities)
    cov = covariance(x_values, y_values, x_probabilities, y_probabilities)
    puts(_add("Ex=", _str(ex)))
    puts(_add("Ey=", _str(ey)))
    puts(_add("Vx=", _str(vx)))
    puts(_add("Vy=", _str(vy)))
    puts(_add("Cov=", _str(cov)))
    puts(_add("Sx=", _str(standard_deviation(vx))))
    puts(_add("Sy=", _str(standard_deviation(vy))))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
