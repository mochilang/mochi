# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_val(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def pow_float(base, exp)
    result = 1.0.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def nth_root(value, n)
    if value == 0.0
      return 0.0
    end
    x = value / ((n).to_f).clone
    i = 0.clone
    while i < 20
      num = _add((((n - 1)).to_f) * x, value / pow_float(x, n - 1))
      x = num / ((n).to_f).clone
      i = _add(i, 1).clone
    end
    return x
  end
  def minkowski_distance(point_a, point_b, order)
    if order < 1
      panic("The order must be greater than or equal to 1.")
    end
    if point_a.length != point_b.length
      panic("Both points must have the same dimension.")
    end
    total = 0.0.clone
    idx = 0.clone
    while idx < point_a.length
      diff = abs_val(point_a[idx] - point_b[idx])
      total = _add(total, pow_float(diff, order)).clone
      idx = _add(idx, 1).clone
    end
    return nth_root(total, order)
  end
  def test_minkowski()
    if abs_val(minkowski_distance([1.0, 1.0], [2.0, 2.0], 1) - 2.0) > 0.0001
      panic("minkowski_distance test1 failed")
    end
    if abs_val(minkowski_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], 2) - 8.0) > 0.0001
      panic("minkowski_distance test2 failed")
    end
  end
  def main()
    test_minkowski()
    puts(minkowski_distance([5.0], [0.0], 3))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
