# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrt(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def powf(x, n)
    res = 1.0.clone
    i = 0.clone
    while i < n
      res = res * x.clone
      i = _add(i, 1).clone
    end
    return res
  end
  def roundf(x)
    if x >= 0.0
      return ((_add(x, 0.5))).to_i
    end
    return ((x - 0.5)).to_i
  end
  def fib_iterative(n)
    if n < 0
      panic("n is negative")
    end
    if n == 0
      return [0]
    end
    fib = [0, 1].clone
    i = 2.clone
    while i <= n
      fib = (fib << (_add(fib[i - 1], fib[i - 2]))).clone
      i = _add(i, 1).clone
    end
    return fib
  end
  def fib_recursive_term(i)
    if i < 0
      panic("n is negative")
    end
    if i < 2
      return i
    end
    return _add(fib_recursive_term(i - 1), fib_recursive_term(i - 2))
  end
  def fib_recursive(n)
    if n < 0
      panic("n is negative")
    end
    res = [].clone
    i = 0.clone
    while i <= n
      res = (res << (fib_recursive_term(i))).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def fib_recursive_cached_term(i)
    if i < 0
      panic("n is negative")
    end
    if i < 2
      return i
    end
    if $fib_cache_global.key?(i)
      return $fib_cache_global[i]
    end
    val = _add(fib_recursive_cached_term(i - 1), fib_recursive_cached_term(i - 2))
    $fib_cache_global[i] = val
    return val
  end
  def fib_recursive_cached(n)
    if n < 0
      panic("n is negative")
    end
    res = [].clone
    j = 0.clone
    while j <= n
      res = (res << (fib_recursive_cached_term(j))).clone
      j = _add(j, 1).clone
    end
    return res
  end
  def fib_memoization_term(num)
    if $fib_memo_cache.key?(num)
      return $fib_memo_cache[num]
    end
    value = _add(fib_memoization_term(num - 1), fib_memoization_term(num - 2))
    $fib_memo_cache[num] = value
    return value
  end
  def fib_memoization(n)
    if n < 0
      panic("n is negative")
    end
    out = [].clone
    i = 0.clone
    while i <= n
      out = (out << (fib_memoization_term(i))).clone
      i = _add(i, 1).clone
    end
    return out
  end
  def fib_binet(n)
    if n < 0
      panic("n is negative")
    end
    if n >= 1475
      panic("n is too large")
    end
    sqrt5 = sqrt(5.0)
    phi = (_add(1.0, sqrt5)) / 2.0
    res = [].clone
    i = 0.clone
    while i <= n
      val = roundf(powf(phi, i) / sqrt5)
      res = (res << (val)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def matrix_mul(a, b)
    a00 = _add(a[0][0] * b[0][0], a[0][1] * b[1][0])
    a01 = _add(a[0][0] * b[0][1], a[0][1] * b[1][1])
    a10 = _add(a[1][0] * b[0][0], a[1][1] * b[1][0])
    a11 = _add(a[1][0] * b[0][1], a[1][1] * b[1][1])
    return [[a00, a01], [a10, a11]]
  end
  def matrix_pow(m, power)
    if power < 0
      panic("power is negative")
    end
    result = [[1, 0], [0, 1]].clone
    base = m.clone
    p = power.clone
    while p > 0
      if p % 2 == 1
        result = matrix_mul(result, base).clone
      end
      base = matrix_mul(base, base).clone
      p = ((p / 2)).to_i.clone
    end
    return result
  end
  def fib_matrix(n)
    if n < 0
      panic("n is negative")
    end
    if n == 0
      return 0
    end
    m = [[1, 1], [1, 0]]
    res = matrix_pow(m, n - 1)
    return res[0][0]
  end
  def run_tests()
    expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    it = fib_iterative(10)
    rec = fib_recursive(10)
    cache = fib_recursive_cached(10)
    memo = fib_memoization(10)
    bin = fib_binet(10)
    m = fib_matrix(10)
    if it != expected
      panic("iterative failed")
    end
    if rec != expected
      panic("recursive failed")
    end
    if cache != expected
      panic("cached failed")
    end
    if memo != expected
      panic("memoization failed")
    end
    if bin != expected
      panic("binet failed")
    end
    if m != 55
      panic("matrix failed")
    end
    return m
  end
  $fib_cache_global = {}.clone
  $fib_memo_cache = {0 => 0, 1 => 1, 2 => 1}.clone
  puts(_str(run_tests()))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
