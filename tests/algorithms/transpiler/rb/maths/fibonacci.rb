# Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:44 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrt(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def powf(x, n)
    res = 1.0
    i = 0
    while i < n
      res = res * x
      i = _add(i, 1)
    end
    return res
  end
  def roundf(x)
    if x >= 0.0
      return ((_add(x, 0.5))).to_i
    end
    return ((x - 0.5)).to_i
  end
  def fib_iterative(n)
    if n < 0
      panic("n is negative")
    end
    if _eq(n, 0)
      return [0]
    end
    fib = [0, 1]
    i = 2
    while i <= n
      fib = _append(fib, _add((__tmp1 = fib; __tmp1.is_a?(Hash) ? __tmp1[i - 1] : _idx(__tmp1, i - 1)), (__tmp2 = fib; __tmp2.is_a?(Hash) ? __tmp2[i - 2] : _idx(__tmp2, i - 2))))
      i = _add(i, 1)
    end
    return fib
  end
  def fib_recursive_term(i)
    if i < 0
      panic("n is negative")
    end
    if i < 2
      return i
    end
    return _add(fib_recursive_term(i - 1), fib_recursive_term(i - 2))
  end
  def fib_recursive(n)
    if n < 0
      panic("n is negative")
    end
    res = []
    i = 0
    while i <= n
      res = _append(res, fib_recursive_term(i))
      i = _add(i, 1)
    end
    return res
  end
  def fib_recursive_cached_term(i)
    if i < 0
      panic("n is negative")
    end
    if i < 2
      return i
    end
    if _has($fib_cache_global, i)
      return (__tmp3 = $fib_cache_global; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
    end
    val = _add(fib_recursive_cached_term(i - 1), fib_recursive_cached_term(i - 2))
    $fib_cache_global[i] = val
    return val
  end
  def fib_recursive_cached(n)
    if n < 0
      panic("n is negative")
    end
    res = []
    j = 0
    while j <= n
      res = _append(res, fib_recursive_cached_term(j))
      j = _add(j, 1)
    end
    return res
  end
  def fib_memoization_term(num)
    if _has($fib_memo_cache, num)
      return (__tmp4 = $fib_memo_cache; __tmp4.is_a?(Hash) ? __tmp4[num] : _idx(__tmp4, num))
    end
    value = _add(fib_memoization_term(num - 1), fib_memoization_term(num - 2))
    $fib_memo_cache[num] = value
    return value
  end
  def fib_memoization(n)
    if n < 0
      panic("n is negative")
    end
    out = []
    i = 0
    while i <= n
      out = _append(out, fib_memoization_term(i))
      i = _add(i, 1)
    end
    return out
  end
  def fib_binet(n)
    if n < 0
      panic("n is negative")
    end
    if n >= 1475
      panic("n is too large")
    end
    sqrt5 = sqrt(5.0)
    phi = (_add(1.0, sqrt5)) / 2.0
    res = []
    i = 0
    while i <= n
      val = roundf(powf(phi, i) / sqrt5)
      res = _append(res, val)
      i = _add(i, 1)
    end
    return res
  end
  def matrix_mul(a, b)
    a00 = _add((__tmp5 = (__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)); __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)) * (__tmp7 = (__tmp8 = b; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)); __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)), (__tmp9 = (__tmp10 = a; __tmp10.is_a?(Hash) ? __tmp10[0] : _idx(__tmp10, 0)); __tmp9.is_a?(Hash) ? __tmp9[1] : _idx(__tmp9, 1)) * (__tmp11 = (__tmp12 = b; __tmp12.is_a?(Hash) ? __tmp12[1] : _idx(__tmp12, 1)); __tmp11.is_a?(Hash) ? __tmp11[0] : _idx(__tmp11, 0)))
    a01 = _add((__tmp13 = (__tmp14 = a; __tmp14.is_a?(Hash) ? __tmp14[0] : _idx(__tmp14, 0)); __tmp13.is_a?(Hash) ? __tmp13[0] : _idx(__tmp13, 0)) * (__tmp15 = (__tmp16 = b; __tmp16.is_a?(Hash) ? __tmp16[0] : _idx(__tmp16, 0)); __tmp15.is_a?(Hash) ? __tmp15[1] : _idx(__tmp15, 1)), (__tmp17 = (__tmp18 = a; __tmp18.is_a?(Hash) ? __tmp18[0] : _idx(__tmp18, 0)); __tmp17.is_a?(Hash) ? __tmp17[1] : _idx(__tmp17, 1)) * (__tmp19 = (__tmp20 = b; __tmp20.is_a?(Hash) ? __tmp20[1] : _idx(__tmp20, 1)); __tmp19.is_a?(Hash) ? __tmp19[1] : _idx(__tmp19, 1)))
    a10 = _add((__tmp21 = (__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[1] : _idx(__tmp22, 1)); __tmp21.is_a?(Hash) ? __tmp21[0] : _idx(__tmp21, 0)) * (__tmp23 = (__tmp24 = b; __tmp24.is_a?(Hash) ? __tmp24[0] : _idx(__tmp24, 0)); __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0)), (__tmp25 = (__tmp26 = a; __tmp26.is_a?(Hash) ? __tmp26[1] : _idx(__tmp26, 1)); __tmp25.is_a?(Hash) ? __tmp25[1] : _idx(__tmp25, 1)) * (__tmp27 = (__tmp28 = b; __tmp28.is_a?(Hash) ? __tmp28[1] : _idx(__tmp28, 1)); __tmp27.is_a?(Hash) ? __tmp27[0] : _idx(__tmp27, 0)))
    a11 = _add((__tmp29 = (__tmp30 = a; __tmp30.is_a?(Hash) ? __tmp30[1] : _idx(__tmp30, 1)); __tmp29.is_a?(Hash) ? __tmp29[0] : _idx(__tmp29, 0)) * (__tmp31 = (__tmp32 = b; __tmp32.is_a?(Hash) ? __tmp32[0] : _idx(__tmp32, 0)); __tmp31.is_a?(Hash) ? __tmp31[1] : _idx(__tmp31, 1)), (__tmp33 = (__tmp34 = a; __tmp34.is_a?(Hash) ? __tmp34[1] : _idx(__tmp34, 1)); __tmp33.is_a?(Hash) ? __tmp33[1] : _idx(__tmp33, 1)) * (__tmp35 = (__tmp36 = b; __tmp36.is_a?(Hash) ? __tmp36[1] : _idx(__tmp36, 1)); __tmp35.is_a?(Hash) ? __tmp35[1] : _idx(__tmp35, 1)))
    return [[a00, a01], [a10, a11]]
  end
  def matrix_pow(m, power)
    if power < 0
      panic("power is negative")
    end
    result = [[1, 0], [0, 1]]
    base = m
    p = power
    while p > 0
      if _eq(p % 2, 1)
        result = matrix_mul(result, base)
      end
      base = matrix_mul(base, base)
      p = ((p / 2)).to_i
    end
    return result
  end
  def fib_matrix(n)
    if n < 0
      panic("n is negative")
    end
    if _eq(n, 0)
      return 0
    end
    m = [[1, 1], [1, 0]]
    res = matrix_pow(m, n - 1)
    return (__tmp37 = (__tmp38 = res; __tmp38.is_a?(Hash) ? __tmp38[0] : _idx(__tmp38, 0)); __tmp37.is_a?(Hash) ? __tmp37[0] : _idx(__tmp37, 0))
  end
  def run_tests()
    expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    it = fib_iterative(10)
    rec = fib_recursive(10)
    cache = fib_recursive_cached(10)
    memo = fib_memoization(10)
    bin = fib_binet(10)
    m = fib_matrix(10)
    if !_eq(it, expected)
      panic("iterative failed")
    end
    if !_eq(rec, expected)
      panic("recursive failed")
    end
    if !_eq(cache, expected)
      panic("cached failed")
    end
    if !_eq(memo, expected)
      panic("memoization failed")
    end
    if !_eq(bin, expected)
      panic("binet failed")
    end
    if !_eq(m, 55)
      panic("matrix failed")
    end
    return m
  end
  $fib_cache_global = {}
  $fib_memo_cache = {0 => 0, 1 => 1, 2 => 1}
  puts(_str(run_tests()))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
