# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow2_int(n)
    result = 1
    i = 0
    while i < n
      result = result * 2
      i = _add(i, 1)
    end
    return result
  end
  def pow2_float(n)
    result = 1.0
    if n >= 0
      i = 0
      while i < n
        result = result * 2.0
        i = _add(i, 1)
      end
    else
      i = 0
      m = 0 - n
      while i < m
        result = result / 2.0
        i = _add(i, 1)
      end
    end
    return result
  end
  def lshift(num, k)
    result = num
    i = 0
    while i < k
      result = result * 2
      i = _add(i, 1)
    end
    return result
  end
  def rshift(num, k)
    result = num
    i = 0
    while i < k
      result = (result - (result % 2)) / 2
      i = _add(i, 1)
    end
    return result
  end
  def log2_floor(x)
    n = x
    e = 0
    while n >= 2.0
      n = n / 2.0
      e = _add(e, 1)
    end
    while n < 1.0
      n = n * 2.0
      e = e - 1
    end
    return e
  end
  def float_to_bits(x)
    num = x
    sign = 0
    if num < 0.0
      sign = 1
      num = -num
    end
    exp = log2_floor(num)
    pow = pow2_float(exp)
    normalized = num / pow
    frac = normalized - 1.0
    mantissa = ((frac * pow2_float(23))).to_i
    exp_bits = _add(exp, 127)
    return _add(_add(lshift(sign, 31), lshift(exp_bits, 23)), mantissa)
  end
  def bits_to_float(bits)
    sign_bit = rshift(bits, 31) % 2
    sign = 1.0
    if _eq(sign_bit, 1)
      sign = -1.0
    end
    exp_bits = rshift(bits, 23) % 256
    exp = exp_bits - 127
    mantissa_bits = bits % pow2_int(23)
    mantissa = _add(1.0, ((mantissa_bits).to_f) / pow2_float(23))
    return sign * mantissa * pow2_float(exp)
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def is_close(a, b, rel_tol)
    return absf(a - b) <= rel_tol * absf(b)
  end
  def fast_inverse_sqrt(number)
    if number <= 0.0
      panic("Input must be a positive number.")
    end
    i = float_to_bits(number)
    magic = 1597463007
    y_bits = magic - rshift(i, 1)
    y = bits_to_float(y_bits)
    y = y * (1.5 - 0.5 * number * y * y)
    return y
  end
  def test_fast_inverse_sqrt()
    if absf(fast_inverse_sqrt(10.0) - 0.3156857923527257) > 0.0001
      panic("fast_inverse_sqrt(10) failed")
    end
    if absf(fast_inverse_sqrt(4.0) - 0.49915357479239103) > 0.0001
      panic("fast_inverse_sqrt(4) failed")
    end
    if absf(fast_inverse_sqrt(4.1) - 0.4932849504615651) > 0.0001
      panic("fast_inverse_sqrt(4.1) failed")
    end
    i = 50
    while i < 60
      y = fast_inverse_sqrt((i).to_f)
      actual = 1.0 / sqrtApprox((i).to_f)
      if !is_close(y, actual, 0.00132)
        panic("relative error too high")
      end
      i = _add(i, 1)
    end
  end
  def main()
    test_fast_inverse_sqrt()
    i = 5
    while i <= 100
      diff = (1.0 / sqrtApprox((i).to_f)) - fast_inverse_sqrt((i).to_f)
      puts(_add(_add(_str(i), ": "), _str(diff)))
      i = _add(i, 5)
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
