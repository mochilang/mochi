# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def max_sum_sliding_window(arr, k)
    if k < 0 || arr.length < k
      panic("Invalid Input")
    end
    idx = 0.clone
    current_sum = 0.clone
    while idx < k
      current_sum = _add(current_sum, arr[idx]).clone
      idx = _add(idx, 1).clone
    end
    max_sum = current_sum.clone
    i = 0.clone
    while i < arr.length - k
      current_sum = _add(current_sum - arr[i], arr[_add(i, k)]).clone
      if current_sum > max_sum
        max_sum = current_sum.clone
      end
      i = _add(i, 1).clone
    end
    return max_sum
  end
  def test_max_sum_sliding_window()
    arr1 = [1, 4, 2, 10, 2, 3, 1, 0, 20]
    if max_sum_sliding_window(arr1, 4) != 24
      panic("test1 failed")
    end
    arr2 = [1, 4, 2, 10, 2, 13, 1, 0, 2]
    if max_sum_sliding_window(arr2, 4) != 27
      panic("test2 failed")
    end
  end
  def main()
    test_max_sum_sliding_window()
    sample = [1, 4, 2, 10, 2, 3, 1, 0, 20]
    puts(_str(max_sum_sliding_window(sample, 4)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
