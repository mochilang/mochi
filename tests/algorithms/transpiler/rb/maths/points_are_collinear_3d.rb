# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def create_vector(p1, p2)
    vx = p2.x - p1.x
    vy = p2.y - p1.y
    vz = p2.z - p1.z
    return Vector3d.new(x: vx, y: vy, z: vz)
  end
  def get_3d_vectors_cross(ab, ac)
    cx = ab.y * ac.z - ab.z * ac.y
    cy = ab.z * ac.x - ab.x * ac.z
    cz = ab.x * ac.y - ab.y * ac.x
    return Vector3d.new(x: cx, y: cy, z: cz)
  end
  def pow10(exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * 10.0
      i = _add(i, 1)
    end
    return result
  end
  def round_float(x, digits)
    factor = pow10(digits)
    v = x * factor
    if v >= 0.0
      v = _add(v, 0.5)
    else
      v = v - 0.5
    end
    t = (v).to_i
    return ((t).to_f) / factor
  end
  def is_zero_vector(v, accuracy)
    return _eq(round_float(v.x, accuracy), 0.0) && _eq(round_float(v.y, accuracy), 0.0) && _eq(round_float(v.z, accuracy), 0.0)
  end
  def are_collinear(a, b, c, accuracy)
    ab = create_vector(a, b)
    ac = create_vector(a, c)
    cross = get_3d_vectors_cross(ab, ac)
    return is_zero_vector(cross, accuracy)
  end
  def test_are_collinear()
    p1 = Point3d.new(x: 0.0, y: 0.0, z: 0.0)
    p2 = Point3d.new(x: 1.0, y: 1.0, z: 1.0)
    p3 = Point3d.new(x: 2.0, y: 2.0, z: 2.0)
    if !are_collinear(p1, p2, p3, 10)
      panic("collinear test failed")
    end
    q3 = Point3d.new(x: 1.0, y: 2.0, z: 3.0)
    if are_collinear(p1, p2, q3, 10)
      panic("non-collinear test failed")
    end
  end
  def main()
    test_are_collinear()
    a = Point3d.new(x: 4.802293498137402, y: 3.536233125455244, z: 0.0)
    b = Point3d.new(x: -2.186788107953106, y: -9.24561398001649, z: 7.141509524846482)
    c = Point3d.new(x: 1.530169574640268, y: -2.447927606600034, z: 3.343487096469054)
    puts(_str(are_collinear(a, b, c, 10)))
    d = Point3d.new(x: 2.399001826862445, y: -2.452009976680793, z: 4.464656666157666)
    e = Point3d.new(x: -3.682816335934376, y: 5.753788986533145, z: 9.490993909044244)
    f = Point3d.new(x: 1.962903518985307, y: 3.741415730125627, z: 7.0)
    puts(_str(are_collinear(d, e, f, 10)))
  end
  Object.send(:remove_const, :Point3d) if Object.const_defined?(:Point3d)
  Object.const_set(:Point3d, Struct.new(:x, :y, :z, keyword_init: true))
  Object.send(:remove_const, :Vector3d) if Object.const_defined?(:Vector3d)
  Object.const_set(:Vector3d, Struct.new(:x, :y, :z, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
