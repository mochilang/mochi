# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def binary_exp_recursive(base, exponent)
    if exponent < 0
      panic("exponent must be non-negative")
    end
    if _eq(exponent, 0)
      return 1.0
    end
    if _eq(exponent % 2, 1)
      return binary_exp_recursive(base, exponent - 1) * base
    end
    half = binary_exp_recursive(base, exponent / 2)
    return half * half
  end
  def binary_exp_iterative(base, exponent)
    if exponent < 0
      panic("exponent must be non-negative")
    end
    result = 1.0
    b = base
    e = exponent
    while e > 0
      if _eq(e % 2, 1)
        result = result * b
      end
      b = b * b
      e = e / 2
    end
    return result
  end
  def binary_exp_mod_recursive(base, exponent, modulus)
    if exponent < 0
      panic("exponent must be non-negative")
    end
    if modulus <= 0
      panic("modulus must be positive")
    end
    if _eq(exponent, 0)
      return 1 % modulus
    end
    if _eq(exponent % 2, 1)
      return (binary_exp_mod_recursive(base, exponent - 1, modulus) * (base % modulus)) % modulus
    end
    r = binary_exp_mod_recursive(base, exponent / 2, modulus)
    return (r * r) % modulus
  end
  def binary_exp_mod_iterative(base, exponent, modulus)
    if exponent < 0
      panic("exponent must be non-negative")
    end
    if modulus <= 0
      panic("modulus must be positive")
    end
    result = 1 % modulus
    b = base % modulus
    e = exponent
    while e > 0
      if _eq(e % 2, 1)
        result = (result * b) % modulus
      end
      b = (b * b) % modulus
      e = e / 2
    end
    return result
  end
  puts(binary_exp_recursive(3.0, 5))
  puts(binary_exp_iterative(1.5, 4))
  puts(binary_exp_mod_recursive(3, 4, 5))
  puts(binary_exp_mod_iterative(11, 13, 7))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
