# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow(x, n)
    result = 1.0
    i = 0
    while i < n
      result = result * x
      i = _add(i, 1)
    end
    return result
  end
  def factorial(n)
    result = 1.0
    i = 2
    while i <= n
      result = result * ((i).to_f)
      i = _add(i, 1)
    end
    return result
  end
  def radians(deg)
    return deg * $PI / 180.0
  end
  def taylor_sin(angle_in_degrees, accuracy, rounded_values_count)
    k = (angle_in_degrees / 360.0).floor()
    angle = angle_in_degrees - (k * 360.0)
    angle_in_radians = radians(angle)
    result = angle_in_radians
    a = 3
    sign = -1.0
    i = 0
    while i < accuracy
      result = _add(result, (sign * angle_in_radians ** a) / factorial(a))
      sign = -sign
      a = _add(a, 2)
      i = _add(i, 1)
    end
    return result
  end
  def test_sin()
    eps = 1e-07
    if (taylor_sin(0.0, 18, 10) - 0.0).abs() > eps
      panic("sin(0) failed")
    end
    if (taylor_sin(90.0, 18, 10) - 1.0).abs() > eps
      panic("sin(90) failed")
    end
    if (taylor_sin(180.0, 18, 10) - 0.0).abs() > eps
      panic("sin(180) failed")
    end
    if (taylor_sin(270.0, 18, 10) - (-1.0)).abs() > eps
      panic("sin(270) failed")
    end
  end
  def main()
    test_sin()
    res = taylor_sin(64.0, 18, 10)
    puts(res)
  end
  $PI = 3.141592653589793
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
