# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def pow(x, n)
    result = 1.0.clone
    i = 0.clone
    while i < n
      result = result * x.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def factorial(n)
    result = 1.0.clone
    i = 2.clone
    while i <= n
      result = result * ((i).to_f).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def radians(deg)
    return deg * $PI / 180.0
  end
  def taylor_sin(angle_in_degrees, accuracy, rounded_values_count)
    k = (angle_in_degrees / 360.0).floor()
    angle = angle_in_degrees - (k * 360.0).clone
    angle_in_radians = radians(angle)
    result = angle_in_radians.clone
    a = 3.clone
    sign = -1.0.clone
    i = 0.clone
    while i < accuracy
      result = _add(result, (sign * angle_in_radians ** a) / factorial(a)).clone
      sign = -sign.clone
      a = _add(a, 2).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def test_sin()
    eps = 1e-07
    if (taylor_sin(0.0, 18, 10) - 0.0).abs() > eps
      panic("sin(0) failed")
    end
    if (taylor_sin(90.0, 18, 10) - 1.0).abs() > eps
      panic("sin(90) failed")
    end
    if (taylor_sin(180.0, 18, 10) - 0.0).abs() > eps
      panic("sin(180) failed")
    end
    if (taylor_sin(270.0, 18, 10) - (-1.0)).abs() > eps
      panic("sin(270) failed")
    end
  end
  def main()
    test_sin()
    res = taylor_sin(64.0, 18, 10)
    puts(res)
  end
  $PI = 3.141592653589793
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
