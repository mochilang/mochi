# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pow_float(base, exp)
    result = 1.0.clone
    exponent = exp.clone
    if exponent < 0
      exponent = -exponent.clone
      i = 0.clone
      while i < exponent
        result = result * base.clone
        i = _add(i, 1).clone
      end
      return 1.0 / result
    end
    i = 0.clone
    while i < exponent
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def sum_of_geometric_progression(first_term, common_ratio, num_of_terms)
    if common_ratio == 1
      return ((num_of_terms * first_term)).to_f
    end
    a = (first_term).to_f
    r = (common_ratio).to_f
    return (a / (1.0 - r)) * (1.0 - pow_float(r, num_of_terms))
  end
  def test_sum()
    if sum_of_geometric_progression(1, 2, 10) != 1023.0
      panic("example1 failed")
    end
    if sum_of_geometric_progression(1, 10, 5) != 11111.0
      panic("example2 failed")
    end
    if sum_of_geometric_progression(-1, 2, 10) != (-1023.0)
      panic("example3 failed")
    end
  end
  def main()
    test_sum()
    puts(sum_of_geometric_progression(1, 2, 10))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
