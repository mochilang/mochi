# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def lcg_rand()
    $lcg_seed = (_add($lcg_seed * 1103515245, 12345)) % 2147483648.clone
    return $lcg_seed
  end
  def roll()
    rv = (lcg_rand()).to_f
    r = rv * 6.0 / 2147483648.0
    return _add(1, ((r).to_i))
  end
  def round2(x)
    y = _add(x * 100.0, 0.5)
    z = (y).to_i
    return ((z).to_f) / 100.0
  end
  def throw_dice(num_throws, num_dice)
    count_of_sum = [].clone
    max_sum = _add(num_dice * 6, 1)
    i = 0.clone
    while i < max_sum
      count_of_sum = (count_of_sum << (0)).clone
      i = _add(i, 1).clone
    end
    t = 0.clone
    while t < num_throws
      s = 0.clone
      d = 0.clone
      while d < num_dice
        s = _add(s, roll()).clone
        d = _add(d, 1).clone
      end
      count_of_sum[s] = _add(count_of_sum[s], 1)
      t = _add(t, 1).clone
    end
    probability = [].clone
    i = num_dice.clone
    while i < max_sum
      p = ((count_of_sum[i]).to_f) * 100.0 / ((num_throws).to_f)
      probability = (probability << (round2(p))).clone
      i = _add(i, 1).clone
    end
    return probability
  end
  def main()
    $lcg_seed = 1.clone
    result = throw_dice(10000, 2)
    puts(((x = result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  $lcg_seed = 1.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
