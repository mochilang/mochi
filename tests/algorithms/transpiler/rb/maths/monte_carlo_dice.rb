# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def lcg_rand()
    $lcg_seed = (_add($lcg_seed * 1103515245, 12345)) % 2147483648
    return $lcg_seed
  end
  def roll()
    rv = (lcg_rand()).to_f
    r = rv * 6.0 / 2.147483648e+09
    return _add(1, ((r).to_i))
  end
  def round2(x)
    y = _add(x * 100.0, 0.5)
    z = (y).to_i
    return ((z).to_f) / 100.0
  end
  def throw_dice(num_throws, num_dice)
    count_of_sum = []
    max_sum = _add(num_dice * 6, 1)
    i = 0
    while i < max_sum
      count_of_sum = _append(count_of_sum, 0)
      i = _add(i, 1)
    end
    t = 0
    while t < num_throws
      s = 0
      d = 0
      while d < num_dice
        s = _add(s, roll())
        d = _add(d, 1)
      end
      count_of_sum[s] = _add((__tmp1 = count_of_sum; __tmp1.is_a?(Hash) ? __tmp1[s] : _idx(__tmp1, s)), 1)
      t = _add(t, 1)
    end
    probability = []
    i = num_dice
    while i < max_sum
      p = (((__tmp2 = count_of_sum; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))).to_f) * 100.0 / ((num_throws).to_f)
      probability = _append(probability, round2(p))
      i = _add(i, 1)
    end
    return probability
  end
  def main()
    $lcg_seed = 1
    result = throw_dice(10000, 2)
    puts(((x = result); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  $lcg_seed = 1
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
