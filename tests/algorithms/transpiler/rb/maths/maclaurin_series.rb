# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def pow(x, n)
    result = 1.0.clone
    i = 0.clone
    while i < n
      result = result * x.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def factorial(n)
    result = 1.0.clone
    i = 2.clone
    while i <= n
      result = result * ((i).to_f).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def maclaurin_sin(theta, accuracy)
    t = theta.clone
    div = (t / (2.0 * $PI)).floor()
    t = t - 2.0 * div * $PI.clone
    sum = 0.0.clone
    r = 0.clone
    while r < accuracy
      power = _add(2 * r, 1)
      sign = (r % 2 == 0 ? 1.0 : -1.0)
      sum = _add(sum, sign * t ** power / factorial(power)).clone
      r = _add(r, 1).clone
    end
    return sum
  end
  def maclaurin_cos(theta, accuracy)
    t = theta.clone
    div = (t / (2.0 * $PI)).floor()
    t = t - 2.0 * div * $PI.clone
    sum = 0.0.clone
    r = 0.clone
    while r < accuracy
      power = 2 * r
      sign = (r % 2 == 0 ? 1.0 : -1.0)
      sum = _add(sum, sign * t ** power / factorial(power)).clone
      r = _add(r, 1).clone
    end
    return sum
  end
  $PI = 3.141592653589793
  puts(_str(maclaurin_sin(10.0, 30)))
  puts(_str(maclaurin_sin(-10.0, 30)))
  puts(_str(maclaurin_sin(10.0, 15)))
  puts(_str(maclaurin_sin(-10.0, 15)))
  puts(_str(maclaurin_cos(5.0, 30)))
  puts(_str(maclaurin_cos(-5.0, 30)))
  puts(_str(maclaurin_cos(10.0, 15)))
  puts(_str(maclaurin_cos(-10.0, 15)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
