# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def num_digits(n)
    x = abs_int(n)
    digits = 1
    while x >= 10
      x = x / 10
      digits = _add(digits, 1)
    end
    return digits
  end
  def num_digits_fast(n)
    x = abs_int(n)
    digits = 1
    power = 10
    while x >= power
      power = power * 10
      digits = _add(digits, 1)
    end
    return digits
  end
  def num_digits_faster(n)
    s = _str(abs_int(n))
    return _len(s)
  end
  def test_num_digits()
    if !_eq(num_digits(12345), 5)
      panic("num_digits 12345 failed")
    end
    if !_eq(num_digits(123), 3)
      panic("num_digits 123 failed")
    end
    if !_eq(num_digits(0), 1)
      panic("num_digits 0 failed")
    end
    if !_eq(num_digits(-1), 1)
      panic("num_digits -1 failed")
    end
    if !_eq(num_digits(-123456), 6)
      panic("num_digits -123456 failed")
    end
    if !_eq(num_digits_fast(12345), 5)
      panic("num_digits_fast 12345 failed")
    end
    if !_eq(num_digits_fast(123), 3)
      panic("num_digits_fast 123 failed")
    end
    if !_eq(num_digits_fast(0), 1)
      panic("num_digits_fast 0 failed")
    end
    if !_eq(num_digits_fast(-1), 1)
      panic("num_digits_fast -1 failed")
    end
    if !_eq(num_digits_fast(-123456), 6)
      panic("num_digits_fast -123456 failed")
    end
    if !_eq(num_digits_faster(12345), 5)
      panic("num_digits_faster 12345 failed")
    end
    if !_eq(num_digits_faster(123), 3)
      panic("num_digits_faster 123 failed")
    end
    if !_eq(num_digits_faster(0), 1)
      panic("num_digits_faster 0 failed")
    end
    if !_eq(num_digits_faster(-1), 1)
      panic("num_digits_faster -1 failed")
    end
    if !_eq(num_digits_faster(-123456), 6)
      panic("num_digits_faster -123456 failed")
    end
  end
  def main()
    test_num_digits()
    puts(_str(num_digits(12345)))
    puts(_str(num_digits_fast(12345)))
    puts(_str(num_digits_faster(12345)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
