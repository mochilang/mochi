# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def num_digits(n)
    x = abs_int(n).clone
    digits = 1.clone
    while x >= 10
      x = x / 10.clone
      digits = _add(digits, 1).clone
    end
    return digits
  end
  def num_digits_fast(n)
    x = abs_int(n).clone
    digits = 1.clone
    power = 10.clone
    while x >= power
      power = power * 10.clone
      digits = _add(digits, 1).clone
    end
    return digits
  end
  def num_digits_faster(n)
    s = _str(abs_int(n))
    return s.length
  end
  def test_num_digits()
    if num_digits(12345) != 5
      panic("num_digits 12345 failed")
    end
    if num_digits(123) != 3
      panic("num_digits 123 failed")
    end
    if num_digits(0) != 1
      panic("num_digits 0 failed")
    end
    if num_digits(-1) != 1
      panic("num_digits -1 failed")
    end
    if num_digits(-123456) != 6
      panic("num_digits -123456 failed")
    end
    if num_digits_fast(12345) != 5
      panic("num_digits_fast 12345 failed")
    end
    if num_digits_fast(123) != 3
      panic("num_digits_fast 123 failed")
    end
    if num_digits_fast(0) != 1
      panic("num_digits_fast 0 failed")
    end
    if num_digits_fast(-1) != 1
      panic("num_digits_fast -1 failed")
    end
    if num_digits_fast(-123456) != 6
      panic("num_digits_fast -123456 failed")
    end
    if num_digits_faster(12345) != 5
      panic("num_digits_faster 12345 failed")
    end
    if num_digits_faster(123) != 3
      panic("num_digits_faster 123 failed")
    end
    if num_digits_faster(0) != 1
      panic("num_digits_faster 0 failed")
    end
    if num_digits_faster(-1) != 1
      panic("num_digits_faster -1 failed")
    end
    if num_digits_faster(-123456) != 6
      panic("num_digits_faster -123456 failed")
    end
  end
  def main()
    test_num_digits()
    puts(_str(num_digits(12345)))
    puts(_str(num_digits_fast(12345)))
    puts(_str(num_digits_faster(12345)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
