# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def factorial(n)
    if n < 0
      panic("factorial is undefined for negative numbers")
    end
    result = 1.clone
    i = 2.clone
    while i <= n
      result = result * i.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def pow_float(base, exp)
    result = 1.0.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def binomial_distribution(successes, trials, prob)
    if successes > trials
      panic("successes must be lower or equal to trials")
    end
    if trials < 0 || successes < 0
      panic("the function is defined for non-negative integers")
    end
    if !(0.0 < prob && prob < 1.0)
      panic("prob has to be in range of 1 - 0")
    end
    probability = pow_float(prob, successes) * pow_float(1.0 - prob, trials - successes)
    numerator = (factorial(trials)).to_f
    denominator = ((factorial(successes) * factorial(trials - successes))).to_f
    coefficient = numerator / denominator
    return probability * coefficient
  end
  # test example1
  $result = binomial_distribution(3, 5, 0.7)
  raise 'assertion failed' unless $result - 0.3087.abs() < 1e-07
  # test example2
  $result = binomial_distribution(2, 4, 0.5)
  raise 'assertion failed' unless $result - 0.375.abs() < 1e-07
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
