# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def _mod(x, m)
    return x - (((x / m).to_i).to_f) * m
  end
  def sin_approx(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return _add(y - y3 / 6.0, y5 / 120.0) - y7 / 5040.0
  end
  def cos_approx(x)
    y = _mod(_add(x, $PI), $TWO_PI) - $PI
    y2 = y * y
    y4 = y2 * y2
    y6 = y4 * y2
    return _add(1.0 - y2 / 2.0, y4 / 24.0) - y6 / 720.0
  end
  def tan_approx(x)
    return sin_approx(x) / cos_approx(x)
  end
  def sqrt_approx(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def surface_area_cube(side_length)
    if side_length < 0.0
      puts("ValueError: surface_area_cube() only accepts non-negative values")
      return 0.0
    end
    return 6.0 * side_length * side_length
  end
  def surface_area_cuboid(length, breadth, height)
    if length < 0.0 || breadth < 0.0 || height < 0.0
      puts("ValueError: surface_area_cuboid() only accepts non-negative values")
      return 0.0
    end
    return 2.0 * (_add(_add((length * breadth), (breadth * height)), (length * height)))
  end
  def surface_area_sphere(radius)
    if radius < 0.0
      puts("ValueError: surface_area_sphere() only accepts non-negative values")
      return 0.0
    end
    return 4.0 * $PI * radius * radius
  end
  def surface_area_hemisphere(radius)
    if radius < 0.0
      puts("ValueError: surface_area_hemisphere() only accepts non-negative values")
      return 0.0
    end
    return 3.0 * $PI * radius * radius
  end
  def surface_area_cone(radius, height)
    if radius < 0.0 || height < 0.0
      puts("ValueError: surface_area_cone() only accepts non-negative values")
      return 0.0
    end
    slant = sqrt_approx(_add(height * height, radius * radius))
    return $PI * radius * (_add(radius, slant))
  end
  def surface_area_conical_frustum(radius1, radius2, height)
    if radius1 < 0.0 || radius2 < 0.0 || height < 0.0
      puts("ValueError: surface_area_conical_frustum() only accepts non-negative values")
      return 0.0
    end
    slant = sqrt_approx(_add(height * height, (radius1 - radius2) * (radius1 - radius2)))
    return $PI * (_add(_add(slant * (_add(radius1, radius2)), radius1 * radius1), radius2 * radius2))
  end
  def surface_area_cylinder(radius, height)
    if radius < 0.0 || height < 0.0
      puts("ValueError: surface_area_cylinder() only accepts non-negative values")
      return 0.0
    end
    return 2.0 * $PI * radius * (_add(height, radius))
  end
  def surface_area_torus(torus_radius, tube_radius)
    if torus_radius < 0.0 || tube_radius < 0.0
      puts("ValueError: surface_area_torus() only accepts non-negative values")
      return 0.0
    end
    if torus_radius < tube_radius
      puts("ValueError: surface_area_torus() does not support spindle or self intersecting tori")
      return 0.0
    end
    return 4.0 * $PI * $PI * torus_radius * tube_radius
  end
  def area_rectangle(length, width)
    if length < 0.0 || width < 0.0
      puts("ValueError: area_rectangle() only accepts non-negative values")
      return 0.0
    end
    return length * width
  end
  def area_square(side_length)
    if side_length < 0.0
      puts("ValueError: area_square() only accepts non-negative values")
      return 0.0
    end
    return side_length * side_length
  end
  def area_triangle(base, height)
    if base < 0.0 || height < 0.0
      puts("ValueError: area_triangle() only accepts non-negative values")
      return 0.0
    end
    return (base * height) / 2.0
  end
  def area_triangle_three_sides(side1, side2, side3)
    if side1 < 0.0 || side2 < 0.0 || side3 < 0.0
      puts("ValueError: area_triangle_three_sides() only accepts non-negative values")
      return 0.0
    end
    if _add(side1, side2) < side3 || _add(side1, side3) < side2 || _add(side2, side3) < side1
      puts("ValueError: Given three sides do not form a triangle")
      return 0.0
    end
    s = (_add(_add(side1, side2), side3)) / 2.0
    prod = s * (s - side1) * (s - side2) * (s - side3)
    res = sqrt_approx(prod)
    return res
  end
  def area_parallelogram(base, height)
    if base < 0.0 || height < 0.0
      puts("ValueError: area_parallelogram() only accepts non-negative values")
      return 0.0
    end
    return base * height
  end
  def area_trapezium(base1, base2, height)
    if base1 < 0.0 || base2 < 0.0 || height < 0.0
      puts("ValueError: area_trapezium() only accepts non-negative values")
      return 0.0
    end
    return 0.5 * (_add(base1, base2)) * height
  end
  def area_circle(radius)
    if radius < 0.0
      puts("ValueError: area_circle() only accepts non-negative values")
      return 0.0
    end
    return $PI * radius * radius
  end
  def area_ellipse(radius_x, radius_y)
    if radius_x < 0.0 || radius_y < 0.0
      puts("ValueError: area_ellipse() only accepts non-negative values")
      return 0.0
    end
    return $PI * radius_x * radius_y
  end
  def area_rhombus(diagonal1, diagonal2)
    if diagonal1 < 0.0 || diagonal2 < 0.0
      puts("ValueError: area_rhombus() only accepts non-negative values")
      return 0.0
    end
    return 0.5 * diagonal1 * diagonal2
  end
  def area_reg_polygon(sides, length)
    if sides < 3
      puts("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides")
      return 0.0
    end
    if length < 0.0
      puts("ValueError: area_reg_polygon() only accepts non-negative values as length of a side")
      return 0.0
    end
    n = (sides).to_f
    return (n * length * length) / (4.0 * tan_approx($PI / n))
  end
  $PI = 3.141592653589793
  $TWO_PI = 6.283185307179586
  puts("[DEMO] Areas of various geometric shapes:")
  puts(_add("Rectangle: ", _str(area_rectangle(10.0, 20.0))))
  puts(_add("Square: ", _str(area_square(10.0))))
  puts(_add("Triangle: ", _str(area_triangle(10.0, 10.0))))
  $TRI_THREE_SIDES = area_triangle_three_sides(5.0, 12.0, 13.0)
  puts(_add("Triangle Three Sides: ", _str($TRI_THREE_SIDES)))
  puts(_add("Parallelogram: ", _str(area_parallelogram(10.0, 20.0))))
  puts(_add("Rhombus: ", _str(area_rhombus(10.0, 20.0))))
  puts(_add("Trapezium: ", _str(area_trapezium(10.0, 20.0, 30.0))))
  puts(_add("Circle: ", _str(area_circle(20.0))))
  puts(_add("Ellipse: ", _str(area_ellipse(10.0, 20.0))))
  puts("")
  puts("Surface Areas of various geometric shapes:")
  puts(_add("Cube: ", _str(surface_area_cube(20.0))))
  puts(_add("Cuboid: ", _str(surface_area_cuboid(10.0, 20.0, 30.0))))
  puts(_add("Sphere: ", _str(surface_area_sphere(20.0))))
  puts(_add("Hemisphere: ", _str(surface_area_hemisphere(20.0))))
  puts(_add("Cone: ", _str(surface_area_cone(10.0, 20.0))))
  puts(_add("Conical Frustum: ", _str(surface_area_conical_frustum(10.0, 20.0, 30.0))))
  puts(_add("Cylinder: ", _str(surface_area_cylinder(10.0, 20.0))))
  puts(_add("Torus: ", _str(surface_area_torus(20.0, 10.0))))
  puts(_add("Equilateral Triangle: ", _str(area_reg_polygon(3, 10.0))))
  puts(_add("Square: ", _str(area_reg_polygon(4, 10.0))))
  puts(_add("Regular Pentagon: ", _str(area_reg_polygon(5, 10.0))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
