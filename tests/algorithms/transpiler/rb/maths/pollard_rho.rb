# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = (a < 0 ? -a : a).clone
    y = (b < 0 ? -b : b).clone
    while y != 0
      t = x % y
      x = y.clone
      y = t.clone
    end
    return x
  end
  def rand_fn(value, step, modulus)
    return (_add(value * value, step)) % modulus
  end
  def pollard_rho(num, seed, step, attempts)
    if num < 2
      panic("The input value cannot be less than 2")
    end
    if num > 2 && num % 2 == 0
      return PollardResult.new(factor: 2, ok: true)
    end
    s = seed.clone
    st = step.clone
    i = 0.clone
    while i < attempts
      tortoise = s.clone
      hare = s.clone
      while true
        tortoise = rand_fn(tortoise, st, num).clone
        hare = rand_fn(hare, st, num).clone
        hare = rand_fn(hare, st, num).clone
        divisor = gcd(hare - tortoise, num)
        if divisor == 1
          next
        else
          if divisor == num
            break
          else
            return PollardResult.new(factor: divisor, ok: true)
          end
        end
      end
      s = hare.clone
      st = _add(st, 1).clone
      i = _add(i, 1).clone
    end
    return PollardResult.new(factor: 0, ok: false)
  end
  def test_pollard_rho()
    r1 = pollard_rho(8051, 2, 1, 5)
    if !r1.ok || (r1.factor != 83 && r1.factor != 97)
      panic("test1 failed")
    end
    r2 = pollard_rho(10403, 2, 1, 5)
    if !r2.ok || (r2.factor != 101 && r2.factor != 103)
      panic("test2 failed")
    end
    r3 = pollard_rho(100, 2, 1, 3)
    if !r3.ok || r3.factor != 2
      panic("test3 failed")
    end
    r4 = pollard_rho(17, 2, 1, 3)
    if r4.ok
      panic("test4 failed")
    end
    r5 = pollard_rho(17 * 17 * 17, 2, 1, 3)
    if !r5.ok || r5.factor != 17
      panic("test5 failed")
    end
    r6 = pollard_rho(17 * 17 * 17, 2, 1, 1)
    if r6.ok
      panic("test6 failed")
    end
    r7 = pollard_rho(3 * 5 * 7, 2, 1, 3)
    if !r7.ok || r7.factor != 21
      panic("test7 failed")
    end
  end
  def main()
    test_pollard_rho()
    a = pollard_rho(100, 2, 1, 3)
    if a.ok
      puts(_str(a.factor))
    else
      puts("None")
    end
    b = pollard_rho(17, 2, 1, 3)
    if b.ok
      puts(_str(b.factor))
    else
      puts("None")
    end
  end
  PollardResult = Struct.new(:factor, :ok, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
