# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def gcd(a, b)
    x = (a < 0 ? -a : a)
    y = (b < 0 ? -b : b)
    while !_eq(y, 0)
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def rand_fn(value, step, modulus)
    return (_add(value * value, step)) % modulus
  end
  def pollard_rho(num, seed, step, attempts)
    if num < 2
      panic("The input value cannot be less than 2")
    end
    if num > 2 && _eq(num % 2, 0)
      return PollardResult.new(factor: 2, ok: true)
    end
    s = seed
    st = step
    i = 0
    while i < attempts
      tortoise = s
      hare = s
      while true
        tortoise = rand_fn(tortoise, st, num)
        hare = rand_fn(hare, st, num)
        hare = rand_fn(hare, st, num)
        divisor = gcd(hare - tortoise, num)
        if _eq(divisor, 1)
          next
        else
          if _eq(divisor, num)
            break
          else
            return PollardResult.new(factor: divisor, ok: true)
          end
        end
      end
      s = hare
      st = _add(st, 1)
      i = _add(i, 1)
    end
    return PollardResult.new(factor: 0, ok: false)
  end
  def test_pollard_rho()
    r1 = pollard_rho(8051, 2, 1, 5)
    if !r1.ok || (!_eq(r1.factor, 83) && !_eq(r1.factor, 97))
      panic("test1 failed")
    end
    r2 = pollard_rho(10403, 2, 1, 5)
    if !r2.ok || (!_eq(r2.factor, 101) && !_eq(r2.factor, 103))
      panic("test2 failed")
    end
    r3 = pollard_rho(100, 2, 1, 3)
    if !r3.ok || !_eq(r3.factor, 2)
      panic("test3 failed")
    end
    r4 = pollard_rho(17, 2, 1, 3)
    if r4.ok
      panic("test4 failed")
    end
    r5 = pollard_rho(17 * 17 * 17, 2, 1, 3)
    if !r5.ok || !_eq(r5.factor, 17)
      panic("test5 failed")
    end
    r6 = pollard_rho(17 * 17 * 17, 2, 1, 1)
    if r6.ok
      panic("test6 failed")
    end
    r7 = pollard_rho(3 * 5 * 7, 2, 1, 3)
    if !r7.ok || !_eq(r7.factor, 21)
      panic("test7 failed")
    end
  end
  def main()
    test_pollard_rho()
    a = pollard_rho(100, 2, 1, 3)
    if a.ok
      puts(_str(a.factor))
    else
      puts("None")
    end
    b = pollard_rho(17, 2, 1, 3)
    if b.ok
      puts(_str(b.factor))
    else
      puts("None")
    end
  end
  Object.send(:remove_const, :PollardResult) if Object.const_defined?(:PollardResult)
  Object.const_set(:PollardResult, Struct.new(:factor, :ok, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
