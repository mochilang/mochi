# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_prime(n)
    if n <= 1
      return false
    end
    if n <= 3
      return true
    end
    if n % 2 == 0
      return false
    end
    i = 3.clone
    while i * i <= n
      if n % i == 0
        return false
      end
      i = _add(i, 2).clone
    end
    return true
  end
  def is_germain_prime(number)
    if number < 1
      panic("Input value must be a positive integer")
    end
    return is_prime(number) && is_prime(_add(2 * number, 1))
  end
  def is_safe_prime(number)
    if number < 1
      panic("Input value must be a positive integer")
    end
    if (number - 1) % 2 != 0
      return false
    end
    return is_prime(number) && is_prime((number - 1) / 2)
  end
  def test_is_germain_prime()
    if !is_germain_prime(3)
      panic("is_germain_prime(3) failed")
    end
    if !is_germain_prime(11)
      panic("is_germain_prime(11) failed")
    end
    if is_germain_prime(4)
      panic("is_germain_prime(4) failed")
    end
    if !is_germain_prime(23)
      panic("is_germain_prime(23) failed")
    end
    if is_germain_prime(13)
      panic("is_germain_prime(13) failed")
    end
    if is_germain_prime(20)
      panic("is_germain_prime(20) failed")
    end
  end
  def test_is_safe_prime()
    if !is_safe_prime(5)
      panic("is_safe_prime(5) failed")
    end
    if !is_safe_prime(11)
      panic("is_safe_prime(11) failed")
    end
    if is_safe_prime(1)
      panic("is_safe_prime(1) failed")
    end
    if is_safe_prime(2)
      panic("is_safe_prime(2) failed")
    end
    if is_safe_prime(3)
      panic("is_safe_prime(3) failed")
    end
    if !is_safe_prime(47)
      panic("is_safe_prime(47) failed")
    end
  end
  def main()
    test_is_germain_prime()
    test_is_safe_prime()
    puts((is_germain_prime(23) ? 'true' : 'false'))
    puts((is_safe_prime(47) ? 'true' : 'false'))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
