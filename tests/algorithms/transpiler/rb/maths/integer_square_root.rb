# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def integer_square_root(num)
    if num < 0
      panic("num must be non-negative integer")
    end
    if num < 2
      return num
    end
    left_bound = 0.clone
    right_bound = num / 2.clone
    while left_bound <= right_bound
      mid = _add(left_bound, (right_bound - left_bound) / 2)
      mid_squared = mid * mid
      if mid_squared == num
        return mid
      end
      if mid_squared < num
        left_bound = _add(mid, 1).clone
      else
        right_bound = mid - 1.clone
      end
    end
    return right_bound
  end
  def test_integer_square_root()
    expected = [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4]
    i = 0.clone
    while i < expected.length
      result = integer_square_root(i)
      if result != expected[i]
        panic(_add("test failed at index ", _str(i)))
      end
      i = _add(i, 1).clone
    end
    if integer_square_root(625) != 25
      panic("sqrt of 625 incorrect")
    end
    if integer_square_root(2147483647) != 46340
      panic("sqrt of max int incorrect")
    end
  end
  def main()
    test_integer_square_root()
    puts(_str(integer_square_root(625)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
