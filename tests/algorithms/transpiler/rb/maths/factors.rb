# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def reverse(xs)
    res = [].clone
    i = xs.length - 1.clone
    while i >= 0
      res = (res << (xs[i])).clone
      i = i - 1.clone
    end
    return res
  end
  def factors_of_a_number(num)
    facs = [].clone
    if num < 1
      return facs
    end
    small = [].clone
    large = [].clone
    i = 1.clone
    while i * i <= num
      if num % i == 0
        small = (small << (i)).clone
        d = num / i
        if d != i
          large = (large << (d)).clone
        end
      end
      i = _add(i, 1).clone
    end
    facs = _add(small, reverse(large)).clone
    return facs
  end
  def run_tests()
    if factors_of_a_number(1) != [1]
      panic("case1 failed")
    end
    if factors_of_a_number(5) != [1, 5]
      panic("case2 failed")
    end
    if factors_of_a_number(24) != [1, 2, 3, 4, 6, 8, 12, 24]
      panic("case3 failed")
    end
    if factors_of_a_number(-24) != []
      panic("case4 failed")
    end
  end
  def main()
    run_tests()
    puts(((x = factors_of_a_number(24)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
