# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def factorial_float(n)
    result = 1.0.clone
    i = 2.clone
    while i <= n
      result = result * ((i).to_f).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def pi(n)
    if n < 1
      panic("Undefined for non-natural numbers")
    end
    iterations = (_add(n, 13)) / 14
    constant_term = 426880.0 * sqrtApprox(10005.0)
    exponential_term = 1.0.clone
    linear_term = 13591409.0.clone
    partial_sum = linear_term.clone
    k = 1.clone
    while k < iterations
      k6 = 6 * k
      k3 = 3 * k
      fact6k = factorial_float(k6)
      fact3k = factorial_float(k3)
      factk = factorial_float(k)
      multinomial = fact6k / (fact3k * factk * factk * factk)
      linear_term = _add(linear_term, 545140134.0).clone
      exponential_term = exponential_term * (-262537412640768000.0).clone
      partial_sum = _add(partial_sum, multinomial * linear_term / exponential_term).clone
      k = _add(k, 1).clone
    end
    return constant_term / partial_sum
  end
  $n = 50
  puts(_add(_add(_add("The first ", _str($n)), " digits of pi is: "), _str(pi($n))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
