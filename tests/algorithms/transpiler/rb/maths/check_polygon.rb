# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def check_polygon(nums)
    if nums.length < 2
      error("Monogons and Digons are not polygons in the Euclidean space")
    end
    i = 0.clone
    while i < nums.length
      if nums[i] <= 0.0
        error("All values must be greater than 0")
      end
      i = _add(i, 1).clone
    end
    total = 0.0.clone
    max_side = 0.0.clone
    i = 0.clone
    while i < nums.length
      v = nums[i]
      total = _add(total, v).clone
      if v > max_side
        max_side = v.clone
      end
      i = _add(i, 1).clone
    end
    return max_side < (total - max_side)
  end
  puts(_str(check_polygon([6.0, 10.0, 5.0])))
  puts(_str(check_polygon([3.0, 7.0, 13.0, 2.0])))
  puts(_str(check_polygon([1.0, 4.3, 5.2, 12.2])))
  $nums = [3.0, 7.0, 13.0, 2.0].clone
  $_ = check_polygon($nums)
  puts(((x = $nums); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
