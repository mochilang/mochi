# Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def split_by_dot(s)
    res = []
    current = ""
    i = 0
    while i < _len(s)
      c = (__tmp1 = s; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      if _eq(c, ".")
        res = _append(res, current)
        current = ""
      else
        current = _add(current, c)
      end
      i = _add(i, 1)
    end
    res = _append(res, current)
    return res
  end
  def is_digit_str(s)
    if _eq(_len(s), 0)
      return false
    end
    i = 0
    while i < _len(s)
      c = (__tmp2 = s; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      if c < "0" || c > "9"
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def parse_decimal(s)
    value = 0
    i = 0
    while i < _len(s)
      c = (__tmp3 = s; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      value = _add(value * 10, ((c).to_i))
      i = _add(i, 1)
    end
    return value
  end
  def is_ip_v4_address_valid(ip)
    octets = split_by_dot(ip)
    if !_eq(_len(octets), 4)
      return false
    end
    i = 0
    while i < 4
      oct = (__tmp4 = octets; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      if !is_digit_str(oct)
        return false
      end
      number = parse_decimal(oct)
      if !_eq(_len(_str(number)), _len(oct))
        return false
      end
      if number < 0 || number > 255
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  puts(_str(is_ip_v4_address_valid("192.168.0.23")))
  puts(_str(is_ip_v4_address_valid("192.256.15.8")))
  puts(_str(is_ip_v4_address_valid("172.100.0.8")))
  puts(_str(is_ip_v4_address_valid("255.256.0.256")))
  puts(_str(is_ip_v4_address_valid("1.2.33333333.4")))
  puts(_str(is_ip_v4_address_valid("1.2.-3.4")))
  puts(_str(is_ip_v4_address_valid("1.2.3")))
  puts(_str(is_ip_v4_address_valid("1.2.3.4.5")))
  puts(_str(is_ip_v4_address_valid("1.2.A.4")))
  puts(_str(is_ip_v4_address_valid("0.0.0.0")))
  puts(_str(is_ip_v4_address_valid("1.2.3.")))
  puts(_str(is_ip_v4_address_valid("1.2.3.05")))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
