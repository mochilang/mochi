# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def split_by_dot(s)
    res = [].clone
    current = "".clone
    i = 0.clone
    while i < s.length
      c = s[i]
      if c == "."
        res = (res << (current)).clone
        current = "".clone
      else
        current = _add(current, c).clone
      end
      i = _add(i, 1).clone
    end
    res = (res << (current)).clone
    return res
  end
  def is_digit_str(s)
    if s.length == 0
      return false
    end
    i = 0.clone
    while i < s.length
      c = s[i]
      if c < "0" || c > "9"
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def parse_decimal(s)
    value = 0.clone
    i = 0.clone
    while i < s.length
      c = s[i]
      value = _add(value * 10, ((c).to_i)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def is_ip_v4_address_valid(ip)
    octets = split_by_dot(ip)
    if octets.length != 4
      return false
    end
    i = 0.clone
    while i < 4
      oct = octets[i]
      if !is_digit_str(oct)
        return false
      end
      number = parse_decimal(oct)
      if _str(number).length != oct.length
        return false
      end
      if number < 0 || number > 255
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  puts(_str(is_ip_v4_address_valid("192.168.0.23")))
  puts(_str(is_ip_v4_address_valid("192.256.15.8")))
  puts(_str(is_ip_v4_address_valid("172.100.0.8")))
  puts(_str(is_ip_v4_address_valid("255.256.0.256")))
  puts(_str(is_ip_v4_address_valid("1.2.33333333.4")))
  puts(_str(is_ip_v4_address_valid("1.2.-3.4")))
  puts(_str(is_ip_v4_address_valid("1.2.3")))
  puts(_str(is_ip_v4_address_valid("1.2.3.4.5")))
  puts(_str(is_ip_v4_address_valid("1.2.A.4")))
  puts(_str(is_ip_v4_address_valid("0.0.0.0")))
  puts(_str(is_ip_v4_address_valid("1.2.3.")))
  puts(_str(is_ip_v4_address_valid("1.2.3.05")))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
