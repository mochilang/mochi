# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def two_pointer(nums, target)
    i = 0.clone
    j = nums.length - 1.clone
    while i < j
      s = _add(nums[i], nums[j])
      if s == target
        return [i, j]
      end
      if s < target
        i = _add(i, 1).clone
      else
        j = j - 1.clone
      end
    end
    return []
  end
  def test_two_pointer()
    if two_pointer([2, 7, 11, 15], 9) != [0, 1]
      panic("case1")
    end
    if two_pointer([2, 7, 11, 15], 17) != [0, 3]
      panic("case2")
    end
    if two_pointer([2, 7, 11, 15], 18) != [1, 2]
      panic("case3")
    end
    if two_pointer([2, 7, 11, 15], 26) != [2, 3]
      panic("case4")
    end
    if two_pointer([1, 3, 3], 6) != [1, 2]
      panic("case5")
    end
    if two_pointer([2, 7, 11, 15], 8).length != 0
      panic("case6")
    end
    if two_pointer([0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 19).length != 0
      panic("case7")
    end
    if two_pointer([1, 2, 3], 6).length != 0
      panic("case8")
    end
  end
  def main()
    test_two_pointer()
    puts(((x = two_pointer([2, 7, 11, 15], 9)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
