# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def two_pointer(nums, target)
    i = 0
    j = nums.length - 1
    while i < j
      s = _add((__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), (__tmp2 = nums; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
      if _eq(s, target)
        return [i, j]
      end
      if s < target
        i = _add(i, 1)
      else
        j = j - 1
      end
    end
    return []
  end
  def test_two_pointer()
    if !_eq(two_pointer([2, 7, 11, 15], 9), [0, 1])
      panic("case1")
    end
    if !_eq(two_pointer([2, 7, 11, 15], 17), [0, 3])
      panic("case2")
    end
    if !_eq(two_pointer([2, 7, 11, 15], 18), [1, 2])
      panic("case3")
    end
    if !_eq(two_pointer([2, 7, 11, 15], 26), [2, 3])
      panic("case4")
    end
    if !_eq(two_pointer([1, 3, 3], 6), [1, 2])
      panic("case5")
    end
    if !_eq(two_pointer([2, 7, 11, 15], 8).length, 0)
      panic("case6")
    end
    if !_eq(two_pointer([0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 19).length, 0)
      panic("case7")
    end
    if !_eq(two_pointer([1, 2, 3], 6).length, 0)
      panic("case8")
    end
  end
  def main()
    test_two_pointer()
    puts(((x = two_pointer([2, 7, 11, 15], 9)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
