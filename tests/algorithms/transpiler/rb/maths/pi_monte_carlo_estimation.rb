# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def next_seed(x)
    return (_add(x * 1103515245, 12345)) % 2147483648
  end
  def rand_unit()
    $seed = next_seed($seed).clone
    return (($seed).to_f) / 2147483648.0
  end
  def is_in_unit_circle(p)
    return _add(p.x * p.x, p.y * p.y) <= 1.0
  end
  def random_unit_square()
    return Point.new(x: rand_unit(), y: rand_unit())
  end
  def estimate_pi(simulations)
    if simulations < 1
      panic("At least one simulation is necessary to estimate PI.")
    end
    inside = 0.clone
    i = 0.clone
    while i < simulations
      p = random_unit_square()
      if is_in_unit_circle(p)
        inside = _add(inside, 1).clone
      end
      i = _add(i, 1).clone
    end
    return 4.0 * ((inside).to_f) / ((simulations).to_f)
  end
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def main()
    n = 10000
    my_pi = estimate_pi(n)
    error = abs_float(my_pi - $PI)
    puts(_add(_add(_add("An estimate of PI is ", _str(my_pi)), " with an error of "), _str(error)))
  end
  $PI = 3.141592653589793
  $seed = 1.clone
  Point = Struct.new(:x, :y, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
