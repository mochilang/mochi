# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def ln(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t.clone
    sum = 0.0.clone
    k = 1.clone
    while k <= 99
      sum = _add(sum, term / ((k).to_f)).clone
      term = term * t * t.clone
      k = _add(k, 2).clone
    end
    return 2.0 * sum
  end
  def log10(x)
    return ln(x) / ln(10.0)
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def res(x, y)
    if x == 0
      return 0.0
    end
    if y == 0
      return 1.0
    end
    if x < 0
      panic("math domain error")
    end
    return ((y).to_f) * log10((x).to_f)
  end
  def test_res()
    if absf(res(5, 7) - 4.892790030352132) > 1e-07
      panic("res(5,7) failed")
    end
    if res(0, 5) != 0.0
      panic("res(0,5) failed")
    end
    if res(3, 0) != 1.0
      panic("res(3,0) failed")
    end
  end
  def compare(x1, y1, x2, y2)
    r1 = res(x1, y1)
    r2 = res(x2, y2)
    if r1 > r2
      return _add(_add(_add("Largest number is ", _str(x1)), " ^ "), _str(y1))
    end
    if r2 > r1
      return _add(_add(_add("Largest number is ", _str(x2)), " ^ "), _str(y2))
    end
    return "Both are equal"
  end
  test_res()
  puts(compare(5, 7, 4, 8))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
