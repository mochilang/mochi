# Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def ln(x)
    t = (x - 1.0) / (_add(x, 1.0))
    term = t
    sum = 0.0
    k = 1
    while k <= 99
      sum = _add(sum, term / ((k).to_f))
      term = term * t * t
      k = _add(k, 2)
    end
    return 2.0 * sum
  end
  def log10(x)
    return ln(x) / ln(10.0)
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def res(x, y)
    if _eq(x, 0)
      return 0.0
    end
    if _eq(y, 0)
      return 1.0
    end
    if x < 0
      panic("math domain error")
    end
    return ((y).to_f) * log10((x).to_f)
  end
  def test_res()
    if absf(res(5, 7) - 4.892790030352132) > 1e-07
      panic("res(5,7) failed")
    end
    if !_eq(res(0, 5), 0.0)
      panic("res(0,5) failed")
    end
    if !_eq(res(3, 0), 1.0)
      panic("res(3,0) failed")
    end
  end
  def compare(x1, y1, x2, y2)
    r1 = res(x1, y1)
    r2 = res(x2, y2)
    if r1 > r2
      return _add(_add(_add("Largest number is ", _str(x1)), " ^ "), _str(y1))
    end
    if r2 > r1
      return _add(_add(_add("Largest number is ", _str(x2)), " ^ "), _str(y2))
    end
    return "Both are equal"
  end
  test_res()
  puts(compare(5, 7, 4, 8))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
