# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bubble_sort(nums)
    arr = [].clone
    i = 0.clone
    while i < nums.length
      arr = (arr << (nums[i])).clone
      i = _add(i, 1).clone
    end
    n = arr.length.clone
    a = 0.clone
    while a < n
      b = 0.clone
      while b < n - a - 1
        if arr[b] > arr[_add(b, 1)]
          temp = arr[b]
          arr[b] = arr[_add(b, 1)]
          arr[_add(b, 1)] = temp
        end
        b = _add(b, 1).clone
      end
      a = _add(a, 1).clone
    end
    return arr
  end
  def find_median(nums)
    length = nums.length
    div = length / 2
    mod = length % 2
    if mod != 0
      return nums[div]
    end
    return (_add(nums[div], nums[div - 1])) / 2.0
  end
  def interquartile_range(nums)
    if nums.length == 0
      panic("The list is empty. Provide a non-empty list.")
    end
    sorted = bubble_sort(nums)
    length = sorted.length
    div = length / 2
    mod = length % 2
    lower = [].clone
    i = 0.clone
    while i < div
      lower = (lower << (sorted[i])).clone
      i = _add(i, 1).clone
    end
    upper = [].clone
    j = _add(div, mod).clone
    while j < length
      upper = (upper << (sorted[j])).clone
      j = _add(j, 1).clone
    end
    q1 = find_median(lower)
    q3 = find_median(upper)
    return q3 - q1
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def float_equal(a, b)
    diff = absf(a - b)
    return diff < 1e-07
  end
  def test_interquartile_range()
    if !float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0)
      panic("interquartile_range case1 failed")
    end
    if !float_equal(interquartile_range([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0)
      panic("interquartile_range case2 failed")
    end
    if !float_equal(interquartile_range([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2)
      panic("interquartile_range case3 failed")
    end
    if !float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0)
      panic("interquartile_range case4 failed")
    end
  end
  def main()
    test_interquartile_range()
    puts(_str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0])))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
