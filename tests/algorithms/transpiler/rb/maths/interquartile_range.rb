# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def bubble_sort(nums)
    arr = []
    i = 0
    while i < _len(nums)
      arr = _append(arr, (__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    n = _len(arr)
    a = 0
    while a < n
      b = 0
      while b < n - a - 1
        if (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[b] : _idx(__tmp2, b)) > (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[_add(b, 1)] : _idx(__tmp3, _add(b, 1)))
          temp = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[b] : _idx(__tmp4, b))
          arr[b] = (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[_add(b, 1)] : _idx(__tmp5, _add(b, 1)))
          arr[_add(b, 1)] = temp
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
    return arr
  end
  def find_median(nums)
    length = _len(nums)
    div = length / 2
    mod = length % 2
    if !_eq(mod, 0)
      return (__tmp6 = nums; __tmp6.is_a?(Hash) ? __tmp6[div] : _idx(__tmp6, div))
    end
    return (_add((__tmp7 = nums; __tmp7.is_a?(Hash) ? __tmp7[div] : _idx(__tmp7, div)), (__tmp8 = nums; __tmp8.is_a?(Hash) ? __tmp8[div - 1] : _idx(__tmp8, div - 1)))) / 2.0
  end
  def interquartile_range(nums)
    if _eq(_len(nums), 0)
      panic("The list is empty. Provide a non-empty list.")
    end
    sorted = bubble_sort(nums)
    length = _len(sorted)
    div = length / 2
    mod = length % 2
    lower = []
    i = 0
    while i < div
      lower = _append(lower, (__tmp9 = sorted; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)))
      i = _add(i, 1)
    end
    upper = []
    j = _add(div, mod)
    while j < length
      upper = _append(upper, (__tmp10 = sorted; __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)))
      j = _add(j, 1)
    end
    q1 = find_median(lower)
    q3 = find_median(upper)
    return q3 - q1
  end
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def float_equal(a, b)
    diff = absf(a - b)
    return diff < 1e-07
  end
  def test_interquartile_range()
    if !float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0)
      panic("interquartile_range case1 failed")
    end
    if !float_equal(interquartile_range([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0)
      panic("interquartile_range case2 failed")
    end
    if !float_equal(interquartile_range([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2)
      panic("interquartile_range case3 failed")
    end
    if !float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0)
      panic("interquartile_range case4 failed")
    end
  end
  def main()
    test_interquartile_range()
    puts(_str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0])))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
