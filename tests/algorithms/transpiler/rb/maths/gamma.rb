# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrt(x)
    if x < 0.0
      panic("sqrt domain error")
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def ln(x)
    return Math.log(x)
  end
  def exp_series(x)
    term = 1.0
    sum = 1.0
    n = 1
    while n < 20
      term = term * x / ((n).to_f)
      sum = _add(sum, term)
      n = _add(n, 1)
    end
    return sum
  end
  def powf(base, exponent)
    if base <= 0.0
      return 0.0
    end
    return exp_series(exponent * ln(base))
  end
  def integrand(x, z)
    return powf(x, z - 1.0) * exp_series(-x)
  end
  def gamma_iterative(num)
    if num <= 0.0
      panic("math domain error")
    end
    step = 0.001
    limit = 100.0
    x = step
    total = 0.0
    while x < limit
      total = _add(total, integrand(x, num) * step)
      x = _add(x, step)
    end
    return total
  end
  def gamma_recursive(num)
    if num <= 0.0
      panic("math domain error")
    end
    if num > 171.5
      panic("math range error")
    end
    int_part = (num).to_i
    frac = num - ((int_part).to_f)
    if !(absf(frac) < 1e-06 || absf(frac - 0.5) < 1e-06)
      panic("num must be an integer or a half-integer")
    end
    if absf(num - 0.5) < 1e-06
      return sqrt($PI)
    end
    if absf(num - 1.0) < 1e-06
      return 1.0
    end
    return (num - 1.0) * gamma_recursive(num - 1.0)
  end
  def main()
    puts(gamma_iterative(5.0))
    puts(gamma_recursive(5.0))
    puts(gamma_recursive(0.5))
  end
  $PI = 3.141592653589793
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
