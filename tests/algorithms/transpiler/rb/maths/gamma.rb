# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrt(x)
    if x < 0.0
      panic("sqrt domain error")
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def ln(x)
    if x <= 0.0
      panic("ln domain error")
    end
    y = (x - 1.0) / (_add(x, 1.0))
    y2 = y * y
    term = y.clone
    sum = 0.0.clone
    k = 0.clone
    while k < 10
      denom = ((_add(2 * k, 1))).to_f
      sum = _add(sum, term / denom).clone
      term = term * y2.clone
      k = _add(k, 1).clone
    end
    return 2.0 * sum
  end
  def exp_series(x)
    term = 1.0.clone
    sum = 1.0.clone
    n = 1.clone
    while n < 20
      term = term * x / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def powf(base, exponent)
    if base <= 0.0
      return 0.0
    end
    return exp_series(exponent * ln(base))
  end
  def integrand(x, z)
    return powf(x, z - 1.0) * exp_series(-x)
  end
  def gamma_iterative(num)
    if num <= 0.0
      panic("math domain error")
    end
    step = 0.001
    limit = 100.0
    x = step.clone
    total = 0.0.clone
    while x < limit
      total = _add(total, integrand(x, num) * step).clone
      x = _add(x, step).clone
    end
    return total
  end
  def gamma_recursive(num)
    if num <= 0.0
      panic("math domain error")
    end
    if num > 171.5
      panic("math range error")
    end
    int_part = (num).to_i
    frac = num - ((int_part).to_f)
    if !(absf(frac) < 1e-06 || absf(frac - 0.5) < 1e-06)
      panic("num must be an integer or a half-integer")
    end
    if absf(num - 0.5) < 1e-06
      return sqrt($PI)
    end
    if absf(num - 1.0) < 1e-06
      return 1.0
    end
    return (num - 1.0) * gamma_recursive(num - 1.0)
  end
  def main()
    puts(gamma_iterative(5.0))
    puts(gamma_recursive(5.0))
    puts(gamma_recursive(0.5))
  end
  $PI = 3.141592653589793
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
