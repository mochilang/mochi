# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def pow10(n)
    result = 1
    i = 0
    while i < n
      result = result * 10
      i = _add(i, 1)
    end
    return result
  end
  def gcd(a, b)
    x = a
    y = b
    if x < 0
      x = -x
    end
    if y < 0
      y = -y
    end
    while !_eq(y, 0)
      r = x % y
      x = y
      y = r
    end
    return x
  end
  def parse_decimal(s)
    if _eq(_len(s), 0)
      panic("invalid number")
    end
    idx = 0
    sign = 1
    first = s[0...1]
    if _eq(first, "-")
      sign = -1
      idx = 1
    else
      if _eq(first, "+")
        idx = 1
      end
    end
    int_part = ""
    while idx < _len(s)
      c = s[idx..._add(idx, 1)]
      if c >= "0" && c <= "9"
        int_part = _add(int_part, c)
        idx = _add(idx, 1)
      else
        break
      end
    end
    frac_part = ""
    if idx < _len(s) && _eq(s[idx..._add(idx, 1)], ".")
      idx = _add(idx, 1)
      while idx < _len(s)
        c = s[idx..._add(idx, 1)]
        if c >= "0" && c <= "9"
          frac_part = _add(frac_part, c)
          idx = _add(idx, 1)
        else
          break
        end
      end
    end
    exp = 0
    if idx < _len(s) && (_eq(s[idx..._add(idx, 1)], "e") || _eq(s[idx..._add(idx, 1)], "E"))
      idx = _add(idx, 1)
      exp_sign = 1
      if idx < _len(s) && _eq(s[idx..._add(idx, 1)], "-")
        exp_sign = -1
        idx = _add(idx, 1)
      else
        if idx < _len(s) && _eq(s[idx..._add(idx, 1)], "+")
          idx = _add(idx, 1)
        end
      end
      exp_str = ""
      while idx < _len(s)
        c = s[idx..._add(idx, 1)]
        if c >= "0" && c <= "9"
          exp_str = _add(exp_str, c)
          idx = _add(idx, 1)
        else
          panic("invalid number")
        end
      end
      if _eq(_len(exp_str), 0)
        panic("invalid number")
      end
      exp = exp_sign * (exp_str).to_i
    end
    if !_eq(idx, _len(s))
      panic("invalid number")
    end
    if _eq(_len(int_part), 0)
      int_part = "0"
    end
    num_str = _add(int_part, frac_part)
    numerator = (num_str).to_i
    if _eq(sign, (0 - 1))
      numerator = (0 - numerator)
    end
    denominator = pow10(_len(frac_part))
    if exp > 0
      numerator = numerator * pow10(exp)
    else
      if exp < 0
        denominator = denominator * pow10(-exp)
      end
    end
    return Fraction.new(numerator: numerator, denominator: denominator)
  end
  def reduce(fr)
    g = gcd(fr.numerator, fr.denominator)
    return Fraction.new(numerator: fr.numerator / g, denominator: fr.denominator / g)
  end
  def decimal_to_fraction_str(s)
    return reduce(parse_decimal(s))
  end
  def decimal_to_fraction(x)
    return decimal_to_fraction_str(_str(x))
  end
  def assert_fraction(name, fr, num, den)
    if !_eq(fr.numerator, num) || !_eq(fr.denominator, den)
      panic(name)
    end
  end
  def test_decimal_to_fraction()
    assert_fraction("case1", decimal_to_fraction(2.0), 2, 1)
    assert_fraction("case2", decimal_to_fraction(89.0), 89, 1)
    assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1)
    assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1)
    assert_fraction("case5", decimal_to_fraction(1.5), 3, 2)
    assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4)
    assert_fraction("case7", decimal_to_fraction(0.0), 0, 1)
    assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2)
    assert_fraction("case9", decimal_to_fraction(0.125), 1, 8)
    assert_fraction("case10", decimal_to_fraction(1.00000025e+06), 4000001, 4)
    assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000)
    assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1)
    assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2)
  end
  def main()
    test_decimal_to_fraction()
    fr = decimal_to_fraction(1.5)
    puts(_add(_add(_str(fr.numerator), "/"), _str(fr.denominator)))
  end
  Object.send(:remove_const, :Fraction) if Object.const_defined?(:Fraction)
  Object.const_set(:Fraction, Struct.new(:numerator, :denominator, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
