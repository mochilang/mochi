# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def pow10(n)
    result = 1.clone
    i = 0.clone
    while i < n
      result = result * 10.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def gcd(a, b)
    x = a.clone
    y = b.clone
    if x < 0
      x = -x.clone
    end
    if y < 0
      y = -y.clone
    end
    while y != 0
      r = x % y
      x = y.clone
      y = r.clone
    end
    return x
  end
  def parse_decimal(s)
    if s.length == 0
      panic("invalid number")
    end
    idx = 0.clone
    sign = 1.clone
    first = s[0...1]
    if first == "-"
      sign = -1.clone
      idx = 1.clone
    else
      if first == "+"
        idx = 1.clone
      end
    end
    int_part = "".clone
    while idx < s.length
      c = s[idx..._add(idx, 1)]
      if c >= "0" && c <= "9"
        int_part = _add(int_part, c).clone
        idx = _add(idx, 1).clone
      else
        break
      end
    end
    frac_part = "".clone
    if idx < s.length && s[idx..._add(idx, 1)] == "."
      idx = _add(idx, 1).clone
      while idx < s.length
        c = s[idx..._add(idx, 1)]
        if c >= "0" && c <= "9"
          frac_part = _add(frac_part, c).clone
          idx = _add(idx, 1).clone
        else
          break
        end
      end
    end
    exp = 0.clone
    if idx < s.length && (s[idx..._add(idx, 1)] == "e" || s[idx..._add(idx, 1)] == "E")
      idx = _add(idx, 1).clone
      exp_sign = 1.clone
      if idx < s.length && s[idx..._add(idx, 1)] == "-"
        exp_sign = -1.clone
        idx = _add(idx, 1).clone
      else
        if idx < s.length && s[idx..._add(idx, 1)] == "+"
          idx = _add(idx, 1).clone
        end
      end
      exp_str = "".clone
      while idx < s.length
        c = s[idx..._add(idx, 1)]
        if c >= "0" && c <= "9"
          exp_str = _add(exp_str, c).clone
          idx = _add(idx, 1).clone
        else
          panic("invalid number")
        end
      end
      if exp_str.length == 0
        panic("invalid number")
      end
      exp = exp_sign * (exp_str).to_i.clone
    end
    if idx != s.length
      panic("invalid number")
    end
    if int_part.length == 0
      int_part = "0".clone
    end
    num_str = _add(int_part, frac_part).clone
    numerator = (num_str).to_i.clone
    if sign == (0 - 1)
      numerator = (0 - numerator).clone
    end
    denominator = pow10(frac_part.length).clone
    if exp > 0
      numerator = numerator * pow10(exp).clone
    else
      if exp < 0
        denominator = denominator * pow10(-exp).clone
      end
    end
    return Fraction.new(numerator: numerator, denominator: denominator)
  end
  def reduce(fr)
    g = gcd(fr.numerator, fr.denominator)
    return Fraction.new(numerator: fr.numerator / g, denominator: fr.denominator / g)
  end
  def decimal_to_fraction_str(s)
    return reduce(parse_decimal(s))
  end
  def decimal_to_fraction(x)
    return decimal_to_fraction_str(_str(x))
  end
  def assert_fraction(name, fr, num, den)
    if fr.numerator != num || fr.denominator != den
      panic(name)
    end
  end
  def test_decimal_to_fraction()
    assert_fraction("case1", decimal_to_fraction(2.0), 2, 1)
    assert_fraction("case2", decimal_to_fraction(89.0), 89, 1)
    assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1)
    assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1)
    assert_fraction("case5", decimal_to_fraction(1.5), 3, 2)
    assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4)
    assert_fraction("case7", decimal_to_fraction(0.0), 0, 1)
    assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2)
    assert_fraction("case9", decimal_to_fraction(0.125), 1, 8)
    assert_fraction("case10", decimal_to_fraction(1.00000025e+06), 4000001, 4)
    assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000)
    assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1)
    assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2)
  end
  def main()
    test_decimal_to_fraction()
    fr = decimal_to_fraction(1.5)
    puts(_add(_add(_str(fr.numerator), "/"), _str(fr.denominator)))
  end
  Fraction = Struct.new(:numerator, :denominator, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
