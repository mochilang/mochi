# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def sub(a, b)
    return Complex.new(re: a.re - b.re, im: a.im - b.im)
  end
  def div_real(a, r)
    return Complex.new(re: a.re / r, im: a.im / r)
  end
  def sqrt_newton(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def sqrt_to_complex(d)
    if d >= 0.0
      return Complex.new(re: sqrt_newton(d), im: 0.0)
    end
    return Complex.new(re: 0.0, im: sqrt_newton(-d))
  end
  def quadratic_roots(a, b, c)
    if a == 0.0
      puts("ValueError: coefficient 'a' must not be zero")
      return []
    end
    delta = b * b - 4.0 * a * c
    sqrt_d = sqrt_to_complex(delta)
    minus_b = Complex.new(re: -b, im: 0.0)
    two_a = 2.0 * a
    root1 = div_real(add(minus_b, sqrt_d), two_a)
    root2 = div_real(sub(minus_b, sqrt_d), two_a)
    return [root1, root2]
  end
  def root_str(r)
    if r.im == 0.0
      return _str(r.re)
    end
    s = _str(r.re).clone
    if r.im >= 0.0
      s = _add(_add(_add(s, "+"), _str(r.im)), "i").clone
    else
      s = _add(_add(s, _str(r.im)), "i").clone
    end
    return s
  end
  def main()
    roots = quadratic_roots(5.0, 6.0, 1.0)
    if roots.length == 2
      puts(_add(_add(_add("The solutions are: ", root_str(roots[0])), " and "), root_str(roots[1])))
    end
  end
  Complex = Struct.new(:re, :im, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
