# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def sub(a, b)
    return Complex.new(re: a.re - b.re, im: a.im - b.im)
  end
  def div_real(a, r)
    return Complex.new(re: a.re / r, im: a.im / r)
  end
  def sqrt_newton(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def sqrt_to_complex(d)
    if d >= 0.0
      return Complex.new(re: sqrt_newton(d), im: 0.0)
    end
    return Complex.new(re: 0.0, im: sqrt_newton(-d))
  end
  def quadratic_roots(a, b, c)
    if _eq(a, 0.0)
      puts("ValueError: coefficient 'a' must not be zero")
      return []
    end
    delta = b * b - 4.0 * a * c
    sqrt_d = sqrt_to_complex(delta)
    minus_b = Complex.new(re: -b, im: 0.0)
    two_a = 2.0 * a
    root1 = div_real(add(minus_b, sqrt_d), two_a)
    root2 = div_real(sub(minus_b, sqrt_d), two_a)
    return [root1, root2]
  end
  def root_str(r)
    if _eq(r.im, 0.0)
      return _str(r.re)
    end
    s = _str(r.re)
    if r.im >= 0.0
      s = _add(_add(_add(s, "+"), _str(r.im)), "i")
    else
      s = _add(_add(s, _str(r.im)), "i")
    end
    return s
  end
  def main()
    roots = quadratic_roots(5.0, 6.0, 1.0)
    if _eq(_len(roots), 2)
      puts(_add(_add(_add("The solutions are: ", root_str((__tmp1 = roots; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0)))), " and "), root_str((__tmp2 = roots; __tmp2.is_a?(Hash) ? __tmp2[1] : _idx(__tmp2, 1)))))
    end
  end
  Object.send(:remove_const, :Complex) if Object.const_defined?(:Complex)
  Object.const_set(:Complex, Struct.new(:re, :im, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
