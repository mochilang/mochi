# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_int(x)
    if x < 0
      return -x
    end
    return x
  end
  def gcd_iter(a, b)
    x = abs_int(a)
    y = abs_int(b)
    while !_eq(y, 0)
      t = y
      y = x % y
      x = t
    end
    return x
  end
  def is_prime(n)
    if n <= 1
      return false
    end
    d = 2
    while d * d <= n
      if _eq(n % d, 0)
        return false
      end
      d = _add(d, 1)
    end
    return true
  end
  def sieve_er(n)
    nums = []
    i = 2
    while i <= n
      nums = _append(nums, i)
      i = _add(i, 1)
    end
    idx = 0
    while idx < _len(nums)
      j = _add(idx, 1)
      while j < _len(nums)
        if !_eq((__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[idx] : _idx(__tmp1, idx)), 0)
          if _eq((__tmp2 = nums; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)) % (__tmp3 = nums; __tmp3.is_a?(Hash) ? __tmp3[idx] : _idx(__tmp3, idx)), 0)
            nums[j] = 0
          end
        end
        j = _add(j, 1)
      end
      idx = _add(idx, 1)
    end
    res = []
    k = 0
    while k < _len(nums)
      v = (__tmp4 = nums; __tmp4.is_a?(Hash) ? __tmp4[k] : _idx(__tmp4, k))
      if !_eq(v, 0)
        res = _append(res, v)
      end
      k = _add(k, 1)
    end
    return res
  end
  def get_prime_numbers(n)
    ans = []
    num = 2
    while num <= n
      if is_prime(num)
        ans = _append(ans, num)
      end
      num = _add(num, 1)
    end
    return ans
  end
  def prime_factorization(number)
    if _eq(number, 0)
      return [0]
    end
    if _eq(number, 1)
      return [1]
    end
    ans = []
    if is_prime(number)
      ans = _append(ans, number)
      return ans
    end
    quotient = number
    factor = 2
    while !_eq(quotient, 1)
      if is_prime(factor) && _eq(quotient % factor, 0)
        ans = _append(ans, factor)
        quotient = quotient / factor
      else
        factor = _add(factor, 1)
      end
    end
    return ans
  end
  def greatest_prime_factor(number)
    factors = prime_factorization(number)
    m = (__tmp5 = factors; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
    i = 1
    while i < _len(factors)
      if (__tmp6 = factors; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)) > m
        m = (__tmp7 = factors; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
      end
      i = _add(i, 1)
    end
    return m
  end
  def smallest_prime_factor(number)
    factors = prime_factorization(number)
    m = (__tmp8 = factors; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0))
    i = 1
    while i < _len(factors)
      if (__tmp9 = factors; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)) < m
        m = (__tmp10 = factors; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
      end
      i = _add(i, 1)
    end
    return m
  end
  def kg_v(number1, number2)
    if number1 < 1 || number2 < 1
      panic("numbers must be positive")
    end
    g = gcd_iter(number1, number2)
    return (number1 / g) * number2
  end
  def is_even(number)
    return _eq(number % 2, 0)
  end
  def is_odd(number)
    return !_eq(number % 2, 0)
  end
  def goldbach(number)
    if !is_even(number) || number <= 2
      panic("number must be even and > 2")
    end
    primes = get_prime_numbers(number)
    i = 0
    while i < _len(primes)
      j = _add(i, 1)
      while j < _len(primes)
        if _eq(_add((__tmp11 = primes; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)), (__tmp12 = primes; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j))), number)
          return [(__tmp13 = primes; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)), (__tmp14 = primes; __tmp14.is_a?(Hash) ? __tmp14[j] : _idx(__tmp14, j))]
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return []
  end
  def get_prime(n)
    if n < 0
      panic("n must be non-negative")
    end
    index = 0
    ans = 2
    while index < n
      index = _add(index, 1)
      ans = _add(ans, 1)
      while !is_prime(ans)
        ans = _add(ans, 1)
      end
    end
    return ans
  end
  def get_primes_between(p1, p2)
    bad1 = !is_prime(p1)
    bad2 = !is_prime(p2)
    if bad1 || bad2 || p1 >= p2
      panic("arguments must be prime and p1 < p2")
    end
    num = _add(p1, 1)
    while num < p2
      if is_prime(num)
        break
      end
      num = _add(num, 1)
    end
    ans = []
    while num < p2
      ans = _append(ans, num)
      num = _add(num, 1)
      while num < p2
        if is_prime(num)
          break
        end
        num = _add(num, 1)
      end
    end
    return ans
  end
  def get_divisors(n)
    if n < 1
      panic("n must be >= 1")
    end
    ans = []
    d = 1
    while d <= n
      if _eq(n % d, 0)
        ans = _append(ans, d)
      end
      d = _add(d, 1)
    end
    return ans
  end
  def is_perfect_number(number)
    if number <= 1
      panic("number must be > 1")
    end
    divisors = get_divisors(number)
    sum = 0
    i = 0
    while i < _len(divisors) - 1
      sum = _add(sum, (__tmp15 = divisors; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)))
      i = _add(i, 1)
    end
    return _eq(sum, number)
  end
  def simplify_fraction(numerator, denominator)
    if _eq(denominator, 0)
      panic("denominator cannot be zero")
    end
    g = gcd_iter(abs_int(numerator), abs_int(denominator))
    return [numerator / g, denominator / g]
  end
  def factorial(n)
    if n < 0
      panic("n must be >= 0")
    end
    ans = 1
    i = 1
    while i <= n
      ans = ans * i
      i = _add(i, 1)
    end
    return ans
  end
  def fib(n)
    if n < 0
      panic("n must be >= 0")
    end
    if n <= 1
      return 1
    end
    tmp = 0
    fib1 = 1
    ans = 1
    i = 0
    while i < n - 1
      tmp = ans
      ans = _add(ans, fib1)
      fib1 = tmp
      i = _add(i, 1)
    end
    return ans
  end
  puts(_str(is_prime(97)))
  puts(((x = sieve_er(20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = get_prime_numbers(20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = prime_factorization(287)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(greatest_prime_factor(287)))
  puts(_str(smallest_prime_factor(287)))
  puts(_str(kg_v(8, 10)))
  puts(((x = goldbach(28)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(get_prime(8)))
  puts(((x = get_primes_between(3, 20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = get_divisors(28)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(is_perfect_number(28)))
  puts(((x = simplify_fraction(10, 20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(factorial(5)))
  puts(_str(fib(10)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
