# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_int(x)
    if x < 0
      return -x
    end
    return x
  end
  def gcd_iter(a, b)
    x = abs_int(a).clone
    y = abs_int(b).clone
    while y != 0
      t = y
      y = x % y.clone
      x = t.clone
    end
    return x
  end
  def is_prime(n)
    if n <= 1
      return false
    end
    d = 2.clone
    while d * d <= n
      if n % d == 0
        return false
      end
      d = _add(d, 1).clone
    end
    return true
  end
  def sieve_er(n)
    nums = [].clone
    i = 2.clone
    while i <= n
      nums = (nums << (i)).clone
      i = _add(i, 1).clone
    end
    idx = 0.clone
    while idx < nums.length
      j = _add(idx, 1).clone
      while j < nums.length
        if nums[idx] != 0
          if nums[j] % nums[idx] == 0
            nums[j] = 0
          end
        end
        j = _add(j, 1).clone
      end
      idx = _add(idx, 1).clone
    end
    res = [].clone
    k = 0.clone
    while k < nums.length
      v = nums[k]
      if v != 0
        res = (res << (v)).clone
      end
      k = _add(k, 1).clone
    end
    return res
  end
  def get_prime_numbers(n)
    ans = [].clone
    num = 2.clone
    while num <= n
      if is_prime(num)
        ans = (ans << (num)).clone
      end
      num = _add(num, 1).clone
    end
    return ans
  end
  def prime_factorization(number)
    if number == 0
      return [0]
    end
    if number == 1
      return [1]
    end
    ans = [].clone
    if is_prime(number)
      ans = (ans << (number)).clone
      return ans
    end
    quotient = number.clone
    factor = 2.clone
    while quotient != 1
      if is_prime(factor) && quotient % factor == 0
        ans = (ans << (factor)).clone
        quotient = quotient / factor.clone
      else
        factor = _add(factor, 1).clone
      end
    end
    return ans
  end
  def greatest_prime_factor(number)
    factors = prime_factorization(number)
    m = factors[0].clone
    i = 1.clone
    while i < factors.length
      if factors[i] > m
        m = factors[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def smallest_prime_factor(number)
    factors = prime_factorization(number)
    m = factors[0].clone
    i = 1.clone
    while i < factors.length
      if factors[i] < m
        m = factors[i].clone
      end
      i = _add(i, 1).clone
    end
    return m
  end
  def kg_v(number1, number2)
    if number1 < 1 || number2 < 1
      panic("numbers must be positive")
    end
    g = gcd_iter(number1, number2)
    return (number1 / g) * number2
  end
  def is_even(number)
    return number % 2 == 0
  end
  def is_odd(number)
    return number % 2 != 0
  end
  def goldbach(number)
    if !is_even(number) || number <= 2
      panic("number must be even and > 2")
    end
    primes = get_prime_numbers(number)
    i = 0.clone
    while i < primes.length
      j = _add(i, 1).clone
      while j < primes.length
        if _add(primes[i], primes[j]) == number
          return [primes[i], primes[j]]
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return []
  end
  def get_prime(n)
    if n < 0
      panic("n must be non-negative")
    end
    index = 0.clone
    ans = 2.clone
    while index < n
      index = _add(index, 1).clone
      ans = _add(ans, 1).clone
      while !is_prime(ans)
        ans = _add(ans, 1).clone
      end
    end
    return ans
  end
  def get_primes_between(p1, p2)
    bad1 = !is_prime(p1)
    bad2 = !is_prime(p2)
    if bad1 || bad2 || p1 >= p2
      panic("arguments must be prime and p1 < p2")
    end
    num = _add(p1, 1).clone
    while num < p2
      if is_prime(num)
        break
      end
      num = _add(num, 1).clone
    end
    ans = [].clone
    while num < p2
      ans = (ans << (num)).clone
      num = _add(num, 1).clone
      while num < p2
        if is_prime(num)
          break
        end
        num = _add(num, 1).clone
      end
    end
    return ans
  end
  def get_divisors(n)
    if n < 1
      panic("n must be >= 1")
    end
    ans = [].clone
    d = 1.clone
    while d <= n
      if n % d == 0
        ans = (ans << (d)).clone
      end
      d = _add(d, 1).clone
    end
    return ans
  end
  def is_perfect_number(number)
    if number <= 1
      panic("number must be > 1")
    end
    divisors = get_divisors(number)
    sum = 0.clone
    i = 0.clone
    while i < divisors.length - 1
      sum = _add(sum, divisors[i]).clone
      i = _add(i, 1).clone
    end
    return sum == number
  end
  def simplify_fraction(numerator, denominator)
    if denominator == 0
      panic("denominator cannot be zero")
    end
    g = gcd_iter(abs_int(numerator), abs_int(denominator))
    return [numerator / g, denominator / g]
  end
  def factorial(n)
    if n < 0
      panic("n must be >= 0")
    end
    ans = 1.clone
    i = 1.clone
    while i <= n
      ans = ans * i.clone
      i = _add(i, 1).clone
    end
    return ans
  end
  def fib(n)
    if n < 0
      panic("n must be >= 0")
    end
    if n <= 1
      return 1
    end
    tmp = 0.clone
    fib1 = 1.clone
    ans = 1.clone
    i = 0.clone
    while i < n - 1
      tmp = ans.clone
      ans = _add(ans, fib1).clone
      fib1 = tmp.clone
      i = _add(i, 1).clone
    end
    return ans
  end
  puts(_str(is_prime(97)))
  puts(((x = sieve_er(20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = get_prime_numbers(20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = prime_factorization(287)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(greatest_prime_factor(287)))
  puts(_str(smallest_prime_factor(287)))
  puts(_str(kg_v(8, 10)))
  puts(((x = goldbach(28)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(get_prime(8)))
  puts(((x = get_primes_between(3, 20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = get_divisors(28)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(is_perfect_number(28)))
  puts(((x = simplify_fraction(10, 20)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(_str(factorial(5)))
  puts(_str(fib(10)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
