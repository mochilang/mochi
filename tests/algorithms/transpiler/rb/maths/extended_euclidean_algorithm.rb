# Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:44 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_val(n)
    if n < 0
      return -n
    end
    return n
  end
  def extended_euclidean_algorithm(a, b)
    if _eq(abs_val(a), 1)
      return Coeffs.new(x: a, y: 0)
    end
    if _eq(abs_val(b), 1)
      return Coeffs.new(x: 0, y: b)
    end
    old_remainder = a
    remainder = b
    old_coeff_a = 1
    coeff_a = 0
    old_coeff_b = 0
    coeff_b = 1
    while !_eq(remainder, 0)
      quotient = old_remainder / remainder
      temp_remainder = old_remainder - quotient * remainder
      old_remainder = remainder
      remainder = temp_remainder
      temp_a = old_coeff_a - quotient * coeff_a
      old_coeff_a = coeff_a
      coeff_a = temp_a
      temp_b = old_coeff_b - quotient * coeff_b
      old_coeff_b = coeff_b
      coeff_b = temp_b
    end
    if a < 0
      old_coeff_a = -old_coeff_a
    end
    if b < 0
      old_coeff_b = -old_coeff_b
    end
    return Coeffs.new(x: old_coeff_a, y: old_coeff_b)
  end
  def test_extended_euclidean_algorithm()
    r1 = extended_euclidean_algorithm(1, 24)
    if (!_eq(r1.x, 1)) || (!_eq(r1.y, 0))
      panic("test1 failed")
    end
    r2 = extended_euclidean_algorithm(8, 14)
    if (!_eq(r2.x, 2)) || (!_eq(r2.y, (-1)))
      panic("test2 failed")
    end
    r3 = extended_euclidean_algorithm(240, 46)
    if (!_eq(r3.x, (-9))) || (!_eq(r3.y, 47))
      panic("test3 failed")
    end
    r4 = extended_euclidean_algorithm(1, -4)
    if (!_eq(r4.x, 1)) || (!_eq(r4.y, 0))
      panic("test4 failed")
    end
    r5 = extended_euclidean_algorithm(-2, -4)
    if (!_eq(r5.x, (-1))) || (!_eq(r5.y, 0))
      panic("test5 failed")
    end
    r6 = extended_euclidean_algorithm(0, -4)
    if (!_eq(r6.x, 0)) || (!_eq(r6.y, (-1)))
      panic("test6 failed")
    end
    r7 = extended_euclidean_algorithm(2, 0)
    if (!_eq(r7.x, 1)) || (!_eq(r7.y, 0))
      panic("test7 failed")
    end
  end
  def main()
    test_extended_euclidean_algorithm()
    res = extended_euclidean_algorithm(240, 46)
    puts(_add(_add(_add(_add("(", _str(res.x)), ", "), _str(res.y)), ")"))
  end
  Object.send(:remove_const, :Coeffs) if Object.const_defined?(:Coeffs)
  Object.const_set(:Coeffs, Struct.new(:x, :y, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
