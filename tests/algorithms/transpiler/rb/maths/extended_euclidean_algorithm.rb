# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs_val(n)
    if n < 0
      return -n
    end
    return n
  end
  def extended_euclidean_algorithm(a, b)
    if abs_val(a) == 1
      return Coeffs.new(x: a, y: 0)
    end
    if abs_val(b) == 1
      return Coeffs.new(x: 0, y: b)
    end
    old_remainder = a.clone
    remainder = b.clone
    old_coeff_a = 1.clone
    coeff_a = 0.clone
    old_coeff_b = 0.clone
    coeff_b = 1.clone
    while remainder != 0
      quotient = old_remainder / remainder
      temp_remainder = old_remainder - quotient * remainder
      old_remainder = remainder.clone
      remainder = temp_remainder.clone
      temp_a = old_coeff_a - quotient * coeff_a
      old_coeff_a = coeff_a.clone
      coeff_a = temp_a.clone
      temp_b = old_coeff_b - quotient * coeff_b
      old_coeff_b = coeff_b.clone
      coeff_b = temp_b.clone
    end
    if a < 0
      old_coeff_a = -old_coeff_a.clone
    end
    if b < 0
      old_coeff_b = -old_coeff_b.clone
    end
    return Coeffs.new(x: old_coeff_a, y: old_coeff_b)
  end
  def test_extended_euclidean_algorithm()
    r1 = extended_euclidean_algorithm(1, 24)
    if (r1.x != 1) || (r1.y != 0)
      panic("test1 failed")
    end
    r2 = extended_euclidean_algorithm(8, 14)
    if (r2.x != 2) || (r2.y != (-1))
      panic("test2 failed")
    end
    r3 = extended_euclidean_algorithm(240, 46)
    if (r3.x != (-9)) || (r3.y != 47)
      panic("test3 failed")
    end
    r4 = extended_euclidean_algorithm(1, -4)
    if (r4.x != 1) || (r4.y != 0)
      panic("test4 failed")
    end
    r5 = extended_euclidean_algorithm(-2, -4)
    if (r5.x != (-1)) || (r5.y != 0)
      panic("test5 failed")
    end
    r6 = extended_euclidean_algorithm(0, -4)
    if (r6.x != 0) || (r6.y != (-1))
      panic("test6 failed")
    end
    r7 = extended_euclidean_algorithm(2, 0)
    if (r7.x != 1) || (r7.y != 0)
      panic("test7 failed")
    end
  end
  def main()
    test_extended_euclidean_algorithm()
    res = extended_euclidean_algorithm(240, 46)
    puts(_add(_add(_add(_add("(", _str(res.x)), ", "), _str(res.y)), ")"))
  end
  Coeffs = Struct.new(:x, :y, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
