# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bubble_sort(nums)
    arr = [].clone
    i = 0.clone
    while i < nums.length
      arr = (arr << (nums[i])).clone
      i = _add(i, 1).clone
    end
    n = arr.length.clone
    a = 0.clone
    while a < n
      b = 0.clone
      while b < n - a - 1
        if arr[b] > arr[_add(b, 1)]
          tmp = arr[b]
          arr[b] = arr[_add(b, 1)]
          arr[_add(b, 1)] = tmp
        end
        b = _add(b, 1).clone
      end
      a = _add(a, 1).clone
    end
    return arr
  end
  def sort3(xs)
    arr = [].clone
    i = 0.clone
    while i < xs.length
      arr = (arr << (xs[i])).clone
      i = _add(i, 1).clone
    end
    n = arr.length.clone
    a = 0.clone
    while a < n
      b = 0.clone
      while b < n - a - 1
        if arr[b] > arr[_add(b, 1)]
          tmp = arr[b]
          arr[b] = arr[_add(b, 1)]
          arr[_add(b, 1)] = tmp
        end
        b = _add(b, 1).clone
      end
      a = _add(a, 1).clone
    end
    return arr
  end
  def triplet_sum1(arr, target)
    i = 0.clone
    while i < arr.length - 2
      j = _add(i, 1).clone
      while j < arr.length - 1
        k = _add(j, 1).clone
        while k < arr.length
          if _add(_add(arr[i], arr[j]), arr[k]) == target
            return sort3([arr[i], arr[j], arr[k]])
          end
          k = _add(k, 1).clone
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return [0, 0, 0]
  end
  def triplet_sum2(arr, target)
    sorted = bubble_sort(arr)
    n = sorted.length
    i = 0.clone
    while i < n - 2
      left = _add(i, 1).clone
      right = n - 1.clone
      while left < right
        s = _add(_add(sorted[i], sorted[left]), sorted[right])
        if s == target
          return [sorted[i], sorted[left], sorted[right]]
        end
        if s < target
          left = _add(left, 1).clone
        else
          right = right - 1.clone
        end
      end
      i = _add(i, 1).clone
    end
    return [0, 0, 0]
  end
  def list_equal(a, b)
    if a.length != b.length
      return false
    end
    i = 0.clone
    while i < a.length
      if a[i] != b[i]
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def test_triplet_sum()
    arr1 = [13, 29, 7, 23, 5]
    if !list_equal(triplet_sum1(arr1, 35), [5, 7, 23])
      panic("ts1 case1 failed")
    end
    if !list_equal(triplet_sum2(arr1, 35), [5, 7, 23])
      panic("ts2 case1 failed")
    end
    arr2 = [37, 9, 19, 50, 44]
    if !list_equal(triplet_sum1(arr2, 65), [9, 19, 37])
      panic("ts1 case2 failed")
    end
    if !list_equal(triplet_sum2(arr2, 65), [9, 19, 37])
      panic("ts2 case2 failed")
    end
    arr3 = [6, 47, 27, 1, 15]
    if !list_equal(triplet_sum1(arr3, 11), [0, 0, 0])
      panic("ts1 case3 failed")
    end
    if !list_equal(triplet_sum2(arr3, 11), [0, 0, 0])
      panic("ts2 case3 failed")
    end
  end
  def main()
    test_triplet_sum()
    sample = [13, 29, 7, 23, 5]
    res = triplet_sum2(sample, 35)
    puts(_add(_add(_add(_add(_str(res[0]), " "), _str(res[1])), " "), _str(res[2])))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
