# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def bubble_sort(nums)
    arr = []
    i = 0
    while i < nums.length
      arr = (arr + [(__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))])
      i = _add(i, 1)
    end
    n = arr.length
    a = 0
    while a < n
      b = 0
      while b < n - a - 1
        if (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[b] : _idx(__tmp2, b)) > (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[_add(b, 1)] : _idx(__tmp3, _add(b, 1)))
          tmp = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[b] : _idx(__tmp4, b))
          arr[b] = (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[_add(b, 1)] : _idx(__tmp5, _add(b, 1)))
          arr[_add(b, 1)] = tmp
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
    return arr
  end
  def sort3(xs)
    arr = []
    i = 0
    while i < xs.length
      arr = (arr + [(__tmp6 = xs; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))])
      i = _add(i, 1)
    end
    n = arr.length
    a = 0
    while a < n
      b = 0
      while b < n - a - 1
        if (__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[b] : _idx(__tmp7, b)) > (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[_add(b, 1)] : _idx(__tmp8, _add(b, 1)))
          tmp = (__tmp9 = arr; __tmp9.is_a?(Hash) ? __tmp9[b] : _idx(__tmp9, b))
          arr[b] = (__tmp10 = arr; __tmp10.is_a?(Hash) ? __tmp10[_add(b, 1)] : _idx(__tmp10, _add(b, 1)))
          arr[_add(b, 1)] = tmp
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
    return arr
  end
  def triplet_sum1(arr, target)
    i = 0
    while i < arr.length - 2
      j = _add(i, 1)
      while j < arr.length - 1
        k = _add(j, 1)
        while k < arr.length
          if _eq(_add(_add((__tmp11 = arr; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i)), (__tmp12 = arr; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j))), (__tmp13 = arr; __tmp13.is_a?(Hash) ? __tmp13[k] : _idx(__tmp13, k))), target)
            return sort3([(__tmp14 = arr; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)), (__tmp15 = arr; __tmp15.is_a?(Hash) ? __tmp15[j] : _idx(__tmp15, j)), (__tmp16 = arr; __tmp16.is_a?(Hash) ? __tmp16[k] : _idx(__tmp16, k))])
          end
          k = _add(k, 1)
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return [0, 0, 0]
  end
  def triplet_sum2(arr, target)
    sorted = bubble_sort(arr)
    n = sorted.length
    i = 0
    while i < n - 2
      left = _add(i, 1)
      right = n - 1
      while left < right
        s = _add(_add((__tmp17 = sorted; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i)), (__tmp18 = sorted; __tmp18.is_a?(Hash) ? __tmp18[left] : _idx(__tmp18, left))), (__tmp19 = sorted; __tmp19.is_a?(Hash) ? __tmp19[right] : _idx(__tmp19, right)))
        if _eq(s, target)
          return [(__tmp20 = sorted; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i)), (__tmp21 = sorted; __tmp21.is_a?(Hash) ? __tmp21[left] : _idx(__tmp21, left)), (__tmp22 = sorted; __tmp22.is_a?(Hash) ? __tmp22[right] : _idx(__tmp22, right))]
        end
        if s < target
          left = _add(left, 1)
        else
          right = right - 1
        end
      end
      i = _add(i, 1)
    end
    return [0, 0, 0]
  end
  def list_equal(a, b)
    if !_eq(a.length, b.length)
      return false
    end
    i = 0
    while i < a.length
      if !_eq((__tmp23 = a; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i)), (__tmp24 = b; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def test_triplet_sum()
    arr1 = [13, 29, 7, 23, 5]
    if !list_equal(triplet_sum1(arr1, 35), [5, 7, 23])
      panic("ts1 case1 failed")
    end
    if !list_equal(triplet_sum2(arr1, 35), [5, 7, 23])
      panic("ts2 case1 failed")
    end
    arr2 = [37, 9, 19, 50, 44]
    if !list_equal(triplet_sum1(arr2, 65), [9, 19, 37])
      panic("ts1 case2 failed")
    end
    if !list_equal(triplet_sum2(arr2, 65), [9, 19, 37])
      panic("ts2 case2 failed")
    end
    arr3 = [6, 47, 27, 1, 15]
    if !list_equal(triplet_sum1(arr3, 11), [0, 0, 0])
      panic("ts1 case3 failed")
    end
    if !list_equal(triplet_sum2(arr3, 11), [0, 0, 0])
      panic("ts2 case3 failed")
    end
  end
  def main()
    test_triplet_sum()
    sample = [13, 29, 7, 23, 5]
    res = triplet_sum2(sample, 35)
    puts(_add(_add(_add(_add(_str((__tmp25 = res; __tmp25.is_a?(Hash) ? __tmp25[0] : _idx(__tmp25, 0))), " "), _str((__tmp26 = res; __tmp26.is_a?(Hash) ? __tmp26[1] : _idx(__tmp26, 1)))), " "), _str((__tmp27 = res; __tmp27.is_a?(Hash) ? __tmp27[2] : _idx(__tmp27, 2)))))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
