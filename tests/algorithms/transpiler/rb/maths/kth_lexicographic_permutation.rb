# Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def remove_at(xs, idx)
    res = []
    i = 0
    while i < _len(xs)
      if !_eq(i, idx)
        res = _append(res, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      end
      i = _add(i, 1)
    end
    return res
  end
  def kth_permutation(k, n)
    if n <= 0
      panic("n must be positive")
    end
    factorials = [1]
    i = 2
    while i < n
      factorials = _append(factorials, (__tmp2 = factorials; __tmp2.is_a?(Hash) ? __tmp2[_len(factorials) - 1] : _idx(__tmp2, _len(factorials) - 1)) * i)
      i = _add(i, 1)
    end
    total = (__tmp3 = factorials; __tmp3.is_a?(Hash) ? __tmp3[_len(factorials) - 1] : _idx(__tmp3, _len(factorials) - 1)) * n
    if (k < 0) || (k >= total)
      panic("k out of bounds")
    end
    elements = []
    e = 0
    while e < n
      elements = _append(elements, e)
      e = _add(e, 1)
    end
    permutation = []
    idx = _len(factorials) - 1
    while idx >= 0
      factorial = (__tmp4 = factorials; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))
      number = k / factorial
      k = k % factorial
      permutation = _append(permutation, (__tmp5 = elements; __tmp5.is_a?(Hash) ? __tmp5[number] : _idx(__tmp5, number)))
      elements = remove_at(elements, number)
      idx = idx - 1
    end
    permutation = _append(permutation, (__tmp6 = elements; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
    return permutation
  end
  def list_equal(a, b)
    if !_eq(_len(a), _len(b))
      return false
    end
    i = 0
    while i < _len(a)
      if !_eq((__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)), (__tmp8 = b; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def list_to_string(xs)
    if _eq(_len(xs), 0)
      return "[]"
    end
    s = _add("[", _str((__tmp9 = xs; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0))))
    i = 1
    while i < _len(xs)
      s = _add(_add(s, ", "), _str((__tmp10 = xs; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))))
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def test_kth_permutation()
    expected1 = [0, 1, 2, 3, 4]
    res1 = kth_permutation(0, 5)
    if !list_equal(res1, expected1)
      panic("test case 1 failed")
    end
    expected2 = [1, 3, 0, 2]
    res2 = kth_permutation(10, 4)
    if !list_equal(res2, expected2)
      panic("test case 2 failed")
    end
  end
  def main()
    test_kth_permutation()
    res = kth_permutation(10, 4)
    puts(list_to_string(res))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
