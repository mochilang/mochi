# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def remove_at(xs, idx)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if i != idx
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def kth_permutation(k, n)
    if n <= 0
      panic("n must be positive")
    end
    factorials = [1].clone
    i = 2.clone
    while i < n
      factorials = (factorials << (factorials[factorials.length - 1] * i)).clone
      i = _add(i, 1).clone
    end
    total = factorials[factorials.length - 1] * n
    if (k < 0) || (k >= total)
      panic("k out of bounds")
    end
    elements = [].clone
    e = 0.clone
    while e < n
      elements = (elements << (e)).clone
      e = _add(e, 1).clone
    end
    permutation = [].clone
    idx = factorials.length - 1.clone
    while idx >= 0
      factorial = factorials[idx]
      number = k / factorial
      k = k % factorial.clone
      permutation = (permutation << (elements[number])).clone
      elements = remove_at(elements, number).clone
      idx = idx - 1.clone
    end
    permutation = (permutation << (elements[0])).clone
    return permutation
  end
  def list_equal(a, b)
    if a.length != b.length
      return false
    end
    i = 0.clone
    while i < a.length
      if a[i] != b[i]
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def list_to_string(xs)
    if xs.length == 0
      return "[]"
    end
    s = _add("[", _str(xs[0])).clone
    i = 1.clone
    while i < xs.length
      s = _add(_add(s, ", "), _str(xs[i])).clone
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def test_kth_permutation()
    expected1 = [0, 1, 2, 3, 4]
    res1 = kth_permutation(0, 5)
    if !list_equal(res1, expected1)
      panic("test case 1 failed")
    end
    expected2 = [1, 3, 0, 2]
    res2 = kth_permutation(10, 4)
    if !list_equal(res2, expected2)
      panic("test case 2 failed")
    end
  end
  def main()
    test_kth_permutation()
    res = kth_permutation(10, 4)
    puts(list_to_string(res))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
