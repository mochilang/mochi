# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sum_of_harmonic_progression(first_term, common_difference, number_of_terms)
    arithmetic_progression = [1.0 / first_term].clone
    term = 1.0 / first_term.clone
    i = 0.clone
    while i < number_of_terms - 1
      term = _add(term, common_difference).clone
      arithmetic_progression = (arithmetic_progression << (term)).clone
      i = _add(i, 1).clone
    end
    total = 0.0.clone
    j = 0.clone
    while j < arithmetic_progression.length
      total = _add(total, (1.0 / arithmetic_progression[j])).clone
      j = _add(j, 1).clone
    end
    return total
  end
  def abs_val(num)
    if num < 0.0
      return -num
    end
    return num
  end
  def test_sum_of_harmonic_progression()
    result1 = sum_of_harmonic_progression(0.5, 2.0, 2)
    if abs_val(result1 - 0.75) > 1e-07
      panic("test1 failed")
    end
    result2 = sum_of_harmonic_progression(0.2, 5.0, 5)
    if abs_val(result2 - 0.45666666666666667) > 1e-07
      panic("test2 failed")
    end
  end
  def main()
    test_sum_of_harmonic_progression()
    puts(sum_of_harmonic_progression(0.5, 2.0, 2))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
