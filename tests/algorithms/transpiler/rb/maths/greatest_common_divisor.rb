# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def greatest_common_divisor(a, b)
    x = abs_int(a)
    y = abs_int(b)
    if x == 0
      return y
    end
    return greatest_common_divisor(y % x, x)
  end
  def gcd_by_iterative(x, y)
    a = abs_int(x).clone
    b = abs_int(y).clone
    while b != 0
      temp = b
      b = a % b.clone
      a = temp.clone
    end
    return a
  end
  puts(_str(greatest_common_divisor(24, 40)))
  puts(_str(greatest_common_divisor(1, 1)))
  puts(_str(greatest_common_divisor(1, 800)))
  puts(_str(greatest_common_divisor(11, 37)))
  puts(_str(greatest_common_divisor(3, 5)))
  puts(_str(greatest_common_divisor(16, 4)))
  puts(_str(greatest_common_divisor(-3, 9)))
  puts(_str(greatest_common_divisor(9, -3)))
  puts(_str(greatest_common_divisor(3, -9)))
  puts(_str(greatest_common_divisor(-3, -9)))
  puts(_str(gcd_by_iterative(24, 40)))
  puts(_str(greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)))
  puts(_str(gcd_by_iterative(-3, -9)))
  puts(_str(gcd_by_iterative(3, -9)))
  puts(_str(gcd_by_iterative(1, -800)))
  puts(_str(gcd_by_iterative(11, 37)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
