# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def prime_factors(n)
    if n < 2
      return []
    end
    num = n.clone
    i = 2.clone
    factors = [].clone
    while i * i <= num
      if num % i == 0
        factors = (factors << (i)).clone
        num = num / i.clone
      else
        i = _add(i, 1).clone
      end
    end
    if num > 1
      factors = (factors << (num)).clone
    end
    return factors
  end
  def list_eq(a, b)
    if a.length != b.length
      return false
    end
    i = 0.clone
    while i < a.length
      if a[i] != b[i]
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def test_prime_factors()
    if !list_eq(prime_factors(0), [])
      panic("prime_factors(0) failed")
    end
    if !list_eq(prime_factors(100), [2, 2, 5, 5])
      panic("prime_factors(100) failed")
    end
    if !list_eq(prime_factors(2560), [2, 2, 2, 2, 2, 2, 2, 2, 2, 5])
      panic("prime_factors(2560) failed")
    end
    if !list_eq(prime_factors(97), [97])
      panic("prime_factors(97) failed")
    end
  end
  def main()
    test_prime_factors()
    puts(((x = prime_factors(100)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = prime_factors(2560)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = prime_factors(97)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
