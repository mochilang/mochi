# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0.clone
    i = 0.clone
    while i < n
      p = p * 10.0.clone
      i = _add(i, 1).clone
    end
    return p
  end
  def round(x, n)
    m = pow10(n)
    return (_add(x * m, 0.5)).floor() / m
  end
  def clone_matrix(mat)
    new_mat = [].clone
    i = 0.clone
    while i < mat.length
      row = [].clone
      j = 0.clone
      while j < mat[i].length
        row = (row << (mat[i][j])).clone
        j = _add(j, 1).clone
      end
      new_mat = (new_mat << (row)).clone
      i = _add(i, 1).clone
    end
    return new_mat
  end
  def solve_simultaneous(equations)
    n = equations.length
    if n == 0
      panic("solve_simultaneous() requires n lists of length n+1")
    end
    m = _add(n, 1)
    i = 0.clone
    while i < n
      if equations[i].length != m
        panic("solve_simultaneous() requires n lists of length n+1")
      end
      i = _add(i, 1).clone
    end
    a = clone_matrix(equations).clone
    row = 0.clone
    while row < n
      pivot = row.clone
      while pivot < n && a[pivot][row] == 0.0
        pivot = _add(pivot, 1).clone
      end
      if pivot == n
        panic("solve_simultaneous() requires at least 1 full equation")
      end
      if pivot != row
        temp = a[row]
        a[row] = a[pivot]
        a[pivot] = temp
      end
      pivot_val = a[row][row]
      col = 0.clone
      while col < m
        a[row][col] = a[row][col] / pivot_val
        col = _add(col, 1).clone
      end
      r = 0.clone
      while r < n
        if r != row
          factor = a[r][row]
          c = 0.clone
          while c < m
            a[r][c] = a[r][c] - factor * a[row][c]
            c = _add(c, 1).clone
          end
        end
        r = _add(r, 1).clone
      end
      row = _add(row, 1).clone
    end
    res = [].clone
    k = 0.clone
    while k < n
      res = (res << (round(a[k][m - 1], 5))).clone
      k = _add(k, 1).clone
    end
    return res
  end
  def test_solver()
    a = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
    r1 = solve_simultaneous(a)
    if !(r1.length == 2 && r1[0] == (0.0 - 1.0) && r1[1] == 2.0)
      panic("test1 failed")
    end
    b = [[0.0, (0.0 - 3.0), 1.0, 7.0], [3.0, 2.0, (0.0 - 1.0), 11.0], [5.0, 1.0, (0.0 - 2.0), 12.0]]
    r2 = solve_simultaneous(b)
    if !(r2.length == 3 && r2[0] == 6.4 && r2[1] == 1.2 && r2[2] == 10.6)
      panic("test2 failed")
    end
  end
  def main()
    test_solver()
    eq = [[2.0, 1.0, 1.0, 1.0, 1.0, 4.0], [1.0, 2.0, 1.0, 1.0, 1.0, 5.0], [1.0, 1.0, 2.0, 1.0, 1.0, 6.0], [1.0, 1.0, 1.0, 2.0, 1.0, 7.0], [1.0, 1.0, 1.0, 1.0, 2.0, 8.0]]
    puts(((x = solve_simultaneous(eq)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = solve_simultaneous([[4.0, 2.0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
