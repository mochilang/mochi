# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0
    i = 0
    while i < n
      p = p * 10.0
      i = _add(i, 1)
    end
    return p
  end
  def round(x, n)
    m = pow10(n)
    return (_add(x * m, 0.5)).floor() / m
  end
  def clone_matrix(mat)
    new_mat = []
    i = 0
    while i < _len(mat)
      row = []
      j = 0
      while j < _len((__tmp1 = mat; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
        row = _append(row, (__tmp2 = (__tmp3 = mat; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)); __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
        j = _add(j, 1)
      end
      new_mat = _append(new_mat, row)
      i = _add(i, 1)
    end
    return new_mat
  end
  def solve_simultaneous(equations)
    n = _len(equations)
    if _eq(n, 0)
      panic("solve_simultaneous() requires n lists of length n+1")
    end
    m = _add(n, 1)
    i = 0
    while i < n
      if !_eq(_len((__tmp4 = equations; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))), m)
        panic("solve_simultaneous() requires n lists of length n+1")
      end
      i = _add(i, 1)
    end
    a = clone_matrix(equations)
    row = 0
    while row < n
      pivot = row
      while pivot < n && _eq((__tmp5 = (__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[pivot] : _idx(__tmp6, pivot)); __tmp5.is_a?(Hash) ? __tmp5[row] : _idx(__tmp5, row)), 0.0)
        pivot = _add(pivot, 1)
      end
      if _eq(pivot, n)
        panic("solve_simultaneous() requires at least 1 full equation")
      end
      if !_eq(pivot, row)
        temp = (__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[row] : _idx(__tmp7, row))
        a[row] = (__tmp8 = a; __tmp8.is_a?(Hash) ? __tmp8[pivot] : _idx(__tmp8, pivot))
        a[pivot] = temp
      end
      pivot_val = (__tmp9 = (__tmp10 = a; __tmp10.is_a?(Hash) ? __tmp10[row] : _idx(__tmp10, row)); __tmp9.is_a?(Hash) ? __tmp9[row] : _idx(__tmp9, row))
      col = 0
      while col < m
        (__tmp11 = a; __tmp11.is_a?(Hash) ? __tmp11[row] : _idx(__tmp11, row))[col] = (__tmp12 = (__tmp13 = a; __tmp13.is_a?(Hash) ? __tmp13[row] : _idx(__tmp13, row)); __tmp12.is_a?(Hash) ? __tmp12[col] : _idx(__tmp12, col)) / pivot_val
        col = _add(col, 1)
      end
      r = 0
      while r < n
        if !_eq(r, row)
          factor = (__tmp14 = (__tmp15 = a; __tmp15.is_a?(Hash) ? __tmp15[r] : _idx(__tmp15, r)); __tmp14.is_a?(Hash) ? __tmp14[row] : _idx(__tmp14, row))
          c = 0
          while c < m
            (__tmp16 = a; __tmp16.is_a?(Hash) ? __tmp16[r] : _idx(__tmp16, r))[c] = (__tmp17 = (__tmp18 = a; __tmp18.is_a?(Hash) ? __tmp18[r] : _idx(__tmp18, r)); __tmp17.is_a?(Hash) ? __tmp17[c] : _idx(__tmp17, c)) - factor * (__tmp19 = (__tmp20 = a; __tmp20.is_a?(Hash) ? __tmp20[row] : _idx(__tmp20, row)); __tmp19.is_a?(Hash) ? __tmp19[c] : _idx(__tmp19, c))
            c = _add(c, 1)
          end
        end
        r = _add(r, 1)
      end
      row = _add(row, 1)
    end
    res = []
    k = 0
    while k < n
      res = _append(res, round((__tmp21 = (__tmp22 = a; __tmp22.is_a?(Hash) ? __tmp22[k] : _idx(__tmp22, k)); __tmp21.is_a?(Hash) ? __tmp21[m - 1] : _idx(__tmp21, m - 1)), 5))
      k = _add(k, 1)
    end
    return res
  end
  def test_solver()
    a = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
    r1 = solve_simultaneous(a)
    if !(_eq(_len(r1), 2) && _eq((__tmp23 = r1; __tmp23.is_a?(Hash) ? __tmp23[0] : _idx(__tmp23, 0)), (0.0 - 1.0)) && _eq((__tmp24 = r1; __tmp24.is_a?(Hash) ? __tmp24[1] : _idx(__tmp24, 1)), 2.0))
      panic("test1 failed")
    end
    b = [[0.0, (0.0 - 3.0), 1.0, 7.0], [3.0, 2.0, (0.0 - 1.0), 11.0], [5.0, 1.0, (0.0 - 2.0), 12.0]]
    r2 = solve_simultaneous(b)
    if !(_eq(_len(r2), 3) && _eq((__tmp25 = r2; __tmp25.is_a?(Hash) ? __tmp25[0] : _idx(__tmp25, 0)), 6.4) && _eq((__tmp26 = r2; __tmp26.is_a?(Hash) ? __tmp26[1] : _idx(__tmp26, 1)), 1.2) && _eq((__tmp27 = r2; __tmp27.is_a?(Hash) ? __tmp27[2] : _idx(__tmp27, 2)), 10.6))
      panic("test2 failed")
    end
  end
  def main()
    test_solver()
    eq = [[2.0, 1.0, 1.0, 1.0, 1.0, 4.0], [1.0, 2.0, 1.0, 1.0, 1.0, 5.0], [1.0, 1.0, 2.0, 1.0, 1.0, 6.0], [1.0, 1.0, 1.0, 2.0, 1.0, 7.0], [1.0, 1.0, 1.0, 1.0, 2.0, 8.0]]
    puts(((x = solve_simultaneous(eq)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = solve_simultaneous([[4.0, 2.0]])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
