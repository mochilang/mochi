# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def rand_float()
    $rand_seed = (_add(1103515245 * $rand_seed, 12345)) % 2147483648.clone
    return (($rand_seed).to_f) / 2147483648.0
  end
  def rand_range(min_val, max_val)
    return _add(rand_float() * (max_val - min_val), min_val)
  end
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrtApprox(x)
    if x == 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def pi_estimator(iterations)
    inside = 0.0.clone
    i = 0.clone
    while i < iterations
      x = rand_range(-1.0, 1.0)
      y = rand_range(-1.0, 1.0)
      if _add(x * x, y * y) <= 1.0
        inside = _add(inside, 1.0).clone
      end
      i = _add(i, 1).clone
    end
    proportion = inside / ((iterations).to_f)
    pi_estimate = proportion * 4.0
    puts(((["The estimated value of pi is", pi_estimate]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["The numpy value of pi is", $PI]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["The total error is", abs_float($PI - pi_estimate)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
  end
  def area_under_curve_estimator(iterations, f, min_value, max_value)
    sum = 0.0.clone
    i = 0.clone
    while i < iterations
      x = rand_range(min_value, max_value)
      sum = _add(sum, f.call(x)).clone
      i = _add(i, 1).clone
    end
    expected = sum / ((iterations).to_f)
    return expected * (max_value - min_value)
  end
  def area_under_line_estimator_check(iterations, min_value, max_value)
    identity_function = ->(x) {
      return x
    }
    estimated_value = area_under_curve_estimator(iterations, identity_function, min_value, max_value)
    expected_value = (max_value * max_value - min_value * min_value) / 2.0
    puts("******************")
    puts(((["Estimating area under y=x where x varies from", min_value]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["Estimated value is", estimated_value]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["Expected value is", expected_value]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["Total error is", abs_float(estimated_value - expected_value)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts("******************")
  end
  def pi_estimator_using_area_under_curve(iterations)
    semi_circle = ->(x) {
      y = 4.0 - x * x
      s = sqrtApprox(y)
      return s
    }
    estimated_value = area_under_curve_estimator(iterations, semi_circle, 0.0, 2.0)
    puts("******************")
    puts("Estimating pi using area_under_curve_estimator")
    puts(((["Estimated value is", estimated_value]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["Expected value is", $PI]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts(((["Total error is", abs_float(estimated_value - $PI)]).map{ |x| if x.nil? then 'None' elsif x == true then 'True' elsif x == false then 'False' elsif x.respond_to?(:to_h) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x end }.join(' ')).rstrip())
    puts("******************")
  end
  def main()
    pi_estimator(1000)
    area_under_line_estimator_check(1000, 0.0, 1.0)
    pi_estimator_using_area_under_curve(1000)
  end
  $PI = 3.141592653589793
  $rand_seed = 123456789.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
