# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def copy_list(xs)
    res = []
    i = 0
    while i < _len(xs)
      res = _append(res, (__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    return res
  end
  def polynomial_new(degree, coeffs)
    if !_eq(_len(coeffs), _add(degree, 1))
      panic("The number of coefficients should be equal to the degree + 1.")
    end
    return Polynomial.new(degree: degree, coefficients: copy_list(coeffs))
  end
  def add(p, q)
    if p.degree > q.degree
      coeffs = copy_list(p.coefficients)
      i = 0
      while i <= q.degree
        coeffs[i] = _add((__tmp2 = coeffs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), (__tmp3 = q.coefficients; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
        i = _add(i, 1)
      end
      return Polynomial.new(degree: p.degree, coefficients: coeffs)
    else
      coeffs = copy_list(q.coefficients)
      i = 0
      while i <= p.degree
        coeffs[i] = _add((__tmp4 = coeffs; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), (__tmp5 = p.coefficients; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
        i = _add(i, 1)
      end
      return Polynomial.new(degree: q.degree, coefficients: coeffs)
    end
  end
  def neg(p)
    coeffs = []
    i = 0
    while i <= p.degree
      coeffs = _append(coeffs, -(__tmp6 = p.coefficients; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)))
      i = _add(i, 1)
    end
    return Polynomial.new(degree: p.degree, coefficients: coeffs)
  end
  def sub(p, q)
    return add(p, neg(q))
  end
  def mul(p, q)
    size = _add(_add(p.degree, q.degree), 1)
    coeffs = []
    i = 0
    while i < size
      coeffs = _append(coeffs, 0.0)
      i = _add(i, 1)
    end
    i = 0
    while i <= p.degree
      j = 0
      while j <= q.degree
        coeffs[_add(i, j)] = _add((__tmp7 = coeffs; __tmp7.is_a?(Hash) ? __tmp7[_add(i, j)] : _idx(__tmp7, _add(i, j))), (__tmp8 = p.coefficients; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)) * (__tmp9 = q.coefficients; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)))
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return Polynomial.new(degree: _add(p.degree, q.degree), coefficients: coeffs)
  end
  def power(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def evaluate(p, x)
    result = 0.0
    i = 0
    while i <= p.degree
      result = _add(result, (__tmp10 = p.coefficients; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)) * power(x, i))
      i = _add(i, 1)
    end
    return result
  end
  def poly_to_string(p)
    s = ""
    i = p.degree
    while i >= 0
      coeff = (__tmp11 = p.coefficients; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
      if !_eq(coeff, 0.0)
        if _len(s) > 0
          if coeff > 0.0
            s = _add(s, " + ")
          else
            s = _add(s, " - ")
          end
        else
          if coeff < 0.0
            s = _add(s, "-")
          end
        end
        abs_coeff = (coeff < 0.0 ? -coeff : coeff)
        if _eq(i, 0)
          s = _add(s, _str(abs_coeff))
        else
          if _eq(i, 1)
            s = _add(_add(s, _str(abs_coeff)), "x")
          else
            s = _add(_add(_add(s, _str(abs_coeff)), "x^"), _str(i))
          end
        end
      end
      i = i - 1
    end
    if _eq(s, "")
      s = "0"
    end
    return s
  end
  def derivative(p)
    if _eq(p.degree, 0)
      return Polynomial.new(degree: 0, coefficients: [0.0])
    end
    coeffs = []
    i = 0
    while i < p.degree
      coeffs = _append(coeffs, (__tmp12 = p.coefficients; __tmp12.is_a?(Hash) ? __tmp12[_add(i, 1)] : _idx(__tmp12, _add(i, 1))) * (_add(i, 1)).to_f)
      i = _add(i, 1)
    end
    return Polynomial.new(degree: p.degree - 1, coefficients: coeffs)
  end
  def integral(p, constant)
    coeffs = [constant]
    i = 0
    while i <= p.degree
      coeffs = _append(coeffs, (__tmp13 = p.coefficients; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)) / (_add(i, 1)).to_f)
      i = _add(i, 1)
    end
    return Polynomial.new(degree: _add(p.degree, 1), coefficients: coeffs)
  end
  def equals(p, q)
    if !_eq(p.degree, q.degree)
      return false
    end
    i = 0
    while i <= p.degree
      if !_eq((__tmp14 = p.coefficients; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)), (__tmp15 = q.coefficients; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i)))
        return false
      end
      i = _add(i, 1)
    end
    return true
  end
  def not_equals(p, q)
    return !equals(p, q)
  end
  def test_polynomial()
    p = polynomial_new(2, [1.0, 2.0, 3.0])
    q = polynomial_new(2, [1.0, 2.0, 3.0])
    if !_eq(poly_to_string(add(p, q)), "6x^2 + 4x + 2")
      panic("add failed")
    end
    if !_eq(poly_to_string(sub(p, q)), "0")
      panic("sub failed")
    end
    if !_eq(evaluate(p, 2.0), 17.0)
      panic("evaluate failed")
    end
    if !_eq(poly_to_string(derivative(p)), "6x + 2")
      panic("derivative failed")
    end
    integ = poly_to_string(integral(p, 0.0))
    if !_eq(integ, "1x^3 + 1x^2 + 1x")
      panic("integral failed")
    end
    if !equals(p, q)
      panic("equals failed")
    end
    if not_equals(p, q)
      panic("not_equals failed")
    end
  end
  def main()
    test_polynomial()
    p = polynomial_new(2, [1.0, 2.0, 3.0])
    d = derivative(p)
    puts(poly_to_string(d))
  end
  Object.send(:remove_const, :Polynomial) if Object.const_defined?(:Polynomial)
  Polynomial = Struct.new(:degree, :coefficients, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
