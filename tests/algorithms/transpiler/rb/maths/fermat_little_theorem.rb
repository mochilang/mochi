# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def binary_exponentiation(a, n, mod)
    if n == 0
      return 1
    end
    if n % 2 == 1
      return (binary_exponentiation(a, n - 1, mod) * a) % mod
    end
    b = binary_exponentiation(a, n / 2, mod)
    return (b * b) % mod
  end
  def naive_exponent_mod(a, n, mod)
    result = 1.clone
    i = 0.clone
    while i < n
      result = (result * a) % mod.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def print_bool(b)
    if b
      puts((true ? 'true' : 'false'))
    else
      puts((false ? 'true' : 'false'))
    end
  end
  $p = 701
  $a = 1000000000
  $b = 10
  $left = ($a / $b) % $p
  $right_fast = ($a * binary_exponentiation($b, $p - 2, $p)) % $p
  print_bool($left == $right_fast)
  $right_naive = ($a * naive_exponent_mod($b, $p - 2, $p)) % $p
  print_bool($left == $right_naive)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
