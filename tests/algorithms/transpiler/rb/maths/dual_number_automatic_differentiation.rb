# Generated by Mochi transpiler v0.10.66 on 2025-08-16 14:44 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def make_dual(real, rank)
    ds = []
    i = 0
    while i < rank
      ds = _append(ds, 1.0)
      i = _add(i, 1)
    end
    return Dual.new(real: real, duals: ds)
  end
  def dual_from_list(real, ds)
    return Dual.new(real: real, duals: ds)
  end
  def dual_add(a, b)
    s_dual = []
    i = 0
    while i < _len(a.duals)
      s_dual = _append(s_dual, (__tmp1 = a.duals; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)))
      i = _add(i, 1)
    end
    o_dual = []
    j = 0
    while j < _len(b.duals)
      o_dual = _append(o_dual, (__tmp2 = b.duals; __tmp2.is_a?(Hash) ? __tmp2[j] : _idx(__tmp2, j)))
      j = _add(j, 1)
    end
    if _len(s_dual) > _len(o_dual)
      diff = _len(s_dual) - _len(o_dual)
      k = 0
      while k < diff
        o_dual = _append(o_dual, 1.0)
        k = _add(k, 1)
      end
    else
      if _len(s_dual) < _len(o_dual)
        diff2 = _len(o_dual) - _len(s_dual)
        k2 = 0
        while k2 < diff2
          s_dual = _append(s_dual, 1.0)
          k2 = _add(k2, 1)
        end
      end
    end
    new_duals = []
    idx = 0
    while idx < _len(s_dual)
      new_duals = _append(new_duals, _add((__tmp3 = s_dual; __tmp3.is_a?(Hash) ? __tmp3[idx] : _idx(__tmp3, idx)), (__tmp4 = o_dual; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))))
      idx = _add(idx, 1)
    end
    return Dual.new(real: _add(a.real, b.real), duals: new_duals)
  end
  def dual_add_real(a, b)
    ds = []
    i = 0
    while i < _len(a.duals)
      ds = _append(ds, (__tmp5 = a.duals; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      i = _add(i, 1)
    end
    return Dual.new(real: _add(a.real, b), duals: ds)
  end
  def dual_mul(a, b)
    new_len = _add(_add(_len(a.duals), _len(b.duals)), 1)
    new_duals = []
    idx = 0
    while idx < new_len
      new_duals = _append(new_duals, 0.0)
      idx = _add(idx, 1)
    end
    i = 0
    while i < _len(a.duals)
      j = 0
      while j < _len(b.duals)
        pos = _add(_add(i, j), 1)
        val = _add((__tmp6 = new_duals; __tmp6.is_a?(Hash) ? __tmp6[pos] : _idx(__tmp6, pos)), (__tmp7 = a.duals; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)) * (__tmp8 = b.duals; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)))
        new_duals[pos] = val
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    k = 0
    while k < _len(a.duals)
      val = _add((__tmp9 = new_duals; __tmp9.is_a?(Hash) ? __tmp9[k] : _idx(__tmp9, k)), (__tmp10 = a.duals; __tmp10.is_a?(Hash) ? __tmp10[k] : _idx(__tmp10, k)) * b.real)
      new_duals[k] = val
      k = _add(k, 1)
    end
    l = 0
    while l < _len(b.duals)
      val = _add((__tmp11 = new_duals; __tmp11.is_a?(Hash) ? __tmp11[l] : _idx(__tmp11, l)), (__tmp12 = b.duals; __tmp12.is_a?(Hash) ? __tmp12[l] : _idx(__tmp12, l)) * a.real)
      new_duals[l] = val
      l = _add(l, 1)
    end
    return Dual.new(real: a.real * b.real, duals: new_duals)
  end
  def dual_mul_real(a, b)
    ds = []
    i = 0
    while i < _len(a.duals)
      ds = _append(ds, (__tmp13 = a.duals; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i)) * b)
      i = _add(i, 1)
    end
    return Dual.new(real: a.real * b, duals: ds)
  end
  def dual_pow(x, n)
    if n < 0
      panic("power must be a positive integer")
    end
    if _eq(n, 0)
      return Dual.new(real: 1.0, duals: [])
    end
    res = x
    i = 1
    while i < n
      res = dual_mul(res, x)
      i = _add(i, 1)
    end
    return res
  end
  def factorial(n)
    res = 1.0
    i = 2
    while i <= n
      res = res * ((i).to_f)
      i = _add(i, 1)
    end
    return res
  end
  def differentiate(func, position, order)
    d = make_dual(position, 1)
    result = func.call(d)
    if _eq(order, 0)
      return result.real
    end
    return (__tmp14 = result.duals; __tmp14.is_a?(Hash) ? __tmp14[order - 1] : _idx(__tmp14, order - 1)) * factorial(order)
  end
  def test_differentiate()
    f1 = ->(x) {
      return dual_pow(x, 2)
    }
    if !_eq(differentiate(f1, 2.0, 2), 2.0)
      panic("f1 failed")
    end
    f2 = ->(x) {
      return dual_mul(dual_pow(x, 2), dual_pow(x, 4))
    }
    if !_eq(differentiate(f2, 9.0, 2), 196830.0)
      panic("f2 failed")
    end
    f3 = ->(y) {
      return dual_mul_real(dual_pow(dual_add_real(y, 3.0), 6), 0.5)
    }
    if !_eq(differentiate(f3, 3.5, 4), 7605.0)
      panic("f3 failed")
    end
    f4 = ->(y) {
      return dual_pow(y, 2)
    }
    if !_eq(differentiate(f4, 4.0, 3), 0.0)
      panic("f4 failed")
    end
  end
  def main()
    test_differentiate()
    f = ->(y) {
      return dual_mul(dual_pow(y, 2), dual_pow(y, 4))
    }
    res = differentiate(f, 9.0, 2)
    puts(res)
  end
  Object.send(:remove_const, :Dual) if Object.const_defined?(:Dual)
  Object.const_set(:Dual, Struct.new(:real, :duals, keyword_init: true))
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
