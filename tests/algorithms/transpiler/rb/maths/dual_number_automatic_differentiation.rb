# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def make_dual(real, rank)
    ds = [].clone
    i = 0.clone
    while i < rank
      ds = (ds << (1.0)).clone
      i = _add(i, 1).clone
    end
    return Dual.new(real: real, duals: ds)
  end
  def dual_from_list(real, ds)
    return Dual.new(real: real, duals: ds)
  end
  def dual_add(a, b)
    s_dual = [].clone
    i = 0.clone
    while i < a.duals.length
      s_dual = (s_dual << (a.duals[i])).clone
      i = _add(i, 1).clone
    end
    o_dual = [].clone
    j = 0.clone
    while j < b.duals.length
      o_dual = (o_dual << (b.duals[j])).clone
      j = _add(j, 1).clone
    end
    if s_dual.length > o_dual.length
      diff = s_dual.length - o_dual.length.clone
      k = 0.clone
      while k < diff
        o_dual = (o_dual << (1.0)).clone
        k = _add(k, 1).clone
      end
    else
      if s_dual.length < o_dual.length
        diff2 = o_dual.length - s_dual.length.clone
        k2 = 0.clone
        while k2 < diff2
          s_dual = (s_dual << (1.0)).clone
          k2 = _add(k2, 1).clone
        end
      end
    end
    new_duals = [].clone
    idx = 0.clone
    while idx < s_dual.length
      new_duals = (new_duals << (_add(s_dual[idx], o_dual[idx]))).clone
      idx = _add(idx, 1).clone
    end
    return Dual.new(real: _add(a.real, b.real), duals: new_duals)
  end
  def dual_add_real(a, b)
    ds = [].clone
    i = 0.clone
    while i < a.duals.length
      ds = (ds << (a.duals[i])).clone
      i = _add(i, 1).clone
    end
    return Dual.new(real: _add(a.real, b), duals: ds)
  end
  def dual_mul(a, b)
    new_len = _add(_add(a.duals.length, b.duals.length), 1)
    new_duals = [].clone
    idx = 0.clone
    while idx < new_len
      new_duals = (new_duals << (0.0)).clone
      idx = _add(idx, 1).clone
    end
    i = 0.clone
    while i < a.duals.length
      j = 0.clone
      while j < b.duals.length
        pos = _add(_add(i, j), 1)
        val = _add(new_duals[pos], a.duals[i] * b.duals[j])
        new_duals[pos] = val
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    k = 0.clone
    while k < a.duals.length
      val = _add(new_duals[k], a.duals[k] * b.real)
      new_duals[k] = val
      k = _add(k, 1).clone
    end
    l = 0.clone
    while l < b.duals.length
      val = _add(new_duals[l], b.duals[l] * a.real)
      new_duals[l] = val
      l = _add(l, 1).clone
    end
    return Dual.new(real: a.real * b.real, duals: new_duals)
  end
  def dual_mul_real(a, b)
    ds = [].clone
    i = 0.clone
    while i < a.duals.length
      ds = (ds << (a.duals[i] * b)).clone
      i = _add(i, 1).clone
    end
    return Dual.new(real: a.real * b, duals: ds)
  end
  def dual_pow(x, n)
    if n < 0
      panic("power must be a positive integer")
    end
    if n == 0
      return Dual.new(real: 1.0, duals: [])
    end
    res = x.clone
    i = 1.clone
    while i < n
      res = dual_mul(res, x).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def factorial(n)
    res = 1.0.clone
    i = 2.clone
    while i <= n
      res = res * ((i).to_f).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def differentiate(func, position, order)
    d = make_dual(position, 1)
    result = func.call(d)
    if order == 0
      return result.real
    end
    return result.duals[order - 1] * factorial(order)
  end
  def test_differentiate()
    f1 = ->(x) {
      return dual_pow(x, 2)
    }
    if differentiate(f1, 2.0, 2) != 2.0
      panic("f1 failed")
    end
    f2 = ->(x) {
      return dual_mul(dual_pow(x, 2), dual_pow(x, 4))
    }
    if differentiate(f2, 9.0, 2) != 196830.0
      panic("f2 failed")
    end
    f3 = ->(y) {
      return dual_mul_real(dual_pow(dual_add_real(y, 3.0), 6), 0.5)
    }
    if differentiate(f3, 3.5, 4) != 7605.0
      panic("f3 failed")
    end
    f4 = ->(y) {
      return dual_pow(y, 2)
    }
    if differentiate(f4, 4.0, 3) != 0.0
      panic("f4 failed")
    end
  end
  def main()
    test_differentiate()
    f = ->(y) {
      return dual_mul(dual_pow(y, 2), dual_pow(y, 4))
    }
    res = differentiate(f, 9.0, 2)
    puts(res)
  end
  Dual = Struct.new(:real, :duals, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
