# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def ceil_float(x)
    i = (x).to_i
    if x > ((i).to_f)
      return _add(i, 1)
    end
    return i
  end
  def exp_approx(x)
    term = 1.0.clone
    sum = 1.0.clone
    n = 1.clone
    while n < 20
      term = term * x / ((n).to_f).clone
      sum = _add(sum, term).clone
      n = _add(n, 1).clone
    end
    return sum
  end
  def euler_modified(ode_func, y0, x0, step, x_end)
    n = ceil_float((x_end - x0) / step)
    y = [y0].clone
    x = x0.clone
    k = 0.clone
    while k < n
      y_predict = _add(y[k], step * ode_func.call(x, y[k]))
      slope1 = ode_func.call(x, y[k])
      slope2 = ode_func.call(_add(x, step), y_predict)
      y_next = _add(y[k], (step / 2.0) * (_add(slope1, slope2)))
      y = (y << (y_next)).clone
      x = _add(x, step).clone
      k = _add(k, 1).clone
    end
    return y
  end
  def f1(x, y)
    return -2.0 * x * y * y
  end
  def f2(x, y)
    return _add(-2.0 * y, (x * x * x) * exp_approx(-2.0 * x))
  end
  def main()
    y1 = euler_modified(method(:f1), 1.0, 0.0, 0.2, 1.0)
    puts(y1[y1.length - 1])
    y2 = euler_modified(method(:f2), 1.0, 0.0, 0.1, 0.3)
    puts(y2[y2.length - 1])
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
