# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def bubble_sort(nums)
    arr = nums
    n = _len(arr)
    i = 0
    while i < n
      j = 0
      while j < n - 1
        if (__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)) > (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[_add(j, 1)] : _idx(__tmp2, _add(j, 1)))
          temp = (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
          arr[j] = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[_add(j, 1)] : _idx(__tmp4, _add(j, 1)))
          arr[_add(j, 1)] = temp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def three_sum(nums)
    sorted = bubble_sort(nums)
    res = []
    n = _len(sorted)
    i = 0
    while i < n - 2
      if _eq(i, 0) || !_eq((__tmp5 = sorted; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)), (__tmp6 = sorted; __tmp6.is_a?(Hash) ? __tmp6[i - 1] : _idx(__tmp6, i - 1)))
        low = _add(i, 1)
        high = n - 1
        c = 0 - (__tmp7 = sorted; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
        while low < high
          s = _add((__tmp8 = sorted; __tmp8.is_a?(Hash) ? __tmp8[low] : _idx(__tmp8, low)), (__tmp9 = sorted; __tmp9.is_a?(Hash) ? __tmp9[high] : _idx(__tmp9, high)))
          if _eq(s, c)
            triple = [(__tmp10 = sorted; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)), (__tmp11 = sorted; __tmp11.is_a?(Hash) ? __tmp11[low] : _idx(__tmp11, low)), (__tmp12 = sorted; __tmp12.is_a?(Hash) ? __tmp12[high] : _idx(__tmp12, high))]
            res = _append(res, triple)
            while low < high && _eq((__tmp13 = sorted; __tmp13.is_a?(Hash) ? __tmp13[low] : _idx(__tmp13, low)), (__tmp14 = sorted; __tmp14.is_a?(Hash) ? __tmp14[_add(low, 1)] : _idx(__tmp14, _add(low, 1))))
              low = _add(low, 1)
            end
            while low < high && _eq((__tmp15 = sorted; __tmp15.is_a?(Hash) ? __tmp15[high] : _idx(__tmp15, high)), (__tmp16 = sorted; __tmp16.is_a?(Hash) ? __tmp16[high - 1] : _idx(__tmp16, high - 1)))
              high = high - 1
            end
            low = _add(low, 1)
            high = high - 1
          else
            if s < c
              low = _add(low, 1)
            else
              high = high - 1
            end
          end
        end
      end
      i = _add(i, 1)
    end
    return res
  end
  puts(((x = three_sum([-1, 0, 1, 2, -1, -4])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = three_sum([1, 2, 3, 4])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
