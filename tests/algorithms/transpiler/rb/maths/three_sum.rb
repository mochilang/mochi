# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bubble_sort(nums)
    arr = nums.clone
    n = arr.length.clone
    i = 0.clone
    while i < n
      j = 0.clone
      while j < n - 1
        if arr[j] > arr[_add(j, 1)]
          temp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = temp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def three_sum(nums)
    sorted = bubble_sort(nums)
    res = [].clone
    n = sorted.length
    i = 0.clone
    while i < n - 2
      if i == 0 || sorted[i] != sorted[i - 1]
        low = _add(i, 1).clone
        high = n - 1.clone
        c = 0 - sorted[i]
        while low < high
          s = _add(sorted[low], sorted[high])
          if s == c
            triple = [sorted[i], sorted[low], sorted[high]]
            res = (res << (triple)).clone
            while low < high && sorted[low] == sorted[_add(low, 1)]
              low = _add(low, 1).clone
            end
            while low < high && sorted[high] == sorted[high - 1]
              high = high - 1.clone
            end
            low = _add(low, 1).clone
            high = high - 1.clone
          else
            if s < c
              low = _add(low, 1).clone
            else
              high = high - 1.clone
            end
          end
        end
      end
      i = _add(i, 1).clone
    end
    return res
  end
  puts(((x = three_sum([-1, 0, 1, 2, -1, -4])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  puts(((x = three_sum([1, 2, 3, 4])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
