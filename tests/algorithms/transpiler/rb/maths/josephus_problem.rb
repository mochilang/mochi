# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def josephus_recursive(num_people, step_size)
    if num_people <= 0 || step_size <= 0
      panic("num_people or step_size is not a positive integer.")
    end
    if num_people == 1
      return 0
    end
    return (_add(josephus_recursive(num_people - 1, step_size), step_size)) % num_people
  end
  def find_winner(num_people, step_size)
    return _add(josephus_recursive(num_people, step_size), 1)
  end
  def remove_at(xs, idx)
    res = [].clone
    i = 0.clone
    while i < xs.length
      if i != idx
        res = (res << (xs[i])).clone
      end
      i = _add(i, 1).clone
    end
    return res
  end
  def josephus_iterative(num_people, step_size)
    if num_people <= 0 || step_size <= 0
      panic("num_people or step_size is not a positive integer.")
    end
    circle = [].clone
    i = 1.clone
    while i <= num_people
      circle = (circle << (i)).clone
      i = _add(i, 1).clone
    end
    current = 0.clone
    while circle.length > 1
      current = (_add(current, step_size) - 1) % circle.length.clone
      circle = remove_at(circle, current).clone
    end
    return circle[0]
  end
  $r = josephus_recursive(7, 3)
  puts(_str($r))
  puts(_str(find_winner(7, 3)))
  puts(_str(josephus_iterative(7, 3)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
