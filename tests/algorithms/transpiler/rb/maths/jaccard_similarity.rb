# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def contains(xs, value)
    i = 0.clone
    while i < xs.length
      if xs[i] == value
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def jaccard_similarity(set_a, set_b, alternative_union)
    intersection_len = 0.clone
    i = 0.clone
    while i < set_a.length
      if set_b.include?(set_a[i])
        intersection_len = _add(intersection_len, 1).clone
      end
      i = _add(i, 1).clone
    end
    union_len = 0.clone
    if alternative_union
      union_len = _add(set_a.length, set_b.length).clone
    else
      union_list = [].clone
      i = 0.clone
      while i < set_a.length
        val_a = set_a[i]
        if !union_list.include?(val_a)
          union_list = (union_list << (val_a)).clone
        end
        i = _add(i, 1).clone
      end
      i = 0.clone
      while i < set_b.length
        val_b = set_b[i]
        if !union_list.include?(val_b)
          union_list = (union_list << (val_b)).clone
        end
        i = _add(i, 1).clone
      end
      union_len = union_list.length.clone
    end
    return 1.0 * intersection_len / union_len
  end
  def main()
    set_a = ["a", "b", "c", "d", "e"]
    set_b = ["c", "d", "e", "f", "h", "i"]
    puts(jaccard_similarity(set_a, set_b, false))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
