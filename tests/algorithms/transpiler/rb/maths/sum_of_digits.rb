# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_int(n)
    if n < 0
      return -n
    end
    return n
  end
  def sum_of_digits(n)
    m = abs_int(n).clone
    res = 0.clone
    while m > 0
      res = _add(res, (m % 10)).clone
      m = m / 10.clone
    end
    return res
  end
  def sum_of_digits_recursion(n)
    m = abs_int(n)
    if m < 10
      return m
    end
    return _add((m % 10), sum_of_digits_recursion(m / 10))
  end
  def sum_of_digits_compact(n)
    s = _str(abs_int(n))
    res = 0.clone
    i = 0.clone
    while i < s.length
      res = _add(res, ((s[i]).to_i)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def test_sum_of_digits()
    if sum_of_digits(12345) != 15
      panic("sum_of_digits 12345 failed")
    end
    if sum_of_digits(123) != 6
      panic("sum_of_digits 123 failed")
    end
    if sum_of_digits(-123) != 6
      panic("sum_of_digits -123 failed")
    end
    if sum_of_digits(0) != 0
      panic("sum_of_digits 0 failed")
    end
    if sum_of_digits_recursion(12345) != 15
      panic("recursion 12345 failed")
    end
    if sum_of_digits_recursion(123) != 6
      panic("recursion 123 failed")
    end
    if sum_of_digits_recursion(-123) != 6
      panic("recursion -123 failed")
    end
    if sum_of_digits_recursion(0) != 0
      panic("recursion 0 failed")
    end
    if sum_of_digits_compact(12345) != 15
      panic("compact 12345 failed")
    end
    if sum_of_digits_compact(123) != 6
      panic("compact 123 failed")
    end
    if sum_of_digits_compact(-123) != 6
      panic("compact -123 failed")
    end
    if sum_of_digits_compact(0) != 0
      panic("compact 0 failed")
    end
  end
  def main()
    test_sum_of_digits()
    puts(_str(sum_of_digits(12345)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
