# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def runge_kutta(f, y0, x0, h, x_end)
    span = (x_end - x0) / h
    n = (span).to_i
    if (n).to_f < span
      n = _add(n, 1)
    end
    y = []
    i = 0
    while i < _add(n, 1)
      y = _append(y, 0.0)
      i = _add(i, 1)
    end
    y[0] = y0
    x = x0
    k = 0
    while k < n
      k1 = f.call(x, (__tmp1 = y; __tmp1.is_a?(Hash) ? __tmp1[k] : _idx(__tmp1, k)))
      k2 = f.call(_add(x, 0.5 * h), _add((__tmp2 = y; __tmp2.is_a?(Hash) ? __tmp2[k] : _idx(__tmp2, k)), 0.5 * h * k1))
      k3 = f.call(_add(x, 0.5 * h), _add((__tmp3 = y; __tmp3.is_a?(Hash) ? __tmp3[k] : _idx(__tmp3, k)), 0.5 * h * k2))
      k4 = f.call(_add(x, h), _add((__tmp4 = y; __tmp4.is_a?(Hash) ? __tmp4[k] : _idx(__tmp4, k)), h * k3))
      y[_add(k, 1)] = _add((__tmp5 = y; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k)), (1.0 / 6.0) * h * (_add(_add(_add(k1, 2.0 * k2), 2.0 * k3), k4)))
      x = _add(x, h)
      k = _add(k, 1)
    end
    return y
  end
  def test_runge_kutta()
    f = ->(x, y) {
      return y
    }
    result = runge_kutta(f, 1.0, 0.0, 0.01, 5.0)
    last = (__tmp6 = result; __tmp6.is_a?(Hash) ? __tmp6[_len(result) - 1] : _idx(__tmp6, _len(result) - 1))
    expected = 148.41315904125113
    diff = last - expected
    if diff < 0.0
      diff = -diff
    end
    if diff > 1e-06
      panic("runge_kutta failed")
    end
  end
  def main()
    test_runge_kutta()
    f = ->(x, y) {
      return y
    }
    r = runge_kutta(f, 1.0, 0.0, 0.1, 1.0)
    puts(_str((__tmp7 = r; __tmp7.is_a?(Hash) ? __tmp7[_len(r) - 1] : _idx(__tmp7, _len(r) - 1))))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
