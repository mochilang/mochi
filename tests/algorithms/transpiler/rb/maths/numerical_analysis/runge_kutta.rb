# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def runge_kutta(f, y0, x0, h, x_end)
    span = (x_end - x0) / h
    n = (span).to_i.clone
    if (n).to_f < span
      n = _add(n, 1).clone
    end
    y = [].clone
    i = 0.clone
    while i < _add(n, 1)
      y = (y << (0.0)).clone
      i = _add(i, 1).clone
    end
    y[0] = y0
    x = x0.clone
    k = 0.clone
    while k < n
      k1 = f.call(x, y[k])
      k2 = f.call(_add(x, 0.5 * h), _add(y[k], 0.5 * h * k1))
      k3 = f.call(_add(x, 0.5 * h), _add(y[k], 0.5 * h * k2))
      k4 = f.call(_add(x, h), _add(y[k], h * k3))
      y[_add(k, 1)] = _add(y[k], (1.0 / 6.0) * h * (_add(_add(_add(k1, 2.0 * k2), 2.0 * k3), k4)))
      x = _add(x, h).clone
      k = _add(k, 1).clone
    end
    return y
  end
  def test_runge_kutta()
    f = ->(x, y) {
      return y
    }
    result = runge_kutta(f, 1.0, 0.0, 0.01, 5.0)
    last = result[result.length - 1]
    expected = 148.41315904125113
    diff = last - expected.clone
    if diff < 0.0
      diff = -diff.clone
    end
    if diff > 1e-06
      panic("runge_kutta failed")
    end
  end
  def main()
    test_runge_kutta()
    f = ->(x, y) {
      return y
    }
    r = runge_kutta(f, 1.0, 0.0, 0.1, 1.0)
    puts(_str(r[r.length - 1]))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
