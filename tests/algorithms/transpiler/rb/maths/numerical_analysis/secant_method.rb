# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exp_approx(x)
    sum = 1.0.clone
    term = 1.0.clone
    i = 1.clone
    while i <= 20
      term = term * x / i.clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def f(x)
    return 8.0 * x - 2.0 * exp_approx(-x)
  end
  def secant_method(lower_bound, upper_bound, repeats)
    x0 = lower_bound.clone
    x1 = upper_bound.clone
    i = 0.clone
    while i < repeats
      fx1 = f(x1)
      fx0 = f(x0)
      new_x = x1 - (fx1 * (x1 - x0)) / (fx1 - fx0)
      x0 = x1.clone
      x1 = new_x.clone
      i = _add(i, 1).clone
    end
    return x1
  end
  puts(_str(secant_method(1.0, 3.0, 2)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
