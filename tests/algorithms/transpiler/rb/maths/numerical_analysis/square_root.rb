# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def fx(x, a)
    return x * x - a
  end
  def fx_derivative(x)
    return 2.0 * x
  end
  def get_initial_point(a)
    start = 2.0.clone
    while start <= a
      start = start * start.clone
    end
    return start
  end
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def square_root_iterative(a, max_iter, tolerance)
    if a < 0.0
      panic("math domain error")
    end
    value = get_initial_point(a).clone
    i = 0.clone
    while i < max_iter
      prev_value = value
      value = value - fx(value, a) / fx_derivative(value).clone
      if abs_float(prev_value - value) < tolerance
        return value
      end
      i = _add(i, 1).clone
    end
    return value
  end
  $r1 = square_root_iterative(4.0, 9999, 1e-14)
  puts(_str($r1))
  $r2 = square_root_iterative(3.2, 9999, 1e-14)
  puts(_str($r2))
  $r3 = square_root_iterative(140.0, 9999, 1e-14)
  puts(_str($r3))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
