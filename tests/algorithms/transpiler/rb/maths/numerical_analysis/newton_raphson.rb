# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_float(x)
    if x < 0.0
      return -x
    else
      return x
    end
  end
  def fail(msg)
    puts(_add("error: ", msg))
  end
  def calc_derivative(f, x, delta_x)
    return (f.call(_add(x, delta_x / 2.0)) - f.call(x - delta_x / 2.0)) / delta_x
  end
  def newton_raphson(f, x0, max_iter, step, max_error, log_steps)
    a = x0.clone
    steps = [].clone
    i = 0.clone
    while i < max_iter
      if log_steps
        steps = (steps << (a)).clone
      end
      err = abs_float(f.call(a))
      if err < max_error
        return NRResult.new(root: a, error: err, steps: steps)
      end
      der = calc_derivative(f, a, step)
      if der == 0.0
        fail("No converging solution found, zero derivative")
        return NRResult.new(root: a, error: err, steps: steps)
      end
      a = a - f.call(a) / der.clone
      i = _add(i, 1).clone
    end
    fail("No converging solution found, iteration limit reached")
    return NRResult.new(root: a, error: abs_float(f.call(a)), steps: steps)
  end
  def poly(x)
    return _add(x * x - 5.0 * x, 2.0)
  end
  NRResult = Struct.new(:root, :error, :steps, keyword_init: true)
  $result = newton_raphson(method(:poly), 0.4, 20, 1e-06, 1e-06, false)
  puts(_add(_add(_add("root = ", _str($result.root)), ", error = "), _str($result.error)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
