# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_float(x)
    if x < 0.0
      return -x
    else
      return x
    end
  end
  def fail(msg)
    puts(_add("error: ", msg))
  end
  def calc_derivative(f, x, delta_x)
    return (f.call(_add(x, delta_x / 2.0)) - f.call(x - delta_x / 2.0)) / delta_x
  end
  def newton_raphson(f, x0, max_iter, step, max_error, log_steps)
    a = x0
    steps = []
    i = 0
    while i < max_iter
      if log_steps
        steps = _append(steps, a)
      end
      err = abs_float(f.call(a))
      if err < max_error
        return NRResult.new(root: a, error: err, steps: steps)
      end
      der = calc_derivative(f, a, step)
      if _eq(der, 0.0)
        fail("No converging solution found, zero derivative")
        return NRResult.new(root: a, error: err, steps: steps)
      end
      a = a - f.call(a) / der
      i = _add(i, 1)
    end
    fail("No converging solution found, iteration limit reached")
    return NRResult.new(root: a, error: abs_float(f.call(a)), steps: steps)
  end
  def poly(x)
    return _add(x * x - 5.0 * x, 2.0)
  end
  Object.send(:remove_const, :NRResult) if Object.const_defined?(:NRResult)
  NRResult = Struct.new(:root, :error, :steps, keyword_init: true)
  $result = newton_raphson(method(:poly), 0.4, 20, 1e-06, 1e-06, false)
  puts(_add(_add(_add("root = ", _str($result.root)), ", error = "), _str($result.error)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
