# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def gcd(a, b)
    x = a.clone
    y = b.clone
    while y != 0
      t = x % y
      x = y.clone
      y = t.clone
    end
    if x < 0
      return -x
    end
    return x
  end
  def proper_fractions(den)
    if den < 0
      panic("The Denominator Cannot be less than 0")
    end
    res = [].clone
    n = 1.clone
    while n < den
      if gcd(n, den) == 1
        res = (res << (_add(_add(_str(n), "/"), _str(den)))).clone
      end
      n = _add(n, 1).clone
    end
    return res
  end
  def test_proper_fractions()
    a = proper_fractions(10)
    if a != ["1/10", "3/10", "7/10", "9/10"]
      panic("test 10 failed")
    end
    b = proper_fractions(5)
    if b != ["1/5", "2/5", "3/5", "4/5"]
      panic("test 5 failed")
    end
    c = proper_fractions(0)
    if c != []
      panic("test 0 failed")
    end
  end
  def main()
    test_proper_fractions()
    puts(((x = proper_fractions(10)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = proper_fractions(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
    puts(((x = proper_fractions(0)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
