# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final)
    if x_initial >= x_final
      panic("The final value of x must be greater than initial value of x.")
    end
    if step_size <= 0.0
      panic("Step size must be positive.")
    end
    n = (((x_final - x_initial) / step_size)).to_i
    ys = [].clone
    x = x_initial.clone
    y = y_initial.clone
    ys = (ys << (y)).clone
    i = 0.clone
    while i < n
      k1 = step_size * func.call(x, y)
      k2 = step_size * func.call(_add(x, step_size / 4.0), _add(y, k1 / 4.0))
      k3 = step_size * func.call(_add(x, (3.0 / 8.0) * step_size), _add(_add(y, (3.0 / 32.0) * k1), (9.0 / 32.0) * k2))
      k4 = step_size * func.call(_add(x, (12.0 / 13.0) * step_size), _add(_add(y, (1932.0 / 2197.0) * k1) - (7200.0 / 2197.0) * k2, (7296.0 / 2197.0) * k3))
      k5 = step_size * func.call(_add(x, step_size), _add(_add(y, (439.0 / 216.0) * k1) - 8.0 * k2, (3680.0 / 513.0) * k3) - (845.0 / 4104.0) * k4)
      k6 = step_size * func.call(_add(x, step_size / 2.0), _add(_add(y - (8.0 / 27.0) * k1, 2.0 * k2) - (3544.0 / 2565.0) * k3, (1859.0 / 4104.0) * k4) - (11.0 / 40.0) * k5)
      y = _add(_add(_add(_add(y, (16.0 / 135.0) * k1), (6656.0 / 12825.0) * k3), (28561.0 / 56430.0) * k4) - (9.0 / 50.0) * k5, (2.0 / 55.0) * k6).clone
      x = _add(x, step_size).clone
      ys = (ys << (y)).clone
      i = _add(i, 1).clone
    end
    return ys
  end
  def main()
    f1 = ->(x, y) {
      return _add(1.0, y * y)
    }
    y1 = runge_kutta_fehlberg_45(f1, 0.0, 0.0, 0.2, 1.0)
    puts(y1[1])
    f2 = ->(x, y) {
      return x
    }
    y2 = runge_kutta_fehlberg_45(f2, -1.0, 0.0, 0.2, 0.0)
    puts(y2[1])
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
