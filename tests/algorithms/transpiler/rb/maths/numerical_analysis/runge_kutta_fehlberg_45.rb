# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final)
    if x_initial >= x_final
      panic("The final value of x must be greater than initial value of x.")
    end
    if step_size <= 0.0
      panic("Step size must be positive.")
    end
    n = (((x_final - x_initial) / step_size)).to_i
    ys = []
    x = x_initial
    y = y_initial
    ys = _append(ys, y)
    i = 0
    while i < n
      k1 = step_size * func.call(x, y)
      k2 = step_size * func.call(_add(x, step_size / 4.0), _add(y, k1 / 4.0))
      k3 = step_size * func.call(_add(x, (3.0 / 8.0) * step_size), _add(_add(y, (3.0 / 32.0) * k1), (9.0 / 32.0) * k2))
      k4 = step_size * func.call(_add(x, (12.0 / 13.0) * step_size), _add(_add(y, (1932.0 / 2197.0) * k1) - (7200.0 / 2197.0) * k2, (7296.0 / 2197.0) * k3))
      k5 = step_size * func.call(_add(x, step_size), _add(_add(y, (439.0 / 216.0) * k1) - 8.0 * k2, (3680.0 / 513.0) * k3) - (845.0 / 4104.0) * k4)
      k6 = step_size * func.call(_add(x, step_size / 2.0), _add(_add(y - (8.0 / 27.0) * k1, 2.0 * k2) - (3544.0 / 2565.0) * k3, (1859.0 / 4104.0) * k4) - (11.0 / 40.0) * k5)
      y = _add(_add(_add(_add(y, (16.0 / 135.0) * k1), (6656.0 / 12825.0) * k3), (28561.0 / 56430.0) * k4) - (9.0 / 50.0) * k5, (2.0 / 55.0) * k6)
      x = _add(x, step_size)
      ys = _append(ys, y)
      i = _add(i, 1)
    end
    return ys
  end
  def main()
    f1 = ->(x, y) {
      return _add(1.0, y * y)
    }
    y1 = runge_kutta_fehlberg_45(f1, 0.0, 0.0, 0.2, 1.0)
    puts((__tmp1 = y1; __tmp1.is_a?(Hash) ? __tmp1[1] : _idx(__tmp1, 1)))
    f2 = ->(x, y) {
      return x
    }
    y2 = runge_kutta_fehlberg_45(f2, -1.0, 0.0, 0.2, 0.0)
    puts((__tmp2 = y2; __tmp2.is_a?(Hash) ? __tmp2[1] : _idx(__tmp2, 1)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
