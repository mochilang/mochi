# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def neville_interpolate(x_points, y_points, x0)
    n = _len(x_points)
    q = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        row = _append(row, 0.0)
        j = _add(j, 1)
      end
      q = _append(q, row)
      i = _add(i, 1)
    end
    i = 0
    while i < n
      (__tmp1 = q; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))[1] = (__tmp2 = y_points; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i))
      i = _add(i, 1)
    end
    col = 2
    while col < n
      row_idx = col
      while row_idx < n
        (__tmp3 = q; __tmp3.is_a?(Hash) ? __tmp3[row_idx] : _idx(__tmp3, row_idx))[col] = ((x0 - (__tmp4 = x_points; __tmp4.is_a?(Hash) ? __tmp4[_add(row_idx - col, 1)] : _idx(__tmp4, _add(row_idx - col, 1)))) * (__tmp5 = (__tmp6 = q; __tmp6.is_a?(Hash) ? __tmp6[row_idx] : _idx(__tmp6, row_idx)); __tmp5.is_a?(Hash) ? __tmp5[col - 1] : _idx(__tmp5, col - 1)) - (x0 - (__tmp7 = x_points; __tmp7.is_a?(Hash) ? __tmp7[row_idx] : _idx(__tmp7, row_idx))) * (__tmp8 = (__tmp9 = q; __tmp9.is_a?(Hash) ? __tmp9[row_idx - 1] : _idx(__tmp9, row_idx - 1)); __tmp8.is_a?(Hash) ? __tmp8[col - 1] : _idx(__tmp8, col - 1))) / ((__tmp10 = x_points; __tmp10.is_a?(Hash) ? __tmp10[row_idx] : _idx(__tmp10, row_idx)) - (__tmp11 = x_points; __tmp11.is_a?(Hash) ? __tmp11[_add(row_idx - col, 1)] : _idx(__tmp11, _add(row_idx - col, 1))))
        row_idx = _add(row_idx, 1)
      end
      col = _add(col, 1)
    end
    return NevilleResult.new(value: (__tmp12 = (__tmp13 = q; __tmp13.is_a?(Hash) ? __tmp13[n - 1] : _idx(__tmp13, n - 1)); __tmp12.is_a?(Hash) ? __tmp12[n - 1] : _idx(__tmp12, n - 1)), table: q)
  end
  def test_neville()
    xs = [1.0, 2.0, 3.0, 4.0, 6.0]
    ys = [6.0, 7.0, 8.0, 9.0, 11.0]
    r1 = neville_interpolate(xs, ys, 5.0)
    if !_eq(r1.value, 10.0)
      panic("neville_interpolate at 5 failed")
    end
    r2 = neville_interpolate(xs, ys, 99.0)
    if !_eq(r2.value, 104.0)
      panic("neville_interpolate at 99 failed")
    end
  end
  def main()
    test_neville()
    xs = [1.0, 2.0, 3.0, 4.0, 6.0]
    ys = [6.0, 7.0, 8.0, 9.0, 11.0]
    r = neville_interpolate(xs, ys, 5.0)
    puts(r.value)
  end
  Object.send(:remove_const, :NevilleResult) if Object.const_defined?(:NevilleResult)
  NevilleResult = Struct.new(:value, :table, keyword_init: true)
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
