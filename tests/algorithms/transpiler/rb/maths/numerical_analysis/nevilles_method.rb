# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def neville_interpolate(x_points, y_points, x0)
    n = x_points.length
    q = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        row = (row << (0.0)).clone
        j = _add(j, 1).clone
      end
      q = (q << (row)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < n
      q[i][1] = y_points[i]
      i = _add(i, 1).clone
    end
    col = 2.clone
    while col < n
      row_idx = col.clone
      while row_idx < n
        q[row_idx][col] = ((x0 - x_points[_add(row_idx - col, 1)]) * q[row_idx][col - 1] - (x0 - x_points[row_idx]) * q[row_idx - 1][col - 1]) / (x_points[row_idx] - x_points[_add(row_idx - col, 1)])
        row_idx = _add(row_idx, 1).clone
      end
      col = _add(col, 1).clone
    end
    return NevilleResult.new(value: q[n - 1][n - 1], table: q)
  end
  def test_neville()
    xs = [1.0, 2.0, 3.0, 4.0, 6.0]
    ys = [6.0, 7.0, 8.0, 9.0, 11.0]
    r1 = neville_interpolate(xs, ys, 5.0)
    if r1.value != 10.0
      panic("neville_interpolate at 5 failed")
    end
    r2 = neville_interpolate(xs, ys, 99.0)
    if r2.value != 104.0
      panic("neville_interpolate at 99 failed")
    end
  end
  def main()
    test_neville()
    xs = [1.0, 2.0, 3.0, 4.0, 6.0]
    ys = [6.0, 7.0, 8.0, 9.0, 11.0]
    r = neville_interpolate(xs, ys, 5.0)
    puts(r.value)
  end
  NevilleResult = Struct.new(:value, :table, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
