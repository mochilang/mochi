# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_float(x)
    if x < 0.0
      return -x
    else
      return x
    end
  end
  def validate_inputs(x_initials, step_size, x_final)
    if (__tmp1 = x_initials; __tmp1.is_a?(Hash) ? __tmp1[_len(x_initials) - 1] : _idx(__tmp1, _len(x_initials) - 1)) >= x_final
      panic("The final value of x must be greater than the initial values of x.")
    end
    if step_size <= 0.0
      panic("Step size must be positive.")
    end
    i = 0
    while i < _len(x_initials) - 1
      diff = (__tmp2 = x_initials; __tmp2.is_a?(Hash) ? __tmp2[_add(i, 1)] : _idx(__tmp2, _add(i, 1))) - (__tmp3 = x_initials; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      if abs_float(diff - step_size) > 1e-10
        panic("x-values must be equally spaced according to step size.")
      end
      i = _add(i, 1)
    end
  end
  def list_to_string(xs)
    s = "["
    i = 0
    while i < _len(xs)
      s = _add(s, _str((__tmp4 = xs; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))))
      if _add(i, 1) < _len(xs)
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def adams_bashforth_step2(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if !_eq(_len(x_initials), 2) || !_eq(_len(y_initials), 2)
      panic("Insufficient initial points information.")
    end
    x0 = (__tmp5 = x_initials; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0))
    x1 = (__tmp6 = x_initials; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1))
    y = []
    y = _append(y, (__tmp7 = y_initials; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)))
    y = _append(y, (__tmp8 = y_initials; __tmp8.is_a?(Hash) ? __tmp8[1] : _idx(__tmp8, 1)))
    n = (((x_final - x1) / step_size)).to_i
    i = 0
    while i < n
      term = 3.0 * f.call(x1, (__tmp9 = y; __tmp9.is_a?(Hash) ? __tmp9[_add(i, 1)] : _idx(__tmp9, _add(i, 1)))) - f.call(x0, (__tmp10 = y; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
      y_next = _add((__tmp11 = y; __tmp11.is_a?(Hash) ? __tmp11[_add(i, 1)] : _idx(__tmp11, _add(i, 1))), (step_size / 2.0) * term)
      y = _append(y, y_next)
      x0 = x1
      x1 = _add(x1, step_size)
      i = _add(i, 1)
    end
    return y
  end
  def adams_bashforth_step3(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if !_eq(_len(x_initials), 3) || !_eq(_len(y_initials), 3)
      panic("Insufficient initial points information.")
    end
    x0 = (__tmp12 = x_initials; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0))
    x1 = (__tmp13 = x_initials; __tmp13.is_a?(Hash) ? __tmp13[1] : _idx(__tmp13, 1))
    x2 = (__tmp14 = x_initials; __tmp14.is_a?(Hash) ? __tmp14[2] : _idx(__tmp14, 2))
    y = []
    y = _append(y, (__tmp15 = y_initials; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0)))
    y = _append(y, (__tmp16 = y_initials; __tmp16.is_a?(Hash) ? __tmp16[1] : _idx(__tmp16, 1)))
    y = _append(y, (__tmp17 = y_initials; __tmp17.is_a?(Hash) ? __tmp17[2] : _idx(__tmp17, 2)))
    n = (((x_final - x2) / step_size)).to_i
    i = 0
    while i <= n
      term = _add(23.0 * f.call(x2, (__tmp18 = y; __tmp18.is_a?(Hash) ? __tmp18[_add(i, 2)] : _idx(__tmp18, _add(i, 2)))) - 16.0 * f.call(x1, (__tmp19 = y; __tmp19.is_a?(Hash) ? __tmp19[_add(i, 1)] : _idx(__tmp19, _add(i, 1)))), 5.0 * f.call(x0, (__tmp20 = y; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i))))
      y_next = _add((__tmp21 = y; __tmp21.is_a?(Hash) ? __tmp21[_add(i, 2)] : _idx(__tmp21, _add(i, 2))), (step_size / 12.0) * term)
      y = _append(y, y_next)
      x0 = x1
      x1 = x2
      x2 = _add(x2, step_size)
      i = _add(i, 1)
    end
    return y
  end
  def adams_bashforth_step4(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if !_eq(_len(x_initials), 4) || !_eq(_len(y_initials), 4)
      panic("Insufficient initial points information.")
    end
    x0 = (__tmp22 = x_initials; __tmp22.is_a?(Hash) ? __tmp22[0] : _idx(__tmp22, 0))
    x1 = (__tmp23 = x_initials; __tmp23.is_a?(Hash) ? __tmp23[1] : _idx(__tmp23, 1))
    x2 = (__tmp24 = x_initials; __tmp24.is_a?(Hash) ? __tmp24[2] : _idx(__tmp24, 2))
    x3 = (__tmp25 = x_initials; __tmp25.is_a?(Hash) ? __tmp25[3] : _idx(__tmp25, 3))
    y = []
    y = _append(y, (__tmp26 = y_initials; __tmp26.is_a?(Hash) ? __tmp26[0] : _idx(__tmp26, 0)))
    y = _append(y, (__tmp27 = y_initials; __tmp27.is_a?(Hash) ? __tmp27[1] : _idx(__tmp27, 1)))
    y = _append(y, (__tmp28 = y_initials; __tmp28.is_a?(Hash) ? __tmp28[2] : _idx(__tmp28, 2)))
    y = _append(y, (__tmp29 = y_initials; __tmp29.is_a?(Hash) ? __tmp29[3] : _idx(__tmp29, 3)))
    n = (((x_final - x3) / step_size)).to_i
    i = 0
    while i < n
      term = _add(55.0 * f.call(x3, (__tmp30 = y; __tmp30.is_a?(Hash) ? __tmp30[_add(i, 3)] : _idx(__tmp30, _add(i, 3)))) - 59.0 * f.call(x2, (__tmp31 = y; __tmp31.is_a?(Hash) ? __tmp31[_add(i, 2)] : _idx(__tmp31, _add(i, 2)))), 37.0 * f.call(x1, (__tmp32 = y; __tmp32.is_a?(Hash) ? __tmp32[_add(i, 1)] : _idx(__tmp32, _add(i, 1))))) - 9.0 * f.call(x0, (__tmp33 = y; __tmp33.is_a?(Hash) ? __tmp33[i] : _idx(__tmp33, i)))
      y_next = _add((__tmp34 = y; __tmp34.is_a?(Hash) ? __tmp34[_add(i, 3)] : _idx(__tmp34, _add(i, 3))), (step_size / 24.0) * term)
      y = _append(y, y_next)
      x0 = x1
      x1 = x2
      x2 = x3
      x3 = _add(x3, step_size)
      i = _add(i, 1)
    end
    return y
  end
  def adams_bashforth_step5(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if !_eq(_len(x_initials), 5) || !_eq(_len(y_initials), 5)
      panic("Insufficient initial points information.")
    end
    x0 = (__tmp35 = x_initials; __tmp35.is_a?(Hash) ? __tmp35[0] : _idx(__tmp35, 0))
    x1 = (__tmp36 = x_initials; __tmp36.is_a?(Hash) ? __tmp36[1] : _idx(__tmp36, 1))
    x2 = (__tmp37 = x_initials; __tmp37.is_a?(Hash) ? __tmp37[2] : _idx(__tmp37, 2))
    x3 = (__tmp38 = x_initials; __tmp38.is_a?(Hash) ? __tmp38[3] : _idx(__tmp38, 3))
    x4 = (__tmp39 = x_initials; __tmp39.is_a?(Hash) ? __tmp39[4] : _idx(__tmp39, 4))
    y = []
    y = _append(y, (__tmp40 = y_initials; __tmp40.is_a?(Hash) ? __tmp40[0] : _idx(__tmp40, 0)))
    y = _append(y, (__tmp41 = y_initials; __tmp41.is_a?(Hash) ? __tmp41[1] : _idx(__tmp41, 1)))
    y = _append(y, (__tmp42 = y_initials; __tmp42.is_a?(Hash) ? __tmp42[2] : _idx(__tmp42, 2)))
    y = _append(y, (__tmp43 = y_initials; __tmp43.is_a?(Hash) ? __tmp43[3] : _idx(__tmp43, 3)))
    y = _append(y, (__tmp44 = y_initials; __tmp44.is_a?(Hash) ? __tmp44[4] : _idx(__tmp44, 4)))
    n = (((x_final - x4) / step_size)).to_i
    i = 0
    while i <= n
      term = _add(1901.0 * f.call(x4, (__tmp45 = y; __tmp45.is_a?(Hash) ? __tmp45[_add(i, 4)] : _idx(__tmp45, _add(i, 4)))) - 2774.0 * f.call(x3, (__tmp46 = y; __tmp46.is_a?(Hash) ? __tmp46[_add(i, 3)] : _idx(__tmp46, _add(i, 3)))) - 2616.0 * f.call(x2, (__tmp47 = y; __tmp47.is_a?(Hash) ? __tmp47[_add(i, 2)] : _idx(__tmp47, _add(i, 2)))) - 1274.0 * f.call(x1, (__tmp48 = y; __tmp48.is_a?(Hash) ? __tmp48[_add(i, 1)] : _idx(__tmp48, _add(i, 1)))), 251.0 * f.call(x0, (__tmp49 = y; __tmp49.is_a?(Hash) ? __tmp49[i] : _idx(__tmp49, i))))
      y_next = _add((__tmp50 = y; __tmp50.is_a?(Hash) ? __tmp50[_add(i, 4)] : _idx(__tmp50, _add(i, 4))), (step_size / 720.0) * term)
      y = _append(y, y_next)
      x0 = x1
      x1 = x2
      x2 = x3
      x3 = x4
      x4 = _add(x4, step_size)
      i = _add(i, 1)
    end
    return y
  end
  def f_x(x, y)
    return x
  end
  def f_xy(x, y)
    return _add(x, y)
  end
  $y2 = adams_bashforth_step2(method(:f_x), [0.0, 0.2], [0.0, 0.0], 0.2, 1.0)
  puts(list_to_string($y2))
  $y3 = adams_bashforth_step3(method(:f_xy), [0.0, 0.2, 0.4], [0.0, 0.0, 0.04], 0.2, 1.0)
  puts(_str((__tmp51 = $y3; __tmp51.is_a?(Hash) ? __tmp51[3] : _idx(__tmp51, 3))))
  $y4 = adams_bashforth_step4(method(:f_xy), [0.0, 0.2, 0.4, 0.6], [0.0, 0.0, 0.04, 0.128], 0.2, 1.0)
  puts(_str((__tmp52 = $y4; __tmp52.is_a?(Hash) ? __tmp52[4] : _idx(__tmp52, 4))))
  puts(_str((__tmp53 = $y4; __tmp53.is_a?(Hash) ? __tmp53[5] : _idx(__tmp53, 5))))
  $y5 = adams_bashforth_step5(method(:f_xy), [0.0, 0.2, 0.4, 0.6, 0.8], [0.0, 0.0214, 0.0214, 0.22211, 0.42536], 0.2, 1.0)
  puts(_str((__tmp54 = $y5; __tmp54.is_a?(Hash) ? __tmp54[_len($y5) - 1] : _idx(__tmp54, _len($y5) - 1))))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
