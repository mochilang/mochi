# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_float(x)
    if x < 0.0
      return -x
    else
      return x
    end
  end
  def validate_inputs(x_initials, step_size, x_final)
    if x_initials[x_initials.length - 1] >= x_final
      panic("The final value of x must be greater than the initial values of x.")
    end
    if step_size <= 0.0
      panic("Step size must be positive.")
    end
    i = 0.clone
    while i < x_initials.length - 1
      diff = x_initials[_add(i, 1)] - x_initials[i]
      if abs_float(diff - step_size) > 1e-10
        panic("x-values must be equally spaced according to step size.")
      end
      i = _add(i, 1).clone
    end
  end
  def list_to_string(xs)
    s = "[".clone
    i = 0.clone
    while i < xs.length
      s = _add(s, _str(xs[i])).clone
      if _add(i, 1) < xs.length
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def adams_bashforth_step2(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if x_initials.length != 2 || y_initials.length != 2
      panic("Insufficient initial points information.")
    end
    x0 = x_initials[0].clone
    x1 = x_initials[1].clone
    y = [].clone
    y = (y << (y_initials[0])).clone
    y = (y << (y_initials[1])).clone
    n = (((x_final - x1) / step_size)).to_i
    i = 0.clone
    while i < n
      term = 3.0 * f.call(x1, y[_add(i, 1)]) - f.call(x0, y[i])
      y_next = _add(y[_add(i, 1)], (step_size / 2.0) * term)
      y = (y << (y_next)).clone
      x0 = x1.clone
      x1 = _add(x1, step_size).clone
      i = _add(i, 1).clone
    end
    return y
  end
  def adams_bashforth_step3(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if x_initials.length != 3 || y_initials.length != 3
      panic("Insufficient initial points information.")
    end
    x0 = x_initials[0].clone
    x1 = x_initials[1].clone
    x2 = x_initials[2].clone
    y = [].clone
    y = (y << (y_initials[0])).clone
    y = (y << (y_initials[1])).clone
    y = (y << (y_initials[2])).clone
    n = (((x_final - x2) / step_size)).to_i
    i = 0.clone
    while i <= n
      term = _add(23.0 * f.call(x2, y[_add(i, 2)]) - 16.0 * f.call(x1, y[_add(i, 1)]), 5.0 * f.call(x0, y[i]))
      y_next = _add(y[_add(i, 2)], (step_size / 12.0) * term)
      y = (y << (y_next)).clone
      x0 = x1.clone
      x1 = x2.clone
      x2 = _add(x2, step_size).clone
      i = _add(i, 1).clone
    end
    return y
  end
  def adams_bashforth_step4(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if x_initials.length != 4 || y_initials.length != 4
      panic("Insufficient initial points information.")
    end
    x0 = x_initials[0].clone
    x1 = x_initials[1].clone
    x2 = x_initials[2].clone
    x3 = x_initials[3].clone
    y = [].clone
    y = (y << (y_initials[0])).clone
    y = (y << (y_initials[1])).clone
    y = (y << (y_initials[2])).clone
    y = (y << (y_initials[3])).clone
    n = (((x_final - x3) / step_size)).to_i
    i = 0.clone
    while i < n
      term = _add(55.0 * f.call(x3, y[_add(i, 3)]) - 59.0 * f.call(x2, y[_add(i, 2)]), 37.0 * f.call(x1, y[_add(i, 1)])) - 9.0 * f.call(x0, y[i])
      y_next = _add(y[_add(i, 3)], (step_size / 24.0) * term)
      y = (y << (y_next)).clone
      x0 = x1.clone
      x1 = x2.clone
      x2 = x3.clone
      x3 = _add(x3, step_size).clone
      i = _add(i, 1).clone
    end
    return y
  end
  def adams_bashforth_step5(f, x_initials, y_initials, step_size, x_final)
    validate_inputs(x_initials, step_size, x_final)
    if x_initials.length != 5 || y_initials.length != 5
      panic("Insufficient initial points information.")
    end
    x0 = x_initials[0].clone
    x1 = x_initials[1].clone
    x2 = x_initials[2].clone
    x3 = x_initials[3].clone
    x4 = x_initials[4].clone
    y = [].clone
    y = (y << (y_initials[0])).clone
    y = (y << (y_initials[1])).clone
    y = (y << (y_initials[2])).clone
    y = (y << (y_initials[3])).clone
    y = (y << (y_initials[4])).clone
    n = (((x_final - x4) / step_size)).to_i
    i = 0.clone
    while i <= n
      term = _add(1901.0 * f.call(x4, y[_add(i, 4)]) - 2774.0 * f.call(x3, y[_add(i, 3)]) - 2616.0 * f.call(x2, y[_add(i, 2)]) - 1274.0 * f.call(x1, y[_add(i, 1)]), 251.0 * f.call(x0, y[i]))
      y_next = _add(y[_add(i, 4)], (step_size / 720.0) * term)
      y = (y << (y_next)).clone
      x0 = x1.clone
      x1 = x2.clone
      x2 = x3.clone
      x3 = x4.clone
      x4 = _add(x4, step_size).clone
      i = _add(i, 1).clone
    end
    return y
  end
  def f_x(x, y)
    return x
  end
  def f_xy(x, y)
    return _add(x, y)
  end
  $y2 = adams_bashforth_step2(method(:f_x), [0.0, 0.2], [0.0, 0.0], 0.2, 1.0)
  puts(list_to_string($y2))
  $y3 = adams_bashforth_step3(method(:f_xy), [0.0, 0.2, 0.4], [0.0, 0.0, 0.04], 0.2, 1.0)
  puts(_str($y3[3]))
  $y4 = adams_bashforth_step4(method(:f_xy), [0.0, 0.2, 0.4, 0.6], [0.0, 0.0, 0.04, 0.128], 0.2, 1.0)
  puts(_str($y4[4]))
  puts(_str($y4[5]))
  $y5 = adams_bashforth_step5(method(:f_xy), [0.0, 0.2, 0.4, 0.6, 0.8], [0.0, 0.0214, 0.0214, 0.22211, 0.42536], 0.2, 1.0)
  puts(_str($y5[$y5.length - 1]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
