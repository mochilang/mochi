# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrt(x)
    guess = (x > 1.0 ? x / 2.0 : 1.0).clone
    i = 0.clone
    while i < 20
      guess = 0.5 * (_add(guess, x / guess)).clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def runge_kutta_gills(func, x_initial, y_initial, step_size, x_final)
    if x_initial >= x_final
      panic("The final value of x must be greater than initial value of x.")
    end
    if step_size <= 0.0
      panic("Step size must be positive.")
    end
    n = (((x_final - x_initial) / step_size)).to_i
    y = [].clone
    i = 0.clone
    while i <= n
      y = (y << (0.0)).clone
      i = _add(i, 1).clone
    end
    y[0] = y_initial
    xi = x_initial.clone
    idx = 0.clone
    root2 = sqrt(2.0)
    while idx < n
      k1 = step_size * func.call(xi, y[idx])
      k2 = step_size * func.call(_add(xi, step_size / 2.0), _add(y[idx], k1 / 2.0))
      k3 = step_size * func.call(_add(xi, step_size / 2.0), _add(_add(y[idx], (_add(-0.5, 1.0 / root2)) * k1), (1.0 - 1.0 / root2) * k2))
      k4 = step_size * func.call(_add(xi, step_size), _add(y[idx] - (1.0 / root2) * k2, (_add(1.0, 1.0 / root2)) * k3))
      y[_add(idx, 1)] = _add(y[idx], (_add(_add(_add(k1, (2.0 - root2) * k2), (_add(2.0, root2)) * k3), k4)) / 6.0)
      xi = _add(xi, step_size).clone
      idx = _add(idx, 1).clone
    end
    return y
  end
  def f1(x, y)
    return (x - y) / 2.0
  end
  def f2(x, y)
    return x
  end
  $y1 = runge_kutta_gills(method(:f1), 0.0, 3.0, 0.2, 5.0)
  puts(_str($y1[$y1.length - 1]))
  $y2 = runge_kutta_gills(method(:f2), -1.0, 0.0, 0.2, 0.0)
  puts(((x = $y2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
