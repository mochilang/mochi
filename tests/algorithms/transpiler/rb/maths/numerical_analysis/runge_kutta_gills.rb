# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrt(x)
    guess = (x > 1.0 ? x / 2.0 : 1.0)
    i = 0
    while i < 20
      guess = 0.5 * (_add(guess, x / guess))
      i = _add(i, 1)
    end
    return guess
  end
  def runge_kutta_gills(func, x_initial, y_initial, step_size, x_final)
    if x_initial >= x_final
      panic("The final value of x must be greater than initial value of x.")
    end
    if step_size <= 0.0
      panic("Step size must be positive.")
    end
    n = (((x_final - x_initial) / step_size)).to_i
    y = []
    i = 0
    while i <= n
      y = _append(y, 0.0)
      i = _add(i, 1)
    end
    y[0] = y_initial
    xi = x_initial
    idx = 0
    root2 = sqrt(2.0)
    while idx < n
      k1 = step_size * func.call(xi, (__tmp1 = y; __tmp1.is_a?(Hash) ? __tmp1[idx] : _idx(__tmp1, idx)))
      k2 = step_size * func.call(_add(xi, step_size / 2.0), _add((__tmp2 = y; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx)), k1 / 2.0))
      k3 = step_size * func.call(_add(xi, step_size / 2.0), _add(_add((__tmp3 = y; __tmp3.is_a?(Hash) ? __tmp3[idx] : _idx(__tmp3, idx)), (_add(-0.5, 1.0 / root2)) * k1), (1.0 - 1.0 / root2) * k2))
      k4 = step_size * func.call(_add(xi, step_size), _add((__tmp4 = y; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx)) - (1.0 / root2) * k2, (_add(1.0, 1.0 / root2)) * k3))
      y[_add(idx, 1)] = _add((__tmp5 = y; __tmp5.is_a?(Hash) ? __tmp5[idx] : _idx(__tmp5, idx)), (_add(_add(_add(k1, (2.0 - root2) * k2), (_add(2.0, root2)) * k3), k4)) / 6.0)
      xi = _add(xi, step_size)
      idx = _add(idx, 1)
    end
    return y
  end
  def f1(x, y)
    return (x - y) / 2.0
  end
  def f2(x, y)
    return x
  end
  $y1 = runge_kutta_gills(method(:f1), 0.0, 3.0, 0.2, 5.0)
  puts(_str((__tmp6 = $y1; __tmp6.is_a?(Hash) ? __tmp6[_len($y1) - 1] : _idx(__tmp6, _len($y1) - 1))))
  $y2 = runge_kutta_gills(method(:f2), -1.0, 0.0, 0.2, 0.0)
  puts(((x = $y2); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
