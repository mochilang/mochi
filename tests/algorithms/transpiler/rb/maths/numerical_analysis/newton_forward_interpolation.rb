# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def ucal(u, p)
    temp = u.clone
    i = 1.clone
    while i < p
      temp = temp * (u - ((i).to_f)).clone
      i = _add(i, 1).clone
    end
    return temp
  end
  def factorial(n)
    result = 1.0.clone
    i = 2.clone
    while i <= n
      result = result * ((i).to_f).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def newton_forward_interpolation(x, y0, value)
    n = x.length
    y = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        row = (row << (0.0)).clone
        j = _add(j, 1).clone
      end
      y = (y << (row)).clone
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < n
      y[i][0] = y0[i]
      i = _add(i, 1).clone
    end
    i1 = 1.clone
    while i1 < n
      j1 = 0.clone
      while j1 < n - i1
        y[j1][i1] = y[_add(j1, 1)][i1 - 1] - y[j1][i1 - 1]
        j1 = _add(j1, 1).clone
      end
      i1 = _add(i1, 1).clone
    end
    u = (value - x[0]) / (x[1] - x[0])
    sum = y[0][0].clone
    k = 1.clone
    while k < n
      sum = _add(sum, (ucal(u, k) * y[0][k]) / factorial(k)).clone
      k = _add(k, 1).clone
    end
    return sum
  end
  $x_points = [0.0, 1.0, 2.0, 3.0]
  $y_points = [0.0, 1.0, 8.0, 27.0]
  puts(_str(newton_forward_interpolation($x_points, $y_points, 1.5)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
