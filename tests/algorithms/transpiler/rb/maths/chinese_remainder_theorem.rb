# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def extended_euclid(a, b)
    if b == 0
      return EuclidResult.new(x: 1, y: 0)
    end
    res = extended_euclid(b, a % b)
    k = a / b
    return EuclidResult.new(x: res.y, y: res.x - k * res.y)
  end
  def chinese_remainder_theorem(n1, r1, n2, r2)
    res = extended_euclid(n1, n2)
    x = res.x
    y = res.y
    m = n1 * n2
    n = _add(r2 * x * n1, r1 * y * n2)
    return (_add((n % m), m)) % m
  end
  def invert_modulo(a, n)
    res = extended_euclid(a, n)
    b = res.x.clone
    if b < 0
      b = (_add(b % n, n)) % n.clone
    end
    return b
  end
  def chinese_remainder_theorem2(n1, r1, n2, r2)
    x = invert_modulo(n1, n2)
    y = invert_modulo(n2, n1)
    m = n1 * n2
    n = _add(r2 * x * n1, r1 * y * n2)
    return (_add((n % m), m)) % m
  end
  EuclidResult = Struct.new(:x, :y, keyword_init: true)
  $e1 = extended_euclid(10, 6)
  puts(_add(_add(_str($e1.x), ","), _str($e1.y)))
  $e2 = extended_euclid(7, 5)
  puts(_add(_add(_str($e2.x), ","), _str($e2.y)))
  puts(_str(chinese_remainder_theorem(5, 1, 7, 3)))
  puts(_str(chinese_remainder_theorem(6, 1, 4, 3)))
  puts(_str(invert_modulo(2, 5)))
  puts(_str(invert_modulo(8, 7)))
  puts(_str(chinese_remainder_theorem2(5, 1, 7, 3)))
  puts(_str(chinese_remainder_theorem2(6, 1, 4, 3)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
