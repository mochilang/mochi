# Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:42 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs_val(num)
    if num < 0.0
      return -num
    end
    return num
  end
  def abs_min(x)
    if _eq(_len(x), 0)
      panic("abs_min() arg is an empty sequence")
    end
    j = (__tmp1 = x; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
    idx = 0
    while idx < _len(x)
      i = (__tmp2 = x; __tmp2.is_a?(Hash) ? __tmp2[idx] : _idx(__tmp2, idx))
      if abs_val((i).to_f) < abs_val((j).to_f)
        j = i
      end
      idx = _add(idx, 1)
    end
    return j
  end
  def abs_max(x)
    if _eq(_len(x), 0)
      panic("abs_max() arg is an empty sequence")
    end
    j = (__tmp3 = x; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
    idx = 0
    while idx < _len(x)
      i = (__tmp4 = x; __tmp4.is_a?(Hash) ? __tmp4[idx] : _idx(__tmp4, idx))
      if abs_val((i).to_f) > abs_val((j).to_f)
        j = i
      end
      idx = _add(idx, 1)
    end
    return j
  end
  def abs_max_sort(x)
    if _eq(_len(x), 0)
      panic("abs_max_sort() arg is an empty sequence")
    end
    arr = []
    i = 0
    while i < _len(x)
      arr = _append(arr, (__tmp5 = x; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      i = _add(i, 1)
    end
    n = _len(arr)
    a = 0
    while a < n
      b = 0
      while b < n - a - 1
        if abs_val(((__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[b] : _idx(__tmp6, b))).to_f) > abs_val(((__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[_add(b, 1)] : _idx(__tmp7, _add(b, 1)))).to_f)
          temp = (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[b] : _idx(__tmp8, b))
          arr[b] = (__tmp9 = arr; __tmp9.is_a?(Hash) ? __tmp9[_add(b, 1)] : _idx(__tmp9, _add(b, 1)))
          arr[_add(b, 1)] = temp
        end
        b = _add(b, 1)
      end
      a = _add(a, 1)
    end
    return (__tmp10 = arr; __tmp10.is_a?(Hash) ? __tmp10[n - 1] : _idx(__tmp10, n - 1))
  end
  def test_abs_val()
    if !_eq(abs_val(0.0), 0.0)
      panic("abs_val(0) failed")
    end
    if !_eq(abs_val(34.0), 34.0)
      panic("abs_val(34) failed")
    end
    if !_eq(abs_val(-1e+11), 1e+11)
      panic("abs_val large failed")
    end
    a = [-3, -1, 2, -11]
    if !_eq(abs_max(a), (-11))
      panic("abs_max failed")
    end
    if !_eq(abs_max_sort(a), (-11))
      panic("abs_max_sort failed")
    end
    if !_eq(abs_min(a), (-1))
      panic("abs_min failed")
    end
  end
  def main()
    test_abs_val()
    puts(abs_val(-34.0))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
