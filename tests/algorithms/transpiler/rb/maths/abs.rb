# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs_val(num)
    if num < 0.0
      return -num
    end
    return num
  end
  def abs_min(x)
    if x.length == 0
      panic("abs_min() arg is an empty sequence")
    end
    j = x[0].clone
    idx = 0.clone
    while idx < x.length
      i = x[idx]
      if abs_val((i).to_f) < abs_val((j).to_f)
        j = i.clone
      end
      idx = _add(idx, 1).clone
    end
    return j
  end
  def abs_max(x)
    if x.length == 0
      panic("abs_max() arg is an empty sequence")
    end
    j = x[0].clone
    idx = 0.clone
    while idx < x.length
      i = x[idx]
      if abs_val((i).to_f) > abs_val((j).to_f)
        j = i.clone
      end
      idx = _add(idx, 1).clone
    end
    return j
  end
  def abs_max_sort(x)
    if x.length == 0
      panic("abs_max_sort() arg is an empty sequence")
    end
    arr = [].clone
    i = 0.clone
    while i < x.length
      arr = (arr << (x[i])).clone
      i = _add(i, 1).clone
    end
    n = arr.length.clone
    a = 0.clone
    while a < n
      b = 0.clone
      while b < n - a - 1
        if abs_val((arr[b]).to_f) > abs_val((arr[_add(b, 1)]).to_f)
          temp = arr[b]
          arr[b] = arr[_add(b, 1)]
          arr[_add(b, 1)] = temp
        end
        b = _add(b, 1).clone
      end
      a = _add(a, 1).clone
    end
    return arr[n - 1]
  end
  def test_abs_val()
    if abs_val(0.0) != 0.0
      panic("abs_val(0) failed")
    end
    if abs_val(34.0) != 34.0
      panic("abs_val(34) failed")
    end
    if abs_val(-100000000000.0) != 100000000000.0
      panic("abs_val large failed")
    end
    a = [-3, -1, 2, -11]
    if abs_max(a) != (-11)
      panic("abs_max failed")
    end
    if abs_max_sort(a) != (-11)
      panic("abs_max_sort failed")
    end
    if abs_min(a) != (-1)
      panic("abs_min failed")
    end
  end
  def main()
    test_abs_val()
    puts(abs_val(-34.0))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
