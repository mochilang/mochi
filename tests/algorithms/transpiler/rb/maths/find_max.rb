# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def normalize_index(index, n)
    if index < 0
      return _add(n, index)
    end
    return index
  end
  def find_max_iterative(nums)
    if nums.length == 0
      panic("find_max_iterative() arg is an empty sequence")
    end
    max_num = nums[0].clone
    i = 0.clone
    while i < nums.length
      x = nums[i]
      if x > max_num
        max_num = x.clone
      end
      i = _add(i, 1).clone
    end
    return max_num
  end
  def find_max_recursive(nums, left, right)
    n = nums.length
    if n == 0
      panic("find_max_recursive() arg is an empty sequence")
    end
    if left >= n || left < (0 - n) || right >= n || right < (0 - n)
      panic("list index out of range")
    end
    l = normalize_index(left, n).clone
    r = normalize_index(right, n).clone
    if l == r
      return nums[l]
    end
    mid = (_add(l, r)) / 2
    left_max = find_max_recursive(nums, l, mid)
    right_max = find_max_recursive(nums, _add(mid, 1), r)
    if left_max >= right_max
      return left_max
    end
    return right_max
  end
  def test_find_max()
    arr = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0]
    if find_max_iterative(arr) != 94.0
      panic("find_max_iterative failed")
    end
    if find_max_recursive(arr, 0, arr.length - 1) != 94.0
      panic("find_max_recursive failed")
    end
    if find_max_recursive(arr, -arr.length, -1) != 94.0
      panic("negative index handling failed")
    end
  end
  def main()
    test_find_max()
    nums = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0]
    puts(find_max_iterative(nums))
    puts(find_max_recursive(nums, 0, nums.length - 1))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
