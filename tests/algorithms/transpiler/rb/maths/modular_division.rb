# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def mod(a, n)
    r = a % n
    if r < 0
      return _add(r, n)
    end
    return r
  end
  def greatest_common_divisor(a, b)
    x = (a < 0 ? -a : a)
    y = (b < 0 ? -b : b)
    while !_eq(y, 0)
      t = x % y
      x = y
      y = t
    end
    return x
  end
  def extended_gcd(a, b)
    if _eq(b, 0)
      return [a, 1, 0]
    end
    res = extended_gcd(b, a % b)
    d = (__tmp1 = res; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))
    p = (__tmp2 = res; __tmp2.is_a?(Hash) ? __tmp2[1] : _idx(__tmp2, 1))
    q = (__tmp3 = res; __tmp3.is_a?(Hash) ? __tmp3[2] : _idx(__tmp3, 2))
    x = q
    y = p - q * (a / b)
    return [d, x, y]
  end
  def extended_euclid(a, b)
    if _eq(b, 0)
      return [1, 0]
    end
    res = extended_euclid(b, a % b)
    x = (__tmp4 = res; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1))
    y = (__tmp5 = res; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)) - (a / b) * (__tmp6 = res; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1))
    return [x, y]
  end
  def invert_modulo(a, n)
    res = extended_euclid(a, n)
    inv = (__tmp7 = res; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0))
    return mod(inv, n)
  end
  def modular_division(a, b, n)
    if n <= 1
      panic("n must be > 1")
    end
    if a <= 0
      panic("a must be > 0")
    end
    if !_eq(greatest_common_divisor(a, n), 1)
      panic("gcd(a,n) != 1")
    end
    eg = extended_gcd(n, a)
    s = (__tmp8 = eg; __tmp8.is_a?(Hash) ? __tmp8[2] : _idx(__tmp8, 2))
    return mod(b * s, n)
  end
  def modular_division2(a, b, n)
    s = invert_modulo(a, n)
    return mod(b * s, n)
  end
  def tests()
    if !_eq(modular_division(4, 8, 5), 2)
      panic("md1")
    end
    if !_eq(modular_division(3, 8, 5), 1)
      panic("md2")
    end
    if !_eq(modular_division(4, 11, 5), 4)
      panic("md3")
    end
    if !_eq(modular_division2(4, 8, 5), 2)
      panic("md21")
    end
    if !_eq(modular_division2(3, 8, 5), 1)
      panic("md22")
    end
    if !_eq(modular_division2(4, 11, 5), 4)
      panic("md23")
    end
    if !_eq(invert_modulo(2, 5), 3)
      panic("inv")
    end
    eg = extended_gcd(10, 6)
    if !_eq((__tmp9 = eg; __tmp9.is_a?(Hash) ? __tmp9[0] : _idx(__tmp9, 0)), 2) || !_eq((__tmp10 = eg; __tmp10.is_a?(Hash) ? __tmp10[1] : _idx(__tmp10, 1)), (-1)) || !_eq((__tmp11 = eg; __tmp11.is_a?(Hash) ? __tmp11[2] : _idx(__tmp11, 2)), 2)
      panic("eg")
    end
    eu = extended_euclid(10, 6)
    if !_eq((__tmp12 = eu; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0)), (-1)) || !_eq((__tmp13 = eu; __tmp13.is_a?(Hash) ? __tmp13[1] : _idx(__tmp13, 1)), 2)
      panic("eu")
    end
    if !_eq(greatest_common_divisor(121, 11), 11)
      panic("gcd")
    end
  end
  def main()
    tests()
    puts(_str(modular_division(4, 8, 5)))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
