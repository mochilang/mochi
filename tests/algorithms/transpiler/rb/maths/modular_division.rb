# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def mod(a, n)
    r = a % n
    if r < 0
      return _add(r, n)
    end
    return r
  end
  def greatest_common_divisor(a, b)
    x = (a < 0 ? -a : a).clone
    y = (b < 0 ? -b : b).clone
    while y != 0
      t = x % y
      x = y.clone
      y = t.clone
    end
    return x
  end
  def extended_gcd(a, b)
    if b == 0
      return [a, 1, 0]
    end
    res = extended_gcd(b, a % b)
    d = res[0]
    p = res[1]
    q = res[2]
    x = q
    y = p - q * (a / b)
    return [d, x, y]
  end
  def extended_euclid(a, b)
    if b == 0
      return [1, 0]
    end
    res = extended_euclid(b, a % b)
    x = res[1]
    y = res[0] - (a / b) * res[1]
    return [x, y]
  end
  def invert_modulo(a, n)
    res = extended_euclid(a, n)
    inv = res[0]
    return mod(inv, n)
  end
  def modular_division(a, b, n)
    if n <= 1
      panic("n must be > 1")
    end
    if a <= 0
      panic("a must be > 0")
    end
    if greatest_common_divisor(a, n) != 1
      panic("gcd(a,n) != 1")
    end
    eg = extended_gcd(n, a)
    s = eg[2]
    return mod(b * s, n)
  end
  def modular_division2(a, b, n)
    s = invert_modulo(a, n)
    return mod(b * s, n)
  end
  def tests()
    if modular_division(4, 8, 5) != 2
      panic("md1")
    end
    if modular_division(3, 8, 5) != 1
      panic("md2")
    end
    if modular_division(4, 11, 5) != 4
      panic("md3")
    end
    if modular_division2(4, 8, 5) != 2
      panic("md21")
    end
    if modular_division2(3, 8, 5) != 1
      panic("md22")
    end
    if modular_division2(4, 11, 5) != 4
      panic("md23")
    end
    if invert_modulo(2, 5) != 3
      panic("inv")
    end
    eg = extended_gcd(10, 6)
    if eg[0] != 2 || eg[1] != (-1) || eg[2] != 2
      panic("eg")
    end
    eu = extended_euclid(10, 6)
    if eu[0] != (-1) || eu[1] != 2
      panic("eu")
    end
    if greatest_common_divisor(121, 11) != 11
      panic("gcd")
    end
  end
  def main()
    tests()
    puts(_str(modular_division(4, 8, 5)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
