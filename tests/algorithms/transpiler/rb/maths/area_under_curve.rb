# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def abs_float(x)
    if x < 0.0
      return -x
    else
      return x
    end
  end
  def trapezoidal_area(f, x_start, x_end, steps)
    step = (x_end - x_start) / ((steps).to_f)
    x1 = x_start
    fx1 = f.call(x_start)
    area = 0.0
    i = 0
    while i < steps
      x2 = _add(x1, step)
      fx2 = f.call(x2)
      area = _add(area, abs_float(_add(fx2, fx1)) * step / 2.0)
      x1 = x2
      fx1 = fx2
      i = _add(i, 1)
    end
    return area
  end
  def f(x)
    return _add(x * x * x, x * x)
  end
  puts("f(x) = x^3 + x^2")
  puts("The area between the curve, x = -5, x = 5 and the x axis is:")
  $i = 10
  while $i <= 100000
    result = trapezoidal_area(method(:f), -5.0, 5.0, $i)
    puts(_add(_add(_add("with ", _str($i)), " steps: "), _str(result)))
    $i = $i * 10
  end
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
