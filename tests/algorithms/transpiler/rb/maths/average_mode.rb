# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def contains_int(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def contains_string(xs, x)
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        return true
      end
      i = _add(i, 1).clone
    end
    return false
  end
  def count_int(xs, x)
    cnt = 0.clone
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        cnt = _add(cnt, 1).clone
      end
      i = _add(i, 1).clone
    end
    return cnt
  end
  def count_string(xs, x)
    cnt = 0.clone
    i = 0.clone
    while i < xs.length
      if xs[i] == x
        cnt = _add(cnt, 1).clone
      end
      i = _add(i, 1).clone
    end
    return cnt
  end
  def sort_int(xs)
    arr = xs.clone
    i = 0.clone
    while i < arr.length
      j = _add(i, 1).clone
      while j < arr.length
        if arr[j] < arr[i]
          tmp = arr[i]
          arr[i] = arr[j]
          arr[j] = tmp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def sort_string(xs)
    arr = xs.clone
    i = 0.clone
    while i < arr.length
      j = _add(i, 1).clone
      while j < arr.length
        if arr[j] < arr[i]
          tmp = arr[i]
          arr[i] = arr[j]
          arr[j] = tmp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def mode_int(lst)
    if lst.length == 0
      return []
    end
    counts = [].clone
    i = 0.clone
    while i < lst.length
      counts = (counts << (count_int(lst, lst[i]))).clone
      i = _add(i, 1).clone
    end
    max_count = 0.clone
    i = 0.clone
    while i < counts.length
      if counts[i] > max_count
        max_count = counts[i].clone
      end
      i = _add(i, 1).clone
    end
    modes = [].clone
    i = 0.clone
    while i < lst.length
      if counts[i] == max_count
        v = lst[i]
        if !contains_int(modes, v)
          modes = (modes << (v)).clone
        end
      end
      i = _add(i, 1).clone
    end
    return sort_int(modes)
  end
  def mode_string(lst)
    if lst.length == 0
      return []
    end
    counts = [].clone
    i = 0.clone
    while i < lst.length
      counts = (counts << (count_string(lst, lst[i]))).clone
      i = _add(i, 1).clone
    end
    max_count = 0.clone
    i = 0.clone
    while i < counts.length
      if counts[i] > max_count
        max_count = counts[i].clone
      end
      i = _add(i, 1).clone
    end
    modes = [].clone
    i = 0.clone
    while i < lst.length
      if counts[i] == max_count
        v = lst[i]
        if !contains_string(modes, v)
          modes = (modes << (v)).clone
        end
      end
      i = _add(i, 1).clone
    end
    return sort_string(modes)
  end
  puts(((x = mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_string(["x", "y", "y", "z"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_string(["x", "x", "y", "y", "z"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
