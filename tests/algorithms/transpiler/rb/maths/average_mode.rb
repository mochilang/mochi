# Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def contains_int(xs, x)
    i = 0
    while i < _len(xs)
      if _eq((__tmp1 = xs; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def contains_string(xs, x)
    i = 0
    while i < _len(xs)
      if _eq((__tmp2 = xs; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)), x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def count_int(xs, x)
    cnt = 0
    i = 0
    while i < _len(xs)
      if _eq((__tmp3 = xs; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)), x)
        cnt = _add(cnt, 1)
      end
      i = _add(i, 1)
    end
    return cnt
  end
  def count_string(xs, x)
    cnt = 0
    i = 0
    while i < _len(xs)
      if _eq((__tmp4 = xs; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)), x)
        cnt = _add(cnt, 1)
      end
      i = _add(i, 1)
    end
    return cnt
  end
  def sort_int(xs)
    arr = xs
    i = 0
    while i < _len(arr)
      j = _add(i, 1)
      while j < _len(arr)
        if (__tmp5 = arr; __tmp5.is_a?(Hash) ? __tmp5[j] : _idx(__tmp5, j)) < (__tmp6 = arr; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))
          tmp = (__tmp7 = arr; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i))
          arr[i] = (__tmp8 = arr; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j))
          arr[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def sort_string(xs)
    arr = xs
    i = 0
    while i < _len(arr)
      j = _add(i, 1)
      while j < _len(arr)
        if (__tmp9 = arr; __tmp9.is_a?(Hash) ? __tmp9[j] : _idx(__tmp9, j)) < (__tmp10 = arr; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i))
          tmp = (__tmp11 = arr; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
          arr[i] = (__tmp12 = arr; __tmp12.is_a?(Hash) ? __tmp12[j] : _idx(__tmp12, j))
          arr[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def mode_int(lst)
    if _eq(_len(lst), 0)
      return []
    end
    counts = []
    i = 0
    while i < _len(lst)
      counts = _append(counts, count_int(lst, (__tmp13 = lst; __tmp13.is_a?(Hash) ? __tmp13[i] : _idx(__tmp13, i))))
      i = _add(i, 1)
    end
    max_count = 0
    i = 0
    while i < _len(counts)
      if (__tmp14 = counts; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)) > max_count
        max_count = (__tmp15 = counts; __tmp15.is_a?(Hash) ? __tmp15[i] : _idx(__tmp15, i))
      end
      i = _add(i, 1)
    end
    modes = []
    i = 0
    while i < _len(lst)
      if _eq((__tmp16 = counts; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)), max_count)
        v = (__tmp17 = lst; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))
        if !contains_int(modes, v)
          modes = _append(modes, v)
        end
      end
      i = _add(i, 1)
    end
    return sort_int(modes)
  end
  def mode_string(lst)
    if _eq(_len(lst), 0)
      return []
    end
    counts = []
    i = 0
    while i < _len(lst)
      counts = _append(counts, count_string(lst, (__tmp18 = lst; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i))))
      i = _add(i, 1)
    end
    max_count = 0
    i = 0
    while i < _len(counts)
      if (__tmp19 = counts; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)) > max_count
        max_count = (__tmp20 = counts; __tmp20.is_a?(Hash) ? __tmp20[i] : _idx(__tmp20, i))
      end
      i = _add(i, 1)
    end
    modes = []
    i = 0
    while i < _len(lst)
      if _eq((__tmp21 = counts; __tmp21.is_a?(Hash) ? __tmp21[i] : _idx(__tmp21, i)), max_count)
        v = (__tmp22 = lst; __tmp22.is_a?(Hash) ? __tmp22[i] : _idx(__tmp22, i))
        if !contains_string(modes, v)
          modes = _append(modes, v)
        end
      end
      i = _add(i, 1)
    end
    return sort_string(modes)
  end
  puts(((x = mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_string(["x", "y", "y", "z"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_string(["x", "x", "y", "y", "z"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
