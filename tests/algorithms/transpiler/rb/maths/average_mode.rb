# Generated by Mochi transpiler v0.10.63 on 2025-08-11 18:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = _now()
  def contains_int(xs, x)
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def contains_string(xs, x)
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        return true
      end
      i = _add(i, 1)
    end
    return false
  end
  def count_int(xs, x)
    cnt = 0
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        cnt = _add(cnt, 1)
      end
      i = _add(i, 1)
    end
    return cnt
  end
  def count_string(xs, x)
    cnt = 0
    i = 0
    while i < xs.length
      if _eq(xs[i], x)
        cnt = _add(cnt, 1)
      end
      i = _add(i, 1)
    end
    return cnt
  end
  def sort_int(xs)
    arr = xs
    i = 0
    while i < arr.length
      j = _add(i, 1)
      while j < arr.length
        if arr[j] < arr[i]
          tmp = arr[i]
          arr[i] = arr[j]
          arr[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def sort_string(xs)
    arr = xs
    i = 0
    while i < arr.length
      j = _add(i, 1)
      while j < arr.length
        if arr[j] < arr[i]
          tmp = arr[i]
          arr[i] = arr[j]
          arr[j] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def mode_int(lst)
    if _eq(lst.length, 0)
      return []
    end
    counts = []
    i = 0
    while i < lst.length
      counts = (counts + [count_int(lst, lst[i])])
      i = _add(i, 1)
    end
    max_count = 0
    i = 0
    while i < counts.length
      if counts[i] > max_count
        max_count = counts[i]
      end
      i = _add(i, 1)
    end
    modes = []
    i = 0
    while i < lst.length
      if _eq(counts[i], max_count)
        v = lst[i]
        if !contains_int(modes, v)
          modes = (modes + [v])
        end
      end
      i = _add(i, 1)
    end
    return sort_int(modes)
  end
  def mode_string(lst)
    if _eq(lst.length, 0)
      return []
    end
    counts = []
    i = 0
    while i < lst.length
      counts = (counts + [count_string(lst, lst[i])])
      i = _add(i, 1)
    end
    max_count = 0
    i = 0
    while i < counts.length
      if counts[i] > max_count
        max_count = counts[i]
      end
      i = _add(i, 1)
    end
    modes = []
    i = 0
    while i < lst.length
      if _eq(counts[i], max_count)
        v = lst[i]
        if !contains_string(modes, v)
          modes = (modes + [v])
        end
      end
      i = _add(i, 1)
    end
    return sort_string(modes)
  end
  puts(((x = mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_string(["x", "y", "y", "z"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = mode_string(["x", "x", "y", "y", "z"])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
