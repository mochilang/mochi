# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrt_approx(x)
    if x <= 0.0
      return 0.0
    end
    guess = x.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def sign(x)
    if x >= 0.0
      return 1.0
    else
      return -1.0
    end
  end
  def vector_norm(v)
    sum = 0.0.clone
    i = 0.clone
    while i < v.length
      sum = _add(sum, v[i] * v[i]).clone
      i = _add(i, 1).clone
    end
    n = sqrt_approx(sum)
    return n
  end
  def identity_matrix(n)
    mat = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1.0)).clone
        else
          row = (row << (0.0)).clone
        end
        j = _add(j, 1).clone
      end
      mat = (mat << (row)).clone
      i = _add(i, 1).clone
    end
    return mat
  end
  def copy_matrix(a)
    mat = [].clone
    i = 0.clone
    while i < a.length
      row = [].clone
      j = 0.clone
      while j < a[i].length
        row = (row << (a[i][j])).clone
        j = _add(j, 1).clone
      end
      mat = (mat << (row)).clone
      i = _add(i, 1).clone
    end
    return mat
  end
  def matmul(a, b)
    m = a.length
    n = a[0].length
    p = b[0].length
    res = [].clone
    i = 0.clone
    while i < m
      row = [].clone
      j = 0.clone
      while j < p
        sum = 0.0.clone
        k = 0.clone
        while k < n
          sum = _add(sum, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (sum)).clone
        j = _add(j, 1).clone
      end
      res = (res << (row)).clone
      i = _add(i, 1).clone
    end
    return res
  end
  def qr_decomposition(a)
    m = a.length
    n = a[0].length
    t = (m < n ? m : n)
    q = identity_matrix(m).clone
    r = copy_matrix(a).clone
    k = 0.clone
    while k < t - 1
      x = [].clone
      i = k.clone
      while i < m
        x = (x << (r[i][k])).clone
        i = _add(i, 1).clone
      end
      e1 = [].clone
      i = 0.clone
      while i < x.length
        if i == 0
          e1 = (e1 << (1.0)).clone
        else
          e1 = (e1 << (0.0)).clone
        end
        i = _add(i, 1).clone
      end
      alpha = vector_norm(x)
      s = sign(x[0]) * alpha
      v = [].clone
      i = 0.clone
      while i < x.length
        v = (v << (_add(x[i], s * e1[i]))).clone
        i = _add(i, 1).clone
      end
      vnorm = vector_norm(v)
      i = 0.clone
      while i < v.length
        v[i] = v[i] / vnorm
        i = _add(i, 1).clone
      end
      size = v.length
      qk_small = [].clone
      i = 0.clone
      while i < size
        row = [].clone
        j = 0.clone
        while j < size
          delta = (i == j ? 1.0 : 0.0)
          row = (row << (delta - 2.0 * v[i] * v[j])).clone
          j = _add(j, 1).clone
        end
        qk_small = (qk_small << (row)).clone
        i = _add(i, 1).clone
      end
      qk = identity_matrix(m).clone
      i = 0.clone
      while i < size
        j = 0.clone
        while j < size
          qk[_add(k, i)][_add(k, j)] = qk_small[i][j]
          j = _add(j, 1).clone
        end
        i = _add(i, 1).clone
      end
      q = matmul(q, qk).clone
      r = matmul(qk, r).clone
      k = _add(k, 1).clone
    end
    return QR.new(q: q, r: r)
  end
  def print_matrix(mat)
    i = 0.clone
    while i < mat.length
      line = "".clone
      j = 0.clone
      while j < mat[i].length
        line = _add(line, _str(mat[i][j])).clone
        if _add(j, 1) < mat[i].length
          line = _add(line, " ").clone
        end
        j = _add(j, 1).clone
      end
      puts(line)
      i = _add(i, 1).clone
    end
  end
  QR = Struct.new(:q, :r, keyword_init: true)
  $A = [[12.0, -51.0, 4.0], [6.0, 167.0, -68.0], [-4.0, 24.0, -41.0]]
  $result = qr_decomposition($A)
  print_matrix($result.q)
  print_matrix($result.r)
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
