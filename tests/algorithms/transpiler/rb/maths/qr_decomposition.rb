# Generated by Mochi transpiler v0.10.66 on 2025-08-14 21:50 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  a ** b
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def sqrt_approx(x)
    if x <= 0.0
      return 0.0
    end
    guess = x
    i = 0
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0
      i = _add(i, 1)
    end
    return guess
  end
  def sign(x)
    if x >= 0.0
      return 1.0
    else
      return -1.0
    end
  end
  def vector_norm(v)
    sum = 0.0
    i = 0
    while i < _len(v)
      sum = _add(sum, (__tmp1 = v; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * (__tmp2 = v; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    n = sqrt_approx(sum)
    return n
  end
  def identity_matrix(n)
    mat = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = _append(row, 1.0)
        else
          row = _append(row, 0.0)
        end
        j = _add(j, 1)
      end
      mat = _append(mat, row)
      i = _add(i, 1)
    end
    return mat
  end
  def copy_matrix(a)
    mat = []
    i = 0
    while i < _len(a)
      row = []
      j = 0
      while j < _len((__tmp3 = a; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)))
        row = _append(row, (__tmp4 = (__tmp5 = a; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)); __tmp4.is_a?(Hash) ? __tmp4[j] : _idx(__tmp4, j)))
        j = _add(j, 1)
      end
      mat = _append(mat, row)
      i = _add(i, 1)
    end
    return mat
  end
  def matmul(a, b)
    m = _len(a)
    n = _len((__tmp6 = a; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)))
    p = _len((__tmp7 = b; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)))
    res = []
    i = 0
    while i < m
      row = []
      j = 0
      while j < p
        sum = 0.0
        k = 0
        while k < n
          sum = _add(sum, (__tmp8 = (__tmp9 = a; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)); __tmp8.is_a?(Hash) ? __tmp8[k] : _idx(__tmp8, k)) * (__tmp10 = (__tmp11 = b; __tmp11.is_a?(Hash) ? __tmp11[k] : _idx(__tmp11, k)); __tmp10.is_a?(Hash) ? __tmp10[j] : _idx(__tmp10, j)))
          k = _add(k, 1)
        end
        row = _append(row, sum)
        j = _add(j, 1)
      end
      res = _append(res, row)
      i = _add(i, 1)
    end
    return res
  end
  def qr_decomposition(a)
    m = _len(a)
    n = _len((__tmp12 = a; __tmp12.is_a?(Hash) ? __tmp12[0] : _idx(__tmp12, 0)))
    t = (m < n ? m : n)
    q = identity_matrix(m)
    r = copy_matrix(a)
    k = 0
    while k < t - 1
      x = []
      i = k
      while i < m
        x = _append(x, (__tmp13 = (__tmp14 = r; __tmp14.is_a?(Hash) ? __tmp14[i] : _idx(__tmp14, i)); __tmp13.is_a?(Hash) ? __tmp13[k] : _idx(__tmp13, k)))
        i = _add(i, 1)
      end
      e1 = []
      i = 0
      while i < _len(x)
        if _eq(i, 0)
          e1 = _append(e1, 1.0)
        else
          e1 = _append(e1, 0.0)
        end
        i = _add(i, 1)
      end
      alpha = vector_norm(x)
      s = sign((__tmp15 = x; __tmp15.is_a?(Hash) ? __tmp15[0] : _idx(__tmp15, 0))) * alpha
      v = []
      i = 0
      while i < _len(x)
        v = _append(v, _add((__tmp16 = x; __tmp16.is_a?(Hash) ? __tmp16[i] : _idx(__tmp16, i)), s * (__tmp17 = e1; __tmp17.is_a?(Hash) ? __tmp17[i] : _idx(__tmp17, i))))
        i = _add(i, 1)
      end
      vnorm = vector_norm(v)
      i = 0
      while i < _len(v)
        v[i] = (__tmp18 = v; __tmp18.is_a?(Hash) ? __tmp18[i] : _idx(__tmp18, i)) / vnorm
        i = _add(i, 1)
      end
      size = _len(v)
      qk_small = []
      i = 0
      while i < size
        row = []
        j = 0
        while j < size
          delta = (_eq(i, j) ? 1.0 : 0.0)
          row = _append(row, delta - 2.0 * (__tmp19 = v; __tmp19.is_a?(Hash) ? __tmp19[i] : _idx(__tmp19, i)) * (__tmp20 = v; __tmp20.is_a?(Hash) ? __tmp20[j] : _idx(__tmp20, j)))
          j = _add(j, 1)
        end
        qk_small = _append(qk_small, row)
        i = _add(i, 1)
      end
      qk = identity_matrix(m)
      i = 0
      while i < size
        j = 0
        while j < size
          (__tmp21 = qk; __tmp21.is_a?(Hash) ? __tmp21[_add(k, i)] : _idx(__tmp21, _add(k, i)))[_add(k, j)] = (__tmp22 = (__tmp23 = qk_small; __tmp23.is_a?(Hash) ? __tmp23[i] : _idx(__tmp23, i)); __tmp22.is_a?(Hash) ? __tmp22[j] : _idx(__tmp22, j))
          j = _add(j, 1)
        end
        i = _add(i, 1)
      end
      q = matmul(q, qk)
      r = matmul(qk, r)
      k = _add(k, 1)
    end
    return QR.new(q: q, r: r)
  end
  def print_matrix(mat)
    i = 0
    while i < _len(mat)
      line = ""
      j = 0
      while j < _len((__tmp24 = mat; __tmp24.is_a?(Hash) ? __tmp24[i] : _idx(__tmp24, i)))
        line = _add(line, _str((__tmp25 = (__tmp26 = mat; __tmp26.is_a?(Hash) ? __tmp26[i] : _idx(__tmp26, i)); __tmp25.is_a?(Hash) ? __tmp25[j] : _idx(__tmp25, j))))
        if _add(j, 1) < _len((__tmp27 = mat; __tmp27.is_a?(Hash) ? __tmp27[i] : _idx(__tmp27, i)))
          line = _add(line, " ")
        end
        j = _add(j, 1)
      end
      puts(line)
      i = _add(i, 1)
    end
  end
  Object.send(:remove_const, :QR) if Object.const_defined?(:QR)
  QR = Struct.new(:q, :r, keyword_init: true)
  $A = [[12.0, -51.0, 4.0], [6.0, 167.0, -68.0], [-4.0, 24.0, -41.0]]
  $result = qr_decomposition($A)
  print_matrix($result.q)
  print_matrix($result.r)
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
