# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def sqrtApprox(x)
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def abs_val(num)
    if num < 0.0
      return -num
    end
    return num
  end
  def approx_equal(a, b, eps)
    return abs_val(a - b) < eps
  end
  def dodecahedron_surface_area(edge)
    if edge <= 0
      panic("Length must be a positive.")
    end
    term = sqrtApprox(_add(25.0, 10.0 * sqrtApprox(5.0)))
    e = (edge).to_f
    return 3.0 * term * e * e
  end
  def dodecahedron_volume(edge)
    if edge <= 0
      panic("Length must be a positive.")
    end
    term = (_add(15.0, 7.0 * sqrtApprox(5.0))) / 4.0
    e = (edge).to_f
    return term * e * e * e
  end
  def test_dodecahedron()
    if !approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001)
      panic("surface area 5 failed")
    end
    if !approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001)
      panic("surface area 10 failed")
    end
    if !approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001)
      panic("volume 5 failed")
    end
    if !approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001)
      panic("volume 10 failed")
    end
  end
  def main()
    test_dodecahedron()
    puts(dodecahedron_surface_area(5))
    puts(dodecahedron_volume(5))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
