# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def abs_float(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def average_absolute_deviation(nums)
    if nums.length == 0
      panic("List is empty")
    end
    sum = 0.clone
        __tmp1 = nums
    if __tmp1.respond_to?(:keys) && !__tmp1.is_a?(String)
      __tmp1 = __tmp1.keys
    end
    __tmp1.each do |x|
      sum = _add(sum, x).clone
    end
    n = (nums.length).to_f
    mean = ((sum).to_f) / n
    dev_sum = 0.0.clone
        __tmp2 = nums
    if __tmp2.respond_to?(:keys) && !__tmp2.is_a?(String)
      __tmp2 = __tmp2.keys
    end
    __tmp2.each do |x|
      dev_sum = _add(dev_sum, abs_float(((x).to_f) - mean)).clone
    end
    return dev_sum / n
  end
  puts(_str(average_absolute_deviation([0])))
  puts(_str(average_absolute_deviation([4, 1, 3, 2])))
  puts(_str(average_absolute_deviation([2, 70, 6, 50, 20, 8, 4, 0])))
  puts(_str(average_absolute_deviation([-20, 0, 30, 15])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
