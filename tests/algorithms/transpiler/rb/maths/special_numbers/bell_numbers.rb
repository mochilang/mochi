# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def binomial_coefficient(total_elements, elements_to_choose)
    if elements_to_choose == 0 || elements_to_choose == total_elements
      return 1
    end
    k = elements_to_choose.clone
    if k > total_elements - k
      k = total_elements - k.clone
    end
    coefficient = 1.clone
    i = 0.clone
    while i < k
      coefficient = coefficient * (total_elements - i).clone
      coefficient = coefficient / (_add(i, 1)).clone
      i = _add(i, 1).clone
    end
    return coefficient
  end
  def bell_numbers(max_set_length)
    if max_set_length < 0
      panic("max_set_length must be non-negative")
    end
    bell = [].clone
    i = 0.clone
    while i <= max_set_length
      bell = (bell << (0)).clone
      i = _add(i, 1).clone
    end
    bell[0] = 1
    i = 1.clone
    while i <= max_set_length
      j = 0.clone
      while j < i
        bell[i] = _add(bell[i], binomial_coefficient(i - 1, j) * bell[j])
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return bell
  end
  def main()
    puts(((x = bell_numbers(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
