# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def hamming(n)
    if n < 1
      panic("n_element should be a positive number")
    end
    hamming_list = [1]
    i = 0
    j = 0
    k = 0
    index = 1
    while index < n
      while (__tmp1 = hamming_list; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)) * 2 <= (__tmp2 = hamming_list; __tmp2.is_a?(Hash) ? __tmp2[_len(hamming_list) - 1] : _idx(__tmp2, _len(hamming_list) - 1))
        i = _add(i, 1)
      end
      while (__tmp3 = hamming_list; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)) * 3 <= (__tmp4 = hamming_list; __tmp4.is_a?(Hash) ? __tmp4[_len(hamming_list) - 1] : _idx(__tmp4, _len(hamming_list) - 1))
        j = _add(j, 1)
      end
      while (__tmp5 = hamming_list; __tmp5.is_a?(Hash) ? __tmp5[k] : _idx(__tmp5, k)) * 5 <= (__tmp6 = hamming_list; __tmp6.is_a?(Hash) ? __tmp6[_len(hamming_list) - 1] : _idx(__tmp6, _len(hamming_list) - 1))
        k = _add(k, 1)
      end
      m1 = (__tmp7 = hamming_list; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)) * 2
      m2 = (__tmp8 = hamming_list; __tmp8.is_a?(Hash) ? __tmp8[j] : _idx(__tmp8, j)) * 3
      m3 = (__tmp9 = hamming_list; __tmp9.is_a?(Hash) ? __tmp9[k] : _idx(__tmp9, k)) * 5
      next_ = m1
      if m2 < next_
        next_ = m2
      end
      if m3 < next_
        next_ = m3
      end
      hamming_list = _append(hamming_list, next_)
      index = _add(index, 1)
    end
    return hamming_list
  end
  puts(((x = hamming(5)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = hamming(10)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
  puts(((x = hamming(15)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
