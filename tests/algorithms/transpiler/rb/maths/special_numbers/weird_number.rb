# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def bubble_sort(xs)
    arr = xs
    n = _len(arr)
    i = 0
    while i < n
      j = 0
      while j < n - i - 1
        if (__tmp1 = arr; __tmp1.is_a?(Hash) ? __tmp1[j] : _idx(__tmp1, j)) > (__tmp2 = arr; __tmp2.is_a?(Hash) ? __tmp2[_add(j, 1)] : _idx(__tmp2, _add(j, 1)))
          tmp = (__tmp3 = arr; __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j))
          arr[j] = (__tmp4 = arr; __tmp4.is_a?(Hash) ? __tmp4[_add(j, 1)] : _idx(__tmp4, _add(j, 1)))
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1)
      end
      i = _add(i, 1)
    end
    return arr
  end
  def factors(num)
    values = [1]
    i = 2
    while i * i <= num
      if _eq(num % i, 0)
        values = _append(values, i)
        d = num / i
        if !_eq(d, i)
          values = _append(values, d)
        end
      end
      i = _add(i, 1)
    end
    return bubble_sort(values)
  end
  def sum_list(xs)
    total = 0
    i = 0
    while i < _len(xs)
      total = _add(total, (__tmp5 = xs; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      i = _add(i, 1)
    end
    return total
  end
  def abundant(n)
    return sum_list(factors(n)) > n
  end
  def semi_perfect(number)
    if number <= 0
      return true
    end
    values = factors(number)
    possible = []
    j = 0
    while j <= number
      possible = _append(possible, _eq(j, 0))
      j = _add(j, 1)
    end
    idx = 0
    while idx < _len(values)
      v = (__tmp6 = values; __tmp6.is_a?(Hash) ? __tmp6[idx] : _idx(__tmp6, idx))
      s = number
      while s >= v
        if (__tmp7 = possible; __tmp7.is_a?(Hash) ? __tmp7[s - v] : _idx(__tmp7, s - v))
          possible[s] = true
        end
        s = s - 1
      end
      idx = _add(idx, 1)
    end
    return (__tmp8 = possible; __tmp8.is_a?(Hash) ? __tmp8[number] : _idx(__tmp8, number))
  end
  def weird(number)
    return abundant(number) && _eq(semi_perfect(number), false)
  end
  def run_tests()
    if !_eq(factors(12), [1, 2, 3, 4, 6])
      panic("factors 12 failed")
    end
    if !_eq(factors(1), [1])
      panic("factors 1 failed")
    end
    if !_eq(factors(100), [1, 2, 4, 5, 10, 20, 25, 50])
      panic("factors 100 failed")
    end
    if !_eq(abundant(0), true)
      panic("abundant 0 failed")
    end
    if !_eq(abundant(1), false)
      panic("abundant 1 failed")
    end
    if !_eq(abundant(12), true)
      panic("abundant 12 failed")
    end
    if !_eq(abundant(13), false)
      panic("abundant 13 failed")
    end
    if !_eq(abundant(20), true)
      panic("abundant 20 failed")
    end
    if !_eq(semi_perfect(0), true)
      panic("semi_perfect 0 failed")
    end
    if !_eq(semi_perfect(1), true)
      panic("semi_perfect 1 failed")
    end
    if !_eq(semi_perfect(12), true)
      panic("semi_perfect 12 failed")
    end
    if !_eq(semi_perfect(13), false)
      panic("semi_perfect 13 failed")
    end
    if !_eq(weird(0), false)
      panic("weird 0 failed")
    end
    if !_eq(weird(70), true)
      panic("weird 70 failed")
    end
    if !_eq(weird(77), false)
      panic("weird 77 failed")
    end
  end
  def main()
    run_tests()
    nums = [69, 70, 71]
    i = 0
    while i < _len(nums)
      n = (__tmp9 = nums; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i))
      if weird(n)
        puts(_add(_str(n), " is weird."))
      else
        puts(_add(_str(n), " is not weird."))
      end
      i = _add(i, 1)
    end
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
