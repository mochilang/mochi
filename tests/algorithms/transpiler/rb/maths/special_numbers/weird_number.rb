# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def bubble_sort(xs)
    arr = xs.clone
    n = arr.length.clone
    i = 0.clone
    while i < n
      j = 0.clone
      while j < n - i - 1
        if arr[j] > arr[_add(j, 1)]
          tmp = arr[j]
          arr[j] = arr[_add(j, 1)]
          arr[_add(j, 1)] = tmp
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def factors(num)
    values = [1].clone
    i = 2.clone
    while i * i <= num
      if num % i == 0
        values = (values << (i)).clone
        d = num / i
        if d != i
          values = (values << (d)).clone
        end
      end
      i = _add(i, 1).clone
    end
    return bubble_sort(values)
  end
  def sum_list(xs)
    total = 0.clone
    i = 0.clone
    while i < xs.length
      total = _add(total, xs[i]).clone
      i = _add(i, 1).clone
    end
    return total
  end
  def abundant(n)
    return sum_list(factors(n)) > n
  end
  def semi_perfect(number)
    if number <= 0
      return true
    end
    values = factors(number)
    possible = [].clone
    j = 0.clone
    while j <= number
      possible = (possible << (j == 0)).clone
      j = _add(j, 1).clone
    end
    idx = 0.clone
    while idx < values.length
      v = values[idx]
      s = number.clone
      while s >= v
        if possible[s - v]
          possible[s] = true
        end
        s = s - 1.clone
      end
      idx = _add(idx, 1).clone
    end
    return possible[number]
  end
  def weird(number)
    return abundant(number) && semi_perfect(number) == false
  end
  def run_tests()
    if factors(12) != [1, 2, 3, 4, 6]
      panic("factors 12 failed")
    end
    if factors(1) != [1]
      panic("factors 1 failed")
    end
    if factors(100) != [1, 2, 4, 5, 10, 20, 25, 50]
      panic("factors 100 failed")
    end
    if abundant(0) != true
      panic("abundant 0 failed")
    end
    if abundant(1) != false
      panic("abundant 1 failed")
    end
    if abundant(12) != true
      panic("abundant 12 failed")
    end
    if abundant(13) != false
      panic("abundant 13 failed")
    end
    if abundant(20) != true
      panic("abundant 20 failed")
    end
    if semi_perfect(0) != true
      panic("semi_perfect 0 failed")
    end
    if semi_perfect(1) != true
      panic("semi_perfect 1 failed")
    end
    if semi_perfect(12) != true
      panic("semi_perfect 12 failed")
    end
    if semi_perfect(13) != false
      panic("semi_perfect 13 failed")
    end
    if weird(0) != false
      panic("weird 0 failed")
    end
    if weird(70) != true
      panic("weird 70 failed")
    end
    if weird(77) != false
      panic("weird 77 failed")
    end
  end
  def main()
    run_tests()
    nums = [69, 70, 71]
    i = 0.clone
    while i < nums.length
      n = nums[i]
      if weird(n)
        puts(_add(_str(n), " is weird."))
      else
        puts(_add(_str(n), " is not weird."))
      end
      i = _add(i, 1).clone
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
