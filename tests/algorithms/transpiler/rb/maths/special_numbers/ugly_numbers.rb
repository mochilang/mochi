# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def ugly_numbers(n)
    if n <= 0
      return 1
    end
    ugly_nums = [].clone
    ugly_nums = (ugly_nums << (1)).clone
    i2 = 0.clone
    i3 = 0.clone
    i5 = 0.clone
    next_2 = 2.clone
    next_3 = 3.clone
    next_5 = 5.clone
    count = 1.clone
    while count < n
      next_num = (next_2 < next_3 ? (next_2 < next_5 ? next_2 : next_5) : (next_3 < next_5 ? next_3 : next_5))
      ugly_nums = (ugly_nums << (next_num)).clone
      if next_num == next_2
        i2 = _add(i2, 1).clone
        next_2 = ugly_nums[i2] * 2.clone
      end
      if next_num == next_3
        i3 = _add(i3, 1).clone
        next_3 = ugly_nums[i3] * 3.clone
      end
      if next_num == next_5
        i5 = _add(i5, 1).clone
        next_5 = ugly_nums[i5] * 5.clone
      end
      count = _add(count, 1).clone
    end
    return ugly_nums[ugly_nums.length - 1]
  end
  puts(_str(ugly_numbers(100)))
  puts(_str(ugly_numbers(0)))
  puts(_str(ugly_numbers(20)))
  puts(_str(ugly_numbers(-5)))
  puts(_str(ugly_numbers(200)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
