# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_sqrt(n)
    r = 0.clone
    while (_add(r, 1)) * (_add(r, 1)) <= n
      r = _add(r, 1).clone
    end
    return r
  end
  def is_pronic(n)
    if n < 0
      return false
    end
    if n % 2 != 0
      return false
    end
    root = int_sqrt(n)
    return n == root * (_add(root, 1))
  end
  def test_is_pronic()
    if is_pronic(-1)
      panic("-1 should not be pronic")
    end
    if !is_pronic(0)
      panic("0 should be pronic")
    end
    if !is_pronic(2)
      panic("2 should be pronic")
    end
    if is_pronic(5)
      panic("5 should not be pronic")
    end
    if !is_pronic(6)
      panic("6 should be pronic")
    end
    if is_pronic(8)
      panic("8 should not be pronic")
    end
    if !is_pronic(30)
      panic("30 should be pronic")
    end
    if is_pronic(32)
      panic("32 should not be pronic")
    end
    if !is_pronic(2147441940)
      panic("2147441940 should be pronic")
    end
  end
  def main()
    test_is_pronic()
    puts((is_pronic(56) ? 'true' : 'false'))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
