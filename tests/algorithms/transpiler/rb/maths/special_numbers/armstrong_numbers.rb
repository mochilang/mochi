# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pow_int(base, exp)
    result = 1.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def armstrong_number(n)
    if n < 1
      return false
    end
    digits = 0.clone
    temp = n.clone
    while temp > 0
      temp = temp / 10.clone
      digits = _add(digits, 1).clone
    end
    total = 0.clone
    temp = n.clone
    while temp > 0
      rem = temp % 10
      total = _add(total, pow_int(rem, digits)).clone
      temp = temp / 10.clone
    end
    return total == n
  end
  def pluperfect_number(n)
    if n < 1
      return false
    end
    digit_histogram = [].clone
    i = 0.clone
    while i < 10
      digit_histogram = (digit_histogram << (0)).clone
      i = _add(i, 1).clone
    end
    digit_total = 0.clone
    temp = n.clone
    while temp > 0
      rem = temp % 10
      digit_histogram[rem] = _add(digit_histogram[rem], 1)
      digit_total = _add(digit_total, 1).clone
      temp = temp / 10.clone
    end
    total = 0.clone
    i = 0.clone
    while i < 10
      if digit_histogram[i] > 0
        total = _add(total, digit_histogram[i] * pow_int(i, digit_total)).clone
      end
      i = _add(i, 1).clone
    end
    return total == n
  end
  def narcissistic_number(n)
    if n < 1
      return false
    end
    digits = 0.clone
    temp = n.clone
    while temp > 0
      temp = temp / 10.clone
      digits = _add(digits, 1).clone
    end
    temp = n.clone
    total = 0.clone
    while temp > 0
      rem = temp % 10
      total = _add(total, pow_int(rem, digits)).clone
      temp = temp / 10.clone
    end
    return total == n
  end
  puts((armstrong_number(371) ? 'true' : 'false'))
  puts((armstrong_number(200) ? 'true' : 'false'))
  puts((pluperfect_number(371) ? 'true' : 'false'))
  puts((pluperfect_number(200) ? 'true' : 'false'))
  puts((narcissistic_number(371) ? 'true' : 'false'))
  puts((narcissistic_number(200) ? 'true' : 'false'))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
