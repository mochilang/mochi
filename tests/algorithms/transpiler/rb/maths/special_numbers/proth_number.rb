# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def pow2(exp)
    result = 1.clone
    i = 0.clone
    while i < exp
      result = result * 2.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def proth(number)
    if number < 1
      panic("Input value must be > 0")
    end
    if number == 1
      return 3
    end
    if number == 2
      return 5
    end
    temp = ((number / 3)).to_i
    pow = 1.clone
    block_index = 1.clone
    while pow <= temp
      pow = pow * 2.clone
      block_index = _add(block_index, 1).clone
    end
    proth_list = [3, 5].clone
    proth_index = 2.clone
    increment = 3.clone
    block = 1.clone
    while block < block_index
      i = 0.clone
      while i < increment
        next_val = _add(pow2(_add(block, 1)), proth_list[proth_index - 1])
        proth_list = (proth_list << (next_val)).clone
        proth_index = _add(proth_index, 1).clone
        i = _add(i, 1).clone
      end
      increment = increment * 2.clone
      block = _add(block, 1).clone
    end
    return proth_list[number - 1]
  end
  def main()
    n = 1.clone
    while n <= 10
      value = proth(n)
      puts(_add(_add(_add("The ", _str(n)), "th Proth number: "), _str(value)))
      n = _add(n, 1).clone
    end
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
