# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def panic(msg)
  end
  def char_to_value(c)
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    i = 0.clone
    while i < digits.length
      if digits[i] == c
        return i
      end
      i = _add(i, 1).clone
    end
    panic("invalid digit")
  end
  def int_to_base(number, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    if number < 0
      panic("number must be a positive integer")
    end
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    n = number.clone
    result = "".clone
    while n > 0
      remainder = n % base
      result = _add(digits[remainder], result).clone
      n = n / base.clone
    end
    if result == ""
      result = "0".clone
    end
    return result
  end
  def base_to_int(num_str, base)
    value = 0.clone
    i = 0.clone
    while i < num_str.length
      c = num_str[i]
      value = _add(value * base, char_to_value(c)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def sum_of_digits(num, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    num_str = int_to_base(num, base)
    total = 0.clone
    i = 0.clone
    while i < num_str.length
      c = num_str[i]
      total = _add(total, char_to_value(c)).clone
      i = _add(i, 1).clone
    end
    return int_to_base(total, base)
  end
  def harshad_numbers_in_base(limit, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    if limit < 0
      return []
    end
    numbers = [].clone
    i = 1.clone
    while i < limit
      s = sum_of_digits(i, base)
      divisor = base_to_int(s, base)
      if i % divisor == 0
        numbers = (numbers << (int_to_base(i, base))).clone
      end
      i = _add(i, 1).clone
    end
    return numbers
  end
  def is_harshad_number_in_base(num, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    if num < 0
      return false
    end
    n = int_to_base(num, base)
    d = sum_of_digits(num, base)
    n_val = base_to_int(n, base)
    d_val = base_to_int(d, base)
    return n_val % d_val == 0
  end
  def main()
    puts(int_to_base(0, 21))
    puts(int_to_base(23, 2))
    puts(int_to_base(58, 5))
    puts(int_to_base(167, 16))
    puts(sum_of_digits(103, 12))
    puts(sum_of_digits(1275, 4))
    puts(sum_of_digits(6645, 2))
    puts(((x = harshad_numbers_in_base(15, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = harshad_numbers_in_base(12, 34)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = harshad_numbers_in_base(12, 4)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts((is_harshad_number_in_base(18, 10) ? 'true' : 'false'))
    puts((is_harshad_number_in_base(21, 10) ? 'true' : 'false'))
    puts((is_harshad_number_in_base(-21, 5) ? 'true' : 'false'))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
