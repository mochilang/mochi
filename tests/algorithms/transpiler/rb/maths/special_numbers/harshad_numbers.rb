# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def panic(msg)
  end
  def char_to_value(c)
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    i = 0
    while i < _len(digits)
      if _eq((__tmp1 = digits; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i)), c)
        return i
      end
      i = _add(i, 1)
    end
    panic("invalid digit")
  end
  def int_to_base(number, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    if number < 0
      panic("number must be a positive integer")
    end
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    n = number
    result = ""
    while n > 0
      remainder = n % base
      result = _add((__tmp2 = digits; __tmp2.is_a?(Hash) ? __tmp2[remainder] : _idx(__tmp2, remainder)), result)
      n = n / base
    end
    if _eq(result, "")
      result = "0"
    end
    return result
  end
  def base_to_int(num_str, base)
    value = 0
    i = 0
    while i < _len(num_str)
      c = (__tmp3 = num_str; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i))
      value = _add(value * base, char_to_value(c))
      i = _add(i, 1)
    end
    return value
  end
  def sum_of_digits(num, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    num_str = int_to_base(num, base)
    total = 0
    i = 0
    while i < _len(num_str)
      c = (__tmp4 = num_str; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i))
      total = _add(total, char_to_value(c))
      i = _add(i, 1)
    end
    return int_to_base(total, base)
  end
  def harshad_numbers_in_base(limit, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    if limit < 0
      return []
    end
    numbers = []
    i = 1
    while i < limit
      s = sum_of_digits(i, base)
      divisor = base_to_int(s, base)
      if _eq(i % divisor, 0)
        numbers = _append(numbers, int_to_base(i, base))
      end
      i = _add(i, 1)
    end
    return numbers
  end
  def is_harshad_number_in_base(num, base)
    if base < 2 || base > 36
      panic("'base' must be between 2 and 36 inclusive")
    end
    if num < 0
      return false
    end
    n = int_to_base(num, base)
    d = sum_of_digits(num, base)
    n_val = base_to_int(n, base)
    d_val = base_to_int(d, base)
    return _eq(n_val % d_val, 0)
  end
  def main()
    puts(int_to_base(0, 21))
    puts(int_to_base(23, 2))
    puts(int_to_base(58, 5))
    puts(int_to_base(167, 16))
    puts(sum_of_digits(103, 12))
    puts(sum_of_digits(1275, 4))
    puts(sum_of_digits(6645, 2))
    puts(((x = harshad_numbers_in_base(15, 2)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = harshad_numbers_in_base(12, 34)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts(((x = harshad_numbers_in_base(12, 4)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(String) then '\'' + x + '\'' elsif x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "'#{k}': #{v.is_a?(String) ? '\'' + v + '\'' : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(', ') + "]") : x.to_s))
    puts((is_harshad_number_in_base(18, 10) ? 'true' : 'false'))
    puts((is_harshad_number_in_base(21, 10) ? 'true' : 'false'))
    puts((is_harshad_number_in_base(-21, 5) ? 'true' : 'false'))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
