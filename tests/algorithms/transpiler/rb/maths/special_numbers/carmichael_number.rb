# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def abs_int(x)
    if x < 0
      return -x
    end
    return x
  end
  def gcd(a, b)
    if a == 0
      return abs_int(b)
    end
    return gcd(b % a, a)
  end
  def power(x, y, m)
    if y == 0
      return 1 % m
    end
    temp = power(x, y / 2, m) % m.clone
    temp = (temp * temp) % m.clone
    if y % 2 == 1
      temp = (temp * x) % m.clone
    end
    return temp
  end
  def is_carmichael_number(n)
    if n <= 0
      panic("Number must be positive")
    end
    b = 2.clone
    while b < n
      if gcd(b, n) == 1
        if power(b, n - 1, n) != 1
          return false
        end
      end
      b = _add(b, 1).clone
    end
    return true
  end
  puts(_str(power(2, 15, 3)))
  puts(_str(power(5, 1, 30)))
  puts(_str(is_carmichael_number(4)))
  puts(_str(is_carmichael_number(561)))
  puts(_str(is_carmichael_number(562)))
  puts(_str(is_carmichael_number(1105)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
