# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def factorial(n)
    if n < 0
      panic("factorial() not defined for negative values")
    end
    value = 1.clone
    i = 1.clone
    while i <= n
      value = value * i.clone
      i = _add(i, 1).clone
    end
    return value
  end
  def factorial_recursive(n)
    if n < 0
      panic("factorial() not defined for negative values")
    end
    if n <= 1
      return 1
    end
    return n * factorial_recursive(n - 1)
  end
  def test_zero()
    if factorial(0) != 1
      panic("factorial(0) failed")
    end
    if factorial_recursive(0) != 1
      panic("factorial_recursive(0) failed")
    end
  end
  def test_positive_integers()
    if factorial(1) != 1
      panic("factorial(1) failed")
    end
    if factorial_recursive(1) != 1
      panic("factorial_recursive(1) failed")
    end
    if factorial(5) != 120
      panic("factorial(5) failed")
    end
    if factorial_recursive(5) != 120
      panic("factorial_recursive(5) failed")
    end
    if factorial(7) != 5040
      panic("factorial(7) failed")
    end
    if factorial_recursive(7) != 5040
      panic("factorial_recursive(7) failed")
    end
  end
  def test_large_number()
    if factorial(10) != 3628800
      panic("factorial(10) failed")
    end
    if factorial_recursive(10) != 3628800
      panic("factorial_recursive(10) failed")
    end
  end
  def run_tests()
    test_zero()
    test_positive_integers()
    test_large_number()
  end
  def main()
    run_tests()
    puts(factorial(6))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
