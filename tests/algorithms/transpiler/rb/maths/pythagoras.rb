# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def absf(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def sqrt_approx(x)
    if x <= 0.0
      return 0.0
    end
    guess = x / 2.0.clone
    i = 0.clone
    while i < 20
      guess = (_add(guess, x / guess)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return guess
  end
  def distance(a, b)
    dx = b.x - a.x
    dy = b.y - a.y
    dz = b.z - a.z
    return sqrt_approx(absf(_add(_add(dx * dx, dy * dy), dz * dz)))
  end
  def point_to_string(p)
    return _add(_add(_add(_add(_add(_add("Point(", _str(p.x)), ", "), _str(p.y)), ", "), _str(p.z)), ")")
  end
  def test_distance()
    p1 = Point.new(x: 2.0, y: -1.0, z: 7.0)
    p2 = Point.new(x: 1.0, y: -3.0, z: 5.0)
    d = distance(p1, p2)
    if absf(d - 3.0) > 0.0001
      panic("distance test failed")
    end
    puts(_add(_add(_add(_add(_add("Distance from ", point_to_string(p1)), " to "), point_to_string(p2)), " is "), _str(d)))
  end
  def main()
    test_distance()
  end
  Point = Struct.new(:x, :y, :z, keyword_init: true)
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
