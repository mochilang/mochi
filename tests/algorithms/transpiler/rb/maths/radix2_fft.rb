# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def c_add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def c_sub(a, b)
    return Complex.new(re: a.re - b.re, im: a.im - b.im)
  end
  def c_mul(a, b)
    return Complex.new(re: a.re * b.re - a.im * b.im, im: _add(a.re * b.im, a.im * b.re))
  end
  def c_mul_scalar(a, s)
    return Complex.new(re: a.re * s, im: a.im * s)
  end
  def c_div_scalar(a, s)
    return Complex.new(re: a.re / s, im: a.im / s)
  end
  def sin_taylor(x)
    term = x.clone
    sum = x.clone
    i = 1.clone
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0.clone
    sum = 1.0.clone
    i = 1.clone
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def exp_i(theta)
    return Complex.new(re: cos_taylor(theta), im: sin_taylor(theta))
  end
  def make_complex_list(n, value)
    arr = [].clone
    i = 0.clone
    while i < n
      arr = (arr << (value)).clone
      i = _add(i, 1).clone
    end
    return arr
  end
  def fft(a, invert)
    n = a.length
    if n == 1
      return [a[0]]
    end
    a0 = [].clone
    a1 = [].clone
    i = 0.clone
    while i < n / 2
      a0 = (a0 << (a[2 * i])).clone
      a1 = (a1 << (a[_add(2 * i, 1)])).clone
      i = _add(i, 1).clone
    end
    y0 = fft(a0, invert)
    y1 = fft(a1, invert)
    angle = 2.0 * $PI / ((n).to_f) * ((invert ? -1.0 : 1.0))
    w = Complex.new(re: 1.0, im: 0.0).clone
    wn = exp_i(angle)
    y = make_complex_list(n, Complex.new(re: 0.0, im: 0.0)).clone
    i = 0.clone
    while i < n / 2
      t = c_mul(w, y1[i])
      u = y0[i]
      even = c_add(u, t).clone
      odd = c_sub(u, t).clone
      if invert
        even = c_div_scalar(even, 2.0).clone
        odd = c_div_scalar(odd, 2.0).clone
      end
      y[i] = even
      y[_add(i, n / 2)] = odd
      w = c_mul(w, wn).clone
      i = _add(i, 1).clone
    end
    return y
  end
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0.clone
    i = 0.clone
    while i < n
      p = p * 10.0.clone
      i = _add(i, 1).clone
    end
    return p
  end
  def round_to(x, ndigits)
    m = pow10(ndigits)
    return (_add(x * m, 0.5)).floor() / m
  end
  def list_to_string(l)
    s = "[".clone
    i = 0.clone
    while i < l.length
      s = _add(s, _str(l[i])).clone
      if _add(i, 1) < l.length
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    s = _add(s, "]").clone
    return s
  end
  def multiply_poly(a, b)
    n = 1.clone
    while n < _add(a.length, b.length) - 1
      n = n * 2.clone
    end
    fa = make_complex_list(n, Complex.new(re: 0.0, im: 0.0)).clone
    fb = make_complex_list(n, Complex.new(re: 0.0, im: 0.0)).clone
    i = 0.clone
    while i < a.length
      fa[i] = Complex.new(re: a[i], im: 0.0)
      i = _add(i, 1).clone
    end
    i = 0.clone
    while i < b.length
      fb[i] = Complex.new(re: b[i], im: 0.0)
      i = _add(i, 1).clone
    end
    fa = fft(fa, false).clone
    fb = fft(fb, false).clone
    i = 0.clone
    while i < n
      fa[i] = c_mul(fa[i], fb[i])
      i = _add(i, 1).clone
    end
    fa = fft(fa, true).clone
    res = [].clone
    i = 0.clone
    while i < _add(a.length, b.length) - 1
      val = fa[i]
      res = (res << (round_to(val.re, 8))).clone
      i = _add(i, 1).clone
    end
    while res.length > 0 && res[res.length - 1] == 0.0
      res = res[0...res.length - 1].clone
    end
    return res
  end
  Complex = Struct.new(:re, :im, keyword_init: true)
  $PI = 3.141592653589793
  $A = [0.0, 1.0, 0.0, 2.0]
  $B = [2.0, 3.0, 4.0, 0.0]
  $product = multiply_poly($A, $B)
  puts(list_to_string($product))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
