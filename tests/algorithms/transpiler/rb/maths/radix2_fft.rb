# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def c_add(a, b)
    return Complex.new(re: _add(a.re, b.re), im: _add(a.im, b.im))
  end
  def c_sub(a, b)
    return Complex.new(re: a.re - b.re, im: a.im - b.im)
  end
  def c_mul(a, b)
    return Complex.new(re: a.re * b.re - a.im * b.im, im: _add(a.re * b.im, a.im * b.re))
  end
  def c_mul_scalar(a, s)
    return Complex.new(re: a.re * s, im: a.im * s)
  end
  def c_div_scalar(a, s)
    return Complex.new(re: a.re / s, im: a.im / s)
  end
  def sin_taylor(x)
    term = x
    sum = x
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f)
      k2 = _add(k1, 1.0)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def cos_taylor(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10
      k1 = 2.0 * ((i).to_f) - 1.0
      k2 = 2.0 * ((i).to_f)
      term = -term * x * x / (k1 * k2)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def exp_i(theta)
    return Complex.new(re: cos_taylor(theta), im: sin_taylor(theta))
  end
  def make_complex_list(n, value)
    arr = []
    i = 0
    while i < n
      arr = _append(arr, value)
      i = _add(i, 1)
    end
    return arr
  end
  def fft(a, invert)
    n = _len(a)
    if _eq(n, 1)
      return [(__tmp1 = a; __tmp1.is_a?(Hash) ? __tmp1[0] : _idx(__tmp1, 0))]
    end
    a0 = []
    a1 = []
    i = 0
    while i < n / 2
      a0 = _append(a0, (__tmp2 = a; __tmp2.is_a?(Hash) ? __tmp2[2 * i] : _idx(__tmp2, 2 * i)))
      a1 = _append(a1, (__tmp3 = a; __tmp3.is_a?(Hash) ? __tmp3[_add(2 * i, 1)] : _idx(__tmp3, _add(2 * i, 1))))
      i = _add(i, 1)
    end
    y0 = fft(a0, invert)
    y1 = fft(a1, invert)
    angle = 2.0 * $PI / ((n).to_f) * ((invert ? -1.0 : 1.0))
    w = Complex.new(re: 1.0, im: 0.0)
    wn = exp_i(angle)
    y = make_complex_list(n, Complex.new(re: 0.0, im: 0.0))
    i = 0
    while i < n / 2
      t = c_mul(w, (__tmp4 = y1; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
      u = (__tmp5 = y0; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))
      even = c_add(u, t)
      odd = c_sub(u, t)
      if invert
        even = c_div_scalar(even, 2.0)
        odd = c_div_scalar(odd, 2.0)
      end
      y[i] = even
      y[_add(i, n / 2)] = odd
      w = c_mul(w, wn)
      i = _add(i, 1)
    end
    return y
  end
  def floor(x)
    i = (x).to_i
    if ((i).to_f) > x
      i = i - 1
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0
    i = 0
    while i < n
      p = p * 10.0
      i = _add(i, 1)
    end
    return p
  end
  def round_to(x, ndigits)
    m = pow10(ndigits)
    return (_add(x * m, 0.5)).floor() / m
  end
  def list_to_string(l)
    s = "["
    i = 0
    while i < _len(l)
      s = _add(s, _str((__tmp6 = l; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i))))
      if _add(i, 1) < _len(l)
        s = _add(s, ", ")
      end
      i = _add(i, 1)
    end
    s = _add(s, "]")
    return s
  end
  def multiply_poly(a, b)
    n = 1
    while n < _add(_len(a), _len(b)) - 1
      n = n * 2
    end
    fa = make_complex_list(n, Complex.new(re: 0.0, im: 0.0))
    fb = make_complex_list(n, Complex.new(re: 0.0, im: 0.0))
    i = 0
    while i < _len(a)
      fa[i] = Complex.new(re: (__tmp7 = a; __tmp7.is_a?(Hash) ? __tmp7[i] : _idx(__tmp7, i)), im: 0.0)
      i = _add(i, 1)
    end
    i = 0
    while i < _len(b)
      fb[i] = Complex.new(re: (__tmp8 = b; __tmp8.is_a?(Hash) ? __tmp8[i] : _idx(__tmp8, i)), im: 0.0)
      i = _add(i, 1)
    end
    fa = fft(fa, false)
    fb = fft(fb, false)
    i = 0
    while i < n
      fa[i] = c_mul((__tmp9 = fa; __tmp9.is_a?(Hash) ? __tmp9[i] : _idx(__tmp9, i)), (__tmp10 = fb; __tmp10.is_a?(Hash) ? __tmp10[i] : _idx(__tmp10, i)))
      i = _add(i, 1)
    end
    fa = fft(fa, true)
    res = []
    i = 0
    while i < _add(_len(a), _len(b)) - 1
      val = (__tmp11 = fa; __tmp11.is_a?(Hash) ? __tmp11[i] : _idx(__tmp11, i))
      res = _append(res, round_to(val.re, 8))
      i = _add(i, 1)
    end
    while _len(res) > 0 && _eq((__tmp12 = res; __tmp12.is_a?(Hash) ? __tmp12[_len(res) - 1] : _idx(__tmp12, _len(res) - 1)), 0.0)
      res = res[0..._len(res) - 1]
    end
    return res
  end
  Object.send(:remove_const, :Complex) if Object.const_defined?(:Complex)
  Object.const_set(:Complex, Struct.new(:re, :im, keyword_init: true))
  $PI = 3.141592653589793
  $A = [0.0, 1.0, 0.0, 2.0]
  $B = [2.0, 3.0, 4.0, 0.0]
  $product = multiply_poly($A, $B)
  puts(list_to_string($product))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
