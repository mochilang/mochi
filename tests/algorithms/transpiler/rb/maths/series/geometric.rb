# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_geometric_series(series)
    if series.length == 0
      panic("Input list must be a non empty list")
    end
    if series.length == 1
      return true
    end
    if series[0] == 0.0
      return false
    end
    ratio = series[1] / series[0]
    i = 0.clone
    while i < series.length - 1
      if series[i] == 0.0
        return false
      end
      if series[_add(i, 1)] / series[i] != ratio
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def geometric_mean(series)
    if series.length == 0
      panic("Input list must be a non empty list")
    end
    product = 1.0.clone
    i = 0.clone
    while i < series.length
      product = product * series[i].clone
      i = _add(i, 1).clone
    end
    n = series.length
    return nth_root(product, n)
  end
  def pow_float(base, exp)
    result = 1.0.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def nth_root(value, n)
    if value == 0.0
      return 0.0
    end
    low = 0.0.clone
    high = value.clone
    if value < 1.0
      high = 1.0.clone
    end
    mid = (_add(low, high)) / 2.0.clone
    i = 0.clone
    while i < 40
      mp = pow_float(mid, n)
      if mp > value
        high = mid.clone
      else
        low = mid.clone
      end
      mid = (_add(low, high)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return mid
  end
  def test_geometric()
    a = [2.0, 4.0, 8.0]
    if !is_geometric_series(a)
      panic("expected geometric series")
    end
    b = [1.0, 2.0, 3.0]
    if is_geometric_series(b)
      panic("expected non geometric series")
    end
  end
  def main()
    test_geometric()
    puts(geometric_mean([2.0, 4.0, 8.0]))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
