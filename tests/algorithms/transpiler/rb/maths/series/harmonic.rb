# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def is_harmonic_series(series)
    if series.length == 0
      panic("Input list must be a non empty list")
    end
    if series.length == 1
      if series[0] == 0.0
        panic("Input series cannot have 0 as an element")
      end
      return true
    end
    rec_series = [].clone
    i = 0.clone
    while i < series.length
      val = series[i]
      if val == 0.0
        panic("Input series cannot have 0 as an element")
      end
      rec_series = (rec_series << (1.0 / val)).clone
      i = _add(i, 1).clone
    end
    common_diff = rec_series[1] - rec_series[0]
    idx = 2.clone
    while idx < rec_series.length
      if rec_series[idx] - rec_series[idx - 1] != common_diff
        return false
      end
      idx = _add(idx, 1).clone
    end
    return true
  end
  def harmonic_mean(series)
    if series.length == 0
      panic("Input list must be a non empty list")
    end
    total = 0.0.clone
    i = 0.clone
    while i < series.length
      total = _add(total, 1.0 / series[i]).clone
      i = _add(i, 1).clone
    end
    return ((series.length).to_f) / total
  end
  puts((is_harmonic_series([1.0, 2.0 / 3.0, 1.0 / 2.0, 2.0 / 5.0, 1.0 / 3.0]) ? 'true' : 'false'))
  puts((is_harmonic_series([1.0, 2.0 / 3.0, 2.0 / 5.0, 1.0 / 3.0]) ? 'true' : 'false'))
  puts(harmonic_mean([1.0, 4.0, 4.0]))
  puts(harmonic_mean([3.0, 6.0, 9.0, 12.0]))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
