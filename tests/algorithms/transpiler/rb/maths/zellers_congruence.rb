# Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:28 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def parse_decimal(s)
    value = 0
    i = 0
    while i < _len(s)
      c = (__tmp1 = s; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      if c < "0" || c > "9"
        panic("invalid literal")
      end
      value = _add(value * 10, ((c).to_i))
      i = _add(i, 1)
    end
    return value
  end
  def zeller_day(date_input)
    days = {0 => "Sunday", 1 => "Monday", 2 => "Tuesday", 3 => "Wednesday", 4 => "Thursday", 5 => "Friday", 6 => "Saturday"}
    if !_eq(_len(date_input), 10)
      panic("Must be 10 characters long")
    end
    m = parse_decimal(date_input[0...2])
    if m <= 0 || m >= 13
      panic("Month must be between 1 - 12")
    end
    sep1 = (__tmp2 = date_input; __tmp2.is_a?(Hash) ? __tmp2[2] : _idx(__tmp2, 2))
    if !_eq(sep1, "-") && !_eq(sep1, "/")
      panic("Date separator must be '-' or '/'")
    end
    d = parse_decimal(date_input[3...5])
    if d <= 0 || d >= 32
      panic("Date must be between 1 - 31")
    end
    sep2 = (__tmp3 = date_input; __tmp3.is_a?(Hash) ? __tmp3[5] : _idx(__tmp3, 5))
    if !_eq(sep2, "-") && !_eq(sep2, "/")
      panic("Date separator must be '-' or '/'")
    end
    y = parse_decimal(date_input[6...10])
    if y <= 45 || y >= 8500
      panic("Year out of range. There has to be some sort of limit...right?")
    end
    year = y
    month = m
    if month <= 2
      year = year - 1
      month = _add(month, 12)
    end
    c = year / 100
    k = year % 100
    t = (2.6 * ((month).to_f) - 5.39).to_i
    u = c / 4
    v = k / 4
    x = _add(d, k)
    z = _add(_add(_add(t, u), v), x)
    w = z - (2 * c)
    f = w % 7
    if f < 0
      f = _add(f, 7)
    end
    return (__tmp4 = days; __tmp4.is_a?(Hash) ? __tmp4[f] : _idx(__tmp4, f))
  end
  def zeller(date_input)
    day = zeller_day(date_input)
    return _add(_add(_add(_add("Your date ", date_input), ", is a "), day), "!")
  end
  def test_zeller()
    inputs = ["01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"]
    expected = ["Sunday", "Monday", "Tuesday", "Thursday"]
    i = 0
    while i < _len(inputs)
      res = zeller_day((__tmp5 = inputs; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i)))
      if !_eq(res, (__tmp6 = expected; __tmp6.is_a?(Hash) ? __tmp6[i] : _idx(__tmp6, i)))
        panic("zeller test failed")
      end
      i = _add(i, 1)
    end
  end
  def main()
    test_zeller()
    puts(zeller("01-31-2010"))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
