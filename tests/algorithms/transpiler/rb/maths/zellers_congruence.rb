# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def parse_decimal(s)
    value = 0.clone
    i = 0.clone
    while i < s.length
      c = s[i]
      if c < "0" || c > "9"
        panic("invalid literal")
      end
      value = _add(value * 10, ((c).to_i)).clone
      i = _add(i, 1).clone
    end
    return value
  end
  def zeller_day(date_input)
    days = {0 => "Sunday", 1 => "Monday", 2 => "Tuesday", 3 => "Wednesday", 4 => "Thursday", 5 => "Friday", 6 => "Saturday"}
    if date_input.length != 10
      panic("Must be 10 characters long")
    end
    m = parse_decimal(date_input[0...2])
    if m <= 0 || m >= 13
      panic("Month must be between 1 - 12")
    end
    sep1 = date_input[2]
    if sep1 != "-" && sep1 != "/"
      panic("Date separator must be '-' or '/'")
    end
    d = parse_decimal(date_input[3...5])
    if d <= 0 || d >= 32
      panic("Date must be between 1 - 31")
    end
    sep2 = date_input[5]
    if sep2 != "-" && sep2 != "/"
      panic("Date separator must be '-' or '/'")
    end
    y = parse_decimal(date_input[6...10])
    if y <= 45 || y >= 8500
      panic("Year out of range. There has to be some sort of limit...right?")
    end
    year = y.clone
    month = m.clone
    if month <= 2
      year = year - 1.clone
      month = _add(month, 12).clone
    end
    c = year / 100
    k = year % 100
    t = (2.6 * ((month).to_f) - 5.39).to_i
    u = c / 4
    v = k / 4
    x = _add(d, k)
    z = _add(_add(_add(t, u), v), x)
    w = z - (2 * c)
    f = w % 7.clone
    if f < 0
      f = _add(f, 7).clone
    end
    return days[f]
  end
  def zeller(date_input)
    day = zeller_day(date_input)
    return _add(_add(_add(_add("Your date ", date_input), ", is a "), day), "!")
  end
  def test_zeller()
    inputs = ["01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"]
    expected = ["Sunday", "Monday", "Tuesday", "Thursday"]
    i = 0.clone
    while i < inputs.length
      res = zeller_day(inputs[i])
      if res != expected[i]
        panic("zeller test failed")
      end
      i = _add(i, 1).clone
    end
  end
  def main()
    test_zeller()
    puts(zeller("01-31-2010"))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
