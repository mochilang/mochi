# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def floor(x)
    i = (x).to_i.clone
    if ((i).to_f) > x
      i = i - 1.clone
    end
    return (i).to_f
  end
  def pow10(n)
    p = 1.0.clone
    i = 0.clone
    while i < n
      p = p * 10.0.clone
      i = _add(i, 1).clone
    end
    return p
  end
  def round(x, n)
    m = pow10(n)
    return _add(x * m, 0.5).floor() / m
  end
  def decimal_isolate(number, digit_amount)
    whole = (number).to_i
    frac = number - ((whole).to_f)
    if digit_amount > 0
      return round(frac, digit_amount)
    end
    return frac
  end
  def main()
    puts(_str(decimal_isolate(1.53, 0)))
    puts(_str(decimal_isolate(35.345, 1)))
    puts(_str(decimal_isolate(35.345, 2)))
    puts(_str(decimal_isolate(35.345, 3)))
    puts(_str(decimal_isolate(-14.789, 3)))
    puts(_str(decimal_isolate(0.0, 2)))
    puts(_str(decimal_isolate(-14.123, 1)))
    puts(_str(decimal_isolate(-14.123, 2)))
    puts(_str(decimal_isolate(-14.123, 3)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
