# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def find_min_iterative(nums)
    if nums.length == 0
      panic("find_min_iterative() arg is an empty sequence")
    end
    min_num = nums[0].clone
    i = 0.clone
    while i < nums.length
      num = nums[i]
      if num < min_num
        min_num = num.clone
      end
      i = _add(i, 1).clone
    end
    return min_num
  end
  def find_min_recursive(nums, left, right)
    n = nums.length
    if n == 0
      panic("find_min_recursive() arg is an empty sequence")
    end
    if left >= n || left < (0 - n) || right >= n || right < (0 - n)
      panic("list index out of range")
    end
    l = left.clone
    r = right.clone
    if l < 0
      l = _add(n, l).clone
    end
    if r < 0
      r = _add(n, r).clone
    end
    if l == r
      return nums[l]
    end
    mid = (_add(l, r)) / 2
    left_min = find_min_recursive(nums, l, mid)
    right_min = find_min_recursive(nums, _add(mid, 1), r)
    if left_min <= right_min
      return left_min
    end
    return right_min
  end
  def test_find_min()
    a = [3.0, 2.0, 1.0]
    if find_min_iterative(a) != 1.0
      panic("iterative test1 failed")
    end
    if find_min_recursive(a, 0, a.length - 1) != 1.0
      panic("recursive test1 failed")
    end
    b = [-3.0, -2.0, -1.0]
    if find_min_iterative(b) != (-3.0)
      panic("iterative test2 failed")
    end
    if find_min_recursive(b, 0, b.length - 1) != (-3.0)
      panic("recursive test2 failed")
    end
    c = [3.0, -3.0, 0.0]
    if find_min_iterative(c) != (-3.0)
      panic("iterative test3 failed")
    end
    if find_min_recursive(c, 0, c.length - 1) != (-3.0)
      panic("recursive test3 failed")
    end
    d = [1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0]
    if find_min_recursive(d, (0 - d.length), (0 - 1)) != 1.0
      panic("negative index test failed")
    end
  end
  def main()
    test_find_min()
    sample = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0]
    puts(_str(find_min_iterative(sample)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
