# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def floor_div(a, b)
    q = a / b.clone
    r = a % b
    if r != 0 && ((a < 0 && b > 0) || (a > 0 && b < 0))
      q = q - 1.clone
    end
    return q
  end
  def continued_fraction(numerator, denominator)
    num = numerator.clone
    den = denominator.clone
    result = [].clone
    while true
      integer_part = floor_div(num, den)
      result = (result << (integer_part)).clone
      num = num - integer_part * den.clone
      if num == 0
        break
      end
      tmp = num
      num = den.clone
      den = tmp.clone
    end
    return result
  end
  def list_to_string(lst)
    s = "[".clone
    i = 0.clone
    while i < lst.length
      s = _add(s, _str(lst[i])).clone
      if i < lst.length - 1
        s = _add(s, ", ").clone
      end
      i = _add(i, 1).clone
    end
    return _add(s, "]")
  end
  puts(_add("Continued Fraction of 0.84375 is: ", list_to_string(continued_fraction(27, 32))))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
