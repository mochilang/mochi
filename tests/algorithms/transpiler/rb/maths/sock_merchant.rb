# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sock_merchant(colors)
    arr = [].clone
    i = 0.clone
    while i < colors.length
      arr = (arr << (colors[i])).clone
      i = _add(i, 1).clone
    end
    n = arr.length.clone
    a = 0.clone
    while a < n
      min_idx = a.clone
      b = _add(a, 1).clone
      while b < n
        if arr[b] < arr[min_idx]
          min_idx = b.clone
        end
        b = _add(b, 1).clone
      end
      temp = arr[a]
      arr[a] = arr[min_idx]
      arr[min_idx] = temp
      a = _add(a, 1).clone
    end
    pairs = 0.clone
    i = 0.clone
    while i < n
      count = 1.clone
      while _add(i, 1) < n && arr[i] == arr[_add(i, 1)]
        count = _add(count, 1).clone
        i = _add(i, 1).clone
      end
      pairs = _add(pairs, count / 2).clone
      i = _add(i, 1).clone
    end
    return pairs
  end
  def test_sock_merchant()
    example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20]
    if sock_merchant(example1) != 3
      panic("example1 failed")
    end
    example2 = [1, 1, 3, 3]
    if sock_merchant(example2) != 2
      panic("example2 failed")
    end
  end
  def main()
    test_sock_merchant()
    example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20]
    puts(_str(sock_merchant(example1)))
    example2 = [1, 1, 3, 3]
    puts(_str(sock_merchant(example2)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
