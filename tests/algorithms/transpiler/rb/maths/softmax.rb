# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def exp_approx(x)
    term = 1.0
    sum = 1.0
    i = 1
    while i < 20
      term = term * x / ((i).to_f)
      sum = _add(sum, term)
      i = _add(i, 1)
    end
    return sum
  end
  def softmax(vec)
    exps = []
    i = 0
    while i < _len(vec)
      exps = _append(exps, exp_approx((__tmp1 = vec; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))))
      i = _add(i, 1)
    end
    total = 0.0
    i = 0
    while i < _len(exps)
      total = _add(total, (__tmp2 = exps; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    result = []
    i = 0
    while i < _len(exps)
      result = _append(result, (__tmp3 = exps; __tmp3.is_a?(Hash) ? __tmp3[i] : _idx(__tmp3, i)) / total)
      i = _add(i, 1)
    end
    return result
  end
  def abs_val(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def approx_equal(a, b)
    return abs_val(a - b) < 0.0001
  end
  def test_softmax()
    s1 = softmax([1.0, 2.0, 3.0, 4.0])
    sum1 = 0.0
    i = 0
    while i < _len(s1)
      sum1 = _add(sum1, (__tmp4 = s1; __tmp4.is_a?(Hash) ? __tmp4[i] : _idx(__tmp4, i)))
      i = _add(i, 1)
    end
    if !approx_equal(sum1, 1.0)
      panic("sum test failed")
    end
    s2 = softmax([5.0, 5.0])
    if !(approx_equal((__tmp5 = s2; __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)), 0.5) && approx_equal((__tmp6 = s2; __tmp6.is_a?(Hash) ? __tmp6[1] : _idx(__tmp6, 1)), 0.5))
      panic("equal elements test failed")
    end
    s3 = softmax([0.0])
    if !approx_equal((__tmp7 = s3; __tmp7.is_a?(Hash) ? __tmp7[0] : _idx(__tmp7, 0)), 1.0)
      panic("zero vector test failed")
    end
  end
  def main()
    test_softmax()
    puts(((x = softmax([1.0, 2.0, 3.0, 4.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
