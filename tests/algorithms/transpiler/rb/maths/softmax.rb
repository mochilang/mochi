# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def exp_approx(x)
    term = 1.0.clone
    sum = 1.0.clone
    i = 1.clone
    while i < 20
      term = term * x / ((i).to_f).clone
      sum = _add(sum, term).clone
      i = _add(i, 1).clone
    end
    return sum
  end
  def softmax(vec)
    exps = [].clone
    i = 0.clone
    while i < vec.length
      exps = (exps << (exp_approx(vec[i]))).clone
      i = _add(i, 1).clone
    end
    total = 0.0.clone
    i = 0.clone
    while i < exps.length
      total = _add(total, exps[i]).clone
      i = _add(i, 1).clone
    end
    result = [].clone
    i = 0.clone
    while i < exps.length
      result = (result << (exps[i] / total)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def abs_val(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def approx_equal(a, b)
    return abs_val(a - b) < 0.0001
  end
  def test_softmax()
    s1 = softmax([1.0, 2.0, 3.0, 4.0])
    sum1 = 0.0.clone
    i = 0.clone
    while i < s1.length
      sum1 = _add(sum1, s1[i]).clone
      i = _add(i, 1).clone
    end
    if !approx_equal(sum1, 1.0)
      panic("sum test failed")
    end
    s2 = softmax([5.0, 5.0])
    if !(approx_equal(s2[0], 0.5) && approx_equal(s2[1], 0.5))
      panic("equal elements test failed")
    end
    s3 = softmax([0.0])
    if !approx_equal(s3[0], 1.0)
      panic("zero vector test failed")
    end
  end
  def main()
    test_softmax()
    puts(((x = softmax([1.0, 2.0, 3.0, 4.0])); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
