# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def bubble_sort(nums)
    arr = nums.clone
    n = arr.length.clone
    i = 0.clone
    while i < n
      j = 0.clone
      while j < n - 1
        a = arr[j]
        b = arr[_add(j, 1)]
        if a > b
          arr[j] = b
          arr[_add(j, 1)] = a
        end
        j = _add(j, 1).clone
      end
      i = _add(i, 1).clone
    end
    return arr
  end
  def median(nums)
    sorted_list = bubble_sort(nums)
    length = sorted_list.length
    mid_index = length / 2
    if length % 2 == 0
      return (((_add(sorted_list[mid_index], sorted_list[mid_index - 1]))).to_f) / 2.0
    else
      return (sorted_list[mid_index]).to_f
    end
  end
  puts(_str(median([0])))
  puts(_str(median([4, 1, 3, 2])))
  puts(_str(median([2, 70, 6, 50, 20, 8, 4])))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
