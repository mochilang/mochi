# Generated by Mochi transpiler v0.10.66 on 2025-08-14 18:14 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if arr.is_a?(Array) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def identity(n)
    i = 0
    mat = []
    while i < n
      row = []
      j = 0
      while j < n
        if _eq(i, j)
          row = _append(row, 1)
        else
          row = _append(row, 0)
        end
        j = _add(j, 1)
      end
      mat = _append(mat, row)
      i = _add(i, 1)
    end
    return mat
  end
  def matrix_mul(a, b)
    n = _len(a)
    result = []
    i = 0
    while i < n
      row = []
      j = 0
      while j < n
        cell = 0
        k = 0
        while k < n
          cell = _add(cell, (__tmp1 = (__tmp2 = a; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)); __tmp1.is_a?(Hash) ? __tmp1[k] : _idx(__tmp1, k)) * (__tmp3 = (__tmp4 = b; __tmp4.is_a?(Hash) ? __tmp4[k] : _idx(__tmp4, k)); __tmp3.is_a?(Hash) ? __tmp3[j] : _idx(__tmp3, j)))
          k = _add(k, 1)
        end
        row = _append(row, cell)
        j = _add(j, 1)
      end
      result = _append(result, row)
      i = _add(i, 1)
    end
    return result
  end
  def matrix_pow(base, exp)
    result = identity(_len(base))
    b = base
    e = exp
    while e > 0
      if _eq(e % 2, 1)
        result = matrix_mul(result, b)
      end
      b = matrix_mul(b, b)
      e = e / 2
    end
    return result
  end
  def fibonacci_with_matrix_exponentiation(n, f1, f2)
    if _eq(n, 1)
      return f1
    end
    if _eq(n, 2)
      return f2
    end
    base = [[1, 1], [1, 0]]
    m = matrix_pow(base, n - 2)
    return _add(f2 * (__tmp5 = (__tmp6 = m; __tmp6.is_a?(Hash) ? __tmp6[0] : _idx(__tmp6, 0)); __tmp5.is_a?(Hash) ? __tmp5[0] : _idx(__tmp5, 0)), f1 * (__tmp7 = (__tmp8 = m; __tmp8.is_a?(Hash) ? __tmp8[0] : _idx(__tmp8, 0)); __tmp7.is_a?(Hash) ? __tmp7[1] : _idx(__tmp7, 1)))
  end
  def simple_fibonacci(n, f1, f2)
    if _eq(n, 1)
      return f1
    end
    if _eq(n, 2)
      return f2
    end
    a = f1
    b = f2
    count = n - 2
    while count > 0
      tmp = _add(a, b)
      a = b
      b = tmp
      count = count - 1
    end
    return b
  end
  puts(_str(fibonacci_with_matrix_exponentiation(1, 5, 6)))
  puts(_str(fibonacci_with_matrix_exponentiation(2, 10, 11)))
  puts(_str(fibonacci_with_matrix_exponentiation(13, 0, 1)))
  puts(_str(fibonacci_with_matrix_exponentiation(10, 5, 9)))
  puts(_str(fibonacci_with_matrix_exponentiation(9, 2, 3)))
  puts(_str(simple_fibonacci(1, 5, 6)))
  puts(_str(simple_fibonacci(2, 10, 11)))
  puts(_str(simple_fibonacci(13, 0, 1)))
  puts(_str(simple_fibonacci(10, 5, 9)))
  puts(_str(simple_fibonacci(9, 2, 3)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
