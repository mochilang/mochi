# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def identity(n)
    i = 0.clone
    mat = [].clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        if i == j
          row = (row << (1)).clone
        else
          row = (row << (0)).clone
        end
        j = _add(j, 1).clone
      end
      mat = (mat << (row)).clone
      i = _add(i, 1).clone
    end
    return mat
  end
  def matrix_mul(a, b)
    n = a.length
    result = [].clone
    i = 0.clone
    while i < n
      row = [].clone
      j = 0.clone
      while j < n
        cell = 0.clone
        k = 0.clone
        while k < n
          cell = _add(cell, a[i][k] * b[k][j]).clone
          k = _add(k, 1).clone
        end
        row = (row << (cell)).clone
        j = _add(j, 1).clone
      end
      result = (result << (row)).clone
      i = _add(i, 1).clone
    end
    return result
  end
  def matrix_pow(base, exp)
    result = identity(base.length).clone
    b = base.clone
    e = exp.clone
    while e > 0
      if e % 2 == 1
        result = matrix_mul(result, b).clone
      end
      b = matrix_mul(b, b).clone
      e = e / 2.clone
    end
    return result
  end
  def fibonacci_with_matrix_exponentiation(n, f1, f2)
    if n == 1
      return f1
    end
    if n == 2
      return f2
    end
    base = [[1, 1], [1, 0]]
    m = matrix_pow(base, n - 2)
    return _add(f2 * m[0][0], f1 * m[0][1])
  end
  def simple_fibonacci(n, f1, f2)
    if n == 1
      return f1
    end
    if n == 2
      return f2
    end
    a = f1.clone
    b = f2.clone
    count = n - 2.clone
    while count > 0
      tmp = _add(a, b)
      a = b.clone
      b = tmp.clone
      count = count - 1.clone
    end
    return b
  end
  puts(_str(fibonacci_with_matrix_exponentiation(1, 5, 6)))
  puts(_str(fibonacci_with_matrix_exponentiation(2, 10, 11)))
  puts(_str(fibonacci_with_matrix_exponentiation(13, 0, 1)))
  puts(_str(fibonacci_with_matrix_exponentiation(10, 5, 9)))
  puts(_str(fibonacci_with_matrix_exponentiation(9, 2, 3)))
  puts(_str(simple_fibonacci(1, 5, 6)))
  puts(_str(simple_fibonacci(2, 10, 11)))
  puts(_str(simple_fibonacci(13, 0, 1)))
  puts(_str(simple_fibonacci(10, 5, 9)))
  puts(_str(simple_fibonacci(9, 2, 3)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
