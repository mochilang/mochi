# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end

start_mem = _mem()
start = _now()
  def to_unsigned(n)
    if n < 0
      return _add($MAX, n)
    end
    return n
  end
  def from_unsigned(n)
    if n >= $HALF
      return n - $MAX
    end
    return n
  end
  def bit_and(a, b)
    x = a.clone
    y = b.clone
    res = 0.clone
    bit = 1.clone
    i = 0.clone
    while i < 32
      if (x % 2 == 1) && (y % 2 == 1)
        res = _add(res, bit).clone
      end
      x = x / 2.clone
      y = y / 2.clone
      bit = bit * 2.clone
      i = _add(i, 1).clone
    end
    return res
  end
  def bit_xor(a, b)
    x = a.clone
    y = b.clone
    res = 0.clone
    bit = 1.clone
    i = 0.clone
    while i < 32
      abit = x % 2
      bbit = y % 2
      if (_add(abit, bbit)) % 2 == 1
        res = _add(res, bit).clone
      end
      x = x / 2.clone
      y = y / 2.clone
      bit = bit * 2.clone
      i = _add(i, 1).clone
    end
    return res
  end
  def lshift1(num)
    return (num * 2) % $MAX
  end
  def add(a, b)
    first = to_unsigned(a).clone
    second = to_unsigned(b).clone
    while second != 0
      carry = bit_and(first, second)
      first = bit_xor(first, second).clone
      second = lshift1(carry).clone
    end
    result = from_unsigned(first)
    return result
  end
  $MAX = 4294967296
  $HALF = 2147483648
  puts(_str(add(3, 5)))
  puts(_str(add(13, 5)))
  puts(_str(add(-7, 2)))
  puts(_str(add(0, -7)))
  puts(_str(add(-321, 0)))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
