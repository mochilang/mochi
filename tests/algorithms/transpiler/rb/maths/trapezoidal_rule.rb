# Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:41 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    a + b
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    (a.to_f - b.to_f).abs < 1e-6
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def f(x)
    return x * x
  end
  def make_points(a, b, h)
    xs = []
    x = _add(a, h)
    while x <= (b - h)
      xs = (xs + [x])
      x = _add(x, h)
    end
    return xs
  end
  def trapezoidal_rule(boundary, steps)
    h = ((__tmp1 = boundary; __tmp1.is_a?(Hash) ? __tmp1[1] : _idx(__tmp1, 1)) - (__tmp2 = boundary; __tmp2.is_a?(Hash) ? __tmp2[0] : _idx(__tmp2, 0))) / steps
    a = (__tmp3 = boundary; __tmp3.is_a?(Hash) ? __tmp3[0] : _idx(__tmp3, 0))
    b = (__tmp4 = boundary; __tmp4.is_a?(Hash) ? __tmp4[1] : _idx(__tmp4, 1))
    xs = make_points(a, b, h)
    y = (h / 2.0) * f(a)
    i = 0
    while i < xs.length
      y = _add(y, h * f((__tmp5 = xs; __tmp5.is_a?(Hash) ? __tmp5[i] : _idx(__tmp5, i))))
      i = _add(i, 1)
    end
    y = _add(y, (h / 2.0) * f(b))
    return y
  end
  $a = 0.0
  $b = 1.0
  $steps = 10.0
  $boundary = [$a, $b]
  $y = trapezoidal_rule($boundary, $steps)
  puts(_add("y = ", _str($y)))
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
