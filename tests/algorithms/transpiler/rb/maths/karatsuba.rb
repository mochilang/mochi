# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def int_pow(base, exp)
    result = 1.clone
    i = 0.clone
    while i < exp
      result = result * base.clone
      i = _add(i, 1).clone
    end
    return result
  end
  def karatsuba(a, b)
    if _str(a).length == 1 || _str(b).length == 1
      return a * b
    end
    m1 = _str(a).length.clone
    lb = _str(b).length
    if lb > m1
      m1 = lb.clone
    end
    m2 = m1 / 2
    power = int_pow(10, m2)
    a1 = a / power
    a2 = a % power
    b1 = b / power
    b2 = b % power
    x = karatsuba(a2, b2)
    y = karatsuba(_add(a1, a2), _add(b1, b2))
    z = karatsuba(a1, b1)
    result = _add(_add(z * int_pow(10, 2 * m2), (y - z - x) * power), x)
    return result
  end
  def main()
    puts(_str(karatsuba(15463, 23489)))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
