# Generated by Mochi transpiler v0.10.59 on 2025-08-06 23:55 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def sqrt_newton(n)
    if n == 0.0
      return 0.0
    end
    x = n.clone
    i = 0.clone
    while i < 20
      x = (_add(x, n / x)) / 2.0.clone
      i = _add(i, 1).clone
    end
    return x
  end
  def hypot(a, b)
    return sqrt_newton(_add(a * a, b * b))
  end
  def line_length(fnc, x_start, x_end, steps)
    x1 = x_start.clone
    fx1 = fnc.call(x_start).clone
    length = 0.0.clone
    i = 0.clone
    step = (x_end - x_start) / (1.0 * steps)
    while i < steps
      x2 = _add(step, x1)
      fx2 = fnc.call(x2)
      length = _add(length, hypot(x2 - x1, fx2 - fx1)).clone
      x1 = x2.clone
      fx1 = fx2.clone
      i = _add(i, 1).clone
    end
    return length
  end
  def f1(x)
    return x
  end
  def f2(x)
    return 1.0
  end
  def f3(x)
    return (x * x) / 10.0
  end
  puts(line_length(method(:f1), 0.0, 1.0, 10))
  puts(line_length(method(:f2), -5.5, 4.5, 100))
  puts(line_length(method(:f3), 0.0, 10.0, 1000))
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
