# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def min_int(a, b)
    if a < b
      return a
    end
    return b
  end
  def int_sqrt(n)
    r = 0.clone
    while (_add(r, 1)) * (_add(r, 1)) <= n
      r = _add(r, 1).clone
    end
    return r
  end
  def sieve(n)
    if n <= 0
      panic("Number must instead be a positive integer")
    end
    in_prime = [].clone
    start = 2.clone
    end_ = int_sqrt(n)
    temp = [].clone
    i = 0.clone
    while i < _add(end_, 1)
      temp = (temp << (1)).clone
      i = _add(i, 1).clone
    end
    prime = [].clone
    while start <= end_
      if temp[start] == 1
        in_prime = (in_prime << (start)).clone
        j = start * start.clone
        while j <= end_
          temp[j] = 0
          j = _add(j, start).clone
        end
      end
      start = _add(start, 1).clone
    end
    i = 0.clone
    while i < in_prime.length
      prime = (prime << (in_prime[i])).clone
      i = _add(i, 1).clone
    end
    low = _add(end_, 1).clone
    high = min_int(2 * end_, n).clone
    while low <= n
      tempSeg = [].clone
      size = _add(high - low, 1).clone
      k = 0.clone
      while k < size
        tempSeg = (tempSeg << (1)).clone
        k = _add(k, 1).clone
      end
      idx = 0.clone
      while idx < in_prime.length
        each = in_prime[idx]
        t = (low / each) * each.clone
        if t < low
          t = _add(t, each).clone
        end
        j2 = t.clone
        while j2 <= high
          tempSeg[j2 - low] = 0
          j2 = _add(j2, each).clone
        end
        idx = _add(idx, 1).clone
      end
      j3 = 0.clone
      while j3 < tempSeg.length
        if tempSeg[j3] == 1
          prime = (prime << (_add(j3, low))).clone
        end
        j3 = _add(j3, 1).clone
      end
      low = _add(high, 1).clone
      high = min_int(_add(high, end_), n).clone
    end
    return prime
  end
  def lists_equal(a, b)
    if a.length != b.length
      return false
    end
    m = 0.clone
    while m < a.length
      if a[m] != b[m]
        return false
      end
      m = _add(m, 1).clone
    end
    return true
  end
  def test_sieve()
    e1 = sieve(8)
    if !lists_equal(e1, [2, 3, 5, 7])
      panic("sieve(8) failed")
    end
    e2 = sieve(27)
    if !lists_equal(e2, [2, 3, 5, 7, 11, 13, 17, 19, 23])
      panic("sieve(27) failed")
    end
  end
  def main()
    test_sieve()
    puts(((x = sieve(30)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
