# Generated by Mochi transpiler v0.10.67 on 2025-08-17 12:10 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil?
  if (arr.is_a?(Array) || arr.is_a?(String)) && idx.is_a?(Numeric)
    return nil if idx < 0 || idx >= arr.length
  end
  arr[idx]
end


def _pow(a, b)
  res = (a.nil? ? 0 : a) ** (b.nil? ? 0 : b)
  res.is_a?(Float) && res == res.to_i ? res.to_i : res
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _append(arr, x)
  x = x.clone if x.is_a?(Array)
  (arr || []) + [x]
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def min_int(a, b)
    if a < b
      return a
    end
    return b
  end
  def int_sqrt(n)
    r = 0
    while (_add(r, 1)) * (_add(r, 1)) <= n
      r = _add(r, 1)
    end
    return r
  end
  def sieve(n)
    if n <= 0
      panic("Number must instead be a positive integer")
    end
    in_prime = []
    start = 2
    end_ = int_sqrt(n)
    temp = []
    i = 0
    while i < _add(end_, 1)
      temp = _append(temp, 1)
      i = _add(i, 1)
    end
    prime = []
    while start <= end_
      if _eq((__tmp1 = temp; __tmp1.is_a?(Hash) ? __tmp1[start] : _idx(__tmp1, start)), 1)
        in_prime = _append(in_prime, start)
        j = start * start
        while j <= end_
          temp[j] = 0
          j = _add(j, start)
        end
      end
      start = _add(start, 1)
    end
    i = 0
    while i < _len(in_prime)
      prime = _append(prime, (__tmp2 = in_prime; __tmp2.is_a?(Hash) ? __tmp2[i] : _idx(__tmp2, i)))
      i = _add(i, 1)
    end
    low = _add(end_, 1)
    high = min_int(2 * end_, n)
    while low <= n
      tempSeg = []
      size = _add(high - low, 1)
      k = 0
      while k < size
        tempSeg = _append(tempSeg, 1)
        k = _add(k, 1)
      end
      idx = 0
      while idx < _len(in_prime)
        each = (__tmp3 = in_prime; __tmp3.is_a?(Hash) ? __tmp3[idx] : _idx(__tmp3, idx))
        t = (low / each) * each
        if t < low
          t = _add(t, each)
        end
        j2 = t
        while j2 <= high
          tempSeg[j2 - low] = 0
          j2 = _add(j2, each)
        end
        idx = _add(idx, 1)
      end
      j3 = 0
      while j3 < _len(tempSeg)
        if _eq((__tmp4 = tempSeg; __tmp4.is_a?(Hash) ? __tmp4[j3] : _idx(__tmp4, j3)), 1)
          prime = _append(prime, _add(j3, low))
        end
        j3 = _add(j3, 1)
      end
      low = _add(high, 1)
      high = min_int(_add(high, end_), n)
    end
    return prime
  end
  def lists_equal(a, b)
    if !_eq(_len(a), _len(b))
      return false
    end
    m = 0
    while m < _len(a)
      if !_eq((__tmp5 = a; __tmp5.is_a?(Hash) ? __tmp5[m] : _idx(__tmp5, m)), (__tmp6 = b; __tmp6.is_a?(Hash) ? __tmp6[m] : _idx(__tmp6, m)))
        return false
      end
      m = _add(m, 1)
    end
    return true
  end
  def test_sieve()
    e1 = sieve(8)
    if !lists_equal(e1, [2, 3, 5, 7])
      panic("sieve(8) failed")
    end
    e2 = sieve(27)
    if !lists_equal(e2, [2, 3, 5, 7, 11, 13, 17, 19, 23])
      panic("sieve(27) failed")
    end
  end
  def main()
    test_sieve()
    puts(((x = sieve(30)); x.is_a?(Array) ? ("[" + x.map{ |x| if x.is_a?(Hash) then '{' + x.to_h.map{ |k,v| "#{k}: #{v.is_a?(String) ? v : v.to_s}" }.join(', ') + '}' else x.to_s end }.join(' ') + "]") : x.to_s))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
