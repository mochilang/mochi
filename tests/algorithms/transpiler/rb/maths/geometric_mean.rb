# Generated by Mochi transpiler v0.10.65 on 2025-08-14 15:48 +0700
$VERBOSE = nil
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
if !$now_seeded && ENV['MOCHI_BENCHMARK']
  $now_seeded = true
end
def _now()
  if $now_seeded
    $now_seed = ($now_seed * 1_664_525 + 1_013_904_223) % 2_147_483_647
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _idx(arr, idx)
  return nil if arr.nil? || !idx.is_a?(Numeric) || idx < 0 || idx >= arr.length
  arr[idx]
end


def _len(x)
  x.respond_to?(:length) ? x.length : 0
end


def _has(obj, key)
  if obj.is_a?(Hash)
    obj.key?(key)
  elsif obj.respond_to?(:include?)
    obj.include?(key)
  elsif obj.respond_to?(:to_h)
    k = key.respond_to?(:to_sym) ? key.to_sym : key
    obj.to_h.key?(k)
  else
    false
  end
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  elsif a.is_a?(Array) && !b.is_a?(Array)
    a + [b]
  elsif !a.is_a?(Array) && b.is_a?(Array)
    [a] + b
  elsif a.is_a?(String) || b.is_a?(String)
    a.to_s + b.to_s
  else
    (a.nil? ? 0 : a) + (b.nil? ? 0 : b)
  end
end


def _eq(a, b)
  if a.is_a?(Float) || b.is_a?(Float)
    diff = (a.to_f - b.to_f).abs
    scale = [a.to_f.abs, b.to_f.abs].max
    scale = 1.0 if scale == 0.0
    diff <= 1e-6 * scale
  else
    a == b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _padEnd(s, len, ch)
  s.to_s.ljust(len, ch)
end


def _str(x)
  if x.is_a?(Array)
    x.map { |e| _str(e) }.join(' ')
  elsif x.is_a?(Float)
    s = x.to_s
    if s.include?('e') || s.include?('E')
      s
    elsif x == x.to_i
      x.to_i.to_s
    else
      s
    end
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

__name__ = '__main__'
start_mem = _mem()
start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  def abs(x)
    if x < 0.0
      return -x
    end
    return x
  end
  def pow_int(base, exp)
    result = 1.0
    i = 0
    while i < exp
      result = result * base
      i = _add(i, 1)
    end
    return result
  end
  def nth_root(x, n)
    if _eq(x, 0.0)
      return 0.0
    end
    guess = x
    i = 0
    while i < 10
      denom = pow_int(guess, n - 1)
      guess = (_add(((n - 1)).to_f * guess, x / denom)) / ((n).to_f)
      i = _add(i, 1)
    end
    return guess
  end
  def round_nearest(x)
    if x >= 0.0
      n = ((_add(x, 0.5))).to_i
      return (n).to_f
    end
    n = ((x - 0.5)).to_i
    return (n).to_f
  end
  def compute_geometric_mean(nums)
    if _eq(_len(nums), 0)
      panic("no numbers")
    end
    product = 1.0
    i = 0
    while i < _len(nums)
      product = product * (__tmp1 = nums; __tmp1.is_a?(Hash) ? __tmp1[i] : _idx(__tmp1, i))
      i = _add(i, 1)
    end
    if product < 0.0 && _eq(_len(nums) % 2, 0)
      panic("Cannot Compute Geometric Mean for these numbers.")
    end
    mean = nth_root(product.abs(), _len(nums))
    if product < 0.0
      mean = -mean
    end
    possible = round_nearest(mean)
    if _eq(pow_int(possible, _len(nums)), product)
      mean = possible
    end
    return mean
  end
  def test_compute_geometric_mean()
    eps = 0.0001
    m1 = compute_geometric_mean([2.0, 8.0])
    if (m1 - 4.0).abs() > eps
      panic("test1 failed")
    end
    m2 = compute_geometric_mean([5.0, 125.0])
    if (m2 - 25.0).abs() > eps
      panic("test2 failed")
    end
    m3 = compute_geometric_mean([1.0, 0.0])
    if (m3 - 0.0).abs() > eps
      panic("test3 failed")
    end
    m4 = compute_geometric_mean([1.0, 5.0, 25.0, 5.0])
    if (m4 - 5.0).abs() > eps
      panic("test4 failed")
    end
    m5 = compute_geometric_mean([-5.0, 25.0, 1.0])
    if (_add(m5, 5.0)).abs() > eps
      panic("test5 failed")
    end
  end
  def main()
    test_compute_geometric_mean()
    puts(compute_geometric_mean([-3.0, -27.0]))
  end
  main()
end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
