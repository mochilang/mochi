# Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:17 +0700
require 'json'

$now_seed = 0
$now_seeded = false
s = ENV['MOCHI_NOW_SEED']
if (!s || s == '') && ENV['MOCHI_BENCHMARK']
  s = '1'
end
if s && s != ''
  begin
    $now_seed = Integer(s)
    $now_seeded = true
  rescue StandardError
  end
end
def _now()
  if $now_seeded
    $now_seed += 1_000_000
    $now_seed
  else
    Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)
  end
end


require 'objspace'
def _mem()
  ObjectSpace.memsize_of_all
end


def _add(a, b)
  if a.is_a?(Array) && b.is_a?(String)
    a.join + b
  elsif a.is_a?(String) && b.is_a?(Array)
    a + b.join
  else
    a + b
  end
end


def _padStart(s, len, ch)
  s.to_s.rjust(len, ch)
end


def _str(x)
  if x.is_a?(Float) && x == x.to_i
    x.to_i.to_s
  else
    x.to_s
  end
end


class String
  alias each each_char
end


def panic(msg)
  raise RuntimeError, msg
end

start_mem = _mem()
start = _now()
  def set_seed(s)
    $seed = s.clone
  end
  def randint(a, b)
    $seed = (_add($seed * 1103515245, 12345)) % 2147483648.clone
    return _add(($seed % (_add(b - a, 1))), a)
  end
  def jacobi_symbol(random_a, number)
    if random_a == 0 || random_a == 1
      return random_a
    end
    random_a = random_a % number.clone
    t = 1.clone
    while random_a != 0
      while random_a % 2 == 0
        random_a = random_a / 2.clone
        r = number % 8
        if r == 3 || r == 5
          t = -t.clone
        end
      end
      temp = random_a
      random_a = number.clone
      number = temp.clone
      if random_a % 4 == 3 && number % 4 == 3
        t = -t.clone
      end
      random_a = random_a % number.clone
    end
    if number == 1
      return t
    end
    return 0
  end
  def pow_mod(base, exp, mod)
    result = 1.clone
    b = base % mod.clone
    e = exp.clone
    while e > 0
      if e % 2 == 1
        result = (result * b) % mod.clone
      end
      b = (b * b) % mod.clone
      e = e / 2.clone
    end
    return result
  end
  def solovay_strassen(number, iterations)
    if number <= 1
      return false
    end
    if number <= 3
      return true
    end
    i = 0.clone
    while i < iterations
      a = randint(2, number - 2)
      x = jacobi_symbol(a, number)
      y = pow_mod(a, (number - 1) / 2, number)
      mod_x = x % number.clone
      if mod_x < 0
        mod_x = _add(mod_x, number).clone
      end
      if x == 0 || y != mod_x
        return false
      end
      i = _add(i, 1).clone
    end
    return true
  end
  def main()
    set_seed(10)
    puts(_str(solovay_strassen(13, 5)))
    puts(_str(solovay_strassen(9, 10)))
    puts(_str(solovay_strassen(17, 15)))
  end
  $seed = 1.clone
  main()
end_time = _now()
end_mem = _mem()
result = {"duration_us" => ((end_time - start) / 1000), "memory_bytes" => (end_mem - start_mem), "name" => "main"}
puts(JSON.pretty_generate(result))
