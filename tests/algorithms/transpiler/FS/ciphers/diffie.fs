// Generated 2025-08-07 10:31 +0700

exception Return
let mutable _nowSeed:int64 = 0L
let mutable _nowSeeded = false
let _initNow () =
    let s = System.Environment.GetEnvironmentVariable("MOCHI_NOW_SEED")
    if System.String.IsNullOrEmpty(s) |> not then
        match System.Int32.TryParse(s) with
        | true, v ->
            _nowSeed <- int64 v
            _nowSeeded <- true
        | _ -> ()
let _now () =
    if _nowSeeded then
        _nowSeed <- (_nowSeed * 1664525L + 1013904223L) % 2147483647L
        int _nowSeed
    else
        int (System.DateTime.UtcNow.Ticks % 2147483647L)

_initNow()
let _idx (arr:'a array) (i:int) : 'a =
    if i >= 0 && i < arr.Length then arr.[i] else Unchecked.defaultof<'a>
let rec _str v =
    let s = sprintf "%A" v
    s.Replace("[|", "[")
     .Replace("|]", "]")
     .Replace("; ", " ")
     .Replace(";", "")
     .Replace("\"", "")
let __bench_start = _now()
let __mem_start = System.GC.GetTotalMemory(true)
let rec mod_pow (``base``: int) (exp: int) (``mod``: int) =
    let mutable __ret : int = Unchecked.defaultof<int>
    let mutable ``base`` = ``base``
    let mutable exp = exp
    let mutable ``mod`` = ``mod``
    try
        let mutable result: int = 1
        let mutable b: int = ((``base`` % ``mod`` + ``mod``) % ``mod``)
        let mutable e: int = exp
        while e > 0 do
            if (((e % 2 + 2) % 2)) = 1 then
                result <- (((result * b) % ``mod`` + ``mod``) % ``mod``)
            e <- e / 2
            b <- (((b * b) % ``mod`` + ``mod``) % ``mod``)
        __ret <- result
        raise Return
        __ret
    with
        | Return -> __ret
let rec contains (xs: int array) (``val``: int) =
    let mutable __ret : bool = Unchecked.defaultof<bool>
    let mutable xs = xs
    let mutable ``val`` = ``val``
    try
        let mutable i: int = 0
        while i < (Seq.length (xs)) do
            if (_idx xs (i)) = ``val`` then
                __ret <- true
                raise Return
            i <- i + 1
        __ret <- false
        raise Return
        __ret
    with
        | Return -> __ret
let rec find_primitive (modulus: int) =
    let mutable __ret : int = Unchecked.defaultof<int>
    let mutable modulus = modulus
    try
        let mutable r: int = 1
        while r < modulus do
            let mutable li: int array = [||]
            let mutable x: int = 0
            let mutable valid: bool = true
            while (x < (modulus - 1)) && valid do
                let value: int = mod_pow (r) (x) (modulus)
                if contains (li) (value) then
                    valid <- false
                else
                    li <- Array.append li [|value|]
                    x <- x + 1
            if valid then
                __ret <- r
                raise Return
            r <- r + 1
        __ret <- -1
        raise Return
        __ret
    with
        | Return -> __ret
printfn "%d" (find_primitive (7))
printfn "%d" (find_primitive (11))
printfn "%d" (find_primitive (8))
let prime: int = 23
let primitive_root: int = find_primitive (prime)
if primitive_root = (0 - 1) then
    printfn "%s" ("Cannot find the primitive for the value: -1")
else
    let a_private: int = 6
    let b_private: int = 15
    let a_public: int = mod_pow (primitive_root) (a_private) (prime)
    let b_public: int = mod_pow (primitive_root) (b_private) (prime)
    let a_secret: int = mod_pow (b_public) (a_private) (prime)
    let b_secret: int = mod_pow (a_public) (b_private) (prime)
    printfn "%s" ("The key value generated by A is: " + (_str (a_secret)))
    printfn "%s" ("The key value generated by B is: " + (_str (b_secret)))
let __bench_end = _now()
let __mem_end = System.GC.GetTotalMemory(true)
printfn "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"main\"\n}" ((__bench_end - __bench_start) / 1000) (__mem_end - __mem_start)
