// Generated by Mochi transpiler v0.10.72 on 2025-08-25 08:45:34 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(std::numeric_limits<double>::max_digits10) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

bool recursive_match(std::string text, std::string pattern);
bool dp_match(std::string text, std::string pattern);
void print_bool(bool b);
int main();

bool recursive_match(std::string text, std::string pattern) {
    if ((pattern.size() == int64_t(0))) {
        return (text.size() == int64_t(0));
    }
    if ((text.size() == int64_t(0))) {
        if (((pattern.size() >= int64_t(2)) && (([&]{ std::string __s = pattern; long long __start = (pattern.size() - int64_t(1)); long long __end = pattern.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("*")))) {
            return recursive_match(text, ([&]{ std::string __s = pattern; long long __start = int64_t(0); long long __end = (pattern.size() - int64_t(2)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })());
        }
        return false;
    }
    std::string last_text = ([&]{ std::string __s = text; long long __start = (text.size() - int64_t(1)); long long __end = text.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
    std::string last_pattern = ([&]{ std::string __s = pattern; long long __start = (pattern.size() - int64_t(1)); long long __end = pattern.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
    if (((last_text == last_pattern) || (last_pattern == std::string(".")))) {
        return recursive_match(([&]{ std::string __s = text; long long __start = int64_t(0); long long __end = (text.size() - int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })(), ([&]{ std::string __s = pattern; long long __start = int64_t(0); long long __end = (pattern.size() - int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })());
    }
    if ((last_pattern == std::string("*"))) {
        if (recursive_match(([&]{ std::string __s = text; long long __start = int64_t(0); long long __end = (text.size() - int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })(), pattern)) {
            return true;
        }
        return recursive_match(text, ([&]{ std::string __s = pattern; long long __start = int64_t(0); long long __end = (pattern.size() - int64_t(2)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })());
    }
    return false;
}

bool dp_match(std::string text, std::string pattern) {
    int64_t m = text.size();
    int64_t n = pattern.size();
    std::vector<std::vector<bool>> dp = {};
    int64_t i = int64_t(0);
    while ((i <= m)) {
        std::vector<bool> row = {};
        int64_t j = int64_t(0);
        while ((j <= n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(false); return __tmp; }());
            j = (j + int64_t(1));
        }
        dp = ([&]{ auto __tmp = dp; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    _index(_index(dp, int64_t(0)), int64_t(0)) = true;
    int64_t j = int64_t(1);
    while ((j <= n)) {
        if (((([&]{ std::string __s = pattern; long long __start = (j - int64_t(1)); long long __end = j; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("*")) && (j >= int64_t(2)))) {
            if (_index(_index(dp, int64_t(0)), (j - int64_t(2)))) {
                _index(_index(dp, int64_t(0)), j) = true;
            }
        }
        j = (j + int64_t(1));
    }
    i = int64_t(1);
    while ((i <= m)) {
        j = int64_t(1);
        while ((j <= n)) {
            std::string p_char = ([&]{ std::string __s = pattern; long long __start = (j - int64_t(1)); long long __end = j; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            std::string t_char = ([&]{ std::string __s = text; long long __start = (i - int64_t(1)); long long __end = i; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            if (((p_char == std::string(".")) || (p_char == t_char))) {
                if (_index(_index(dp, (i - int64_t(1))), (j - int64_t(1)))) {
                    _index(_index(dp, i), j) = true;
                }
            } else             if ((p_char == std::string("*"))) {
                if ((j >= int64_t(2))) {
                    if (_index(_index(dp, i), (j - int64_t(2)))) {
                        _index(_index(dp, i), j) = true;
                    }
                    std::string prev_p = ([&]{ std::string __s = pattern; long long __start = (j - int64_t(2)); long long __end = (j - int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
                    if (((prev_p == std::string(".")) || (prev_p == t_char))) {
                        if (_index(_index(dp, (i - int64_t(1))), j)) {
                            _index(_index(dp, i), j) = true;
                        }
                    }
                }
            } else {
                _index(_index(dp, i), j) = false;
            }

            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return _index(_index(dp, m), n);
}

void print_bool(bool b) {
    if (b) {
        std::cout << (true ? "true" : "false");
        std::cout << std::endl;
    } else {
        std::cout << (false ? "true" : "false");
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        print_bool(recursive_match(std::string("abc"), std::string("a.c")));
        print_bool(recursive_match(std::string("abc"), std::string("af*.c")));
        print_bool(recursive_match(std::string("abc"), std::string("a.c*")));
        print_bool(recursive_match(std::string("abc"), std::string("a.c*d")));
        print_bool(recursive_match(std::string("aa"), std::string(".*")));
        print_bool(dp_match(std::string("abc"), std::string("a.c")));
        print_bool(dp_match(std::string("abc"), std::string("af*.c")));
        print_bool(dp_match(std::string("abc"), std::string("a.c*")));
        print_bool(dp_match(std::string("abc"), std::string("a.c*d")));
        print_bool(dp_match(std::string("aa"), std::string(".*")));
    }
    return 0;
}
