// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:08:57 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Node;

std::ostream& operator<<(std::ostream&, const Node&);


struct Node {
    int64_t key;
    int64_t freq;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'key': "<< v.key
 << ", " << "'freq': "<< v.freq
 << '}';
    return os;
}

std::vector<Node> sort_nodes(const std::vector<Node>& nodes);
void print_node(const Node& n);
void print_binary_search_tree(const std::vector<std::vector<int64_t>>& root, const std::vector<int64_t>& keys, int64_t i, int64_t j, int64_t parent, bool is_left);
void find_optimal_binary_search_tree(const std::vector<Node>& original_nodes);
int main();

std::vector<Node> sort_nodes(const std::vector<Node>& nodes) {
    std::vector<Node> arr = nodes;
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        Node key_node = arr[i];
        int64_t j = (i - int64_t(1));
        while ((j >= int64_t(0))) {
            Node temp = arr[j];
            if ((temp.key > key_node.key)) {
                arr[(j + int64_t(1))] = temp;
                j = (j - int64_t(1));
            } else {
                break;
            }
        }
        arr[(j + int64_t(1))] = key_node;
        i = (i + int64_t(1));
    }
    return arr;
}

void print_node(const Node& n) {
    std::cout << ((((std::string("Node(key=") + ([&]{ std::ostringstream ss; ss << std::boolalpha << n.key; return ss.str(); }())) + std::string(", freq=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << n.freq; return ss.str(); }())) + std::string(")"));
    std::cout << std::endl;
}

void print_binary_search_tree(const std::vector<std::vector<int64_t>>& root, const std::vector<int64_t>& keys, int64_t i, int64_t j, int64_t parent, bool is_left) {
    if ((((i > j) || (i < int64_t(0))) || (j > (root.size() - int64_t(1))))) {
        return;
    }
    int64_t node = root[i][j];
    if ((parent == -int64_t(1))) {
        std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << keys[node]; return ss.str(); }()) + std::string(" is the root of the binary search tree."));
        std::cout << std::endl;
    } else {
        if (is_left) {
            std::cout << (((([&]{ std::ostringstream ss; ss << std::boolalpha << keys[node]; return ss.str(); }()) + std::string(" is the left child of key ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << parent; return ss.str(); }())) + std::string("."));
            std::cout << std::endl;
        } else {
            std::cout << (((([&]{ std::ostringstream ss; ss << std::boolalpha << keys[node]; return ss.str(); }()) + std::string(" is the right child of key ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << parent; return ss.str(); }())) + std::string("."));
            std::cout << std::endl;
        }
    }
    print_binary_search_tree(root, keys, i, (node - int64_t(1)), keys[node], true);
    print_binary_search_tree(root, keys, (node + int64_t(1)), j, keys[node], false);
}

void find_optimal_binary_search_tree(const std::vector<Node>& original_nodes) {
    std::vector<Node> nodes = sort_nodes(original_nodes);
    int n = nodes.size();
    std::vector<int64_t> keys = {};
    std::vector<int64_t> freqs = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        Node node = nodes[i];
        keys = ([&]{ auto __tmp = keys; __tmp.push_back(node.key); return __tmp; }());
        freqs = ([&]{ auto __tmp = freqs; __tmp.push_back(node.freq); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<int64_t>> dp = {};
    std::vector<std::vector<int64_t>> total = {};
    std::vector<std::vector<int64_t>> root = {};
    i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> dp_row = {};
        std::vector<int64_t> total_row = {};
        std::vector<int64_t> root_row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            if ((i == j)) {
                dp_row = ([&]{ auto __tmp = dp_row; __tmp.push_back(freqs[i]); return __tmp; }());
                total_row = ([&]{ auto __tmp = total_row; __tmp.push_back(freqs[i]); return __tmp; }());
                root_row = ([&]{ auto __tmp = root_row; __tmp.push_back(i); return __tmp; }());
            } else {
                dp_row = ([&]{ auto __tmp = dp_row; __tmp.push_back(int64_t(0)); return __tmp; }());
                total_row = ([&]{ auto __tmp = total_row; __tmp.push_back(int64_t(0)); return __tmp; }());
                root_row = ([&]{ auto __tmp = root_row; __tmp.push_back(int64_t(0)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        dp = ([&]{ auto __tmp = dp; __tmp.push_back(dp_row); return __tmp; }());
        total = ([&]{ auto __tmp = total; __tmp.push_back(total_row); return __tmp; }());
        root = ([&]{ auto __tmp = root; __tmp.push_back(root_row); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t interval_length = int64_t(2);
    int64_t INF = int64_t(2147483647);
    while ((interval_length <= n)) {
        i = int64_t(0);
        while ((i < ((n - interval_length) + int64_t(1)))) {
            int64_t j = ((i + interval_length) - int64_t(1));
            dp[i][j] = INF;
            total[i][j] = (total[i][(j - int64_t(1))] + freqs[j]);
            int64_t r = root[i][(j - int64_t(1))];
            while ((r <= root[(i + int64_t(1))][j])) {
                int64_t left = ((r != i) ? dp[i][(r - int64_t(1))] : int64_t(0));
                int64_t right = ((r != j) ? dp[(r + int64_t(1))][j] : int64_t(0));
                int64_t cost = ((left + total[i][j]) + right);
                if ((dp[i][j] > cost)) {
                    dp[i][j] = cost;
                    root[i][j] = r;
                }
                r = (r + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        interval_length = (interval_length + int64_t(1));
    }
    std::cout << std::string("Binary search tree nodes:");
    std::cout << std::endl;
    i = int64_t(0);
    while ((i < n)) {
        print_node(nodes[i]);
        i = (i + int64_t(1));
    }
    std::cout << ((std::string("\nThe cost of optimal BST for given tree nodes is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << dp[int64_t(0)][static_cast<size_t>((n - int64_t(1)))]; return ss.str(); }())) + std::string("."));
    std::cout << std::endl;
    print_binary_search_tree(root, keys, int64_t(0), (int64_t)((n - int64_t(1))), -int64_t(1), false);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<Node> nodes = std::vector<Node>{Node{.key = int64_t(12), .freq = int64_t(8)}, Node{.key = int64_t(10), .freq = int64_t(34)}, Node{.key = int64_t(20), .freq = int64_t(50)}, Node{.key = int64_t(42), .freq = int64_t(3)}, Node{.key = int64_t(25), .freq = int64_t(40)}, Node{.key = int64_t(37), .freq = int64_t(30)}};
        find_optimal_binary_search_tree(nodes);
    }
    return 0;
}
