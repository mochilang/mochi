// Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:14:28 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Angle;
struct Side;
struct Ellipse;
struct Circle;
struct Polygon;
struct Rectangle;
struct Square;

std::ostream& operator<<(std::ostream&, const Angle&);
std::ostream& operator<<(std::ostream&, const Side&);
std::ostream& operator<<(std::ostream&, const Ellipse&);
std::ostream& operator<<(std::ostream&, const Circle&);
std::ostream& operator<<(std::ostream&, const Polygon&);
std::ostream& operator<<(std::ostream&, const Rectangle&);
std::ostream& operator<<(std::ostream&, const Square&);


struct Angle {
    double degrees;
    auto operator<=>(const Angle&) const = default;
};

struct Side {
    double length;
    Angle angle;
    int64_t next;
    auto operator<=>(const Side&) const = default;
};

struct Ellipse {
    double major;
    double minor;
    auto operator<=>(const Ellipse&) const = default;
};

struct Circle {
    double radius;
    auto operator<=>(const Circle&) const = default;
};

struct Polygon {
    std::vector<Side> sides;
    auto operator<=>(const Polygon&) const = default;
};

struct Rectangle {
    Side short_side;
    Side long_side;
    Polygon poly;
    auto operator<=>(const Rectangle&) const = default;
};

struct Square {
    Side side;
    Rectangle rect;
    auto operator<=>(const Square&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Angle& v) {
    os << '{' << "'degrees': "<< std::fixed << std::setprecision(1) << v.degrees
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Side& v) {
    os << '{' << "'length': "<< std::fixed << std::setprecision(1) << v.length
 << ", " << "'angle': "<< v.angle
 << ", " << "'next': "<< v.next
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Ellipse& v) {
    os << '{' << "'major': "<< std::fixed << std::setprecision(1) << v.major
 << ", " << "'minor': "<< std::fixed << std::setprecision(1) << v.minor
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Circle& v) {
    os << '{' << "'radius': "<< std::fixed << std::setprecision(1) << v.radius
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Polygon& v) {
    os << '{' << "'sides': "<< "["; for(size_t i=0;i<v.sides.size();++i){ if(i>0) os << ", "; os << v.sides[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Rectangle& v) {
    os << '{' << "'short_side': "<< v.short_side
 << ", " << "'long_side': "<< v.long_side
 << ", " << "'poly': "<< v.poly
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Square& v) {
    os << '{' << "'side': "<< v.side
 << ", " << "'rect': "<< v.rect
 << '}';
    return os;
}

Angle make_angle(double deg);
Side make_side(double length, const Angle& angle);
double ellipse_area(const Ellipse& e);
double ellipse_perimeter(const Ellipse& e);
double circle_area(const Circle& c);
double circle_perimeter(const Circle& c);
double circle_diameter(const Circle& c);
double circle_max_parts(double num_cuts);
Polygon make_polygon();
void polygon_add_side(Polygon& p, const Side& s);
Side polygon_get_side(const Polygon& p, int64_t index);
void polygon_set_side(Polygon& p, int64_t index, const Side& s);
Rectangle make_rectangle(double short_len, double long_len);
double rectangle_perimeter(const Rectangle& r);
double rectangle_area(const Rectangle& r);
Square make_square(double side_len);
double square_perimeter(const Square& s);
double square_area(const Square& s);
int main();

double PI = 3.141592653589793;

Angle make_angle(double deg) {
    if (((deg < 0.0) || (deg > 360.0))) {
        throw std::runtime_error(std::string("degrees must be between 0 and 360"));
    }
    return Angle{.degrees = deg};
}

Side make_side(double length, const Angle& angle) {
    if ((length <= 0.0)) {
        throw std::runtime_error(std::string("length must be positive"));
    }
    return Side{.length = length, .angle = angle, .next = -int64_t(1)};
}

double ellipse_area(const Ellipse& e) {
    return ((PI * e.major) * e.minor);
}

double ellipse_perimeter(const Ellipse& e) {
    return (PI * (e.major + e.minor));
}

double circle_area(const Circle& c) {
    Ellipse e = Ellipse{.major = c.radius, .minor = c.radius};
    double area = ellipse_area(e);
    return area;
}

double circle_perimeter(const Circle& c) {
    Ellipse e = Ellipse{.major = c.radius, .minor = c.radius};
    double per = ellipse_perimeter(e);
    return per;
}

double circle_diameter(const Circle& c) {
    return (c.radius * 2.0);
}

double circle_max_parts(double num_cuts) {
    if ((num_cuts < 0.0)) {
        throw std::runtime_error(std::string("num_cuts must be positive"));
    }
    return (((num_cuts + 2.0) + (num_cuts * num_cuts)) * 0.5);
}

Polygon make_polygon() {
    std::vector<Side> s = {};
    return Polygon{.sides = s};
}

void polygon_add_side(Polygon& p, const Side& s) {
    p.sides = ([&]{ auto __tmp = p.sides; __tmp.push_back(s); return __tmp; }());
}

Side polygon_get_side(const Polygon& p, int64_t index) {
    return p.sides[index];
}

void polygon_set_side(Polygon& p, int64_t index, const Side& s) {
    std::vector<Side> tmp = p.sides;
    tmp[index] = s;
    p.sides = tmp;
}

Rectangle make_rectangle(double short_len, double long_len) {
    if (((short_len <= 0.0) || (long_len <= 0.0))) {
        throw std::runtime_error(std::string("length must be positive"));
    }
    Side _short = make_side(short_len, make_angle(90.0));
    Side _long = make_side(long_len, make_angle(90.0));
    Polygon p = make_polygon();
    polygon_add_side(p, _short);
    polygon_add_side(p, _long);
    return Rectangle{.short_side = _short, .long_side = _long, .poly = p};
}

double rectangle_perimeter(const Rectangle& r) {
    return ((r.short_side.length + r.long_side.length) * 2.0);
}

double rectangle_area(const Rectangle& r) {
    return (r.short_side.length * r.long_side.length);
}

Square make_square(double side_len) {
    Rectangle rect = make_rectangle(side_len, side_len);
    return Square{.side = rect.short_side, .rect = rect};
}

double square_perimeter(const Square& s) {
    double p = rectangle_perimeter(s.rect);
    return p;
}

double square_area(const Square& s) {
    double a = rectangle_area(s.rect);
    return a;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Angle a = make_angle(90.0);
        { std::ostringstream __ss; double __dv = a.degrees; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        Side s = make_side(5.0, a);
        { std::ostringstream __ss; double __dv = s.length; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        Ellipse e = Ellipse{.major = 5.0, .minor = 10.0};
        { std::ostringstream __ss; double __dv = ellipse_area(e); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = ellipse_perimeter(e); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        Circle c = Circle{.radius = 5.0};
        { std::ostringstream __ss; double __dv = circle_area(c); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = circle_perimeter(c); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = circle_diameter(c); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = circle_max_parts(7.0); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        Rectangle r = make_rectangle(5.0, 10.0);
        { std::ostringstream __ss; double __dv = rectangle_perimeter(r); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = rectangle_area(r); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        Square q = make_square(5.0);
        { std::ostringstream __ss; double __dv = square_perimeter(q); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = square_area(q); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
