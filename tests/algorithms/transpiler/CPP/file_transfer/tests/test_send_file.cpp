// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:52:16 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct ConnMock;
struct SocketMock;
struct FileMock;

std::ostream& operator<<(std::ostream&, const ConnMock&);
std::ostream& operator<<(std::ostream&, const SocketMock&);
std::ostream& operator<<(std::ostream&, const FileMock&);


struct ConnMock {
    int64_t recv_called;
    int64_t send_called;
    int64_t close_called;
    auto operator<=>(const ConnMock&) const = default;
};

struct SocketMock {
    int64_t bind_called;
    int64_t listen_called;
    int64_t accept_called;
    int64_t shutdown_called;
    int64_t close_called;
    ConnMock conn;
    auto operator<=>(const SocketMock&) const = default;
};

struct FileMock {
    int64_t read_called;
    std::vector<int64_t> data;
    auto operator<=>(const FileMock&) const = default;
};

std::ostream& operator<<(std::ostream& os, const ConnMock& v) {
    os << '{' << "'recv_called': "<< v.recv_called
 << ", " << "'send_called': "<< v.send_called
 << ", " << "'close_called': "<< v.close_called
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const SocketMock& v) {
    os << '{' << "'bind_called': "<< v.bind_called
 << ", " << "'listen_called': "<< v.listen_called
 << ", " << "'accept_called': "<< v.accept_called
 << ", " << "'shutdown_called': "<< v.shutdown_called
 << ", " << "'close_called': "<< v.close_called
 << ", " << "'conn': "<< v.conn
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const FileMock& v) {
    os << '{' << "'read_called': "<< v.read_called
 << ", " << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << '}';
    return os;
}

ConnMock make_conn_mock();
int64_t conn_recv(ConnMock& conn, int64_t size);
void conn_send(ConnMock& conn, int64_t data);
void conn_close(ConnMock& conn);
SocketMock make_socket_mock(const ConnMock& conn);
void socket_bind(SocketMock& sock);
void socket_listen(SocketMock& sock);
ConnMock socket_accept(SocketMock& sock);
void socket_shutdown(SocketMock& sock);
void socket_close(SocketMock& sock);
FileMock make_file_mock(const std::vector<int64_t>& values);
int64_t file_read(FileMock& f, int64_t size);
FileMock file_open();
void send_file(SocketMock& sock, FileMock& f);
std::string test_send_file_running_as_expected();
int main();

ConnMock make_conn_mock() {
    return ConnMock{.recv_called = int64_t(0), .send_called = int64_t(0), .close_called = int64_t(0)};
}

int64_t conn_recv(ConnMock& conn, int64_t size) {
    conn.recv_called = (conn.recv_called + int64_t(1));
    return int64_t(0);
}

void conn_send(ConnMock& conn, int64_t data) {
    conn.send_called = (conn.send_called + int64_t(1));
}

void conn_close(ConnMock& conn) {
    conn.close_called = (conn.close_called + int64_t(1));
}

SocketMock make_socket_mock(const ConnMock& conn) {
    return SocketMock{.bind_called = int64_t(0), .listen_called = int64_t(0), .accept_called = int64_t(0), .shutdown_called = int64_t(0), .close_called = int64_t(0), .conn = conn};
}

void socket_bind(SocketMock& sock) {
    sock.bind_called = (sock.bind_called + int64_t(1));
}

void socket_listen(SocketMock& sock) {
    sock.listen_called = (sock.listen_called + int64_t(1));
}

ConnMock socket_accept(SocketMock& sock) {
    sock.accept_called = (sock.accept_called + int64_t(1));
    return sock.conn;
}

void socket_shutdown(SocketMock& sock) {
    sock.shutdown_called = (sock.shutdown_called + int64_t(1));
}

void socket_close(SocketMock& sock) {
    sock.close_called = (sock.close_called + int64_t(1));
}

FileMock make_file_mock(const std::vector<int64_t>& values) {
    return FileMock{.read_called = int64_t(0), .data = values};
}

int64_t file_read(FileMock& f, int64_t size) {
    if ((f.read_called < f.data.size())) {
        int64_t value = f.data[f.read_called];
        f.read_called = (f.read_called + int64_t(1));
        return value;
    }
    f.read_called = (f.read_called + int64_t(1));
    return int64_t(0);
}

FileMock file_open() {
    return make_file_mock(std::vector<int64_t>{int64_t(1), int64_t(0)});
}

void send_file(SocketMock& sock, FileMock& f) {
    socket_bind(sock);
    socket_listen(sock);
    ConnMock conn = socket_accept(sock);
    int64_t _ = conn_recv(conn, int64_t(1024));
    int64_t data = file_read(f, int64_t(1024));
    while ((data != int64_t(0))) {
        conn_send(conn, data);
        data = file_read(f, int64_t(1024));
    }
    conn_close(conn);
    socket_shutdown(sock);
    socket_close(sock);
}

std::string test_send_file_running_as_expected() {
    ConnMock conn = make_conn_mock();
    SocketMock sock = make_socket_mock(conn);
    FileMock f = file_open();
    send_file(sock, f);
    if ((((((((((sock.bind_called == int64_t(1)) && (sock.listen_called == int64_t(1))) && (sock.accept_called == int64_t(1))) && (conn.recv_called == int64_t(1))) && (f.read_called >= int64_t(1))) && (conn.send_called == int64_t(1))) && (conn.close_called == int64_t(1))) && (sock.shutdown_called == int64_t(1))) && (sock.close_called == int64_t(1)))) {
        return std::string("pass");
    }
    return std::string("fail");
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << test_send_file_running_as_expected();
        std::cout << std::endl;
    }
    return 0;
}
