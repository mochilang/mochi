// Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:00:36 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <map>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return std::to_string(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::string key(int64_t x, int64_t y);
std::map<std::string, double> joint_probability_distribution(const std::vector<int64_t>& x_values, const std::vector<int64_t>& y_values, const std::vector<double>& x_probabilities, const std::vector<double>& y_probabilities);
double expectation(const std::vector<int64_t>& values, const std::vector<double>& probabilities);
double variance(const std::vector<int64_t>& values, const std::vector<double>& probabilities);
double covariance(const std::vector<int64_t>& x_values, const std::vector<int64_t>& y_values, const std::vector<double>& x_probabilities, const std::vector<double>& y_probabilities);
double sqrtApprox(double x);
double standard_deviation(double v);
int main();

std::string key(int64_t x, int64_t y) {
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << x; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()));
}

std::map<std::string, double> joint_probability_distribution(const std::vector<int64_t>& x_values, const std::vector<int64_t>& y_values, const std::vector<double>& x_probabilities, const std::vector<double>& y_probabilities) {
    std::map<std::string, double> result = {};
    int64_t i = int64_t(0);
    while ((i < x_values.size())) {
        int64_t j = int64_t(0);
        while ((j < y_values.size())) {
            std::string k = key(_index(x_values, i), _index(y_values, j));
            result[k] = (_index(x_probabilities, i) * _index(y_probabilities, j));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return result;
}

double expectation(const std::vector<int64_t>& values, const std::vector<double>& probabilities) {
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < values.size())) {
        total = (total + ((double)(_index(values, i)) * _index(probabilities, i)));
        i = (i + int64_t(1));
    }
    return total;
}

double variance(const std::vector<int64_t>& values, const std::vector<double>& probabilities) {
    double mean = expectation(values, probabilities);
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < values.size())) {
        double diff = ((double)(_index(values, i)) - mean);
        total = (total + ((diff * diff) * _index(probabilities, i)));
        i = (i + int64_t(1));
    }
    return total;
}

double covariance(const std::vector<int64_t>& x_values, const std::vector<int64_t>& y_values, const std::vector<double>& x_probabilities, const std::vector<double>& y_probabilities) {
    double mean_x = expectation(x_values, x_probabilities);
    double mean_y = expectation(y_values, y_probabilities);
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < x_values.size())) {
        int64_t j = int64_t(0);
        while ((j < y_values.size())) {
            double diff_x = ((double)(_index(x_values, i)) - mean_x);
            double diff_y = ((double)(_index(y_values, j)) - mean_y);
            total = (total + (((diff_x * diff_y) * _index(x_probabilities, i)) * _index(y_probabilities, j)));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return total;
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double standard_deviation(double v) {
    return sqrtApprox(v);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<int64_t> x_values = std::vector<int64_t>{int64_t(1), int64_t(2)};
        std::vector<int64_t> y_values = std::vector<int64_t>{-int64_t(2), int64_t(5), int64_t(8)};
        std::vector<double> x_probabilities = std::vector<double>{0.7, 0.3};
        std::vector<double> y_probabilities = std::vector<double>{0.3, 0.5, 0.2};
        std::map<std::string, double> jpd = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities);
        int64_t i = int64_t(0);
        while ((i < x_values.size())) {
            int64_t j = int64_t(0);
            while ((j < y_values.size())) {
                std::string k = key(_index(x_values, i), _index(y_values, j));
                double prob = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return double{}; return __it->second; })(jpd);
                std::cout << ((k + std::string("=")) + std::to_string(prob));
                std::cout << std::endl;
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        double ex = expectation(x_values, x_probabilities);
        double ey = expectation(y_values, y_probabilities);
        double vx = variance(x_values, x_probabilities);
        double vy = variance(y_values, y_probabilities);
        double cov = covariance(x_values, y_values, x_probabilities, y_probabilities);
        std::cout << (std::string("Ex=") + std::to_string(ex));
        std::cout << std::endl;
        std::cout << (std::string("Ey=") + std::to_string(ey));
        std::cout << std::endl;
        std::cout << (std::string("Vx=") + std::to_string(vx));
        std::cout << std::endl;
        std::cout << (std::string("Vy=") + std::to_string(vy));
        std::cout << std::endl;
        std::cout << (std::string("Cov=") + std::to_string(cov));
        std::cout << std::endl;
        std::cout << (std::string("Sx=") + std::to_string(standard_deviation(vx)));
        std::cout << std::endl;
        std::cout << (std::string("Sy=") + std::to_string(standard_deviation(vy)));
        std::cout << std::endl;
    }
    return 0;
}
