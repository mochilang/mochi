// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:37:48 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Complex;

std::ostream& operator<<(std::ostream&, const Complex&);


struct Complex {
    double re;
    double im;
    auto operator<=>(const Complex&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Complex& v) {
    os << '{' << "'re': "<< std::fixed << std::setprecision(1) << v.re
 << ", " << "'im': "<< std::fixed << std::setprecision(1) << v.im
 << '}';
    return os;
}

Complex c_add(const Complex& a, const Complex& b);
Complex c_sub(const Complex& a, const Complex& b);
Complex c_mul(const Complex& a, const Complex& b);
Complex c_mul_scalar(const Complex& a, double s);
Complex c_div_scalar(const Complex& a, double s);
double sin_taylor(double x);
double cos_taylor(double x);
Complex exp_i(double theta);
std::vector<Complex> make_complex_list(int64_t n, const Complex& value);
std::vector<Complex> fft(const std::vector<Complex>& a, bool invert);
double _floor(double x);
double pow10(int64_t n);
double round_to(double x, int64_t ndigits);
std::string list_to_string(const std::vector<double>& l);
std::vector<double> multiply_poly(const std::vector<double>& a, const std::vector<double>& b);
int main();

double PI = 3.141592653589793;
std::vector<double> A = std::vector<double>{0.0, 1.0, 0.0, 2.0};
std::vector<double> B = std::vector<double>{2.0, 3.0, 4.0, 0.0};
std::vector<double> product = std::vector<double>{};

Complex c_add(const Complex& a, const Complex& b) {
    return Complex{.re = (a.re + b.re), .im = (a.im + b.im)};
}

Complex c_sub(const Complex& a, const Complex& b) {
    return Complex{.re = (a.re - b.re), .im = (a.im - b.im)};
}

Complex c_mul(const Complex& a, const Complex& b) {
    return Complex{.re = ((a.re * b.re) - (a.im * b.im)), .im = ((a.re * b.im) + (a.im * b.re))};
}

Complex c_mul_scalar(const Complex& a, double s) {
    return Complex{.re = (a.re * s), .im = (a.im * s)};
}

Complex c_div_scalar(const Complex& a, double s) {
    return Complex{.re = ((double)(a.re) / (s)), .im = ((double)(a.im) / (s))};
}

double sin_taylor(double x) {
    double term = x;
    double sum = x;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        double k1 = (2.0 * (double)(i));
        double k2 = (k1 + 1.0);
        term = ((double)(((-term * x) * x)) / ((k1 * k2)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double cos_taylor(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        double k1 = ((2.0 * (double)(i)) - 1.0);
        double k2 = (2.0 * (double)(i));
        term = ((double)(((-term * x) * x)) / ((k1 * k2)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

Complex exp_i(double theta) {
    return Complex{.re = cos_taylor(theta), .im = sin_taylor(theta)};
}

std::vector<Complex> make_complex_list(int64_t n, const Complex& value) {
    std::vector<Complex> arr = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        arr = ([&]{ auto& __tmp = arr; __tmp.push_back(value); return __tmp; }());
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<Complex> fft(const std::vector<Complex>& a, bool invert) {
    int64_t n = a.size();
    if ((n == int64_t(1))) {
        return std::vector<Complex>{_index(a, int64_t(0))};
    }
    std::vector<Complex> a0 = {};
    std::vector<Complex> a1 = {};
    int64_t i = int64_t(0);
    while ((i < (n / int64_t(2)))) {
        a0 = ([&]{ auto& __tmp = a0; __tmp.push_back(_index(a, (int64_t(2) * i))); return __tmp; }());
        a1 = ([&]{ auto& __tmp = a1; __tmp.push_back(_index(a, ((int64_t(2) * i) + int64_t(1)))); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<Complex> _y0 = fft(a0, invert);
    std::vector<Complex> _y1 = fft(a1, invert);
    double angle = (((double)((2.0 * PI)) / ((double)(n))) * (invert ? -1.0 : 1.0));
    Complex w = Complex{.re = 1.0, .im = 0.0};
    Complex wn = exp_i(angle);
    std::vector<Complex> y = make_complex_list(n, Complex{.re = 0.0, .im = 0.0});
    i = int64_t(0);
    while ((i < (n / int64_t(2)))) {
        Complex t = c_mul(w, _index(_y1, i));
        Complex u = _index(_y0, i);
        Complex even = c_add(u, t);
        Complex odd = c_sub(u, t);
        if (invert) {
            even = c_div_scalar(even, 2.0);
            odd = c_div_scalar(odd, 2.0);
        }
        y[i] = even;
        y[(i + (n / int64_t(2)))] = odd;
        w = c_mul(w, wn);
        i = (i + int64_t(1));
    }
    return y;
}

double _floor(double x) {
    int64_t i = (int64_t)(x);
    if (((double)(i) > x)) {
        i = (i - int64_t(1));
    }
    return (double)(i);
}

double pow10(int64_t n) {
    double p = 1.0;
    int64_t i = int64_t(0);
    while ((i < n)) {
        p = (p * 10.0);
        i = (i + int64_t(1));
    }
    return p;
}

double round_to(double x, int64_t ndigits) {
    double m = pow10(ndigits);
    return ((double)(_floor(((x * m) + 0.5))) / (m));
}

std::string list_to_string(const std::vector<double>& l) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < l.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(l, i); return ss.str(); }()));
        if (((i + int64_t(1)) < l.size())) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

std::vector<double> multiply_poly(const std::vector<double>& a, const std::vector<double>& b) {
    int64_t n = int64_t(1);
    while ((n < ((a.size() + b.size()) - int64_t(1)))) {
        n = (n * int64_t(2));
    }
    std::vector<Complex> fa = make_complex_list(n, Complex{.re = 0.0, .im = 0.0});
    std::vector<Complex> fb = make_complex_list(n, Complex{.re = 0.0, .im = 0.0});
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        fa[i] = Complex{.re = _index(a, i), .im = 0.0};
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < b.size())) {
        fb[i] = Complex{.re = _index(b, i), .im = 0.0};
        i = (i + int64_t(1));
    }
    fa = fft(fa, false);
    fb = fft(fb, false);
    i = int64_t(0);
    while ((i < n)) {
        fa[i] = c_mul(_index(fa, i), _index(fb, i));
        i = (i + int64_t(1));
    }
    fa = fft(fa, true);
    std::vector<double> res = {};
    i = int64_t(0);
    while ((i < ((a.size() + b.size()) - int64_t(1)))) {
        Complex val = _index(fa, i);
        res = ([&]{ auto& __tmp = res; __tmp.push_back(round_to(val.re, int64_t(8))); return __tmp; }());
        i = (i + int64_t(1));
    }
    while (((res.size() > int64_t(0)) && (_index(res, (res.size() - int64_t(1))) == 0.0))) {
        res = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (res.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(res.size() - int64_t(1))); })(res);
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        product = multiply_poly(A, B);
        std::cout << list_to_string(product);
        std::cout << std::endl;
    }
    return 0;
}
