// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:15:30 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double rand_float();
double rand_range(double min_val, double max_val);
double abs_float(double x);
double sqrtApprox(double x);
void pi_estimator(int64_t iterations);
double area_under_curve_estimator(int64_t iterations, std::function<double(double)> f, double min_value, double max_value);
void area_under_line_estimator_check(int64_t iterations, double min_value, double max_value);
void pi_estimator_using_area_under_curve(int64_t iterations);
int main();

double PI = 3.141592653589793;
int64_t rand_seed = 0;

double rand_float() {
    rand_seed = (((int64_t(1103515245) * rand_seed) + int64_t(12345)) % int64_t(2147483648));
    return ((double)((double)(rand_seed)) / (2147483648.0));
}

double rand_range(double min_val, double max_val) {
    return ((rand_float() * (max_val - min_val)) + min_val);
}

double abs_float(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double sqrtApprox(double x) {
    if ((x == 0.0)) {
        return 0.0;
    }
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

void pi_estimator(int64_t iterations) {
    double inside = 0.0;
    int64_t i = int64_t(0);
    while ((i < iterations)) {
        double x = rand_range(-1.0, 1.0);
        double y = rand_range(-1.0, 1.0);
        if ((((x * x) + (y * y)) <= 1.0)) {
            inside = (inside + 1.0);
        }
        i = (i + int64_t(1));
    }
    double proportion = ((double)(inside) / ((double)(iterations)));
    double pi_estimate = (proportion * 4.0);
    std::cout << std::string("The estimated value of pi is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = pi_estimate; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("The numpy value of pi is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = PI; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("The total error is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = abs_float((PI - pi_estimate)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
}

double area_under_curve_estimator(int64_t iterations, std::function<double(double)> f, double min_value, double max_value) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < iterations)) {
        double x = rand_range(min_value, max_value);
        sum = (sum + f(x));
        i = (i + int64_t(1));
    }
    double expected = ((double)(sum) / ((double)(iterations)));
    return (expected * (max_value - min_value));
}

void area_under_line_estimator_check(int64_t iterations, double min_value, double max_value) {
    std::function<double(double)> identity_function;
    identity_function = [=, &identity_function](double x) mutable {
        return x;
    };
    double estimated_value = area_under_curve_estimator(iterations, (std::function<double(double)>)(identity_function), min_value, max_value);
    double expected_value = ((double)(((max_value * max_value) - (min_value * min_value))) / (2.0));
    std::cout << std::string("******************");
    std::cout << std::endl;
    std::cout << std::string("Estimating area under y=x where x varies from");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = min_value; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("Estimated value is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = estimated_value; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("Expected value is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = expected_value; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("Total error is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = abs_float((estimated_value - expected_value)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("******************");
    std::cout << std::endl;
}

void pi_estimator_using_area_under_curve(int64_t iterations) {
    std::function<double(double)> semi_circle;
    semi_circle = [=, &semi_circle](double x) mutable {
        double y = (4.0 - (x * x));
        double s = sqrtApprox(y);
        return s;
    };
    double estimated_value = area_under_curve_estimator(iterations, (std::function<double(double)>)(semi_circle), 0.0, 2.0);
    std::cout << std::string("******************");
    std::cout << std::endl;
    std::cout << std::string("Estimating pi using area_under_curve_estimator");
    std::cout << std::endl;
    std::cout << std::string("Estimated value is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = estimated_value; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("Expected value is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = PI; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("Total error is");
    std::cout << " ";
    { std::ostringstream __ss; double __dv = abs_float((estimated_value - PI)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    std::cout << std::string("******************");
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        pi_estimator(int64_t(1000));
        area_under_line_estimator_check(int64_t(1000), 0.0, 1.0);
        pi_estimator_using_area_under_curve(int64_t(1000));
    }
    return 0;
}
