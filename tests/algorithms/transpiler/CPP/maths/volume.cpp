// Generated by Mochi transpiler v0.10.61 on 2025-08-08 18:17:03 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double minf(double a, double b);
double maxf(double a, double b);
double vol_cube(double side_length);
double vol_spherical_cap(double height, double radius);
double vol_sphere(double radius);
double vol_spheres_intersect(double radius_1, double radius_2, double centers_distance);
double vol_spheres_union(double radius_1, double radius_2, double centers_distance);
double vol_cuboid(double width, double height, double length);
double vol_cone(double area_of_base, double height);
double vol_right_circ_cone(double radius, double height);
double vol_prism(double area_of_base, double height);
double vol_pyramid(double area_of_base, double height);
double vol_hemisphere(double radius);
double vol_circular_cylinder(double radius, double height);
double vol_hollow_circular_cylinder(double inner_radius, double outer_radius, double height);
double vol_conical_frustum(double height, double radius_1, double radius_2);
double vol_torus(double torus_radius, double tube_radius);
double vol_icosahedron(double tri_side);
int main();

double PI = 3.141592653589793;
double SQRT5 = 2.23606797749979;

double minf(double a, double b) {
    if ((a < b)) {
        return a;
    }
    return b;
}

double maxf(double a, double b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

double vol_cube(double side_length) {
    if ((side_length < 0.0)) {
        throw std::runtime_error(std::string("vol_cube() only accepts non-negative values"));
    }
    return ((side_length * side_length) * side_length);
}

double vol_spherical_cap(double height, double radius) {
    if (((height < 0.0) || (radius < 0.0))) {
        throw std::runtime_error(std::string("vol_spherical_cap() only accepts non-negative values"));
    }
    return ((((((double)(1.0) / (3.0)) * PI) * height) * height) * ((3.0 * radius) - height));
}

double vol_sphere(double radius) {
    if ((radius < 0.0)) {
        throw std::runtime_error(std::string("vol_sphere() only accepts non-negative values"));
    }
    return ((((((double)(4.0) / (3.0)) * PI) * radius) * radius) * radius);
}

double vol_spheres_intersect(double radius_1, double radius_2, double centers_distance) {
    if ((((radius_1 < 0.0) || (radius_2 < 0.0)) || (centers_distance < 0.0))) {
        throw std::runtime_error(std::string("vol_spheres_intersect() only accepts non-negative values"));
    }
    if ((centers_distance == 0.0)) {
        return vol_sphere(minf(radius_1, radius_2));
    }
    double h1 = ((double)((((radius_1 - radius_2) + centers_distance) * ((radius_1 + radius_2) - centers_distance))) / ((2.0 * centers_distance)));
    double h2 = ((double)((((radius_2 - radius_1) + centers_distance) * ((radius_2 + radius_1) - centers_distance))) / ((2.0 * centers_distance)));
    return (vol_spherical_cap(h1, radius_2) + vol_spherical_cap(h2, radius_1));
}

double vol_spheres_union(double radius_1, double radius_2, double centers_distance) {
    if ((((radius_1 <= 0.0) || (radius_2 <= 0.0)) || (centers_distance < 0.0))) {
        throw std::runtime_error(std::string("vol_spheres_union() only accepts non-negative values, non-zero radius"));
    }
    if ((centers_distance == 0.0)) {
        return vol_sphere(maxf(radius_1, radius_2));
    }
    return ((vol_sphere(radius_1) + vol_sphere(radius_2)) - vol_spheres_intersect(radius_1, radius_2, centers_distance));
}

double vol_cuboid(double width, double height, double length) {
    if ((((width < 0.0) || (height < 0.0)) || (length < 0.0))) {
        throw std::runtime_error(std::string("vol_cuboid() only accepts non-negative values"));
    }
    return ((width * height) * length);
}

double vol_cone(double area_of_base, double height) {
    if (((height < 0.0) || (area_of_base < 0.0))) {
        throw std::runtime_error(std::string("vol_cone() only accepts non-negative values"));
    }
    return ((double)((area_of_base * height)) / (3.0));
}

double vol_right_circ_cone(double radius, double height) {
    if (((height < 0.0) || (radius < 0.0))) {
        throw std::runtime_error(std::string("vol_right_circ_cone() only accepts non-negative values"));
    }
    return ((double)((((PI * radius) * radius) * height)) / (3.0));
}

double vol_prism(double area_of_base, double height) {
    if (((height < 0.0) || (area_of_base < 0.0))) {
        throw std::runtime_error(std::string("vol_prism() only accepts non-negative values"));
    }
    return (area_of_base * height);
}

double vol_pyramid(double area_of_base, double height) {
    if (((height < 0.0) || (area_of_base < 0.0))) {
        throw std::runtime_error(std::string("vol_pyramid() only accepts non-negative values"));
    }
    return ((double)((area_of_base * height)) / (3.0));
}

double vol_hemisphere(double radius) {
    if ((radius < 0.0)) {
        throw std::runtime_error(std::string("vol_hemisphere() only accepts non-negative values"));
    }
    return ((double)(((((radius * radius) * radius) * PI) * 2.0)) / (3.0));
}

double vol_circular_cylinder(double radius, double height) {
    if (((height < 0.0) || (radius < 0.0))) {
        throw std::runtime_error(std::string("vol_circular_cylinder() only accepts non-negative values"));
    }
    return (((radius * radius) * height) * PI);
}

double vol_hollow_circular_cylinder(double inner_radius, double outer_radius, double height) {
    if ((((inner_radius < 0.0) || (outer_radius < 0.0)) || (height < 0.0))) {
        throw std::runtime_error(std::string("vol_hollow_circular_cylinder() only accepts non-negative values"));
    }
    if ((outer_radius <= inner_radius)) {
        throw std::runtime_error(std::string("outer_radius must be greater than inner_radius"));
    }
    return ((PI * ((outer_radius * outer_radius) - (inner_radius * inner_radius))) * height);
}

double vol_conical_frustum(double height, double radius_1, double radius_2) {
    if ((((radius_1 < 0.0) || (radius_2 < 0.0)) || (height < 0.0))) {
        throw std::runtime_error(std::string("vol_conical_frustum() only accepts non-negative values"));
    }
    return (((((double)(1.0) / (3.0)) * PI) * height) * (((radius_1 * radius_1) + (radius_2 * radius_2)) + (radius_1 * radius_2)));
}

double vol_torus(double torus_radius, double tube_radius) {
    if (((torus_radius < 0.0) || (tube_radius < 0.0))) {
        throw std::runtime_error(std::string("vol_torus() only accepts non-negative values"));
    }
    return (((((2.0 * PI) * PI) * torus_radius) * tube_radius) * tube_radius);
}

double vol_icosahedron(double tri_side) {
    if ((tri_side < 0.0)) {
        throw std::runtime_error(std::string("vol_icosahedron() only accepts non-negative values"));
    }
    return ((double)(((((tri_side * tri_side) * tri_side) * (3.0 + SQRT5)) * 5.0)) / (12.0));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << std::string("Volumes:");
        std::cout << std::endl;
        std::cout << (std::string("Cube: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_cube(2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Cuboid: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_cuboid(2.0, 2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Cone: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_cone(2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Right Circular Cone: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_right_circ_cone(2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Prism: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_prism(2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Pyramid: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_pyramid(2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Sphere: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_sphere(2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Hemisphere: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_hemisphere(2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Circular Cylinder: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_circular_cylinder(2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Torus: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_torus(2.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Conical Frustum: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_conical_frustum(2.0, 2.0, 4.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Spherical cap: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_spherical_cap(1.0, 2.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Spheres intersection: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_spheres_intersect(2.0, 2.0, 1.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Spheres union: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_spheres_union(2.0, 2.0, 1.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Hollow Circular Cylinder: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_hollow_circular_cylinder(1.0, 2.0, 3.0); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Icosahedron: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << vol_icosahedron(2.5); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
