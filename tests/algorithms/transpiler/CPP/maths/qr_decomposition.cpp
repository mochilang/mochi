// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:37:35 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct QR;

std::ostream& operator<<(std::ostream&, const QR&);


struct QR {
    std::vector<std::vector<double>> q;
    std::vector<std::vector<double>> r;
    auto operator<=>(const QR&) const = default;
};

std::ostream& operator<<(std::ostream& os, const QR& v) {
    os << '{' << "'q': "<< "["; for(size_t i=0;i<v.q.size();++i){ if(i>0) os << ", "; os << v.q[i]; } os << "]"
 << ", " << "'r': "<< "["; for(size_t i=0;i<v.r.size();++i){ if(i>0) os << ", "; os << v.r[i]; } os << "]"
 << '}';
    return os;
}

double sqrt_approx(double x);
double sign(double x);
double vector_norm(const std::vector<double>& v);
std::vector<std::vector<double>> identity_matrix(int64_t n);
std::vector<std::vector<double>> copy_matrix(const std::vector<std::vector<double>>& a);
std::vector<std::vector<double>> matmul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
QR qr_decomposition(const std::vector<std::vector<double>>& a);
void print_matrix(const std::vector<std::vector<double>>& mat);
int main();

std::vector<std::vector<double>> A = std::vector<std::vector<double>>{};
QR result = QR{};

double sqrt_approx(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double sign(double x) {
    if ((x >= 0.0)) {
        return 1.0;
    } else {
        return -1.0;
    }
}

double vector_norm(const std::vector<double>& v) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        sum = (sum + (_index(v, i) * _index(v, i)));
        i = (i + int64_t(1));
    }
    double n = sqrt_approx(sum);
    return n;
}

std::vector<std::vector<double>> identity_matrix(int64_t n) {
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            if ((i == j)) {
                row = ([&]{ auto& __tmp = row; __tmp.push_back(1.0); return __tmp; }());
            } else {
                row = ([&]{ auto& __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto& __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return mat;
}

std::vector<std::vector<double>> copy_matrix(const std::vector<std::vector<double>>& a) {
    std::vector<std::vector<double>> mat = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(a, i).size())) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(_index(_index(a, i), j)); return __tmp; }());
            j = (j + int64_t(1));
        }
        mat = ([&]{ auto& __tmp = mat; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return mat;
}

std::vector<std::vector<double>> matmul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int64_t m = a.size();
    int64_t n = _index(a, int64_t(0)).size();
    int64_t p = _index(b, int64_t(0)).size();
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < m)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < p)) {
            double sum = 0.0;
            int64_t k = int64_t(0);
            while ((k < n)) {
                sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)));
                k = (k + int64_t(1));
            }
            row = ([&]{ auto& __tmp = row; __tmp.push_back(sum); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

QR qr_decomposition(const std::vector<std::vector<double>>& a) {
    int64_t m = a.size();
    int64_t n = _index(a, int64_t(0)).size();
    int64_t t = ((m < n) ? m : n);
    std::vector<std::vector<double>> q = identity_matrix(m);
    std::vector<std::vector<double>> r = copy_matrix(a);
    int64_t k = int64_t(0);
    while ((k < (t - int64_t(1)))) {
        std::vector<double> x = {};
        int64_t i = k;
        while ((i < m)) {
            x = ([&]{ auto& __tmp = x; __tmp.push_back(_index(_index(r, i), k)); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::vector<double> e1 = {};
        i = int64_t(0);
        while ((i < x.size())) {
            if ((i == int64_t(0))) {
                e1 = ([&]{ auto& __tmp = e1; __tmp.push_back(1.0); return __tmp; }());
            } else {
                e1 = ([&]{ auto& __tmp = e1; __tmp.push_back(0.0); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        double alpha = vector_norm(x);
        double s = (sign(_index(x, int64_t(0))) * alpha);
        std::vector<double> v = {};
        i = int64_t(0);
        while ((i < x.size())) {
            v = ([&]{ auto& __tmp = v; __tmp.push_back((_index(x, i) + (s * _index(e1, i)))); return __tmp; }());
            i = (i + int64_t(1));
        }
        double vnorm = vector_norm(v);
        i = int64_t(0);
        while ((i < v.size())) {
            v[i] = ((double)(_index(v, i)) / (vnorm));
            i = (i + int64_t(1));
        }
        int64_t size = v.size();
        std::vector<std::vector<double>> qk_small = {};
        i = int64_t(0);
        while ((i < size)) {
            std::vector<double> row = {};
            int64_t j = int64_t(0);
            while ((j < size)) {
                double delta = ((i == j) ? 1.0 : 0.0);
                row = ([&]{ auto& __tmp = row; __tmp.push_back((delta - ((2.0 * _index(v, i)) * _index(v, j)))); return __tmp; }());
                j = (j + int64_t(1));
            }
            qk_small = ([&]{ auto& __tmp = qk_small; __tmp.push_back(row); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::vector<std::vector<double>> qk = identity_matrix(m);
        i = int64_t(0);
        while ((i < size)) {
            int64_t j = int64_t(0);
            while ((j < size)) {
                qk[(k + i)][(k + j)] = _index(_index(qk_small, i), j);
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        q = matmul(q, qk);
        r = matmul(qk, r);
        k = (k + int64_t(1));
    }
    return QR{.q = q, .r = r};
}

void print_matrix(const std::vector<std::vector<double>>& mat) {
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < _index(mat, i).size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(_index(mat, i), j); return ss.str(); }()));
            if (((j + int64_t(1)) < _index(mat, i).size())) {
                line = (line + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        A = std::vector<std::vector<double>>{std::vector<double>{12.0, -51.0, 4.0}, std::vector<double>{6.0, 167.0, -68.0}, std::vector<double>{-4.0, 24.0, -41.0}};
        result = qr_decomposition(A);
        print_matrix(result.q);
        print_matrix(result.r);
    }
    return 0;
}
