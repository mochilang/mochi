// Generated by Mochi transpiler v0.10.66 on 2025-08-15 10:24:00 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct TextCounts;

std::ostream& operator<<(std::ostream&, const TextCounts&);


struct TextCounts {
    std::map<std::string, int64_t> single;
    std::map<std::string, int64_t> _double;
    auto operator<=>(const TextCounts&) const = default;
};

std::ostream& operator<<(std::ostream& os, const TextCounts& v) {
    os << '{' << "'single': "<< "{"; bool first_0=true; for(const auto& p: v.single){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'_double': "<< "{"; bool first_1=true; for(const auto& p: v._double){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

double log2(double x);
TextCounts analyze_text(std::string text);
int64_t round_to_int(double x);
void calculate_entropy(std::string text);
int main();

std::string text1 = ((std::string("Behind Winston's back the voice ") + std::string("from the telescreen was still ")) + std::string("babbling and the overfulfilment"));
std::string text3 = ((((((((((std::string("Had repulsive dashwoods suspicion sincerity but advantage now him. ") + std::string("Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. ")) + std::string("You greatest jointure saw horrible. He private he on be imagine ")) + std::string("suppose. Fertile beloved evident through no service elderly is. Blind ")) + std::string("there if every no so at. Own neglected you preferred way sincerity ")) + std::string("delivered his attempted. To of message cottage windows do besides ")) + std::string("against uncivil.  Delightful unreserved impossible few estimating ")) + std::string("men favourable see entreaties. She propriety immediate was improving. ")) + std::string("He or entrance humoured likewise moderate. Much nor game son say ")) + std::string("feel. Fat make met can must form into gate. Me we offending prevailed ")) + std::string("discovery."));

double log2(double x) {
    double k = 0.0;
    double v = x;
    while ((v >= 2.0)) {
        v = ((double)(v) / (2.0));
        k = (k + 1.0);
    }
    while ((v < 1.0)) {
        v = (v * 2.0);
        k = (k - 1.0);
    }
    double z = ((double)((v - 1.0)) / ((v + 1.0)));
    double zpow = z;
    double sum = z;
    int64_t i = int64_t(3);
    while ((i <= int64_t(9))) {
        zpow = ((zpow * z) * z);
        sum = (sum + ((double)(zpow) / ((double)(i))));
        i = (i + int64_t(2));
    }
    double ln2 = 0.6931471805599453;
    return (k + ((double)((2.0 * sum)) / (ln2)));
}

TextCounts analyze_text(std::string text) {
    std::map<std::string, int64_t> single = {};
    std::map<std::string, int64_t> _double = {};
    int64_t n = text.size();
    if ((n == int64_t(0))) {
        return TextCounts{.single = single, ._double = _double};
    }
    std::string last = ([&]{ std::string __s = text; long long __start = (n - int64_t(1)); long long __end = n; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(single, last)) {
        single[last] = (([&](const auto& __m){ auto __it = __m.find(last); if (__it == __m.end()) return int64_t{}; return __it->second; })(single) + int64_t(1));
    } else {
        single[last] = int64_t(1);
    }
    std::string first = ([&]{ std::string __s = text; long long __start = int64_t(0); long long __end = int64_t(1); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
    std::string pair0 = (std::string(" ") + first);
    _double[pair0] = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < (n - int64_t(1)))) {
        std::string ch = ([&]{ std::string __s = text; long long __start = i; long long __end = (i + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(single, ch)) {
            single[ch] = (([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(single) + int64_t(1));
        } else {
            single[ch] = int64_t(1);
        }
        std::string seq = ([&]{ std::string __s = text; long long __start = i; long long __end = (i + int64_t(2)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(_double, seq)) {
            _double[seq] = (([&](const auto& __m){ auto __it = __m.find(seq); if (__it == __m.end()) return int64_t{}; return __it->second; })(_double) + int64_t(1));
        } else {
            _double[seq] = int64_t(1);
        }
        i = (i + int64_t(1));
    }
    return TextCounts{.single = single, ._double = _double};
}

int64_t round_to_int(double x) {
    if ((x < 0.0)) {
        return (int64_t)((x - 0.5));
    }
    return (int64_t)((x + 0.5));
}

void calculate_entropy(std::string text) {
    TextCounts counts = analyze_text(text);
    std::string alphas = std::string(" abcdefghijklmnopqrstuvwxyz");
    int64_t total1 = int64_t(0);
    for (const auto& __p : counts.single) {
        auto ch = __p.first;
        total1 = (total1 + ([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(counts.single));
    }
    double h1 = 0.0;
    int64_t i = int64_t(0);
    while ((i < alphas.size())) {
        std::string ch = ([&]{ std::string __s = alphas; long long __start = i; long long __end = (i + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(counts.single, ch)) {
            double prob = ((double)((double)(([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(counts.single))) / ((double)(total1)));
            h1 = (h1 + (prob * log2(prob)));
        }
        i = (i + int64_t(1));
    }
    double first_entropy = -h1;
    std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << round_to_int(first_entropy); return ss.str(); }()) + std::string(".0"));
    std::cout << std::endl;
    int64_t total2 = int64_t(0);
    for (const auto& __p : counts._double) {
        auto seq = __p.first;
        total2 = (total2 + ([&](const auto& __m){ auto __it = __m.find(seq); if (__it == __m.end()) return int64_t{}; return __it->second; })(counts._double));
    }
    double h2 = 0.0;
    int64_t a0 = int64_t(0);
    while ((a0 < alphas.size())) {
        std::string ch0 = ([&]{ std::string __s = alphas; long long __start = a0; long long __end = (a0 + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        int64_t a1 = int64_t(0);
        while ((a1 < alphas.size())) {
            std::string ch1 = ([&]{ std::string __s = alphas; long long __start = a1; long long __end = (a1 + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            std::string seq = (ch0 + ch1);
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(counts._double, seq)) {
                double prob = ((double)((double)(([&](const auto& __m){ auto __it = __m.find(seq); if (__it == __m.end()) return int64_t{}; return __it->second; })(counts._double))) / ((double)(total2)));
                h2 = (h2 + (prob * log2(prob)));
            }
            a1 = (a1 + int64_t(1));
        }
        a0 = (a0 + int64_t(1));
    }
    double second_entropy = -h2;
    std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << round_to_int(second_entropy); return ss.str(); }()) + std::string(".0"));
    std::cout << std::endl;
    double diff = (second_entropy - first_entropy);
    std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << round_to_int(diff); return ss.str(); }()) + std::string(".0"));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        calculate_entropy(text1);
        calculate_entropy(text3);
    }
    return 0;
}
