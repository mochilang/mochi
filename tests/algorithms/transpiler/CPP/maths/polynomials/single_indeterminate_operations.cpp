// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:36:17 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Polynomial;

std::ostream& operator<<(std::ostream&, const Polynomial&);


struct Polynomial {
    int64_t degree;
    std::vector<double> coefficients;
    auto operator<=>(const Polynomial&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Polynomial& v) {
    os << '{' << "'degree': "<< v.degree
 << ", " << "'coefficients': "<< "["; for(size_t i=0;i<v.coefficients.size();++i){ if(i>0) os << ", "; os << v.coefficients[i]; } os << "]"
 << '}';
    return os;
}

std::vector<double> copy_list(const std::vector<double>& xs);
Polynomial polynomial_new(int64_t degree, const std::vector<double>& coeffs);
Polynomial add(const Polynomial& p, const Polynomial& q);
Polynomial neg(const Polynomial& p);
Polynomial sub(const Polynomial& p, const Polynomial& q);
Polynomial mul(const Polynomial& p, const Polynomial& q);
double power(double base, int64_t exp);
double evaluate(const Polynomial& p, double x);
std::string poly_to_string(const Polynomial& p);
Polynomial derivative(const Polynomial& p);
Polynomial integral(const Polynomial& p, double constant);
bool equals(const Polynomial& p, const Polynomial& q);
bool not_equals(const Polynomial& p, const Polynomial& q);
void test_polynomial();
int main();

std::vector<double> copy_list(const std::vector<double>& xs) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(_index(xs, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

Polynomial polynomial_new(int64_t degree, const std::vector<double>& coeffs) {
    if ((coeffs.size() != (degree + int64_t(1)))) {
        throw std::runtime_error(std::string("The number of coefficients should be equal to the degree + 1."));
    }
    return Polynomial{.degree = degree, .coefficients = copy_list(coeffs)};
}

Polynomial add(const Polynomial& p, const Polynomial& q) {
    if ((p.degree > q.degree)) {
        std::vector<double> coeffs = copy_list(p.coefficients);
        int64_t i = int64_t(0);
        while ((i <= q.degree)) {
            coeffs[i] = (_index(coeffs, i) + _index(q.coefficients, i));
            i = (i + int64_t(1));
        }
        return Polynomial{.degree = p.degree, .coefficients = coeffs};
    } else {
        std::vector<double> coeffs = copy_list(q.coefficients);
        int64_t i = int64_t(0);
        while ((i <= p.degree)) {
            coeffs[i] = (_index(coeffs, i) + _index(p.coefficients, i));
            i = (i + int64_t(1));
        }
        return Polynomial{.degree = q.degree, .coefficients = coeffs};
    }
}

Polynomial neg(const Polynomial& p) {
    std::vector<double> coeffs = {};
    int64_t i = int64_t(0);
    while ((i <= p.degree)) {
        coeffs = ([&]{ auto& __tmp = coeffs; __tmp.push_back(-_index(p.coefficients, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Polynomial{.degree = p.degree, .coefficients = coeffs};
}

Polynomial sub(const Polynomial& p, const Polynomial& q) {
    return add(p, neg(q));
}

Polynomial mul(const Polynomial& p, const Polynomial& q) {
    int64_t size = ((p.degree + q.degree) + int64_t(1));
    std::vector<double> coeffs = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        coeffs = ([&]{ auto& __tmp = coeffs; __tmp.push_back(0.0); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i <= p.degree)) {
        int64_t j = int64_t(0);
        while ((j <= q.degree)) {
            coeffs[(i + j)] = (_index(coeffs, (i + j)) + (_index(p.coefficients, i) * _index(q.coefficients, j)));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return Polynomial{.degree = (p.degree + q.degree), .coefficients = coeffs};
}

double power(double base, int64_t exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    while ((i < exp)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

double evaluate(const Polynomial& p, double x) {
    double result = 0.0;
    int64_t i = int64_t(0);
    while ((i <= p.degree)) {
        result = (result + (_index(p.coefficients, i) * power(x, i)));
        i = (i + int64_t(1));
    }
    return result;
}

std::string poly_to_string(const Polynomial& p) {
    std::string s = std::string("");
    int64_t i = p.degree;
    while ((i >= int64_t(0))) {
        double coeff = _index(p.coefficients, i);
        if ((coeff != 0.0)) {
            if ((s.size() > int64_t(0))) {
                if ((coeff > 0.0)) {
                    s = (s + std::string(" + "));
                } else {
                    s = (s + std::string(" - "));
                }
            } else {
                if ((coeff < 0.0)) {
                    s = (s + std::string("-"));
                }
            }
            double abs_coeff = ((coeff < 0.0) ? -coeff : coeff);
            if ((i == int64_t(0))) {
                s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << abs_coeff; return ss.str(); }()));
            } else             if ((i == int64_t(1))) {
                s = ((s + ([&]{ std::ostringstream ss; ss << std::boolalpha << abs_coeff; return ss.str(); }())) + std::string("x"));
            } else {
                s = (((s + ([&]{ std::ostringstream ss; ss << std::boolalpha << abs_coeff; return ss.str(); }())) + std::string("x^")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()));
            }

        }
        i = (i - int64_t(1));
    }
    if ((s == std::string(""))) {
        s = std::string("0");
    }
    return s;
}

Polynomial derivative(const Polynomial& p) {
    if ((p.degree == int64_t(0))) {
        return Polynomial{.degree = int64_t(0), .coefficients = std::vector<double>{0.0}};
    }
    std::vector<double> coeffs = {};
    int64_t i = int64_t(0);
    while ((i < p.degree)) {
        coeffs = ([&]{ auto& __tmp = coeffs; __tmp.push_back((_index(p.coefficients, (i + int64_t(1))) * (double)((i + int64_t(1))))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Polynomial{.degree = (p.degree - int64_t(1)), .coefficients = coeffs};
}

Polynomial integral(const Polynomial& p, double constant) {
    std::vector<double> coeffs = std::vector<double>{constant};
    int64_t i = int64_t(0);
    while ((i <= p.degree)) {
        coeffs = ([&]{ auto& __tmp = coeffs; __tmp.push_back(((double)(_index(p.coefficients, i)) / ((double)((i + int64_t(1)))))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Polynomial{.degree = (p.degree + int64_t(1)), .coefficients = coeffs};
}

bool equals(const Polynomial& p, const Polynomial& q) {
    if ((p.degree != q.degree)) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i <= p.degree)) {
        if ((_index(p.coefficients, i) != _index(q.coefficients, i))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

bool not_equals(const Polynomial& p, const Polynomial& q) {
    return !equals(p, q);
}

void test_polynomial() {
    Polynomial p = polynomial_new(int64_t(2), std::vector<double>{1.0, 2.0, 3.0});
    Polynomial q = polynomial_new(int64_t(2), std::vector<double>{1.0, 2.0, 3.0});
    if ((poly_to_string(add(p, q)) != std::string("6x^2 + 4x + 2"))) {
        throw std::runtime_error(std::string("add failed"));
    }
    if ((poly_to_string(sub(p, q)) != std::string("0"))) {
        throw std::runtime_error(std::string("sub failed"));
    }
    if ((evaluate(p, 2.0) != 17.0)) {
        throw std::runtime_error(std::string("evaluate failed"));
    }
    if ((poly_to_string(derivative(p)) != std::string("6x + 2"))) {
        throw std::runtime_error(std::string("derivative failed"));
    }
    std::string integ = poly_to_string(integral(p, 0.0));
    if ((integ != std::string("1x^3 + 1x^2 + 1x"))) {
        throw std::runtime_error(std::string("integral failed"));
    }
    if (!equals(p, q)) {
        throw std::runtime_error(std::string("equals failed"));
    }
    if (not_equals(p, q)) {
        throw std::runtime_error(std::string("not_equals failed"));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_polynomial();
        Polynomial p = polynomial_new(int64_t(2), std::vector<double>{1.0, 2.0, 3.0});
        Polynomial d = derivative(p);
        std::cout << poly_to_string(d);
        std::cout << std::endl;
    }
    return 0;
}
