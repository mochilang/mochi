// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:29:43 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double _mod(double x, double m);
double sin_approx(double x);
double cos_approx(double x);
double tan_approx(double x);
double sqrt_approx(double x);
double surface_area_cube(double side_length);
double surface_area_cuboid(double length, double breadth, double height);
double surface_area_sphere(double radius);
double surface_area_hemisphere(double radius);
double surface_area_cone(double radius, double height);
double surface_area_conical_frustum(double radius1, double radius2, double height);
double surface_area_cylinder(double radius, double height);
double surface_area_torus(double torus_radius, double tube_radius);
double area_rectangle(double length, double width);
double area_square(double side_length);
double area_triangle(double base, double height);
double area_triangle_three_sides(double side1, double side2, double side3);
double area_parallelogram(double base, double height);
double area_trapezium(double base1, double base2, double height);
double area_circle(double radius);
double area_ellipse(double radius_x, double radius_y);
double area_rhombus(double diagonal1, double diagonal2);
double area_reg_polygon(int64_t sides, double length);
int main();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
double TRI_THREE_SIDES = 0;

double _mod(double x, double m) {
    return (x - ((double)((int64_t)(((double)(x) / (m)))) * m));
}

double sin_approx(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = (y * y);
    double y3 = (y2 * y);
    double y5 = (y3 * y2);
    double y7 = (y5 * y2);
    return (((y - ((double)(y3) / (6.0))) + ((double)(y5) / (120.0))) - ((double)(y7) / (5040.0)));
}

double cos_approx(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = (y * y);
    double y4 = (y2 * y2);
    double y6 = (y4 * y2);
    return (((1.0 - ((double)(y2) / (2.0))) + ((double)(y4) / (24.0))) - ((double)(y6) / (720.0)));
}

double tan_approx(double x) {
    return ((double)(sin_approx(x)) / (cos_approx(x)));
}

double sqrt_approx(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double surface_area_cube(double side_length) {
    if ((side_length < 0.0)) {
        std::cout << std::string("ValueError: surface_area_cube() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return ((6.0 * side_length) * side_length);
}

double surface_area_cuboid(double length, double breadth, double height) {
    if ((((length < 0.0) || (breadth < 0.0)) || (height < 0.0))) {
        std::cout << std::string("ValueError: surface_area_cuboid() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (2.0 * (((length * breadth) + (breadth * height)) + (length * height)));
}

double surface_area_sphere(double radius) {
    if ((radius < 0.0)) {
        std::cout << std::string("ValueError: surface_area_sphere() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (((4.0 * PI) * radius) * radius);
}

double surface_area_hemisphere(double radius) {
    if ((radius < 0.0)) {
        std::cout << std::string("ValueError: surface_area_hemisphere() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (((3.0 * PI) * radius) * radius);
}

double surface_area_cone(double radius, double height) {
    if (((radius < 0.0) || (height < 0.0))) {
        std::cout << std::string("ValueError: surface_area_cone() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    double slant = sqrt_approx(((height * height) + (radius * radius)));
    return ((PI * radius) * (radius + slant));
}

double surface_area_conical_frustum(double radius1, double radius2, double height) {
    if ((((radius1 < 0.0) || (radius2 < 0.0)) || (height < 0.0))) {
        std::cout << std::string("ValueError: surface_area_conical_frustum() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    double slant = sqrt_approx(((height * height) + ((radius1 - radius2) * (radius1 - radius2))));
    return (PI * (((slant * (radius1 + radius2)) + (radius1 * radius1)) + (radius2 * radius2)));
}

double surface_area_cylinder(double radius, double height) {
    if (((radius < 0.0) || (height < 0.0))) {
        std::cout << std::string("ValueError: surface_area_cylinder() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (((2.0 * PI) * radius) * (height + radius));
}

double surface_area_torus(double torus_radius, double tube_radius) {
    if (((torus_radius < 0.0) || (tube_radius < 0.0))) {
        std::cout << std::string("ValueError: surface_area_torus() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    if ((torus_radius < tube_radius)) {
        std::cout << std::string("ValueError: surface_area_torus() does not support spindle or self intersecting tori");
        std::cout << std::endl;
        return 0.0;
    }
    return ((((4.0 * PI) * PI) * torus_radius) * tube_radius);
}

double area_rectangle(double length, double width) {
    if (((length < 0.0) || (width < 0.0))) {
        std::cout << std::string("ValueError: area_rectangle() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (length * width);
}

double area_square(double side_length) {
    if ((side_length < 0.0)) {
        std::cout << std::string("ValueError: area_square() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (side_length * side_length);
}

double area_triangle(double base, double height) {
    if (((base < 0.0) || (height < 0.0))) {
        std::cout << std::string("ValueError: area_triangle() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return ((double)((base * height)) / (2.0));
}

double area_triangle_three_sides(double side1, double side2, double side3) {
    if ((((side1 < 0.0) || (side2 < 0.0)) || (side3 < 0.0))) {
        std::cout << std::string("ValueError: area_triangle_three_sides() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    if (((((side1 + side2) < side3) || ((side1 + side3) < side2)) || ((side2 + side3) < side1))) {
        std::cout << std::string("ValueError: Given three sides do not form a triangle");
        std::cout << std::endl;
        return 0.0;
    }
    double s = ((double)(((side1 + side2) + side3)) / (2.0));
    double prod = (((s * (s - side1)) * (s - side2)) * (s - side3));
    double res = sqrt_approx(prod);
    return res;
}

double area_parallelogram(double base, double height) {
    if (((base < 0.0) || (height < 0.0))) {
        std::cout << std::string("ValueError: area_parallelogram() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return (base * height);
}

double area_trapezium(double base1, double base2, double height) {
    if ((((base1 < 0.0) || (base2 < 0.0)) || (height < 0.0))) {
        std::cout << std::string("ValueError: area_trapezium() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return ((0.5 * (base1 + base2)) * height);
}

double area_circle(double radius) {
    if ((radius < 0.0)) {
        std::cout << std::string("ValueError: area_circle() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return ((PI * radius) * radius);
}

double area_ellipse(double radius_x, double radius_y) {
    if (((radius_x < 0.0) || (radius_y < 0.0))) {
        std::cout << std::string("ValueError: area_ellipse() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return ((PI * radius_x) * radius_y);
}

double area_rhombus(double diagonal1, double diagonal2) {
    if (((diagonal1 < 0.0) || (diagonal2 < 0.0))) {
        std::cout << std::string("ValueError: area_rhombus() only accepts non-negative values");
        std::cout << std::endl;
        return 0.0;
    }
    return ((0.5 * diagonal1) * diagonal2);
}

double area_reg_polygon(int64_t sides, double length) {
    if ((sides < int64_t(3))) {
        std::cout << std::string("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides");
        std::cout << std::endl;
        return 0.0;
    }
    if ((length < 0.0)) {
        std::cout << std::string("ValueError: area_reg_polygon() only accepts non-negative values as length of a side");
        std::cout << std::endl;
        return 0.0;
    }
    double n = (double)(sides);
    return ((double)(((n * length) * length)) / ((4.0 * tan_approx(((double)(PI) / (n))))));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << std::string("[DEMO] Areas of various geometric shapes:");
        std::cout << std::endl;
        std::cout << (std::string("Rectangle: ") + _to_string(area_rectangle(10.0, 20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Square: ") + _to_string(area_square(10.0)));
        std::cout << std::endl;
        std::cout << (std::string("Triangle: ") + _to_string(area_triangle(10.0, 10.0)));
        std::cout << std::endl;
        TRI_THREE_SIDES = area_triangle_three_sides(5.0, 12.0, 13.0);
        std::cout << (std::string("Triangle Three Sides: ") + _to_string(TRI_THREE_SIDES));
        std::cout << std::endl;
        std::cout << (std::string("Parallelogram: ") + _to_string(area_parallelogram(10.0, 20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Rhombus: ") + _to_string(area_rhombus(10.0, 20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Trapezium: ") + _to_string(area_trapezium(10.0, 20.0, 30.0)));
        std::cout << std::endl;
        std::cout << (std::string("Circle: ") + _to_string(area_circle(20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Ellipse: ") + _to_string(area_ellipse(10.0, 20.0)));
        std::cout << std::endl;
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << std::string("Surface Areas of various geometric shapes:");
        std::cout << std::endl;
        std::cout << (std::string("Cube: ") + _to_string(surface_area_cube(20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Cuboid: ") + _to_string(surface_area_cuboid(10.0, 20.0, 30.0)));
        std::cout << std::endl;
        std::cout << (std::string("Sphere: ") + _to_string(surface_area_sphere(20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Hemisphere: ") + _to_string(surface_area_hemisphere(20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Cone: ") + _to_string(surface_area_cone(10.0, 20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Conical Frustum: ") + _to_string(surface_area_conical_frustum(10.0, 20.0, 30.0)));
        std::cout << std::endl;
        std::cout << (std::string("Cylinder: ") + _to_string(surface_area_cylinder(10.0, 20.0)));
        std::cout << std::endl;
        std::cout << (std::string("Torus: ") + _to_string(surface_area_torus(20.0, 10.0)));
        std::cout << std::endl;
        std::cout << (std::string("Equilateral Triangle: ") + _to_string(area_reg_polygon(int64_t(3), 10.0)));
        std::cout << std::endl;
        std::cout << (std::string("Square: ") + _to_string(area_reg_polygon(int64_t(4), 10.0)));
        std::cout << std::endl;
        std::cout << (std::string("Regular Pentagon: ") + _to_string(area_reg_polygon(int64_t(5), 10.0)));
        std::cout << std::endl;
    }
    return 0;
}
