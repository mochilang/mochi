// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:34:29 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<double> runge_kutta_fehlberg_45(std::function<double(double, double)> func, double x_initial, double y_initial, double step_size, double x_final);
int main();

std::vector<double> runge_kutta_fehlberg_45(std::function<double(double, double)> func, double x_initial, double y_initial, double step_size, double x_final) {
    if ((x_initial >= x_final)) {
        throw std::runtime_error(std::string("The final value of x must be greater than initial value of x."));
    }
    if ((step_size <= 0.0)) {
        throw std::runtime_error(std::string("Step size must be positive."));
    }
    int64_t n = (int64_t)(((double)((x_final - x_initial)) / (step_size)));
    std::vector<double> ys = {};
    double x = x_initial;
    double y = y_initial;
    ys = ([&]{ auto& __tmp = ys; __tmp.push_back(y); return __tmp; }());
    int64_t i = int64_t(0);
    while ((i < n)) {
        double k1 = (step_size * func(x, y));
        double k2 = (step_size * func((x + ((double)(step_size) / (4.0))), (y + ((double)(k1) / (4.0)))));
        double k3 = (step_size * func((x + (((double)(3.0) / (8.0)) * step_size)), ((y + (((double)(3.0) / (32.0)) * k1)) + (((double)(9.0) / (32.0)) * k2))));
        double k4 = (step_size * func((x + (((double)(12.0) / (13.0)) * step_size)), (((y + (((double)(1932.0) / (2197.0)) * k1)) - (((double)(7200.0) / (2197.0)) * k2)) + (((double)(7296.0) / (2197.0)) * k3))));
        double k5 = (step_size * func((x + step_size), ((((y + (((double)(439.0) / (216.0)) * k1)) - (8.0 * k2)) + (((double)(3680.0) / (513.0)) * k3)) - (((double)(845.0) / (4104.0)) * k4))));
        double k6 = (step_size * func((x + ((double)(step_size) / (2.0))), (((((y - (((double)(8.0) / (27.0)) * k1)) + (2.0 * k2)) - (((double)(3544.0) / (2565.0)) * k3)) + (((double)(1859.0) / (4104.0)) * k4)) - (((double)(11.0) / (40.0)) * k5))));
        y = (((((y + (((double)(16.0) / (135.0)) * k1)) + (((double)(6656.0) / (12825.0)) * k3)) + (((double)(28561.0) / (56430.0)) * k4)) - (((double)(9.0) / (50.0)) * k5)) + (((double)(2.0) / (55.0)) * k6));
        x = (x + step_size);
        ys = ([&]{ auto& __tmp = ys; __tmp.push_back(y); return __tmp; }());
        i = (i + int64_t(1));
    }
    return ys;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::function<double(double, double)> f1;
        f1 = [=, &f1](double x, double y) mutable {
            return (1.0 + (y * y));
        };
        std::vector<double> y1 = runge_kutta_fehlberg_45((std::function<double(double, double)>)(f1), 0.0, 0.0, 0.2, 1.0);
        { std::ostringstream __ss; double __dv = _index(y1, int64_t(1)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::function<double(double, double)> f2;
        f2 = [=, &f2](double x, double y) mutable {
            return x;
        };
        std::vector<double> y2 = runge_kutta_fehlberg_45((std::function<double(double, double)>)(f2), -1.0, 0.0, 0.2, 0.0);
        { std::ostringstream __ss; double __dv = _index(y2, int64_t(1)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
