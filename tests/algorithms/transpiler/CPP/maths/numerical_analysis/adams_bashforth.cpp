// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:45:15 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <functional>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double abs_float(double x);
void validate_inputs(const std::vector<double>& x_initials, double step_size, double x_final);
std::string list_to_string(const std::vector<double>& xs);
std::vector<double> adams_bashforth_step2(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final);
std::vector<double> adams_bashforth_step3(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final);
std::vector<double> adams_bashforth_step4(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final);
std::vector<double> adams_bashforth_step5(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final);
double f_x(double x, double y);
double f_xy(double x, double y);
int main();

std::vector<double> y2 = std::vector<double>{};
std::vector<double> y3 = std::vector<double>{};
std::vector<double> y4 = std::vector<double>{};
std::vector<double> y5 = std::vector<double>{};

double abs_float(double x) {
    if ((x < 0.0)) {
        return -x;
    } else {
        return x;
    }
}

void validate_inputs(const std::vector<double>& x_initials, double step_size, double x_final) {
    if ((_index(x_initials, (x_initials.size() - int64_t(1))) >= x_final)) {
        throw std::runtime_error(std::string("The final value of x must be greater than the initial values of x."));
    }
    if ((step_size <= 0.0)) {
        throw std::runtime_error(std::string("Step size must be positive."));
    }
    int64_t i = int64_t(0);
    while ((i < (x_initials.size() - int64_t(1)))) {
        double diff = (_index(x_initials, (i + int64_t(1))) - _index(x_initials, i));
        if ((abs_float((diff - step_size)) > 1e-10)) {
            throw std::runtime_error(std::string("x-values must be equally spaced according to step size."));
        }
        i = (i + int64_t(1));
    }
}

std::string list_to_string(const std::vector<double>& xs) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        s = (s + _to_string(_index(xs, i)));
        if (((i + int64_t(1)) < xs.size())) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

std::vector<double> adams_bashforth_step2(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final) {
    validate_inputs(x_initials, step_size, x_final);
    if (((x_initials.size() != int64_t(2)) || (y_initials.size() != int64_t(2)))) {
        throw std::runtime_error(std::string("Insufficient initial points information."));
    }
    double x0 = _index(x_initials, int64_t(0));
    double x1 = _index(x_initials, int64_t(1));
    std::vector<double> y = {};
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(0))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(1))); return __tmp; }());
    int64_t n = (int64_t)(((double)((x_final - x1)) / (step_size)));
    int64_t i = int64_t(0);
    while ((i < n)) {
        double term = ((3.0 * f(x1, _index(y, (i + int64_t(1))))) - f(x0, _index(y, i)));
        double y_next = (_index(y, (i + int64_t(1))) + (((double)(step_size) / (2.0)) * term));
        y = ([&]{ auto __tmp = y; __tmp.push_back(y_next); return __tmp; }());
        x0 = x1;
        x1 = (x1 + step_size);
        i = (i + int64_t(1));
    }
    return y;
}

std::vector<double> adams_bashforth_step3(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final) {
    validate_inputs(x_initials, step_size, x_final);
    if (((x_initials.size() != int64_t(3)) || (y_initials.size() != int64_t(3)))) {
        throw std::runtime_error(std::string("Insufficient initial points information."));
    }
    double x0 = _index(x_initials, int64_t(0));
    double x1 = _index(x_initials, int64_t(1));
    double x2 = _index(x_initials, int64_t(2));
    std::vector<double> y = {};
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(0))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(1))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(2))); return __tmp; }());
    int64_t n = (int64_t)(((double)((x_final - x2)) / (step_size)));
    int64_t i = int64_t(0);
    while ((i <= n)) {
        double term = (((23.0 * f(x2, _index(y, (i + int64_t(2))))) - (16.0 * f(x1, _index(y, (i + int64_t(1)))))) + (5.0 * f(x0, _index(y, i))));
        double y_next = (_index(y, (i + int64_t(2))) + (((double)(step_size) / (12.0)) * term));
        y = ([&]{ auto __tmp = y; __tmp.push_back(y_next); return __tmp; }());
        x0 = x1;
        x1 = x2;
        x2 = (x2 + step_size);
        i = (i + int64_t(1));
    }
    return y;
}

std::vector<double> adams_bashforth_step4(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final) {
    validate_inputs(x_initials, step_size, x_final);
    if (((x_initials.size() != int64_t(4)) || (y_initials.size() != int64_t(4)))) {
        throw std::runtime_error(std::string("Insufficient initial points information."));
    }
    double x0 = _index(x_initials, int64_t(0));
    double x1 = _index(x_initials, int64_t(1));
    double x2 = _index(x_initials, int64_t(2));
    double x3 = _index(x_initials, int64_t(3));
    std::vector<double> y = {};
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(0))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(1))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(2))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(3))); return __tmp; }());
    int64_t n = (int64_t)(((double)((x_final - x3)) / (step_size)));
    int64_t i = int64_t(0);
    while ((i < n)) {
        double term = ((((55.0 * f(x3, _index(y, (i + int64_t(3))))) - (59.0 * f(x2, _index(y, (i + int64_t(2)))))) + (37.0 * f(x1, _index(y, (i + int64_t(1)))))) - (9.0 * f(x0, _index(y, i))));
        double y_next = (_index(y, (i + int64_t(3))) + (((double)(step_size) / (24.0)) * term));
        y = ([&]{ auto __tmp = y; __tmp.push_back(y_next); return __tmp; }());
        x0 = x1;
        x1 = x2;
        x2 = x3;
        x3 = (x3 + step_size);
        i = (i + int64_t(1));
    }
    return y;
}

std::vector<double> adams_bashforth_step5(std::function<double(double, double)> f, const std::vector<double>& x_initials, const std::vector<double>& y_initials, double step_size, double x_final) {
    validate_inputs(x_initials, step_size, x_final);
    if (((x_initials.size() != int64_t(5)) || (y_initials.size() != int64_t(5)))) {
        throw std::runtime_error(std::string("Insufficient initial points information."));
    }
    double x0 = _index(x_initials, int64_t(0));
    double x1 = _index(x_initials, int64_t(1));
    double x2 = _index(x_initials, int64_t(2));
    double x3 = _index(x_initials, int64_t(3));
    double x4 = _index(x_initials, int64_t(4));
    std::vector<double> y = {};
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(0))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(1))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(2))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(3))); return __tmp; }());
    y = ([&]{ auto __tmp = y; __tmp.push_back(_index(y_initials, int64_t(4))); return __tmp; }());
    int64_t n = (int64_t)(((double)((x_final - x4)) / (step_size)));
    int64_t i = int64_t(0);
    while ((i <= n)) {
        double term = (((((1901.0 * f(x4, _index(y, (i + int64_t(4))))) - (2774.0 * f(x3, _index(y, (i + int64_t(3)))))) - (2616.0 * f(x2, _index(y, (i + int64_t(2)))))) - (1274.0 * f(x1, _index(y, (i + int64_t(1)))))) + (251.0 * f(x0, _index(y, i))));
        double y_next = (_index(y, (i + int64_t(4))) + (((double)(step_size) / (720.0)) * term));
        y = ([&]{ auto __tmp = y; __tmp.push_back(y_next); return __tmp; }());
        x0 = x1;
        x1 = x2;
        x2 = x3;
        x3 = x4;
        x4 = (x4 + step_size);
        i = (i + int64_t(1));
    }
    return y;
}

double f_x(double x, double y) {
    return x;
}

double f_xy(double x, double y) {
    return (x + y);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        y2 = adams_bashforth_step2(f_x, std::vector<double>{0.0, 0.2}, std::vector<double>{0.0, 0.0}, 0.2, 1.0);
        std::cout << list_to_string(y2);
        std::cout << std::endl;
        y3 = adams_bashforth_step3(f_xy, std::vector<double>{0.0, 0.2, 0.4}, std::vector<double>{0.0, 0.0, 0.04}, 0.2, 1.0);
        std::cout << _to_string(_index(y3, int64_t(3)));
        std::cout << std::endl;
        y4 = adams_bashforth_step4(f_xy, std::vector<double>{0.0, 0.2, 0.4, 0.6}, std::vector<double>{0.0, 0.0, 0.04, 0.128}, 0.2, 1.0);
        std::cout << _to_string(_index(y4, int64_t(4)));
        std::cout << std::endl;
        std::cout << _to_string(_index(y4, int64_t(5)));
        std::cout << std::endl;
        y5 = adams_bashforth_step5(f_xy, std::vector<double>{0.0, 0.2, 0.4, 0.6, 0.8}, std::vector<double>{0.0, 0.0214, 0.0214, 0.22211, 0.42536}, 0.2, 1.0);
        std::cout << _to_string(_index(y5, (y5.size() - int64_t(1))));
        std::cout << std::endl;
    }
    return 0;
}
