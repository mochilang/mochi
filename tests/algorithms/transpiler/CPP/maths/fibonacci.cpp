// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:12:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sqrt(double x);
double powf(double x, int64_t n);
int64_t roundf(double x);
std::vector<int64_t> fib_iterative(int64_t n);
int64_t fib_recursive_term(int64_t i);
std::vector<int64_t> fib_recursive(int64_t n);
int64_t fib_recursive_cached_term(int64_t i);
std::vector<int64_t> fib_recursive_cached(int64_t n);
int64_t fib_memoization_term(int64_t num);
std::vector<int64_t> fib_memoization(int64_t n);
std::vector<int64_t> fib_binet(int64_t n);
std::vector<std::vector<int64_t>> matrix_mul(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b);
std::vector<std::vector<int64_t>> matrix_pow(const std::vector<std::vector<int64_t>>& m, int64_t power);
int64_t fib_matrix(int64_t n);
int64_t run_tests();
int main();

std::map<int64_t, int64_t> fib_cache_global = std::map<int64_t, int64_t>{};
std::map<int64_t, int64_t> fib_memo_cache = std::map<int64_t, int64_t>{};

double sqrt(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double powf(double x, int64_t n) {
    double res = 1.0;
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = (res * x);
        i = (i + int64_t(1));
    }
    return res;
}

int64_t roundf(double x) {
    if ((x >= 0.0)) {
        return (int64_t)((x + 0.5));
    }
    return (int64_t)((x - 0.5));
}

std::vector<int64_t> fib_iterative(int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    if ((n == int64_t(0))) {
        return std::vector<int64_t>{int64_t(0)};
    }
    std::vector<int64_t> fib = std::vector<int64_t>{int64_t(0), int64_t(1)};
    int64_t i = int64_t(2);
    while ((i <= n)) {
        fib = ([&]{ auto& __tmp = fib; __tmp.push_back((_index(fib, (i - int64_t(1))) + _index(fib, (i - int64_t(2))))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return fib;
}

int64_t fib_recursive_term(int64_t i) {
    if ((i < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    if ((i < int64_t(2))) {
        return i;
    }
    return (fib_recursive_term((i - int64_t(1))) + fib_recursive_term((i - int64_t(2))));
}

std::vector<int64_t> fib_recursive(int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(fib_recursive_term(i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

int64_t fib_recursive_cached_term(int64_t i) {
    if ((i < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    if ((i < int64_t(2))) {
        return i;
    }
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(fib_cache_global, i)) {
        return ([&](const auto& __m){ auto __it = __m.find(i); if (__it == __m.end()) return int64_t{}; return __it->second; })(fib_cache_global);
    }
    int64_t val = (fib_recursive_cached_term((i - int64_t(1))) + fib_recursive_cached_term((i - int64_t(2))));
    fib_cache_global[i] = val;
    return val;
}

std::vector<int64_t> fib_recursive_cached(int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    std::vector<int64_t> res = {};
    int64_t j = int64_t(0);
    while ((j <= n)) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(fib_recursive_cached_term(j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

int64_t fib_memoization_term(int64_t num) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(fib_memo_cache, num)) {
        return ([&](const auto& __m){ auto __it = __m.find(num); if (__it == __m.end()) return int64_t{}; return __it->second; })(fib_memo_cache);
    }
    int64_t value = (fib_memoization_term((num - int64_t(1))) + fib_memoization_term((num - int64_t(2))));
    fib_memo_cache[num] = value;
    return value;
}

std::vector<int64_t> fib_memoization(int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    std::vector<int64_t> out = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        out = ([&]{ auto& __tmp = out; __tmp.push_back(fib_memoization_term(i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return out;
}

std::vector<int64_t> fib_binet(int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    if ((n >= int64_t(1475))) {
        throw std::runtime_error(std::string("n is too large"));
    }
    double sqrt5 = sqrt(5.0);
    double phi = ((double)((1.0 + sqrt5)) / (2.0));
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        int64_t val = roundf(((double)(powf(phi, i)) / (sqrt5)));
        res = ([&]{ auto& __tmp = res; __tmp.push_back(val); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> matrix_mul(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b) {
    int64_t a00 = ((_index(_index(a, int64_t(0)), int64_t(0)) * _index(_index(b, int64_t(0)), int64_t(0))) + (_index(_index(a, int64_t(0)), int64_t(1)) * _index(_index(b, int64_t(1)), int64_t(0))));
    int64_t a01 = ((_index(_index(a, int64_t(0)), int64_t(0)) * _index(_index(b, int64_t(0)), int64_t(1))) + (_index(_index(a, int64_t(0)), int64_t(1)) * _index(_index(b, int64_t(1)), int64_t(1))));
    int64_t a10 = ((_index(_index(a, int64_t(1)), int64_t(0)) * _index(_index(b, int64_t(0)), int64_t(0))) + (_index(_index(a, int64_t(1)), int64_t(1)) * _index(_index(b, int64_t(1)), int64_t(0))));
    int64_t a11 = ((_index(_index(a, int64_t(1)), int64_t(0)) * _index(_index(b, int64_t(0)), int64_t(1))) + (_index(_index(a, int64_t(1)), int64_t(1)) * _index(_index(b, int64_t(1)), int64_t(1))));
    return std::vector<std::vector<int64_t>>{std::vector<int64_t>{a00, a01}, std::vector<int64_t>{a10, a11}};
}

std::vector<std::vector<int64_t>> matrix_pow(const std::vector<std::vector<int64_t>>& m, int64_t power) {
    if ((power < int64_t(0))) {
        throw std::runtime_error(std::string("power is negative"));
    }
    std::vector<std::vector<int64_t>> result = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1)}};
    std::vector<std::vector<int64_t>> base = m;
    int64_t p = power;
    while ((p > int64_t(0))) {
        if (((p % int64_t(2)) == int64_t(1))) {
            result = matrix_mul(result, base);
        }
        base = matrix_mul(base, base);
        p = (int64_t)((p / int64_t(2)));
    }
    return result;
}

int64_t fib_matrix(int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("n is negative"));
    }
    if ((n == int64_t(0))) {
        return int64_t(0);
    }
    std::vector<std::vector<int64_t>> m = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(0)}};
    std::vector<std::vector<int64_t>> res = matrix_pow(m, (n - int64_t(1)));
    return _index(_index(res, int64_t(0)), int64_t(0));
}

int64_t run_tests() {
    std::vector<int64_t> expected = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(1), int64_t(2), int64_t(3), int64_t(5), int64_t(8), int64_t(13), int64_t(21), int64_t(34), int64_t(55)};
    std::vector<int64_t> it = fib_iterative(int64_t(10));
    std::vector<int64_t> rec = fib_recursive(int64_t(10));
    std::vector<int64_t> cache = fib_recursive_cached(int64_t(10));
    std::vector<int64_t> memo = fib_memoization(int64_t(10));
    std::vector<int64_t> bin = fib_binet(int64_t(10));
    int64_t m = fib_matrix(int64_t(10));
    if ((it != expected)) {
        throw std::runtime_error(std::string("iterative failed"));
    }
    if ((rec != expected)) {
        throw std::runtime_error(std::string("recursive failed"));
    }
    if ((cache != expected)) {
        throw std::runtime_error(std::string("cached failed"));
    }
    if ((memo != expected)) {
        throw std::runtime_error(std::string("memoization failed"));
    }
    if ((bin != expected)) {
        throw std::runtime_error(std::string("binet failed"));
    }
    if ((m != int64_t(55))) {
        throw std::runtime_error(std::string("matrix failed"));
    }
    return m;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        fib_cache_global = {};
        fib_memo_cache = std::map<int64_t, int64_t>{{int64_t(0), int64_t(0)}, {int64_t(1), int64_t(1)}, {int64_t(2), int64_t(1)}};
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << run_tests(); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
