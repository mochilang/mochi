// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:12:42 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t pow2_int(int64_t n);
double pow2_float(int64_t n);
int64_t lshift(int64_t num, int64_t k);
int64_t rshift(int64_t num, int64_t k);
int64_t log2_floor(double x);
int64_t float_to_bits(double x);
double bits_to_float(int64_t bits);
double absf(double x);
double sqrtApprox(double x);
bool is_close(double a, double b, double rel_tol);
double fast_inverse_sqrt(double number);
void test_fast_inverse_sqrt();
int main();

int64_t pow2_int(int64_t n) {
    int64_t result = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < n)) {
        result = (result * int64_t(2));
        i = (i + int64_t(1));
    }
    return result;
}

double pow2_float(int64_t n) {
    double result = 1.0;
    if ((n >= int64_t(0))) {
        int64_t i = int64_t(0);
        while ((i < n)) {
            result = (result * 2.0);
            i = (i + int64_t(1));
        }
    } else {
        int64_t i = int64_t(0);
        int64_t m = (int64_t(0) - n);
        while ((i < m)) {
            result = ((double)(result) / (2.0));
            i = (i + int64_t(1));
        }
    }
    return result;
}

int64_t lshift(int64_t num, int64_t k) {
    int64_t result = num;
    int64_t i = int64_t(0);
    while ((i < k)) {
        result = (result * int64_t(2));
        i = (i + int64_t(1));
    }
    return result;
}

int64_t rshift(int64_t num, int64_t k) {
    int64_t result = num;
    int64_t i = int64_t(0);
    while ((i < k)) {
        result = ((result - (result % int64_t(2))) / int64_t(2));
        i = (i + int64_t(1));
    }
    return result;
}

int64_t log2_floor(double x) {
    double n = x;
    int64_t e = int64_t(0);
    while ((n >= 2.0)) {
        n = ((double)(n) / (2.0));
        e = (e + int64_t(1));
    }
    while ((n < 1.0)) {
        n = (n * 2.0);
        e = (e - int64_t(1));
    }
    return e;
}

int64_t float_to_bits(double x) {
    double num = x;
    int64_t sign = int64_t(0);
    if ((num < 0.0)) {
        sign = int64_t(1);
        num = -num;
    }
    int64_t exp = log2_floor(num);
    double pow = pow2_float(exp);
    double normalized = ((double)(num) / (pow));
    double frac = (normalized - 1.0);
    int64_t mantissa = (int64_t)((frac * pow2_float(int64_t(23))));
    int64_t exp_bits = (exp + int64_t(127));
    return ((lshift(sign, int64_t(31)) + lshift(exp_bits, int64_t(23))) + mantissa);
}

double bits_to_float(int64_t bits) {
    int64_t sign_bit = (rshift(bits, int64_t(31)) % int64_t(2));
    double sign = 1.0;
    if ((sign_bit == int64_t(1))) {
        sign = -1.0;
    }
    int64_t exp_bits = (rshift(bits, int64_t(23)) % int64_t(256));
    int64_t exp = (exp_bits - int64_t(127));
    int64_t mantissa_bits = (bits % pow2_int(int64_t(23)));
    double mantissa = (1.0 + ((double)((double)(mantissa_bits)) / (pow2_float(int64_t(23)))));
    return ((sign * mantissa) * pow2_float(exp));
}

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

bool is_close(double a, double b, double rel_tol) {
    return (absf((a - b)) <= (rel_tol * absf(b)));
}

double fast_inverse_sqrt(double number) {
    if ((number <= 0.0)) {
        throw std::runtime_error(std::string("Input must be a positive number."));
    }
    int64_t i = float_to_bits(number);
    int64_t magic = int64_t(1597463007);
    int64_t y_bits = (magic - rshift(i, int64_t(1)));
    double y = bits_to_float(y_bits);
    y = (y * (1.5 - (((0.5 * number) * y) * y)));
    return y;
}

void test_fast_inverse_sqrt() {
    if ((absf((fast_inverse_sqrt(10.0) - 0.3156857923527257)) > 0.0001)) {
        throw std::runtime_error(std::string("fast_inverse_sqrt(10) failed"));
    }
    if ((absf((fast_inverse_sqrt(4.0) - 0.49915357479239103)) > 0.0001)) {
        throw std::runtime_error(std::string("fast_inverse_sqrt(4) failed"));
    }
    if ((absf((fast_inverse_sqrt(4.1) - 0.4932849504615651)) > 0.0001)) {
        throw std::runtime_error(std::string("fast_inverse_sqrt(4.1) failed"));
    }
    int64_t i = int64_t(50);
    while ((i < int64_t(60))) {
        double y = fast_inverse_sqrt((double)(i));
        double actual = ((double)(1.0) / (sqrtApprox((double)(i))));
        if (!is_close(y, actual, 0.00132)) {
            throw std::runtime_error(std::string("relative error too high"));
        }
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_fast_inverse_sqrt();
        int64_t i = int64_t(5);
        while ((i <= int64_t(100))) {
            double diff = (((double)(1.0) / (sqrtApprox((double)(i)))) - fast_inverse_sqrt((double)(i)));
            std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()) + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << diff; return ss.str(); }()));
            std::cout << std::endl;
            i = (i + int64_t(5));
        }
    }
    return 0;
}
