// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:09:49 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t parse_decimal(std::string s);
std::string zeller_day(std::string date_input);
std::string zeller(std::string date_input);
void test_zeller();
int main();

int64_t parse_decimal(std::string s) {
    int64_t value = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s);
        if (((c < std::string("0")) || (c > std::string("9")))) {
            throw std::runtime_error(std::string("invalid literal"));
        }
        value = ((value * int64_t(10)) + std::stoll(c));
        i = (i + int64_t(1));
    }
    return value;
}

std::string zeller_day(std::string date_input) {
    std::map<int64_t, std::string> days = {{int64_t(0), std::string("Sunday")}, {int64_t(1), std::string("Monday")}, {int64_t(2), std::string("Tuesday")}, {int64_t(3), std::string("Wednesday")}, {int64_t(4), std::string("Thursday")}, {int64_t(5), std::string("Friday")}, {int64_t(6), std::string("Saturday")}};
    if ((date_input.size() != int64_t(10))) {
        throw std::runtime_error(std::string("Must be 10 characters long"));
    }
    int64_t m = parse_decimal(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(2) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(2)); })(date_input));
    if (((m <= int64_t(0)) || (m >= int64_t(13)))) {
        throw std::runtime_error(std::string("Month must be between 1 - 12"));
    }
    std::string sep1 = ([&](const auto& __s){ auto __i = int64_t(2); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(date_input);
    if (((sep1 != std::string("-")) && (sep1 != std::string("/")))) {
        throw std::runtime_error(std::string("Date separator must be '-' or '/'"));
    }
    int64_t d = parse_decimal(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(3), int64_t(5) - int64_t(3)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(3), __v.begin()+int64_t(5)); })(date_input));
    if (((d <= int64_t(0)) || (d >= int64_t(32)))) {
        throw std::runtime_error(std::string("Date must be between 1 - 31"));
    }
    std::string sep2 = ([&](const auto& __s){ auto __i = int64_t(5); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(date_input);
    if (((sep2 != std::string("-")) && (sep2 != std::string("/")))) {
        throw std::runtime_error(std::string("Date separator must be '-' or '/'"));
    }
    int64_t y = parse_decimal(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(6), int64_t(10) - int64_t(6)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(6), __v.begin()+int64_t(10)); })(date_input));
    if (((y <= int64_t(45)) || (y >= int64_t(8500)))) {
        throw std::runtime_error(std::string("Year out of range. There has to be some sort of limit...right?"));
    }
    int64_t year = y;
    int64_t month = m;
    if ((month <= int64_t(2))) {
        year = (year - int64_t(1));
        month = (month + int64_t(12));
    }
    int64_t c = (year / int64_t(100));
    int64_t k = (year % int64_t(100));
    int64_t t = (int64_t)(((2.6 * (double)(month)) - 5.39));
    int64_t u = (c / int64_t(4));
    int64_t v = (k / int64_t(4));
    int64_t x = (d + k);
    int64_t z = (((t + u) + v) + x);
    int64_t w = (z - (int64_t(2) * c));
    int64_t f = (w % int64_t(7));
    if ((f < int64_t(0))) {
        f = (f + int64_t(7));
    }
    return ([&](const auto& __m){ auto __it = __m.find(f); if (__it == __m.end()) return std::string{}; return __it->second; })(days);
}

std::string zeller(std::string date_input) {
    std::string day = zeller_day(date_input);
    return ((((std::string("Your date ") + date_input) + std::string(", is a ")) + day) + std::string("!"));
}

void test_zeller() {
    std::vector<std::string> inputs = std::vector<std::string>{std::string("01-31-2010"), std::string("02-01-2010"), std::string("11-26-2024"), std::string("07-04-1776")};
    std::vector<std::string> expected = std::vector<std::string>{std::string("Sunday"), std::string("Monday"), std::string("Tuesday"), std::string("Thursday")};
    int64_t i = int64_t(0);
    while ((i < inputs.size())) {
        std::string res = zeller_day(_index(inputs, i));
        if ((res != _index(expected, i))) {
            throw std::runtime_error(std::string("zeller test failed"));
        }
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_zeller();
        std::cout << zeller(std::string("01-31-2010"));
        std::cout << std::endl;
    }
    return 0;
}
