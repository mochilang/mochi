// Generated by Mochi transpiler v0.10.66 on 2025-08-15 10:23:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Dual;

std::ostream& operator<<(std::ostream&, const Dual&);


struct Dual {
    double real;
    std::vector<double> duals;
    auto operator<=>(const Dual&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Dual& v) {
    os << '{' << "'real': "<< std::fixed << std::setprecision(1) << v.real
 << ", " << "'duals': "<< "["; for(size_t i=0;i<v.duals.size();++i){ if(i>0) os << ", "; os << v.duals[i]; } os << "]"
 << '}';
    return os;
}

Dual make_dual(double real, int64_t rank);
Dual dual_from_list(double real, const std::vector<double>& ds);
Dual dual_add(const Dual& a, const Dual& b);
Dual dual_add_real(const Dual& a, double b);
Dual dual_mul(const Dual& a, const Dual& b);
Dual dual_mul_real(const Dual& a, double b);
Dual dual_pow(const Dual& x, int64_t n);
double factorial(int64_t n);
double differentiate(std::function<Dual(Dual)> func, double position, int64_t order);
void test_differentiate();
int main();

Dual make_dual(double real, int64_t rank) {
    std::vector<double> ds = {};
    int64_t i = int64_t(0);
    while ((i < rank)) {
        ds = ([&]{ auto __tmp = ds; __tmp.push_back(1.0); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Dual{.real = real, .duals = ds};
}

Dual dual_from_list(double real, const std::vector<double>& ds) {
    return Dual{.real = real, .duals = ds};
}

Dual dual_add(const Dual& a, const Dual& b) {
    std::vector<double> s_dual = {};
    int64_t i = int64_t(0);
    while ((i < a.duals.size())) {
        s_dual = ([&]{ auto __tmp = s_dual; __tmp.push_back(_index(a.duals, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<double> o_dual = {};
    int64_t j = int64_t(0);
    while ((j < b.duals.size())) {
        o_dual = ([&]{ auto __tmp = o_dual; __tmp.push_back(_index(b.duals, j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    if ((s_dual.size() > o_dual.size())) {
        int64_t diff = (s_dual.size() - o_dual.size());
        int64_t k = int64_t(0);
        while ((k < diff)) {
            o_dual = ([&]{ auto __tmp = o_dual; __tmp.push_back(1.0); return __tmp; }());
            k = (k + int64_t(1));
        }
    } else     if ((s_dual.size() < o_dual.size())) {
        int64_t diff2 = (o_dual.size() - s_dual.size());
        int64_t k2 = int64_t(0);
        while ((k2 < diff2)) {
            s_dual = ([&]{ auto __tmp = s_dual; __tmp.push_back(1.0); return __tmp; }());
            k2 = (k2 + int64_t(1));
        }
    }

    std::vector<double> new_duals = {};
    int64_t idx = int64_t(0);
    while ((idx < s_dual.size())) {
        new_duals = ([&]{ auto __tmp = new_duals; __tmp.push_back((_index(s_dual, idx) + _index(o_dual, idx))); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    return Dual{.real = (a.real + b.real), .duals = new_duals};
}

Dual dual_add_real(const Dual& a, double b) {
    std::vector<double> ds = {};
    int64_t i = int64_t(0);
    while ((i < a.duals.size())) {
        ds = ([&]{ auto __tmp = ds; __tmp.push_back(_index(a.duals, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Dual{.real = (a.real + b), .duals = ds};
}

Dual dual_mul(const Dual& a, const Dual& b) {
    int64_t new_len = ((a.duals.size() + b.duals.size()) + int64_t(1));
    std::vector<double> new_duals = {};
    int64_t idx = int64_t(0);
    while ((idx < new_len)) {
        new_duals = ([&]{ auto __tmp = new_duals; __tmp.push_back(0.0); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    int64_t i = int64_t(0);
    while ((i < a.duals.size())) {
        int64_t j = int64_t(0);
        while ((j < b.duals.size())) {
            int64_t pos = ((i + j) + int64_t(1));
            double val = (_index(new_duals, pos) + (_index(a.duals, i) * _index(b.duals, j)));
            new_duals[static_cast<size_t>(pos)] = val;
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    int64_t k = int64_t(0);
    while ((k < a.duals.size())) {
        double val = (_index(new_duals, k) + (_index(a.duals, k) * b.real));
        new_duals[static_cast<size_t>(k)] = val;
        k = (k + int64_t(1));
    }
    int64_t l = int64_t(0);
    while ((l < b.duals.size())) {
        double val = (_index(new_duals, l) + (_index(b.duals, l) * a.real));
        new_duals[static_cast<size_t>(l)] = val;
        l = (l + int64_t(1));
    }
    return Dual{.real = (a.real * b.real), .duals = new_duals};
}

Dual dual_mul_real(const Dual& a, double b) {
    std::vector<double> ds = {};
    int64_t i = int64_t(0);
    while ((i < a.duals.size())) {
        ds = ([&]{ auto __tmp = ds; __tmp.push_back((_index(a.duals, i) * b)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Dual{.real = (a.real * b), .duals = ds};
}

Dual dual_pow(const Dual& x, int64_t n) {
    if ((n < int64_t(0))) {
        throw std::runtime_error(std::string("power must be a positive integer"));
    }
    if ((n == int64_t(0))) {
        return Dual{.real = 1.0, .duals = std::vector<double>{}};
    }
    Dual res = x;
    int64_t i = int64_t(1);
    while ((i < n)) {
        res = dual_mul(res, x);
        i = (i + int64_t(1));
    }
    return res;
}

double factorial(int64_t n) {
    double res = 1.0;
    int64_t i = int64_t(2);
    while ((i <= n)) {
        res = (res * (double)(i));
        i = (i + int64_t(1));
    }
    return res;
}

double differentiate(std::function<Dual(Dual)> func, double position, int64_t order) {
    Dual d = make_dual(position, int64_t(1));
    auto result = func(d);
    if ((order == int64_t(0))) {
        return result.real;
    }
    return (_index(result.duals, (order - int64_t(1))) * factorial(order));
}

void test_differentiate() {
    std::function<Dual(Dual)> f1;
    f1 = [=, &f1](Dual x) mutable {
        return dual_pow(x, int64_t(2));
    };
    if ((differentiate((std::function<Dual(Dual)>)(f1), 2.0, int64_t(2)) != 2.0)) {
        throw std::runtime_error(std::string("f1 failed"));
    }
    std::function<Dual(Dual)> f2;
    f2 = [=, &f2](Dual x) mutable {
        return dual_mul(dual_pow(x, int64_t(2)), dual_pow(x, int64_t(4)));
    };
    if ((differentiate((std::function<Dual(Dual)>)(f2), 9.0, int64_t(2)) != 196830.0)) {
        throw std::runtime_error(std::string("f2 failed"));
    }
    std::function<Dual(Dual)> f3;
    f3 = [=, &f3](Dual y) mutable {
        return dual_mul_real(dual_pow(dual_add_real(y, 3.0), int64_t(6)), 0.5);
    };
    if ((differentiate((std::function<Dual(Dual)>)(f3), 3.5, int64_t(4)) != 7605.0)) {
        throw std::runtime_error(std::string("f3 failed"));
    }
    std::function<Dual(Dual)> f4;
    f4 = [=, &f4](Dual y) mutable {
        return dual_pow(y, int64_t(2));
    };
    if ((differentiate((std::function<Dual(Dual)>)(f4), 4.0, int64_t(3)) != 0.0)) {
        throw std::runtime_error(std::string("f4 failed"));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_differentiate();
        std::function<Dual(Dual)> f;
        f = [=, &f](Dual y) mutable {
            return dual_mul(dual_pow(y, int64_t(2)), dual_pow(y, int64_t(4)));
        };
        double res = differentiate((std::function<Dual(Dual)>)(f), 9.0, int64_t(2));
        { std::ostringstream __ss; double __dv = res; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
