// Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:36:04 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Point3d;
struct Vector3d;

std::ostream& operator<<(std::ostream&, const Point3d&);
std::ostream& operator<<(std::ostream&, const Vector3d&);


struct Point3d {
    double x;
    double y;
    double z;
    auto operator<=>(const Point3d&) const = default;
};

struct Vector3d {
    double x;
    double y;
    double z;
    auto operator<=>(const Vector3d&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point3d& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Vector3d& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << '}';
    return os;
}

Vector3d create_vector(const Point3d& p1, const Point3d& p2);
Vector3d get_3d_vectors_cross(const Vector3d& ab, const Vector3d& ac);
double pow10(int64_t exp);
double round_float(double x, int64_t digits);
bool is_zero_vector(const Vector3d& v, int64_t accuracy);
bool are_collinear(const Point3d& a, const Point3d& b, const Point3d& c, int64_t accuracy);
void test_are_collinear();
int main();

Vector3d create_vector(const Point3d& p1, const Point3d& p2) {
    double vx = (p2.x - p1.x);
    double vy = (p2.y - p1.y);
    double vz = (p2.z - p1.z);
    return Vector3d{.x = vx, .y = vy, .z = vz};
}

Vector3d get_3d_vectors_cross(const Vector3d& ab, const Vector3d& ac) {
    double cx = ((ab.y * ac.z) - (ab.z * ac.y));
    double cy = ((ab.z * ac.x) - (ab.x * ac.z));
    double cz = ((ab.x * ac.y) - (ab.y * ac.x));
    return Vector3d{.x = cx, .y = cy, .z = cz};
}

double pow10(int64_t exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    while ((i < exp)) {
        result = (result * 10.0);
        i = (i + int64_t(1));
    }
    return result;
}

double round_float(double x, int64_t digits) {
    double factor = pow10(digits);
    double v = (x * factor);
    if ((v >= 0.0)) {
        v = (v + 0.5);
    } else {
        v = (v - 0.5);
    }
    int64_t t = (int64_t)(v);
    return ((double)((double)(t)) / (factor));
}

bool is_zero_vector(const Vector3d& v, int64_t accuracy) {
    return (((round_float(v.x, accuracy) == 0.0) && (round_float(v.y, accuracy) == 0.0)) && (round_float(v.z, accuracy) == 0.0));
}

bool are_collinear(const Point3d& a, const Point3d& b, const Point3d& c, int64_t accuracy) {
    Vector3d ab = create_vector(a, b);
    Vector3d ac = create_vector(a, c);
    Vector3d cross = get_3d_vectors_cross(ab, ac);
    return is_zero_vector(cross, accuracy);
}

void test_are_collinear() {
    Point3d p1 = Point3d{.x = 0.0, .y = 0.0, .z = 0.0};
    Point3d p2 = Point3d{.x = 1.0, .y = 1.0, .z = 1.0};
    Point3d p3 = Point3d{.x = 2.0, .y = 2.0, .z = 2.0};
    if (!are_collinear(p1, p2, p3, int64_t(10))) {
        throw std::runtime_error(std::string("collinear test failed"));
    }
    Point3d q3 = Point3d{.x = 1.0, .y = 2.0, .z = 3.0};
    if (are_collinear(p1, p2, q3, int64_t(10))) {
        throw std::runtime_error(std::string("non-collinear test failed"));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_are_collinear();
        Point3d a = Point3d{.x = 4.802293498137402, .y = 3.536233125455244, .z = 0.0};
        Point3d b = Point3d{.x = -2.186788107953106, .y = -9.24561398001649, .z = 7.141509524846482};
        Point3d c = Point3d{.x = 1.530169574640268, .y = -2.447927606600034, .z = 3.343487096469054};
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << are_collinear(a, b, c, int64_t(10)); return ss.str(); }());
        std::cout << std::endl;
        Point3d d = Point3d{.x = 2.399001826862445, .y = -2.452009976680793, .z = 4.464656666157666};
        Point3d e = Point3d{.x = -3.682816335934376, .y = 5.753788986533145, .z = 9.490993909044244};
        Point3d f = Point3d{.x = 1.962903518985307, .y = 3.741415730125627, .z = 7.0};
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << are_collinear(d, e, f, int64_t(10)); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
