// Generated by Mochi transpiler v0.10.66 on 2025-08-16 12:13:32 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _parse_int_str(const std::string& s, long base) {
    if(s.empty()) return 0;
    return std::stol(s, nullptr, base);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Fraction;

std::ostream& operator<<(std::ostream&, const Fraction&);


struct Fraction {
    int64_t numerator;
    int64_t denominator;
    auto operator<=>(const Fraction&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Fraction& v) {
    os << '{' << "'numerator': "<< v.numerator
 << ", " << "'denominator': "<< v.denominator
 << '}';
    return os;
}

int64_t pow10(int64_t n);
int64_t gcd(int64_t a, int64_t b);
Fraction parse_decimal(std::string s);
Fraction reduce(const Fraction& fr);
Fraction decimal_to_fraction_str(std::string s);
Fraction decimal_to_fraction(double x);
void assert_fraction(std::string name, const Fraction& fr, int64_t num, int64_t den);
void test_decimal_to_fraction();
int main();

int64_t pow10(int64_t n) {
    int64_t result = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < n)) {
        result = (result * int64_t(10));
        i = (i + int64_t(1));
    }
    return result;
}

int64_t gcd(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    if ((x < int64_t(0))) {
        x = -x;
    }
    if ((y < int64_t(0))) {
        y = -y;
    }
    while ((y != int64_t(0))) {
        int64_t r = (x % y);
        x = y;
        y = r;
    }
    return x;
}

Fraction parse_decimal(std::string s) {
    if ((s.size() == int64_t(0))) {
        throw std::runtime_error(std::string("invalid number"));
    }
    int64_t idx = int64_t(0);
    int64_t sign = int64_t(1);
    std::string first = ([&]{ std::string __s = s; long long __start = int64_t(0); long long __end = int64_t(1); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
    if ((first == std::string("-"))) {
        sign = -int64_t(1);
        idx = int64_t(1);
    } else     if ((first == std::string("+"))) {
        idx = int64_t(1);
    }

    std::string int_part = std::string("");
    while ((idx < s.size())) {
        std::string c = ([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if (((c >= std::string("0")) && (c <= std::string("9")))) {
            int_part = (int_part + c);
            idx = (idx + int64_t(1));
        } else {
            break;
        }
    }
    std::string frac_part = std::string("");
    if (((idx < s.size()) && (([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string(".")))) {
        idx = (idx + int64_t(1));
        while ((idx < s.size())) {
            std::string c = ([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            if (((c >= std::string("0")) && (c <= std::string("9")))) {
                frac_part = (frac_part + c);
                idx = (idx + int64_t(1));
            } else {
                break;
            }
        }
    }
    int64_t exp = int64_t(0);
    if (((idx < s.size()) && ((([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("e")) || (([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("E"))))) {
        idx = (idx + int64_t(1));
        int64_t exp_sign = int64_t(1);
        if (((idx < s.size()) && (([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("-")))) {
            exp_sign = -int64_t(1);
            idx = (idx + int64_t(1));
        } else         if (((idx < s.size()) && (([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("+")))) {
            idx = (idx + int64_t(1));
        }

        std::string exp_str = std::string("");
        while ((idx < s.size())) {
            std::string c = ([&]{ std::string __s = s; long long __start = idx; long long __end = (idx + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            if (((c >= std::string("0")) && (c <= std::string("9")))) {
                exp_str = (exp_str + c);
                idx = (idx + int64_t(1));
            } else {
                throw std::runtime_error(std::string("invalid number"));
            }
        }
        if ((exp_str.size() == int64_t(0))) {
            throw std::runtime_error(std::string("invalid number"));
        }
        exp = (exp_sign * _parse_int_str(exp_str, int64_t(10)));
    }
    if ((idx != s.size())) {
        throw std::runtime_error(std::string("invalid number"));
    }
    if ((int_part.size() == int64_t(0))) {
        int_part = std::string("0");
    }
    std::string num_str = (int_part + frac_part);
    int64_t numerator = _parse_int_str(num_str, int64_t(10));
    if ((sign == (int64_t(0) - int64_t(1)))) {
        numerator = (int64_t(0) - numerator);
    }
    int64_t denominator = pow10(frac_part.size());
    if ((exp > int64_t(0))) {
        numerator = (numerator * pow10(exp));
    } else     if ((exp < int64_t(0))) {
        denominator = (denominator * pow10(-exp));
    }

    return Fraction{.numerator = numerator, .denominator = denominator};
}

Fraction reduce(const Fraction& fr) {
    int64_t g = gcd(fr.numerator, fr.denominator);
    return Fraction{.numerator = (fr.numerator / g), .denominator = (fr.denominator / g)};
}

Fraction decimal_to_fraction_str(std::string s) {
    return reduce(parse_decimal(s));
}

Fraction decimal_to_fraction(double x) {
    return decimal_to_fraction_str(_to_string(x));
}

void assert_fraction(std::string name, const Fraction& fr, int64_t num, int64_t den) {
    if (((fr.numerator != num) || (fr.denominator != den))) {
        throw std::runtime_error(name);
    }
}

void test_decimal_to_fraction() {
    assert_fraction(std::string("case1"), decimal_to_fraction(2.0), int64_t(2), int64_t(1));
    assert_fraction(std::string("case2"), decimal_to_fraction(89.0), int64_t(89), int64_t(1));
    assert_fraction(std::string("case3"), decimal_to_fraction_str(std::string("67")), int64_t(67), int64_t(1));
    assert_fraction(std::string("case4"), decimal_to_fraction_str(std::string("45.0")), int64_t(45), int64_t(1));
    assert_fraction(std::string("case5"), decimal_to_fraction(1.5), int64_t(3), int64_t(2));
    assert_fraction(std::string("case6"), decimal_to_fraction_str(std::string("6.25")), int64_t(25), int64_t(4));
    assert_fraction(std::string("case7"), decimal_to_fraction(0.0), int64_t(0), int64_t(1));
    assert_fraction(std::string("case8"), decimal_to_fraction(-2.5), -int64_t(5), int64_t(2));
    assert_fraction(std::string("case9"), decimal_to_fraction(0.125), int64_t(1), int64_t(8));
    assert_fraction(std::string("case10"), decimal_to_fraction(1.00000025e+06), int64_t(4000001), int64_t(4));
    assert_fraction(std::string("case11"), decimal_to_fraction(1.3333), int64_t(13333), int64_t(10000));
    assert_fraction(std::string("case12"), decimal_to_fraction_str(std::string("1.23e2")), int64_t(123), int64_t(1));
    assert_fraction(std::string("case13"), decimal_to_fraction_str(std::string("0.500")), int64_t(1), int64_t(2));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_decimal_to_fraction();
        Fraction fr = decimal_to_fraction(1.5);
        std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << fr.numerator; return ss.str(); }()) + std::string("/")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << fr.denominator; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
