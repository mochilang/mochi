// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:23:03 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::string compare_string(std::string string1, std::string string2);
bool contains_string(const std::vector<std::string>& arr, std::string value);
std::vector<std::string> unique_strings(const std::vector<std::string>& arr);
std::vector<std::string> check(const std::vector<std::string>& binary);
std::vector<std::string> decimal_to_binary(int64_t no_of_variable, const std::vector<int64_t>& minterms);
bool is_for_table(std::string string1, std::string string2, int64_t count);
int64_t count_ones(const std::vector<int64_t>& row);
std::vector<std::string> selection(std::vector<std::vector<int64_t>>& chart, const std::vector<std::string>& prime_implicants);
int64_t count_char(std::string s, std::string ch);
std::vector<std::vector<int64_t>> prime_implicant_chart(const std::vector<std::string>& prime_implicants, const std::vector<std::string>& binary);
int main();

std::string compare_string(std::string string1, std::string string2) {
    std::string result = std::string("");
    int64_t count = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < string1.size())) {
        std::string c1 = string1.substr(i, (i + int64_t(1)) - i);
        std::string c2 = string2.substr(i, (i + int64_t(1)) - i);
        if ((c1 != c2)) {
            count = (count + int64_t(1));
            result = (result + std::string("_"));
        } else {
            result = (result + c1);
        }
        i = (i + int64_t(1));
    }
    if ((count > int64_t(1))) {
        return std::string("");
    }
    return result;
}

bool contains_string(const std::vector<std::string>& arr, std::string value) {
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        if ((_index(arr, i) == value)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::string> unique_strings(const std::vector<std::string>& arr) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        if (!contains_string(res, _index(arr, i))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(arr, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> check(const std::vector<std::string>& binary) {
    std::vector<std::string> pi = {};
    std::vector<std::string> current = binary;
    while (true) {
        std::vector<std::string> check1 = {};
        int64_t i = int64_t(0);
        while ((i < current.size())) {
            check1 = ([&]{ auto __tmp = check1; __tmp.push_back(std::string("$")); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::vector<std::string> temp = {};
        i = int64_t(0);
        while ((i < current.size())) {
            int64_t j = (i + int64_t(1));
            while ((j < current.size())) {
                std::string k = compare_string(_index(current, i), _index(current, j));
                if ((k == std::string(""))) {
                    check1[static_cast<size_t>(i)] = std::string("*");
                    check1[static_cast<size_t>(j)] = std::string("*");
                    temp = ([&]{ auto __tmp = temp; __tmp.push_back(std::string("X")); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        i = int64_t(0);
        while ((i < current.size())) {
            if ((_index(check1, i) == std::string("$"))) {
                pi = ([&]{ auto __tmp = pi; __tmp.push_back(_index(current, i)); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        if ((temp.size() == int64_t(0))) {
            return pi;
        }
        current = unique_strings(temp);
    }
}

std::vector<std::string> decimal_to_binary(int64_t no_of_variable, const std::vector<int64_t>& minterms) {
    std::vector<std::string> temp = {};
    int64_t idx = int64_t(0);
    while ((idx < minterms.size())) {
        int64_t minterm = _index(minterms, idx);
        std::string string = std::string("");
        int64_t i = int64_t(0);
        while ((i < no_of_variable)) {
            string = (([&]{ std::ostringstream ss; ss << std::boolalpha << (minterm % int64_t(2)); return ss.str(); }()) + string);
            minterm = (minterm / int64_t(2));
            i = (i + int64_t(1));
        }
        temp = ([&]{ auto __tmp = temp; __tmp.push_back(string); return __tmp; }());
        idx = (idx + int64_t(1));
    }
    return temp;
}

bool is_for_table(std::string string1, std::string string2, int64_t count) {
    int64_t count_n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < string1.size())) {
        std::string c1 = string1.substr(i, (i + int64_t(1)) - i);
        std::string c2 = string2.substr(i, (i + int64_t(1)) - i);
        if ((c1 != c2)) {
            count_n = (count_n + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return (count_n == count);
}

int64_t count_ones(const std::vector<int64_t>& row) {
    int64_t c = int64_t(0);
    int64_t j = int64_t(0);
    while ((j < row.size())) {
        if ((_index(row, j) == int64_t(1))) {
            c = (c + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    return c;
}

std::vector<std::string> selection(std::vector<std::vector<int64_t>>& chart, const std::vector<std::string>& prime_implicants) {
    std::vector<std::string> temp = {};
    std::vector<int64_t> select = {};
    int64_t i = int64_t(0);
    while ((i < chart.size())) {
        select = ([&]{ auto __tmp = select; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t col = int64_t(0);
    while ((col < _index(chart, int64_t(0)).size())) {
        int64_t count = int64_t(0);
        int64_t row = int64_t(0);
        while ((row < chart.size())) {
            if ((_index(_index(chart, row), col) == int64_t(1))) {
                count = (count + int64_t(1));
            }
            row = (row + int64_t(1));
        }
        if ((count == int64_t(1))) {
            int64_t rem = int64_t(0);
            row = int64_t(0);
            while ((row < chart.size())) {
                if ((_index(_index(chart, row), col) == int64_t(1))) {
                    rem = row;
                }
                row = (row + int64_t(1));
            }
            select[static_cast<size_t>(rem)] = int64_t(1);
        }
        col = (col + int64_t(1));
    }
    i = int64_t(0);
    while ((i < select.size())) {
        if ((_index(select, i) == int64_t(1))) {
            int64_t j = int64_t(0);
            while ((j < _index(chart, int64_t(0)).size())) {
                if ((_index(_index(chart, i), j) == int64_t(1))) {
                    int64_t r = int64_t(0);
                    while ((r < chart.size())) {
                        chart[static_cast<size_t>(r)][static_cast<size_t>(j)] = int64_t(0);
                        r = (r + int64_t(1));
                    }
                }
                j = (j + int64_t(1));
            }
            temp = ([&]{ auto __tmp = temp; __tmp.push_back(_index(prime_implicants, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    while (true) {
        std::vector<int64_t> counts = {};
        int64_t r = int64_t(0);
        while ((r < chart.size())) {
            counts = ([&]{ auto __tmp = counts; __tmp.push_back(count_ones(_index(chart, r))); return __tmp; }());
            r = (r + int64_t(1));
        }
        int64_t max_n = _index(counts, int64_t(0));
        int64_t rem = int64_t(0);
        int64_t k = int64_t(1);
        while ((k < counts.size())) {
            if ((_index(counts, k) > max_n)) {
                max_n = _index(counts, k);
                rem = k;
            }
            k = (k + int64_t(1));
        }
        if ((max_n == int64_t(0))) {
            return temp;
        }
        temp = ([&]{ auto __tmp = temp; __tmp.push_back(_index(prime_implicants, rem)); return __tmp; }());
        int64_t j = int64_t(0);
        while ((j < _index(chart, int64_t(0)).size())) {
            if ((_index(_index(chart, rem), j) == int64_t(1))) {
                int64_t r2 = int64_t(0);
                while ((r2 < chart.size())) {
                    chart[static_cast<size_t>(r2)][static_cast<size_t>(j)] = int64_t(0);
                    r2 = (r2 + int64_t(1));
                }
            }
            j = (j + int64_t(1));
        }
    }
}

int64_t count_char(std::string s, std::string ch) {
    int64_t cnt = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            cnt = (cnt + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return cnt;
}

std::vector<std::vector<int64_t>> prime_implicant_chart(const std::vector<std::string>& prime_implicants, const std::vector<std::string>& binary) {
    std::vector<std::vector<int64_t>> chart = {};
    int64_t i = int64_t(0);
    while ((i < prime_implicants.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < binary.size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        chart = ([&]{ auto __tmp = chart; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < prime_implicants.size())) {
        int64_t count = count_char(_index(prime_implicants, i), std::string("_"));
        int64_t j = int64_t(0);
        while ((j < binary.size())) {
            if (is_for_table(_index(prime_implicants, i), _index(binary, j), count)) {
                chart[static_cast<size_t>(i)][static_cast<size_t>(j)] = int64_t(1);
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return chart;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t no_of_variable = int64_t(3);
        std::vector<int64_t> minterms = std::vector<int64_t>{int64_t(1), int64_t(5), int64_t(7)};
        std::vector<std::string> binary = decimal_to_binary(no_of_variable, minterms);
        std::vector<std::string> prime_implicants = check(binary);
        std::cout << std::string("Prime Implicants are:");
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = prime_implicants; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::vector<std::vector<int64_t>> chart = prime_implicant_chart(prime_implicants, binary);
        std::vector<std::string> essential_prime_implicants = selection(chart, prime_implicants);
        std::cout << std::string("Essential Prime Implicants are:");
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp2 = essential_prime_implicants; ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) ss << ' '; ss << __tmp2[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
