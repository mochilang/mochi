// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:30:01 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t _rand();
int64_t rand_range(int64_t max);
std::vector<int64_t> shuffle(std::vector<int64_t>& list_int);
std::vector<std::vector<int64_t>> create_board();
std::vector<int64_t> create_prey(int64_t r, int64_t c);
std::vector<int64_t> create_predator(int64_t r, int64_t c);
bool empty_cell(int64_t r, int64_t c);
void add_entity(int64_t typ);
void setup();
bool inside(int64_t r, int64_t c);
int64_t find_prey(int64_t r, int64_t c);
void step_world();
int64_t count_entities(int64_t typ);
int main();

int64_t WIDTH = int64_t(10);
int64_t HEIGHT = int64_t(10);
int64_t PREY_INITIAL_COUNT = int64_t(20);
int64_t PREY_REPRODUCTION_TIME = int64_t(5);
int64_t PREDATOR_INITIAL_COUNT = int64_t(5);
int64_t PREDATOR_REPRODUCTION_TIME = int64_t(20);
int64_t PREDATOR_INITIAL_ENERGY = int64_t(15);
int64_t PREDATOR_FOOD_VALUE = int64_t(5);
int64_t TYPE_PREY = int64_t(0);
int64_t TYPE_PREDATOR = int64_t(1);
int64_t seed = int64_t(123456789);
std::vector<std::vector<int64_t>> board = std::vector<std::vector<int64_t>>{};
std::vector<std::vector<int64_t>> entities = {};
std::vector<int64_t> dr = std::vector<int64_t>{-int64_t(1), int64_t(0), int64_t(1), int64_t(0)};
std::vector<int64_t> dc = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), -int64_t(1)};
int64_t t = int64_t(0);

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

int64_t rand_range(int64_t max) {
    return (_rand() % max);
}

std::vector<int64_t> shuffle(std::vector<int64_t>& list_int) {
    int64_t i = (list_int.size() - int64_t(1));
    while ((i > int64_t(0))) {
        int64_t j = rand_range((i + int64_t(1)));
        int64_t tmp = _index(list_int, i);
        list_int[static_cast<size_t>(i)] = _index(list_int, j);
        list_int[static_cast<size_t>(j)] = tmp;
        i = (i - int64_t(1));
    }
    return list_int;
}

std::vector<std::vector<int64_t>> create_board() {
    std::vector<std::vector<int64_t>> board = {};
    int64_t r = int64_t(0);
    while ((r < HEIGHT)) {
        std::vector<int64_t> row = {};
        int64_t c = int64_t(0);
        while ((c < WIDTH)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            c = (c + int64_t(1));
        }
        board = ([&]{ auto __tmp = board; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return board;
}

std::vector<int64_t> create_prey(int64_t r, int64_t c) {
    return std::vector<int64_t>{TYPE_PREY, r, c, PREY_REPRODUCTION_TIME, int64_t(0), int64_t(1)};
}

std::vector<int64_t> create_predator(int64_t r, int64_t c) {
    return std::vector<int64_t>{TYPE_PREDATOR, r, c, PREDATOR_REPRODUCTION_TIME, PREDATOR_INITIAL_ENERGY, int64_t(1)};
}

bool empty_cell(int64_t r, int64_t c) {
    return (_index(_index(board, r), c) == int64_t(0));
}

void add_entity(int64_t typ) {
    while (true) {
        int64_t r = rand_range(HEIGHT);
        int64_t c = rand_range(WIDTH);
        if (empty_cell(r, c)) {
            if ((typ == TYPE_PREY)) {
                board[static_cast<size_t>(r)][static_cast<size_t>(c)] = int64_t(1);
                entities = ([&]{ auto __tmp = entities; __tmp.push_back(create_prey(r, c)); return __tmp; }());
            } else {
                board[static_cast<size_t>(r)][static_cast<size_t>(c)] = int64_t(2);
                entities = ([&]{ auto __tmp = entities; __tmp.push_back(create_predator(r, c)); return __tmp; }());
            }
            return;
        }
    }
}

void setup() {
    int64_t i = int64_t(0);
    while ((i < PREY_INITIAL_COUNT)) {
        add_entity(TYPE_PREY);
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < PREDATOR_INITIAL_COUNT)) {
        add_entity(TYPE_PREDATOR);
        i = (i + int64_t(1));
    }
}

bool inside(int64_t r, int64_t c) {
    return ((((r >= int64_t(0)) && (r < HEIGHT)) && (c >= int64_t(0))) && (c < WIDTH));
}

int64_t find_prey(int64_t r, int64_t c) {
    int64_t i = int64_t(0);
    while ((i < entities.size())) {
        std::vector<int64_t> e = _index(entities, i);
        if (((((_index(e, int64_t(5)) == int64_t(1)) && (_index(e, int64_t(0)) == TYPE_PREY)) && (_index(e, int64_t(1)) == r)) && (_index(e, int64_t(2)) == c))) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

void step_world() {
    int64_t i = int64_t(0);
    while ((i < entities.size())) {
        std::vector<int64_t> e = _index(entities, i);
        if ((_index(e, int64_t(5)) == int64_t(0))) {
            i = (i + int64_t(1));
            continue;
        }
        int64_t typ = _index(e, int64_t(0));
        int64_t row = _index(e, int64_t(1));
        int64_t col = _index(e, int64_t(2));
        int64_t repro = _index(e, int64_t(3));
        int64_t energy = _index(e, int64_t(4));
        std::vector<int64_t> dirs = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(3)};
        dirs = shuffle(dirs);
        bool moved = false;
        int64_t old_r = row;
        int64_t old_c = col;
        if ((typ == TYPE_PREDATOR)) {
            int64_t j = int64_t(0);
            bool ate = false;
            while ((j < int64_t(4))) {
                int64_t d = _index(dirs, j);
                int64_t nr = (row + _index(dr, d));
                int64_t nc = (col + _index(dc, d));
                if ((inside(nr, nc) && (_index(_index(board, nr), nc) == int64_t(1)))) {
                    int64_t prey_index = find_prey(nr, nc);
                    if ((prey_index >= int64_t(0))) {
                        entities[static_cast<size_t>(prey_index)][static_cast<size_t>(int64_t(5))] = int64_t(0);
                    }
                    board[static_cast<size_t>(nr)][static_cast<size_t>(nc)] = int64_t(2);
                    board[static_cast<size_t>(row)][static_cast<size_t>(col)] = int64_t(0);
                    e[static_cast<size_t>(int64_t(1))] = nr;
                    e[static_cast<size_t>(int64_t(2))] = nc;
                    e[static_cast<size_t>(int64_t(4))] = ((energy + PREDATOR_FOOD_VALUE) - int64_t(1));
                    moved = true;
                    ate = true;
                    break;
                }
                j = (j + int64_t(1));
            }
            if (!ate) {
                j = int64_t(0);
                while ((j < int64_t(4))) {
                    int64_t d = _index(dirs, j);
                    int64_t nr = (row + _index(dr, d));
                    int64_t nc = (col + _index(dc, d));
                    if ((inside(nr, nc) && (_index(_index(board, nr), nc) == int64_t(0)))) {
                        board[static_cast<size_t>(nr)][static_cast<size_t>(nc)] = int64_t(2);
                        board[static_cast<size_t>(row)][static_cast<size_t>(col)] = int64_t(0);
                        e[static_cast<size_t>(int64_t(1))] = nr;
                        e[static_cast<size_t>(int64_t(2))] = nc;
                        moved = true;
                        break;
                    }
                    j = (j + int64_t(1));
                }
                e[static_cast<size_t>(int64_t(4))] = (energy - int64_t(1));
            }
            if ((_index(e, int64_t(4)) <= int64_t(0))) {
                e[static_cast<size_t>(int64_t(5))] = int64_t(0);
                board[static_cast<size_t>(_index(e, int64_t(1)))][static_cast<size_t>(_index(e, int64_t(2)))] = int64_t(0);
            }
        } else {
            int64_t j = int64_t(0);
            while ((j < int64_t(4))) {
                int64_t d = _index(dirs, j);
                int64_t nr = (row + _index(dr, d));
                int64_t nc = (col + _index(dc, d));
                if ((inside(nr, nc) && (_index(_index(board, nr), nc) == int64_t(0)))) {
                    board[static_cast<size_t>(nr)][static_cast<size_t>(nc)] = int64_t(1);
                    board[static_cast<size_t>(row)][static_cast<size_t>(col)] = int64_t(0);
                    e[static_cast<size_t>(int64_t(1))] = nr;
                    e[static_cast<size_t>(int64_t(2))] = nc;
                    moved = true;
                    break;
                }
                j = (j + int64_t(1));
            }
        }
        if ((_index(e, int64_t(5)) == int64_t(1))) {
            if ((moved && (repro <= int64_t(0)))) {
                if ((typ == TYPE_PREY)) {
                    board[static_cast<size_t>(old_r)][static_cast<size_t>(old_c)] = int64_t(1);
                    entities = ([&]{ auto __tmp = entities; __tmp.push_back(create_prey(old_r, old_c)); return __tmp; }());
                    e[static_cast<size_t>(int64_t(3))] = PREY_REPRODUCTION_TIME;
                } else {
                    board[static_cast<size_t>(old_r)][static_cast<size_t>(old_c)] = int64_t(2);
                    entities = ([&]{ auto __tmp = entities; __tmp.push_back(create_predator(old_r, old_c)); return __tmp; }());
                    e[static_cast<size_t>(int64_t(3))] = PREDATOR_REPRODUCTION_TIME;
                }
            } else {
                e[static_cast<size_t>(int64_t(3))] = (repro - int64_t(1));
            }
        }
        i = (i + int64_t(1));
    }
    std::vector<std::vector<int64_t>> alive = {};
    int64_t k = int64_t(0);
    while ((k < entities.size())) {
        std::vector<int64_t> e2 = _index(entities, k);
        if ((_index(e2, int64_t(5)) == int64_t(1))) {
            alive = ([&]{ auto __tmp = alive; __tmp.push_back(e2); return __tmp; }());
        }
        k = (k + int64_t(1));
    }
    entities = alive;
}

int64_t count_entities(int64_t typ) {
    int64_t cnt = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < entities.size())) {
        if (((_index(_index(entities, i), int64_t(0)) == typ) && (_index(_index(entities, i), int64_t(5)) == int64_t(1)))) {
            cnt = (cnt + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return cnt;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        board = create_board();
        setup();
        while ((t < int64_t(10))) {
            step_world();
            t = (t + int64_t(1));
        }
        std::cout << (std::string("Prey: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << count_entities(TYPE_PREY); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Predators: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << count_entities(TYPE_PREDATOR); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
