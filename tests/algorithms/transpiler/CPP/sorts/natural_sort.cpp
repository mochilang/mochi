// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:56:20 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t index_of(std::string s, std::string ch);
bool is_digit(std::string ch);
std::string to_lower(std::string ch);
std::string pad_left(std::string s, int64_t width);
std::vector<std::string> alphanum_key(std::string s);
int64_t compare_keys(const std::vector<std::string>& a, const std::vector<std::string>& b);
std::vector<std::string> natural_sort(const std::vector<std::string>& arr);
int main();

std::string DIGITS = std::string("0123456789");
std::string LOWER = std::string("abcdefghijklmnopqrstuvwxyz");
std::string UPPER = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
std::vector<std::string> example1 = std::vector<std::string>{std::string("2 ft 7 in"), std::string("1 ft 5 in"), std::string("10 ft 2 in"), std::string("2 ft 11 in"), std::string("7 ft 6 in")};
std::vector<std::string> example2 = std::vector<std::string>{std::string("Elm11"), std::string("Elm12"), std::string("Elm2"), std::string("elm0"), std::string("elm1"), std::string("elm10"), std::string("elm13"), std::string("elm9")};

int64_t index_of(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

bool is_digit(std::string ch) {
    return (index_of(DIGITS, ch) >= int64_t(0));
}

std::string to_lower(std::string ch) {
    int64_t idx = index_of(UPPER, ch);
    if ((idx >= int64_t(0))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(idx, (idx + int64_t(1)) - idx); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+idx, __v.begin()+(idx + int64_t(1))); })(LOWER);
    }
    return ch;
}

std::string pad_left(std::string s, int64_t width) {
    std::string res = s;
    while ((res.size() < width)) {
        res = (std::string("0") + res);
    }
    return res;
}

std::vector<std::string> alphanum_key(std::string s) {
    std::vector<std::string> key = {};
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if (is_digit(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s))) {
            std::string num = std::string("");
            while (((i < s.size()) && is_digit(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s)))) {
                num = (num + ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s));
                i = (i + int64_t(1));
            }
            std::string len_str = pad_left(([&]{ std::ostringstream ss; ss << std::boolalpha << num.size(); return ss.str(); }()), int64_t(3));
            key = ([&]{ auto __tmp = key; __tmp.push_back(((std::string("#") + len_str) + num)); return __tmp; }());
        } else {
            std::string seg = std::string("");
            while ((i < s.size())) {
                if (is_digit(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s))) {
                    break;
                }
                seg = (seg + to_lower(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s)));
                i = (i + int64_t(1));
            }
            key = ([&]{ auto __tmp = key; __tmp.push_back(seg); return __tmp; }());
        }
    }
    return key;
}

int64_t compare_keys(const std::vector<std::string>& a, const std::vector<std::string>& b) {
    int64_t i = int64_t(0);
    while (((i < a.size()) && (i < b.size()))) {
        if ((_index(a, i) < _index(b, i))) {
            return -int64_t(1);
        }
        if ((_index(a, i) > _index(b, i))) {
            return int64_t(1);
        }
        i = (i + int64_t(1));
    }
    if ((a.size() < b.size())) {
        return -int64_t(1);
    }
    if ((a.size() > b.size())) {
        return int64_t(1);
    }
    return int64_t(0);
}

std::vector<std::string> natural_sort(const std::vector<std::string>& arr) {
    std::vector<std::string> res = {};
    std::vector<std::vector<std::string>> keys = {};
    int64_t k = int64_t(0);
    while ((k < arr.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(arr, k)); return __tmp; }());
        keys = ([&]{ auto __tmp = keys; __tmp.push_back(alphanum_key(_index(arr, k))); return __tmp; }());
        k = (k + int64_t(1));
    }
    int64_t i = int64_t(1);
    while ((i < res.size())) {
        std::string current = _index(res, i);
        std::vector<std::string> current_key = _index(keys, i);
        int64_t j = (i - int64_t(1));
        while (((j >= int64_t(0)) && (compare_keys(_index(keys, j), current_key) > int64_t(0)))) {
            res[(j + int64_t(1))] = _index(res, j);
            keys[(j + int64_t(1))] = _index(keys, j);
            j = (j - int64_t(1));
        }
        res[(j + int64_t(1))] = current;
        keys[(j + int64_t(1))] = current_key;
        i = (i + int64_t(1));
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = natural_sort(example1); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = natural_sort(example2); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
