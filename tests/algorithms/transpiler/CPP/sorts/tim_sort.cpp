// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:57:16 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> copy_list(const std::vector<int64_t>& xs);
std::vector<int64_t> insertion_sort(const std::vector<int64_t>& xs);
std::vector<int64_t> merge(const std::vector<int64_t>& left, const std::vector<int64_t>& right);
std::vector<int64_t> tim_sort(const std::vector<int64_t>& xs);
std::string list_to_string(const std::vector<int64_t>& xs);
int main();

std::vector<int64_t> sample = std::vector<int64_t>{};
std::vector<int64_t> sorted_sample = std::vector<int64_t>{};
std::vector<int64_t> sample2 = std::vector<int64_t>{int64_t(3), int64_t(2), int64_t(1)};
std::vector<int64_t> sorted_sample2 = std::vector<int64_t>{};

std::vector<int64_t> copy_list(const std::vector<int64_t>& xs) {
    std::vector<int64_t> res = {};
    int64_t k = int64_t(0);
    while ((k < xs.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(xs, k)); return __tmp; }());
        k = (k + int64_t(1));
    }
    return res;
}

std::vector<int64_t> insertion_sort(const std::vector<int64_t>& xs) {
    std::vector<int64_t> arr = copy_list(xs);
    int64_t idx = int64_t(1);
    while ((idx < arr.size())) {
        int64_t value = _index(arr, idx);
        int64_t jdx = (idx - int64_t(1));
        while (((jdx >= int64_t(0)) && (_index(arr, jdx) > value))) {
            arr[(jdx + int64_t(1))] = _index(arr, jdx);
            jdx = (jdx - int64_t(1));
        }
        arr[(jdx + int64_t(1))] = value;
        idx = (idx + int64_t(1));
    }
    return arr;
}

std::vector<int64_t> merge(const std::vector<int64_t>& left, const std::vector<int64_t>& right) {
    std::vector<int64_t> result = {};
    int64_t i = int64_t(0);
    int64_t j = int64_t(0);
    while (((i < left.size()) && (j < right.size()))) {
        if ((_index(left, i) < _index(right, j))) {
            result = ([&]{ auto __tmp = result; __tmp.push_back(_index(left, i)); return __tmp; }());
            i = (i + int64_t(1));
        } else {
            result = ([&]{ auto __tmp = result; __tmp.push_back(_index(right, j)); return __tmp; }());
            j = (j + int64_t(1));
        }
    }
    while ((i < left.size())) {
        result = ([&]{ auto __tmp = result; __tmp.push_back(_index(left, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    while ((j < right.size())) {
        result = ([&]{ auto __tmp = result; __tmp.push_back(_index(right, j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    return result;
}

std::vector<int64_t> tim_sort(const std::vector<int64_t>& xs) {
    int64_t n = xs.size();
    std::vector<std::vector<int64_t>> runs = {};
    std::vector<std::vector<int64_t>> sorted_runs = {};
    std::vector<int64_t> current = {};
    current = ([&]{ auto __tmp = current; __tmp.push_back(_index(xs, int64_t(0))); return __tmp; }());
    int64_t i = int64_t(1);
    while ((i < n)) {
        if ((_index(xs, i) < _index(xs, (i - int64_t(1))))) {
            runs = ([&]{ auto __tmp = runs; __tmp.push_back(copy_list(current)); return __tmp; }());
            current = {};
            current = ([&]{ auto __tmp = current; __tmp.push_back(_index(xs, i)); return __tmp; }());
        } else {
            current = ([&]{ auto __tmp = current; __tmp.push_back(_index(xs, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    runs = ([&]{ auto __tmp = runs; __tmp.push_back(copy_list(current)); return __tmp; }());
    int64_t r = int64_t(0);
    while ((r < runs.size())) {
        sorted_runs = ([&]{ auto __tmp = sorted_runs; __tmp.push_back(insertion_sort(_index(runs, r))); return __tmp; }());
        r = (r + int64_t(1));
    }
    std::vector<int64_t> result = {};
    r = int64_t(0);
    while ((r < sorted_runs.size())) {
        result = merge(result, _index(sorted_runs, r));
        r = (r + int64_t(1));
    }
    return result;
}

std::string list_to_string(const std::vector<int64_t>& xs) {
    std::string s = std::string("[");
    int64_t k = int64_t(0);
    while ((k < xs.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(xs, k); return ss.str(); }()));
        if ((k < (xs.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        k = (k + int64_t(1));
    }
    return (s + std::string("]"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        sample = std::vector<int64_t>{int64_t(5), int64_t(9), int64_t(10), int64_t(3), -int64_t(4), int64_t(5), int64_t(178), int64_t(92), int64_t(46), -int64_t(18), int64_t(0), int64_t(7)};
        sorted_sample = tim_sort(sample);
        std::cout << list_to_string(sorted_sample);
        std::cout << std::endl;
        sorted_sample2 = tim_sort(sample2);
        std::cout << list_to_string(sorted_sample2);
        std::cout << std::endl;
    }
    return 0;
}
