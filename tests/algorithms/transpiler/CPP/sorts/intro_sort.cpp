// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:28:25 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> insertion_sort(const std::vector<int64_t>& a, int64_t start, int64_t end_);
std::vector<int64_t> heapify(const std::vector<int64_t>& a, int64_t index, int64_t heap_size);
std::vector<int64_t> heap_sort(const std::vector<int64_t>& a);
int64_t median_of_3(const std::vector<int64_t>& arr, int64_t first, int64_t middle, int64_t last);
int64_t partition(std::vector<int64_t>& arr, int64_t low, int64_t high, int64_t pivot);
int64_t int_log2(int64_t n);
std::vector<int64_t> intro_sort(const std::vector<int64_t>& arr, int64_t start, int64_t end_, int64_t size_threshold, int64_t max_depth);
void intro_sort_main(const std::vector<int64_t>& arr);
int main();

std::vector<int64_t> example1 = std::vector<int64_t>{int64_t(4), int64_t(2), int64_t(6), int64_t(8), int64_t(1), int64_t(7), int64_t(8), int64_t(22), int64_t(14), int64_t(56), int64_t(27), int64_t(79), int64_t(23), int64_t(45), int64_t(14), int64_t(12)};
std::vector<int64_t> example2 = std::vector<int64_t>{};

std::vector<int64_t> insertion_sort(const std::vector<int64_t>& a, int64_t start, int64_t end_) {
    std::vector<int64_t> arr = a;
    int64_t i = start;
    while ((i < end_)) {
        int64_t key = _index(arr, i);
        int64_t j = i;
        while (((j > start) && (_index(arr, (j - int64_t(1))) > key))) {
            arr[j] = _index(arr, (j - int64_t(1)));
            j = (j - int64_t(1));
        }
        arr[j] = key;
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<int64_t> heapify(const std::vector<int64_t>& a, int64_t index, int64_t heap_size) {
    std::vector<int64_t> arr = a;
    int64_t largest = index;
    int64_t left = ((int64_t(2) * index) + int64_t(1));
    int64_t right = ((int64_t(2) * index) + int64_t(2));
    if (((left < heap_size) && (_index(arr, left) > _index(arr, largest)))) {
        largest = left;
    }
    if (((right < heap_size) && (_index(arr, right) > _index(arr, largest)))) {
        largest = right;
    }
    if ((largest != index)) {
        int64_t temp = _index(arr, index);
        arr[index] = _index(arr, largest);
        arr[largest] = temp;
        arr = heapify(arr, largest, heap_size);
    }
    return arr;
}

std::vector<int64_t> heap_sort(const std::vector<int64_t>& a) {
    std::vector<int64_t> arr = a;
    int64_t n = arr.size();
    if ((n <= int64_t(1))) {
        return arr;
    }
    int64_t i = (n / int64_t(2));
    while (true) {
        arr = heapify(arr, i, n);
        if ((i == int64_t(0))) {
            break;
        }
        i = (i - int64_t(1));
    }
    i = (n - int64_t(1));
    while ((i > int64_t(0))) {
        int64_t temp = _index(arr, int64_t(0));
        arr[int64_t(0)] = _index(arr, i);
        arr[i] = temp;
        arr = heapify(arr, int64_t(0), i);
        i = (i - int64_t(1));
    }
    return arr;
}

int64_t median_of_3(const std::vector<int64_t>& arr, int64_t first, int64_t middle, int64_t last) {
    int64_t a = _index(arr, first);
    int64_t b = _index(arr, middle);
    int64_t c = _index(arr, last);
    if ((((a > b) && (a < c)) || ((a < b) && (a > c)))) {
        return a;
    } else     if ((((b > a) && (b < c)) || ((b < a) && (b > c)))) {
        return b;
    } else {
        return c;
    }

}

int64_t partition(std::vector<int64_t>& arr, int64_t low, int64_t high, int64_t pivot) {
    int64_t i = low;
    int64_t j = high;
    while (true) {
        while ((_index(arr, i) < pivot)) {
            i = (i + int64_t(1));
        }
        j = (j - int64_t(1));
        while ((pivot < _index(arr, j))) {
            j = (j - int64_t(1));
        }
        if ((i >= j)) {
            return i;
        }
        int64_t temp = _index(arr, i);
        arr[i] = _index(arr, j);
        arr[j] = temp;
        i = (i + int64_t(1));
    }
}

int64_t int_log2(int64_t n) {
    int64_t v = n;
    int64_t r = int64_t(0);
    while ((v > int64_t(1))) {
        v = (v / int64_t(2));
        r = (r + int64_t(1));
    }
    return r;
}

std::vector<int64_t> intro_sort(const std::vector<int64_t>& arr, int64_t start, int64_t end_, int64_t size_threshold, int64_t max_depth) {
    std::vector<int64_t> array = arr;
    int64_t s = start;
    int64_t e = end_;
    int64_t depth = max_depth;
    while (((e - s) > size_threshold)) {
        if ((depth == int64_t(0))) {
            return heap_sort(array);
        }
        depth = (depth - int64_t(1));
        int64_t pivot = median_of_3(array, s, ((s + ((e - s) / int64_t(2))) + int64_t(1)), (e - int64_t(1)));
        int64_t p = partition(array, s, e, pivot);
        array = intro_sort(array, p, e, size_threshold, depth);
        e = p;
    }
    std::vector<int64_t> res = insertion_sort(array, s, e);
    int64_t _ = res.size();
    return res;
}

void intro_sort_main(const std::vector<int64_t>& arr) {
    if ((arr.size() == int64_t(0))) {
        { auto __tmp = arr; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        return;
    }
    int64_t max_depth = (int64_t(2) * int_log2(arr.size()));
    std::vector<int64_t> sorted = intro_sort(arr, int64_t(0), arr.size(), int64_t(16), max_depth);
    { auto __tmp = sorted; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        intro_sort_main(example1);
        example2 = std::vector<int64_t>{int64_t(21), int64_t(15), int64_t(11), int64_t(45), -int64_t(2), -int64_t(11), int64_t(46)};
        intro_sort_main(example2);
    }
    return 0;
}
