// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:17 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct SearchProblem;

std::ostream& operator<<(std::ostream&, const SearchProblem&);


struct SearchProblem {
    double x;
    double y;
    double step;
    std::function<double(double, double)> f;
    auto operator<=>(const SearchProblem&) const = default;
};

std::ostream& operator<<(std::ostream& os, const SearchProblem& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'step': "<< std::fixed << std::setprecision(1) << v.step
 << ", " << "'f': "<< "<fn>"
 << '}';
    return os;
}

double score(const SearchProblem& sp);
std::vector<SearchProblem> neighbors(const SearchProblem& sp);
bool equal_state(const SearchProblem& a, const SearchProblem& b);
bool contains_state(const std::vector<SearchProblem>& lst, const SearchProblem& sp);
SearchProblem hill_climbing(const SearchProblem& sp, bool find_max, double max_x, double min_x, double max_y, double min_y, int64_t max_iter);
double test_f1(double x, double y);
int main();

double score(const SearchProblem& sp) {
    return (sp.f)(sp.x, sp.y);
}

std::vector<SearchProblem> neighbors(const SearchProblem& sp) {
    double s = sp.step;
    return std::vector<SearchProblem>{SearchProblem{.x = (sp.x - s), .y = (sp.y - s), .step = s, .f = sp.f}, SearchProblem{.x = (sp.x - s), .y = sp.y, .step = s, .f = sp.f}, SearchProblem{.x = (sp.x - s), .y = (sp.y + s), .step = s, .f = sp.f}, SearchProblem{.x = sp.x, .y = (sp.y - s), .step = s, .f = sp.f}, SearchProblem{.x = sp.x, .y = (sp.y + s), .step = s, .f = sp.f}, SearchProblem{.x = (sp.x + s), .y = (sp.y - s), .step = s, .f = sp.f}, SearchProblem{.x = (sp.x + s), .y = sp.y, .step = s, .f = sp.f}, SearchProblem{.x = (sp.x + s), .y = (sp.y + s), .step = s, .f = sp.f}};
}

bool equal_state(const SearchProblem& a, const SearchProblem& b) {
    return ((a.x == b.x) && (a.y == b.y));
}

bool contains_state(const std::vector<SearchProblem>& lst, const SearchProblem& sp) {
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if (equal_state(_index(lst, i), sp)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

SearchProblem hill_climbing(const SearchProblem& sp, bool find_max, double max_x, double min_x, double max_y, double min_y, int64_t max_iter) {
    SearchProblem current = sp;
    std::vector<SearchProblem> visited = {};
    int64_t iterations = int64_t(0);
    bool solution_found = false;
    while (((solution_found == false) && (iterations < max_iter))) {
        visited = ([&]{ auto __tmp = visited; __tmp.push_back(current); return __tmp; }());
        iterations = (iterations + int64_t(1));
        double current_score = score(current);
        std::vector<SearchProblem> neighs = neighbors(current);
        double max_change = -1000000000000000000.0;
        double min_change = 1000000000000000000.0;
        SearchProblem next = current;
        bool improved = false;
        int64_t i = int64_t(0);
        while ((i < neighs.size())) {
            SearchProblem n = _index(neighs, i);
            i = (i + int64_t(1));
            if (contains_state(visited, n)) {
                continue;
            }
            if (((((n.x > max_x) || (n.x < min_x)) || (n.y > max_y)) || (n.y < min_y))) {
                continue;
            }
            double change = (score(n) - current_score);
            if (find_max) {
                if (((change > max_change) && (change > 0.0))) {
                    max_change = change;
                    next = n;
                    improved = true;
                }
            } else {
                if (((change < min_change) && (change < 0.0))) {
                    min_change = change;
                    next = n;
                    improved = true;
                }
            }
        }
        if (improved) {
            current = next;
        } else {
            solution_found = true;
        }
    }
    return current;
}

double test_f1(double x, double y) {
    return ((x * x) + (y * y));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        SearchProblem prob1 = SearchProblem{.x = 3.0, .y = 4.0, .step = 1.0, .f = test_f1};
        SearchProblem local_min1 = hill_climbing(prob1, false, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, int64_t(10000));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(score(local_min1)); return ss.str(); }());
        std::cout << std::endl;
        SearchProblem prob2 = SearchProblem{.x = 12.0, .y = 47.0, .step = 1.0, .f = test_f1};
        SearchProblem local_min2 = hill_climbing(prob2, false, 100.0, 5.0, 50.0, -5.0, int64_t(10000));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(score(local_min2)); return ss.str(); }());
        std::cout << std::endl;
        SearchProblem prob3 = SearchProblem{.x = 3.0, .y = 4.0, .step = 1.0, .f = test_f1};
        SearchProblem local_max = hill_climbing(prob3, true, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, int64_t(1000));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(score(local_max)); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
