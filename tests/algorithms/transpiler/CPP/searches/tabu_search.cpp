// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:25:43 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Solution;
struct Swap;

std::ostream& operator<<(std::ostream&, const Solution&);
std::ostream& operator<<(std::ostream&, const Swap&);


struct Solution {
    std::vector<std::string> path;
    int64_t cost;
    auto operator<=>(const Solution&) const = default;
};

struct Swap {
    std::string a;
    std::string b;
    auto operator<=>(const Swap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Solution& v) {
    os << '{' << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << ", " << "'cost': "<< v.cost
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Swap& v) {
    os << '{' << "'a': "<< "'" << v.a << "'"
 << ", " << "'b': "<< "'" << v.b << "'"
 << '}';
    return os;
}

int64_t path_cost(const std::vector<std::string>& path, const std::map<std::string, std::map<std::string, int64_t>>& graph);
Solution generate_first_solution(const std::map<std::string, std::map<std::string, int64_t>>& graph, std::string start);
std::vector<std::string> copy_path(const std::vector<std::string>& path);
std::vector<Solution> find_neighborhood(const Solution& sol, const std::map<std::string, std::map<std::string, int64_t>>& graph);
Swap find_swap(const std::vector<std::string>& a, const std::vector<std::string>& b);
Solution tabu_search(const Solution& first, const std::map<std::string, std::map<std::string, int64_t>>& graph, int64_t iters, int64_t size);
int main();

std::map<std::string, std::map<std::string, int64_t>> graph = {{"a", std::map<std::string, int64_t>{{"b", int64_t(20)}, {"c", int64_t(18)}, {"d", int64_t(22)}, {"e", int64_t(26)}}}, {"b", std::map<std::string, int64_t>{{"a", int64_t(20)}, {"c", int64_t(10)}, {"d", int64_t(11)}, {"e", int64_t(12)}}}, {"c", std::map<std::string, int64_t>{{"a", int64_t(18)}, {"b", int64_t(10)}, {"d", int64_t(23)}, {"e", int64_t(24)}}}, {"d", std::map<std::string, int64_t>{{"a", int64_t(22)}, {"b", int64_t(11)}, {"c", int64_t(23)}, {"e", int64_t(40)}}}, {"e", std::map<std::string, int64_t>{{"a", int64_t(26)}, {"b", int64_t(12)}, {"c", int64_t(24)}, {"d", int64_t(40)}}}};
Solution first = Solution{};
Solution best = Solution{};

int64_t path_cost(const std::vector<std::string>& path, const std::map<std::string, std::map<std::string, int64_t>>& graph) {
    int64_t total = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < (path.size() - int64_t(1)))) {
        std::string u = _index(path, i);
        std::string v = _index(path, (i + int64_t(1)));
        total = (total + ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph)));
        i = (i + int64_t(1));
    }
    return total;
}

Solution generate_first_solution(const std::map<std::string, std::map<std::string, int64_t>>& graph, std::string start) {
    std::vector<std::string> path = {};
    std::string visiting = start;
    int64_t total = int64_t(0);
    while ((path.size() < graph.size())) {
        path = ([&]{ auto __tmp = path; __tmp.push_back(visiting); return __tmp; }());
        std::string best_node = std::string("");
        int64_t best_cost = int64_t(1000000);
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(visiting); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph)) {
            auto n = __p.first;
            if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(path, n) && (([&](const auto& __m){ auto __it = __m.find(n); if (__it == __m.end()) return int64_t{}; return __it->second; })(([&](const auto& __m){ auto __it = __m.find(visiting); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph)) < best_cost))) {
                best_cost = ([&](const auto& __m){ auto __it = __m.find(n); if (__it == __m.end()) return int64_t{}; return __it->second; })(([&](const auto& __m){ auto __it = __m.find(visiting); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph));
                best_node = n;
            }
        }
        if ((best_node == std::string(""))) {
            break;
        }
        total = (total + best_cost);
        visiting = best_node;
    }
    path = ([&]{ auto __tmp = path; __tmp.push_back(start); return __tmp; }());
    total = (total + ([&](const auto& __m){ auto __it = __m.find(start); if (__it == __m.end()) return int64_t{}; return __it->second; })(([&](const auto& __m){ auto __it = __m.find(visiting); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph)));
    return Solution{.path = path, .cost = total};
}

std::vector<std::string> copy_path(const std::vector<std::string>& path) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < path.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(path, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<Solution> find_neighborhood(const Solution& sol, const std::map<std::string, std::map<std::string, int64_t>>& graph) {
    std::vector<Solution> neighbors = {};
    int64_t i = int64_t(1);
    while ((i < (sol.path.size() - int64_t(1)))) {
        int64_t j = int64_t(1);
        while ((j < (sol.path.size() - int64_t(1)))) {
            if ((i != j)) {
                std::vector<std::string> new_path = copy_path(sol.path);
                std::string tmp = _index(new_path, i);
                new_path[i] = _index(new_path, j);
                new_path[j] = tmp;
                int64_t cost = path_cost(new_path, graph);
                neighbors = ([&]{ auto __tmp = neighbors; __tmp.push_back(Solution{.path = new_path, .cost = cost}); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return neighbors;
}

Swap find_swap(const std::vector<std::string>& a, const std::vector<std::string>& b) {
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        if ((_index(a, i) != _index(b, i))) {
            return Swap{.a = _index(a, i), .b = _index(b, i)};
        }
        i = (i + int64_t(1));
    }
    return Swap{.a = std::string(""), .b = std::string("")};
}

Solution tabu_search(const Solution& first, const std::map<std::string, std::map<std::string, int64_t>>& graph, int64_t iters, int64_t size) {
    Solution solution = first;
    Solution best = first;
    std::vector<Swap> tabu = {};
    int64_t count = int64_t(0);
    while ((count < iters)) {
        std::vector<Solution> neighborhood = find_neighborhood(solution, graph);
        if ((neighborhood.size() == int64_t(0))) {
            break;
        }
        Solution best_neighbor = _index(neighborhood, int64_t(0));
        Swap best_move = find_swap(solution.path, best_neighbor.path);
        int64_t i = int64_t(1);
        while ((i < neighborhood.size())) {
            Solution cand = _index(neighborhood, i);
            Swap move = find_swap(solution.path, cand.path);
            bool forbidden = false;
            int64_t t = int64_t(0);
            while ((t < tabu.size())) {
                if ((((_index(tabu, t).a == move.a) && (_index(tabu, t).b == move.b)) || ((_index(tabu, t).a == move.b) && (_index(tabu, t).b == move.a)))) {
                    forbidden = true;
                }
                t = (t + int64_t(1));
            }
            if (((forbidden == false) && (cand.cost < best_neighbor.cost))) {
                best_neighbor = cand;
                best_move = move;
            }
            i = (i + int64_t(1));
        }
        solution = best_neighbor;
        tabu = ([&]{ auto __tmp = tabu; __tmp.push_back(best_move); return __tmp; }());
        if ((tabu.size() > size)) {
            std::vector<Swap> new_tab = {};
            int64_t j = int64_t(1);
            while ((j < tabu.size())) {
                new_tab = ([&]{ auto __tmp = new_tab; __tmp.push_back(_index(tabu, j)); return __tmp; }());
                j = (j + int64_t(1));
            }
            tabu = new_tab;
        }
        if ((solution.cost < best.cost)) {
            best = solution;
        }
        count = (count + int64_t(1));
    }
    return best;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        first = generate_first_solution(graph, std::string("a"));
        best = tabu_search(first, graph, int64_t(4), int64_t(3));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = best.path; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << best.cost; return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
