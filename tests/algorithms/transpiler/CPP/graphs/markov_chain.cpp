// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:21:32 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Transition;

std::ostream& operator<<(std::ostream&, const Transition&);


struct Transition {
    std::string src;
    std::string dst;
    double prob;
    auto operator<=>(const Transition&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Transition& v) {
    os << '{' << "'src': "<< "'" << v.src << "'"
 << ", " << "'dst': "<< "'" << v.dst << "'"
 << ", " << "'prob': "<< std::fixed << std::setprecision(1) << v.prob
 << '}';
    return os;
}

int64_t _rand();
double _random();
std::vector<std::string> get_nodes(const std::vector<Transition>& trans);
std::string transition(std::string current, const std::vector<Transition>& trans);
std::map<std::string, int64_t> get_transitions(std::string start, const std::vector<Transition>& trans, int64_t steps);
int main();

int64_t seed = int64_t(1);

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

double _random() {
    return ((double)((1.0 * _rand())) / (2147483648.0));
}

std::vector<std::string> get_nodes(const std::vector<Transition>& trans) {
    std::map<std::string, bool> seen = {};
    for (Transition t : trans) {
        seen[t.src] = true;
        seen[t.dst] = true;
    }
    std::vector<std::string> nodes = {};
    for (std::string k : ([&]{ std::vector<std::decay_t<decltype(seen.begin()->first)>> keys; for(const auto& __p : seen) keys.push_back(__p.first); return keys; }())) {
        nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(k); return __tmp; }());
    }
    return nodes;
}

std::string transition(std::string current, const std::vector<Transition>& trans) {
    double current_probability = 0.0;
    double random_value = _random();
    for (Transition t : trans) {
        if ((t.src == current)) {
            current_probability = (current_probability + t.prob);
            if ((current_probability > random_value)) {
                return t.dst;
            }
        }
    }
    return std::string("");
}

std::map<std::string, int64_t> get_transitions(std::string start, const std::vector<Transition>& trans, int64_t steps) {
    std::map<std::string, int64_t> visited = {};
    for (std::string node : get_nodes(trans)) {
        int64_t one = int64_t(1);
        visited[node] = one;
    }
    std::string node = start;
    int64_t i = int64_t(0);
    while ((i < steps)) {
        node = transition(node, trans);
        int64_t count = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(visited);
        count = (count + int64_t(1));
        visited[node] = count;
        i = (i + int64_t(1));
    }
    return visited;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<Transition> transitions = std::vector<Transition>{Transition{.src = std::string("a"), .dst = std::string("a"), .prob = 0.9}, Transition{.src = std::string("a"), .dst = std::string("b"), .prob = 0.075}, Transition{.src = std::string("a"), .dst = std::string("c"), .prob = 0.025}, Transition{.src = std::string("b"), .dst = std::string("a"), .prob = 0.15}, Transition{.src = std::string("b"), .dst = std::string("b"), .prob = 0.8}, Transition{.src = std::string("b"), .dst = std::string("c"), .prob = 0.05}, Transition{.src = std::string("c"), .dst = std::string("a"), .prob = 0.25}, Transition{.src = std::string("c"), .dst = std::string("b"), .prob = 0.25}, Transition{.src = std::string("c"), .dst = std::string("c"), .prob = 0.5}};
        std::map<std::string, int64_t> result = get_transitions(std::string("a"), transitions, int64_t(5000));
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("a")); if (__it == __m.end()) return int64_t{}; return __it->second; })(result); return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("b")); if (__it == __m.end()) return int64_t{}; return __it->second; })(result); return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("c")); if (__it == __m.end()) return int64_t{}; return __it->second; })(result); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
