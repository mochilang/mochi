// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:18:23 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <map>
#include <any>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct CheckResult;

std::ostream& operator<<(std::ostream&, const CheckResult&);


struct CheckResult {
    int64_t status;
    int64_t odd_node;
    auto operator<=>(const CheckResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const CheckResult& v) {
    os << '{' << "'status': "<< v.status
 << ", " << "'odd_node': "<< v.odd_node
 << '}';
    return os;
}

std::vector<std::vector<bool>> make_matrix(int64_t n);
std::vector<int64_t> dfs(int64_t u, const std::map<int64_t, std::vector<int64_t>>& graph, std::vector<std::vector<bool>> visited_edge, std::vector<int64_t> path);
CheckResult check_circuit_or_path(const std::map<int64_t, std::vector<int64_t>>& graph, int64_t max_node);
void check_euler(const std::map<int64_t, std::vector<int64_t>>& graph, int64_t max_node);
int main();

std::map<int64_t, std::vector<int64_t>> g1 = {{int64_t(1), std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4)}}, {int64_t(2), std::vector<int64_t>{int64_t(1), int64_t(3)}}, {int64_t(3), std::vector<int64_t>{int64_t(1), int64_t(2)}}, {int64_t(4), std::vector<int64_t>{int64_t(1), int64_t(5)}}, {int64_t(5), std::vector<int64_t>{int64_t(4)}}};
std::map<int64_t, std::vector<int64_t>> g2 = {{int64_t(1), std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4), int64_t(5)}}, {int64_t(2), std::vector<int64_t>{int64_t(1), int64_t(3)}}, {int64_t(3), std::vector<int64_t>{int64_t(1), int64_t(2)}}, {int64_t(4), std::vector<int64_t>{int64_t(1), int64_t(5)}}, {int64_t(5), std::vector<int64_t>{int64_t(1), int64_t(4)}}};
std::map<int64_t, std::vector<int64_t>> g3 = {{int64_t(1), std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4)}}, {int64_t(2), std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(4)}}, {int64_t(3), std::vector<int64_t>{int64_t(1), int64_t(2)}}, {int64_t(4), std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(5)}}, {int64_t(5), std::vector<int64_t>{int64_t(4)}}};
std::map<int64_t, std::vector<int64_t>> g4 = {{int64_t(1), std::vector<int64_t>{int64_t(2), int64_t(3)}}, {int64_t(2), std::vector<int64_t>{int64_t(1), int64_t(3)}}, {int64_t(3), std::vector<int64_t>{int64_t(1), int64_t(2)}}};
std::map<int64_t, std::vector<int64_t>> g5 = {{int64_t(1), std::vector<int64_t>{}}, {int64_t(2), std::vector<int64_t>{}}};
int64_t max_node = int64_t(10);

std::vector<std::vector<bool>> make_matrix(int64_t n) {
    std::vector<std::vector<bool>> matrix = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        std::vector<bool> row = {};
        int64_t j = int64_t(0);
        while ((j <= n)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(false); return __tmp; }());
            j = (j + int64_t(1));
        }
        matrix = ([&]{ auto& __tmp = matrix; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return matrix;
}

std::vector<int64_t> dfs(int64_t u, const std::map<int64_t, std::vector<int64_t>>& graph, std::vector<std::vector<bool>> visited_edge, std::vector<int64_t> path) {
    path = ([&]{ auto& __tmp = path; __tmp.push_back(u); return __tmp; }());
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph, u)) {
        std::vector<int64_t> neighbors = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(graph);
        int64_t i = int64_t(0);
        while ((i < neighbors.size())) {
            int64_t v = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(neighbors);
            if ((([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = u; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(visited_edge)) == false)) {
                visited_edge[u][v] = true;
                visited_edge[v][u] = true;
                path = dfs(v, graph, visited_edge, path);
            }
            i = (i + int64_t(1));
        }
    }
    return path;
}

CheckResult check_circuit_or_path(const std::map<int64_t, std::vector<int64_t>>& graph, int64_t max_node) {
    int64_t odd_degree_nodes = int64_t(0);
    int64_t odd_node = -int64_t(1);
    int64_t i = int64_t(0);
    while ((i < max_node)) {
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph, i)) {
            if (((([&](const auto& __m){ auto __it = __m.find(i); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(graph).size() % int64_t(2)) == int64_t(1))) {
                odd_degree_nodes = (odd_degree_nodes + int64_t(1));
                odd_node = i;
            }
        }
        i = (i + int64_t(1));
    }
    if ((odd_degree_nodes == int64_t(0))) {
        return CheckResult{.status = int64_t(1), .odd_node = odd_node};
    }
    if ((odd_degree_nodes == int64_t(2))) {
        return CheckResult{.status = int64_t(2), .odd_node = odd_node};
    }
    return CheckResult{.status = int64_t(3), .odd_node = odd_node};
}

void check_euler(const std::map<int64_t, std::vector<int64_t>>& graph, int64_t max_node) {
    std::vector<std::vector<bool>> visited_edge = make_matrix(max_node);
    CheckResult res = check_circuit_or_path(graph, max_node);
    if ((res.status == int64_t(3))) {
        std::cout << std::string("graph is not Eulerian");
        std::cout << std::endl;
        std::cout << std::string("no path");
        std::cout << std::endl;
        return;
    }
    int64_t start_node = int64_t(1);
    if ((res.status == int64_t(2))) {
        start_node = res.odd_node;
        std::cout << std::string("graph has a Euler path");
        std::cout << std::endl;
    }
    if ((res.status == int64_t(1))) {
        std::cout << std::string("graph has a Euler cycle");
        std::cout << std::endl;
    }
    std::vector<int64_t> path = dfs(start_node, graph, visited_edge, std::vector<int64_t>{});
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = path; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        check_euler(g1, max_node);
        check_euler(g2, max_node);
        check_euler(g3, max_node);
        check_euler(g4, max_node);
        check_euler(g5, max_node);
    }
    return 0;
}
