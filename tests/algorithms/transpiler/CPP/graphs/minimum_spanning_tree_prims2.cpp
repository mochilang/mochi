// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:21:52 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct QueueNode;
struct MSTResult;

std::ostream& operator<<(std::ostream&, const QueueNode&);
std::ostream& operator<<(std::ostream&, const MSTResult&);


struct QueueNode {
    std::string node;
    int64_t weight;
    auto operator<=>(const QueueNode&) const = default;
};

struct MSTResult {
    std::map<std::string, int64_t> dist;
    std::map<std::string, std::string> parent;
    auto operator<=>(const MSTResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const QueueNode& v) {
    os << '{' << "'node': "<< "'" << v.node << "'"
 << ", " << "'weight': "<< v.weight
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const MSTResult& v) {
    os << '{' << "'dist': "<< "{"; bool first_0=true; for(const auto& p: v.dist){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'parent': "<< "{"; bool first_1=true; for(const auto& p: v.parent){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

MSTResult prims_algo(const std::map<std::string, std::map<std::string, int64_t>>& graph);
int64_t iabs(int64_t x);
int main();

std::map<std::string, std::map<std::string, int64_t>> graph = {};
MSTResult res = MSTResult{};
std::map<std::string, int64_t> dist = std::map<std::string, int64_t>{};

MSTResult prims_algo(const std::map<std::string, std::map<std::string, int64_t>>& graph) {
    int64_t INF = int64_t(2147483647);
    std::map<std::string, int64_t> dist = {};
    std::map<std::string, std::string> parent = {};
    std::vector<QueueNode> queue = {};
    for (const auto& __p : graph) {
        auto node = __p.first;
        dist[node] = INF;
        parent[node] = std::string("");
        queue = ([&]{ auto __tmp = queue; __tmp.push_back(QueueNode{.node = node, .weight = INF}); return __tmp; }());
    }
    if ((queue.size() == int64_t(0))) {
        return MSTResult{.dist = dist, .parent = parent};
    }
    int64_t min_idx = int64_t(0);
    int64_t i = int64_t(1);
    while ((i < queue.size())) {
        if ((_index(queue, i).weight < _index(queue, min_idx).weight)) {
            min_idx = i;
        }
        i = (i + int64_t(1));
    }
    QueueNode start_node = _index(queue, min_idx);
    std::string start = start_node.node;
    std::vector<QueueNode> new_q = {};
    int64_t j = int64_t(0);
    while ((j < queue.size())) {
        if ((j != min_idx)) {
            new_q = ([&]{ auto __tmp = new_q; __tmp.push_back(_index(queue, j)); return __tmp; }());
        }
        j = (j + int64_t(1));
    }
    queue = new_q;
    dist[start] = int64_t(0);
    for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(start); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph)) {
        auto neighbour = __p.first;
        int64_t w = ([&](const auto& __m){ auto __it = __m.find(neighbour); if (__it == __m.end()) return int64_t{}; return __it->second; })(([&](const auto& __m){ auto __it = __m.find(start); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph));
        if ((([&](const auto& __m){ auto __it = __m.find(neighbour); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) > (([&](const auto& __m){ auto __it = __m.find(start); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) + w))) {
            dist[neighbour] = (([&](const auto& __m){ auto __it = __m.find(start); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) + w);
            parent[neighbour] = start;
            int64_t k = int64_t(0);
            while ((k < queue.size())) {
                if ((_index(queue, k).node == neighbour)) {
                    { auto& __tmp = queue[static_cast<size_t>(k)]; __tmp.weight = ([&](const auto& __m){ auto __it = __m.find(neighbour); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist); }
                    break;
                }
                k = (k + int64_t(1));
            }
        }
    }
    while ((queue.size() > int64_t(0))) {
        int64_t best_idx = int64_t(0);
        int64_t p = int64_t(1);
        while ((p < queue.size())) {
            if ((_index(queue, p).weight < _index(queue, best_idx).weight)) {
                best_idx = p;
            }
            p = (p + int64_t(1));
        }
        QueueNode node_entry = _index(queue, best_idx);
        std::string node = node_entry.node;
        std::vector<QueueNode> tmp = {};
        int64_t q = int64_t(0);
        while ((q < queue.size())) {
            if ((q != best_idx)) {
                tmp = ([&]{ auto __tmp = tmp; __tmp.push_back(_index(queue, q)); return __tmp; }());
            }
            q = (q + int64_t(1));
        }
        queue = tmp;
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph)) {
            auto neighbour = __p.first;
            int64_t w = ([&](const auto& __m){ auto __it = __m.find(neighbour); if (__it == __m.end()) return int64_t{}; return __it->second; })(([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::map<std::string, int64_t>{}; return __it->second; })(graph));
            if ((([&](const auto& __m){ auto __it = __m.find(neighbour); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) > (([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) + w))) {
                dist[neighbour] = (([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) + w);
                parent[neighbour] = node;
                int64_t r = int64_t(0);
                while ((r < queue.size())) {
                    if ((_index(queue, r).node == neighbour)) {
                        { auto& __tmp = queue[static_cast<size_t>(r)]; __tmp.weight = ([&](const auto& __m){ auto __it = __m.find(neighbour); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist); }
                        break;
                    }
                    r = (r + int64_t(1));
                }
            }
        }
    }
    return MSTResult{.dist = dist, .parent = parent};
}

int64_t iabs(int64_t x) {
    if ((x < int64_t(0))) {
        return -x;
    }
    return x;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        graph[std::string("a")] = std::map<std::string, int64_t>{{"b", int64_t(3)}, {"c", int64_t(15)}};
        graph[std::string("b")] = std::map<std::string, int64_t>{{"a", int64_t(3)}, {"c", int64_t(10)}, {"d", int64_t(100)}};
        graph[std::string("c")] = std::map<std::string, int64_t>{{"a", int64_t(15)}, {"b", int64_t(10)}, {"d", int64_t(5)}};
        graph[std::string("d")] = std::map<std::string, int64_t>{{"b", int64_t(100)}, {"c", int64_t(5)}};
        res = prims_algo(graph);
        dist = res.dist;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << iabs((([&](const auto& __m){ auto __it = __m.find(std::string("a")); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) - ([&](const auto& __m){ auto __it = __m.find(std::string("b")); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist))); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << iabs((([&](const auto& __m){ auto __it = __m.find(std::string("d")); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) - ([&](const auto& __m){ auto __it = __m.find(std::string("b")); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist))); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << iabs((([&](const auto& __m){ auto __it = __m.find(std::string("a")); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) - ([&](const auto& __m){ auto __it = __m.find(std::string("c")); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist))); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
