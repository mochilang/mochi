// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:18:19 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct DirectedGraph;
struct Graph;

std::ostream& operator<<(std::ostream&, const DirectedGraph&);
std::ostream& operator<<(std::ostream&, const Graph&);


struct DirectedGraph {
    std::map<int64_t, std::vector<std::vector<int64_t>>> graph;
    auto operator<=>(const DirectedGraph&) const = default;
};

struct Graph {
    std::map<int64_t, std::vector<std::vector<int64_t>>> graph;
    auto operator<=>(const Graph&) const = default;
};

std::ostream& operator<<(std::ostream& os, const DirectedGraph& v) {
    os << '{' << "'graph': "<< "{"; bool first_0=true; for(const auto& p: v.graph){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Graph& v) {
    os << '{' << "'graph': "<< "{"; bool first_0=true; for(const auto& p: v.graph){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

bool list_contains_int(const std::vector<int64_t>& xs, int64_t x);
bool edge_exists(const std::vector<std::vector<int64_t>>& edges, int64_t w, int64_t v);
int64_t first_key(const std::map<int64_t, std::vector<std::vector<int64_t>>>& m);
int64_t rand_range(int64_t low, int64_t high);
DirectedGraph dg_make_graph();
void dg_add_pair(DirectedGraph g, int64_t u, int64_t v, int64_t w);
void dg_remove_pair(DirectedGraph g, int64_t u, int64_t v);
std::vector<int64_t> dg_all_nodes(const DirectedGraph& g);
std::vector<int64_t> dg_dfs_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::vector<int64_t> order, int64_t d);
std::vector<int64_t> dg_dfs(const DirectedGraph& g, int64_t s, int64_t d);
std::vector<int64_t> dg_bfs(const DirectedGraph& g, int64_t s);
int64_t dg_in_degree(const DirectedGraph& g, int64_t u);
int64_t dg_out_degree(const DirectedGraph& g, int64_t u);
std::vector<int64_t> dg_topo_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::vector<int64_t> stack);
std::vector<int64_t> dg_topological_sort(const DirectedGraph& g);
std::vector<int64_t> dg_cycle_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::map<int64_t, bool> rec, std::vector<int64_t> res);
std::vector<int64_t> dg_cycle_nodes(const DirectedGraph& g);
bool dg_has_cycle_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::map<int64_t, bool> rec);
bool dg_has_cycle(const DirectedGraph& g);
void dg_fill_graph_randomly(DirectedGraph g, int64_t c);
int64_t dg_dfs_time(const DirectedGraph& g, int64_t s, int64_t e);
int64_t dg_bfs_time(const DirectedGraph& g, int64_t s);
Graph g_make_graph();
void g_add_pair(Graph g, int64_t u, int64_t v, int64_t w);
void g_remove_pair(Graph g, int64_t u, int64_t v);
std::vector<int64_t> g_all_nodes(const Graph& g);
std::vector<int64_t> g_dfs_util(const Graph& g, int64_t node, std::map<int64_t, bool> visited, std::vector<int64_t> order, int64_t d);
std::vector<int64_t> g_dfs(const Graph& g, int64_t s, int64_t d);
std::vector<int64_t> g_bfs(const Graph& g, int64_t s);
int64_t g_degree(const Graph& g, int64_t u);
std::vector<int64_t> g_cycle_util(const Graph& g, int64_t node, std::map<int64_t, bool> visited, int64_t parent, std::vector<int64_t> res);
std::vector<int64_t> g_cycle_nodes(const Graph& g);
bool g_has_cycle_util(const Graph& g, int64_t node, std::map<int64_t, bool> visited, int64_t parent);
bool g_has_cycle(const Graph& g);
void g_fill_graph_randomly(Graph g, int64_t c);
int64_t g_dfs_time(const Graph& g, int64_t s, int64_t e);
int64_t g_bfs_time(const Graph& g, int64_t s);
int main();

bool list_contains_int(const std::vector<int64_t>& xs, int64_t x) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(xs) == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

bool edge_exists(const std::vector<std::vector<int64_t>>& edges, int64_t w, int64_t v) {
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        if (((([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)) == w) && (([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)) == v))) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

int64_t first_key(const std::map<int64_t, std::vector<std::vector<int64_t>>>& m) {
    for (const auto& __p : m) {
        auto k = __p.first;
        return k;
    }
    return int64_t(0);
}

int64_t rand_range(int64_t low, int64_t high) {
    return ((_now() % (high - low)) + low);
}

DirectedGraph dg_make_graph() {
    return DirectedGraph{.graph = {}};
}

void dg_add_pair(DirectedGraph g, int64_t u, int64_t v, int64_t w) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, u)) {
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        if (!edge_exists(edges, w, v)) {
            edges = ([&]{ auto& __tmp = edges; __tmp.push_back(std::vector<int64_t>{w, v}); return __tmp; }());
            std::map<int64_t, std::vector<std::vector<int64_t>>> m = g.graph;
            m[u] = edges;
            g.graph = m;
        }
    } else {
        std::map<int64_t, std::vector<std::vector<int64_t>>> m0 = g.graph;
        m0[u] = std::vector<std::vector<int64_t>>{std::vector<int64_t>{w, v}};
        g.graph = m0;
    }
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, v)) {
        std::map<int64_t, std::vector<std::vector<int64_t>>> m1 = g.graph;
        m1[v] = std::vector<std::vector<int64_t>>{};
        g.graph = m1;
    }
}

void dg_remove_pair(DirectedGraph g, int64_t u, int64_t v) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, u)) {
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        std::vector<std::vector<int64_t>> new_edges = {};
        int64_t i = int64_t(0);
        while ((i < edges.size())) {
            if ((([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)) != v)) {
                new_edges = ([&]{ auto& __tmp = new_edges; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        std::map<int64_t, std::vector<std::vector<int64_t>>> m = g.graph;
        m[u] = new_edges;
        g.graph = m;
    }
}

std::vector<int64_t> dg_all_nodes(const DirectedGraph& g) {
    std::vector<int64_t> res = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        res = ([&]{ auto& __tmp = res; __tmp.push_back(k); return __tmp; }());
    }
    return res;
}

std::vector<int64_t> dg_dfs_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::vector<int64_t> order, int64_t d) {
    visited[node] = true;
    order = ([&]{ auto& __tmp = order; __tmp.push_back(node); return __tmp; }());
    if (((d != -int64_t(1)) && (node == d))) {
        return order;
    }
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            order = dg_dfs_util(g, neigh, visited, order, d);
            if (((d != -int64_t(1)) && (order[static_cast<size_t>((order.size() - int64_t(1)))] == d))) {
                return order;
            }
        }
        i = (i + int64_t(1));
    }
    return order;
}

std::vector<int64_t> dg_dfs(const DirectedGraph& g, int64_t s, int64_t d) {
    if ((s == d)) {
        return std::vector<int64_t>{};
    }
    int64_t start = ((s == -int64_t(2)) ? first_key(g.graph) : s);
    std::map<int64_t, bool> visited = {};
    std::vector<int64_t> order = {};
    order = dg_dfs_util(g, start, visited, order, d);
    return order;
}

std::vector<int64_t> dg_bfs(const DirectedGraph& g, int64_t s) {
    std::vector<int64_t> queue = {};
    std::map<int64_t, bool> visited = {};
    std::vector<int64_t> order = {};
    int64_t start = ((s == -int64_t(2)) ? first_key(g.graph) : s);
    queue = ([&]{ auto& __tmp = queue; __tmp.push_back(start); return __tmp; }());
    visited[start] = true;
    while ((queue.size() > int64_t(0))) {
        int64_t node = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(queue);
        queue = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), queue.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+queue.size()); })(queue);
        order = ([&]{ auto& __tmp = order; __tmp.push_back(node); return __tmp; }());
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        int64_t i = int64_t(0);
        while ((i < edges.size())) {
            int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
                queue = ([&]{ auto& __tmp = queue; __tmp.push_back(neigh); return __tmp; }());
                visited[neigh] = true;
            }
            i = (i + int64_t(1));
        }
    }
    return order;
}

int64_t dg_in_degree(const DirectedGraph& g, int64_t u) {
    int64_t count = int64_t(0);
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        int64_t i = int64_t(0);
        while ((i < edges.size())) {
            if ((([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)) == u)) {
                count = (count + int64_t(1));
            }
            i = (i + int64_t(1));
        }
    }
    return count;
}

int64_t dg_out_degree(const DirectedGraph& g, int64_t u) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, u)) {
        return ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph).size();
    }
    return int64_t(0);
}

std::vector<int64_t> dg_topo_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::vector<int64_t> stack) {
    visited[node] = true;
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            stack = dg_topo_util(g, neigh, visited, stack);
        }
        i = (i + int64_t(1));
    }
    stack = ([&]{ auto& __tmp = stack; __tmp.push_back(node); return __tmp; }());
    return stack;
}

std::vector<int64_t> dg_topological_sort(const DirectedGraph& g) {
    std::map<int64_t, bool> visited = {};
    std::vector<int64_t> stack = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, k)) {
            stack = dg_topo_util(g, k, visited, stack);
        }
    }
    std::vector<int64_t> res = {};
    int64_t i = (stack.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(stack)); return __tmp; }());
        i = (i - int64_t(1));
    }
    return res;
}

std::vector<int64_t> dg_cycle_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::map<int64_t, bool> rec, std::vector<int64_t> res) {
    visited[node] = true;
    rec[node] = true;
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            res = dg_cycle_util(g, neigh, visited, rec, res);
        } else         if (([&](const auto& __m){ auto __it = __m.find(neigh); if (__it == __m.end()) return bool{}; return __it->second; })(rec)) {
            if (!list_contains_int(res, neigh)) {
                res = ([&]{ auto& __tmp = res; __tmp.push_back(neigh); return __tmp; }());
            }
            if (!list_contains_int(res, node)) {
                res = ([&]{ auto& __tmp = res; __tmp.push_back(node); return __tmp; }());
            }
        }

        i = (i + int64_t(1));
    }
    rec[node] = false;
    return res;
}

std::vector<int64_t> dg_cycle_nodes(const DirectedGraph& g) {
    std::map<int64_t, bool> visited = {};
    std::map<int64_t, bool> rec = {};
    std::vector<int64_t> res = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, k)) {
            res = dg_cycle_util(g, k, visited, rec, res);
        }
    }
    return res;
}

bool dg_has_cycle_util(const DirectedGraph& g, int64_t node, std::map<int64_t, bool> visited, std::map<int64_t, bool> rec) {
    visited[node] = true;
    rec[node] = true;
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            if (dg_has_cycle_util(g, neigh, visited, rec)) {
                return true;
            }
        } else         if (([&](const auto& __m){ auto __it = __m.find(neigh); if (__it == __m.end()) return bool{}; return __it->second; })(rec)) {
            return true;
        }

        i = (i + int64_t(1));
    }
    rec[node] = false;
    return false;
}

bool dg_has_cycle(const DirectedGraph& g) {
    std::map<int64_t, bool> visited = {};
    std::map<int64_t, bool> rec = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, k)) {
            if (dg_has_cycle_util(g, k, visited, rec)) {
                return true;
            }
        }
    }
    return false;
}

void dg_fill_graph_randomly(DirectedGraph g, int64_t c) {
    int64_t count = c;
    if ((count == -int64_t(1))) {
        count = rand_range(int64_t(10), int64_t(10010));
    }
    int64_t i = int64_t(0);
    while ((i < count)) {
        int64_t edge_count = rand_range(int64_t(1), int64_t(103));
        int64_t j = int64_t(0);
        while ((j < edge_count)) {
            int64_t n = rand_range(int64_t(0), count);
            if ((n != i)) {
                dg_add_pair(g, i, n, int64_t(1));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
}

int64_t dg_dfs_time(const DirectedGraph& g, int64_t s, int64_t e) {
    int64_t begin = _now();
    dg_dfs(g, s, e);
    int64_t end = _now();
    return (end - begin);
}

int64_t dg_bfs_time(const DirectedGraph& g, int64_t s) {
    int64_t begin = _now();
    dg_bfs(g, s);
    int64_t end = _now();
    return (end - begin);
}

Graph g_make_graph() {
    return Graph{.graph = {}};
}

void g_add_pair(Graph g, int64_t u, int64_t v, int64_t w) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, u)) {
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        if (!edge_exists(edges, w, v)) {
            edges = ([&]{ auto& __tmp = edges; __tmp.push_back(std::vector<int64_t>{w, v}); return __tmp; }());
            std::map<int64_t, std::vector<std::vector<int64_t>>> m = g.graph;
            m[u] = edges;
            g.graph = m;
        }
    } else {
        std::map<int64_t, std::vector<std::vector<int64_t>>> m0 = g.graph;
        m0[u] = std::vector<std::vector<int64_t>>{std::vector<int64_t>{w, v}};
        g.graph = m0;
    }
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, v)) {
        std::vector<std::vector<int64_t>> edges2 = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        if (!edge_exists(edges2, w, u)) {
            edges2 = ([&]{ auto& __tmp = edges2; __tmp.push_back(std::vector<int64_t>{w, u}); return __tmp; }());
            std::map<int64_t, std::vector<std::vector<int64_t>>> m2 = g.graph;
            m2[v] = edges2;
            g.graph = m2;
        }
    } else {
        std::map<int64_t, std::vector<std::vector<int64_t>>> m3 = g.graph;
        m3[v] = std::vector<std::vector<int64_t>>{std::vector<int64_t>{w, u}};
        g.graph = m3;
    }
}

void g_remove_pair(Graph g, int64_t u, int64_t v) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, u)) {
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        std::vector<std::vector<int64_t>> new_edges = {};
        int64_t i = int64_t(0);
        while ((i < edges.size())) {
            if ((([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)) != v)) {
                new_edges = ([&]{ auto& __tmp = new_edges; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges)); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        std::map<int64_t, std::vector<std::vector<int64_t>>> m = g.graph;
        m[u] = new_edges;
        g.graph = m;
    }
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, v)) {
        std::vector<std::vector<int64_t>> edges2 = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        std::vector<std::vector<int64_t>> new_edges2 = {};
        int64_t j = int64_t(0);
        while ((j < edges2.size())) {
            if ((([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges2)) != u)) {
                new_edges2 = ([&]{ auto& __tmp = new_edges2; __tmp.push_back(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges2)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        std::map<int64_t, std::vector<std::vector<int64_t>>> m2 = g.graph;
        m2[v] = new_edges2;
        g.graph = m2;
    }
}

std::vector<int64_t> g_all_nodes(const Graph& g) {
    std::vector<int64_t> res = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        res = ([&]{ auto& __tmp = res; __tmp.push_back(k); return __tmp; }());
    }
    return res;
}

std::vector<int64_t> g_dfs_util(const Graph& g, int64_t node, std::map<int64_t, bool> visited, std::vector<int64_t> order, int64_t d) {
    visited[node] = true;
    order = ([&]{ auto& __tmp = order; __tmp.push_back(node); return __tmp; }());
    if (((d != -int64_t(1)) && (node == d))) {
        return order;
    }
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            order = g_dfs_util(g, neigh, visited, order, d);
            if (((d != -int64_t(1)) && (order[static_cast<size_t>((order.size() - int64_t(1)))] == d))) {
                return order;
            }
        }
        i = (i + int64_t(1));
    }
    return order;
}

std::vector<int64_t> g_dfs(const Graph& g, int64_t s, int64_t d) {
    if ((s == d)) {
        return std::vector<int64_t>{};
    }
    int64_t start = ((s == -int64_t(2)) ? first_key(g.graph) : s);
    std::map<int64_t, bool> visited = {};
    std::vector<int64_t> order = {};
    order = g_dfs_util(g, start, visited, order, d);
    return order;
}

std::vector<int64_t> g_bfs(const Graph& g, int64_t s) {
    std::vector<int64_t> queue = {};
    std::map<int64_t, bool> visited = {};
    std::vector<int64_t> order = {};
    int64_t start = ((s == -int64_t(2)) ? first_key(g.graph) : s);
    queue = ([&]{ auto& __tmp = queue; __tmp.push_back(start); return __tmp; }());
    visited[start] = true;
    while ((queue.size() > int64_t(0))) {
        int64_t node = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(queue);
        queue = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), queue.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+queue.size()); })(queue);
        order = ([&]{ auto& __tmp = order; __tmp.push_back(node); return __tmp; }());
        std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
        int64_t i = int64_t(0);
        while ((i < edges.size())) {
            int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
                queue = ([&]{ auto& __tmp = queue; __tmp.push_back(neigh); return __tmp; }());
                visited[neigh] = true;
            }
            i = (i + int64_t(1));
        }
    }
    return order;
}

int64_t g_degree(const Graph& g, int64_t u) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.graph, u)) {
        return ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph).size();
    }
    return int64_t(0);
}

std::vector<int64_t> g_cycle_util(const Graph& g, int64_t node, std::map<int64_t, bool> visited, int64_t parent, std::vector<int64_t> res) {
    visited[node] = true;
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            res = g_cycle_util(g, neigh, visited, node, res);
        } else         if ((neigh != parent)) {
            if (!list_contains_int(res, neigh)) {
                res = ([&]{ auto& __tmp = res; __tmp.push_back(neigh); return __tmp; }());
            }
            if (!list_contains_int(res, node)) {
                res = ([&]{ auto& __tmp = res; __tmp.push_back(node); return __tmp; }());
            }
        }

        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> g_cycle_nodes(const Graph& g) {
    std::map<int64_t, bool> visited = {};
    std::vector<int64_t> res = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, k)) {
            res = g_cycle_util(g, k, visited, -int64_t(1), res);
        }
    }
    return res;
}

bool g_has_cycle_util(const Graph& g, int64_t node, std::map<int64_t, bool> visited, int64_t parent) {
    visited[node] = true;
    std::vector<std::vector<int64_t>> edges = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g.graph);
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        int64_t neigh = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, neigh)) {
            if (g_has_cycle_util(g, neigh, visited, node)) {
                return true;
            }
        } else         if ((neigh != parent)) {
            return true;
        }

        i = (i + int64_t(1));
    }
    return false;
}

bool g_has_cycle(const Graph& g) {
    std::map<int64_t, bool> visited = {};
    for (const auto& __p : g.graph) {
        auto k = __p.first;
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, k)) {
            if (g_has_cycle_util(g, k, visited, -int64_t(1))) {
                return true;
            }
        }
    }
    return false;
}

void g_fill_graph_randomly(Graph g, int64_t c) {
    int64_t count = c;
    if ((count == -int64_t(1))) {
        count = rand_range(int64_t(10), int64_t(10010));
    }
    int64_t i = int64_t(0);
    while ((i < count)) {
        int64_t edge_count = rand_range(int64_t(1), int64_t(103));
        int64_t j = int64_t(0);
        while ((j < edge_count)) {
            int64_t n = rand_range(int64_t(0), count);
            if ((n != i)) {
                g_add_pair(g, i, n, int64_t(1));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
}

int64_t g_dfs_time(const Graph& g, int64_t s, int64_t e) {
    int64_t begin = _now();
    g_dfs(g, s, e);
    int64_t end = _now();
    return (end - begin);
}

int64_t g_bfs_time(const Graph& g, int64_t s) {
    int64_t begin = _now();
    g_bfs(g, s);
    int64_t end = _now();
    return (end - begin);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        DirectedGraph dg = dg_make_graph();
        dg_add_pair(dg, int64_t(0), int64_t(1), int64_t(5));
        dg_add_pair(dg, int64_t(0), int64_t(2), int64_t(3));
        dg_add_pair(dg, int64_t(1), int64_t(3), int64_t(2));
        dg_add_pair(dg, int64_t(2), int64_t(3), int64_t(4));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = dg_dfs(dg, -int64_t(2), -int64_t(1)); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = dg_bfs(dg, -int64_t(2)); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << dg_in_degree(dg, int64_t(3)); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << dg_out_degree(dg, int64_t(0)); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = dg_topological_sort(dg); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << dg_has_cycle(dg); return ss.str(); }());
        std::cout << std::endl;
        Graph ug = g_make_graph();
        g_add_pair(ug, int64_t(0), int64_t(1), int64_t(1));
        g_add_pair(ug, int64_t(1), int64_t(2), int64_t(1));
        g_add_pair(ug, int64_t(2), int64_t(0), int64_t(1));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = g_dfs(ug, -int64_t(2), -int64_t(1)); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = g_bfs(ug, -int64_t(2)); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << g_degree(ug, int64_t(1)); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << g_has_cycle(ug); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
