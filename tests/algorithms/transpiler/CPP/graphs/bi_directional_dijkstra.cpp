// Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:21:01 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <map>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Edge;
struct QItem;
struct PassResult;

std::ostream& operator<<(std::ostream&, const Edge&);
std::ostream& operator<<(std::ostream&, const QItem&);
std::ostream& operator<<(std::ostream&, const PassResult&);


struct Edge {
    std::string to;
    int64_t cost;
    auto operator<=>(const Edge&) const = default;
};

struct QItem {
    std::string node;
    int64_t cost;
    auto operator<=>(const QItem&) const = default;
};

struct PassResult {
    std::vector<QItem> queue;
    int64_t dist;
    auto operator<=>(const PassResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Edge& v) {
    os << '{' << "'to': "<< "'" << v.to << "'"
 << ", " << "'cost': "<< v.cost
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const QItem& v) {
    os << '{' << "'node': "<< "'" << v.node << "'"
 << ", " << "'cost': "<< v.cost
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PassResult& v) {
    os << '{' << "'queue': "<< "["; for(size_t i=0;i<v.queue.size();++i){ if(i>0) os << ", "; os << v.queue[i]; } os << "]"
 << ", " << "'dist': "<< v.dist
 << '}';
    return os;
}

int64_t get_min_index(const std::vector<QItem>& q);
std::vector<QItem> remove_at(const std::vector<QItem>& q, int64_t idx);
PassResult pass_and_relaxation(const std::map<std::string, std::vector<Edge>>& graph, std::string v, const std::map<std::string, bool>& visited_forward, const std::map<std::string, bool>& visited_backward, std::map<std::string, int64_t>& cst_fwd, const std::map<std::string, int64_t>& cst_bwd, const std::vector<QItem>& queue, std::map<std::string, std::string>& parent, int64_t shortest_distance);
int64_t bidirectional_dij(std::string source, std::string destination, const std::map<std::string, std::vector<Edge>>& graph_forward, const std::map<std::string, std::vector<Edge>>& graph_backward);
int main();

std::map<std::string, std::vector<Edge>> graph_fwd = {{"B", std::vector<Edge>{Edge{.to = std::string("C"), .cost = int64_t(1)}}}, {"C", std::vector<Edge>{Edge{.to = std::string("D"), .cost = int64_t(1)}}}, {"D", std::vector<Edge>{Edge{.to = std::string("F"), .cost = int64_t(1)}}}, {"E", std::vector<Edge>{Edge{.to = std::string("B"), .cost = int64_t(1)}, Edge{.to = std::string("G"), .cost = int64_t(2)}}}, {"F", std::vector<Edge>{}}, {"G", std::vector<Edge>{Edge{.to = std::string("F"), .cost = int64_t(1)}}}};
std::map<std::string, std::vector<Edge>> graph_bwd = {{"B", std::vector<Edge>{Edge{.to = std::string("E"), .cost = int64_t(1)}}}, {"C", std::vector<Edge>{Edge{.to = std::string("B"), .cost = int64_t(1)}}}, {"D", std::vector<Edge>{Edge{.to = std::string("C"), .cost = int64_t(1)}}}, {"F", std::vector<Edge>{Edge{.to = std::string("D"), .cost = int64_t(1)}, Edge{.to = std::string("G"), .cost = int64_t(1)}}}, {"E", std::vector<Edge>{}}, {"G", std::vector<Edge>{Edge{.to = std::string("E"), .cost = int64_t(2)}}}};

int64_t get_min_index(const std::vector<QItem>& q) {
    int64_t idx = int64_t(0);
    int64_t i = int64_t(1);
    while ((i < q.size())) {
        if ((q[i].cost < q[idx].cost)) {
            idx = i;
        }
        i = (i + int64_t(1));
    }
    return idx;
}

std::vector<QItem> remove_at(const std::vector<QItem>& q, int64_t idx) {
    std::vector<QItem> res = {};
    int64_t i = int64_t(0);
    while ((i < q.size())) {
        if ((i != idx)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(q[i]); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

PassResult pass_and_relaxation(const std::map<std::string, std::vector<Edge>>& graph, std::string v, const std::map<std::string, bool>& visited_forward, const std::map<std::string, bool>& visited_backward, std::map<std::string, int64_t>& cst_fwd, const std::map<std::string, int64_t>& cst_bwd, const std::vector<QItem>& queue, std::map<std::string, std::string>& parent, int64_t shortest_distance) {
    std::vector<QItem> q = queue;
    int64_t sd = shortest_distance;
    for (Edge e : ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : std::vector<Edge>{}; })(graph)) {
        std::string nxt = e.to;
        int64_t d = e.cost;
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited_forward, nxt)) {
            continue;
        }
        int64_t old_cost = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(cst_fwd, nxt) ? ([&](const auto& __m){ auto __it = __m.find(nxt); return __it != __m.end() ? __it->second : 0; })(cst_fwd) : int64_t(2147483647));
        int64_t new_cost = (([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(cst_fwd) + d);
        if ((new_cost < old_cost)) {
            q = ([&]{ auto __tmp = q; __tmp.push_back(QItem{.node = nxt, .cost = new_cost}); return __tmp; }());
            cst_fwd[nxt] = new_cost;
            parent[nxt] = v;
        }
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited_backward, nxt)) {
            int64_t alt = ((([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(cst_fwd) + d) + ([&](const auto& __m){ auto __it = __m.find(nxt); return __it != __m.end() ? __it->second : 0; })(cst_bwd));
            if ((alt < sd)) {
                sd = alt;
            }
        }
    }
    return PassResult{.queue = q, .dist = sd};
}

int64_t bidirectional_dij(std::string source, std::string destination, const std::map<std::string, std::vector<Edge>>& graph_forward, const std::map<std::string, std::vector<Edge>>& graph_backward) {
    int64_t shortest_path_distance = -int64_t(1);
    std::map<std::string, bool> visited_forward = {};
    std::map<std::string, bool> visited_backward = {};
    std::map<std::string, int64_t> cst_fwd = {};
    cst_fwd[source] = int64_t(0);
    std::map<std::string, int64_t> cst_bwd = {};
    cst_bwd[destination] = int64_t(0);
    std::map<std::string, std::string> parent_forward = {};
    parent_forward[source] = std::string("");
    std::map<std::string, std::string> parent_backward = {};
    parent_backward[destination] = std::string("");
    std::vector<QItem> queue_forward = {};
    queue_forward = ([&]{ auto __tmp = queue_forward; __tmp.push_back(QItem{.node = source, .cost = int64_t(0)}); return __tmp; }());
    std::vector<QItem> queue_backward = {};
    queue_backward = ([&]{ auto __tmp = queue_backward; __tmp.push_back(QItem{.node = destination, .cost = int64_t(0)}); return __tmp; }());
    int64_t shortest_distance = int64_t(2147483647);
    if ((source == destination)) {
        return int64_t(0);
    }
    while (((queue_forward.size() > int64_t(0)) && (queue_backward.size() > int64_t(0)))) {
        int64_t idx_f = get_min_index(queue_forward);
        QItem item_f = queue_forward[idx_f];
        queue_forward = remove_at(queue_forward, idx_f);
        std::string v_fwd = item_f.node;
        visited_forward[v_fwd] = true;
        int64_t idx_b = get_min_index(queue_backward);
        QItem item_b = queue_backward[idx_b];
        queue_backward = remove_at(queue_backward, idx_b);
        std::string v_bwd = item_b.node;
        visited_backward[v_bwd] = true;
        PassResult res_f = pass_and_relaxation(graph_forward, v_fwd, visited_forward, visited_backward, cst_fwd, cst_bwd, queue_forward, parent_forward, shortest_distance);
        queue_forward = res_f.queue;
        shortest_distance = res_f.dist;
        PassResult res_b = pass_and_relaxation(graph_backward, v_bwd, visited_backward, visited_forward, cst_bwd, cst_fwd, queue_backward, parent_backward, shortest_distance);
        queue_backward = res_b.queue;
        shortest_distance = res_b.dist;
        if (((([&](const auto& __m){ auto __it = __m.find(v_fwd); return __it != __m.end() ? __it->second : 0; })(cst_fwd) + ([&](const auto& __m){ auto __it = __m.find(v_bwd); return __it != __m.end() ? __it->second : 0; })(cst_bwd)) >= shortest_distance)) {
            break;
        }
    }
    if ((shortest_distance != int64_t(2147483647))) {
        shortest_path_distance = shortest_distance;
    }
    return shortest_path_distance;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << bidirectional_dij(std::string("E"), std::string("F"), graph_fwd, graph_bwd); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
