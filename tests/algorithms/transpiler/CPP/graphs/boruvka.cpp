// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:12:36 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Edge;
struct Graph;
struct UnionResult;

std::ostream& operator<<(std::ostream&, const Edge&);
std::ostream& operator<<(std::ostream&, const Graph&);
std::ostream& operator<<(std::ostream&, const UnionResult&);


struct Edge {
    int64_t u;
    int64_t v;
    int64_t w;
    auto operator<=>(const Edge&) const = default;
};

struct Graph {
    int64_t num_nodes;
    std::vector<Edge> edges;
    std::map<int64_t, int64_t> component;
    auto operator<=>(const Graph&) const = default;
};

struct UnionResult {
    Graph graph;
    std::vector<int64_t> component_size;
    auto operator<=>(const UnionResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Edge& v) {
    os << '{' << "'u': "<< v.u
 << ", " << "'v': "<< v.v
 << ", " << "'w': "<< v.w
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Graph& v) {
    os << '{' << "'num_nodes': "<< v.num_nodes
 << ", " << "'edges': "<< "["; for(size_t i=0;i<v.edges.size();++i){ if(i>0) os << ", "; os << v.edges[i]; } os << "]"
 << ", " << "'component': "<< "{"; bool first_2=true; for(const auto& p: v.component){ if(!first_2) os << ", "; first_2=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const UnionResult& v) {
    os << '{' << "'graph': "<< v.graph
 << ", " << "'component_size': "<< "["; for(size_t i=0;i<v.component_size.size();++i){ if(i>0) os << ", "; os << v.component_size[i]; } os << "]"
 << '}';
    return os;
}

Graph new_graph(int64_t num_nodes);
Graph add_edge(const Graph& g, int64_t u, int64_t v, int64_t w);
int64_t find_component(const Graph& g, int64_t node);
Graph set_component(Graph& g, int64_t node);
UnionResult _union(Graph& g, const std::vector<int64_t>& component_size, int64_t u, int64_t v);
std::vector<Edge> create_empty_edges(int64_t n);
int64_t boruvka(Graph& g);
int main();

Graph new_graph(int64_t num_nodes) {
    return Graph{.num_nodes = num_nodes, .edges = std::vector<Edge>{}, .component = {}};
}

Graph add_edge(const Graph& g, int64_t u, int64_t v, int64_t w) {
    std::vector<Edge> es = g.edges;
    es = ([&]{ auto __tmp = es; __tmp.push_back(Edge{.u = u, .v = v, .w = w}); return __tmp; }());
    return Graph{.num_nodes = g.num_nodes, .edges = es, .component = g.component};
}

int64_t find_component(const Graph& g, int64_t node) {
    if ((([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component) == node)) {
        return node;
    }
    return find_component(g, ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component));
}

Graph set_component(Graph& g, int64_t node) {
    if ((([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component) != node)) {
        std::map<int64_t, int64_t> comp = g.component;
        int64_t k = int64_t(0);
        while ((k < g.num_nodes)) {
            comp[static_cast<size_t>(k)] = find_component(g, k);
            k = (k + int64_t(1));
        }
        g = Graph{.num_nodes = g.num_nodes, .edges = g.edges, .component = comp};
    }
    return g;
}

UnionResult _union(Graph& g, const std::vector<int64_t>& component_size, int64_t u, int64_t v) {
    std::vector<int64_t> comp_size = component_size;
    std::map<int64_t, int64_t> comp = g.component;
    if ((_index(comp_size, u) <= _index(comp_size, v))) {
        comp[static_cast<size_t>(u)] = v;
        comp_size[static_cast<size_t>(v)] = (_index(comp_size, v) + _index(comp_size, u));
        g = Graph{.num_nodes = g.num_nodes, .edges = g.edges, .component = comp};
        g = set_component(g, u);
    } else {
        comp[static_cast<size_t>(v)] = u;
        comp_size[static_cast<size_t>(u)] = (_index(comp_size, u) + _index(comp_size, v));
        g = Graph{.num_nodes = g.num_nodes, .edges = g.edges, .component = comp};
        g = set_component(g, v);
    }
    return UnionResult{.graph = g, .component_size = comp_size};
}

std::vector<Edge> create_empty_edges(int64_t n) {
    std::vector<Edge> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(Edge{.u = (int64_t(0) - int64_t(1)), .v = (int64_t(0) - int64_t(1)), .w = (int64_t(0) - int64_t(1))}); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

int64_t boruvka(Graph& g) {
    std::vector<int64_t> component_size = {};
    int64_t i = int64_t(0);
    while ((i < g.num_nodes)) {
        component_size = ([&]{ auto __tmp = component_size; __tmp.push_back(int64_t(1)); return __tmp; }());
        std::map<int64_t, int64_t> comp = g.component;
        comp[static_cast<size_t>(i)] = i;
        g = Graph{.num_nodes = g.num_nodes, .edges = g.edges, .component = comp};
        i = (i + int64_t(1));
    }
    int64_t mst_weight = int64_t(0);
    int64_t num_components = g.num_nodes;
    std::vector<Edge> minimum_weight_edge = create_empty_edges(g.num_nodes);
    while ((num_components > int64_t(1))) {
        for (Edge e : g.edges) {
            int64_t u = e.u;
            int64_t v = e.v;
            int64_t w = e.w;
            int64_t u_comp = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component);
            int64_t v_comp = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component);
            if ((u_comp != v_comp)) {
                Edge current_u = _index(minimum_weight_edge, u_comp);
                if (((current_u.u == (int64_t(0) - int64_t(1))) || (current_u.w > w))) {
                    minimum_weight_edge[static_cast<size_t>(u_comp)] = Edge{.u = u, .v = v, .w = w};
                }
                Edge current_v = _index(minimum_weight_edge, v_comp);
                if (((current_v.u == (int64_t(0) - int64_t(1))) || (current_v.w > w))) {
                    minimum_weight_edge[static_cast<size_t>(v_comp)] = Edge{.u = u, .v = v, .w = w};
                }
            }
        }
        for (Edge e : minimum_weight_edge) {
            if ((e.u != (int64_t(0) - int64_t(1)))) {
                int64_t u = e.u;
                int64_t v = e.v;
                int64_t w = e.w;
                int64_t u_comp = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component);
                int64_t v_comp = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.component);
                if ((u_comp != v_comp)) {
                    mst_weight = (mst_weight + w);
                    UnionResult res = _union(g, component_size, u_comp, v_comp);
                    g = res.graph;
                    component_size = res.component_size;
                    std::cout << ((((std::string("Added edge [") + ([&]{ std::ostringstream ss; ss << std::boolalpha << u; return ss.str(); }())) + std::string(" - ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << v; return ss.str(); }())) + std::string("]"));
                    std::cout << std::endl;
                    std::cout << (std::string("Added weight: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << w; return ss.str(); }()));
                    std::cout << std::endl;
                    std::cout << std::string("");
                    std::cout << std::endl;
                    num_components = (num_components - int64_t(1));
                }
            }
        }
        minimum_weight_edge = create_empty_edges(g.num_nodes);
    }
    std::cout << (std::string("The total weight of the minimal spanning tree is: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << mst_weight; return ss.str(); }()));
    std::cout << std::endl;
    return mst_weight;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Graph g = new_graph(int64_t(8));
        std::vector<std::vector<int64_t>> edges = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(10)}, std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(6)}, std::vector<int64_t>{int64_t(0), int64_t(3), int64_t(5)}, std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(15)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4)}, std::vector<int64_t>{int64_t(3), int64_t(4), int64_t(8)}, std::vector<int64_t>{int64_t(4), int64_t(5), int64_t(10)}, std::vector<int64_t>{int64_t(4), int64_t(6), int64_t(6)}, std::vector<int64_t>{int64_t(4), int64_t(7), int64_t(5)}, std::vector<int64_t>{int64_t(5), int64_t(7), int64_t(15)}, std::vector<int64_t>{int64_t(6), int64_t(7), int64_t(4)}};
        for (std::vector<int64_t> e : edges) {
            g = add_edge(g, _index(e, int64_t(0)), _index(e, int64_t(1)), _index(e, int64_t(2)));
        }
        boruvka(g);
    }
    return 0;
}
