// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:17:29 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Graph;

std::ostream& operator<<(std::ostream&, const Graph&);


struct Graph {
    std::map<std::string, std::vector<std::string>> adj;
    bool directed;
    auto operator<=>(const Graph&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Graph& v) {
    os << '{' << "'adj': "<< "{"; bool first_0=true; for(const auto& p: v.adj){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'directed': "<< v.directed
 << '}';
    return os;
}

Graph create_graph(const std::vector<std::string>& vertices, const std::vector<std::vector<std::string>>& edges, bool directed);
Graph add_vertex(const Graph& graph, std::string v);
std::vector<std::string> remove_from_list(const std::vector<std::string>& lst, std::string value);
std::map<std::string, std::vector<std::string>> remove_key(const std::map<std::string, std::vector<std::string>>& m, std::string key);
Graph add_edge(const Graph& graph, std::string s, std::string d);
Graph remove_edge(const Graph& graph, std::string s, std::string d);
Graph remove_vertex(const Graph& graph, std::string v);
bool contains_vertex(const Graph& graph, std::string v);
bool contains_edge(const Graph& graph, std::string s, std::string d);
Graph clear_graph(const Graph& graph);
std::string to_string(const Graph& graph);
int main();

Graph create_graph(const std::vector<std::string>& vertices, const std::vector<std::vector<std::string>>& edges, bool directed) {
    std::map<std::string, std::vector<std::string>> adj = {};
    for (std::string v : vertices) {
        adj[v] = std::vector<std::string>{};
    }
    for (std::vector<std::string> e : edges) {
        std::string s = _index(e, int64_t(0));
        std::string d = _index(e, int64_t(1));
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(adj, s)) {
            adj[s] = std::vector<std::string>{};
        }
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(adj, d)) {
            adj[d] = std::vector<std::string>{};
        }
        adj[s] = ([&]{ auto __tmp = ([&](const auto& __m){ auto __it = __m.find(s); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(adj); __tmp.push_back(d); return __tmp; }());
        if (!directed) {
            adj[d] = ([&]{ auto __tmp = ([&](const auto& __m){ auto __it = __m.find(d); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(adj); __tmp.push_back(s); return __tmp; }());
        }
    }
    return Graph{.adj = adj, .directed = directed};
}

Graph add_vertex(const Graph& graph, std::string v) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, v)) {
        throw std::runtime_error(std::string("vertex exists"));
    }
    std::map<std::string, std::vector<std::string>> adj = {};
    for (const auto& __p : graph.adj) {
        auto k = __p.first;
        adj[k] = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph.adj);
    }
    adj[v] = std::vector<std::string>{};
    return Graph{.adj = adj, .directed = graph.directed};
}

std::vector<std::string> remove_from_list(const std::vector<std::string>& lst, std::string value) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if ((_index(lst, i) != value)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(lst, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::map<std::string, std::vector<std::string>> remove_key(const std::map<std::string, std::vector<std::string>>& m, std::string key) {
    std::map<std::string, std::vector<std::string>> res = {};
    for (const auto& __p : m) {
        auto k = __p.first;
        if ((k != key)) {
            res[k] = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(m);
        }
    }
    return res;
}

Graph add_edge(const Graph& graph, std::string s, std::string d) {
    if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, s) || !([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, d))) {
        throw std::runtime_error(std::string("vertex missing"));
    }
    if (contains_edge(graph, s, d)) {
        throw std::runtime_error(std::string("edge exists"));
    }
    std::map<std::string, std::vector<std::string>> adj = {};
    for (const auto& __p : graph.adj) {
        auto k = __p.first;
        adj[k] = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph.adj);
    }
    std::vector<std::string> list_s = ([&](const auto& __m){ auto __it = __m.find(s); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(adj);
    list_s = ([&]{ auto __tmp = list_s; __tmp.push_back(d); return __tmp; }());
    adj[s] = list_s;
    if (!graph.directed) {
        std::vector<std::string> list_d = ([&](const auto& __m){ auto __it = __m.find(d); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(adj);
        list_d = ([&]{ auto __tmp = list_d; __tmp.push_back(s); return __tmp; }());
        adj[d] = list_d;
    }
    return Graph{.adj = adj, .directed = graph.directed};
}

Graph remove_edge(const Graph& graph, std::string s, std::string d) {
    if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, s) || !([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, d))) {
        throw std::runtime_error(std::string("vertex missing"));
    }
    if (!contains_edge(graph, s, d)) {
        throw std::runtime_error(std::string("edge missing"));
    }
    std::map<std::string, std::vector<std::string>> adj = {};
    for (const auto& __p : graph.adj) {
        auto k = __p.first;
        adj[k] = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph.adj);
    }
    adj[s] = remove_from_list(([&](const auto& __m){ auto __it = __m.find(s); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(adj), d);
    if (!graph.directed) {
        adj[d] = remove_from_list(([&](const auto& __m){ auto __it = __m.find(d); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(adj), s);
    }
    return Graph{.adj = adj, .directed = graph.directed};
}

Graph remove_vertex(const Graph& graph, std::string v) {
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, v)) {
        throw std::runtime_error(std::string("vertex missing"));
    }
    std::map<std::string, std::vector<std::string>> adj = {};
    for (const auto& __p : graph.adj) {
        auto k = __p.first;
        if ((k != v)) {
            adj[k] = remove_from_list(([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph.adj), v);
        }
    }
    return Graph{.adj = adj, .directed = graph.directed};
}

bool contains_vertex(const Graph& graph, std::string v) {
    return ([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, v);
}

bool contains_edge(const Graph& graph, std::string s, std::string d) {
    if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, s) || !([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(graph.adj, d))) {
        throw std::runtime_error(std::string("vertex missing"));
    }
    for (std::string x : ([&](const auto& __m){ auto __it = __m.find(s); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph.adj)) {
        if ((x == d)) {
            return true;
        }
    }
    return false;
}

Graph clear_graph(const Graph& graph) {
    return Graph{.adj = {}, .directed = graph.directed};
}

std::string to_string(const Graph& graph) {
    return ([&]{ std::ostringstream ss; { auto __tmp1 = graph.adj; ss << "{"; bool first=true; for(const auto& __p : __tmp1){ if(!first) ss << ", "; first=false; ss << __p.first << ": "; { std::ostringstream __ss; { auto __tmp2 = __p.second; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "}"; }
 return ss.str(); }());
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::string> vertices = std::vector<std::string>{std::string("1"), std::string("2"), std::string("3"), std::string("4")};
        std::vector<std::vector<std::string>> edges = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("1"), std::string("2")}, std::vector<std::string>{std::string("2"), std::string("3")}, std::vector<std::string>{std::string("3"), std::string("4")}};
        Graph g = create_graph(vertices, edges, false);
        std::cout << to_string(g);
        std::cout << std::endl;
        g = add_vertex(g, std::string("5"));
        g = add_edge(g, std::string("4"), std::string("5"));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << contains_edge(g, std::string("4"), std::string("5")); return ss.str(); }());
        std::cout << std::endl;
        g = remove_edge(g, std::string("1"), std::string("2"));
        g = remove_vertex(g, std::string("3"));
        std::cout << to_string(g);
        std::cout << std::endl;
    }
    return 0;
}
