// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:20:11 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(16) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Pos;
struct Node;

std::ostream& operator<<(std::ostream&, const Pos&);
std::ostream& operator<<(std::ostream&, const Node&);


struct Pos {
    int64_t y;
    int64_t x;
    auto operator<=>(const Pos&) const = default;
};

struct Node {
    int64_t pos_x;
    int64_t pos_y;
    int64_t goal_x;
    int64_t goal_y;
    int64_t g_cost;
    int64_t f_cost;
    std::vector<Pos> path;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pos& v) {
    os << '{' << "'y': "<< v.y
 << ", " << "'x': "<< v.x
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'pos_x': "<< v.pos_x
 << ", " << "'pos_y': "<< v.pos_y
 << ", " << "'goal_x': "<< v.goal_x
 << ", " << "'goal_y': "<< v.goal_y
 << ", " << "'g_cost': "<< v.g_cost
 << ", " << "'f_cost': "<< v.f_cost
 << ", " << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << '}';
    return os;
}

int64_t abs(int64_t x);
int64_t manhattan(int64_t x1, int64_t _y1, int64_t x2, int64_t y2);
std::vector<Pos> clone_path(const std::vector<Pos>& p);
Node make_node(int64_t pos_x, int64_t pos_y, int64_t goal_x, int64_t goal_y, int64_t g_cost, const std::vector<Pos>& path);
bool node_equal(const Node& a, const Node& b);
bool contains(const std::vector<Node>& nodes, const Node& node);
std::vector<Node> sort_nodes(const std::vector<Node>& nodes);
std::vector<Node> get_successors(const std::vector<std::vector<int64_t>>& grid, const Node& parent, const Pos& target);
std::vector<Pos> greedy_best_first(const std::vector<std::vector<int64_t>>& grid, const Pos& init, const Pos& goal);
void print_grid(const std::vector<std::vector<int64_t>>& grid);
int main();

std::vector<Pos> delta = std::vector<Pos>{Pos{.y = -int64_t(1), .x = int64_t(0)}, Pos{.y = int64_t(0), .x = -int64_t(1)}, Pos{.y = int64_t(1), .x = int64_t(0)}, Pos{.y = int64_t(0), .x = int64_t(1)}};
std::vector<std::vector<std::vector<int64_t>>> TEST_GRIDS = std::vector<std::vector<std::vector<int64_t>>>{std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0)}}, std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(1), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(1), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(0), int64_t(1), int64_t(1), int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}}, std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(0), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}}};

int64_t abs(int64_t x) {
    if ((x < int64_t(0))) {
        return (int64_t(0) - x);
    }
    return x;
}

int64_t manhattan(int64_t x1, int64_t _y1, int64_t x2, int64_t y2) {
    return (abs((x1 - x2)) + abs((_y1 - y2)));
}

std::vector<Pos> clone_path(const std::vector<Pos>& p) {
    std::vector<Pos> res = {};
    int64_t i = int64_t(0);
    while ((i < p.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(p, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

Node make_node(int64_t pos_x, int64_t pos_y, int64_t goal_x, int64_t goal_y, int64_t g_cost, const std::vector<Pos>& path) {
    int64_t f = manhattan(pos_x, pos_y, goal_x, goal_y);
    return Node{.pos_x = pos_x, .pos_y = pos_y, .goal_x = goal_x, .goal_y = goal_y, .g_cost = g_cost, .f_cost = f, .path = path};
}

bool node_equal(const Node& a, const Node& b) {
    return ((a.pos_x == b.pos_x) && (a.pos_y == b.pos_y));
}

bool contains(const std::vector<Node>& nodes, const Node& node) {
    int64_t i = int64_t(0);
    while ((i < nodes.size())) {
        if (node_equal(_index(nodes, i), node)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<Node> sort_nodes(const std::vector<Node>& nodes) {
    std::vector<Node> arr = nodes;
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        Node key_node = _index(arr, i);
        int64_t j = (i - int64_t(1));
        while ((j >= int64_t(0))) {
            Node temp = _index(arr, j);
            if ((temp.f_cost > key_node.f_cost)) {
                arr[static_cast<size_t>((j + int64_t(1)))] = temp;
                j = (j - int64_t(1));
            } else {
                break;
            }
        }
        arr[static_cast<size_t>((j + int64_t(1)))] = key_node;
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<Node> get_successors(const std::vector<std::vector<int64_t>>& grid, const Node& parent, const Pos& target) {
    std::vector<Node> res = {};
    int64_t i = int64_t(0);
    while ((i < delta.size())) {
        Pos d = _index(delta, i);
        int64_t pos_x = (parent.pos_x + d.x);
        int64_t pos_y = (parent.pos_y + d.y);
        if ((((((pos_x >= int64_t(0)) && (pos_x < _index(grid, int64_t(0)).size())) && (pos_y >= int64_t(0))) && (pos_y < grid.size())) && (_index(_index(grid, pos_y), pos_x) == int64_t(0)))) {
            std::vector<Pos> new_path = clone_path(parent.path);
            new_path = ([&]{ auto __tmp = new_path; __tmp.push_back(Pos{.y = pos_y, .x = pos_x}); return __tmp; }());
            res = ([&]{ auto __tmp = res; __tmp.push_back(make_node(pos_x, pos_y, target.x, target.y, (parent.g_cost + int64_t(1)), new_path)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<Pos> greedy_best_first(const std::vector<std::vector<int64_t>>& grid, const Pos& init, const Pos& goal) {
    std::vector<Pos> start_path = std::vector<Pos>{init};
    Node start = make_node(init.x, init.y, goal.x, goal.y, int64_t(0), start_path);
    std::vector<Node> open_nodes = std::vector<Node>{start};
    std::vector<Node> closed_nodes = {};
    while ((open_nodes.size() > int64_t(0))) {
        open_nodes = sort_nodes(open_nodes);
        Node current = _index(open_nodes, int64_t(0));
        std::vector<Node> new_open = {};
        int64_t idx = int64_t(1);
        while ((idx < open_nodes.size())) {
            new_open = ([&]{ auto __tmp = new_open; __tmp.push_back(_index(open_nodes, idx)); return __tmp; }());
            idx = (idx + int64_t(1));
        }
        open_nodes = new_open;
        if (((current.pos_x == goal.x) && (current.pos_y == goal.y))) {
            return current.path;
        }
        closed_nodes = ([&]{ auto __tmp = closed_nodes; __tmp.push_back(current); return __tmp; }());
        std::vector<Node> successors = get_successors(grid, current, goal);
        int64_t i = int64_t(0);
        while ((i < successors.size())) {
            Node child = _index(successors, i);
            if ((!contains(closed_nodes, child) && !contains(open_nodes, child))) {
                open_nodes = ([&]{ auto __tmp = open_nodes; __tmp.push_back(child); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
    }
    std::vector<Pos> r = std::vector<Pos>{init};
    return r;
}

void print_grid(const std::vector<std::vector<int64_t>>& grid) {
    int64_t i = int64_t(0);
    while ((i < grid.size())) {
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = _index(grid, i); ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t idx = int64_t(0);
        while ((idx < TEST_GRIDS.size())) {
            std::cout << ((std::string("==grid-") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (idx + int64_t(1)); return ss.str(); }())) + std::string("=="));
            std::cout << std::endl;
            std::vector<std::vector<int64_t>> grid = _index(TEST_GRIDS, idx);
            Pos init = Pos{.y = int64_t(0), .x = int64_t(0)};
            Pos goal = Pos{.y = (grid.size() - int64_t(1)), .x = (_index(grid, int64_t(0)).size() - int64_t(1))};
            print_grid(grid);
            std::cout << std::string("------");
            std::cout << std::endl;
            std::vector<Pos> path = greedy_best_first(grid, init, goal);
            int64_t j = int64_t(0);
            while ((j < path.size())) {
                Pos p = _index(path, j);
                grid[static_cast<size_t>(p.y)][static_cast<size_t>(p.x)] = int64_t(2);
                j = (j + int64_t(1));
            }
            print_grid(grid);
            idx = (idx + int64_t(1));
        }
    }
    return 0;
}
