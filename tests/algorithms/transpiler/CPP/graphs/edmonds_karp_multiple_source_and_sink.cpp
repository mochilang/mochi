// Generated by Mochi transpiler v0.10.64 on 2025-08-13 12:13:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t push_relabel_max_flow(const std::vector<std::vector<int64_t>>& graph, const std::vector<int64_t>& sources, const std::vector<int64_t>& sinks);
int main();

std::vector<std::vector<int64_t>> graph = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(7), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(6), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(8)}, std::vector<int64_t>{int64_t(9), int64_t(0), int64_t(0), int64_t(0)}};
std::vector<int64_t> sources = std::vector<int64_t>{int64_t(0)};
std::vector<int64_t> sinks = std::vector<int64_t>{int64_t(3)};
int64_t result = 0;

int64_t push_relabel_max_flow(const std::vector<std::vector<int64_t>>& graph, const std::vector<int64_t>& sources, const std::vector<int64_t>& sinks) {
    if (((sources.size() == int64_t(0)) || (sinks.size() == int64_t(0)))) {
        return int64_t(0);
    }
    std::vector<std::vector<int64_t>> g = graph;
    int64_t source_index = _index(sources, int64_t(0));
    int64_t sink_index = _index(sinks, int64_t(0));
    if (((sources.size() > int64_t(1)) || (sinks.size() > int64_t(1)))) {
        int64_t max_input_flow = int64_t(0);
        int64_t i = int64_t(0);
        while ((i < sources.size())) {
            int64_t j = int64_t(0);
            while ((j < _index(g, _index(sources, i)).size())) {
                max_input_flow = (max_input_flow + _index(_index(g, _index(sources, i)), j));
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        int64_t size = (g.size() + int64_t(1));
        std::vector<std::vector<int64_t>> new_graph = {};
        std::vector<int64_t> zero_row = {};
        int64_t j = int64_t(0);
        while ((j < size)) {
            zero_row = ([&]{ auto __tmp = zero_row; __tmp.push_back(int64_t(0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        new_graph = ([&]{ auto __tmp = new_graph; __tmp.push_back(zero_row); return __tmp; }());
        int64_t r = int64_t(0);
        while ((r < g.size())) {
            std::vector<int64_t> row = std::vector<int64_t>{int64_t(0)};
            int64_t c = int64_t(0);
            while ((c < _index(g, r).size())) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(g, r), c)); return __tmp; }());
                c = (c + int64_t(1));
            }
            new_graph = ([&]{ auto __tmp = new_graph; __tmp.push_back(row); return __tmp; }());
            r = (r + int64_t(1));
        }
        g = new_graph;
        i = int64_t(0);
        while ((i < sources.size())) {
            g[static_cast<size_t>(int64_t(0))][static_cast<size_t>((_index(sources, i) + int64_t(1)))] = max_input_flow;
            i = (i + int64_t(1));
        }
        source_index = int64_t(0);
        size = (g.size() + int64_t(1));
        new_graph = {};
        r = int64_t(0);
        while ((r < g.size())) {
            std::vector<int64_t> row2 = _index(g, r);
            row2 = ([&]{ auto __tmp = row2; __tmp.push_back(int64_t(0)); return __tmp; }());
            new_graph = ([&]{ auto __tmp = new_graph; __tmp.push_back(row2); return __tmp; }());
            r = (r + int64_t(1));
        }
        std::vector<int64_t> last_row = {};
        j = int64_t(0);
        while ((j < size)) {
            last_row = ([&]{ auto __tmp = last_row; __tmp.push_back(int64_t(0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        new_graph = ([&]{ auto __tmp = new_graph; __tmp.push_back(last_row); return __tmp; }());
        g = new_graph;
        i = int64_t(0);
        while ((i < sinks.size())) {
            g[static_cast<size_t>((_index(sinks, i) + int64_t(1)))][static_cast<size_t>((size - int64_t(1)))] = max_input_flow;
            i = (i + int64_t(1));
        }
        sink_index = (size - int64_t(1));
    }
    int64_t n = g.size();
    std::vector<std::vector<int64_t>> preflow = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        preflow = ([&]{ auto __tmp = preflow; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> heights = {};
    i = int64_t(0);
    while ((i < n)) {
        heights = ([&]{ auto __tmp = heights; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> excesses = {};
    i = int64_t(0);
    while ((i < n)) {
        excesses = ([&]{ auto __tmp = excesses; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    heights[static_cast<size_t>(source_index)] = n;
    i = int64_t(0);
    while ((i < n)) {
        int64_t bandwidth = _index(_index(g, source_index), i);
        preflow[static_cast<size_t>(source_index)][static_cast<size_t>(i)] = (_index(_index(preflow, source_index), i) + bandwidth);
        preflow[static_cast<size_t>(i)][static_cast<size_t>(source_index)] = (_index(_index(preflow, i), source_index) - bandwidth);
        excesses[static_cast<size_t>(i)] = (_index(excesses, i) + bandwidth);
        i = (i + int64_t(1));
    }
    std::vector<int64_t> vertices_list = {};
    i = int64_t(0);
    while ((i < n)) {
        if (((i != source_index) && (i != sink_index))) {
            vertices_list = ([&]{ auto __tmp = vertices_list; __tmp.push_back(i); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    int64_t idx = int64_t(0);
    while ((idx < vertices_list.size())) {
        int64_t v = _index(vertices_list, idx);
        int64_t prev_height = _index(heights, v);
        while ((_index(excesses, v) > int64_t(0))) {
            int64_t nb = int64_t(0);
            while ((nb < n)) {
                if ((((_index(_index(g, v), nb) - _index(_index(preflow, v), nb)) > int64_t(0)) && (_index(heights, v) > _index(heights, nb)))) {
                    int64_t delta = _index(excesses, v);
                    int64_t capacity = (_index(_index(g, v), nb) - _index(_index(preflow, v), nb));
                    if ((delta > capacity)) {
                        delta = capacity;
                    }
                    preflow[static_cast<size_t>(v)][static_cast<size_t>(nb)] = (_index(_index(preflow, v), nb) + delta);
                    preflow[static_cast<size_t>(nb)][static_cast<size_t>(v)] = (_index(_index(preflow, nb), v) - delta);
                    excesses[static_cast<size_t>(v)] = (_index(excesses, v) - delta);
                    excesses[static_cast<size_t>(nb)] = (_index(excesses, nb) + delta);
                }
                nb = (nb + int64_t(1));
            }
            int64_t min_height = -int64_t(1);
            nb = int64_t(0);
            while ((nb < n)) {
                if (((_index(_index(g, v), nb) - _index(_index(preflow, v), nb)) > int64_t(0))) {
                    if (((min_height == -int64_t(1)) || (_index(heights, nb) < min_height))) {
                        min_height = _index(heights, nb);
                    }
                }
                nb = (nb + int64_t(1));
            }
            if ((min_height != -int64_t(1))) {
                heights[static_cast<size_t>(v)] = (min_height + int64_t(1));
            } else {
                break;
            }
        }
        if ((_index(heights, v) > prev_height)) {
            int64_t vertex = _index(vertices_list, idx);
            int64_t j = idx;
            while ((j > int64_t(0))) {
                vertices_list[static_cast<size_t>(j)] = _index(vertices_list, (j - int64_t(1)));
                j = (j - int64_t(1));
            }
            vertices_list[static_cast<size_t>(int64_t(0))] = vertex;
            idx = int64_t(0);
        } else {
            idx = (idx + int64_t(1));
        }
    }
    int64_t flow = int64_t(0);
    i = int64_t(0);
    while ((i < n)) {
        flow = (flow + _index(_index(preflow, source_index), i));
        i = (i + int64_t(1));
    }
    if ((flow < int64_t(0))) {
        flow = -flow;
    }
    return flow;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        result = push_relabel_max_flow(graph, sources, sinks);
        std::cout << (std::string("maximum flow is ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << result; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
