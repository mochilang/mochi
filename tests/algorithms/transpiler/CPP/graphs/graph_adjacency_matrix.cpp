// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:18:43 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Graph;

std::ostream& operator<<(std::ostream&, const Graph&);


struct Graph {
    bool directed;
    std::map<int64_t, int64_t> vertex_to_index;
    std::vector<std::vector<int64_t>> adj_matrix;
    auto operator<=>(const Graph&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Graph& v) {
    os << '{' << "'directed': "<< v.directed
 << ", " << "'vertex_to_index': "<< "{"; bool first_1=true; for(const auto& p: v.vertex_to_index){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'adj_matrix': "<< "["; for(size_t i=0;i<v.adj_matrix.size();++i){ if(i>0) os << ", "; os << v.adj_matrix[i]; } os << "]"
 << '}';
    return os;
}

Graph make_graph(const std::vector<int64_t>& vertices, const std::vector<std::vector<int64_t>>& edges, bool directed);
bool contains_vertex(const Graph& g, int64_t v);
void add_vertex(Graph g, int64_t v);
std::map<int64_t, int64_t> remove_key(const std::map<int64_t, int64_t>& m, int64_t k);
std::map<int64_t, int64_t> decrement_indices(const std::map<int64_t, int64_t>& m, int64_t start);
void remove_vertex(Graph g, int64_t v);
void add_edge(Graph g, int64_t u, int64_t v);
void remove_edge(Graph g, int64_t u, int64_t v);
bool contains_edge(const Graph& g, int64_t u, int64_t v);
void clear_graph(Graph g);
int main();

Graph g = Graph{};

Graph make_graph(const std::vector<int64_t>& vertices, const std::vector<std::vector<int64_t>>& edges, bool directed) {
    Graph g = Graph{.directed = directed, .vertex_to_index = {}, .adj_matrix = std::vector<std::vector<int64_t>>{}};
    int64_t i = int64_t(0);
    while ((i < vertices.size())) {
        add_vertex(g, ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(vertices));
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < edges.size())) {
        std::vector<int64_t> e = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges);
        add_edge(g, ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e), ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e));
        j = (j + int64_t(1));
    }
    return g;
}

bool contains_vertex(const Graph& g, int64_t v) {
    return ([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.vertex_to_index, v);
}

void add_vertex(Graph g, int64_t v) {
    if (contains_vertex(g, v)) {
        throw std::runtime_error(std::string("vertex already exists"));
    }
    std::vector<std::vector<int64_t>> matrix = g.adj_matrix;
    int64_t i = int64_t(0);
    while ((i < matrix.size())) {
        matrix[i] = ([&]{ auto __tmp = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(matrix); __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> row = {};
    int64_t j = int64_t(0);
    while ((j < (matrix.size() + int64_t(1)))) {
        row = ([&]{ auto& __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
        j = (j + int64_t(1));
    }
    matrix = ([&]{ auto& __tmp = matrix; __tmp.push_back(row); return __tmp; }());
    g.adj_matrix = matrix;
    std::map<int64_t, int64_t> idx_map = g.vertex_to_index;
    idx_map[v] = (matrix.size() - int64_t(1));
    g.vertex_to_index = idx_map;
}

std::map<int64_t, int64_t> remove_key(const std::map<int64_t, int64_t>& m, int64_t k) {
    std::map<int64_t, int64_t> out = {};
    for (const auto& __p : m) {
        auto key = __p.first;
        if ((key != k)) {
            out[key] = ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return int64_t{}; return __it->second; })(m);
        }
    }
    return out;
}

std::map<int64_t, int64_t> decrement_indices(const std::map<int64_t, int64_t>& m, int64_t start) {
    std::map<int64_t, int64_t> out = {};
    for (const auto& __p : m) {
        auto key = __p.first;
        int64_t idx = ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return int64_t{}; return __it->second; })(m);
        if ((idx > start)) {
            out[key] = (idx - int64_t(1));
        } else {
            out[key] = idx;
        }
    }
    return out;
}

void remove_vertex(Graph g, int64_t v) {
    if (!contains_vertex(g, v)) {
        throw std::runtime_error(std::string("vertex does not exist"));
    }
    int64_t idx = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    std::vector<std::vector<int64_t>> new_matrix = {};
    int64_t i = int64_t(0);
    while ((i < g.adj_matrix.size())) {
        if ((i != idx)) {
            std::vector<int64_t> row = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(g.adj_matrix);
            std::vector<int64_t> new_row = {};
            int64_t j = int64_t(0);
            while ((j < row.size())) {
                if ((j != idx)) {
                    new_row = ([&]{ auto& __tmp = new_row; __tmp.push_back(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(row)); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            new_matrix = ([&]{ auto& __tmp = new_matrix; __tmp.push_back(new_row); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    g.adj_matrix = new_matrix;
    std::map<int64_t, int64_t> m = remove_key(g.vertex_to_index, v);
    g.vertex_to_index = decrement_indices(m, idx);
}

void add_edge(Graph g, int64_t u, int64_t v) {
    if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
        throw std::runtime_error(std::string("missing vertex"));
    }
    int64_t i = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    int64_t j = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    std::vector<std::vector<int64_t>> matrix = g.adj_matrix;
    matrix[i][j] = int64_t(1);
    if (!g.directed) {
        matrix[j][i] = int64_t(1);
    }
    g.adj_matrix = matrix;
}

void remove_edge(Graph g, int64_t u, int64_t v) {
    if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
        throw std::runtime_error(std::string("missing vertex"));
    }
    int64_t i = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    int64_t j = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    std::vector<std::vector<int64_t>> matrix = g.adj_matrix;
    matrix[i][j] = int64_t(0);
    if (!g.directed) {
        matrix[j][i] = int64_t(0);
    }
    g.adj_matrix = matrix;
}

bool contains_edge(const Graph& g, int64_t u, int64_t v) {
    if (!(contains_vertex(g, u) && contains_vertex(g, v))) {
        throw std::runtime_error(std::string("missing vertex"));
    }
    int64_t i = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    int64_t j = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(g.vertex_to_index);
    std::vector<std::vector<int64_t>> matrix = g.adj_matrix;
    return (([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(matrix)) == int64_t(1));
}

void clear_graph(Graph g) {
    g.vertex_to_index = {};
    g.adj_matrix = std::vector<std::vector<int64_t>>{};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        g = make_graph(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2)}, std::vector<int64_t>{int64_t(2), int64_t(3)}}, false);
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = g.adj_matrix; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << contains_edge(g, int64_t(1), int64_t(2)); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << contains_edge(g, int64_t(2), int64_t(1)); return ss.str(); }());
        std::cout << std::endl;
        remove_edge(g, int64_t(1), int64_t(2));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << contains_edge(g, int64_t(1), int64_t(2)); return ss.str(); }());
        std::cout << std::endl;
        remove_vertex(g, int64_t(2));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = g.adj_matrix; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
