// Generated by Mochi transpiler v0.10.59 on 2025-08-07 11:21:17 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <any>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct NodeCost;

std::ostream& operator<<(std::ostream&, const NodeCost&);


struct NodeCost {
    std::string node;
    int64_t cost;
    auto operator<=>(const NodeCost&) const = default;
};

std::ostream& operator<<(std::ostream& os, const NodeCost& v) {
    os << '{' << "'node': "<< "'" << v.node << "'"
 << ", " << "'cost': "<< v.cost
 << '}';
    return os;
}

int main();

std::map<std::string, std::map<std::string, int64_t>> G = {{"A", std::map<std::string, int64_t>{{"B", int64_t(2)}, {"C", int64_t(5)}}}, {"B", std::map<std::string, int64_t>{{"A", int64_t(2)}, {"D", int64_t(3)}, {"E", int64_t(1)}, {"F", int64_t(1)}}}, {"C", std::map<std::string, int64_t>{{"A", int64_t(5)}, {"F", int64_t(3)}}}, {"D", std::map<std::string, int64_t>{{"B", int64_t(3)}}}, {"E", std::map<std::string, int64_t>{{"B", int64_t(4)}, {"F", int64_t(3)}}}, {"F", std::map<std::string, int64_t>{{"C", int64_t(3)}, {"E", int64_t(3)}}}};
std::vector<NodeCost> heap = std::vector<NodeCost>{NodeCost{.node = std::string("E"), .cost = int64_t(0)}};
std::map<std::string, bool> visited = {};
int64_t result = -int64_t(1);
std::map<std::string, std::map<std::string, int64_t>> G2 = {{"B", std::map<std::string, int64_t>{{"C", int64_t(1)}}}, {"C", std::map<std::string, int64_t>{{"D", int64_t(1)}}}, {"D", std::map<std::string, int64_t>{{"F", int64_t(1)}}}, {"E", std::map<std::string, int64_t>{{"B", int64_t(1)}, {"F", int64_t(3)}}}, {"F", {}}};
std::vector<NodeCost> heap2 = std::vector<NodeCost>{NodeCost{.node = std::string("E"), .cost = int64_t(0)}};
std::map<std::string, bool> visited2 = {};
int64_t result2 = -int64_t(1);
std::map<std::string, std::map<std::string, int64_t>> G3 = {{"B", std::map<std::string, int64_t>{{"C", int64_t(1)}}}, {"C", std::map<std::string, int64_t>{{"D", int64_t(1)}}}, {"D", std::map<std::string, int64_t>{{"F", int64_t(1)}}}, {"E", std::map<std::string, int64_t>{{"B", int64_t(1)}, {"G", int64_t(2)}}}, {"F", {}}, {"G", std::map<std::string, int64_t>{{"F", int64_t(1)}}}};
std::vector<NodeCost> heap3 = std::vector<NodeCost>{NodeCost{.node = std::string("E"), .cost = int64_t(0)}};
std::map<std::string, bool> visited3 = {};
int64_t result3 = -int64_t(1);

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((heap.size() > int64_t(0))) {
            int64_t best_idx = int64_t(0);
            int64_t i = int64_t(1);
            while ((i < heap.size())) {
                if ((heap[i].cost < heap[best_idx].cost)) {
                    best_idx = i;
                }
                i = (i + int64_t(1));
            }
            NodeCost best = heap[best_idx];
            std::vector<NodeCost> new_heap = {};
            int64_t j = int64_t(0);
            while ((j < heap.size())) {
                if ((j != best_idx)) {
                    new_heap = ([&]{ auto __tmp = new_heap; __tmp.push_back(heap[j]); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            heap = new_heap;
            std::string u = best.node;
            int64_t cost = best.cost;
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, u)) {
                continue;
            }
            visited[u] = true;
            if ((u == std::string("C"))) {
                result = cost;
                break;
            }
            for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(G)) {
                auto v = __p.first;
                if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, v)) {
                    continue;
                }
                int64_t next_cost = (cost + ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(G)));
                heap = ([&]{ auto __tmp = heap; __tmp.push_back(NodeCost{.node = v, .cost = next_cost}); return __tmp; }());
            }
        }
        std::cout << result;
        std::cout << std::endl;
        while ((heap2.size() > int64_t(0))) {
            int64_t best2_idx = int64_t(0);
            int64_t i2 = int64_t(1);
            while ((i2 < heap2.size())) {
                if ((heap2[i2].cost < heap2[best2_idx].cost)) {
                    best2_idx = i2;
                }
                i2 = (i2 + int64_t(1));
            }
            NodeCost best2 = heap2[best2_idx];
            std::vector<NodeCost> new_heap2 = {};
            int64_t j2 = int64_t(0);
            while ((j2 < heap2.size())) {
                if ((j2 != best2_idx)) {
                    new_heap2 = ([&]{ auto __tmp = new_heap2; __tmp.push_back(heap2[j2]); return __tmp; }());
                }
                j2 = (j2 + int64_t(1));
            }
            heap2 = new_heap2;
            std::string u2 = best2.node;
            int64_t cost2 = best2.cost;
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited2, u2)) {
                continue;
            }
            visited2[u2] = true;
            if ((u2 == std::string("F"))) {
                result2 = cost2;
                break;
            }
            for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u2); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(G2)) {
                auto v2 = __p.first;
                if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited2, v2)) {
                    continue;
                }
                int64_t next_cost2 = (cost2 + ([&](const auto& __m){ auto __it = __m.find(v2); return __it != __m.end() ? __it->second : 0; })(([&](const auto& __m){ auto __it = __m.find(u2); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(G2)));
                heap2 = ([&]{ auto __tmp = heap2; __tmp.push_back(NodeCost{.node = v2, .cost = next_cost2}); return __tmp; }());
            }
        }
        std::cout << result2;
        std::cout << std::endl;
        while ((heap3.size() > int64_t(0))) {
            int64_t best3_idx = int64_t(0);
            int64_t i3 = int64_t(1);
            while ((i3 < heap3.size())) {
                if ((heap3[i3].cost < heap3[best3_idx].cost)) {
                    best3_idx = i3;
                }
                i3 = (i3 + int64_t(1));
            }
            NodeCost best3 = heap3[best3_idx];
            std::vector<NodeCost> new_heap3 = {};
            int64_t j3 = int64_t(0);
            while ((j3 < heap3.size())) {
                if ((j3 != best3_idx)) {
                    new_heap3 = ([&]{ auto __tmp = new_heap3; __tmp.push_back(heap3[j3]); return __tmp; }());
                }
                j3 = (j3 + int64_t(1));
            }
            heap3 = new_heap3;
            std::string u3 = best3.node;
            int64_t cost3 = best3.cost;
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited3, u3)) {
                continue;
            }
            visited3[u3] = true;
            if ((u3 == std::string("F"))) {
                result3 = cost3;
                break;
            }
            for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u3); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(G3)) {
                auto v3 = __p.first;
                if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited3, v3)) {
                    continue;
                }
                int64_t next_cost3 = (cost3 + ([&](const auto& __m){ auto __it = __m.find(v3); return __it != __m.end() ? __it->second : 0; })(([&](const auto& __m){ auto __it = __m.find(u3); return __it != __m.end() ? __it->second : std::map<std::string, int64_t>{}; })(G3)));
                heap3 = ([&]{ auto __tmp = heap3; __tmp.push_back(NodeCost{.node = v3, .cost = next_cost3}); return __tmp; }());
            }
        }
        std::cout << result3;
        std::cout << std::endl;
    }
    return 0;
}
