// Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:35:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Pos;
struct Node;

std::ostream& operator<<(std::ostream&, const Pos&);
std::ostream& operator<<(std::ostream&, const Node&);


struct Pos {
    int64_t y;
    int64_t x;
    auto operator<=>(const Pos&) const = default;
};

struct Node {
    Pos pos;
    int64_t g_cost;
    double h_cost;
    double f_cost;
    std::vector<Pos> path;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pos& v) {
    os << '{' << "'y': "<< v.y
 << ", " << "'x': "<< v.x
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'pos': "<< v.pos
 << ", " << "'g_cost': "<< v.g_cost
 << ", " << "'h_cost': "<< std::fixed << std::setprecision(1) << v.h_cost
 << ", " << "'f_cost': "<< std::fixed << std::setprecision(1) << v.f_cost
 << ", " << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << '}';
    return os;
}

int64_t abs(int64_t x);
double sqrtApprox(double x);
double heuristic(const Pos& a, const Pos& b);
bool pos_equal(const Pos& a, const Pos& b);
bool contains_pos(const std::vector<Pos>& lst, const Pos& p);
int64_t open_index_of_pos(const std::vector<Node>& open, const Pos& p);
std::vector<Node> remove_node_at(const std::vector<Node>& nodes, int64_t idx);
std::vector<Pos> append_pos_list(const std::vector<Pos>& path, const Pos& p);
std::vector<Pos> reverse_pos_list(const std::vector<Pos>& lst);
std::vector<Pos> concat_pos_lists(const std::vector<Pos>& a, const std::vector<Pos>& b);
std::vector<Pos> get_successors(const Pos& p);
int64_t find_lowest_f(const std::vector<Node>& open);
std::vector<Pos> astar(const Pos& start, const Pos& goal);
std::vector<Pos> combine_paths(const Node& fwd, const Node& bwd);
std::vector<Pos> bidirectional_astar(const Pos& start, const Pos& goal);
std::string path_to_string(const std::vector<Pos>& path);
int main();

int64_t HEURISTIC = int64_t(0);
std::vector<std::vector<int64_t>> grid = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0)}};
std::vector<std::vector<int64_t>> delta = std::vector<std::vector<int64_t>>{std::vector<int64_t>{-int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), -int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1)}};
Pos start = Pos{.y = int64_t(0), .x = int64_t(0)};
Pos goal = Pos{.y = (grid.size() - int64_t(1)), .x = (([](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(grid).size() - int64_t(1))};
std::vector<Pos> path1 = astar(start, goal);
std::vector<Pos> path2 = bidirectional_astar(start, goal);

int64_t abs(int64_t x) {
    if ((x < int64_t(0))) {
        return -x;
    }
    return x;
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double heuristic(const Pos& a, const Pos& b) {
    int64_t dy = (a.y - b.y);
    int64_t dx = (a.x - b.x);
    if ((HEURISTIC == int64_t(1))) {
        return (double)((abs(dy) + abs(dx)));
    }
    double dyf = (double)(dy);
    double dxf = (double)(dx);
    return sqrtApprox(((dyf * dyf) + (dxf * dxf)));
}

bool pos_equal(const Pos& a, const Pos& b) {
    return ((a.y == b.y) && (a.x == b.x));
}

bool contains_pos(const std::vector<Pos>& lst, const Pos& p) {
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if (pos_equal(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(lst), p)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

int64_t open_index_of_pos(const std::vector<Node>& open, const Pos& p) {
    int64_t i = int64_t(0);
    while ((i < open.size())) {
        if (pos_equal(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open).pos, p)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return (int64_t(0) - int64_t(1));
}

std::vector<Node> remove_node_at(const std::vector<Node>& nodes, int64_t idx) {
    std::vector<Node> res = {};
    int64_t i = int64_t(0);
    while ((i < nodes.size())) {
        if ((i != idx)) {
            res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<Pos> append_pos_list(const std::vector<Pos>& path, const Pos& p) {
    std::vector<Pos> res = {};
    int64_t i = int64_t(0);
    while ((i < path.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(path)); return __tmp; }());
        i = (i + int64_t(1));
    }
    res = ([&]{ auto& __tmp = res; __tmp.push_back(p); return __tmp; }());
    return res;
}

std::vector<Pos> reverse_pos_list(const std::vector<Pos>& lst) {
    std::vector<Pos> res = {};
    int64_t i = (lst.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(lst)); return __tmp; }());
        i = (i - int64_t(1));
    }
    return res;
}

std::vector<Pos> concat_pos_lists(const std::vector<Pos>& a, const std::vector<Pos>& b) {
    std::vector<Pos> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < b.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b)); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

std::vector<Pos> get_successors(const Pos& p) {
    std::vector<Pos> res = {};
    int64_t i = int64_t(0);
    while ((i < delta.size())) {
        int64_t nx = (p.x + ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(delta)));
        int64_t ny = (p.y + ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(delta)));
        if (((((nx >= int64_t(0)) && (ny >= int64_t(0))) && (nx < ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(grid).size())) && (ny < grid.size()))) {
            if ((([&](const auto& __v){ auto __i = nx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = ny; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(grid)) == int64_t(0))) {
                res = ([&]{ auto& __tmp = res; __tmp.push_back(Pos{.y = ny, .x = nx}); return __tmp; }());
            }
        }
        i = (i + int64_t(1));
    }
    return res;
}

int64_t find_lowest_f(const std::vector<Node>& open) {
    int64_t best = int64_t(0);
    int64_t i = int64_t(1);
    while ((i < open.size())) {
        if ((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open).f_cost < ([&](const auto& __v){ auto __i = best; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open).f_cost)) {
            best = i;
        }
        i = (i + int64_t(1));
    }
    return best;
}

std::vector<Pos> astar(const Pos& start, const Pos& goal) {
    double h0 = heuristic(start, goal);
    std::vector<Node> open = std::vector<Node>{Node{.pos = start, .g_cost = int64_t(0), .h_cost = h0, .f_cost = h0, .path = std::vector<Pos>{start}}};
    std::vector<Pos> closed = {};
    while ((open.size() > int64_t(0))) {
        int64_t idx = find_lowest_f(open);
        Node current = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open);
        open = remove_node_at(open, idx);
        if (pos_equal(current.pos, goal)) {
            return current.path;
        }
        closed = ([&]{ auto& __tmp = closed; __tmp.push_back(current.pos); return __tmp; }());
        std::vector<Pos> succ = get_successors(current.pos);
        int64_t i = int64_t(0);
        while ((i < succ.size())) {
            Pos pos = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(succ);
            if (contains_pos(closed, pos)) {
                i = (i + int64_t(1));
                continue;
            }
            int64_t tentative_g = (current.g_cost + int64_t(1));
            int64_t idx_open = open_index_of_pos(open, pos);
            if (((idx_open == (int64_t(0) - int64_t(1))) || (tentative_g < ([&](const auto& __v){ auto __i = idx_open; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open).g_cost))) {
                std::vector<Pos> new_path = append_pos_list(current.path, pos);
                double h = heuristic(pos, goal);
                double f = ((double)(tentative_g) + h);
                if ((idx_open != (int64_t(0) - int64_t(1)))) {
                    open = remove_node_at(open, idx_open);
                }
                open = ([&]{ auto& __tmp = open; __tmp.push_back(Node{.pos = pos, .g_cost = tentative_g, .h_cost = h, .f_cost = f, .path = new_path}); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
    }
    return std::vector<Pos>{start};
}

std::vector<Pos> combine_paths(const Node& fwd, const Node& bwd) {
    std::vector<Pos> bwd_copy = {};
    int64_t i = int64_t(0);
    while ((i < (bwd.path.size() - int64_t(1)))) {
        bwd_copy = ([&]{ auto& __tmp = bwd_copy; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(bwd.path)); return __tmp; }());
        i = (i + int64_t(1));
    }
    bwd_copy = reverse_pos_list(bwd_copy);
    return concat_pos_lists(fwd.path, bwd_copy);
}

std::vector<Pos> bidirectional_astar(const Pos& start, const Pos& goal) {
    double hf = heuristic(start, goal);
    double hb = heuristic(goal, start);
    std::vector<Node> open_f = std::vector<Node>{Node{.pos = start, .g_cost = int64_t(0), .h_cost = hf, .f_cost = hf, .path = std::vector<Pos>{start}}};
    std::vector<Node> open_b = std::vector<Node>{Node{.pos = goal, .g_cost = int64_t(0), .h_cost = hb, .f_cost = hb, .path = std::vector<Pos>{goal}}};
    std::vector<Pos> closed_f = {};
    std::vector<Pos> closed_b = {};
    while (((open_f.size() > int64_t(0)) && (open_b.size() > int64_t(0)))) {
        int64_t idx_f = find_lowest_f(open_f);
        Node current_f = ([&](const auto& __v){ auto __i = idx_f; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open_f);
        open_f = remove_node_at(open_f, idx_f);
        int64_t idx_b = find_lowest_f(open_b);
        Node current_b = ([&](const auto& __v){ auto __i = idx_b; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open_b);
        open_b = remove_node_at(open_b, idx_b);
        if (pos_equal(current_f.pos, current_b.pos)) {
            return combine_paths(current_f, current_b);
        }
        closed_f = ([&]{ auto& __tmp = closed_f; __tmp.push_back(current_f.pos); return __tmp; }());
        closed_b = ([&]{ auto& __tmp = closed_b; __tmp.push_back(current_b.pos); return __tmp; }());
        std::vector<Pos> succ_f = get_successors(current_f.pos);
        int64_t i = int64_t(0);
        while ((i < succ_f.size())) {
            Pos pos = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(succ_f);
            if (contains_pos(closed_f, pos)) {
                i = (i + int64_t(1));
                continue;
            }
            int64_t tentative_g = (current_f.g_cost + int64_t(1));
            double h = heuristic(pos, current_b.pos);
            double f = ((double)(tentative_g) + h);
            int64_t idx_open = open_index_of_pos(open_f, pos);
            if (((idx_open == (int64_t(0) - int64_t(1))) || (tentative_g < ([&](const auto& __v){ auto __i = idx_open; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open_f).g_cost))) {
                std::vector<Pos> new_path = append_pos_list(current_f.path, pos);
                if ((idx_open != (int64_t(0) - int64_t(1)))) {
                    open_f = remove_node_at(open_f, idx_open);
                }
                open_f = ([&]{ auto& __tmp = open_f; __tmp.push_back(Node{.pos = pos, .g_cost = tentative_g, .h_cost = h, .f_cost = f, .path = new_path}); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        std::vector<Pos> succ_b = get_successors(current_b.pos);
        i = int64_t(0);
        while ((i < succ_b.size())) {
            Pos pos = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(succ_b);
            if (contains_pos(closed_b, pos)) {
                i = (i + int64_t(1));
                continue;
            }
            int64_t tentative_g = (current_b.g_cost + int64_t(1));
            double h = heuristic(pos, current_f.pos);
            double f = ((double)(tentative_g) + h);
            int64_t idx_open = open_index_of_pos(open_b, pos);
            if (((idx_open == (int64_t(0) - int64_t(1))) || (tentative_g < ([&](const auto& __v){ auto __i = idx_open; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(open_b).g_cost))) {
                std::vector<Pos> new_path = append_pos_list(current_b.path, pos);
                if ((idx_open != (int64_t(0) - int64_t(1)))) {
                    open_b = remove_node_at(open_b, idx_open);
                }
                open_b = ([&]{ auto& __tmp = open_b; __tmp.push_back(Node{.pos = pos, .g_cost = tentative_g, .h_cost = h, .f_cost = f, .path = new_path}); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
    }
    return std::vector<Pos>{start};
}

std::string path_to_string(const std::vector<Pos>& path) {
    if ((path.size() == int64_t(0))) {
        return std::string("[]");
    }
    std::string s = ((((std::string("[(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(path).y; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(path).x; return ss.str(); }())) + std::string(")"));
    int64_t i = int64_t(1);
    while ((i < path.size())) {
        s = (((((s + std::string(", (")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(path).y; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(path).x; return ss.str(); }())) + std::string(")"));
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << path_to_string(path1);
        std::cout << std::endl;
        std::cout << path_to_string(path2);
        std::cout << std::endl;
    }
    return 0;
}
