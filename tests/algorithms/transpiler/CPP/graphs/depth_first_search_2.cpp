// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:17:57 GMT+7
#include <iostream>
#include <string>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <sstream>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Graph;

std::ostream& operator<<(std::ostream&, const Graph&);


struct Graph {
    std::map<int64_t, std::vector<int64_t>> vertex;
    int64_t size;
    auto operator<=>(const Graph&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Graph& v) {
    os << '{' << "'vertex': "<< "{"; bool first_0=true; for(const auto& p: v.vertex){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'size': "<< v.size
 << '}';
    return os;
}

Graph add_edge(Graph g, int64_t from_vertex, int64_t to_vertex);
std::string list_to_string(const std::vector<int64_t>& lst);
std::string list_to_arrow(const std::vector<int64_t>& lst);
void print_graph(const Graph& g);
std::vector<int64_t> dfs_recursive(const Graph& g, int64_t start_vertex, std::vector<bool> visited, std::vector<int64_t> order);
std::vector<int64_t> dfs(const Graph& g);
int main();

Graph g = Graph{};

Graph add_edge(Graph g, int64_t from_vertex, int64_t to_vertex) {
    std::map<int64_t, std::vector<int64_t>> v = g.vertex;
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(v, from_vertex)) {
        std::vector<int64_t> lst = ([&](const auto& __m){ auto __it = __m.find(from_vertex); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(v);
        lst = ([&]{ auto& __tmp = lst; __tmp.push_back(to_vertex); return __tmp; }());
        v[from_vertex] = lst;
    } else {
        v[from_vertex] = std::vector<int64_t>{to_vertex};
    }
    g.vertex = v;
    if (((from_vertex + int64_t(1)) > g.size)) {
        g.size = (from_vertex + int64_t(1));
    }
    if (((to_vertex + int64_t(1)) > g.size)) {
        g.size = (to_vertex + int64_t(1));
    }
    return g;
}

std::string list_to_string(const std::vector<int64_t>& lst) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        res = (res + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(lst); return ss.str(); }()));
        if ((i < (lst.size() - int64_t(1)))) {
            res = (res + std::string(" "));
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string list_to_arrow(const std::vector<int64_t>& lst) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        res = (res + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(lst); return ss.str(); }()));
        if ((i < (lst.size() - int64_t(1)))) {
            res = (res + std::string(" -> "));
        }
        i = (i + int64_t(1));
    }
    return res;
}

void print_graph(const Graph& g) {
    std::cout << ([&]{ std::ostringstream ss; { auto __tmp = g.vertex; ss << "{"; bool first=true; for(const auto& __p : __tmp){ if(!first) ss << ", "; first=false; ss << __p.first << ': '; any_to_stream(ss, __p.second); } ss << "}"; }
 return ss.str(); }());
    std::cout << std::endl;
    int64_t i = int64_t(0);
    while ((i < g.size)) {
        std::vector<int64_t> edges = {};
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.vertex, i)) {
            edges = ([&](const auto& __m){ auto __it = __m.find(i); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(g.vertex);
        }
        std::string line = ((([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }()) + std::string("  ->  ")) + list_to_arrow(edges));
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

std::vector<int64_t> dfs_recursive(const Graph& g, int64_t start_vertex, std::vector<bool> visited, std::vector<int64_t> order) {
    visited[start_vertex] = true;
    order = ([&]{ auto& __tmp = order; __tmp.push_back(start_vertex); return __tmp; }());
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g.vertex, start_vertex)) {
        std::vector<int64_t> neighbors = ([&](const auto& __m){ auto __it = __m.find(start_vertex); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(g.vertex);
        int64_t i = int64_t(0);
        while ((i < neighbors.size())) {
            int64_t nb = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(neighbors);
            if (!([&](const auto& __v){ auto __i = nb; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(visited)) {
                order = dfs_recursive(g, nb, visited, order);
            }
            i = (i + int64_t(1));
        }
    }
    return order;
}

std::vector<int64_t> dfs(const Graph& g) {
    int64_t n = g.size;
    std::vector<bool> visited = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        visited = ([&]{ auto& __tmp = visited; __tmp.push_back(false); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> order = {};
    i = int64_t(0);
    while ((i < n)) {
        if (!([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(visited)) {
            order = dfs_recursive(g, i, visited, order);
        }
        i = (i + int64_t(1));
    }
    return order;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        g = Graph{.vertex = {}, .size = int64_t(0)};
        g = add_edge(g, int64_t(0), int64_t(1));
        g = add_edge(g, int64_t(0), int64_t(2));
        g = add_edge(g, int64_t(1), int64_t(2));
        g = add_edge(g, int64_t(2), int64_t(0));
        g = add_edge(g, int64_t(2), int64_t(3));
        g = add_edge(g, int64_t(3), int64_t(3));
        print_graph(g);
        std::cout << std::string("DFS:");
        std::cout << std::endl;
        std::cout << list_to_string(dfs(g));
        std::cout << std::endl;
    }
    return 0;
}
