// Generated by Mochi transpiler v0.10.64 on 2025-08-13 12:12:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <map>
#include <algorithm>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Node;

std::ostream& operator<<(std::ostream&, const Node&);


struct Node {
    std::string pos;
    std::vector<std::string> path;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'pos': "<< "'" << v.pos << "'"
 << ", " << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << '}';
    return os;
}

std::string key(int64_t y, int64_t x);
int64_t parse_int(std::string s);
std::vector<int64_t> parse_key(std::string k);
std::vector<std::string> neighbors(std::string pos);
std::vector<std::string> reverse_list(const std::vector<std::string>& lst);
std::vector<std::string> bfs(std::string start, std::string goal);
std::vector<std::string> bidirectional_bfs(std::string start, std::string goal);
std::string path_to_string(const std::vector<std::string>& path);
int main();

std::vector<std::vector<int64_t>> grid = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(0), int64_t(0)}};
std::vector<std::vector<int64_t>> delta = std::vector<std::vector<int64_t>>{};
std::string start = std::string();
std::string goal = std::string();
std::vector<std::string> path1 = std::vector<std::string>{};
std::vector<std::string> path2 = std::vector<std::string>{};

std::string key(int64_t y, int64_t x) {
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << y; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << x; return ss.str(); }()));
}

int64_t parse_int(std::string s) {
    int64_t value = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s);
        value = ((value * int64_t(10)) + std::stoll(c));
        i = (i + int64_t(1));
    }
    return value;
}

std::vector<int64_t> parse_key(std::string k) {
    int64_t idx = int64_t(0);
    while (((idx < k.size()) && (k.substr(idx, (idx + int64_t(1)) - idx) != std::string(",")))) {
        idx = (idx + int64_t(1));
    }
    int64_t y = parse_int(k.substr(int64_t(0), idx - int64_t(0)));
    int64_t x = parse_int(k.substr((idx + int64_t(1)), k.size() - (idx + int64_t(1))));
    return std::vector<int64_t>{y, x};
}

std::vector<std::string> neighbors(std::string pos) {
    std::vector<int64_t> coords = parse_key(pos);
    int64_t y = _index(coords, int64_t(0));
    int64_t x = _index(coords, int64_t(1));
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < delta.size())) {
        int64_t ny = (y + _index(_index(delta, i), int64_t(0)));
        int64_t nx = (x + _index(_index(delta, i), int64_t(1)));
        if (((((ny >= int64_t(0)) && (ny < grid.size())) && (nx >= int64_t(0))) && (nx < _index(grid, int64_t(0)).size()))) {
            if ((_index(_index(grid, ny), nx) == int64_t(0))) {
                res = ([&]{ auto __tmp = res; __tmp.push_back(key(ny, nx)); return __tmp; }());
            }
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> reverse_list(const std::vector<std::string>& lst) {
    std::vector<std::string> res = {};
    int64_t i = (lst.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(lst, i)); return __tmp; }());
        i = (i - int64_t(1));
    }
    return res;
}

std::vector<std::string> bfs(std::string start, std::string goal) {
    std::vector<Node> queue = {};
    queue = ([&]{ auto __tmp = queue; __tmp.push_back(Node{.pos = start, .path = std::vector<std::string>{start}}); return __tmp; }());
    int64_t head = int64_t(0);
    std::map<std::string, bool> visited = {{start, true}};
    while ((head < queue.size())) {
        Node node = _index(queue, head);
        head = (head + int64_t(1));
        if ((node.pos == goal)) {
            return node.path;
        }
        std::vector<std::string> neigh = neighbors(node.pos);
        int64_t i = int64_t(0);
        while ((i < neigh.size())) {
            std::string npos = _index(neigh, i);
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, npos)) {
                visited[npos] = true;
                auto new_path = ([&]{ auto __tmp = node.path; __tmp.push_back(npos); return __tmp; }());
                queue = ([&]{ auto __tmp = queue; __tmp.push_back(Node{.pos = npos, .path = new_path}); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
    }
    return std::vector<std::string>{};
}

std::vector<std::string> bidirectional_bfs(std::string start, std::string goal) {
    std::vector<Node> queue_f = {};
    std::vector<Node> queue_b = {};
    queue_f = ([&]{ auto __tmp = queue_f; __tmp.push_back(Node{.pos = start, .path = std::vector<std::string>{start}}); return __tmp; }());
    queue_b = ([&]{ auto __tmp = queue_b; __tmp.push_back(Node{.pos = goal, .path = std::vector<std::string>{goal}}); return __tmp; }());
    int64_t head_f = int64_t(0);
    int64_t head_b = int64_t(0);
    std::map<std::string, std::vector<std::string>> visited_f = {{start, std::vector<std::string>{start}}};
    std::map<std::string, std::vector<std::string>> visited_b = {{goal, std::vector<std::string>{goal}}};
    while (((head_f < queue_f.size()) && (head_b < queue_b.size()))) {
        Node node_f = _index(queue_f, head_f);
        head_f = (head_f + int64_t(1));
        std::vector<std::string> neigh_f = neighbors(node_f.pos);
        int64_t i = int64_t(0);
        while ((i < neigh_f.size())) {
            std::string npos = _index(neigh_f, i);
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited_f, npos)) {
                auto new_path = ([&]{ auto __tmp = node_f.path; __tmp.push_back(npos); return __tmp; }());
                visited_f[npos] = new_path;
                if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited_b, npos)) {
                    std::vector<std::string> rev = reverse_list(([&](const auto& __m){ auto __it = __m.find(npos); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(visited_b));
                    int64_t j = int64_t(1);
                    while ((j < rev.size())) {
                        new_path = ([&]{ auto __tmp = new_path; __tmp.push_back(_index(rev, j)); return __tmp; }());
                        j = (j + int64_t(1));
                    }
                    return new_path;
                }
                queue_f = ([&]{ auto __tmp = queue_f; __tmp.push_back(Node{.pos = npos, .path = new_path}); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        Node node_b = _index(queue_b, head_b);
        head_b = (head_b + int64_t(1));
        std::vector<std::string> neigh_b = neighbors(node_b.pos);
        int64_t j = int64_t(0);
        while ((j < neigh_b.size())) {
            std::string nposb = _index(neigh_b, j);
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited_b, nposb)) {
                auto new_path_b = ([&]{ auto __tmp = node_b.path; __tmp.push_back(nposb); return __tmp; }());
                visited_b[nposb] = new_path_b;
                if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited_f, nposb)) {
                    std::vector<std::string> path_f = ([&](const auto& __m){ auto __it = __m.find(nposb); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(visited_f);
                    new_path_b = reverse_list((std::vector<std::string>)(new_path_b));
                    int64_t t = int64_t(1);
                    while ((t < new_path_b.size())) {
                        path_f = ([&]{ auto __tmp = path_f; __tmp.push_back((std::string)_index(new_path_b, t)); return __tmp; }());
                        t = (t + int64_t(1));
                    }
                    return path_f;
                }
                queue_b = ([&]{ auto __tmp = queue_b; __tmp.push_back(Node{.pos = nposb, .path = new_path_b}); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
    }
    return std::vector<std::string>{start};
}

std::string path_to_string(const std::vector<std::string>& path) {
    if ((path.size() == int64_t(0))) {
        return std::string("[]");
    }
    std::vector<int64_t> first = parse_key(_index(path, int64_t(0)));
    std::string s = ((((std::string("[(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(first, int64_t(0)); return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(first, int64_t(1)); return ss.str(); }())) + std::string(")"));
    int64_t i = int64_t(1);
    while ((i < path.size())) {
        std::vector<int64_t> c = parse_key(_index(path, i));
        s = (((((s + std::string(", (")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(c, int64_t(0)); return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(c, int64_t(1)); return ss.str(); }())) + std::string(")"));
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        delta = std::vector<std::vector<int64_t>>{std::vector<int64_t>{-int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), -int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1)}};
        start = key(int64_t(0), int64_t(0));
        goal = key((grid.size() - int64_t(1)), (_index(grid, int64_t(0)).size() - int64_t(1)));
        path1 = bfs(start, goal);
        std::cout << path_to_string(path1);
        std::cout << std::endl;
        path2 = bidirectional_bfs(start, goal);
        std::cout << path_to_string(path2);
        std::cout << std::endl;
    }
    return 0;
}
