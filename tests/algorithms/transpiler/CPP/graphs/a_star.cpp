// Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:17:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct SearchResult;

std::ostream& operator<<(std::ostream&, const SearchResult&);


struct SearchResult {
    std::vector<std::vector<int64_t>> path;
    std::vector<std::vector<int64_t>> action;
    auto operator<=>(const SearchResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const SearchResult& v) {
    os << '{' << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << ", " << "'action': "<< "["; for(size_t i=0;i<v.action.size();++i){ if(i>0) os << ", "; os << v.action[i]; } os << "]"
 << '}';
    return os;
}

int64_t iabs(int64_t x);
SearchResult search(const std::vector<std::vector<int64_t>>& grid, const std::vector<int64_t>& init, const std::vector<int64_t>& goal, int64_t cost, const std::vector<std::vector<int64_t>>& heuristic);
int main();

std::vector<std::vector<int64_t>> DIRECTIONS = std::vector<std::vector<int64_t>>{std::vector<int64_t>{-int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), -int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1)}};

int64_t iabs(int64_t x) {
    if ((x < int64_t(0))) {
        return -x;
    }
    return x;
}

SearchResult search(const std::vector<std::vector<int64_t>>& grid, const std::vector<int64_t>& init, const std::vector<int64_t>& goal, int64_t cost, const std::vector<std::vector<int64_t>>& heuristic) {
    std::vector<std::vector<int64_t>> closed = {};
    int64_t r = int64_t(0);
    while ((r < grid.size())) {
        std::vector<int64_t> row = {};
        int64_t c = int64_t(0);
        while ((c < grid[int64_t(0)].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            c = (c + int64_t(1));
        }
        closed = ([&]{ auto __tmp = closed; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    closed[init[int64_t(0)]][init[int64_t(1)]] = int64_t(1);
    std::vector<std::vector<int64_t>> action = {};
    r = int64_t(0);
    while ((r < grid.size())) {
        std::vector<int64_t> row = {};
        int64_t c = int64_t(0);
        while ((c < grid[int64_t(0)].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            c = (c + int64_t(1));
        }
        action = ([&]{ auto __tmp = action; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    int64_t x = init[int64_t(0)];
    int64_t y = init[int64_t(1)];
    int64_t g = int64_t(0);
    int64_t f = (g + heuristic[x][y]);
    std::vector<std::vector<int64_t>> cell = std::vector<std::vector<int64_t>>{std::vector<int64_t>{f, g, x, y}};
    bool found = false;
    bool resign = false;
    while ((!found && !resign)) {
        if ((cell.size() == int64_t(0))) {
            throw std::runtime_error(std::string("Algorithm is unable to find solution"));
        } else {
            int64_t best_i = int64_t(0);
            int64_t best_f = cell[int64_t(0)][int64_t(0)];
            int64_t i = int64_t(1);
            while ((i < cell.size())) {
                if ((cell[i][int64_t(0)] < best_f)) {
                    best_f = cell[i][int64_t(0)];
                    best_i = i;
                }
                i = (i + int64_t(1));
            }
            std::vector<int64_t> next_cell = cell[best_i];
            std::vector<std::vector<int64_t>> new_cell = {};
            i = int64_t(0);
            while ((i < cell.size())) {
                if ((i != best_i)) {
                    new_cell = ([&]{ auto __tmp = new_cell; __tmp.push_back(cell[i]); return __tmp; }());
                }
                i = (i + int64_t(1));
            }
            cell = new_cell;
            x = next_cell[int64_t(2)];
            y = next_cell[int64_t(3)];
            g = next_cell[int64_t(1)];
            if (((x == goal[int64_t(0)]) && (y == goal[int64_t(1)]))) {
                found = true;
            } else {
                int64_t d = int64_t(0);
                while ((d < DIRECTIONS.size())) {
                    int64_t x2 = (x + DIRECTIONS[d][int64_t(0)]);
                    int64_t y2 = (y + DIRECTIONS[d][int64_t(1)]);
                    if (((((((x2 >= int64_t(0)) && (x2 < grid.size())) && (y2 >= int64_t(0))) && (y2 < grid[int64_t(0)].size())) && (closed[x2][y2] == int64_t(0))) && (grid[x2][y2] == int64_t(0)))) {
                        int64_t g2 = (g + cost);
                        int64_t f2 = (g2 + heuristic[x2][y2]);
                        cell = ([&]{ auto __tmp = cell; __tmp.push_back(std::vector<int64_t>{f2, g2, x2, y2}); return __tmp; }());
                        closed[x2][y2] = int64_t(1);
                        action[x2][y2] = d;
                    }
                    d = (d + int64_t(1));
                }
            }
        }
    }
    std::vector<std::vector<int64_t>> invpath = {};
    x = goal[int64_t(0)];
    y = goal[int64_t(1)];
    invpath = ([&]{ auto __tmp = invpath; __tmp.push_back(std::vector<int64_t>{x, y}); return __tmp; }());
    while (((x != init[int64_t(0)]) || (y != init[int64_t(1)]))) {
        int64_t dir = action[x][y];
        int64_t x2 = (x - DIRECTIONS[dir][int64_t(0)]);
        int64_t y2 = (y - DIRECTIONS[dir][int64_t(1)]);
        x = x2;
        y = y2;
        invpath = ([&]{ auto __tmp = invpath; __tmp.push_back(std::vector<int64_t>{x, y}); return __tmp; }());
    }
    std::vector<std::vector<int64_t>> path = {};
    int64_t idx = (invpath.size() - int64_t(1));
    while ((idx >= int64_t(0))) {
        path = ([&]{ auto __tmp = path; __tmp.push_back(invpath[idx]); return __tmp; }());
        idx = (idx - int64_t(1));
    }
    return SearchResult{.path = path, .action = action};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> grid = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0), int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(0)}};
        std::vector<int64_t> init = std::vector<int64_t>{int64_t(0), int64_t(0)};
        std::vector<int64_t> goal = std::vector<int64_t>{(grid.size() - int64_t(1)), (grid[int64_t(0)].size() - int64_t(1))};
        int64_t cost = int64_t(1);
        std::vector<std::vector<int64_t>> heuristic = {};
        int64_t i = int64_t(0);
        while ((i < grid.size())) {
            std::vector<int64_t> row = {};
            int64_t j = int64_t(0);
            while ((j < grid[int64_t(0)].size())) {
                int64_t h = (iabs((i - goal[int64_t(0)])) + iabs((j - goal[int64_t(1)])));
                if ((grid[i][j] == int64_t(1))) {
                    row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(99)); return __tmp; }());
                } else {
                    row = ([&]{ auto __tmp = row; __tmp.push_back(h); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            heuristic = ([&]{ auto __tmp = heuristic; __tmp.push_back(row); return __tmp; }());
            i = (i + int64_t(1));
        }
        SearchResult result = search(grid, init, goal, cost, heuristic);
        std::cout << std::string("ACTION MAP");
        std::cout << std::endl;
        int64_t rr = int64_t(0);
        while ((rr < result.action.size())) {
            { auto __tmp = result.action[rr]; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
            std::cout << std::endl;
            rr = (rr + int64_t(1));
        }
        int64_t p = int64_t(0);
        while ((p < result.path.size())) {
            { auto __tmp = result.path[p]; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
            std::cout << std::endl;
            p = (p + int64_t(1));
        }
    }
    return 0;
}
