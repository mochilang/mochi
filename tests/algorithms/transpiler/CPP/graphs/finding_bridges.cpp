// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:16:39 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct DfsResult;

std::ostream& operator<<(std::ostream&, const DfsResult&);


struct DfsResult {
    int64_t id;
    std::vector<std::vector<int64_t>> bridges;
    auto operator<=>(const DfsResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const DfsResult& v) {
    os << '{' << "'id': "<< v.id
 << ", " << "'bridges': "<< "["; for(size_t i=0;i<v.bridges.size();++i){ if(i>0) os << ", "; os << v.bridges[i]; } os << "]"
 << '}';
    return os;
}

DfsResult dfs(const std::map<int64_t, std::vector<int64_t>>& graph, int64_t at, int64_t parent, std::vector<bool>& visited, std::vector<int64_t>& ids, std::vector<int64_t>& low, int64_t id, const std::vector<std::vector<int64_t>>& bridges);
std::vector<std::vector<int64_t>> compute_bridges(const std::map<int64_t, std::vector<int64_t>>& graph);
std::map<int64_t, std::vector<int64_t>> get_demo_graph(int64_t index);
int main();

DfsResult dfs(const std::map<int64_t, std::vector<int64_t>>& graph, int64_t at, int64_t parent, std::vector<bool>& visited, std::vector<int64_t>& ids, std::vector<int64_t>& low, int64_t id, const std::vector<std::vector<int64_t>>& bridges) {
    visited[static_cast<size_t>(at)] = true;
    ids[static_cast<size_t>(at)] = id;
    low[static_cast<size_t>(at)] = id;
    int64_t current_id = (id + int64_t(1));
    std::vector<std::vector<int64_t>> res_bridges = bridges;
    for (int64_t to : ([&](const auto& __m){ auto __it = __m.find(at); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(graph)) {
        if ((to == parent)) {
            continue;
        } else         if (!_index(visited, to)) {
            DfsResult result = dfs(graph, to, at, visited, ids, low, current_id, res_bridges);
            current_id = result.id;
            res_bridges = result.bridges;
            if ((_index(low, at) > _index(low, to))) {
                low[static_cast<size_t>(at)] = _index(low, to);
            }
            if ((_index(ids, at) < _index(low, to))) {
                std::vector<int64_t> edge = ((at < to) ? std::vector<int64_t>{at, to} : std::vector<int64_t>{to, at});
                res_bridges = ([&]{ auto __tmp = res_bridges; __tmp.push_back(edge); return __tmp; }());
            }
        } else {
            if ((_index(low, at) > _index(ids, to))) {
                low[static_cast<size_t>(at)] = _index(ids, to);
            }
        }

    }
    return DfsResult{.id = current_id, .bridges = res_bridges};
}

std::vector<std::vector<int64_t>> compute_bridges(const std::map<int64_t, std::vector<int64_t>>& graph) {
    int64_t n = graph.size();
    std::vector<bool> visited = {};
    std::vector<int64_t> ids = {};
    std::vector<int64_t> low = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        visited = ([&]{ auto __tmp = visited; __tmp.push_back(false); return __tmp; }());
        ids = ([&]{ auto __tmp = ids; __tmp.push_back(int64_t(0)); return __tmp; }());
        low = ([&]{ auto __tmp = low; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<int64_t>> bridges = {};
    int64_t id = int64_t(0);
    i = int64_t(0);
    while ((i < n)) {
        if (!_index(visited, i)) {
            DfsResult result = dfs(graph, i, -int64_t(1), visited, ids, low, id, bridges);
            id = result.id;
            bridges = result.bridges;
        }
        i = (i + int64_t(1));
    }
    return bridges;
}

std::map<int64_t, std::vector<int64_t>> get_demo_graph(int64_t index) {
    if ((index == int64_t(0))) {
        return std::map<int64_t, std::vector<int64_t>>{{int64_t(0), std::vector<int64_t>{int64_t(1), int64_t(2)}}, {int64_t(1), std::vector<int64_t>{int64_t(0), int64_t(2)}}, {int64_t(2), std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(3), int64_t(5)}}, {int64_t(3), std::vector<int64_t>{int64_t(2), int64_t(4)}}, {int64_t(4), std::vector<int64_t>{int64_t(3)}}, {int64_t(5), std::vector<int64_t>{int64_t(2), int64_t(6), int64_t(8)}}, {int64_t(6), std::vector<int64_t>{int64_t(5), int64_t(7)}}, {int64_t(7), std::vector<int64_t>{int64_t(6), int64_t(8)}}, {int64_t(8), std::vector<int64_t>{int64_t(5), int64_t(7)}}};
    }
    if ((index == int64_t(1))) {
        return std::map<int64_t, std::vector<int64_t>>{{int64_t(0), std::vector<int64_t>{int64_t(6)}}, {int64_t(1), std::vector<int64_t>{int64_t(9)}}, {int64_t(2), std::vector<int64_t>{int64_t(4), int64_t(5)}}, {int64_t(3), std::vector<int64_t>{int64_t(4)}}, {int64_t(4), std::vector<int64_t>{int64_t(2), int64_t(3)}}, {int64_t(5), std::vector<int64_t>{int64_t(2)}}, {int64_t(6), std::vector<int64_t>{int64_t(0), int64_t(7)}}, {int64_t(7), std::vector<int64_t>{int64_t(6)}}, {int64_t(8), std::vector<int64_t>{}}, {int64_t(9), std::vector<int64_t>{int64_t(1)}}};
    }
    if ((index == int64_t(2))) {
        return std::map<int64_t, std::vector<int64_t>>{{int64_t(0), std::vector<int64_t>{int64_t(4)}}, {int64_t(1), std::vector<int64_t>{int64_t(6)}}, {int64_t(2), std::vector<int64_t>{}}, {int64_t(3), std::vector<int64_t>{int64_t(5), int64_t(6), int64_t(7)}}, {int64_t(4), std::vector<int64_t>{int64_t(0), int64_t(6)}}, {int64_t(5), std::vector<int64_t>{int64_t(3), int64_t(8), int64_t(9)}}, {int64_t(6), std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(4), int64_t(7)}}, {int64_t(7), std::vector<int64_t>{int64_t(3), int64_t(6), int64_t(8), int64_t(9)}}, {int64_t(8), std::vector<int64_t>{int64_t(5), int64_t(7)}}, {int64_t(9), std::vector<int64_t>{int64_t(5), int64_t(7)}}};
    }
    return std::map<int64_t, std::vector<int64_t>>{{int64_t(0), std::vector<int64_t>{int64_t(1), int64_t(3)}}, {int64_t(1), std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(4)}}, {int64_t(2), std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(4)}}, {int64_t(3), std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(4)}}, {int64_t(4), std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}}};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { auto __tmp1 = compute_bridges(get_demo_graph(int64_t(0))); std::cout << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp3 = compute_bridges(get_demo_graph(int64_t(1))); std::cout << "["; for(size_t i=0;i<__tmp3.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp4 = __tmp3[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp4.size();++i){ if(i>0) __ss << ' '; __ss << __tmp4[i]; } __ss << "]"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp5 = compute_bridges(get_demo_graph(int64_t(2))); std::cout << "["; for(size_t i=0;i<__tmp5.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp6 = __tmp5[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp6.size();++i){ if(i>0) __ss << ' '; __ss << __tmp6[i]; } __ss << "]"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp7 = compute_bridges(get_demo_graph(int64_t(3))); std::cout << "["; for(size_t i=0;i<__tmp7.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp8 = __tmp7[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp8.size();++i){ if(i>0) __ss << ' '; __ss << __tmp8[i]; } __ss << "]"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp9 = compute_bridges(std::map<int64_t, std::vector<int64_t>>{}); std::cout << "["; for(size_t i=0;i<__tmp9.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp10 = __tmp9[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp10.size();++i){ if(i>0) __ss << ' '; __ss << __tmp10[i]; } __ss << "]"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
