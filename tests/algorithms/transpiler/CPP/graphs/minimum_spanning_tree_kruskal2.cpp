// Generated by Mochi transpiler v0.10.66 on 2025-08-15 10:04:06 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Edge;
struct Graph;
struct DS;
struct FindResult;

std::ostream& operator<<(std::ostream&, const Edge&);
std::ostream& operator<<(std::ostream&, const Graph&);
std::ostream& operator<<(std::ostream&, const DS&);
std::ostream& operator<<(std::ostream&, const FindResult&);


struct Edge {
    int64_t u;
    int64_t v;
    int64_t w;
    auto operator<=>(const Edge&) const = default;
};

struct Graph {
    std::vector<Edge> edges;
    int64_t num_nodes;
    auto operator<=>(const Graph&) const = default;
};

struct DS {
    std::vector<int64_t> parent;
    std::vector<int64_t> rank;
    auto operator<=>(const DS&) const = default;
};

struct FindResult {
    DS ds;
    int64_t root;
    auto operator<=>(const FindResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Edge& v) {
    os << '{' << "'u': "<< v.u
 << ", " << "'v': "<< v.v
 << ", " << "'w': "<< v.w
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Graph& v) {
    os << '{' << "'edges': "<< "["; for(size_t i=0;i<v.edges.size();++i){ if(i>0) os << ", "; os << v.edges[i]; } os << "]"
 << ", " << "'num_nodes': "<< v.num_nodes
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const DS& v) {
    os << '{' << "'parent': "<< "["; for(size_t i=0;i<v.parent.size();++i){ if(i>0) os << ", "; os << v.parent[i]; } os << "]"
 << ", " << "'rank': "<< "["; for(size_t i=0;i<v.rank.size();++i){ if(i>0) os << ", "; os << v.rank[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const FindResult& v) {
    os << '{' << "'ds': "<< v.ds
 << ", " << "'root': "<< v.root
 << '}';
    return os;
}

Graph new_graph();
Graph add_edge(const Graph& g, int64_t u, int64_t v, int64_t w);
DS make_ds(int64_t n);
FindResult find_set(const DS& ds, int64_t x);
DS union_set(const DS& ds, int64_t x, int64_t y);
std::vector<Edge> sort_edges(const std::vector<Edge>& edges);
Graph kruskal(const Graph& g);
void print_mst(const Graph& g);
int main();

Graph new_graph() {
    return Graph{.edges = std::vector<Edge>{}, .num_nodes = int64_t(0)};
}

Graph add_edge(const Graph& g, int64_t u, int64_t v, int64_t w) {
    std::vector<Edge> es = g.edges;
    es = ([&]{ auto __tmp = es; __tmp.push_back(Edge{.u = u, .v = v, .w = w}); return __tmp; }());
    int64_t n = g.num_nodes;
    if ((u > n)) {
        n = u;
    }
    if ((v > n)) {
        n = v;
    }
    return Graph{.edges = es, .num_nodes = n};
}

DS make_ds(int64_t n) {
    std::vector<int64_t> parent = {};
    std::vector<int64_t> rank = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        parent = ([&]{ auto __tmp = parent; __tmp.push_back(i); return __tmp; }());
        rank = ([&]{ auto __tmp = rank; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return DS{.parent = parent, .rank = rank};
}

FindResult find_set(const DS& ds, int64_t x) {
    if ((_index(ds.parent, x) == x)) {
        return FindResult{.ds = ds, .root = x};
    }
    FindResult res = find_set(ds, _index(ds.parent, x));
    std::vector<int64_t> p = res.ds.parent;
    p[static_cast<size_t>(x)] = res.root;
    return FindResult{.ds = DS{.parent = p, .rank = res.ds.rank}, .root = res.root};
}

DS union_set(const DS& ds, int64_t x, int64_t y) {
    FindResult fx = find_set(ds, x);
    DS ds1 = fx.ds;
    int64_t x_root = fx.root;
    FindResult fy = find_set(ds1, y);
    DS ds2 = fy.ds;
    int64_t y_root = fy.root;
    if ((x_root == y_root)) {
        return ds2;
    }
    std::vector<int64_t> p = ds2.parent;
    std::vector<int64_t> r = ds2.rank;
    if ((_index(r, x_root) > _index(r, y_root))) {
        p[static_cast<size_t>(y_root)] = x_root;
    } else {
        p[static_cast<size_t>(x_root)] = y_root;
        if ((_index(r, x_root) == _index(r, y_root))) {
            r[static_cast<size_t>(y_root)] = (_index(r, y_root) + int64_t(1));
        }
    }
    return DS{.parent = p, .rank = r};
}

std::vector<Edge> sort_edges(const std::vector<Edge>& edges) {
    std::vector<Edge> arr = edges;
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        Edge key = _index(arr, i);
        int64_t j = (i - int64_t(1));
        while ((j >= int64_t(0))) {
            Edge temp = _index(arr, j);
            if (((temp.w > key.w) || ((temp.w == key.w) && ((temp.u > key.u) || ((temp.u == key.u) && (temp.v > key.v)))))) {
                arr[static_cast<size_t>((j + int64_t(1)))] = temp;
                j = (j - int64_t(1));
            } else {
                break;
            }
        }
        arr[static_cast<size_t>((j + int64_t(1)))] = key;
        i = (i + int64_t(1));
    }
    return arr;
}

Graph kruskal(const Graph& g) {
    std::vector<Edge> edges = sort_edges(g.edges);
    DS ds = make_ds(g.num_nodes);
    std::vector<Edge> mst_edges = {};
    int64_t i = int64_t(0);
    int64_t added = int64_t(0);
    while (((added < (g.num_nodes - int64_t(1))) && (i < edges.size()))) {
        Edge e = _index(edges, i);
        i = (i + int64_t(1));
        FindResult fu = find_set(ds, e.u);
        ds = fu.ds;
        int64_t ru = fu.root;
        FindResult fv = find_set(ds, e.v);
        ds = fv.ds;
        int64_t rv = fv.root;
        if ((ru != rv)) {
            mst_edges = ([&]{ auto __tmp = mst_edges; __tmp.push_back(e); return __tmp; }());
            added = (added + int64_t(1));
            ds = union_set(ds, ru, rv);
        }
    }
    return Graph{.edges = mst_edges, .num_nodes = g.num_nodes};
}

void print_mst(const Graph& g) {
    std::vector<Edge> es = sort_edges(g.edges);
    for (Edge e : es) {
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << e.u; return ss.str(); }()) + std::string("-")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << e.v; return ss.str(); }())) + std::string(":")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << e.w; return ss.str(); }()));
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Graph g = new_graph();
        g = add_edge(g, int64_t(1), int64_t(2), int64_t(1));
        g = add_edge(g, int64_t(2), int64_t(3), int64_t(2));
        g = add_edge(g, int64_t(3), int64_t(4), int64_t(1));
        g = add_edge(g, int64_t(3), int64_t(5), int64_t(100));
        g = add_edge(g, int64_t(4), int64_t(5), int64_t(5));
        Graph mst = kruskal(g);
        print_mst(mst);
    }
    return 0;
}
