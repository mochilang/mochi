// Generated by Mochi transpiler v0.10.61 on 2025-08-08 15:56:27 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<int64_t>> sort_edges(const std::vector<std::vector<int64_t>>& edges);
int64_t find(const std::vector<int64_t>& parent, int64_t x);
std::vector<std::vector<int64_t>> kruskal(int64_t n, const std::vector<std::vector<int64_t>>& edges);
bool edges_equal(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b);
int main();

std::vector<std::vector<int64_t>> sort_edges(const std::vector<std::vector<int64_t>>& edges) {
    std::vector<std::vector<int64_t>> es = edges;
    int64_t i = int64_t(0);
    while ((i < es.size())) {
        int64_t j = int64_t(0);
        while ((j < ((es.size() - i) - int64_t(1)))) {
            if ((_index(_index(es, j), int64_t(2)) > _index(_index(es, (j + int64_t(1))), int64_t(2)))) {
                std::vector<int64_t> tmp = _index(es, j);
                es[j] = _index(es, (j + int64_t(1)));
                es[(j + int64_t(1))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return es;
}

int64_t find(const std::vector<int64_t>& parent, int64_t x) {
    int64_t r = x;
    while ((_index(parent, r) != r)) {
        r = _index(parent, r);
    }
    return r;
}

std::vector<std::vector<int64_t>> kruskal(int64_t n, const std::vector<std::vector<int64_t>>& edges) {
    std::vector<int64_t> parent = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        parent = ([&]{ auto& __tmp = parent; __tmp.push_back(i); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<int64_t>> sorted = sort_edges(edges);
    std::vector<std::vector<int64_t>> mst = {};
    int64_t e = int64_t(0);
    while ((e < sorted.size())) {
        if ((mst.size() == (n - int64_t(1)))) {
            break;
        }
        std::vector<int64_t> edge = _index(sorted, e);
        e = (e + int64_t(1));
        int64_t u = _index(edge, int64_t(0));
        int64_t v = _index(edge, int64_t(1));
        int64_t w = _index(edge, int64_t(2));
        int64_t ru = find(parent, u);
        int64_t rv = find(parent, v);
        if ((ru != rv)) {
            parent[ru] = rv;
            mst = ([&]{ auto& __tmp = mst; __tmp.push_back(std::vector<int64_t>{u, v, w}); return __tmp; }());
        }
    }
    return mst;
}

bool edges_equal(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b) {
    if ((a.size() != b.size())) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<int64_t> e1 = _index(a, i);
        std::vector<int64_t> e2 = _index(b, i);
        if ((((_index(e1, int64_t(0)) != _index(e2, int64_t(0))) || (_index(e1, int64_t(1)) != _index(e2, int64_t(1)))) || (_index(e1, int64_t(2)) != _index(e2, int64_t(2))))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t num_nodes = int64_t(9);
        std::vector<std::vector<int64_t>> edges = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(4)}, std::vector<int64_t>{int64_t(0), int64_t(7), int64_t(8)}, std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(8)}, std::vector<int64_t>{int64_t(7), int64_t(8), int64_t(7)}, std::vector<int64_t>{int64_t(7), int64_t(6), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(8), int64_t(2)}, std::vector<int64_t>{int64_t(8), int64_t(6), int64_t(6)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(7)}, std::vector<int64_t>{int64_t(2), int64_t(5), int64_t(4)}, std::vector<int64_t>{int64_t(6), int64_t(5), int64_t(2)}, std::vector<int64_t>{int64_t(3), int64_t(5), int64_t(14)}, std::vector<int64_t>{int64_t(3), int64_t(4), int64_t(9)}, std::vector<int64_t>{int64_t(5), int64_t(4), int64_t(10)}, std::vector<int64_t>{int64_t(1), int64_t(7), int64_t(11)}};
        std::vector<std::vector<int64_t>> expected = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(7), int64_t(6), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(8), int64_t(2)}, std::vector<int64_t>{int64_t(6), int64_t(5), int64_t(2)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(4)}, std::vector<int64_t>{int64_t(2), int64_t(5), int64_t(4)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(7)}, std::vector<int64_t>{int64_t(0), int64_t(7), int64_t(8)}, std::vector<int64_t>{int64_t(3), int64_t(4), int64_t(9)}};
        std::vector<std::vector<int64_t>> result = kruskal(num_nodes, edges);
        std::vector<std::vector<int64_t>> sorted_result = sort_edges(result);
        std::vector<std::vector<int64_t>> sorted_expected = sort_edges(expected);
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = sorted_result; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        if (edges_equal(sorted_expected, sorted_result)) {
            std::cout << (true ? "true" : "false");
            std::cout << std::endl;
        } else {
            std::cout << (false ? "true" : "false");
            std::cout << std::endl;
        }
    }
    return 0;
}
