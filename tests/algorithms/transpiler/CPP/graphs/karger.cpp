// Generated by Mochi transpiler v0.10.66 on 2025-08-15 10:03:35 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Pair;

std::ostream& operator<<(std::ostream&, const Pair&);


struct Pair {
    std::string a;
    std::string b;
    auto operator<=>(const Pair&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pair& v) {
    os << '{' << "'a': "<< "'" << v.a << "'"
 << ", " << "'b': "<< "'" << v.b << "'"
 << '}';
    return os;
}

int64_t rand_int(int64_t n);
bool contains(const std::vector<std::string>& list, std::string value);
std::vector<std::string> remove_all(const std::vector<std::string>& list, std::string value);
std::vector<Pair> partition_graph(const std::map<std::string, std::vector<std::string>>& graph);
std::string cut_to_string(const std::vector<Pair>& cut);
int main();

int64_t seed = int64_t(1);
std::map<std::string, std::vector<std::string>> TEST_GRAPH = {{"1", std::vector<std::string>{std::string("2"), std::string("3"), std::string("4"), std::string("5")}}, {"2", std::vector<std::string>{std::string("1"), std::string("3"), std::string("4"), std::string("5")}}, {"3", std::vector<std::string>{std::string("1"), std::string("2"), std::string("4"), std::string("5"), std::string("10")}}, {"4", std::vector<std::string>{std::string("1"), std::string("2"), std::string("3"), std::string("5"), std::string("6")}}, {"5", std::vector<std::string>{std::string("1"), std::string("2"), std::string("3"), std::string("4"), std::string("7")}}, {"6", std::vector<std::string>{std::string("7"), std::string("8"), std::string("9"), std::string("10"), std::string("4")}}, {"7", std::vector<std::string>{std::string("6"), std::string("8"), std::string("9"), std::string("10"), std::string("5")}}, {"8", std::vector<std::string>{std::string("6"), std::string("7"), std::string("9"), std::string("10")}}, {"9", std::vector<std::string>{std::string("6"), std::string("7"), std::string("8"), std::string("10")}}, {"10", std::vector<std::string>{std::string("6"), std::string("7"), std::string("8"), std::string("9"), std::string("3")}}};
std::vector<Pair> result = std::vector<Pair>{};

int64_t rand_int(int64_t n) {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return (seed % n);
}

bool contains(const std::vector<std::string>& list, std::string value) {
    int64_t i = int64_t(0);
    while ((i < list.size())) {
        if ((_index(list, i) == value)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::string> remove_all(const std::vector<std::string>& list, std::string value) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < list.size())) {
        if ((_index(list, i) != value)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(list, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<Pair> partition_graph(const std::map<std::string, std::vector<std::string>>& graph) {
    std::map<std::string, std::vector<std::string>> contracted = {};
    for (std::string node : ([&]{ std::vector<std::decay_t<decltype(graph.begin()->first)>> keys; for(const auto& __p : graph) keys.push_back(__p.first); return keys; }())) {
        contracted[node] = std::vector<std::string>{node};
    }
    std::map<std::string, std::vector<std::string>> graph_copy = {};
    for (std::string node : ([&]{ std::vector<std::decay_t<decltype(graph.begin()->first)>> keys; for(const auto& __p : graph) keys.push_back(__p.first); return keys; }())) {
        std::vector<std::string> lst = {};
        std::vector<std::string> neigh = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph);
        int64_t i = int64_t(0);
        while ((i < neigh.size())) {
            lst = ([&]{ auto __tmp = lst; __tmp.push_back(_index(neigh, i)); return __tmp; }());
            i = (i + int64_t(1));
        }
        graph_copy[node] = lst;
    }
    std::vector<std::string> nodes = ([&]{ std::vector<std::decay_t<decltype(graph_copy.begin()->first)>> keys; for(const auto& __p : graph_copy) keys.push_back(__p.first); return keys; }());
    while ((nodes.size() > int64_t(2))) {
        std::string u = _index(nodes, rand_int(nodes.size()));
        std::vector<std::string> u_neighbors = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy);
        std::string v = _index(u_neighbors, rand_int(u_neighbors.size()));
        std::string uv = (u + v);
        std::vector<std::string> uv_neighbors = {};
        int64_t i = int64_t(0);
        while ((i < ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy).size())) {
            std::string n = _index(([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy), i);
            if ((((n != u) && (n != v)) && (contains(uv_neighbors, n) == false))) {
                uv_neighbors = ([&]{ auto __tmp = uv_neighbors; __tmp.push_back(n); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        i = int64_t(0);
        while ((i < ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy).size())) {
            std::string n = _index(([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy), i);
            if ((((n != u) && (n != v)) && (contains(uv_neighbors, n) == false))) {
                uv_neighbors = ([&]{ auto __tmp = uv_neighbors; __tmp.push_back(n); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        graph_copy[uv] = uv_neighbors;
        int64_t k = int64_t(0);
        while ((k < uv_neighbors.size())) {
            std::string nb = _index(uv_neighbors, k);
            graph_copy[nb] = ([&]{ auto __tmp = ([&](const auto& __m){ auto __it = __m.find(nb); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy); __tmp.push_back(uv); return __tmp; }());
            graph_copy[nb] = remove_all(([&](const auto& __m){ auto __it = __m.find(nb); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy), u);
            graph_copy[nb] = remove_all(([&](const auto& __m){ auto __it = __m.find(nb); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph_copy), v);
            k = (k + int64_t(1));
        }
        std::vector<std::string> group = {};
        i = int64_t(0);
        while ((i < ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(contracted).size())) {
            group = ([&]{ auto __tmp = group; __tmp.push_back(_index(([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(contracted), i)); return __tmp; }());
            i = (i + int64_t(1));
        }
        i = int64_t(0);
        while ((i < ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(contracted).size())) {
            std::string val = _index(([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(contracted), i);
            if ((contains(group, val) == false)) {
                group = ([&]{ auto __tmp = group; __tmp.push_back(val); return __tmp; }());
            }
            i = (i + int64_t(1));
        }
        contracted[uv] = group;
        nodes = remove_all(nodes, u);
        nodes = remove_all(nodes, v);
        nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(uv); return __tmp; }());
    }
    std::vector<std::vector<std::string>> groups = {};
    int64_t j = int64_t(0);
    while ((j < nodes.size())) {
        std::string n = _index(nodes, j);
        groups = ([&]{ auto __tmp = groups; __tmp.push_back(([&](const auto& __m){ auto __it = __m.find(n); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(contracted)); return __tmp; }());
        j = (j + int64_t(1));
    }
    std::vector<std::string> groupA = _index(groups, int64_t(0));
    std::vector<std::string> groupB = _index(groups, int64_t(1));
    std::vector<Pair> cut = {};
    j = int64_t(0);
    while ((j < groupA.size())) {
        std::string node = _index(groupA, j);
        std::vector<std::string> neigh = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph);
        int64_t l = int64_t(0);
        while ((l < neigh.size())) {
            std::string nb = _index(neigh, l);
            if (contains(groupB, nb)) {
                cut = ([&]{ auto __tmp = cut; __tmp.push_back(Pair{.a = node, .b = nb}); return __tmp; }());
            }
            l = (l + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    return cut;
}

std::string cut_to_string(const std::vector<Pair>& cut) {
    std::string s = std::string("{");
    int64_t i = int64_t(0);
    while ((i < cut.size())) {
        Pair p = _index(cut, i);
        s = (((((s + std::string("(")) + p.a) + std::string(", ")) + p.b) + std::string(")"));
        if ((i < (cut.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("}"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        result = partition_graph(TEST_GRAPH);
        std::cout << cut_to_string(result);
        std::cout << std::endl;
    }
    return 0;
}
