// Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:20:18 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <algorithm>
#include <type_traits>
#include <any>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _slice(const std::vector<T>& s, int64_t start, int64_t end) {
    if(start < 0) start = 0;
    if(end > (int64_t)s.size()) end = s.size();
    if(start > (int64_t)s.size()) start = s.size();
    if(end < start) end = start;
    return std::vector<T>(s.begin()+start, s.begin()+end);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

void dfs(const std::map<int64_t, std::vector<int64_t>>& g, int64_t s);
void bfs(const std::map<int64_t, std::vector<int64_t>>& g, int64_t s);
std::vector<int64_t> sort_ints(const std::vector<int64_t>& a);
void dijkstra(const std::map<int64_t, std::vector<std::vector<int64_t>>>& g, int64_t s);
void topo(const std::map<int64_t, std::vector<int64_t>>& g, int64_t n);
void floyd(const std::vector<std::vector<int64_t>>& a);
int64_t prim(const std::map<int64_t, std::vector<std::vector<int64_t>>>& g, int64_t s, int64_t n);
std::vector<std::vector<int64_t>> sort_edges(const std::vector<std::vector<int64_t>>& edges);
int64_t find_parent(const std::vector<int64_t>& parent, int64_t x);
void union_parent(std::vector<int64_t>& parent, int64_t a, int64_t b);
int64_t kruskal(const std::vector<std::vector<int64_t>>& edges, int64_t n);
std::vector<int64_t> find_isolated_nodes(const std::map<int64_t, std::vector<int64_t>>& g, const std::vector<int64_t>& nodes);
int main();

std::map<int64_t, std::vector<int64_t>> g_dfs = std::map<int64_t, std::any>{{int64_t(1), std::any(std::vector<int64_t>{int64_t(2), int64_t(3)})}, {int64_t(2), std::any(std::vector<int64_t>{int64_t(4), int64_t(5)})}, {int64_t(3), std::any(std::vector<int64_t>{})}, {int64_t(4), std::any(std::vector<int64_t>{})}, {int64_t(5), std::any(std::vector<int64_t>{})}};
std::map<int64_t, std::vector<int64_t>> g_bfs = std::map<int64_t, std::any>{{int64_t(1), std::any(std::vector<int64_t>{int64_t(2), int64_t(3)})}, {int64_t(2), std::any(std::vector<int64_t>{int64_t(4), int64_t(5)})}, {int64_t(3), std::any(std::vector<int64_t>{int64_t(6), int64_t(7)})}, {int64_t(4), std::any(std::vector<int64_t>{})}, {int64_t(5), std::any(std::vector<int64_t>{int64_t(8)})}, {int64_t(6), std::any(std::vector<int64_t>{})}, {int64_t(7), std::any(std::vector<int64_t>{})}, {int64_t(8), std::any(std::vector<int64_t>{})}};
std::map<int64_t, std::vector<std::vector<int64_t>>> g_weighted = std::map<int64_t, std::vector<std::vector<int64_t>>>{{int64_t(1), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(7)}, std::vector<int64_t>{int64_t(3), int64_t(9)}, std::vector<int64_t>{int64_t(6), int64_t(14)}}}, {int64_t(2), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(7)}, std::vector<int64_t>{int64_t(3), int64_t(10)}, std::vector<int64_t>{int64_t(4), int64_t(15)}}}, {int64_t(3), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(9)}, std::vector<int64_t>{int64_t(2), int64_t(10)}, std::vector<int64_t>{int64_t(4), int64_t(11)}, std::vector<int64_t>{int64_t(6), int64_t(2)}}}, {int64_t(4), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(15)}, std::vector<int64_t>{int64_t(3), int64_t(11)}, std::vector<int64_t>{int64_t(5), int64_t(6)}}}, {int64_t(5), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(4), int64_t(6)}, std::vector<int64_t>{int64_t(6), int64_t(9)}}}, {int64_t(6), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(14)}, std::vector<int64_t>{int64_t(3), int64_t(2)}, std::vector<int64_t>{int64_t(5), int64_t(9)}}}};
std::map<int64_t, std::vector<int64_t>> g_topo = std::map<int64_t, std::any>{{int64_t(1), std::any(std::vector<int64_t>{int64_t(2), int64_t(3)})}, {int64_t(2), std::any(std::vector<int64_t>{int64_t(4)})}, {int64_t(3), std::any(std::vector<int64_t>{int64_t(4)})}, {int64_t(4), std::any(std::vector<int64_t>{})}};
std::vector<std::vector<int64_t>> matrix = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(5), int64_t(9), int64_t(100000)}, std::vector<int64_t>{int64_t(100000), int64_t(0), int64_t(2), int64_t(8)}, std::vector<int64_t>{int64_t(100000), int64_t(100000), int64_t(0), int64_t(7)}, std::vector<int64_t>{int64_t(4), int64_t(100000), int64_t(100000), int64_t(0)}};
std::map<int64_t, std::vector<std::vector<int64_t>>> g_prim = std::map<int64_t, std::vector<std::vector<int64_t>>>{{int64_t(1), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(3), int64_t(3)}}}, {int64_t(2), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(3), int64_t(1)}, std::vector<int64_t>{int64_t(4), int64_t(6)}}}, {int64_t(3), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(4), int64_t(2)}}}, {int64_t(4), std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(6)}, std::vector<int64_t>{int64_t(3), int64_t(2)}}}};
std::vector<std::vector<int64_t>> edges_kruskal = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(2)}, std::vector<int64_t>{int64_t(1), int64_t(3), int64_t(2)}, std::vector<int64_t>{int64_t(3), int64_t(4), int64_t(1)}};
std::map<int64_t, std::vector<int64_t>> g_iso = std::map<int64_t, std::any>{{int64_t(1), std::any(std::vector<int64_t>{int64_t(2), int64_t(3)})}, {int64_t(2), std::any(std::vector<int64_t>{int64_t(1), int64_t(3)})}, {int64_t(3), std::any(std::vector<int64_t>{int64_t(1), int64_t(2)})}, {int64_t(4), std::any(std::vector<int64_t>{})}};
std::vector<int64_t> iso = find_isolated_nodes(g_iso, std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(4)});

void dfs(const std::map<int64_t, std::vector<int64_t>>& g, int64_t s) {
    std::map<int64_t, bool> visited = std::map<int64_t, bool>{};
    std::vector<int64_t> stack = {};
    visited[s] = true;
    stack = ([&]{ auto __tmp = stack; __tmp.push_back(s); return __tmp; }());
    std::cout << s;
    std::cout << std::endl;
    while ((stack.size() > int64_t(0))) {
        int64_t u = stack[static_cast<size_t>((stack.size() - int64_t(1)))];
        bool found = false;
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(g)) {
            auto v = __p.first;
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, v)) {
                visited[static_cast<size_t>(v)] = true;
                stack = ([&]{ auto __tmp = stack; __tmp.push_back((int64_t)v); return __tmp; }());
                std::cout << v;
                std::cout << std::endl;
                found = true;
                break;
            }
        }
        if (!found) {
            stack = _slice(stack, int64_t(0), (stack.size() - int64_t(1)));
        }
    }
}

void bfs(const std::map<int64_t, std::vector<int64_t>>& g, int64_t s) {
    std::map<int64_t, bool> visited = std::map<int64_t, bool>{};
    std::vector<int64_t> q = {};
    visited[s] = true;
    q = ([&]{ auto __tmp = q; __tmp.push_back(s); return __tmp; }());
    std::cout << s;
    std::cout << std::endl;
    while ((q.size() > int64_t(0))) {
        int64_t u = q[int64_t(0)];
        q = _slice(q, int64_t(1), q.size());
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(g)) {
            auto v = __p.first;
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, v)) {
                visited[static_cast<size_t>(v)] = true;
                q = ([&]{ auto __tmp = q; __tmp.push_back((int64_t)v); return __tmp; }());
                std::cout << v;
                std::cout << std::endl;
            }
        }
    }
}

std::vector<int64_t> sort_ints(const std::vector<int64_t>& a) {
    std::vector<int64_t> arr = a;
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        int64_t j = int64_t(0);
        while ((j < ((arr.size() - i) - int64_t(1)))) {
            if ((arr[j] > arr[(j + int64_t(1))])) {
                int64_t tmp = arr[j];
                arr[j] = arr[(j + int64_t(1))];
                arr[(j + int64_t(1))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

void dijkstra(const std::map<int64_t, std::vector<std::vector<int64_t>>>& g, int64_t s) {
    std::map<int64_t, int64_t> dist = std::map<int64_t, int64_t>{};
    dist[s] = int64_t(0);
    std::map<int64_t, int64_t> path = std::map<int64_t, int64_t>{};
    path[s] = int64_t(0);
    std::vector<int64_t> known = {};
    std::vector<int64_t> keys = std::vector<int64_t>{s};
    while ((known.size() < keys.size())) {
        int64_t mini = int64_t(100000);
        int64_t u = -int64_t(1);
        int64_t i = int64_t(0);
        while ((i < keys.size())) {
            int64_t k = keys[i];
            int64_t d = ([&](const auto& __m){ auto __it = __m.find(k); return __it != __m.end() ? __it->second : 0; })(dist);
            if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(known, k) && (d < mini))) {
                mini = d;
                u = k;
            }
            i = (i + int64_t(1));
        }
        known = ([&]{ auto __tmp = known; __tmp.push_back(u); return __tmp; }());
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::vector<std::vector<int64_t>>{}; })(g)) {
            auto e = __p.first;
            auto v = e[int64_t(0)];
            auto w = e[int64_t(1)];
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(keys, v)) {
                keys = ([&]{ auto __tmp = keys; __tmp.push_back((int64_t)v); return __tmp; }());
            }
            std::map<int64_t, int64_t> alt = (([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : 0; })(dist) + w);
            int64_t cur = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist, v) ? ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(dist) : int64_t(100000));
            if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(known, v) && (alt < cur))) {
                dist[static_cast<size_t>(v)] = alt;
                path[static_cast<size_t>(v)] = u;
            }
        }
    }
    std::vector<int64_t> ordered = sort_ints(keys);
    int64_t idx = int64_t(0);
    while ((idx < ordered.size())) {
        int64_t k = ordered[idx];
        if ((k != s)) {
            std::cout << ([&](const auto& __m){ auto __it = __m.find(k); return __it != __m.end() ? __it->second : 0; })(dist);
            std::cout << std::endl;
        }
        idx = (idx + int64_t(1));
    }
}

void topo(const std::map<int64_t, std::vector<int64_t>>& g, int64_t n) {
    std::vector<int64_t> ind = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        ind = ([&]{ auto __tmp = ind; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t node = int64_t(1);
    while ((node <= n)) {
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(node); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(g)) {
            auto v = __p.first;
            ind[static_cast<size_t>(v)] = (ind[static_cast<size_t>(v)] + int64_t(1));
        }
        node = (node + int64_t(1));
    }
    std::vector<int64_t> q = {};
    int64_t j = int64_t(1);
    while ((j <= n)) {
        if ((ind[j] == int64_t(0))) {
            q = ([&]{ auto __tmp = q; __tmp.push_back(j); return __tmp; }());
        }
        j = (j + int64_t(1));
    }
    while ((q.size() > int64_t(0))) {
        int64_t v = q[int64_t(0)];
        q = _slice(q, int64_t(1), q.size());
        std::cout << v;
        std::cout << std::endl;
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(g)) {
            auto w = __p.first;
            ind[static_cast<size_t>(w)] = (ind[static_cast<size_t>(w)] - int64_t(1));
            if ((ind[static_cast<size_t>(w)] == int64_t(0))) {
                q = ([&]{ auto __tmp = q; __tmp.push_back((int64_t)w); return __tmp; }());
            }
        }
    }
}

void floyd(const std::vector<std::vector<int64_t>>& a) {
    int n = a.size();
    std::vector<std::vector<int64_t>> dist = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(a[i][j]); return __tmp; }());
            j = (j + int64_t(1));
        }
        dist = ([&]{ auto __tmp = dist; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t k = int64_t(0);
    while ((k < n)) {
        int64_t ii = int64_t(0);
        while ((ii < n)) {
            int64_t jj = int64_t(0);
            while ((jj < n)) {
                if ((dist[ii][jj] > (dist[ii][k] + dist[k][jj]))) {
                    dist[ii][jj] = (dist[ii][k] + dist[k][jj]);
                }
                jj = (jj + int64_t(1));
            }
            ii = (ii + int64_t(1));
        }
        k = (k + int64_t(1));
    }
    { auto __tmp = dist; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;     __ss << __tmp[i];
 std::cout << __ss.str(); }; } std::cout << "]"; }
    std::cout << std::endl;
}

int64_t prim(const std::map<int64_t, std::vector<std::vector<int64_t>>>& g, int64_t s, int64_t n) {
    std::map<int64_t, int64_t> dist = std::map<int64_t, int64_t>{};
    dist[s] = int64_t(0);
    std::vector<int64_t> known = {};
    std::vector<int64_t> keys = std::vector<int64_t>{s};
    int64_t total = int64_t(0);
    while ((known.size() < n)) {
        int64_t mini = int64_t(100000);
        int64_t u = -int64_t(1);
        int64_t i = int64_t(0);
        while ((i < keys.size())) {
            int64_t k = keys[i];
            int64_t d = ([&](const auto& __m){ auto __it = __m.find(k); return __it != __m.end() ? __it->second : 0; })(dist);
            if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(known, k) && (d < mini))) {
                mini = d;
                u = k;
            }
            i = (i + int64_t(1));
        }
        known = ([&]{ auto __tmp = known; __tmp.push_back(u); return __tmp; }());
        total = (total + mini);
        for (const auto& __p : ([&](const auto& __m){ auto __it = __m.find(u); return __it != __m.end() ? __it->second : std::vector<std::vector<int64_t>>{}; })(g)) {
            auto e = __p.first;
            auto v = e[int64_t(0)];
            auto w = e[int64_t(1)];
            if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(keys, v)) {
                keys = ([&]{ auto __tmp = keys; __tmp.push_back((int64_t)v); return __tmp; }());
            }
            int64_t cur = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist, v) ? ([&](const auto& __m){ auto __it = __m.find(v); return __it != __m.end() ? __it->second : 0; })(dist) : int64_t(100000));
            if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(known, v) && (w < cur))) {
                dist[static_cast<size_t>(v)] = w;
            }
        }
    }
    return total;
}

std::vector<std::vector<int64_t>> sort_edges(const std::vector<std::vector<int64_t>>& edges) {
    std::vector<std::vector<int64_t>> es = edges;
    int64_t i = int64_t(0);
    while ((i < es.size())) {
        int64_t j = int64_t(0);
        while ((j < ((es.size() - i) - int64_t(1)))) {
            if ((es[j][int64_t(2)] > es[(j + int64_t(1))][int64_t(2)])) {
                std::vector<int64_t> tmp = es[j];
                es[j] = es[(j + int64_t(1))];
                es[(j + int64_t(1))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return es;
}

int64_t find_parent(const std::vector<int64_t>& parent, int64_t x) {
    int64_t r = x;
    while ((parent[r] != r)) {
        r = parent[r];
    }
    return r;
}

void union_parent(std::vector<int64_t>& parent, int64_t a, int64_t b) {
    parent[a] = b;
}

int64_t kruskal(const std::vector<std::vector<int64_t>>& edges, int64_t n) {
    std::vector<std::vector<int64_t>> es = sort_edges(edges);
    std::vector<int64_t> parent = {};
    int64_t i = int64_t(0);
    while ((i <= n)) {
        parent = ([&]{ auto __tmp = parent; __tmp.push_back(i); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t total = int64_t(0);
    int64_t count = int64_t(0);
    int64_t idx = int64_t(0);
    while (((count < (n - int64_t(1))) && (idx < es.size()))) {
        std::vector<int64_t> e = es[idx];
        idx = (idx + int64_t(1));
        int64_t u = e[int64_t(0)];
        int64_t v = e[int64_t(1)];
        int64_t w = e[int64_t(2)];
        int64_t ru = find_parent(parent, u);
        int64_t rv = find_parent(parent, v);
        if ((ru != rv)) {
            union_parent(parent, ru, rv);
            total = (total + w);
            count = (count + int64_t(1));
        }
    }
    return total;
}

std::vector<int64_t> find_isolated_nodes(const std::map<int64_t, std::vector<int64_t>>& g, const std::vector<int64_t>& nodes) {
    std::vector<int64_t> isolated = {};
    for (int64_t node : nodes) {
        if ((([&](const auto& __m){ auto __it = __m.find(node); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(g).size() == int64_t(0))) {
            isolated = ([&]{ auto __tmp = isolated; __tmp.push_back(node); return __tmp; }());
        }
    }
    return isolated;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        dfs(g_dfs, int64_t(1));
        bfs(g_bfs, int64_t(1));
        dijkstra(g_weighted, int64_t(1));
        topo(g_topo, int64_t(4));
        floyd(matrix);
        std::cout << prim(g_prim, int64_t(1), int64_t(4));
        std::cout << std::endl;
        std::cout << kruskal(edges_kruskal, int64_t(4));
        std::cout << std::endl;
        { auto __tmp = iso; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
