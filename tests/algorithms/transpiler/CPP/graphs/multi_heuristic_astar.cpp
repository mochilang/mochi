// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:21:56 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Pos;
struct PQNode;
struct PQPopResult;

std::ostream& operator<<(std::ostream&, const Pos&);
std::ostream& operator<<(std::ostream&, const PQNode&);
std::ostream& operator<<(std::ostream&, const PQPopResult&);


struct Pos {
    int64_t x;
    int64_t y;
    auto operator<=>(const Pos&) const = default;
};

struct PQNode {
    Pos pos;
    double pri;
    auto operator<=>(const PQNode&) const = default;
};

struct PQPopResult {
    std::vector<PQNode> pq;
    PQNode node;
    auto operator<=>(const PQPopResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Pos& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PQNode& v) {
    os << '{' << "'pos': "<< v.pos
 << ", " << "'pri': "<< std::fixed << std::setprecision(1) << v.pri
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PQPopResult& v) {
    os << '{' << "'pq': "<< "["; for(size_t i=0;i<v.pq.size();++i){ if(i>0) os << ", "; os << v.pq[i]; } os << "]"
 << ", " << "'node': "<< v.node
 << '}';
    return os;
}

bool pos_equal(const Pos& a, const Pos& b);
std::string pos_key(const Pos& p);
double sqrtApprox(double x);
double consistent_heuristic(const Pos& p, const Pos& goal);
int64_t iabs(int64_t x);
double heuristic_1(const Pos& p, const Pos& goal);
double heuristic_2(const Pos& p, const Pos& goal);
double heuristic(int64_t i, const Pos& p, const Pos& goal);
double key_fn(const Pos& start, int64_t i, const Pos& goal, const std::map<std::string, double>& g_func);
bool valid(const Pos& p);
bool in_blocks(const Pos& p);
std::vector<PQNode> pq_put(std::vector<PQNode>& pq, const Pos& node, double pri);
double pq_minkey(const std::vector<PQNode>& pq);
PQPopResult pq_pop_min(const std::vector<PQNode>& pq);
std::vector<PQNode> pq_remove(const std::vector<PQNode>& pq, const Pos& node);
std::vector<Pos> reconstruct(const std::map<std::string, Pos>& back_pointer, const Pos& goal, const Pos& start);
std::vector<Pos> neighbours(const Pos& p);
void multi_a_star(const Pos& start, const Pos& goal, int64_t n_heuristic);
int main();

double W1 = 1.0;
double W2 = 1.0;
int64_t n = int64_t(20);
int64_t n_heuristic = int64_t(3);
double INF = 1000000000.0;
int64_t t = int64_t(1);
std::vector<Pos> blocks = std::vector<Pos>{Pos{.x = int64_t(0), .y = int64_t(1)}, Pos{.x = int64_t(1), .y = int64_t(1)}, Pos{.x = int64_t(2), .y = int64_t(1)}, Pos{.x = int64_t(3), .y = int64_t(1)}, Pos{.x = int64_t(4), .y = int64_t(1)}, Pos{.x = int64_t(5), .y = int64_t(1)}, Pos{.x = int64_t(6), .y = int64_t(1)}, Pos{.x = int64_t(7), .y = int64_t(1)}, Pos{.x = int64_t(8), .y = int64_t(1)}, Pos{.x = int64_t(9), .y = int64_t(1)}, Pos{.x = int64_t(10), .y = int64_t(1)}, Pos{.x = int64_t(11), .y = int64_t(1)}, Pos{.x = int64_t(12), .y = int64_t(1)}, Pos{.x = int64_t(13), .y = int64_t(1)}, Pos{.x = int64_t(14), .y = int64_t(1)}, Pos{.x = int64_t(15), .y = int64_t(1)}, Pos{.x = int64_t(16), .y = int64_t(1)}, Pos{.x = int64_t(17), .y = int64_t(1)}, Pos{.x = int64_t(18), .y = int64_t(1)}, Pos{.x = int64_t(19), .y = int64_t(1)}};
Pos start = Pos{.x = int64_t(0), .y = int64_t(0)};
Pos goal = Pos{};

bool pos_equal(const Pos& a, const Pos& b) {
    return ((a.x == b.x) && (a.y == b.y));
}

std::string pos_key(const Pos& p) {
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << p.x; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.y; return ss.str(); }()));
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double consistent_heuristic(const Pos& p, const Pos& goal) {
    double dx = (double)((p.x - goal.x));
    double dy = (double)((p.y - goal.y));
    return sqrtApprox(((dx * dx) + (dy * dy)));
}

int64_t iabs(int64_t x) {
    if ((x < int64_t(0))) {
        return -x;
    }
    return x;
}

double heuristic_1(const Pos& p, const Pos& goal) {
    return (double)((iabs((p.x - goal.x)) + iabs((p.y - goal.y))));
}

double heuristic_2(const Pos& p, const Pos& goal) {
    double h = consistent_heuristic(p, goal);
    return ((double)(h) / ((double)(t)));
}

double heuristic(int64_t i, const Pos& p, const Pos& goal) {
    if ((i == int64_t(0))) {
        return consistent_heuristic(p, goal);
    }
    if ((i == int64_t(1))) {
        return heuristic_1(p, goal);
    }
    return heuristic_2(p, goal);
}

double key_fn(const Pos& start, int64_t i, const Pos& goal, const std::map<std::string, double>& g_func) {
    double g = ([&](const auto& __m){ auto __it = __m.find(pos_key(start)); if (__it == __m.end()) return double{}; return __it->second; })(g_func);
    return (g + (W1 * heuristic(i, start, goal)));
}

bool valid(const Pos& p) {
    if (((p.x < int64_t(0)) || (p.x > (n - int64_t(1))))) {
        return false;
    }
    if (((p.y < int64_t(0)) || (p.y > (n - int64_t(1))))) {
        return false;
    }
    return true;
}

bool in_blocks(const Pos& p) {
    int64_t i = int64_t(0);
    while ((i < blocks.size())) {
        if (pos_equal(_index(blocks, i), p)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<PQNode> pq_put(std::vector<PQNode>& pq, const Pos& node, double pri) {
    bool updated = false;
    int64_t i = int64_t(0);
    while ((i < pq.size())) {
        if (pos_equal(_index(pq, i).pos, node)) {
            if ((pri < _index(pq, i).pri)) {
                pq[static_cast<size_t>(i)] = PQNode{.pos = node, .pri = pri};
            }
            updated = true;
        }
        i = (i + int64_t(1));
    }
    if (!updated) {
        pq = ([&]{ auto __tmp = pq; __tmp.push_back(PQNode{.pos = node, .pri = pri}); return __tmp; }());
    }
    return pq;
}

double pq_minkey(const std::vector<PQNode>& pq) {
    if ((pq.size() == int64_t(0))) {
        return INF;
    }
    PQNode first = _index(pq, int64_t(0));
    double m = first.pri;
    int64_t i = int64_t(1);
    while ((i < pq.size())) {
        PQNode item = _index(pq, i);
        if ((item.pri < m)) {
            m = item.pri;
        }
        i = (i + int64_t(1));
    }
    return m;
}

PQPopResult pq_pop_min(const std::vector<PQNode>& pq) {
    PQNode best = _index(pq, int64_t(0));
    int64_t idx = int64_t(0);
    int64_t i = int64_t(1);
    while ((i < pq.size())) {
        if ((_index(pq, i).pri < best.pri)) {
            best = _index(pq, i);
            idx = i;
        }
        i = (i + int64_t(1));
    }
    std::vector<PQNode> new_pq = {};
    i = int64_t(0);
    while ((i < pq.size())) {
        if ((i != idx)) {
            new_pq = ([&]{ auto __tmp = new_pq; __tmp.push_back(_index(pq, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return PQPopResult{.pq = new_pq, .node = best};
}

std::vector<PQNode> pq_remove(const std::vector<PQNode>& pq, const Pos& node) {
    std::vector<PQNode> new_pq = {};
    int64_t i = int64_t(0);
    while ((i < pq.size())) {
        if (!pos_equal(_index(pq, i).pos, node)) {
            new_pq = ([&]{ auto __tmp = new_pq; __tmp.push_back(_index(pq, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return new_pq;
}

std::vector<Pos> reconstruct(const std::map<std::string, Pos>& back_pointer, const Pos& goal, const Pos& start) {
    std::vector<Pos> path = {};
    Pos current = goal;
    std::string key = pos_key(current);
    path = ([&]{ auto __tmp = path; __tmp.push_back(current); return __tmp; }());
    while (!pos_equal(current, start)) {
        current = ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return Pos{}; return __it->second; })(back_pointer);
        key = pos_key(current);
        path = ([&]{ auto __tmp = path; __tmp.push_back(current); return __tmp; }());
    }
    std::vector<Pos> rev = {};
    int64_t i = (path.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        rev = ([&]{ auto __tmp = rev; __tmp.push_back(_index(path, i)); return __tmp; }());
        i = (i - int64_t(1));
    }
    return rev;
}

std::vector<Pos> neighbours(const Pos& p) {
    Pos left = Pos{.x = (p.x - int64_t(1)), .y = p.y};
    Pos right = Pos{.x = (p.x + int64_t(1)), .y = p.y};
    Pos up = Pos{.x = p.x, .y = (p.y + int64_t(1))};
    Pos down = Pos{.x = p.x, .y = (p.y - int64_t(1))};
    return std::vector<Pos>{left, right, up, down};
}

void multi_a_star(const Pos& start, const Pos& goal, int64_t n_heuristic) {
    std::map<std::string, double> g_function = {};
    std::map<std::string, Pos> back_pointer = {};
    std::map<std::string, bool> visited = {};
    std::vector<std::vector<PQNode>> open_list = {};
    g_function[pos_key(start)] = 0.0;
    g_function[pos_key(goal)] = INF;
    back_pointer[pos_key(start)] = Pos{.x = -int64_t(1), .y = -int64_t(1)};
    back_pointer[pos_key(goal)] = Pos{.x = -int64_t(1), .y = -int64_t(1)};
    visited[pos_key(start)] = true;
    int64_t i = int64_t(0);
    while ((i < n_heuristic)) {
        open_list = ([&]{ auto __tmp = open_list; __tmp.push_back(std::vector<PQNode>{}); return __tmp; }());
        double pri = key_fn(start, i, goal, g_function);
        open_list[static_cast<size_t>(i)] = ([&]{ auto __arg0 = _index(open_list, i); return pq_put(__arg0, start, pri); }());
        i = (i + int64_t(1));
    }
    while ((pq_minkey(_index(open_list, int64_t(0))) < INF)) {
        int64_t chosen = int64_t(0);
        i = int64_t(1);
        while ((i < n_heuristic)) {
            if ((pq_minkey(_index(open_list, i)) <= (W2 * pq_minkey(_index(open_list, int64_t(0)))))) {
                chosen = i;
                break;
            }
            i = (i + int64_t(1));
        }
        if ((chosen != int64_t(0))) {
            t = (t + int64_t(1));
        }
        PQPopResult pair = pq_pop_min(_index(open_list, chosen));
        open_list[static_cast<size_t>(chosen)] = pair.pq;
        PQNode current = pair.node;
        i = int64_t(0);
        while ((i < n_heuristic)) {
            if ((i != chosen)) {
                open_list[static_cast<size_t>(i)] = pq_remove(_index(open_list, i), current.pos);
            }
            i = (i + int64_t(1));
        }
        std::string ckey = pos_key(current.pos);
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(visited, ckey)) {
            continue;
        }
        visited[ckey] = true;
        if (pos_equal(current.pos, goal)) {
            std::vector<Pos> path = reconstruct(back_pointer, goal, start);
            int64_t j = int64_t(0);
            while ((j < path.size())) {
                Pos p = _index(path, j);
                std::cout << ((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.x; return ss.str(); }())) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.y; return ss.str(); }())) + std::string(")"));
                std::cout << std::endl;
                j = (j + int64_t(1));
            }
            return;
        }
        std::vector<Pos> neighs = neighbours(current.pos);
        int64_t k = int64_t(0);
        while ((k < neighs.size())) {
            Pos nb = _index(neighs, k);
            if ((valid(nb) && (in_blocks(nb) == false))) {
                std::string nkey = pos_key(nb);
                double tentative = (([&](const auto& __m){ auto __it = __m.find(ckey); if (__it == __m.end()) return double{}; return __it->second; })(g_function) + 1.0);
                if ((!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(g_function, nkey) || (tentative < ([&](const auto& __m){ auto __it = __m.find(nkey); if (__it == __m.end()) return double{}; return __it->second; })(g_function)))) {
                    g_function[nkey] = tentative;
                    back_pointer[nkey] = current.pos;
                    i = int64_t(0);
                    while ((i < n_heuristic)) {
                        double pri2 = (tentative + (W1 * heuristic(i, nb, goal)));
                        open_list[static_cast<size_t>(i)] = ([&]{ auto __arg0 = _index(open_list, i); return pq_put(__arg0, nb, pri2); }());
                        i = (i + int64_t(1));
                    }
                }
            }
            k = (k + int64_t(1));
        }
    }
    std::cout << std::string("No path found to goal");
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        goal = Pos{.x = (n - int64_t(1)), .y = (n - int64_t(1))};
        multi_a_star(start, goal, n_heuristic);
    }
    return 0;
}
