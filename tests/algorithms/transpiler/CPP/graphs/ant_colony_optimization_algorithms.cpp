// Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:17:50 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <map>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double sqrtApprox(double x);
double rand_float();
double pow_float(double base, double exp);
double distance(const std::vector<int64_t>& city1, const std::vector<int64_t>& city2);
int64_t choose_weighted(const std::vector<int64_t>& options, const std::vector<double>& weights);
int64_t city_select(const std::vector<std::vector<double>>& pheromone, int64_t current, const std::vector<int64_t>& unvisited, double alpha, double beta, const std::map<int64_t, std::vector<int64_t>>& cities);
std::vector<std::vector<double>> pheromone_update(std::vector<std::vector<double>>& pheromone, const std::map<int64_t, std::vector<int64_t>>& cities, double evaporation, const std::vector<std::vector<int64_t>>& ants_route, double q);
std::vector<int64_t> remove_value(const std::vector<int64_t>& lst, int64_t val);
void ant_colony(const std::map<int64_t, std::vector<int64_t>>& cities, int64_t ants_num, int64_t iterations, double evaporation, double alpha, double beta, double q);
int main();

std::map<int64_t, std::vector<int64_t>> cities = std::map<int64_t, std::vector<int64_t>>{{int64_t(0), std::vector<int64_t>{int64_t(0), int64_t(0)}}, {int64_t(1), std::vector<int64_t>{int64_t(0), int64_t(5)}}, {int64_t(2), std::vector<int64_t>{int64_t(3), int64_t(8)}}, {int64_t(3), std::vector<int64_t>{int64_t(8), int64_t(10)}}, {int64_t(4), std::vector<int64_t>{int64_t(12), int64_t(8)}}, {int64_t(5), std::vector<int64_t>{int64_t(12), int64_t(4)}}, {int64_t(6), std::vector<int64_t>{int64_t(8), int64_t(0)}}, {int64_t(7), std::vector<int64_t>{int64_t(6), int64_t(2)}}};

double sqrtApprox(double x) {
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double rand_float() {
    return ((double)((double)((_now() % int64_t(1000000)))) / (1000000.0));
}

double pow_float(double base, double exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    int64_t e = (int64_t)(exp);
    while ((i < e)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

double distance(const std::vector<int64_t>& city1, const std::vector<int64_t>& city2) {
    double dx = (double)((city1[int64_t(0)] - city2[int64_t(0)]));
    double dy = (double)((city1[int64_t(1)] - city2[int64_t(1)]));
    return sqrtApprox(((dx * dx) + (dy * dy)));
}

int64_t choose_weighted(const std::vector<int64_t>& options, const std::vector<double>& weights) {
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < weights.size())) {
        total = (total + weights[i]);
        i = (i + int64_t(1));
    }
    double r = (rand_float() * total);
    double accum = 0.0;
    i = int64_t(0);
    while ((i < weights.size())) {
        accum = (accum + weights[i]);
        if ((r <= accum)) {
            return options[i];
        }
        i = (i + int64_t(1));
    }
    return options[static_cast<size_t>((options.size() - int64_t(1)))];
}

int64_t city_select(const std::vector<std::vector<double>>& pheromone, int64_t current, const std::vector<int64_t>& unvisited, double alpha, double beta, const std::map<int64_t, std::vector<int64_t>>& cities) {
    std::vector<double> probs = {};
    int64_t i = int64_t(0);
    while ((i < unvisited.size())) {
        int64_t city = unvisited[i];
        double dist = distance(([&](const auto& __m){ auto __it = __m.find(city); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(cities), ([&](const auto& __m){ auto __it = __m.find(current); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(cities));
        double trail = pheromone[city][current];
        double prob = (pow_float(trail, alpha) * pow_float(((double)(1.0) / (dist)), beta));
        probs = ([&]{ auto __tmp = probs; __tmp.push_back(prob); return __tmp; }());
        i = (i + int64_t(1));
    }
    return choose_weighted(unvisited, probs);
}

std::vector<std::vector<double>> pheromone_update(std::vector<std::vector<double>>& pheromone, const std::map<int64_t, std::vector<int64_t>>& cities, double evaporation, const std::vector<std::vector<int64_t>>& ants_route, double q) {
    int n = pheromone.size();
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t j = int64_t(0);
        while ((j < n)) {
            pheromone[i][j] = (pheromone[i][j] * evaporation);
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    int64_t a = int64_t(0);
    while ((a < ants_route.size())) {
        std::vector<int64_t> route = ants_route[a];
        double total = 0.0;
        int64_t r = int64_t(0);
        while ((r < (route.size() - int64_t(1)))) {
            total = (total + distance(([&](const auto& __m){ auto __it = __m.find(route[r]); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(cities), ([&](const auto& __m){ auto __it = __m.find(route[(r + int64_t(1))]); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(cities)));
            r = (r + int64_t(1));
        }
        double delta = ((double)(q) / (total));
        r = int64_t(0);
        while ((r < (route.size() - int64_t(1)))) {
            int64_t u = route[r];
            int64_t v = route[(r + int64_t(1))];
            pheromone[u][v] = (pheromone[u][v] + delta);
            pheromone[v][u] = pheromone[u][v];
            r = (r + int64_t(1));
        }
        a = (a + int64_t(1));
    }
    return pheromone;
}

std::vector<int64_t> remove_value(const std::vector<int64_t>& lst, int64_t val) {
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if ((lst[i] != val)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(lst[i]); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

void ant_colony(const std::map<int64_t, std::vector<int64_t>>& cities, int64_t ants_num, int64_t iterations, double evaporation, double alpha, double beta, double q) {
    int n = cities.size();
    std::vector<std::vector<double>> pheromone = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(1.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        pheromone = ([&]{ auto __tmp = pheromone; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> best_path = {};
    double best_distance = 1000000000.0;
    int64_t iter = int64_t(0);
    while ((iter < iterations)) {
        std::vector<std::vector<int64_t>> ants_route = {};
        int64_t k = int64_t(0);
        while ((k < ants_num)) {
            std::vector<int64_t> route = std::vector<int64_t>{int64_t(0)};
            std::vector<int64_t> unvisited = {};
            for (const auto& __p : cities) {
                auto key = __p.first;
                if ((key != int64_t(0))) {
                    unvisited = ([&]{ auto __tmp = unvisited; __tmp.push_back(key); return __tmp; }());
                }
            }
            int64_t current = int64_t(0);
            while ((unvisited.size() > int64_t(0))) {
                int64_t next_city = city_select(pheromone, current, unvisited, alpha, beta, cities);
                route = ([&]{ auto __tmp = route; __tmp.push_back(next_city); return __tmp; }());
                unvisited = remove_value(unvisited, next_city);
                current = next_city;
            }
            route = ([&]{ auto __tmp = route; __tmp.push_back(int64_t(0)); return __tmp; }());
            ants_route = ([&]{ auto __tmp = ants_route; __tmp.push_back(route); return __tmp; }());
            k = (k + int64_t(1));
        }
        pheromone = pheromone_update(pheromone, cities, evaporation, ants_route, q);
        int64_t a = int64_t(0);
        while ((a < ants_route.size())) {
            std::vector<int64_t> route = ants_route[a];
            double dist = 0.0;
            int64_t r = int64_t(0);
            while ((r < (route.size() - int64_t(1)))) {
                dist = (dist + distance(([&](const auto& __m){ auto __it = __m.find(route[r]); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(cities), ([&](const auto& __m){ auto __it = __m.find(route[(r + int64_t(1))]); return __it != __m.end() ? __it->second : std::vector<int64_t>{}; })(cities)));
                r = (r + int64_t(1));
            }
            if ((dist < best_distance)) {
                best_distance = dist;
                best_path = route;
            }
            a = (a + int64_t(1));
        }
        iter = (iter + int64_t(1));
    }
    std::cout << (std::string("best_path = ") + ([&]{ std::ostringstream ss; { auto __tmp = best_path; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("best_distance = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << best_distance; return ss.str(); }()));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        ant_colony(cities, int64_t(10), int64_t(20), 0.7, 1.0, 5.0, 10.0);
    }
    return 0;
}
