// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:12:33 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct ExpandResult;
struct SearchResult;

std::ostream& operator<<(std::ostream&, const ExpandResult&);
std::ostream& operator<<(std::ostream&, const SearchResult&);


struct ExpandResult {
    std::vector<int64_t> queue;
    int64_t head;
    std::map<int64_t, int64_t> parents;
    std::map<int64_t, bool> visited;
    int64_t intersection;
    bool found;
    auto operator<=>(const ExpandResult&) const = default;
};

struct SearchResult {
    std::vector<int64_t> path;
    bool ok;
    auto operator<=>(const SearchResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const ExpandResult& v) {
    os << '{' << "'queue': "<< "["; for(size_t i=0;i<v.queue.size();++i){ if(i>0) os << ", "; os << v.queue[i]; } os << "]"
 << ", " << "'head': "<< v.head
 << ", " << "'parents': "<< "{"; bool first_2=true; for(const auto& p: v.parents){ if(!first_2) os << ", "; first_2=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'visited': "<< "{"; bool first_3=true; for(const auto& p: v.visited){ if(!first_3) os << ", "; first_3=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'intersection': "<< v.intersection
 << ", " << "'found': "<< v.found
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const SearchResult& v) {
    os << '{' << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << ", " << "'ok': "<< v.ok
 << '}';
    return os;
}

ExpandResult expand_search(const std::map<int64_t, std::vector<int64_t>>& graph, const std::vector<int64_t>& queue, int64_t& head, const std::map<int64_t, int64_t>& parents, const std::map<int64_t, bool>& visited, const std::map<int64_t, bool>& opposite_visited);
std::vector<int64_t> construct_path(int64_t current, const std::map<int64_t, int64_t>& parents);
std::vector<int64_t> reverse_list(const std::vector<int64_t>& xs);
SearchResult bidirectional_search(const std::map<int64_t, std::vector<int64_t>>& g, int64_t start, int64_t goal);
bool is_edge(const std::map<int64_t, std::vector<int64_t>>& g, int64_t u, int64_t v);
bool path_exists(const std::map<int64_t, std::vector<int64_t>>& g, const std::vector<int64_t>& path);
void print_path(const std::map<int64_t, std::vector<int64_t>>& g, int64_t s, int64_t t);
int main();

ExpandResult expand_search(const std::map<int64_t, std::vector<int64_t>>& graph, const std::vector<int64_t>& queue, int64_t& head, const std::map<int64_t, int64_t>& parents, const std::map<int64_t, bool>& visited, const std::map<int64_t, bool>& opposite_visited) {
    if ((head >= queue.size())) {
        return ExpandResult{.queue = queue, .head = head, .parents = parents, .visited = visited, .intersection = (int64_t(0) - int64_t(1)), .found = false};
    }
    int64_t current = _index(queue, head);
    head = (head + int64_t(1));
    std::vector<int64_t> neighbors = ([&](const auto& __m){ auto __it = __m.find(current); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(graph);
    std::vector<int64_t> q = queue;
    std::map<int64_t, int64_t> p = parents;
    std::map<int64_t, bool> v = visited;
    int64_t i = int64_t(0);
    while ((i < neighbors.size())) {
        int64_t neighbor = _index(neighbors, i);
        if (([&](const auto& __m){ auto __it = __m.find(neighbor); if (__it == __m.end()) return bool{}; return __it->second; })(v)) {
            i = (i + int64_t(1));
            continue;
        }
        v[static_cast<size_t>(neighbor)] = true;
        p[static_cast<size_t>(neighbor)] = current;
        q = ([&]{ auto __tmp = q; __tmp.push_back(neighbor); return __tmp; }());
        if (([&](const auto& __m){ auto __it = __m.find(neighbor); if (__it == __m.end()) return bool{}; return __it->second; })(opposite_visited)) {
            return ExpandResult{.queue = q, .head = head, .parents = p, .visited = v, .intersection = neighbor, .found = true};
        }
        i = (i + int64_t(1));
    }
    return ExpandResult{.queue = q, .head = head, .parents = p, .visited = v, .intersection = (int64_t(0) - int64_t(1)), .found = false};
}

std::vector<int64_t> construct_path(int64_t current, const std::map<int64_t, int64_t>& parents) {
    std::vector<int64_t> path = {};
    int64_t node = current;
    while ((node != (int64_t(0) - int64_t(1)))) {
        path = ([&]{ auto __tmp = path; __tmp.push_back(node); return __tmp; }());
        node = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(parents);
    }
    return path;
}

std::vector<int64_t> reverse_list(const std::vector<int64_t>& xs) {
    std::vector<int64_t> res = {};
    int64_t i = xs.size();
    while ((i > int64_t(0))) {
        i = (i - int64_t(1));
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(xs, i)); return __tmp; }());
    }
    return res;
}

SearchResult bidirectional_search(const std::map<int64_t, std::vector<int64_t>>& g, int64_t start, int64_t goal) {
    if ((start == goal)) {
        return SearchResult{.path = std::vector<int64_t>{start}, .ok = true};
    }
    std::map<int64_t, int64_t> forward_parents = {};
    forward_parents[static_cast<size_t>(start)] = (int64_t(0) - int64_t(1));
    std::map<int64_t, int64_t> backward_parents = {};
    backward_parents[static_cast<size_t>(goal)] = (int64_t(0) - int64_t(1));
    std::map<int64_t, bool> forward_visited = {};
    forward_visited[static_cast<size_t>(start)] = true;
    std::map<int64_t, bool> backward_visited = {};
    backward_visited[static_cast<size_t>(goal)] = true;
    std::vector<int64_t> forward_queue = std::vector<int64_t>{start};
    std::vector<int64_t> backward_queue = std::vector<int64_t>{goal};
    int64_t forward_head = int64_t(0);
    int64_t backward_head = int64_t(0);
    int64_t intersection = (int64_t(0) - int64_t(1));
    while ((((forward_head < forward_queue.size()) && (backward_head < backward_queue.size())) && (intersection == (int64_t(0) - int64_t(1))))) {
        ExpandResult res = expand_search(g, forward_queue, forward_head, forward_parents, forward_visited, backward_visited);
        forward_queue = res.queue;
        forward_head = res.head;
        forward_parents = res.parents;
        forward_visited = res.visited;
        if (res.found) {
            intersection = res.intersection;
            break;
        }
        res = expand_search(g, backward_queue, backward_head, backward_parents, backward_visited, forward_visited);
        backward_queue = res.queue;
        backward_head = res.head;
        backward_parents = res.parents;
        backward_visited = res.visited;
        if (res.found) {
            intersection = res.intersection;
            break;
        }
    }
    if ((intersection == (int64_t(0) - int64_t(1)))) {
        return SearchResult{.path = std::vector<int64_t>{}, .ok = false};
    }
    std::vector<int64_t> forward_path = construct_path(intersection, forward_parents);
    forward_path = reverse_list(forward_path);
    int64_t back_start = ([&](const auto& __m){ auto __it = __m.find(intersection); if (__it == __m.end()) return int64_t{}; return __it->second; })(backward_parents);
    std::vector<int64_t> backward_path = construct_path(back_start, backward_parents);
    std::vector<int64_t> result = forward_path;
    int64_t j = int64_t(0);
    while ((j < backward_path.size())) {
        result = ([&]{ auto __tmp = result; __tmp.push_back(_index(backward_path, j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    return SearchResult{.path = result, .ok = true};
}

bool is_edge(const std::map<int64_t, std::vector<int64_t>>& g, int64_t u, int64_t v) {
    std::vector<int64_t> neighbors = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<int64_t>{}; return __it->second; })(g);
    int64_t i = int64_t(0);
    while ((i < neighbors.size())) {
        if ((_index(neighbors, i) == v)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

bool path_exists(const std::map<int64_t, std::vector<int64_t>>& g, const std::vector<int64_t>& path) {
    if ((path.size() == int64_t(0))) {
        return false;
    }
    int64_t i = int64_t(0);
    while (((i + int64_t(1)) < path.size())) {
        if (!is_edge(g, _index(path, i), _index(path, (i + int64_t(1))))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

void print_path(const std::map<int64_t, std::vector<int64_t>>& g, int64_t s, int64_t t) {
    SearchResult res = bidirectional_search(g, s, t);
    if ((res.ok && path_exists(g, res.path))) {
        std::cout << (((((std::string("Path from ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << s; return ss.str(); }())) + std::string(" to ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }())) + std::string(": ")) + ([&]{ std::ostringstream ss; { auto __tmp1 = res.path; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
    } else {
        std::cout << ((((std::string("Path from ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << s; return ss.str(); }())) + std::string(" to ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << t; return ss.str(); }())) + std::string(": None"));
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::map<int64_t, std::vector<int64_t>> graph = {{int64_t(0), std::vector<int64_t>{int64_t(1), int64_t(2)}}, {int64_t(1), std::vector<int64_t>{int64_t(0), int64_t(3), int64_t(4)}}, {int64_t(2), std::vector<int64_t>{int64_t(0), int64_t(5), int64_t(6)}}, {int64_t(3), std::vector<int64_t>{int64_t(1), int64_t(7)}}, {int64_t(4), std::vector<int64_t>{int64_t(1), int64_t(8)}}, {int64_t(5), std::vector<int64_t>{int64_t(2), int64_t(9)}}, {int64_t(6), std::vector<int64_t>{int64_t(2), int64_t(10)}}, {int64_t(7), std::vector<int64_t>{int64_t(3), int64_t(11)}}, {int64_t(8), std::vector<int64_t>{int64_t(4), int64_t(11)}}, {int64_t(9), std::vector<int64_t>{int64_t(5), int64_t(11)}}, {int64_t(10), std::vector<int64_t>{int64_t(6), int64_t(11)}}, {int64_t(11), std::vector<int64_t>{int64_t(7), int64_t(8), int64_t(9), int64_t(10)}}};
        print_path(graph, int64_t(0), int64_t(11));
        print_path(graph, int64_t(5), int64_t(5));
        std::map<int64_t, std::vector<int64_t>> disconnected = {{int64_t(0), std::vector<int64_t>{int64_t(1), int64_t(2)}}, {int64_t(1), std::vector<int64_t>{int64_t(0)}}, {int64_t(2), std::vector<int64_t>{int64_t(0)}}, {int64_t(3), std::vector<int64_t>{int64_t(4)}}, {int64_t(4), std::vector<int64_t>{int64_t(3)}}};
        print_path(disconnected, int64_t(0), int64_t(3));
    }
    return 0;
}
