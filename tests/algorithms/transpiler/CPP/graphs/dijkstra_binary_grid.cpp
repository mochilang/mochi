// Generated by Mochi transpiler v0.10.65 on 2025-08-14 17:15:35 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Point;
struct Result;

std::ostream& operator<<(std::ostream&, const Point&);
std::ostream& operator<<(std::ostream&, const Result&);


struct Point {
    int64_t x;
    int64_t y;
    auto operator<=>(const Point&) const = default;
};

struct Result {
    double distance;
    std::vector<Point> path;
    auto operator<=>(const Result&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Result& v) {
    os << '{' << "'distance': "<< std::fixed << std::setprecision(1) << v.distance
 << ", " << "'path': "<< "["; for(size_t i=0;i<v.path.size();++i){ if(i>0) os << ", "; os << v.path[i]; } os << "]"
 << '}';
    return os;
}

std::string key(const Point& p);
std::string path_to_string(const std::vector<Point>& path);
Result dijkstra(const std::vector<std::vector<int64_t>>& grid, const Point& source, const Point& destination, bool allow_diagonal);
void print_result(const Result& res);
int main();

std::vector<std::vector<int64_t>> grid1 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(1)}};
std::vector<std::vector<int64_t>> grid2 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(1)}};

std::string key(const Point& p) {
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << p.x; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << p.y; return ss.str(); }()));
}

std::string path_to_string(const std::vector<Point>& path) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < path.size())) {
        Point pt = _index(path, i);
        s = (((((s + std::string("(")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pt.x; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pt.y; return ss.str(); }())) + std::string(")"));
        if ((i < (path.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

Result dijkstra(const std::vector<std::vector<int64_t>>& grid, const Point& source, const Point& destination, bool allow_diagonal) {
    int64_t rows = grid.size();
    int64_t cols = _index(grid, int64_t(0)).size();
    std::vector<int64_t> dx = std::vector<int64_t>{-int64_t(1), int64_t(1), int64_t(0), int64_t(0)};
    std::vector<int64_t> dy = std::vector<int64_t>{int64_t(0), int64_t(0), -int64_t(1), int64_t(1)};
    if (allow_diagonal) {
        dx = _concat(dx, std::vector<int64_t>{-int64_t(1), -int64_t(1), int64_t(1), int64_t(1)});
        dy = _concat(dy, std::vector<int64_t>{-int64_t(1), int64_t(1), -int64_t(1), int64_t(1)});
    }
    double INF = 1000000000000.0;
    std::vector<Point> queue = std::vector<Point>{source};
    int64_t front = int64_t(0);
    std::map<std::string, double> dist_map = {{key(source), 0.0}};
    std::map<std::string, Point> prev = {};
    while ((front < queue.size())) {
        Point current = _index(queue, front);
        front = (front + int64_t(1));
        std::string cur_key = key(current);
        if (((current.x == destination.x) && (current.y == destination.y))) {
            break;
        }
        int64_t i = int64_t(0);
        while ((i < dx.size())) {
            int64_t nx = (current.x + _index(dx, i));
            int64_t ny = (current.y + _index(dy, i));
            if (((((nx >= int64_t(0)) && (nx < rows)) && (ny >= int64_t(0))) && (ny < cols))) {
                if ((_index(_index(grid, nx), ny) == int64_t(1))) {
                    std::string n_key = ((([&]{ std::ostringstream ss; ss << std::boolalpha << nx; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ny; return ss.str(); }()));
                    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist_map, n_key)) {
                        dist_map[n_key] = (([&](const auto& __m){ auto __it = __m.find(cur_key); if (__it == __m.end()) return double{}; return __it->second; })(dist_map) + 1.0);
                        prev[n_key] = current;
                        queue = ([&]{ auto __tmp = queue; __tmp.push_back(Point{.x = nx, .y = ny}); return __tmp; }());
                    }
                }
            }
            i = (i + int64_t(1));
        }
    }
    std::string dest_key = key(destination);
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist_map, dest_key)) {
        std::vector<Point> path_rev = std::vector<Point>{destination};
        std::string step_key = dest_key;
        Point step_pt = destination;
        while ((step_key != key(source))) {
            step_pt = ([&](const auto& __m){ auto __it = __m.find(step_key); if (__it == __m.end()) return Point{}; return __it->second; })(prev);
            step_key = key(step_pt);
            path_rev = ([&]{ auto __tmp = path_rev; __tmp.push_back(step_pt); return __tmp; }());
        }
        std::vector<Point> path = {};
        int64_t k = (path_rev.size() - int64_t(1));
        while ((k >= int64_t(0))) {
            path = ([&]{ auto __tmp = path; __tmp.push_back(_index(path_rev, k)); return __tmp; }());
            k = (k - int64_t(1));
        }
        return Result{.distance = ([&](const auto& __m){ auto __it = __m.find(dest_key); if (__it == __m.end()) return double{}; return __it->second; })(dist_map), .path = path};
    }
    return Result{.distance = INF, .path = std::vector<Point>{}};
}

void print_result(const Result& res) {
    std::cout << ((_to_string(res.distance) + std::string(", ")) + path_to_string(res.path));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        print_result(dijkstra(grid1, Point{.x = int64_t(0), .y = int64_t(0)}, Point{.x = int64_t(2), .y = int64_t(2)}, false));
        print_result(dijkstra(grid1, Point{.x = int64_t(0), .y = int64_t(0)}, Point{.x = int64_t(2), .y = int64_t(2)}, true));
        print_result(dijkstra(grid2, Point{.x = int64_t(0), .y = int64_t(0)}, Point{.x = int64_t(2), .y = int64_t(2)}, false));
    }
    return 0;
}
