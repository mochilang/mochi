// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:17:38 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _slice(const std::vector<T>& s, int64_t start, int64_t end) {
    if(start < 0) start = 0;
    if(end > (int64_t)s.size()) end = s.size();
    if(start > (int64_t)s.size()) start = s.size();
    if(end < start) end = start;
    return std::vector<T>(s.begin()+start, s.begin()+end);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool contains(const std::vector<std::string>& xs, std::string x);
bool contains_key(const std::map<std::string, std::vector<std::string>>& m, std::string key);
std::vector<std::string> bfs_shortest_path(const std::map<std::string, std::vector<std::string>>& graph, std::string start, std::string goal);
int64_t bfs_shortest_path_distance(const std::map<std::string, std::vector<std::string>>& graph, std::string start, std::string target);
int main();

std::map<std::string, std::vector<std::string>> demo_graph = {{"A", std::vector<std::string>{std::string("B"), std::string("C"), std::string("E")}}, {"B", std::vector<std::string>{std::string("A"), std::string("D"), std::string("E")}}, {"C", std::vector<std::string>{std::string("A"), std::string("F"), std::string("G")}}, {"D", std::vector<std::string>{std::string("B")}}, {"E", std::vector<std::string>{std::string("A"), std::string("B"), std::string("D")}}, {"F", std::vector<std::string>{std::string("C")}}, {"G", std::vector<std::string>{std::string("C")}}};

bool contains(const std::vector<std::string>& xs, std::string x) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(xs) == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

bool contains_key(const std::map<std::string, std::vector<std::string>>& m, std::string key) {
    for (const auto& __p : m) {
        auto k = __p.first;
        if ((k == key)) {
            return true;
        }
    }
    return false;
}

std::vector<std::string> bfs_shortest_path(const std::map<std::string, std::vector<std::string>>& graph, std::string start, std::string goal) {
    std::vector<std::string> explored = {};
    std::vector<std::vector<std::string>> queue = std::vector<std::vector<std::string>>{std::vector<std::string>{start}};
    if ((start == goal)) {
        return std::vector<std::string>{start};
    }
    while ((queue.size() > int64_t(0))) {
        std::vector<std::string> path = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(queue);
        queue = _slice(queue, int64_t(1), queue.size());
        std::string node = path[static_cast<size_t>((path.size() - int64_t(1)))];
        if (!contains(explored, node)) {
            std::vector<std::string> neighbours = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph);
            int64_t i = int64_t(0);
            while ((i < neighbours.size())) {
                std::string neighbour = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(neighbours);
                std::vector<std::string> new_path = path;
                new_path = ([&]{ auto& __tmp = new_path; __tmp.push_back(neighbour); return __tmp; }());
                queue = ([&]{ auto& __tmp = queue; __tmp.push_back(new_path); return __tmp; }());
                if ((neighbour == goal)) {
                    return new_path;
                }
                i = (i + int64_t(1));
            }
            explored = ([&]{ auto& __tmp = explored; __tmp.push_back(node); return __tmp; }());
        }
    }
    return std::vector<std::string>{};
}

int64_t bfs_shortest_path_distance(const std::map<std::string, std::vector<std::string>>& graph, std::string start, std::string target) {
    if (((contains_key(graph, start) == false) || (contains_key(graph, target) == false))) {
        return -int64_t(1);
    }
    if ((start == target)) {
        return int64_t(0);
    }
    std::vector<std::string> queue = std::vector<std::string>{start};
    std::vector<std::string> visited = std::vector<std::string>{start};
    std::map<std::string, int64_t> dist = {};
    dist[start] = int64_t(0);
    dist[target] = -int64_t(1);
    while ((queue.size() > int64_t(0))) {
        std::string node = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(queue);
        queue = _slice(queue, int64_t(1), queue.size());
        if ((node == target)) {
            if (((([&](const auto& __m){ auto __it = __m.find(target); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) == -int64_t(1)) || (([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) < ([&](const auto& __m){ auto __it = __m.find(target); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist)))) {
                dist[target] = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist);
            }
        }
        std::vector<std::string> adj = ([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return std::vector<std::string>{}; return __it->second; })(graph);
        int64_t i = int64_t(0);
        while ((i < adj.size())) {
            std::string next = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj);
            if (!contains(visited, next)) {
                visited = ([&]{ auto& __tmp = visited; __tmp.push_back(next); return __tmp; }());
                queue = ([&]{ auto& __tmp = queue; __tmp.push_back(next); return __tmp; }());
                dist[next] = (([&](const auto& __m){ auto __it = __m.find(node); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) + int64_t(1));
            }
            i = (i + int64_t(1));
        }
    }
    return ([&](const auto& __m){ auto __it = __m.find(target); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
    }
    return 0;
}
