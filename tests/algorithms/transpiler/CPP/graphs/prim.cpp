// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:19:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _slice(const std::vector<T>& s, int64_t start, int64_t end) {
    if(start < 0) start = 0;
    if(end > (int64_t)s.size()) end = s.size();
    if(start > (int64_t)s.size()) start = s.size();
    if(end < start) end = start;
    return std::vector<T>(s.begin()+start, s.begin()+end);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::map<int64_t, std::vector<std::vector<int64_t>>> connect(const std::map<int64_t, std::vector<std::vector<int64_t>>>& graph, int64_t a, int64_t b, int64_t w);
bool in_list(const std::vector<int64_t>& arr, int64_t x);
std::vector<std::vector<int64_t>> prim(const std::map<int64_t, std::vector<std::vector<int64_t>>>& graph, int64_t s, int64_t n);
std::vector<int64_t> sort_heap(const std::vector<int64_t>& h, const std::map<int64_t, int64_t>& dist);
std::vector<std::vector<int64_t>> prim_heap(const std::map<int64_t, std::vector<std::vector<int64_t>>>& graph, int64_t s, int64_t n);
void print_edges(const std::vector<std::vector<int64_t>>& edges);
void test_vector();
int main();

int64_t INF = int64_t(1000000000);

std::map<int64_t, std::vector<std::vector<int64_t>>> connect(const std::map<int64_t, std::vector<std::vector<int64_t>>>& graph, int64_t a, int64_t b, int64_t w) {
    int64_t u = (a - int64_t(1));
    int64_t v = (b - int64_t(1));
    std::map<int64_t, std::vector<std::vector<int64_t>>> g = graph;
    g[u] = ([&]{ auto __tmp = ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g); __tmp.push_back(std::vector<int64_t>{v, w}); return __tmp; }());
    g[v] = ([&]{ auto __tmp = ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(g); __tmp.push_back(std::vector<int64_t>{u, w}); return __tmp; }());
    return g;
}

bool in_list(const std::vector<int64_t>& arr, int64_t x) {
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        if ((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(arr) == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::vector<int64_t>> prim(const std::map<int64_t, std::vector<std::vector<int64_t>>>& graph, int64_t s, int64_t n) {
    std::map<int64_t, int64_t> dist = {};
    std::map<int64_t, int64_t> parent = {};
    dist[s] = int64_t(0);
    parent[s] = -int64_t(1);
    std::vector<int64_t> known = {};
    std::vector<int64_t> keys = std::vector<int64_t>{s};
    while ((known.size() < n)) {
        int64_t mini = INF;
        int64_t u = -int64_t(1);
        int64_t i = int64_t(0);
        while ((i < keys.size())) {
            int64_t k = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(keys);
            int64_t d = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist);
            if ((!in_list(known, k) && (d < mini))) {
                mini = d;
                u = k;
            }
            i = (i + int64_t(1));
        }
        known = ([&]{ auto& __tmp = known; __tmp.push_back(u); return __tmp; }());
        for (std::vector<int64_t> e : ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(graph)) {
            int64_t v = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e);
            int64_t w = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e);
            if (!in_list(keys, v)) {
                keys = ([&]{ auto& __tmp = keys; __tmp.push_back(v); return __tmp; }());
            }
            int64_t cur = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist, v) ? ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) : INF);
            if ((!in_list(known, v) && (w < cur))) {
                dist[v] = w;
                parent[v] = u;
            }
        }
    }
    std::vector<std::vector<int64_t>> edges = {};
    int64_t j = int64_t(0);
    while ((j < keys.size())) {
        int64_t v = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(keys);
        if ((v != s)) {
            edges = ([&]{ auto& __tmp = edges; __tmp.push_back(std::vector<int64_t>{(v + int64_t(1)), (([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(parent) + int64_t(1))}); return __tmp; }());
        }
        j = (j + int64_t(1));
    }
    return edges;
}

std::vector<int64_t> sort_heap(const std::vector<int64_t>& h, const std::map<int64_t, int64_t>& dist) {
    std::vector<int64_t> a = h;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        int64_t j = int64_t(0);
        while ((j < ((a.size() - i) - int64_t(1)))) {
            int64_t dj = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist, ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)) ? ([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) : INF);
            int64_t dj1 = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist, ([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)) ? ([&](const auto& __m){ auto __it = __m.find(([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) : INF);
            if ((dj > dj1)) {
                int64_t t = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a);
                a[j] = ([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a);
                a[(j + int64_t(1))] = t;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return a;
}

std::vector<std::vector<int64_t>> prim_heap(const std::map<int64_t, std::vector<std::vector<int64_t>>>& graph, int64_t s, int64_t n) {
    std::map<int64_t, int64_t> dist = {};
    std::map<int64_t, int64_t> parent = {};
    dist[s] = int64_t(0);
    parent[s] = -int64_t(1);
    std::vector<int64_t> h = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        h = ([&]{ auto& __tmp = h; __tmp.push_back(i); return __tmp; }());
        i = (i + int64_t(1));
    }
    h = sort_heap(h, dist);
    std::vector<int64_t> known = {};
    while ((h.size() > int64_t(0))) {
        int64_t u = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(h);
        h = _slice(h, int64_t(1), h.size());
        known = ([&]{ auto& __tmp = known; __tmp.push_back(u); return __tmp; }());
        for (std::vector<int64_t> e : ([&](const auto& __m){ auto __it = __m.find(u); if (__it == __m.end()) return std::vector<std::vector<int64_t>>{}; return __it->second; })(graph)) {
            int64_t v = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e);
            int64_t w = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e);
            int64_t cur = (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dist, v) ? ([&](const auto& __m){ auto __it = __m.find(v); if (__it == __m.end()) return int64_t{}; return __it->second; })(dist) : INF);
            if ((!in_list(known, v) && (w < cur))) {
                dist[v] = w;
                parent[v] = u;
            }
        }
        h = sort_heap(h, dist);
    }
    std::vector<std::vector<int64_t>> edges = {};
    int64_t j = int64_t(0);
    while ((j < n)) {
        if ((j != s)) {
            edges = ([&]{ auto& __tmp = edges; __tmp.push_back(std::vector<int64_t>{(j + int64_t(1)), (([&](const auto& __m){ auto __it = __m.find(j); if (__it == __m.end()) return int64_t{}; return __it->second; })(parent) + int64_t(1))}); return __tmp; }());
        }
        j = (j + int64_t(1));
    }
    return edges;
}

void print_edges(const std::vector<std::vector<int64_t>>& edges) {
    int64_t i = int64_t(0);
    while ((i < edges.size())) {
        std::vector<int64_t> e = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges);
        std::cout << ((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e); return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e); return ss.str(); }())) + std::string(")"));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

void test_vector() {
    int64_t x = int64_t(5);
    std::map<int64_t, std::vector<std::vector<int64_t>>> G = {};
    int64_t i = int64_t(0);
    while ((i < x)) {
        G[i] = std::vector<std::vector<int64_t>>{};
        i = (i + int64_t(1));
    }
    G = connect(G, int64_t(1), int64_t(2), int64_t(15));
    G = connect(G, int64_t(1), int64_t(3), int64_t(12));
    G = connect(G, int64_t(2), int64_t(4), int64_t(13));
    G = connect(G, int64_t(2), int64_t(5), int64_t(5));
    G = connect(G, int64_t(3), int64_t(2), int64_t(6));
    G = connect(G, int64_t(3), int64_t(4), int64_t(6));
    std::vector<std::vector<int64_t>> mst = prim(G, int64_t(0), x);
    print_edges(mst);
    std::vector<std::vector<int64_t>> mst_heap = prim_heap(G, int64_t(0), x);
    print_edges(mst_heap);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_vector();
    }
    return 0;
}
