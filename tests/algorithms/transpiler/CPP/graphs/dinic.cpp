// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:18:16 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Dinic;

std::ostream& operator<<(std::ostream&, const Dinic&);


struct Dinic {
    int64_t n;
    std::vector<int64_t> lvl;
    std::vector<int64_t> ptr;
    std::vector<int64_t> q;
    std::vector<std::vector<std::vector<int64_t>>> adj;
    auto operator<=>(const Dinic&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Dinic& v) {
    os << '{' << "'n': "<< v.n
 << ", " << "'lvl': "<< "["; for(size_t i=0;i<v.lvl.size();++i){ if(i>0) os << ", "; os << v.lvl[i]; } os << "]"
 << ", " << "'ptr': "<< "["; for(size_t i=0;i<v.ptr.size();++i){ if(i>0) os << ", "; os << v.ptr[i]; } os << "]"
 << ", " << "'q': "<< "["; for(size_t i=0;i<v.q.size();++i){ if(i>0) os << ", "; os << v.q[i]; } os << "]"
 << ", " << "'adj': "<< "["; for(size_t i=0;i<v.adj.size();++i){ if(i>0) os << ", "; os << v.adj[i]; } os << "]"
 << '}';
    return os;
}

int64_t pow2(int64_t k);
int64_t min2(int64_t a, int64_t b);
Dinic new_dinic(int64_t n);
void add_edge(Dinic g, int64_t a, int64_t b, int64_t c, int64_t rcap);
int64_t dfs(Dinic g, int64_t v, int64_t sink, int64_t flow);
int64_t max_flow(Dinic g, int64_t source, int64_t sink);
int main();

int64_t INF = int64_t(1000000000);
Dinic graph = Dinic{};
int64_t source = int64_t(0);
int64_t sink = int64_t(9);
int64_t v = 0;

int64_t pow2(int64_t k) {
    int64_t res = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < k)) {
        res = (res * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t min2(int64_t a, int64_t b) {
    if ((a < b)) {
        return a;
    }
    return b;
}

Dinic new_dinic(int64_t n) {
    std::vector<int64_t> lvl = {};
    std::vector<int64_t> ptr = {};
    std::vector<int64_t> q = {};
    std::vector<std::vector<std::vector<int64_t>>> adj = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        lvl = ([&]{ auto& __tmp = lvl; __tmp.push_back(int64_t(0)); return __tmp; }());
        ptr = ([&]{ auto& __tmp = ptr; __tmp.push_back(int64_t(0)); return __tmp; }());
        q = ([&]{ auto& __tmp = q; __tmp.push_back(int64_t(0)); return __tmp; }());
        std::vector<std::vector<int64_t>> edges = {};
        adj = ([&]{ auto& __tmp = adj; __tmp.push_back(edges); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Dinic{.n = n, .lvl = lvl, .ptr = ptr, .q = q, .adj = adj};
}

void add_edge(Dinic g, int64_t a, int64_t b, int64_t c, int64_t rcap) {
    std::vector<std::vector<std::vector<int64_t>>> adj = g.adj;
    std::vector<std::vector<int64_t>> list_a = ([&](const auto& __v){ auto __i = a; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj);
    std::vector<std::vector<int64_t>> list_b = ([&](const auto& __v){ auto __i = b; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj);
    std::vector<int64_t> e1 = std::vector<int64_t>{b, int64_t(list_b.size()), c, int64_t(0)};
    std::vector<int64_t> e2 = std::vector<int64_t>{a, int64_t(list_a.size()), rcap, int64_t(0)};
    list_a = ([&]{ auto& __tmp = list_a; __tmp.push_back(e1); return __tmp; }());
    list_b = ([&]{ auto& __tmp = list_b; __tmp.push_back(e2); return __tmp; }());
    adj[a] = list_a;
    adj[b] = list_b;
    g.adj = adj;
}

int64_t dfs(Dinic g, int64_t v, int64_t sink, int64_t flow) {
    if (((v == sink) || (flow == int64_t(0)))) {
        return flow;
    }
    std::vector<int64_t> ptr = g.ptr;
    int64_t i = ([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(ptr);
    std::vector<std::vector<std::vector<int64_t>>> adj_all = g.adj;
    std::vector<std::vector<int64_t>> adj_v = ([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj_all);
    while ((i < adj_v.size())) {
        std::vector<int64_t> e = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj_v);
        int64_t to = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e);
        if ((([&](const auto& __v){ auto __i = to; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(g.lvl) == (([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(g.lvl) + int64_t(1)))) {
            int64_t avail = (([&](const auto& __v){ auto __i = int64_t(2); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e) - ([&](const auto& __v){ auto __i = int64_t(3); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e));
            int64_t pushed = dfs(g, to, sink, min2(flow, avail));
            if ((pushed > int64_t(0))) {
                e[int64_t(3)] = (([&](const auto& __v){ auto __i = int64_t(3); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e) + pushed);
                adj_v[i] = e;
                std::vector<std::vector<int64_t>> adj_to = ([&](const auto& __v){ auto __i = to; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj_all);
                std::vector<int64_t> back = ([&](const auto& __v){ auto __i = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(adj_to);
                back[int64_t(3)] = (([&](const auto& __v){ auto __i = int64_t(3); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(back) - pushed);
                adj_to[([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e)] = back;
                adj_all[to] = adj_to;
                adj_all[v] = adj_v;
                g.adj = adj_all;
                return pushed;
            }
        }
        i = (i + int64_t(1));
        ptr[v] = i;
    }
    g.ptr = ptr;
    adj_all[v] = adj_v;
    g.adj = adj_all;
    return int64_t(0);
}

int64_t max_flow(Dinic g, int64_t source, int64_t sink) {
    int64_t flow = int64_t(0);
    int64_t l = int64_t(0);
    while ((l < int64_t(31))) {
        int64_t threshold = pow2((int64_t(30) - l));
        while (true) {
            std::vector<int64_t> lvl = {};
            std::vector<int64_t> ptr = {};
            int64_t i = int64_t(0);
            while ((i < g.n)) {
                lvl = ([&]{ auto& __tmp = lvl; __tmp.push_back(int64_t(0)); return __tmp; }());
                ptr = ([&]{ auto& __tmp = ptr; __tmp.push_back(int64_t(0)); return __tmp; }());
                i = (i + int64_t(1));
            }
            g.lvl = lvl;
            g.ptr = ptr;
            int64_t qi = int64_t(0);
            int64_t qe = int64_t(1);
            lvl[source] = int64_t(1);
            g.lvl = lvl;
            std::vector<int64_t> q = g.q;
            q[int64_t(0)] = source;
            while (((qi < qe) && (([&](const auto& __v){ auto __i = sink; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(g.lvl) == int64_t(0)))) {
                int64_t v = ([&](const auto& __v){ auto __i = qi; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(q);
                qi = (qi + int64_t(1));
                std::vector<std::vector<int64_t>> edges = ([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(g.adj);
                int64_t j = int64_t(0);
                while ((j < edges.size())) {
                    std::vector<int64_t> e = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges);
                    int64_t to = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e);
                    int64_t residual = (([&](const auto& __v){ auto __i = int64_t(2); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e) - ([&](const auto& __v){ auto __i = int64_t(3); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(e));
                    std::vector<int64_t> lvl_inner = g.lvl;
                    if (((([&](const auto& __v){ auto __i = to; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(lvl_inner) == int64_t(0)) && (residual >= threshold))) {
                        q[qe] = to;
                        qe = (qe + int64_t(1));
                        lvl_inner[to] = (([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(lvl_inner) + int64_t(1));
                        g.lvl = lvl_inner;
                    }
                    j = (j + int64_t(1));
                }
            }
            int64_t p = dfs(g, source, sink, INF);
            while ((p > int64_t(0))) {
                flow = (flow + p);
                p = dfs(g, source, sink, INF);
            }
            if ((([&](const auto& __v){ auto __i = sink; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(g.lvl) == int64_t(0))) {
                break;
            }
        }
        l = (l + int64_t(1));
    }
    return flow;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        graph = new_dinic(int64_t(10));
        v = int64_t(1);
        while ((v < int64_t(5))) {
            add_edge(graph, source, v, int64_t(1), int64_t(0));
            v = (v + int64_t(1));
        }
        v = int64_t(5);
        while ((v < int64_t(9))) {
            add_edge(graph, v, sink, int64_t(1), int64_t(0));
            v = (v + int64_t(1));
        }
        v = int64_t(1);
        while ((v < int64_t(5))) {
            add_edge(graph, v, (v + int64_t(4)), int64_t(1), int64_t(0));
            v = (v + int64_t(1));
        }
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << max_flow(graph, source, sink); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
