// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:19:08 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct LanczosResult;
struct EigenResult;

std::ostream& operator<<(std::ostream&, const LanczosResult&);
std::ostream& operator<<(std::ostream&, const EigenResult&);


struct LanczosResult {
    std::vector<std::vector<double>> t;
    std::vector<std::vector<double>> q;
    auto operator<=>(const LanczosResult&) const = default;
};

struct EigenResult {
    std::vector<double> values;
    std::vector<std::vector<double>> vectors;
    auto operator<=>(const EigenResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const LanczosResult& v) {
    os << '{' << "'t': "<< "["; for(size_t i=0;i<v.t.size();++i){ if(i>0) os << ", "; os << v.t[i]; } os << "]"
 << ", " << "'q': "<< "["; for(size_t i=0;i<v.q.size();++i){ if(i>0) os << ", "; os << v.q[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const EigenResult& v) {
    os << '{' << "'values': "<< "["; for(size_t i=0;i<v.values.size();++i){ if(i>0) os << ", "; os << v.values[i]; } os << "]"
 << ", " << "'vectors': "<< "["; for(size_t i=0;i<v.vectors.size();++i){ if(i>0) os << ", "; os << v.vectors[i]; } os << "]"
 << '}';
    return os;
}

int64_t _rand();
double _random();
double sqrtApprox(double x);
double absf(double x);
double dot(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vector_scale(const std::vector<double>& v, double s);
std::vector<double> vector_sub(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vector_add(const std::vector<double>& a, const std::vector<double>& b);
std::vector<std::vector<double>> zeros_matrix(int64_t r, int64_t c);
std::vector<double> column(const std::vector<std::vector<double>>& m, int64_t idx);
void validate_adjacency_list(const std::vector<std::vector<int64_t>>& graph);
std::vector<double> multiply_matrix_vector(const std::vector<std::vector<int64_t>>& graph, const std::vector<double>& vector);
LanczosResult lanczos_iteration(const std::vector<std::vector<int64_t>>& graph, int64_t k);
EigenResult jacobi_eigen(const std::vector<std::vector<double>>& a_in, int64_t max_iter);
std::vector<std::vector<double>> matmul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
EigenResult sort_eigenpairs(const std::vector<double>& vals, const std::vector<std::vector<double>>& vecs);
EigenResult find_lanczos_eigenvectors(const std::vector<std::vector<int64_t>>& graph, int64_t k);
std::string list_to_string(const std::vector<double>& arr);
std::string matrix_to_string(const std::vector<std::vector<double>>& m);
int main();

int64_t seed = 0;
std::vector<std::vector<int64_t>> graph = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2)}, std::vector<int64_t>{int64_t(0), int64_t(2)}, std::vector<int64_t>{int64_t(0), int64_t(1)}};
EigenResult result = find_lanczos_eigenvectors(graph, int64_t(2));

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

double _random() {
    return ((double)((1.0 * _rand())) / (2147483648.0));
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double absf(double x) {
    return ((x < 0.0) ? -x : x);
}

double dot(const std::vector<double>& a, const std::vector<double>& b) {
    double s = 0.0;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        s = (s + (([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a) * ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b)));
        i = (i + int64_t(1));
    }
    return s;
}

std::vector<double> vector_scale(const std::vector<double>& v, double s) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(v) * s)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vector_sub(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a) - ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vector_add(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a) + ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> zeros_matrix(int64_t r, int64_t c) {
    std::vector<std::vector<double>> m = {};
    int64_t i = int64_t(0);
    while ((i < r)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < c)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        m = ([&]{ auto& __tmp = m; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return m;
}

std::vector<double> column(const std::vector<std::vector<double>>& m, int64_t idx) {
    std::vector<double> col = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        col = ([&]{ auto& __tmp = col; __tmp.push_back(([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(m))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return col;
}

void validate_adjacency_list(const std::vector<std::vector<int64_t>>& graph) {
    int64_t i = int64_t(0);
    while ((i < graph.size())) {
        int64_t j = int64_t(0);
        while ((j < ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(graph).size())) {
            int64_t v = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(graph));
            if (((v < int64_t(0)) || (v >= graph.size()))) {
                throw std::runtime_error(std::string("Invalid neighbor"));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
}

std::vector<double> multiply_matrix_vector(const std::vector<std::vector<int64_t>>& graph, const std::vector<double>& vector) {
    int n = graph.size();
    if ((vector.size() != n)) {
        throw std::runtime_error(std::string("Vector length must match number of nodes"));
    }
    std::vector<double> result = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        double sum = 0.0;
        int64_t j = int64_t(0);
        while ((j < ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(graph).size())) {
            int64_t nb = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(graph));
            sum = (sum + ([&](const auto& __v){ auto __i = nb; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(vector));
            j = (j + int64_t(1));
        }
        result = ([&]{ auto& __tmp = result; __tmp.push_back(sum); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

LanczosResult lanczos_iteration(const std::vector<std::vector<int64_t>>& graph, int64_t k) {
    int n = graph.size();
    if (((k < int64_t(1)) || (k > n))) {
        throw std::runtime_error(std::string("invalid number of eigenvectors"));
    }
    std::vector<std::vector<double>> q = zeros_matrix((int64_t)(n), k);
    std::vector<std::vector<double>> t = zeros_matrix(k, k);
    std::vector<double> v = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        v = ([&]{ auto& __tmp = v; __tmp.push_back((double)_random()); return __tmp; }());
        i = (i + int64_t(1));
    }
    double ss = 0.0;
    i = int64_t(0);
    while ((i < n)) {
        ss = (ss + (([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(v) * ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(v)));
        i = (i + int64_t(1));
    }
    double vnorm = sqrtApprox(ss);
    i = int64_t(0);
    while ((i < n)) {
        q[i][int64_t(0)] = ((double)(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(v)) / (vnorm));
        i = (i + int64_t(1));
    }
    double beta = 0.0;
    int64_t j = int64_t(0);
    while ((j < k)) {
        std::vector<double> w = multiply_matrix_vector(graph, column(q, j));
        if ((j > int64_t(0))) {
            w = vector_sub(w, vector_scale(column(q, (j - int64_t(1))), beta));
        }
        double alpha = dot(column(q, j), w);
        w = vector_sub(w, vector_scale(column(q, j), alpha));
        double ss2 = 0.0;
        int64_t p = int64_t(0);
        while ((p < n)) {
            ss2 = (ss2 + (([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(w) * ([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(w)));
            p = (p + int64_t(1));
        }
        beta = sqrtApprox(ss2);
        t[j][j] = alpha;
        if ((j < (k - int64_t(1)))) {
            t[j][(j + int64_t(1))] = beta;
            t[(j + int64_t(1))][j] = beta;
            if ((beta > 1e-10)) {
                std::vector<double> wnorm = vector_scale(w, ((double)(1.0) / (beta)));
                int64_t r = int64_t(0);
                while ((r < n)) {
                    q[r][(j + int64_t(1))] = ([&](const auto& __v){ auto __i = r; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(wnorm);
                    r = (r + int64_t(1));
                }
            }
        }
        j = (j + int64_t(1));
    }
    return LanczosResult{.t = t, .q = q};
}

EigenResult jacobi_eigen(const std::vector<std::vector<double>>& a_in, int64_t max_iter) {
    int n = a_in.size();
    std::vector<std::vector<double>> a = a_in;
    std::vector<std::vector<double>> v = zeros_matrix((int64_t)(n), (int64_t)(n));
    int64_t i = int64_t(0);
    while ((i < n)) {
        v[i][i] = 1.0;
        i = (i + int64_t(1));
    }
    int64_t iter = int64_t(0);
    while ((iter < max_iter)) {
        int64_t p = int64_t(0);
        int64_t q = int64_t(1);
        double max = absf(([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)));
        i = int64_t(0);
        while ((i < n)) {
            int64_t j = (i + int64_t(1));
            while ((j < n)) {
                double val = absf(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)));
                if ((val > max)) {
                    max = val;
                    p = i;
                    q = j;
                }
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        if ((max < 1e-08)) {
            break;
        }
        double app = ([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
        double aqq = ([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
        double apq = ([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
        double theta = ((double)((aqq - app)) / ((2.0 * apq)));
        double t = ((double)(1.0) / ((absf(theta) + sqrtApprox(((theta * theta) + 1.0)))));
        if ((theta < 0.0)) {
            t = -t;
        }
        double c = ((double)(1.0) / (sqrtApprox((1.0 + (t * t)))));
        double s = (t * c);
        double tau = ((double)(s) / ((1.0 + c)));
        a[p][p] = (app - (t * apq));
        a[q][q] = (aqq + (t * apq));
        a[p][q] = 0.0;
        a[q][p] = 0.0;
        int64_t k = int64_t(0);
        while ((k < n)) {
            if (((k != p) && (k != q))) {
                double akp = ([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
                double akq = ([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
                a[k][p] = (akp - (s * (akq + (tau * akp))));
                a[p][k] = ([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
                a[k][q] = (akq + (s * (akp - (tau * akq))));
                a[q][k] = ([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a));
            }
            k = (k + int64_t(1));
        }
        k = int64_t(0);
        while ((k < n)) {
            double vkp = ([&](const auto& __v){ auto __i = p; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(v));
            double vkq = ([&](const auto& __v){ auto __i = q; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(v));
            v[k][p] = (vkp - (s * (vkq + (tau * vkp))));
            v[k][q] = (vkq + (s * (vkp - (tau * vkq))));
            k = (k + int64_t(1));
        }
        iter = (iter + int64_t(1));
    }
    std::vector<double> eigenvalues = {};
    i = int64_t(0);
    while ((i < n)) {
        eigenvalues = ([&]{ auto& __tmp = eigenvalues; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return EigenResult{.values = eigenvalues, .vectors = v};
}

std::vector<std::vector<double>> matmul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int rows = a.size();
    int cols = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b).size();
    int inner = b.size();
    std::vector<std::vector<double>> m = zeros_matrix((int64_t)(rows), (int64_t)(cols));
    int64_t i = int64_t(0);
    while ((i < rows)) {
        int64_t j = int64_t(0);
        while ((j < cols)) {
            double s = 0.0;
            int64_t k = int64_t(0);
            while ((k < inner)) {
                s = (s + (([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)) * ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b))));
                k = (k + int64_t(1));
            }
            m[i][j] = s;
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return m;
}

EigenResult sort_eigenpairs(const std::vector<double>& vals, const std::vector<std::vector<double>>& vecs) {
    int n = vals.size();
    std::vector<double> values = vals;
    std::vector<std::vector<double>> vectors = vecs;
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t j = int64_t(0);
        while ((j < (n - int64_t(1)))) {
            if ((([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(values) < ([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(values))) {
                double tmp = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(values);
                values[j] = ([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(values);
                values[(j + int64_t(1))] = tmp;
                int64_t r = int64_t(0);
                while ((r < vectors.size())) {
                    double tv = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = r; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(vectors));
                    vectors[r][j] = ([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = r; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(vectors));
                    vectors[r][(j + int64_t(1))] = tv;
                    r = (r + int64_t(1));
                }
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return EigenResult{.values = values, .vectors = vectors};
}

EigenResult find_lanczos_eigenvectors(const std::vector<std::vector<int64_t>>& graph, int64_t k) {
    validate_adjacency_list(graph);
    LanczosResult res = lanczos_iteration(graph, k);
    EigenResult eig = jacobi_eigen(res.t, int64_t(50));
    EigenResult sorted = sort_eigenpairs(eig.values, eig.vectors);
    std::vector<std::vector<double>> final_vectors = matmul(res.q, sorted.vectors);
    return EigenResult{.values = sorted.values, .vectors = final_vectors};
}

std::string list_to_string(const std::vector<double>& arr) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(arr); return ss.str(); }()));
        if ((i < (arr.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("]"));
}

std::string matrix_to_string(const std::vector<std::vector<double>>& m) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        s = (s + list_to_string(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(m)));
        if ((i < (m.size() - int64_t(1)))) {
            s = (s + std::string("; "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("]"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        seed = int64_t(123456789);
        std::cout << list_to_string(result.values);
        std::cout << std::endl;
        std::cout << matrix_to_string(result.vectors);
        std::cout << std::endl;
    }
    return 0;
}
