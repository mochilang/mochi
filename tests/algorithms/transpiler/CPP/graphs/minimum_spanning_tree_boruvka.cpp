// Generated by Mochi transpiler v0.10.60 on 2025-08-08 11:19:20 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Edge;
struct UF;
struct FindRes;

std::ostream& operator<<(std::ostream&, const Edge&);
std::ostream& operator<<(std::ostream&, const UF&);
std::ostream& operator<<(std::ostream&, const FindRes&);


struct Edge {
    int64_t u;
    int64_t v;
    int64_t w;
    auto operator<=>(const Edge&) const = default;
};

struct UF {
    std::vector<int64_t> parent;
    std::vector<int64_t> rank;
    auto operator<=>(const UF&) const = default;
};

struct FindRes {
    int64_t root;
    UF uf;
    auto operator<=>(const FindRes&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Edge& v) {
    os << '{' << "'u': "<< v.u
 << ", " << "'v': "<< v.v
 << ", " << "'w': "<< v.w
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const UF& v) {
    os << '{' << "'parent': "<< "["; for(size_t i=0;i<v.parent.size();++i){ if(i>0) os << ", "; os << v.parent[i]; } os << "]"
 << ", " << "'rank': "<< "["; for(size_t i=0;i<v.rank.size();++i){ if(i>0) os << ", "; os << v.rank[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const FindRes& v) {
    os << '{' << "'root': "<< v.root
 << ", " << "'uf': "<< v.uf
 << '}';
    return os;
}

UF uf_make(int64_t n);
FindRes uf_find(const UF& uf, int64_t x);
UF uf_union(const UF& uf, int64_t x, int64_t y);
std::vector<Edge> boruvka(int64_t n, const std::vector<Edge>& edges);
int main();

UF uf_make(int64_t n) {
    std::vector<int64_t> p = {};
    std::vector<int64_t> r = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        p = ([&]{ auto& __tmp = p; __tmp.push_back(i); return __tmp; }());
        r = ([&]{ auto& __tmp = r; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return UF{.parent = p, .rank = r};
}

FindRes uf_find(const UF& uf, int64_t x) {
    std::vector<int64_t> p = uf.parent;
    if ((([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p) != x)) {
        FindRes res = uf_find(UF{.parent = p, .rank = uf.rank}, ([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p));
        p = res.uf.parent;
        p[x] = res.root;
        return FindRes{.root = res.root, .uf = UF{.parent = p, .rank = res.uf.rank}};
    }
    return FindRes{.root = x, .uf = uf};
}

UF uf_union(const UF& uf, int64_t x, int64_t y) {
    FindRes fr1 = uf_find(uf, x);
    UF uf1 = fr1.uf;
    int64_t root1 = fr1.root;
    FindRes fr2 = uf_find(uf1, y);
    uf1 = fr2.uf;
    int64_t root2 = fr2.root;
    if ((root1 == root2)) {
        return uf1;
    }
    std::vector<int64_t> p = uf1.parent;
    std::vector<int64_t> r = uf1.rank;
    if ((([&](const auto& __v){ auto __i = root1; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(r) > ([&](const auto& __v){ auto __i = root2; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(r))) {
        p[root2] = root1;
    } else     if ((([&](const auto& __v){ auto __i = root1; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(r) < ([&](const auto& __v){ auto __i = root2; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(r))) {
        p[root1] = root2;
    } else {
        p[root2] = root1;
        r[root1] = (([&](const auto& __v){ auto __i = root1; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(r) + int64_t(1));
    }

    return UF{.parent = p, .rank = r};
}

std::vector<Edge> boruvka(int64_t n, const std::vector<Edge>& edges) {
    UF uf = uf_make(n);
    int64_t num_components = n;
    std::vector<Edge> mst = {};
    while ((num_components > int64_t(1))) {
        std::vector<int64_t> cheap = {};
        int64_t i = int64_t(0);
        while ((i < n)) {
            cheap = ([&]{ auto& __tmp = cheap; __tmp.push_back((int64_t(0) - int64_t(1))); return __tmp; }());
            i = (i + int64_t(1));
        }
        int64_t idx = int64_t(0);
        while ((idx < edges.size())) {
            Edge e = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges);
            FindRes fr1 = uf_find(uf, e.u);
            uf = fr1.uf;
            int64_t set1 = fr1.root;
            FindRes fr2 = uf_find(uf, e.v);
            uf = fr2.uf;
            int64_t set2 = fr2.root;
            if ((set1 != set2)) {
                if (((([&](const auto& __v){ auto __i = set1; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(cheap) == (int64_t(0) - int64_t(1))) || (([&](const auto& __v){ auto __i = ([&](const auto& __v){ auto __i = set1; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(cheap); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges).w > e.w))) {
                    cheap[set1] = idx;
                }
                if (((([&](const auto& __v){ auto __i = set2; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(cheap) == (int64_t(0) - int64_t(1))) || (([&](const auto& __v){ auto __i = ([&](const auto& __v){ auto __i = set2; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(cheap); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges).w > e.w))) {
                    cheap[set2] = idx;
                }
            }
            idx = (idx + int64_t(1));
        }
        int64_t v = int64_t(0);
        while ((v < n)) {
            int64_t idxe = ([&](const auto& __v){ auto __i = v; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(cheap);
            if ((idxe != (int64_t(0) - int64_t(1)))) {
                Edge e = ([&](const auto& __v){ auto __i = idxe; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(edges);
                FindRes fr1 = uf_find(uf, e.u);
                uf = fr1.uf;
                int64_t set1 = fr1.root;
                FindRes fr2 = uf_find(uf, e.v);
                uf = fr2.uf;
                int64_t set2 = fr2.root;
                if ((set1 != set2)) {
                    mst = ([&]{ auto& __tmp = mst; __tmp.push_back(e); return __tmp; }());
                    uf = uf_union(uf, set1, set2);
                    num_components = (num_components - int64_t(1));
                }
            }
            v = (v + int64_t(1));
        }
    }
    return mst;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<Edge> edges = std::vector<Edge>{Edge{.u = int64_t(0), .v = int64_t(1), .w = int64_t(1)}, Edge{.u = int64_t(0), .v = int64_t(2), .w = int64_t(2)}, Edge{.u = int64_t(2), .v = int64_t(3), .w = int64_t(3)}};
        std::vector<Edge> mst = boruvka(int64_t(4), edges);
        for (Edge e : mst) {
            std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << e.u; return ss.str(); }()) + std::string(" - ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << e.v; return ss.str(); }())) + std::string(" : ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << e.w; return ss.str(); }()));
            std::cout << std::endl;
        }
    }
    return 0;
}
