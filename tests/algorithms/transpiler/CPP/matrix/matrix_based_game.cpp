// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:54:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Coord;
struct PlayResult;

std::ostream& operator<<(std::ostream&, const Coord&);
std::ostream& operator<<(std::ostream&, const PlayResult&);


struct Coord {
    int64_t x;
    int64_t y;
    auto operator<=>(const Coord&) const = default;
};

struct PlayResult {
    std::vector<std::vector<std::string>> matrix;
    int64_t score;
    auto operator<=>(const PlayResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Coord& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PlayResult& v) {
    os << '{' << "'matrix': "<< "["; for(size_t i=0;i<v.matrix.size();++i){ if(i>0) os << ", "; os << v.matrix[i]; } os << "]"
 << ", " << "'score': "<< v.score
 << '}';
    return os;
}

bool is_alnum(std::string ch);
int64_t to_int(std::string token);
std::vector<std::string> split(std::string s, std::string sep);
std::vector<Coord> parse_moves(std::string input_str);
void validate_matrix_size(int64_t size);
void validate_matrix_content(const std::vector<std::string>& matrix, int64_t size);
void validate_moves(const std::vector<Coord>& moves, int64_t size);
bool contains(const std::vector<Coord>& pos, int64_t r, int64_t c);
std::vector<Coord> find_repeat(const std::vector<std::vector<std::string>>& matrix_g, int64_t row, int64_t column, int64_t size);
int64_t increment_score(int64_t count);
std::vector<std::vector<std::string>> move_x(std::vector<std::vector<std::string>>& matrix_g, int64_t column, int64_t size);
std::vector<std::vector<std::string>> move_y(std::vector<std::vector<std::string>>& matrix_g, int64_t size);
PlayResult play(std::vector<std::vector<std::string>>& matrix_g, int64_t pos_x, int64_t pos_y, int64_t size);
std::vector<std::vector<std::string>> build_matrix(const std::vector<std::string>& matrix);
int64_t process_game(int64_t size, const std::vector<std::string>& matrix, const std::vector<Coord>& moves);
int main();

bool is_alnum(std::string ch) {
    return ((((ch >= std::string("0")) && (ch <= std::string("9"))) || ((ch >= std::string("A")) && (ch <= std::string("Z")))) || ((ch >= std::string("a")) && (ch <= std::string("z"))));
}

int64_t to_int(std::string token) {
    int64_t res = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < token.size())) {
        res = ((res * int64_t(10)) + std::stoll(([&]{ std::string __s = token; long long __start = i; long long __end = (i + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })()));
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&]{ std::string __s = s; long long __start = i; long long __end = (i + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if ((ch == sep)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

std::vector<Coord> parse_moves(std::string input_str) {
    std::vector<std::string> pairs = _split(input_str, std::string(","));
    std::vector<Coord> moves = {};
    int64_t i = int64_t(0);
    while ((i < pairs.size())) {
        std::string pair = _index(pairs, i);
        std::vector<std::string> numbers = {};
        std::string num = std::string("");
        int64_t j = int64_t(0);
        while ((j < pair.size())) {
            std::string ch = ([&]{ std::string __s = pair; long long __start = j; long long __end = (j + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            if ((ch == std::string(" "))) {
                if ((num != std::string(""))) {
                    numbers = ([&]{ auto __tmp = numbers; __tmp.push_back(num); return __tmp; }());
                    num = std::string("");
                }
            } else {
                num = (num + ch);
            }
            j = (j + int64_t(1));
        }
        if ((num != std::string(""))) {
            numbers = ([&]{ auto __tmp = numbers; __tmp.push_back(num); return __tmp; }());
        }
        if ((numbers.size() != int64_t(2))) {
            throw std::runtime_error(std::string("Each move must have exactly two numbers."));
        }
        int64_t x = to_int(_index(numbers, int64_t(0)));
        int64_t y = to_int(_index(numbers, int64_t(1)));
        moves = ([&]{ auto __tmp = moves; __tmp.push_back(Coord{.x = x, .y = y}); return __tmp; }());
        i = (i + int64_t(1));
    }
    return moves;
}

void validate_matrix_size(int64_t size) {
    if ((size <= int64_t(0))) {
        throw std::runtime_error(std::string("Matrix size must be a positive integer."));
    }
}

void validate_matrix_content(const std::vector<std::string>& matrix, int64_t size) {
    if ((matrix.size() != size)) {
        throw std::runtime_error(std::string("The matrix dont match with size."));
    }
    int64_t i = int64_t(0);
    while ((i < size)) {
        std::string row = _index(matrix, i);
        if ((row.size() != size)) {
            throw std::runtime_error(((std::string("Each row in the matrix must have exactly ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << size; return ss.str(); }())) + std::string(" characters.")));
        }
        int64_t j = int64_t(0);
        while ((j < size)) {
            std::string ch = ([&]{ std::string __s = row; long long __start = j; long long __end = (j + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
            if (!is_alnum(ch)) {
                throw std::runtime_error(std::string("Matrix rows can only contain letters and numbers."));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
}

void validate_moves(const std::vector<Coord>& moves, int64_t size) {
    int64_t i = int64_t(0);
    while ((i < moves.size())) {
        Coord mv = _index(moves, i);
        if (((((mv.x < int64_t(0)) || (mv.x >= size)) || (mv.y < int64_t(0))) || (mv.y >= size))) {
            throw std::runtime_error(std::string("Move is out of bounds for a matrix."));
        }
        i = (i + int64_t(1));
    }
}

bool contains(const std::vector<Coord>& pos, int64_t r, int64_t c) {
    int64_t i = int64_t(0);
    while ((i < pos.size())) {
        Coord p = _index(pos, i);
        if (((p.x == r) && (p.y == c))) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<Coord> find_repeat(const std::vector<std::vector<std::string>>& matrix_g, int64_t row, int64_t column, int64_t size) {
    column = ((size - int64_t(1)) - column);
    std::vector<Coord> visited = {};
    std::vector<Coord> repeated = {};
    std::string color = _index(_index(matrix_g, column), row);
    if ((color == std::string("-"))) {
        return repeated;
    }
    std::vector<Coord> stack = std::vector<Coord>{Coord{.x = column, .y = row}};
    while ((stack.size() > int64_t(0))) {
        int64_t idx = (stack.size() - int64_t(1));
        Coord pos = _index(stack, idx);
        stack = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), idx - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+idx); })(stack);
        if (((((pos.x < int64_t(0)) || (pos.x >= size)) || (pos.y < int64_t(0))) || (pos.y >= size))) {
            continue;
        }
        if (contains(visited, pos.x, pos.y)) {
            continue;
        }
        visited = ([&]{ auto __tmp = visited; __tmp.push_back(pos); return __tmp; }());
        if ((_index(_index(matrix_g, pos.x), pos.y) == color)) {
            repeated = ([&]{ auto __tmp = repeated; __tmp.push_back(pos); return __tmp; }());
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(Coord{.x = (pos.x - int64_t(1)), .y = pos.y}); return __tmp; }());
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(Coord{.x = (pos.x + int64_t(1)), .y = pos.y}); return __tmp; }());
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(Coord{.x = pos.x, .y = (pos.y - int64_t(1))}); return __tmp; }());
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(Coord{.x = pos.x, .y = (pos.y + int64_t(1))}); return __tmp; }());
        }
    }
    return repeated;
}

int64_t increment_score(int64_t count) {
    return ((count * (count + int64_t(1))) / int64_t(2));
}

std::vector<std::vector<std::string>> move_x(std::vector<std::vector<std::string>>& matrix_g, int64_t column, int64_t size) {
    std::vector<std::string> new_list = {};
    int64_t row = int64_t(0);
    while ((row < size)) {
        std::string val = _index(_index(matrix_g, row), column);
        if ((val != std::string("-"))) {
            new_list = ([&]{ auto __tmp = new_list; __tmp.push_back(val); return __tmp; }());
        } else {
            new_list = _concat(std::vector<std::string>{val}, new_list);
        }
        row = (row + int64_t(1));
    }
    row = int64_t(0);
    while ((row < size)) {
        matrix_g[static_cast<size_t>(row)][static_cast<size_t>(column)] = _index(new_list, row);
        row = (row + int64_t(1));
    }
    return matrix_g;
}

std::vector<std::vector<std::string>> move_y(std::vector<std::vector<std::string>>& matrix_g, int64_t size) {
    std::vector<int64_t> empty_cols = {};
    int64_t column = (size - int64_t(1));
    while ((column >= int64_t(0))) {
        int64_t row = int64_t(0);
        bool all_empty = true;
        while ((row < size)) {
            if ((_index(_index(matrix_g, row), column) != std::string("-"))) {
                all_empty = false;
                break;
            }
            row = (row + int64_t(1));
        }
        if (all_empty) {
            empty_cols = ([&]{ auto __tmp = empty_cols; __tmp.push_back(column); return __tmp; }());
        }
        column = (column - int64_t(1));
    }
    int64_t i = int64_t(0);
    while ((i < empty_cols.size())) {
        int64_t col = _index(empty_cols, i);
        int64_t c = (col + int64_t(1));
        while ((c < size)) {
            int64_t r = int64_t(0);
            while ((r < size)) {
                matrix_g[static_cast<size_t>(r)][static_cast<size_t>((c - int64_t(1)))] = _index(_index(matrix_g, r), c);
                r = (r + int64_t(1));
            }
            c = (c + int64_t(1));
        }
        int64_t r = int64_t(0);
        while ((r < size)) {
            matrix_g[static_cast<size_t>(r)][static_cast<size_t>((size - int64_t(1)))] = std::string("-");
            r = (r + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return matrix_g;
}

PlayResult play(std::vector<std::vector<std::string>>& matrix_g, int64_t pos_x, int64_t pos_y, int64_t size) {
    std::vector<Coord> same_colors = find_repeat(matrix_g, pos_x, pos_y, size);
    if ((same_colors.size() != int64_t(0))) {
        int64_t i = int64_t(0);
        while ((i < same_colors.size())) {
            Coord p = _index(same_colors, i);
            matrix_g[static_cast<size_t>(p.x)][static_cast<size_t>(p.y)] = std::string("-");
            i = (i + int64_t(1));
        }
        int64_t column = int64_t(0);
        while ((column < size)) {
            matrix_g = move_x(matrix_g, column, size);
            column = (column + int64_t(1));
        }
        matrix_g = move_y(matrix_g, size);
    }
    int64_t sc = increment_score(same_colors.size());
    return PlayResult{.matrix = matrix_g, .score = sc};
}

std::vector<std::vector<std::string>> build_matrix(const std::vector<std::string>& matrix) {
    std::vector<std::vector<std::string>> res = {};
    int64_t i = int64_t(0);
    while ((i < matrix.size())) {
        std::string row = _index(matrix, i);
        std::vector<std::string> row_list = {};
        int64_t j = int64_t(0);
        while ((j < row.size())) {
            row_list = ([&]{ auto __tmp = row_list; __tmp.push_back(([&]{ std::string __s = row; long long __start = j; long long __end = (j + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })()); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row_list); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

int64_t process_game(int64_t size, const std::vector<std::string>& matrix, const std::vector<Coord>& moves) {
    std::vector<std::vector<std::string>> game_matrix = build_matrix(matrix);
    int64_t total = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < moves.size())) {
        Coord mv = _index(moves, i);
        PlayResult res = ([&]{ auto __arg2 = mv.y; return play(game_matrix, mv.x, __arg2, size); }());
        game_matrix = res.matrix;
        total = (total + res.score);
        i = (i + int64_t(1));
    }
    return total;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t size = int64_t(4);
        std::vector<std::string> matrix = std::vector<std::string>{std::string("RRBG"), std::string("RBBG"), std::string("YYGG"), std::string("XYGG")};
        std::vector<Coord> moves = parse_moves(std::string("0 1,1 1"));
        validate_matrix_size(size);
        validate_matrix_content(matrix, size);
        validate_moves(moves, size);
        int64_t score = process_game(size, matrix, moves);
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << score; return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
