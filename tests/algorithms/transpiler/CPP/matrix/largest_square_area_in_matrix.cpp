// Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:51:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t update_area_of_max_square(int64_t row, int64_t col, int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat, std::vector<int64_t>& largest_square_area);
int64_t largest_square_area_in_matrix_top_down(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat);
int64_t update_area_of_max_square_with_dp(int64_t row, int64_t col, int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat, std::vector<std::vector<int64_t>>& dp_array, std::vector<int64_t>& largest_square_area);
int64_t largest_square_area_in_matrix_top_down_with_dp(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat);
int64_t largest_square_area_in_matrix_bottom_up(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat);
int64_t largest_square_area_in_matrix_bottom_up_space_optimization(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat);
int main();

std::vector<std::vector<int64_t>> sample = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(1)}};

int64_t update_area_of_max_square(int64_t row, int64_t col, int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat, std::vector<int64_t>& largest_square_area) {
    if (((row >= rows) || (col >= cols))) {
        return int64_t(0);
    }
    int64_t right = update_area_of_max_square(row, (col + int64_t(1)), rows, cols, mat, largest_square_area);
    int64_t diagonal = update_area_of_max_square((row + int64_t(1)), (col + int64_t(1)), rows, cols, mat, largest_square_area);
    int64_t down = update_area_of_max_square((row + int64_t(1)), col, rows, cols, mat, largest_square_area);
    if ((_index(_index(mat, row), col) == int64_t(1))) {
        int64_t sub = (int64_t(1) + ([&]{ auto __tmp = std::vector<int64_t>{right, diagonal, down}; return *std::min_element(__tmp.begin(), __tmp.end()); }()));
        if ((sub > _index(largest_square_area, int64_t(0)))) {
            largest_square_area[static_cast<size_t>(int64_t(0))] = sub;
        }
        return sub;
    } else {
        return int64_t(0);
    }
}

int64_t largest_square_area_in_matrix_top_down(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat) {
    std::vector<int64_t> largest = std::vector<int64_t>{int64_t(0)};
    update_area_of_max_square(int64_t(0), int64_t(0), rows, cols, mat, largest);
    return _index(largest, int64_t(0));
}

int64_t update_area_of_max_square_with_dp(int64_t row, int64_t col, int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat, std::vector<std::vector<int64_t>>& dp_array, std::vector<int64_t>& largest_square_area) {
    if (((row >= rows) || (col >= cols))) {
        return int64_t(0);
    }
    if ((_index(_index(dp_array, row), col) != -int64_t(1))) {
        return _index(_index(dp_array, row), col);
    }
    int64_t right = update_area_of_max_square_with_dp(row, (col + int64_t(1)), rows, cols, mat, dp_array, largest_square_area);
    int64_t diagonal = update_area_of_max_square_with_dp((row + int64_t(1)), (col + int64_t(1)), rows, cols, mat, dp_array, largest_square_area);
    int64_t down = update_area_of_max_square_with_dp((row + int64_t(1)), col, rows, cols, mat, dp_array, largest_square_area);
    if ((_index(_index(mat, row), col) == int64_t(1))) {
        int64_t sub = (int64_t(1) + ([&]{ auto __tmp = std::vector<int64_t>{right, diagonal, down}; return *std::min_element(__tmp.begin(), __tmp.end()); }()));
        if ((sub > _index(largest_square_area, int64_t(0)))) {
            largest_square_area[static_cast<size_t>(int64_t(0))] = sub;
        }
        dp_array[static_cast<size_t>(row)][static_cast<size_t>(col)] = sub;
        return sub;
    } else {
        dp_array[static_cast<size_t>(row)][static_cast<size_t>(col)] = int64_t(0);
        return int64_t(0);
    }
}

int64_t largest_square_area_in_matrix_top_down_with_dp(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat) {
    std::vector<int64_t> largest = std::vector<int64_t>{int64_t(0)};
    std::vector<std::vector<int64_t>> dp_array = {};
    int64_t r = int64_t(0);
    while ((r < rows)) {
        std::vector<int64_t> row_list = {};
        int64_t c = int64_t(0);
        while ((c < cols)) {
            row_list = ([&]{ auto __tmp = row_list; __tmp.push_back(-int64_t(1)); return __tmp; }());
            c = (c + int64_t(1));
        }
        dp_array = ([&]{ auto __tmp = dp_array; __tmp.push_back(row_list); return __tmp; }());
        r = (r + int64_t(1));
    }
    update_area_of_max_square_with_dp(int64_t(0), int64_t(0), rows, cols, mat, dp_array, largest);
    return _index(largest, int64_t(0));
}

int64_t largest_square_area_in_matrix_bottom_up(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat) {
    std::vector<std::vector<int64_t>> dp_array = {};
    int64_t r = int64_t(0);
    while ((r <= rows)) {
        std::vector<int64_t> row_list = {};
        int64_t c = int64_t(0);
        while ((c <= cols)) {
            row_list = ([&]{ auto __tmp = row_list; __tmp.push_back(int64_t(0)); return __tmp; }());
            c = (c + int64_t(1));
        }
        dp_array = ([&]{ auto __tmp = dp_array; __tmp.push_back(row_list); return __tmp; }());
        r = (r + int64_t(1));
    }
    int64_t largest = int64_t(0);
    int64_t row = (rows - int64_t(1));
    while ((row >= int64_t(0))) {
        int64_t col = (cols - int64_t(1));
        while ((col >= int64_t(0))) {
            int64_t right = _index(_index(dp_array, row), (col + int64_t(1)));
            int64_t diagonal = _index(_index(dp_array, (row + int64_t(1))), (col + int64_t(1)));
            int64_t bottom = _index(_index(dp_array, (row + int64_t(1))), col);
            if ((_index(_index(mat, row), col) == int64_t(1))) {
                int64_t value = (int64_t(1) + ([&]{ auto __tmp = std::vector<int64_t>{right, diagonal, bottom}; return *std::min_element(__tmp.begin(), __tmp.end()); }()));
                dp_array[static_cast<size_t>(row)][static_cast<size_t>(col)] = value;
                if ((value > largest)) {
                    largest = value;
                }
            } else {
                dp_array[static_cast<size_t>(row)][static_cast<size_t>(col)] = int64_t(0);
            }
            col = (col - int64_t(1));
        }
        row = (row - int64_t(1));
    }
    return largest;
}

int64_t largest_square_area_in_matrix_bottom_up_space_optimization(int64_t rows, int64_t cols, const std::vector<std::vector<int64_t>>& mat) {
    std::vector<int64_t> current_row = {};
    int64_t i = int64_t(0);
    while ((i <= cols)) {
        current_row = ([&]{ auto __tmp = current_row; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> next_row = {};
    int64_t j = int64_t(0);
    while ((j <= cols)) {
        next_row = ([&]{ auto __tmp = next_row; __tmp.push_back(int64_t(0)); return __tmp; }());
        j = (j + int64_t(1));
    }
    int64_t largest = int64_t(0);
    int64_t row = (rows - int64_t(1));
    while ((row >= int64_t(0))) {
        int64_t col = (cols - int64_t(1));
        while ((col >= int64_t(0))) {
            int64_t right = _index(current_row, (col + int64_t(1)));
            int64_t diagonal = _index(next_row, (col + int64_t(1)));
            int64_t bottom = _index(next_row, col);
            if ((_index(_index(mat, row), col) == int64_t(1))) {
                int64_t value = (int64_t(1) + ([&]{ auto __tmp = std::vector<int64_t>{right, diagonal, bottom}; return *std::min_element(__tmp.begin(), __tmp.end()); }()));
                current_row[static_cast<size_t>(col)] = value;
                if ((value > largest)) {
                    largest = value;
                }
            } else {
                current_row[static_cast<size_t>(col)] = int64_t(0);
            }
            col = (col - int64_t(1));
        }
        next_row = current_row;
        current_row = {};
        int64_t t = int64_t(0);
        while ((t <= cols)) {
            current_row = ([&]{ auto __tmp = current_row; __tmp.push_back(int64_t(0)); return __tmp; }());
            t = (t + int64_t(1));
        }
        row = (row - int64_t(1));
    }
    return largest;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << largest_square_area_in_matrix_top_down(int64_t(2), int64_t(2), sample);
        std::cout << std::endl;
        std::cout << largest_square_area_in_matrix_top_down_with_dp(int64_t(2), int64_t(2), sample);
        std::cout << std::endl;
        std::cout << largest_square_area_in_matrix_bottom_up(int64_t(2), int64_t(2), sample);
        std::cout << std::endl;
        std::cout << largest_square_area_in_matrix_bottom_up_space_optimization(int64_t(2), int64_t(2), sample);
        std::cout << std::endl;
    }
    return 0;
}
