// Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:54:29 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Matrix;

std::ostream& operator<<(std::ostream&, const Matrix&);


struct Matrix {
    std::vector<std::vector<double>> data;
    int64_t rows;
    int64_t cols;
    auto operator<=>(const Matrix&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Matrix& v) {
    os << '{' << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << ", " << "'rows': "<< v.rows
 << ", " << "'cols': "<< v.cols
 << '}';
    return os;
}

Matrix make_matrix(const std::vector<std::vector<double>>& values);
std::vector<std::vector<double>> matrix_columns(const Matrix& m);
Matrix matrix_identity(const Matrix& m);
double matrix_minor(const Matrix& m, int64_t r, int64_t c);
double matrix_cofactor(const Matrix& m, int64_t r, int64_t c);
Matrix matrix_minors(const Matrix& m);
Matrix matrix_cofactors(const Matrix& m);
double matrix_determinant(const Matrix& m);
bool matrix_is_invertible(const Matrix& m);
Matrix matrix_adjugate(const Matrix& m);
Matrix matrix_inverse(const Matrix& m);
Matrix matrix_add_row(const Matrix& m, const std::vector<double>& row);
Matrix matrix_add_column(const Matrix& m, const std::vector<double>& col);
Matrix matrix_mul_scalar(const Matrix& m, double s);
Matrix matrix_neg(const Matrix& m);
Matrix matrix_add(const Matrix& a, const Matrix& b);
Matrix matrix_sub(const Matrix& a, const Matrix& b);
double matrix_dot(const std::vector<double>& row, const std::vector<double>& col);
Matrix matrix_mul(const Matrix& a, const Matrix& b);
Matrix matrix_pow(const Matrix& m, int64_t p);
std::string matrix_to_string(const Matrix& m);
int main();

Matrix make_matrix(const std::vector<std::vector<double>>& values) {
    int64_t r = values.size();
    if ((r == int64_t(0))) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
    }
    int64_t c = _index(values, int64_t(0)).size();
    int64_t i = int64_t(0);
    while ((i < r)) {
        if ((_index(values, i).size() != c)) {
            return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
        }
        i = (i + int64_t(1));
    }
    return Matrix{.data = values, .rows = r, .cols = c};
}

std::vector<std::vector<double>> matrix_columns(const Matrix& m) {
    std::vector<std::vector<double>> cols = {};
    int64_t j = int64_t(0);
    while ((j < m.cols)) {
        std::vector<double> col = {};
        int64_t i = int64_t(0);
        while ((i < m.rows)) {
            col = ([&]{ auto __tmp = col; __tmp.push_back(_index(_index(m.data, i), j)); return __tmp; }());
            i = (i + int64_t(1));
        }
        cols = ([&]{ auto __tmp = cols; __tmp.push_back(col); return __tmp; }());
        j = (j + int64_t(1));
    }
    return cols;
}

Matrix matrix_identity(const Matrix& m) {
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m.cols)) {
            double v = ((i == j) ? 1.0 : 0.0);
            row = ([&]{ auto __tmp = row; __tmp.push_back(v); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = m.rows, .cols = m.cols};
}

double matrix_minor(const Matrix& m, int64_t r, int64_t c) {
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        if ((i != r)) {
            std::vector<double> row = {};
            int64_t j = int64_t(0);
            while ((j < m.cols)) {
                if ((j != c)) {
                    row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(m.data, i), j)); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    Matrix sub = Matrix{.data = vals, .rows = (m.rows - int64_t(1)), .cols = (m.cols - int64_t(1))};
    return matrix_determinant(sub);
}

double matrix_cofactor(const Matrix& m, int64_t r, int64_t c) {
    double minor = matrix_minor(m, r, c);
    if ((((r + c) % int64_t(2)) == int64_t(0))) {
        return minor;
    }
    return (-1.0 * minor);
}

Matrix matrix_minors(const Matrix& m) {
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(matrix_minor(m, i, j)); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = m.rows, .cols = m.cols};
}

Matrix matrix_cofactors(const Matrix& m) {
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(matrix_cofactor(m, i, j)); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = m.rows, .cols = m.cols};
}

double matrix_determinant(const Matrix& m) {
    if ((m.rows != m.cols)) {
        return 0.0;
    }
    if ((m.rows == int64_t(0))) {
        return 0.0;
    }
    if ((m.rows == int64_t(1))) {
        return _index(_index(m.data, int64_t(0)), int64_t(0));
    }
    if ((m.rows == int64_t(2))) {
        return ((_index(_index(m.data, int64_t(0)), int64_t(0)) * _index(_index(m.data, int64_t(1)), int64_t(1))) - (_index(_index(m.data, int64_t(0)), int64_t(1)) * _index(_index(m.data, int64_t(1)), int64_t(0))));
    }
    double sum = 0.0;
    int64_t j = int64_t(0);
    while ((j < m.cols)) {
        sum = (sum + (_index(_index(m.data, int64_t(0)), j) * matrix_cofactor(m, int64_t(0), j)));
        j = (j + int64_t(1));
    }
    return sum;
}

bool matrix_is_invertible(const Matrix& m) {
    return (matrix_determinant(m) != 0.0);
}

Matrix matrix_adjugate(const Matrix& m) {
    Matrix cof = matrix_cofactors(m);
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(cof.data, j), i)); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = m.rows, .cols = m.cols};
}

Matrix matrix_inverse(const Matrix& m) {
    double det = matrix_determinant(m);
    if ((det == 0.0)) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
    }
    Matrix adj = matrix_adjugate(m);
    return matrix_mul_scalar(adj, ((double)(1.0) / (det)));
}

Matrix matrix_add_row(const Matrix& m, const std::vector<double>& row) {
    std::vector<std::vector<double>> newData = m.data;
    newData = ([&]{ auto __tmp = newData; __tmp.push_back(row); return __tmp; }());
    return Matrix{.data = newData, .rows = (m.rows + int64_t(1)), .cols = m.cols};
}

Matrix matrix_add_column(const Matrix& m, const std::vector<double>& col) {
    std::vector<std::vector<double>> newData = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        newData = ([&]{ auto __tmp = newData; __tmp.push_back((std::vector<double>)([&]{ auto __tmp = _index(m.data, i); __tmp.push_back(_index(col, i)); return __tmp; }())); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = newData, .rows = m.rows, .cols = (m.cols + int64_t(1))};
}

Matrix matrix_mul_scalar(const Matrix& m, double s) {
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(m.data, i), j) * s)); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = m.rows, .cols = m.cols};
}

Matrix matrix_neg(const Matrix& m) {
    return matrix_mul_scalar(m, -1.0);
}

Matrix matrix_add(const Matrix& a, const Matrix& b) {
    if (((a.rows != b.rows) || (a.cols != b.cols))) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
    }
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < a.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < a.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(a.data, i), j) + _index(_index(b.data, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = a.rows, .cols = a.cols};
}

Matrix matrix_sub(const Matrix& a, const Matrix& b) {
    if (((a.rows != b.rows) || (a.cols != b.cols))) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
    }
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < a.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < a.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(a.data, i), j) - _index(_index(b.data, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = a.rows, .cols = a.cols};
}

double matrix_dot(const std::vector<double>& row, const std::vector<double>& col) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < row.size())) {
        sum = (sum + (_index(row, i) * _index(col, i)));
        i = (i + int64_t(1));
    }
    return sum;
}

Matrix matrix_mul(const Matrix& a, const Matrix& b) {
    if ((a.cols != b.rows)) {
        return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
    }
    std::vector<std::vector<double>> bcols = matrix_columns(b);
    std::vector<std::vector<double>> vals = {};
    int64_t i = int64_t(0);
    while ((i < a.rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < b.cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(matrix_dot(_index(a.data, i), _index(bcols, j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Matrix{.data = vals, .rows = a.rows, .cols = b.cols};
}

Matrix matrix_pow(const Matrix& m, int64_t p) {
    if ((p == int64_t(0))) {
        return matrix_identity(m);
    }
    if ((p < int64_t(0))) {
        if (matrix_is_invertible(m)) {
            return matrix_pow(matrix_inverse(m), -p);
        }
        return Matrix{.data = std::vector<std::vector<double>>{}, .rows = int64_t(0), .cols = int64_t(0)};
    }
    Matrix result = m;
    int64_t i = int64_t(1);
    while ((i < p)) {
        result = matrix_mul(result, m);
        i = (i + int64_t(1));
    }
    return result;
}

std::string matrix_to_string(const Matrix& m) {
    if ((m.rows == int64_t(0))) {
        return std::string("[]");
    }
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < m.rows)) {
        s = (s + std::string("["));
        int64_t j = int64_t(0);
        while ((j < m.cols)) {
            s = (s + _to_string(_index(_index(m.data, i), j)));
            if ((j < (m.cols - int64_t(1)))) {
                s = (s + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        s = (s + std::string("]"));
        if ((i < (m.rows - int64_t(1)))) {
            s = (s + std::string("\n "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Matrix m = make_matrix(std::vector<std::vector<double>>{std::vector<double>{1.0, 2.0, 3.0}, std::vector<double>{4.0, 5.0, 6.0}, std::vector<double>{7.0, 8.0, 9.0}});
        std::cout << matrix_to_string(m);
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = matrix_columns(m); ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ((([&]{ std::ostringstream ss; ss << std::boolalpha << m.rows; return ss.str(); }()) + std::string(",")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << m.cols; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << matrix_is_invertible(m); return ss.str(); }());
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_identity(m));
        std::cout << std::endl;
        std::cout << _to_string(matrix_determinant(m));
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_minors(m));
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_cofactors(m));
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_adjugate(m));
        std::cout << std::endl;
        Matrix m2 = matrix_mul_scalar(m, 3.0);
        std::cout << matrix_to_string(m2);
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_add(m, m2));
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_sub(m, m2));
        std::cout << std::endl;
        std::cout << matrix_to_string(matrix_pow(m, int64_t(3)));
        std::cout << std::endl;
        Matrix m3 = matrix_add_row(m, std::vector<double>{10.0, 11.0, 12.0});
        std::cout << matrix_to_string(m3);
        std::cout << std::endl;
        Matrix m4 = matrix_add_column(m2, std::vector<double>{8.0, 16.0, 32.0});
        std::cout << matrix_to_string(matrix_mul(m3, m4));
        std::cout << std::endl;
    }
    return 0;
}
