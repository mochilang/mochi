// Generated by Mochi transpiler v0.10.67 on 2025-08-17 13:54:43 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::vector<std::vector<double>> add(const std::vector<std::vector<std::vector<double>>>& matrices);
std::vector<std::vector<double>> subtract(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
std::vector<std::vector<double>> scalar_multiply(const std::vector<std::vector<double>>& matrix, double n);
std::vector<std::vector<double>> multiply(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
std::vector<std::vector<double>> identity(int64_t n);
std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& matrix);
std::vector<std::vector<double>> minor(const std::vector<std::vector<double>>& matrix, int64_t row, int64_t column);
double determinant(const std::vector<std::vector<double>>& matrix);
std::vector<std::vector<double>> inverse(const std::vector<std::vector<double>>& matrix);
int main();

std::vector<std::vector<double>> add(const std::vector<std::vector<std::vector<double>>>& matrices) {
    int64_t rows = _index(matrices, int64_t(0)).size();
    int64_t cols = _index(_index(matrices, int64_t(0)), int64_t(0)).size();
    int64_t r = int64_t(0);
    std::vector<std::vector<double>> result = {};
    while ((r < rows)) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c < cols)) {
            double sum = 0.0;
            int64_t m = int64_t(0);
            while ((m < matrices.size())) {
                sum = (sum + _index(_index(_index(matrices, m), r), c));
                m = (m + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(sum); return __tmp; }());
            c = (c + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return result;
}

std::vector<std::vector<double>> subtract(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int64_t rows = a.size();
    int64_t cols = _index(a, int64_t(0)).size();
    int64_t r = int64_t(0);
    std::vector<std::vector<double>> result = {};
    while ((r < rows)) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c < cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(a, r), c) - _index(_index(b, r), c))); return __tmp; }());
            c = (c + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return result;
}

std::vector<std::vector<double>> scalar_multiply(const std::vector<std::vector<double>>& matrix, double n) {
    std::vector<std::vector<double>> result = {};
    int64_t i = int64_t(0);
    while ((i < matrix.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(matrix, i).size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(matrix, i), j) * n)); return __tmp; }());
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<double>> multiply(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int64_t rowsA = a.size();
    int64_t colsA = _index(a, int64_t(0)).size();
    int64_t rowsB = b.size();
    int64_t colsB = _index(b, int64_t(0)).size();
    std::vector<std::vector<double>> result = {};
    int64_t i = int64_t(0);
    while ((i < rowsA)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < colsB)) {
            double sum = 0.0;
            int64_t k = int64_t(0);
            while ((k < colsA)) {
                sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)));
                k = (k + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(sum); return __tmp; }());
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<double>> identity(int64_t n) {
    std::vector<std::vector<double>> result = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            if ((i == j)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(1.0); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& matrix) {
    int64_t rows = matrix.size();
    int64_t cols = _index(matrix, int64_t(0)).size();
    std::vector<std::vector<double>> result = {};
    int64_t c = int64_t(0);
    while ((c < cols)) {
        std::vector<double> row = {};
        int64_t r = int64_t(0);
        while ((r < rows)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(matrix, r), c)); return __tmp; }());
            r = (r + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        c = (c + int64_t(1));
    }
    return result;
}

std::vector<std::vector<double>> minor(const std::vector<std::vector<double>>& matrix, int64_t row, int64_t column) {
    std::vector<std::vector<double>> result = {};
    int64_t i = int64_t(0);
    while ((i < matrix.size())) {
        if ((i != row)) {
            std::vector<double> new_row = {};
            int64_t j = int64_t(0);
            while ((j < _index(matrix, i).size())) {
                if ((j != column)) {
                    new_row = ([&]{ auto __tmp = new_row; __tmp.push_back(_index(_index(matrix, i), j)); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            result = ([&]{ auto __tmp = result; __tmp.push_back(new_row); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return result;
}

double determinant(const std::vector<std::vector<double>>& matrix) {
    if ((matrix.size() == int64_t(1))) {
        return _index(_index(matrix, int64_t(0)), int64_t(0));
    }
    double det = 0.0;
    int64_t c = int64_t(0);
    while ((c < _index(matrix, int64_t(0)).size())) {
        std::vector<std::vector<double>> sub = minor(matrix, int64_t(0), c);
        double sign = (((c % int64_t(2)) == int64_t(0)) ? 1.0 : -1.0);
        det = (det + ((_index(_index(matrix, int64_t(0)), c) * determinant(sub)) * sign));
        c = (c + int64_t(1));
    }
    return det;
}

std::vector<std::vector<double>> inverse(const std::vector<std::vector<double>>& matrix) {
    double det = determinant(matrix);
    if ((det == 0.0)) {
        return std::vector<std::vector<double>>{};
    }
    int64_t size = matrix.size();
    std::vector<std::vector<double>> matrix_minor = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < size)) {
            std::vector<std::vector<double>> m = minor(matrix, i, j);
            row = ([&]{ auto __tmp = row; __tmp.push_back(determinant(m)); return __tmp; }());
            j = (j + int64_t(1));
        }
        matrix_minor = ([&]{ auto __tmp = matrix_minor; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<double>> cofactors = {};
    i = int64_t(0);
    while ((i < size)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < size)) {
            double sign = ((((i + j) % int64_t(2)) == int64_t(0)) ? 1.0 : -1.0);
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(matrix_minor, i), j) * sign)); return __tmp; }());
            j = (j + int64_t(1));
        }
        cofactors = ([&]{ auto __tmp = cofactors; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<double>> adjugate = transpose(cofactors);
    return scalar_multiply(adjugate, ((double)(1.0) / (det)));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<double>> matrix_a = std::vector<std::vector<double>>{std::vector<double>{12.0, 10.0}, std::vector<double>{3.0, 9.0}};
        std::vector<std::vector<double>> matrix_b = std::vector<std::vector<double>>{std::vector<double>{3.0, 4.0}, std::vector<double>{7.0, 4.0}};
        std::vector<std::vector<double>> matrix_c = std::vector<std::vector<double>>{std::vector<double>{11.0, 12.0, 13.0, 14.0}, std::vector<double>{21.0, 22.0, 23.0, 24.0}, std::vector<double>{31.0, 32.0, 33.0, 34.0}, std::vector<double>{41.0, 42.0, 43.0, 44.0}};
        std::vector<std::vector<double>> matrix_d = std::vector<std::vector<double>>{std::vector<double>{3.0, 0.0, 2.0}, std::vector<double>{2.0, 0.0, -2.0}, std::vector<double>{0.0, 1.0, 1.0}};
        std::cout << ((std::string("Add Operation, add(matrix_a, matrix_b) = ") + ([&]{ std::ostringstream ss; { auto __tmp1 = add(std::vector<std::vector<std::vector<double>>>{matrix_a, matrix_b}); ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string(" \n"));
        std::cout << std::endl;
        std::cout << ((std::string("Multiply Operation, multiply(matrix_a, matrix_b) = ") + ([&]{ std::ostringstream ss; { auto __tmp3 = multiply(matrix_a, matrix_b); ss << "["; for(size_t i=0;i<__tmp3.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp4 = __tmp3[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp4.size();++i){ if(i>0) __ss << ' '; __ss << __tmp4[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string(" \n"));
        std::cout << std::endl;
        std::cout << ((std::string("Identity: ") + ([&]{ std::ostringstream ss; { auto __tmp5 = identity(int64_t(5)); ss << "["; for(size_t i=0;i<__tmp5.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp6 = __tmp5[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp6.size();++i){ if(i>0) __ss << ' '; __ss << __tmp6[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string("\n"));
        std::cout << std::endl;
        std::cout << ((((std::string("Minor of ") + ([&]{ std::ostringstream ss; { auto __tmp7 = matrix_c; ss << "["; for(size_t i=0;i<__tmp7.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp8 = __tmp7[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp8.size();++i){ if(i>0) __ss << ' '; __ss << __tmp8[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string(" = ")) + ([&]{ std::ostringstream ss; { auto __tmp9 = minor(matrix_c, int64_t(1), int64_t(2)); ss << "["; for(size_t i=0;i<__tmp9.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp10 = __tmp9[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp10.size();++i){ if(i>0) __ss << ' '; __ss << __tmp10[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string(" \n"));
        std::cout << std::endl;
        std::cout << ((((std::string("Determinant of ") + ([&]{ std::ostringstream ss; { auto __tmp11 = matrix_b; ss << "["; for(size_t i=0;i<__tmp11.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp12 = __tmp11[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp12.size();++i){ if(i>0) __ss << ' '; __ss << __tmp12[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string(" = ")) + _to_string(determinant(matrix_b))) + std::string(" \n"));
        std::cout << std::endl;
        std::cout << ((((std::string("Inverse of ") + ([&]{ std::ostringstream ss; { auto __tmp13 = matrix_d; ss << "["; for(size_t i=0;i<__tmp13.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp14 = __tmp13[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp14.size();++i){ if(i>0) __ss << ' '; __ss << __tmp14[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string(" = ")) + ([&]{ std::ostringstream ss; { auto __tmp15 = inverse(matrix_d); ss << "["; for(size_t i=0;i<__tmp15.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp16 = __tmp15[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp16.size();++i){ if(i>0) __ss << ' '; __ss << __tmp16[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }())) + std::string("\n"));
        std::cout << std::endl;
    }
    return 0;
}
