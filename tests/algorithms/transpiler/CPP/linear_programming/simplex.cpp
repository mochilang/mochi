// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:05:17 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <type_traits>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<double>> pivot(std::vector<std::vector<double>> t, int64_t row, int64_t col);
std::vector<int64_t> findPivot(const std::vector<std::vector<double>>& t);
std::map<std::string, double> interpret(const std::vector<std::vector<double>>& t, int64_t nVars);
std::vector<std::vector<double>> simplex(const std::vector<std::vector<double>>& tab);
int main();

std::vector<std::vector<double>> tableau = std::vector<std::vector<double>>{std::vector<double>{-1.0, -1.0, 0.0, 0.0, 0.0}, std::vector<double>{1.0, 3.0, 1.0, 0.0, 4.0}, std::vector<double>{3.0, 1.0, 0.0, 1.0, 4.0}};
std::vector<std::vector<double>> finalTab = std::vector<std::vector<double>>{};
std::map<std::string, double> res = std::map<std::string, double>{};

std::vector<std::vector<double>> pivot(std::vector<std::vector<double>> t, int64_t row, int64_t col) {
    std::vector<double> pivotRow = {};
    double pivotVal = _index(_index(t, row), col);
    for (int j = int64_t(0); j < _index(t, row).size(); j++ ) {
        pivotRow = ([&]{ auto& __tmp = pivotRow; __tmp.push_back(((double)(_index(_index(t, row), j)) / (pivotVal))); return __tmp; }());
    }
    t[row] = pivotRow;
    for (int i = int64_t(0); i < t.size(); i++ ) {
        if ((i != row)) {
            double factor = _index(_index(t, i), col);
            std::vector<double> newRow = {};
            for (int j = int64_t(0); j < _index(t, i).size(); j++ ) {
                double value = (_index(_index(t, i), j) - (factor * _index(pivotRow, j)));
                newRow = ([&]{ auto& __tmp = newRow; __tmp.push_back(value); return __tmp; }());
            }
            t[i] = newRow;
        }
    }
    return t;
}

std::vector<int64_t> findPivot(const std::vector<std::vector<double>>& t) {
    int64_t col = int64_t(0);
    double minVal = 0.0;
    for (int j = int64_t(0); j < (_index(t, int64_t(0)).size() - int64_t(1)); j++ ) {
        double v = _index(_index(t, int64_t(0)), j);
        if ((v < minVal)) {
            minVal = v;
            col = j;
        }
    }
    if ((minVal >= 0.0)) {
        return std::vector<int64_t>{-int64_t(1), -int64_t(1)};
    }
    int64_t row = -int64_t(1);
    double minRatio = 0.0;
    bool first = true;
    for (int i = int64_t(1); i < t.size(); i++ ) {
        double coeff = _index(_index(t, i), col);
        if ((coeff > 0.0)) {
            double rhs = _index(t, i)[static_cast<size_t>((_index(t, i).size() - int64_t(1)))];
            double ratio = ((double)(rhs) / (coeff));
            if ((first || (ratio < minRatio))) {
                minRatio = ratio;
                row = i;
                first = false;
            }
        }
    }
    return std::vector<int64_t>{row, col};
}

std::map<std::string, double> interpret(const std::vector<std::vector<double>>& t, int64_t nVars) {
    int64_t lastCol = (_index(t, int64_t(0)).size() - int64_t(1));
    double p = _index(_index(t, int64_t(0)), lastCol);
    if ((p < 0.0)) {
        p = -p;
    }
    std::map<std::string, double> result = {};
    result[std::string("P")] = p;
    for (int i = int64_t(0); i < nVars; i++ ) {
        int64_t nzRow = -int64_t(1);
        int64_t nzCount = int64_t(0);
        for (int r = int64_t(0); r < t.size(); r++ ) {
            double val = _index(_index(t, r), i);
            if ((val != 0.0)) {
                nzCount = (nzCount + int64_t(1));
                nzRow = r;
            }
        }
        if (((nzCount == int64_t(1)) && (_index(_index(t, nzRow), i) == 1.0))) {
            result[(std::string("x") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }()))] = _index(_index(t, nzRow), lastCol);
        }
    }
    return result;
}

std::vector<std::vector<double>> simplex(const std::vector<std::vector<double>>& tab) {
    std::vector<std::vector<double>> t = tab;
    while (true) {
        std::vector<int64_t> p = findPivot(t);
        int64_t row = _index(p, int64_t(0));
        int64_t col = _index(p, int64_t(1));
        if ((row < int64_t(0))) {
            break;
        }
        t = pivot(t, row, col);
    }
    return t;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        finalTab = simplex(tableau);
        res = interpret(finalTab, int64_t(2));
        std::cout << (std::string("P: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("P")); if (__it == __m.end()) return double{}; return __it->second; })(res); return ss.str(); }()));
        std::cout << std::endl;
        for (int i = int64_t(0); i < int64_t(2); i++ ) {
            std::string key = (std::string("x") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }()));
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(res, key)) {
                std::cout << ((key + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return double{}; return __it->second; })(res); return ss.str(); }()));
                std::cout << std::endl;
            }
        }
    }
    return 0;
}
