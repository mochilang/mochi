// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Product;

std::ostream& operator<<(std::ostream&, const Product&);


struct Product {
    std::string title;
    std::string link;
    std::string price;
    std::string rating;
    std::string mrp;
    double discount;
    auto operator<=>(const Product&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Product& v) {
    os << '{' << "'title': "<< "'" << v.title << "'"
 << ", " << "'link': "<< "'" << v.link << "'"
 << ", " << "'price': "<< "'" << v.price << "'"
 << ", " << "'rating': "<< "'" << v.rating << "'"
 << ", " << "'mrp': "<< "'" << v.mrp << "'"
 << ", " << "'discount': "<< std::fixed << std::setprecision(1) << v.discount
 << '}';
    return os;
}

int64_t find_index(std::string s, std::string pat, int64_t start);
std::string slice_between(std::string s, std::string start_pat, std::string end_pat, int64_t from);
int64_t char_to_digit(std::string c);
int64_t parse_int(std::string txt);
Product parse_product(std::string block);
std::vector<Product> get_amazon_product_data(std::string product);
int main();

int64_t find_index(std::string s, std::string pat, int64_t start) {
    int64_t i = start;
    while ((i <= (s.size() - pat.size()))) {
        int64_t j = int64_t(0);
        bool ok = true;
        while ((j < pat.size())) {
            if ((([&](const auto& __s){ auto __i = (i + j); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) != ([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(pat))) {
                ok = false;
                break;
            }
            j = (j + int64_t(1));
        }
        if (ok) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string slice_between(std::string s, std::string start_pat, std::string end_pat, int64_t from) {
    int64_t a = find_index(s, start_pat, from);
    if ((a < int64_t(0))) {
        return std::string("");
    }
    int64_t b = (a + start_pat.size());
    int64_t c = find_index(s, end_pat, b);
    if ((c < int64_t(0))) {
        return std::string("");
    }
    return s.substr(b, c - b);
}

int64_t char_to_digit(std::string c) {
    if ((c == std::string("0"))) {
        return int64_t(0);
    }
    if ((c == std::string("1"))) {
        return int64_t(1);
    }
    if ((c == std::string("2"))) {
        return int64_t(2);
    }
    if ((c == std::string("3"))) {
        return int64_t(3);
    }
    if ((c == std::string("4"))) {
        return int64_t(4);
    }
    if ((c == std::string("5"))) {
        return int64_t(5);
    }
    if ((c == std::string("6"))) {
        return int64_t(6);
    }
    if ((c == std::string("7"))) {
        return int64_t(7);
    }
    if ((c == std::string("8"))) {
        return int64_t(8);
    }
    return int64_t(9);
}

int64_t parse_int(std::string txt) {
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < txt.size())) {
        std::string c = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(txt);
        if (((c >= std::string("0")) && (c <= std::string("9")))) {
            n = ((n * int64_t(10)) + char_to_digit(c));
        }
        i = (i + int64_t(1));
    }
    return n;
}

Product parse_product(std::string block) {
    std::string href = slice_between(block, std::string("href=\""), std::string("\""), int64_t(0));
    std::string link = (std::string("https://www.amazon.in") + href);
    std::string title = slice_between(block, std::string(">"), std::string("</a>"), find_index(block, std::string("<a"), int64_t(0)));
    std::string price = slice_between(block, std::string("<span class=\"a-offscreen\">"), std::string("</span>"), int64_t(0));
    std::string rating = slice_between(block, std::string("<span class=\"a-icon-alt\">"), std::string("</span>"), int64_t(0));
    if ((rating.size() == int64_t(0))) {
        rating = std::string("Not available");
    }
    std::string mrp = slice_between(block, std::string("<span class=\"a-price a-text-price\">"), std::string("</span>"), int64_t(0));
    double disc = 0.0;
    if (((mrp.size() > int64_t(0)) && (price.size() > int64_t(0)))) {
        int64_t p = parse_int(price);
        int64_t m = parse_int(mrp);
        if ((m > int64_t(0))) {
            disc = ((double)((double)(((m - p) * int64_t(100)))) / ((double)(m)));
        }
    } else {
        mrp = std::string("");
        disc = 0.0;
    }
    return Product{.title = title, .link = link, .price = price, .rating = rating, .mrp = mrp, .discount = disc};
}

std::vector<Product> get_amazon_product_data(std::string product) {
    std::string html = std::string("<div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/sample_product\">Sample Product</a></h2><span class=\"a-offscreen\">₹900</span><span class=\"a-icon-alt\">4.3 out of 5 stars</span><span class=\"a-price a-text-price\">₹1000</span></div><div class=\"s-result-item\" data-component-type=\"s-search-result\"><h2><a href=\"/item2\">Another Product</a></h2><span class=\"a-offscreen\">₹500</span><span class=\"a-icon-alt\">3.8 out of 5 stars</span><span class=\"a-price a-text-price\">₹800</span></div>");
    std::vector<Product> out = {};
    int64_t start = int64_t(0);
    while (true) {
        int64_t div_start = find_index(html, std::string("<div class=\"s-result-item\""), start);
        if ((div_start < int64_t(0))) {
            break;
        }
        int64_t div_end = find_index(html, std::string("</div>"), div_start);
        if ((div_end < int64_t(0))) {
            break;
        }
        std::string block = html.substr(div_start, div_end - div_start);
        out = ([&]{ auto __tmp = out; __tmp.push_back(parse_product(block)); return __tmp; }());
        start = (div_end + std::string("</div>").size());
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<Product> products = get_amazon_product_data(std::string("laptop"));
        int64_t i = int64_t(0);
        while ((i < products.size())) {
            Product p = _index(products, i);
            std::cout << ((((((((((p.title + std::string(" | ")) + p.link) + std::string(" | ")) + p.price) + std::string(" | ")) + p.rating) + std::string(" | ")) + p.mrp) + std::string(" | ")) + _to_string(p.discount));
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
