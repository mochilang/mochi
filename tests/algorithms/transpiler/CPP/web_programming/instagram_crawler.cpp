// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:00 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct EdgeCount;
struct UserData;

std::ostream& operator<<(std::ostream&, const EdgeCount&);
std::ostream& operator<<(std::ostream&, const UserData&);


struct EdgeCount {
    int64_t count;
    auto operator<=>(const EdgeCount&) const = default;
};

struct UserData {
    std::string username;
    std::string full_name;
    std::string biography;
    std::string business_email;
    std::string external_url;
    EdgeCount edge_followed_by;
    EdgeCount edge_follow;
    EdgeCount edge_owner_to_timeline_media;
    std::string profile_pic_url_hd;
    bool is_verified;
    bool is_private;
    auto operator<=>(const UserData&) const = default;
};

std::ostream& operator<<(std::ostream& os, const EdgeCount& v) {
    os << '{' << "'count': "<< v.count
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const UserData& v) {
    os << '{' << "'username': "<< "'" << v.username << "'"
 << ", " << "'full_name': "<< "'" << v.full_name << "'"
 << ", " << "'biography': "<< "'" << v.biography << "'"
 << ", " << "'business_email': "<< "'" << v.business_email << "'"
 << ", " << "'external_url': "<< "'" << v.external_url << "'"
 << ", " << "'edge_followed_by': "<< v.edge_followed_by
 << ", " << "'edge_follow': "<< v.edge_follow
 << ", " << "'edge_owner_to_timeline_media': "<< v.edge_owner_to_timeline_media
 << ", " << "'profile_pic_url_hd': "<< "'" << v.profile_pic_url_hd << "'"
 << ", " << "'is_verified': "<< v.is_verified
 << ", " << "'is_private': "<< v.is_private
 << '}';
    return os;
}

int64_t index_of(std::string s, std::string sub);
int64_t parse_int(std::string s);
std::string extract_string(std::string text, std::string key);
int64_t extract_int(std::string text, std::string key);
bool extract_bool(std::string text, std::string key);
UserData extract_user_profile(std::string script);
int main();

std::string sample_script = std::string("{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}");
UserData user = UserData{};

int64_t index_of(std::string s, std::string sub) {
    int64_t i = int64_t(0);
    while ((i <= (s.size() - sub.size()))) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t parse_int(std::string s) {
    int64_t value = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        value = ((value * int64_t(10)) + static_cast<int64_t>(_index(s, i) - '0'));
        i = (i + int64_t(1));
    }
    return value;
}

std::string extract_string(std::string text, std::string key) {
    std::string pattern = ((std::string("\"") + key) + std::string("\":\""));
    int64_t start = (index_of(text, pattern) + pattern.size());
    int64_t end = start;
    while (((end < text.size()) && (text.substr(end, (end + int64_t(1)) - end) != std::string("\"")))) {
        end = (end + int64_t(1));
    }
    return text.substr(start, end - start);
}

int64_t extract_int(std::string text, std::string key) {
    std::string pattern = ((std::string("\"") + key) + std::string("\":{\"count\":"));
    int64_t start = (index_of(text, pattern) + pattern.size());
    int64_t end = start;
    while ((end < text.size())) {
        std::string ch = ([&](const auto& __s){ auto __i = end; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(text);
        if (((ch < std::string("0")) || (ch > std::string("9")))) {
            break;
        }
        end = (end + int64_t(1));
    }
    std::string digits = text.substr(start, end - start);
    int64_t num = parse_int(digits);
    return num;
}

bool extract_bool(std::string text, std::string key) {
    std::string pattern = ((std::string("\"") + key) + std::string("\":"));
    int64_t start = (index_of(text, pattern) + pattern.size());
    std::string val = text.substr(start, (start + int64_t(5)) - start);
    std::string first = ([&](const auto& __s){ auto __i = int64_t(0); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(val);
    if ((first == std::string("t"))) {
        return true;
    }
    return false;
}

UserData extract_user_profile(std::string script) {
    return UserData{.username = extract_string(script, std::string("username")), .full_name = extract_string(script, std::string("full_name")), .biography = extract_string(script, std::string("biography")), .business_email = extract_string(script, std::string("business_email")), .external_url = extract_string(script, std::string("external_url")), .edge_followed_by = EdgeCount{.count = extract_int(script, std::string("edge_followed_by"))}, .edge_follow = EdgeCount{.count = extract_int(script, std::string("edge_follow"))}, .edge_owner_to_timeline_media = EdgeCount{.count = extract_int(script, std::string("edge_owner_to_timeline_media"))}, .profile_pic_url_hd = extract_string(script, std::string("profile_pic_url_hd")), .is_verified = extract_bool(script, std::string("is_verified")), .is_private = extract_bool(script, std::string("is_private"))};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        user = extract_user_profile(sample_script);
        std::cout << ((((user.full_name + std::string(" (")) + user.username) + std::string(") is ")) + user.biography);
        std::cout << std::endl;
        std::cout << (std::string("number_of_posts = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << user.edge_owner_to_timeline_media.count; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("number_of_followers = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << user.edge_followed_by.count; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("number_of_followings = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << user.edge_follow.count; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("email = ") + user.business_email);
        std::cout << std::endl;
        std::cout << (std::string("website = ") + user.external_url);
        std::cout << std::endl;
        std::cout << (std::string("profile_picture_url = ") + user.profile_pic_url_hd);
        std::cout << std::endl;
        std::cout << (std::string("is_verified = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << user.is_verified; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("is_private = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << user.is_private; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
