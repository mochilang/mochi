// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:24 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Post;
struct Child;
struct ListingData;
struct Listing;

std::ostream& operator<<(std::ostream&, const Post&);
std::ostream& operator<<(std::ostream&, const Child&);
std::ostream& operator<<(std::ostream&, const ListingData&);
std::ostream& operator<<(std::ostream&, const Listing&);


struct Post {
    std::string title;
    std::string url;
    std::string selftext;
    auto operator<=>(const Post&) const = default;
};

struct Child {
    Post data;
    auto operator<=>(const Child&) const = default;
};

struct ListingData {
    std::vector<Child> children;
    auto operator<=>(const ListingData&) const = default;
};

struct Listing {
    ListingData data;
    auto operator<=>(const Listing&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Post& v) {
    os << '{' << "'title': "<< "'" << v.title << "'"
 << ", " << "'url': "<< "'" << v.url << "'"
 << ", " << "'selftext': "<< "'" << v.selftext << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Child& v) {
    os << '{' << "'data': "<< v.data
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const ListingData& v) {
    os << '{' << "'children': "<< "["; for(size_t i=0;i<v.children.size();++i){ if(i>0) os << ", "; os << v.children[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Listing& v) {
    os << '{' << "'data': "<< v.data
 << '}';
    return os;
}

static std::string _fetch(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return "{\"userId\":1,\"id\":1,\"title\":\"delectus aut autem\",\"completed\":false}";
    }
    throw std::runtime_error("fetch failed");
}
static Listing _fetch_Listing(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return Listing{1, 1, "delectus aut autem", false};
    }
    throw std::runtime_error("fetch struct not implemented");
}
bool contains(const std::vector<std::string>& xs, std::string x);
std::string join_with_comma(const std::vector<std::string>& xs);
std::map<int64_t, std::map<std::string, std::string>> get_subreddit_data(std::string subreddit, int64_t limit, std::string age, const std::vector<std::string>& wanted_data);
int main();

std::vector<std::string> valid_terms = std::vector<std::string>{std::string("approved_at_utc"), std::string("approved_by"), std::string("author_flair_background_color"), std::string("author_flair_css_class"), std::string("author_flair_richtext"), std::string("author_flair_template_id"), std::string("author_fullname"), std::string("author_premium"), std::string("can_mod_post"), std::string("category"), std::string("clicked"), std::string("content_categories"), std::string("created_utc"), std::string("downs"), std::string("edited"), std::string("gilded"), std::string("gildings"), std::string("hidden"), std::string("hide_score"), std::string("is_created_from_ads_ui"), std::string("is_meta"), std::string("is_original_content"), std::string("is_reddit_media_domain"), std::string("is_video"), std::string("link_flair_css_class"), std::string("link_flair_richtext"), std::string("link_flair_text"), std::string("link_flair_text_color"), std::string("media_embed"), std::string("mod_reason_title"), std::string("name"), std::string("permalink"), std::string("pwls"), std::string("quarantine"), std::string("saved"), std::string("score"), std::string("secure_media"), std::string("secure_media_embed"), std::string("selftext"), std::string("subreddit"), std::string("subreddit_name_prefixed"), std::string("subreddit_type"), std::string("thumbnail"), std::string("title"), std::string("top_awarded_type"), std::string("total_awards_received"), std::string("ups"), std::string("upvote_ratio"), std::string("url"), std::string("user_reports")};

bool contains(const std::vector<std::string>& xs, std::string x) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((_index(xs, i) == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::string join_with_comma(const std::vector<std::string>& xs) {
    std::string s = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            s = (s + std::string(", "));
        }
        s = (s + _index(xs, i));
        i = (i + int64_t(1));
    }
    return s;
}

std::map<int64_t, std::map<std::string, std::string>> get_subreddit_data(std::string subreddit, int64_t limit, std::string age, const std::vector<std::string>& wanted_data) {
    std::vector<std::string> invalid = {};
    int64_t i = int64_t(0);
    while ((i < wanted_data.size())) {
        std::string term = _index(wanted_data, i);
        if (!contains(valid_terms, term)) {
            invalid = ([&]{ auto __tmp = invalid; __tmp.push_back(term); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    if ((invalid.size() > int64_t(0))) {
        std::string msg = (std::string("Invalid search term: ") + join_with_comma(invalid));
        throw std::runtime_error(msg);
    }
    Listing resp = _fetch_Listing(std::string("tests/github/TheAlgorithms/Mochi/web_programming/reddit_sample.json"));
    std::map<int64_t, std::map<std::string, std::string>> result = {};
    int64_t idx = int64_t(0);
    while ((idx < limit)) {
        Post post = _index(resp.data.children, idx).data;
        std::map<std::string, std::string> post_map = {};
        if ((wanted_data.size() == int64_t(0))) {
            post_map[std::string("title")] = post.title;
            post_map[std::string("url")] = post.url;
            post_map[std::string("selftext")] = post.selftext;
        } else {
            int64_t j = int64_t(0);
            while ((j < wanted_data.size())) {
                std::string field = _index(wanted_data, j);
                if ((field == std::string("title"))) {
                    post_map[std::string("title")] = post.title;
                } else                 if ((field == std::string("url"))) {
                    post_map[std::string("url")] = post.url;
                } else                 if ((field == std::string("selftext"))) {
                    post_map[std::string("selftext")] = post.selftext;
                }


                j = (j + int64_t(1));
            }
        }
        result[static_cast<size_t>(idx)] = post_map;
        idx = (idx + int64_t(1));
    }
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { auto __tmp1 = get_subreddit_data(std::string("learnpython"), int64_t(1), std::string("new"), std::vector<std::string>{std::string("title"), std::string("url"), std::string("selftext")}); std::cout << "{"; bool first=true; for(const auto& __p : __tmp1){ if(!first) std::cout << ", "; first=false; std::cout << __p.first << ': '; { std::ostringstream __ss;         { auto __tmp2 = __p.second; __ss << "{"; bool first=true; for(const auto& __p : __tmp2){ if(!first) __ss << ", "; first=false; __ss << __p.first << ': '; __ss << __p.second; } __ss << "}"; }
 std::cout << __ss.str(); }; } std::cout << "}"; }
        std::cout << std::endl;
    }
    return 0;
}
