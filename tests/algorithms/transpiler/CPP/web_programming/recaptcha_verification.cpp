// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:20 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Request;

std::ostream& operator<<(std::ostream&, const Request&);


struct Request {
    std::string method;
    std::map<std::string, std::string> post;
    auto operator<=>(const Request&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Request& v) {
    os << '{' << "'method': "<< "'" << v.method << "'"
 << ", " << "'post': "<< "{"; bool first_1=true; for(const auto& p: v.post){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

std::map<std::string, bool> http_post(std::string secret, std::string client);
bool authenticate(std::string username, std::string password);
void login(std::string _user);
std::string render(std::string page);
std::string redirect(std::string url);
std::string login_using_recaptcha(const Request& request);
int main();

Request get_request = Request{.method = std::string("GET"), .post = {}};
Request ok_request = Request{.method = std::string("POST"), .post = std::map<std::string, std::string>{{"username", std::string("user")}, {"password", std::string("pass")}, {"g-recaptcha-response", std::string("clientKey")}}};
Request bad_request = Request{.method = std::string("POST"), .post = std::map<std::string, std::string>{{"username", std::string("user")}, {"password", std::string("wrong")}, {"g-recaptcha-response", std::string("clientKey")}}};

std::map<std::string, bool> http_post(std::string secret, std::string client) {
    bool success = ((secret == std::string("secretKey")) && (client == std::string("clientKey")));
    return std::map<std::string, bool>{{"success", success}};
}

bool authenticate(std::string username, std::string password) {
    return ((username == std::string("user")) && (password == std::string("pass")));
}

void login(std::string _user) {
}

std::string render(std::string page) {
    return (std::string("render:") + page);
}

std::string redirect(std::string url) {
    return (std::string("redirect:") + url);
}

std::string login_using_recaptcha(const Request& request) {
    std::string secret_key = std::string("secretKey");
    if ((request.method != std::string("POST"))) {
        return render(std::string("login.html"));
    }
    std::string username = ([&](const auto& __m){ auto __it = __m.find(std::string("username")); if (__it == __m.end()) return std::string{}; return __it->second; })(request.post);
    std::string password = ([&](const auto& __m){ auto __it = __m.find(std::string("password")); if (__it == __m.end()) return std::string{}; return __it->second; })(request.post);
    std::string client_key = ([&](const auto& __m){ auto __it = __m.find(std::string("g-recaptcha-response")); if (__it == __m.end()) return std::string{}; return __it->second; })(request.post);
    std::map<std::string, bool> response = http_post(secret_key, client_key);
    if (([&](const auto& __m){ auto __it = __m.find(std::string("success")); if (__it == __m.end()) return bool{}; return __it->second; })(response)) {
        if (authenticate(username, password)) {
            login(username);
            return redirect(std::string("/your-webpage"));
        }
    }
    return render(std::string("login.html"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << login_using_recaptcha(get_request);
        std::cout << std::endl;
        std::cout << login_using_recaptcha(ok_request);
        std::cout << std::endl;
        std::cout << login_using_recaptcha(bad_request);
        std::cout << std::endl;
    }
    return 0;
}
