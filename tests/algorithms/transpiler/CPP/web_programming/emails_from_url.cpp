// Generated by Mochi transpiler v0.10.66 on 2025-08-14 19:17:03 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Page;

std::ostream& operator<<(std::ostream&, const Page&);


struct Page {
    std::string url;
    std::string html;
    auto operator<=>(const Page&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Page& v) {
    os << '{' << "'url': "<< "'" << v.url << "'"
 << ", " << "'html': "<< "'" << v.html << "'"
 << '}';
    return os;
}

int64_t index_of(std::string s, std::string ch);
int64_t index_of_substring(std::string s, std::string sub);
std::vector<std::string> split(std::string s, std::string sep);
std::string get_sub_domain_name(std::string url);
std::string get_domain_name(std::string url);
bool is_alnum(std::string ch);
bool contains(const std::vector<std::string>& xs, std::string x);
std::vector<std::string> bubble_sort(const std::vector<std::string>& xs);
std::vector<std::string> extract_links(std::string domain, std::string html);
std::vector<std::string> extract_emails(std::string domain, std::string text);
std::string find_page(const std::vector<Page>& pages, std::string url);
std::vector<std::string> emails_from_url(std::string url, const std::vector<Page>& pages);
int main();

std::vector<Page> pages = std::vector<Page>{Page{.url = std::string("https://example.com"), .html = std::string("<html><body><a href=\"/contact\">Contact</a></body></html>")}, Page{.url = std::string("https://example.com/contact"), .html = std::string("<html>Contact us at info@example.com or support@example.com</html>")}};
std::vector<std::string> emails = std::vector<std::string>{};
int64_t k = int64_t(0);

int64_t index_of(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t index_of_substring(std::string s, std::string sub) {
    int64_t n = s.size();
    int64_t m = sub.size();
    if ((m == int64_t(0))) {
        return int64_t(0);
    }
    int64_t i = int64_t(0);
    while ((i <= (n - m))) {
        int64_t j = int64_t(0);
        bool is_match = true;
        while ((j < m)) {
            if ((([&](const auto& __s){ auto __i = (i + j); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) != ([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(sub))) {
                is_match = false;
                break;
            }
            j = (j + int64_t(1));
        }
        if (is_match) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    int64_t last = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s);
        if ((ch == sep)) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(([&]{ std::string __s = s; long long __start = last; long long __end = i; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })()); return __tmp; }());
            last = (i + int64_t(1));
        }
        if (((i + int64_t(1)) == s.size())) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(([&]{ std::string __s = s; long long __start = last; long long __end = (i + int64_t(1)); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })()); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return parts;
}

std::string get_sub_domain_name(std::string url) {
    int64_t proto_pos = index_of_substring(url, std::string("://"));
    int64_t start = int64_t(0);
    if ((proto_pos >= int64_t(0))) {
        start = (proto_pos + int64_t(3));
    }
    int64_t i = start;
    while ((i < url.size())) {
        if ((([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(url) == std::string("/"))) {
            break;
        }
        i = (i + int64_t(1));
    }
    return ([&]{ std::string __s = url; long long __start = start; long long __end = i; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
}

std::string get_domain_name(std::string url) {
    std::string sub = get_sub_domain_name(url);
    std::vector<std::string> parts = _split(sub, std::string("."));
    if ((parts.size() >= int64_t(2))) {
        return ((_index(parts, (parts.size() - int64_t(2))) + std::string(".")) + _index(parts, (parts.size() - int64_t(1))));
    }
    return sub;
}

bool is_alnum(std::string ch) {
    std::string chars = std::string("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
    return (index_of(chars, ch) >= int64_t(0));
}

bool contains(const std::vector<std::string>& xs, std::string x) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((_index(xs, i) == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::string> bubble_sort(const std::vector<std::string>& xs) {
    std::vector<std::string> arr = xs;
    int64_t n = arr.size();
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t j = int64_t(0);
        while (((j + int64_t(1)) < (n - i))) {
            if ((_index(arr, j) > _index(arr, (j + int64_t(1))))) {
                std::string tmp = _index(arr, j);
                arr[static_cast<size_t>(j)] = _index(arr, (j + int64_t(1)));
                arr[static_cast<size_t>((j + int64_t(1)))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<std::string> extract_links(std::string domain, std::string html) {
    std::vector<std::string> links = {};
    int64_t pos = index_of_substring(html, std::string("href="));
    while ((pos >= int64_t(0))) {
        int64_t start_quote = index_of(([&]{ std::string __s = html; long long __start = (pos + int64_t(5)); long long __end = html.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })(), std::string("\""));
        if ((start_quote < int64_t(0))) {
            break;
        }
        int64_t rest = (((pos + int64_t(5)) + start_quote) + int64_t(1));
        int64_t end_quote = index_of(([&]{ std::string __s = html; long long __start = rest; long long __end = html.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })(), std::string("\""));
        if ((end_quote < int64_t(0))) {
            break;
        }
        std::string link = ([&]{ std::string __s = html; long long __start = rest; long long __end = (rest + end_quote); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if (!contains(links, link)) {
            std::string absolute = link;
            if (!((index_of_substring(link, std::string("http://")) == int64_t(0)) || (index_of_substring(link, std::string("https://")) == int64_t(0)))) {
                if ((index_of_substring(link, std::string("/")) == int64_t(0))) {
                    absolute = ((std::string("https://") + domain) + link);
                } else {
                    absolute = (((std::string("https://") + domain) + std::string("/")) + link);
                }
            }
            links = ([&]{ auto __tmp = links; __tmp.push_back(absolute); return __tmp; }());
        }
        pos = index_of_substring(([&]{ std::string __s = html; long long __start = (rest + end_quote); long long __end = html.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })(), std::string("href="));
        if ((pos >= int64_t(0))) {
            pos = ((pos + rest) + end_quote);
        }
    }
    return links;
}

std::vector<std::string> extract_emails(std::string domain, std::string text) {
    std::vector<std::string> emails = {};
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        if ((([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(text) == std::string("@"))) {
            if ((([&]{ std::string __s = text; long long __start = (i + int64_t(1)); long long __end = ((i + int64_t(1)) + domain.size()); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == domain)) {
                int64_t j = (i - int64_t(1));
                while (((j >= int64_t(0)) && is_alnum(([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(text)))) {
                    j = (j - int64_t(1));
                }
                std::string local = ([&]{ std::string __s = text; long long __start = (j + int64_t(1)); long long __end = i; if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
                if ((local.size() > int64_t(0))) {
                    std::string email = ((local + std::string("@")) + domain);
                    if (!contains(emails, email)) {
                        emails = ([&]{ auto __tmp = emails; __tmp.push_back(email); return __tmp; }());
                    }
                }
            }
        }
        i = (i + int64_t(1));
    }
    return emails;
}

std::string find_page(const std::vector<Page>& pages, std::string url) {
    int64_t i = int64_t(0);
    while ((i < pages.size())) {
        Page p = _index(pages, i);
        if ((p.url == url)) {
            return p.html;
        }
        i = (i + int64_t(1));
    }
    return std::string("");
}

std::vector<std::string> emails_from_url(std::string url, const std::vector<Page>& pages) {
    std::string domain = get_domain_name(url);
    std::string base_html = find_page(pages, url);
    std::vector<std::string> links = extract_links(domain, base_html);
    std::vector<std::string> found = {};
    int64_t i = int64_t(0);
    while ((i < links.size())) {
        std::string html = find_page(pages, _index(links, i));
        std::vector<std::string> emails = extract_emails(domain, html);
        int64_t j = int64_t(0);
        while ((j < emails.size())) {
            if (!contains(found, _index(emails, j))) {
                found = ([&]{ auto __tmp = found; __tmp.push_back(_index(emails, j)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    std::vector<std::string> sorted = bubble_sort(found);
    return sorted;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        emails = emails_from_url(std::string("https://example.com"), pages);
        std::cout << (([&]{ std::ostringstream ss; ss << std::boolalpha << emails.size(); return ss.str(); }()) + std::string(" emails found:"));
        std::cout << std::endl;
        while ((k < emails.size())) {
            std::cout << _index(emails, k);
            std::cout << std::endl;
            k = (k + int64_t(1));
        }
    }
    return 0;
}
