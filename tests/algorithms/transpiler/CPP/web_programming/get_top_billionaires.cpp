// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:51 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <any>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Person;
struct PersonsWrapper;
struct Response;

std::ostream& operator<<(std::ostream&, const Person&);
std::ostream& operator<<(std::ostream&, const PersonsWrapper&);
std::ostream& operator<<(std::ostream&, const Response&);


struct Person {
    double finalWorth;
    std::string personName;
    std::string source;
    std::string countryOfCitizenship;
    std::string gender;
    double birthDate;
    auto operator<=>(const Person&) const = default;
};

struct PersonsWrapper {
    std::vector<Person> personsLists;
    int64_t count;
    auto operator<=>(const PersonsWrapper&) const = default;
};

struct Response {
    PersonsWrapper personList;
    auto operator<=>(const Response&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Person& v) {
    os << '{' << "'finalWorth': "<< std::fixed << std::setprecision(1) << v.finalWorth
 << ", " << "'personName': "<< "'" << v.personName << "'"
 << ", " << "'source': "<< "'" << v.source << "'"
 << ", " << "'countryOfCitizenship': "<< "'" << v.countryOfCitizenship << "'"
 << ", " << "'gender': "<< "'" << v.gender << "'"
 << ", " << "'birthDate': "<< std::fixed << std::setprecision(1) << v.birthDate
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PersonsWrapper& v) {
    os << '{' << "'personsLists': "<< "["; for(size_t i=0;i<v.personsLists.size();++i){ if(i>0) os << ", "; os << v.personsLists[i]; } os << "]"
 << ", " << "'count': "<< v.count
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Response& v) {
    os << '{' << "'personList': "<< v.personList
 << '}';
    return os;
}

static std::string _fetch(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return "{\"userId\":1,\"id\":1,\"title\":\"delectus aut autem\",\"completed\":false}";
    }
    throw std::runtime_error("fetch failed");
}
static Response _fetch_Response(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return Response{1, 1, "delectus aut autem", false};
    }
    throw std::runtime_error("fetch struct not implemented");
}
double round1(double value);
int64_t years_old(double birth_ms, double today_ms);
std::vector<std::map<std::string, std::string>> get_forbes_real_time_billionaires();
void display_billionaires(const std::vector<std::map<std::string, std::string>>& list);
int main();

int64_t LIMIT = int64_t(10);
double TODAY_MS = 1705017600000.0;
std::string API_URL = std::string();

double round1(double value) {
    if ((value >= 0.0)) {
        int64_t scaled = (int64_t)(((value * 10.0) + 0.5));
        return ((double)((double)(scaled)) / (10.0));
    }
    int64_t scaled = (int64_t)(((value * 10.0) - 0.5));
    return ((double)((double)(scaled)) / (10.0));
}

int64_t years_old(double birth_ms, double today_ms) {
    double ms_per_year = 31557600000.0;
    return (int64_t)(((double)((today_ms - birth_ms)) / (ms_per_year)));
}

std::vector<std::map<std::string, std::string>> get_forbes_real_time_billionaires() {
    Response response = _fetch_Response(API_URL);
    std::vector<std::map<std::string, std::string>> out = {};
    for (Person person : response.personList.personsLists) {
        double worth_billion = round1(((double)(person.finalWorth) / (1000.0)));
        int64_t age_years = years_old(person.birthDate, TODAY_MS);
        std::map<std::string, std::string> entry = {{"Name", person.personName}, {"Source", person.source}, {"Country", person.countryOfCitizenship}, {"Gender", person.gender}, {"Worth ($)", (_to_string(worth_billion) + std::string(" Billion"))}, {"Age", ([&]{ std::ostringstream ss; ss << std::boolalpha << age_years; return ss.str(); }())}};
        out = ([&]{ auto __tmp = out; __tmp.push_back(entry); return __tmp; }());
    }
    return out;
}

void display_billionaires(const std::vector<std::map<std::string, std::string>>& list) {
    for (std::map<std::string, std::string> b : list) {
        std::cout << ((((((((((([&](const auto& __m){ auto __it = __m.find(std::string("Name")); if (__it == __m.end()) return std::string{}; return __it->second; })(b) + std::string(" | ")) + ([&](const auto& __m){ auto __it = __m.find(std::string("Source")); if (__it == __m.end()) return std::string{}; return __it->second; })(b)) + std::string(" | ")) + ([&](const auto& __m){ auto __it = __m.find(std::string("Country")); if (__it == __m.end()) return std::string{}; return __it->second; })(b)) + std::string(" | ")) + ([&](const auto& __m){ auto __it = __m.find(std::string("Gender")); if (__it == __m.end()) return std::string{}; return __it->second; })(b)) + std::string(" | ")) + ([&](const auto& __m){ auto __it = __m.find(std::string("Worth ($)")); if (__it == __m.end()) return std::string{}; return __it->second; })(b)) + std::string(" | ")) + ([&](const auto& __m){ auto __it = __m.find(std::string("Age")); if (__it == __m.end()) return std::string{}; return __it->second; })(b));
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        API_URL = (std::string("https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=") + ([&]{ std::ostringstream ss; ss << std::boolalpha << LIMIT; return ss.str(); }()));
        display_billionaires(get_forbes_real_time_billionaires());
    }
    return 0;
}
