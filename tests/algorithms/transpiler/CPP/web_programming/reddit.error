compile: exit status 1
/workspace/mochi/tests/algorithms/transpiler/CPP/web_programming/reddit.cpp:87:215: warning: multi-character character constant [-Wmultichar]
   87 |     else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
      |                                                                                                                                                                                                                       ^~~~
/workspace/mochi/tests/algorithms/transpiler/CPP/web_programming/reddit.cpp:87:251: warning: multi-character character constant [-Wmultichar]
   87 |     else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
      |                                                                                                                                                                                                                                                           ^~~~
/workspace/mochi/tests/algorithms/transpiler/CPP/web_programming/reddit.cpp:293:333: warning: multi-character character constant [-Wmultichar]
  293 |         { auto __tmp1 = get_subreddit_data(std::string("learnpython"), int64_t(1), std::string("new"), std::vector<std::string>{std::string("title"), std::string("url"), std::string("selftext")}); std::cout << "{"; bool first=true; for(const auto& __p : __tmp1){ if(!first) std::cout << ", "; first=false; std::cout << __p.first << ': '; { std::ostringstream __ss;         { auto __tmp2 = __p.second; __ss << "{"; bool first=true; for(const auto& __p : __tmp2){ if(!first) __ss << ", "; first=false; __ss << __p.first << ': '; __ss << __p.second; } __ss << "}"; }
      |                                                                                                                                                                                                                                                                                                                                             ^~~~
/workspace/mochi/tests/algorithms/transpiler/CPP/web_programming/reddit.cpp:293:522: warning: multi-character character constant [-Wmultichar]
  293 |         { auto __tmp1 = get_subreddit_data(std::string("learnpython"), int64_t(1), std::string("new"), std::vector<std::string>{std::string("title"), std::string("url"), std::string("selftext")}); std::cout << "{"; bool first=true; for(const auto& __p : __tmp1){ if(!first) std::cout << ", "; first=false; std::cout << __p.first << ': '; { std::ostringstream __ss;         { auto __tmp2 = __p.second; __ss << "{"; bool first=true; for(const auto& __p : __tmp2){ if(!first) __ss << ", "; first=false; __ss << __p.first << ': '; __ss << __p.second; } __ss << "}"; }
      |~~~
/workspace/mochi/tests/algorithms/transpiler/CPP/web_programming/reddit.cpp: In function ‘Listing _fetch_Listing(const std::string&)’:
/workspace/mochi/tests/algorithms/transpiler/CPP/web_programming/reddit.cpp:200:57: error: too many initializers for ‘Listing’
  200 |         return Listing{1, 1, "delectus aut autem", false};
      |                                                         ^
