// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:33:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

bool contains_str(std::string s, std::string sub);
std::vector<std::map<std::string, std::string>> search_scraper(std::string anime_name);
std::vector<std::map<std::string, std::string>> search_anime_episode_list(std::string endpoint);
std::string to_playlist(std::string embed);
std::vector<std::string> get_anime_episode(std::string endpoint);
int main();

std::string BASE_URL = std::string("https://ww7.gogoanime2.org");
std::vector<std::map<std::string, std::string>> ANIME_DB = std::vector<std::map<std::string, std::string>>{std::map<std::string, std::string>{{"title", std::string("Demon Slayer")}, {"url", std::string("/anime/kimetsu-no-yaiba")}}, std::map<std::string, std::string>{{"title", std::string("Naruto")}, {"url", std::string("/anime/naruto")}}};
std::map<std::string, std::vector<std::map<std::string, std::string>>> EPISODE_DB = {{"/anime/kimetsu-no-yaiba", std::vector<std::map<std::string, std::string>>{std::map<std::string, std::string>{{"title", std::string("Episode 1")}, {"url", std::string("/watch/kimetsu-no-yaiba/1")}}, std::map<std::string, std::string>{{"title", std::string("Episode 2")}, {"url", std::string("/watch/kimetsu-no-yaiba/2")}}}}, {"/anime/naruto", std::vector<std::map<std::string, std::string>>{std::map<std::string, std::string>{{"title", std::string("Episode 1")}, {"url", std::string("/watch/naruto/1")}}}}};
std::map<std::string, std::string> EPISODE_EMBED = {{"/watch/kimetsu-no-yaiba/1", std::string("/embed/kimetsu-no-yaiba/1")}, {"/watch/kimetsu-no-yaiba/2", std::string("/embed/kimetsu-no-yaiba/2")}, {"/watch/naruto/1", std::string("/embed/naruto/1")}};

bool contains_str(std::string s, std::string sub) {
    if ((sub.size() == int64_t(0))) {
        return true;
    }
    int64_t i = int64_t(0);
    while (((i + sub.size()) <= s.size())) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::vector<std::map<std::string, std::string>> search_scraper(std::string anime_name) {
    std::string term = ([&]{ std::string __s = anime_name; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }());
    std::vector<std::map<std::string, std::string>> res = {};
    int64_t i = int64_t(0);
    while ((i < ANIME_DB.size())) {
        std::map<std::string, std::string> item = _index(ANIME_DB, i);
        if (contains_str(([&]{ std::string __s = ([&](const auto& __m){ auto __it = __m.find(std::string("title")); if (__it == __m.end()) return std::string{}; return __it->second; })(item); for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()), term)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(item); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::map<std::string, std::string>> search_anime_episode_list(std::string endpoint) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(EPISODE_DB, endpoint)) {
        return ([&](const auto& __m){ auto __it = __m.find(endpoint); if (__it == __m.end()) return std::vector<std::map<std::string, std::string>>{}; return __it->second; })(EPISODE_DB);
    }
    std::vector<std::map<std::string, std::string>> empty = {};
    return empty;
}

std::string to_playlist(std::string embed) {
    return ((std::string("/playlist/") + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(7), embed.size() - int64_t(7)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(7), __v.begin()+embed.size()); })(embed)) + std::string(".m3u8"));
}

std::vector<std::string> get_anime_episode(std::string endpoint) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(EPISODE_EMBED, endpoint)) {
        std::string embed = ([&](const auto& __m){ auto __it = __m.find(endpoint); if (__it == __m.end()) return std::string{}; return __it->second; })(EPISODE_EMBED);
        std::string play = (BASE_URL + embed);
        std::string download = (BASE_URL + to_playlist(embed));
        return std::vector<std::string>{play, download};
    }
    std::vector<std::string> empty = {};
    return empty;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::map<std::string, std::string>> animes = search_scraper(std::string("demon"));
        { auto __tmp1 = animes; std::cout << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "{"; bool first=true; for(const auto& __p : __tmp2){ if(!first) __ss << ", "; first=false; __ss << __p.first << ': '; __ss << __p.second; } __ss << "}"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        std::vector<std::map<std::string, std::string>> episodes = search_anime_episode_list(std::string("/anime/kimetsu-no-yaiba"));
        { auto __tmp3 = episodes; std::cout << "["; for(size_t i=0;i<__tmp3.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         { auto __tmp4 = __tmp3[static_cast<size_t>(i)]; __ss << "{"; bool first=true; for(const auto& __p : __tmp4){ if(!first) __ss << ", "; first=false; __ss << __p.first << ': '; __ss << __p.second; } __ss << "}"; }
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        std::vector<std::string> links = get_anime_episode(std::string("/watch/kimetsu-no-yaiba/1"));
        { auto __tmp5 = links; std::cout << "["; for(size_t i=0;i<__tmp5.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp5[i]; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
