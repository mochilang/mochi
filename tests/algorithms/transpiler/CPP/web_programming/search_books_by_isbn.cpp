// Generated by Mochi transpiler v0.10.64 on 2025-08-12 16:34:28 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct AuthorRef;
struct BookData;
struct AuthorData;
struct BookSummary;

std::ostream& operator<<(std::ostream&, const AuthorRef&);
std::ostream& operator<<(std::ostream&, const BookData&);
std::ostream& operator<<(std::ostream&, const AuthorData&);
std::ostream& operator<<(std::ostream&, const BookSummary&);


struct AuthorRef {
    std::string key;
    auto operator<=>(const AuthorRef&) const = default;
};

struct BookData {
    std::string title;
    std::string publish_date;
    std::vector<AuthorRef> authors;
    int64_t number_of_pages;
    std::vector<std::string> isbn_10;
    std::vector<std::string> isbn_13;
    auto operator<=>(const BookData&) const = default;
};

struct AuthorData {
    std::string name;
    auto operator<=>(const AuthorData&) const = default;
};

struct BookSummary {
    std::string title;
    std::string publish_date;
    std::string authors;
    int64_t number_of_pages;
    std::string isbn_10;
    std::string isbn_13;
    auto operator<=>(const BookSummary&) const = default;
};

std::ostream& operator<<(std::ostream& os, const AuthorRef& v) {
    os << '{' << "'key': "<< "'" << v.key << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BookData& v) {
    os << '{' << "'title': "<< "'" << v.title << "'"
 << ", " << "'publish_date': "<< "'" << v.publish_date << "'"
 << ", " << "'authors': "<< "["; for(size_t i=0;i<v.authors.size();++i){ if(i>0) os << ", "; os << v.authors[i]; } os << "]"
 << ", " << "'number_of_pages': "<< v.number_of_pages
 << ", " << "'isbn_10': "<< "["; for(size_t i=0;i<v.isbn_10.size();++i){ if(i>0) os << ", "; os << v.isbn_10[i]; } os << "]"
 << ", " << "'isbn_13': "<< "["; for(size_t i=0;i<v.isbn_13.size();++i){ if(i>0) os << ", "; os << v.isbn_13[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const AuthorData& v) {
    os << '{' << "'name': "<< "'" << v.name << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BookSummary& v) {
    os << '{' << "'title': "<< "'" << v.title << "'"
 << ", " << "'publish_date': "<< "'" << v.publish_date << "'"
 << ", " << "'authors': "<< "'" << v.authors << "'"
 << ", " << "'number_of_pages': "<< v.number_of_pages
 << ", " << "'isbn_10': "<< "'" << v.isbn_10 << "'"
 << ", " << "'isbn_13': "<< "'" << v.isbn_13 << "'"
 << '}';
    return os;
}

static std::string _fetch(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return "{\"userId\":1,\"id\":1,\"title\":\"delectus aut autem\",\"completed\":false}";
    }
    throw std::runtime_error("fetch failed");
}
static BookData _fetch_BookData(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return BookData{1, 1, "delectus aut autem", false};
    }
    throw std::runtime_error("fetch struct not implemented");
}
static AuthorData _fetch_AuthorData(const std::string& url) {
    if (url == "https://jsonplaceholder.typicode.com/todos/1") {
        return AuthorData{1, 1, "delectus aut autem", false};
    }
    throw std::runtime_error("fetch struct not implemented");
}
std::string join(const std::vector<std::string>& xs, std::string sep);
int64_t count_char(std::string s, std::string ch);
std::string strip(std::string s);
std::string trim_slashes(std::string s);
std::string normalize_olid(std::string olid);
BookData get_book_data(std::string olid);
AuthorData get_author_data(std::string olid);
BookSummary summarize_book(const BookData& book);
int main();

std::string join(const std::vector<std::string>& xs, std::string sep) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            res = (res + sep);
        }
        res = (res + _index(xs, i));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t count_char(std::string s, std::string ch) {
    int64_t cnt = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            cnt = (cnt + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return cnt;
}

std::string strip(std::string s) {
    int64_t start = int64_t(0);
    int64_t end = s.size();
    while (((start < end) && (s.substr(start, (start + int64_t(1)) - start) == std::string(" ")))) {
        start = (start + int64_t(1));
    }
    while (((end > start) && (s.substr((end - int64_t(1)), end - (end - int64_t(1))) == std::string(" ")))) {
        end = (end - int64_t(1));
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(s);
}

std::string trim_slashes(std::string s) {
    int64_t start = int64_t(0);
    int64_t end = s.size();
    while (((start < end) && (s.substr(start, (start + int64_t(1)) - start) == std::string("/")))) {
        start = (start + int64_t(1));
    }
    while (((end > start) && (s.substr((end - int64_t(1)), end - (end - int64_t(1))) == std::string("/")))) {
        end = (end - int64_t(1));
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(s);
}

std::string normalize_olid(std::string olid) {
    std::string stripped = strip(olid);
    std::string cleaned = trim_slashes(stripped);
    if ((count_char(cleaned, std::string("/")) != int64_t(1))) {
        throw std::runtime_error((olid + std::string(" is not a valid Open Library olid")));
    }
    return cleaned;
}

BookData get_book_data(std::string olid) {
    std::string norm = normalize_olid(olid);
    std::string url = ((std::string("https://openlibrary.org/") + norm) + std::string(".json"));
    BookData data = _fetch_BookData(url);
    return data;
}

AuthorData get_author_data(std::string olid) {
    std::string norm = normalize_olid(olid);
    std::string url = ((std::string("https://openlibrary.org/") + norm) + std::string(".json"));
    AuthorData data = _fetch_AuthorData(url);
    return data;
}

BookSummary summarize_book(const BookData& book) {
    std::vector<std::string> names = {};
    int64_t i = int64_t(0);
    while ((i < book.authors.size())) {
        AuthorRef ref = _index(book.authors, i);
        AuthorData auth = get_author_data(ref.key);
        names = ([&]{ auto __tmp = names; __tmp.push_back(auth.name); return __tmp; }());
        i = (i + int64_t(1));
    }
    return BookSummary{.title = book.title, .publish_date = book.publish_date, .authors = join(names, std::string(", ")), .number_of_pages = book.number_of_pages, .isbn_10 = join(book.isbn_10, std::string(", ")), .isbn_13 = join(book.isbn_13, std::string(", "))};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        BookData book = get_book_data(std::string("isbn/0140328726"));
        BookSummary summary = summarize_book(book);
        std::cout << (std::string("Title: ") + summary.title);
        std::cout << std::endl;
        std::cout << (std::string("Publish date: ") + summary.publish_date);
        std::cout << std::endl;
        std::cout << (std::string("Authors: ") + summary.authors);
        std::cout << std::endl;
        std::cout << (std::string("Number of pages: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << summary.number_of_pages; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("ISBN (10): ") + summary.isbn_10);
        std::cout << std::endl;
        std::cout << (std::string("ISBN (13): ") + summary.isbn_13);
        std::cout << std::endl;
    }
    return 0;
}
