// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:27:30 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Result;

std::ostream& operator<<(std::ostream&, const Result&);


struct Result {
    int64_t shift;
    double chi;
    std::string decoded;
    auto operator<=>(const Result&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Result& v) {
    os << '{' << "'shift': "<< v.shift
 << ", " << "'chi': "<< std::fixed << std::setprecision(1) << v.chi
 << ", " << "'decoded': "<< "'" << v.decoded << "'"
 << '}';
    return os;
}

std::vector<std::string> default_alphabet();
std::map<std::string, double> default_frequencies();
int64_t index_of(const std::vector<std::string>& xs, std::string ch);
int64_t count_char(std::string s, std::string ch);
Result decrypt_caesar_with_chi_squared(std::string ciphertext, const std::vector<std::string>& cipher_alphabet, const std::map<std::string, double>& frequencies_dict, bool case_sensitive);
int main();

Result r1 = decrypt_caesar_with_chi_squared(std::string("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!"), std::vector<std::string>{}, std::map<std::string, double>{}, false);
Result r2 = decrypt_caesar_with_chi_squared(std::string("crybd cdbsxq"), std::vector<std::string>{}, std::map<std::string, double>{}, false);
Result r3 = decrypt_caesar_with_chi_squared(std::string("Crybd Cdbsxq"), std::vector<std::string>{}, std::map<std::string, double>{}, true);

std::vector<std::string> default_alphabet() {
    return std::vector<std::string>{std::string("a"), std::string("b"), std::string("c"), std::string("d"), std::string("e"), std::string("f"), std::string("g"), std::string("h"), std::string("i"), std::string("j"), std::string("k"), std::string("l"), std::string("m"), std::string("n"), std::string("o"), std::string("p"), std::string("q"), std::string("r"), std::string("s"), std::string("t"), std::string("u"), std::string("v"), std::string("w"), std::string("x"), std::string("y"), std::string("z")};
}

std::map<std::string, double> default_frequencies() {
    return std::map<std::string, double>{{"a", 0.08497}, {"b", 0.01492}, {"c", 0.02202}, {"d", 0.04253}, {"e", 0.11162}, {"f", 0.02228}, {"g", 0.02015}, {"h", 0.06094}, {"i", 0.07546}, {"j", 0.00153}, {"k", 0.01292}, {"l", 0.04025}, {"m", 0.02406}, {"n", 0.06749}, {"o", 0.07507}, {"p", 0.01929}, {"q", 0.00095}, {"r", 0.07587}, {"s", 0.06327}, {"t", 0.09356}, {"u", 0.02758}, {"v", 0.00978}, {"w", 0.0256}, {"x", 0.0015}, {"y", 0.01994}, {"z", 0.00077}};
}

int64_t index_of(const std::vector<std::string>& xs, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((xs[i] == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t count_char(std::string s, std::string ch) {
    int64_t count = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            count = (count + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return count;
}

Result decrypt_caesar_with_chi_squared(std::string ciphertext, const std::vector<std::string>& cipher_alphabet, const std::map<std::string, double>& frequencies_dict, bool case_sensitive) {
    std::vector<std::string> alphabet_letters = cipher_alphabet;
    if ((alphabet_letters.size() == int64_t(0))) {
        alphabet_letters = default_alphabet();
    }
    std::map<std::string, double> frequencies = frequencies_dict;
    if ((frequencies.size() == int64_t(0))) {
        frequencies = default_frequencies();
    }
    if (!case_sensitive) {
        ciphertext = ([&]{ std::string __s = ciphertext; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }());
    }
    int64_t best_shift = int64_t(0);
    double best_chi = 0.0;
    std::string best_text = std::string("");
    int64_t shift = int64_t(0);
    while ((shift < alphabet_letters.size())) {
        std::string decrypted = std::string("");
        int64_t i = int64_t(0);
        while ((i < ciphertext.size())) {
            std::string ch = ciphertext.substr(i, (i + int64_t(1)) - i);
            int64_t idx = index_of(alphabet_letters, ([&]{ std::string __s = ch; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()));
            if ((idx >= int64_t(0))) {
                int m = alphabet_letters.size();
                auto new_idx = ((idx - shift) % m);
                if ((new_idx < int64_t(0))) {
                    new_idx = (new_idx + m);
                }
                std::string new_char = alphabet_letters[static_cast<size_t>(new_idx)];
                if ((case_sensitive && (ch != ([&]{ std::string __s = ch; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())))) {
                    decrypted = (decrypted + ([&]{ std::string __s = new_char; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }()));
                } else {
                    decrypted = (decrypted + new_char);
                }
            } else {
                decrypted = (decrypted + ch);
            }
            i = (i + int64_t(1));
        }
        double chi = 0.0;
        std::string lowered = (case_sensitive ? ([&]{ std::string __s = decrypted; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()) : decrypted);
        int64_t j = int64_t(0);
        while ((j < alphabet_letters.size())) {
            std::string letter = alphabet_letters[j];
            int64_t occ = count_char(lowered, letter);
            if ((occ > int64_t(0))) {
                double occf = (double)(occ);
                double expected = (([&](const auto& __m){ auto __it = __m.find(letter); return __it != __m.end() ? __it->second : 0; })(frequencies) * occf);
                double diff = (occf - expected);
                chi = (chi + (((double)((diff * diff)) / (expected)) * occf));
            }
            j = (j + int64_t(1));
        }
        if (((shift == int64_t(0)) || (chi < best_chi))) {
            best_shift = shift;
            best_chi = chi;
            best_text = decrypted;
        }
        shift = (shift + int64_t(1));
    }
    return Result{.shift = best_shift, .chi = best_chi, .decoded = best_text};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << r1.shift; return ss.str(); }()) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r1.chi; return ss.str(); }())) + std::string(", ")) + r1.decoded);
        std::cout << std::endl;
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << r2.shift; return ss.str(); }()) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r2.chi; return ss.str(); }())) + std::string(", ")) + r2.decoded);
        std::cout << std::endl;
        std::cout << ((((([&]{ std::ostringstream ss; ss << std::boolalpha << r3.shift; return ss.str(); }()) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r3.chi; return ss.str(); }())) + std::string(", ")) + r3.decoded);
        std::cout << std::endl;
    }
    return 0;
}
