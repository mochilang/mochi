// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:27:48 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct GCD;
struct PublicKey;
struct PrivateKey;
struct KeyPair;

std::ostream& operator<<(std::ostream&, const GCD&);
std::ostream& operator<<(std::ostream&, const PublicKey&);
std::ostream& operator<<(std::ostream&, const PrivateKey&);
std::ostream& operator<<(std::ostream&, const KeyPair&);


struct GCD {
    int64_t g;
    int64_t x;
    int64_t y;
    auto operator<=>(const GCD&) const = default;
};

struct PublicKey {
    int64_t key_size;
    int64_t g;
    int64_t e2;
    int64_t p;
    auto operator<=>(const PublicKey&) const = default;
};

struct PrivateKey {
    int64_t key_size;
    int64_t d;
    auto operator<=>(const PrivateKey&) const = default;
};

struct KeyPair {
    PublicKey public_key;
    PrivateKey private_key;
    auto operator<=>(const KeyPair&) const = default;
};

std::ostream& operator<<(std::ostream& os, const GCD& v) {
    os << '{' << "'g': "<< v.g
 << ", " << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PublicKey& v) {
    os << '{' << "'key_size': "<< v.key_size
 << ", " << "'g': "<< v.g
 << ", " << "'e2': "<< v.e2
 << ", " << "'p': "<< v.p
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PrivateKey& v) {
    os << '{' << "'key_size': "<< v.key_size
 << ", " << "'d': "<< v.d
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const KeyPair& v) {
    os << '{' << "'public_key': "<< v.public_key
 << ", " << "'private_key': "<< v.private_key
 << '}';
    return os;
}

int64_t _rand();
int64_t rand_range(int64_t min, int64_t max);
int64_t mod_pow(int64_t base, int64_t exponent, int64_t modulus);
GCD extended_gcd(int64_t a, int64_t b);
int64_t mod_inverse(int64_t a, int64_t m);
int64_t pow2(int64_t n);
bool is_probable_prime(int64_t n, int64_t k);
int64_t generate_large_prime(int64_t bits);
int64_t primitive_root(int64_t p);
KeyPair generate_key(int64_t key_size);
int main();

int64_t seed = int64_t(123456789);

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483647));
    return seed;
}

int64_t rand_range(int64_t min, int64_t max) {
    return (min + (_rand() % ((max - min) + int64_t(1))));
}

int64_t mod_pow(int64_t base, int64_t exponent, int64_t modulus) {
    int64_t result = int64_t(1);
    int64_t b = (base % modulus);
    int64_t e = exponent;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % modulus);
        }
        e = (e / int64_t(2));
        b = ((b * b) % modulus);
    }
    return result;
}

GCD extended_gcd(int64_t a, int64_t b) {
    if ((b == int64_t(0))) {
        return GCD{.g = a, .x = int64_t(1), .y = int64_t(0)};
    }
    GCD res = extended_gcd(b, (a % b));
    return GCD{.g = res.g, .x = res.y, .y = (res.x - ((a / b) * res.y))};
}

int64_t mod_inverse(int64_t a, int64_t m) {
    GCD res = extended_gcd(a, m);
    if ((res.g != int64_t(1))) {
        throw std::runtime_error(std::string("inverse does not exist"));
    }
    int64_t r = (res.x % m);
    if ((r < int64_t(0))) {
        return (r + m);
    }
    return r;
}

int64_t pow2(int64_t n) {
    int64_t r = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < n)) {
        r = (r * int64_t(2));
        i = (i + int64_t(1));
    }
    return r;
}

bool is_probable_prime(int64_t n, int64_t k) {
    if ((n <= int64_t(1))) {
        return false;
    }
    if ((n <= int64_t(3))) {
        return true;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return false;
    }
    int64_t r = int64_t(0);
    int64_t d = (n - int64_t(1));
    while (((d % int64_t(2)) == int64_t(0))) {
        d = (d / int64_t(2));
        r = (r + int64_t(1));
    }
    int64_t i = int64_t(0);
    while ((i < k)) {
        int64_t a = rand_range(int64_t(2), (n - int64_t(2)));
        int64_t x = mod_pow(a, d, n);
        if (((x == int64_t(1)) || (x == (n - int64_t(1))))) {
            i = (i + int64_t(1));
            continue;
        }
        int64_t j = int64_t(1);
        bool found = false;
        while ((j < r)) {
            x = mod_pow(x, int64_t(2), n);
            if ((x == (n - int64_t(1)))) {
                found = true;
                break;
            }
            j = (j + int64_t(1));
        }
        if (!found) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

int64_t generate_large_prime(int64_t bits) {
    int64_t min = pow2((bits - int64_t(1)));
    int64_t max = (pow2(bits) - int64_t(1));
    int64_t p = rand_range(min, max);
    if (((p % int64_t(2)) == int64_t(0))) {
        p = (p + int64_t(1));
    }
    while (!is_probable_prime(p, int64_t(5))) {
        p = (p + int64_t(2));
        if ((p > max)) {
            p = (min + int64_t(1));
        }
    }
    return p;
}

int64_t primitive_root(int64_t p) {
    while (true) {
        int64_t g = rand_range(int64_t(3), (p - int64_t(1)));
        if ((mod_pow(g, int64_t(2), p) == int64_t(1))) {
            continue;
        }
        if ((mod_pow(g, p, p) == int64_t(1))) {
            continue;
        }
        return g;
    }
}

KeyPair generate_key(int64_t key_size) {
    int64_t p = generate_large_prime(key_size);
    int64_t e1 = primitive_root(p);
    int64_t d = rand_range(int64_t(3), (p - int64_t(1)));
    int64_t e2 = mod_inverse(mod_pow(e1, d, p), p);
    PublicKey public_key = PublicKey{.key_size = key_size, .g = e1, .e2 = e2, .p = p};
    PrivateKey private_key = PrivateKey{.key_size = key_size, .d = d};
    return KeyPair{.public_key = public_key, .private_key = private_key};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t key_size = int64_t(16);
        KeyPair kp = generate_key(key_size);
        PublicKey pub = kp.public_key;
        PrivateKey priv = kp.private_key;
        std::cout << ((((((((std::string("public key: (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << pub.key_size; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pub.g; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pub.e2; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << pub.p; return ss.str(); }())) + std::string(")"));
        std::cout << std::endl;
        std::cout << ((((std::string("private key: (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << priv.key_size; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << priv.d; return ss.str(); }())) + std::string(")"));
        std::cout << std::endl;
    }
    return 0;
}
