// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:27:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool list_contains(const std::vector<std::string>& xs, std::string x);
int64_t index_in_string(std::string s, std::string ch);
bool contains_char(std::string s, std::string ch);
std::string to_uppercase(std::string s);
std::string plugboard_map(const std::vector<std::string>& pb, std::string ch);
std::string reflector_map(std::string ch);
int64_t count_unique(const std::vector<std::string>& xs);
std::vector<std::string> build_plugboard(std::string pbstring);
void validator(const std::vector<int64_t>& rotpos, const std::vector<std::string>& rotsel, std::string pb);
std::string enigma(std::string text, const std::vector<int64_t>& rotor_position, const std::vector<std::string>& rotor_selection, std::string plugb);
int main();

std::string abc = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
std::string low_abc = std::string("abcdefghijklmnopqrstuvwxyz");
std::string rotor1 = std::string("EGZWVONAHDCLFQMSIPJBYUKXTR");
std::string rotor2 = std::string("FOBHMDKEXQNRAULPGSJVTYICZW");
std::string rotor3 = std::string("ZJXESIUQLHAVRMDOYGTNFWPBKC");
std::string rotor4 = std::string("RMDJXFUWGISLHVTCQNKYPBEZOA");
std::string rotor5 = std::string("SGLCPQWZHKXAREONTFBVIYJUDM");
std::string rotor6 = std::string("HVSICLTYKQUBXDWAJZOMFGPREN");
std::string rotor7 = std::string("RZWQHFMVDBKICJLNTUXAGYPSOE");
std::string rotor8 = std::string("LFKIJODBEGAMQPXVUHYSTCZRWN");
std::string rotor9 = std::string("KOAEGVDHXPQZMLFTYWJNBRCIUS");
std::vector<std::string> reflector_pairs = std::vector<std::string>{std::string("AN"), std::string("BO"), std::string("CP"), std::string("DQ"), std::string("ER"), std::string("FS"), std::string("GT"), std::string("HU"), std::string("IV"), std::string("JW"), std::string("KX"), std::string("LY"), std::string("MZ")};

bool list_contains(const std::vector<std::string>& xs, std::string x) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((xs[i] == x)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

int64_t index_in_string(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

bool contains_char(std::string s, std::string ch) {
    return (index_in_string(s, ch) >= int64_t(0));
}

std::string to_uppercase(std::string s) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        int64_t idx = index_in_string(low_abc, ch);
        if ((idx >= int64_t(0))) {
            res = (res + abc.substr(idx, (idx + int64_t(1)) - idx));
        } else {
            res = (res + ch);
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string plugboard_map(const std::vector<std::string>& pb, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < pb.size())) {
        std::string pair = pb[i];
        std::string a = pair.substr(int64_t(0), int64_t(1) - int64_t(0));
        std::string b = pair.substr(int64_t(1), int64_t(2) - int64_t(1));
        if ((ch == a)) {
            return b;
        }
        if ((ch == b)) {
            return a;
        }
        i = (i + int64_t(1));
    }
    return ch;
}

std::string reflector_map(std::string ch) {
    int64_t i = int64_t(0);
    while ((i < reflector_pairs.size())) {
        std::string pair = reflector_pairs[i];
        std::string a = pair.substr(int64_t(0), int64_t(1) - int64_t(0));
        std::string b = pair.substr(int64_t(1), int64_t(2) - int64_t(1));
        if ((ch == a)) {
            return b;
        }
        if ((ch == b)) {
            return a;
        }
        i = (i + int64_t(1));
    }
    return ch;
}

int64_t count_unique(const std::vector<std::string>& xs) {
    std::vector<std::string> unique = {};
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if (!list_contains(unique, xs[i])) {
            unique = ([&]{ auto __tmp = unique; __tmp.push_back(xs[i]); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return unique.size();
}

std::vector<std::string> build_plugboard(std::string pbstring) {
    if ((pbstring.size() == int64_t(0))) {
        return std::vector<std::string>{};
    }
    if (((pbstring.size() % int64_t(2)) != int64_t(0))) {
        throw std::runtime_error(((std::string("Odd number of symbols(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << pbstring.size(); return ss.str(); }())) + std::string(")")));
    }
    std::string pbstring_nospace = std::string("");
    int64_t i = int64_t(0);
    while ((i < pbstring.size())) {
        std::string ch = pbstring.substr(i, (i + int64_t(1)) - i);
        if ((ch != std::string(" "))) {
            pbstring_nospace = (pbstring_nospace + ch);
        }
        i = (i + int64_t(1));
    }
    std::vector<std::string> seen = {};
    i = int64_t(0);
    while ((i < pbstring_nospace.size())) {
        std::string ch = pbstring_nospace.substr(i, (i + int64_t(1)) - i);
        if (!contains_char(abc, ch)) {
            throw std::runtime_error(((std::string("'") + ch) + std::string("' not in list of symbols")));
        }
        if (list_contains(seen, ch)) {
            throw std::runtime_error(((std::string("Duplicate symbol(") + ch) + std::string(")")));
        }
        seen = ([&]{ auto __tmp = seen; __tmp.push_back(ch); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::string> pb = {};
    i = int64_t(0);
    while ((i < (pbstring_nospace.size() - int64_t(1)))) {
        std::string a = pbstring_nospace.substr(i, (i + int64_t(1)) - i);
        std::string b = pbstring_nospace.substr((i + int64_t(1)), (i + int64_t(2)) - (i + int64_t(1)));
        pb = ([&]{ auto __tmp = pb; __tmp.push_back((a + b)); return __tmp; }());
        i = (i + int64_t(2));
    }
    return pb;
}

void validator(const std::vector<int64_t>& rotpos, const std::vector<std::string>& rotsel, std::string pb) {
    if ((count_unique(rotsel) < int64_t(3))) {
        throw std::runtime_error(((std::string("Please use 3 unique rotors (not ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << count_unique(rotsel); return ss.str(); }())) + std::string(")")));
    }
    if ((rotpos.size() != int64_t(3))) {
        throw std::runtime_error(std::string("Rotor position must have 3 values"));
    }
    int64_t r1 = rotpos[int64_t(0)];
    int64_t r2 = rotpos[int64_t(1)];
    int64_t r3 = rotpos[int64_t(2)];
    if (!((int64_t(0) < r1) && (r1 <= abc.size()))) {
        throw std::runtime_error(((std::string("First rotor position is not within range of 1..26 (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << r1; return ss.str(); }())) + std::string(")")));
    }
    if (!((int64_t(0) < r2) && (r2 <= abc.size()))) {
        throw std::runtime_error(((std::string("Second rotor position is not within range of 1..26 (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << r2; return ss.str(); }())) + std::string(")")));
    }
    if (!((int64_t(0) < r3) && (r3 <= abc.size()))) {
        throw std::runtime_error(((std::string("Third rotor position is not within range of 1..26 (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << r3; return ss.str(); }())) + std::string(")")));
    }
}

std::string enigma(std::string text, const std::vector<int64_t>& rotor_position, const std::vector<std::string>& rotor_selection, std::string plugb) {
    std::string up_text = to_uppercase(text);
    std::string up_pb = to_uppercase(plugb);
    validator(rotor_position, rotor_selection, up_pb);
    std::vector<std::string> plugboard = build_plugboard(up_pb);
    int64_t rotorpos1 = (rotor_position[int64_t(0)] - int64_t(1));
    int64_t rotorpos2 = (rotor_position[int64_t(1)] - int64_t(1));
    int64_t rotorpos3 = (rotor_position[int64_t(2)] - int64_t(1));
    std::string rotor_a = rotor_selection[int64_t(0)];
    std::string rotor_b = rotor_selection[int64_t(1)];
    std::string rotor_c = rotor_selection[int64_t(2)];
    std::string result = std::string("");
    int64_t i = int64_t(0);
    while ((i < up_text.size())) {
        std::string symbol = up_text.substr(i, (i + int64_t(1)) - i);
        if (contains_char(abc, symbol)) {
            symbol = plugboard_map(plugboard, symbol);
            int64_t index = (index_in_string(abc, symbol) + rotorpos1);
            symbol = rotor_a.substr((index % abc.size()), ((index % abc.size()) + int64_t(1)) - (index % abc.size()));
            index = (index_in_string(abc, symbol) + rotorpos2);
            symbol = rotor_b.substr((index % abc.size()), ((index % abc.size()) + int64_t(1)) - (index % abc.size()));
            index = (index_in_string(abc, symbol) + rotorpos3);
            symbol = rotor_c.substr((index % abc.size()), ((index % abc.size()) + int64_t(1)) - (index % abc.size()));
            symbol = reflector_map(symbol);
            index = (index_in_string(rotor_c, symbol) - rotorpos3);
            if ((index < int64_t(0))) {
                index = (index + abc.size());
            }
            symbol = abc.substr(index, (index + int64_t(1)) - index);
            index = (index_in_string(rotor_b, symbol) - rotorpos2);
            if ((index < int64_t(0))) {
                index = (index + abc.size());
            }
            symbol = abc.substr(index, (index + int64_t(1)) - index);
            index = (index_in_string(rotor_a, symbol) - rotorpos1);
            if ((index < int64_t(0))) {
                index = (index + abc.size());
            }
            symbol = abc.substr(index, (index + int64_t(1)) - index);
            symbol = plugboard_map(plugboard, symbol);
            rotorpos1 = (rotorpos1 + int64_t(1));
            if ((rotorpos1 >= abc.size())) {
                rotorpos1 = int64_t(0);
                rotorpos2 = (rotorpos2 + int64_t(1));
            }
            if ((rotorpos2 >= abc.size())) {
                rotorpos2 = int64_t(0);
                rotorpos3 = (rotorpos3 + int64_t(1));
            }
            if ((rotorpos3 >= abc.size())) {
                rotorpos3 = int64_t(0);
            }
        }
        result = (result + symbol);
        i = (i + int64_t(1));
    }
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string message = std::string("This is my Python script that emulates the Enigma machine from WWII.");
        std::vector<int64_t> rotor_pos = std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(1)};
        std::string pb = std::string("pictures");
        std::vector<std::string> rotor_sel = std::vector<std::string>{rotor2, rotor4, rotor8};
        std::string en = enigma(message, rotor_pos, rotor_sel, pb);
        std::cout << (std::string("Encrypted message: ") + en);
        std::cout << std::endl;
        std::cout << (std::string("Decrypted message: ") + enigma(en, rotor_pos, rotor_sel, pb));
        std::cout << std::endl;
    }
    return 0;
}
