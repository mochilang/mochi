// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:40:38 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Cipher;

std::ostream& operator<<(std::ostream&, const Cipher&);


struct Cipher {
    std::vector<std::string> passcode;
    std::vector<std::string> key_list;
    int64_t shift_key;
    auto operator<=>(const Cipher&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Cipher& v) {
    os << '{' << "'passcode': "<< "["; for(size_t i=0;i<v.passcode.size();++i){ if(i>0) os << ", "; os << v.passcode[i]; } os << "]"
 << ", " << "'key_list': "<< "["; for(size_t i=0;i<v.key_list.size();++i){ if(i>0) os << ", "; os << v.key_list[i]; } os << "]"
 << ", " << "'shift_key': "<< v.shift_key
 << '}';
    return os;
}

int64_t ord(std::string ch);
std::vector<int64_t> neg_pos(std::vector<int64_t> iterlist);
std::vector<std::string> passcode_creator();
std::vector<std::string> unique_sorted(const std::vector<std::string>& chars);
std::vector<std::string> make_key_list(const std::vector<std::string>& passcode);
int64_t make_shift_key(const std::vector<std::string>& passcode);
Cipher new_cipher(std::string passcode_str);
int64_t index_of(const std::vector<std::string>& lst, std::string ch);
std::string encrypt(const Cipher& c, std::string plaintext);
std::string decrypt(const Cipher& c, std::string encoded_message);
std::string test_end_to_end();
int main();

Cipher ssc = new_cipher(std::string("4PYIXyqeQZr44"));
std::string encoded = encrypt(ssc, std::string("Hello, this is a modified Caesar cipher"));

int64_t ord(std::string ch) {
    std::string digits = std::string("0123456789");
    int64_t i = int64_t(0);
    while ((i < digits.size())) {
        if ((digits.substr(i, (i + int64_t(1)) - i) == ch)) {
            return (int64_t(48) + i);
        }
        i = (i + int64_t(1));
    }
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    i = int64_t(0);
    while ((i < upper.size())) {
        if ((upper.substr(i, (i + int64_t(1)) - i) == ch)) {
            return (int64_t(65) + i);
        }
        i = (i + int64_t(1));
    }
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    i = int64_t(0);
    while ((i < lower.size())) {
        if ((lower.substr(i, (i + int64_t(1)) - i) == ch)) {
            return (int64_t(97) + i);
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

std::vector<int64_t> neg_pos(std::vector<int64_t> iterlist) {
    int64_t i = int64_t(1);
    while ((i < iterlist.size())) {
        iterlist[i] = -iterlist[i];
        i = (i + int64_t(2));
    }
    return iterlist;
}

std::vector<std::string> passcode_creator() {
    std::string choices = std::string("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    int64_t seed = _now();
    int64_t length = (int64_t(10) + (seed % int64_t(11)));
    std::vector<std::string> password = {};
    int64_t i = int64_t(0);
    while ((i < length)) {
        seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483647));
        int64_t idx = (seed % choices.size());
        password = ([&]{ auto __tmp = password; __tmp.push_back(choices.substr(idx, (idx + int64_t(1)) - idx)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return password;
}

std::vector<std::string> unique_sorted(const std::vector<std::string>& chars) {
    std::vector<std::string> uniq = {};
    int64_t i = int64_t(0);
    while ((i < chars.size())) {
        std::string ch = chars[i];
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(uniq, ch)) {
            uniq = ([&]{ auto __tmp = uniq; __tmp.push_back(ch); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < uniq.size())) {
        int64_t k = (j + int64_t(1));
        int64_t min_idx = j;
        while ((k < uniq.size())) {
            if ((uniq[k] < uniq[min_idx])) {
                min_idx = k;
            }
            k = (k + int64_t(1));
        }
        if ((min_idx != j)) {
            std::string tmp = uniq[j];
            uniq[j] = uniq[min_idx];
            uniq[min_idx] = tmp;
        }
        j = (j + int64_t(1));
    }
    return uniq;
}

std::vector<std::string> make_key_list(const std::vector<std::string>& passcode) {
    std::string key_list_options = std::string("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n");
    std::vector<std::string> breakpoints = unique_sorted(passcode);
    std::vector<std::string> keys_l = {};
    std::vector<std::string> temp_list = {};
    int64_t i = int64_t(0);
    while ((i < key_list_options.size())) {
        std::string ch = key_list_options.substr(i, (i + int64_t(1)) - i);
        temp_list = ([&]{ auto __tmp = temp_list; __tmp.push_back(ch); return __tmp; }());
        if ((([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(breakpoints, ch) || (i == (key_list_options.size() - int64_t(1))))) {
            int64_t k = (temp_list.size() - int64_t(1));
            while ((k >= int64_t(0))) {
                keys_l = ([&]{ auto __tmp = keys_l; __tmp.push_back(temp_list[k]); return __tmp; }());
                k = (k - int64_t(1));
            }
            temp_list = {};
        }
        i = (i + int64_t(1));
    }
    return keys_l;
}

int64_t make_shift_key(const std::vector<std::string>& passcode) {
    std::vector<int64_t> codes = {};
    int64_t i = int64_t(0);
    while ((i < passcode.size())) {
        codes = ([&]{ auto __tmp = codes; __tmp.push_back(ord(passcode[i])); return __tmp; }());
        i = (i + int64_t(1));
    }
    codes = neg_pos(codes);
    int64_t total = int64_t(0);
    i = int64_t(0);
    while ((i < codes.size())) {
        total = (total + codes[i]);
        i = (i + int64_t(1));
    }
    if ((total > int64_t(0))) {
        return total;
    }
    return passcode.size();
}

Cipher new_cipher(std::string passcode_str) {
    std::vector<std::string> passcode = {};
    if ((passcode_str.size() == int64_t(0))) {
        passcode = passcode_creator();
    } else {
        int64_t i = int64_t(0);
        while ((i < passcode_str.size())) {
            passcode = ([&]{ auto __tmp = passcode; __tmp.push_back(passcode_str.substr(i, (i + int64_t(1)) - i)); return __tmp; }());
            i = (i + int64_t(1));
        }
    }
    std::vector<std::string> key_list = make_key_list(passcode);
    int64_t shift_key = make_shift_key(passcode);
    return Cipher{.passcode = passcode, .key_list = key_list, .shift_key = shift_key};
}

int64_t index_of(const std::vector<std::string>& lst, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if ((lst[i] == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string encrypt(const Cipher& c, std::string plaintext) {
    std::string encoded = std::string("");
    int64_t i = int64_t(0);
    int n = c.key_list.size();
    while ((i < plaintext.size())) {
        std::string ch = plaintext.substr(i, (i + int64_t(1)) - i);
        int64_t position = index_of(c.key_list, ch);
        auto new_pos = ((position + c.shift_key) % n);
        encoded = (encoded + c.key_list[static_cast<size_t>(new_pos)]);
        i = (i + int64_t(1));
    }
    return encoded;
}

std::string decrypt(const Cipher& c, std::string encoded_message) {
    std::string decoded = std::string("");
    int64_t i = int64_t(0);
    int n = c.key_list.size();
    while ((i < encoded_message.size())) {
        std::string ch = encoded_message.substr(i, (i + int64_t(1)) - i);
        int64_t position = index_of(c.key_list, ch);
        auto new_pos = ((position - c.shift_key) % n);
        if ((new_pos < int64_t(0))) {
            new_pos = (new_pos + n);
        }
        decoded = (decoded + c.key_list[static_cast<size_t>(new_pos)]);
        i = (i + int64_t(1));
    }
    return decoded;
}

std::string test_end_to_end() {
    std::string msg = std::string("Hello, this is a modified Caesar cipher");
    Cipher cip = new_cipher(std::string(""));
    return decrypt(cip, encrypt(cip, msg));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << encoded;
        std::cout << std::endl;
        std::cout << decrypt(ssc, encoded);
        std::cout << std::endl;
    }
    return 0;
}
