// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:30:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t pow_int(int64_t base, int64_t _exp);
int64_t mod_pow(int64_t base, int64_t exponent, int64_t modulus);
int64_t ord(std::string ch);
std::string chr(int64_t code);
std::vector<int64_t> get_blocks_from_text(std::string message, int64_t block_size);
std::string get_text_from_blocks(const std::vector<int64_t>& block_ints, int64_t message_length, int64_t block_size);
std::vector<int64_t> encrypt_message(std::string message, int64_t n, int64_t e, int64_t block_size);
std::string decrypt_message(const std::vector<int64_t>& blocks, int64_t message_length, int64_t n, int64_t d, int64_t block_size);
int main();

int64_t BYTE_SIZE = int64_t(256);

int64_t pow_int(int64_t base, int64_t _exp) {
    int64_t result = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

int64_t mod_pow(int64_t base, int64_t exponent, int64_t modulus) {
    int64_t result = int64_t(1);
    int64_t b = (base % modulus);
    int64_t e = exponent;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % modulus);
        }
        e = (e / int64_t(2));
        b = ((b * b) % modulus);
    }
    return result;
}

int64_t ord(std::string ch) {
    if ((ch == std::string(" "))) {
        return int64_t(32);
    }
    if ((ch == std::string("a"))) {
        return int64_t(97);
    }
    if ((ch == std::string("b"))) {
        return int64_t(98);
    }
    if ((ch == std::string("c"))) {
        return int64_t(99);
    }
    if ((ch == std::string("d"))) {
        return int64_t(100);
    }
    if ((ch == std::string("e"))) {
        return int64_t(101);
    }
    if ((ch == std::string("f"))) {
        return int64_t(102);
    }
    if ((ch == std::string("g"))) {
        return int64_t(103);
    }
    if ((ch == std::string("h"))) {
        return int64_t(104);
    }
    if ((ch == std::string("i"))) {
        return int64_t(105);
    }
    if ((ch == std::string("j"))) {
        return int64_t(106);
    }
    if ((ch == std::string("k"))) {
        return int64_t(107);
    }
    if ((ch == std::string("l"))) {
        return int64_t(108);
    }
    if ((ch == std::string("m"))) {
        return int64_t(109);
    }
    if ((ch == std::string("n"))) {
        return int64_t(110);
    }
    if ((ch == std::string("o"))) {
        return int64_t(111);
    }
    if ((ch == std::string("p"))) {
        return int64_t(112);
    }
    if ((ch == std::string("q"))) {
        return int64_t(113);
    }
    if ((ch == std::string("r"))) {
        return int64_t(114);
    }
    if ((ch == std::string("s"))) {
        return int64_t(115);
    }
    if ((ch == std::string("t"))) {
        return int64_t(116);
    }
    if ((ch == std::string("u"))) {
        return int64_t(117);
    }
    if ((ch == std::string("v"))) {
        return int64_t(118);
    }
    if ((ch == std::string("w"))) {
        return int64_t(119);
    }
    if ((ch == std::string("x"))) {
        return int64_t(120);
    }
    if ((ch == std::string("y"))) {
        return int64_t(121);
    }
    if ((ch == std::string("z"))) {
        return int64_t(122);
    }
    return int64_t(0);
}

std::string chr(int64_t code) {
    if ((code == int64_t(32))) {
        return std::string(" ");
    }
    if ((code == int64_t(97))) {
        return std::string("a");
    }
    if ((code == int64_t(98))) {
        return std::string("b");
    }
    if ((code == int64_t(99))) {
        return std::string("c");
    }
    if ((code == int64_t(100))) {
        return std::string("d");
    }
    if ((code == int64_t(101))) {
        return std::string("e");
    }
    if ((code == int64_t(102))) {
        return std::string("f");
    }
    if ((code == int64_t(103))) {
        return std::string("g");
    }
    if ((code == int64_t(104))) {
        return std::string("h");
    }
    if ((code == int64_t(105))) {
        return std::string("i");
    }
    if ((code == int64_t(106))) {
        return std::string("j");
    }
    if ((code == int64_t(107))) {
        return std::string("k");
    }
    if ((code == int64_t(108))) {
        return std::string("l");
    }
    if ((code == int64_t(109))) {
        return std::string("m");
    }
    if ((code == int64_t(110))) {
        return std::string("n");
    }
    if ((code == int64_t(111))) {
        return std::string("o");
    }
    if ((code == int64_t(112))) {
        return std::string("p");
    }
    if ((code == int64_t(113))) {
        return std::string("q");
    }
    if ((code == int64_t(114))) {
        return std::string("r");
    }
    if ((code == int64_t(115))) {
        return std::string("s");
    }
    if ((code == int64_t(116))) {
        return std::string("t");
    }
    if ((code == int64_t(117))) {
        return std::string("u");
    }
    if ((code == int64_t(118))) {
        return std::string("v");
    }
    if ((code == int64_t(119))) {
        return std::string("w");
    }
    if ((code == int64_t(120))) {
        return std::string("x");
    }
    if ((code == int64_t(121))) {
        return std::string("y");
    }
    if ((code == int64_t(122))) {
        return std::string("z");
    }
    return std::string("");
}

std::vector<int64_t> get_blocks_from_text(std::string message, int64_t block_size) {
    std::vector<int64_t> block_ints = {};
    int64_t block_start = int64_t(0);
    while ((block_start < message.size())) {
        int64_t block_int = int64_t(0);
        int64_t i = block_start;
        while (((i < (block_start + block_size)) && (i < message.size()))) {
            block_int = (block_int + (ord(std::string(1, message[i])) * pow_int(BYTE_SIZE, (i - block_start))));
            i = (i + int64_t(1));
        }
        block_ints = ([&]{ auto __tmp = block_ints; __tmp.push_back(block_int); return __tmp; }());
        block_start = (block_start + block_size);
    }
    return block_ints;
}

std::string get_text_from_blocks(const std::vector<int64_t>& block_ints, int64_t message_length, int64_t block_size) {
    std::string message = std::string("");
    for (int64_t block_int : block_ints) {
        int64_t block = block_int;
        int64_t i = (block_size - int64_t(1));
        std::string block_message = std::string("");
        while ((i >= int64_t(0))) {
            if (((message.size() + i) < message_length)) {
                int64_t ascii_number = (block / pow_int(BYTE_SIZE, i));
                block = (block % pow_int(BYTE_SIZE, i));
                block_message = (chr(ascii_number) + block_message);
            }
            i = (i - int64_t(1));
        }
        message = (message + block_message);
    }
    return message;
}

std::vector<int64_t> encrypt_message(std::string message, int64_t n, int64_t e, int64_t block_size) {
    std::vector<int64_t> encrypted = {};
    std::vector<int64_t> blocks = get_blocks_from_text(message, block_size);
    for (int64_t block : blocks) {
        encrypted = ([&]{ auto __tmp = encrypted; __tmp.push_back(mod_pow(block, e, n)); return __tmp; }());
    }
    return encrypted;
}

std::string decrypt_message(const std::vector<int64_t>& blocks, int64_t message_length, int64_t n, int64_t d, int64_t block_size) {
    std::vector<int64_t> decrypted_blocks = {};
    for (int64_t block : blocks) {
        decrypted_blocks = ([&]{ auto __tmp = decrypted_blocks; __tmp.push_back(mod_pow(block, d, n)); return __tmp; }());
    }
    std::string message = std::string("");
    for (int64_t num : decrypted_blocks) {
        message = (message + chr(num));
    }
    return message;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string message = std::string("hello world");
        int64_t n = int64_t(3233);
        int64_t e = int64_t(17);
        int64_t d = int64_t(2753);
        int64_t block_size = int64_t(1);
        std::vector<int64_t> encrypted = encrypt_message(message, n, e, block_size);
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = encrypted; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::string decrypted = decrypt_message(encrypted, (int64_t)(message.size()), n, d, block_size);
        std::cout << decrypted;
        std::cout << std::endl;
    }
    return 0;
}
