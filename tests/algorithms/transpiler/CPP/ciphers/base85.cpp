// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:25:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static long _index_of(const std::string& s, const std::string& sub) {
    auto pos = s.find(sub);
    return pos == std::string::npos ? -1 : static_cast<long>(pos);
}
template<typename T> long _index_of(const std::vector<T>& xs, const T& v) {
    for(size_t i=0;i<xs.size();++i){ if(xs[i]==v) return i; }
    return -1;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t indexOf(std::string s, std::string ch);
int64_t ord(std::string ch);
std::string chr(int64_t n);
std::string to_binary(int64_t n, int64_t bits);
int64_t bin_to_int(std::string bits);
std::string reverse(std::string s);
std::string base10_to_85(int64_t d);
int64_t base85_to_10(std::string digits);
std::string ascii85_encode(std::string data);
std::string ascii85_decode(std::string data);
int main();

std::string ascii85_chars = std::string("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu");

int64_t indexOf(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((std::string(1, s[i]) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t ord(std::string ch) {
    int64_t idx = _index_of(ascii85_chars, ch);
    if ((idx >= int64_t(0))) {
        return (int64_t(33) + idx);
    }
    return int64_t(0);
}

std::string chr(int64_t n) {
    if (((n >= int64_t(33)) && (n <= int64_t(117)))) {
        return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((n - int64_t(33)), (n - int64_t(32)) - (n - int64_t(33))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(n - int64_t(33)), __v.begin()+(n - int64_t(32))); })(ascii85_chars);
    }
    return std::string("?");
}

std::string to_binary(int64_t n, int64_t bits) {
    std::string b = std::string("");
    int64_t val = n;
    while ((val > int64_t(0))) {
        b = (([&]{ std::ostringstream ss; ss << std::boolalpha << (val % int64_t(2)); return ss.str(); }()) + b);
        val = (val / int64_t(2));
    }
    while ((b.size() < bits)) {
        b = (std::string("0") + b);
    }
    if ((b.size() == int64_t(0))) {
        b = std::string("0");
    }
    return b;
}

int64_t bin_to_int(std::string bits) {
    int64_t n = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < bits.size())) {
        if ((std::string(1, bits[i]) == std::string("1"))) {
            n = ((n * int64_t(2)) + int64_t(1));
        } else {
            n = (n * int64_t(2));
        }
        i = (i + int64_t(1));
    }
    return n;
}

std::string reverse(std::string s) {
    std::string res = std::string("");
    int64_t i = (s.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        res = (res + std::string(1, s[i]));
        i = (i - int64_t(1));
    }
    return res;
}

std::string base10_to_85(int64_t d) {
    if ((d > int64_t(0))) {
        return (chr(((d % int64_t(85)) + int64_t(33))) + base10_to_85((d / int64_t(85))));
    }
    return std::string("");
}

int64_t base85_to_10(std::string digits) {
    int64_t value = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < digits.size())) {
        value = ((value * int64_t(85)) + (ord(std::string(1, digits[i])) - int64_t(33)));
        i = (i + int64_t(1));
    }
    return value;
}

std::string ascii85_encode(std::string data) {
    std::string binary_data = std::string("");
    for (char ch : data) {
        binary_data = (binary_data + to_binary(ord(std::string(1, ch)), int64_t(8)));
    }
    int64_t null_values = (((int64_t(32) * ((binary_data.size() / int64_t(32)) + int64_t(1))) - binary_data.size()) / int64_t(8));
    int64_t total_bits = (int64_t(32) * ((binary_data.size() / int64_t(32)) + int64_t(1)));
    while ((binary_data.size() < total_bits)) {
        binary_data = (binary_data + std::string("0"));
    }
    std::string result = std::string("");
    int64_t i = int64_t(0);
    while ((i < binary_data.size())) {
        std::string chunk_bits = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(32)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(32))); })(binary_data);
        int64_t chunk_val = bin_to_int(chunk_bits);
        std::string encoded = reverse(base10_to_85(chunk_val));
        result = (result + encoded);
        i = (i + int64_t(32));
    }
    if (((null_values % int64_t(4)) != int64_t(0))) {
        result = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (result.size() - null_values) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(result.size() - null_values)); })(result);
    }
    return result;
}

std::string ascii85_decode(std::string data) {
    int64_t null_values = ((int64_t(5) * ((data.size() / int64_t(5)) + int64_t(1))) - data.size());
    std::string binary_data = data;
    int64_t i = int64_t(0);
    while ((i < null_values)) {
        binary_data = (binary_data + std::string("u"));
        i = (i + int64_t(1));
    }
    std::string result = std::string("");
    i = int64_t(0);
    while ((i < binary_data.size())) {
        std::string chunk = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(5)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(5))); })(binary_data);
        int64_t value = base85_to_10(chunk);
        std::string bits = to_binary(value, int64_t(32));
        int64_t j = int64_t(0);
        while ((j < int64_t(32))) {
            std::string byte_bits = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(8)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(8))); })(bits);
            std::string c = chr(bin_to_int(byte_bits));
            result = (result + c);
            j = (j + int64_t(8));
        }
        i = (i + int64_t(5));
    }
    int64_t trim = null_values;
    if (((null_values % int64_t(5)) == int64_t(0))) {
        trim = (null_values - int64_t(1));
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (result.size() - trim) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(result.size() - trim)); })(result);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ascii85_encode(std::string(""));
        std::cout << std::endl;
        std::cout << ascii85_encode(std::string("12345"));
        std::cout << std::endl;
        std::cout << ascii85_encode(std::string("base 85"));
        std::cout << std::endl;
        std::cout << ascii85_decode(std::string(""));
        std::cout << std::endl;
        std::cout << ascii85_decode(std::string("0etOA2#"));
        std::cout << std::endl;
        std::cout << ascii85_decode(std::string("@UX=h+?24"));
        std::cout << std::endl;
    }
    return 0;
}
