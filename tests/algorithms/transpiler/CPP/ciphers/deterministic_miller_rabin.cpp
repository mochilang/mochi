// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:27:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t mod_pow(int64_t base, int64_t _exp, int64_t mod);
bool miller_rabin(int64_t n, bool allow_probable);
int main();

int64_t mod_pow(int64_t base, int64_t _exp, int64_t mod) {
    int64_t result = int64_t(1);
    int64_t b = (base % mod);
    int64_t e = _exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % mod);
        }
        b = ((b * b) % mod);
        e = (e / int64_t(2));
    }
    return result;
}

bool miller_rabin(int64_t n, bool allow_probable) {
    if ((n == int64_t(2))) {
        return true;
    }
    if (((n < int64_t(2)) || ((n % int64_t(2)) == int64_t(0)))) {
        return false;
    }
    if ((n > int64_t(5))) {
        int64_t last = (n % int64_t(10));
        if (!((((last == int64_t(1)) || (last == int64_t(3))) || (last == int64_t(7))) || (last == int64_t(9)))) {
            return false;
        }
    }
    int64_t limit = int64_t(3825123056546413051);
    if (((n > limit) && !allow_probable)) {
        throw std::runtime_error(std::string("Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test."));
    }
    std::vector<int64_t> bounds = std::vector<int64_t>{int64_t(2047), int64_t(1373653), int64_t(25326001), int64_t(3215031751), int64_t(2152302898747), int64_t(3474749660383), int64_t(341550071728321), limit};
    std::vector<int64_t> primes = std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(5), int64_t(7), int64_t(11), int64_t(13), int64_t(17), int64_t(19)};
    int64_t i = int64_t(0);
    int plist_len = primes.size();
    while ((i < bounds.size())) {
        if ((n < bounds[i])) {
            plist_len = (i + int64_t(1));
            i = bounds.size();
        } else {
            i = (i + int64_t(1));
        }
    }
    int64_t d = (n - int64_t(1));
    int64_t s = int64_t(0);
    while (((d % int64_t(2)) == int64_t(0))) {
        d = (d / int64_t(2));
        s = (s + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < plist_len)) {
        int64_t prime = primes[j];
        int64_t x = mod_pow(prime, d, n);
        bool pr = false;
        if (((x == int64_t(1)) || (x == (n - int64_t(1))))) {
            pr = true;
        } else {
            int64_t r = int64_t(1);
            while (((r < s) && !pr)) {
                x = ((x * x) % n);
                if ((x == (n - int64_t(1)))) {
                    pr = true;
                }
                r = (r + int64_t(1));
            }
        }
        if (!pr) {
            return false;
        }
        j = (j + int64_t(1));
    }
    return true;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(561), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(563), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(838201), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(838207), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(17316001), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(17316017), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(3078386641), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(3078386653), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(1713045574801), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(1713045574819), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(2779799728307), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(2779799728327), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(113850023909441), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(113850023909527), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(1275041018848804351), false); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << miller_rabin(int64_t(1275041018848804391), false); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
