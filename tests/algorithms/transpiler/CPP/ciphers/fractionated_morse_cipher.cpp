// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:27:55 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <type_traits>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string encodeToMorse(std::string plaintext);
std::string encryptFractionatedMorse(std::string plaintext, std::string key);
std::string decryptFractionatedMorse(std::string ciphertext, std::string key);
int main();

std::map<std::string, std::string> MORSE_CODE_DICT = std::map<std::string, std::string>{{"A", std::string(".-")}, {"B", std::string("-...")}, {"C", std::string("-.-.")}, {"D", std::string("-..")}, {"E", std::string(".")}, {"F", std::string("..-.")}, {"G", std::string("--.")}, {"H", std::string("....")}, {"I", std::string("..")}, {"J", std::string(".---")}, {"K", std::string("-.-")}, {"L", std::string(".-..")}, {"M", std::string("--")}, {"N", std::string("-.")}, {"O", std::string("---")}, {"P", std::string(".--.")}, {"Q", std::string("--.-")}, {"R", std::string(".-.")}, {"S", std::string("...")}, {"T", std::string("-")}, {"U", std::string("..-")}, {"V", std::string("...-")}, {"W", std::string(".--")}, {"X", std::string("-..-")}, {"Y", std::string("-.--")}, {"Z", std::string("--..")}, {" ", std::string("")}};
std::vector<std::string> MORSE_COMBINATIONS = std::vector<std::string>{std::string("..."), std::string("..-"), std::string("..x"), std::string(".-."), std::string(".--"), std::string(".-x"), std::string(".x."), std::string(".x-"), std::string(".xx"), std::string("-.."), std::string("-.-"), std::string("-.x"), std::string("--."), std::string("---"), std::string("--x"), std::string("-x."), std::string("-x-"), std::string("-xx"), std::string("x.."), std::string("x.-"), std::string("x.x"), std::string("x-."), std::string("x--"), std::string("x-x"), std::string("xx."), std::string("xx-"), std::string("xxx")};
std::map<std::string, std::string> REVERSE_DICT = std::map<std::string, std::string>{{".-", std::string("A")}, {"-...", std::string("B")}, {"-.-.", std::string("C")}, {"-..", std::string("D")}, {".", std::string("E")}, {"..-.", std::string("F")}, {"--.", std::string("G")}, {"....", std::string("H")}, {"..", std::string("I")}, {".---", std::string("J")}, {"-.-", std::string("K")}, {".-..", std::string("L")}, {"--", std::string("M")}, {"-.", std::string("N")}, {"---", std::string("O")}, {".--.", std::string("P")}, {"--.-", std::string("Q")}, {".-.", std::string("R")}, {"...", std::string("S")}, {"-", std::string("T")}, {"..-", std::string("U")}, {"...-", std::string("V")}, {".--", std::string("W")}, {"-..-", std::string("X")}, {"-.--", std::string("Y")}, {"--..", std::string("Z")}, {"", std::string(" ")}};
std::string plaintext = std::string("defend the east");
std::string key = std::string("ROUNDTABLE");
std::string ciphertext = encryptFractionatedMorse(plaintext, key);
std::string decrypted = decryptFractionatedMorse(ciphertext, key);

std::string encodeToMorse(std::string plaintext) {
    std::string morse = std::string("");
    int64_t i = int64_t(0);
    while ((i < plaintext.size())) {
        std::string ch = ([&]{ std::string __s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(plaintext); for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }());
        std::string code = std::string("");
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(MORSE_CODE_DICT, ch)) {
            code = ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : ""; })(MORSE_CODE_DICT);
        }
        if ((i > int64_t(0))) {
            morse = (morse + std::string("x"));
        }
        morse = (morse + code);
        i = (i + int64_t(1));
    }
    return morse;
}

std::string encryptFractionatedMorse(std::string plaintext, std::string key) {
    std::string morseCode = encodeToMorse(plaintext);
    std::string combinedKey = (([&]{ std::string __s = key; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }()) + std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    std::string dedupKey = std::string("");
    int64_t i = int64_t(0);
    while ((i < combinedKey.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(combinedKey);
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dedupKey, ch)) {
            dedupKey = (dedupKey + ch);
        }
        i = (i + int64_t(1));
    }
    int64_t paddingLength = (int64_t(3) - (morseCode.size() % int64_t(3)));
    int64_t p = int64_t(0);
    while ((p < paddingLength)) {
        morseCode = (morseCode + std::string("x"));
        p = (p + int64_t(1));
    }
    std::map<std::string, std::string> dict = std::map<std::string, std::string>{};
    int64_t j = int64_t(0);
    while ((j < int64_t(26))) {
        std::string combo = MORSE_COMBINATIONS[j];
        std::string letter = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(dedupKey);
        dict[combo] = letter;
        j = (j + int64_t(1));
    }
    dict[std::string("xxx")] = std::string("");
    std::string encrypted = std::string("");
    int64_t k = int64_t(0);
    while ((k < morseCode.size())) {
        std::string group = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(k, (k + int64_t(3)) - k); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+k, __v.begin()+(k + int64_t(3))); })(morseCode);
        encrypted = (encrypted + ([&](const auto& __m){ auto __it = __m.find(group); return __it != __m.end() ? __it->second : ""; })(dict));
        k = (k + int64_t(3));
    }
    return encrypted;
}

std::string decryptFractionatedMorse(std::string ciphertext, std::string key) {
    std::string combinedKey = (([&]{ std::string __s = key; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }()) + std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    std::string dedupKey = std::string("");
    int64_t i = int64_t(0);
    while ((i < combinedKey.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(combinedKey);
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(dedupKey, ch)) {
            dedupKey = (dedupKey + ch);
        }
        i = (i + int64_t(1));
    }
    std::map<std::string, std::string> inv = std::map<std::string, std::string>{};
    int64_t j = int64_t(0);
    while ((j < int64_t(26))) {
        std::string letter = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(dedupKey);
        inv[letter] = MORSE_COMBINATIONS[j];
        j = (j + int64_t(1));
    }
    std::string morse = std::string("");
    int64_t k = int64_t(0);
    while ((k < ciphertext.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(k, (k + int64_t(1)) - k); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+k, __v.begin()+(k + int64_t(1))); })(ciphertext);
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(inv, ch)) {
            morse = (morse + ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : ""; })(inv));
        }
        k = (k + int64_t(1));
    }
    std::vector<std::string> codes = {};
    std::string current = std::string("");
    int64_t m = int64_t(0);
    while ((m < morse.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(m, (m + int64_t(1)) - m); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+m, __v.begin()+(m + int64_t(1))); })(morse);
        if ((ch == std::string("x"))) {
            codes = ([&]{ auto __tmp = codes; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        m = (m + int64_t(1));
    }
    codes = ([&]{ auto __tmp = codes; __tmp.push_back(current); return __tmp; }());
    std::string decrypted = std::string("");
    int64_t idx = int64_t(0);
    while ((idx < codes.size())) {
        std::string code = codes[idx];
        decrypted = (decrypted + ([&](const auto& __m){ auto __it = __m.find(code); return __it != __m.end() ? __it->second : ""; })(REVERSE_DICT));
        idx = (idx + int64_t(1));
    }
    int64_t start = int64_t(0);
    while (true) {
        if ((start < decrypted.size())) {
            if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, (start + int64_t(1)) - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+(start + int64_t(1))); })(decrypted) == std::string(" "))) {
                start = (start + int64_t(1));
                continue;
            }
        }
        break;
    }
    int end = decrypted.size();
    while (true) {
        if ((end > start)) {
            if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((end - int64_t(1)), end - (end - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(end - int64_t(1)), __v.begin()+end); })(decrypted) == std::string(" "))) {
                end = (end - int64_t(1));
                continue;
            }
        }
        break;
    }
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(decrypted);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << std::string("Plain Text:");
        std::cout << " ";
        std::cout << plaintext;
        std::cout << std::endl;
        std::cout << std::string("Encrypted:");
        std::cout << " ";
        std::cout << ciphertext;
        std::cout << std::endl;
        std::cout << std::string("Decrypted:");
        std::cout << " ";
        std::cout << decrypted;
        std::cout << std::endl;
    }
    return 0;
}
