// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:28:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t mod36(int64_t n);
int64_t gcd(int64_t a, int64_t b);
int64_t replace_letters(std::string letter);
std::string replace_digits(int64_t num);
std::string to_upper(std::string c);
std::string process_text(std::string text, int64_t break_key);
std::vector<std::vector<int64_t>> matrix_minor(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col);
int64_t determinant(const std::vector<std::vector<int64_t>>& m);
std::vector<std::vector<int64_t>> cofactor_matrix(const std::vector<std::vector<int64_t>>& m);
std::vector<std::vector<int64_t>> transpose(const std::vector<std::vector<int64_t>>& m);
std::vector<std::vector<int64_t>> matrix_mod(const std::vector<std::vector<int64_t>>& m);
std::vector<std::vector<int64_t>> scalar_matrix_mult(int64_t s, const std::vector<std::vector<int64_t>>& m);
std::vector<std::vector<int64_t>> adjugate(const std::vector<std::vector<int64_t>>& m);
std::vector<int64_t> multiply_matrix_vector(const std::vector<std::vector<int64_t>>& m, const std::vector<int64_t>& v);
std::vector<std::vector<int64_t>> inverse_key(const std::vector<std::vector<int64_t>>& key);
std::string hill_encrypt(const std::vector<std::vector<int64_t>>& key, std::string text);
std::string hill_decrypt(const std::vector<std::vector<int64_t>>& key, std::string text);
int main();

std::string KEY_STRING = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
std::vector<std::vector<int64_t>> key = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(5)}, std::vector<int64_t>{int64_t(1), int64_t(6)}};

int64_t mod36(int64_t n) {
    int64_t r = (n % int64_t(36));
    if ((r < int64_t(0))) {
        r = (r + int64_t(36));
    }
    return r;
}

int64_t gcd(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    while ((y != int64_t(0))) {
        int64_t t = y;
        y = (x % y);
        x = t;
    }
    if ((x < int64_t(0))) {
        x = -x;
    }
    return x;
}

int64_t replace_letters(std::string letter) {
    int64_t i = int64_t(0);
    while ((i < KEY_STRING.size())) {
        if ((std::string(1, KEY_STRING[i]) == letter)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

std::string replace_digits(int64_t num) {
    int64_t idx = mod36(num);
    return std::string(1, KEY_STRING[idx]);
}

std::string to_upper(std::string c) {
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    int64_t i = int64_t(0);
    while ((i < lower.size())) {
        if ((c == std::string(1, lower[i]))) {
            return std::string(1, upper[i]);
        }
        i = (i + int64_t(1));
    }
    return c;
}

std::string process_text(std::string text, int64_t break_key) {
    std::vector<std::string> chars = {};
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        std::string c = to_upper(std::string(1, text[i]));
        int64_t j = int64_t(0);
        bool ok = false;
        while ((j < KEY_STRING.size())) {
            if ((std::string(1, KEY_STRING[j]) == c)) {
                ok = true;
                break;
            }
            j = (j + int64_t(1));
        }
        if (ok) {
            chars = ([&]{ auto __tmp = chars; __tmp.push_back(c); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    if ((chars.size() == int64_t(0))) {
        return std::string("");
    }
    std::string last = chars[static_cast<size_t>((chars.size() - int64_t(1)))];
    while (((chars.size() % break_key) != int64_t(0))) {
        chars = ([&]{ auto __tmp = chars; __tmp.push_back(last); return __tmp; }());
    }
    std::string res = std::string("");
    int64_t k = int64_t(0);
    while ((k < chars.size())) {
        res = (res + chars[k]);
        k = (k + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> matrix_minor(const std::vector<std::vector<int64_t>>& m, int64_t row, int64_t col) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        if ((i != row)) {
            std::vector<int64_t> r = {};
            int64_t j = int64_t(0);
            while ((j < m[i].size())) {
                if ((j != col)) {
                    r = ([&]{ auto __tmp = r; __tmp.push_back(m[i][j]); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
            res = ([&]{ auto __tmp = res; __tmp.push_back(r); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

int64_t determinant(const std::vector<std::vector<int64_t>>& m) {
    int n = m.size();
    if ((n == int64_t(1))) {
        return m[int64_t(0)][int64_t(0)];
    }
    if ((n == int64_t(2))) {
        return ((m[int64_t(0)][int64_t(0)] * m[int64_t(1)][int64_t(1)]) - (m[int64_t(0)][int64_t(1)] * m[int64_t(1)][int64_t(0)]));
    }
    int64_t det = int64_t(0);
    int64_t col = int64_t(0);
    while ((col < n)) {
        std::vector<std::vector<int64_t>> minor_mat = matrix_minor(m, int64_t(0), col);
        int64_t sign = int64_t(1);
        if (((col % int64_t(2)) == int64_t(1))) {
            sign = -int64_t(1);
        }
        det = (det + ((sign * m[int64_t(0)][col]) * determinant(minor_mat)));
        col = (col + int64_t(1));
    }
    return det;
}

std::vector<std::vector<int64_t>> cofactor_matrix(const std::vector<std::vector<int64_t>>& m) {
    int n = m.size();
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            std::vector<std::vector<int64_t>> minor_mat = matrix_minor(m, i, j);
            int64_t det_minor = determinant(minor_mat);
            int64_t sign = int64_t(1);
            if ((((i + j) % int64_t(2)) == int64_t(1))) {
                sign = -int64_t(1);
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back((sign * det_minor)); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> transpose(const std::vector<std::vector<int64_t>>& m) {
    int rows = m.size();
    int cols = m[int64_t(0)].size();
    std::vector<std::vector<int64_t>> res = {};
    int64_t j = int64_t(0);
    while ((j < cols)) {
        std::vector<int64_t> row = {};
        int64_t i = int64_t(0);
        while ((i < rows)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(m[i][j]); return __tmp; }());
            i = (i + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> matrix_mod(const std::vector<std::vector<int64_t>>& m) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < m[i].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(mod36(m[i][j])); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> scalar_matrix_mult(int64_t s, const std::vector<std::vector<int64_t>>& m) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < m[i].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(mod36((s * m[i][j]))); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> adjugate(const std::vector<std::vector<int64_t>>& m) {
    std::vector<std::vector<int64_t>> cof = cofactor_matrix(m);
    int n = cof.size();
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(cof[j][i]); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> multiply_matrix_vector(const std::vector<std::vector<int64_t>>& m, const std::vector<int64_t>& v) {
    int n = m.size();
    std::vector<int64_t> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        int64_t sum = int64_t(0);
        int64_t j = int64_t(0);
        while ((j < n)) {
            sum = (sum + (m[i][j] * v[j]));
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(mod36(sum)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> inverse_key(const std::vector<std::vector<int64_t>>& key) {
    int64_t det_val = determinant(key);
    int64_t det_mod = mod36(det_val);
    int64_t det_inv = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < int64_t(36))) {
        if ((((det_mod * i) % int64_t(36)) == int64_t(1))) {
            det_inv = i;
            break;
        }
        i = (i + int64_t(1));
    }
    std::vector<std::vector<int64_t>> adj = adjugate(key);
    std::vector<std::vector<int64_t>> tmp = scalar_matrix_mult(det_inv, adj);
    std::vector<std::vector<int64_t>> res = matrix_mod(tmp);
    return res;
}

std::string hill_encrypt(const std::vector<std::vector<int64_t>>& key, std::string text) {
    int break_key = key.size();
    std::string processed = process_text(text, (int64_t)(break_key));
    std::string encrypted = std::string("");
    int64_t i = int64_t(0);
    while ((i < processed.size())) {
        std::vector<int64_t> vec = {};
        int64_t j = int64_t(0);
        while ((j < break_key)) {
            vec = ([&]{ auto __tmp = vec; __tmp.push_back(replace_letters(std::string(1, processed[(i + j)]))); return __tmp; }());
            j = (j + int64_t(1));
        }
        std::vector<int64_t> enc_vec = multiply_matrix_vector(key, vec);
        int64_t k = int64_t(0);
        while ((k < break_key)) {
            encrypted = (encrypted + replace_digits(enc_vec[k]));
            k = (k + int64_t(1));
        }
        i = (i + break_key);
    }
    return encrypted;
}

std::string hill_decrypt(const std::vector<std::vector<int64_t>>& key, std::string text) {
    int break_key = key.size();
    std::vector<std::vector<int64_t>> decrypt_key = inverse_key(key);
    std::string processed = process_text(text, (int64_t)(break_key));
    std::string decrypted = std::string("");
    int64_t i = int64_t(0);
    while ((i < processed.size())) {
        std::vector<int64_t> vec = {};
        int64_t j = int64_t(0);
        while ((j < break_key)) {
            vec = ([&]{ auto __tmp = vec; __tmp.push_back(replace_letters(std::string(1, processed[(i + j)]))); return __tmp; }());
            j = (j + int64_t(1));
        }
        std::vector<int64_t> dec_vec = multiply_matrix_vector(decrypt_key, vec);
        int64_t k = int64_t(0);
        while ((k < break_key)) {
            decrypted = (decrypted + replace_digits(dec_vec[k]));
            k = (k + int64_t(1));
        }
        i = (i + break_key);
    }
    return decrypted;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << hill_encrypt(key, std::string("testing hill cipher"));
        std::cout << std::endl;
        std::cout << hill_encrypt(key, std::string("hello"));
        std::cout << std::endl;
        std::cout << hill_decrypt(key, std::string("WHXYJOLM9C6XT085LL"));
        std::cout << std::endl;
        std::cout << hill_decrypt(key, std::string("85FF00"));
        std::cout << std::endl;
    }
    return 0;
}
