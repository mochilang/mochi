// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:29:22 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string to_upper_char(std::string c);
std::string to_upper(std::string s);
int64_t index_of(const std::vector<std::string>& xs, std::string target);
std::string encrypt(std::string message);
std::vector<std::string> split_spaces(std::string s);
std::string decrypt(std::string message);
int main();

std::vector<std::string> CHARS = std::vector<std::string>{std::string("A"), std::string("B"), std::string("C"), std::string("D"), std::string("E"), std::string("F"), std::string("G"), std::string("H"), std::string("I"), std::string("J"), std::string("K"), std::string("L"), std::string("M"), std::string("N"), std::string("O"), std::string("P"), std::string("Q"), std::string("R"), std::string("S"), std::string("T"), std::string("U"), std::string("V"), std::string("W"), std::string("X"), std::string("Y"), std::string("Z"), std::string("1"), std::string("2"), std::string("3"), std::string("4"), std::string("5"), std::string("6"), std::string("7"), std::string("8"), std::string("9"), std::string("0"), std::string("&"), std::string("@"), std::string(":"), std::string(","), std::string("."), std::string("'"), std::string("\""), std::string("?"), std::string("/"), std::string("="), std::string("+"), std::string("-"), std::string("("), std::string(")"), std::string("!"), std::string(" ")};
std::vector<std::string> CODES = std::vector<std::string>{std::string(".-"), std::string("-..."), std::string("-.-."), std::string("-.."), std::string("."), std::string("..-."), std::string("--."), std::string("...."), std::string(".."), std::string(".---"), std::string("-.-"), std::string(".-.."), std::string("--"), std::string("-."), std::string("---"), std::string(".--."), std::string("--.-"), std::string(".-."), std::string("..."), std::string("-"), std::string("..-"), std::string("...-"), std::string(".--"), std::string("-..-"), std::string("-.--"), std::string("--.."), std::string(".----"), std::string("..---"), std::string("...--"), std::string("....-"), std::string("....."), std::string("-...."), std::string("--..."), std::string("---.."), std::string("----."), std::string("-----"), std::string(".-..."), std::string(".--.-."), std::string("---..."), std::string("--..--"), std::string(".-.-.-"), std::string(".----."), std::string(".-..-."), std::string("..--.."), std::string("-..-."), std::string("-...-"), std::string(".-.-."), std::string("-....-"), std::string("-.--."), std::string("-.--.-"), std::string("-.-.--"), std::string("/")};
std::string msg = std::string("Morse code here!");
std::string enc = encrypt(msg);
std::string dec = decrypt(enc);

std::string to_upper_char(std::string c) {
    if ((c == std::string("a"))) {
        return std::string("A");
    }
    if ((c == std::string("b"))) {
        return std::string("B");
    }
    if ((c == std::string("c"))) {
        return std::string("C");
    }
    if ((c == std::string("d"))) {
        return std::string("D");
    }
    if ((c == std::string("e"))) {
        return std::string("E");
    }
    if ((c == std::string("f"))) {
        return std::string("F");
    }
    if ((c == std::string("g"))) {
        return std::string("G");
    }
    if ((c == std::string("h"))) {
        return std::string("H");
    }
    if ((c == std::string("i"))) {
        return std::string("I");
    }
    if ((c == std::string("j"))) {
        return std::string("J");
    }
    if ((c == std::string("k"))) {
        return std::string("K");
    }
    if ((c == std::string("l"))) {
        return std::string("L");
    }
    if ((c == std::string("m"))) {
        return std::string("M");
    }
    if ((c == std::string("n"))) {
        return std::string("N");
    }
    if ((c == std::string("o"))) {
        return std::string("O");
    }
    if ((c == std::string("p"))) {
        return std::string("P");
    }
    if ((c == std::string("q"))) {
        return std::string("Q");
    }
    if ((c == std::string("r"))) {
        return std::string("R");
    }
    if ((c == std::string("s"))) {
        return std::string("S");
    }
    if ((c == std::string("t"))) {
        return std::string("T");
    }
    if ((c == std::string("u"))) {
        return std::string("U");
    }
    if ((c == std::string("v"))) {
        return std::string("V");
    }
    if ((c == std::string("w"))) {
        return std::string("W");
    }
    if ((c == std::string("x"))) {
        return std::string("X");
    }
    if ((c == std::string("y"))) {
        return std::string("Y");
    }
    if ((c == std::string("z"))) {
        return std::string("Z");
    }
    return c;
}

std::string to_upper(std::string s) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        res = (res + to_upper_char(std::string(1, s[i])));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t index_of(const std::vector<std::string>& xs, std::string target) {
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((xs[i] == target)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string encrypt(std::string message) {
    std::string msg = to_upper(message);
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < msg.size())) {
        std::string c = std::string(1, msg[i]);
        int64_t idx = index_of(CHARS, c);
        if ((idx >= int64_t(0))) {
            if ((res != std::string(""))) {
                res = (res + std::string(" "));
            }
            res = (res + CODES[idx]);
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> split_spaces(std::string s) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = std::string(1, s[i]);
        if ((ch == std::string(" "))) {
            if ((current != std::string(""))) {
                res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
                current = std::string("");
            }
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    if ((current != std::string(""))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    }
    return res;
}

std::string decrypt(std::string message) {
    std::vector<std::string> parts = split_spaces(message);
    std::string res = std::string("");
    for (std::string code : parts) {
        int64_t idx = index_of(CODES, code);
        if ((idx >= int64_t(0))) {
            res = (res + CHARS[idx]);
        }
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << msg;
        std::cout << std::endl;
        std::cout << enc;
        std::cout << std::endl;
        std::cout << dec;
        std::cout << std::endl;
        std::cout << encrypt(std::string("Sos!"));
        std::cout << std::endl;
        std::cout << decrypt(std::string("... --- ... -.-.--"));
        std::cout << std::endl;
    }
    return 0;
}
