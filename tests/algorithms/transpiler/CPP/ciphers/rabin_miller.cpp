// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:30:30 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t int_pow(int64_t base, int64_t _exp);
int64_t pow_mod(int64_t base, int64_t _exp, int64_t mod);
int64_t rand_range(int64_t low, int64_t high);
bool rabin_miller(int64_t num);
bool is_prime_low_num(int64_t num);
int64_t generate_large_prime(int64_t keysize);
int main();

int64_t p = generate_large_prime(int64_t(16));

int64_t int_pow(int64_t base, int64_t _exp) {
    int64_t result = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

int64_t pow_mod(int64_t base, int64_t _exp, int64_t mod) {
    int64_t result = int64_t(1);
    int64_t b = (base % mod);
    int64_t e = _exp;
    while ((e > int64_t(0))) {
        if (((e % int64_t(2)) == int64_t(1))) {
            result = ((result * b) % mod);
        }
        e = (e / int64_t(2));
        b = ((b * b) % mod);
    }
    return result;
}

int64_t rand_range(int64_t low, int64_t high) {
    return ((_now() % (high - low)) + low);
}

bool rabin_miller(int64_t num) {
    int64_t s = (num - int64_t(1));
    int64_t t = int64_t(0);
    while (((s % int64_t(2)) == int64_t(0))) {
        s = (s / int64_t(2));
        t = (t + int64_t(1));
    }
    int64_t k = int64_t(0);
    while ((k < int64_t(5))) {
        int64_t a = rand_range(int64_t(2), (num - int64_t(1)));
        int64_t v = pow_mod(a, s, num);
        if ((v != int64_t(1))) {
            int64_t i = int64_t(0);
            while ((v != (num - int64_t(1)))) {
                if ((i == (t - int64_t(1)))) {
                    return false;
                }
                i = (i + int64_t(1));
                v = ((v * v) % num);
            }
        }
        k = (k + int64_t(1));
    }
    return true;
}

bool is_prime_low_num(int64_t num) {
    if ((num < int64_t(2))) {
        return false;
    }
    std::vector<int64_t> low_primes = std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(5), int64_t(7), int64_t(11), int64_t(13), int64_t(17), int64_t(19), int64_t(23), int64_t(29), int64_t(31), int64_t(37), int64_t(41), int64_t(43), int64_t(47), int64_t(53), int64_t(59), int64_t(61), int64_t(67), int64_t(71), int64_t(73), int64_t(79), int64_t(83), int64_t(89), int64_t(97), int64_t(101), int64_t(103), int64_t(107), int64_t(109), int64_t(113), int64_t(127), int64_t(131), int64_t(137), int64_t(139), int64_t(149), int64_t(151), int64_t(157), int64_t(163), int64_t(167), int64_t(173), int64_t(179), int64_t(181), int64_t(191), int64_t(193), int64_t(197), int64_t(199), int64_t(211), int64_t(223), int64_t(227), int64_t(229), int64_t(233), int64_t(239), int64_t(241), int64_t(251), int64_t(257), int64_t(263), int64_t(269), int64_t(271), int64_t(277), int64_t(281), int64_t(283), int64_t(293), int64_t(307), int64_t(311), int64_t(313), int64_t(317), int64_t(331), int64_t(337), int64_t(347), int64_t(349), int64_t(353), int64_t(359), int64_t(367), int64_t(373), int64_t(379), int64_t(383), int64_t(389), int64_t(397), int64_t(401), int64_t(409), int64_t(419), int64_t(421), int64_t(431), int64_t(433), int64_t(439), int64_t(443), int64_t(449), int64_t(457), int64_t(461), int64_t(463), int64_t(467), int64_t(479), int64_t(487), int64_t(491), int64_t(499), int64_t(503), int64_t(509), int64_t(521), int64_t(523), int64_t(541), int64_t(547), int64_t(557), int64_t(563), int64_t(569), int64_t(571), int64_t(577), int64_t(587), int64_t(593), int64_t(599), int64_t(601), int64_t(607), int64_t(613), int64_t(617), int64_t(619), int64_t(631), int64_t(641), int64_t(643), int64_t(647), int64_t(653), int64_t(659), int64_t(661), int64_t(673), int64_t(677), int64_t(683), int64_t(691), int64_t(701), int64_t(709), int64_t(719), int64_t(727), int64_t(733), int64_t(739), int64_t(743), int64_t(751), int64_t(757), int64_t(761), int64_t(769), int64_t(773), int64_t(787), int64_t(797), int64_t(809), int64_t(811), int64_t(821), int64_t(823), int64_t(827), int64_t(829), int64_t(839), int64_t(853), int64_t(857), int64_t(859), int64_t(863), int64_t(877), int64_t(881), int64_t(883), int64_t(887), int64_t(907), int64_t(911), int64_t(919), int64_t(929), int64_t(937), int64_t(941), int64_t(947), int64_t(953), int64_t(967), int64_t(971), int64_t(977), int64_t(983), int64_t(991), int64_t(997)};
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(low_primes, num)) {
        return true;
    }
    int64_t i = int64_t(0);
    while ((i < low_primes.size())) {
        int64_t p = low_primes[i];
        if (((num % p) == int64_t(0))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return rabin_miller(num);
}

int64_t generate_large_prime(int64_t keysize) {
    int64_t start = int_pow(int64_t(2), (keysize - int64_t(1)));
    int64_t end = int_pow(int64_t(2), keysize);
    while (true) {
        int64_t num = rand_range(start, end);
        if (is_prime_low_num(num)) {
            return num;
        }
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (std::string("Prime number: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << p; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("is_prime_low_num: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << is_prime_low_num(p); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
