// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:41:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string remove_spaces(std::string s);
std::string char_to_trigram(std::string ch, std::string alphabet);
std::string trigram_to_char(std::string tri, std::string alphabet);
std::string encrypt_part(std::string part, std::string alphabet);
std::string encrypt_message(std::string message, std::string alphabet, int64_t period);
std::vector<std::string> decrypt_part(std::string part, std::string alphabet);
std::string decrypt_message(std::string message, std::string alphabet, int64_t period);
int main();

std::vector<std::string> triagrams = std::vector<std::string>{std::string("111"), std::string("112"), std::string("113"), std::string("121"), std::string("122"), std::string("123"), std::string("131"), std::string("132"), std::string("133"), std::string("211"), std::string("212"), std::string("213"), std::string("221"), std::string("222"), std::string("223"), std::string("231"), std::string("232"), std::string("233"), std::string("311"), std::string("312"), std::string("313"), std::string("321"), std::string("322"), std::string("323"), std::string("331"), std::string("332"), std::string("333")};

std::string remove_spaces(std::string s) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = s.substr(i, (i + int64_t(1)) - i);
        if ((c != std::string(" "))) {
            res = (res + c);
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string char_to_trigram(std::string ch, std::string alphabet) {
    int64_t i = int64_t(0);
    while ((i < alphabet.size())) {
        if ((alphabet.substr(i, (i + int64_t(1)) - i) == ch)) {
            return triagrams[i];
        }
        i = (i + int64_t(1));
    }
    return std::string("");
}

std::string trigram_to_char(std::string tri, std::string alphabet) {
    int64_t i = int64_t(0);
    while ((i < triagrams.size())) {
        if ((triagrams[i] == tri)) {
            return alphabet.substr(i, (i + int64_t(1)) - i);
        }
        i = (i + int64_t(1));
    }
    return std::string("");
}

std::string encrypt_part(std::string part, std::string alphabet) {
    std::string one = std::string("");
    std::string two = std::string("");
    std::string three = std::string("");
    int64_t i = int64_t(0);
    while ((i < part.size())) {
        std::string tri = char_to_trigram(part.substr(i, (i + int64_t(1)) - i), alphabet);
        one = (one + tri.substr(int64_t(0), int64_t(1) - int64_t(0)));
        two = (two + tri.substr(int64_t(1), int64_t(2) - int64_t(1)));
        three = (three + tri.substr(int64_t(2), int64_t(3) - int64_t(2)));
        i = (i + int64_t(1));
    }
    return ((one + two) + three);
}

std::string encrypt_message(std::string message, std::string alphabet, int64_t period) {
    std::string msg = remove_spaces(message);
    std::string alpha = remove_spaces(alphabet);
    if ((alpha.size() != int64_t(27))) {
        return std::string("");
    }
    std::string encrypted_numeric = std::string("");
    int64_t i = int64_t(0);
    while ((i < msg.size())) {
        int64_t end = (i + period);
        if ((end > msg.size())) {
            end = msg.size();
        }
        std::string part = msg.substr(i, end - i);
        encrypted_numeric = (encrypted_numeric + encrypt_part(part, alpha));
        i = (i + period);
    }
    std::string encrypted = std::string("");
    int64_t j = int64_t(0);
    while ((j < encrypted_numeric.size())) {
        std::string tri = encrypted_numeric.substr(j, (j + int64_t(3)) - j);
        encrypted = (encrypted + trigram_to_char(tri, alpha));
        j = (j + int64_t(3));
    }
    return encrypted;
}

std::vector<std::string> decrypt_part(std::string part, std::string alphabet) {
    std::string converted = std::string("");
    int64_t i = int64_t(0);
    while ((i < part.size())) {
        std::string tri = char_to_trigram(part.substr(i, (i + int64_t(1)) - i), alphabet);
        converted = (converted + tri);
        i = (i + int64_t(1));
    }
    std::vector<std::string> result = {};
    std::string tmp = std::string("");
    int64_t j = int64_t(0);
    while ((j < converted.size())) {
        tmp = (tmp + converted.substr(j, (j + int64_t(1)) - j));
        if ((tmp.size() == part.size())) {
            result = ([&]{ auto __tmp = result; __tmp.push_back(tmp); return __tmp; }());
            tmp = std::string("");
        }
        j = (j + int64_t(1));
    }
    return result;
}

std::string decrypt_message(std::string message, std::string alphabet, int64_t period) {
    std::string msg = remove_spaces(message);
    std::string alpha = remove_spaces(alphabet);
    if ((alpha.size() != int64_t(27))) {
        return std::string("");
    }
    std::vector<std::string> decrypted_numeric = {};
    int64_t i = int64_t(0);
    while ((i < msg.size())) {
        int64_t end = (i + period);
        if ((end > msg.size())) {
            end = msg.size();
        }
        std::string part = msg.substr(i, end - i);
        std::vector<std::string> groups = decrypt_part(part, alpha);
        int64_t k = int64_t(0);
        while ((k < groups[int64_t(0)].size())) {
            std::string tri = ((groups[int64_t(0)].substr(k, (k + int64_t(1)) - k) + groups[int64_t(1)].substr(k, (k + int64_t(1)) - k)) + groups[int64_t(2)].substr(k, (k + int64_t(1)) - k));
            decrypted_numeric = ([&]{ auto __tmp = decrypted_numeric; __tmp.push_back(tri); return __tmp; }());
            k = (k + int64_t(1));
        }
        i = (i + period);
    }
    std::string decrypted = std::string("");
    int64_t j = int64_t(0);
    while ((j < decrypted_numeric.size())) {
        decrypted = (decrypted + trigram_to_char(decrypted_numeric[j], alpha));
        j = (j + int64_t(1));
    }
    return decrypted;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string msg = std::string("DEFEND THE EAST WALL OF THE CASTLE.");
        std::string alphabet = std::string("EPSDUCVWYM.ZLKXNBTFGORIJHAQ");
        std::string encrypted = encrypt_message(msg, alphabet, int64_t(5));
        std::string decrypted = decrypt_message(encrypted, alphabet, int64_t(5));
        std::cout << (std::string("Encrypted: ") + encrypted);
        std::cout << std::endl;
        std::cout << (std::string("Decrypted: ") + decrypted);
        std::cout << std::endl;
    }
    return 0;
}
