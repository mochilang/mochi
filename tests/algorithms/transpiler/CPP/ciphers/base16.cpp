// Generated by Mochi transpiler v0.10.59 on 2025-08-06 20:57:16 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string base16_encode(const std::vector<int64_t>& data);
std::vector<int64_t> base16_decode(std::string data);
int main();

std::vector<int64_t> example1 = std::vector<int64_t>{int64_t(72), int64_t(101), int64_t(108), int64_t(108), int64_t(111), int64_t(32), int64_t(87), int64_t(111), int64_t(114), int64_t(108), int64_t(100), int64_t(33)};
std::vector<int64_t> example2 = std::vector<int64_t>{int64_t(72), int64_t(69), int64_t(76), int64_t(76), int64_t(79), int64_t(32), int64_t(87), int64_t(79), int64_t(82), int64_t(76), int64_t(68), int64_t(33)};

std::string base16_encode(const std::vector<int64_t>& data) {
    std::string digits = std::string("0123456789ABCDEF");
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < data.size())) {
        int64_t b = data[i];
        if (((b < int64_t(0)) || (b > int64_t(255)))) {
            throw std::runtime_error(std::string("byte out of range"));
        }
        int64_t hi = (b / int64_t(16));
        int64_t lo = (b % int64_t(16));
        res = ((res + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(hi, (hi + int64_t(1)) - hi); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+hi, __v.begin()+(hi + int64_t(1))); })(digits)) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(lo, (lo + int64_t(1)) - lo); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+lo, __v.begin()+(lo + int64_t(1))); })(digits));
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> base16_decode(std::string data) {
    std::string digits = std::string("0123456789ABCDEF");
    if (((data.size() % int64_t(2)) != int64_t(0))) {
        throw std::runtime_error(std::string("Base16 encoded data is invalid: Data does not have an even number of hex digits."));
    }
    std::function<int64_t(std::string)> hex_value = [=](std::string ch) mutable {
        int64_t j = int64_t(0);
        while ((j < int64_t(16))) {
            if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(digits) == ch)) {
                return j;
            }
            j = (j + int64_t(1));
        }
        return -int64_t(1);
    };
    std::vector<int64_t> out = {};
    int64_t i = int64_t(0);
    while ((i < data.size())) {
        std::string hi_char = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(data);
        std::string lo_char = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((i + int64_t(1)), (i + int64_t(2)) - (i + int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(i + int64_t(1)), __v.begin()+(i + int64_t(2))); })(data);
        auto hi = hex_value(hi_char);
        auto lo = hex_value(lo_char);
        if (((hi < int64_t(0)) || (lo < int64_t(0)))) {
            throw std::runtime_error(std::string("Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters."));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back((int64_t)((double)((hi * int64_t(16))) + (double)(lo))); return __tmp; }());
        i = (i + int64_t(2));
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << base16_encode(example1);
        std::cout << std::endl;
        std::cout << base16_encode(example2);
        std::cout << std::endl;
        std::cout << base16_encode(std::vector<int64_t>{});
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = base16_decode(std::string("48656C6C6F20576F726C6421")); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = base16_decode(std::string("48454C4C4F20574F524C4421")); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = base16_decode(std::string("")); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
