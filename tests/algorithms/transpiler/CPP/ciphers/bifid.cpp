// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:25:52 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t index_of(std::string s, std::string ch);
std::string to_lower_without_spaces(std::string message, bool replace_j);
std::vector<int64_t> letter_to_numbers(std::string letter);
std::string numbers_to_letter(int64_t row, int64_t col);
std::string encode(std::string message);
std::string decode(std::string message);
int main();

std::vector<std::vector<std::string>> SQUARE = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("a"), std::string("b"), std::string("c"), std::string("d"), std::string("e")}, std::vector<std::string>{std::string("f"), std::string("g"), std::string("h"), std::string("i"), std::string("k")}, std::vector<std::string>{std::string("l"), std::string("m"), std::string("n"), std::string("o"), std::string("p")}, std::vector<std::string>{std::string("q"), std::string("r"), std::string("s"), std::string("t"), std::string("u")}, std::vector<std::string>{std::string("v"), std::string("w"), std::string("x"), std::string("y"), std::string("z")}};

int64_t index_of(std::string s, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((std::string(1, s[i]) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string to_lower_without_spaces(std::string message, bool replace_j) {
    std::string upper = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    std::string lower = std::string("abcdefghijklmnopqrstuvwxyz");
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < message.size())) {
        std::string ch = std::string(1, message[i]);
        int64_t pos = index_of(upper, ch);
        if ((pos >= int64_t(0))) {
            ch = std::string(1, lower[pos]);
        }
        if ((ch != std::string(" "))) {
            if ((replace_j && (ch == std::string("j")))) {
                ch = std::string("i");
            }
            res = (res + ch);
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> letter_to_numbers(std::string letter) {
    int64_t r = int64_t(0);
    while ((r < SQUARE.size())) {
        int64_t c = int64_t(0);
        while ((c < SQUARE[r].size())) {
            if ((SQUARE[r][c] == letter)) {
                return (std::vector<int64_t>)(std::vector<int64_t>{(r + int64_t(1)), (c + int64_t(1))});
            }
            c = (c + int64_t(1));
        }
        r = (r + int64_t(1));
    }
    return (std::vector<int64_t>)(std::vector<int64_t>{int64_t(0), int64_t(0)});
}

std::string numbers_to_letter(int64_t row, int64_t col) {
    return SQUARE[(row - int64_t(1))][(col - int64_t(1))];
}

std::string encode(std::string message) {
    std::string clean = to_lower_without_spaces(message, true);
    int l = clean.size();
    std::vector<int64_t> rows = std::vector<int64_t>{};
    std::vector<int64_t> cols = std::vector<int64_t>{};
    int64_t i = int64_t(0);
    while ((i < l)) {
        std::vector<int64_t> nums = letter_to_numbers(std::string(1, clean[i]));
        rows = ([&]{ auto __tmp = rows; __tmp.push_back(nums[int64_t(0)]); return __tmp; }());
        cols = ([&]{ auto __tmp = cols; __tmp.push_back(nums[int64_t(1)]); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> seq = std::vector<int64_t>{};
    i = int64_t(0);
    while ((i < l)) {
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(rows[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < l)) {
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(cols[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::string encoded = std::string("");
    i = int64_t(0);
    while ((i < l)) {
        int64_t r = seq[(int64_t(2) * i)];
        int64_t c = seq[((int64_t(2) * i) + int64_t(1))];
        encoded = (encoded + numbers_to_letter(r, c));
        i = (i + int64_t(1));
    }
    return encoded;
}

std::string decode(std::string message) {
    std::string clean = to_lower_without_spaces(message, false);
    int l = clean.size();
    std::vector<int64_t> first = std::vector<int64_t>{};
    int64_t i = int64_t(0);
    while ((i < l)) {
        std::vector<int64_t> nums = letter_to_numbers(std::string(1, clean[i]));
        first = ([&]{ auto __tmp = first; __tmp.push_back(nums[int64_t(0)]); return __tmp; }());
        first = ([&]{ auto __tmp = first; __tmp.push_back(nums[int64_t(1)]); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> top = std::vector<int64_t>{};
    std::vector<int64_t> bottom = std::vector<int64_t>{};
    i = int64_t(0);
    while ((i < l)) {
        top = ([&]{ auto __tmp = top; __tmp.push_back(first[i]); return __tmp; }());
        bottom = ([&]{ auto __tmp = bottom; __tmp.push_back(first[static_cast<size_t>((i + l))]); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::string decoded = std::string("");
    i = int64_t(0);
    while ((i < l)) {
        int64_t r = top[i];
        int64_t c = bottom[i];
        decoded = (decoded + numbers_to_letter(r, c));
        i = (i + int64_t(1));
    }
    return decoded;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << encode(std::string("testmessage"));
        std::cout << std::endl;
        std::cout << encode(std::string("Test Message"));
        std::cout << std::endl;
        std::cout << encode(std::string("test j"));
        std::cout << std::endl;
        std::cout << encode(std::string("test i"));
        std::cout << std::endl;
        std::cout << decode(std::string("qtltbdxrxlk"));
        std::cout << std::endl;
    }
    return 0;
}
