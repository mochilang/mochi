// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:23:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static std::string _repeat(const std::string& s, int64_t n) {
    std::string out; out.reserve(s.size()*n);
    for(int64_t i=0;i<n;i++) out += s;
    return out;
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> split(std::string s, std::string sep);
std::string join(const std::vector<std::string>& xs, std::string sep);
std::string repeat(std::string s, int64_t n);
std::string replace_char(std::string s, std::string old, std::string _new);
bool contains(std::string s, std::string sub);
std::string file_extension(std::string name);
std::string remove_extension(std::string name);
std::string title_case(std::string s);
int64_t count_char(std::string s, std::string ch);
std::string md_prefix(int64_t level);
std::string print_path(std::string old_path, std::string new_path);
std::vector<std::string> sort_strings(const std::vector<std::string>& xs);
std::vector<std::string> good_file_paths(const std::vector<std::string>& paths);
void print_directory_md(const std::vector<std::string>& paths);
int main();

std::vector<std::string> sample = std::vector<std::string>{std::string("data_structures/linked_list.py"), std::string("data_structures/binary_tree.py"), std::string("math/number_theory/prime_check.py"), std::string("math/number_theory/greatest_common_divisor.ipynb")};

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> parts = {};
    std::string cur = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((((sep.size() > int64_t(0)) && ((i + sep.size()) <= s.size())) && (s.substr(i, (i + sep.size()) - i) == sep))) {
            parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
            cur = std::string("");
            i = (i + sep.size());
        } else {
            cur = (cur + s.substr(i, (i + int64_t(1)) - i));
            i = (i + int64_t(1));
        }
    }
    parts = ([&]{ auto __tmp = parts; __tmp.push_back(cur); return __tmp; }());
    return parts;
}

std::string join(const std::vector<std::string>& xs, std::string sep) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            res = (res + sep);
        }
        res = (res + _index(xs, i));
        i = (i + int64_t(1));
    }
    return res;
}

std::string repeat(std::string s, int64_t n) {
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < n)) {
        out = (out + s);
        i = (i + int64_t(1));
    }
    return out;
}

std::string replace_char(std::string s, std::string old, std::string _new) {
    std::string out = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = s.substr(i, (i + int64_t(1)) - i);
        if ((c == old)) {
            out = (out + _new);
        } else {
            out = (out + c);
        }
        i = (i + int64_t(1));
    }
    return out;
}

bool contains(std::string s, std::string sub) {
    if ((sub.size() == int64_t(0))) {
        return true;
    }
    int64_t i = int64_t(0);
    while (((i + sub.size()) <= s.size())) {
        if ((s.substr(i, (i + sub.size()) - i) == sub)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::string file_extension(std::string name) {
    int64_t i = (name.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        if ((name.substr(i, (i + int64_t(1)) - i) == std::string("."))) {
            return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, name.size() - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+name.size()); })(name);
        }
        i = (i - int64_t(1));
    }
    return std::string("");
}

std::string remove_extension(std::string name) {
    int64_t i = (name.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        if ((name.substr(i, (i + int64_t(1)) - i) == std::string("."))) {
            return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(name);
        }
        i = (i - int64_t(1));
    }
    return name;
}

std::string title_case(std::string s) {
    std::string out = std::string("");
    bool cap = true;
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = s.substr(i, (i + int64_t(1)) - i);
        if ((c == std::string(" "))) {
            out = (out + c);
            cap = true;
        } else {
            if (cap) {
                out = (out + ([&]{ std::string __s = c; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }()));
                cap = false;
            } else {
                out = (out + ([&]{ std::string __s = c; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }()));
            }
        }
        i = (i + int64_t(1));
    }
    return out;
}

int64_t count_char(std::string s, std::string ch) {
    int64_t cnt = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == ch)) {
            cnt = (cnt + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return cnt;
}

std::string md_prefix(int64_t level) {
    if ((level == int64_t(0))) {
        return std::string("\n##");
    }
    return (_repeat(std::string("  "), level) + std::string("*"));
}

std::string print_path(std::string old_path, std::string new_path) {
    std::vector<std::string> old_parts = _split(old_path, std::string("/"));
    std::vector<std::string> new_parts = _split(new_path, std::string("/"));
    int64_t i = int64_t(0);
    while ((i < new_parts.size())) {
        if ((((i >= old_parts.size()) || (_index(old_parts, i) != _index(new_parts, i))) && (_index(new_parts, i) != std::string("")))) {
            std::string title = title_case(replace_char(_index(new_parts, i), std::string("_"), std::string(" ")));
            std::cout << ((md_prefix(i) + std::string(" ")) + title);
            std::cout << std::endl;
        }
        i = (i + int64_t(1));
    }
    return new_path;
}

std::vector<std::string> sort_strings(const std::vector<std::string>& xs) {
    std::vector<std::string> arr = xs;
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        int64_t min_idx = i;
        int64_t j = (i + int64_t(1));
        while ((j < arr.size())) {
            if ((_index(arr, j) < _index(arr, min_idx))) {
                min_idx = j;
            }
            j = (j + int64_t(1));
        }
        std::string tmp = _index(arr, i);
        arr[i] = _index(arr, min_idx);
        arr[min_idx] = tmp;
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<std::string> good_file_paths(const std::vector<std::string>& paths) {
    std::vector<std::string> res = {};
    for (std::string p : paths) {
        std::vector<std::string> parts = _split(p, std::string("/"));
        bool skip = false;
        int64_t k = int64_t(0);
        while ((k < (parts.size() - int64_t(1)))) {
            std::string part = _index(parts, k);
            if (((((part == std::string("scripts")) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(part) == std::string("."))) || (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(part) == std::string("_"))) || contains(part, std::string("venv")))) {
                skip = true;
            }
            k = (k + int64_t(1));
        }
        if (skip) {
            continue;
        }
        std::string filename = _index(parts, (parts.size() - int64_t(1)));
        if ((filename == std::string("__init__.py"))) {
            continue;
        }
        std::string ext = file_extension(filename);
        if (((ext == std::string(".py")) || (ext == std::string(".ipynb")))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(p); return __tmp; }());
        }
    }
    return res;
}

void print_directory_md(const std::vector<std::string>& paths) {
    std::vector<std::string> files = sort_strings(good_file_paths(paths));
    std::string old_path = std::string("");
    int64_t i = int64_t(0);
    while ((i < files.size())) {
        std::string fp = _index(files, i);
        std::vector<std::string> parts = _split(fp, std::string("/"));
        std::string filename = _index(parts, (parts.size() - int64_t(1)));
        std::string filepath = std::string("");
        if ((parts.size() > int64_t(1))) {
            filepath = join(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (parts.size() - int64_t(1)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(parts.size() - int64_t(1))); })(parts), std::string("/"));
        }
        if ((filepath != old_path)) {
            old_path = print_path(old_path, filepath);
        }
        int64_t indent = int64_t(0);
        if ((filepath.size() > int64_t(0))) {
            indent = (count_char(filepath, std::string("/")) + int64_t(1));
        }
        std::string url = replace_char(fp, std::string(" "), std::string("%20"));
        std::string name = title_case(replace_char(remove_extension(filename), std::string("_"), std::string(" ")));
        std::cout << (((((md_prefix(indent) + std::string(" [")) + name) + std::string("](")) + url) + std::string(")"));
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        print_directory_md(sample);
    }
    return 0;
}
