// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:44:36 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string rstrip_s(std::string s);
std::string normalize_alias(std::string u);
bool has_unit(std::string u);
double from_factor(std::string u);
double to_factor(std::string u);
double length_conversion(double value, std::string from_type, std::string to_type);
int main();

std::string rstrip_s(std::string s) {
    if (((s.size() > int64_t(0)) && (std::string(1, s[static_cast<size_t>((s.size() - int64_t(1)))]) == std::string("s")))) {
        return s.substr(int64_t(0), (s.size() - int64_t(1)) - int64_t(0));
    }
    return s;
}

std::string normalize_alias(std::string u) {
    if ((u == std::string("millimeter"))) {
        return std::string("mm");
    }
    if ((u == std::string("centimeter"))) {
        return std::string("cm");
    }
    if ((u == std::string("meter"))) {
        return std::string("m");
    }
    if ((u == std::string("kilometer"))) {
        return std::string("km");
    }
    if ((u == std::string("inch"))) {
        return std::string("in");
    }
    if ((u == std::string("inche"))) {
        return std::string("in");
    }
    if ((u == std::string("feet"))) {
        return std::string("ft");
    }
    if ((u == std::string("foot"))) {
        return std::string("ft");
    }
    if ((u == std::string("yard"))) {
        return std::string("yd");
    }
    if ((u == std::string("mile"))) {
        return std::string("mi");
    }
    return u;
}

bool has_unit(std::string u) {
    return ((((((((u == std::string("mm")) || (u == std::string("cm"))) || (u == std::string("m"))) || (u == std::string("km"))) || (u == std::string("in"))) || (u == std::string("ft"))) || (u == std::string("yd"))) || (u == std::string("mi")));
}

double from_factor(std::string u) {
    if ((u == std::string("mm"))) {
        return 0.001;
    }
    if ((u == std::string("cm"))) {
        return 0.01;
    }
    if ((u == std::string("m"))) {
        return 1.0;
    }
    if ((u == std::string("km"))) {
        return 1000.0;
    }
    if ((u == std::string("in"))) {
        return 0.0254;
    }
    if ((u == std::string("ft"))) {
        return 0.3048;
    }
    if ((u == std::string("yd"))) {
        return 0.9144;
    }
    if ((u == std::string("mi"))) {
        return 1609.34;
    }
    return 0.0;
}

double to_factor(std::string u) {
    if ((u == std::string("mm"))) {
        return 1000.0;
    }
    if ((u == std::string("cm"))) {
        return 100.0;
    }
    if ((u == std::string("m"))) {
        return 1.0;
    }
    if ((u == std::string("km"))) {
        return 0.001;
    }
    if ((u == std::string("in"))) {
        return 39.3701;
    }
    if ((u == std::string("ft"))) {
        return 3.28084;
    }
    if ((u == std::string("yd"))) {
        return 1.09361;
    }
    if ((u == std::string("mi"))) {
        return 0.000621371;
    }
    return 0.0;
}

double length_conversion(double value, std::string from_type, std::string to_type) {
    std::string new_from = normalize_alias(rstrip_s(([&]{ std::string __s = from_type; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())));
    std::string new_to = normalize_alias(rstrip_s(([&]{ std::string __s = to_type; for(auto &__c : __s){ __c = std::tolower(static_cast<unsigned char>(__c)); } return __s; }())));
    if (!has_unit(new_from)) {
        throw std::runtime_error(((std::string("Invalid 'from_type' value: '") + from_type) + std::string("'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi")));
    }
    if (!has_unit(new_to)) {
        throw std::runtime_error(((std::string("Invalid 'to_type' value: '") + to_type) + std::string("'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi")));
    }
    return ((value * from_factor(new_from)) * to_factor(new_to));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { std::ostringstream __ss; double __dv = length_conversion(4.0, std::string("METER"), std::string("FEET")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = length_conversion(1.0, std::string("kilometer"), std::string("inch")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = length_conversion(2.0, std::string("feet"), std::string("meter")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = length_conversion(2.0, std::string("centimeter"), std::string("millimeter")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = length_conversion(4.0, std::string("yard"), std::string("kilometer")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = length_conversion(3.0, std::string("foot"), std::string("inch")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = length_conversion(3.0, std::string("mm"), std::string("in")); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
