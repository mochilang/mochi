// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t pow10(int64_t _exp);
int64_t max_value(std::string system);
std::string join_words(const std::vector<std::string>& words);
std::string convert_small_number(int64_t num);
std::string convert_number(int64_t num, std::string system);
int main();

std::vector<std::string> ones = std::vector<std::string>{std::string("zero"), std::string("one"), std::string("two"), std::string("three"), std::string("four"), std::string("five"), std::string("six"), std::string("seven"), std::string("eight"), std::string("nine")};
std::vector<std::string> teens = std::vector<std::string>{std::string("ten"), std::string("eleven"), std::string("twelve"), std::string("thirteen"), std::string("fourteen"), std::string("fifteen"), std::string("sixteen"), std::string("seventeen"), std::string("eighteen"), std::string("nineteen")};
std::vector<std::string> tens = std::vector<std::string>{std::string(""), std::string(""), std::string("twenty"), std::string("thirty"), std::string("forty"), std::string("fifty"), std::string("sixty"), std::string("seventy"), std::string("eighty"), std::string("ninety")};
std::vector<int64_t> short_powers = std::vector<int64_t>{int64_t(15), int64_t(12), int64_t(9), int64_t(6), int64_t(3), int64_t(2)};
std::vector<std::string> short_units = std::vector<std::string>{std::string("quadrillion"), std::string("trillion"), std::string("billion"), std::string("million"), std::string("thousand"), std::string("hundred")};
std::vector<int64_t> long_powers = std::vector<int64_t>{int64_t(15), int64_t(9), int64_t(6), int64_t(3), int64_t(2)};
std::vector<std::string> long_units = std::vector<std::string>{std::string("billiard"), std::string("milliard"), std::string("million"), std::string("thousand"), std::string("hundred")};
std::vector<int64_t> indian_powers = std::vector<int64_t>{int64_t(14), int64_t(12), int64_t(7), int64_t(5), int64_t(3), int64_t(2)};
std::vector<std::string> indian_units = std::vector<std::string>{std::string("crore crore"), std::string("lakh crore"), std::string("crore"), std::string("lakh"), std::string("thousand"), std::string("hundred")};

int64_t pow10(int64_t _exp) {
    int64_t res = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < _exp)) {
        res = (res * int64_t(10));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t max_value(std::string system) {
    if ((system == std::string("short"))) {
        return (pow10(int64_t(18)) - int64_t(1));
    }
    if ((system == std::string("long"))) {
        return (pow10(int64_t(21)) - int64_t(1));
    }
    if ((system == std::string("indian"))) {
        return (pow10(int64_t(19)) - int64_t(1));
    }
    return int64_t(0);
}

std::string join_words(const std::vector<std::string>& words) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < words.size())) {
        if ((i > int64_t(0))) {
            res = (res + std::string(" "));
        }
        res = (res + words[i]);
        i = (i + int64_t(1));
    }
    return res;
}

std::string convert_small_number(int64_t num) {
    if ((num < int64_t(0))) {
        return std::string("");
    }
    if ((num >= int64_t(100))) {
        return std::string("");
    }
    int64_t tens_digit = (num / int64_t(10));
    int64_t ones_digit = (num % int64_t(10));
    if ((tens_digit == int64_t(0))) {
        return ones[ones_digit];
    }
    if ((tens_digit == int64_t(1))) {
        return teens[ones_digit];
    }
    std::string hyphen = ((ones_digit > int64_t(0)) ? std::string("-") : std::string(""));
    std::string tail = ((ones_digit > int64_t(0)) ? ones[ones_digit] : std::string(""));
    return ((tens[tens_digit] + hyphen) + tail);
}

std::string convert_number(int64_t num, std::string system) {
    std::vector<std::string> word_groups = {};
    int64_t n = num;
    if ((n < int64_t(0))) {
        word_groups = ([&]{ auto __tmp = word_groups; __tmp.push_back(std::string("negative")); return __tmp; }());
        n = -n;
    }
    if ((n > max_value(system))) {
        return std::string("");
    }
    std::vector<int64_t> powers = {};
    std::vector<std::string> units = {};
    if ((system == std::string("short"))) {
        powers = short_powers;
        units = short_units;
    } else {
        if ((system == std::string("long"))) {
            powers = long_powers;
            units = long_units;
        } else {
            if ((system == std::string("indian"))) {
                powers = indian_powers;
                units = indian_units;
            } else {
                return std::string("");
            }
        }
    }
    int64_t i = int64_t(0);
    while ((i < powers.size())) {
        int64_t power = powers[i];
        std::string unit = units[i];
        int64_t divisor = pow10(power);
        int64_t digit_group = (n / divisor);
        n = (n % divisor);
        if ((digit_group > int64_t(0))) {
            std::string word_group = ((digit_group >= int64_t(100)) ? convert_number(digit_group, system) : convert_small_number(digit_group));
            word_groups = ([&]{ auto __tmp = word_groups; __tmp.push_back(((word_group + std::string(" ")) + unit)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    if (((n > int64_t(0)) || (word_groups.size() == int64_t(0)))) {
        word_groups = ([&]{ auto __tmp = word_groups; __tmp.push_back(convert_small_number(n)); return __tmp; }());
    }
    std::string joined = join_words(word_groups);
    return joined;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << convert_number(int64_t(123456789012345), std::string("short"));
        std::cout << std::endl;
        std::cout << convert_number(int64_t(123456789012345), std::string("long"));
        std::cout << std::endl;
        std::cout << convert_number(int64_t(123456789012345), std::string("indian"));
        std::cout << std::endl;
    }
    return 0;
}
