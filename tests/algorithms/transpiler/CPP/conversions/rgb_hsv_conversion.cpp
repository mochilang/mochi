// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:49:31 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double absf(double x);
double fmod(double a, double b);
int64_t roundf(double x);
double maxf(double a, double b, double c);
double minf(double a, double b, double c);
std::vector<int64_t> hsv_to_rgb(double hue, double saturation, double value);
std::vector<double> rgb_to_hsv(int64_t red, int64_t green, int64_t blue);
bool approximately_equal_hsv(const std::vector<double>& hsv1, const std::vector<double>& hsv2);
int main();

std::vector<int64_t> rgb = hsv_to_rgb(180.0, 0.5, 0.5);
std::vector<double> hsv = rgb_to_hsv(int64_t(64), int64_t(128), int64_t(128));

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double fmod(double a, double b) {
    return (a - (b * (int64_t)(((double)(a) / (b)))));
}

int64_t roundf(double x) {
    if ((x >= 0.0)) {
        return (int64_t)((x + 0.5));
    }
    return (int64_t)((x - 0.5));
}

double maxf(double a, double b, double c) {
    double m = a;
    if ((b > m)) {
        m = b;
    }
    if ((c > m)) {
        m = c;
    }
    return m;
}

double minf(double a, double b, double c) {
    double m = a;
    if ((b < m)) {
        m = b;
    }
    if ((c < m)) {
        m = c;
    }
    return m;
}

std::vector<int64_t> hsv_to_rgb(double hue, double saturation, double value) {
    if (((hue < 0.0) || (hue > 360.0))) {
        std::cout << std::string("hue should be between 0 and 360");
        std::cout << std::endl;
        return std::vector<int64_t>{};
    }
    if (((saturation < 0.0) || (saturation > 1.0))) {
        std::cout << std::string("saturation should be between 0 and 1");
        std::cout << std::endl;
        return std::vector<int64_t>{};
    }
    if (((value < 0.0) || (value > 1.0))) {
        std::cout << std::string("value should be between 0 and 1");
        std::cout << std::endl;
        return std::vector<int64_t>{};
    }
    double chroma = (value * saturation);
    double hue_section = ((double)(hue) / (60.0));
    double second_largest_component = (chroma * (1.0 - absf((fmod(hue_section, 2.0) - 1.0))));
    double match_value = (value - chroma);
    int64_t red = 0;
    int64_t green = 0;
    int64_t blue = 0;
    if (((hue_section >= 0.0) && (hue_section <= 1.0))) {
        red = roundf((255.0 * (chroma + match_value)));
        green = roundf((255.0 * (second_largest_component + match_value)));
        blue = roundf((255.0 * match_value));
    } else     if (((hue_section > 1.0) && (hue_section <= 2.0))) {
        red = roundf((255.0 * (second_largest_component + match_value)));
        green = roundf((255.0 * (chroma + match_value)));
        blue = roundf((255.0 * match_value));
    } else     if (((hue_section > 2.0) && (hue_section <= 3.0))) {
        red = roundf((255.0 * match_value));
        green = roundf((255.0 * (chroma + match_value)));
        blue = roundf((255.0 * (second_largest_component + match_value)));
    } else     if (((hue_section > 3.0) && (hue_section <= 4.0))) {
        red = roundf((255.0 * match_value));
        green = roundf((255.0 * (second_largest_component + match_value)));
        blue = roundf((255.0 * (chroma + match_value)));
    } else     if (((hue_section > 4.0) && (hue_section <= 5.0))) {
        red = roundf((255.0 * (second_largest_component + match_value)));
        green = roundf((255.0 * match_value));
        blue = roundf((255.0 * (chroma + match_value)));
    } else {
        red = roundf((255.0 * (chroma + match_value)));
        green = roundf((255.0 * match_value));
        blue = roundf((255.0 * (second_largest_component + match_value)));
    }




    return std::vector<int64_t>{red, green, blue};
}

std::vector<double> rgb_to_hsv(int64_t red, int64_t green, int64_t blue) {
    if (((red < int64_t(0)) || (red > int64_t(255)))) {
        std::cout << std::string("red should be between 0 and 255");
        std::cout << std::endl;
        return std::vector<double>{};
    }
    if (((green < int64_t(0)) || (green > int64_t(255)))) {
        std::cout << std::string("green should be between 0 and 255");
        std::cout << std::endl;
        return std::vector<double>{};
    }
    if (((blue < int64_t(0)) || (blue > int64_t(255)))) {
        std::cout << std::string("blue should be between 0 and 255");
        std::cout << std::endl;
        return std::vector<double>{};
    }
    double float_red = ((double)(red) / (255.0));
    double float_green = ((double)(green) / (255.0));
    double float_blue = ((double)(blue) / (255.0));
    double value = maxf(float_red, float_green, float_blue);
    double min_val = minf(float_red, float_green, float_blue);
    double chroma = (value - min_val);
    double saturation = ((value == 0.0) ? 0.0 : ((double)(chroma) / (value)));
    double hue = 0;
    if ((chroma == 0.0)) {
        hue = 0.0;
    } else     if ((value == float_red)) {
        hue = (60.0 * (0.0 + ((double)((float_green - float_blue)) / (chroma))));
    } else     if ((value == float_green)) {
        hue = (60.0 * (2.0 + ((double)((float_blue - float_red)) / (chroma))));
    } else {
        hue = (60.0 * (4.0 + ((double)((float_red - float_green)) / (chroma))));
    }


    hue = fmod((hue + 360.0), 360.0);
    return std::vector<double>{hue, saturation, value};
}

bool approximately_equal_hsv(const std::vector<double>& hsv1, const std::vector<double>& hsv2) {
    bool check_hue = (absf((hsv1[int64_t(0)] - hsv2[int64_t(0)])) < 0.2);
    bool check_saturation = (absf((hsv1[int64_t(1)] - hsv2[int64_t(1)])) < 0.002);
    bool check_value = (absf((hsv1[int64_t(2)] - hsv2[int64_t(2)])) < 0.002);
    return ((check_hue && check_saturation) && check_value);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = rgb; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = hsv; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << approximately_equal_hsv(hsv, std::vector<double>{180.0, 0.5, 0.5}); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
