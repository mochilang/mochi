// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:44:29 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> split_by_dot(std::string s);
int64_t parse_decimal(std::string s);
std::string to_hex2(int64_t n);
int64_t ipv4_to_decimal(std::string ipv4_address);
int64_t alt_ipv4_to_decimal(std::string ipv4_address);
std::string decimal_to_ipv4(int64_t decimal_ipv4);
int main();

std::string hex_digits = std::string("0123456789abcdef");

std::vector<std::string> split_by_dot(std::string s) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = std::string(1, s[i]);
        if ((c == std::string("."))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + c);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

int64_t parse_decimal(std::string s) {
    if ((s.size() == int64_t(0))) {
        throw std::runtime_error(std::string("Invalid IPv4 address format"));
    }
    int64_t value = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = std::string(1, s[i]);
        if (((c < std::string("0")) || (c > std::string("9")))) {
            throw std::runtime_error(std::string("Invalid IPv4 address format"));
        }
        value = ((value * int64_t(10)) + std::stoll(c));
        i = (i + int64_t(1));
    }
    return value;
}

std::string to_hex2(int64_t n) {
    int64_t x = n;
    std::string res = std::string("");
    while ((x > int64_t(0))) {
        int64_t d = (x % int64_t(16));
        res = (std::string(1, hex_digits[d]) + res);
        x = (x / int64_t(16));
    }
    while ((res.size() < int64_t(2))) {
        res = (std::string("0") + res);
    }
    return res;
}

int64_t ipv4_to_decimal(std::string ipv4_address) {
    std::vector<std::string> parts = split_by_dot(ipv4_address);
    if ((parts.size() != int64_t(4))) {
        throw std::runtime_error(std::string("Invalid IPv4 address format"));
    }
    int64_t result = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < int64_t(4))) {
        int64_t oct = parse_decimal(parts[i]);
        if (((oct < int64_t(0)) || (oct > int64_t(255)))) {
            throw std::runtime_error((std::string("Invalid IPv4 octet ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << oct; return ss.str(); }())));
        }
        result = ((result * int64_t(256)) + oct);
        i = (i + int64_t(1));
    }
    return result;
}

int64_t alt_ipv4_to_decimal(std::string ipv4_address) {
    std::vector<std::string> parts = split_by_dot(ipv4_address);
    if ((parts.size() != int64_t(4))) {
        throw std::runtime_error(std::string("Invalid IPv4 address format"));
    }
    std::string hex_str = std::string("");
    int64_t i = int64_t(0);
    while ((i < int64_t(4))) {
        int64_t oct = parse_decimal(parts[i]);
        if (((oct < int64_t(0)) || (oct > int64_t(255)))) {
            throw std::runtime_error((std::string("Invalid IPv4 octet ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << oct; return ss.str(); }())));
        }
        hex_str = (hex_str + to_hex2(oct));
        i = (i + int64_t(1));
    }
    int64_t value = int64_t(0);
    int64_t k = int64_t(0);
    while ((k < hex_str.size())) {
        std::string c = std::string(1, hex_str[k]);
        int64_t digit = (int64_t(0) - int64_t(1));
        int64_t j = int64_t(0);
        while ((j < hex_digits.size())) {
            if ((std::string(1, hex_digits[j]) == c)) {
                digit = j;
            }
            j = (j + int64_t(1));
        }
        if ((digit < int64_t(0))) {
            throw std::runtime_error(std::string("Invalid hex digit"));
        }
        value = ((value * int64_t(16)) + digit);
        k = (k + int64_t(1));
    }
    return value;
}

std::string decimal_to_ipv4(int64_t decimal_ipv4) {
    if (((decimal_ipv4 < int64_t(0)) || (decimal_ipv4 > int64_t(4294967295)))) {
        throw std::runtime_error(std::string("Invalid decimal IPv4 address"));
    }
    int64_t n = decimal_ipv4;
    std::vector<std::string> parts = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(4))) {
        int64_t octet = (n % int64_t(256));
        parts = ([&]{ auto __tmp = parts; __tmp.push_back(([&]{ std::ostringstream ss; ss << std::boolalpha << octet; return ss.str(); }())); return __tmp; }());
        n = (n / int64_t(256));
        i = (i + int64_t(1));
    }
    std::string res = std::string("");
    int64_t j = (parts.size() - int64_t(1));
    while ((j >= int64_t(0))) {
        res = (res + parts[j]);
        if ((j > int64_t(0))) {
            res = (res + std::string("."));
        }
        j = (j - int64_t(1));
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ipv4_to_decimal(std::string("192.168.0.1"));
        std::cout << std::endl;
        std::cout << ipv4_to_decimal(std::string("10.0.0.255"));
        std::cout << std::endl;
        std::cout << alt_ipv4_to_decimal(std::string("192.168.0.1"));
        std::cout << std::endl;
        std::cout << alt_ipv4_to_decimal(std::string("10.0.0.255"));
        std::cout << std::endl;
        std::cout << decimal_to_ipv4(int64_t(3232235521));
        std::cout << std::endl;
        std::cout << decimal_to_ipv4(int64_t(167772415));
        std::cout << std::endl;
    }
    return 0;
}
