// Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:12:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct RGB;

std::ostream& operator<<(std::ostream&, const RGB&);


struct RGB {
    int64_t r;
    int64_t g;
    int64_t b;
    auto operator<=>(const RGB&) const = default;
};

std::ostream& operator<<(std::ostream& os, const RGB& v) {
    os << '{' << "'r': "<< v.r
 << ", " << "'g': "<< v.g
 << ", " << "'b': "<< v.b
 << '}';
    return os;
}

int64_t round_int(double x);
RGB hsv_to_rgb(double h, double s, double v);
double get_distance(double x, double y, int64_t max_step);
RGB get_black_and_white_rgb(double distance);
RGB get_color_coded_rgb(double distance);
std::vector<std::vector<RGB>> get_image(int64_t image_width, int64_t image_height, double figure_center_x, double figure_center_y, double figure_width, int64_t max_step, bool use_distance_color_coding);
std::string rgb_to_string(const RGB& c);
int main();

std::vector<std::vector<RGB>> img1 = get_image(int64_t(10), int64_t(10), -0.6, 0.0, 3.2, int64_t(50), true);
std::vector<std::vector<RGB>> img2 = get_image(int64_t(10), int64_t(10), -0.6, 0.0, 3.2, int64_t(50), false);

int64_t round_int(double x) {
    return (int64_t)((x + 0.5));
}

RGB hsv_to_rgb(double h, double s, double v) {
    int64_t i = (int64_t)((h * 6.0));
    double f = ((h * 6.0) - (double)(i));
    double p = (v * (1.0 - s));
    double q = (v * (1.0 - (f * s)));
    double t = (v * (1.0 - ((1.0 - f) * s)));
    int64_t mod = (i % int64_t(6));
    double r = 0.0;
    double g = 0.0;
    double b = 0.0;
    if ((mod == int64_t(0))) {
        r = v;
        g = t;
        b = p;
    } else     if ((mod == int64_t(1))) {
        r = q;
        g = v;
        b = p;
    } else     if ((mod == int64_t(2))) {
        r = p;
        g = v;
        b = t;
    } else     if ((mod == int64_t(3))) {
        r = p;
        g = q;
        b = v;
    } else     if ((mod == int64_t(4))) {
        r = t;
        g = p;
        b = v;
    } else {
        r = v;
        g = p;
        b = q;
    }




    return RGB{.r = round_int((r * 255.0)), .g = round_int((g * 255.0)), .b = round_int((b * 255.0))};
}

double get_distance(double x, double y, int64_t max_step) {
    double a = x;
    double b = y;
    int64_t step = -int64_t(1);
    while ((step < (max_step - int64_t(1)))) {
        step = (step + int64_t(1));
        double a_new = (((a * a) - (b * b)) + x);
        b = (((2.0 * a) * b) + y);
        a = a_new;
        if ((((a * a) + (b * b)) > 4.0)) {
            break;
        }
    }
    return ((double)((double)(step)) / ((double)((max_step - int64_t(1)))));
}

RGB get_black_and_white_rgb(double distance) {
    if ((distance == 1.0)) {
        return RGB{.r = int64_t(0), .g = int64_t(0), .b = int64_t(0)};
    } else {
        return RGB{.r = int64_t(255), .g = int64_t(255), .b = int64_t(255)};
    }
}

RGB get_color_coded_rgb(double distance) {
    if ((distance == 1.0)) {
        return RGB{.r = int64_t(0), .g = int64_t(0), .b = int64_t(0)};
    } else {
        return hsv_to_rgb(distance, 1.0, 1.0);
    }
}

std::vector<std::vector<RGB>> get_image(int64_t image_width, int64_t image_height, double figure_center_x, double figure_center_y, double figure_width, int64_t max_step, bool use_distance_color_coding) {
    std::vector<std::vector<RGB>> img = {};
    double figure_height = (((double)(figure_width) / ((double)(image_width))) * (double)(image_height));
    int64_t image_y = int64_t(0);
    while ((image_y < image_height)) {
        std::vector<RGB> row = {};
        int64_t image_x = int64_t(0);
        while ((image_x < image_width)) {
            double fx = (figure_center_x + ((((double)((double)(image_x)) / ((double)(image_width))) - 0.5) * figure_width));
            double fy = (figure_center_y + ((((double)((double)(image_y)) / ((double)(image_height))) - 0.5) * figure_height));
            double distance = get_distance(fx, fy, max_step);
            RGB rgb = RGB{};
            if (use_distance_color_coding) {
                rgb = get_color_coded_rgb(distance);
            } else {
                rgb = get_black_and_white_rgb(distance);
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(rgb); return __tmp; }());
            image_x = (image_x + int64_t(1));
        }
        img = ([&]{ auto __tmp = img; __tmp.push_back(row); return __tmp; }());
        image_y = (image_y + int64_t(1));
    }
    return img;
}

std::string rgb_to_string(const RGB& c) {
    return ((((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << c.r; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << c.g; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << c.b; return ss.str(); }())) + std::string(")"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << rgb_to_string(img1[int64_t(0)][int64_t(0)]);
        std::cout << std::endl;
        std::cout << rgb_to_string(img2[int64_t(0)][int64_t(0)]);
        std::cout << std::endl;
    }
    return 0;
}
