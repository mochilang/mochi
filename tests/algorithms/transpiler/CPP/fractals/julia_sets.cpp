// Generated by Mochi transpiler v0.10.59 on 2025-08-07 10:12:48 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Complex;

std::ostream& operator<<(std::ostream&, const Complex&);


struct Complex {
    double re;
    double im;
    auto operator<=>(const Complex&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Complex& v) {
    os << '{' << "'re': "<< std::fixed << std::setprecision(1) << v.re
 << ", " << "'im': "<< std::fixed << std::setprecision(1) << v.im
 << '}';
    return os;
}

Complex complex_add(const Complex& a, const Complex& b);
Complex complex_mul(const Complex& a, const Complex& b);
double sqrtApprox(double x);
double complex_abs(const Complex& a);
double sin_taylor(double x);
double cos_taylor(double x);
double exp_taylor(double x);
Complex complex_exp(const Complex& z);
Complex eval_quadratic(const Complex& c, const Complex& z);
Complex eval_exponential(const Complex& c, const Complex& z);
Complex iterate_function(std::function<Complex(Complex, Complex)> eval_function, const Complex& c, int64_t nb_iterations, const Complex& z0, double infinity);
std::vector<std::vector<Complex>> prepare_grid(double window_size, int64_t nb_pixels);
void julia_demo();
int main();

Complex complex_add(const Complex& a, const Complex& b) {
    return Complex{.re = (a.re + b.re), .im = (a.im + b.im)};
}

Complex complex_mul(const Complex& a, const Complex& b) {
    double real = ((a.re * b.re) - (a.im * b.im));
    double imag = ((a.re * b.im) + (a.im * b.re));
    return Complex{.re = real, .im = imag};
}

double sqrtApprox(double x) {
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double complex_abs(const Complex& a) {
    return sqrtApprox(((a.re * a.re) + (a.im * a.im)));
}

double sin_taylor(double x) {
    double term = x;
    double sum = x;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        double k1 = (2.0 * (double)(i));
        double k2 = ((2.0 * (double)(i)) + 1.0);
        term = ((double)(((-term * x) * x)) / ((k1 * k2)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double cos_taylor(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        double k1 = ((2.0 * (double)(i)) - 1.0);
        double k2 = (2.0 * (double)(i));
        term = ((double)(((-term * x) * x)) / ((k1 * k2)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double exp_taylor(double x) {
    double term = 1.0;
    double sum = 1.0;
    double i = 1.0;
    while ((i < 20.0)) {
        term = ((double)((term * x)) / (i));
        sum = (sum + term);
        i = (i + 1.0);
    }
    return sum;
}

Complex complex_exp(const Complex& z) {
    double e = exp_taylor(z.re);
    return Complex{.re = (e * cos_taylor(z.im)), .im = (e * sin_taylor(z.im))};
}

Complex eval_quadratic(const Complex& c, const Complex& z) {
    return complex_add(complex_mul(z, z), c);
}

Complex eval_exponential(const Complex& c, const Complex& z) {
    return complex_add(complex_exp(z), c);
}

Complex iterate_function(std::function<Complex(Complex, Complex)> eval_function, const Complex& c, int64_t nb_iterations, const Complex& z0, double infinity) {
    Complex z_n = z0;
    int64_t i = int64_t(0);
    while ((i < nb_iterations)) {
        z_n = eval_function(c, z_n);
        if ((complex_abs(z_n) > infinity)) {
            return z_n;
        }
        i = (i + int64_t(1));
    }
    return z_n;
}

std::vector<std::vector<Complex>> prepare_grid(double window_size, int64_t nb_pixels) {
    std::vector<std::vector<Complex>> grid = {};
    int64_t i = int64_t(0);
    while ((i < nb_pixels)) {
        std::vector<Complex> row = {};
        int64_t j = int64_t(0);
        while ((j < nb_pixels)) {
            double real = (-window_size + ((double)(((2.0 * window_size) * (double)(i))) / ((double)((nb_pixels - int64_t(1))))));
            double imag = (-window_size + ((double)(((2.0 * window_size) * (double)(j))) / ((double)((nb_pixels - int64_t(1))))));
            row = ([&]{ auto __tmp = row; __tmp.push_back(Complex{.re = real, .im = imag}); return __tmp; }());
            j = (j + int64_t(1));
        }
        grid = ([&]{ auto __tmp = grid; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return grid;
}

void julia_demo() {
    std::vector<std::vector<Complex>> grid = prepare_grid(1.0, int64_t(5));
    Complex c_poly = Complex{.re = -0.4, .im = 0.6};
    Complex c_exp = Complex{.re = -2.0, .im = 0.0};
    std::vector<std::vector<int64_t>> poly_result = {};
    std::vector<std::vector<int64_t>> exp_result = {};
    int64_t y = int64_t(0);
    while ((y < grid.size())) {
        std::vector<int64_t> row_poly = {};
        std::vector<int64_t> row_exp = {};
        int64_t x = int64_t(0);
        while ((x < grid[y].size())) {
            Complex z0 = grid[y][x];
            Complex z_poly = iterate_function(eval_quadratic, c_poly, int64_t(20), z0, 4.0);
            Complex z_exp = iterate_function(eval_exponential, c_exp, int64_t(10), z0, 10000000000.0);
            row_poly = ([&]{ auto __tmp = row_poly; __tmp.push_back(((complex_abs(z_poly) < 2.0) ? int64_t(1) : int64_t(0))); return __tmp; }());
            row_exp = ([&]{ auto __tmp = row_exp; __tmp.push_back(((complex_abs(z_exp) < 10000.0) ? int64_t(1) : int64_t(0))); return __tmp; }());
            x = (x + int64_t(1));
        }
        poly_result = ([&]{ auto __tmp = poly_result; __tmp.push_back(row_poly); return __tmp; }());
        exp_result = ([&]{ auto __tmp = exp_result; __tmp.push_back(row_exp); return __tmp; }());
        y = (y + int64_t(1));
    }
    { auto __tmp = poly_result; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;     __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
    std::cout << std::endl;
    { auto __tmp = exp_result; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;     __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        julia_demo();
    }
    return 0;
}
