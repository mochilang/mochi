// Generated by Mochi transpiler v0.10.64 on 2025-08-13 12:44:29 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Vec;

std::ostream& operator<<(std::ostream&, const Vec&);


struct Vec {
    double x;
    double y;
    auto operator<=>(const Vec&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Vec& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << '}';
    return os;
}

double _mod(double x, double m);
double sin(double x);
double cos(double x);
Vec rotate(const Vec& v, double angle_deg);
std::vector<Vec> iteration_step(const std::vector<Vec>& vectors);
std::vector<Vec> iterate(const std::vector<Vec>& initial, int64_t steps);
std::string vec_to_string(const Vec& v);
std::string vec_list_to_string(const std::vector<Vec>& lst);
int main();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
Vec VECTOR_1 = Vec{.x = 0.0, .y = 0.0};
Vec VECTOR_2 = Vec{.x = 0.5, .y = 0.8660254};
Vec VECTOR_3 = Vec{.x = 1.0, .y = 0.0};
std::vector<Vec> INITIAL_VECTORS = std::vector<Vec>{};
std::vector<Vec> example = std::vector<Vec>{};

double _mod(double x, double m) {
    return (x - ((double)((int64_t)(((double)(x) / (m)))) * m));
}

double sin(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = std::pow(y, 2);
    double y3 = (y2 * y);
    double y5 = (y3 * y2);
    double y7 = (y5 * y2);
    return (((y - ((double)(y3) / (6.0))) + ((double)(y5) / (120.0))) - ((double)(y7) / (5040.0)));
}

double cos(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = std::pow(y, 2);
    double y4 = std::pow(y2, 2);
    double y6 = (y4 * y2);
    return (((1.0 - ((double)(y2) / (2.0))) + ((double)(y4) / (24.0))) - ((double)(y6) / (720.0)));
}

Vec rotate(const Vec& v, double angle_deg) {
    double theta = ((double)((angle_deg * PI)) / (180.0));
    double c = cos(theta);
    double s = sin(theta);
    return Vec{.x = ((v.x * c) - (v.y * s)), .y = ((v.x * s) + (v.y * c))};
}

std::vector<Vec> iteration_step(const std::vector<Vec>& vectors) {
    std::vector<Vec> new_vectors = {};
    int64_t i = int64_t(0);
    while ((i < (vectors.size() - int64_t(1)))) {
        Vec start = _index(vectors, i);
        Vec end = _index(vectors, (i + int64_t(1)));
        new_vectors = ([&]{ auto __tmp = new_vectors; __tmp.push_back(start); return __tmp; }());
        double dx = (end.x - start.x);
        double dy = (end.y - start.y);
        Vec one_third = Vec{.x = (start.x + ((double)(dx) / (3.0))), .y = (start.y + ((double)(dy) / (3.0)))};
        Vec mid = rotate(Vec{.x = ((double)(dx) / (3.0)), .y = ((double)(dy) / (3.0))}, 60.0);
        Vec peak = Vec{.x = (one_third.x + mid.x), .y = (one_third.y + mid.y)};
        Vec two_third = Vec{.x = (start.x + ((double)((dx * 2.0)) / (3.0))), .y = (start.y + ((double)((dy * 2.0)) / (3.0)))};
        new_vectors = ([&]{ auto __tmp = new_vectors; __tmp.push_back(one_third); return __tmp; }());
        new_vectors = ([&]{ auto __tmp = new_vectors; __tmp.push_back(peak); return __tmp; }());
        new_vectors = ([&]{ auto __tmp = new_vectors; __tmp.push_back(two_third); return __tmp; }());
        i = (i + int64_t(1));
    }
    new_vectors = ([&]{ auto __tmp = new_vectors; __tmp.push_back(_index(vectors, (vectors.size() - int64_t(1)))); return __tmp; }());
    return new_vectors;
}

std::vector<Vec> iterate(const std::vector<Vec>& initial, int64_t steps) {
    std::vector<Vec> vectors = initial;
    int64_t i = int64_t(0);
    while ((i < steps)) {
        vectors = iteration_step(vectors);
        i = (i + int64_t(1));
    }
    return vectors;
}

std::string vec_to_string(const Vec& v) {
    return ((((std::string("(") + _to_string(v.x)) + std::string(", ")) + _to_string(v.y)) + std::string(")"));
}

std::string vec_list_to_string(const std::vector<Vec>& lst) {
    std::string res = std::string("[");
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        res = (res + vec_to_string(_index(lst, i)));
        if ((i < (lst.size() - int64_t(1)))) {
            res = (res + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    res = (res + std::string("]"));
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        INITIAL_VECTORS = std::vector<Vec>{VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1};
        example = iterate(std::vector<Vec>{VECTOR_1, VECTOR_3}, int64_t(1));
        std::cout << vec_list_to_string(example);
        std::cout << std::endl;
    }
    return 0;
}
