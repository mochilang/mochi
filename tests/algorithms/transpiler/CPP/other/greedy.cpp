// Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:09:22 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Thing;
struct GreedyResult;

std::ostream& operator<<(std::ostream&, const Thing&);
std::ostream& operator<<(std::ostream&, const GreedyResult&);


struct Thing {
    std::string name;
    double value;
    double weight;
    auto operator<=>(const Thing&) const = default;
};

struct GreedyResult {
    std::vector<Thing> items;
    double total_value;
    auto operator<=>(const GreedyResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Thing& v) {
    os << '{' << "'name': "<< "'" << v.name << "'"
 << ", " << "'value': "<< std::fixed << std::setprecision(1) << v.value
 << ", " << "'weight': "<< std::fixed << std::setprecision(1) << v.weight
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GreedyResult& v) {
    os << '{' << "'items': "<< "["; for(size_t i=0;i<v.items.size();++i){ if(i>0) os << ", "; os << v.items[i]; } os << "]"
 << ", " << "'total_value': "<< std::fixed << std::setprecision(1) << v.total_value
 << '}';
    return os;
}

double get_value(const Thing& t);
double get_weight(const Thing& t);
std::string get_name(const Thing& t);
double value_weight(const Thing& t);
std::vector<Thing> build_menu(const std::vector<std::string>& names, const std::vector<double>& values, const std::vector<double>& weights);
std::vector<Thing> sort_desc(const std::vector<Thing>& items, std::function<double(Thing)> key_func);
GreedyResult greedy(const std::vector<Thing>& items, double max_cost, std::function<double(Thing)> key_func);
std::string thing_to_string(const Thing& t);
std::string list_to_string(const std::vector<Thing>& ts);
int main();

std::vector<std::string> food = std::vector<std::string>{std::string("Burger"), std::string("Pizza"), std::string("Coca Cola"), std::string("Rice"), std::string("Sambhar"), std::string("Chicken"), std::string("Fries"), std::string("Milk")};
std::vector<double> value = std::vector<double>{80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0};
std::vector<double> weight = std::vector<double>{40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0};
std::vector<Thing> foods = std::vector<Thing>{};
GreedyResult res = GreedyResult{};

double get_value(const Thing& t) {
    return t.value;
}

double get_weight(const Thing& t) {
    return t.weight;
}

std::string get_name(const Thing& t) {
    return t.name;
}

double value_weight(const Thing& t) {
    return ((double)(t.value) / (t.weight));
}

std::vector<Thing> build_menu(const std::vector<std::string>& names, const std::vector<double>& values, const std::vector<double>& weights) {
    std::vector<Thing> menu = {};
    int64_t i = int64_t(0);
    while ((((i < values.size()) && (i < names.size())) && (i < weights.size()))) {
        menu = ([&]{ auto __tmp = menu; __tmp.push_back(Thing{.name = _index(names, i), .value = _index(values, i), .weight = _index(weights, i)}); return __tmp; }());
        i = (i + int64_t(1));
    }
    return menu;
}

std::vector<Thing> sort_desc(const std::vector<Thing>& items, std::function<double(Thing)> key_func) {
    std::vector<Thing> arr = {};
    int64_t i = int64_t(0);
    while ((i < items.size())) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(_index(items, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(1);
    while ((j < arr.size())) {
        Thing key_item = _index(arr, j);
        auto key_val = key_func(key_item);
        int64_t k = (j - int64_t(1));
        while (((k >= int64_t(0)) && ((double)(key_func(_index(arr, k))) < (double)(key_val)))) {
            arr[static_cast<size_t>((k + int64_t(1)))] = _index(arr, k);
            k = (k - int64_t(1));
        }
        arr[static_cast<size_t>((k + int64_t(1)))] = key_item;
        j = (j + int64_t(1));
    }
    return arr;
}

GreedyResult greedy(const std::vector<Thing>& items, double max_cost, std::function<double(Thing)> key_func) {
    std::vector<Thing> items_copy = sort_desc(items, key_func);
    std::vector<Thing> result = {};
    double total_value = 0.0;
    double total_cost = 0.0;
    int64_t i = int64_t(0);
    while ((i < items_copy.size())) {
        Thing it = _index(items_copy, i);
        double w = get_weight(it);
        if (((total_cost + w) <= max_cost)) {
            result = ([&]{ auto __tmp = result; __tmp.push_back(it); return __tmp; }());
            total_cost = (total_cost + w);
            total_value = (total_value + get_value(it));
        }
        i = (i + int64_t(1));
    }
    return GreedyResult{.items = result, .total_value = total_value};
}

std::string thing_to_string(const Thing& t) {
    return ((((((std::string("Thing(") + t.name) + std::string(", ")) + _to_string(t.value)) + std::string(", ")) + _to_string(t.weight)) + std::string(")"));
}

std::string list_to_string(const std::vector<Thing>& ts) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < ts.size())) {
        s = (s + thing_to_string(_index(ts, i)));
        if ((i < (ts.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        foods = build_menu(food, value, weight);
        std::cout << list_to_string(foods);
        std::cout << std::endl;
        res = greedy(foods, 500.0, get_value);
        std::cout << list_to_string(res.items);
        std::cout << std::endl;
        std::cout << _to_string(res.total_value);
        std::cout << std::endl;
    }
    return 0;
}
