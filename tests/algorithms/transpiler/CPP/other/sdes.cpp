// Generated by Mochi transpiler v0.10.67 on 2025-08-17 14:40:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::string apply_table(std::string inp, const std::vector<int64_t>& table);
std::string left_shift(std::string data);
std::string _xor(std::string a, std::string b);
std::string int_to_binary(int64_t n);
std::string pad_left(std::string s, int64_t width);
int64_t bin_to_int(std::string s);
std::string apply_sbox(const std::vector<std::vector<int64_t>>& s, std::string data);
std::string f(const std::vector<int64_t>& expansion, const std::vector<std::vector<int64_t>>& s0, const std::vector<std::vector<int64_t>>& s1, std::string key, std::string message);
int main();

std::vector<int64_t> p4_table = std::vector<int64_t>{int64_t(2), int64_t(4), int64_t(3), int64_t(1)};
std::string key = std::string("1010000010");
std::string message = std::string("11010111");
std::vector<int64_t> p8_table = std::vector<int64_t>{int64_t(6), int64_t(3), int64_t(7), int64_t(4), int64_t(8), int64_t(5), int64_t(10), int64_t(9)};
std::vector<int64_t> p10_table = std::vector<int64_t>{int64_t(3), int64_t(5), int64_t(2), int64_t(7), int64_t(4), int64_t(10), int64_t(1), int64_t(9), int64_t(8), int64_t(6)};
std::vector<int64_t> IP = std::vector<int64_t>{int64_t(2), int64_t(6), int64_t(3), int64_t(1), int64_t(4), int64_t(8), int64_t(5), int64_t(7)};
std::vector<int64_t> IP_inv = std::vector<int64_t>{int64_t(4), int64_t(1), int64_t(3), int64_t(5), int64_t(7), int64_t(2), int64_t(8), int64_t(6)};
std::vector<int64_t> expansion = std::vector<int64_t>{int64_t(4), int64_t(1), int64_t(2), int64_t(3), int64_t(2), int64_t(3), int64_t(4), int64_t(1)};
std::vector<std::vector<int64_t>> s0 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(3), int64_t(2)}, std::vector<int64_t>{int64_t(3), int64_t(2), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(1), int64_t(3)}, std::vector<int64_t>{int64_t(3), int64_t(1), int64_t(3), int64_t(2)}};
std::vector<std::vector<int64_t>> s1 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(0), int64_t(1), int64_t(3)}, std::vector<int64_t>{int64_t(3), int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(2), int64_t(1), int64_t(0), int64_t(3)}};
std::string temp = std::string();
std::string left = std::string();
std::string right = std::string();
std::string key1 = std::string();
std::string key2 = std::string();
std::string CT = std::string();
std::string PT = std::string();

std::string apply_table(std::string inp, const std::vector<int64_t>& table) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < table.size())) {
        int64_t idx = (_index(table, i) - int64_t(1));
        if ((idx < int64_t(0))) {
            idx = (inp.size() - int64_t(1));
        }
        res = (res + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(idx, (idx + int64_t(1)) - idx); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+idx, __v.begin()+(idx + int64_t(1))); })(inp));
        i = (i + int64_t(1));
    }
    return res;
}

std::string left_shift(std::string data) {
    return (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), data.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+data.size()); })(data) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(data));
}

std::string _xor(std::string a, std::string b) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while (((i < a.size()) && (i < b.size()))) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(a) == ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(b))) {
            res = (res + std::string("0"));
        } else {
            res = (res + std::string("1"));
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string int_to_binary(int64_t n) {
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    std::string res = std::string("");
    int64_t num = n;
    while ((num > int64_t(0))) {
        res = (([&]{ std::ostringstream ss; ss << std::boolalpha << (num % int64_t(2)); return ss.str(); }()) + res);
        num = (num / int64_t(2));
    }
    return res;
}

std::string pad_left(std::string s, int64_t width) {
    std::string res = s;
    while ((res.size() < width)) {
        res = (std::string("0") + res);
    }
    return res;
}

int64_t bin_to_int(std::string s) {
    int64_t result = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        int64_t digit = std::stoll(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s));
        result = ((result * int64_t(2)) + digit);
        i = (i + int64_t(1));
    }
    return result;
}

std::string apply_sbox(const std::vector<std::vector<int64_t>>& s, std::string data) {
    std::string row_bits = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(1) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(1)); })(data) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((data.size() - int64_t(1)), data.size() - (data.size() - int64_t(1))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(data.size() - int64_t(1)), __v.begin()+data.size()); })(data));
    std::string col_bits = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), int64_t(3) - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+int64_t(3)); })(data);
    int64_t row = bin_to_int(row_bits);
    int64_t col = bin_to_int(col_bits);
    int64_t val = _index(_index(s, row), col);
    std::string out = int_to_binary(val);
    return out;
}

std::string f(const std::vector<int64_t>& expansion, const std::vector<std::vector<int64_t>>& s0, const std::vector<std::vector<int64_t>>& s1, std::string key, std::string message) {
    std::string left = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(4) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(4)); })(message);
    std::string right = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(4), int64_t(8) - int64_t(4)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(4), __v.begin()+int64_t(8)); })(message);
    std::string temp = apply_table(right, expansion);
    temp = _xor(temp, key);
    std::string left_bin_str = apply_sbox(s0, ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(4) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(4)); })(temp));
    std::string right_bin_str = apply_sbox(s1, ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(4), int64_t(8) - int64_t(4)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(4), __v.begin()+int64_t(8)); })(temp));
    left_bin_str = pad_left(left_bin_str, int64_t(2));
    right_bin_str = pad_left(right_bin_str, int64_t(2));
    temp = apply_table((left_bin_str + right_bin_str), p4_table);
    temp = _xor(left, temp);
    return (temp + right);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        temp = apply_table(key, p10_table);
        left = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(5) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(5)); })(temp);
        right = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(5), int64_t(10) - int64_t(5)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(5), __v.begin()+int64_t(10)); })(temp);
        left = left_shift(left);
        right = left_shift(right);
        key1 = apply_table((left + right), p8_table);
        left = left_shift(left);
        right = left_shift(right);
        left = left_shift(left);
        right = left_shift(right);
        key2 = apply_table((left + right), p8_table);
        temp = apply_table(message, IP);
        temp = f(expansion, s0, s1, key1, temp);
        temp = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(4), int64_t(8) - int64_t(4)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(4), __v.begin()+int64_t(8)); })(temp) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(4) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(4)); })(temp));
        temp = f(expansion, s0, s1, key2, temp);
        CT = apply_table(temp, IP_inv);
        std::cout << (std::string("Cipher text is: ") + CT);
        std::cout << std::endl;
        temp = apply_table(CT, IP);
        temp = f(expansion, s0, s1, key2, temp);
        temp = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(4), int64_t(8) - int64_t(4)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(4), __v.begin()+int64_t(8)); })(temp) + ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), int64_t(4) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+int64_t(4)); })(temp));
        temp = f(expansion, s0, s1, key1, temp);
        PT = apply_table(temp, IP_inv);
        std::cout << (std::string("Plain text after decypting is: ") + PT);
        std::cout << std::endl;
    }
    return 0;
}
