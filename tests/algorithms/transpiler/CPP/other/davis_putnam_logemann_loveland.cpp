// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:56:45 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Clause;
struct EvalResult;
struct Formula;
struct DPLLResult;

std::ostream& operator<<(std::ostream&, const Clause&);
std::ostream& operator<<(std::ostream&, const EvalResult&);
std::ostream& operator<<(std::ostream&, const Formula&);
std::ostream& operator<<(std::ostream&, const DPLLResult&);


struct Clause {
    std::map<std::string, int64_t> literals;
    std::vector<std::string> names;
    auto operator<=>(const Clause&) const = default;
};

struct EvalResult {
    int64_t value;
    Clause clause;
    auto operator<=>(const EvalResult&) const = default;
};

struct Formula {
    std::vector<Clause> clauses;
    auto operator<=>(const Formula&) const = default;
};

struct DPLLResult {
    bool sat;
    std::map<std::string, int64_t> model;
    auto operator<=>(const DPLLResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Clause& v) {
    os << '{' << "'literals': "<< "{"; bool first_0=true; for(const auto& p: v.literals){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'names': "<< "["; for(size_t i=0;i<v.names.size();++i){ if(i>0) os << ", "; os << v.names[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const EvalResult& v) {
    os << '{' << "'value': "<< v.value
 << ", " << "'clause': "<< v.clause
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Formula& v) {
    os << '{' << "'clauses': "<< "["; for(size_t i=0;i<v.clauses.size();++i){ if(i>0) os << ", "; os << v.clauses[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const DPLLResult& v) {
    os << '{' << "'sat': "<< v.sat
 << ", " << "'model': "<< "{"; bool first_1=true; for(const auto& p: v.model){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

Clause new_clause(const std::vector<std::string>& lits);
Clause assign_clause(Clause& c, const std::map<std::string, int64_t>& model);
EvalResult evaluate_clause(Clause& c, const std::map<std::string, int64_t>& model);
Formula new_formula(const std::vector<Clause>& cs);
std::vector<std::string> remove_symbol(const std::vector<std::string>& symbols, std::string s);
DPLLResult dpll_algorithm(std::vector<Clause>& clauses, const std::vector<std::string>& symbols, const std::map<std::string, int64_t>& model);
std::string str_clause(const Clause& c);
std::string str_formula(const Formula& f);
int main();

Clause clause1 = Clause{};
Clause clause2 = Clause{};
Formula formula = Formula{};
std::string formula_str = std::string();
std::vector<Clause> clauses = std::vector<Clause>{};
std::vector<std::string> symbols = std::vector<std::string>{std::string("A4"), std::string("A3"), std::string("A5"), std::string("A1")};
std::map<std::string, int64_t> model = {};
DPLLResult result = DPLLResult{};

Clause new_clause(const std::vector<std::string>& lits) {
    std::map<std::string, int64_t> m = {};
    std::vector<std::string> names = {};
    int64_t i = int64_t(0);
    while ((i < lits.size())) {
        std::string lit = _index(lits, i);
        m[lit] = (int64_t(0) - int64_t(1));
        names = ([&]{ auto __tmp = names; __tmp.push_back(lit); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Clause{.literals = m, .names = names};
}

Clause assign_clause(Clause c, const std::map<std::string, int64_t>& model) {
    std::map<std::string, int64_t> lits = c.literals;
    int64_t i = int64_t(0);
    while ((i < c.names.size())) {
        std::string lit = _index(c.names, i);
        std::string symbol = ([&]{ std::string __s = lit; long long __start = int64_t(0); long long __end = int64_t(2); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })();
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(model, symbol)) {
            int64_t value = ([&](const auto& __m){ auto __it = __m.find(symbol); if (__it == __m.end()) return int64_t{}; return __it->second; })(model);
            if (((([&]{ std::string __s = lit; long long __start = (lit.size() - int64_t(1)); long long __end = lit.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("'")) && (value != (int64_t(0) - int64_t(1))))) {
                value = (int64_t(1) - value);
            }
            lits[lit] = value;
        }
        i = (i + int64_t(1));
    }
    c.literals = lits;
    return c;
}

EvalResult evaluate_clause(Clause c, const std::map<std::string, int64_t>& model) {
    int64_t i = int64_t(0);
    while ((i < c.names.size())) {
        std::string lit = _index(c.names, i);
        std::string sym = ((([&]{ std::string __s = lit; long long __start = (lit.size() - int64_t(1)); long long __end = lit.size(); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() == std::string("'")) ? ([&]{ std::string __s = lit; long long __start = int64_t(0); long long __end = int64_t(2); if(__start < 0) __start = 0; if(__end < __start) __end = __start; if(__start > static_cast<long long>(__s.size())) __start = __s.size(); if(__end > static_cast<long long>(__s.size())) __end = __s.size(); return __s.substr(static_cast<size_t>(__start), static_cast<size_t>(__end - __start)); })() : (lit + std::string("'")));
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(c.literals, sym)) {
            return EvalResult{.value = int64_t(1), .clause = c};
        }
        i = (i + int64_t(1));
    }
    c = assign_clause(c, model);
    i = int64_t(0);
    while ((i < c.names.size())) {
        std::string lit = _index(c.names, i);
        int64_t value = ([&](const auto& __m){ auto __it = __m.find(lit); if (__it == __m.end()) return int64_t{}; return __it->second; })(c.literals);
        if ((value == int64_t(1))) {
            return EvalResult{.value = int64_t(1), .clause = c};
        }
        if ((value == (int64_t(0) - int64_t(1)))) {
            return EvalResult{.value = (int64_t(0) - int64_t(1)), .clause = c};
        }
        i = (i + int64_t(1));
    }
    int64_t any_true = int64_t(0);
    i = int64_t(0);
    while ((i < c.names.size())) {
        std::string lit = _index(c.names, i);
        if ((([&](const auto& __m){ auto __it = __m.find(lit); if (__it == __m.end()) return int64_t{}; return __it->second; })(c.literals) == int64_t(1))) {
            any_true = int64_t(1);
        }
        i = (i + int64_t(1));
    }
    return EvalResult{.value = any_true, .clause = c};
}

Formula new_formula(const std::vector<Clause>& cs) {
    return Formula{.clauses = cs};
}

std::vector<std::string> remove_symbol(const std::vector<std::string>& symbols, std::string s) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < symbols.size())) {
        if ((_index(symbols, i) != s)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(symbols, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

DPLLResult dpll_algorithm(std::vector<Clause>& clauses, const std::vector<std::string>& symbols, const std::map<std::string, int64_t>& model) {
    bool all_true = true;
    int64_t i = int64_t(0);
    while ((i < clauses.size())) {
        EvalResult ev = ([&]{ auto __arg0 = _index(clauses, i); return evaluate_clause(__arg0, model); }());
        clauses[static_cast<size_t>(i)] = ev.clause;
        if ((ev.value == int64_t(0))) {
            return DPLLResult{.sat = false, .model = {}};
        } else         if ((ev.value == (int64_t(0) - int64_t(1)))) {
            all_true = false;
        }

        i = (i + int64_t(1));
    }
    if (all_true) {
        return DPLLResult{.sat = true, .model = model};
    }
    std::string p = _index(symbols, int64_t(0));
    std::vector<std::string> rest = remove_symbol(symbols, p);
    std::map<std::string, int64_t> tmp1 = model;
    std::map<std::string, int64_t> tmp2 = model;
    tmp1[p] = int64_t(1);
    tmp2[p] = int64_t(0);
    DPLLResult res1 = dpll_algorithm(clauses, rest, tmp1);
    if (res1.sat) {
        return res1;
    }
    return dpll_algorithm(clauses, rest, tmp2);
}

std::string str_clause(const Clause& c) {
    std::string line = std::string("{");
    bool first = true;
    int64_t i = int64_t(0);
    while ((i < c.names.size())) {
        std::string lit = _index(c.names, i);
        if (first) {
            first = false;
        } else {
            line = (line + std::string(" , "));
        }
        line = (line + lit);
        i = (i + int64_t(1));
    }
    line = (line + std::string("}"));
    return line;
}

std::string str_formula(const Formula& f) {
    std::string line = std::string("{");
    int64_t i = int64_t(0);
    while ((i < f.clauses.size())) {
        line = (line + str_clause(_index(f.clauses, i)));
        if ((i < (f.clauses.size() - int64_t(1)))) {
            line = (line + std::string(" , "));
        }
        i = (i + int64_t(1));
    }
    line = (line + std::string("}"));
    return line;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        clause1 = new_clause(std::vector<std::string>{std::string("A4"), std::string("A3"), std::string("A5'"), std::string("A1"), std::string("A3'")});
        clause2 = new_clause(std::vector<std::string>{std::string("A4")});
        formula = new_formula(std::vector<Clause>{clause1, clause2});
        formula_str = str_formula(formula);
        clauses = std::vector<Clause>{clause1, clause2};
        result = dpll_algorithm(clauses, symbols, model);
        if (result.sat) {
            std::cout << ((std::string("The formula ") + formula_str) + std::string(" is satisfiable."));
            std::cout << std::endl;
        } else {
            std::cout << ((std::string("The formula ") + formula_str) + std::string(" is not satisfiable."));
            std::cout << std::endl;
        }
    }
    return 0;
}
