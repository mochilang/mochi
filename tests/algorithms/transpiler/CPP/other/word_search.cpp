// Generated by Mochi transpiler v0.10.61 on 2025-08-08 20:05:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct WordSearch;

std::ostream& operator<<(std::ostream&, const WordSearch&);


struct WordSearch {
    std::vector<std::string> words;
    int64_t width;
    int64_t height;
    std::vector<std::vector<std::string>> board;
    auto operator<=>(const WordSearch&) const = default;
};

std::ostream& operator<<(std::ostream& os, const WordSearch& v) {
    os << '{' << "'words': "<< "["; for(size_t i=0;i<v.words.size();++i){ if(i>0) os << ", "; os << v.words[i]; } os << "]"
 << ", " << "'width': "<< v.width
 << ", " << "'height': "<< v.height
 << ", " << "'board': "<< "["; for(size_t i=0;i<v.board.size();++i){ if(i>0) os << ", "; os << v.board[i]; } os << "]"
 << '}';
    return os;
}

int64_t _rand();
int64_t rand_range(int64_t max);
std::vector<int64_t> shuffle(std::vector<int64_t>& list_int);
std::string rand_letter();
WordSearch make_word_search(const std::vector<std::string>& words, int64_t width, int64_t height);
bool insert_dir(const WordSearch& ws, std::string word, int64_t dr, int64_t dc, const std::vector<int64_t>& rows, const std::vector<int64_t>& cols);
void generate_board(const WordSearch& ws);
std::string visualise(const WordSearch& ws, bool add_fake_chars);
int main();

int64_t seed = 0;

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

int64_t rand_range(int64_t max) {
    return (_rand() % max);
}

std::vector<int64_t> shuffle(std::vector<int64_t>& list_int) {
    int64_t i = (list_int.size() - int64_t(1));
    while ((i > int64_t(0))) {
        int64_t j = rand_range((i + int64_t(1)));
        int64_t tmp = _index(list_int, i);
        list_int[i] = _index(list_int, j);
        list_int[j] = tmp;
        i = (i - int64_t(1));
    }
    return list_int;
}

std::string rand_letter() {
    std::string letters = std::string("abcdefghijklmnopqrstuvwxyz");
    int64_t i = rand_range(int64_t(26));
    return ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(letters);
}

WordSearch make_word_search(const std::vector<std::string>& words, int64_t width, int64_t height) {
    std::vector<std::vector<std::string>> board = {};
    int64_t r = int64_t(0);
    while ((r < height)) {
        std::vector<std::string> row = {};
        int64_t c = int64_t(0);
        while ((c < width)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(std::string("")); return __tmp; }());
            c = (c + int64_t(1));
        }
        board = ([&]{ auto& __tmp = board; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return WordSearch{.words = words, .width = width, .height = height, .board = board};
}

bool insert_dir(const WordSearch& ws, std::string word, int64_t dr, int64_t dc, const std::vector<int64_t>& rows, const std::vector<int64_t>& cols) {
    int64_t word_len = word.size();
    int64_t ri = int64_t(0);
    while ((ri < rows.size())) {
        int64_t row = _index(rows, ri);
        int64_t ci = int64_t(0);
        while ((ci < cols.size())) {
            int64_t col = _index(cols, ci);
            int64_t end_r = (row + (dr * (word_len - int64_t(1))));
            int64_t end_c = (col + (dc * (word_len - int64_t(1))));
            if (((((end_r < int64_t(0)) || (end_r >= ws.height)) || (end_c < int64_t(0))) || (end_c >= ws.width))) {
                ci = (ci + int64_t(1));
                continue;
            }
            int64_t k = int64_t(0);
            bool ok = true;
            while ((k < word_len)) {
                int64_t rr = (row + (dr * k));
                int64_t cc = (col + (dc * k));
                if ((_index(_index(ws.board, rr), cc) != std::string(""))) {
                    ok = false;
                    break;
                }
                k = (k + int64_t(1));
            }
            if (ok) {
                k = int64_t(0);
                while ((k < word_len)) {
                    int64_t rr2 = (row + (dr * k));
                    int64_t cc2 = (col + (dc * k));
                    std::vector<std::string> row_list = _index(ws.board, rr2);
                    row_list[cc2] = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(k, (k + int64_t(1)) - k); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+k, __v.begin()+(k + int64_t(1))); })(word);
                    k = (k + int64_t(1));
                }
                return true;
            }
            ci = (ci + int64_t(1));
        }
        ri = (ri + int64_t(1));
    }
    return false;
}

void generate_board(const WordSearch& ws) {
    std::vector<int64_t> dirs_r = std::vector<int64_t>{-int64_t(1), -int64_t(1), int64_t(0), int64_t(1), int64_t(1), int64_t(1), int64_t(0), -int64_t(1)};
    std::vector<int64_t> dirs_c = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(1), int64_t(1), int64_t(0), -int64_t(1), -int64_t(1), -int64_t(1)};
    int64_t i = int64_t(0);
    while ((i < ws.words.size())) {
        std::string word = _index(ws.words, i);
        std::vector<int64_t> rows = {};
        int64_t r = int64_t(0);
        while ((r < ws.height)) {
            rows = ([&]{ auto& __tmp = rows; __tmp.push_back(r); return __tmp; }());
            r = (r + int64_t(1));
        }
        std::vector<int64_t> cols = {};
        int64_t c = int64_t(0);
        while ((c < ws.width)) {
            cols = ([&]{ auto& __tmp = cols; __tmp.push_back(c); return __tmp; }());
            c = (c + int64_t(1));
        }
        rows = shuffle(rows);
        cols = shuffle(cols);
        int64_t d = rand_range(int64_t(8));
        insert_dir(ws, word, _index(dirs_r, d), _index(dirs_c, d), rows, cols);
        i = (i + int64_t(1));
    }
}

std::string visualise(const WordSearch& ws, bool add_fake_chars) {
    std::string result = std::string("");
    int64_t r = int64_t(0);
    while ((r < ws.height)) {
        int64_t c = int64_t(0);
        while ((c < ws.width)) {
            std::string ch = _index(_index(ws.board, r), c);
            if ((ch == std::string(""))) {
                if (add_fake_chars) {
                    ch = rand_letter();
                } else {
                    ch = std::string("#");
                }
            }
            result = ((result + ch) + std::string(" "));
            c = (c + int64_t(1));
        }
        result = (result + std::string("\n"));
        r = (r + int64_t(1));
    }
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::string> words = std::vector<std::string>{std::string("cat"), std::string("dog"), std::string("snake"), std::string("fish")};
        WordSearch ws = make_word_search(words, int64_t(10), int64_t(10));
        generate_board(ws);
        std::cout << visualise(ws, true);
        std::cout << std::endl;
    }
    return 0;
}
