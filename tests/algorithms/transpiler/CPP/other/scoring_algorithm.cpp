// Generated by Mochi transpiler v0.10.61 on 2025-08-08 20:05:43 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<double>> get_data(const std::vector<std::vector<double>>& source_data);
std::vector<std::vector<double>> calculate_each_score(const std::vector<std::vector<double>>& data_lists, const std::vector<int64_t>& weights);
std::vector<double> generate_final_scores(const std::vector<std::vector<double>>& score_lists);
std::vector<std::vector<double>> procentual_proximity(std::vector<std::vector<double>>& source_data, const std::vector<int64_t>& weights);
int main();

std::vector<std::vector<double>> vehicles = {};
std::vector<int64_t> weights = std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(1)};
std::vector<std::vector<double>> result = std::vector<std::vector<double>>{};

std::vector<std::vector<double>> get_data(const std::vector<std::vector<double>>& source_data) {
    std::vector<std::vector<double>> data_lists = {};
    int64_t i = int64_t(0);
    while ((i < source_data.size())) {
        std::vector<double> row = _index(source_data, i);
        int64_t j = int64_t(0);
        while ((j < row.size())) {
            if ((data_lists.size() < (j + int64_t(1)))) {
                std::vector<double> empty = {};
                data_lists = ([&]{ auto& __tmp = data_lists; __tmp.push_back(empty); return __tmp; }());
            }
            data_lists[j] = ([&]{ auto __tmp = _index(data_lists, j); __tmp.push_back(_index(row, j)); return __tmp; }());
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return data_lists;
}

std::vector<std::vector<double>> calculate_each_score(const std::vector<std::vector<double>>& data_lists, const std::vector<int64_t>& weights) {
    std::vector<std::vector<double>> score_lists = {};
    int64_t i = int64_t(0);
    while ((i < data_lists.size())) {
        std::vector<double> dlist = _index(data_lists, i);
        int64_t weight = _index(weights, i);
        double mind = _index(dlist, int64_t(0));
        double maxd = _index(dlist, int64_t(0));
        int64_t j = int64_t(1);
        while ((j < dlist.size())) {
            double val = _index(dlist, j);
            if ((val < mind)) {
                mind = val;
            }
            if ((val > maxd)) {
                maxd = val;
            }
            j = (j + int64_t(1));
        }
        std::vector<double> score = {};
        j = int64_t(0);
        if ((weight == int64_t(0))) {
            while ((j < dlist.size())) {
                double item = _index(dlist, j);
                if (((maxd - mind) == 0.0)) {
                    score = ([&]{ auto& __tmp = score; __tmp.push_back(1.0); return __tmp; }());
                } else {
                    score = ([&]{ auto& __tmp = score; __tmp.push_back((1.0 - ((double)((item - mind)) / ((maxd - mind))))); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
        } else {
            while ((j < dlist.size())) {
                double item = _index(dlist, j);
                if (((maxd - mind) == 0.0)) {
                    score = ([&]{ auto& __tmp = score; __tmp.push_back(0.0); return __tmp; }());
                } else {
                    score = ([&]{ auto& __tmp = score; __tmp.push_back(((double)((item - mind)) / ((maxd - mind)))); return __tmp; }());
                }
                j = (j + int64_t(1));
            }
        }
        score_lists = ([&]{ auto& __tmp = score_lists; __tmp.push_back(score); return __tmp; }());
        i = (i + int64_t(1));
    }
    return score_lists;
}

std::vector<double> generate_final_scores(const std::vector<std::vector<double>>& score_lists) {
    int64_t count = _index(score_lists, int64_t(0)).size();
    std::vector<double> final_scores = {};
    int64_t i = int64_t(0);
    while ((i < count)) {
        final_scores = ([&]{ auto& __tmp = final_scores; __tmp.push_back(0.0); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < score_lists.size())) {
        std::vector<double> slist = _index(score_lists, i);
        int64_t j = int64_t(0);
        while ((j < slist.size())) {
            final_scores[j] = (_index(final_scores, j) + _index(slist, j));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return final_scores;
}

std::vector<std::vector<double>> procentual_proximity(std::vector<std::vector<double>>& source_data, const std::vector<int64_t>& weights) {
    std::vector<std::vector<double>> data_lists = get_data(source_data);
    std::vector<std::vector<double>> score_lists = calculate_each_score(data_lists, weights);
    std::vector<double> final_scores = generate_final_scores(score_lists);
    int64_t i = int64_t(0);
    while ((i < final_scores.size())) {
        source_data[i] = ([&]{ auto __tmp = _index(source_data, i); __tmp.push_back(_index(final_scores, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return source_data;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        vehicles = ([&]{ auto& __tmp = vehicles; __tmp.push_back(std::vector<double>{20.0, 60.0, 2012.0}); return __tmp; }());
        vehicles = ([&]{ auto& __tmp = vehicles; __tmp.push_back(std::vector<double>{23.0, 90.0, 2015.0}); return __tmp; }());
        vehicles = ([&]{ auto& __tmp = vehicles; __tmp.push_back(std::vector<double>{22.0, 50.0, 2011.0}); return __tmp; }());
        result = procentual_proximity(vehicles, weights);
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = result; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
