// Generated by Mochi transpiler v0.10.61 on 2025-08-08 20:01:58 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct State;

std::ostream& operator<<(std::ostream&, const State&);


struct State {
    std::vector<int64_t> claim;
    std::vector<std::vector<int64_t>> alloc;
    std::vector<std::vector<int64_t>> max;
    auto operator<=>(const State&) const = default;
};

std::ostream& operator<<(std::ostream& os, const State& v) {
    os << '{' << "'claim': "<< "["; for(size_t i=0;i<v.claim.size();++i){ if(i>0) os << ", "; os << v.claim[i]; } os << "]"
 << ", " << "'alloc': "<< "["; for(size_t i=0;i<v.alloc.size();++i){ if(i>0) os << ", "; os << v.alloc[i]; } os << "]"
 << ", " << "'max': "<< "["; for(size_t i=0;i<v.max.size();++i){ if(i>0) os << ", "; os << v.max[i]; } os << "]"
 << '}';
    return os;
}

std::vector<int64_t> processes_resource_summation(const std::vector<std::vector<int64_t>>& alloc);
std::vector<int64_t> available_resources(const std::vector<int64_t>& claim, const std::vector<int64_t>& alloc_sum);
std::vector<std::vector<int64_t>> need(const std::vector<std::vector<int64_t>>& max, const std::vector<std::vector<int64_t>>& alloc);
void pretty_print(const std::vector<int64_t>& claim, const std::vector<std::vector<int64_t>>& alloc, const std::vector<std::vector<int64_t>>& max);
void bankers_algorithm(const std::vector<int64_t>& claim, const std::vector<std::vector<int64_t>>& alloc, const std::vector<std::vector<int64_t>>& max);
int main();

std::vector<int64_t> claim_vector = std::vector<int64_t>{int64_t(8), int64_t(5), int64_t(9), int64_t(7)};
std::vector<std::vector<int64_t>> allocated_resources_table = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(0), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(4), int64_t(0), int64_t(0), int64_t(3)}, std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(3), int64_t(0)}};
std::vector<std::vector<int64_t>> maximum_claim_table = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(3), int64_t(2), int64_t(1), int64_t(4)}, std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(5), int64_t(2)}, std::vector<int64_t>{int64_t(5), int64_t(1), int64_t(0), int64_t(5)}, std::vector<int64_t>{int64_t(1), int64_t(5), int64_t(3), int64_t(0)}, std::vector<int64_t>{int64_t(3), int64_t(0), int64_t(3), int64_t(3)}};

std::vector<int64_t> processes_resource_summation(const std::vector<std::vector<int64_t>>& alloc) {
    int64_t resources = _index(alloc, int64_t(0)).size();
    std::vector<int64_t> sums = {};
    int64_t i = int64_t(0);
    while ((i < resources)) {
        int64_t total = int64_t(0);
        int64_t j = int64_t(0);
        while ((j < alloc.size())) {
            total = (total + _index(_index(alloc, j), i));
            j = (j + int64_t(1));
        }
        sums = ([&]{ auto& __tmp = sums; __tmp.push_back(total); return __tmp; }());
        i = (i + int64_t(1));
    }
    return sums;
}

std::vector<int64_t> available_resources(const std::vector<int64_t>& claim, const std::vector<int64_t>& alloc_sum) {
    std::vector<int64_t> avail = {};
    int64_t i = int64_t(0);
    while ((i < claim.size())) {
        avail = ([&]{ auto& __tmp = avail; __tmp.push_back((_index(claim, i) - _index(alloc_sum, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return avail;
}

std::vector<std::vector<int64_t>> need(const std::vector<std::vector<int64_t>>& max, const std::vector<std::vector<int64_t>>& alloc) {
    std::vector<std::vector<int64_t>> needs = {};
    int64_t i = int64_t(0);
    while ((i < max.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(max, int64_t(0)).size())) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back((_index(_index(max, i), j) - _index(_index(alloc, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        needs = ([&]{ auto& __tmp = needs; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return needs;
}

void pretty_print(const std::vector<int64_t>& claim, const std::vector<std::vector<int64_t>>& alloc, const std::vector<std::vector<int64_t>>& max) {
    std::cout << std::string("         Allocated Resource Table");
    std::cout << std::endl;
    int64_t i = int64_t(0);
    while ((i < alloc.size())) {
        std::vector<int64_t> row = _index(alloc, i);
        std::string line = ((std::string("P") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string("       "));
        int64_t j = int64_t(0);
        while ((j < row.size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(row, j); return ss.str(); }()));
            if ((j < (row.size() - int64_t(1)))) {
                line = (line + std::string("        "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        std::cout << std::string("");
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << std::string("         System Resource Table");
    std::cout << std::endl;
    i = int64_t(0);
    while ((i < max.size())) {
        std::vector<int64_t> row = _index(max, i);
        std::string line = ((std::string("P") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string("       "));
        int64_t j = int64_t(0);
        while ((j < row.size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(row, j); return ss.str(); }()));
            if ((j < (row.size() - int64_t(1)))) {
                line = (line + std::string("        "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        std::cout << std::string("");
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::string usage = std::string("");
    i = int64_t(0);
    while ((i < claim.size())) {
        if ((i > int64_t(0))) {
            usage = (usage + std::string(" "));
        }
        usage = (usage + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(claim, i); return ss.str(); }()));
        i = (i + int64_t(1));
    }
    std::vector<int64_t> alloc_sum = processes_resource_summation(alloc);
    std::vector<int64_t> avail = available_resources(claim, alloc_sum);
    std::string avail_str = std::string("");
    i = int64_t(0);
    while ((i < avail.size())) {
        if ((i > int64_t(0))) {
            avail_str = (avail_str + std::string(" "));
        }
        avail_str = (avail_str + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(avail, i); return ss.str(); }()));
        i = (i + int64_t(1));
    }
    std::cout << (std::string("Current Usage by Active Processes: ") + usage);
    std::cout << std::endl;
    std::cout << (std::string("Initial Available Resources:       ") + avail_str);
    std::cout << std::endl;
}

void bankers_algorithm(const std::vector<int64_t>& claim, const std::vector<std::vector<int64_t>>& alloc, const std::vector<std::vector<int64_t>>& max) {
    std::vector<std::vector<int64_t>> need_list = need(max, alloc);
    std::vector<int64_t> alloc_sum = processes_resource_summation(alloc);
    std::vector<int64_t> avail = available_resources(claim, alloc_sum);
    std::cout << std::string("__________________________________________________");
    std::cout << std::endl;
    std::cout << std::string("");
    std::cout << std::endl;
    std::vector<bool> finished = {};
    int64_t i = int64_t(0);
    while ((i < need_list.size())) {
        finished = ([&]{ auto& __tmp = finished; __tmp.push_back(false); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t remaining = need_list.size();
    while ((remaining > int64_t(0))) {
        bool safe = false;
        int64_t p = int64_t(0);
        while ((p < need_list.size())) {
            if (!_index(finished, p)) {
                bool exec = true;
                int64_t r = int64_t(0);
                while ((r < avail.size())) {
                    if ((_index(_index(need_list, p), r) > _index(avail, r))) {
                        exec = false;
                        break;
                    }
                    r = (r + int64_t(1));
                }
                if (exec) {
                    safe = true;
                    std::cout << ((std::string("Process ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (p + int64_t(1)); return ss.str(); }())) + std::string(" is executing."));
                    std::cout << std::endl;
                    r = int64_t(0);
                    while ((r < avail.size())) {
                        avail[r] = (_index(avail, r) + _index(_index(alloc, p), r));
                        r = (r + int64_t(1));
                    }
                    std::string avail_str = std::string("");
                    r = int64_t(0);
                    while ((r < avail.size())) {
                        if ((r > int64_t(0))) {
                            avail_str = (avail_str + std::string(" "));
                        }
                        avail_str = (avail_str + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(avail, r); return ss.str(); }()));
                        r = (r + int64_t(1));
                    }
                    std::cout << (std::string("Updated available resource stack for processes: ") + avail_str);
                    std::cout << std::endl;
                    std::cout << std::string("The process is in a safe state.");
                    std::cout << std::endl;
                    std::cout << std::string("");
                    std::cout << std::endl;
                    finished[p] = true;
                    remaining = (remaining - int64_t(1));
                }
            }
            p = (p + int64_t(1));
        }
        if (!safe) {
            std::cout << std::string("System in unsafe state. Aborting...");
            std::cout << std::endl;
            std::cout << std::string("");
            std::cout << std::endl;
            break;
        }
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        pretty_print(claim_vector, allocated_resources_table, maximum_claim_table);
        bankers_algorithm(claim_vector, allocated_resources_table, maximum_claim_table);
    }
    return 0;
}
