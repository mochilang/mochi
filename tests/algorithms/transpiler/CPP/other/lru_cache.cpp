// Generated by Mochi transpiler v0.10.67 on 2025-08-17 14:40:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <algorithm>
#include <type_traits>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Node;
struct DoubleLinkedList;
struct LRUCache;
struct GetResult;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const DoubleLinkedList&);
std::ostream& operator<<(std::ostream&, const LRUCache&);
std::ostream& operator<<(std::ostream&, const GetResult&);


struct Node {
    int64_t key;
    int64_t value;
    int64_t prev;
    int64_t next;
    auto operator<=>(const Node&) const = default;
};

struct DoubleLinkedList {
    std::vector<Node> nodes;
    int64_t head;
    int64_t tail;
    auto operator<=>(const DoubleLinkedList&) const = default;
};

struct LRUCache {
    DoubleLinkedList list;
    int64_t capacity;
    int64_t num_keys;
    int64_t hits;
    int64_t misses;
    std::map<std::string, int64_t> cache;
    auto operator<=>(const LRUCache&) const = default;
};

struct GetResult {
    LRUCache cache;
    int64_t value;
    bool ok;
    auto operator<=>(const GetResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'key': "<< v.key
 << ", " << "'value': "<< v.value
 << ", " << "'prev': "<< v.prev
 << ", " << "'next': "<< v.next
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const DoubleLinkedList& v) {
    os << '{' << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << ", " << "'head': "<< v.head
 << ", " << "'tail': "<< v.tail
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const LRUCache& v) {
    os << '{' << "'list': "<< v.list
 << ", " << "'capacity': "<< v.capacity
 << ", " << "'num_keys': "<< v.num_keys
 << ", " << "'hits': "<< v.hits
 << ", " << "'misses': "<< v.misses
 << ", " << "'cache': "<< "{"; bool first_5=true; for(const auto& p: v.cache){ if(!first_5) os << ", "; first_5=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GetResult& v) {
    os << '{' << "'cache': "<< v.cache
 << ", " << "'value': "<< v.value
 << ", " << "'ok': "<< v.ok
 << '}';
    return os;
}

DoubleLinkedList new_list();
DoubleLinkedList dll_add(DoubleLinkedList lst, int64_t idx);
DoubleLinkedList dll_remove(DoubleLinkedList lst, int64_t idx);
LRUCache new_cache(int64_t cap);
GetResult lru_get(const LRUCache& c, int64_t key);
LRUCache lru_put(const LRUCache& c, int64_t key, int64_t value);
std::string cache_info(const LRUCache& cache);
void print_result(const GetResult& res);
int main();

DoubleLinkedList new_list() {
    std::vector<Node> nodes = {};
    Node head = Node{.key = int64_t(0), .value = int64_t(0), .prev = (int64_t(0) - int64_t(1)), .next = int64_t(1)};
    Node tail = Node{.key = int64_t(0), .value = int64_t(0), .prev = int64_t(0), .next = (int64_t(0) - int64_t(1))};
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(head); return __tmp; }());
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(tail); return __tmp; }());
    return DoubleLinkedList{.nodes = nodes, .head = int64_t(0), .tail = int64_t(1)};
}

DoubleLinkedList dll_add(DoubleLinkedList lst, int64_t idx) {
    std::vector<Node> nodes = lst.nodes;
    int64_t tail_idx = lst.tail;
    Node tail_node = _index(nodes, tail_idx);
    int64_t prev_idx = tail_node.prev;
    Node node = _index(nodes, idx);
    node.prev = prev_idx;
    node.next = tail_idx;
    nodes[static_cast<size_t>(idx)] = node;
    Node prev_node = _index(nodes, prev_idx);
    prev_node.next = idx;
    nodes[static_cast<size_t>(prev_idx)] = prev_node;
    tail_node.prev = idx;
    nodes[static_cast<size_t>(tail_idx)] = tail_node;
    lst.nodes = nodes;
    return lst;
}

DoubleLinkedList dll_remove(DoubleLinkedList lst, int64_t idx) {
    std::vector<Node> nodes = lst.nodes;
    Node node = _index(nodes, idx);
    int64_t prev_idx = node.prev;
    int64_t next_idx = node.next;
    if (((prev_idx == (int64_t(0) - int64_t(1))) || (next_idx == (int64_t(0) - int64_t(1))))) {
        return lst;
    }
    Node prev_node = _index(nodes, prev_idx);
    prev_node.next = next_idx;
    nodes[static_cast<size_t>(prev_idx)] = prev_node;
    Node next_node = _index(nodes, next_idx);
    next_node.prev = prev_idx;
    nodes[static_cast<size_t>(next_idx)] = next_node;
    node.prev = (int64_t(0) - int64_t(1));
    node.next = (int64_t(0) - int64_t(1));
    nodes[static_cast<size_t>(idx)] = node;
    lst.nodes = nodes;
    return lst;
}

LRUCache new_cache(int64_t cap) {
    std::map<std::string, int64_t> empty_map = {};
    return LRUCache{.list = new_list(), .capacity = cap, .num_keys = int64_t(0), .hits = int64_t(0), .misses = int64_t(0), .cache = empty_map};
}

GetResult lru_get(const LRUCache& c, int64_t key) {
    LRUCache cache = c;
    std::string key_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << key; return ss.str(); }());
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(cache.cache, key_str)) {
        int64_t idx = ([&](const auto& __m){ auto __it = __m.find(key_str); if (__it == __m.end()) return int64_t{}; return __it->second; })(cache.cache);
        if ((idx != (int64_t(0) - int64_t(1)))) {
            cache.hits = (cache.hits + int64_t(1));
            Node node = _index(cache.list.nodes, idx);
            int64_t value = node.value;
            cache.list = ([&]{ auto __arg0 = cache.list; return dll_remove(__arg0, idx); }());
            cache.list = ([&]{ auto __arg0 = cache.list; return dll_add(__arg0, idx); }());
            return GetResult{.cache = cache, .value = value, .ok = true};
        }
    }
    cache.misses = (cache.misses + int64_t(1));
    return GetResult{.cache = cache, .value = int64_t(0), .ok = false};
}

LRUCache lru_put(const LRUCache& c, int64_t key, int64_t value) {
    LRUCache cache = c;
    std::string key_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << key; return ss.str(); }());
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(cache.cache, key_str)) {
        if ((cache.num_keys >= cache.capacity)) {
            Node head_node = _index(cache.list.nodes, cache.list.head);
            int64_t first_idx = head_node.next;
            Node first_node = _index(cache.list.nodes, first_idx);
            int64_t old_key = first_node.key;
            cache.list = ([&]{ auto __arg0 = cache.list; return dll_remove(__arg0, first_idx); }());
            std::map<std::string, int64_t> mdel = cache.cache;
            mdel[([&]{ std::ostringstream ss; ss << std::boolalpha << old_key; return ss.str(); }())] = (int64_t(0) - int64_t(1));
            cache.cache = mdel;
            cache.num_keys = (cache.num_keys - int64_t(1));
        }
        std::vector<Node> nodes = cache.list.nodes;
        Node new_node = Node{.key = key, .value = value, .prev = (int64_t(0) - int64_t(1)), .next = (int64_t(0) - int64_t(1))};
        nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(new_node); return __tmp; }());
        int64_t idx = (nodes.size() - int64_t(1));
        cache.list.nodes = nodes;
        cache.list = ([&]{ auto __arg0 = cache.list; return dll_add(__arg0, idx); }());
        std::map<std::string, int64_t> m = cache.cache;
        m[key_str] = idx;
        cache.cache = m;
        cache.num_keys = (cache.num_keys + int64_t(1));
    } else {
        std::map<std::string, int64_t> m = cache.cache;
        int64_t idx = ([&](const auto& __m){ auto __it = __m.find(key_str); if (__it == __m.end()) return int64_t{}; return __it->second; })(m);
        std::vector<Node> nodes = cache.list.nodes;
        Node node = _index(nodes, idx);
        node.value = value;
        nodes[static_cast<size_t>(idx)] = node;
        cache.list.nodes = nodes;
        cache.list = ([&]{ auto __arg0 = cache.list; return dll_remove(__arg0, idx); }());
        cache.list = ([&]{ auto __arg0 = cache.list; return dll_add(__arg0, idx); }());
        cache.cache = m;
    }
    return cache;
}

std::string cache_info(const LRUCache& cache) {
    return ((((((((std::string("CacheInfo(hits=") + ([&]{ std::ostringstream ss; ss << std::boolalpha << cache.hits; return ss.str(); }())) + std::string(", misses=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << cache.misses; return ss.str(); }())) + std::string(", capacity=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << cache.capacity; return ss.str(); }())) + std::string(", current size=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << cache.num_keys; return ss.str(); }())) + std::string(")"));
}

void print_result(const GetResult& res) {
    if (res.ok) {
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << res.value; return ss.str(); }());
        std::cout << std::endl;
    } else {
        std::cout << std::string("None");
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        LRUCache cache = new_cache(int64_t(2));
        cache = lru_put(cache, int64_t(1), int64_t(1));
        cache = lru_put(cache, int64_t(2), int64_t(2));
        GetResult r1 = lru_get(cache, int64_t(1));
        cache = r1.cache;
        print_result(r1);
        cache = lru_put(cache, int64_t(3), int64_t(3));
        GetResult r2 = lru_get(cache, int64_t(2));
        cache = r2.cache;
        print_result(r2);
        cache = lru_put(cache, int64_t(4), int64_t(4));
        GetResult r3 = lru_get(cache, int64_t(1));
        cache = r3.cache;
        print_result(r3);
        GetResult r4 = lru_get(cache, int64_t(3));
        cache = r4.cache;
        print_result(r4);
        GetResult r5 = lru_get(cache, int64_t(4));
        cache = r5.cache;
        print_result(r5);
        std::cout << cache_info(cache);
        std::cout << std::endl;
    }
    return 0;
}
