// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:23:42 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename T> std::vector<T> _slice(const std::vector<T>& s, int64_t start, int64_t end) {
    if(start < 0) start = 0;
    if(end > (int64_t)s.size()) end = s.size();
    if(start > (int64_t)s.size()) start = s.size();
    if(end < start) end = start;
    return std::vector<T>(s.begin()+start, s.begin()+end);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Process;
struct MLFQ;
struct RRResult;

std::ostream& operator<<(std::ostream&, const Process&);
std::ostream& operator<<(std::ostream&, const MLFQ&);
std::ostream& operator<<(std::ostream&, const RRResult&);


struct Process {
    std::string process_name;
    int64_t arrival_time;
    int64_t stop_time;
    int64_t burst_time;
    int64_t waiting_time;
    int64_t turnaround_time;
    auto operator<=>(const Process&) const = default;
};

struct MLFQ {
    int64_t number_of_queues;
    std::vector<int64_t> time_slices;
    std::vector<Process> ready_queue;
    int64_t current_time;
    std::vector<Process> finish_queue;
    auto operator<=>(const MLFQ&) const = default;
};

struct RRResult {
    std::vector<Process> finished;
    std::vector<Process> ready;
    auto operator<=>(const RRResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Process& v) {
    os << '{' << "'process_name': "<< "'" << v.process_name << "'"
 << ", " << "'arrival_time': "<< v.arrival_time
 << ", " << "'stop_time': "<< v.stop_time
 << ", " << "'burst_time': "<< v.burst_time
 << ", " << "'waiting_time': "<< v.waiting_time
 << ", " << "'turnaround_time': "<< v.turnaround_time
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const MLFQ& v) {
    os << '{' << "'number_of_queues': "<< v.number_of_queues
 << ", " << "'time_slices': "<< "["; for(size_t i=0;i<v.time_slices.size();++i){ if(i>0) os << ", "; os << v.time_slices[i]; } os << "]"
 << ", " << "'ready_queue': "<< "["; for(size_t i=0;i<v.ready_queue.size();++i){ if(i>0) os << ", "; os << v.ready_queue[i]; } os << "]"
 << ", " << "'current_time': "<< v.current_time
 << ", " << "'finish_queue': "<< "["; for(size_t i=0;i<v.finish_queue.size();++i){ if(i>0) os << ", "; os << v.finish_queue[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const RRResult& v) {
    os << '{' << "'finished': "<< "["; for(size_t i=0;i<v.finished.size();++i){ if(i>0) os << ", "; os << v.finished[i]; } os << "]"
 << ", " << "'ready': "<< "["; for(size_t i=0;i<v.ready.size();++i){ if(i>0) os << ", "; os << v.ready[i]; } os << "]"
 << '}';
    return os;
}

Process make_process(std::string name, int64_t arrival, int64_t burst);
MLFQ make_mlfq(int64_t nqueues, const std::vector<int64_t>& time_slices, const std::vector<Process>& queue, int64_t current_time);
std::vector<std::string> calculate_sequence_of_finish_queue(const MLFQ& mlfq);
std::vector<int64_t> calculate_waiting_time(const std::vector<Process>& queue);
std::vector<int64_t> calculate_turnaround_time(const std::vector<Process>& queue);
std::vector<int64_t> calculate_completion_time(const std::vector<Process>& queue);
std::vector<int64_t> calculate_remaining_burst_time_of_processes(const std::vector<Process>& queue);
int64_t update_waiting_time(const MLFQ& mlfq, Process& process);
std::vector<Process> first_come_first_served(MLFQ& mlfq, const std::vector<Process>& ready_queue);
RRResult round_robin(MLFQ& mlfq, const std::vector<Process>& ready_queue, int64_t time_slice);
std::vector<Process> multi_level_feedback_queue(MLFQ& mlfq);
int main();

Process P1 = Process{};
Process P2 = Process{};
Process P3 = Process{};
Process P4 = Process{};
int64_t number_of_queues = int64_t(3);
std::vector<int64_t> time_slices = std::vector<int64_t>{int64_t(17), int64_t(25)};
std::vector<Process> queue = std::vector<Process>{};
MLFQ mlfq = MLFQ{};
std::vector<Process> finish_queue = std::vector<Process>{};

Process make_process(std::string name, int64_t arrival, int64_t burst) {
    return Process{.process_name = name, .arrival_time = arrival, .stop_time = arrival, .burst_time = burst, .waiting_time = int64_t(0), .turnaround_time = int64_t(0)};
}

MLFQ make_mlfq(int64_t nqueues, const std::vector<int64_t>& time_slices, const std::vector<Process>& queue, int64_t current_time) {
    return MLFQ{.number_of_queues = nqueues, .time_slices = time_slices, .ready_queue = queue, .current_time = current_time, .finish_queue = std::vector<Process>{}};
}

std::vector<std::string> calculate_sequence_of_finish_queue(const MLFQ& mlfq) {
    std::vector<std::string> seq = {};
    int64_t i = int64_t(0);
    while ((i < mlfq.finish_queue.size())) {
        Process p = _index(mlfq.finish_queue, i);
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(p.process_name); return __tmp; }());
        i = (i + int64_t(1));
    }
    return seq;
}

std::vector<int64_t> calculate_waiting_time(const std::vector<Process>& queue) {
    std::vector<int64_t> times = {};
    int64_t i = int64_t(0);
    while ((i < queue.size())) {
        Process p = _index(queue, i);
        times = ([&]{ auto __tmp = times; __tmp.push_back(p.waiting_time); return __tmp; }());
        i = (i + int64_t(1));
    }
    return times;
}

std::vector<int64_t> calculate_turnaround_time(const std::vector<Process>& queue) {
    std::vector<int64_t> times = {};
    int64_t i = int64_t(0);
    while ((i < queue.size())) {
        Process p = _index(queue, i);
        times = ([&]{ auto __tmp = times; __tmp.push_back(p.turnaround_time); return __tmp; }());
        i = (i + int64_t(1));
    }
    return times;
}

std::vector<int64_t> calculate_completion_time(const std::vector<Process>& queue) {
    std::vector<int64_t> times = {};
    int64_t i = int64_t(0);
    while ((i < queue.size())) {
        Process p = _index(queue, i);
        times = ([&]{ auto __tmp = times; __tmp.push_back(p.stop_time); return __tmp; }());
        i = (i + int64_t(1));
    }
    return times;
}

std::vector<int64_t> calculate_remaining_burst_time_of_processes(const std::vector<Process>& queue) {
    std::vector<int64_t> times = {};
    int64_t i = int64_t(0);
    while ((i < queue.size())) {
        Process p = _index(queue, i);
        times = ([&]{ auto __tmp = times; __tmp.push_back(p.burst_time); return __tmp; }());
        i = (i + int64_t(1));
    }
    return times;
}

int64_t update_waiting_time(const MLFQ& mlfq, Process& process) {
    process.waiting_time = (process.waiting_time + (mlfq.current_time - process.stop_time));
    return process.waiting_time;
}

std::vector<Process> first_come_first_served(MLFQ& mlfq, const std::vector<Process>& ready_queue) {
    std::vector<Process> finished = {};
    std::vector<Process> rq = ready_queue;
    while ((rq.size() != int64_t(0))) {
        Process cp = _index(rq, int64_t(0));
        rq = _slice(rq, int64_t(1), rq.size());
        if ((mlfq.current_time < cp.arrival_time)) {
            mlfq.current_time = cp.arrival_time;
        }
        update_waiting_time(mlfq, cp);
        mlfq.current_time = (mlfq.current_time + cp.burst_time);
        cp.burst_time = int64_t(0);
        cp.turnaround_time = (mlfq.current_time - cp.arrival_time);
        cp.stop_time = mlfq.current_time;
        finished = ([&]{ auto __tmp = finished; __tmp.push_back(cp); return __tmp; }());
    }
    mlfq.finish_queue = _concat(mlfq.finish_queue, finished);
    return finished;
}

RRResult round_robin(MLFQ& mlfq, const std::vector<Process>& ready_queue, int64_t time_slice) {
    std::vector<Process> finished = {};
    std::vector<Process> rq = ready_queue;
    int64_t count = rq.size();
    int64_t i = int64_t(0);
    while ((i < count)) {
        Process cp = _index(rq, int64_t(0));
        rq = _slice(rq, int64_t(1), rq.size());
        if ((mlfq.current_time < cp.arrival_time)) {
            mlfq.current_time = cp.arrival_time;
        }
        update_waiting_time(mlfq, cp);
        if ((cp.burst_time > time_slice)) {
            mlfq.current_time = (mlfq.current_time + time_slice);
            cp.burst_time = (cp.burst_time - time_slice);
            cp.stop_time = mlfq.current_time;
            rq = ([&]{ auto __tmp = rq; __tmp.push_back(cp); return __tmp; }());
        } else {
            mlfq.current_time = (mlfq.current_time + cp.burst_time);
            cp.burst_time = int64_t(0);
            cp.stop_time = mlfq.current_time;
            cp.turnaround_time = (mlfq.current_time - cp.arrival_time);
            finished = ([&]{ auto __tmp = finished; __tmp.push_back(cp); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    mlfq.finish_queue = _concat(mlfq.finish_queue, finished);
    return RRResult{.finished = finished, .ready = rq};
}

std::vector<Process> multi_level_feedback_queue(MLFQ& mlfq) {
    int64_t i = int64_t(0);
    while ((i < (mlfq.number_of_queues - int64_t(1)))) {
        RRResult rr = round_robin(mlfq, mlfq.ready_queue, _index(mlfq.time_slices, i));
        mlfq.ready_queue = rr.ready;
        i = (i + int64_t(1));
    }
    first_come_first_served(mlfq, mlfq.ready_queue);
    return mlfq.finish_queue;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        P1 = make_process(std::string("P1"), int64_t(0), int64_t(53));
        P2 = make_process(std::string("P2"), int64_t(0), int64_t(17));
        P3 = make_process(std::string("P3"), int64_t(0), int64_t(68));
        P4 = make_process(std::string("P4"), int64_t(0), int64_t(24));
        queue = std::vector<Process>{P1, P2, P3, P4};
        mlfq = make_mlfq(number_of_queues, time_slices, queue, int64_t(0));
        finish_queue = multi_level_feedback_queue(mlfq);
        std::cout << (std::string("waiting time:\t\t\t") + ([&]{ std::ostringstream ss; { auto __tmp = calculate_waiting_time(std::vector<Process>{P1, P2, P3, P4}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("completion time:\t\t") + ([&]{ std::ostringstream ss; { auto __tmp = calculate_completion_time(std::vector<Process>{P1, P2, P3, P4}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("turnaround time:\t\t") + ([&]{ std::ostringstream ss; { auto __tmp = calculate_turnaround_time(std::vector<Process>{P1, P2, P3, P4}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("sequence of finished processes:\t") + ([&]{ std::ostringstream ss; { auto __tmp = calculate_sequence_of_finish_queue(mlfq); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
