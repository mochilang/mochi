// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:23:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> calculate_waitingtime(const std::vector<int64_t>& arrival_time, const std::vector<int64_t>& burst_time, int64_t no_of_processes);
std::vector<int64_t> calculate_turnaroundtime(const std::vector<int64_t>& burst_time, int64_t no_of_processes, const std::vector<int64_t>& waiting_time);
double to_float(int64_t x);
void calculate_average_times(const std::vector<int64_t>& waiting_time, const std::vector<int64_t>& turn_around_time, int64_t no_of_processes);
int main();

std::vector<int64_t> calculate_waitingtime(const std::vector<int64_t>& arrival_time, const std::vector<int64_t>& burst_time, int64_t no_of_processes) {
    std::vector<int64_t> remaining_time = {};
    int64_t i = int64_t(0);
    while ((i < no_of_processes)) {
        remaining_time = ([&]{ auto __tmp = remaining_time; __tmp.push_back(_index(burst_time, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> waiting_time = {};
    i = int64_t(0);
    while ((i < no_of_processes)) {
        waiting_time = ([&]{ auto __tmp = waiting_time; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t complete = int64_t(0);
    int64_t increment_time = int64_t(0);
    int64_t minm = int64_t(1000000000);
    int64_t _short = int64_t(0);
    bool check = false;
    while ((complete != no_of_processes)) {
        int64_t j = int64_t(0);
        while ((j < no_of_processes)) {
            if ((((_index(arrival_time, j) <= increment_time) && (_index(remaining_time, j) > int64_t(0))) && (_index(remaining_time, j) < minm))) {
                minm = _index(remaining_time, j);
                _short = j;
                check = true;
            }
            j = (j + int64_t(1));
        }
        if (!check) {
            increment_time = (increment_time + int64_t(1));
            continue;
        }
        remaining_time[_short] = (_index(remaining_time, _short) - int64_t(1));
        minm = _index(remaining_time, _short);
        if ((minm == int64_t(0))) {
            minm = int64_t(1000000000);
        }
        if ((_index(remaining_time, _short) == int64_t(0))) {
            complete = (complete + int64_t(1));
            check = false;
            int64_t finish_time = (increment_time + int64_t(1));
            int64_t finar = (finish_time - _index(arrival_time, _short));
            waiting_time[_short] = (finar - _index(burst_time, _short));
            if ((_index(waiting_time, _short) < int64_t(0))) {
                waiting_time[_short] = int64_t(0);
            }
        }
        increment_time = (increment_time + int64_t(1));
    }
    return waiting_time;
}

std::vector<int64_t> calculate_turnaroundtime(const std::vector<int64_t>& burst_time, int64_t no_of_processes, const std::vector<int64_t>& waiting_time) {
    std::vector<int64_t> turn_around_time = {};
    int64_t i = int64_t(0);
    while ((i < no_of_processes)) {
        turn_around_time = ([&]{ auto __tmp = turn_around_time; __tmp.push_back((_index(burst_time, i) + _index(waiting_time, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return turn_around_time;
}

double to_float(int64_t x) {
    return (x * 1.0);
}

void calculate_average_times(const std::vector<int64_t>& waiting_time, const std::vector<int64_t>& turn_around_time, int64_t no_of_processes) {
    int64_t total_waiting_time = int64_t(0);
    int64_t total_turn_around_time = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < no_of_processes)) {
        total_waiting_time = (total_waiting_time + _index(waiting_time, i));
        total_turn_around_time = (total_turn_around_time + _index(turn_around_time, i));
        i = (i + int64_t(1));
    }
    double avg_wait = ((double)((double)(total_waiting_time)) / ((double)(no_of_processes)));
    double avg_turn = ((double)((double)(total_turn_around_time)) / ((double)(no_of_processes)));
    std::cout << (std::string("Average waiting time = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << avg_wait; return ss.str(); }()));
    std::cout << std::endl;
    std::cout << (std::string("Average turn around time = ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << avg_turn; return ss.str(); }()));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { auto __tmp = calculate_waitingtime(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(4)}, std::vector<int64_t>{int64_t(3), int64_t(3), int64_t(5), int64_t(1)}, int64_t(4)); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = calculate_waitingtime(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(5), int64_t(1)}, int64_t(3)); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = calculate_waitingtime(std::vector<int64_t>{int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(5), int64_t(1)}, int64_t(2)); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = calculate_turnaroundtime(std::vector<int64_t>{int64_t(3), int64_t(3), int64_t(5), int64_t(1)}, int64_t(4), std::vector<int64_t>{int64_t(0), int64_t(3), int64_t(5), int64_t(0)}); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = calculate_turnaroundtime(std::vector<int64_t>{int64_t(3), int64_t(3)}, int64_t(2), std::vector<int64_t>{int64_t(0), int64_t(3)}); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = calculate_turnaroundtime(std::vector<int64_t>{int64_t(8), int64_t(10), int64_t(1)}, int64_t(3), std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(3)}); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        calculate_average_times(std::vector<int64_t>{int64_t(0), int64_t(3), int64_t(5), int64_t(0)}, std::vector<int64_t>{int64_t(3), int64_t(6), int64_t(10), int64_t(1)}, int64_t(4));
        calculate_average_times(std::vector<int64_t>{int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(3), int64_t(6)}, int64_t(2));
        calculate_average_times(std::vector<int64_t>{int64_t(10), int64_t(4), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(7), int64_t(6)}, int64_t(3));
    }
    return 0;
}
