// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:23:48 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<int64_t> calculate_waiting_times(const std::vector<int64_t>& burst_times);
std::vector<int64_t> calculate_turn_around_times(const std::vector<int64_t>& burst_times, const std::vector<int64_t>& waiting_times);
double mean(const std::vector<int64_t>& values);
std::string format_float_5(double x);
int main();

std::vector<int64_t> calculate_waiting_times(const std::vector<int64_t>& burst_times) {
    int64_t quantum = int64_t(2);
    std::vector<int64_t> rem = {};
    int64_t i = int64_t(0);
    while ((i < burst_times.size())) {
        rem = ([&]{ auto __tmp = rem; __tmp.push_back(_index(burst_times, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> waiting = {};
    i = int64_t(0);
    while ((i < burst_times.size())) {
        waiting = ([&]{ auto __tmp = waiting; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t t = int64_t(0);
    while (true) {
        bool done = true;
        int64_t j = int64_t(0);
        while ((j < burst_times.size())) {
            if ((_index(rem, j) > int64_t(0))) {
                done = false;
                if ((_index(rem, j) > quantum)) {
                    t = (t + quantum);
                    rem[j] = (_index(rem, j) - quantum);
                } else {
                    t = (t + _index(rem, j));
                    waiting[j] = (t - _index(burst_times, j));
                    rem[j] = int64_t(0);
                }
            }
            j = (j + int64_t(1));
        }
        if (done) {
            return waiting;
        }
    }
    return waiting;
}

std::vector<int64_t> calculate_turn_around_times(const std::vector<int64_t>& burst_times, const std::vector<int64_t>& waiting_times) {
    std::vector<int64_t> result = {};
    int64_t i = int64_t(0);
    while ((i < burst_times.size())) {
        result = ([&]{ auto __tmp = result; __tmp.push_back((_index(burst_times, i) + _index(waiting_times, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

double mean(const std::vector<int64_t>& values) {
    int64_t total = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < values.size())) {
        total = (total + _index(values, i));
        i = (i + int64_t(1));
    }
    return ((double)((double)(total)) / ((double)(values.size())));
}

std::string format_float_5(double x) {
    int64_t scaled = (int64_t)(((x * 100000.0) + 0.5));
    int64_t int_part = (scaled / int64_t(100000));
    int64_t frac_part = (scaled % int64_t(100000));
    std::string frac_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << frac_part; return ss.str(); }());
    while ((frac_str.size() < int64_t(5))) {
        frac_str = (std::string("0") + frac_str);
    }
    return ((([&]{ std::ostringstream ss; ss << std::boolalpha << int_part; return ss.str(); }()) + std::string(".")) + frac_str);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<int64_t> burst_times = std::vector<int64_t>{int64_t(3), int64_t(5), int64_t(7)};
        std::vector<int64_t> waiting_times = calculate_waiting_times(burst_times);
        std::vector<int64_t> turn_around_times = calculate_turn_around_times(burst_times, waiting_times);
        std::cout << std::string("Process ID \tBurst Time \tWaiting Time \tTurnaround Time");
        std::cout << std::endl;
        int64_t i = int64_t(0);
        while ((i < burst_times.size())) {
            std::string line = (((((((std::string("  ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << (i + int64_t(1)); return ss.str(); }())) + std::string("\t\t  ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(burst_times, i); return ss.str(); }())) + std::string("\t\t  ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(waiting_times, i); return ss.str(); }())) + std::string("\t\t  ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(turn_around_times, i); return ss.str(); }()));
            std::cout << line;
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
        std::cout << std::string("");
        std::cout << std::endl;
        std::cout << (std::string("Average waiting time = ") + format_float_5(mean(waiting_times)));
        std::cout << std::endl;
        std::cout << (std::string("Average turn around time = ") + format_float_5(mean(turn_around_times)));
        std::cout << std::endl;
    }
    return 0;
}
