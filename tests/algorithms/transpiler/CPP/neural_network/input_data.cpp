// Generated by Mochi transpiler v0.10.66 on 2025-08-16 13:56:27 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct DataSet;
struct Datasets;
struct BatchResult;

std::ostream& operator<<(std::ostream&, const DataSet&);
std::ostream& operator<<(std::ostream&, const Datasets&);
std::ostream& operator<<(std::ostream&, const BatchResult&);


struct DataSet {
    std::vector<std::vector<int64_t>> images;
    std::vector<std::vector<int64_t>> labels;
    int64_t num_examples;
    int64_t index_in_epoch;
    int64_t epochs_completed;
    auto operator<=>(const DataSet&) const = default;
};

struct Datasets {
    DataSet train;
    DataSet validation;
    DataSet test_ds;
    auto operator<=>(const Datasets&) const = default;
};

struct BatchResult {
    DataSet dataset;
    std::vector<std::vector<int64_t>> images;
    std::vector<std::vector<int64_t>> labels;
    auto operator<=>(const BatchResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const DataSet& v) {
    os << '{' << "'images': "<< "["; for(size_t i=0;i<v.images.size();++i){ if(i>0) os << ", "; os << v.images[i]; } os << "]"
 << ", " << "'labels': "<< "["; for(size_t i=0;i<v.labels.size();++i){ if(i>0) os << ", "; os << v.labels[i]; } os << "]"
 << ", " << "'num_examples': "<< v.num_examples
 << ", " << "'index_in_epoch': "<< v.index_in_epoch
 << ", " << "'epochs_completed': "<< v.epochs_completed
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Datasets& v) {
    os << '{' << "'train': "<< v.train
 << ", " << "'validation': "<< v.validation
 << ", " << "'test_ds': "<< v.test_ds
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BatchResult& v) {
    os << '{' << "'dataset': "<< v.dataset
 << ", " << "'images': "<< "["; for(size_t i=0;i<v.images.size();++i){ if(i>0) os << ", "; os << v.images[i]; } os << "]"
 << ", " << "'labels': "<< "["; for(size_t i=0;i<v.labels.size();++i){ if(i>0) os << ", "; os << v.labels[i]; } os << "]"
 << '}';
    return os;
}

std::vector<std::vector<int64_t>> dense_to_one_hot(const std::vector<int64_t>& labels, int64_t num_classes);
DataSet new_dataset(const std::vector<std::vector<int64_t>>& images, const std::vector<std::vector<int64_t>>& labels);
BatchResult next_batch(const DataSet& ds, int64_t batch_size);
Datasets read_data_sets(const std::vector<std::vector<int64_t>>& train_images, const std::vector<int64_t>& train_labels_raw, const std::vector<std::vector<int64_t>>& test_images, const std::vector<int64_t>& test_labels_raw, int64_t validation_size, int64_t num_classes);
int main();

std::vector<std::vector<int64_t>> dense_to_one_hot(const std::vector<int64_t>& labels, int64_t num_classes) {
    std::vector<std::vector<int64_t>> result = {};
    int64_t i = int64_t(0);
    while ((i < labels.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < num_classes)) {
            if ((j == _index(labels, i))) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(1)); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

DataSet new_dataset(const std::vector<std::vector<int64_t>>& images, const std::vector<std::vector<int64_t>>& labels) {
    return DataSet{.images = images, .labels = labels, .num_examples = images.size(), .index_in_epoch = int64_t(0), .epochs_completed = int64_t(0)};
}

BatchResult next_batch(const DataSet& ds, int64_t batch_size) {
    int64_t start = ds.index_in_epoch;
    if (((start + batch_size) > ds.num_examples)) {
        int64_t rest = (ds.num_examples - start);
        std::vector<std::vector<int64_t>> images_rest = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, ds.num_examples - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+ds.num_examples); })(ds.images);
        std::vector<std::vector<int64_t>> labels_rest = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, ds.num_examples - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+ds.num_examples); })(ds.labels);
        int64_t new_index = (batch_size - rest);
        std::vector<std::vector<int64_t>> images_new = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), new_index - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+new_index); })(ds.images);
        std::vector<std::vector<int64_t>> labels_new = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), new_index - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+new_index); })(ds.labels);
        auto batch_images = _concat(images_rest, images_new);
        auto batch_labels = _concat(labels_rest, labels_new);
        DataSet new_ds = DataSet{.images = ds.images, .labels = ds.labels, .num_examples = ds.num_examples, .index_in_epoch = new_index, .epochs_completed = (ds.epochs_completed + int64_t(1))};
        return BatchResult{.dataset = new_ds, .images = batch_images, .labels = batch_labels};
    } else {
        int64_t end = (start + batch_size);
        std::vector<std::vector<int64_t>> batch_images = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(ds.images);
        std::vector<std::vector<int64_t>> batch_labels = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(start, end - start); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+start, __v.begin()+end); })(ds.labels);
        DataSet new_ds = DataSet{.images = ds.images, .labels = ds.labels, .num_examples = ds.num_examples, .index_in_epoch = end, .epochs_completed = ds.epochs_completed};
        return BatchResult{.dataset = new_ds, .images = batch_images, .labels = batch_labels};
    }
}

Datasets read_data_sets(const std::vector<std::vector<int64_t>>& train_images, const std::vector<int64_t>& train_labels_raw, const std::vector<std::vector<int64_t>>& test_images, const std::vector<int64_t>& test_labels_raw, int64_t validation_size, int64_t num_classes) {
    std::vector<std::vector<int64_t>> train_labels = dense_to_one_hot(train_labels_raw, num_classes);
    std::vector<std::vector<int64_t>> test_labels = dense_to_one_hot(test_labels_raw, num_classes);
    std::vector<std::vector<int64_t>> validation_images = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), validation_size - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+validation_size); })(train_images);
    std::vector<std::vector<int64_t>> validation_labels = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), validation_size - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+validation_size); })(train_labels);
    std::vector<std::vector<int64_t>> train_images_rest = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(validation_size, train_images.size() - validation_size); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+validation_size, __v.begin()+train_images.size()); })(train_images);
    std::vector<std::vector<int64_t>> train_labels_rest = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(validation_size, train_labels.size() - validation_size); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+validation_size, __v.begin()+train_labels.size()); })(train_labels);
    DataSet train = new_dataset(train_images_rest, train_labels_rest);
    DataSet validation = new_dataset(validation_images, validation_labels);
    DataSet testset = new_dataset(test_images, test_labels);
    return Datasets{.train = train, .validation = validation, .test_ds = testset};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> train_images = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(1), int64_t(2)}, std::vector<int64_t>{int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(3), int64_t(4)}, std::vector<int64_t>{int64_t(4), int64_t(5)}};
        std::vector<int64_t> train_labels_raw = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(3), int64_t(4)};
        std::vector<std::vector<int64_t>> test_images = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(5), int64_t(6)}, std::vector<int64_t>{int64_t(6), int64_t(7)}};
        std::vector<int64_t> test_labels_raw = std::vector<int64_t>{int64_t(5), int64_t(6)};
        Datasets data = read_data_sets(train_images, train_labels_raw, test_images, test_labels_raw, int64_t(2), int64_t(10));
        DataSet ds = data.train;
        BatchResult res = next_batch(ds, int64_t(2));
        ds = res.dataset;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = res.images; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp3 = res.labels; ss << "["; for(size_t i=0;i<__tmp3.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp4 = __tmp3[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp4.size();++i){ if(i>0) __ss << ' '; __ss << __tmp4[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        res = next_batch(ds, int64_t(2));
        ds = res.dataset;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp5 = res.images; ss << "["; for(size_t i=0;i<__tmp5.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp6 = __tmp5[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp6.size();++i){ if(i>0) __ss << ' '; __ss << __tmp6[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp7 = res.labels; ss << "["; for(size_t i=0;i<__tmp7.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp8 = __tmp7[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp8.size();++i){ if(i>0) __ss << ' '; __ss << __tmp8[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        res = next_batch(ds, int64_t(2));
        ds = res.dataset;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp9 = res.images; ss << "["; for(size_t i=0;i<__tmp9.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp10 = __tmp9[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp10.size();++i){ if(i>0) __ss << ' '; __ss << __tmp10[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp11 = res.labels; ss << "["; for(size_t i=0;i<__tmp11.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp12 = __tmp11[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp12.size();++i){ if(i>0) __ss << ' '; __ss << __tmp12[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
