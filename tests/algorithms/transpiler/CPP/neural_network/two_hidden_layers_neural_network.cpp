// Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:20:19 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Network;

std::ostream& operator<<(std::ostream&, const Network&);


struct Network {
    std::vector<std::vector<double>> w1;
    std::vector<std::vector<double>> w2;
    std::vector<std::vector<double>> w3;
    auto operator<=>(const Network&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Network& v) {
    os << '{' << "'w1': "<< "["; for(size_t i=0;i<v.w1.size();++i){ if(i>0) os << ", "; os << v.w1[i]; } os << "]"
 << ", " << "'w2': "<< "["; for(size_t i=0;i<v.w2.size();++i){ if(i>0) os << ", "; os << v.w2[i]; } os << "]"
 << ", " << "'w3': "<< "["; for(size_t i=0;i<v.w3.size();++i){ if(i>0) os << ", "; os << v.w3[i]; } os << "]"
 << '}';
    return os;
}

double exp_approx(double x);
double sigmoid(double x);
double sigmoid_derivative(double x);
Network new_network();
double feedforward(const Network& net, const std::vector<double>& input);
void train(Network& net, const std::vector<std::vector<double>>& inputs, const std::vector<double>& outputs, int64_t iterations);
int64_t predict(const Network& net, const std::vector<double>& input);
int64_t example();
int main();

double exp_approx(double x) {
    double sum = 1.0;
    double term = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        term = ((double)((term * x)) / ((double)(i)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double sigmoid(double x) {
    return ((double)(1.0) / ((1.0 + exp_approx(-x))));
}

double sigmoid_derivative(double x) {
    return (x * (1.0 - x));
}

Network new_network() {
    return Network{.w1 = std::vector<std::vector<double>>{std::vector<double>{0.1, 0.2, 0.3, 0.4}, std::vector<double>{0.5, 0.6, 0.7, 0.8}, std::vector<double>{0.9, 1.0, 1.1, 1.2}}, .w2 = std::vector<std::vector<double>>{std::vector<double>{0.1, 0.2, 0.3}, std::vector<double>{0.4, 0.5, 0.6}, std::vector<double>{0.7, 0.8, 0.9}, std::vector<double>{1.0, 1.1, 1.2}}, .w3 = std::vector<std::vector<double>>{std::vector<double>{0.1}, std::vector<double>{0.2}, std::vector<double>{0.3}}};
}

double feedforward(const Network& net, const std::vector<double>& input) {
    std::vector<double> hidden1 = {};
    int64_t j = int64_t(0);
    while ((j < int64_t(4))) {
        double sum1 = 0.0;
        int64_t i = int64_t(0);
        while ((i < int64_t(3))) {
            sum1 = (sum1 + (_index(input, i) * _index(_index(net.w1, i), j)));
            i = (i + int64_t(1));
        }
        hidden1 = ([&]{ auto __tmp = hidden1; __tmp.push_back(sigmoid(sum1)); return __tmp; }());
        j = (j + int64_t(1));
    }
    std::vector<double> hidden2 = {};
    int64_t k = int64_t(0);
    while ((k < int64_t(3))) {
        double sum2 = 0.0;
        int64_t j2 = int64_t(0);
        while ((j2 < int64_t(4))) {
            sum2 = (sum2 + (_index(hidden1, j2) * _index(_index(net.w2, j2), k)));
            j2 = (j2 + int64_t(1));
        }
        hidden2 = ([&]{ auto __tmp = hidden2; __tmp.push_back(sigmoid(sum2)); return __tmp; }());
        k = (k + int64_t(1));
    }
    double sum3 = 0.0;
    int64_t k2 = int64_t(0);
    while ((k2 < int64_t(3))) {
        sum3 = (sum3 + (_index(hidden2, k2) * _index(_index(net.w3, k2), int64_t(0))));
        k2 = (k2 + int64_t(1));
    }
    double out = sigmoid(sum3);
    return out;
}

void train(Network& net, const std::vector<std::vector<double>>& inputs, const std::vector<double>& outputs, int64_t iterations) {
    int64_t iter = int64_t(0);
    while ((iter < iterations)) {
        int64_t s = int64_t(0);
        while ((s < inputs.size())) {
            std::vector<double> inp = _index(inputs, s);
            double target = _index(outputs, s);
            std::vector<double> hidden1 = {};
            int64_t j = int64_t(0);
            while ((j < int64_t(4))) {
                double sum1 = 0.0;
                int64_t i = int64_t(0);
                while ((i < int64_t(3))) {
                    sum1 = (sum1 + (_index(inp, i) * _index(_index(net.w1, i), j)));
                    i = (i + int64_t(1));
                }
                hidden1 = ([&]{ auto __tmp = hidden1; __tmp.push_back(sigmoid(sum1)); return __tmp; }());
                j = (j + int64_t(1));
            }
            std::vector<double> hidden2 = {};
            int64_t k = int64_t(0);
            while ((k < int64_t(3))) {
                double sum2 = 0.0;
                int64_t j2 = int64_t(0);
                while ((j2 < int64_t(4))) {
                    sum2 = (sum2 + (_index(hidden1, j2) * _index(_index(net.w2, j2), k)));
                    j2 = (j2 + int64_t(1));
                }
                hidden2 = ([&]{ auto __tmp = hidden2; __tmp.push_back(sigmoid(sum2)); return __tmp; }());
                k = (k + int64_t(1));
            }
            double sum3 = 0.0;
            int64_t k3 = int64_t(0);
            while ((k3 < int64_t(3))) {
                sum3 = (sum3 + (_index(hidden2, k3) * _index(_index(net.w3, k3), int64_t(0))));
                k3 = (k3 + int64_t(1));
            }
            double output = sigmoid(sum3);
            double error = (target - output);
            double delta_output = (error * sigmoid_derivative(output));
            std::vector<std::vector<double>> new_w3 = {};
            int64_t k4 = int64_t(0);
            while ((k4 < int64_t(3))) {
                std::vector<double> w3row = _index(net.w3, k4);
                w3row[int64_t(0)] = (_index(w3row, int64_t(0)) + (_index(hidden2, k4) * delta_output));
                new_w3 = ([&]{ auto __tmp = new_w3; __tmp.push_back(w3row); return __tmp; }());
                k4 = (k4 + int64_t(1));
            }
            net.w3 = new_w3;
            std::vector<double> delta_hidden2 = {};
            int64_t k5 = int64_t(0);
            while ((k5 < int64_t(3))) {
                std::vector<double> row = _index(net.w3, k5);
                double dh2 = ((_index(row, int64_t(0)) * delta_output) * sigmoid_derivative(_index(hidden2, k5)));
                delta_hidden2 = ([&]{ auto __tmp = delta_hidden2; __tmp.push_back(dh2); return __tmp; }());
                k5 = (k5 + int64_t(1));
            }
            std::vector<std::vector<double>> new_w2 = {};
            j = int64_t(0);
            while ((j < int64_t(4))) {
                std::vector<double> w2row = _index(net.w2, j);
                int64_t k6 = int64_t(0);
                while ((k6 < int64_t(3))) {
                    w2row[k6] = (_index(w2row, k6) + (_index(hidden1, j) * _index(delta_hidden2, k6)));
                    k6 = (k6 + int64_t(1));
                }
                new_w2 = ([&]{ auto __tmp = new_w2; __tmp.push_back(w2row); return __tmp; }());
                j = (j + int64_t(1));
            }
            net.w2 = new_w2;
            std::vector<double> delta_hidden1 = {};
            j = int64_t(0);
            while ((j < int64_t(4))) {
                double sumdh = 0.0;
                int64_t k7 = int64_t(0);
                while ((k7 < int64_t(3))) {
                    std::vector<double> row2 = _index(net.w2, j);
                    sumdh = (sumdh + (_index(row2, k7) * _index(delta_hidden2, k7)));
                    k7 = (k7 + int64_t(1));
                }
                delta_hidden1 = ([&]{ auto __tmp = delta_hidden1; __tmp.push_back((sumdh * sigmoid_derivative(_index(hidden1, j)))); return __tmp; }());
                j = (j + int64_t(1));
            }
            std::vector<std::vector<double>> new_w1 = {};
            int64_t i2 = int64_t(0);
            while ((i2 < int64_t(3))) {
                std::vector<double> w1row = _index(net.w1, i2);
                j = int64_t(0);
                while ((j < int64_t(4))) {
                    w1row[j] = (_index(w1row, j) + (_index(inp, i2) * _index(delta_hidden1, j)));
                    j = (j + int64_t(1));
                }
                new_w1 = ([&]{ auto __tmp = new_w1; __tmp.push_back(w1row); return __tmp; }());
                i2 = (i2 + int64_t(1));
            }
            net.w1 = new_w1;
            s = (s + int64_t(1));
        }
        iter = (iter + int64_t(1));
    }
}

int64_t predict(const Network& net, const std::vector<double>& input) {
    double out = feedforward(net, input);
    if ((out > 0.6)) {
        return int64_t(1);
    }
    return int64_t(0);
}

int64_t example() {
    std::vector<std::vector<double>> inputs = std::vector<std::vector<double>>{std::vector<double>{0.0, 0.0, 0.0}, std::vector<double>{0.0, 0.0, 1.0}, std::vector<double>{0.0, 1.0, 0.0}, std::vector<double>{0.0, 1.0, 1.0}, std::vector<double>{1.0, 0.0, 0.0}, std::vector<double>{1.0, 0.0, 1.0}, std::vector<double>{1.0, 1.0, 0.0}, std::vector<double>{1.0, 1.0, 1.0}};
    std::vector<double> outputs = std::vector<double>{0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0};
    Network net = new_network();
    train(net, inputs, outputs, int64_t(10));
    int64_t result = predict(net, std::vector<double>{1.0, 1.0, 1.0});
    std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << result; return ss.str(); }());
    std::cout << std::endl;
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        example();
    }
    return 0;
}
