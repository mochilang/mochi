// Generated by Mochi transpiler v0.10.67 on 2025-08-17 14:39:23 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Layer;
struct Data;

std::ostream& operator<<(std::ostream&, const Layer&);
std::ostream& operator<<(std::ostream&, const Data&);


struct Layer {
    int64_t units;
    std::vector<std::vector<double>> weight;
    std::vector<double> bias;
    std::vector<double> output;
    std::vector<double> xdata;
    double learn_rate;
    auto operator<=>(const Layer&) const = default;
};

struct Data {
    std::vector<std::vector<double>> x;
    std::vector<std::vector<double>> y;
    auto operator<=>(const Data&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Layer& v) {
    os << '{' << "'units': "<< v.units
 << ", " << "'weight': "<< "["; for(size_t i=0;i<v.weight.size();++i){ if(i>0) os << ", "; os << v.weight[i]; } os << "]"
 << ", " << "'bias': "<< "["; for(size_t i=0;i<v.bias.size();++i){ if(i>0) os << ", "; os << v.bias[i]; } os << "]"
 << ", " << "'output': "<< "["; for(size_t i=0;i<v.output.size();++i){ if(i>0) os << ", "; os << v.output[i]; } os << "]"
 << ", " << "'xdata': "<< "["; for(size_t i=0;i<v.xdata.size();++i){ if(i>0) os << ", "; os << v.xdata[i]; } os << "]"
 << ", " << "'learn_rate': "<< std::fixed << std::setprecision(1) << v.learn_rate
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Data& v) {
    os << '{' << "'x': "<< "["; for(size_t i=0;i<v.x.size();++i){ if(i>0) os << ", "; os << v.x[i]; } os << "]"
 << ", " << "'y': "<< "["; for(size_t i=0;i<v.y.size();++i){ if(i>0) os << ", "; os << v.y[i]; } os << "]"
 << '}';
    return os;
}

int64_t _rand();
double _random();
double expApprox(double x);
double sigmoid(double z);
std::vector<double> sigmoid_vec(const std::vector<double>& v);
std::vector<double> sigmoid_derivative(const std::vector<double>& out);
std::vector<double> random_vector(int64_t n);
std::vector<std::vector<double>> random_matrix(int64_t r, int64_t c);
std::vector<double> matvec(const std::vector<std::vector<double>>& mat, const std::vector<double>& vec);
std::vector<double> matTvec(const std::vector<std::vector<double>>& mat, const std::vector<double>& vec);
std::vector<double> vec_sub(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vec_mul(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vec_scalar_mul(const std::vector<double>& v, double s);
std::vector<std::vector<double>> outer(const std::vector<double>& a, const std::vector<double>& b);
std::vector<std::vector<double>> mat_scalar_mul(const std::vector<std::vector<double>>& mat, double s);
std::vector<std::vector<double>> mat_sub(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
Layer init_layer(int64_t units, int64_t back_units, double lr);
std::vector<Layer> forward(std::vector<Layer>& layers, const std::vector<double>& x);
std::vector<Layer> backward(std::vector<Layer>& layers, const std::vector<double>& grad);
double calc_loss(const std::vector<double>& y, const std::vector<double>& yhat);
std::vector<double> calc_gradient(const std::vector<double>& y, const std::vector<double>& yhat);
double train(std::vector<Layer>& layers, const std::vector<std::vector<double>>& xdata, const std::vector<std::vector<double>>& ydata, int64_t rounds, double acc);
Data create_data();
int main();

int64_t seed = int64_t(1);

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

double _random() {
    return ((double)((1.0 * _rand())) / (2147483648.0));
}

double expApprox(double x) {
    double y = x;
    bool is_neg = false;
    if ((x < 0.0)) {
        is_neg = true;
        y = -x;
    }
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(30))) {
        term = ((double)((term * y)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    if (is_neg) {
        return ((double)(1.0) / (sum));
    }
    return sum;
}

double sigmoid(double z) {
    return ((double)(1.0) / ((1.0 + expApprox(-z))));
}

std::vector<double> sigmoid_vec(const std::vector<double>& v) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(sigmoid(_index(v, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> sigmoid_derivative(const std::vector<double>& out) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < out.size())) {
        double val = _index(out, i);
        res = ([&]{ auto __tmp = res; __tmp.push_back((val * (1.0 - val))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> random_vector(int64_t n) {
    std::vector<double> v = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        v = ([&]{ auto __tmp = v; __tmp.push_back((_random() - 0.5)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return v;
}

std::vector<std::vector<double>> random_matrix(int64_t r, int64_t c) {
    std::vector<std::vector<double>> m = {};
    int64_t i = int64_t(0);
    while ((i < r)) {
        m = ([&]{ auto __tmp = m; __tmp.push_back(random_vector(c)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return m;
}

std::vector<double> matvec(const std::vector<std::vector<double>>& mat, const std::vector<double>& vec) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        double s = 0.0;
        int64_t j = int64_t(0);
        while ((j < vec.size())) {
            s = (s + (_index(_index(mat, i), j) * _index(vec, j)));
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(s); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> matTvec(const std::vector<std::vector<double>>& mat, const std::vector<double>& vec) {
    int64_t cols = _index(mat, int64_t(0)).size();
    std::vector<double> res = {};
    int64_t j = int64_t(0);
    while ((j < cols)) {
        double s = 0.0;
        int64_t i = int64_t(0);
        while ((i < mat.size())) {
            s = (s + (_index(_index(mat, i), j) * _index(vec, i)));
            i = (i + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(s); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

std::vector<double> vec_sub(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a, i) - _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vec_mul(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a, i) * _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vec_scalar_mul(const std::vector<double>& v, double s) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(v, i) * s)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> outer(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < b.size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(a, i) * _index(b, j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> mat_scalar_mul(const std::vector<std::vector<double>>& mat, double s) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(mat, i).size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(mat, i), j) * s)); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> mat_sub(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(a, i).size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_index(_index(a, i), j) - _index(_index(b, i), j))); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

Layer init_layer(int64_t units, int64_t back_units, double lr) {
    return Layer{.units = units, .weight = random_matrix(units, back_units), .bias = random_vector(units), .output = std::vector<double>{}, .xdata = std::vector<double>{}, .learn_rate = lr};
}

std::vector<Layer> forward(std::vector<Layer>& layers, const std::vector<double>& x) {
    std::vector<double> data = x;
    int64_t i = int64_t(0);
    while ((i < layers.size())) {
        Layer layer = _index(layers, i);
        layer.xdata = data;
        if ((i == int64_t(0))) {
            layer.output = data;
        } else {
            std::vector<double> z = vec_sub(matvec(layer.weight, data), layer.bias);
            layer.output = sigmoid_vec(z);
            data = layer.output;
        }
        layers[static_cast<size_t>(i)] = layer;
        i = (i + int64_t(1));
    }
    return layers;
}

std::vector<Layer> backward(std::vector<Layer>& layers, const std::vector<double>& grad) {
    std::vector<double> g = grad;
    int64_t i = (layers.size() - int64_t(1));
    while ((i > int64_t(0))) {
        Layer layer = _index(layers, i);
        std::vector<double> deriv = sigmoid_derivative(layer.output);
        std::vector<double> delta = vec_mul(g, deriv);
        std::vector<std::vector<double>> grad_w = outer(delta, layer.xdata);
        layer.weight = mat_sub(layer.weight, mat_scalar_mul(grad_w, layer.learn_rate));
        layer.bias = vec_sub(layer.bias, vec_scalar_mul(delta, layer.learn_rate));
        g = matTvec(layer.weight, delta);
        layers[static_cast<size_t>(i)] = layer;
        i = (i - int64_t(1));
    }
    return layers;
}

double calc_loss(const std::vector<double>& y, const std::vector<double>& yhat) {
    double s = 0.0;
    int64_t i = int64_t(0);
    while ((i < y.size())) {
        double d = (_index(y, i) - _index(yhat, i));
        s = (s + (d * d));
        i = (i + int64_t(1));
    }
    return s;
}

std::vector<double> calc_gradient(const std::vector<double>& y, const std::vector<double>& yhat) {
    std::vector<double> g = {};
    int64_t i = int64_t(0);
    while ((i < y.size())) {
        g = ([&]{ auto __tmp = g; __tmp.push_back((2.0 * (_index(yhat, i) - _index(y, i)))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return g;
}

double train(std::vector<Layer>& layers, const std::vector<std::vector<double>>& xdata, const std::vector<std::vector<double>>& ydata, int64_t rounds, double acc) {
    int64_t r = int64_t(0);
    while ((r < rounds)) {
        int64_t i = int64_t(0);
        while ((i < xdata.size())) {
            layers = forward(layers, _index(xdata, i));
            std::vector<double> out = _index(layers, (layers.size() - int64_t(1))).output;
            std::vector<double> grad = calc_gradient(_index(ydata, i), out);
            layers = backward(layers, grad);
            i = (i + int64_t(1));
        }
        r = (r + int64_t(1));
    }
    return 0.0;
}

Data create_data() {
    std::vector<std::vector<double>> x = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        x = ([&]{ auto __tmp = x; __tmp.push_back(random_vector(int64_t(10))); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<double>> y = std::vector<std::vector<double>>{std::vector<double>{0.8, 0.4}, std::vector<double>{0.4, 0.3}, std::vector<double>{0.34, 0.45}, std::vector<double>{0.67, 0.32}, std::vector<double>{0.88, 0.67}, std::vector<double>{0.78, 0.77}, std::vector<double>{0.55, 0.66}, std::vector<double>{0.55, 0.43}, std::vector<double>{0.54, 0.1}, std::vector<double>{0.1, 0.5}};
    return Data{.x = x, .y = y};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Data data = create_data();
        std::vector<std::vector<double>> x = data.x;
        std::vector<std::vector<double>> y = data.y;
        std::vector<Layer> layers = {};
        layers = ([&]{ auto __tmp = layers; __tmp.push_back(init_layer(int64_t(10), int64_t(0), 0.3)); return __tmp; }());
        layers = ([&]{ auto __tmp = layers; __tmp.push_back(init_layer(int64_t(20), int64_t(10), 0.3)); return __tmp; }());
        layers = ([&]{ auto __tmp = layers; __tmp.push_back(init_layer(int64_t(30), int64_t(20), 0.3)); return __tmp; }());
        layers = ([&]{ auto __tmp = layers; __tmp.push_back(init_layer(int64_t(2), int64_t(30), 0.3)); return __tmp; }());
        double final_mse = train(layers, x, y, int64_t(100), 0.01);
        { std::ostringstream __ss; double __dv = final_mse; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
