// Generated by Mochi transpiler v0.10.64 on 2025-08-12 13:54:03 GMT+7
#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <sstream>
#include <iomanip>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct CNN;
struct TrainSample;

std::ostream& operator<<(std::ostream&, const CNN&);
std::ostream& operator<<(std::ostream&, const TrainSample&);


struct CNN {
    std::vector<std::vector<std::vector<double>>> conv_kernels;
    std::vector<double> conv_bias;
    int64_t conv_step;
    int64_t pool_size;
    std::vector<std::vector<double>> w_hidden;
    std::vector<std::vector<double>> w_out;
    std::vector<double> b_hidden;
    std::vector<double> b_out;
    double rate_weight;
    double rate_bias;
    auto operator<=>(const CNN&) const = default;
};

struct TrainSample {
    std::vector<std::vector<double>> image;
    std::vector<double> target;
    auto operator<=>(const TrainSample&) const = default;
};

std::ostream& operator<<(std::ostream& os, const CNN& v) {
    os << '{' << "'conv_kernels': "<< "["; for(size_t i=0;i<v.conv_kernels.size();++i){ if(i>0) os << ", "; os << v.conv_kernels[i]; } os << "]"
 << ", " << "'conv_bias': "<< "["; for(size_t i=0;i<v.conv_bias.size();++i){ if(i>0) os << ", "; os << v.conv_bias[i]; } os << "]"
 << ", " << "'conv_step': "<< v.conv_step
 << ", " << "'pool_size': "<< v.pool_size
 << ", " << "'w_hidden': "<< "["; for(size_t i=0;i<v.w_hidden.size();++i){ if(i>0) os << ", "; os << v.w_hidden[i]; } os << "]"
 << ", " << "'w_out': "<< "["; for(size_t i=0;i<v.w_out.size();++i){ if(i>0) os << ", "; os << v.w_out[i]; } os << "]"
 << ", " << "'b_hidden': "<< "["; for(size_t i=0;i<v.b_hidden.size();++i){ if(i>0) os << ", "; os << v.b_hidden[i]; } os << "]"
 << ", " << "'b_out': "<< "["; for(size_t i=0;i<v.b_out.size();++i){ if(i>0) os << ", "; os << v.b_out[i]; } os << "]"
 << ", " << "'rate_weight': "<< std::fixed << std::setprecision(1) << v.rate_weight
 << ", " << "'rate_bias': "<< std::fixed << std::setprecision(1) << v.rate_bias
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const TrainSample& v) {
    os << '{' << "'image': "<< "["; for(size_t i=0;i<v.image.size();++i){ if(i>0) os << ", "; os << v.image[i]; } os << "]"
 << ", " << "'target': "<< "["; for(size_t i=0;i<v.target.size();++i){ if(i>0) os << ", "; os << v.target[i]; } os << "]"
 << '}';
    return os;
}

double _random();
double sigmoid(double x);
double to_float(int64_t x);
double _exp(double x);
std::vector<std::vector<double>> convolve(const std::vector<std::vector<double>>& data, const std::vector<std::vector<double>>& kernel, int64_t step, double bias);
std::vector<std::vector<double>> average_pool(const std::vector<std::vector<double>>& map, int64_t size);
std::vector<double> flatten(const std::vector<std::vector<std::vector<double>>>& maps);
std::vector<double> vec_mul_mat(const std::vector<double>& v, const std::vector<std::vector<double>>& m);
std::vector<double> matT_vec_mul(const std::vector<std::vector<double>>& m, const std::vector<double>& v);
std::vector<double> vec_add(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vec_sub(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vec_mul(const std::vector<double>& a, const std::vector<double>& b);
std::vector<double> vec_map_sig(const std::vector<double>& v);
CNN new_cnn();
std::vector<double> forward(const CNN& cnn, const std::vector<std::vector<double>>& data);
CNN train(const CNN& cnn, const std::vector<TrainSample>& samples, int64_t epochs);
int main();

int64_t seed = 0;

double _random() {
    seed = (((seed * int64_t(13)) + int64_t(7)) % int64_t(100));
    return ((double)((double)(seed)) / (100.0));
}

double sigmoid(double x) {
    return ((double)(1.0) / ((1.0 + std::exp(-x))));
}

double to_float(int64_t x) {
    return (x * 1.0);
}

double _exp(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(20))) {
        term = ((double)((term * x)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

std::vector<std::vector<double>> convolve(const std::vector<std::vector<double>>& data, const std::vector<std::vector<double>>& kernel, int64_t step, double bias) {
    int64_t size_data = data.size();
    int64_t size_kernel = kernel.size();
    std::vector<std::vector<double>> out = {};
    int64_t i = int64_t(0);
    while ((i <= (size_data - size_kernel))) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j <= (size_data - size_kernel))) {
            double sum = 0.0;
            int64_t a = int64_t(0);
            while ((a < size_kernel)) {
                int64_t b = int64_t(0);
                while ((b < size_kernel)) {
                    sum = (sum + (_index(_index(data, (i + a)), (j + b)) * _index(_index(kernel, a), b)));
                    b = (b + int64_t(1));
                }
                a = (a + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(sigmoid((sum - bias))); return __tmp; }());
            j = (j + step);
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        i = (i + step);
    }
    return out;
}

std::vector<std::vector<double>> average_pool(const std::vector<std::vector<double>>& map, int64_t size) {
    std::vector<std::vector<double>> out = {};
    int64_t i = int64_t(0);
    while ((i < map.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(map, i).size())) {
            double sum = 0.0;
            int64_t a = int64_t(0);
            while ((a < size)) {
                int64_t b = int64_t(0);
                while ((b < size)) {
                    sum = (sum + _index(_index(map, (i + a)), (j + b)));
                    b = (b + int64_t(1));
                }
                a = (a + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(((double)(sum) / ((double)((size * size))))); return __tmp; }());
            j = (j + size);
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        i = (i + size);
    }
    return out;
}

std::vector<double> flatten(const std::vector<std::vector<std::vector<double>>>& maps) {
    std::vector<double> out = {};
    int64_t i = int64_t(0);
    while ((i < maps.size())) {
        int64_t j = int64_t(0);
        while ((j < _index(maps, i).size())) {
            int64_t k = int64_t(0);
            while ((k < _index(_index(maps, i), j).size())) {
                out = ([&]{ auto __tmp = out; __tmp.push_back(_index(_index(_index(maps, i), j), k)); return __tmp; }());
                k = (k + int64_t(1));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return out;
}

std::vector<double> vec_mul_mat(const std::vector<double>& v, const std::vector<std::vector<double>>& m) {
    int64_t cols = _index(m, int64_t(0)).size();
    std::vector<double> res = {};
    int64_t j = int64_t(0);
    while ((j < cols)) {
        double sum = 0.0;
        int64_t i = int64_t(0);
        while ((i < v.size())) {
            sum = (sum + (_index(v, i) * _index(_index(m, i), j)));
            i = (i + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(sum); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

std::vector<double> matT_vec_mul(const std::vector<std::vector<double>>& m, const std::vector<double>& v) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        double sum = 0.0;
        int64_t j = int64_t(0);
        while ((j < _index(m, i).size())) {
            sum = (sum + (_index(_index(m, i), j) * _index(v, j)));
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(sum); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vec_add(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a, i) + _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vec_sub(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a, i) - _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vec_mul(const std::vector<double>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back((_index(a, i) * _index(b, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> vec_map_sig(const std::vector<double>& v) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(sigmoid(_index(v, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

CNN new_cnn() {
    std::vector<std::vector<double>> k1 = std::vector<std::vector<double>>{std::vector<double>{1.0, 0.0}, std::vector<double>{0.0, 1.0}};
    std::vector<std::vector<double>> k2 = std::vector<std::vector<double>>{std::vector<double>{0.0, 1.0}, std::vector<double>{1.0, 0.0}};
    std::vector<std::vector<std::vector<double>>> conv_kernels = std::vector<std::vector<std::vector<double>>>{k1, k2};
    std::vector<double> conv_bias = std::vector<double>{0.0, 0.0};
    int64_t conv_step = int64_t(2);
    int64_t pool_size = int64_t(2);
    int64_t input_size = int64_t(2);
    int64_t hidden_size = int64_t(2);
    int64_t output_size = int64_t(2);
    std::vector<std::vector<double>> w_hidden = {};
    int64_t i = int64_t(0);
    while ((i < input_size)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < hidden_size)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_random() - 0.5)); return __tmp; }());
            j = (j + int64_t(1));
        }
        w_hidden = ([&]{ auto __tmp = w_hidden; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<double>> w_out = {};
    i = int64_t(0);
    while ((i < hidden_size)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < output_size)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((_random() - 0.5)); return __tmp; }());
            j = (j + int64_t(1));
        }
        w_out = ([&]{ auto __tmp = w_out; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<double> b_hidden = std::vector<double>{0.0, 0.0};
    std::vector<double> b_out = std::vector<double>{0.0, 0.0};
    return CNN{.conv_kernels = conv_kernels, .conv_bias = conv_bias, .conv_step = conv_step, .pool_size = pool_size, .w_hidden = w_hidden, .w_out = w_out, .b_hidden = b_hidden, .b_out = b_out, .rate_weight = 0.2, .rate_bias = 0.2};
}

std::vector<double> forward(const CNN& cnn, const std::vector<std::vector<double>>& data) {
    std::vector<std::vector<std::vector<double>>> maps = {};
    int64_t i = int64_t(0);
    while ((i < cnn.conv_kernels.size())) {
        std::vector<std::vector<double>> conv_map = convolve(data, _index(cnn.conv_kernels, i), cnn.conv_step, _index(cnn.conv_bias, i));
        std::vector<std::vector<double>> pooled = average_pool(conv_map, cnn.pool_size);
        maps = ([&]{ auto __tmp = maps; __tmp.push_back(pooled); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<double> flat = flatten(maps);
    std::vector<double> hidden_net = vec_add(vec_mul_mat(flat, cnn.w_hidden), cnn.b_hidden);
    std::vector<double> hidden_out = vec_map_sig(hidden_net);
    std::vector<double> out_net = vec_add(vec_mul_mat(hidden_out, cnn.w_out), cnn.b_out);
    std::vector<double> out = vec_map_sig(out_net);
    return out;
}

CNN train(const CNN& cnn, const std::vector<TrainSample>& samples, int64_t epochs) {
    std::vector<std::vector<double>> w_out = cnn.w_out;
    std::vector<double> b_out = cnn.b_out;
    std::vector<std::vector<double>> w_hidden = cnn.w_hidden;
    std::vector<double> b_hidden = cnn.b_hidden;
    int64_t e = int64_t(0);
    while ((e < epochs)) {
        int64_t s = int64_t(0);
        while ((s < samples.size())) {
            std::vector<std::vector<double>> data = _index(samples, s).image;
            std::vector<double> target = _index(samples, s).target;
            std::vector<std::vector<std::vector<double>>> maps = {};
            int64_t i = int64_t(0);
            while ((i < cnn.conv_kernels.size())) {
                std::vector<std::vector<double>> conv_map = convolve(data, _index(cnn.conv_kernels, i), cnn.conv_step, _index(cnn.conv_bias, i));
                std::vector<std::vector<double>> pooled = average_pool(conv_map, cnn.pool_size);
                maps = ([&]{ auto __tmp = maps; __tmp.push_back(pooled); return __tmp; }());
                i = (i + int64_t(1));
            }
            std::vector<double> flat = flatten(maps);
            std::vector<double> hidden_net = vec_add(vec_mul_mat(flat, w_hidden), b_hidden);
            std::vector<double> hidden_out = vec_map_sig(hidden_net);
            std::vector<double> out_net = vec_add(vec_mul_mat(hidden_out, w_out), b_out);
            std::vector<double> out = vec_map_sig(out_net);
            std::vector<double> error_out = vec_sub(target, out);
            std::vector<double> pd_out = vec_mul(error_out, vec_mul(out, vec_sub(std::vector<double>{1.0, 1.0}, out)));
            std::vector<double> error_hidden = matT_vec_mul(w_out, pd_out);
            std::vector<double> pd_hidden = vec_mul(error_hidden, vec_mul(hidden_out, vec_sub(std::vector<double>{1.0, 1.0}, hidden_out)));
            int64_t j = int64_t(0);
            while ((j < w_out.size())) {
                int64_t k = int64_t(0);
                while ((k < _index(w_out, j).size())) {
                    w_out[static_cast<size_t>(j)][static_cast<size_t>(k)] = (_index(_index(w_out, j), k) + ((cnn.rate_weight * _index(hidden_out, j)) * _index(pd_out, k)));
                    k = (k + int64_t(1));
                }
                j = (j + int64_t(1));
            }
            j = int64_t(0);
            while ((j < b_out.size())) {
                b_out[static_cast<size_t>(j)] = (_index(b_out, j) - (cnn.rate_bias * _index(pd_out, j)));
                j = (j + int64_t(1));
            }
            int64_t i_h = int64_t(0);
            while ((i_h < w_hidden.size())) {
                int64_t j_h = int64_t(0);
                while ((j_h < _index(w_hidden, i_h).size())) {
                    w_hidden[static_cast<size_t>(i_h)][static_cast<size_t>(j_h)] = (_index(_index(w_hidden, i_h), j_h) + ((cnn.rate_weight * _index(flat, i_h)) * _index(pd_hidden, j_h)));
                    j_h = (j_h + int64_t(1));
                }
                i_h = (i_h + int64_t(1));
            }
            j = int64_t(0);
            while ((j < b_hidden.size())) {
                b_hidden[static_cast<size_t>(j)] = (_index(b_hidden, j) - (cnn.rate_bias * _index(pd_hidden, j)));
                j = (j + int64_t(1));
            }
            s = (s + int64_t(1));
        }
        e = (e + int64_t(1));
    }
    return CNN{.conv_kernels = cnn.conv_kernels, .conv_bias = cnn.conv_bias, .conv_step = cnn.conv_step, .pool_size = cnn.pool_size, .w_hidden = w_hidden, .w_out = w_out, .b_hidden = b_hidden, .b_out = b_out, .rate_weight = cnn.rate_weight, .rate_bias = cnn.rate_bias};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        CNN cnn = new_cnn();
        std::vector<std::vector<double>> image = std::vector<std::vector<double>>{std::vector<double>{1.0, 0.0, 1.0, 0.0}, std::vector<double>{0.0, 1.0, 0.0, 1.0}, std::vector<double>{1.0, 0.0, 1.0, 0.0}, std::vector<double>{0.0, 1.0, 0.0, 1.0}};
        TrainSample sample = TrainSample{.image = image, .target = std::vector<double>{1.0, 0.0}};
        std::cout << std::string("Before training:");
        std::cout << " ";
        { auto __tmp = forward(cnn, image); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        CNN trained = train(cnn, std::vector<TrainSample>{sample}, int64_t(50));
        std::cout << std::string("After training:");
        std::cout << " ";
        { auto __tmp = forward(trained, image); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
