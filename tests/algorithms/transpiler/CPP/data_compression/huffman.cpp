// Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:07:30 GMT+7
#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Huffman;
struct Leaf;
struct Node;

std::ostream& operator<<(std::ostream&, const Huffman&);
std::ostream& operator<<(std::ostream&, const Leaf&);
std::ostream& operator<<(std::ostream&, const Node&);


struct Huffman {
    virtual ~Huffman() = default;
};

struct Leaf : Huffman {
    std::string symbol;
    int64_t freq;
    Leaf(std::string symbol_, int64_t freq_) : symbol(symbol_), freq(freq_) {}
    auto operator<=>(const Leaf&) const = default;
};

struct Node : Huffman {
    int64_t freq;
    std::shared_ptr<Huffman> left;
    std::shared_ptr<Huffman> right;
    Node(int64_t freq_, std::shared_ptr<Huffman> left_, std::shared_ptr<Huffman> right_) : freq(freq_), left(std::move(left_)), right(std::move(right_)) {}
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Leaf& v) {
    os << '{' << "'symbol': "<< "'" << v.symbol << "'"
 << ", " << "'freq': "<< v.freq
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'freq': "<< v.freq
 << ", " << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

int64_t get_freq(Huffman* n);
std::vector<std::shared_ptr<Huffman>> sort_nodes(const std::vector<std::shared_ptr<Huffman>>& nodes);
std::vector<std::shared_ptr<Huffman>> rest(const std::vector<std::shared_ptr<Huffman>>& nodes);
std::vector<std::shared_ptr<Huffman>> count_freq(std::string text);
std::shared_ptr<Huffman> build_tree(const std::vector<std::shared_ptr<Huffman>>& nodes);
std::vector<std::vector<std::string>> concat_pairs(const std::vector<std::vector<std::string>>& a, const std::vector<std::vector<std::string>>& b);
std::vector<std::vector<std::string>> collect_codes(Huffman* tree, std::string prefix);
std::string find_code(const std::vector<std::vector<std::string>>& pairs, std::string ch);
std::string huffman_encode(std::string text);
int main();

int64_t get_freq(Huffman* n) {
    return ([=]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(n);
    if (__leaf) {
        int64_t f = __leaf->freq;
        return f;
    }
    const Node* __node = dynamic_cast<const Node*>(n);
    if (__node) {
        int64_t f = __node->freq;
        return f;
    }
    return int64_t(0);
}());
}

std::vector<std::shared_ptr<Huffman>> sort_nodes(const std::vector<std::shared_ptr<Huffman>>& nodes) {
    std::vector<std::shared_ptr<Huffman>> arr = nodes;
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        std::shared_ptr<Huffman> key = arr[i];
        int64_t j = (i - int64_t(1));
        while (((j >= int64_t(0)) && (get_freq(arr[j].get()) > get_freq(key.get())))) {
            arr[(j + int64_t(1))] = arr[j];
            j = (j - int64_t(1));
        }
        arr[(j + int64_t(1))] = key;
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<std::shared_ptr<Huffman>> rest(const std::vector<std::shared_ptr<Huffman>>& nodes) {
    std::vector<std::shared_ptr<Huffman>> res = {};
    int64_t i = int64_t(1);
    while ((i < nodes.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(nodes[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::shared_ptr<Huffman>> count_freq(std::string text) {
    std::vector<std::string> chars = {};
    std::vector<int64_t> freqs = {};
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        std::string c = text.substr(i, (i + int64_t(1)) - i);
        int64_t j = int64_t(0);
        bool found = false;
        while ((j < chars.size())) {
            if ((chars[j] == c)) {
                freqs[j] = (freqs[j] + int64_t(1));
                found = true;
                break;
            }
            j = (j + int64_t(1));
        }
        if (!found) {
            chars = ([&]{ auto __tmp = chars; __tmp.push_back(c); return __tmp; }());
            freqs = ([&]{ auto __tmp = freqs; __tmp.push_back(int64_t(1)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    std::vector<std::shared_ptr<Huffman>> leaves = {};
    int64_t k = int64_t(0);
    while ((k < chars.size())) {
        leaves = ([&]{ auto __tmp = leaves; __tmp.push_back(std::make_shared<Leaf>(chars[k], freqs[k])); return __tmp; }());
        k = (k + int64_t(1));
    }
    return sort_nodes(leaves);
}

std::shared_ptr<Huffman> build_tree(const std::vector<std::shared_ptr<Huffman>>& nodes) {
    std::vector<std::shared_ptr<Huffman>> arr = nodes;
    while ((arr.size() > int64_t(1))) {
        std::shared_ptr<Huffman> left = arr[int64_t(0)];
        arr = rest(arr);
        std::shared_ptr<Huffman> right = arr[int64_t(0)];
        arr = rest(arr);
        std::shared_ptr<Huffman> node = std::make_shared<Node>((get_freq(left.get()) + get_freq(right.get())), left, right);
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(node); return __tmp; }());
        arr = sort_nodes(arr);
    }
    return arr[int64_t(0)];
}

std::vector<std::vector<std::string>> concat_pairs(const std::vector<std::vector<std::string>>& a, const std::vector<std::vector<std::string>>& b) {
    std::vector<std::vector<std::string>> res = a;
    int64_t i = int64_t(0);
    while ((i < b.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(b[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<std::string>> collect_codes(Huffman* tree, std::string prefix) {
    return ([=]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(tree);
    if (__leaf) {
        std::string s = __leaf->symbol;
        return std::vector<std::vector<std::string>>{std::vector<std::string>{s, prefix}};
    }
    const Node* __node = dynamic_cast<const Node*>(tree);
    if (__node) {
        Huffman* l = __node->left.get();
        Huffman* r = __node->right.get();
        return concat_pairs(collect_codes(l, (prefix + std::string("0"))), collect_codes(r, (prefix + std::string("1"))));
    }
    return std::vector<std::vector<std::string>>{};
}());
}

std::string find_code(const std::vector<std::vector<std::string>>& pairs, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < pairs.size())) {
        if ((pairs[i][int64_t(0)] == ch)) {
            return pairs[i][int64_t(1)];
        }
        i = (i + int64_t(1));
    }
    return std::string("");
}

std::string huffman_encode(std::string text) {
    if ((text == std::string(""))) {
        return std::string("");
    }
    std::vector<std::shared_ptr<Huffman>> leaves = count_freq(text);
    std::shared_ptr<Huffman> tree = build_tree(leaves);
    std::vector<std::vector<std::string>> codes = collect_codes(tree.get(), std::string(""));
    std::string encoded = std::string("");
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        std::string c = text.substr(i, (i + int64_t(1)) - i);
        encoded = ((encoded + find_code(codes, c)) + std::string(" "));
        i = (i + int64_t(1));
    }
    return encoded;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << huffman_encode(std::string("beep boop beer!"));
        std::cout << std::endl;
    }
    return 0;
}
