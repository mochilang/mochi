// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:18:19 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Token;

std::ostream& operator<<(std::ostream&, const Token&);


struct Token {
    int64_t offset;
    int64_t length;
    std::string indicator;
    auto operator<=>(const Token&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Token& v) {
    os << '{' << "'offset': "<< v.offset
 << ", " << "'length': "<< v.length
 << ", " << "'indicator': "<< "'" << v.indicator << "'"
 << '}';
    return os;
}

std::string token_to_string(const Token& t);
std::string tokens_to_string(const std::vector<Token>& ts);
int64_t match_length_from_index(std::string text, std::string window, int64_t text_index, int64_t window_index);
Token find_encoding_token(std::string text, std::string search_buffer);
std::vector<Token> lz77_compress(std::string text, int64_t window_size, int64_t lookahead);
std::string lz77_decompress(const std::vector<Token>& tokens);
int main();

std::vector<Token> c1 = lz77_compress(std::string("ababcbababaa"), int64_t(13), int64_t(6));
std::vector<Token> c2 = lz77_compress(std::string("aacaacabcabaaac"), int64_t(13), int64_t(6));
std::vector<Token> tokens_example = std::vector<Token>{Token{.offset = int64_t(0), .length = int64_t(0), .indicator = std::string("c")}, Token{.offset = int64_t(0), .length = int64_t(0), .indicator = std::string("a")}, Token{.offset = int64_t(0), .length = int64_t(0), .indicator = std::string("b")}, Token{.offset = int64_t(0), .length = int64_t(0), .indicator = std::string("r")}, Token{.offset = int64_t(3), .length = int64_t(1), .indicator = std::string("c")}, Token{.offset = int64_t(2), .length = int64_t(1), .indicator = std::string("d")}, Token{.offset = int64_t(7), .length = int64_t(4), .indicator = std::string("r")}, Token{.offset = int64_t(3), .length = int64_t(5), .indicator = std::string("d")}};

std::string token_to_string(const Token& t) {
    return ((((((std::string("(") + ([&]{ std::ostringstream ss; ss << std::boolalpha << t.offset; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << t.length; return ss.str(); }())) + std::string(", ")) + t.indicator) + std::string(")"));
}

std::string tokens_to_string(const std::vector<Token>& ts) {
    std::string res = std::string("[");
    int64_t i = int64_t(0);
    while ((i < ts.size())) {
        res = (res + token_to_string(ts[i]));
        if ((i < (ts.size() - int64_t(1)))) {
            res = (res + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    return (res + std::string("]"));
}

int64_t match_length_from_index(std::string text, std::string window, int64_t text_index, int64_t window_index) {
    if (((text_index >= text.size()) || (window_index >= window.size()))) {
        return int64_t(0);
    }
    std::string tc = text.substr(text_index, (text_index + int64_t(1)) - text_index);
    std::string wc = window.substr(window_index, (window_index + int64_t(1)) - window_index);
    if ((tc != wc)) {
        return int64_t(0);
    }
    return (int64_t(1) + match_length_from_index(text, (window + tc), (text_index + int64_t(1)), (window_index + int64_t(1))));
}

Token find_encoding_token(std::string text, std::string search_buffer) {
    if ((text.size() == int64_t(0))) {
        throw std::runtime_error(std::string("We need some text to work with."));
    }
    int64_t length = int64_t(0);
    int64_t offset = int64_t(0);
    if ((search_buffer.size() == int64_t(0))) {
        return Token{.offset = offset, .length = length, .indicator = text.substr(int64_t(0), int64_t(1) - int64_t(0))};
    }
    int64_t i = int64_t(0);
    while ((i < search_buffer.size())) {
        std::string ch = search_buffer.substr(i, (i + int64_t(1)) - i);
        int64_t found_offset = (search_buffer.size() - i);
        if ((ch == text.substr(int64_t(0), int64_t(1) - int64_t(0)))) {
            int64_t found_length = match_length_from_index(text, search_buffer, int64_t(0), i);
            if ((found_length >= length)) {
                offset = found_offset;
                length = found_length;
            }
        }
        i = (i + int64_t(1));
    }
    return Token{.offset = offset, .length = length, .indicator = text.substr(length, (length + int64_t(1)) - length)};
}

std::vector<Token> lz77_compress(std::string text, int64_t window_size, int64_t lookahead) {
    int64_t search_buffer_size = (window_size - lookahead);
    std::vector<Token> output = {};
    std::string search_buffer = std::string("");
    std::string remaining = text;
    while ((remaining.size() > int64_t(0))) {
        Token token = find_encoding_token(remaining, search_buffer);
        int64_t add_len = (token.length + int64_t(1));
        search_buffer = (search_buffer + remaining.substr(int64_t(0), add_len - int64_t(0)));
        if ((search_buffer.size() > search_buffer_size)) {
            search_buffer = search_buffer.substr((search_buffer.size() - search_buffer_size), search_buffer.size() - (search_buffer.size() - search_buffer_size));
        }
        remaining = remaining.substr(add_len, remaining.size() - add_len);
        output = ([&]{ auto __tmp = output; __tmp.push_back(token); return __tmp; }());
    }
    return output;
}

std::string lz77_decompress(const std::vector<Token>& tokens) {
    std::string output = std::string("");
    for (Token t : tokens) {
        int64_t i = int64_t(0);
        while ((i < t.length)) {
            output = (output + output.substr((output.size() - t.offset), ((output.size() - t.offset) + int64_t(1)) - (output.size() - t.offset)));
            i = (i + int64_t(1));
        }
        output = (output + t.indicator);
    }
    return output;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << tokens_to_string(c1);
        std::cout << std::endl;
        std::cout << tokens_to_string(c2);
        std::cout << std::endl;
        std::cout << lz77_decompress(tokens_example);
        std::cout << std::endl;
    }
    return 0;
}
