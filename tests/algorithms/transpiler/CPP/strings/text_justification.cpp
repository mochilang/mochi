// Generated by Mochi transpiler v0.10.66 on 2025-08-14 19:14:01 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::string repeat_str(std::string s, int64_t count);
std::vector<std::string> split_words(std::string s);
std::string justify_line(const std::vector<std::string>& line, int64_t width, int64_t max_width);
std::vector<std::string> text_justification(std::string word, int64_t max_width);
int main();

std::string repeat_str(std::string s, int64_t count) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < count)) {
        res = (res + s);
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> split_words(std::string s) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        if ((ch == std::string(" "))) {
            if ((current != std::string(""))) {
                res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
                current = std::string("");
            }
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    if ((current != std::string(""))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    }
    return res;
}

std::string justify_line(const std::vector<std::string>& line, int64_t width, int64_t max_width) {
    int64_t overall_spaces_count = (max_width - width);
    int64_t words_count = line.size();
    if ((words_count == int64_t(1))) {
        return (_index(line, int64_t(0)) + repeat_str(std::string(" "), overall_spaces_count));
    }
    int64_t spaces_to_insert_between_words = (words_count - int64_t(1));
    std::vector<int64_t> num_spaces_between_words_list = {};
    int64_t base = (overall_spaces_count / spaces_to_insert_between_words);
    int64_t extra = (overall_spaces_count % spaces_to_insert_between_words);
    int64_t i = int64_t(0);
    while ((i < spaces_to_insert_between_words)) {
        int64_t spaces = base;
        if ((i < extra)) {
            spaces = (spaces + int64_t(1));
        }
        num_spaces_between_words_list = ([&]{ auto __tmp = num_spaces_between_words_list; __tmp.push_back(spaces); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::string aligned = std::string("");
    i = int64_t(0);
    while ((i < spaces_to_insert_between_words)) {
        aligned = ((aligned + _index(line, i)) + repeat_str(std::string(" "), _index(num_spaces_between_words_list, i)));
        i = (i + int64_t(1));
    }
    aligned = (aligned + _index(line, spaces_to_insert_between_words));
    return aligned;
}

std::vector<std::string> text_justification(std::string word, int64_t max_width) {
    std::vector<std::string> words = split_words(word);
    std::vector<std::string> answer = {};
    std::vector<std::string> line = {};
    int64_t width = int64_t(0);
    int64_t idx = int64_t(0);
    while ((idx < words.size())) {
        std::string w = _index(words, idx);
        if ((((width + w.size()) + line.size()) <= max_width)) {
            line = ([&]{ auto __tmp = line; __tmp.push_back(w); return __tmp; }());
            width = (width + w.size());
        } else {
            answer = ([&]{ auto __tmp = answer; __tmp.push_back(justify_line(line, width, max_width)); return __tmp; }());
            line = std::vector<std::string>{w};
            width = w.size();
        }
        idx = (idx + int64_t(1));
    }
    int64_t remaining_spaces = ((max_width - width) - line.size());
    std::string last_line = std::string("");
    int64_t j = int64_t(0);
    while ((j < line.size())) {
        if ((j > int64_t(0))) {
            last_line = (last_line + std::string(" "));
        }
        last_line = (last_line + _index(line, j));
        j = (j + int64_t(1));
    }
    last_line = (last_line + repeat_str(std::string(" "), (remaining_spaces + int64_t(1))));
    answer = ([&]{ auto __tmp = answer; __tmp.push_back(last_line); return __tmp; }());
    return answer;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = text_justification(std::string("This is an example of text justification."), int64_t(16)); ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp2 = text_justification(std::string("Two roads diverged in a yellow wood"), int64_t(16)); ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) ss << ' '; ss << __tmp2[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
