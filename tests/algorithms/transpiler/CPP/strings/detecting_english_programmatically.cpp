// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:59:01 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <map>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::string to_upper(std::string s);
bool char_in(std::string chars, std::string c);
std::string remove_non_letters(std::string message);
std::vector<std::string> split_spaces(std::string text);
std::map<std::string, bool> load_dictionary();
double get_english_count(std::string message);
bool is_english(std::string message, int64_t word_percentage, int64_t letter_percentage);
int main();

std::string LETTERS_AND_SPACE = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n");
std::string LOWER = std::string("abcdefghijklmnopqrstuvwxyz");
std::string UPPER = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
std::map<std::string, bool> ENGLISH_WORDS = std::map<std::string, bool>{};

std::string to_upper(std::string s) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(s);
        int64_t j = int64_t(0);
        std::string up = c;
        while ((j < LOWER.size())) {
            if ((c == ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(LOWER))) {
                up = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(j, (j + int64_t(1)) - j); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+j, __v.begin()+(j + int64_t(1))); })(UPPER);
                break;
            }
            j = (j + int64_t(1));
        }
        res = (res + up);
        i = (i + int64_t(1));
    }
    return res;
}

bool char_in(std::string chars, std::string c) {
    int64_t i = int64_t(0);
    while ((i < chars.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(chars) == c)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::string remove_non_letters(std::string message) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < message.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(message);
        if (char_in(LETTERS_AND_SPACE, ch)) {
            res = (res + ch);
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> split_spaces(std::string text) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < text.size())) {
        std::string ch = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(text);
        if ((ch == std::string(" "))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

std::map<std::string, bool> load_dictionary() {
    std::vector<std::string> words = std::vector<std::string>{std::string("HELLO"), std::string("WORLD"), std::string("HOW"), std::string("ARE"), std::string("YOU"), std::string("THE"), std::string("QUICK"), std::string("BROWN"), std::string("FOX"), std::string("JUMPS"), std::string("OVER"), std::string("LAZY"), std::string("DOG")};
    std::map<std::string, bool> dict = {};
    for (std::string w : words) {
        dict[w] = true;
    }
    return dict;
}

double get_english_count(std::string message) {
    std::string upper = to_upper(message);
    std::string cleaned = remove_non_letters(upper);
    std::vector<std::string> possible = split_spaces(cleaned);
    int64_t matches = int64_t(0);
    int64_t total = int64_t(0);
    for (std::string w : possible) {
        if ((w != std::string(""))) {
            total = (total + int64_t(1));
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(ENGLISH_WORDS, w)) {
                matches = (matches + int64_t(1));
            }
        }
    }
    if ((total == int64_t(0))) {
        return 0.0;
    }
    return ((double)((double)(matches)) / ((double)(total)));
}

bool is_english(std::string message, int64_t word_percentage, int64_t letter_percentage) {
    bool words_match = ((get_english_count(message) * 100.0) >= (double)(word_percentage));
    int64_t num_letters = remove_non_letters(message).size();
    double letters_pct = ((message.size() == int64_t(0)) ? 0.0 : (((double)((double)(num_letters)) / ((double)(message.size()))) * 100.0));
    bool letters_match = (letters_pct >= (double)(letter_percentage));
    return (words_match && letters_match);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        ENGLISH_WORDS = load_dictionary();
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << is_english(std::string("Hello World"), int64_t(20), int64_t(85)); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << is_english(std::string("llold HorWd"), int64_t(20), int64_t(85)); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
