// Generated by Mochi transpiler v0.10.66 on 2025-08-14 19:13:20 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct TransformTables;

std::ostream& operator<<(std::ostream&, const TransformTables&);


struct TransformTables {
    std::vector<std::vector<int64_t>> costs;
    std::vector<std::vector<std::string>> ops;
    auto operator<=>(const TransformTables&) const = default;
};

std::ostream& operator<<(std::ostream& os, const TransformTables& v) {
    os << '{' << "'costs': "<< "["; for(size_t i=0;i<v.costs.size();++i){ if(i>0) os << ", "; os << v.costs[i]; } os << "]"
 << ", " << "'ops': "<< "["; for(size_t i=0;i<v.ops.size();++i){ if(i>0) os << ", "; os << v.ops[i]; } os << "]"
 << '}';
    return os;
}

std::vector<std::string> string_to_chars(std::string s);
std::string join_chars(const std::vector<std::string>& chars);
std::vector<std::string> insert_at(const std::vector<std::string>& chars, int64_t index, std::string ch);
std::vector<std::string> remove_at(const std::vector<std::string>& chars, int64_t index);
std::vector<std::vector<int64_t>> make_matrix_int(int64_t rows, int64_t cols, int64_t init);
std::vector<std::vector<std::string>> make_matrix_string(int64_t rows, int64_t cols, std::string init);
TransformTables compute_transform_tables(std::string source_string, std::string destination_string, int64_t copy_cost, int64_t replace_cost, int64_t delete_cost, int64_t insert_cost);
std::vector<std::string> assemble_transformation(const std::vector<std::vector<std::string>>& ops, int64_t i, int64_t j);
int main();

std::vector<std::string> string_to_chars(std::string s) {
    std::vector<std::string> chars = {};
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        chars = ([&]{ auto __tmp = chars; __tmp.push_back(s.substr(i, (i + int64_t(1)) - i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return chars;
}

std::string join_chars(const std::vector<std::string>& chars) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < chars.size())) {
        res = (res + _index(chars, i));
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> insert_at(const std::vector<std::string>& chars, int64_t index, std::string ch) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < index)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(chars, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(ch); return __tmp; }());
    while ((i < chars.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(chars, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> remove_at(const std::vector<std::string>& chars, int64_t index) {
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < chars.size())) {
        if ((i != index)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(_index(chars, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> make_matrix_int(int64_t rows, int64_t cols, int64_t init) {
    std::vector<std::vector<int64_t>> matrix = {};
    for (int64_t _ = int64_t(0); _ < rows; _++ ) {
        std::vector<int64_t> row = {};
        for (int64_t _2 = int64_t(0); _2 < cols; _2++ ) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(init); return __tmp; }());
        }
        matrix = ([&]{ auto __tmp = matrix; __tmp.push_back(row); return __tmp; }());
    }
    return matrix;
}

std::vector<std::vector<std::string>> make_matrix_string(int64_t rows, int64_t cols, std::string init) {
    std::vector<std::vector<std::string>> matrix = {};
    for (int64_t _ = int64_t(0); _ < rows; _++ ) {
        std::vector<std::string> row = {};
        for (int64_t _2 = int64_t(0); _2 < cols; _2++ ) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(init); return __tmp; }());
        }
        matrix = ([&]{ auto __tmp = matrix; __tmp.push_back(row); return __tmp; }());
    }
    return matrix;
}

TransformTables compute_transform_tables(std::string source_string, std::string destination_string, int64_t copy_cost, int64_t replace_cost, int64_t delete_cost, int64_t insert_cost) {
    std::vector<std::string> source_seq = string_to_chars(source_string);
    std::vector<std::string> dest_seq = string_to_chars(destination_string);
    int64_t m = source_seq.size();
    int64_t n = dest_seq.size();
    std::vector<std::vector<int64_t>> costs = make_matrix_int((m + int64_t(1)), (n + int64_t(1)), int64_t(0));
    std::vector<std::vector<std::string>> ops = make_matrix_string((m + int64_t(1)), (n + int64_t(1)), std::string("0"));
    int64_t i = int64_t(1);
    while ((i <= m)) {
        costs[static_cast<size_t>(i)][static_cast<size_t>(int64_t(0))] = (i * delete_cost);
        ops[static_cast<size_t>(i)][static_cast<size_t>(int64_t(0))] = (std::string("D") + _index(source_seq, (i - int64_t(1))));
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(1);
    while ((j <= n)) {
        costs[static_cast<size_t>(int64_t(0))][static_cast<size_t>(j)] = (j * insert_cost);
        ops[static_cast<size_t>(int64_t(0))][static_cast<size_t>(j)] = (std::string("I") + _index(dest_seq, (j - int64_t(1))));
        j = (j + int64_t(1));
    }
    i = int64_t(1);
    while ((i <= m)) {
        j = int64_t(1);
        while ((j <= n)) {
            if ((_index(source_seq, (i - int64_t(1))) == _index(dest_seq, (j - int64_t(1))))) {
                costs[static_cast<size_t>(i)][static_cast<size_t>(j)] = (_index(_index(costs, (i - int64_t(1))), (j - int64_t(1))) + copy_cost);
                ops[static_cast<size_t>(i)][static_cast<size_t>(j)] = (std::string("C") + _index(source_seq, (i - int64_t(1))));
            } else {
                costs[static_cast<size_t>(i)][static_cast<size_t>(j)] = (_index(_index(costs, (i - int64_t(1))), (j - int64_t(1))) + replace_cost);
                ops[static_cast<size_t>(i)][static_cast<size_t>(j)] = ((std::string("R") + _index(source_seq, (i - int64_t(1)))) + _index(dest_seq, (j - int64_t(1))));
            }
            if (((_index(_index(costs, (i - int64_t(1))), j) + delete_cost) < _index(_index(costs, i), j))) {
                costs[static_cast<size_t>(i)][static_cast<size_t>(j)] = (_index(_index(costs, (i - int64_t(1))), j) + delete_cost);
                ops[static_cast<size_t>(i)][static_cast<size_t>(j)] = (std::string("D") + _index(source_seq, (i - int64_t(1))));
            }
            if (((_index(_index(costs, i), (j - int64_t(1))) + insert_cost) < _index(_index(costs, i), j))) {
                costs[static_cast<size_t>(i)][static_cast<size_t>(j)] = (_index(_index(costs, i), (j - int64_t(1))) + insert_cost);
                ops[static_cast<size_t>(i)][static_cast<size_t>(j)] = (std::string("I") + _index(dest_seq, (j - int64_t(1))));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return TransformTables{.costs = costs, .ops = ops};
}

std::vector<std::string> assemble_transformation(const std::vector<std::vector<std::string>>& ops, int64_t i, int64_t j) {
    if (((i == int64_t(0)) && (j == int64_t(0)))) {
        return std::vector<std::string>{};
    }
    std::string op = _index(_index(ops, i), j);
    std::string kind = op.substr(int64_t(0), int64_t(1) - int64_t(0));
    if (((kind == std::string("C")) || (kind == std::string("R")))) {
        std::vector<std::string> seq = assemble_transformation(ops, (i - int64_t(1)), (j - int64_t(1)));
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(op); return __tmp; }());
        return seq;
    } else     if ((kind == std::string("D"))) {
        std::vector<std::string> seq = assemble_transformation(ops, (i - int64_t(1)), j);
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(op); return __tmp; }());
        return seq;
    } else {
        std::vector<std::string> seq = assemble_transformation(ops, i, (j - int64_t(1)));
        seq = ([&]{ auto __tmp = seq; __tmp.push_back(op); return __tmp; }());
        return seq;
    }

}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t copy_cost = -int64_t(1);
        int64_t replace_cost = int64_t(1);
        int64_t delete_cost = int64_t(2);
        int64_t insert_cost = int64_t(2);
        std::string src = std::string("Python");
        std::string dst = std::string("Algorithms");
        TransformTables tables = compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost);
        std::vector<std::vector<std::string>> operations = tables.ops;
        int64_t m = operations.size();
        int64_t n = _index(operations, int64_t(0)).size();
        std::vector<std::string> sequence = assemble_transformation(operations, (m - int64_t(1)), (n - int64_t(1)));
        std::vector<std::string> string_list = string_to_chars(src);
        int64_t idx = int64_t(0);
        int64_t cost = int64_t(0);
        int64_t k = int64_t(0);
        while ((k < sequence.size())) {
            std::cout << join_chars(string_list);
            std::cout << std::endl;
            std::string op = _index(sequence, k);
            std::string kind = op.substr(int64_t(0), int64_t(1) - int64_t(0));
            if ((kind == std::string("C"))) {
                cost = (cost + copy_cost);
            } else             if ((kind == std::string("R"))) {
                string_list[static_cast<size_t>(idx)] = op.substr(int64_t(2), int64_t(3) - int64_t(2));
                cost = (cost + replace_cost);
            } else             if ((kind == std::string("D"))) {
                string_list = remove_at(string_list, idx);
                cost = (cost + delete_cost);
            } else {
                string_list = insert_at(string_list, idx, op.substr(int64_t(1), int64_t(2) - int64_t(1)));
                cost = (cost + insert_cost);
            }


            idx = (idx + int64_t(1));
            k = (k + int64_t(1));
        }
        std::cout << join_chars(string_list);
        std::cout << std::endl;
        std::cout << (std::string("Cost: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << cost; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
