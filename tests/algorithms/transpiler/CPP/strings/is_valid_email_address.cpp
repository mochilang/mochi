// Generated by Mochi transpiler v0.10.63 on 2025-08-11 17:32:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t count_char(std::string s, std::string target);
bool char_in(std::string c, std::string allowed);
bool starts_with_char(std::string s, std::string c);
bool ends_with_char(std::string s, std::string c);
bool contains_double_dot(std::string s);
bool is_valid_email_address(std::string email);
int main();

int64_t MAX_LOCAL_PART_OCTETS = int64_t(64);
int64_t MAX_DOMAIN_OCTETS = int64_t(255);
std::string ASCII_LETTERS = std::string("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
std::string DIGITS = std::string("0123456789");
std::string LOCAL_EXTRA = std::string(".(!#$%&'*+-/=?^_`{|}~)");
std::string DOMAIN_EXTRA = std::string(".-");
std::vector<std::string> email_tests = std::vector<std::string>{std::string("simple@example.com"), std::string("very.common@example.com"), std::string("disposable.style.email.with+symbol@example.com"), std::string("other-email-with-hyphen@and.subdomains.example.com"), std::string("fully-qualified-domain@example.com"), std::string("user.name+tag+sorting@example.com"), std::string("x@example.com"), std::string("example-indeed@strange-example.com"), std::string("test/test@test.com"), std::string("123456789012345678901234567890123456789012345678901234567890123@example.com"), std::string("admin@mailserver1"), std::string("example@s.example"), std::string("Abc.example.com"), std::string("A@b@c@example.com"), std::string("abc@example..com"), std::string("a(c)d,e:f;g<h>i[j\\k]l@example.com"), std::string("12345678901234567890123456789012345678901234567890123456789012345@example.com"), std::string("i.like.underscores@but_its_not_allowed_in_this_part"), std::string("")};
int64_t idx = 0;

int64_t count_char(std::string s, std::string target) {
    int64_t cnt = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        if ((s.substr(i, (i + int64_t(1)) - i) == target)) {
            cnt = (cnt + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return cnt;
}

bool char_in(std::string c, std::string allowed) {
    int64_t i = int64_t(0);
    while ((i < allowed.size())) {
        if ((allowed.substr(i, (i + int64_t(1)) - i) == c)) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

bool starts_with_char(std::string s, std::string c) {
    return ((s.size() > int64_t(0)) && (s.substr(int64_t(0), int64_t(1) - int64_t(0)) == c));
}

bool ends_with_char(std::string s, std::string c) {
    return ((s.size() > int64_t(0)) && (s.substr((s.size() - int64_t(1)), s.size() - (s.size() - int64_t(1))) == c));
}

bool contains_double_dot(std::string s) {
    if ((s.size() < int64_t(2))) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i < (s.size() - int64_t(1)))) {
        if ((s.substr(i, (i + int64_t(2)) - i) == std::string(".."))) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

bool is_valid_email_address(std::string email) {
    if ((count_char(email, std::string("@")) != int64_t(1))) {
        return false;
    }
    int64_t at_idx = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < email.size())) {
        if ((email.substr(i, (i + int64_t(1)) - i) == std::string("@"))) {
            at_idx = i;
            break;
        }
        i = (i + int64_t(1));
    }
    std::string local_part = email.substr(int64_t(0), at_idx - int64_t(0));
    std::string domain = email.substr((at_idx + int64_t(1)), email.size() - (at_idx + int64_t(1)));
    if (((local_part.size() > MAX_LOCAL_PART_OCTETS) || (domain.size() > MAX_DOMAIN_OCTETS))) {
        return false;
    }
    i = int64_t(0);
    while ((i < local_part.size())) {
        std::string ch = local_part.substr(i, (i + int64_t(1)) - i);
        if (!char_in(ch, ((ASCII_LETTERS + DIGITS) + LOCAL_EXTRA))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    if (((starts_with_char(local_part, std::string(".")) || ends_with_char(local_part, std::string("."))) || contains_double_dot(local_part))) {
        return false;
    }
    i = int64_t(0);
    while ((i < domain.size())) {
        std::string ch = domain.substr(i, (i + int64_t(1)) - i);
        if (!char_in(ch, ((ASCII_LETTERS + DIGITS) + DOMAIN_EXTRA))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    if ((starts_with_char(domain, std::string("-")) || ends_with_char(domain, std::string(".")))) {
        return false;
    }
    if (((starts_with_char(domain, std::string(".")) || ends_with_char(domain, std::string("."))) || contains_double_dot(domain))) {
        return false;
    }
    return true;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        idx = int64_t(0);
        while ((idx < email_tests.size())) {
            std::string email = _index(email_tests, idx);
            std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << is_valid_email_address(email); return ss.str(); }());
            std::cout << std::endl;
            idx = (idx + int64_t(1));
        }
    }
    return 0;
}
