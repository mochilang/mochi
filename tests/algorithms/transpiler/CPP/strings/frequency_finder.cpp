// Generated by Mochi transpiler v0.10.63 on 2025-08-11 16:59:10 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t etaoin_index(std::string letter);
std::map<std::string, int64_t> get_letter_count(std::string message);
std::string get_frequency_order(std::string message);
int64_t english_freq_match_score(std::string message);
int main();

std::string ETAOIN = std::string("ETAOINSHRDLCUMWFGYPBVKJXQZ");
std::string LETTERS = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

int64_t etaoin_index(std::string letter) {
    int64_t i = int64_t(0);
    while ((i < ETAOIN.size())) {
        if ((ETAOIN.substr(i, (i + int64_t(1)) - i) == letter)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return ETAOIN.size();
}

std::map<std::string, int64_t> get_letter_count(std::string message) {
    std::map<std::string, int64_t> letter_count = {};
    int64_t i = int64_t(0);
    while ((i < LETTERS.size())) {
        std::string c = LETTERS.substr(i, (i + int64_t(1)) - i);
        letter_count[c] = int64_t(0);
        i = (i + int64_t(1));
    }
    std::string msg = ([&]{ std::string __s = message; for(auto &__c : __s){ __c = std::toupper(static_cast<unsigned char>(__c)); } return __s; }());
    int64_t j = int64_t(0);
    while ((j < msg.size())) {
        std::string ch = msg.substr(j, (j + int64_t(1)) - j);
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(LETTERS, ch)) {
            letter_count[ch] = (([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(letter_count) + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    return letter_count;
}

std::string get_frequency_order(std::string message) {
    std::map<std::string, int64_t> letter_to_freq = get_letter_count(message);
    int64_t max_freq = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < LETTERS.size())) {
        std::string letter = LETTERS.substr(i, (i + int64_t(1)) - i);
        int64_t f = ([&](const auto& __m){ auto __it = __m.find(letter); if (__it == __m.end()) return int64_t{}; return __it->second; })(letter_to_freq);
        if ((f > max_freq)) {
            max_freq = f;
        }
        i = (i + int64_t(1));
    }
    std::string result = std::string("");
    int64_t freq = max_freq;
    while ((freq >= int64_t(0))) {
        std::vector<std::string> group = {};
        int64_t j = int64_t(0);
        while ((j < LETTERS.size())) {
            std::string letter = LETTERS.substr(j, (j + int64_t(1)) - j);
            if ((([&](const auto& __m){ auto __it = __m.find(letter); if (__it == __m.end()) return int64_t{}; return __it->second; })(letter_to_freq) == freq)) {
                group = ([&]{ auto __tmp = group; __tmp.push_back(letter); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        int64_t g_len = group.size();
        int64_t a = int64_t(0);
        while ((a < g_len)) {
            int64_t b = int64_t(0);
            while ((b < ((g_len - a) - int64_t(1)))) {
                std::string g1 = _index(group, b);
                std::string g2 = _index(group, (b + int64_t(1)));
                int64_t idx1 = etaoin_index(g1);
                int64_t idx2 = etaoin_index(g2);
                if ((idx1 < idx2)) {
                    std::string tmp = _index(group, b);
                    group[b] = _index(group, (b + int64_t(1)));
                    group[(b + int64_t(1))] = tmp;
                }
                b = (b + int64_t(1));
            }
            a = (a + int64_t(1));
        }
        int64_t g = int64_t(0);
        while ((g < group.size())) {
            result = (result + _index(group, g));
            g = (g + int64_t(1));
        }
        freq = (freq - int64_t(1));
    }
    return result;
}

int64_t english_freq_match_score(std::string message) {
    std::string freq_order = get_frequency_order(message);
    std::string top = freq_order.substr(int64_t(0), int64_t(6) - int64_t(0));
    std::string bottom = freq_order.substr((freq_order.size() - int64_t(6)), freq_order.size() - (freq_order.size() - int64_t(6)));
    int64_t score = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < int64_t(6))) {
        std::string c = ETAOIN.substr(i, (i + int64_t(1)) - i);
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(top, c)) {
            score = (score + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    int64_t j = (ETAOIN.size() - int64_t(6));
    while ((j < ETAOIN.size())) {
        std::string c = ETAOIN.substr(j, (j + int64_t(1)) - j);
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(bottom, c)) {
            score = (score + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    return score;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << get_frequency_order(std::string("Hello World"));
        std::cout << std::endl;
        std::cout << english_freq_match_score(std::string("Hello World"));
        std::cout << std::endl;
    }
    return 0;
}
