// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:42:50 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t round_int(double x);
std::vector<std::vector<double>> zeros(int64_t rows, int64_t cols);
std::vector<std::vector<double>> warp(const std::vector<std::vector<double>>& image, const std::vector<std::vector<double>>& h_flow, const std::vector<std::vector<double>>& v_flow);
std::vector<std::vector<double>> convolve(const std::vector<std::vector<double>>& img, const std::vector<std::vector<double>>& ker);
std::vector<std::vector<std::vector<double>>> horn_schunck(const std::vector<std::vector<double>>& image0, const std::vector<std::vector<double>>& image1, int64_t num_iter, double alpha);
void print_matrix(const std::vector<std::vector<double>>& mat);
int main();

int64_t round_int(double x) {
    if ((x >= 0.0)) {
        return (int64_t)((x + 0.5));
    }
    return (int64_t)((x - 0.5));
}

std::vector<std::vector<double>> zeros(int64_t rows, int64_t cols) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> warp(const std::vector<std::vector<double>>& image, const std::vector<std::vector<double>>& h_flow, const std::vector<std::vector<double>>& v_flow) {
    int h = image.size();
    int w = image[int64_t(0)].size();
    std::vector<std::vector<double>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<double> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            int64_t sx = (x - round_int(h_flow[y][x]));
            int64_t sy = (y - round_int(v_flow[y][x]));
            if (((((sx >= int64_t(0)) && (sx < w)) && (sy >= int64_t(0))) && (sy < h))) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(image[sy][sx]); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            }
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> convolve(const std::vector<std::vector<double>>& img, const std::vector<std::vector<double>>& ker) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    int kh = ker.size();
    int kw = ker[int64_t(0)].size();
    int py = (kh / int64_t(2));
    int px = (kw / int64_t(2));
    std::vector<std::vector<double>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<double> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            double s = 0.0;
            int64_t ky = int64_t(0);
            while ((ky < kh)) {
                int64_t kx = int64_t(0);
                while ((kx < kw)) {
                    int64_t iy = ((y + ky) - py);
                    int64_t ix = ((x + kx) - px);
                    if (((((iy >= int64_t(0)) && (iy < h)) && (ix >= int64_t(0))) && (ix < w))) {
                        s = (s + (img[iy][ix] * ker[ky][kx]));
                    }
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(s); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<std::vector<double>>> horn_schunck(const std::vector<std::vector<double>>& image0, const std::vector<std::vector<double>>& image1, int64_t num_iter, double alpha) {
    int h = image0.size();
    int w = image0[int64_t(0)].size();
    std::vector<std::vector<double>> u = zeros((int64_t)(h), (int64_t)(w));
    std::vector<std::vector<double>> v = zeros((int64_t)(h), (int64_t)(w));
    std::vector<std::vector<double>> kernel_x = std::vector<std::vector<double>>{std::vector<double>{-0.25, 0.25}, std::vector<double>{-0.25, 0.25}};
    std::vector<std::vector<double>> kernel_y = std::vector<std::vector<double>>{std::vector<double>{-0.25, -0.25}, std::vector<double>{0.25, 0.25}};
    std::vector<std::vector<double>> kernel_t = std::vector<std::vector<double>>{std::vector<double>{0.25, 0.25}, std::vector<double>{0.25, 0.25}};
    std::vector<std::vector<double>> laplacian = std::vector<std::vector<double>>{std::vector<double>{0.0833333333333, 0.166666666667, 0.0833333333333}, std::vector<double>{0.166666666667, 0.0, 0.166666666667}, std::vector<double>{0.0833333333333, 0.166666666667, 0.0833333333333}};
    int64_t it = int64_t(0);
    while ((it < num_iter)) {
        std::vector<std::vector<double>> warped = warp(image0, u, v);
        std::vector<std::vector<double>> dx1 = convolve(warped, kernel_x);
        std::vector<std::vector<double>> dx2 = convolve(image1, kernel_x);
        std::vector<std::vector<double>> dy1 = convolve(warped, kernel_y);
        std::vector<std::vector<double>> dy2 = convolve(image1, kernel_y);
        std::vector<std::vector<double>> dt1 = convolve(warped, kernel_t);
        std::vector<std::vector<double>> dt2 = convolve(image1, kernel_t);
        std::vector<std::vector<double>> avg_u = convolve(u, laplacian);
        std::vector<std::vector<double>> avg_v = convolve(v, laplacian);
        int64_t y = int64_t(0);
        while ((y < h)) {
            int64_t x = int64_t(0);
            while ((x < w)) {
                double dx = (dx1[y][x] + dx2[y][x]);
                double dy = (dy1[y][x] + dy2[y][x]);
                double dt = (dt1[y][x] - dt2[y][x]);
                double au = avg_u[y][x];
                double av = avg_v[y][x];
                double numer = (((dx * au) + (dy * av)) + dt);
                double denom = (((alpha * alpha) + (dx * dx)) + (dy * dy));
                double upd = ((double)(numer) / (denom));
                u[y][x] = (au - (dx * upd));
                v[y][x] = (av - (dy * upd));
                x = (x + int64_t(1));
            }
            y = (y + int64_t(1));
        }
        it = (it + int64_t(1));
    }
    return std::vector<std::vector<std::vector<double>>>{u, v};
}

void print_matrix(const std::vector<std::vector<double>>& mat) {
    int64_t y = int64_t(0);
    while ((y < mat.size())) {
        std::vector<double> row = mat[y];
        int64_t x = int64_t(0);
        std::string line = std::string("");
        while ((x < row.size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << round_int(row[x]); return ss.str(); }()));
            if (((x + int64_t(1)) < row.size())) {
                line = (line + std::string(" "));
            }
            x = (x + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        y = (y + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<double>> image0 = std::vector<std::vector<double>>{std::vector<double>{0.0, 0.0, 2.0}, std::vector<double>{0.0, 0.0, 2.0}};
        std::vector<std::vector<double>> image1 = std::vector<std::vector<double>>{std::vector<double>{0.0, 2.0, 0.0}, std::vector<double>{0.0, 2.0, 0.0}};
        std::vector<std::vector<std::vector<double>>> flows = horn_schunck(image0, image1, int64_t(20), 0.1);
        std::vector<std::vector<double>> u = flows[int64_t(0)];
        std::vector<std::vector<double>> v = flows[int64_t(1)];
        print_matrix(u);
        std::cout << std::string("---");
        std::cout << std::endl;
        print_matrix(v);
    }
    return 0;
}
