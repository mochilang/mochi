// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:43:06 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct MosaicResult;

std::ostream& operator<<(std::ostream&, const MosaicResult&);


struct MosaicResult {
    std::vector<std::vector<int64_t>> img;
    std::vector<std::vector<double>> annos;
    std::string path;
    auto operator<=>(const MosaicResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const MosaicResult& v) {
    os << '{' << "'img': "<< "["; for(size_t i=0;i<v.img.size();++i){ if(i>0) os << ", "; os << v.img[i]; } os << "]"
 << ", " << "'annos': "<< "["; for(size_t i=0;i<v.annos.size();++i){ if(i>0) os << ", "; os << v.annos[i]; } os << "]"
 << ", " << "'path': "<< "'" << v.path << "'"
 << '}';
    return os;
}

MosaicResult update_image_and_anno(const std::vector<std::string>& all_img_list, const std::vector<std::vector<std::vector<double>>>& all_annos, const std::vector<int64_t>& idxs, const std::vector<int64_t>& output_size, const std::vector<double>& scale_range, double filter_scale);
int main();

MosaicResult update_image_and_anno(const std::vector<std::string>& all_img_list, const std::vector<std::vector<std::vector<double>>>& all_annos, const std::vector<int64_t>& idxs, const std::vector<int64_t>& output_size, const std::vector<double>& scale_range, double filter_scale) {
    int64_t height = output_size[int64_t(0)];
    int64_t width = output_size[int64_t(1)];
    std::vector<std::vector<int64_t>> output_img = std::vector<std::vector<int64_t>>{};
    int64_t r = int64_t(0);
    while ((r < height)) {
        std::vector<int64_t> row = std::vector<int64_t>{};
        int64_t c = int64_t(0);
        while ((c < width)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            c = (c + int64_t(1));
        }
        output_img = ([&]{ auto __tmp = output_img; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    double scale_x = ((double)((scale_range[int64_t(0)] + scale_range[int64_t(1)])) / (2.0));
    double scale_y = ((double)((scale_range[int64_t(0)] + scale_range[int64_t(1)])) / (2.0));
    int64_t divid_point_x = (int64_t)((scale_x * (double)(width)));
    int64_t divid_point_y = (int64_t)((scale_y * (double)(height)));
    std::vector<std::vector<double>> new_anno = std::vector<std::vector<double>>{};
    std::vector<std::string> path_list = std::vector<std::string>{};
    int64_t i = int64_t(0);
    while ((i < idxs.size())) {
        int64_t index = idxs[i];
        std::string path = all_img_list[index];
        path_list = ([&]{ auto __tmp = path_list; __tmp.push_back(path); return __tmp; }());
        std::vector<std::vector<double>> img_annos = all_annos[index];
        if ((i == int64_t(0))) {
            int64_t y0 = int64_t(0);
            while ((y0 < divid_point_y)) {
                int64_t x0 = int64_t(0);
                while ((x0 < divid_point_x)) {
                    output_img[y0][x0] = (i + int64_t(1));
                    x0 = (x0 + int64_t(1));
                }
                y0 = (y0 + int64_t(1));
            }
            int64_t j0 = int64_t(0);
            while ((j0 < img_annos.size())) {
                std::vector<double> bbox = img_annos[j0];
                double xmin = (bbox[int64_t(1)] * scale_x);
                double ymin = (bbox[int64_t(2)] * scale_y);
                double xmax = (bbox[int64_t(3)] * scale_x);
                double ymax = (bbox[int64_t(4)] * scale_y);
                new_anno = ([&]{ auto __tmp = new_anno; __tmp.push_back(std::vector<double>{bbox[int64_t(0)], xmin, ymin, xmax, ymax}); return __tmp; }());
                j0 = (j0 + int64_t(1));
            }
        } else         if ((i == int64_t(1))) {
            int64_t y1 = int64_t(0);
            while ((y1 < divid_point_y)) {
                int64_t x1 = divid_point_x;
                while ((x1 < width)) {
                    output_img[y1][x1] = (i + int64_t(1));
                    x1 = (x1 + int64_t(1));
                }
                y1 = (y1 + int64_t(1));
            }
            int64_t j1 = int64_t(0);
            while ((j1 < img_annos.size())) {
                std::vector<double> bbox1 = img_annos[j1];
                double xmin1 = (scale_x + (bbox1[int64_t(1)] * (1.0 - scale_x)));
                double ymin1 = (bbox1[int64_t(2)] * scale_y);
                double xmax1 = (scale_x + (bbox1[int64_t(3)] * (1.0 - scale_x)));
                double ymax1 = (bbox1[int64_t(4)] * scale_y);
                new_anno = ([&]{ auto __tmp = new_anno; __tmp.push_back(std::vector<double>{bbox1[int64_t(0)], xmin1, ymin1, xmax1, ymax1}); return __tmp; }());
                j1 = (j1 + int64_t(1));
            }
        } else         if ((i == int64_t(2))) {
            int64_t y2 = divid_point_y;
            while ((y2 < height)) {
                int64_t x2 = int64_t(0);
                while ((x2 < divid_point_x)) {
                    output_img[y2][x2] = (i + int64_t(1));
                    x2 = (x2 + int64_t(1));
                }
                y2 = (y2 + int64_t(1));
            }
            int64_t j2 = int64_t(0);
            while ((j2 < img_annos.size())) {
                std::vector<double> bbox2 = img_annos[j2];
                double xmin2 = (bbox2[int64_t(1)] * scale_x);
                double ymin2 = (scale_y + (bbox2[int64_t(2)] * (1.0 - scale_y)));
                double xmax2 = (bbox2[int64_t(3)] * scale_x);
                double ymax2 = (scale_y + (bbox2[int64_t(4)] * (1.0 - scale_y)));
                new_anno = ([&]{ auto __tmp = new_anno; __tmp.push_back(std::vector<double>{bbox2[int64_t(0)], xmin2, ymin2, xmax2, ymax2}); return __tmp; }());
                j2 = (j2 + int64_t(1));
            }
        } else {
            int64_t y3 = divid_point_y;
            while ((y3 < height)) {
                int64_t x3 = divid_point_x;
                while ((x3 < width)) {
                    output_img[y3][x3] = (i + int64_t(1));
                    x3 = (x3 + int64_t(1));
                }
                y3 = (y3 + int64_t(1));
            }
            int64_t j3 = int64_t(0);
            while ((j3 < img_annos.size())) {
                std::vector<double> bbox3 = img_annos[j3];
                double xmin3 = (scale_x + (bbox3[int64_t(1)] * (1.0 - scale_x)));
                double ymin3 = (scale_y + (bbox3[int64_t(2)] * (1.0 - scale_y)));
                double xmax3 = (scale_x + (bbox3[int64_t(3)] * (1.0 - scale_x)));
                double ymax3 = (scale_y + (bbox3[int64_t(4)] * (1.0 - scale_y)));
                new_anno = ([&]{ auto __tmp = new_anno; __tmp.push_back(std::vector<double>{bbox3[int64_t(0)], xmin3, ymin3, xmax3, ymax3}); return __tmp; }());
                j3 = (j3 + int64_t(1));
            }
        }


        i = (i + int64_t(1));
    }
    if ((filter_scale > 0.0)) {
        std::vector<std::vector<double>> filtered = std::vector<std::vector<double>>{};
        int64_t k = int64_t(0);
        while ((k < new_anno.size())) {
            std::vector<double> anno = new_anno[k];
            double w = (anno[int64_t(3)] - anno[int64_t(1)]);
            double h = (anno[int64_t(4)] - anno[int64_t(2)]);
            if (((filter_scale < w) && (filter_scale < h))) {
                filtered = ([&]{ auto __tmp = filtered; __tmp.push_back(anno); return __tmp; }());
            }
            k = (k + int64_t(1));
        }
        new_anno = filtered;
    }
    return MosaicResult{.img = output_img, .annos = new_anno, .path = path_list[int64_t(0)]};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::string> all_img_list = std::vector<std::string>{std::string("img0.jpg"), std::string("img1.jpg"), std::string("img2.jpg"), std::string("img3.jpg")};
        std::vector<std::vector<std::vector<double>>> all_annos = std::vector<std::vector<std::vector<double>>>{std::vector<std::vector<double>>{std::vector<double>{0.0, 0.1, 0.1, 0.4, 0.4}}, std::vector<std::vector<double>>{std::vector<double>{1.0, 0.2, 0.3, 0.5, 0.7}}, std::vector<std::vector<double>>{std::vector<double>{2.0, 0.6, 0.2, 0.9, 0.5}}, std::vector<std::vector<double>>{std::vector<double>{3.0, 0.5, 0.5, 0.8, 0.8}}};
        std::vector<int64_t> idxs = std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2), int64_t(3)};
        std::vector<int64_t> output_size = std::vector<int64_t>{int64_t(100), int64_t(100)};
        std::vector<double> scale_range = std::vector<double>{0.4, 0.6};
        double filter_scale = 0.05;
        MosaicResult res = update_image_and_anno(all_img_list, all_annos, idxs, output_size, scale_range, filter_scale);
        std::vector<std::vector<double>> new_annos = res.annos;
        std::string path = res.path;
        std::cout << (std::string("Base image: ") + path);
        std::cout << std::endl;
        std::cout << (std::string("Mosaic annotation count: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << new_annos.size(); return ss.str(); }()));
        std::cout << std::endl;
        int64_t i = int64_t(0);
        while ((i < new_annos.size())) {
            std::vector<double> a = new_annos[i];
            std::cout << ((((((((([&]{ std::ostringstream ss; ss << std::boolalpha << a[int64_t(0)]; return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << a[int64_t(1)]; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << a[int64_t(2)]; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << a[int64_t(3)]; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << a[int64_t(4)]; return ss.str(); }()));
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
