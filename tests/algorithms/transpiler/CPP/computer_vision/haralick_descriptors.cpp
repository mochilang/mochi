// Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:42:35 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t abs_int(int64_t n);
double sqrt(double x);
double ln(double x);
std::vector<std::vector<double>> matrix_concurrency(const std::vector<std::vector<int64_t>>& image, const std::vector<int64_t>& coord);
std::vector<double> haralick_descriptors(const std::vector<std::vector<double>>& matrix);
int main();

std::vector<std::vector<int64_t>> image = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(0), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}};
std::vector<std::vector<double>> glcm = matrix_concurrency(image, std::vector<int64_t>{int64_t(0), int64_t(1)});
std::vector<double> descriptors = haralick_descriptors(glcm);
int64_t idx = int64_t(0);

int64_t abs_int(int64_t n) {
    if ((n < int64_t(0))) {
        return -n;
    }
    return n;
}

double sqrt(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double ln(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double e = 2.718281828;
    int64_t n = int64_t(0);
    double y = x;
    while ((y >= e)) {
        y = ((double)(y) / (e));
        n = (n + int64_t(1));
    }
    while ((y <= ((double)(1.0) / (e)))) {
        y = (y * e);
        n = (n - int64_t(1));
    }
    y = (y - 1.0);
    double term = y;
    double result = 0.0;
    int64_t k = int64_t(1);
    while ((k <= int64_t(20))) {
        if (((k % int64_t(2)) == int64_t(1))) {
            result = (result + ((double)(term) / ((1.0 * k))));
        } else {
            result = (result - ((double)(term) / ((1.0 * k))));
        }
        term = (term * y);
        k = (k + int64_t(1));
    }
    return (result + (1.0 * n));
}

std::vector<std::vector<double>> matrix_concurrency(const std::vector<std::vector<int64_t>>& image, const std::vector<int64_t>& coord) {
    int64_t offset_x = coord[int64_t(0)];
    int64_t offset_y = coord[int64_t(1)];
    int64_t max_val = int64_t(0);
    for (int r = int64_t(0); r < image.size(); r++ ) {
        for (int c = int64_t(0); c < image[r].size(); c++ ) {
            if ((image[r][c] > max_val)) {
                max_val = image[r][c];
            }
        }
    }
    int64_t size = (max_val + int64_t(1));
    std::vector<std::vector<double>> matrix = {};
    for (int i = int64_t(0); i < size; i++ ) {
        std::vector<double> row = {};
        for (int j = int64_t(0); j < size; j++ ) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
        }
        matrix = ([&]{ auto __tmp = matrix; __tmp.push_back(row); return __tmp; }());
    }
    for (int x = int64_t(1); x < (image.size() - int64_t(1)); x++ ) {
        for (int y = int64_t(1); y < (image[x].size() - int64_t(1)); y++ ) {
            int64_t base = image[x][y];
            int64_t offset = image[(x + offset_x)][(y + offset_y)];
            matrix[base][offset] = (matrix[base][offset] + 1.0);
        }
    }
    double total = 0.0;
    for (int i = int64_t(0); i < size; i++ ) {
        for (int j = int64_t(0); j < size; j++ ) {
            total = (total + matrix[i][j]);
        }
    }
    if ((total == 0.0)) {
        return matrix;
    }
    for (int i = int64_t(0); i < size; i++ ) {
        for (int j = int64_t(0); j < size; j++ ) {
            matrix[i][j] = ((double)(matrix[i][j]) / (total));
        }
    }
    return matrix;
}

std::vector<double> haralick_descriptors(const std::vector<std::vector<double>>& matrix) {
    int rows = matrix.size();
    int cols = matrix[int64_t(0)].size();
    double maximum_prob = 0.0;
    double correlation = 0.0;
    double energy = 0.0;
    double contrast = 0.0;
    double dissimilarity = 0.0;
    double inverse_difference = 0.0;
    double homogeneity = 0.0;
    double entropy = 0.0;
    int64_t i = int64_t(0);
    while ((i < rows)) {
        int64_t j = int64_t(0);
        while ((j < cols)) {
            double val = matrix[i][j];
            if ((val > maximum_prob)) {
                maximum_prob = val;
            }
            correlation = (correlation + (((1.0 * i) * j) * val));
            energy = (energy + (val * val));
            int64_t diff = (i - j);
            int64_t adiff = abs_int(diff);
            contrast = (contrast + (val * ((1.0 * diff) * diff)));
            dissimilarity = (dissimilarity + (val * (1.0 * adiff)));
            inverse_difference = (inverse_difference + ((double)(val) / ((1.0 + (1.0 * adiff)))));
            homogeneity = (homogeneity + ((double)(val) / ((1.0 + ((1.0 * diff) * diff)))));
            if ((val > 0.0)) {
                entropy = (entropy - (val * ln(val)));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return std::vector<double>{maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((idx < descriptors.size())) {
            std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << descriptors[idx]; return ss.str(); }());
            std::cout << std::endl;
            idx = (idx + int64_t(1));
        }
    }
    return 0;
}
