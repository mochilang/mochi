// Generated by Mochi transpiler v0.10.64 on 2025-08-12 12:36:54 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double abs_float(double x);
bool isclose(double a, double b, double tolerance);
double focal_length(double distance_of_object, double distance_of_image);
double object_distance(double focal_length, double distance_of_image);
double image_distance(double focal_length, double distance_of_object);
void test_focal_length();
void test_object_distance();
void test_image_distance();
int main();

double abs_float(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

bool isclose(double a, double b, double tolerance) {
    return (abs_float((a - b)) < tolerance);
}

double focal_length(double distance_of_object, double distance_of_image) {
    if (((distance_of_object == 0.0) || (distance_of_image == 0.0))) {
        throw std::runtime_error(std::string("Invalid inputs. Enter non zero values with respect to the sign convention."));
    }
    return ((double)(1.0) / ((((double)(1.0) / (distance_of_object)) + ((double)(1.0) / (distance_of_image)))));
}

double object_distance(double focal_length, double distance_of_image) {
    if (((distance_of_image == 0.0) || (focal_length == 0.0))) {
        throw std::runtime_error(std::string("Invalid inputs. Enter non zero values with respect to the sign convention."));
    }
    return ((double)(1.0) / ((((double)(1.0) / (focal_length)) - ((double)(1.0) / (distance_of_image)))));
}

double image_distance(double focal_length, double distance_of_object) {
    if (((distance_of_object == 0.0) || (focal_length == 0.0))) {
        throw std::runtime_error(std::string("Invalid inputs. Enter non zero values with respect to the sign convention."));
    }
    return ((double)(1.0) / ((((double)(1.0) / (focal_length)) - ((double)(1.0) / (distance_of_object)))));
}

void test_focal_length() {
    double f1 = focal_length(10.0, 20.0);
    if (!isclose(f1, 6.66666666666666, 1e-08)) {
        throw std::runtime_error(std::string("focal_length test1 failed"));
    }
    double f2 = focal_length(9.5, 6.7);
    if (!isclose(f2, 3.929012346, 1e-08)) {
        throw std::runtime_error(std::string("focal_length test2 failed"));
    }
}

void test_object_distance() {
    double u1 = object_distance(30.0, 20.0);
    if (!isclose(u1, -60.0, 1e-08)) {
        throw std::runtime_error(std::string("object_distance test1 failed"));
    }
    double u2 = object_distance(10.5, 11.7);
    if (!isclose(u2, 102.375, 1e-08)) {
        throw std::runtime_error(std::string("object_distance test2 failed"));
    }
}

void test_image_distance() {
    double v1 = image_distance(10.0, 40.0);
    if (!isclose(v1, 13.33333333, 1e-08)) {
        throw std::runtime_error(std::string("image_distance test1 failed"));
    }
    double v2 = image_distance(1.5, 6.7);
    if (!isclose(v2, 1.932692308, 1e-08)) {
        throw std::runtime_error(std::string("image_distance test2 failed"));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_focal_length();
        test_object_distance();
        test_image_distance();
        std::cout << _to_string(focal_length(10.0, 20.0));
        std::cout << std::endl;
        std::cout << _to_string(object_distance(30.0, 20.0));
        std::cout << std::endl;
        std::cout << _to_string(image_distance(10.0, 40.0));
        std::cout << std::endl;
    }
    return 0;
}
