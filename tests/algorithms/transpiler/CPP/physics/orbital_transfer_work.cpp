// Generated by Mochi transpiler v0.10.69 on 2025-08-22 14:24:50 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double pow10(int64_t n);
double _floor(double x);
std::string format_scientific_3(double x);
std::string orbital_transfer_work(double mass_central, double mass_object, double r_initial, double r_final);
void test_orbital_transfer_work();
int main();

double pow10(int64_t n) {
    double p = 1.0;
    if ((n >= int64_t(0))) {
        int64_t i = int64_t(0);
        while ((i < n)) {
            p = (p * 10.0);
            i = (i + int64_t(1));
        }
    } else {
        int64_t i = int64_t(0);
        while ((i > n)) {
            p = ((double)(p) / (10.0));
            i = (i - int64_t(1));
        }
    }
    return p;
}

double _floor(double x) {
    int64_t i = (int64_t)(x);
    double f = (double)(i);
    if ((f > x)) {
        return (double)((i - int64_t(1)));
    }
    return f;
}

std::string format_scientific_3(double x) {
    if ((x == 0.0)) {
        return std::string("0.000e+00");
    }
    std::string sign = std::string("");
    double num = x;
    if ((num < 0.0)) {
        sign = std::string("-");
        num = -num;
    }
    int64_t exp = int64_t(0);
    while ((num >= 10.0)) {
        num = ((double)(num) / (10.0));
        exp = (exp + int64_t(1));
    }
    while ((num < 1.0)) {
        num = (num * 10.0);
        exp = (exp - int64_t(1));
    }
    double temp = std::floor(((num * 1000.0) + 0.5));
    int64_t scaled = (int64_t)(temp);
    if ((scaled == int64_t(10000))) {
        scaled = int64_t(1000);
        exp = (exp + int64_t(1));
    }
    int64_t int_part = (scaled / int64_t(1000));
    int64_t frac_part = (scaled % int64_t(1000));
    std::string frac_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << frac_part; return ss.str(); }());
    while ((frac_str.size() < int64_t(3))) {
        frac_str = (std::string("0") + frac_str);
    }
    std::string mantissa = ((([&]{ std::ostringstream ss; ss << std::boolalpha << int_part; return ss.str(); }()) + std::string(".")) + frac_str);
    std::string exp_sign = std::string("+");
    int64_t exp_abs = exp;
    if ((exp < int64_t(0))) {
        exp_sign = std::string("-");
        exp_abs = -exp;
    }
    std::string exp_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << exp_abs; return ss.str(); }());
    if ((exp_abs < int64_t(10))) {
        exp_str = (std::string("0") + exp_str);
    }
    return ((((sign + mantissa) + std::string("e")) + exp_sign) + exp_str);
}

std::string orbital_transfer_work(double mass_central, double mass_object, double r_initial, double r_final) {
    double G = (6.6743 * pow10(-int64_t(11)));
    if (((r_initial <= 0.0) || (r_final <= 0.0))) {
        throw std::runtime_error(std::string("Orbital radii must be greater than zero."));
    }
    double work = (((double)(((G * mass_central) * mass_object)) / (2.0)) * (((double)(1.0) / (r_initial)) - ((double)(1.0) / (r_final))));
    return format_scientific_3(work);
}

void test_orbital_transfer_work() {
    if ((orbital_transfer_work((5.972 * pow10(int64_t(24))), 1000.0, (6.371 * pow10(int64_t(6))), (7.0 * pow10(int64_t(6)))) != std::string("2.811e+09"))) {
        throw std::runtime_error(std::string("case1 failed"));
    }
    if ((orbital_transfer_work((5.972 * pow10(int64_t(24))), 500.0, (7.0 * pow10(int64_t(6))), (6.371 * pow10(int64_t(6)))) != std::string("-1.405e+09"))) {
        throw std::runtime_error(std::string("case2 failed"));
    }
    if ((orbital_transfer_work((1.989 * pow10(int64_t(30))), 1000.0, (1.5 * pow10(int64_t(11))), (2.28 * pow10(int64_t(11)))) != std::string("1.514e+11"))) {
        throw std::runtime_error(std::string("case3 failed"));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        test_orbital_transfer_work();
        std::cout << orbital_transfer_work((5.972 * pow10(int64_t(24))), 1000.0, (6.371 * pow10(int64_t(6))), (7.0 * pow10(int64_t(6))));
        std::cout << std::endl;
    }
    return 0;
}
