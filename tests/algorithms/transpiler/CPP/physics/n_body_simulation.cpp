// Generated by Mochi transpiler v0.10.64 on 2025-08-12 10:14:19 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <any>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
static void any_to_json(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << '"' << std::any_cast<std::string>(val) << '"';
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << '"' << v[i] << '"'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_json(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) {
        const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val);
        os << '{'; bool first=true;
        for(const auto& p : m){ if(!first) os << ', '; first=false; os << '"' << p.first << '"' << ": "; any_to_json(os, p.second); }
        os << '}'; }
    else os << "null";
}
template<typename T> static void _json(const T& v) { any_to_json(std::cout, std::any(v)); std::cout << std::endl; }
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Body;
struct BodySystem;

std::ostream& operator<<(std::ostream&, const Body&);
std::ostream& operator<<(std::ostream&, const BodySystem&);


struct Body {
    double position_x;
    double position_y;
    double velocity_x;
    double velocity_y;
    double mass;
    auto operator<=>(const Body&) const = default;
};

struct BodySystem {
    std::vector<Body> bodies;
    double gravitation_constant;
    double time_factor;
    double softening_factor;
    auto operator<=>(const BodySystem&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Body& v) {
    os << '{' << "'position_x': "<< std::fixed << std::setprecision(1) << v.position_x
 << ", " << "'position_y': "<< std::fixed << std::setprecision(1) << v.position_y
 << ", " << "'velocity_x': "<< std::fixed << std::setprecision(1) << v.velocity_x
 << ", " << "'velocity_y': "<< std::fixed << std::setprecision(1) << v.velocity_y
 << ", " << "'mass': "<< std::fixed << std::setprecision(1) << v.mass
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BodySystem& v) {
    os << '{' << "'bodies': "<< "["; for(size_t i=0;i<v.bodies.size();++i){ if(i>0) os << ", "; os << v.bodies[i]; } os << "]"
 << ", " << "'gravitation_constant': "<< std::fixed << std::setprecision(1) << v.gravitation_constant
 << ", " << "'time_factor': "<< std::fixed << std::setprecision(1) << v.time_factor
 << ", " << "'softening_factor': "<< std::fixed << std::setprecision(1) << v.softening_factor
 << '}';
    return os;
}

Body make_body(double px, double py, double vx, double vy, double mass);
Body update_velocity(Body& body, double force_x, double force_y, double delta_time);
Body update_position(Body& body, double delta_time);
BodySystem make_body_system(const std::vector<Body>& bodies, double g, double tf, double sf);
double sqrtApprox(double x);
BodySystem update_system(BodySystem& system, double delta_time);
int main();

Body make_body(double px, double py, double vx, double vy, double mass) {
    return Body{.position_x = px, .position_y = py, .velocity_x = vx, .velocity_y = vy, .mass = mass};
}

Body update_velocity(Body& body, double force_x, double force_y, double delta_time) {
    body.velocity_x = (body.velocity_x + (force_x * delta_time));
    body.velocity_y = (body.velocity_y + (force_y * delta_time));
    return body;
}

Body update_position(Body& body, double delta_time) {
    body.position_x = (body.position_x + (body.velocity_x * delta_time));
    body.position_y = (body.position_y + (body.velocity_y * delta_time));
    return body;
}

BodySystem make_body_system(const std::vector<Body>& bodies, double g, double tf, double sf) {
    return BodySystem{.bodies = bodies, .gravitation_constant = g, .time_factor = tf, .softening_factor = sf};
}

double sqrtApprox(double x) {
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

BodySystem update_system(BodySystem& system, double delta_time) {
    std::vector<Body> bodies = system.bodies;
    int64_t i = int64_t(0);
    while ((i < bodies.size())) {
        Body body1 = _index(bodies, i);
        double force_x = 0.0;
        double force_y = 0.0;
        int64_t j = int64_t(0);
        while ((j < bodies.size())) {
            if ((i != j)) {
                Body body2 = _index(bodies, j);
                double dif_x = (body2.position_x - body1.position_x);
                double dif_y = (body2.position_y - body1.position_y);
                double distance_sq = (((dif_x * dif_x) + (dif_y * dif_y)) + system.softening_factor);
                double distance = sqrtApprox(distance_sq);
                double denom = ((distance * distance) * distance);
                force_x = (force_x + ((double)(((system.gravitation_constant * body2.mass) * dif_x)) / (denom)));
                force_y = (force_y + ((double)(((system.gravitation_constant * body2.mass) * dif_y)) / (denom)));
            }
            j = (j + int64_t(1));
        }
        body1 = update_velocity(body1, force_x, force_y, (delta_time * system.time_factor));
        bodies[i] = body1;
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < bodies.size())) {
        Body body = _index(bodies, i);
        body = update_position(body, (delta_time * system.time_factor));
        bodies[i] = body;
        i = (i + int64_t(1));
    }
    system.bodies = bodies;
    return system;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Body b1 = make_body(0.0, 0.0, 0.0, 0.0, 1.0);
        Body b2 = make_body(10.0, 0.0, 0.0, 0.0, 1.0);
        BodySystem sys1 = make_body_system(std::vector<Body>{b1, b2}, 1.0, 1.0, 0.0);
        sys1 = update_system(sys1, 1.0);
        Body b1_after = _index(sys1.bodies, int64_t(0));
        double pos1x = b1_after.position_x;
        double pos1y = b1_after.position_y;
        _json(std::map<std::string, double>{{"x", pos1x}, {"y", pos1y}});
        double vel1x = b1_after.velocity_x;
        double vel1y = b1_after.velocity_y;
        _json(std::map<std::string, double>{{"vx", vel1x}, {"vy", vel1y}});
        Body b3 = make_body(-10.0, 0.0, 0.0, 0.0, 1.0);
        Body b4 = make_body(10.0, 0.0, 0.0, 0.0, 4.0);
        BodySystem sys2 = make_body_system(std::vector<Body>{b3, b4}, 1.0, 10.0, 0.0);
        sys2 = update_system(sys2, 1.0);
        Body b2_after = _index(sys2.bodies, int64_t(0));
        double pos2x = b2_after.position_x;
        double pos2y = b2_after.position_y;
        _json(std::map<std::string, double>{{"x", pos2x}, {"y", pos2y}});
        double vel2x = b2_after.velocity_x;
        double vel2y = b2_after.velocity_y;
        _json(std::map<std::string, double>{{"vx", vel2x}, {"vy", vel2y}});
    }
    return 0;
}
