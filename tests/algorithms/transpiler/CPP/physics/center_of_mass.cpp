// Generated by Mochi transpiler v0.10.69 on 2025-08-22 13:11:06 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Particle;
struct Coord3D;

std::ostream& operator<<(std::ostream&, const Particle&);
std::ostream& operator<<(std::ostream&, const Coord3D&);


struct Particle {
    double x;
    double y;
    double z;
    double mass;
    auto operator<=>(const Particle&) const = default;
};

struct Coord3D {
    double x;
    double y;
    double z;
    auto operator<=>(const Coord3D&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Particle& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << ", " << "'mass': "<< std::fixed << std::setprecision(1) << v.mass
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Coord3D& v) {
    os << '{' << "'x': "<< std::fixed << std::setprecision(1) << v.x
 << ", " << "'y': "<< std::fixed << std::setprecision(1) << v.y
 << ", " << "'z': "<< std::fixed << std::setprecision(1) << v.z
 << '}';
    return os;
}

double round2(double x);
Coord3D center_of_mass(const std::vector<Particle>& ps);
std::string coord_to_string(const Coord3D& c);
int main();

Coord3D r1 = Coord3D{};
Coord3D r2 = Coord3D{};

double round2(double x) {
    double scaled = (x * 100.0);
    double rounded = (double)((int64_t)((scaled + 0.5)));
    return ((double)(rounded) / (100.0));
}

Coord3D center_of_mass(const std::vector<Particle>& ps) {
    if ((ps.size() == int64_t(0))) {
        throw std::runtime_error(std::string("No particles provided"));
    }
    int64_t i = int64_t(0);
    double total_mass = 0.0;
    while ((i < ps.size())) {
        Particle p = _index(ps, i);
        if ((p.mass <= 0.0)) {
            throw std::runtime_error(std::string("Mass of all particles must be greater than 0"));
        }
        total_mass = (total_mass + p.mass);
        i = (i + int64_t(1));
    }
    double sum_x = 0.0;
    double sum_y = 0.0;
    double sum_z = 0.0;
    i = int64_t(0);
    while ((i < ps.size())) {
        Particle p = _index(ps, i);
        sum_x = (sum_x + (p.x * p.mass));
        sum_y = (sum_y + (p.y * p.mass));
        sum_z = (sum_z + (p.z * p.mass));
        i = (i + int64_t(1));
    }
    double cm_x = round2(((double)(sum_x) / (total_mass)));
    double cm_y = round2(((double)(sum_y) / (total_mass)));
    double cm_z = round2(((double)(sum_z) / (total_mass)));
    return Coord3D{.x = cm_x, .y = cm_y, .z = cm_z};
}

std::string coord_to_string(const Coord3D& c) {
    return ((((((std::string("Coord3D(x=") + _to_string(c.x)) + std::string(", y=")) + _to_string(c.y)) + std::string(", z=")) + _to_string(c.z)) + std::string(")"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        r1 = center_of_mass(std::vector<Particle>{Particle{.x = 1.5, .y = 4.0, .z = 3.4, .mass = 4.0}, Particle{.x = 5.0, .y = 6.8, .z = 7.0, .mass = 8.1}, Particle{.x = 9.4, .y = 10.1, .z = 11.6, .mass = 12.0}});
        std::cout << coord_to_string(r1);
        std::cout << std::endl;
        r2 = center_of_mass(std::vector<Particle>{Particle{.x = 1.0, .y = 2.0, .z = 3.0, .mass = 4.0}, Particle{.x = 5.0, .y = 6.0, .z = 7.0, .mass = 8.0}, Particle{.x = 9.0, .y = 10.0, .z = 11.0, .mass = 12.0}});
        std::cout << coord_to_string(r2);
        std::cout << std::endl;
    }
    return 0;
}
