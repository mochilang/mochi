// Generated by Mochi transpiler v0.10.60 on 2025-08-08 09:36:16 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double abs(double x);
double sqrtApprox(double x);
double euclidean_distance_sqr(const std::vector<double>& p1, const std::vector<double>& p2);
std::vector<std::vector<double>> column_based_sort(const std::vector<std::vector<double>>& arr, int64_t column);
double dis_between_closest_pair(const std::vector<std::vector<double>>& points, int64_t count, double min_dis);
double dis_between_closest_in_strip(const std::vector<std::vector<double>>& points, int64_t count, double min_dis);
double closest_pair_of_points_sqr(const std::vector<std::vector<double>>& px, const std::vector<std::vector<double>>& py, int64_t count);
double closest_pair_of_points(const std::vector<std::vector<double>>& points, int64_t count);
int main();

std::vector<std::vector<double>> points = std::vector<std::vector<double>>{std::vector<double>{2.0, 3.0}, std::vector<double>{12.0, 30.0}, std::vector<double>{40.0, 50.0}, std::vector<double>{5.0, 1.0}, std::vector<double>{12.0, 10.0}, std::vector<double>{3.0, 4.0}};

double abs(double x) {
    if ((x < 0.0)) {
        return (0.0 - x);
    }
    return x;
}

double sqrtApprox(double x) {
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double euclidean_distance_sqr(const std::vector<double>& p1, const std::vector<double>& p2) {
    double dx = (([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p1) - ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p2));
    double dy = (([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p1) - ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p2));
    return ((dx * dx) + (dy * dy));
}

std::vector<std::vector<double>> column_based_sort(const std::vector<std::vector<double>>& arr, int64_t column) {
    std::vector<std::vector<double>> points = arr;
    int64_t i = int64_t(0);
    while ((i < points.size())) {
        int64_t j = int64_t(0);
        while ((j < (points.size() - int64_t(1)))) {
            if ((([&](const auto& __v){ auto __i = column; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points)) > ([&](const auto& __v){ auto __i = column; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points)))) {
                std::vector<double> tmp = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points);
                points[j] = ([&](const auto& __v){ auto __i = (j + int64_t(1)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points);
                points[(j + int64_t(1))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return points;
}

double dis_between_closest_pair(const std::vector<std::vector<double>>& points, int64_t count, double min_dis) {
    int64_t i = int64_t(0);
    while ((i < (count - int64_t(1)))) {
        int64_t j = (i + int64_t(1));
        while ((j < count)) {
            double current = euclidean_distance_sqr(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points), ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points));
            if ((current < min_dis)) {
                min_dis = current;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return min_dis;
}

double dis_between_closest_in_strip(const std::vector<std::vector<double>>& points, int64_t count, double min_dis) {
    int64_t i_start = int64_t(0);
    if ((int64_t(6) < (count - int64_t(1)))) {
        i_start = int64_t(6);
    } else {
        i_start = (count - int64_t(1));
    }
    int64_t i = i_start;
    while ((i < count)) {
        int64_t j_start = int64_t(0);
        if (((i - int64_t(6)) > int64_t(0))) {
            j_start = (i - int64_t(6));
        }
        int64_t j = j_start;
        while ((j < i)) {
            double current = euclidean_distance_sqr(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points), ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(points));
            if ((current < min_dis)) {
                min_dis = current;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return min_dis;
}

double closest_pair_of_points_sqr(const std::vector<std::vector<double>>& px, const std::vector<std::vector<double>>& py, int64_t count) {
    if ((count <= int64_t(3))) {
        return dis_between_closest_pair(px, count, 1000000000000000000.0);
    }
    int64_t mid = (count / int64_t(2));
    double left = closest_pair_of_points_sqr(px, ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), mid - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+mid); })(py), mid);
    double right = closest_pair_of_points_sqr(py, ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(mid, count - mid); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+mid, __v.begin()+count); })(py), (count - mid));
    double best = left;
    if ((right < best)) {
        best = right;
    }
    std::vector<std::vector<double>> strip = {};
    int64_t i = int64_t(0);
    while ((i < px.size())) {
        if ((abs((([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(px)) - ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = mid; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(px)))) < best)) {
            strip = ([&]{ auto& __tmp = strip; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(px)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    double strip_best = dis_between_closest_in_strip(strip, (int64_t)(strip.size()), best);
    if ((strip_best < best)) {
        best = strip_best;
    }
    return best;
}

double closest_pair_of_points(const std::vector<std::vector<double>>& points, int64_t count) {
    std::vector<std::vector<double>> points_sorted_on_x = column_based_sort(points, int64_t(0));
    std::vector<std::vector<double>> points_sorted_on_y = column_based_sort(points, int64_t(1));
    double dist_sqr = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count);
    return sqrtApprox(dist_sqr);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (std::string("Distance: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << closest_pair_of_points(points, (int64_t)(points.size())); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
