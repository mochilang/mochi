// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:07:03 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<int64_t>> default_matrix_multiplication(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b);
std::vector<std::vector<int64_t>> matrix_addition(const std::vector<std::vector<int64_t>>& matrix_a, const std::vector<std::vector<int64_t>>& matrix_b);
std::vector<std::vector<int64_t>> matrix_subtraction(const std::vector<std::vector<int64_t>>& matrix_a, const std::vector<std::vector<int64_t>>& matrix_b);
std::vector<std::vector<std::vector<int64_t>>> split_matrix(const std::vector<std::vector<int64_t>>& a);
std::vector<int64_t> matrix_dimensions(const std::vector<std::vector<int64_t>>& matrix);
int64_t next_power_of_two(int64_t n);
std::vector<std::vector<int64_t>> pad_matrix(const std::vector<std::vector<int64_t>>& mat, int64_t rows, int64_t cols);
std::vector<std::vector<int64_t>> actual_strassen(const std::vector<std::vector<int64_t>>& matrix_a, const std::vector<std::vector<int64_t>>& matrix_b);
std::vector<std::vector<int64_t>> strassen(const std::vector<std::vector<int64_t>>& matrix1, const std::vector<std::vector<int64_t>>& matrix2);
int main();

std::vector<std::vector<int64_t>> default_matrix_multiplication(const std::vector<std::vector<int64_t>>& a, const std::vector<std::vector<int64_t>>& b) {
    return std::vector<std::vector<int64_t>>{std::vector<int64_t>{((a[int64_t(0)][int64_t(0)] * b[int64_t(0)][int64_t(0)]) + (a[int64_t(0)][int64_t(1)] * b[int64_t(1)][int64_t(0)])), ((a[int64_t(0)][int64_t(0)] * b[int64_t(0)][int64_t(1)]) + (a[int64_t(0)][int64_t(1)] * b[int64_t(1)][int64_t(1)]))}, std::vector<int64_t>{((a[int64_t(1)][int64_t(0)] * b[int64_t(0)][int64_t(0)]) + (a[int64_t(1)][int64_t(1)] * b[int64_t(1)][int64_t(0)])), ((a[int64_t(1)][int64_t(0)] * b[int64_t(0)][int64_t(1)]) + (a[int64_t(1)][int64_t(1)] * b[int64_t(1)][int64_t(1)]))}};
}

std::vector<std::vector<int64_t>> matrix_addition(const std::vector<std::vector<int64_t>>& matrix_a, const std::vector<std::vector<int64_t>>& matrix_b) {
    std::vector<std::vector<int64_t>> result = {};
    int64_t i = int64_t(0);
    while ((i < matrix_a.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < matrix_a[i].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((matrix_a[i][j] + matrix_b[i][j])); return __tmp; }());
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<int64_t>> matrix_subtraction(const std::vector<std::vector<int64_t>>& matrix_a, const std::vector<std::vector<int64_t>>& matrix_b) {
    std::vector<std::vector<int64_t>> result = {};
    int64_t i = int64_t(0);
    while ((i < matrix_a.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < matrix_a[i].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((matrix_a[i][j] - matrix_b[i][j])); return __tmp; }());
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<std::vector<int64_t>>> split_matrix(const std::vector<std::vector<int64_t>>& a) {
    int n = a.size();
    int mid = (n / int64_t(2));
    std::vector<std::vector<int64_t>> top_left = {};
    std::vector<std::vector<int64_t>> top_right = {};
    std::vector<std::vector<int64_t>> bot_left = {};
    std::vector<std::vector<int64_t>> bot_right = {};
    int64_t i = int64_t(0);
    while ((i < mid)) {
        std::vector<int64_t> left_row = {};
        std::vector<int64_t> right_row = {};
        int64_t j = int64_t(0);
        while ((j < mid)) {
            left_row = ([&]{ auto __tmp = left_row; __tmp.push_back(a[i][j]); return __tmp; }());
            right_row = ([&]{ auto __tmp = right_row; __tmp.push_back(a[i][static_cast<size_t>((j + mid))]); return __tmp; }());
            j = (j + int64_t(1));
        }
        top_left = ([&]{ auto __tmp = top_left; __tmp.push_back(left_row); return __tmp; }());
        top_right = ([&]{ auto __tmp = top_right; __tmp.push_back(right_row); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = mid;
    while ((i < n)) {
        std::vector<int64_t> left_row = {};
        std::vector<int64_t> right_row = {};
        int64_t j = int64_t(0);
        while ((j < mid)) {
            left_row = ([&]{ auto __tmp = left_row; __tmp.push_back(a[i][j]); return __tmp; }());
            right_row = ([&]{ auto __tmp = right_row; __tmp.push_back(a[i][static_cast<size_t>((j + mid))]); return __tmp; }());
            j = (j + int64_t(1));
        }
        bot_left = ([&]{ auto __tmp = bot_left; __tmp.push_back(left_row); return __tmp; }());
        bot_right = ([&]{ auto __tmp = bot_right; __tmp.push_back(right_row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return std::vector<std::vector<std::vector<int64_t>>>{top_left, top_right, bot_left, bot_right};
}

std::vector<int64_t> matrix_dimensions(const std::vector<std::vector<int64_t>>& matrix) {
    return std::vector<int>{matrix.size(), matrix[int64_t(0)].size()};
}

int64_t next_power_of_two(int64_t n) {
    int64_t p = int64_t(1);
    while ((p < n)) {
        p = (p * int64_t(2));
    }
    return p;
}

std::vector<std::vector<int64_t>> pad_matrix(const std::vector<std::vector<int64_t>>& mat, int64_t rows, int64_t cols) {
    std::vector<std::vector<int64_t>> res = {};
    int64_t i = int64_t(0);
    while ((i < rows)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < cols)) {
            int64_t v = int64_t(0);
            if (((i < mat.size()) && (j < mat[int64_t(0)].size()))) {
                v = mat[i][j];
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(v); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> actual_strassen(const std::vector<std::vector<int64_t>>& matrix_a, const std::vector<std::vector<int64_t>>& matrix_b) {
    if ((matrix_dimensions(matrix_a)[int64_t(0)] == int64_t(2))) {
        return default_matrix_multiplication(matrix_a, matrix_b);
    }
    std::vector<std::vector<std::vector<int64_t>>> parts_a = split_matrix(matrix_a);
    std::vector<std::vector<int64_t>> a = parts_a[int64_t(0)];
    std::vector<std::vector<int64_t>> b = parts_a[int64_t(1)];
    std::vector<std::vector<int64_t>> c = parts_a[int64_t(2)];
    std::vector<std::vector<int64_t>> d = parts_a[int64_t(3)];
    std::vector<std::vector<std::vector<int64_t>>> parts_b = split_matrix(matrix_b);
    std::vector<std::vector<int64_t>> e = parts_b[int64_t(0)];
    std::vector<std::vector<int64_t>> f = parts_b[int64_t(1)];
    std::vector<std::vector<int64_t>> g = parts_b[int64_t(2)];
    std::vector<std::vector<int64_t>> h = parts_b[int64_t(3)];
    std::vector<std::vector<int64_t>> t1 = actual_strassen(a, matrix_subtraction(f, h));
    std::vector<std::vector<int64_t>> t2 = actual_strassen(matrix_addition(a, b), h);
    std::vector<std::vector<int64_t>> t3 = actual_strassen(matrix_addition(c, d), e);
    std::vector<std::vector<int64_t>> t4 = actual_strassen(d, matrix_subtraction(g, e));
    std::vector<std::vector<int64_t>> t5 = actual_strassen(matrix_addition(a, d), matrix_addition(e, h));
    std::vector<std::vector<int64_t>> t6 = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h));
    std::vector<std::vector<int64_t>> t7 = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f));
    std::vector<std::vector<int64_t>> top_left = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6);
    std::vector<std::vector<int64_t>> top_right = matrix_addition(t1, t2);
    std::vector<std::vector<int64_t>> bot_left = matrix_addition(t3, t4);
    std::vector<std::vector<int64_t>> bot_right = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7);
    std::vector<std::vector<int64_t>> new_matrix = {};
    int64_t i = int64_t(0);
    while ((i < top_right.size())) {
        new_matrix = ([&]{ auto __tmp = new_matrix; __tmp.push_back((std::vector<int64_t>)_concat(top_left[i], top_right[i])); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < bot_right.size())) {
        new_matrix = ([&]{ auto __tmp = new_matrix; __tmp.push_back((std::vector<int64_t>)_concat(bot_left[i], bot_right[i])); return __tmp; }());
        i = (i + int64_t(1));
    }
    return new_matrix;
}

std::vector<std::vector<int64_t>> strassen(const std::vector<std::vector<int64_t>>& matrix1, const std::vector<std::vector<int64_t>>& matrix2) {
    std::vector<int64_t> dims1 = matrix_dimensions(matrix1);
    std::vector<int64_t> dims2 = matrix_dimensions(matrix2);
    if ((dims1[int64_t(1)] != dims2[int64_t(0)])) {
        return std::vector<std::vector<int64_t>>{};
    }
    int64_t maximum = (int64_t)((*std::max_element(std::vector<int64_t>{dims1[int64_t(0)], dims1[int64_t(1)], dims2[int64_t(0)], dims2[int64_t(1)]}.begin(), std::vector<int64_t>{dims1[int64_t(0)], dims1[int64_t(1)], dims2[int64_t(0)], dims2[int64_t(1)]}.end())));
    int64_t size = next_power_of_two(maximum);
    std::vector<std::vector<int64_t>> new_matrix1 = pad_matrix(matrix1, size, size);
    std::vector<std::vector<int64_t>> new_matrix2 = pad_matrix(matrix2, size, size);
    std::vector<std::vector<int64_t>> result_padded = actual_strassen(new_matrix1, new_matrix2);
    std::vector<std::vector<int64_t>> final_matrix = {};
    int64_t i = int64_t(0);
    while ((i < dims1[int64_t(0)])) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < dims2[int64_t(1)])) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(result_padded[i][j]); return __tmp; }());
            j = (j + int64_t(1));
        }
        final_matrix = ([&]{ auto __tmp = final_matrix; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return final_matrix;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> matrix1 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(4), int64_t(3), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(6), int64_t(7)}, std::vector<int64_t>{int64_t(3), int64_t(1), int64_t(2), int64_t(4)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(4), int64_t(3), int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(6), int64_t(7)}, std::vector<int64_t>{int64_t(3), int64_t(1), int64_t(2), int64_t(4)}, std::vector<int64_t>{int64_t(2), int64_t(3), int64_t(4), int64_t(5)}, std::vector<int64_t>{int64_t(6), int64_t(2), int64_t(3), int64_t(1)}};
        std::vector<std::vector<int64_t>> matrix2 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(2), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(16), int64_t(2), int64_t(3), int64_t(3)}, std::vector<int64_t>{int64_t(2), int64_t(2), int64_t(7), int64_t(7)}, std::vector<int64_t>{int64_t(13), int64_t(11), int64_t(22), int64_t(4)}};
        std::vector<std::vector<int64_t>> res = strassen(matrix1, matrix2);
        { auto __tmp = res; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
