// Generated by Mochi transpiler v0.10.60 on 2025-08-07 23:31:38 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct InvResult;

std::ostream& operator<<(std::ostream&, const InvResult&);


struct InvResult {
    std::vector<int64_t> arr;
    int64_t inv;
    auto operator<=>(const InvResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const InvResult& v) {
    os << '{' << "'arr': "<< "["; for(size_t i=0;i<v.arr.size();++i){ if(i>0) os << ", "; os << v.arr[i]; } os << "]"
 << ", " << "'inv': "<< v.inv
 << '}';
    return os;
}

std::vector<int64_t> slice_list(const std::vector<int64_t>& arr, int64_t start, int64_t end);
int64_t count_inversions_bf(const std::vector<int64_t>& arr);
InvResult count_cross_inversions(const std::vector<int64_t>& p, const std::vector<int64_t>& q);
InvResult count_inversions_recursive(const std::vector<int64_t>& arr);
int main();

std::vector<int64_t> arr_1 = std::vector<int64_t>{int64_t(10), int64_t(2), int64_t(1), int64_t(5), int64_t(5), int64_t(2), int64_t(11)};
int64_t nbf = count_inversions_bf(arr_1);
int64_t nrec = count_inversions_recursive(arr_1).inv;
int64_t nbf2 = count_inversions_bf(arr_1);
int64_t nrec2 = count_inversions_recursive(arr_1).inv;
int64_t nbf3 = count_inversions_bf(arr_1);
int64_t nrec3 = count_inversions_recursive(arr_1).inv;

std::vector<int64_t> slice_list(const std::vector<int64_t>& arr, int64_t start, int64_t end) {
    std::vector<int64_t> res = {};
    int64_t k = start;
    while ((k < end)) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(([&](const auto& __v){ auto __i = k; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(arr)); return __tmp; }());
        k = (k + int64_t(1));
    }
    return res;
}

int64_t count_inversions_bf(const std::vector<int64_t>& arr) {
    int n = arr.size();
    int64_t inv = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < (n - int64_t(1)))) {
        int64_t j = (i + int64_t(1));
        while ((j < n)) {
            if ((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(arr) > ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(arr))) {
                inv = (inv + int64_t(1));
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return inv;
}

InvResult count_cross_inversions(const std::vector<int64_t>& p, const std::vector<int64_t>& q) {
    std::vector<int64_t> r = {};
    int64_t i = int64_t(0);
    int64_t j = int64_t(0);
    int64_t inv = int64_t(0);
    while (((i < p.size()) && (j < q.size()))) {
        if ((([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p) > ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(q))) {
            inv = (inv + (p.size() - i));
            r = ([&]{ auto& __tmp = r; __tmp.push_back(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(q)); return __tmp; }());
            j = (j + int64_t(1));
        } else {
            r = ([&]{ auto& __tmp = r; __tmp.push_back(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(p)); return __tmp; }());
            i = (i + int64_t(1));
        }
    }
    if ((i < p.size())) {
        r = _concat(r, slice_list(p, i, (int64_t)(p.size())));
    } else {
        r = _concat(r, slice_list(q, j, (int64_t)(q.size())));
    }
    return InvResult{.arr = r, .inv = inv};
}

InvResult count_inversions_recursive(const std::vector<int64_t>& arr) {
    if ((arr.size() <= int64_t(1))) {
        return InvResult{.arr = arr, .inv = int64_t(0)};
    }
    int64_t mid = (arr.size() / int64_t(2));
    std::vector<int64_t> p = slice_list(arr, int64_t(0), mid);
    std::vector<int64_t> q = slice_list(arr, mid, (int64_t)(arr.size()));
    InvResult res_p = count_inversions_recursive(p);
    InvResult res_q = count_inversions_recursive(q);
    InvResult res_cross = count_cross_inversions(res_p.arr, res_q.arr);
    int64_t total = ((res_p.inv + res_q.inv) + res_cross.inv);
    return InvResult{.arr = res_cross.arr, .inv = total};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << std::string("number of inversions = ");
        std::cout << " ";
        std::cout << nbf;
        std::cout << std::endl;
        arr_1 = std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(2), int64_t(5), int64_t(5), int64_t(10), int64_t(11)};
        std::cout << std::string("number of inversions = ");
        std::cout << " ";
        std::cout << nbf2;
        std::cout << std::endl;
        arr_1 = {};
        std::cout << std::string("number of inversions = ");
        std::cout << " ";
        std::cout << nbf3;
        std::cout << std::endl;
    }
    return 0;
}
