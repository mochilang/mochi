// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:06:51 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Result;

std::ostream& operator<<(std::ostream&, const Result&);


struct Result {
    int64_t start;
    int64_t end;
    double sum;
    auto operator<=>(const Result&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Result& v) {
    os << '{' << "'start': "<< v.start
 << ", " << "'end': "<< v.end
 << ", " << "'sum': "<< std::fixed << std::setprecision(1) << v.sum
 << '}';
    return os;
}

Result max_cross_sum(const std::vector<double>& arr, int64_t low, int64_t mid, int64_t high);
Result max_subarray(const std::vector<double>& arr, int64_t low, int64_t high);
void show(const Result& res);
int main();

Result max_cross_sum(const std::vector<double>& arr, int64_t low, int64_t mid, int64_t high) {
    double left_sum = -1000000000000000000.0;
    int64_t max_left = -int64_t(1);
    double sum = 0.0;
    int64_t i = mid;
    while ((i >= low)) {
        sum = (sum + arr[i]);
        if ((sum > left_sum)) {
            left_sum = sum;
            max_left = i;
        }
        i = (i - int64_t(1));
    }
    double right_sum = -1000000000000000000.0;
    int64_t max_right = -int64_t(1);
    sum = 0.0;
    i = (mid + int64_t(1));
    while ((i <= high)) {
        sum = (sum + arr[i]);
        if ((sum > right_sum)) {
            right_sum = sum;
            max_right = i;
        }
        i = (i + int64_t(1));
    }
    return Result{.start = max_left, .end = max_right, .sum = (left_sum + right_sum)};
}

Result max_subarray(const std::vector<double>& arr, int64_t low, int64_t high) {
    if ((arr.size() == int64_t(0))) {
        return Result{.start = -int64_t(1), .end = -int64_t(1), .sum = 0.0};
    }
    if ((low == high)) {
        return Result{.start = low, .end = high, .sum = arr[low]};
    }
    int64_t mid = ((low + high) / int64_t(2));
    Result left = max_subarray(arr, low, mid);
    Result right = max_subarray(arr, (mid + int64_t(1)), high);
    Result cross = max_cross_sum(arr, low, mid, high);
    if (((left.sum >= right.sum) && (left.sum >= cross.sum))) {
        return left;
    }
    if (((right.sum >= left.sum) && (right.sum >= cross.sum))) {
        return right;
    }
    return cross;
}

void show(const Result& res) {
    std::cout << ((((((std::string("[") + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.start; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.end; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.sum; return ss.str(); }())) + std::string("]"));
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<double> nums1 = std::vector<double>{-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0};
        Result res1 = max_subarray(nums1, int64_t(0), (int64_t)((nums1.size() - int64_t(1))));
        show(res1);
        std::vector<double> nums2 = std::vector<double>{2.0, 8.0, 9.0};
        Result res2 = max_subarray(nums2, int64_t(0), (int64_t)((nums2.size() - int64_t(1))));
        show(res2);
        std::vector<double> nums3 = std::vector<double>{0.0, 0.0};
        Result res3 = max_subarray(nums3, int64_t(0), (int64_t)((nums3.size() - int64_t(1))));
        show(res3);
        std::vector<double> nums4 = std::vector<double>{-1.0, 0.0, 1.0};
        Result res4 = max_subarray(nums4, int64_t(0), (int64_t)((nums4.size() - int64_t(1))));
        show(res4);
        std::vector<double> nums5 = std::vector<double>{-2.0, -3.0, -1.0, -4.0, -6.0};
        Result res5 = max_subarray(nums5, int64_t(0), (int64_t)((nums5.size() - int64_t(1))));
        show(res5);
        std::vector<double> nums6 = {};
        Result res6 = max_subarray(nums6, int64_t(0), int64_t(0));
        show(res6);
    }
    return 0;
}
