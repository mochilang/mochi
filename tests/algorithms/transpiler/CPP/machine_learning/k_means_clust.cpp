// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:43:36 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct KMeansResult;

std::ostream& operator<<(std::ostream&, const KMeansResult&);


struct KMeansResult {
    std::vector<std::vector<double>> centroids;
    std::vector<int64_t> assignments;
    std::vector<double> heterogeneity;
    auto operator<=>(const KMeansResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const KMeansResult& v) {
    os << '{' << "'centroids': "<< "["; for(size_t i=0;i<v.centroids.size();++i){ if(i>0) os << ", "; os << v.centroids[i]; } os << "]"
 << ", " << "'assignments': "<< "["; for(size_t i=0;i<v.assignments.size();++i){ if(i>0) os << ", "; os << v.assignments[i]; } os << "]"
 << ", " << "'heterogeneity': "<< "["; for(size_t i=0;i<v.heterogeneity.size();++i){ if(i>0) os << ", "; os << v.heterogeneity[i]; } os << "]"
 << '}';
    return os;
}

double distance_sq(const std::vector<double>& a, const std::vector<double>& b);
std::vector<int64_t> assign_clusters(const std::vector<std::vector<double>>& data, const std::vector<std::vector<double>>& centroids);
std::vector<std::vector<double>> revise_centroids(const std::vector<std::vector<double>>& data, int64_t k, const std::vector<int64_t>& assignment);
double compute_heterogeneity(const std::vector<std::vector<double>>& data, const std::vector<std::vector<double>>& centroids, const std::vector<int64_t>& assignment);
bool lists_equal(const std::vector<int64_t>& a, const std::vector<int64_t>& b);
KMeansResult kmeans(const std::vector<std::vector<double>>& data, int64_t k, const std::vector<std::vector<double>>& initial_centroids, int64_t max_iter);
int main();

std::vector<std::vector<double>> data = std::vector<std::vector<double>>{std::vector<double>{1.0, 2.0}, std::vector<double>{1.5, 1.8}, std::vector<double>{5.0, 8.0}, std::vector<double>{8.0, 8.0}, std::vector<double>{1.0, 0.6}, std::vector<double>{9.0, 11.0}};
int64_t k = int64_t(3);
std::vector<std::vector<double>> initial_centroids = std::vector<std::vector<double>>{};
KMeansResult result = KMeansResult{};

double distance_sq(const std::vector<double>& a, const std::vector<double>& b) {
    double sum = 0.0;
    for (int64_t i = int64_t(0); i < a.size(); i++ ) {
        double diff = (_index(a, i) - _index(b, i));
        sum = (sum + (diff * diff));
    }
    return sum;
}

std::vector<int64_t> assign_clusters(const std::vector<std::vector<double>>& data, const std::vector<std::vector<double>>& centroids) {
    std::vector<int64_t> assignments = {};
    for (int64_t i = int64_t(0); i < data.size(); i++ ) {
        int64_t best_idx = int64_t(0);
        double best = distance_sq(_index(data, i), _index(centroids, int64_t(0)));
        for (int64_t j = int64_t(1); j < centroids.size(); j++ ) {
            double dist = distance_sq(_index(data, i), _index(centroids, j));
            if ((dist < best)) {
                best = dist;
                best_idx = j;
            }
        }
        assignments = ([&]{ auto __tmp = assignments; __tmp.push_back(best_idx); return __tmp; }());
    }
    return assignments;
}

std::vector<std::vector<double>> revise_centroids(const std::vector<std::vector<double>>& data, int64_t k, const std::vector<int64_t>& assignment) {
    int64_t dim = _index(data, int64_t(0)).size();
    std::vector<std::vector<double>> sums = {};
    std::vector<int64_t> counts = {};
    for (int64_t i = int64_t(0); i < k; i++ ) {
        std::vector<double> row = {};
        for (int64_t j = int64_t(0); j < dim; j++ ) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
        }
        sums = ([&]{ auto __tmp = sums; __tmp.push_back(row); return __tmp; }());
        counts = ([&]{ auto __tmp = counts; __tmp.push_back(int64_t(0)); return __tmp; }());
    }
    for (int64_t i = int64_t(0); i < data.size(); i++ ) {
        int64_t c = _index(assignment, i);
        counts[static_cast<size_t>(c)] = (_index(counts, c) + int64_t(1));
        for (int64_t j = int64_t(0); j < dim; j++ ) {
            sums[static_cast<size_t>(c)][static_cast<size_t>(j)] = (_index(_index(sums, c), j) + _index(_index(data, i), j));
        }
    }
    std::vector<std::vector<double>> centroids = {};
    for (int64_t i = int64_t(0); i < k; i++ ) {
        std::vector<double> row = {};
        if ((_index(counts, i) > int64_t(0))) {
            for (int64_t j = int64_t(0); j < dim; j++ ) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(((double)(_index(_index(sums, i), j)) / ((double)(_index(counts, i))))); return __tmp; }());
            }
        } else {
            for (int64_t j = int64_t(0); j < dim; j++ ) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            }
        }
        centroids = ([&]{ auto __tmp = centroids; __tmp.push_back(row); return __tmp; }());
    }
    return centroids;
}

double compute_heterogeneity(const std::vector<std::vector<double>>& data, const std::vector<std::vector<double>>& centroids, const std::vector<int64_t>& assignment) {
    double total = 0.0;
    for (int64_t i = int64_t(0); i < data.size(); i++ ) {
        int64_t c = _index(assignment, i);
        total = (total + distance_sq(_index(data, i), _index(centroids, c)));
    }
    return total;
}

bool lists_equal(const std::vector<int64_t>& a, const std::vector<int64_t>& b) {
    if ((a.size() != b.size())) {
        return false;
    }
    for (int64_t i = int64_t(0); i < a.size(); i++ ) {
        if ((_index(a, i) != _index(b, i))) {
            return false;
        }
    }
    return true;
}

KMeansResult kmeans(const std::vector<std::vector<double>>& data, int64_t k, const std::vector<std::vector<double>>& initial_centroids, int64_t max_iter) {
    std::vector<std::vector<double>> centroids = initial_centroids;
    std::vector<int64_t> assignment = {};
    std::vector<int64_t> prev = {};
    std::vector<double> heterogeneity = {};
    int64_t iter = int64_t(0);
    while ((iter < max_iter)) {
        assignment = assign_clusters(data, centroids);
        centroids = revise_centroids(data, k, assignment);
        double h = compute_heterogeneity(data, centroids, assignment);
        heterogeneity = ([&]{ auto __tmp = heterogeneity; __tmp.push_back(h); return __tmp; }());
        if (((iter > int64_t(0)) && lists_equal(prev, assignment))) {
            break;
        }
        prev = assignment;
        iter = (iter + int64_t(1));
    }
    return KMeansResult{.centroids = centroids, .assignments = assignment, .heterogeneity = heterogeneity};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        initial_centroids = std::vector<std::vector<double>>{_index(data, int64_t(0)), _index(data, int64_t(2)), _index(data, int64_t(5))};
        result = kmeans(data, k, initial_centroids, int64_t(10));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = result.centroids; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp3 = result.assignments; ss << "["; for(size_t i=0;i<__tmp3.size();++i){ if(i>0) ss << ' '; ss << __tmp3[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp4 = result.heterogeneity; ss << "["; for(size_t i=0;i<__tmp4.size();++i){ if(i>0) ss << ' '; ss << __tmp4[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
