// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:03 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t _rand();
double _random();
double _mod(double x, double m);
double cos(double x);
double sqrtApprox(double x);
double _ln(double x);
std::vector<double> gaussian_distribution(double mean, double std_dev, int64_t instance_count);
std::vector<int64_t> y_generator(int64_t class_count, const std::vector<int64_t>& instance_count);
double calculate_mean(int64_t instance_count, const std::vector<double>& items);
double calculate_probabilities(int64_t instance_count, int64_t total_count);
double calculate_variance(const std::vector<std::vector<double>>& items, const std::vector<double>& means, int64_t total_count);
std::vector<int64_t> predict_y_values(const std::vector<std::vector<double>>& x_items, const std::vector<double>& means, double variance, const std::vector<double>& probabilities);
double accuracy(const std::vector<int64_t>& actual_y, const std::vector<int64_t>& predicted_y);
int main();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
int64_t seed = int64_t(1);

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

double _random() {
    return ((double)((double)(_rand())) / (2147483648.0));
}

double _mod(double x, double m) {
    return (x - ((double)((int64_t)(((double)(x) / (m)))) * m));
}

double cos(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = (y * y);
    double y4 = (y2 * y2);
    double y6 = (y4 * y2);
    return (((1.0 - ((double)(y2) / (2.0))) + ((double)(y4) / (24.0))) - ((double)(y6) / (720.0)));
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double _ln(double x) {
    double t = ((double)((x - 1.0)) / ((x + 1.0)));
    double term = t;
    double sum = 0.0;
    int64_t n = int64_t(1);
    while ((n <= int64_t(19))) {
        sum = (sum + ((double)(term) / ((double)(n))));
        term = ((term * t) * t);
        n = (n + int64_t(2));
    }
    return (2.0 * sum);
}

std::vector<double> gaussian_distribution(double mean, double std_dev, int64_t instance_count) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < instance_count)) {
        double u1 = _random();
        double u2 = _random();
        double r = sqrtApprox((-2.0 * _ln(u1)));
        double theta = (TWO_PI * u2);
        double z = (r * cos(theta));
        res = ([&]{ auto __tmp = res; __tmp.push_back((mean + (z * std_dev))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> y_generator(int64_t class_count, const std::vector<int64_t>& instance_count) {
    std::vector<int64_t> res = {};
    int64_t k = int64_t(0);
    while ((k < class_count)) {
        int64_t i = int64_t(0);
        while ((i < _index(instance_count, k))) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(k); return __tmp; }());
            i = (i + int64_t(1));
        }
        k = (k + int64_t(1));
    }
    return res;
}

double calculate_mean(int64_t instance_count, const std::vector<double>& items) {
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < instance_count)) {
        total = (total + _index(items, i));
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(instance_count)));
}

double calculate_probabilities(int64_t instance_count, int64_t total_count) {
    return ((double)((double)(instance_count)) / ((double)(total_count)));
}

double calculate_variance(const std::vector<std::vector<double>>& items, const std::vector<double>& means, int64_t total_count) {
    std::vector<double> squared_diff = {};
    int64_t i = int64_t(0);
    while ((i < items.size())) {
        int64_t j = int64_t(0);
        while ((j < _index(items, i).size())) {
            double diff = (_index(_index(items, i), j) - _index(means, i));
            squared_diff = ([&]{ auto __tmp = squared_diff; __tmp.push_back((diff * diff)); return __tmp; }());
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    double sum_sq = 0.0;
    int64_t k = int64_t(0);
    while ((k < squared_diff.size())) {
        sum_sq = (sum_sq + _index(squared_diff, k));
        k = (k + int64_t(1));
    }
    int64_t n_classes = means.size();
    return (((double)(1.0) / ((double)((total_count - n_classes)))) * sum_sq);
}

std::vector<int64_t> predict_y_values(const std::vector<std::vector<double>>& x_items, const std::vector<double>& means, double variance, const std::vector<double>& probabilities) {
    std::vector<int64_t> results = {};
    int64_t i = int64_t(0);
    while ((i < x_items.size())) {
        int64_t j = int64_t(0);
        while ((j < _index(x_items, i).size())) {
            std::vector<double> temp = {};
            int64_t k = int64_t(0);
            while ((k < x_items.size())) {
                double discr = (((_index(_index(x_items, i), j) * ((double)(_index(means, k)) / (variance))) - ((double)((_index(means, k) * _index(means, k))) / ((2.0 * variance)))) + _ln(_index(probabilities, k)));
                temp = ([&]{ auto __tmp = temp; __tmp.push_back(discr); return __tmp; }());
                k = (k + int64_t(1));
            }
            int64_t max_idx = int64_t(0);
            double max_val = _index(temp, int64_t(0));
            int64_t t = int64_t(1);
            while ((t < temp.size())) {
                if ((_index(temp, t) > max_val)) {
                    max_val = _index(temp, t);
                    max_idx = t;
                }
                t = (t + int64_t(1));
            }
            results = ([&]{ auto __tmp = results; __tmp.push_back(max_idx); return __tmp; }());
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return results;
}

double accuracy(const std::vector<int64_t>& actual_y, const std::vector<int64_t>& predicted_y) {
    int64_t correct = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < actual_y.size())) {
        if ((_index(actual_y, i) == _index(predicted_y, i))) {
            correct = (correct + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return (((double)((double)(correct)) / ((double)(actual_y.size()))) * 100.0);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        seed = int64_t(1);
        std::vector<int64_t> counts = std::vector<int64_t>{int64_t(20), int64_t(20), int64_t(20)};
        std::vector<double> means = std::vector<double>{5.0, 10.0, 15.0};
        double std_dev = 1.0;
        std::vector<std::vector<double>> x = {};
        int64_t i = int64_t(0);
        while ((i < counts.size())) {
            x = ([&]{ auto __tmp = x; __tmp.push_back(gaussian_distribution(_index(means, i), std_dev, _index(counts, i))); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::vector<int64_t> y = y_generator(counts.size(), counts);
        std::vector<double> actual_means = {};
        i = int64_t(0);
        while ((i < counts.size())) {
            actual_means = ([&]{ auto __tmp = actual_means; __tmp.push_back(calculate_mean(_index(counts, i), _index(x, i))); return __tmp; }());
            i = (i + int64_t(1));
        }
        int64_t total_count = int64_t(0);
        i = int64_t(0);
        while ((i < counts.size())) {
            total_count = (total_count + _index(counts, i));
            i = (i + int64_t(1));
        }
        std::vector<double> probabilities = {};
        i = int64_t(0);
        while ((i < counts.size())) {
            probabilities = ([&]{ auto __tmp = probabilities; __tmp.push_back(calculate_probabilities(_index(counts, i), total_count)); return __tmp; }());
            i = (i + int64_t(1));
        }
        double variance = calculate_variance(x, actual_means, total_count);
        std::vector<int64_t> predicted = predict_y_values(x, actual_means, variance, probabilities);
        { auto __tmp1 = predicted; std::cout << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp1[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = accuracy(y, predicted); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
