// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:05:22 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Itemset;

std::ostream& operator<<(std::ostream&, const Itemset&);


struct Itemset {
    std::vector<std::string> items;
    int64_t support;
    auto operator<=>(const Itemset&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Itemset& v) {
    os << '{' << "'items': "<< "["; for(size_t i=0;i<v.items.size();++i){ if(i>0) os << ", "; os << v.items[i]; } os << "]"
 << ", " << "'support': "<< v.support
 << '}';
    return os;
}

std::vector<std::vector<std::string>> load_data();
bool contains_string(const std::vector<std::string>& xs, std::string s);
bool is_subset(const std::vector<std::string>& candidate, const std::vector<std::string>& transaction);
bool lists_equal(const std::vector<std::string>& a, const std::vector<std::string>& b);
bool contains_list(const std::vector<std::vector<std::string>>& itemset, const std::vector<std::string>& item);
int64_t count_list(const std::vector<std::vector<std::string>>& itemset, const std::vector<std::string>& item);
std::vector<std::vector<std::string>> slice_list(const std::vector<std::vector<std::string>>& xs, int64_t start);
std::vector<std::vector<std::vector<std::string>>> combinations_lists(const std::vector<std::vector<std::string>>& xs, int64_t k);
std::vector<std::vector<std::vector<std::string>>> prune(const std::vector<std::vector<std::string>>& itemset, const std::vector<std::vector<std::vector<std::string>>>& candidates, int64_t length);
std::vector<std::string> sort_strings(const std::vector<std::string>& xs);
std::string itemset_to_string(const std::vector<std::string>& xs);
std::vector<Itemset> apriori(const std::vector<std::vector<std::string>>& data, int64_t min_support);
int main();

std::vector<Itemset> frequent_itemsets = std::vector<Itemset>{};

std::vector<std::vector<std::string>> load_data() {
    return std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("milk")}, std::vector<std::string>{std::string("milk"), std::string("butter")}, std::vector<std::string>{std::string("milk"), std::string("bread")}, std::vector<std::string>{std::string("milk"), std::string("bread"), std::string("chips")}};
}

bool contains_string(const std::vector<std::string>& xs, std::string s) {
    for (std::string v : xs) {
        if ((v == s)) {
            return true;
        }
    }
    return false;
}

bool is_subset(const std::vector<std::string>& candidate, const std::vector<std::string>& transaction) {
    for (std::string it : candidate) {
        if (!contains_string(transaction, it)) {
            return false;
        }
    }
    return true;
}

bool lists_equal(const std::vector<std::string>& a, const std::vector<std::string>& b) {
    if ((a.size() != b.size())) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        if ((_index(a, i) != _index(b, i))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

bool contains_list(const std::vector<std::vector<std::string>>& itemset, const std::vector<std::string>& item) {
    for (std::vector<std::string> l : itemset) {
        if (lists_equal(l, item)) {
            return true;
        }
    }
    return false;
}

int64_t count_list(const std::vector<std::vector<std::string>>& itemset, const std::vector<std::string>& item) {
    int64_t c = int64_t(0);
    for (std::vector<std::string> l : itemset) {
        if (lists_equal(l, item)) {
            c = (c + int64_t(1));
        }
    }
    return c;
}

std::vector<std::vector<std::string>> slice_list(const std::vector<std::vector<std::string>>& xs, int64_t start) {
    std::vector<std::vector<std::string>> res = {};
    int64_t i = start;
    while ((i < xs.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(_index(xs, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<std::vector<std::string>>> combinations_lists(const std::vector<std::vector<std::string>>& xs, int64_t k) {
    std::vector<std::vector<std::vector<std::string>>> result = {};
    if ((k == int64_t(0))) {
        result = ([&]{ auto& __tmp = result; __tmp.push_back(std::vector<std::vector<std::string>>{}); return __tmp; }());
        return result;
    }
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        std::vector<std::string> head = _index(xs, i);
        std::vector<std::vector<std::string>> tail = slice_list(xs, (i + int64_t(1)));
        std::vector<std::vector<std::vector<std::string>>> tail_combos = combinations_lists(tail, (k - int64_t(1)));
        for (std::vector<std::vector<std::string>> combo : tail_combos) {
            std::vector<std::vector<std::string>> new_combo = {};
            new_combo = ([&]{ auto& __tmp = new_combo; __tmp.push_back(head); return __tmp; }());
            for (std::vector<std::string> c : combo) {
                new_combo = ([&]{ auto& __tmp = new_combo; __tmp.push_back(c); return __tmp; }());
            }
            result = ([&]{ auto& __tmp = result; __tmp.push_back(new_combo); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<std::vector<std::string>>> prune(const std::vector<std::vector<std::string>>& itemset, const std::vector<std::vector<std::vector<std::string>>>& candidates, int64_t length) {
    std::vector<std::vector<std::vector<std::string>>> pruned = {};
    for (std::vector<std::vector<std::string>> candidate : candidates) {
        bool is_subsequence = true;
        for (std::vector<std::string> item : candidate) {
            if ((!contains_list(itemset, item) || (count_list(itemset, item) < (length - int64_t(1))))) {
                is_subsequence = false;
                break;
            }
        }
        if (is_subsequence) {
            pruned = ([&]{ auto& __tmp = pruned; __tmp.push_back(candidate); return __tmp; }());
        }
    }
    return pruned;
}

std::vector<std::string> sort_strings(const std::vector<std::string>& xs) {
    std::vector<std::string> res = {};
    for (std::string s : xs) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(s); return __tmp; }());
    }
    int64_t i = int64_t(0);
    while ((i < res.size())) {
        int64_t j = (i + int64_t(1));
        while ((j < res.size())) {
            if ((_index(res, j) < _index(res, i))) {
                std::string tmp = _index(res, i);
                res[i] = _index(res, j);
                res[j] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::string itemset_to_string(const std::vector<std::string>& xs) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i > int64_t(0))) {
            s = (s + std::string(", "));
        }
        s = (((s + std::string("'")) + _index(xs, i)) + std::string("'"));
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

std::vector<Itemset> apriori(const std::vector<std::vector<std::string>>& data, int64_t min_support) {
    std::vector<std::vector<std::string>> itemset = {};
    for (std::vector<std::string> transaction : data) {
        std::vector<std::string> t = {};
        for (std::string v : transaction) {
            t = ([&]{ auto& __tmp = t; __tmp.push_back(v); return __tmp; }());
        }
        itemset = ([&]{ auto& __tmp = itemset; __tmp.push_back(t); return __tmp; }());
    }
    std::vector<Itemset> frequent = {};
    int64_t length = int64_t(1);
    while ((itemset.size() > int64_t(0))) {
        std::vector<int64_t> counts = {};
        int64_t idx = int64_t(0);
        while ((idx < itemset.size())) {
            counts = ([&]{ auto& __tmp = counts; __tmp.push_back(int64_t(0)); return __tmp; }());
            idx = (idx + int64_t(1));
        }
        for (std::vector<std::string> transaction : data) {
            int64_t j = int64_t(0);
            while ((j < itemset.size())) {
                std::vector<std::string> candidate = _index(itemset, j);
                if (is_subset(candidate, transaction)) {
                    counts[j] = (_index(counts, j) + int64_t(1));
                }
                j = (j + int64_t(1));
            }
        }
        std::vector<std::vector<std::string>> new_itemset = {};
        int64_t k = int64_t(0);
        while ((k < itemset.size())) {
            if ((_index(counts, k) >= min_support)) {
                new_itemset = ([&]{ auto& __tmp = new_itemset; __tmp.push_back(_index(itemset, k)); return __tmp; }());
            }
            k = (k + int64_t(1));
        }
        itemset = new_itemset;
        int64_t m = int64_t(0);
        while ((m < itemset.size())) {
            std::vector<std::string> sorted_item = sort_strings(_index(itemset, m));
            frequent = ([&]{ auto& __tmp = frequent; __tmp.push_back(Itemset{.items = sorted_item, .support = _index(counts, m)}); return __tmp; }());
            m = (m + int64_t(1));
        }
        length = (length + int64_t(1));
        std::vector<std::vector<std::vector<std::string>>> combos = combinations_lists(itemset, length);
        itemset = prune(itemset, combos, length);
    }
    return frequent;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        frequent_itemsets = apriori(load_data(), int64_t(2));
        for (Itemset fi : frequent_itemsets) {
            std::cout << ((itemset_to_string(fi.items) + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << fi.support; return ss.str(); }()));
            std::cout << std::endl;
        }
    }
    return 0;
}
