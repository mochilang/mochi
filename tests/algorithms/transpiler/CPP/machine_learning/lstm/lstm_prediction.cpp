// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:40:33 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
template<typename T> std::vector<T> _slice(const std::vector<T>& s, int64_t start, int64_t end) {
    if(start < 0) start = 0;
    if(end > (int64_t)s.size()) end = s.size();
    if(start > (int64_t)s.size()) start = s.size();
    if(end < start) end = start;
    return std::vector<T>(s.begin()+start, s.begin()+end);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct LSTMWeights;
struct LSTMState;
struct Samples;

std::ostream& operator<<(std::ostream&, const LSTMWeights&);
std::ostream& operator<<(std::ostream&, const LSTMState&);
std::ostream& operator<<(std::ostream&, const Samples&);


struct LSTMWeights {
    double w_i;
    double u_i;
    double b_i;
    double w_f;
    double u_f;
    double b_f;
    double w_o;
    double u_o;
    double b_o;
    double w_c;
    double u_c;
    double b_c;
    double w_y;
    double b_y;
    auto operator<=>(const LSTMWeights&) const = default;
};

struct LSTMState {
    std::vector<double> i;
    std::vector<double> f;
    std::vector<double> o;
    std::vector<double> g;
    std::vector<double> c;
    std::vector<double> h;
    auto operator<=>(const LSTMState&) const = default;
};

struct Samples {
    std::vector<std::vector<double>> x;
    std::vector<double> y;
    auto operator<=>(const Samples&) const = default;
};

std::ostream& operator<<(std::ostream& os, const LSTMWeights& v) {
    os << '{' << "'w_i': "<< std::fixed << std::setprecision(1) << v.w_i
 << ", " << "'u_i': "<< std::fixed << std::setprecision(1) << v.u_i
 << ", " << "'b_i': "<< std::fixed << std::setprecision(1) << v.b_i
 << ", " << "'w_f': "<< std::fixed << std::setprecision(1) << v.w_f
 << ", " << "'u_f': "<< std::fixed << std::setprecision(1) << v.u_f
 << ", " << "'b_f': "<< std::fixed << std::setprecision(1) << v.b_f
 << ", " << "'w_o': "<< std::fixed << std::setprecision(1) << v.w_o
 << ", " << "'u_o': "<< std::fixed << std::setprecision(1) << v.u_o
 << ", " << "'b_o': "<< std::fixed << std::setprecision(1) << v.b_o
 << ", " << "'w_c': "<< std::fixed << std::setprecision(1) << v.w_c
 << ", " << "'u_c': "<< std::fixed << std::setprecision(1) << v.u_c
 << ", " << "'b_c': "<< std::fixed << std::setprecision(1) << v.b_c
 << ", " << "'w_y': "<< std::fixed << std::setprecision(1) << v.w_y
 << ", " << "'b_y': "<< std::fixed << std::setprecision(1) << v.b_y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const LSTMState& v) {
    os << '{' << "'i': "<< "["; for(size_t i=0;i<v.i.size();++i){ if(i>0) os << ", "; os << v.i[i]; } os << "]"
 << ", " << "'f': "<< "["; for(size_t i=0;i<v.f.size();++i){ if(i>0) os << ", "; os << v.f[i]; } os << "]"
 << ", " << "'o': "<< "["; for(size_t i=0;i<v.o.size();++i){ if(i>0) os << ", "; os << v.o[i]; } os << "]"
 << ", " << "'g': "<< "["; for(size_t i=0;i<v.g.size();++i){ if(i>0) os << ", "; os << v.g[i]; } os << "]"
 << ", " << "'c': "<< "["; for(size_t i=0;i<v.c.size();++i){ if(i>0) os << ", "; os << v.c[i]; } os << "]"
 << ", " << "'h': "<< "["; for(size_t i=0;i<v.h.size();++i){ if(i>0) os << ", "; os << v.h[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Samples& v) {
    os << '{' << "'x': "<< "["; for(size_t i=0;i<v.x.size();++i){ if(i>0) os << ", "; os << v.x[i]; } os << "]"
 << ", " << "'y': "<< "["; for(size_t i=0;i<v.y.size();++i){ if(i>0) os << ", "; os << v.y[i]; } os << "]"
 << '}';
    return os;
}

double exp_approx(double x);
double sigmoid(double x);
double tanh_approx(double x);
LSTMState forward(const std::vector<double>& seq, const LSTMWeights& w);
LSTMWeights backward(const std::vector<double>& seq, double target, LSTMWeights w, const LSTMState& s, double lr);
Samples make_samples(const std::vector<double>& data, int64_t look_back);
LSTMWeights init_weights();
LSTMWeights train(const std::vector<double>& data, int64_t look_back, int64_t epochs, double lr);
double predict(const std::vector<double>& seq, const LSTMWeights& w);
int main();

std::vector<double> data = std::vector<double>{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8};
int64_t look_back = int64_t(3);
int64_t epochs = int64_t(200);
double lr = 0.1;
LSTMWeights w = LSTMWeights{};
std::vector<double> test_seq = std::vector<double>{0.6, 0.7, 0.8};
double pred = 0;

double exp_approx(double x) {
    double sum = 1.0;
    double term = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(20))) {
        term = ((double)((term * x)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double sigmoid(double x) {
    return ((double)(1.0) / ((1.0 + exp_approx(-x))));
}

double tanh_approx(double x) {
    double e = exp_approx((2.0 * x));
    return ((double)((e - 1.0)) / ((e + 1.0)));
}

LSTMState forward(const std::vector<double>& seq, const LSTMWeights& w) {
    std::vector<double> i_arr = {};
    std::vector<double> f_arr = {};
    std::vector<double> o_arr = {};
    std::vector<double> g_arr = {};
    std::vector<double> c_arr = std::vector<double>{0.0};
    std::vector<double> h_arr = std::vector<double>{0.0};
    int64_t t = int64_t(0);
    while ((t < seq.size())) {
        double x = _index(seq, t);
        double h_prev = _index(h_arr, t);
        double c_prev = _index(c_arr, t);
        double i_t = sigmoid((((w.w_i * x) + (w.u_i * h_prev)) + w.b_i));
        double f_t = sigmoid((((w.w_f * x) + (w.u_f * h_prev)) + w.b_f));
        double o_t = sigmoid((((w.w_o * x) + (w.u_o * h_prev)) + w.b_o));
        double g_t = tanh_approx((((w.w_c * x) + (w.u_c * h_prev)) + w.b_c));
        double c_t = ((f_t * c_prev) + (i_t * g_t));
        double h_t = (o_t * tanh_approx(c_t));
        i_arr = ([&]{ auto& __tmp = i_arr; __tmp.push_back(i_t); return __tmp; }());
        f_arr = ([&]{ auto& __tmp = f_arr; __tmp.push_back(f_t); return __tmp; }());
        o_arr = ([&]{ auto& __tmp = o_arr; __tmp.push_back(o_t); return __tmp; }());
        g_arr = ([&]{ auto& __tmp = g_arr; __tmp.push_back(g_t); return __tmp; }());
        c_arr = ([&]{ auto& __tmp = c_arr; __tmp.push_back(c_t); return __tmp; }());
        h_arr = ([&]{ auto& __tmp = h_arr; __tmp.push_back(h_t); return __tmp; }());
        t = (t + int64_t(1));
    }
    return LSTMState{.i = i_arr, .f = f_arr, .o = o_arr, .g = g_arr, .c = c_arr, .h = h_arr};
}

LSTMWeights backward(const std::vector<double>& seq, double target, LSTMWeights w, const LSTMState& s, double lr) {
    double dw_i = 0.0;
    double du_i = 0.0;
    double db_i = 0.0;
    double dw_f = 0.0;
    double du_f = 0.0;
    double db_f = 0.0;
    double dw_o = 0.0;
    double du_o = 0.0;
    double db_o = 0.0;
    double dw_c = 0.0;
    double du_c = 0.0;
    double db_c = 0.0;
    double dw_y = 0.0;
    double db_y = 0.0;
    int T = seq.size();
    double h_last = s.h[static_cast<size_t>(T)];
    double y = ((w.w_y * h_last) + w.b_y);
    double dy = (y - target);
    dw_y = (dy * h_last);
    db_y = dy;
    double dh_next = (dy * w.w_y);
    double dc_next = 0.0;
    int64_t t = (T - int64_t(1));
    while ((t >= int64_t(0))) {
        double i_t = _index(s.i, t);
        double f_t = _index(s.f, t);
        double o_t = _index(s.o, t);
        double g_t = _index(s.g, t);
        double c_t = _index(s.c, (t + int64_t(1)));
        double c_prev = _index(s.c, t);
        double h_prev = _index(s.h, t);
        double tanh_c = tanh_approx(c_t);
        double do_t = (dh_next * tanh_c);
        double da_o = ((do_t * o_t) * (1.0 - o_t));
        double dc = (((dh_next * o_t) * (1.0 - (tanh_c * tanh_c))) + dc_next);
        double di_t = (dc * g_t);
        double da_i = ((di_t * i_t) * (1.0 - i_t));
        double dg_t = (dc * i_t);
        double da_g = (dg_t * (1.0 - (g_t * g_t)));
        double df_t = (dc * c_prev);
        double da_f = ((df_t * f_t) * (1.0 - f_t));
        dw_i = (dw_i + (da_i * _index(seq, t)));
        du_i = (du_i + (da_i * h_prev));
        db_i = (db_i + da_i);
        dw_f = (dw_f + (da_f * _index(seq, t)));
        du_f = (du_f + (da_f * h_prev));
        db_f = (db_f + da_f);
        dw_o = (dw_o + (da_o * _index(seq, t)));
        du_o = (du_o + (da_o * h_prev));
        db_o = (db_o + da_o);
        dw_c = (dw_c + (da_g * _index(seq, t)));
        du_c = (du_c + (da_g * h_prev));
        db_c = (db_c + da_g);
        dh_next = ((((da_i * w.u_i) + (da_f * w.u_f)) + (da_o * w.u_o)) + (da_g * w.u_c));
        dc_next = (dc * f_t);
        t = (t - int64_t(1));
    }
    w.w_y = (w.w_y - (lr * dw_y));
    w.b_y = (w.b_y - (lr * db_y));
    w.w_i = (w.w_i - (lr * dw_i));
    w.u_i = (w.u_i - (lr * du_i));
    w.b_i = (w.b_i - (lr * db_i));
    w.w_f = (w.w_f - (lr * dw_f));
    w.u_f = (w.u_f - (lr * du_f));
    w.b_f = (w.b_f - (lr * db_f));
    w.w_o = (w.w_o - (lr * dw_o));
    w.u_o = (w.u_o - (lr * du_o));
    w.b_o = (w.b_o - (lr * db_o));
    w.w_c = (w.w_c - (lr * dw_c));
    w.u_c = (w.u_c - (lr * du_c));
    w.b_c = (w.b_c - (lr * db_c));
    return w;
}

Samples make_samples(const std::vector<double>& data, int64_t look_back) {
    std::vector<std::vector<double>> X = {};
    std::vector<double> Y = {};
    int64_t i = int64_t(0);
    while (((i + look_back) < data.size())) {
        auto seq = _slice(data, i, (i + look_back));
        X = ([&]{ auto& __tmp = X; __tmp.push_back((std::vector<double>)seq); return __tmp; }());
        Y = ([&]{ auto& __tmp = Y; __tmp.push_back(_index(data, (i + look_back))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Samples{.x = X, .y = Y};
}

LSTMWeights init_weights() {
    return LSTMWeights{.w_i = 0.1, .u_i = 0.2, .b_i = 0.0, .w_f = 0.1, .u_f = 0.2, .b_f = 0.0, .w_o = 0.1, .u_o = 0.2, .b_o = 0.0, .w_c = 0.1, .u_c = 0.2, .b_c = 0.0, .w_y = 0.1, .b_y = 0.0};
}

LSTMWeights train(const std::vector<double>& data, int64_t look_back, int64_t epochs, double lr) {
    Samples samples = make_samples(data, look_back);
    LSTMWeights w = init_weights();
    int64_t ep = int64_t(0);
    while ((ep < epochs)) {
        int64_t j = int64_t(0);
        while ((j < samples.x.size())) {
            std::vector<double> seq = _index(samples.x, j);
            double target = _index(samples.y, j);
            LSTMState state = forward(seq, w);
            w = backward(seq, target, w, state, lr);
            j = (j + int64_t(1));
        }
        ep = (ep + int64_t(1));
    }
    return w;
}

double predict(const std::vector<double>& seq, const LSTMWeights& w) {
    LSTMState state = forward(seq, w);
    double h_last = state.h[static_cast<size_t>((state.h.size() - int64_t(1)))];
    return ((w.w_y * h_last) + w.b_y);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        w = train(data, look_back, epochs, lr);
        pred = predict(test_seq, w);
        std::cout << (std::string("Predicted value: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << pred; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
