// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:38:23 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Stump;

std::ostream& operator<<(std::ostream&, const Stump&);


struct Stump {
    int64_t feature;
    double threshold;
    double left;
    double right;
    auto operator<=>(const Stump&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Stump& v) {
    os << '{' << "'feature': "<< v.feature
 << ", " << "'threshold': "<< std::fixed << std::setprecision(1) << v.threshold
 << ", " << "'left': "<< std::fixed << std::setprecision(1) << v.left
 << ", " << "'right': "<< std::fixed << std::setprecision(1) << v.right
 << '}';
    return os;
}

double exp_approx(double x);
double signf(double x);
std::vector<double> gradient(const std::vector<double>& target, const std::vector<double>& preds);
std::vector<double> predict_raw(const std::vector<Stump>& models, const std::vector<std::vector<double>>& features, double learning_rate);
std::vector<double> predict(const std::vector<Stump>& models, const std::vector<std::vector<double>>& features, double learning_rate);
Stump train_stump(const std::vector<std::vector<double>>& features, const std::vector<double>& residuals);
std::vector<Stump> fit(int64_t n_estimators, double learning_rate, const std::vector<std::vector<double>>& features, const std::vector<double>& target);
double accuracy(const std::vector<double>& preds, const std::vector<double>& target);
int main();

std::vector<std::vector<double>> features = std::vector<std::vector<double>>{std::vector<double>{1.0}, std::vector<double>{2.0}, std::vector<double>{3.0}, std::vector<double>{4.0}};
std::vector<double> target = std::vector<double>{};
std::vector<Stump> models = std::vector<Stump>{};
std::vector<double> predictions = std::vector<double>{};
double acc = 0;

double exp_approx(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        term = ((double)((term * x)) / ((double)(i)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double signf(double x) {
    if ((x >= 0.0)) {
        return 1.0;
    }
    return -1.0;
}

std::vector<double> gradient(const std::vector<double>& target, const std::vector<double>& preds) {
    int n = target.size();
    std::vector<double> residuals = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        double t = _index(target, i);
        double y = _index(preds, i);
        double exp_val = exp_approx((t * y));
        double res = ((double)(-t) / ((1.0 + exp_val)));
        residuals = ([&]{ auto& __tmp = residuals; __tmp.push_back(res); return __tmp; }());
        i = (i + int64_t(1));
    }
    return residuals;
}

std::vector<double> predict_raw(const std::vector<Stump>& models, const std::vector<std::vector<double>>& features, double learning_rate) {
    int n = features.size();
    std::vector<double> preds = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        preds = ([&]{ auto& __tmp = preds; __tmp.push_back(0.0); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t m = int64_t(0);
    while ((m < models.size())) {
        Stump stump = _index(models, m);
        i = int64_t(0);
        while ((i < n)) {
            double value = _index(_index(features, i), stump.feature);
            if ((value <= stump.threshold)) {
                preds[i] = (_index(preds, i) + (learning_rate * stump.left));
            } else {
                preds[i] = (_index(preds, i) + (learning_rate * stump.right));
            }
            i = (i + int64_t(1));
        }
        m = (m + int64_t(1));
    }
    return preds;
}

std::vector<double> predict(const std::vector<Stump>& models, const std::vector<std::vector<double>>& features, double learning_rate) {
    std::vector<double> raw = predict_raw(models, features, learning_rate);
    std::vector<double> result = {};
    int64_t i = int64_t(0);
    while ((i < raw.size())) {
        result = ([&]{ auto& __tmp = result; __tmp.push_back(signf(_index(raw, i))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

Stump train_stump(const std::vector<std::vector<double>>& features, const std::vector<double>& residuals) {
    int n_samples = features.size();
    int n_features = _index(features, int64_t(0)).size();
    int64_t best_feature = int64_t(0);
    double best_threshold = 0.0;
    double best_error = 1000000000.0;
    double best_left = 0.0;
    double best_right = 0.0;
    int64_t j = int64_t(0);
    while ((j < n_features)) {
        int64_t t_index = int64_t(0);
        while ((t_index < n_samples)) {
            double t = _index(_index(features, t_index), j);
            double sum_left = 0.0;
            int64_t count_left = int64_t(0);
            double sum_right = 0.0;
            int64_t count_right = int64_t(0);
            int64_t i = int64_t(0);
            while ((i < n_samples)) {
                if ((_index(_index(features, i), j) <= t)) {
                    sum_left = (sum_left + _index(residuals, i));
                    count_left = (count_left + int64_t(1));
                } else {
                    sum_right = (sum_right + _index(residuals, i));
                    count_right = (count_right + int64_t(1));
                }
                i = (i + int64_t(1));
            }
            double left_val = 0.0;
            if ((count_left != int64_t(0))) {
                left_val = ((double)(sum_left) / ((double)(count_left)));
            }
            double right_val = 0.0;
            if ((count_right != int64_t(0))) {
                right_val = ((double)(sum_right) / ((double)(count_right)));
            }
            double error = 0.0;
            i = int64_t(0);
            while ((i < n_samples)) {
                double pred = ((_index(_index(features, i), j) <= t) ? left_val : right_val);
                double diff = (_index(residuals, i) - pred);
                error = (error + (diff * diff));
                i = (i + int64_t(1));
            }
            if ((error < best_error)) {
                best_error = error;
                best_feature = j;
                best_threshold = t;
                best_left = left_val;
                best_right = right_val;
            }
            t_index = (t_index + int64_t(1));
        }
        j = (j + int64_t(1));
    }
    return Stump{.feature = best_feature, .threshold = best_threshold, .left = best_left, .right = best_right};
}

std::vector<Stump> fit(int64_t n_estimators, double learning_rate, const std::vector<std::vector<double>>& features, const std::vector<double>& target) {
    std::vector<Stump> models = {};
    int64_t m = int64_t(0);
    while ((m < n_estimators)) {
        std::vector<double> preds = predict_raw(models, features, learning_rate);
        std::vector<double> grad = gradient(target, preds);
        std::vector<double> residuals = {};
        int64_t i = int64_t(0);
        while ((i < grad.size())) {
            residuals = ([&]{ auto& __tmp = residuals; __tmp.push_back(-_index(grad, i)); return __tmp; }());
            i = (i + int64_t(1));
        }
        Stump stump = train_stump(features, residuals);
        models = ([&]{ auto& __tmp = models; __tmp.push_back(stump); return __tmp; }());
        m = (m + int64_t(1));
    }
    return models;
}

double accuracy(const std::vector<double>& preds, const std::vector<double>& target) {
    int n = target.size();
    int64_t correct = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < n)) {
        if ((_index(preds, i) == _index(target, i))) {
            correct = (correct + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return ((double)((double)(correct)) / ((double)(n)));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        target = std::vector<double>{-1.0, -1.0, 1.0, 1.0};
        models = fit(int64_t(5), 0.5, features, target);
        predictions = predict(models, features, 0.5);
        acc = accuracy(predictions, target);
        std::cout << (std::string("Accuracy: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << acc; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
