// Generated by Mochi transpiler v0.10.67 on 2025-08-17 00:50:09 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct PCAResult;
struct Eigen;

std::ostream& operator<<(std::ostream&, const PCAResult&);
std::ostream& operator<<(std::ostream&, const Eigen&);


struct PCAResult {
    std::vector<std::vector<double>> transformed;
    std::vector<double> variance_ratio;
    auto operator<=>(const PCAResult&) const = default;
};

struct Eigen {
    std::vector<double> values;
    std::vector<std::vector<double>> vectors;
    auto operator<=>(const Eigen&) const = default;
};

std::ostream& operator<<(std::ostream& os, const PCAResult& v) {
    os << '{' << "'transformed': "<< "["; for(size_t i=0;i<v.transformed.size();++i){ if(i>0) os << ", "; os << v.transformed[i]; } os << "]"
 << ", " << "'variance_ratio': "<< "["; for(size_t i=0;i<v.variance_ratio.size();++i){ if(i>0) os << ", "; os << v.variance_ratio[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Eigen& v) {
    os << '{' << "'values': "<< "["; for(size_t i=0;i<v.values.size();++i){ if(i>0) os << ", "; os << v.values[i]; } os << "]"
 << ", " << "'vectors': "<< "["; for(size_t i=0;i<v.vectors.size();++i){ if(i>0) os << ", "; os << v.vectors[i]; } os << "]"
 << '}';
    return os;
}

double sqrt(double x);
double mean(const std::vector<double>& xs);
std::vector<std::vector<double>> standardize(const std::vector<std::vector<double>>& data);
std::vector<std::vector<double>> covariance_matrix(const std::vector<std::vector<double>>& data);
std::vector<double> normalize(const std::vector<double>& vec);
Eigen eigen_decomposition_2x2(const std::vector<std::vector<double>>& matrix);
std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& matrix);
std::vector<std::vector<double>> matrix_multiply(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
PCAResult apply_pca(const std::vector<std::vector<double>>& data, int64_t n_components);
int main();

std::vector<std::vector<double>> data = std::vector<std::vector<double>>{std::vector<double>{2.5, 2.4}, std::vector<double>{0.5, 0.7}, std::vector<double>{2.2, 2.9}, std::vector<double>{1.9, 2.2}, std::vector<double>{3.1, 3.0}, std::vector<double>{2.3, 2.7}, std::vector<double>{2.0, 1.6}, std::vector<double>{1.0, 1.1}, std::vector<double>{1.5, 1.6}, std::vector<double>{1.1, 0.9}};
PCAResult result = PCAResult{};
int64_t idx = int64_t(0);

double sqrt(double x) {
    double guess = ((x > 1.0) ? ((double)(x) / (2.0)) : 1.0);
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = (0.5 * (guess + ((double)(x) / (guess))));
        i = (i + int64_t(1));
    }
    return guess;
}

double mean(const std::vector<double>& xs) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        sum = (sum + _index(xs, i));
        i = (i + int64_t(1));
    }
    return ((double)(sum) / (xs.size()));
}

std::vector<std::vector<double>> standardize(const std::vector<std::vector<double>>& data) {
    int64_t n_samples = data.size();
    int64_t n_features = _index(data, int64_t(0)).size();
    std::vector<double> means = {};
    std::vector<double> stds = {};
    int64_t j = int64_t(0);
    while ((j < n_features)) {
        std::vector<double> column = {};
        int64_t i = int64_t(0);
        while ((i < n_samples)) {
            column = ([&]{ auto __tmp = column; __tmp.push_back(_index(_index(data, i), j)); return __tmp; }());
            i = (i + int64_t(1));
        }
        double m = mean(column);
        means = ([&]{ auto __tmp = means; __tmp.push_back(m); return __tmp; }());
        double variance = 0.0;
        int64_t k = int64_t(0);
        while ((k < n_samples)) {
            double diff = (_index(column, k) - m);
            variance = (variance + (diff * diff));
            k = (k + int64_t(1));
        }
        stds = ([&]{ auto __tmp = stds; __tmp.push_back(sqrt(((double)(variance) / ((n_samples - int64_t(1)))))); return __tmp; }());
        j = (j + int64_t(1));
    }
    std::vector<std::vector<double>> standardized = {};
    int64_t r = int64_t(0);
    while ((r < n_samples)) {
        std::vector<double> row = {};
        int64_t c = int64_t(0);
        while ((c < n_features)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(((double)((_index(_index(data, r), c) - _index(means, c))) / (_index(stds, c)))); return __tmp; }());
            c = (c + int64_t(1));
        }
        standardized = ([&]{ auto __tmp = standardized; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return standardized;
}

std::vector<std::vector<double>> covariance_matrix(const std::vector<std::vector<double>>& data) {
    int64_t n_samples = data.size();
    int64_t n_features = _index(data, int64_t(0)).size();
    std::vector<std::vector<double>> cov = {};
    int64_t i = int64_t(0);
    while ((i < n_features)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n_features)) {
            double sum = 0.0;
            int64_t k = int64_t(0);
            while ((k < n_samples)) {
                sum = (sum + (_index(_index(data, k), i) * _index(_index(data, k), j)));
                k = (k + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(((double)(sum) / ((n_samples - int64_t(1))))); return __tmp; }());
            j = (j + int64_t(1));
        }
        cov = ([&]{ auto __tmp = cov; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return cov;
}

std::vector<double> normalize(const std::vector<double>& vec) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < vec.size())) {
        sum = (sum + (_index(vec, i) * _index(vec, i)));
        i = (i + int64_t(1));
    }
    double n = sqrt(sum);
    std::vector<double> res = {};
    int64_t j = int64_t(0);
    while ((j < vec.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(((double)(_index(vec, j)) / (n))); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

Eigen eigen_decomposition_2x2(const std::vector<std::vector<double>>& matrix) {
    double a = _index(_index(matrix, int64_t(0)), int64_t(0));
    double b = _index(_index(matrix, int64_t(0)), int64_t(1));
    double c = _index(_index(matrix, int64_t(1)), int64_t(1));
    double diff = (a - c);
    double discriminant = sqrt(((diff * diff) + ((4.0 * b) * b)));
    double lambda1 = ((double)(((a + c) + discriminant)) / (2.0));
    double lambda2 = ((double)(((a + c) - discriminant)) / (2.0));
    std::vector<double> v1 = std::vector<double>{};
    std::vector<double> v2 = std::vector<double>{};
    if ((b != 0.0)) {
        v1 = normalize(std::vector<double>{(lambda1 - c), b});
        v2 = normalize(std::vector<double>{(lambda2 - c), b});
    } else {
        v1 = std::vector<double>{1.0, 0.0};
        v2 = std::vector<double>{0.0, 1.0};
    }
    std::vector<double> eigenvalues = std::vector<double>{lambda1, lambda2};
    std::vector<std::vector<double>> eigenvectors = std::vector<std::vector<double>>{v1, v2};
    if ((_index(eigenvalues, int64_t(0)) < _index(eigenvalues, int64_t(1)))) {
        double tmp_val = _index(eigenvalues, int64_t(0));
        eigenvalues[static_cast<size_t>(int64_t(0))] = _index(eigenvalues, int64_t(1));
        eigenvalues[static_cast<size_t>(int64_t(1))] = tmp_val;
        std::vector<double> tmp_vec = _index(eigenvectors, int64_t(0));
        eigenvectors[static_cast<size_t>(int64_t(0))] = _index(eigenvectors, int64_t(1));
        eigenvectors[static_cast<size_t>(int64_t(1))] = tmp_vec;
    }
    return Eigen{.values = eigenvalues, .vectors = eigenvectors};
}

std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& matrix) {
    int64_t rows = matrix.size();
    int64_t cols = _index(matrix, int64_t(0)).size();
    std::vector<std::vector<double>> trans = {};
    int64_t i = int64_t(0);
    while ((i < cols)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < rows)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(matrix, j), i)); return __tmp; }());
            j = (j + int64_t(1));
        }
        trans = ([&]{ auto __tmp = trans; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return trans;
}

std::vector<std::vector<double>> matrix_multiply(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int64_t rows_a = a.size();
    int64_t cols_a = _index(a, int64_t(0)).size();
    int64_t rows_b = b.size();
    int64_t cols_b = _index(b, int64_t(0)).size();
    if ((cols_a != rows_b)) {
        throw std::runtime_error(std::string("Incompatible matrices"));
    }
    std::vector<std::vector<double>> result = {};
    int64_t i = int64_t(0);
    while ((i < rows_a)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < cols_b)) {
            double sum = 0.0;
            int64_t k = int64_t(0);
            while ((k < cols_a)) {
                sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)));
                k = (k + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(sum); return __tmp; }());
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

PCAResult apply_pca(const std::vector<std::vector<double>>& data, int64_t n_components) {
    std::vector<std::vector<double>> standardized = standardize(data);
    std::vector<std::vector<double>> cov = covariance_matrix(standardized);
    Eigen eig = eigen_decomposition_2x2(cov);
    std::vector<double> eigenvalues = eig.values;
    std::vector<std::vector<double>> eigenvectors = eig.vectors;
    std::vector<std::vector<double>> components = transpose(eigenvectors);
    std::vector<std::vector<double>> transformed = matrix_multiply(standardized, components);
    double total = (_index(eigenvalues, int64_t(0)) + _index(eigenvalues, int64_t(1)));
    std::vector<double> ratios = {};
    int64_t i = int64_t(0);
    while ((i < n_components)) {
        ratios = ([&]{ auto __tmp = ratios; __tmp.push_back(((double)(_index(eigenvalues, i)) / (total))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return PCAResult{.transformed = transformed, .variance_ratio = ratios};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        result = apply_pca(data, int64_t(2));
        std::cout << std::string("Transformed Data (first 5 rows):");
        std::cout << std::endl;
        while ((idx < int64_t(5))) {
            { auto __tmp1 = _index(result.transformed, idx); std::cout << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp1[i]; } std::cout << "]"; }
            std::cout << std::endl;
            idx = (idx + int64_t(1));
        }
        std::cout << std::string("Explained Variance Ratio:");
        std::cout << std::endl;
        { auto __tmp2 = result.variance_ratio; std::cout << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp2[i]; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
