// Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:58:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::string to_lowercase(std::string s);
bool is_punct(std::string c);
std::string clean_text(std::string text, bool keep_newlines);
std::vector<std::string> split(std::string s, std::string sep);
bool contains(std::string s, std::string sub);
double _floor(double x);
double round3(double x);
double _ln(double x);
double log10(double x);
int64_t term_frequency(std::string term, std::string document);
std::vector<int64_t> document_frequency(std::string term, std::string corpus);
double inverse_document_frequency(int64_t df, int64_t n, bool smoothing);
double tf_idf(int64_t tf, double idf);
int main();

std::string LOWER = std::string("abcdefghijklmnopqrstuvwxyz");
std::string UPPER = std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
std::string PUNCT = std::string("!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~");
std::string corpus = std::string("This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus.");
double idf_val = 0;

std::string to_lowercase(std::string s) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string c = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s);
        int64_t j = int64_t(0);
        bool found = false;
        while ((j < UPPER.size())) {
            if ((c == ([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(UPPER))) {
                res = (res + ([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(LOWER));
                found = true;
                break;
            }
            j = (j + int64_t(1));
        }
        if (!found) {
            res = (res + c);
        }
        i = (i + int64_t(1));
    }
    return res;
}

bool is_punct(std::string c) {
    int64_t i = int64_t(0);
    while ((i < PUNCT.size())) {
        if ((c == ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(PUNCT))) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

std::string clean_text(std::string text, bool keep_newlines) {
    std::string lower = to_lowercase(text);
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < lower.size())) {
        std::string ch = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(lower);
        if (is_punct(ch)) {
        } else         if ((ch == std::string("\n"))) {
            if (keep_newlines) {
                res = (res + std::string("\n"));
            }
        } else {
            res = (res + ch);
        }

        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s);
        if ((ch == sep)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

bool contains(std::string s, std::string sub) {
    int64_t n = s.size();
    int64_t m = sub.size();
    if ((m == int64_t(0))) {
        return true;
    }
    int64_t i = int64_t(0);
    while ((i <= (n - m))) {
        int64_t j = int64_t(0);
        bool is_match = true;
        while ((j < m)) {
            if ((([&](const auto& __s){ auto __i = (i + j); if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(s) != ([&](const auto& __s){ auto __i = j; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(sub))) {
                is_match = false;
                break;
            }
            j = (j + int64_t(1));
        }
        if (is_match) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

double _floor(double x) {
    int64_t i = (int64_t)(x);
    if (((double)(i) > x)) {
        i = (i - int64_t(1));
    }
    return (double)(i);
}

double round3(double x) {
    return ((double)(std::floor(((x * 1000.0) + 0.5))) / (1000.0));
}

double _ln(double x) {
    double t = ((double)((x - 1.0)) / ((x + 1.0)));
    double term = t;
    double sum = 0.0;
    int64_t k = int64_t(1);
    while ((k <= int64_t(99))) {
        sum = (sum + ((double)(term) / ((double)(k))));
        term = ((term * t) * t);
        k = (k + int64_t(2));
    }
    return (2.0 * sum);
}

double log10(double x) {
    return ((double)(_ln(x)) / (_ln(10.0)));
}

int64_t term_frequency(std::string term, std::string document) {
    std::string clean = clean_text(document, false);
    std::vector<std::string> tokens = _split(clean, std::string(" "));
    std::string t = to_lowercase(term);
    int64_t count = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < tokens.size())) {
        if (((_index(tokens, i) != std::string("")) && (_index(tokens, i) == t))) {
            count = (count + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return count;
}

std::vector<int64_t> document_frequency(std::string term, std::string corpus) {
    std::string clean = clean_text(corpus, true);
    std::vector<std::string> docs = _split(clean, std::string("\n"));
    std::string t = to_lowercase(term);
    int64_t matches = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < docs.size())) {
        if (contains(_index(docs, i), t)) {
            matches = (matches + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return std::vector<int64_t>{matches, docs.size()};
}

double inverse_document_frequency(int64_t df, int64_t n, bool smoothing) {
    if (smoothing) {
        if ((n == int64_t(0))) {
            throw std::runtime_error(std::string("log10(0) is undefined."));
        }
        double ratio = ((double)((double)(n)) / ((1.0 + (double)(df))));
        double l = log10(ratio);
        double result = round3((1.0 + l));
        { std::ostringstream __ss; double __dv = result; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        return result;
    }
    if ((df == int64_t(0))) {
        throw std::runtime_error(std::string("df must be > 0"));
    }
    if ((n == int64_t(0))) {
        throw std::runtime_error(std::string("log10(0) is undefined."));
    }
    double ratio = ((double)((double)(n)) / ((double)(df)));
    double l = log10(ratio);
    double result = round3(l);
    { std::ostringstream __ss; double __dv = result; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    return result;
}

double tf_idf(int64_t tf, double idf) {
    double prod = ((double)(tf) * idf);
    double result = round3(prod);
    { std::ostringstream __ss; double __dv = result; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
    std::cout << std::endl;
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << term_frequency(std::string("to"), std::string("To be, or not to be"));
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = document_frequency(std::string("first"), corpus); ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        idf_val = inverse_document_frequency(int64_t(1), int64_t(3), false);
        tf_idf(int64_t(2), idf_val);
    }
    return 0;
}
