// Generated by Mochi transpiler v0.10.66 on 2025-08-14 17:50:30 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct PointLabel;
struct KNN;
struct DistLabel;

std::ostream& operator<<(std::ostream&, const PointLabel&);
std::ostream& operator<<(std::ostream&, const KNN&);
std::ostream& operator<<(std::ostream&, const DistLabel&);


struct PointLabel {
    std::vector<double> point;
    int64_t label;
    auto operator<=>(const PointLabel&) const = default;
};

struct KNN {
    std::vector<PointLabel> data;
    std::vector<std::string> labels;
    auto operator<=>(const KNN&) const = default;
};

struct DistLabel {
    double dist;
    int64_t label;
    auto operator<=>(const DistLabel&) const = default;
};

std::ostream& operator<<(std::ostream& os, const PointLabel& v) {
    os << '{' << "'point': "<< "["; for(size_t i=0;i<v.point.size();++i){ if(i>0) os << ", "; os << v.point[i]; } os << "]"
 << ", " << "'label': "<< v.label
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const KNN& v) {
    os << '{' << "'data': "<< "["; for(size_t i=0;i<v.data.size();++i){ if(i>0) os << ", "; os << v.data[i]; } os << "]"
 << ", " << "'labels': "<< "["; for(size_t i=0;i<v.labels.size();++i){ if(i>0) os << ", "; os << v.labels[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const DistLabel& v) {
    os << '{' << "'dist': "<< std::fixed << std::setprecision(1) << v.dist
 << ", " << "'label': "<< v.label
 << '}';
    return os;
}

double sqrtApprox(double x);
KNN make_knn(const std::vector<std::vector<double>>& train_data, const std::vector<int64_t>& train_target, const std::vector<std::string>& class_labels);
double euclidean_distance(const std::vector<double>& a, const std::vector<double>& b);
std::string classify(const KNN& knn, const std::vector<double>& pred_point, int64_t k);
int main();

std::vector<std::vector<double>> train_X = std::vector<std::vector<double>>{std::vector<double>{0.0, 0.0}, std::vector<double>{1.0, 0.0}, std::vector<double>{0.0, 1.0}, std::vector<double>{0.5, 0.5}, std::vector<double>{3.0, 3.0}, std::vector<double>{2.0, 3.0}, std::vector<double>{3.0, 2.0}};
std::vector<int64_t> train_y = std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(1), int64_t(1), int64_t(1)};
std::vector<std::string> classes = std::vector<std::string>{std::string("A"), std::string("B")};
KNN knn = KNN{};
std::vector<double> point = std::vector<double>{1.2, 1.2};

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

KNN make_knn(const std::vector<std::vector<double>>& train_data, const std::vector<int64_t>& train_target, const std::vector<std::string>& class_labels) {
    std::vector<PointLabel> items = {};
    int64_t i = int64_t(0);
    while ((i < train_data.size())) {
        PointLabel pl = PointLabel{.point = _index(train_data, i), .label = _index(train_target, i)};
        items = ([&]{ auto __tmp = items; __tmp.push_back(pl); return __tmp; }());
        i = (i + int64_t(1));
    }
    return KNN{.data = items, .labels = class_labels};
}

double euclidean_distance(const std::vector<double>& a, const std::vector<double>& b) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        double diff = (_index(a, i) - _index(b, i));
        sum = (sum + (diff * diff));
        i = (i + int64_t(1));
    }
    return sqrtApprox(sum);
}

std::string classify(const KNN& knn, const std::vector<double>& pred_point, int64_t k) {
    std::vector<DistLabel> distances = {};
    int64_t i = int64_t(0);
    while ((i < knn.data.size())) {
        double d = euclidean_distance(_index(knn.data, i).point, pred_point);
        distances = ([&]{ auto __tmp = distances; __tmp.push_back(DistLabel{.dist = d, .label = _index(knn.data, i).label}); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<int64_t> votes = {};
    int64_t count = int64_t(0);
    while ((count < k)) {
        int64_t min_index = int64_t(0);
        int64_t j = int64_t(1);
        while ((j < distances.size())) {
            if ((_index(distances, j).dist < _index(distances, min_index).dist)) {
                min_index = j;
            }
            j = (j + int64_t(1));
        }
        votes = ([&]{ auto __tmp = votes; __tmp.push_back(_index(distances, min_index).label); return __tmp; }());
        { auto& __tmp = distances[static_cast<size_t>(min_index)]; __tmp.dist = 1000000000000000000.0; }
        count = (count + int64_t(1));
    }
    std::vector<int64_t> tally = {};
    int64_t t = int64_t(0);
    while ((t < knn.labels.size())) {
        tally = ([&]{ auto __tmp = tally; __tmp.push_back(int64_t(0)); return __tmp; }());
        t = (t + int64_t(1));
    }
    int64_t v = int64_t(0);
    while ((v < votes.size())) {
        int64_t lbl = _index(votes, v);
        tally[static_cast<size_t>(lbl)] = (_index(tally, lbl) + int64_t(1));
        v = (v + int64_t(1));
    }
    int64_t max_idx = int64_t(0);
    int64_t m = int64_t(1);
    while ((m < tally.size())) {
        if ((_index(tally, m) > _index(tally, max_idx))) {
            max_idx = m;
        }
        m = (m + int64_t(1));
    }
    return _index(knn.labels, max_idx);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        knn = make_knn(train_X, train_y, classes);
        std::cout << classify(knn, point, int64_t(5));
        std::cout << std::endl;
    }
    return 0;
}
