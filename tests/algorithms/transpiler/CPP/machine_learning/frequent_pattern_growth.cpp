// Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:56:45 GMT+7
#include <iostream>
#include <string>
#include <any>
#include <map>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::any make_node(std::string name, int64_t count, std::any parent);
void update_header(std::any node_to_test, std::any target_node);
void update_tree(const std::vector<std::string>& items, std::any& in_tree, std::any& header_table, int64_t count);
std::vector<std::string> sort_items(const std::vector<std::string>& items, std::any header_table);
std::any create_tree(const std::vector<std::vector<std::string>>& data_set, int64_t min_sup);
std::vector<std::string> ascend_tree(std::any leaf_node, const std::vector<std::string>& path);
std::vector<std::any> find_prefix_path(std::string base_pat, std::any tree_node);
std::vector<std::vector<std::string>> mine_tree(std::any in_tree, std::any header_table, int64_t min_sup, const std::vector<std::string>& pre_fix, const std::vector<std::vector<std::string>>& freq_item_list);
std::string list_to_string(const std::vector<std::string>& xs);
int main();

std::any make_node(std::string name, int64_t count, std::any parent) {
    return std::map<std::string, std::any>{{"name", std::any(name)}, {"count", std::any(count)}, {"parent", std::any(parent)}, {"children", std::any({})}, {"node_link", std::any(nullptr)}};
}

void update_header(std::any node_to_test, std::any target_node) {
    std::any current = node_to_test;
    while ((any_to_string(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(current)[std::string("node_link")])) != any_to_string(nullptr))) {
        current = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(current)[std::string("node_link")]);
    }
    std::any_cast<std::map<std::string, std::any>&>(current)[std::string("node_link")] = target_node;
}

void update_tree(const std::vector<std::string>& items, std::any& in_tree, std::any& header_table, int64_t count) {
    std::string first = _index(items, int64_t(0));
    std::any children = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(in_tree)[std::string("children")]);
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(children, first)) {
        std::any child = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(children)[first]);
        std::any_cast<std::map<std::string, std::any>&>(child)[std::string("count")] = (std::any_cast<double>(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(child)[std::string("count")])) + count);
        std::any_cast<std::map<std::string, std::any>&>(children)[first] = child;
        std::any_cast<std::map<std::string, std::any>&>(in_tree)[std::string("children")] = children;
    } else {
        std::any new_node = make_node(first, count, in_tree);
        std::any_cast<std::map<std::string, std::any>&>(children)[first] = new_node;
        std::any_cast<std::map<std::string, std::any>&>(in_tree)[std::string("children")] = children;
        std::any entry = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(header_table)[first]);
        if ((any_to_string(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(entry)[std::string("node")])) == any_to_string(nullptr))) {
            std::any_cast<std::map<std::string, std::any>&>(entry)[std::string("node")] = new_node;
        } else {
            update_header(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(entry)[std::string("node")]), new_node);
        }
        std::any_cast<std::map<std::string, std::any>&>(header_table)[first] = entry;
    }
    if ((items.size() > int64_t(1))) {
        std::vector<std::string> rest = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), items.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+items.size()); })(items);
        ([&]{ auto __arg1 = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(children)[first]); return update_tree(rest, __arg1, header_table, count); }());
    }
}

std::vector<std::string> sort_items(const std::vector<std::string>& items, std::any header_table) {
    std::vector<std::string> arr = items;
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        int64_t j = (i + int64_t(1));
        while ((j < arr.size())) {
            if ((any_to_double(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(header_table)[_index(arr, i)]))[std::string("count")])) < any_to_double(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(header_table)[_index(arr, j)]))[std::string("count")])))) {
                std::string tmp = _index(arr, i);
                arr[static_cast<size_t>(i)] = _index(arr, j);
                arr[static_cast<size_t>(j)] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

std::any create_tree(const std::vector<std::vector<std::string>>& data_set, int64_t min_sup) {
    std::map<auto, auto> counts = {};
    int64_t i = int64_t(0);
    while ((i < data_set.size())) {
        std::vector<std::string> trans = _index(data_set, i);
        int64_t j = int64_t(0);
        while ((j < trans.size())) {
            std::string item = _index(trans, j);
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(counts, item)) {
                counts[static_cast<size_t>(item)] = (([&](const auto& __m){ auto __it = __m.find(item); if (__it == __m.end()) return auto{}; return __it->second; })(counts) + int64_t(1));
            } else {
                counts[static_cast<size_t>(item)] = int64_t(1);
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    std::map<auto, auto> header_table = {};
    for (const auto& __p : counts) {
        auto k = __p.first;
        auto cnt = ([&](const auto& __m){ auto __it = __m.find(k); if (__it == __m.end()) return auto{}; return __it->second; })(counts);
        if ((cnt >= min_sup)) {
            header_table[static_cast<size_t>(k)] = std::map<std::string, std::any>{{"count", std::any(cnt)}, {"node", std::any(nullptr)}};
        }
    }
    std::vector<int64_t> freq_items = {};
    for (const auto& __p : header_table) {
        auto k = __p.first;
        freq_items = ([&]{ auto __tmp = freq_items; __tmp.push_back((int64_t)k); return __tmp; }());
    }
    if ((freq_items.size() == int64_t(0))) {
        return std::map<std::string, std::any>{{"tree", std::any(make_node(std::string("Null Set"), int64_t(1), nullptr))}, {"header", std::any({})}};
    }
    std::any fp_tree = make_node(std::string("Null Set"), int64_t(1), nullptr);
    i = int64_t(0);
    while ((i < data_set.size())) {
        std::vector<std::string> tran = _index(data_set, i);
        std::vector<int64_t> local_items = {};
        int64_t j = int64_t(0);
        while ((j < tran.size())) {
            std::string item = _index(tran, j);
            if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(header_table, item)) {
                local_items = ([&]{ auto __tmp = local_items; __tmp.push_back((int64_t)item); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        if ((local_items.size() > int64_t(0))) {
            local_items = sort_items((std::vector<std::string>)(local_items), (std::any)(header_table));
            ([&]{ auto __arg2 = (std::any)(header_table); return update_tree((std::vector<std::string>)(local_items), fp_tree, __arg2, int64_t(1)); }());
        }
        i = (i + int64_t(1));
    }
    return std::map<std::string, std::any>{{"tree", std::any(fp_tree)}, {"header", std::any(header_table)}};
}

std::vector<std::string> ascend_tree(std::any leaf_node, const std::vector<std::string>& path) {
    std::vector<std::string> prefix = path;
    if ((any_to_string(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(leaf_node)[std::string("parent")])) != any_to_string(nullptr))) {
        prefix = ([&]{ auto __tmp = prefix; __tmp.push_back(std::any_cast<std::string>(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(leaf_node)[std::string("name")]))); return __tmp; }());
        prefix = ascend_tree(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(leaf_node)[std::string("parent")]), prefix);
    } else {
        prefix = ([&]{ auto __tmp = prefix; __tmp.push_back(std::any_cast<std::string>(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(leaf_node)[std::string("name")]))); return __tmp; }());
    }
    return prefix;
}

std::vector<std::any> find_prefix_path(std::string base_pat, std::any tree_node) {
    std::vector<int64_t> cond_pats = {};
    std::any node = tree_node;
    while ((any_to_string(node) != any_to_string(nullptr))) {
        std::vector<std::string> prefix = ascend_tree(node, std::vector<std::string>{});
        if ((prefix.size() > int64_t(1))) {
            std::vector<std::string> items = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), prefix.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+prefix.size()); })(prefix);
            cond_pats = ([&]{ auto __tmp = cond_pats; __tmp.push_back((int64_t)std::map<std::string, std::any>{{"items", std::any(items)}, {"count", std::any(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(node)[std::string("count")]))}}); return __tmp; }());
        }
        node = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(node)[std::string("node_link")]);
    }
    return cond_pats;
}

std::vector<std::vector<std::string>> mine_tree(std::any in_tree, std::any header_table, int64_t min_sup, const std::vector<std::string>& pre_fix, const std::vector<std::vector<std::string>>& freq_item_list) {
    std::vector<std::vector<std::string>> freq_list = freq_item_list;
    std::vector<int64_t> items = {};
    for (std::any k : header_table) {
        items = ([&]{ auto __tmp = items; __tmp.push_back(std::any_cast<int64_t>(k)); return __tmp; }());
    }
    std::vector<int64_t> sorted_items = items;
    int64_t i = int64_t(0);
    while ((i < sorted_items.size())) {
        int64_t j = (i + int64_t(1));
        while ((j < sorted_items.size())) {
            if ((any_to_double(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(std::any_cast<std::any>(std::any_cast<std::vector<int64_t>>(header_table)[static_cast<size_t>(_index(sorted_items, i))]))[std::string("count")])) > any_to_double(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(std::any_cast<std::any>(std::any_cast<std::vector<int64_t>>(header_table)[static_cast<size_t>(_index(sorted_items, j))]))[std::string("count")])))) {
                int64_t tmp = _index(sorted_items, i);
                sorted_items[static_cast<size_t>(i)] = _index(sorted_items, j);
                sorted_items[static_cast<size_t>(j)] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    int64_t idx = int64_t(0);
    while ((idx < sorted_items.size())) {
        int64_t base_pat = _index(sorted_items, idx);
        std::vector<std::string> new_freq = pre_fix;
        new_freq = ([&]{ auto __tmp = new_freq; __tmp.push_back((std::string)base_pat); return __tmp; }());
        freq_list = ([&]{ auto __tmp = freq_list; __tmp.push_back(new_freq); return __tmp; }());
        std::vector<std::any> cond_pats = find_prefix_path(std::string(1, base_pat), std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(std::any_cast<std::any>(std::any_cast<std::vector<int64_t>>(header_table)[static_cast<size_t>(base_pat)]))[std::string("node")]));
        std::vector<int64_t> cond_dataset = {};
        int64_t p = int64_t(0);
        while ((p < cond_pats.size())) {
            std::any pat = _index(cond_pats, p);
            int64_t r = int64_t(0);
            while ((r < any_to_double(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(pat)[std::string("count")])))) {
                cond_dataset = ([&]{ auto __tmp = cond_dataset; __tmp.push_back(std::any_cast<int64_t>(std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(pat)[std::string("items")]))); return __tmp; }());
                r = (r + int64_t(1));
            }
            p = (p + int64_t(1));
        }
        std::any res2 = create_tree((std::vector<std::vector<std::string>>)(cond_dataset), min_sup);
        std::any my_tree = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(res2)[std::string("tree")]);
        std::any my_head = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(res2)[std::string("header")]);
        if ((std::any_cast<std::string>(my_head).size() > int64_t(0))) {
            freq_list = mine_tree(my_tree, my_head, min_sup, new_freq, freq_list);
        }
        idx = (idx + int64_t(1));
    }
    return freq_list;
}

std::string list_to_string(const std::vector<std::string>& xs) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        s = (s + _index(xs, i));
        if ((i < (xs.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("]"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<std::string>> data_set = std::vector<std::vector<std::string>>{std::vector<std::string>{std::string("bread"), std::string("milk"), std::string("cheese")}, std::vector<std::string>{std::string("bread"), std::string("milk")}, std::vector<std::string>{std::string("bread"), std::string("diapers")}, std::vector<std::string>{std::string("bread"), std::string("milk"), std::string("diapers")}, std::vector<std::string>{std::string("milk"), std::string("diapers")}, std::vector<std::string>{std::string("milk"), std::string("cheese")}, std::vector<std::string>{std::string("diapers"), std::string("cheese")}, std::vector<std::string>{std::string("bread"), std::string("milk"), std::string("cheese"), std::string("diapers")}};
        std::any res = create_tree(data_set, int64_t(3));
        std::any fp_tree = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(res)[std::string("tree")]);
        std::any header_table = std::any_cast<std::any>(std::any_cast<std::map<std::string, std::any>>(res)[std::string("header")]);
        std::vector<int64_t> freq_items = {};
        freq_items = mine_tree(fp_tree, header_table, int64_t(3), std::vector<std::string>{}, (std::vector<std::vector<std::string>>)(freq_items));
        std::cout << data_set.size();
        std::cout << std::endl;
        std::cout << std::any_cast<std::string>(header_table).size();
        std::cout << std::endl;
        int64_t i = int64_t(0);
        while ((i < freq_items.size())) {
            std::cout << list_to_string((std::vector<std::string>)(_index(freq_items, i)));
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
