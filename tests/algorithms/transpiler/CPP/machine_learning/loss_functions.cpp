// Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:48:58 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double absf(double x);
double maxf(double a, double b);
double minf(double a, double b);
double clip(double x, double lo, double hi);
double to_float(int64_t x);
double powf(double base, double exp);
double _ln(double x);
double _exp(double x);
double mean(const std::vector<double>& v);
double binary_cross_entropy(const std::vector<double>& y_true, const std::vector<double>& y_pred, double epsilon);
double binary_focal_cross_entropy(const std::vector<double>& y_true, const std::vector<double>& y_pred, double gamma, double alpha, double epsilon);
double categorical_cross_entropy(const std::vector<std::vector<double>>& y_true, const std::vector<std::vector<double>>& y_pred, double epsilon);
double categorical_focal_cross_entropy(const std::vector<std::vector<double>>& y_true, const std::vector<std::vector<double>>& y_pred, const std::vector<double>& alpha, double gamma, double epsilon);
double hinge_loss(const std::vector<double>& y_true, const std::vector<double>& y_pred);
double huber_loss(const std::vector<double>& y_true, const std::vector<double>& y_pred, double delta);
double mean_squared_error(const std::vector<double>& y_true, const std::vector<double>& y_pred);
double mean_absolute_error(const std::vector<double>& y_true, const std::vector<double>& y_pred);
double mean_squared_logarithmic_error(const std::vector<double>& y_true, const std::vector<double>& y_pred);
double mean_absolute_percentage_error(const std::vector<double>& y_true, const std::vector<double>& y_pred, double epsilon);
double perplexity_loss(const std::vector<std::vector<int64_t>>& y_true, const std::vector<std::vector<std::vector<double>>>& y_pred, double epsilon);
double smooth_l1_loss(const std::vector<double>& y_true, const std::vector<double>& y_pred, double beta);
double kullback_leibler_divergence(const std::vector<double>& y_true, const std::vector<double>& y_pred);
int main();

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double maxf(double a, double b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

double minf(double a, double b) {
    if ((a < b)) {
        return a;
    }
    return b;
}

double clip(double x, double lo, double hi) {
    return maxf(lo, minf(x, hi));
}

double to_float(int64_t x) {
    return (x * 1.0);
}

double powf(double base, double exp) {
    double result = 1.0;
    int64_t i = int64_t(0);
    int64_t n = (int64_t)(exp);
    while ((i < n)) {
        result = (result * base);
        i = (i + int64_t(1));
    }
    return result;
}

double _ln(double x) {
    if ((x <= 0.0)) {
        throw std::runtime_error(std::string("ln domain error"));
    }
    double y = ((double)((x - 1.0)) / ((x + 1.0)));
    double y2 = (y * y);
    double term = y;
    double sum = 0.0;
    int64_t k = int64_t(0);
    while ((k < int64_t(10))) {
        double denom = (double)(((int64_t(2) * k) + int64_t(1)));
        sum = (sum + ((double)(term) / (denom)));
        term = (term * y2);
        k = (k + int64_t(1));
    }
    return (2.0 * sum);
}

double _exp(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(20))) {
        term = ((double)((term * x)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double mean(const std::vector<double>& v) {
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < v.size())) {
        total = (total + _index(v, i));
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(v.size())));
}

double binary_cross_entropy(const std::vector<double>& y_true, const std::vector<double>& y_pred, double epsilon) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    std::vector<double> losses = {};
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double yt = _index(y_true, i);
        double yp = clip(_index(y_pred, i), epsilon, (1.0 - epsilon));
        double loss = -((yt * _ln(yp)) + ((1.0 - yt) * _ln((1.0 - yp))));
        losses = ([&]{ auto __tmp = losses; __tmp.push_back(loss); return __tmp; }());
        i = (i + int64_t(1));
    }
    return mean(losses);
}

double binary_focal_cross_entropy(const std::vector<double>& y_true, const std::vector<double>& y_pred, double gamma, double alpha, double epsilon) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    std::vector<double> losses = {};
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double yt = _index(y_true, i);
        double yp = clip(_index(y_pred, i), epsilon, (1.0 - epsilon));
        double term1 = (((alpha * powf((1.0 - yp), gamma)) * yt) * _ln(yp));
        double term2 = ((((1.0 - alpha) * powf(yp, gamma)) * (1.0 - yt)) * _ln((1.0 - yp)));
        losses = ([&]{ auto __tmp = losses; __tmp.push_back(-(term1 + term2)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return mean(losses);
}

double categorical_cross_entropy(const std::vector<std::vector<double>>& y_true, const std::vector<std::vector<double>>& y_pred, double epsilon) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same shape."));
    }
    int64_t rows = y_true.size();
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < rows)) {
        if ((_index(y_true, i).size() != _index(y_pred, i).size())) {
            throw std::runtime_error(std::string("Input arrays must have the same shape."));
        }
        double sum_true = 0.0;
        double sum_pred = 0.0;
        int64_t j = int64_t(0);
        while ((j < _index(y_true, i).size())) {
            double yt = _index(_index(y_true, i), j);
            double yp = _index(_index(y_pred, i), j);
            if (((yt != 0.0) && (yt != 1.0))) {
                throw std::runtime_error(std::string("y_true must be one-hot encoded."));
            }
            sum_true = (sum_true + yt);
            sum_pred = (sum_pred + yp);
            j = (j + int64_t(1));
        }
        if ((sum_true != 1.0)) {
            throw std::runtime_error(std::string("y_true must be one-hot encoded."));
        }
        if ((absf((sum_pred - 1.0)) > epsilon)) {
            throw std::runtime_error(std::string("Predicted probabilities must sum to approximately 1."));
        }
        j = int64_t(0);
        while ((j < _index(y_true, i).size())) {
            double yp = clip(_index(_index(y_pred, i), j), epsilon, 1.0);
            total = (total - (_index(_index(y_true, i), j) * _ln(yp)));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return total;
}

double categorical_focal_cross_entropy(const std::vector<std::vector<double>>& y_true, const std::vector<std::vector<double>>& y_pred, const std::vector<double>& alpha, double gamma, double epsilon) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Shape of y_true and y_pred must be the same."));
    }
    int64_t rows = y_true.size();
    int64_t cols = _index(y_true, int64_t(0)).size();
    std::vector<double> a = alpha;
    if ((a.size() == int64_t(0))) {
        std::vector<double> tmp = {};
        int64_t j = int64_t(0);
        while ((j < cols)) {
            tmp = ([&]{ auto __tmp = tmp; __tmp.push_back(1.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        a = tmp;
    }
    if ((a.size() != cols)) {
        throw std::runtime_error(std::string("Length of alpha must match the number of classes."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < rows)) {
        if (((_index(y_true, i).size() != cols) || (_index(y_pred, i).size() != cols))) {
            throw std::runtime_error(std::string("Shape of y_true and y_pred must be the same."));
        }
        double sum_true = 0.0;
        double sum_pred = 0.0;
        int64_t j = int64_t(0);
        while ((j < cols)) {
            double yt = _index(_index(y_true, i), j);
            double yp = _index(_index(y_pred, i), j);
            if (((yt != 0.0) && (yt != 1.0))) {
                throw std::runtime_error(std::string("y_true must be one-hot encoded."));
            }
            sum_true = (sum_true + yt);
            sum_pred = (sum_pred + yp);
            j = (j + int64_t(1));
        }
        if ((sum_true != 1.0)) {
            throw std::runtime_error(std::string("y_true must be one-hot encoded."));
        }
        if ((absf((sum_pred - 1.0)) > epsilon)) {
            throw std::runtime_error(std::string("Predicted probabilities must sum to approximately 1."));
        }
        double row_loss = 0.0;
        j = int64_t(0);
        while ((j < cols)) {
            double yp = clip(_index(_index(y_pred, i), j), epsilon, 1.0);
            row_loss = (row_loss + (((_index(a, j) * powf((1.0 - yp), gamma)) * _index(_index(y_true, i), j)) * _ln(yp)));
            j = (j + int64_t(1));
        }
        total = (total - row_loss);
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(rows)));
}

double hinge_loss(const std::vector<double>& y_true, const std::vector<double>& y_pred) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Length of predicted and actual array must be same."));
    }
    std::vector<double> losses = {};
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double yt = _index(y_true, i);
        if (((yt != -1.0) && (yt != 1.0))) {
            throw std::runtime_error(std::string("y_true can have values -1 or 1 only."));
        }
        double pred = _index(y_pred, i);
        double l = maxf(0.0, (1.0 - (yt * pred)));
        losses = ([&]{ auto __tmp = losses; __tmp.push_back(l); return __tmp; }());
        i = (i + int64_t(1));
    }
    return mean(losses);
}

double huber_loss(const std::vector<double>& y_true, const std::vector<double>& y_pred, double delta) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double diff = (_index(y_true, i) - _index(y_pred, i));
        double adiff = absf(diff);
        if ((adiff <= delta)) {
            total = (total + ((0.5 * diff) * diff));
        } else {
            total = (total + (delta * (adiff - (0.5 * delta))));
        }
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(y_true.size())));
}

double mean_squared_error(const std::vector<double>& y_true, const std::vector<double>& y_pred) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    std::vector<double> losses = {};
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double diff = (_index(y_true, i) - _index(y_pred, i));
        losses = ([&]{ auto __tmp = losses; __tmp.push_back((diff * diff)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return mean(losses);
}

double mean_absolute_error(const std::vector<double>& y_true, const std::vector<double>& y_pred) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        total = (total + absf((_index(y_true, i) - _index(y_pred, i))));
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(y_true.size())));
}

double mean_squared_logarithmic_error(const std::vector<double>& y_true, const std::vector<double>& y_pred) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double a = _ln((1.0 + _index(y_true, i)));
        double b = _ln((1.0 + _index(y_pred, i)));
        double diff = (a - b);
        total = (total + (diff * diff));
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(y_true.size())));
}

double mean_absolute_percentage_error(const std::vector<double>& y_true, const std::vector<double>& y_pred, double epsilon) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("The length of the two arrays should be the same."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double yt = _index(y_true, i);
        if ((yt == 0.0)) {
            yt = epsilon;
        }
        total = (total + absf(((double)((yt - _index(y_pred, i))) / (yt))));
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(y_true.size())));
}

double perplexity_loss(const std::vector<std::vector<int64_t>>& y_true, const std::vector<std::vector<std::vector<double>>>& y_pred, double epsilon) {
    int64_t batch = y_true.size();
    if ((batch != y_pred.size())) {
        throw std::runtime_error(std::string("Batch size of y_true and y_pred must be equal."));
    }
    int64_t sentence_len = _index(y_true, int64_t(0)).size();
    if ((sentence_len != _index(y_pred, int64_t(0)).size())) {
        throw std::runtime_error(std::string("Sentence length of y_true and y_pred must be equal."));
    }
    int64_t vocab_size = _index(_index(y_pred, int64_t(0)), int64_t(0)).size();
    int64_t b = int64_t(0);
    double total_perp = 0.0;
    while ((b < batch)) {
        if (((_index(y_true, b).size() != sentence_len) || (_index(y_pred, b).size() != sentence_len))) {
            throw std::runtime_error(std::string("Sentence length of y_true and y_pred must be equal."));
        }
        double sum_log = 0.0;
        int64_t j = int64_t(0);
        while ((j < sentence_len)) {
            int64_t label = _index(_index(y_true, b), j);
            if ((label >= vocab_size)) {
                throw std::runtime_error(std::string("Label value must not be greater than vocabulary size."));
            }
            double prob = clip(_index(_index(_index(y_pred, b), j), label), epsilon, 1.0);
            sum_log = (sum_log + _ln(prob));
            j = (j + int64_t(1));
        }
        double mean_log = ((double)(sum_log) / ((double)(sentence_len)));
        double perp = _exp(-mean_log);
        total_perp = (total_perp + perp);
        b = (b + int64_t(1));
    }
    return ((double)(total_perp) / ((double)(batch)));
}

double smooth_l1_loss(const std::vector<double>& y_true, const std::vector<double>& y_pred, double beta) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("The length of the two arrays should be the same."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        double diff = absf((_index(y_true, i) - _index(y_pred, i)));
        if ((diff < beta)) {
            total = (total + ((double)(((0.5 * diff) * diff)) / (beta)));
        } else {
            total = ((total + diff) - (0.5 * beta));
        }
        i = (i + int64_t(1));
    }
    return ((double)(total) / ((double)(y_true.size())));
}

double kullback_leibler_divergence(const std::vector<double>& y_true, const std::vector<double>& y_pred) {
    if ((y_true.size() != y_pred.size())) {
        throw std::runtime_error(std::string("Input arrays must have the same length."));
    }
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < y_true.size())) {
        total = (total + (_index(y_true, i) * _ln(((double)(_index(y_true, i)) / (_index(y_pred, i))))));
        i = (i + int64_t(1));
    }
    return total;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<double> y_true_bc = std::vector<double>{0.0, 1.0, 1.0, 0.0, 1.0};
        std::vector<double> y_pred_bc = std::vector<double>{0.2, 0.7, 0.9, 0.3, 0.8};
        { std::ostringstream __ss; double __dv = binary_cross_entropy(y_true_bc, y_pred_bc, 1e-15); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = binary_focal_cross_entropy(y_true_bc, y_pred_bc, 2.0, 0.25, 1e-15); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<std::vector<double>> y_true_cce = std::vector<std::vector<double>>{std::vector<double>{1.0, 0.0, 0.0}, std::vector<double>{0.0, 1.0, 0.0}, std::vector<double>{0.0, 0.0, 1.0}};
        std::vector<std::vector<double>> y_pred_cce = std::vector<std::vector<double>>{std::vector<double>{0.9, 0.1, 0.0}, std::vector<double>{0.2, 0.7, 0.1}, std::vector<double>{0.0, 0.1, 0.9}};
        { std::ostringstream __ss; double __dv = categorical_cross_entropy(y_true_cce, y_pred_cce, 1e-15); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<double> alpha = std::vector<double>{0.6, 0.2, 0.7};
        { std::ostringstream __ss; double __dv = categorical_focal_cross_entropy(y_true_cce, y_pred_cce, alpha, 2.0, 1e-15); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<double> y_true_hinge = std::vector<double>{-1.0, 1.0, 1.0, -1.0, 1.0};
        std::vector<double> y_pred_hinge = std::vector<double>{-4.0, -0.3, 0.7, 5.0, 10.0};
        { std::ostringstream __ss; double __dv = hinge_loss(y_true_hinge, y_pred_hinge); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<double> y_true_huber = std::vector<double>{0.9, 10.0, 2.0, 1.0, 5.2};
        std::vector<double> y_pred_huber = std::vector<double>{0.8, 2.1, 2.9, 4.2, 5.2};
        { std::ostringstream __ss; double __dv = huber_loss(y_true_huber, y_pred_huber, 1.0); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = mean_squared_error(y_true_huber, y_pred_huber); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = mean_absolute_error(y_true_huber, y_pred_huber); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = mean_squared_logarithmic_error(y_true_huber, y_pred_huber); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<double> y_true_mape = std::vector<double>{10.0, 20.0, 30.0, 40.0};
        std::vector<double> y_pred_mape = std::vector<double>{12.0, 18.0, 33.0, 45.0};
        { std::ostringstream __ss; double __dv = mean_absolute_percentage_error(y_true_mape, y_pred_mape, 1e-15); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<std::vector<int64_t>> y_true_perp = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(4)}, std::vector<int64_t>{int64_t(2), int64_t(3)}};
        std::vector<std::vector<std::vector<double>>> y_pred_perp = std::vector<std::vector<std::vector<double>>>{std::vector<std::vector<double>>{std::vector<double>{0.28, 0.19, 0.21, 0.15, 0.17}, std::vector<double>{0.24, 0.19, 0.09, 0.18, 0.3}}, std::vector<std::vector<double>>{std::vector<double>{0.03, 0.26, 0.21, 0.18, 0.32}, std::vector<double>{0.28, 0.1, 0.33, 0.15, 0.14}}};
        { std::ostringstream __ss; double __dv = perplexity_loss(y_true_perp, y_pred_perp, 1e-07); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<double> y_true_smooth = std::vector<double>{3.0, 5.0, 2.0, 7.0};
        std::vector<double> y_pred_smooth = std::vector<double>{2.9, 4.8, 2.1, 7.2};
        { std::ostringstream __ss; double __dv = smooth_l1_loss(y_true_smooth, y_pred_smooth, 1.0); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::vector<double> y_true_kl = std::vector<double>{0.2, 0.3, 0.5};
        std::vector<double> y_pred_kl = std::vector<double>{0.3, 0.3, 0.4};
        { std::ostringstream __ss; double __dv = kullback_leibler_divergence(y_true_kl, y_pred_kl); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
