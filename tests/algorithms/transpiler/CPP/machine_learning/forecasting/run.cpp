// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:06:53 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double int_to_float(int64_t x);
double abs_float(double x);
double exp_approx(double x);
int64_t floor_int(double x);
double dot(const std::vector<double>& a, const std::vector<double>& b);
std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& m);
std::vector<std::vector<double>> matmul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
std::vector<double> matvec(const std::vector<std::vector<double>>& a, const std::vector<double>& b);
std::vector<std::vector<double>> identity(int64_t n);
std::vector<std::vector<double>> invert(const std::vector<std::vector<double>>& mat);
std::vector<double> normal_equation(const std::vector<std::vector<double>>& X, const std::vector<double>& y);
double linear_regression_prediction(const std::vector<double>& train_dt, const std::vector<double>& train_usr, const std::vector<double>& train_mtch, const std::vector<double>& test_dt, const std::vector<double>& test_mtch);
double sarimax_predictor(const std::vector<double>& train_user, const std::vector<double>& train_match, const std::vector<double>& test_match);
double rbf_kernel(const std::vector<double>& a, const std::vector<double>& b, double gamma);
double support_vector_regressor(const std::vector<std::vector<double>>& x_train, const std::vector<std::vector<double>>& x_test, const std::vector<double>& train_user);
std::vector<double> set_at_float(const std::vector<double>& xs, int64_t idx, double value);
std::vector<double> sort_float(const std::vector<double>& xs);
double percentile(const std::vector<double>& data, double q);
double interquartile_range_checker(const std::vector<double>& train_user);
bool data_safety_checker(const std::vector<double>& list_vote, double actual_result);
int main();

double int_to_float(int64_t x) {
    return (x * 1.0);
}

double abs_float(double x) {
    if ((x < 0.0)) {
        return (0.0 - x);
    }
    return x;
}

double exp_approx(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        term = ((double)((term * x)) / (int_to_float(i)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

int64_t floor_int(double x) {
    int64_t i = int64_t(0);
    while ((int_to_float((i + int64_t(1))) <= x)) {
        i = (i + int64_t(1));
    }
    return i;
}

double dot(const std::vector<double>& a, const std::vector<double>& b) {
    double s = 0.0;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        s = (s + (_index(a, i) * _index(b, i)));
        i = (i + int64_t(1));
    }
    return s;
}

std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& m) {
    int rows = m.size();
    int cols = _index(m, int64_t(0)).size();
    std::vector<std::vector<double>> res = {};
    int64_t j = int64_t(0);
    while ((j < cols)) {
        std::vector<double> row = {};
        int64_t i = int64_t(0);
        while ((i < rows)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(_index(_index(m, i), j)); return __tmp; }());
            i = (i + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        j = (j + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> matmul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int n = a.size();
    int m = _index(b, int64_t(0)).size();
    int p = b.size();
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m)) {
            double s = 0.0;
            int64_t k = int64_t(0);
            while ((k < p)) {
                s = (s + (_index(_index(a, i), k) * _index(_index(b, k), j)));
                k = (k + int64_t(1));
            }
            row = ([&]{ auto& __tmp = row; __tmp.push_back(s); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> matvec(const std::vector<std::vector<double>>& a, const std::vector<double>& b) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        res = ([&]{ auto& __tmp = res; __tmp.push_back(dot(_index(a, i), b)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> identity(int64_t n) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(((i == j) ? 1.0 : 0.0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto& __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> invert(const std::vector<std::vector<double>>& mat) {
    int n = mat.size();
    std::vector<std::vector<double>> a = mat;
    std::vector<std::vector<double>> inv = identity((int64_t)(n));
    int64_t i = int64_t(0);
    while ((i < n)) {
        double pivot = _index(_index(a, i), i);
        int64_t j = int64_t(0);
        while ((j < n)) {
            a[i][j] = ((double)(_index(_index(a, i), j)) / (pivot));
            inv[i][j] = ((double)(_index(_index(inv, i), j)) / (pivot));
            j = (j + int64_t(1));
        }
        int64_t k = int64_t(0);
        while ((k < n)) {
            if ((k != i)) {
                double factor = _index(_index(a, k), i);
                j = int64_t(0);
                while ((j < n)) {
                    a[k][j] = (_index(_index(a, k), j) - (factor * _index(_index(a, i), j)));
                    inv[k][j] = (_index(_index(inv, k), j) - (factor * _index(_index(inv, i), j)));
                    j = (j + int64_t(1));
                }
            }
            k = (k + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return inv;
}

std::vector<double> normal_equation(const std::vector<std::vector<double>>& X, const std::vector<double>& y) {
    std::vector<std::vector<double>> Xt = transpose(X);
    std::vector<std::vector<double>> XtX = matmul(Xt, X);
    std::vector<std::vector<double>> XtX_inv = invert(XtX);
    std::vector<double> Xty = matvec(Xt, y);
    return matvec(XtX_inv, Xty);
}

double linear_regression_prediction(const std::vector<double>& train_dt, const std::vector<double>& train_usr, const std::vector<double>& train_mtch, const std::vector<double>& test_dt, const std::vector<double>& test_mtch) {
    std::vector<std::vector<double>> X = {};
    int64_t i = int64_t(0);
    while ((i < train_dt.size())) {
        X = ([&]{ auto& __tmp = X; __tmp.push_back(std::vector<double>{1.0, _index(train_dt, i), _index(train_mtch, i)}); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<double> beta = normal_equation(X, train_usr);
    return abs_float(((_index(beta, int64_t(0)) + (_index(test_dt, int64_t(0)) * _index(beta, int64_t(1)))) + (_index(test_mtch, int64_t(0)) * _index(beta, int64_t(2)))));
}

double sarimax_predictor(const std::vector<double>& train_user, const std::vector<double>& train_match, const std::vector<double>& test_match) {
    int n = train_user.size();
    std::vector<std::vector<double>> X = {};
    std::vector<double> y = {};
    int64_t i = int64_t(1);
    while ((i < n)) {
        X = ([&]{ auto& __tmp = X; __tmp.push_back(std::vector<double>{1.0, _index(train_user, (i - int64_t(1))), _index(train_match, i)}); return __tmp; }());
        y = ([&]{ auto& __tmp = y; __tmp.push_back(_index(train_user, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<double> beta = normal_equation(X, y);
    return ((_index(beta, int64_t(0)) + (_index(beta, int64_t(1)) * train_user[static_cast<size_t>((n - int64_t(1)))])) + (_index(beta, int64_t(2)) * _index(test_match, int64_t(0))));
}

double rbf_kernel(const std::vector<double>& a, const std::vector<double>& b, double gamma) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        double diff = (_index(a, i) - _index(b, i));
        sum = (sum + (diff * diff));
        i = (i + int64_t(1));
    }
    return exp_approx((-gamma * sum));
}

double support_vector_regressor(const std::vector<std::vector<double>>& x_train, const std::vector<std::vector<double>>& x_test, const std::vector<double>& train_user) {
    double gamma = 0.1;
    std::vector<double> weights = {};
    int64_t i = int64_t(0);
    while ((i < x_train.size())) {
        weights = ([&]{ auto& __tmp = weights; __tmp.push_back(rbf_kernel(_index(x_train, i), _index(x_test, int64_t(0)), gamma)); return __tmp; }());
        i = (i + int64_t(1));
    }
    double num = 0.0;
    double den = 0.0;
    i = int64_t(0);
    while ((i < train_user.size())) {
        num = (num + (_index(weights, i) * _index(train_user, i)));
        den = (den + _index(weights, i));
        i = (i + int64_t(1));
    }
    return ((double)(num) / (den));
}

std::vector<double> set_at_float(const std::vector<double>& xs, int64_t idx, double value) {
    int64_t i = int64_t(0);
    std::vector<double> res = {};
    while ((i < xs.size())) {
        if ((i == idx)) {
            res = ([&]{ auto& __tmp = res; __tmp.push_back(value); return __tmp; }());
        } else {
            res = ([&]{ auto& __tmp = res; __tmp.push_back(_index(xs, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> sort_float(const std::vector<double>& xs) {
    std::vector<double> res = xs;
    int64_t i = int64_t(1);
    while ((i < res.size())) {
        double key = _index(res, i);
        int64_t j = (i - int64_t(1));
        while (((j >= int64_t(0)) && (_index(res, j) > key))) {
            res = set_at_float(res, (j + int64_t(1)), _index(res, j));
            j = (j - int64_t(1));
        }
        res = set_at_float(res, (j + int64_t(1)), key);
        i = (i + int64_t(1));
    }
    return res;
}

double percentile(const std::vector<double>& data, double q) {
    std::vector<double> sorted = sort_float(data);
    int n = sorted.size();
    double pos = (((double)(q) / (100.0)) * int_to_float((int64_t)((n - int64_t(1)))));
    int64_t idx = floor_int(pos);
    double frac = (pos - int_to_float(idx));
    if (((idx + int64_t(1)) < n)) {
        return ((_index(sorted, idx) * (1.0 - frac)) + (_index(sorted, (idx + int64_t(1))) * frac));
    }
    return _index(sorted, idx);
}

double interquartile_range_checker(const std::vector<double>& train_user) {
    double q1 = percentile(train_user, 25.0);
    double q3 = percentile(train_user, 75.0);
    double iqr = (q3 - q1);
    return (q1 - (iqr * 0.1));
}

bool data_safety_checker(const std::vector<double>& list_vote, double actual_result) {
    int64_t safe = int64_t(0);
    int64_t not_safe = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < list_vote.size())) {
        double v = _index(list_vote, i);
        if ((v > actual_result)) {
            safe = (not_safe + int64_t(1));
        } else         if ((abs_float((abs_float(v) - abs_float(actual_result))) <= 0.1)) {
            safe = (safe + int64_t(1));
        } else {
            not_safe = (not_safe + int64_t(1));
        }

        i = (i + int64_t(1));
    }
    return (safe > not_safe);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<double> vote = std::vector<double>{linear_regression_prediction(std::vector<double>{2.0, 3.0, 4.0, 5.0}, std::vector<double>{5.0, 3.0, 4.0, 6.0}, std::vector<double>{3.0, 1.0, 2.0, 4.0}, std::vector<double>{2.0}, std::vector<double>{2.0}), sarimax_predictor(std::vector<double>{4.0, 2.0, 6.0, 8.0}, std::vector<double>{3.0, 1.0, 2.0, 4.0}, std::vector<double>{2.0}), support_vector_regressor(std::vector<std::vector<double>>{std::vector<double>{5.0, 2.0}, std::vector<double>{1.0, 5.0}, std::vector<double>{6.0, 2.0}}, std::vector<std::vector<double>>{std::vector<double>{3.0, 2.0}}, std::vector<double>{2.0, 1.0, 4.0})};
        { std::ostringstream __ss; double __dv = _index(vote, int64_t(0)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = _index(vote, int64_t(1)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = _index(vote, int64_t(2)); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        std::cout << (data_safety_checker(vote, 5.0) ? "true" : "false");
        std::cout << std::endl;
    }
    return 0;
}
