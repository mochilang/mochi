// Generated by Mochi transpiler v0.10.66 on 2025-08-16 11:58:02 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double sinApprox(double x);
double cosApprox(double x);
double expApprox(double x);
double _ln(double x);
double log10(double x);
double sqrtApprox(double x);
double absf(double x);
std::vector<double> normalize(const std::vector<double>& audio);
std::vector<double> dft(const std::vector<double>& frame, int64_t bins);
std::vector<std::vector<double>> triangular_filters(int64_t bins, int64_t spectrum_size);
std::vector<double> dot(const std::vector<std::vector<double>>& mat, const std::vector<double>& vec);
std::vector<std::vector<double>> discrete_cosine_transform(int64_t dct_filter_num, int64_t filter_num);
std::vector<double> mfcc(const std::vector<double>& audio, int64_t bins, int64_t dct_num);
int main();

double PI = 3.141592653589793;
int64_t sample_rate = int64_t(8000);
int64_t size = int64_t(16);
std::vector<double> audio = {};
int64_t n = int64_t(0);
std::vector<double> coeffs = std::vector<double>{};

double sinApprox(double x) {
    double term = x;
    double sum = x;
    int64_t n = int64_t(1);
    while ((n <= int64_t(10))) {
        double denom = (double)(((int64_t(2) * n) * ((int64_t(2) * n) + int64_t(1))));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double cosApprox(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n <= int64_t(10))) {
        double denom = (double)((((int64_t(2) * n) - int64_t(1)) * (int64_t(2) * n)));
        term = ((double)(((-term * x) * x)) / (denom));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double expApprox(double x) {
    double sum = 1.0;
    double term = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(10))) {
        term = ((double)((term * x)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

double _ln(double x) {
    double t = ((double)((x - 1.0)) / ((x + 1.0)));
    double term = t;
    double sum = 0.0;
    int64_t n = int64_t(1);
    while ((n <= int64_t(19))) {
        sum = (sum + ((double)(term) / ((double)(n))));
        term = ((term * t) * t);
        n = (n + int64_t(2));
    }
    return (2.0 * sum);
}

double log10(double x) {
    return ((double)(_ln(x)) / (_ln(10.0)));
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

std::vector<double> normalize(const std::vector<double>& audio) {
    double max_val = 0.0;
    int64_t i = int64_t(0);
    while ((i < audio.size())) {
        double v = absf(_index(audio, i));
        if ((v > max_val)) {
            max_val = v;
        }
        i = (i + int64_t(1));
    }
    std::vector<double> res = {};
    i = int64_t(0);
    while ((i < audio.size())) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(((double)(_index(audio, i)) / (max_val))); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<double> dft(const std::vector<double>& frame, int64_t bins) {
    int64_t N = frame.size();
    std::vector<double> spec = {};
    int64_t k = int64_t(0);
    while ((k < bins)) {
        double real = 0.0;
        double imag = 0.0;
        int64_t n = int64_t(0);
        while ((n < N)) {
            double angle = ((double)((((-2.0 * PI) * (double)(k)) * (double)(n))) / ((double)(N)));
            real = (real + (_index(frame, n) * cosApprox(angle)));
            imag = (imag + (_index(frame, n) * sinApprox(angle)));
            n = (n + int64_t(1));
        }
        spec = ([&]{ auto __tmp = spec; __tmp.push_back(((real * real) + (imag * imag))); return __tmp; }());
        k = (k + int64_t(1));
    }
    return spec;
}

std::vector<std::vector<double>> triangular_filters(int64_t bins, int64_t spectrum_size) {
    std::vector<std::vector<double>> filters = {};
    int64_t b = int64_t(0);
    while ((b < bins)) {
        int64_t center = (((b + int64_t(1)) * spectrum_size) / (bins + int64_t(1)));
        std::vector<double> filt = {};
        int64_t i = int64_t(0);
        while ((i < spectrum_size)) {
            double v = 0.0;
            if ((i <= center)) {
                v = ((double)((double)(i)) / ((double)(center)));
            } else {
                v = ((double)((double)((spectrum_size - i))) / ((double)((spectrum_size - center))));
            }
            filt = ([&]{ auto __tmp = filt; __tmp.push_back(v); return __tmp; }());
            i = (i + int64_t(1));
        }
        filters = ([&]{ auto __tmp = filters; __tmp.push_back(filt); return __tmp; }());
        b = (b + int64_t(1));
    }
    return filters;
}

std::vector<double> dot(const std::vector<std::vector<double>>& mat, const std::vector<double>& vec) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        double sum = 0.0;
        int64_t j = int64_t(0);
        while ((j < vec.size())) {
            sum = (sum + (_index(_index(mat, i), j) * _index(vec, j)));
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(sum); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> discrete_cosine_transform(int64_t dct_filter_num, int64_t filter_num) {
    std::vector<std::vector<double>> basis = {};
    int64_t i = int64_t(0);
    while ((i < dct_filter_num)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < filter_num)) {
            if ((i == int64_t(0))) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(((double)(1.0) / (sqrtApprox((double)(filter_num))))); return __tmp; }());
            } else {
                double angle = ((double)((((double)(((int64_t(2) * j) + int64_t(1))) * (double)(i)) * PI)) / ((2.0 * (double)(filter_num))));
                row = ([&]{ auto __tmp = row; __tmp.push_back((cosApprox(angle) * sqrtApprox(((double)(2.0) / ((double)(filter_num)))))); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        basis = ([&]{ auto __tmp = basis; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return basis;
}

std::vector<double> mfcc(const std::vector<double>& audio, int64_t bins, int64_t dct_num) {
    std::vector<double> norm = normalize(audio);
    std::vector<double> spec = dft(norm, (bins + int64_t(2)));
    std::vector<std::vector<double>> filters = triangular_filters(bins, spec.size());
    std::vector<double> energies = dot(filters, spec);
    std::vector<double> logfb = {};
    int64_t i = int64_t(0);
    while ((i < energies.size())) {
        logfb = ([&]{ auto __tmp = logfb; __tmp.push_back((10.0 * log10((_index(energies, i) + 1e-10)))); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<double>> dct_basis = discrete_cosine_transform(dct_num, bins);
    std::vector<double> res = dot(dct_basis, logfb);
    if ((res.size() == int64_t(0))) {
        res = std::vector<double>{0.0, 0.0, 0.0};
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((n < size)) {
            double t = ((double)((double)(n)) / ((double)(sample_rate)));
            audio = ([&]{ auto __tmp = audio; __tmp.push_back(sinApprox((((2.0 * PI) * 440.0) * t))); return __tmp; }());
            n = (n + int64_t(1));
        }
        coeffs = mfcc(audio, int64_t(5), int64_t(3));
        for (double c : coeffs) {
            { std::ostringstream __ss; double __dv = c; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
            std::cout << std::endl;
        }
    }
    return 0;
}
