// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:42:13 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Point;
struct Node;

std::ostream& operator<<(std::ostream&, const Point&);
std::ostream& operator<<(std::ostream&, const Node&);


struct Point {
    int64_t x;
    int64_t y;
    auto operator<=>(const Point&) const = default;
};

struct Node {
    Point pos;
    Point parent;
    int64_t g;
    int64_t h;
    int64_t f;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Point& v) {
    os << '{' << "'x': "<< v.x
 << ", " << "'y': "<< v.y
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'pos': "<< v.pos
 << ", " << "'parent': "<< v.parent
 << ", " << "'g': "<< v.g
 << ", " << "'h': "<< v.h
 << ", " << "'f': "<< v.f
 << '}';
    return os;
}

std::vector<Point> get_neighbours(const Point& p, int64_t x_limit, int64_t y_limit);
bool contains(const std::vector<Node>& nodes, const Point& p);
Node get_node(const std::vector<Node>& nodes, const Point& p);
std::vector<Point> astar(int64_t x_limit, int64_t y_limit, const Point& start, const Point& goal);
std::vector<std::vector<int64_t>> create_world(int64_t x_limit, int64_t y_limit);
void mark_path(std::vector<std::vector<int64_t>>& world, const std::vector<Point>& path);
void print_world(const std::vector<std::vector<int64_t>>& world);
int main();

int64_t world_x = int64_t(5);
int64_t world_y = int64_t(5);
Point start = Point{.x = int64_t(0), .y = int64_t(0)};
Point goal = Point{.x = int64_t(4), .y = int64_t(4)};
std::vector<Point> path = std::vector<Point>{};
std::vector<std::vector<int64_t>> world = std::vector<std::vector<int64_t>>{};

std::vector<Point> get_neighbours(const Point& p, int64_t x_limit, int64_t y_limit) {
    std::vector<Point> deltas = std::vector<Point>{Point{.x = (int64_t(0) - int64_t(1)), .y = (int64_t(0) - int64_t(1))}, Point{.x = (int64_t(0) - int64_t(1)), .y = int64_t(0)}, Point{.x = (int64_t(0) - int64_t(1)), .y = int64_t(1)}, Point{.x = int64_t(0), .y = (int64_t(0) - int64_t(1))}, Point{.x = int64_t(0), .y = int64_t(1)}, Point{.x = int64_t(1), .y = (int64_t(0) - int64_t(1))}, Point{.x = int64_t(1), .y = int64_t(0)}, Point{.x = int64_t(1), .y = int64_t(1)}};
    std::vector<Point> neighbours = {};
    for (Point d : deltas) {
        int64_t nx = (p.x + d.x);
        int64_t ny = (p.y + d.y);
        if (((((int64_t(0) <= nx) && (nx < x_limit)) && (int64_t(0) <= ny)) && (ny < y_limit))) {
            neighbours = ([&]{ auto __tmp = neighbours; __tmp.push_back(Point{.x = nx, .y = ny}); return __tmp; }());
        }
    }
    return neighbours;
}

bool contains(const std::vector<Node>& nodes, const Point& p) {
    for (Node n : nodes) {
        if (((n.pos.x == p.x) && (n.pos.y == p.y))) {
            return true;
        }
    }
    return false;
}

Node get_node(const std::vector<Node>& nodes, const Point& p) {
    for (Node n : nodes) {
        if (((n.pos.x == p.x) && (n.pos.y == p.y))) {
            return n;
        }
    }
    return Node{.pos = p, .parent = Point{.x = (int64_t(0) - int64_t(1)), .y = (int64_t(0) - int64_t(1))}, .g = int64_t(0), .h = int64_t(0), .f = int64_t(0)};
}

std::vector<Point> astar(int64_t x_limit, int64_t y_limit, const Point& start, const Point& goal) {
    std::vector<Node> open = {};
    std::vector<Node> closed = {};
    open = ([&]{ auto __tmp = open; __tmp.push_back(Node{.pos = start, .parent = Point{.x = (int64_t(0) - int64_t(1)), .y = (int64_t(0) - int64_t(1))}, .g = int64_t(0), .h = int64_t(0), .f = int64_t(0)}); return __tmp; }());
    Node current = _index(open, int64_t(0));
    while ((open.size() > int64_t(0))) {
        int64_t min_index = int64_t(0);
        int64_t i = int64_t(1);
        while ((i < open.size())) {
            if ((_index(open, i).f < _index(open, min_index).f)) {
                min_index = i;
            }
            i = (i + int64_t(1));
        }
        current = _index(open, min_index);
        std::vector<Node> new_open = {};
        int64_t j = int64_t(0);
        while ((j < open.size())) {
            if ((j != min_index)) {
                new_open = ([&]{ auto __tmp = new_open; __tmp.push_back(_index(open, j)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        open = new_open;
        closed = ([&]{ auto __tmp = closed; __tmp.push_back(current); return __tmp; }());
        if (((current.pos.x == goal.x) && (current.pos.y == goal.y))) {
            break;
        }
        std::vector<Point> neighbours = get_neighbours(current.pos, x_limit, y_limit);
        for (Point np : neighbours) {
            if (contains(closed, np)) {
                continue;
            }
            int64_t g = (current.g + int64_t(1));
            int64_t dx = (goal.x - np.x);
            int64_t dy = (goal.y - np.y);
            int64_t h = ((dx * dx) + (dy * dy));
            int64_t f = (g + h);
            bool skip = false;
            for (Node node : open) {
                if ((((node.pos.x == np.x) && (node.pos.y == np.y)) && (node.f < f))) {
                    skip = true;
                }
            }
            if (skip) {
                continue;
            }
            open = ([&]{ auto __tmp = open; __tmp.push_back(Node{.pos = np, .parent = current.pos, .g = g, .h = h, .f = f}); return __tmp; }());
        }
    }
    std::vector<Point> path = {};
    path = ([&]{ auto __tmp = path; __tmp.push_back(current.pos); return __tmp; }());
    while (!((current.parent.x == (int64_t(0) - int64_t(1))) && (current.parent.y == (int64_t(0) - int64_t(1))))) {
        current = get_node(closed, current.parent);
        path = ([&]{ auto __tmp = path; __tmp.push_back(current.pos); return __tmp; }());
    }
    std::vector<Point> rev = {};
    int64_t k = (path.size() - int64_t(1));
    while ((k >= int64_t(0))) {
        rev = ([&]{ auto __tmp = rev; __tmp.push_back(_index(path, k)); return __tmp; }());
        k = (k - int64_t(1));
    }
    return rev;
}

std::vector<std::vector<int64_t>> create_world(int64_t x_limit, int64_t y_limit) {
    std::vector<std::vector<int64_t>> world = {};
    int64_t i = int64_t(0);
    while ((i < x_limit)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < y_limit)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        world = ([&]{ auto __tmp = world; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return world;
}

void mark_path(std::vector<std::vector<int64_t>>& world, const std::vector<Point>& path) {
    for (Point p : path) {
        world[static_cast<size_t>(p.x)][static_cast<size_t>(p.y)] = int64_t(1);
    }
}

void print_world(const std::vector<std::vector<int64_t>>& world) {
    for (std::vector<int64_t> row : world) {
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = row; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        path = astar(world_x, world_y, start, goal);
        std::cout << ((((((((std::string("path from (") + ([&]{ std::ostringstream ss; ss << std::boolalpha << start.x; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << start.y; return ss.str(); }())) + std::string(") to (")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << goal.x; return ss.str(); }())) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << goal.y; return ss.str(); }())) + std::string(")"));
        std::cout << std::endl;
        world = create_world(world_x, world_y);
        mark_path(world, path);
        print_world(world);
    }
    return 0;
}
