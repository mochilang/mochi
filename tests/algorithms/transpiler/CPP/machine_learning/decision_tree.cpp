// Generated by Mochi transpiler v0.10.65 on 2025-08-14 16:43:14 GMT+7
#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Tree;
struct Leaf;
struct Branch;

std::ostream& operator<<(std::ostream&, const Tree&);
std::ostream& operator<<(std::ostream&, const Leaf&);
std::ostream& operator<<(std::ostream&, const Branch&);


struct Tree {
    virtual ~Tree() = default;
};

struct Leaf : Tree {
    double prediction;
    Leaf(double prediction_) : prediction(prediction_) {}
    auto operator<=>(const Leaf&) const = default;
};

struct Branch : Tree {
    double decision_boundary;
    std::shared_ptr<Tree> left;
    std::shared_ptr<Tree> right;
    Branch(double decision_boundary_, std::shared_ptr<Tree> left_, std::shared_ptr<Tree> right_) : decision_boundary(decision_boundary_), left(std::move(left_)), right(std::move(right_)) {}
    auto operator<=>(const Branch&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Leaf& v) {
    os << '{' << "'prediction': "<< std::fixed << std::setprecision(1) << v.prediction
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Branch& v) {
    os << '{' << "'decision_boundary': "<< std::fixed << std::setprecision(1) << v.decision_boundary
 << ", " << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

double _mod(double x, double m);
double sin(double x);
double _rand();
double mean(const std::vector<double>& vals);
double mean_squared_error(const std::vector<double>& labels, double prediction);
std::shared_ptr<Tree> train_tree(const std::vector<double>& x, const std::vector<double>& y, int64_t depth, int64_t min_leaf_size);
double predict(Tree* tree, double value);
int main();

double PI = 3.141592653589793;
double TWO_PI = 6.283185307179586;
int64_t seed = int64_t(123456789);

double _mod(double x, double m) {
    return (x - ((double)((int64_t)(((double)(x) / (m)))) * m));
}

double sin(double x) {
    double y = (_mod((x + PI), TWO_PI) - PI);
    double y2 = (y * y);
    double y3 = (y2 * y);
    double y5 = (y3 * y2);
    double y7 = (y5 * y2);
    return (((y - ((double)(y3) / (6.0))) + ((double)(y5) / (120.0))) - ((double)(y7) / (5040.0)));
}

double _rand() {
    seed = (((int64_t(1103515245) * seed) + int64_t(12345)) % int64_t(2147483648));
    return ((double)((double)(seed)) / (2147483648.0));
}

double mean(const std::vector<double>& vals) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < vals.size())) {
        sum = (sum + _index(vals, i));
        i = (i + int64_t(1));
    }
    return ((double)(sum) / (vals.size()));
}

double mean_squared_error(const std::vector<double>& labels, double prediction) {
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < labels.size())) {
        double diff = (_index(labels, i) - prediction);
        total = (total + (diff * diff));
        i = (i + int64_t(1));
    }
    return ((double)(total) / (labels.size()));
}

std::shared_ptr<Tree> train_tree(const std::vector<double>& x, const std::vector<double>& y, int64_t depth, int64_t min_leaf_size) {
    if ((x.size() < (int64_t(2) * min_leaf_size))) {
        return std::make_shared<Leaf>(mean(y));
    }
    if ((depth == int64_t(1))) {
        return std::make_shared<Leaf>(mean(y));
    }
    int64_t best_split = int64_t(0);
    double min_error = (mean_squared_error(x, mean(y)) * 2.0);
    int64_t i = int64_t(0);
    while ((i < x.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(x).size() < min_leaf_size)) {
            i = i;
        } else {
            if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, x.size() - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+x.size()); })(x).size() < min_leaf_size)) {
                i = i;
            } else {
                double err_left = mean_squared_error(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(x), mean(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), i - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+i); })(y)));
                double err_right = mean_squared_error(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, x.size() - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+x.size()); })(x), mean(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, y.size() - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+y.size()); })(y)));
                double err = (err_left + err_right);
                if ((err < min_error)) {
                    best_split = i;
                    min_error = err;
                }
            }
        }
        i = (i + int64_t(1));
    }
    if ((best_split != int64_t(0))) {
        std::vector<double> left_x = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), best_split - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+best_split); })(x);
        std::vector<double> left_y = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), best_split - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+best_split); })(y);
        std::vector<double> right_x = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(best_split, x.size() - best_split); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+best_split, __v.begin()+x.size()); })(x);
        std::vector<double> right_y = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(best_split, y.size() - best_split); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+best_split, __v.begin()+y.size()); })(y);
        double boundary = _index(x, best_split);
        std::shared_ptr<Tree> left_tree = train_tree(left_x, left_y, (depth - int64_t(1)), min_leaf_size);
        std::shared_ptr<Tree> right_tree = train_tree(right_x, right_y, (depth - int64_t(1)), min_leaf_size);
        return std::make_shared<Branch>(boundary, left_tree, right_tree);
    }
    return std::make_shared<Leaf>(mean(y));
}

double predict(Tree* tree, double value) {
    return ([=]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(tree);
    if (__leaf) {
        double p = __leaf->prediction;
        return p;
    }
    const Branch* __branch = dynamic_cast<const Branch*>(tree);
    if (__branch) {
        double b = __branch->decision_boundary;
        Tree* l = __branch->left.get();
        Tree* r = __branch->right.get();
        return ((value >= b) ? predict(r, value) : predict(l, value));
    }
    return 0.0;
}());
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<double> x = {};
        double v = -1.0;
        while ((v < 1.0)) {
            x = ([&]{ auto __tmp = x; __tmp.push_back(v); return __tmp; }());
            v = (v + 0.005);
        }
        std::vector<double> y = {};
        int64_t i = int64_t(0);
        while ((i < x.size())) {
            y = ([&]{ auto __tmp = y; __tmp.push_back(sin(_index(x, i))); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::shared_ptr<Tree> tree = train_tree(x, y, int64_t(10), int64_t(10));
        std::vector<double> test_cases = {};
        i = int64_t(0);
        while ((i < int64_t(10))) {
            test_cases = ([&]{ auto __tmp = test_cases; __tmp.push_back(((_rand() * 2.0) - 1.0)); return __tmp; }());
            i = (i + int64_t(1));
        }
        std::vector<double> predictions = {};
        i = int64_t(0);
        while ((i < test_cases.size())) {
            predictions = ([&]{ auto __tmp = predictions; __tmp.push_back(predict(tree.get(), _index(test_cases, i))); return __tmp; }());
            i = (i + int64_t(1));
        }
        double sum_err = 0.0;
        i = int64_t(0);
        while ((i < test_cases.size())) {
            double diff = (_index(predictions, i) - _index(test_cases, i));
            sum_err = (sum_err + (diff * diff));
            i = (i + int64_t(1));
        }
        double avg_error = ((double)(sum_err) / (test_cases.size()));
        std::cout << (std::string("Test values: ") + ([&]{ std::ostringstream ss; { auto __tmp1 = test_cases; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Predictions: ") + ([&]{ std::ostringstream ss; { auto __tmp2 = predictions; ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) ss << ' '; ss << __tmp2[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Average error: ") + _to_string(avg_error));
        std::cout << std::endl;
    }
    return 0;
}
