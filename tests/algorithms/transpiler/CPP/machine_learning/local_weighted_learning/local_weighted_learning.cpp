// Generated by Mochi transpiler v0.10.67 on 2025-08-16 21:28:11 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <any>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
static void any_to_json(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << '"' << std::any_cast<std::string>(val) << '"';
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; os << '"' << v[i] << '"'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ', '; any_to_json(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) {
        const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val);
        os << '{'; bool first=true;
        for(const auto& p : m){ if(!first) os << ', '; first=false; os << '"' << p.first << '"' << ": "; any_to_json(os, p.second); }
        os << '}'; }
    else os << "null";
}
template<typename T> static void _json(const T& v) { any_to_json(std::cout, std::any(v)); std::cout << std::endl; }
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double expApprox(double x);
std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& mat);
std::vector<std::vector<double>> matMul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
std::vector<std::vector<double>> matInv(const std::vector<std::vector<double>>& mat);
std::vector<std::vector<double>> weight_matrix(const std::vector<double>& point, const std::vector<std::vector<double>>& x_train, double tau);
std::vector<std::vector<double>> local_weight(const std::vector<double>& point, const std::vector<std::vector<double>>& x_train, const std::vector<double>& y_train, double tau);
std::vector<double> local_weight_regression(const std::vector<std::vector<double>>& x_train, const std::vector<double>& y_train, double tau);
int main();

std::vector<std::vector<double>> x_train = std::vector<std::vector<double>>{std::vector<double>{16.99, 10.34}, std::vector<double>{21.01, 23.68}, std::vector<double>{24.59, 25.69}};
std::vector<double> y_train = std::vector<double>{1.01, 1.66, 3.5};
std::vector<double> preds = std::vector<double>{};

double expApprox(double x) {
    if ((x < 0.0)) {
        return ((double)(1.0) / (expApprox(-x)));
    }
    if ((x > 1.0)) {
        double half = expApprox(((double)(x) / (2.0)));
        return (half * half);
    }
    double sum = 1.0;
    double term = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(20))) {
        term = ((double)((term * x)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>>& mat) {
    int64_t rows = mat.size();
    int64_t cols = _index(mat, int64_t(0)).size();
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < cols)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < rows)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(mat, j), i)); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> matMul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    int64_t a_rows = a.size();
    int64_t a_cols = _index(a, int64_t(0)).size();
    int64_t b_cols = _index(b, int64_t(0)).size();
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < a_rows)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < b_cols)) {
            double sum = 0.0;
            int64_t k = int64_t(0);
            while ((k < a_cols)) {
                sum = (sum + (_index(_index(a, i), k) * _index(_index(b, k), j)));
                k = (k + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(sum); return __tmp; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __tmp = res; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> matInv(const std::vector<std::vector<double>>& mat) {
    int64_t n = mat.size();
    std::vector<std::vector<double>> aug = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(mat, i), j)); return __tmp; }());
            j = (j + int64_t(1));
        }
        j = int64_t(0);
        while ((j < n)) {
            if ((i == j)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(1.0); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        aug = ([&]{ auto __tmp = aug; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t col = int64_t(0);
    while ((col < n)) {
        double pivot = _index(_index(aug, col), col);
        if ((pivot == 0.0)) {
            throw std::runtime_error(std::string("Matrix is singular"));
        }
        int64_t j = int64_t(0);
        while ((j < (int64_t(2) * n))) {
            aug[static_cast<size_t>(col)][static_cast<size_t>(j)] = ((double)(_index(_index(aug, col), j)) / (pivot));
            j = (j + int64_t(1));
        }
        int64_t r = int64_t(0);
        while ((r < n)) {
            if ((r != col)) {
                double factor = _index(_index(aug, r), col);
                j = int64_t(0);
                while ((j < (int64_t(2) * n))) {
                    aug[static_cast<size_t>(r)][static_cast<size_t>(j)] = (_index(_index(aug, r), j) - (factor * _index(_index(aug, col), j)));
                    j = (j + int64_t(1));
                }
            }
            r = (r + int64_t(1));
        }
        col = (col + int64_t(1));
    }
    std::vector<std::vector<double>> inv = {};
    i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(_index(_index(aug, i), (j + n))); return __tmp; }());
            j = (j + int64_t(1));
        }
        inv = ([&]{ auto __tmp = inv; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return inv;
}

std::vector<std::vector<double>> weight_matrix(const std::vector<double>& point, const std::vector<std::vector<double>>& x_train, double tau) {
    int64_t m = x_train.size();
    std::vector<std::vector<double>> weights = {};
    int64_t i = int64_t(0);
    while ((i < m)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < m)) {
            if ((i == j)) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(1.0); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        weights = ([&]{ auto __tmp = weights; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < m)) {
        double diff_sq = 0.0;
        int64_t k = int64_t(0);
        while ((k < point.size())) {
            double diff = (_index(point, k) - _index(_index(x_train, j), k));
            diff_sq = (diff_sq + (diff * diff));
            k = (k + int64_t(1));
        }
        weights[static_cast<size_t>(j)][static_cast<size_t>(j)] = expApprox(((double)(-diff_sq) / (((2.0 * tau) * tau))));
        j = (j + int64_t(1));
    }
    return weights;
}

std::vector<std::vector<double>> local_weight(const std::vector<double>& point, const std::vector<std::vector<double>>& x_train, const std::vector<double>& y_train, double tau) {
    std::vector<std::vector<double>> w = weight_matrix(point, x_train, tau);
    std::vector<std::vector<double>> x_t = transpose(x_train);
    std::vector<std::vector<double>> x_t_w = matMul(x_t, w);
    std::vector<std::vector<double>> x_t_w_x = matMul(x_t_w, x_train);
    std::vector<std::vector<double>> inv_part = matInv(x_t_w_x);
    std::vector<std::vector<double>> y_col = {};
    int64_t i = int64_t(0);
    while ((i < y_train.size())) {
        y_col = ([&]{ auto __tmp = y_col; __tmp.push_back(std::vector<double>{_index(y_train, i)}); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::vector<std::vector<double>> x_t_w_y = matMul(x_t_w, y_col);
    return matMul(inv_part, x_t_w_y);
}

std::vector<double> local_weight_regression(const std::vector<std::vector<double>>& x_train, const std::vector<double>& y_train, double tau) {
    int64_t m = x_train.size();
    std::vector<double> preds = {};
    int64_t i = int64_t(0);
    while ((i < m)) {
        std::vector<std::vector<double>> theta = local_weight(_index(x_train, i), x_train, y_train, tau);
        std::vector<double> weights_vec = {};
        int64_t k = int64_t(0);
        while ((k < theta.size())) {
            weights_vec = ([&]{ auto __tmp = weights_vec; __tmp.push_back(_index(_index(theta, k), int64_t(0))); return __tmp; }());
            k = (k + int64_t(1));
        }
        double pred = 0.0;
        int64_t j = int64_t(0);
        while ((j < _index(x_train, i).size())) {
            pred = (pred + (_index(_index(x_train, i), j) * _index(weights_vec, j)));
            j = (j + int64_t(1));
        }
        preds = ([&]{ auto __tmp = preds; __tmp.push_back(pred); return __tmp; }());
        i = (i + int64_t(1));
    }
    return preds;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        preds = local_weight_regression(x_train, y_train, 0.6);
        _json(preds);
    }
    return 0;
}
