// Generated by Mochi transpiler v0.10.67 on 2025-08-16 19:49:33 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double dot(const std::vector<double>& a, const std::vector<double>& b);
double maxf(double a, double b);
double minf(double a, double b);
double absf(double x);
double predict_raw(const std::vector<std::vector<double>>& samples, const std::vector<double>& labels, const std::vector<double>& alphas, double b, const std::vector<double>& x);
std::vector<std::vector<double>> smo_train(const std::vector<std::vector<double>>& samples, const std::vector<double>& labels, double c, double tol, int64_t max_passes);
double predict(const std::vector<std::vector<double>>& samples, const std::vector<double>& labels, const std::vector<std::vector<double>>& model, const std::vector<double>& x);
int main();

std::vector<std::vector<double>> samples = std::vector<std::vector<double>>{std::vector<double>{2.0, 2.0}, std::vector<double>{1.5, 1.5}, std::vector<double>{0.0, 0.0}, std::vector<double>{0.5, 0.0}};
std::vector<double> labels = std::vector<double>{1.0, 1.0, -1.0, -1.0};
std::vector<std::vector<double>> model = std::vector<std::vector<double>>{};

double dot(const std::vector<double>& a, const std::vector<double>& b) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        sum = (sum + (_index(a, i) * _index(b, i)));
        i = (i + int64_t(1));
    }
    return sum;
}

double maxf(double a, double b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

double minf(double a, double b) {
    if ((a < b)) {
        return a;
    }
    return b;
}

double absf(double x) {
    if ((x >= 0.0)) {
        return x;
    }
    return (0.0 - x);
}

double predict_raw(const std::vector<std::vector<double>>& samples, const std::vector<double>& labels, const std::vector<double>& alphas, double b, const std::vector<double>& x) {
    double res = 0.0;
    int64_t i = int64_t(0);
    while ((i < samples.size())) {
        res = (res + ((_index(alphas, i) * _index(labels, i)) * dot(_index(samples, i), x)));
        i = (i + int64_t(1));
    }
    return (res + b);
}

std::vector<std::vector<double>> smo_train(const std::vector<std::vector<double>>& samples, const std::vector<double>& labels, double c, double tol, int64_t max_passes) {
    int64_t m = samples.size();
    std::vector<double> alphas = {};
    int64_t i = int64_t(0);
    while ((i < m)) {
        alphas = ([&]{ auto __tmp = alphas; __tmp.push_back(0.0); return __tmp; }());
        i = (i + int64_t(1));
    }
    double b = 0.0;
    int64_t passes = int64_t(0);
    while ((passes < max_passes)) {
        int64_t num_changed = int64_t(0);
        int64_t i1 = int64_t(0);
        while ((i1 < m)) {
            double Ei = (predict_raw(samples, labels, alphas, b, _index(samples, i1)) - _index(labels, i1));
            if (((((_index(labels, i1) * Ei) < (0.0 - tol)) && (_index(alphas, i1) < c)) || (((_index(labels, i1) * Ei) > tol) && (_index(alphas, i1) > 0.0)))) {
                int64_t i2 = ((i1 + int64_t(1)) % m);
                double Ej = (predict_raw(samples, labels, alphas, b, _index(samples, i2)) - _index(labels, i2));
                double alpha1_old = _index(alphas, i1);
                double alpha2_old = _index(alphas, i2);
                double L = 0.0;
                double H = 0.0;
                if ((_index(labels, i1) != _index(labels, i2))) {
                    L = maxf(0.0, (alpha2_old - alpha1_old));
                    H = minf(c, ((c + alpha2_old) - alpha1_old));
                } else {
                    L = maxf(0.0, ((alpha2_old + alpha1_old) - c));
                    H = minf(c, (alpha2_old + alpha1_old));
                }
                if ((L == H)) {
                    i1 = (i1 + int64_t(1));
                    continue;
                }
                double eta = (((2.0 * dot(_index(samples, i1), _index(samples, i2))) - dot(_index(samples, i1), _index(samples, i1))) - dot(_index(samples, i2), _index(samples, i2)));
                if ((eta >= 0.0)) {
                    i1 = (i1 + int64_t(1));
                    continue;
                }
                alphas[static_cast<size_t>(i2)] = (alpha2_old - ((double)((_index(labels, i2) * (Ei - Ej))) / (eta)));
                if ((_index(alphas, i2) > H)) {
                    alphas[static_cast<size_t>(i2)] = H;
                }
                if ((_index(alphas, i2) < L)) {
                    alphas[static_cast<size_t>(i2)] = L;
                }
                if ((absf((_index(alphas, i2) - alpha2_old)) < 1e-05)) {
                    i1 = (i1 + int64_t(1));
                    continue;
                }
                alphas[static_cast<size_t>(i1)] = (alpha1_old + ((_index(labels, i1) * _index(labels, i2)) * (alpha2_old - _index(alphas, i2))));
                double b1 = (((b - Ei) - ((_index(labels, i1) * (_index(alphas, i1) - alpha1_old)) * dot(_index(samples, i1), _index(samples, i1)))) - ((_index(labels, i2) * (_index(alphas, i2) - alpha2_old)) * dot(_index(samples, i1), _index(samples, i2))));
                double b2 = (((b - Ej) - ((_index(labels, i1) * (_index(alphas, i1) - alpha1_old)) * dot(_index(samples, i1), _index(samples, i2)))) - ((_index(labels, i2) * (_index(alphas, i2) - alpha2_old)) * dot(_index(samples, i2), _index(samples, i2))));
                if (((_index(alphas, i1) > 0.0) && (_index(alphas, i1) < c))) {
                    b = b1;
                } else                 if (((_index(alphas, i2) > 0.0) && (_index(alphas, i2) < c))) {
                    b = b2;
                } else {
                    b = ((double)((b1 + b2)) / (2.0));
                }

                num_changed = (num_changed + int64_t(1));
            }
            i1 = (i1 + int64_t(1));
        }
        if ((num_changed == int64_t(0))) {
            passes = (passes + int64_t(1));
        } else {
            passes = int64_t(0);
        }
    }
    return std::vector<std::vector<double>>{alphas, std::vector<double>{b}};
}

double predict(const std::vector<std::vector<double>>& samples, const std::vector<double>& labels, const std::vector<std::vector<double>>& model, const std::vector<double>& x) {
    std::vector<double> alphas = _index(model, int64_t(0));
    double b = _index(_index(model, int64_t(1)), int64_t(0));
    double val = predict_raw(samples, labels, alphas, b, x);
    if ((val >= 0.0)) {
        return 1.0;
    }
    return -1.0;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        model = smo_train(samples, labels, 1.0, 0.001, int64_t(10));
        { std::ostringstream __ss; double __dv = predict(samples, labels, model, std::vector<double>{1.5, 1.0}); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
        { std::ostringstream __ss; double __dv = predict(samples, labels, model, std::vector<double>{0.2, 0.1}); if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
