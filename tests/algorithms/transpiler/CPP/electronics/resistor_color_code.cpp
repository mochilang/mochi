// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:10:19 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

bool contains(const std::vector<std::string>& list, std::string value);
int64_t get_significant_digits(const std::vector<std::string>& colors);
double get_multiplier(std::string color);
double get_tolerance(std::string color);
int64_t get_temperature_coeffecient(std::string color);
int64_t get_band_type_count(int64_t total, std::string typ);
bool check_validity(int64_t number_of_bands, const std::vector<std::string>& colors);
std::string calculate_resistance(int64_t number_of_bands, const std::vector<std::string>& color_code_list);
int main();

std::vector<std::string> valid_colors = std::vector<std::string>{std::string("Black"), std::string("Brown"), std::string("Red"), std::string("Orange"), std::string("Yellow"), std::string("Green"), std::string("Blue"), std::string("Violet"), std::string("Grey"), std::string("White"), std::string("Gold"), std::string("Silver")};
std::map<std::string, int64_t> significant_figures_color_values = std::map<std::string, int64_t>{{"Black", int64_t(0)}, {"Brown", int64_t(1)}, {"Red", int64_t(2)}, {"Orange", int64_t(3)}, {"Yellow", int64_t(4)}, {"Green", int64_t(5)}, {"Blue", int64_t(6)}, {"Violet", int64_t(7)}, {"Grey", int64_t(8)}, {"White", int64_t(9)}};
std::map<std::string, double> multiplier_color_values = std::map<std::string, double>{{"Black", 1.0}, {"Brown", 10.0}, {"Red", 100.0}, {"Orange", 1000.0}, {"Yellow", 10000.0}, {"Green", 100000.0}, {"Blue", 1000000.0}, {"Violet", 10000000.0}, {"Grey", 100000000.0}, {"White", 1000000000.0}, {"Gold", 0.1}, {"Silver", 0.01}};
std::map<std::string, double> tolerance_color_values = std::map<std::string, double>{{"Brown", 1.0}, {"Red", 2.0}, {"Orange", 0.05}, {"Yellow", 0.02}, {"Green", 0.5}, {"Blue", 0.25}, {"Violet", 0.1}, {"Grey", 0.01}, {"Gold", 5.0}, {"Silver", 10.0}};
std::map<std::string, int64_t> temperature_coeffecient_color_values = std::map<std::string, int64_t>{{"Black", int64_t(250)}, {"Brown", int64_t(100)}, {"Red", int64_t(50)}, {"Orange", int64_t(15)}, {"Yellow", int64_t(25)}, {"Green", int64_t(20)}, {"Blue", int64_t(10)}, {"Violet", int64_t(5)}, {"Grey", int64_t(1)}};

bool contains(const std::vector<std::string>& list, std::string value) {
    for (std::string c : list) {
        if ((c == value)) {
            return true;
        }
    }
    return false;
}

int64_t get_significant_digits(const std::vector<std::string>& colors) {
    int64_t digit = int64_t(0);
    for (std::string color : colors) {
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(significant_figures_color_values, color)) {
            throw std::runtime_error((color + std::string(" is not a valid color for significant figure bands")));
        }
        digit = ((digit * int64_t(10)) + ([&](const auto& __m){ auto __it = __m.find(color); return __it != __m.end() ? __it->second : 0; })(significant_figures_color_values));
    }
    return digit;
}

double get_multiplier(std::string color) {
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(multiplier_color_values, color)) {
        throw std::runtime_error((color + std::string(" is not a valid color for multiplier band")));
    }
    return ([&](const auto& __m){ auto __it = __m.find(color); return __it != __m.end() ? __it->second : 0; })(multiplier_color_values);
}

double get_tolerance(std::string color) {
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(tolerance_color_values, color)) {
        throw std::runtime_error((color + std::string(" is not a valid color for tolerance band")));
    }
    return ([&](const auto& __m){ auto __it = __m.find(color); return __it != __m.end() ? __it->second : 0; })(tolerance_color_values);
}

int64_t get_temperature_coeffecient(std::string color) {
    if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(temperature_coeffecient_color_values, color)) {
        throw std::runtime_error((color + std::string(" is not a valid color for temperature coeffecient band")));
    }
    return ([&](const auto& __m){ auto __it = __m.find(color); return __it != __m.end() ? __it->second : 0; })(temperature_coeffecient_color_values);
}

int64_t get_band_type_count(int64_t total, std::string typ) {
    if ((total == int64_t(3))) {
        if ((typ == std::string("significant"))) {
            return int64_t(2);
        }
        if ((typ == std::string("multiplier"))) {
            return int64_t(1);
        }
        throw std::runtime_error((typ + std::string(" is not valid for a 3 band resistor")));
    } else     if ((total == int64_t(4))) {
        if ((typ == std::string("significant"))) {
            return int64_t(2);
        }
        if ((typ == std::string("multiplier"))) {
            return int64_t(1);
        }
        if ((typ == std::string("tolerance"))) {
            return int64_t(1);
        }
        throw std::runtime_error((typ + std::string(" is not valid for a 4 band resistor")));
    } else     if ((total == int64_t(5))) {
        if ((typ == std::string("significant"))) {
            return int64_t(3);
        }
        if ((typ == std::string("multiplier"))) {
            return int64_t(1);
        }
        if ((typ == std::string("tolerance"))) {
            return int64_t(1);
        }
        throw std::runtime_error((typ + std::string(" is not valid for a 5 band resistor")));
    } else     if ((total == int64_t(6))) {
        if ((typ == std::string("significant"))) {
            return int64_t(3);
        }
        if ((typ == std::string("multiplier"))) {
            return int64_t(1);
        }
        if ((typ == std::string("tolerance"))) {
            return int64_t(1);
        }
        if ((typ == std::string("temp_coeffecient"))) {
            return int64_t(1);
        }
        throw std::runtime_error((typ + std::string(" is not valid for a 6 band resistor")));
    } else {
        throw std::runtime_error((([&]{ std::ostringstream ss; ss << std::boolalpha << total; return ss.str(); }()) + std::string(" is not a valid number of bands")));
    }



}

bool check_validity(int64_t number_of_bands, const std::vector<std::string>& colors) {
    if (((number_of_bands < int64_t(3)) || (number_of_bands > int64_t(6)))) {
        throw std::runtime_error(std::string("Invalid number of bands. Resistor bands must be 3 to 6"));
    }
    if ((number_of_bands != colors.size())) {
        throw std::runtime_error(((((std::string("Expecting ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << number_of_bands; return ss.str(); }())) + std::string(" colors, provided ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << colors.size(); return ss.str(); }())) + std::string(" colors")));
    }
    for (std::string color : colors) {
        if (!contains(valid_colors, color)) {
            throw std::runtime_error((color + std::string(" is not a valid color")));
        }
    }
    return true;
}

std::string calculate_resistance(int64_t number_of_bands, const std::vector<std::string>& color_code_list) {
    check_validity(number_of_bands, color_code_list);
    int64_t sig_count = get_band_type_count(number_of_bands, std::string("significant"));
    std::vector<std::string> significant_colors = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), sig_count - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+sig_count); })(color_code_list);
    int64_t significant_digits = get_significant_digits(significant_colors);
    std::string multiplier_color = color_code_list[sig_count];
    double multiplier = get_multiplier(multiplier_color);
    double tolerance = 20.0;
    if ((number_of_bands >= int64_t(4))) {
        std::string tolerance_color = color_code_list[(sig_count + int64_t(1))];
        tolerance = get_tolerance(tolerance_color);
    }
    int64_t temp_coeff = int64_t(0);
    if ((number_of_bands == int64_t(6))) {
        std::string temp_color = color_code_list[(sig_count + int64_t(2))];
        temp_coeff = get_temperature_coeffecient(temp_color);
    }
    double resistance_value = (multiplier * significant_digits);
    std::string resistance_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << resistance_value; return ss.str(); }());
    if ((resistance_value == (int64_t)(resistance_value))) {
        resistance_str = ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(resistance_value); return ss.str(); }());
    }
    std::string answer = (((resistance_str + std::string("Ω ±")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << tolerance; return ss.str(); }())) + std::string("% "));
    if ((temp_coeff != int64_t(0))) {
        answer = ((answer + ([&]{ std::ostringstream ss; ss << std::boolalpha << temp_coeff; return ss.str(); }())) + std::string(" ppm/K"));
    }
    return answer;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
    }
    return 0;
}
