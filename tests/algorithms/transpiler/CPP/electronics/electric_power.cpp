// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:10:01 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Result;

std::ostream& operator<<(std::ostream&, const Result&);


struct Result {
    std::string name;
    double value;
    auto operator<=>(const Result&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Result& v) {
    os << '{' << "'name': "<< "'" << v.name << "'"
 << ", " << "'value': "<< std::fixed << std::setprecision(1) << v.value
 << '}';
    return os;
}

double absf(double x);
double pow10(int64_t n);
double round_to(double x, int64_t n);
Result electric_power(double voltage, double current, double power);
std::string str_result(const Result& r);
int main();

Result r1 = electric_power(0.0, 2.0, 5.0);
Result r2 = electric_power(2.0, 2.0, 0.0);
Result r3 = electric_power(-2.0, 3.0, 0.0);
Result r4 = electric_power(2.2, 2.2, 0.0);
Result r5 = electric_power(2.0, 0.0, 6.0);

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double pow10(int64_t n) {
    double p = 1.0;
    int64_t i = int64_t(0);
    while ((i < n)) {
        p = (p * 10.0);
        i = (i + int64_t(1));
    }
    return p;
}

double round_to(double x, int64_t n) {
    double m = pow10(n);
    return ((double)(floor(((x * m) + 0.5))) / (m));
}

Result electric_power(double voltage, double current, double power) {
    int64_t zeros = int64_t(0);
    if ((voltage == 0.0)) {
        zeros = (zeros + int64_t(1));
    }
    if ((current == 0.0)) {
        zeros = (zeros + int64_t(1));
    }
    if ((power == 0.0)) {
        zeros = (zeros + int64_t(1));
    }
    if ((zeros != int64_t(1))) {
        throw std::runtime_error(std::string("Exactly one argument must be 0"));
    } else     if ((power < 0.0)) {
        throw std::runtime_error(std::string("Power cannot be negative in any electrical/electronics system"));
    } else     if ((voltage == 0.0)) {
        return Result{.name = std::string("voltage"), .value = ((double)(power) / (current))};
    } else     if ((current == 0.0)) {
        return Result{.name = std::string("current"), .value = ((double)(power) / (voltage))};
    } else     if ((power == 0.0)) {
        double p = absf((voltage * current));
        return Result{.name = std::string("power"), .value = round_to(p, int64_t(2))};
    } else {
        throw std::runtime_error(std::string("Unhandled case"));
    }




}

std::string str_result(const Result& r) {
    return ((((std::string("Result(name='") + r.name) + std::string("', value=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << r.value; return ss.str(); }())) + std::string(")"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << str_result(r1);
        std::cout << std::endl;
        std::cout << str_result(r2);
        std::cout << std::endl;
        std::cout << str_result(r3);
        std::cout << std::endl;
        std::cout << str_result(r4);
        std::cout << std::endl;
        std::cout << str_result(r5);
        std::cout << std::endl;
    }
    return 0;
}
