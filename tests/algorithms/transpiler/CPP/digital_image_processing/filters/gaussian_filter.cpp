// Generated by Mochi transpiler v0.10.72 on 2025-08-24 22:24:17 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double expApprox(double x);
std::vector<std::vector<double>> gen_gaussian_kernel(int64_t k_size, double sigma);
std::vector<std::vector<int64_t>> gaussian_filter(const std::vector<std::vector<int64_t>>& image, int64_t k_size, double sigma);
void print_image(const std::vector<std::vector<int64_t>>& image);
int main();

double PI = 3.141592653589793;
std::vector<std::vector<int64_t>> img = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(52), int64_t(55), int64_t(61), int64_t(59), int64_t(79)}, std::vector<int64_t>{int64_t(62), int64_t(59), int64_t(55), int64_t(104), int64_t(94)}, std::vector<int64_t>{int64_t(63), int64_t(65), int64_t(66), int64_t(113), int64_t(144)}, std::vector<int64_t>{int64_t(68), int64_t(70), int64_t(70), int64_t(126), int64_t(154)}, std::vector<int64_t>{int64_t(70), int64_t(72), int64_t(69), int64_t(128), int64_t(155)}};
std::vector<std::vector<int64_t>> gaussian3 = std::vector<std::vector<int64_t>>{};
std::vector<std::vector<int64_t>> gaussian5 = std::vector<std::vector<int64_t>>{};

double expApprox(double x) {
    double sum = 1.0;
    double term = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(10))) {
        term = ((double)((term * x)) / (double)((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

std::vector<std::vector<double>> gen_gaussian_kernel(int64_t k_size, double sigma) {
    int64_t center = (k_size / int64_t(2));
    std::vector<std::vector<double>> kernel = {};
    int64_t i = int64_t(0);
    while ((i < k_size)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < k_size)) {
            double x = (double)((i - center));
            double y = (double)((j - center));
            double exponent = -((double)(((x * x) + (y * y))) / (double)(((2.0 * sigma) * sigma)));
            double value = (((double)(1.0) / (double)(((2.0 * PI) * sigma))) * expApprox(exponent));
            row = ([&]{ auto __tmp = row; __tmp.push_back(value); return __tmp; }());
            j = (j + int64_t(1));
        }
        kernel = ([&]{ auto __tmp = kernel; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return kernel;
}

std::vector<std::vector<int64_t>> gaussian_filter(const std::vector<std::vector<int64_t>>& image, int64_t k_size, double sigma) {
    int64_t height = image.size();
    int64_t width = _index(image, int64_t(0)).size();
    int64_t dst_height = ((height - k_size) + int64_t(1));
    int64_t dst_width = ((width - k_size) + int64_t(1));
    std::vector<std::vector<double>> kernel = gen_gaussian_kernel(k_size, sigma);
    std::vector<std::vector<int64_t>> dst = {};
    int64_t i = int64_t(0);
    while ((i < dst_height)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < dst_width)) {
            double sum = 0.0;
            int64_t ki = int64_t(0);
            while ((ki < k_size)) {
                int64_t kj = int64_t(0);
                while ((kj < k_size)) {
                    sum = (sum + ((double)(_index(_index(image, (i + ki)), (j + kj))) * _index(_index(kernel, ki), kj)));
                    kj = (kj + int64_t(1));
                }
                ki = (ki + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back((int64_t)(sum)); return __tmp; }());
            j = (j + int64_t(1));
        }
        dst = ([&]{ auto __tmp = dst; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return dst;
}

void print_image(const std::vector<std::vector<int64_t>>& image) {
    int64_t i = int64_t(0);
    while ((i < image.size())) {
        { auto __tmp1 = _index(image, i); std::cout << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp1[i]; } std::cout << "]"; }
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        gaussian3 = gaussian_filter(img, int64_t(3), 1.0);
        gaussian5 = gaussian_filter(img, int64_t(5), 0.8);
        print_image(gaussian3);
        print_image(gaussian5);
    }
    return 0;
}
