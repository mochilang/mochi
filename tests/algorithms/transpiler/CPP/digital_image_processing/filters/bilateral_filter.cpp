// Generated by Mochi transpiler v0.10.60 on 2025-08-07 23:02:34 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double abs(double x);
double sqrtApprox(double x);
double expApprox(double x);
std::vector<std::vector<double>> vec_gaussian(const std::vector<std::vector<double>>& mat, double variance);
std::vector<std::vector<double>> get_slice(const std::vector<std::vector<double>>& img, int64_t x, int64_t y, int64_t kernel_size);
std::vector<std::vector<double>> get_gauss_kernel(int64_t kernel_size, double spatial_variance);
std::vector<std::vector<double>> elementwise_sub(const std::vector<std::vector<double>>& mat, double value);
std::vector<std::vector<double>> elementwise_mul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b);
double matrix_sum(const std::vector<std::vector<double>>& mat);
double bilateral_filter(const std::vector<std::vector<double>>& img, double spatial_variance, double intensity_variance, int64_t kernel_size);
int main();

double PI = 3.141592653589793;
std::vector<std::vector<double>> img = std::vector<std::vector<double>>{std::vector<double>{0.2, 0.3, 0.4}, std::vector<double>{0.3, 0.4, 0.5}, std::vector<double>{0.4, 0.5, 0.6}};
double result = bilateral_filter(img, 1.0, 1.0, int64_t(3));

double abs(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = x;
    int64_t i = int64_t(0);
    while ((i < int64_t(10))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double expApprox(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t n = int64_t(1);
    while ((n < int64_t(10))) {
        term = ((double)((term * x)) / ((double)(n)));
        sum = (sum + term);
        n = (n + int64_t(1));
    }
    return sum;
}

std::vector<std::vector<double>> vec_gaussian(const std::vector<std::vector<double>>& mat, double variance) {
    int64_t i = int64_t(0);
    std::vector<std::vector<double>> out = {};
    while ((i < mat.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size())) {
            double v = ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat));
            double e = ((double)(-(v * v)) / ((2.0 * variance)));
            row = ([&]{ auto __lhs = row; auto __rhs = std::vector<double>{expApprox(e)}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
            j = (j + int64_t(1));
        }
        out = ([&]{ auto __lhs = out; auto __rhs = std::vector<std::vector<double>>{row}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
        i = (i + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> get_slice(const std::vector<std::vector<double>>& img, int64_t x, int64_t y, int64_t kernel_size) {
    int64_t half = (kernel_size / int64_t(2));
    int64_t i = (x - half);
    std::vector<std::vector<double>> slice = {};
    while ((i <= (x + half))) {
        std::vector<double> row = {};
        int64_t j = (y - half);
        while ((j <= (y + half))) {
            row = ([&]{ auto __lhs = row; auto __rhs = std::vector<double>{([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(img))}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
            j = (j + int64_t(1));
        }
        slice = ([&]{ auto __lhs = slice; auto __rhs = std::vector<std::vector<double>>{row}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
        i = (i + int64_t(1));
    }
    return slice;
}

std::vector<std::vector<double>> get_gauss_kernel(int64_t kernel_size, double spatial_variance) {
    std::vector<std::vector<double>> arr = {};
    int64_t i = int64_t(0);
    while ((i < kernel_size)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < kernel_size)) {
            double di = (double)((i - (kernel_size / int64_t(2))));
            double dj = (double)((j - (kernel_size / int64_t(2))));
            double dist = sqrtApprox(((di * di) + (dj * dj)));
            row = ([&]{ auto __lhs = row; auto __rhs = std::vector<double>{dist}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
            j = (j + int64_t(1));
        }
        arr = ([&]{ auto __lhs = arr; auto __rhs = std::vector<std::vector<double>>{row}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
        i = (i + int64_t(1));
    }
    return vec_gaussian(arr, spatial_variance);
}

std::vector<std::vector<double>> elementwise_sub(const std::vector<std::vector<double>>& mat, double value) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size())) {
            row = ([&]{ auto __lhs = row; auto __rhs = std::vector<double>{(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat)) - value)}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __lhs = res; auto __rhs = std::vector<std::vector<double>>{row}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<double>> elementwise_mul(const std::vector<std::vector<double>>& a, const std::vector<std::vector<double>>& b) {
    std::vector<std::vector<double>> res = {};
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a).size())) {
            row = ([&]{ auto __lhs = row; auto __rhs = std::vector<double>{(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(a)) * ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(b)))}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
            j = (j + int64_t(1));
        }
        res = ([&]{ auto __lhs = res; auto __rhs = std::vector<std::vector<double>>{row}; __lhs.insert(__lhs.end(), __rhs.begin(), __rhs.end()); return __lhs; }());
        i = (i + int64_t(1));
    }
    return res;
}

double matrix_sum(const std::vector<std::vector<double>>& mat) {
    double total = 0.0;
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        int64_t j = int64_t(0);
        while ((j < ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size())) {
            total = (total + ([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat)));
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return total;
}

double bilateral_filter(const std::vector<std::vector<double>>& img, double spatial_variance, double intensity_variance, int64_t kernel_size) {
    std::vector<std::vector<double>> gauss_ker = get_gauss_kernel(kernel_size, spatial_variance);
    std::vector<std::vector<double>> img_s = img;
    double center = ([&](const auto& __v){ auto __i = (kernel_size / int64_t(2)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = (kernel_size / int64_t(2)); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(img_s));
    std::vector<std::vector<double>> img_i = elementwise_sub(img_s, center);
    std::vector<std::vector<double>> img_ig = vec_gaussian(img_i, intensity_variance);
    std::vector<std::vector<double>> weights = elementwise_mul(gauss_ker, img_ig);
    std::vector<std::vector<double>> vals = elementwise_mul(img_s, weights);
    double sum_weights = matrix_sum(weights);
    double val = 0.0;
    if ((sum_weights != 0.0)) {
        val = ((double)(matrix_sum(vals)) / (sum_weights));
    }
    return val;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { std::ostringstream __ss; double __dv = result; if(std::floor(__dv) == __dv) { __ss<<std::fixed<<std::setprecision(1)<<__dv; } else { __ss<<std::defaultfloat<<std::setprecision(17)<<__dv; } std::cout << __ss.str(); }
        std::cout << std::endl;
    }
    return 0;
}
