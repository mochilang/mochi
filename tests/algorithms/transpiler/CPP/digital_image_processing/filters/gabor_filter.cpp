// Generated by Mochi transpiler v0.10.60 on 2025-08-07 21:03:05 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double to_radians(double deg);
double sin_taylor(double x);
double cos_taylor(double x);
double exp_taylor(double x);
std::vector<std::vector<double>> gabor_filter_kernel(int64_t ksize, double sigma, double theta, double lambd, double gamma, double psi);
int main();

double PI = 3.141592653589793;
std::vector<std::vector<double>> kernel = gabor_filter_kernel(int64_t(3), 8.0, 0.0, 10.0, 0.0, 0.0);

double to_radians(double deg) {
    return ((double)((deg * PI)) / (180.0));
}

double sin_taylor(double x) {
    double term = x;
    double sum = x;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        double k1 = (2.0 * (double)(i));
        double k2 = (k1 + 1.0);
        term = ((double)(((-term * x) * x)) / ((k1 * k2)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double cos_taylor(double x) {
    double term = 1.0;
    double sum = 1.0;
    int64_t i = int64_t(1);
    while ((i < int64_t(10))) {
        double k1 = ((2.0 * (double)(i)) - 1.0);
        double k2 = (2.0 * (double)(i));
        term = ((double)(((-term * x) * x)) / ((k1 * k2)));
        sum = (sum + term);
        i = (i + int64_t(1));
    }
    return sum;
}

double exp_taylor(double x) {
    double term = 1.0;
    double sum = 1.0;
    double i = 1.0;
    while ((i < 20.0)) {
        term = ((double)((term * x)) / (i));
        sum = (sum + term);
        i = (i + 1.0);
    }
    return sum;
}

std::vector<std::vector<double>> gabor_filter_kernel(int64_t ksize, double sigma, double theta, double lambd, double gamma, double psi) {
    int64_t size = ksize;
    if (((size % int64_t(2)) == int64_t(0))) {
        size = (size + int64_t(1));
    }
    std::vector<std::vector<double>> gabor = {};
    int64_t y = int64_t(0);
    while ((y < size)) {
        std::vector<double> row = {};
        int64_t x = int64_t(0);
        while ((x < size)) {
            double px = (double)((x - (size / int64_t(2))));
            double py = (double)((y - (size / int64_t(2))));
            double rad = to_radians(theta);
            double cos_theta = cos_taylor(rad);
            double sin_theta = sin_taylor(rad);
            double x_rot = ((cos_theta * px) + (sin_theta * py));
            double y_rot = ((-sin_theta * px) + (cos_theta * py));
            double exponent = ((double)(-((x_rot * x_rot) + (((gamma * gamma) * y_rot) * y_rot))) / (((2.0 * sigma) * sigma)));
            double value = (exp_taylor(exponent) * cos_taylor((((double)(((2.0 * PI) * x_rot)) / (lambd)) + psi)));
            row = ([&]{ auto& __tmp = row; __tmp.push_back(value); return __tmp; }());
            x = (x + int64_t(1));
        }
        gabor = ([&]{ auto& __tmp = gabor; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return gabor;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { auto __tmp = kernel; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
