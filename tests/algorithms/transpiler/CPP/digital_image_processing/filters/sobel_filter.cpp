// Generated by Mochi transpiler v0.10.60 on 2025-08-07 23:29:52 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double absf(double x);
double sqrtApprox(double x);
double atanApprox(double x);
double atan2Approx(double y, double x);
std::vector<std::vector<double>> zeros(int64_t h, int64_t w);
std::vector<std::vector<double>> pad_edge(const std::vector<std::vector<double>>& img, int64_t pad);
std::vector<std::vector<double>> img_convolve(const std::vector<std::vector<double>>& img, const std::vector<std::vector<int64_t>>& kernel);
std::vector<std::vector<double>> abs_matrix(const std::vector<std::vector<double>>& mat);
double max_matrix(const std::vector<std::vector<double>>& mat);
std::vector<std::vector<double>> scale_matrix(const std::vector<std::vector<double>>& mat, double factor);
std::vector<std::vector<std::vector<double>>> sobel_filter(const std::vector<std::vector<int64_t>>& image);
void print_matrix_int(const std::vector<std::vector<double>>& mat);
void print_matrix_float(const std::vector<std::vector<double>>& mat);
int main();

double PI = 3.141592653589793;

double absf(double x) {
    if ((x < 0.0)) {
        return -x;
    }
    return x;
}

double sqrtApprox(double x) {
    if ((x <= 0.0)) {
        return 0.0;
    }
    double guess = ((double)(x) / (2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (guess)))) / (2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double atanApprox(double x) {
    if ((x > 1.0)) {
        return (((double)(PI) / (2.0)) - ((double)(x) / (((x * x) + 0.28))));
    }
    if ((x < -1.0)) {
        return (((double)(-PI) / (2.0)) - ((double)(x) / (((x * x) + 0.28))));
    }
    return ((double)(x) / ((1.0 + ((0.28 * x) * x))));
}

double atan2Approx(double y, double x) {
    if ((x == 0.0)) {
        if ((y > 0.0)) {
            return ((double)(PI) / (2.0));
        }
        if ((y < 0.0)) {
            return ((double)(-PI) / (2.0));
        }
        return 0.0;
    }
    double a = atanApprox(((double)(y) / (x)));
    if ((x > 0.0)) {
        return a;
    }
    if ((y >= 0.0)) {
        return (a + PI);
    }
    return (a - PI);
}

std::vector<std::vector<double>> zeros(int64_t h, int64_t w) {
    std::vector<std::vector<double>> m = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<double> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            x = (x + int64_t(1));
        }
        m = ([&]{ auto& __tmp = m; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return m;
}

std::vector<std::vector<double>> pad_edge(const std::vector<std::vector<double>>& img, int64_t pad) {
    int h = img.size();
    int w = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(img).size();
    std::vector<std::vector<double>> out = zeros((int64_t)((h + (pad * int64_t(2)))), (int64_t)((w + (pad * int64_t(2)))));
    int64_t y = int64_t(0);
    while ((y < (h + (pad * int64_t(2))))) {
        int64_t x = int64_t(0);
        while ((x < (w + (pad * int64_t(2))))) {
            int64_t sy = (y - pad);
            if ((sy < int64_t(0))) {
                sy = int64_t(0);
            }
            if ((sy >= h)) {
                sy = (h - int64_t(1));
            }
            int64_t sx = (x - pad);
            if ((sx < int64_t(0))) {
                sx = int64_t(0);
            }
            if ((sx >= w)) {
                sx = (w - int64_t(1));
            }
            out[y][x] = ([&](const auto& __v){ auto __i = sx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = sy; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(img));
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> img_convolve(const std::vector<std::vector<double>>& img, const std::vector<std::vector<int64_t>>& kernel) {
    int h = img.size();
    int w = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(img).size();
    int k = kernel.size();
    int pad = (k / int64_t(2));
    std::vector<std::vector<double>> padded = pad_edge(img, (int64_t)(pad));
    std::vector<std::vector<double>> out = zeros((int64_t)(h), (int64_t)(w));
    int64_t y = int64_t(0);
    while ((y < h)) {
        int64_t x = int64_t(0);
        while ((x < w)) {
            double sum = 0.0;
            int64_t i = int64_t(0);
            while ((i < k)) {
                int64_t j = int64_t(0);
                while ((j < k)) {
                    sum = (sum + (([&](const auto& __v){ auto __i = (x + j); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = (y + i); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(padded)) * (double)(([&](const auto& __v){ auto __i = j; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(kernel)))));
                    j = (j + int64_t(1));
                }
                i = (i + int64_t(1));
            }
            out[y][x] = sum;
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> abs_matrix(const std::vector<std::vector<double>>& mat) {
    int h = mat.size();
    int w = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size();
    std::vector<std::vector<double>> out = zeros((int64_t)(h), (int64_t)(w));
    int64_t y = int64_t(0);
    while ((y < h)) {
        int64_t x = int64_t(0);
        while ((x < w)) {
            double v = ([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat));
            if ((v < 0.0)) {
                out[y][x] = -v;
            } else {
                out[y][x] = v;
            }
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return out;
}

double max_matrix(const std::vector<std::vector<double>>& mat) {
    double max_val = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat));
    int64_t y = int64_t(0);
    while ((y < mat.size())) {
        int64_t x = int64_t(0);
        while ((x < ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size())) {
            if ((([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat)) > max_val)) {
                max_val = ([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat));
            }
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return max_val;
}

std::vector<std::vector<double>> scale_matrix(const std::vector<std::vector<double>>& mat, double factor) {
    int h = mat.size();
    int w = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size();
    std::vector<std::vector<double>> out = zeros((int64_t)(h), (int64_t)(w));
    int64_t y = int64_t(0);
    while ((y < h)) {
        int64_t x = int64_t(0);
        while ((x < w)) {
            out[y][x] = (([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat)) * factor);
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<std::vector<double>>> sobel_filter(const std::vector<std::vector<int64_t>>& image) {
    int h = image.size();
    int w = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(image).size();
    std::vector<std::vector<double>> img = {};
    int64_t y0 = int64_t(0);
    while ((y0 < h)) {
        std::vector<double> row = {};
        int64_t x0 = int64_t(0);
        while ((x0 < w)) {
            row = ([&]{ auto& __tmp = row; __tmp.push_back((double)(([&](const auto& __v){ auto __i = x0; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y0; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(image)))); return __tmp; }());
            x0 = (x0 + int64_t(1));
        }
        img = ([&]{ auto& __tmp = img; __tmp.push_back(row); return __tmp; }());
        y0 = (y0 + int64_t(1));
    }
    std::vector<std::vector<int64_t>> kernel_x = std::vector<std::vector<int64_t>>{std::vector<int64_t>{-int64_t(1), int64_t(0), int64_t(1)}, std::vector<int64_t>{-int64_t(2), int64_t(0), int64_t(2)}, std::vector<int64_t>{-int64_t(1), int64_t(0), int64_t(1)}};
    std::vector<std::vector<int64_t>> kernel_y = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{-int64_t(1), -int64_t(2), -int64_t(1)}};
    std::vector<std::vector<double>> dst_x = abs_matrix(img_convolve(img, kernel_x));
    std::vector<std::vector<double>> dst_y = abs_matrix(img_convolve(img, kernel_y));
    double max_x = max_matrix(dst_x);
    double max_y = max_matrix(dst_y);
    dst_x = scale_matrix(dst_x, ((double)(255.0) / (max_x)));
    dst_y = scale_matrix(dst_y, ((double)(255.0) / (max_y)));
    std::vector<std::vector<double>> mag = zeros((int64_t)(h), (int64_t)(w));
    std::vector<std::vector<double>> theta = zeros((int64_t)(h), (int64_t)(w));
    int64_t y = int64_t(0);
    while ((y < h)) {
        int64_t x = int64_t(0);
        while ((x < w)) {
            double gx = ([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(dst_x));
            double gy = ([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(dst_y));
            mag[y][x] = sqrtApprox(((gx * gx) + (gy * gy)));
            theta[y][x] = atan2Approx(gy, gx);
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    double max_m = max_matrix(mag);
    mag = scale_matrix(mag, ((double)(255.0) / (max_m)));
    return std::vector<std::vector<std::vector<double>>>{mag, theta};
}

void print_matrix_int(const std::vector<std::vector<double>>& mat) {
    int64_t y = int64_t(0);
    while ((y < mat.size())) {
        std::string line = std::string("");
        int64_t x = int64_t(0);
        while ((x < ([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat))); return ss.str(); }()));
            if ((x < (([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            x = (x + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        y = (y + int64_t(1));
    }
}

void print_matrix_float(const std::vector<std::vector<double>>& mat) {
    int64_t y = int64_t(0);
    while ((y < mat.size())) {
        std::string line = std::string("");
        int64_t x = int64_t(0);
        while ((x < ([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __v){ auto __i = x; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat)); return ss.str(); }()));
            if ((x < (([&](const auto& __v){ auto __i = y; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(mat).size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            x = (x + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        y = (y + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<int64_t>> img = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(10), int64_t(10), int64_t(10), int64_t(10), int64_t(10)}, std::vector<int64_t>{int64_t(10), int64_t(50), int64_t(50), int64_t(50), int64_t(10)}, std::vector<int64_t>{int64_t(10), int64_t(50), int64_t(80), int64_t(50), int64_t(10)}, std::vector<int64_t>{int64_t(10), int64_t(50), int64_t(50), int64_t(50), int64_t(10)}, std::vector<int64_t>{int64_t(10), int64_t(10), int64_t(10), int64_t(10), int64_t(10)}};
        std::vector<std::vector<std::vector<double>>> res = sobel_filter(img);
        std::vector<std::vector<double>> mag = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(res);
        std::vector<std::vector<double>> theta = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(res);
        print_matrix_int(mag);
        print_matrix_float(theta);
    }
    return 0;
}
