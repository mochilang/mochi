// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:03:31 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<int64_t>> pad_edge(std::vector<std::vector<int64_t>>& image, int64_t pad_size);
std::vector<std::vector<int64_t>> im2col(std::vector<std::vector<int64_t>>& image, int64_t block_h, int64_t block_w);
std::vector<int64_t> flatten(std::vector<std::vector<int64_t>>& matrix);
int64_t dot(std::vector<int64_t>& a, std::vector<int64_t>& b);
std::vector<std::vector<int64_t>> img_convolve(std::vector<std::vector<int64_t>>& image, std::vector<std::vector<int64_t>>& kernel);
void print_matrix(std::vector<std::vector<int64_t>>& m);
int main();

std::vector<std::vector<int64_t>> image = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(4), int64_t(5), int64_t(6), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(7), int64_t(8), int64_t(9), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)}};
std::vector<std::vector<int64_t>> laplace_kernel = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(1), -int64_t(4), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}};
std::vector<std::vector<int64_t>> result = img_convolve(image, laplace_kernel);

std::vector<std::vector<int64_t>> pad_edge(std::vector<std::vector<int64_t>>& image, int64_t pad_size) {
    int height = image.size();
    int width = image[int64_t(0)].size();
    int new_height = (height + (pad_size * int64_t(2)));
    int new_width = (width + (pad_size * int64_t(2)));
    std::vector<std::vector<int64_t>> padded = {};
    int64_t i = int64_t(0);
    while ((i < new_height)) {
        std::vector<int64_t> row = {};
        int64_t src_i = i;
        if ((src_i < pad_size)) {
            src_i = int64_t(0);
        }
        if ((src_i >= (height + pad_size))) {
            src_i = (height - int64_t(1));
        } else {
            src_i = (src_i - pad_size);
        }
        int64_t j = int64_t(0);
        while ((j < new_width)) {
            int64_t src_j = j;
            if ((src_j < pad_size)) {
                src_j = int64_t(0);
            }
            if ((src_j >= (width + pad_size))) {
                src_j = (width - int64_t(1));
            } else {
                src_j = (src_j - pad_size);
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back(image[src_i][src_j]); return __tmp; }());
            j = (j + int64_t(1));
        }
        padded = ([&]{ auto __tmp = padded; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return padded;
}

std::vector<std::vector<int64_t>> im2col(std::vector<std::vector<int64_t>>& image, int64_t block_h, int64_t block_w) {
    int rows = image.size();
    int cols = image[int64_t(0)].size();
    int dst_height = ((rows - block_h) + int64_t(1));
    int dst_width = ((cols - block_w) + int64_t(1));
    std::vector<std::vector<int64_t>> image_array = {};
    int64_t i = int64_t(0);
    while ((i < dst_height)) {
        int64_t j = int64_t(0);
        while ((j < dst_width)) {
            std::vector<int64_t> window = {};
            int64_t bi = int64_t(0);
            while ((bi < block_h)) {
                int64_t bj = int64_t(0);
                while ((bj < block_w)) {
                    window = ([&]{ auto __tmp = window; __tmp.push_back(image[(i + bi)][(j + bj)]); return __tmp; }());
                    bj = (bj + int64_t(1));
                }
                bi = (bi + int64_t(1));
            }
            image_array = ([&]{ auto __tmp = image_array; __tmp.push_back(window); return __tmp; }());
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return image_array;
}

std::vector<int64_t> flatten(std::vector<std::vector<int64_t>>& matrix) {
    std::vector<int64_t> out = {};
    int64_t i = int64_t(0);
    while ((i < matrix.size())) {
        int64_t j = int64_t(0);
        while ((j < matrix[i].size())) {
            out = ([&]{ auto __tmp = out; __tmp.push_back(matrix[i][j]); return __tmp; }());
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return out;
}

int64_t dot(std::vector<int64_t>& a, std::vector<int64_t>& b) {
    int64_t sum = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        sum = (sum + (a[i] * b[i]));
        i = (i + int64_t(1));
    }
    return sum;
}

std::vector<std::vector<int64_t>> img_convolve(std::vector<std::vector<int64_t>>& image, std::vector<std::vector<int64_t>>& kernel) {
    int height = image.size();
    int width = image[int64_t(0)].size();
    int k_size = kernel.size();
    int pad_size = (k_size / int64_t(2));
    std::vector<std::vector<int64_t>> padded = pad_edge(image, (int64_t)(pad_size));
    std::vector<std::vector<int64_t>> image_array = im2col(padded, (int64_t)(k_size), (int64_t)(k_size));
    std::vector<int64_t> kernel_flat = flatten(kernel);
    std::vector<std::vector<int64_t>> dst = {};
    int64_t idx = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < height)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < width)) {
            int64_t val = dot(image_array[idx], kernel_flat);
            row = ([&]{ auto __tmp = row; __tmp.push_back(val); return __tmp; }());
            idx = (idx + int64_t(1));
            j = (j + int64_t(1));
        }
        dst = ([&]{ auto __tmp = dst; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return dst;
}

void print_matrix(std::vector<std::vector<int64_t>>& m) {
    int64_t i = int64_t(0);
    while ((i < m.size())) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < m[i].size())) {
            if ((j > int64_t(0))) {
                line = (line + std::string(" "));
            }
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << m[i][j]; return ss.str(); }()));
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        print_matrix(result);
    }
    return 0;
}
