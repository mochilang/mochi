// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:06:14 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<double>> mat_inverse3(const std::vector<std::vector<double>>& m);
std::vector<double> mat_vec_mul(const std::vector<std::vector<double>>& m, const std::vector<double>& v);
std::vector<std::vector<int64_t>> create_matrix(int64_t rows, int64_t cols, int64_t value);
int64_t round_to_int(double x);
std::vector<std::vector<int64_t>> get_rotation(const std::vector<std::vector<int64_t>>& img, const std::vector<std::vector<double>>& pt1, const std::vector<std::vector<double>>& pt2, int64_t rows, int64_t cols);
int main();

std::vector<std::vector<int64_t>> img = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3)}, std::vector<int64_t>{int64_t(4), int64_t(5), int64_t(6)}, std::vector<int64_t>{int64_t(7), int64_t(8), int64_t(9)}};
std::vector<std::vector<double>> pts1 = std::vector<std::vector<double>>{std::vector<double>{0.0, 0.0}, std::vector<double>{2.0, 0.0}, std::vector<double>{0.0, 2.0}};
std::vector<std::vector<double>> pts2 = std::vector<std::vector<double>>{std::vector<double>{0.0, 2.0}, std::vector<double>{0.0, 0.0}, std::vector<double>{2.0, 2.0}};
std::vector<std::vector<int64_t>> rotated = get_rotation(img, pts1, pts2, int64_t(3), int64_t(3));

std::vector<std::vector<double>> mat_inverse3(const std::vector<std::vector<double>>& m) {
    double a = m[int64_t(0)][int64_t(0)];
    double b = m[int64_t(0)][int64_t(1)];
    double c = m[int64_t(0)][int64_t(2)];
    double d = m[int64_t(1)][int64_t(0)];
    double e = m[int64_t(1)][int64_t(1)];
    double f = m[int64_t(1)][int64_t(2)];
    double g = m[int64_t(2)][int64_t(0)];
    double h = m[int64_t(2)][int64_t(1)];
    double i = m[int64_t(2)][int64_t(2)];
    double det = (((a * ((e * i) - (f * h))) - (b * ((d * i) - (f * g)))) + (c * ((d * h) - (e * g))));
    if ((det == 0.0)) {
        throw std::runtime_error(std::string("singular matrix"));
    }
    double adj00 = ((e * i) - (f * h));
    double adj01 = ((c * h) - (b * i));
    double adj02 = ((b * f) - (c * e));
    double adj10 = ((f * g) - (d * i));
    double adj11 = ((a * i) - (c * g));
    double adj12 = ((c * d) - (a * f));
    double adj20 = ((d * h) - (e * g));
    double adj21 = ((b * g) - (a * h));
    double adj22 = ((a * e) - (b * d));
    std::vector<std::vector<double>> inv = {};
    inv = ([&]{ auto __tmp = inv; __tmp.push_back(std::vector<double>{((double)(adj00) / (det)), ((double)(adj01) / (det)), ((double)(adj02) / (det))}); return __tmp; }());
    inv = ([&]{ auto __tmp = inv; __tmp.push_back(std::vector<double>{((double)(adj10) / (det)), ((double)(adj11) / (det)), ((double)(adj12) / (det))}); return __tmp; }());
    inv = ([&]{ auto __tmp = inv; __tmp.push_back(std::vector<double>{((double)(adj20) / (det)), ((double)(adj21) / (det)), ((double)(adj22) / (det))}); return __tmp; }());
    return inv;
}

std::vector<double> mat_vec_mul(const std::vector<std::vector<double>>& m, const std::vector<double>& v) {
    std::vector<double> res = {};
    int64_t i = int64_t(0);
    while ((i < int64_t(3))) {
        double val = (((m[i][int64_t(0)] * v[int64_t(0)]) + (m[i][int64_t(1)] * v[int64_t(1)])) + (m[i][int64_t(2)] * v[int64_t(2)]));
        res = ([&]{ auto __tmp = res; __tmp.push_back(val); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<std::vector<int64_t>> create_matrix(int64_t rows, int64_t cols, int64_t value) {
    std::vector<std::vector<int64_t>> result = {};
    int64_t r = int64_t(0);
    while ((r < rows)) {
        std::vector<int64_t> row = {};
        int64_t c = int64_t(0);
        while ((c < cols)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(value); return __tmp; }());
            c = (c + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        r = (r + int64_t(1));
    }
    return result;
}

int64_t round_to_int(double x) {
    if ((x >= 0.0)) {
        return (int64_t)((x + 0.5));
    }
    return (int64_t)((x - 0.5));
}

std::vector<std::vector<int64_t>> get_rotation(const std::vector<std::vector<int64_t>>& img, const std::vector<std::vector<double>>& pt1, const std::vector<std::vector<double>>& pt2, int64_t rows, int64_t cols) {
    std::vector<std::vector<double>> src = std::vector<std::vector<double>>{std::vector<double>{pt1[int64_t(0)][int64_t(0)], pt1[int64_t(0)][int64_t(1)], 1.0}, std::vector<double>{pt1[int64_t(1)][int64_t(0)], pt1[int64_t(1)][int64_t(1)], 1.0}, std::vector<double>{pt1[int64_t(2)][int64_t(0)], pt1[int64_t(2)][int64_t(1)], 1.0}};
    std::vector<std::vector<double>> inv = mat_inverse3(src);
    std::vector<double> vecx = std::vector<double>{pt2[int64_t(0)][int64_t(0)], pt2[int64_t(1)][int64_t(0)], pt2[int64_t(2)][int64_t(0)]};
    std::vector<double> vecy = std::vector<double>{pt2[int64_t(0)][int64_t(1)], pt2[int64_t(1)][int64_t(1)], pt2[int64_t(2)][int64_t(1)]};
    std::vector<double> avec = mat_vec_mul(inv, vecx);
    std::vector<double> bvec = mat_vec_mul(inv, vecy);
    double a0 = avec[int64_t(0)];
    double a1 = avec[int64_t(1)];
    double a2 = avec[int64_t(2)];
    double b0 = bvec[int64_t(0)];
    double b1 = bvec[int64_t(1)];
    double b2 = bvec[int64_t(2)];
    std::vector<std::vector<int64_t>> out = create_matrix(rows, cols, int64_t(0));
    int64_t y = int64_t(0);
    while ((y < rows)) {
        int64_t x = int64_t(0);
        while ((x < cols)) {
            double xf = (((a0 * (1.0 * x)) + (a1 * (1.0 * y))) + a2);
            double yf = (((b0 * (1.0 * x)) + (b1 * (1.0 * y))) + b2);
            int64_t sx = round_to_int(xf);
            int64_t sy = round_to_int(yf);
            if (((((sx >= int64_t(0)) && (sx < cols)) && (sy >= int64_t(0))) && (sy < rows))) {
                out[sy][sx] = img[y][x];
            }
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = rotated; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
