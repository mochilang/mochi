// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:06:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t clamp_byte(int64_t x);
std::vector<std::vector<int64_t>> convert_to_negative(const std::vector<std::vector<int64_t>>& img);
std::vector<std::vector<int64_t>> change_contrast(const std::vector<std::vector<int64_t>>& img, int64_t factor);
std::vector<std::vector<double>> gen_gaussian_kernel(int64_t n, double sigma);
std::vector<std::vector<int64_t>> img_convolve(const std::vector<std::vector<int64_t>>& img, const std::vector<std::vector<double>>& kernel);
std::vector<int64_t> sort_ints(const std::vector<int64_t>& xs);
std::vector<std::vector<int64_t>> median_filter(const std::vector<std::vector<int64_t>>& img, int64_t k);
int64_t iabs(int64_t x);
std::vector<std::vector<int64_t>> sobel_filter(const std::vector<std::vector<int64_t>>& img);
std::vector<int64_t> get_neighbors_pixel(const std::vector<std::vector<int64_t>>& img, int64_t x, int64_t y);
int64_t pow2(int64_t e);
int64_t local_binary_value(const std::vector<std::vector<int64_t>>& img, int64_t x, int64_t y);
std::vector<std::vector<int64_t>> local_binary_pattern(const std::vector<std::vector<int64_t>>& img);
int main();

std::vector<std::vector<int64_t>> img = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(52), int64_t(55), int64_t(61)}, std::vector<int64_t>{int64_t(62), int64_t(59), int64_t(55)}, std::vector<int64_t>{int64_t(63), int64_t(65), int64_t(66)}};
std::vector<std::vector<int64_t>> negative = convert_to_negative(img);
std::vector<std::vector<int64_t>> contrast = change_contrast(img, int64_t(110));
std::vector<std::vector<double>> kernel = gen_gaussian_kernel(int64_t(3), 1.0);
std::vector<std::vector<double>> laplace = std::vector<std::vector<double>>{std::vector<double>{0.25, 0.5, 0.25}, std::vector<double>{0.5, -3.0, 0.5}, std::vector<double>{0.25, 0.5, 0.25}};
std::vector<std::vector<int64_t>> convolved = img_convolve(img, laplace);
std::vector<std::vector<int64_t>> medianed = median_filter(img, int64_t(3));
std::vector<std::vector<int64_t>> sobel = sobel_filter(img);
std::vector<std::vector<int64_t>> lbp_img = local_binary_pattern(img);

int64_t clamp_byte(int64_t x) {
    if ((x < int64_t(0))) {
        return int64_t(0);
    }
    if ((x > int64_t(255))) {
        return int64_t(255);
    }
    return x;
}

std::vector<std::vector<int64_t>> convert_to_negative(const std::vector<std::vector<int64_t>>& img) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back((int64_t(255) - img[y][x])); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<int64_t>> change_contrast(const std::vector<std::vector<int64_t>>& img, int64_t factor) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            int64_t p = img[y][x];
            int64_t v = ((((p - int64_t(128)) * factor) / int64_t(100)) + int64_t(128));
            v = clamp_byte(v);
            row = ([&]{ auto __tmp = row; __tmp.push_back(v); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> gen_gaussian_kernel(int64_t n, double sigma) {
    if ((n == int64_t(3))) {
        return std::vector<std::vector<double>>{std::vector<double>{((double)(1.0) / (16.0)), ((double)(2.0) / (16.0)), ((double)(1.0) / (16.0))}, std::vector<double>{((double)(2.0) / (16.0)), ((double)(4.0) / (16.0)), ((double)(2.0) / (16.0))}, std::vector<double>{((double)(1.0) / (16.0)), ((double)(2.0) / (16.0)), ((double)(1.0) / (16.0))}};
    }
    std::vector<std::vector<double>> k = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < n)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        k = ([&]{ auto __tmp = k; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return k;
}

std::vector<std::vector<int64_t>> img_convolve(const std::vector<std::vector<int64_t>>& img, const std::vector<std::vector<double>>& kernel) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            double acc = 0.0;
            int64_t ky = int64_t(0);
            while ((ky < kernel.size())) {
                int64_t kx = int64_t(0);
                while ((kx < kernel[int64_t(0)].size())) {
                    int64_t iy = ((y + ky) - int64_t(1));
                    int64_t ix = ((x + kx) - int64_t(1));
                    int64_t pixel = int64_t(0);
                    if (((((iy >= int64_t(0)) && (iy < h)) && (ix >= int64_t(0))) && (ix < w))) {
                        pixel = img[iy][ix];
                    }
                    acc = (acc + (kernel[ky][kx] * (1.0 * pixel)));
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back((int64_t)(acc)); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<int64_t> sort_ints(const std::vector<int64_t>& xs) {
    std::vector<int64_t> arr = xs;
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        int64_t j = int64_t(0);
        while ((j < ((arr.size() - int64_t(1)) - i))) {
            if ((arr[j] > arr[(j + int64_t(1))])) {
                int64_t tmp = arr[j];
                arr[j] = arr[(j + int64_t(1))];
                arr[(j + int64_t(1))] = tmp;
            }
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return arr;
}

std::vector<std::vector<int64_t>> median_filter(const std::vector<std::vector<int64_t>>& img, int64_t k) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    int64_t offset = (k / int64_t(2));
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            std::vector<int64_t> vals = {};
            int64_t ky = int64_t(0);
            while ((ky < k)) {
                int64_t kx = int64_t(0);
                while ((kx < k)) {
                    int64_t iy = ((y + ky) - offset);
                    int64_t ix = ((x + kx) - offset);
                    int64_t pixel = int64_t(0);
                    if (((((iy >= int64_t(0)) && (iy < h)) && (ix >= int64_t(0))) && (ix < w))) {
                        pixel = img[iy][ix];
                    }
                    vals = ([&]{ auto __tmp = vals; __tmp.push_back(pixel); return __tmp; }());
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            std::vector<int64_t> sorted = sort_ints(vals);
            row = ([&]{ auto __tmp = row; __tmp.push_back(sorted[static_cast<size_t>((sorted.size() / int64_t(2)))]); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

int64_t iabs(int64_t x) {
    if ((x < int64_t(0))) {
        return -x;
    }
    return x;
}

std::vector<std::vector<int64_t>> sobel_filter(const std::vector<std::vector<int64_t>>& img) {
    std::vector<std::vector<int64_t>> gx = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(0), -int64_t(1)}, std::vector<int64_t>{int64_t(2), int64_t(0), -int64_t(2)}, std::vector<int64_t>{int64_t(1), int64_t(0), -int64_t(1)}};
    std::vector<std::vector<int64_t>> gy = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0)}, std::vector<int64_t>{-int64_t(1), -int64_t(2), -int64_t(1)}};
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            int64_t sx = int64_t(0);
            int64_t sy = int64_t(0);
            int64_t ky = int64_t(0);
            while ((ky < int64_t(3))) {
                int64_t kx = int64_t(0);
                while ((kx < int64_t(3))) {
                    int64_t iy = ((y + ky) - int64_t(1));
                    int64_t ix = ((x + kx) - int64_t(1));
                    int64_t pixel = int64_t(0);
                    if (((((iy >= int64_t(0)) && (iy < h)) && (ix >= int64_t(0))) && (ix < w))) {
                        pixel = img[iy][ix];
                    }
                    sx = (sx + (gx[ky][kx] * pixel));
                    sy = (sy + (gy[ky][kx] * pixel));
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            row = ([&]{ auto __tmp = row; __tmp.push_back((iabs(sx) + iabs(sy))); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<int64_t> get_neighbors_pixel(const std::vector<std::vector<int64_t>>& img, int64_t x, int64_t y) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<int64_t> neighbors = {};
    int64_t dy = -int64_t(1);
    while ((dy <= int64_t(1))) {
        int64_t dx = -int64_t(1);
        while ((dx <= int64_t(1))) {
            if (!((dx == int64_t(0)) && (dy == int64_t(0)))) {
                int64_t ny = (y + dy);
                int64_t nx = (x + dx);
                int64_t val = int64_t(0);
                if (((((ny >= int64_t(0)) && (ny < h)) && (nx >= int64_t(0))) && (nx < w))) {
                    val = img[ny][nx];
                }
                neighbors = ([&]{ auto __tmp = neighbors; __tmp.push_back(val); return __tmp; }());
            }
            dx = (dx + int64_t(1));
        }
        dy = (dy + int64_t(1));
    }
    return neighbors;
}

int64_t pow2(int64_t e) {
    int64_t r = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < e)) {
        r = (r * int64_t(2));
        i = (i + int64_t(1));
    }
    return r;
}

int64_t local_binary_value(const std::vector<std::vector<int64_t>>& img, int64_t x, int64_t y) {
    int64_t center = img[y][x];
    std::vector<int64_t> neighbors = get_neighbors_pixel(img, x, y);
    int64_t v = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < neighbors.size())) {
        if ((neighbors[i] >= center)) {
            v = (v + pow2(i));
        }
        i = (i + int64_t(1));
    }
    return v;
}

std::vector<std::vector<int64_t>> local_binary_pattern(const std::vector<std::vector<int64_t>>& img) {
    int h = img.size();
    int w = img[int64_t(0)].size();
    std::vector<std::vector<int64_t>> out = {};
    int64_t y = int64_t(0);
    while ((y < h)) {
        std::vector<int64_t> row = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(local_binary_value(img, x, y)); return __tmp; }());
            x = (x + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { auto __tmp = negative; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = contrast; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = kernel; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = convolved; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = medianed; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = sobel; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp = lbp_img; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
