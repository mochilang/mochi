// Generated by Mochi transpiler v0.10.72 on 2025-08-24 22:23:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

double sqrtApprox(double x);
double atanApprox(double x);
double atan2Approx(double y, double x);
double deg(double rad);
std::vector<std::vector<double>> zero_matrix(int64_t h, int64_t w);
std::vector<std::vector<double>> convolve(const std::vector<std::vector<double>>& img, const std::vector<std::vector<double>>& kernel);
std::vector<std::vector<double>> gaussian_blur(const std::vector<std::vector<double>>& img);
std::map<std::string, std::vector<std::vector<double>>> sobel_filter(const std::vector<std::vector<double>>& img);
std::vector<std::vector<double>> suppress_non_maximum(int64_t h, int64_t w, const std::vector<std::vector<double>>& direction, const std::vector<std::vector<double>>& grad);
void double_threshold(int64_t h, int64_t w, std::vector<std::vector<double>>& img, double low, double high, double weak, double strong);
void track_edge(int64_t h, int64_t w, std::vector<std::vector<double>>& img, double weak, double strong);
std::vector<std::vector<double>> canny(const std::vector<std::vector<double>>& image, double low, double high, double weak, double strong);
void print_image(const std::vector<std::vector<double>>& img);
int main();

double PI = 3.141592653589793;
std::vector<std::vector<double>> GAUSSIAN_KERNEL = std::vector<std::vector<double>>{std::vector<double>{0.0625, 0.125, 0.0625}, std::vector<double>{0.125, 0.25, 0.125}, std::vector<double>{0.0625, 0.125, 0.0625}};
std::vector<std::vector<double>> SOBEL_GX = std::vector<std::vector<double>>{std::vector<double>{-1.0, 0.0, 1.0}, std::vector<double>{-2.0, 0.0, 2.0}, std::vector<double>{-1.0, 0.0, 1.0}};
std::vector<std::vector<double>> SOBEL_GY = std::vector<std::vector<double>>{std::vector<double>{1.0, 2.0, 1.0}, std::vector<double>{0.0, 0.0, 0.0}, std::vector<double>{-1.0, -2.0, -1.0}};
std::vector<std::vector<double>> image = std::vector<std::vector<double>>{std::vector<double>{0.0, 0.0, 0.0, 0.0, 0.0}, std::vector<double>{0.0, 255.0, 255.0, 255.0, 0.0}, std::vector<double>{0.0, 255.0, 255.0, 255.0, 0.0}, std::vector<double>{0.0, 255.0, 255.0, 255.0, 0.0}, std::vector<double>{0.0, 0.0, 0.0, 0.0, 0.0}};
std::vector<std::vector<double>> edges = std::vector<std::vector<double>>{};

double sqrtApprox(double x) {
    double guess = ((double)(x) / (double)(2.0));
    int64_t i = int64_t(0);
    while ((i < int64_t(20))) {
        guess = ((double)((guess + ((double)(x) / (double)(guess)))) / (double)(2.0));
        i = (i + int64_t(1));
    }
    return guess;
}

double atanApprox(double x) {
    if ((x > 1.0)) {
        return (((double)(PI) / (double)(2.0)) - ((double)(x) / (double)(((x * x) + 0.28))));
    }
    if ((x < -1.0)) {
        return (((double)(-PI) / (double)(2.0)) - ((double)(x) / (double)(((x * x) + 0.28))));
    }
    return ((double)(x) / (double)((1.0 + ((0.28 * x) * x))));
}

double atan2Approx(double y, double x) {
    if ((x > 0.0)) {
        double r = atanApprox(((double)(y) / (double)(x)));
        return r;
    }
    if ((x < 0.0)) {
        if ((y >= 0.0)) {
            return (atanApprox(((double)(y) / (double)(x))) + PI);
        }
        return (atanApprox(((double)(y) / (double)(x))) - PI);
    }
    if ((y > 0.0)) {
        return ((double)(PI) / (double)(2.0));
    }
    if ((y < 0.0)) {
        return ((double)(-PI) / (double)(2.0));
    }
    return 0.0;
}

double deg(double rad) {
    return ((double)((rad * 180.0)) / (double)(PI));
}

std::vector<std::vector<double>> zero_matrix(int64_t h, int64_t w) {
    std::vector<std::vector<double>> out = {};
    int64_t i = int64_t(0);
    while ((i < h)) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(0.0); return __tmp; }());
            j = (j + int64_t(1));
        }
        out = ([&]{ auto __tmp = out; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> convolve(const std::vector<std::vector<double>>& img, const std::vector<std::vector<double>>& kernel) {
    int64_t h = img.size();
    int64_t w = _index(img, int64_t(0)).size();
    int64_t k = kernel.size();
    int64_t pad = (k / int64_t(2));
    std::vector<std::vector<double>> out = zero_matrix(h, w);
    int64_t y = pad;
    while ((y < (h - pad))) {
        int64_t x = pad;
        while ((x < (w - pad))) {
            double sum = 0.0;
            int64_t ky = int64_t(0);
            while ((ky < k)) {
                int64_t kx = int64_t(0);
                while ((kx < k)) {
                    double pixel = _index(_index(img, ((y - pad) + ky)), ((x - pad) + kx));
                    double weight = _index(_index(kernel, ky), kx);
                    sum = (sum + (pixel * weight));
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            _index(_index(out, y), x) = sum;
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    return out;
}

std::vector<std::vector<double>> gaussian_blur(const std::vector<std::vector<double>>& img) {
    return convolve(img, GAUSSIAN_KERNEL);
}

std::map<std::string, std::vector<std::vector<double>>> sobel_filter(const std::vector<std::vector<double>>& img) {
    std::vector<std::vector<double>> gx = convolve(img, SOBEL_GX);
    std::vector<std::vector<double>> gy = convolve(img, SOBEL_GY);
    int64_t h = img.size();
    int64_t w = _index(img, int64_t(0)).size();
    std::vector<std::vector<double>> grad = zero_matrix(h, w);
    std::vector<std::vector<double>> dir = zero_matrix(h, w);
    int64_t i = int64_t(0);
    while ((i < h)) {
        int64_t j = int64_t(0);
        while ((j < w)) {
            double gxx = _index(_index(gx, i), j);
            double gyy = _index(_index(gy, i), j);
            _index(_index(grad, i), j) = sqrtApprox(((gxx * gxx) + (gyy * gyy)));
            _index(_index(dir, i), j) = (deg(atan2Approx(gyy, gxx)) + 180.0);
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return std::map<std::string, std::vector<std::vector<double>>>{{"grad", grad}, {"dir", dir}};
}

std::vector<std::vector<double>> suppress_non_maximum(int64_t h, int64_t w, const std::vector<std::vector<double>>& direction, const std::vector<std::vector<double>>& grad) {
    std::vector<std::vector<double>> dest = zero_matrix(h, w);
    int64_t r = int64_t(1);
    while ((r < (h - int64_t(1)))) {
        int64_t c = int64_t(1);
        while ((c < (w - int64_t(1)))) {
            double angle = _index(_index(direction, r), c);
            double q = 0.0;
            double p = 0.0;
            if (((((angle >= 0.0) && (angle < 22.5)) || ((angle >= 157.5) && (angle <= 180.0))) || (angle >= 337.5))) {
                q = _index(_index(grad, r), (c + int64_t(1)));
                p = _index(_index(grad, r), (c - int64_t(1)));
            } else             if ((((angle >= 22.5) && (angle < 67.5)) || ((angle >= 202.5) && (angle < 247.5)))) {
                q = _index(_index(grad, (r + int64_t(1))), (c - int64_t(1)));
                p = _index(_index(grad, (r - int64_t(1))), (c + int64_t(1)));
            } else             if ((((angle >= 67.5) && (angle < 112.5)) || ((angle >= 247.5) && (angle < 292.5)))) {
                q = _index(_index(grad, (r + int64_t(1))), c);
                p = _index(_index(grad, (r - int64_t(1))), c);
            } else {
                q = _index(_index(grad, (r - int64_t(1))), (c - int64_t(1)));
                p = _index(_index(grad, (r + int64_t(1))), (c + int64_t(1)));
            }


            if (((_index(_index(grad, r), c) >= q) && (_index(_index(grad, r), c) >= p))) {
                _index(_index(dest, r), c) = _index(_index(grad, r), c);
            }
            c = (c + int64_t(1));
        }
        r = (r + int64_t(1));
    }
    return dest;
}

void double_threshold(int64_t h, int64_t w, std::vector<std::vector<double>>& img, double low, double high, double weak, double strong) {
    int64_t r = int64_t(0);
    while ((r < h)) {
        int64_t c = int64_t(0);
        while ((c < w)) {
            double v = _index(_index(img, r), c);
            if ((v >= high)) {
                _index(_index(img, r), c) = strong;
            } else             if ((v < low)) {
                _index(_index(img, r), c) = 0.0;
            } else {
                _index(_index(img, r), c) = weak;
            }

            c = (c + int64_t(1));
        }
        r = (r + int64_t(1));
    }
}

void track_edge(int64_t h, int64_t w, std::vector<std::vector<double>>& img, double weak, double strong) {
    int64_t r = int64_t(1);
    while ((r < (h - int64_t(1)))) {
        int64_t c = int64_t(1);
        while ((c < (w - int64_t(1)))) {
            if ((std::fabs(_index(_index(img, r), c) - weak) < 1e-6)) {
                if (((((((((std::fabs(_index(_index(img, (r + int64_t(1))), c) - strong) < 1e-6) || (std::fabs(_index(_index(img, (r - int64_t(1))), c) - strong) < 1e-6)) || (std::fabs(_index(_index(img, r), (c + int64_t(1))) - strong) < 1e-6)) || (std::fabs(_index(_index(img, r), (c - int64_t(1))) - strong) < 1e-6)) || (std::fabs(_index(_index(img, (r - int64_t(1))), (c - int64_t(1))) - strong) < 1e-6)) || (std::fabs(_index(_index(img, (r - int64_t(1))), (c + int64_t(1))) - strong) < 1e-6)) || (std::fabs(_index(_index(img, (r + int64_t(1))), (c - int64_t(1))) - strong) < 1e-6)) || (std::fabs(_index(_index(img, (r + int64_t(1))), (c + int64_t(1))) - strong) < 1e-6))) {
                    _index(_index(img, r), c) = strong;
                } else {
                    _index(_index(img, r), c) = 0.0;
                }
            }
            c = (c + int64_t(1));
        }
        r = (r + int64_t(1));
    }
}

std::vector<std::vector<double>> canny(const std::vector<std::vector<double>>& image, double low, double high, double weak, double strong) {
    std::vector<std::vector<double>> blurred = gaussian_blur(image);
    std::map<std::string, std::vector<std::vector<double>>> sob = sobel_filter(blurred);
    std::vector<std::vector<double>> grad = ([&](const auto& __m){ auto __it = __m.find(std::string("grad")); if (__it == __m.end()) return std::vector<std::vector<double>>{}; return __it->second; })(sob);
    std::vector<std::vector<double>> direction = ([&](const auto& __m){ auto __it = __m.find(std::string("dir")); if (__it == __m.end()) return std::vector<std::vector<double>>{}; return __it->second; })(sob);
    int64_t h = image.size();
    int64_t w = _index(image, int64_t(0)).size();
    std::vector<std::vector<double>> suppressed = suppress_non_maximum(h, w, direction, grad);
    double_threshold(h, w, suppressed, low, high, weak, strong);
    track_edge(h, w, suppressed, weak, strong);
    return suppressed;
}

void print_image(const std::vector<std::vector<double>>& img) {
    int64_t r = int64_t(0);
    while ((r < img.size())) {
        int64_t c = int64_t(0);
        std::string line = std::string("");
        while ((c < _index(img, r).size())) {
            line = ((line + ([&]{ std::ostringstream ss; ss << std::boolalpha << (int64_t)(_index(_index(img, r), c)); return ss.str(); }())) + std::string(" "));
            c = (c + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        r = (r + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        edges = canny(image, 20.0, 40.0, 128.0, 255.0);
        print_image(edges);
    }
    return 0;
}
