// Generated by Mochi transpiler v0.10.72 on 2025-08-24 22:32:01 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(6) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

std::vector<std::vector<double>> rgb_to_gray(const std::vector<std::vector<std::vector<int64_t>>>& rgb);
std::vector<std::vector<int64_t>> gray_to_binary(const std::vector<std::vector<double>>& gray);
std::vector<std::vector<int64_t>> dilation(const std::vector<std::vector<int64_t>>& image, const std::vector<std::vector<int64_t>>& kernel);
void print_float_matrix(const std::vector<std::vector<double>>& mat);
void print_int_matrix(const std::vector<std::vector<int64_t>>& mat);
int main();

std::vector<std::vector<double>> rgb_to_gray(const std::vector<std::vector<std::vector<int64_t>>>& rgb) {
    std::vector<std::vector<double>> result = {};
    int64_t i = int64_t(0);
    while ((i < rgb.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(rgb, i).size())) {
            int64_t r = _index(_index(_index(rgb, i), j), int64_t(0));
            int64_t g = _index(_index(_index(rgb, i), j), int64_t(1));
            int64_t b = _index(_index(_index(rgb, i), j), int64_t(2));
            double gray = (((0.2989 * (1.0 * r)) + (0.587 * (1.0 * g))) + (0.114 * (1.0 * b)));
            row = ([&]{ auto __tmp = row; __tmp.push_back(gray); return __tmp; }());
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<int64_t>> gray_to_binary(const std::vector<std::vector<double>>& gray) {
    std::vector<std::vector<int64_t>> result = {};
    int64_t i = int64_t(0);
    while ((i < gray.size())) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < _index(gray, i).size())) {
            double v = _index(_index(gray, i), j);
            if (((v > 127.0) && (v <= 255.0))) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(1)); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        result = ([&]{ auto __tmp = result; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<std::vector<int64_t>> dilation(const std::vector<std::vector<int64_t>>& image, const std::vector<std::vector<int64_t>>& kernel) {
    int64_t img_h = image.size();
    int64_t img_w = _index(image, int64_t(0)).size();
    int64_t k_h = kernel.size();
    int64_t k_w = _index(kernel, int64_t(0)).size();
    int64_t pad_h = (k_h / int64_t(2));
    int64_t pad_w = (k_w / int64_t(2));
    int64_t p_h = (img_h + (int64_t(2) * pad_h));
    int64_t p_w = (img_w + (int64_t(2) * pad_w));
    std::vector<std::vector<int64_t>> padded = {};
    int64_t i = int64_t(0);
    while ((i < p_h)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < p_w)) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            j = (j + int64_t(1));
        }
        padded = ([&]{ auto __tmp = padded; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < img_h)) {
        int64_t j = int64_t(0);
        while ((j < img_w)) {
            _index(_index(padded, (pad_h + i)), (pad_w + j)) = _index(_index(image, i), j);
            j = (j + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    std::vector<std::vector<int64_t>> output = {};
    i = int64_t(0);
    while ((i < img_h)) {
        std::vector<int64_t> row = {};
        int64_t j = int64_t(0);
        while ((j < img_w)) {
            int64_t sum = int64_t(0);
            int64_t ky = int64_t(0);
            while ((ky < k_h)) {
                int64_t kx = int64_t(0);
                while ((kx < k_w)) {
                    if ((_index(_index(kernel, ky), kx) == int64_t(1))) {
                        sum = (sum + _index(_index(padded, (i + ky)), (j + kx)));
                    }
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            if ((sum > int64_t(0))) {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(1)); return __tmp; }());
            } else {
                row = ([&]{ auto __tmp = row; __tmp.push_back(int64_t(0)); return __tmp; }());
            }
            j = (j + int64_t(1));
        }
        output = ([&]{ auto __tmp = output; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return output;
}

void print_float_matrix(const std::vector<std::vector<double>>& mat) {
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < _index(mat, i).size())) {
            line = (line + _to_string(_index(_index(mat, i), j)));
            if ((j < (_index(mat, i).size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

void print_int_matrix(const std::vector<std::vector<int64_t>>& mat) {
    int64_t i = int64_t(0);
    while ((i < mat.size())) {
        std::string line = std::string("");
        int64_t j = int64_t(0);
        while ((j < _index(mat, i).size())) {
            line = (line + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(_index(mat, i), j); return ss.str(); }()));
            if ((j < (_index(mat, i).size() - int64_t(1)))) {
                line = (line + std::string(" "));
            }
            j = (j + int64_t(1));
        }
        std::cout << line;
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::vector<std::vector<std::vector<int64_t>>> rgb_example = std::vector<std::vector<std::vector<int64_t>>>{std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(127), int64_t(255), int64_t(0)}}};
        print_float_matrix(rgb_to_gray(rgb_example));
        std::vector<std::vector<double>> gray_example = std::vector<std::vector<double>>{std::vector<double>{26.0, 255.0, 14.0}, std::vector<double>{5.0, 147.0, 20.0}, std::vector<double>{1.0, 200.0, 0.0}};
        print_int_matrix(gray_to_binary(gray_example));
        std::vector<std::vector<int64_t>> binary_image = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}};
        std::vector<std::vector<int64_t>> kernel = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}, std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(1)}, std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}};
        print_int_matrix(dilation(binary_image, kernel));
    }
    return 0;
}
