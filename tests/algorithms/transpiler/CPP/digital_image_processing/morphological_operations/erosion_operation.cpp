// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:06:08 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::vector<double>> rgb_to_gray(const std::vector<std::vector<std::vector<int64_t>>>& rgb);
std::vector<std::vector<bool>> gray_to_binary(const std::vector<std::vector<double>>& gray);
std::vector<std::vector<bool>> erosion(const std::vector<std::vector<bool>>& image, const std::vector<std::vector<int64_t>>& kernel);
int main();

std::vector<std::vector<std::vector<int64_t>>> rgb_img = std::vector<std::vector<std::vector<int64_t>>>{std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(127), int64_t(255), int64_t(0)}}};
std::vector<std::vector<double>> gray_img = std::vector<std::vector<double>>{std::vector<double>{127.0, 255.0, 0.0}};
std::vector<std::vector<bool>> img1 = std::vector<std::vector<bool>>{std::vector<bool>{true, true, false}};
std::vector<std::vector<int64_t>> kernel1 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(0)}};
std::vector<std::vector<bool>> img2 = std::vector<std::vector<bool>>{std::vector<bool>{true, false, false}};
std::vector<std::vector<int64_t>> kernel2 = std::vector<std::vector<int64_t>>{std::vector<int64_t>{int64_t(1), int64_t(1), int64_t(0)}};

std::vector<std::vector<double>> rgb_to_gray(const std::vector<std::vector<std::vector<int64_t>>>& rgb) {
    std::vector<std::vector<double>> gray = {};
    int64_t i = int64_t(0);
    while ((i < rgb.size())) {
        std::vector<double> row = {};
        int64_t j = int64_t(0);
        while ((j < rgb[i].size())) {
            double r = (double)(rgb[i][j][int64_t(0)]);
            double g = (double)(rgb[i][j][int64_t(1)]);
            double b = (double)(rgb[i][j][int64_t(2)]);
            double value = (((0.2989 * r) + (0.587 * g)) + (0.114 * b));
            row = ([&]{ auto __tmp = row; __tmp.push_back(value); return __tmp; }());
            j = (j + int64_t(1));
        }
        gray = ([&]{ auto __tmp = gray; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return gray;
}

std::vector<std::vector<bool>> gray_to_binary(const std::vector<std::vector<double>>& gray) {
    std::vector<std::vector<bool>> binary = {};
    int64_t i = int64_t(0);
    while ((i < gray.size())) {
        std::vector<bool> row = {};
        int64_t j = int64_t(0);
        while ((j < gray[i].size())) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(((gray[i][j] > 127.0) && (gray[i][j] <= 255.0))); return __tmp; }());
            j = (j + int64_t(1));
        }
        binary = ([&]{ auto __tmp = binary; __tmp.push_back(row); return __tmp; }());
        i = (i + int64_t(1));
    }
    return binary;
}

std::vector<std::vector<bool>> erosion(const std::vector<std::vector<bool>>& image, const std::vector<std::vector<int64_t>>& kernel) {
    int h = image.size();
    int w = image[int64_t(0)].size();
    int k_h = kernel.size();
    int k_w = kernel[int64_t(0)].size();
    int pad_y = (k_h / int64_t(2));
    int pad_x = (k_w / int64_t(2));
    std::vector<std::vector<bool>> padded = {};
    int64_t y = int64_t(0);
    while ((y < (h + (int64_t(2) * pad_y)))) {
        std::vector<bool> row = {};
        int64_t x = int64_t(0);
        while ((x < (w + (int64_t(2) * pad_x)))) {
            row = ([&]{ auto __tmp = row; __tmp.push_back(false); return __tmp; }());
            x = (x + int64_t(1));
        }
        padded = ([&]{ auto __tmp = padded; __tmp.push_back(row); return __tmp; }());
        y = (y + int64_t(1));
    }
    y = int64_t(0);
    while ((y < h)) {
        int64_t x = int64_t(0);
        while ((x < w)) {
            padded[static_cast<size_t>((pad_y + y))][static_cast<size_t>((pad_x + x))] = image[y][x];
            x = (x + int64_t(1));
        }
        y = (y + int64_t(1));
    }
    std::vector<std::vector<bool>> output = {};
    y = int64_t(0);
    while ((y < h)) {
        std::vector<bool> row_out = {};
        int64_t x = int64_t(0);
        while ((x < w)) {
            int64_t sum = int64_t(0);
            int64_t ky = int64_t(0);
            while ((ky < k_h)) {
                int64_t kx = int64_t(0);
                while ((kx < k_w)) {
                    if (((kernel[ky][kx] == int64_t(1)) && padded[(y + ky)][(x + kx)])) {
                        sum = (sum + int64_t(1));
                    }
                    kx = (kx + int64_t(1));
                }
                ky = (ky + int64_t(1));
            }
            row_out = ([&]{ auto __tmp = row_out; __tmp.push_back((sum == int64_t(5))); return __tmp; }());
            x = (x + int64_t(1));
        }
        output = ([&]{ auto __tmp = output; __tmp.push_back(row_out); return __tmp; }());
        y = (y + int64_t(1));
    }
    return output;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = rgb_to_gray(rgb_img); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = gray_to_binary(gray_img); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = erosion(img1, kernel1); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = erosion(img2, kernel2); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; __ss << __tmp[static_cast<size_t>(i)];
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
