// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:24:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Bloom;

std::ostream& operator<<(std::ostream&, const Bloom&);


struct Bloom {
    int64_t size;
    std::vector<int64_t> bits;
    auto operator<=>(const Bloom&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Bloom& v) {
    os << '{' << "'size': "<< v.size
 << ", " << "'bits': "<< "["; for(size_t i=0;i<v.bits.size();++i){ if(i>0) os << ", "; os << v.bits[i]; } os << "]"
 << '}';
    return os;
}

int64_t ord(std::string ch);
Bloom new_bloom(int64_t size);
int64_t hash1(std::string value, int64_t size);
int64_t hash2(std::string value, int64_t size);
std::vector<int64_t> hash_positions(std::string value, int64_t size);
Bloom bloom_add(const Bloom& b, std::string value);
bool bloom_exists(const Bloom& b, std::string value);
std::string bitstring(const Bloom& b);
std::string format_hash(const Bloom& b, std::string value);
double estimated_error_rate(const Bloom& b);
bool any_in(const Bloom& b, const std::vector<std::string>& items);
int main();

std::string ascii = std::string(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

int64_t ord(std::string ch) {
    int64_t i = int64_t(0);
    while ((i < ascii.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(ascii) == ch)) {
            return (int64_t(32) + i);
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

Bloom new_bloom(int64_t size) {
    std::vector<int64_t> bits = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        bits = ([&]{ auto __tmp = bits; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return Bloom{.size = size, .bits = bits};
}

int64_t hash1(std::string value, int64_t size) {
    int64_t h = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < value.size())) {
        h = (((h * int64_t(31)) + ord(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(value))) % size);
        i = (i + int64_t(1));
    }
    return h;
}

int64_t hash2(std::string value, int64_t size) {
    int64_t h = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < value.size())) {
        h = (((h * int64_t(131)) + ord(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(value))) % size);
        i = (i + int64_t(1));
    }
    return h;
}

std::vector<int64_t> hash_positions(std::string value, int64_t size) {
    int64_t h1 = hash1(value, size);
    int64_t h2 = hash2(value, size);
    std::vector<int64_t> res = {};
    res = ([&]{ auto __tmp = res; __tmp.push_back(h1); return __tmp; }());
    res = ([&]{ auto __tmp = res; __tmp.push_back(h2); return __tmp; }());
    return res;
}

Bloom bloom_add(const Bloom& b, std::string value) {
    std::vector<int64_t> pos = hash_positions(value, b.size);
    std::vector<int64_t> bits = b.bits;
    int64_t i = int64_t(0);
    while ((i < pos.size())) {
        int64_t idx = ((b.size - int64_t(1)) - pos[i]);
        bits[idx] = int64_t(1);
        i = (i + int64_t(1));
    }
    return Bloom{.size = b.size, .bits = bits};
}

bool bloom_exists(const Bloom& b, std::string value) {
    std::vector<int64_t> pos = hash_positions(value, b.size);
    int64_t i = int64_t(0);
    while ((i < pos.size())) {
        int64_t idx = ((b.size - int64_t(1)) - pos[i]);
        if ((b.bits[idx] != int64_t(1))) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

std::string bitstring(const Bloom& b) {
    std::string res = std::string("");
    int64_t i = int64_t(0);
    while ((i < b.size)) {
        res = (res + ([&]{ std::ostringstream ss; ss << std::boolalpha << b.bits[i]; return ss.str(); }()));
        i = (i + int64_t(1));
    }
    return res;
}

std::string format_hash(const Bloom& b, std::string value) {
    std::vector<int64_t> pos = hash_positions(value, b.size);
    std::vector<int64_t> bits = {};
    int64_t i = int64_t(0);
    while ((i < b.size)) {
        bits = ([&]{ auto __tmp = bits; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(0);
    while ((i < pos.size())) {
        int64_t idx = ((b.size - int64_t(1)) - pos[i]);
        bits[idx] = int64_t(1);
        i = (i + int64_t(1));
    }
    std::string res = std::string("");
    i = int64_t(0);
    while ((i < b.size)) {
        res = (res + ([&]{ std::ostringstream ss; ss << std::boolalpha << bits[i]; return ss.str(); }()));
        i = (i + int64_t(1));
    }
    return res;
}

double estimated_error_rate(const Bloom& b) {
    int64_t ones = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < b.size)) {
        if ((b.bits[i] == int64_t(1))) {
            ones = (ones + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    double frac = ((double)((double)(ones)) / ((double)(b.size)));
    return (frac * frac);
}

bool any_in(const Bloom& b, const std::vector<std::string>& items) {
    int64_t i = int64_t(0);
    while ((i < items.size())) {
        if (bloom_exists(b, items[i])) {
            return true;
        }
        i = (i + int64_t(1));
    }
    return false;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        Bloom bloom = new_bloom(int64_t(8));
        std::cout << bitstring(bloom);
        std::cout << std::endl;
        std::cout << (bloom_exists(bloom, std::string("Titanic")) ? "true" : "false");
        std::cout << std::endl;
        bloom = bloom_add(bloom, std::string("Titanic"));
        std::cout << bitstring(bloom);
        std::cout << std::endl;
        std::cout << (bloom_exists(bloom, std::string("Titanic")) ? "true" : "false");
        std::cout << std::endl;
        bloom = bloom_add(bloom, std::string("Avatar"));
        std::cout << (bloom_exists(bloom, std::string("Avatar")) ? "true" : "false");
        std::cout << std::endl;
        std::cout << format_hash(bloom, std::string("Avatar"));
        std::cout << std::endl;
        std::cout << bitstring(bloom);
        std::cout << std::endl;
        std::vector<std::string> not_present = std::vector<std::string>{std::string("The Godfather"), std::string("Interstellar"), std::string("Parasite"), std::string("Pulp Fiction")};
        int64_t i = int64_t(0);
        while ((i < not_present.size())) {
            std::string film = not_present[i];
            std::cout << ((film + std::string(":")) + format_hash(bloom, film));
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
        std::cout << (any_in(bloom, not_present) ? "true" : "false");
        std::cout << std::endl;
        std::cout << (bloom_exists(bloom, std::string("Ratatouille")) ? "true" : "false");
        std::cout << std::endl;
        std::cout << format_hash(bloom, std::string("Ratatouille"));
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << estimated_error_rate(bloom); return ss.str(); }());
        std::cout << std::endl;
        bloom = bloom_add(bloom, std::string("The Godfather"));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << estimated_error_rate(bloom); return ss.str(); }());
        std::cout << std::endl;
        std::cout << bitstring(bloom);
        std::cout << std::endl;
    }
    return 0;
}
