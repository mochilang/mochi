// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:46:48 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct HashTable;

std::ostream& operator<<(std::ostream&, const HashTable&);


struct HashTable {
    int64_t size_table;
    std::vector<int64_t> values;
    double lim_charge;
    auto operator<=>(const HashTable&) const = default;
};

std::ostream& operator<<(std::ostream& os, const HashTable& v) {
    os << '{' << "'size_table': "<< v.size_table
 << ", " << "'values': "<< "["; for(size_t i=0;i<v.values.size();++i){ if(i>0) os << ", "; os << v.values[i]; } os << "]"
 << ", " << "'lim_charge': "<< std::fixed << std::setprecision(1) << v.lim_charge
 << '}';
    return os;
}

HashTable create_hash_table(int64_t size);
int64_t hash_function(const HashTable& table, int64_t key);
double balanced_factor(const HashTable& table);
int64_t collision_resolution(const HashTable& table, int64_t key);
void insert_data(HashTable table, int64_t data);
std::string int_to_string(int64_t n);
std::string keys_to_string(const HashTable& table);
int main();

HashTable qp = create_hash_table(int64_t(8));

HashTable create_hash_table(int64_t size) {
    std::vector<int64_t> vals = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(0); return __tmp; }());
        i = (i + int64_t(1));
    }
    return HashTable{.size_table = size, .values = vals, .lim_charge = 0.75};
}

int64_t hash_function(const HashTable& table, int64_t key) {
    return (key % table.size_table);
}

double balanced_factor(const HashTable& table) {
    int64_t count = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < table.values.size())) {
        if ((table.values[i] != any_to_double(nullptr))) {
            count = (count + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return ((double)((double)(count)) / ((double)(table.size_table)));
}

int64_t collision_resolution(const HashTable& table, int64_t key) {
    int64_t i = int64_t(1);
    int64_t new_key = hash_function(table, (key + (i * i)));
    while (((table.values[new_key] != any_to_double(nullptr)) && (table.values[new_key] != key))) {
        i = (i + int64_t(1));
        if ((balanced_factor(table) >= table.lim_charge)) {
            return table.size_table;
        }
        new_key = hash_function(table, (key + (i * i)));
    }
    return new_key;
}

void insert_data(HashTable table, int64_t data) {
    int64_t key = hash_function(table, data);
    std::vector<int64_t> vals = table.values;
    if ((vals[key] == any_to_double(nullptr))) {
        vals[key] = data;
    } else     if ((vals[key] == data)) {
        table.values = vals;
        return;
    } else {
        int64_t new_key = collision_resolution(table, key);
        if (((new_key < vals.size()) && (vals[new_key] == any_to_double(nullptr)))) {
            vals[new_key] = data;
        }
    }

    table.values = vals;
}

std::string int_to_string(int64_t n) {
    if ((n == int64_t(0))) {
        return std::string("0");
    }
    int64_t num = n;
    bool neg = false;
    if ((num < int64_t(0))) {
        neg = true;
        num = -num;
    }
    std::string res = std::string("");
    while ((num > int64_t(0))) {
        int64_t digit = (num % int64_t(10));
        std::string ch = std::string("0123456789").substr(digit, (digit + int64_t(1)) - digit);
        res = (ch + res);
        num = (num / int64_t(10));
    }
    if (neg) {
        res = (std::string("-") + res);
    }
    return res;
}

std::string keys_to_string(const HashTable& table) {
    std::string result = std::string("{");
    bool first = true;
    int64_t i = int64_t(0);
    while ((i < table.values.size())) {
        int64_t v = table.values[i];
        if ((v != any_to_double(nullptr))) {
            if (!first) {
                result = (result + std::string(", "));
            }
            result = (((result + int_to_string(i)) + std::string(": ")) + int_to_string(v));
            first = false;
        }
        i = (i + int64_t(1));
    }
    result = (result + std::string("}"));
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        insert_data(qp, int64_t(0));
        insert_data(qp, int64_t(999));
        insert_data(qp, int64_t(111));
        std::cout << keys_to_string(qp);
        std::cout << std::endl;
    }
    return 0;
}
