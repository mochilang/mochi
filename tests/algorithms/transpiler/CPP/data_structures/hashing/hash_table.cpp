// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:46:44 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct HashTable;

std::ostream& operator<<(std::ostream&, const HashTable&);


struct HashTable {
    int64_t size_table;
    std::vector<int64_t> values;
    std::vector<bool> filled;
    int64_t charge_factor;
    double lim_charge;
    auto operator<=>(const HashTable&) const = default;
};

std::ostream& operator<<(std::ostream& os, const HashTable& v) {
    os << '{' << "'size_table': "<< v.size_table
 << ", " << "'values': "<< "["; for(size_t i=0;i<v.values.size();++i){ if(i>0) os << ", "; os << v.values[i]; } os << "]"
 << ", " << "'filled': "<< "["; for(size_t i=0;i<v.filled.size();++i){ if(i>0) os << ", "; os << v.filled[i]; } os << "]"
 << ", " << "'charge_factor': "<< v.charge_factor
 << ", " << "'lim_charge': "<< std::fixed << std::setprecision(1) << v.lim_charge
 << '}';
    return os;
}

std::vector<int64_t> repeat_int(int64_t n, int64_t val);
std::vector<bool> repeat_bool(int64_t n, bool val);
std::vector<int64_t> set_int(const std::vector<int64_t>& xs, int64_t idx, int64_t value);
std::vector<bool> set_bool(const std::vector<bool>& xs, int64_t idx, bool value);
HashTable create_table(int64_t size_table, int64_t charge_factor, double lim_charge);
int64_t hash_function(const HashTable& ht, int64_t key);
bool is_prime(int64_t n);
int64_t next_prime(int64_t value, int64_t factor);
HashTable set_value(const HashTable& ht, int64_t key, int64_t data);
int64_t collision_resolution(const HashTable& ht, int64_t key);
HashTable rehashing(const HashTable& ht);
HashTable insert_data(const HashTable& ht, int64_t data);
std::vector<std::vector<int64_t>> keys(const HashTable& ht);
int main();

std::vector<int64_t> repeat_int(int64_t n, int64_t val) {
    std::vector<int64_t> res = std::vector<int64_t>{};
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(val); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<bool> repeat_bool(int64_t n, bool val) {
    std::vector<bool> res = std::vector<bool>{};
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(val); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<int64_t> set_int(const std::vector<int64_t>& xs, int64_t idx, int64_t value) {
    std::vector<int64_t> res = std::vector<int64_t>{};
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i == idx)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(value); return __tmp; }());
        } else {
            res = ([&]{ auto __tmp = res; __tmp.push_back(xs[i]); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<bool> set_bool(const std::vector<bool>& xs, int64_t idx, bool value) {
    std::vector<bool> res = std::vector<bool>{};
    int64_t i = int64_t(0);
    while ((i < xs.size())) {
        if ((i == idx)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(value); return __tmp; }());
        } else {
            res = ([&]{ auto __tmp = res; __tmp.push_back(xs[i]); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

HashTable create_table(int64_t size_table, int64_t charge_factor, double lim_charge) {
    return HashTable{.size_table = size_table, .values = repeat_int(size_table, int64_t(0)), .filled = repeat_bool(size_table, false), .charge_factor = charge_factor, .lim_charge = lim_charge};
}

int64_t hash_function(const HashTable& ht, int64_t key) {
    int64_t k = (key % ht.size_table);
    if ((k < int64_t(0))) {
        k = (k + ht.size_table);
    }
    return k;
}

bool is_prime(int64_t n) {
    if ((n < int64_t(2))) {
        return false;
    }
    if (((n % int64_t(2)) == int64_t(0))) {
        return (n == int64_t(2));
    }
    int64_t i = int64_t(3);
    while (((i * i) <= n)) {
        if (((n % i) == int64_t(0))) {
            return false;
        }
        i = (i + int64_t(2));
    }
    return true;
}

int64_t next_prime(int64_t value, int64_t factor) {
    int64_t candidate = ((value * factor) + int64_t(1));
    while (!is_prime(candidate)) {
        candidate = (candidate + int64_t(1));
    }
    return candidate;
}

HashTable set_value(const HashTable& ht, int64_t key, int64_t data) {
    std::vector<int64_t> new_values = set_int(ht.values, key, data);
    std::vector<bool> new_filled = set_bool(ht.filled, key, true);
    return HashTable{.size_table = ht.size_table, .values = new_values, .filled = new_filled, .charge_factor = ht.charge_factor, .lim_charge = ht.lim_charge};
}

int64_t collision_resolution(const HashTable& ht, int64_t key) {
    int64_t new_key = hash_function(ht, (key + int64_t(1)));
    int64_t steps = int64_t(0);
    while (ht.filled[new_key]) {
        new_key = hash_function(ht, (new_key + int64_t(1)));
        steps = (steps + int64_t(1));
        if ((steps >= ht.size_table)) {
            return -int64_t(1);
        }
    }
    return new_key;
}

HashTable rehashing(const HashTable& ht) {
    std::vector<int64_t> survivors = std::vector<int64_t>{};
    int64_t i = int64_t(0);
    while ((i < ht.values.size())) {
        if (ht.filled[i]) {
            survivors = ([&]{ auto __tmp = survivors; __tmp.push_back(ht.values[i]); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    int64_t new_size = next_prime(ht.size_table, int64_t(2));
    HashTable new_ht = create_table(new_size, ht.charge_factor, ht.lim_charge);
    i = int64_t(0);
    while ((i < survivors.size())) {
        new_ht = insert_data(new_ht, survivors[i]);
        i = (i + int64_t(1));
    }
    return new_ht;
}

HashTable insert_data(const HashTable& ht, int64_t data) {
    int64_t key = hash_function(ht, data);
    if (!ht.filled[key]) {
        return set_value(ht, key, data);
    }
    if ((ht.values[key] == data)) {
        return ht;
    }
    int64_t new_key = collision_resolution(ht, key);
    if ((new_key >= int64_t(0))) {
        return set_value(ht, new_key, data);
    }
    HashTable resized = rehashing(ht);
    return insert_data(resized, data);
}

std::vector<std::vector<int64_t>> keys(const HashTable& ht) {
    std::vector<std::vector<int64_t>> res = std::vector<std::vector<int64_t>>{};
    int64_t i = int64_t(0);
    while ((i < ht.values.size())) {
        if (ht.filled[i]) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(std::vector<int64_t>{i, ht.values[i]}); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        HashTable ht = create_table(int64_t(3), int64_t(1), 0.75);
        ht = insert_data(ht, int64_t(17));
        ht = insert_data(ht, int64_t(18));
        ht = insert_data(ht, int64_t(99));
        { auto __tmp = keys(ht); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; { std::ostringstream __ss;         __ss << __tmp[static_cast<size_t>(i)];
 std::cout << __ss.str(); }; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
