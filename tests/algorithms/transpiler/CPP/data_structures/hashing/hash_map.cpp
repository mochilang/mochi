// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:24:13 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Bucket;
struct HashMap;

std::ostream& operator<<(std::ostream&, const Bucket&);
std::ostream& operator<<(std::ostream&, const HashMap&);


struct Bucket {
    int64_t state;
    int64_t key;
    int64_t val;
    auto operator<=>(const Bucket&) const = default;
};

struct HashMap {
    std::vector<Bucket> buckets;
    int64_t len;
    int64_t cap_num;
    int64_t cap_den;
    int64_t initial_size;
    auto operator<=>(const HashMap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Bucket& v) {
    os << '{' << "'state': "<< v.state
 << ", " << "'key': "<< v.key
 << ", " << "'val': "<< v.val
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const HashMap& v) {
    os << '{' << "'buckets': "<< "["; for(size_t i=0;i<v.buckets.size();++i){ if(i>0) os << ", "; os << v.buckets[i]; } os << "]"
 << ", " << "'len': "<< v.len
 << ", " << "'cap_num': "<< v.cap_num
 << ", " << "'cap_den': "<< v.cap_den
 << ", " << "'initial_size': "<< v.initial_size
 << '}';
    return os;
}

std::vector<Bucket> make_buckets(int64_t n);
HashMap hashmap_new(int64_t initial_size);
int64_t bucket_index(const HashMap& hm, int64_t key);
int64_t next_index(const HashMap& hm, int64_t ind);
bool try_set(HashMap hm, int64_t ind, int64_t key, int64_t val);
bool is_full(const HashMap& hm);
bool is_sparse(const HashMap& hm);
void resize(HashMap hm, int64_t new_size);
void size_up(const HashMap& hm);
void size_down(const HashMap& hm);
void add_item(const HashMap& hm, int64_t key, int64_t val);
void hashmap_set(const HashMap& hm, int64_t key, int64_t val);
int64_t hashmap_get(const HashMap& hm, int64_t key);
void hashmap_del(HashMap hm, int64_t key);
int64_t hashmap_len(const HashMap& hm);
std::string hashmap_repr(const HashMap& hm);
int main();

HashMap hm = hashmap_new(int64_t(5));

std::vector<Bucket> make_buckets(int64_t n) {
    std::vector<Bucket> buckets = std::vector<Bucket>{};
    int64_t i = int64_t(0);
    while ((i < n)) {
        buckets = ([&]{ auto __tmp = buckets; __tmp.push_back(Bucket{.state = int64_t(0), .key = int64_t(0), .val = int64_t(0)}); return __tmp; }());
        i = (i + int64_t(1));
    }
    return buckets;
}

HashMap hashmap_new(int64_t initial_size) {
    return HashMap{.buckets = make_buckets(initial_size), .len = int64_t(0), .cap_num = int64_t(3), .cap_den = int64_t(4), .initial_size = initial_size};
}

int64_t bucket_index(const HashMap& hm, int64_t key) {
    int64_t ind = (key % hm.buckets.size());
    if ((ind < int64_t(0))) {
        ind = (ind + hm.buckets.size());
    }
    return ind;
}

int64_t next_index(const HashMap& hm, int64_t ind) {
    return ((ind + int64_t(1)) % hm.buckets.size());
}

bool try_set(HashMap hm, int64_t ind, int64_t key, int64_t val) {
    std::vector<Bucket> buckets = hm.buckets;
    Bucket b = buckets[ind];
    if (((b.state == int64_t(0)) || (b.state == int64_t(2)))) {
        buckets[ind] = Bucket{.state = int64_t(1), .key = key, .val = val};
        hm.buckets = buckets;
        hm.len = (hm.len + int64_t(1));
        return true;
    }
    if ((b.key == key)) {
        buckets[ind] = Bucket{.state = int64_t(1), .key = key, .val = val};
        hm.buckets = buckets;
        return true;
    }
    return false;
}

bool is_full(const HashMap& hm) {
    int64_t limit = ((hm.buckets.size() * hm.cap_num) / hm.cap_den);
    return (hm.len >= limit);
}

bool is_sparse(const HashMap& hm) {
    if ((hm.buckets.size() <= hm.initial_size)) {
        return false;
    }
    int64_t limit = ((hm.buckets.size() * hm.cap_num) / (int64_t(2) * hm.cap_den));
    return (hm.len < limit);
}

void resize(HashMap hm, int64_t new_size) {
    std::vector<Bucket> old = hm.buckets;
    hm.buckets = make_buckets(new_size);
    hm.len = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < old.size())) {
        Bucket it = old[i];
        if ((it.state == int64_t(1))) {
            add_item(hm, it.key, it.val);
        }
        i = (i + int64_t(1));
    }
}

void size_up(const HashMap& hm) {
    resize(hm, (int64_t)((hm.buckets.size() * int64_t(2))));
}

void size_down(const HashMap& hm) {
    resize(hm, (int64_t)((hm.buckets.size() / int64_t(2))));
}

void add_item(const HashMap& hm, int64_t key, int64_t val) {
    int64_t ind = bucket_index(hm, key);
    int64_t i = int64_t(0);
    while ((i < hm.buckets.size())) {
        if (try_set(hm, ind, key, val)) {
            break;
        }
        ind = next_index(hm, ind);
        i = (i + int64_t(1));
    }
}

void hashmap_set(const HashMap& hm, int64_t key, int64_t val) {
    if (is_full(hm)) {
        size_up(hm);
    }
    add_item(hm, key, val);
}

int64_t hashmap_get(const HashMap& hm, int64_t key) {
    std::vector<Bucket> buckets = hm.buckets;
    int64_t ind = bucket_index(hm, key);
    int64_t i = int64_t(0);
    while ((i < buckets.size())) {
        Bucket it = buckets[ind];
        if ((it.state == int64_t(0))) {
            break;
        }
        if (((it.state == int64_t(1)) && (it.key == key))) {
            return it.val;
        }
        ind = next_index(hm, ind);
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

void hashmap_del(HashMap hm, int64_t key) {
    std::vector<Bucket> buckets = hm.buckets;
    int64_t ind = bucket_index(hm, key);
    int64_t i = int64_t(0);
    while ((i < buckets.size())) {
        Bucket it = buckets[ind];
        if ((it.state == int64_t(0))) {
            std::cout << (std::string("KeyError: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << key; return ss.str(); }()));
            std::cout << std::endl;
            return;
        }
        if (((it.state == int64_t(1)) && (it.key == key))) {
            buckets[ind] = Bucket{.state = int64_t(2), .key = int64_t(0), .val = int64_t(0)};
            hm.buckets = buckets;
            hm.len = (hm.len - int64_t(1));
            break;
        }
        ind = next_index(hm, ind);
        i = (i + int64_t(1));
    }
    if (is_sparse(hm)) {
        size_down(hm);
    }
}

int64_t hashmap_len(const HashMap& hm) {
    return hm.len;
}

std::string hashmap_repr(const HashMap& hm) {
    std::string out = std::string("HashMap(");
    bool first = true;
    int64_t i = int64_t(0);
    while ((i < hm.buckets.size())) {
        Bucket b = hm.buckets[i];
        if ((b.state == int64_t(1))) {
            if (!first) {
                out = (out + std::string(", "));
            } else {
                first = false;
            }
            out = (((out + ([&]{ std::ostringstream ss; ss << std::boolalpha << b.key; return ss.str(); }())) + std::string(": ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << b.val; return ss.str(); }()));
        }
        i = (i + int64_t(1));
    }
    out = (out + std::string(")"));
    return out;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        hashmap_set(hm, int64_t(1), int64_t(10));
        hashmap_set(hm, int64_t(2), int64_t(20));
        hashmap_set(hm, int64_t(3), int64_t(30));
        std::cout << hashmap_repr(hm);
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << hashmap_get(hm, int64_t(2)); return ss.str(); }());
        std::cout << std::endl;
        hashmap_del(hm, int64_t(1));
        std::cout << hashmap_repr(hm);
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << hashmap_len(hm); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
