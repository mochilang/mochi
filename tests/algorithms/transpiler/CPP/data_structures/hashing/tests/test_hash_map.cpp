// Generated by Mochi transpiler v0.10.60 on 2025-08-07 15:21:17 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Entry;
struct HashMap;
struct GetResult;
struct DelResult;

std::ostream& operator<<(std::ostream&, const Entry&);
std::ostream& operator<<(std::ostream&, const HashMap&);
std::ostream& operator<<(std::ostream&, const GetResult&);
std::ostream& operator<<(std::ostream&, const DelResult&);


struct Entry {
    std::string key;
    std::string value;
    auto operator<=>(const Entry&) const = default;
};

struct HashMap {
    std::vector<Entry> entries;
    auto operator<=>(const HashMap&) const = default;
};

struct GetResult {
    bool found;
    std::string value;
    auto operator<=>(const GetResult&) const = default;
};

struct DelResult {
    HashMap map;
    bool ok;
    auto operator<=>(const DelResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Entry& v) {
    os << '{' << "'key': "<< "'" << v.key << "'"
 << ", " << "'value': "<< "'" << v.value << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const HashMap& v) {
    os << '{' << "'entries': "<< "["; for(size_t i=0;i<v.entries.size();++i){ if(i>0) os << ", "; os << v.entries[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GetResult& v) {
    os << '{' << "'found': "<< v.found
 << ", " << "'value': "<< "'" << v.value << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const DelResult& v) {
    os << '{' << "'map': "<< v.map
 << ", " << "'ok': "<< v.ok
 << '}';
    return os;
}

HashMap make_hash_map();
int64_t hm_len(const HashMap& m);
HashMap hm_set(const HashMap& m, std::string key, std::string value);
GetResult hm_get(const HashMap& m, std::string key);
DelResult hm_del(const HashMap& m, std::string key);
bool test_add_items();
bool test_overwrite_items();
bool test_delete_items();
bool test_access_absent_items();
bool test_add_with_resize_up();
bool test_add_with_resize_down();
int main();

HashMap make_hash_map() {
    return HashMap{.entries = std::vector<Entry>{}};
}

int64_t hm_len(const HashMap& m) {
    return m.entries.size();
}

HashMap hm_set(const HashMap& m, std::string key, std::string value) {
    std::vector<Entry> entries = m.entries;
    bool updated = false;
    std::vector<Entry> new_entries = std::vector<Entry>{};
    int64_t i = int64_t(0);
    while ((i < entries.size())) {
        Entry e = entries[i];
        if ((e.key == key)) {
            new_entries = ([&]{ auto __tmp = new_entries; __tmp.push_back(Entry{.key = key, .value = value}); return __tmp; }());
            updated = true;
        } else {
            new_entries = ([&]{ auto __tmp = new_entries; __tmp.push_back(e); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    if (!updated) {
        new_entries = ([&]{ auto __tmp = new_entries; __tmp.push_back(Entry{.key = key, .value = value}); return __tmp; }());
    }
    return HashMap{.entries = new_entries};
}

GetResult hm_get(const HashMap& m, std::string key) {
    int64_t i = int64_t(0);
    while ((i < m.entries.size())) {
        Entry e = m.entries[i];
        if ((e.key == key)) {
            return GetResult{.found = true, .value = e.value};
        }
        i = (i + int64_t(1));
    }
    return GetResult{.found = false, .value = std::string("")};
}

DelResult hm_del(const HashMap& m, std::string key) {
    std::vector<Entry> entries = m.entries;
    std::vector<Entry> new_entries = std::vector<Entry>{};
    bool removed = false;
    int64_t i = int64_t(0);
    while ((i < entries.size())) {
        Entry e = entries[i];
        if ((e.key == key)) {
            removed = true;
        } else {
            new_entries = ([&]{ auto __tmp = new_entries; __tmp.push_back(e); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    if (removed) {
        return DelResult{.map = HashMap{.entries = new_entries}, .ok = true};
    }
    return DelResult{.map = m, .ok = false};
}

bool test_add_items() {
    HashMap h = make_hash_map();
    h = hm_set(h, std::string("key_a"), std::string("val_a"));
    h = hm_set(h, std::string("key_b"), std::string("val_b"));
    GetResult a = hm_get(h, std::string("key_a"));
    GetResult b = hm_get(h, std::string("key_b"));
    return (((((hm_len(h) == int64_t(2)) && a.found) && b.found) && (a.value == std::string("val_a"))) && (b.value == std::string("val_b")));
}

bool test_overwrite_items() {
    HashMap h = make_hash_map();
    h = hm_set(h, std::string("key_a"), std::string("val_a"));
    h = hm_set(h, std::string("key_a"), std::string("val_b"));
    GetResult a = hm_get(h, std::string("key_a"));
    return (((hm_len(h) == int64_t(1)) && a.found) && (a.value == std::string("val_b")));
}

bool test_delete_items() {
    HashMap h = make_hash_map();
    h = hm_set(h, std::string("key_a"), std::string("val_a"));
    h = hm_set(h, std::string("key_b"), std::string("val_b"));
    DelResult d1 = hm_del(h, std::string("key_a"));
    h = d1.map;
    DelResult d2 = hm_del(h, std::string("key_b"));
    h = d2.map;
    h = hm_set(h, std::string("key_a"), std::string("val_a"));
    DelResult d3 = hm_del(h, std::string("key_a"));
    h = d3.map;
    return (hm_len(h) == int64_t(0));
}

bool test_access_absent_items() {
    HashMap h = make_hash_map();
    GetResult g1 = hm_get(h, std::string("key_a"));
    DelResult d1 = hm_del(h, std::string("key_a"));
    h = d1.map;
    h = hm_set(h, std::string("key_a"), std::string("val_a"));
    DelResult d2 = hm_del(h, std::string("key_a"));
    h = d2.map;
    DelResult d3 = hm_del(h, std::string("key_a"));
    h = d3.map;
    GetResult g2 = hm_get(h, std::string("key_a"));
    return ((((((g1.found == false) && (d1.ok == false)) && d2.ok) && (d3.ok == false)) && (g2.found == false)) && (hm_len(h) == int64_t(0)));
}

bool test_add_with_resize_up() {
    HashMap h = make_hash_map();
    int64_t i = int64_t(0);
    while ((i < int64_t(5))) {
        std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }());
        h = hm_set(h, s, s);
        i = (i + int64_t(1));
    }
    return (hm_len(h) == int64_t(5));
}

bool test_add_with_resize_down() {
    HashMap h = make_hash_map();
    int64_t i = int64_t(0);
    while ((i < int64_t(5))) {
        std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }());
        h = hm_set(h, s, s);
        i = (i + int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < int64_t(5))) {
        std::string s = ([&]{ std::ostringstream ss; ss << std::boolalpha << j; return ss.str(); }());
        DelResult d = hm_del(h, s);
        h = d.map;
        j = (j + int64_t(1));
    }
    h = hm_set(h, std::string("key_a"), std::string("val_b"));
    GetResult a = hm_get(h, std::string("key_a"));
    return (((hm_len(h) == int64_t(1)) && a.found) && (a.value == std::string("val_b")));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (test_add_items() ? "true" : "false");
        std::cout << std::endl;
        std::cout << (test_overwrite_items() ? "true" : "false");
        std::cout << std::endl;
        std::cout << (test_delete_items() ? "true" : "false");
        std::cout << std::endl;
        std::cout << (test_access_absent_items() ? "true" : "false");
        std::cout << std::endl;
        std::cout << (test_add_with_resize_up() ? "true" : "false");
        std::cout << std::endl;
        std::cout << (test_add_with_resize_down() ? "true" : "false");
        std::cout << std::endl;
        std::cout << (true ? "true" : "false");
        std::cout << std::endl;
    }
    return 0;
}
