// Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:20:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(6) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct HashTableWithLinkedList;

std::ostream& operator<<(std::ostream&, const HashTableWithLinkedList&);


struct HashTableWithLinkedList {
    int64_t size_table;
    int64_t charge_factor;
    std::vector<std::vector<int64_t>> values;
    std::map<int64_t, std::vector<int64_t>> keys;
    auto operator<=>(const HashTableWithLinkedList&) const = default;
};

std::ostream& operator<<(std::ostream& os, const HashTableWithLinkedList& v) {
    os << '{' << "'size_table': "<< v.size_table
 << ", " << "'charge_factor': "<< v.charge_factor
 << ", " << "'values': "<< "["; for(size_t i=0;i<v.values.size();++i){ if(i>0) os << ", "; os << v.values[i]; } os << "]"
 << ", " << "'keys': "<< "{"; bool first_3=true; for(const auto& p: v.keys){ if(!first_3) os << ", "; first_3=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

HashTableWithLinkedList make_table(int64_t size_table, int64_t charge_factor);
int64_t hash_function(const HashTableWithLinkedList& ht, int64_t key);
std::vector<int64_t> prepend(const std::vector<int64_t>& lst, int64_t value);
void set_value(HashTableWithLinkedList ht, int64_t key, int64_t data);
int64_t count_empty(const HashTableWithLinkedList& ht);
double balanced_factor(const HashTableWithLinkedList& ht);
int64_t collision_resolution(const HashTableWithLinkedList& ht, int64_t key);
void insert(HashTableWithLinkedList ht, int64_t data);
int main();

HashTableWithLinkedList make_table(int64_t size_table, int64_t charge_factor) {
    std::vector<std::vector<int64_t>> vals = {};
    int64_t i = int64_t(0);
    while ((i < size_table)) {
        vals = ([&]{ auto __tmp = vals; __tmp.push_back(std::vector<int64_t>{}); return __tmp; }());
        i = (i + int64_t(1));
    }
    return HashTableWithLinkedList{size_table, charge_factor, vals, {}};
}

int64_t hash_function(const HashTableWithLinkedList& ht, int64_t key) {
    int64_t res = (key % ht.size_table);
    if ((res < int64_t(0))) {
        res = (res + ht.size_table);
    }
    return res;
}

std::vector<int64_t> prepend(const std::vector<int64_t>& lst, int64_t value) {
    std::vector<int64_t> result = std::vector<int64_t>{value};
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        result = ([&]{ auto __tmp = result; __tmp.push_back(_index(lst, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

void set_value(HashTableWithLinkedList ht, int64_t key, int64_t data) {
    std::vector<int64_t> current = _index(ht.values, key);
    std::vector<int64_t> updated = prepend(current, data);
    std::vector<std::vector<int64_t>> vals = ht.values;
    _index(vals, key) = updated;
    ht.values = vals;
    std::map<int64_t, std::vector<int64_t>> ks = ht.keys;
    ks[static_cast<size_t>(key)] = updated;
    ht.keys = ks;
}

int64_t count_empty(const HashTableWithLinkedList& ht) {
    int64_t count = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < ht.values.size())) {
        if ((_index(ht.values, i).size() == int64_t(0))) {
            count = (count + int64_t(1));
        }
        i = (i + int64_t(1));
    }
    return count;
}

double balanced_factor(const HashTableWithLinkedList& ht) {
    int64_t total = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < ht.values.size())) {
        total = (total + (ht.charge_factor - _index(ht.values, i).size()));
        i = (i + int64_t(1));
    }
    return (((double)((double)(total)) / (double)((double)(ht.size_table))) * (double)(ht.charge_factor));
}

int64_t collision_resolution(const HashTableWithLinkedList& ht, int64_t key) {
    if (!((_index(ht.values, key).size() == ht.charge_factor) && (count_empty(ht) == int64_t(0)))) {
        return key;
    }
    int64_t new_key = ((key + int64_t(1)) % ht.size_table);
    int64_t steps = int64_t(0);
    while (((_index(ht.values, new_key).size() == ht.charge_factor) && (steps < (ht.size_table - int64_t(1))))) {
        new_key = ((new_key + int64_t(1)) % ht.size_table);
        steps = (steps + int64_t(1));
    }
    if ((_index(ht.values, new_key).size() < ht.charge_factor)) {
        return new_key;
    }
    return -int64_t(1);
}

void insert(HashTableWithLinkedList ht, int64_t data) {
    int64_t key = hash_function(ht, data);
    if (((_index(ht.values, key).size() == int64_t(0)) || (_index(ht.values, key).size() < ht.charge_factor))) {
        set_value(ht, key, data);
        return;
    }
    int64_t dest = collision_resolution(ht, key);
    if ((dest >= int64_t(0))) {
        set_value(ht, dest, data);
    } else {
        std::cout << std::string("table full");
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        HashTableWithLinkedList ht = make_table(int64_t(3), int64_t(2));
        insert(ht, int64_t(10));
        insert(ht, int64_t(20));
        insert(ht, int64_t(30));
        insert(ht, int64_t(40));
        insert(ht, int64_t(50));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp1 = ht.values; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; { std::ostringstream __ss; { auto __tmp2 = __tmp1[static_cast<size_t>(i)]; __ss << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) __ss << ' '; __ss << __tmp2[i]; } __ss << "]"; }
 ss << __ss.str(); }; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << _to_string(balanced_factor(ht));
        std::cout << std::endl;
    }
    return 0;
}
