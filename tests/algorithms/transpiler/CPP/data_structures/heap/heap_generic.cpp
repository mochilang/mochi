// Generated by Mochi transpiler v0.10.60 on 2025-08-07 15:21:53 GMT+7
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Heap;

std::ostream& operator<<(std::ostream&, const Heap&);


struct Heap {
    std::vector<std::vector<int64_t>> arr;
    std::map<int64_t, int64_t> pos_map;
    int64_t size;
    std::function<int64_t(int64_t)> key;
    auto operator<=>(const Heap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Heap& v) {
    os << '{' << "'arr': "<< "["; for(size_t i=0;i<v.arr.size();++i){ if(i>0) os << ", "; os << v.arr[i]; } os << "]"
 << ", " << "'pos_map': "<< "{"; bool first_1=true; for(const auto& p: v.pos_map){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'size': "<< v.size
 << ", " << "'key': "<< "<fn>"
 << '}';
    return os;
}

Heap new_heap(std::function<int64_t(int64_t)> key);
int64_t parent(int64_t i);
int64_t left(int64_t i, int64_t size);
int64_t right(int64_t i, int64_t size);
void swap(Heap& h, int64_t i, int64_t j);
bool cmp(const Heap& h, int64_t i, int64_t j);
int64_t get_valid_parent(const Heap& h, int64_t i);
void heapify_up(Heap& h, int64_t index);
void heapify_down(Heap& h, int64_t index);
void update_item(Heap& h, int64_t item, int64_t item_value);
void delete_item(Heap& h, int64_t item);
void insert_item(Heap& h, int64_t item, int64_t item_value);
std::vector<int64_t> get_top(const Heap& h);
std::vector<int64_t> extract_top(Heap& h);
int64_t identity(int64_t x);
int64_t negate(int64_t x);
int main();

Heap h = Heap{};

Heap new_heap(std::function<int64_t(int64_t)> key) {
    return Heap{.arr = std::vector<std::vector<int64_t>>{}, .pos_map = {}, .size = int64_t(0), .key = key};
}

int64_t parent(int64_t i) {
    if ((i > int64_t(0))) {
        return ((i - int64_t(1)) / int64_t(2));
    }
    return -int64_t(1);
}

int64_t left(int64_t i, int64_t size) {
    int64_t l = ((int64_t(2) * i) + int64_t(1));
    if ((l < size)) {
        return l;
    }
    return -int64_t(1);
}

int64_t right(int64_t i, int64_t size) {
    int64_t r = ((int64_t(2) * i) + int64_t(2));
    if ((r < size)) {
        return r;
    }
    return -int64_t(1);
}

void swap(Heap& h, int64_t i, int64_t j) {
    std::vector<std::vector<int64_t>> arr = h.arr;
    int64_t item_i = arr[i][int64_t(0)];
    int64_t item_j = arr[j][int64_t(0)];
    std::map<int64_t, int64_t> pm = h.pos_map;
    pm[item_i] = (j + int64_t(1));
    pm[item_j] = (i + int64_t(1));
    h.pos_map = pm;
    std::vector<int64_t> tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    h.arr = arr;
}

bool cmp(const Heap& h, int64_t i, int64_t j) {
    std::vector<std::vector<int64_t>> arr = h.arr;
    return (arr[i][int64_t(1)] < arr[j][int64_t(1)]);
}

int64_t get_valid_parent(const Heap& h, int64_t i) {
    int64_t vp = i;
    int64_t l = left(i, h.size);
    if (((l != (int64_t(0) - int64_t(1))) && (cmp(h, l, vp) == false))) {
        vp = l;
    }
    int64_t r = right(i, h.size);
    if (((r != (int64_t(0) - int64_t(1))) && (cmp(h, r, vp) == false))) {
        vp = r;
    }
    return vp;
}

void heapify_up(Heap& h, int64_t index) {
    int64_t idx = index;
    int64_t p = parent(idx);
    while (((p != (int64_t(0) - int64_t(1))) && (cmp(h, idx, p) == false))) {
        swap(h, idx, p);
        idx = p;
        p = parent(p);
    }
}

void heapify_down(Heap& h, int64_t index) {
    int64_t idx = index;
    int64_t vp = get_valid_parent(h, idx);
    while ((vp != idx)) {
        swap(h, idx, vp);
        idx = vp;
        vp = get_valid_parent(h, idx);
    }
}

void update_item(Heap& h, int64_t item, int64_t item_value) {
    std::map<int64_t, int64_t> pm = h.pos_map;
    if ((([&](const auto& __m){ auto __it = __m.find(item); return __it != __m.end() ? __it->second : 0; })(pm) == int64_t(0))) {
        return;
    }
    int64_t index = (([&](const auto& __m){ auto __it = __m.find(item); return __it != __m.end() ? __it->second : 0; })(pm) - int64_t(1));
    std::vector<std::vector<int64_t>> arr = h.arr;
    arr[index] = std::vector<int64_t>{item, (h.key)(item_value)};
    h.arr = arr;
    h.pos_map = pm;
    heapify_up(h, index);
    heapify_down(h, index);
}

void delete_item(Heap& h, int64_t item) {
    std::map<int64_t, int64_t> pm = h.pos_map;
    if ((([&](const auto& __m){ auto __it = __m.find(item); return __it != __m.end() ? __it->second : 0; })(pm) == int64_t(0))) {
        return;
    }
    int64_t index = (([&](const auto& __m){ auto __it = __m.find(item); return __it != __m.end() ? __it->second : 0; })(pm) - int64_t(1));
    pm[item] = int64_t(0);
    std::vector<std::vector<int64_t>> arr = h.arr;
    int64_t last_index = (h.size - int64_t(1));
    if ((index != last_index)) {
        arr[index] = arr[last_index];
        int64_t moved = arr[index][int64_t(0)];
        pm[moved] = (index + int64_t(1));
    }
    h.size = (h.size - int64_t(1));
    h.arr = arr;
    h.pos_map = pm;
    if ((h.size > index)) {
        heapify_up(h, index);
        heapify_down(h, index);
    }
}

void insert_item(Heap& h, int64_t item, int64_t item_value) {
    std::vector<std::vector<int64_t>> arr = h.arr;
    int64_t arr_len = arr.size();
    if ((arr_len == h.size)) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(std::vector<int64_t>{item, (h.key)(item_value)}); return __tmp; }());
    } else {
        arr[h.size] = std::vector<int64_t>{item, (h.key)(item_value)};
    }
    std::map<int64_t, int64_t> pm = h.pos_map;
    pm[item] = (h.size + int64_t(1));
    h.size = (h.size + int64_t(1));
    h.arr = arr;
    h.pos_map = pm;
    heapify_up(h, (h.size - int64_t(1)));
}

std::vector<int64_t> get_top(const Heap& h) {
    std::vector<std::vector<int64_t>> arr = h.arr;
    if ((h.size > int64_t(0))) {
        return arr[int64_t(0)];
    }
    return std::vector<int64_t>{};
}

std::vector<int64_t> extract_top(Heap& h) {
    std::vector<int64_t> top = get_top(h);
    if ((top.size() > int64_t(0))) {
        delete_item(h, top[int64_t(0)]);
    }
    return top;
}

int64_t identity(int64_t x) {
    return x;
}

int64_t negate(int64_t x) {
    return (int64_t(0) - x);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        h = new_heap(identity);
        insert_item(h, int64_t(5), int64_t(34));
        insert_item(h, int64_t(6), int64_t(31));
        insert_item(h, int64_t(7), int64_t(37));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = get_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = extract_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = extract_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = extract_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        h = new_heap(negate);
        insert_item(h, int64_t(5), int64_t(34));
        insert_item(h, int64_t(6), int64_t(31));
        insert_item(h, int64_t(7), int64_t(37));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = get_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = extract_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = extract_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = extract_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        insert_item(h, int64_t(8), int64_t(45));
        insert_item(h, int64_t(9), int64_t(40));
        insert_item(h, int64_t(10), int64_t(50));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = get_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        update_item(h, int64_t(10), int64_t(30));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = get_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        delete_item(h, int64_t(10));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = get_top(h); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
