// Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:17:50 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(6) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Node;
struct MinHeap;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const MinHeap&);


struct Node {
    std::string name;
    int64_t val;
    auto operator<=>(const Node&) const = default;
};

struct MinHeap {
    std::vector<Node> heap;
    std::map<std::string, int64_t> idx_of_element;
    std::map<std::string, int64_t> heap_dict;
    auto operator<=>(const MinHeap&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'name': "<< "'" << v.name << "'"
 << ", " << "'val': "<< v.val
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const MinHeap& v) {
    os << '{' << "'heap': "<< "["; for(size_t i=0;i<v.heap.size();++i){ if(i>0) os << ", "; os << v.heap[i]; } os << "]"
 << ", " << "'idx_of_element': "<< "{"; bool first_1=true; for(const auto& p: v.idx_of_element){ if(!first_1) os << ", "; first_1=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'heap_dict': "<< "{"; bool first_2=true; for(const auto& p: v.heap_dict){ if(!first_2) os << ", "; first_2=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

int64_t get_parent_idx(int64_t idx);
int64_t get_left_child_idx(int64_t idx);
int64_t get_right_child_idx(int64_t idx);
std::map<std::string, int64_t> remove_key(const std::map<std::string, int64_t>& m, std::string k);
std::vector<Node> slice_without_last(const std::vector<Node>& xs);
void sift_down(MinHeap mh, int64_t idx);
void sift_up(MinHeap mh, int64_t idx);
MinHeap new_min_heap(const std::vector<Node>& array);
Node peek(const MinHeap& mh);
Node remove_min(MinHeap mh);
void insert(MinHeap mh, const Node& node);
bool is_empty(const MinHeap& mh);
int64_t get_value(const MinHeap& mh, std::string key);
void decrease_key(MinHeap mh, Node node, int64_t new_value);
std::string node_to_string(const Node& n);
int main();

Node r = Node{std::string("R"), -int64_t(1)};
Node b = Node{std::string("B"), int64_t(6)};
Node a = Node{std::string("A"), int64_t(3)};
Node x = Node{std::string("X"), int64_t(1)};
Node e = Node{std::string("E"), int64_t(4)};
MinHeap my_min_heap = MinHeap{};

int64_t get_parent_idx(int64_t idx) {
    return ((idx - int64_t(1)) / int64_t(2));
}

int64_t get_left_child_idx(int64_t idx) {
    return ((idx * int64_t(2)) + int64_t(1));
}

int64_t get_right_child_idx(int64_t idx) {
    return ((idx * int64_t(2)) + int64_t(2));
}

std::map<std::string, int64_t> remove_key(const std::map<std::string, int64_t>& m, std::string k) {
    std::map<std::string, int64_t> out = {};
    for (const auto& __p : m) {
        auto key = __p.first;
        if ((key != k)) {
            out[key] = ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return int64_t{}; return __it->second; })(m);
        }
    }
    return out;
}

std::vector<Node> slice_without_last(const std::vector<Node>& xs) {
    std::vector<Node> res = {};
    int64_t i = int64_t(0);
    while ((i < (xs.size() - int64_t(1)))) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(_index(xs, i)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

void sift_down(MinHeap mh, int64_t idx) {
    std::vector<Node> heap = mh.heap;
    std::map<std::string, int64_t> idx_map = mh.idx_of_element;
    int64_t i = idx;
    while (true) {
        int64_t left = get_left_child_idx(i);
        int64_t right = get_right_child_idx(i);
        int64_t smallest = i;
        if (((left < heap.size()) && (_index(heap, left).val < _index(heap, smallest).val))) {
            smallest = left;
        }
        if (((right < heap.size()) && (_index(heap, right).val < _index(heap, smallest).val))) {
            smallest = right;
        }
        if ((smallest != i)) {
            Node tmp = _index(heap, i);
            _index(heap, i) = _index(heap, smallest);
            _index(heap, smallest) = tmp;
            idx_map[_index(heap, i).name] = i;
            idx_map[_index(heap, smallest).name] = smallest;
            i = smallest;
        } else {
            break;
        }
    }
    mh.heap = heap;
    mh.idx_of_element = idx_map;
}

void sift_up(MinHeap mh, int64_t idx) {
    std::vector<Node> heap = mh.heap;
    std::map<std::string, int64_t> idx_map = mh.idx_of_element;
    int64_t i = idx;
    int64_t p = get_parent_idx(i);
    while (((p >= int64_t(0)) && (_index(heap, p).val > _index(heap, i).val))) {
        Node tmp = _index(heap, p);
        _index(heap, p) = _index(heap, i);
        _index(heap, i) = tmp;
        idx_map[_index(heap, p).name] = p;
        idx_map[_index(heap, i).name] = i;
        i = p;
        p = get_parent_idx(i);
    }
    mh.heap = heap;
    mh.idx_of_element = idx_map;
}

MinHeap new_min_heap(const std::vector<Node>& array) {
    std::map<std::string, int64_t> idx_map = {};
    std::map<std::string, int64_t> val_map = {};
    std::vector<Node> heap = array;
    int64_t i = int64_t(0);
    while ((i < array.size())) {
        Node n = _index(array, i);
        idx_map[n.name] = i;
        val_map[n.name] = n.val;
        i = (i + int64_t(1));
    }
    MinHeap mh = MinHeap{heap, idx_map, val_map};
    int64_t start = get_parent_idx((array.size() - int64_t(1)));
    while ((start >= int64_t(0))) {
        sift_down(mh, start);
        start = (start - int64_t(1));
    }
    return mh;
}

Node peek(const MinHeap& mh) {
    return _index(mh.heap, int64_t(0));
}

Node remove_min(MinHeap mh) {
    std::vector<Node> heap = mh.heap;
    std::map<std::string, int64_t> idx_map = mh.idx_of_element;
    std::map<std::string, int64_t> val_map = mh.heap_dict;
    int64_t last_idx = (heap.size() - int64_t(1));
    Node top = _index(heap, int64_t(0));
    Node last = _index(heap, last_idx);
    _index(heap, int64_t(0)) = last;
    idx_map[last.name] = int64_t(0);
    heap = slice_without_last(heap);
    idx_map = remove_key(idx_map, top.name);
    val_map = remove_key(val_map, top.name);
    mh.heap = heap;
    mh.idx_of_element = idx_map;
    mh.heap_dict = val_map;
    if ((heap.size() > int64_t(0))) {
        sift_down(mh, int64_t(0));
    }
    return top;
}

void insert(MinHeap mh, const Node& node) {
    std::vector<Node> heap = mh.heap;
    std::map<std::string, int64_t> idx_map = mh.idx_of_element;
    std::map<std::string, int64_t> val_map = mh.heap_dict;
    heap = ([&]{ auto __tmp = heap; __tmp.push_back(node); return __tmp; }());
    int64_t idx = (heap.size() - int64_t(1));
    idx_map[node.name] = idx;
    val_map[node.name] = node.val;
    mh.heap = heap;
    mh.idx_of_element = idx_map;
    mh.heap_dict = val_map;
    sift_up(mh, idx);
}

bool is_empty(const MinHeap& mh) {
    return (mh.heap.size() == int64_t(0));
}

int64_t get_value(const MinHeap& mh, std::string key) {
    return ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return int64_t{}; return __it->second; })(mh.heap_dict);
}

void decrease_key(MinHeap mh, Node node, int64_t new_value) {
    std::vector<Node> heap = mh.heap;
    std::map<std::string, int64_t> val_map = mh.heap_dict;
    std::map<std::string, int64_t> idx_map = mh.idx_of_element;
    int64_t idx = ([&](const auto& __m){ auto __it = __m.find(node.name); if (__it == __m.end()) return int64_t{}; return __it->second; })(idx_map);
    if (!(_index(heap, idx).val > new_value)) {
        throw std::runtime_error(std::string("newValue must be less than current value"));
    }
    node.val = new_value;
    { auto& __tmp = heap[static_cast<size_t>(idx)]; __tmp.val = new_value; }
    val_map[node.name] = new_value;
    mh.heap = heap;
    mh.heap_dict = val_map;
    sift_up(mh, idx);
}

std::string node_to_string(const Node& n) {
    return ((((std::string("Node(") + n.name) + std::string(", ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << n.val; return ss.str(); }())) + std::string(")"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        my_min_heap = new_min_heap(std::vector<Node>{r, b, a, x, e});
        std::cout << std::string("Min Heap - before decrease key");
        std::cout << std::endl;
        for (Node n : my_min_heap.heap) {
            std::cout << node_to_string(n);
            std::cout << std::endl;
        }
        std::cout << std::string("Min Heap - After decrease key of node [B -> -17]");
        std::cout << std::endl;
        decrease_key(my_min_heap, b, -int64_t(17));
        for (Node n : my_min_heap.heap) {
            std::cout << node_to_string(n);
            std::cout << std::endl;
        }
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_value(my_min_heap, std::string("B")); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
