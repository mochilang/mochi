// Generated by Mochi transpiler v0.10.60 on 2025-08-07 15:21:23 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t parent_index(int64_t child_idx);
int64_t left_child_idx(int64_t parent_idx);
int64_t right_child_idx(int64_t parent_idx);
void max_heapify(std::vector<double>& h, int64_t heap_size, int64_t index);
int64_t build_max_heap(std::vector<double>& h);
double extract_max(std::vector<double>& h, int64_t heap_size);
int64_t insert(std::vector<double>& h, int64_t heap_size, double value);
void heap_sort(std::vector<double>& h, int64_t heap_size);
std::string heap_to_string(const std::vector<double>& h, int64_t heap_size);
int main();

std::vector<double> heap = std::vector<double>{};
int64_t size = 0;
double m = 0;

int64_t parent_index(int64_t child_idx) {
    if ((child_idx > int64_t(0))) {
        return ((child_idx - int64_t(1)) / int64_t(2));
    }
    return -int64_t(1);
}

int64_t left_child_idx(int64_t parent_idx) {
    return ((int64_t(2) * parent_idx) + int64_t(1));
}

int64_t right_child_idx(int64_t parent_idx) {
    return ((int64_t(2) * parent_idx) + int64_t(2));
}

void max_heapify(std::vector<double>& h, int64_t heap_size, int64_t index) {
    int64_t largest = index;
    int64_t left = left_child_idx(index);
    int64_t right = right_child_idx(index);
    if (((left < heap_size) && (h[left] > h[largest]))) {
        largest = left;
    }
    if (((right < heap_size) && (h[right] > h[largest]))) {
        largest = right;
    }
    if ((largest != index)) {
        double temp = h[index];
        h[index] = h[largest];
        h[largest] = temp;
        max_heapify(h, heap_size, largest);
    }
}

int64_t build_max_heap(std::vector<double>& h) {
    int heap_size = h.size();
    int i = ((heap_size / int64_t(2)) - int64_t(1));
    while ((i >= int64_t(0))) {
        max_heapify(h, (int64_t)(heap_size), (int64_t)(i));
        i = (i - int64_t(1));
    }
    return heap_size;
}

double extract_max(std::vector<double>& h, int64_t heap_size) {
    double max_value = h[int64_t(0)];
    h[int64_t(0)] = h[(heap_size - int64_t(1))];
    max_heapify(h, (heap_size - int64_t(1)), int64_t(0));
    return max_value;
}

int64_t insert(std::vector<double>& h, int64_t heap_size, double value) {
    if ((heap_size < h.size())) {
        h[heap_size] = value;
    } else {
        h = ([&]{ auto __tmp = h; __tmp.push_back(value); return __tmp; }());
    }
    heap_size = (heap_size + int64_t(1));
    int64_t idx = ((heap_size - int64_t(1)) / int64_t(2));
    while ((idx >= int64_t(0))) {
        max_heapify(h, heap_size, idx);
        idx = ((idx - int64_t(1)) / int64_t(2));
    }
    return heap_size;
}

void heap_sort(std::vector<double>& h, int64_t heap_size) {
    int64_t size = heap_size;
    int64_t j = (size - int64_t(1));
    while ((j > int64_t(0))) {
        double temp = h[int64_t(0)];
        h[int64_t(0)] = h[j];
        h[j] = temp;
        size = (size - int64_t(1));
        max_heapify(h, size, int64_t(0));
        j = (j - int64_t(1));
    }
}

std::string heap_to_string(const std::vector<double>& h, int64_t heap_size) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < heap_size)) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << h[i]; return ss.str(); }()));
        if ((i < (heap_size - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    s = (s + std::string("]"));
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        heap = std::vector<double>{103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0};
        size = build_max_heap(heap);
        std::cout << heap_to_string(heap, size);
        std::cout << std::endl;
        m = extract_max(heap, size);
        size = (size - int64_t(1));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << m; return ss.str(); }());
        std::cout << std::endl;
        std::cout << heap_to_string(heap, size);
        std::cout << std::endl;
        size = insert(heap, size, 100.0);
        std::cout << heap_to_string(heap, size);
        std::cout << std::endl;
        heap_sort(heap, size);
        std::cout << heap_to_string(heap, size);
        std::cout << std::endl;
    }
    return 0;
}
