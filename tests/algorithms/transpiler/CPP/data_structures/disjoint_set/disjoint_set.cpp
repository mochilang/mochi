// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:24:05 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct DS;
struct FindResult;

std::ostream& operator<<(std::ostream&, const DS&);
std::ostream& operator<<(std::ostream&, const FindResult&);


struct DS {
    std::vector<int64_t> parent;
    std::vector<int64_t> rank;
    auto operator<=>(const DS&) const = default;
};

struct FindResult {
    DS ds;
    int64_t root;
    auto operator<=>(const FindResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const DS& v) {
    os << '{' << "'parent': "<< "["; for(size_t i=0;i<v.parent.size();++i){ if(i>0) os << ", "; os << v.parent[i]; } os << "]"
 << ", " << "'rank': "<< "["; for(size_t i=0;i<v.rank.size();++i){ if(i>0) os << ", "; os << v.rank[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const FindResult& v) {
    os << '{' << "'ds': "<< v.ds
 << ", " << "'root': "<< v.root
 << '}';
    return os;
}

DS make_set(const DS& ds, int64_t x);
FindResult find_set(const DS& ds, int64_t x);
DS union_set(const DS& ds, int64_t x, int64_t y);
bool same_python_set(int64_t a, int64_t b);
int main();

DS ds = DS{.parent = std::vector<int64_t>{}, .rank = std::vector<int64_t>{}};
int64_t i = int64_t(0);

DS make_set(const DS& ds, int64_t x) {
    std::vector<int64_t> p = ds.parent;
    std::vector<int64_t> r = ds.rank;
    p[x] = x;
    r[x] = int64_t(0);
    return DS{.parent = p, .rank = r};
}

FindResult find_set(const DS& ds, int64_t x) {
    if ((ds.parent[x] == x)) {
        return FindResult{.ds = ds, .root = x};
    }
    FindResult res = find_set(ds, ds.parent[x]);
    std::vector<int64_t> p = res.ds.parent;
    p[x] = res.root;
    return FindResult{.ds = DS{.parent = p, .rank = res.ds.rank}, .root = res.root};
}

DS union_set(const DS& ds, int64_t x, int64_t y) {
    FindResult fx = find_set(ds, x);
    DS ds1 = fx.ds;
    int64_t x_root = fx.root;
    FindResult fy = find_set(ds1, y);
    DS ds2 = fy.ds;
    int64_t y_root = fy.root;
    if ((x_root == y_root)) {
        return ds2;
    }
    std::vector<int64_t> p = ds2.parent;
    std::vector<int64_t> r = ds2.rank;
    if ((r[x_root] > r[y_root])) {
        p[y_root] = x_root;
    } else {
        p[x_root] = y_root;
        if ((r[x_root] == r[y_root])) {
            r[y_root] = (r[y_root] + int64_t(1));
        }
    }
    return DS{.parent = p, .rank = r};
}

bool same_python_set(int64_t a, int64_t b) {
    if (((a < int64_t(3)) && (b < int64_t(3)))) {
        return true;
    }
    if (((((a >= int64_t(3)) && (a < int64_t(6))) && (b >= int64_t(3))) && (b < int64_t(6)))) {
        return true;
    }
    return false;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        while ((i < int64_t(6))) {
            ds.parent = ([&]{ auto __tmp = ds.parent; __tmp.push_back(int64_t(0)); return __tmp; }());
            ds.rank = ([&]{ auto __tmp = ds.rank; __tmp.push_back(int64_t(0)); return __tmp; }());
            ds = make_set(ds, i);
            i = (i + int64_t(1));
        }
        ds = union_set(ds, int64_t(0), int64_t(1));
        ds = union_set(ds, int64_t(1), int64_t(2));
        ds = union_set(ds, int64_t(3), int64_t(4));
        ds = union_set(ds, int64_t(3), int64_t(5));
        i = int64_t(0);
        while ((i < int64_t(6))) {
            int64_t j = int64_t(0);
            while ((j < int64_t(6))) {
                FindResult res_i = find_set(ds, i);
                ds = res_i.ds;
                int64_t root_i = res_i.root;
                FindResult res_j = find_set(ds, j);
                ds = res_j.ds;
                int64_t root_j = res_j.root;
                bool same = same_python_set(i, j);
                bool root_same = (root_i == root_j);
                if (same) {
                    if (!root_same) {
                        throw std::runtime_error(std::string("nodes should be in same set"));
                    }
                } else {
                    if (root_same) {
                        throw std::runtime_error(std::string("nodes should be in different sets"));
                    }
                }
                j = (j + int64_t(1));
            }
            i = (i + int64_t(1));
        }
        i = int64_t(0);
        while ((i < int64_t(6))) {
            FindResult res = find_set(ds, i);
            ds = res.ds;
            std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << res.root; return ss.str(); }());
            std::cout << std::endl;
            i = (i + int64_t(1));
        }
    }
    return 0;
}
