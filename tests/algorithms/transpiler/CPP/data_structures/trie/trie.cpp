// Generated by Mochi transpiler v0.10.60 on 2025-08-07 23:27:48 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <type_traits>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Node;
struct Trie;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const Trie&);


struct Node {
    std::map<std::string, int64_t> children;
    bool is_leaf;
    auto operator<=>(const Node&) const = default;
};

struct Trie {
    std::vector<Node> nodes;
    auto operator<=>(const Trie&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'children': "<< "{"; bool first_0=true; for(const auto& p: v.children){ if(!first_0) os << ", "; first_0=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << ", " << "'is_leaf': "<< v.is_leaf
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Trie& v) {
    os << '{' << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << '}';
    return os;
}

Trie new_trie();
std::map<std::string, int64_t> remove_key(const std::map<std::string, int64_t>& m, std::string k);
void insert(Trie& trie, std::string word);
void insert_many(Trie& trie, const std::vector<std::string>& words);
bool find(const Trie& trie, std::string word);
void _delete(Trie& trie, std::string word);
void print_words(const Trie& trie);
bool test_trie();
void print_results(std::string msg, bool passes);
int main();

Trie trie = new_trie();

Trie new_trie() {
    return Trie{.nodes = std::vector<Node>{Node{.children = {}, .is_leaf = false}}};
}

std::map<std::string, int64_t> remove_key(const std::map<std::string, int64_t>& m, std::string k) {
    std::map<std::string, int64_t> out = {};
    for (const auto& __p : m) {
        auto key = __p.first;
        if ((key != k)) {
            out[key] = ([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return int64_t{}; return __it->second; })(m);
        }
    }
    return out;
}

void insert(Trie& trie, std::string word) {
    std::vector<Node> nodes = trie.nodes;
    int64_t curr = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < word.size())) {
        std::string ch = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(word);
        int64_t child_idx = -int64_t(1);
        std::map<std::string, int64_t> children = ([&](const auto& __v){ auto __i = curr; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes).children;
        if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(children, ch)) {
            child_idx = ([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(children);
        } else {
            Node new_node = Node{.children = {}, .is_leaf = false};
            nodes = ([&]{ auto& __tmp = nodes; __tmp.push_back(new_node); return __tmp; }());
            child_idx = (nodes.size() - int64_t(1));
            std::map<std::string, int64_t> new_children = children;
            new_children[ch] = child_idx;
            Node node = ([&](const auto& __v){ auto __i = curr; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
            node.children = new_children;
            nodes[curr] = node;
        }
        curr = child_idx;
        i = (i + int64_t(1));
    }
    Node node = ([&](const auto& __v){ auto __i = curr; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    node.is_leaf = true;
    nodes[curr] = node;
    trie.nodes = nodes;
}

void insert_many(Trie& trie, const std::vector<std::string>& words) {
    for (std::string w : words) {
        insert(trie, w);
    }
}

bool find(const Trie& trie, std::string word) {
    std::vector<Node> nodes = trie.nodes;
    int64_t curr = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < word.size())) {
        std::string ch = ([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(word);
        std::map<std::string, int64_t> children = ([&](const auto& __v){ auto __i = curr; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes).children;
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(children, ch)) {
            return false;
        }
        curr = ([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(children);
        i = (i + int64_t(1));
    }
    Node node = ([&](const auto& __v){ auto __i = curr; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    return node.is_leaf;
}

void _delete(Trie& trie, std::string word) {
    std::vector<Node> nodes = trie.nodes;
    std::function<bool(int64_t, int64_t)> _delete = [=](int64_t idx, int64_t pos) mutable {
        if ((pos == word.size())) {
            Node node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
            if ((node.is_leaf == false)) {
                return false;
            }
            node.is_leaf = false;
            nodes[idx] = node;
            return (node.children.size() == int64_t(0));
        }
        Node node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
        std::map<std::string, int64_t> children = node.children;
        std::string ch = ([&](const auto& __s){ auto __i = pos; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(word);
        if (!([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(children, ch)) {
            return false;
        }
        int64_t child_idx = ([&](const auto& __m){ auto __it = __m.find(ch); if (__it == __m.end()) return int64_t{}; return __it->second; })(children);
        auto should_delete = _delete(child_idx, (pos + int64_t(1)));
        node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
        if (should_delete) {
            std::map<std::string, int64_t> new_children = remove_key(node.children, ch);
            node.children = new_children;
            nodes[idx] = node;
            return ((new_children.size() == int64_t(0)) && (node.is_leaf == false));
        }
        nodes[idx] = node;
        return false;
    };
    _delete(int64_t(0), int64_t(0));
    trie.nodes = nodes;
}

void print_words(const Trie& trie) {
    std::function<std::any(int64_t, std::string)> dfs = [=](int64_t idx, std::string word) mutable {
        Node node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(trie.nodes);
        if (node.is_leaf) {
            std::cout << word;
            std::cout << std::endl;
        }
        for (const auto& __p : node.children) {
            auto key = __p.first;
            dfs(([&](const auto& __m){ auto __it = __m.find(key); if (__it == __m.end()) return int64_t{}; return __it->second; })(node.children), (word + key));
        }
        return std::any();
    };
    dfs(int64_t(0), std::string(""));
}

bool test_trie() {
    std::vector<std::string> words = std::vector<std::string>{std::string("banana"), std::string("bananas"), std::string("bandana"), std::string("band"), std::string("apple"), std::string("all"), std::string("beast")};
    Trie trie = new_trie();
    insert_many(trie, words);
    bool ok = true;
    for (std::string w : words) {
        ok = (ok && find(trie, w));
    }
    ok = (ok && find(trie, std::string("banana")));
    bool t = find(trie, std::string("bandanas"));
    ok = (ok && (t == false));
    bool t2 = find(trie, std::string("apps"));
    ok = (ok && (t2 == false));
    ok = (ok && find(trie, std::string("apple")));
    ok = (ok && find(trie, std::string("all")));
    _delete(trie, std::string("all"));
    bool t3 = find(trie, std::string("all"));
    ok = (ok && (t3 == false));
    _delete(trie, std::string("banana"));
    bool t4 = find(trie, std::string("banana"));
    ok = (ok && (t4 == false));
    ok = (ok && find(trie, std::string("bananas")));
    return ok;
}

void print_results(std::string msg, bool passes) {
    if (passes) {
        std::cout << (msg + std::string(" works!"));
        std::cout << std::endl;
    } else {
        std::cout << (msg + std::string(" doesn't work :("));
        std::cout << std::endl;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        print_results(std::string("Testing trie functionality"), test_trie());
    }
    return 0;
}
