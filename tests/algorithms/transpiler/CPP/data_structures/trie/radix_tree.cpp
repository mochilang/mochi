// Generated by Mochi transpiler v0.10.60 on 2025-08-07 20:23:23 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct RadixNode;
struct RadixTree;
struct MatchResult;

std::ostream& operator<<(std::ostream&, const RadixNode&);
std::ostream& operator<<(std::ostream&, const RadixTree&);
std::ostream& operator<<(std::ostream&, const MatchResult&);


struct RadixNode {
    std::string prefix;
    bool is_leaf;
    std::map<std::string, int64_t> children;
    auto operator<=>(const RadixNode&) const = default;
};

struct RadixTree {
    std::vector<RadixNode> nodes;
    auto operator<=>(const RadixTree&) const = default;
};

struct MatchResult {
    std::string common;
    std::string rem_prefix;
    std::string rem_word;
    auto operator<=>(const MatchResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const RadixNode& v) {
    os << '{' << "'prefix': "<< "'" << v.prefix << "'"
 << ", " << "'is_leaf': "<< v.is_leaf
 << ", " << "'children': "<< "{"; bool first_2=true; for(const auto& p: v.children){ if(!first_2) os << ", "; first_2=false; os << p.first; os << ': '; os << p.second; } os << "}"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const RadixTree& v) {
    os << '{' << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const MatchResult& v) {
    os << '{' << "'common': "<< "'" << v.common << "'"
 << ", " << "'rem_prefix': "<< "'" << v.rem_prefix << "'"
 << ", " << "'rem_word': "<< "'" << v.rem_word << "'"
 << '}';
    return os;
}

RadixNode new_node(std::string prefix, bool is_leaf);
RadixTree new_tree();
MatchResult match_prefix(const RadixNode& node, std::string word);
void insert_many(RadixTree& tree, const std::vector<std::string>& words);
void insert(RadixTree& tree, int64_t idx, std::string word);
bool find(RadixTree& tree, int64_t idx, std::string word);
std::map<std::string, int64_t> remove_key(const std::map<std::string, int64_t>& m, std::string k);
bool has_key(const std::map<std::string, int64_t>& m, std::string k);
bool _delete(RadixTree& tree, int64_t idx, std::string word);
void print_tree(RadixTree& tree, int64_t idx, int64_t height);
bool test_trie();
void pytests();
int main();

RadixNode new_node(std::string prefix, bool is_leaf) {
    return RadixNode{.prefix = prefix, .is_leaf = is_leaf, .children = {}};
}

RadixTree new_tree() {
    std::vector<RadixNode> nodes = std::vector<RadixNode>{new_node(std::string(""), false)};
    return RadixTree{.nodes = nodes};
}

MatchResult match_prefix(const RadixNode& node, std::string word) {
    int64_t x = int64_t(0);
    std::string p = node.prefix;
    std::string w = word;
    int min_len = p.size();
    if ((w.size() < min_len)) {
        min_len = w.size();
    }
    while ((x < min_len)) {
        if ((p.substr(x, (x + int64_t(1)) - x) != w.substr(x, (x + int64_t(1)) - x))) {
            break;
        }
        x = (x + int64_t(1));
    }
    std::string common = p.substr(int64_t(0), x - int64_t(0));
    std::string rem_prefix = p.substr(x, p.size() - x);
    std::string rem_word = w.substr(x, w.size() - x);
    return MatchResult{.common = common, .rem_prefix = rem_prefix, .rem_word = rem_word};
}

void insert_many(RadixTree& tree, const std::vector<std::string>& words) {
    for (std::string w : words) {
        insert(tree, int64_t(0), w);
    }
}

void insert(RadixTree& tree, int64_t idx, std::string word) {
    std::vector<RadixNode> nodes = tree.nodes;
    RadixNode node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    if (((node.prefix == word) && !node.is_leaf)) {
        node.is_leaf = true;
        nodes[idx] = node;
        tree.nodes = nodes;
        return;
    }
    std::string first = word.substr(int64_t(0), int64_t(1) - int64_t(0));
    std::map<std::string, int64_t> children = node.children;
    if (!has_key(children, first)) {
        int new_idx = nodes.size();
        nodes = ([&]{ auto& __tmp = nodes; __tmp.push_back(new_node(word, true)); return __tmp; }());
        children[first] = new_idx;
        node.children = children;
        nodes[idx] = node;
        tree.nodes = nodes;
        return;
    }
    int64_t child_idx = ([&](const auto& __m){ auto __it = __m.find(first); return __it != __m.end() ? __it->second : 0; })(children);
    RadixNode child = ([&](const auto& __v){ auto __i = child_idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    MatchResult res = match_prefix(child, word);
    if ((res.rem_prefix == std::string(""))) {
        insert(tree, child_idx, res.rem_word);
        return;
    }
    child.prefix = res.rem_prefix;
    nodes[child_idx] = child;
    std::map<std::string, int64_t> new_children = {};
    new_children[res.rem_prefix.substr(int64_t(0), int64_t(1) - int64_t(0))] = child_idx;
    int new_idx = nodes.size();
    nodes = ([&]{ auto& __tmp = nodes; __tmp.push_back(new_node(res.common, false)); return __tmp; }());
    nodes[static_cast<size_t>(new_idx)].children = new_children;
    if ((res.rem_word == std::string(""))) {
        nodes[static_cast<size_t>(new_idx)].is_leaf = true;
    } else {
        insert(tree, (int64_t)(new_idx), res.rem_word);
    }
    children[first] = new_idx;
    node.children = children;
    nodes[idx] = node;
    tree.nodes = nodes;
}

bool find(RadixTree& tree, int64_t idx, std::string word) {
    std::vector<RadixNode> nodes = tree.nodes;
    RadixNode node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    std::string first = word.substr(int64_t(0), int64_t(1) - int64_t(0));
    std::map<std::string, int64_t> children = node.children;
    if (!has_key(children, first)) {
        return false;
    }
    int64_t child_idx = ([&](const auto& __m){ auto __it = __m.find(first); return __it != __m.end() ? __it->second : 0; })(children);
    RadixNode child = ([&](const auto& __v){ auto __i = child_idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    MatchResult res = match_prefix(child, word);
    if ((res.rem_prefix != std::string(""))) {
        return false;
    }
    if ((res.rem_word == std::string(""))) {
        return child.is_leaf;
    }
    return find(tree, child_idx, res.rem_word);
}

std::map<std::string, int64_t> remove_key(const std::map<std::string, int64_t>& m, std::string k) {
    std::map<std::string, int64_t> out = {};
    for (const auto& __p : m) {
        auto key = __p.first;
        if ((key != k)) {
            out[key] = ([&](const auto& __m){ auto __it = __m.find(key); return __it != __m.end() ? __it->second : 0; })(m);
        }
    }
    return out;
}

bool has_key(const std::map<std::string, int64_t>& m, std::string k) {
    for (const auto& __p : m) {
        auto key = __p.first;
        if ((key == k)) {
            return true;
        }
    }
    return false;
}

bool _delete(RadixTree& tree, int64_t idx, std::string word) {
    std::vector<RadixNode> nodes = tree.nodes;
    RadixNode node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    std::string first = word.substr(int64_t(0), int64_t(1) - int64_t(0));
    std::map<std::string, int64_t> children = node.children;
    if (!has_key(children, first)) {
        return false;
    }
    int64_t child_idx = ([&](const auto& __m){ auto __it = __m.find(first); return __it != __m.end() ? __it->second : 0; })(children);
    RadixNode child = ([&](const auto& __v){ auto __i = child_idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    MatchResult res = match_prefix(child, word);
    if ((res.rem_prefix != std::string(""))) {
        return false;
    }
    if ((res.rem_word != std::string(""))) {
        bool deleted = _delete(tree, child_idx, res.rem_word);
        if (deleted) {
            nodes = tree.nodes;
            node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
        }
        return deleted;
    }
    if (!child.is_leaf) {
        return false;
    }
    if ((child.children.size() == int64_t(0))) {
        children = remove_key(children, first);
        node.children = children;
        nodes[idx] = node;
        tree.nodes = nodes;
        if (((children.size() == int64_t(1)) && !node.is_leaf)) {
            std::string only_key = std::string("");
            for (const auto& __p : children) {
                auto k = __p.first;
                only_key = k;
            }
            int64_t merge_idx = ([&](const auto& __m){ auto __it = __m.find(only_key); return __it != __m.end() ? __it->second : 0; })(children);
            RadixNode merge_node = ([&](const auto& __v){ auto __i = merge_idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
            node.is_leaf = merge_node.is_leaf;
            node.prefix = (node.prefix + merge_node.prefix);
            node.children = merge_node.children;
            nodes[idx] = node;
            tree.nodes = nodes;
        }
    } else     if ((child.children.size() > int64_t(1))) {
        child.is_leaf = false;
        nodes[child_idx] = child;
        tree.nodes = nodes;
    } else {
        std::string only_key = std::string("");
        for (const auto& __p : child.children) {
            auto k = __p.first;
            only_key = k;
        }
        int64_t merge_idx = ([&](const auto& __m){ auto __it = __m.find(only_key); return __it != __m.end() ? __it->second : 0; })(child.children);
        RadixNode merge_node = ([&](const auto& __v){ auto __i = merge_idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
        child.is_leaf = merge_node.is_leaf;
        child.prefix = (child.prefix + merge_node.prefix);
        child.children = merge_node.children;
        nodes[child_idx] = child;
        tree.nodes = nodes;
    }

    return true;
}

void print_tree(RadixTree& tree, int64_t idx, int64_t height) {
    std::vector<RadixNode> nodes = tree.nodes;
    RadixNode node = ([&](const auto& __v){ auto __i = idx; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(nodes);
    if ((node.prefix != std::string(""))) {
        std::string line = std::string("");
        int64_t i = int64_t(0);
        while ((i < height)) {
            line = (line + std::string("-"));
            i = (i + int64_t(1));
        }
        line = ((line + std::string(" ")) + node.prefix);
        if (node.is_leaf) {
            line = (line + std::string("  (leaf)"));
        }
        std::cout << line;
        std::cout << std::endl;
    }
    std::map<std::string, int64_t> children = node.children;
    for (const auto& __p : children) {
        auto k = __p.first;
        int64_t child_idx = ([&](const auto& __m){ auto __it = __m.find(k); return __it != __m.end() ? __it->second : 0; })(children);
        print_tree(tree, child_idx, (height + int64_t(1)));
    }
}

bool test_trie() {
    std::vector<std::string> words = std::vector<std::string>{std::string("banana"), std::string("bananas"), std::string("bandana"), std::string("band"), std::string("apple"), std::string("all"), std::string("beast")};
    RadixTree tree = new_tree();
    insert_many(tree, words);
    bool ok = true;
    for (std::string w : words) {
        if (!find(tree, int64_t(0), w)) {
            ok = false;
        }
    }
    if (find(tree, int64_t(0), std::string("bandanas"))) {
        ok = false;
    }
    if (find(tree, int64_t(0), std::string("apps"))) {
        ok = false;
    }
    _delete(tree, int64_t(0), std::string("all"));
    if (find(tree, int64_t(0), std::string("all"))) {
        ok = false;
    }
    _delete(tree, int64_t(0), std::string("banana"));
    if (find(tree, int64_t(0), std::string("banana"))) {
        ok = false;
    }
    if (!find(tree, int64_t(0), std::string("bananas"))) {
        ok = false;
    }
    return ok;
}

void pytests() {
    if (!test_trie()) {
        throw std::runtime_error(std::string("test failed"));
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        RadixTree tree = new_tree();
        std::vector<std::string> words = std::vector<std::string>{std::string("banana"), std::string("bananas"), std::string("bandanas"), std::string("bandana"), std::string("band"), std::string("apple"), std::string("all"), std::string("beast")};
        insert_many(tree, words);
        std::cout << (std::string("Words: ") + ([&]{ std::ostringstream ss; { auto __tmp = words; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()));
        std::cout << std::endl;
        std::cout << std::string("Tree:");
        std::cout << std::endl;
        print_tree(tree, int64_t(0), int64_t(0));
    }
    return 0;
}
