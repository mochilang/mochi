// Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:18:11 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(6) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Node;
struct LinkedDeque;
struct DeleteResult;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const LinkedDeque&);
std::ostream& operator<<(std::ostream&, const DeleteResult&);


struct Node {
    std::string data;
    int64_t prev;
    int64_t next;
    auto operator<=>(const Node&) const = default;
};

struct LinkedDeque {
    std::vector<Node> nodes;
    int64_t header;
    int64_t trailer;
    int64_t size;
    auto operator<=>(const LinkedDeque&) const = default;
};

struct DeleteResult {
    LinkedDeque deque;
    std::string value;
    auto operator<=>(const DeleteResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'data': "<< "'" << v.data << "'"
 << ", " << "'prev': "<< v.prev
 << ", " << "'next': "<< v.next
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const LinkedDeque& v) {
    os << '{' << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << ", " << "'header': "<< v.header
 << ", " << "'trailer': "<< v.trailer
 << ", " << "'size': "<< v.size
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const DeleteResult& v) {
    os << '{' << "'deque': "<< v.deque
 << ", " << "'value': "<< "'" << v.value << "'"
 << '}';
    return os;
}

LinkedDeque new_deque();
bool is_empty(const LinkedDeque& d);
std::string front(const LinkedDeque& d);
std::string back(const LinkedDeque& d);
LinkedDeque insert(LinkedDeque d, int64_t pred, std::string value, int64_t succ);
DeleteResult _delete(LinkedDeque d, int64_t idx);
LinkedDeque add_first(LinkedDeque d, std::string value);
LinkedDeque add_last(LinkedDeque d, std::string value);
DeleteResult remove_first(LinkedDeque d);
DeleteResult remove_last(LinkedDeque d);
int main();

LinkedDeque new_deque() {
    std::vector<Node> nodes = {};
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{std::string(""), -int64_t(1), int64_t(1)}); return __tmp; }());
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{std::string(""), int64_t(0), -int64_t(1)}); return __tmp; }());
    return LinkedDeque{nodes, int64_t(0), int64_t(1), int64_t(0)};
}

bool is_empty(const LinkedDeque& d) {
    return (d.size == int64_t(0));
}

std::string front(const LinkedDeque& d) {
    if (is_empty(d)) {
        throw std::runtime_error(std::string("List is empty"));
    }
    Node head = _index(d.nodes, d.header);
    int64_t idx = head.next;
    Node node = _index(d.nodes, idx);
    return node.data;
}

std::string back(const LinkedDeque& d) {
    if (is_empty(d)) {
        throw std::runtime_error(std::string("List is empty"));
    }
    Node tail = _index(d.nodes, d.trailer);
    int64_t idx = tail.prev;
    Node node = _index(d.nodes, idx);
    return node.data;
}

LinkedDeque insert(LinkedDeque d, int64_t pred, std::string value, int64_t succ) {
    std::vector<Node> nodes = d.nodes;
    int64_t new_idx = nodes.size();
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{value, pred, succ}); return __tmp; }());
    Node pred_node = _index(nodes, pred);
    pred_node.next = new_idx;
    _index(nodes, pred) = pred_node;
    Node succ_node = _index(nodes, succ);
    succ_node.prev = new_idx;
    _index(nodes, succ) = succ_node;
    d.nodes = nodes;
    d.size = (d.size + int64_t(1));
    return d;
}

DeleteResult _delete(LinkedDeque d, int64_t idx) {
    std::vector<Node> nodes = d.nodes;
    Node node = _index(nodes, idx);
    int64_t pred = node.prev;
    int64_t succ = node.next;
    Node pred_node = _index(nodes, pred);
    pred_node.next = succ;
    _index(nodes, pred) = pred_node;
    Node succ_node = _index(nodes, succ);
    succ_node.prev = pred;
    _index(nodes, succ) = succ_node;
    std::string val = node.data;
    d.nodes = nodes;
    d.size = (d.size - int64_t(1));
    return DeleteResult{d, val};
}

LinkedDeque add_first(LinkedDeque d, std::string value) {
    Node head = _index(d.nodes, d.header);
    int64_t succ = head.next;
    return insert(d, d.header, value, succ);
}

LinkedDeque add_last(LinkedDeque d, std::string value) {
    Node tail = _index(d.nodes, d.trailer);
    int64_t pred = tail.prev;
    return insert(d, pred, value, d.trailer);
}

DeleteResult remove_first(LinkedDeque d) {
    if (is_empty(d)) {
        throw std::runtime_error(std::string("remove_first from empty list"));
    }
    Node head = _index(d.nodes, d.header);
    int64_t idx = head.next;
    return _delete(d, idx);
}

DeleteResult remove_last(LinkedDeque d) {
    if (is_empty(d)) {
        throw std::runtime_error(std::string("remove_first from empty list"));
    }
    Node tail = _index(d.nodes, d.trailer);
    int64_t idx = tail.prev;
    return _delete(d, idx);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        LinkedDeque d = new_deque();
        d = add_first(d, std::string("A"));
        std::cout << front(d);
        std::cout << std::endl;
        d = add_last(d, std::string("B"));
        std::cout << back(d);
        std::cout << std::endl;
        DeleteResult r = remove_first(d);
        d = r.deque;
        std::cout << r.value;
        std::cout << std::endl;
        r = remove_last(d);
        d = r.deque;
        std::cout << r.value;
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << is_empty(d); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
