// Generated by Mochi transpiler v0.10.72 on 2025-08-24 22:20:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Node;
struct LinkedList;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const LinkedList&);


struct Node {
    int64_t data;
    int64_t prev_index;
    int64_t next_index;
    auto operator<=>(const Node&) const = default;
};

struct LinkedList {
    std::vector<Node> nodes;
    int64_t head_idx;
    int64_t tail_idx;
    auto operator<=>(const LinkedList&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'data': "<< v.data
 << ", " << "'prev_index': "<< v.prev_index
 << ", " << "'next_index': "<< v.next_index
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const LinkedList& v) {
    os << '{' << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << ", " << "'head_idx': "<< v.head_idx
 << ", " << "'tail_idx': "<< v.tail_idx
 << '}';
    return os;
}

LinkedList empty_list();
int64_t get_head_data(const LinkedList& ll);
int64_t get_tail_data(const LinkedList& ll);
void insert_before_node(LinkedList ll, int64_t idx, int64_t new_idx);
void insert_after_node(LinkedList ll, int64_t idx, int64_t new_idx);
void set_head(LinkedList ll, int64_t idx);
void set_tail(LinkedList ll, int64_t idx);
void insert(LinkedList ll, int64_t value);
void insert_at_position(LinkedList ll, int64_t position, int64_t value);
int64_t get_node(const LinkedList& ll, int64_t item);
void remove_node_pointers(LinkedList ll, int64_t idx);
void delete_value(LinkedList ll, int64_t value);
bool contains(const LinkedList& ll, int64_t value);
bool is_empty(const LinkedList& ll);
std::string to_string(const LinkedList& ll);
void print_list(const LinkedList& ll);
int main();

LinkedList empty_list() {
    return LinkedList{std::vector<Node>{}, -int64_t(1), -int64_t(1)};
}

int64_t get_head_data(const LinkedList& ll) {
    if ((ll.head_idx == -int64_t(1))) {
        return -int64_t(1);
    }
    Node node = _index(ll.nodes, ll.head_idx);
    return node.data;
}

int64_t get_tail_data(const LinkedList& ll) {
    if ((ll.tail_idx == -int64_t(1))) {
        return -int64_t(1);
    }
    Node node = _index(ll.nodes, ll.tail_idx);
    return node.data;
}

void insert_before_node(LinkedList ll, int64_t idx, int64_t new_idx) {
    std::vector<Node> nodes = ll.nodes;
    Node new_node = _index(nodes, new_idx);
    new_node.next_index = idx;
    Node node = _index(nodes, idx);
    int64_t p = node.prev_index;
    new_node.prev_index = p;
    _index(nodes, new_idx) = new_node;
    if ((p == -int64_t(1))) {
        ll.head_idx = new_idx;
    } else {
        Node prev_node = _index(nodes, p);
        prev_node.next_index = new_idx;
        _index(nodes, p) = prev_node;
    }
    node.prev_index = new_idx;
    _index(nodes, idx) = node;
    ll.nodes = nodes;
}

void insert_after_node(LinkedList ll, int64_t idx, int64_t new_idx) {
    std::vector<Node> nodes = ll.nodes;
    Node new_node = _index(nodes, new_idx);
    new_node.prev_index = idx;
    Node node = _index(nodes, idx);
    int64_t nxt = node.next_index;
    new_node.next_index = nxt;
    _index(nodes, new_idx) = new_node;
    if ((nxt == -int64_t(1))) {
        ll.tail_idx = new_idx;
    } else {
        Node next_node = _index(nodes, nxt);
        next_node.prev_index = new_idx;
        _index(nodes, nxt) = next_node;
    }
    node.next_index = new_idx;
    _index(nodes, idx) = node;
    ll.nodes = nodes;
}

void set_head(LinkedList ll, int64_t idx) {
    if ((ll.head_idx == -int64_t(1))) {
        ll.head_idx = idx;
        ll.tail_idx = idx;
    } else {
        insert_before_node(ll, ll.head_idx, idx);
    }
}

void set_tail(LinkedList ll, int64_t idx) {
    if ((ll.tail_idx == -int64_t(1))) {
        ll.head_idx = idx;
        ll.tail_idx = idx;
    } else {
        insert_after_node(ll, ll.tail_idx, idx);
    }
}

void insert(LinkedList ll, int64_t value) {
    std::vector<Node> nodes = ll.nodes;
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{value, -int64_t(1), -int64_t(1)}); return __tmp; }());
    int64_t idx = (nodes.size() - int64_t(1));
    ll.nodes = nodes;
    if ((ll.head_idx == -int64_t(1))) {
        ll.head_idx = idx;
        ll.tail_idx = idx;
    } else {
        insert_after_node(ll, ll.tail_idx, idx);
    }
}

void insert_at_position(LinkedList ll, int64_t position, int64_t value) {
    int64_t current = ll.head_idx;
    int64_t current_pos = int64_t(1);
    while ((current != -int64_t(1))) {
        if ((current_pos == position)) {
            std::vector<Node> nodes = ll.nodes;
            nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{value, -int64_t(1), -int64_t(1)}); return __tmp; }());
            int64_t new_idx = (nodes.size() - int64_t(1));
            ll.nodes = nodes;
            insert_before_node(ll, current, new_idx);
            return;
        }
        Node node = _index(ll.nodes, current);
        current = node.next_index;
        current_pos = (current_pos + int64_t(1));
    }
    insert(ll, value);
}

int64_t get_node(const LinkedList& ll, int64_t item) {
    int64_t current = ll.head_idx;
    while ((current != -int64_t(1))) {
        Node node = _index(ll.nodes, current);
        if ((node.data == item)) {
            return current;
        }
        current = node.next_index;
    }
    return -int64_t(1);
}

void remove_node_pointers(LinkedList ll, int64_t idx) {
    std::vector<Node> nodes = ll.nodes;
    Node node = _index(nodes, idx);
    int64_t nxt = node.next_index;
    int64_t p = node.prev_index;
    if ((nxt != -int64_t(1))) {
        Node nxt_node = _index(nodes, nxt);
        nxt_node.prev_index = p;
        _index(nodes, nxt) = nxt_node;
    }
    if ((p != -int64_t(1))) {
        Node prev_node = _index(nodes, p);
        prev_node.next_index = nxt;
        _index(nodes, p) = prev_node;
    }
    node.next_index = -int64_t(1);
    node.prev_index = -int64_t(1);
    _index(nodes, idx) = node;
    ll.nodes = nodes;
}

void delete_value(LinkedList ll, int64_t value) {
    int64_t idx = get_node(ll, value);
    if ((idx == -int64_t(1))) {
        return;
    }
    if ((idx == ll.head_idx)) {
        Node node = _index(ll.nodes, idx);
        ll.head_idx = node.next_index;
    }
    if ((idx == ll.tail_idx)) {
        Node node = _index(ll.nodes, idx);
        ll.tail_idx = node.prev_index;
    }
    remove_node_pointers(ll, idx);
}

bool contains(const LinkedList& ll, int64_t value) {
    return (get_node(ll, value) != -int64_t(1));
}

bool is_empty(const LinkedList& ll) {
    return (ll.head_idx == -int64_t(1));
}

std::string to_string(const LinkedList& ll) {
    std::string res = std::string("");
    bool first = true;
    int64_t current = ll.head_idx;
    while ((current != -int64_t(1))) {
        Node node = _index(ll.nodes, current);
        std::string val = ([&]{ std::ostringstream ss; ss << std::boolalpha << node.data; return ss.str(); }());
        if (first) {
            res = val;
            first = false;
        } else {
            res = ((res + std::string(" ")) + val);
        }
        current = node.next_index;
    }
    return res;
}

void print_list(const LinkedList& ll) {
    int64_t current = ll.head_idx;
    while ((current != -int64_t(1))) {
        Node node = _index(ll.nodes, current);
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << node.data; return ss.str(); }());
        std::cout << std::endl;
        current = node.next_index;
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        LinkedList ll = empty_list();
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_head_data(ll); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_tail_data(ll); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << is_empty(ll); return ss.str(); }());
        std::cout << std::endl;
        insert(ll, int64_t(10));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_head_data(ll); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_tail_data(ll); return ss.str(); }());
        std::cout << std::endl;
        insert_at_position(ll, int64_t(3), int64_t(20));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_head_data(ll); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_tail_data(ll); return ss.str(); }());
        std::cout << std::endl;
        std::vector<Node> nodes = ll.nodes;
        nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{int64_t(1000), -int64_t(1), -int64_t(1)}); return __tmp; }());
        int64_t idx_head = (nodes.size() - int64_t(1));
        ll.nodes = nodes;
        set_head(ll, idx_head);
        nodes = ll.nodes;
        nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{int64_t(2000), -int64_t(1), -int64_t(1)}); return __tmp; }());
        int64_t idx_tail = (nodes.size() - int64_t(1));
        ll.nodes = nodes;
        set_tail(ll, idx_tail);
        print_list(ll);
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << is_empty(ll); return ss.str(); }());
        std::cout << std::endl;
        print_list(ll);
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << contains(ll, int64_t(10)); return ss.str(); }());
        std::cout << std::endl;
        delete_value(ll, int64_t(10));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << contains(ll, int64_t(10)); return ss.str(); }());
        std::cout << std::endl;
        delete_value(ll, int64_t(2000));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_tail_data(ll); return ss.str(); }());
        std::cout << std::endl;
        delete_value(ll, int64_t(1000));
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_tail_data(ll); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_head_data(ll); return ss.str(); }());
        std::cout << std::endl;
        print_list(ll);
        delete_value(ll, int64_t(20));
        print_list(ll);
        int64_t i = int64_t(1);
        while ((i < int64_t(10))) {
            insert(ll, i);
            i = (i + int64_t(1));
        }
        print_list(ll);
        LinkedList ll2 = empty_list();
        insert_at_position(ll2, int64_t(1), int64_t(10));
        std::cout << to_string(ll2);
        std::cout << std::endl;
        insert_at_position(ll2, int64_t(2), int64_t(20));
        std::cout << to_string(ll2);
        std::cout << std::endl;
        insert_at_position(ll2, int64_t(1), int64_t(30));
        std::cout << to_string(ll2);
        std::cout << std::endl;
        insert_at_position(ll2, int64_t(3), int64_t(40));
        std::cout << to_string(ll2);
        std::cout << std::endl;
        insert_at_position(ll2, int64_t(5), int64_t(50));
        std::cout << to_string(ll2);
        std::cout << std::endl;
    }
    return 0;
}
