// Generated by Mochi transpiler v0.10.59 on 2025-08-07 08:55:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

double _random();
int64_t random_level();
std::vector<int64_t> empty_forward();
void init();
void insert(int64_t key, int64_t value);
int64_t find(int64_t key);
void _delete(int64_t key);
std::string to_string();
int main();

int64_t NIL = (int64_t(0) - int64_t(1));
int64_t MAX_LEVEL = int64_t(6);
double P = 0.5;
int64_t seed = int64_t(1);
std::vector<int64_t> node_keys = {};
std::vector<int64_t> node_vals = {};
std::vector<std::vector<int64_t>> node_forwards = {};
int64_t level = int64_t(1);

double _random() {
    seed = (((seed * int64_t(13)) + int64_t(7)) % int64_t(100));
    return ((double)((double)(seed)) / (100.0));
}

int64_t random_level() {
    int64_t lvl = int64_t(1);
    while (((_random() < P) && (lvl < MAX_LEVEL))) {
        lvl = (lvl + int64_t(1));
    }
    return lvl;
}

std::vector<int64_t> empty_forward() {
    std::vector<int64_t> f = {};
    int64_t i = int64_t(0);
    while ((i < MAX_LEVEL)) {
        f = ([&]{ auto __tmp = f; __tmp.push_back(NIL); return __tmp; }());
        i = (i + int64_t(1));
    }
    return f;
}

void init() {
    node_keys = std::vector<int64_t>{-int64_t(1)};
    node_vals = std::vector<int64_t>{int64_t(0)};
    node_forwards = std::vector<std::vector<int64_t>>{empty_forward()};
    level = int64_t(1);
}

void insert(int64_t key, int64_t value) {
    std::vector<int64_t> update = {};
    int64_t i = int64_t(0);
    while ((i < MAX_LEVEL)) {
        update = ([&]{ auto __tmp = update; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t x = int64_t(0);
    i = (level - int64_t(1));
    while ((i >= int64_t(0))) {
        while (((node_forwards[x][i] != NIL) && (node_keys[node_forwards[x][i]] < key))) {
            x = node_forwards[x][i];
        }
        update[i] = x;
        i = (i - int64_t(1));
    }
    x = node_forwards[x][int64_t(0)];
    if (((x != NIL) && (node_keys[x] == key))) {
        node_vals[x] = value;
        return;
    }
    int64_t lvl = random_level();
    if ((lvl > level)) {
        int64_t j = level;
        while ((j < lvl)) {
            update[j] = int64_t(0);
            j = (j + int64_t(1));
        }
        level = lvl;
    }
    node_keys = ([&]{ auto __tmp = node_keys; __tmp.push_back(key); return __tmp; }());
    node_vals = ([&]{ auto __tmp = node_vals; __tmp.push_back(value); return __tmp; }());
    std::vector<int64_t> forwards = empty_forward();
    int64_t idx = (node_keys.size() - int64_t(1));
    i = int64_t(0);
    while ((i < lvl)) {
        forwards[i] = node_forwards[update[i]][i];
        node_forwards[update[i]][i] = idx;
        i = (i + int64_t(1));
    }
    node_forwards = ([&]{ auto __tmp = node_forwards; __tmp.push_back(forwards); return __tmp; }());
}

int64_t find(int64_t key) {
    int64_t x = int64_t(0);
    int64_t i = (level - int64_t(1));
    while ((i >= int64_t(0))) {
        while (((node_forwards[x][i] != NIL) && (node_keys[node_forwards[x][i]] < key))) {
            x = node_forwards[x][i];
        }
        i = (i - int64_t(1));
    }
    x = node_forwards[x][int64_t(0)];
    if (((x != NIL) && (node_keys[x] == key))) {
        return node_vals[x];
    }
    return -int64_t(1);
}

void _delete(int64_t key) {
    std::vector<int64_t> update = {};
    int64_t i = int64_t(0);
    while ((i < MAX_LEVEL)) {
        update = ([&]{ auto __tmp = update; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    int64_t x = int64_t(0);
    i = (level - int64_t(1));
    while ((i >= int64_t(0))) {
        while (((node_forwards[x][i] != NIL) && (node_keys[node_forwards[x][i]] < key))) {
            x = node_forwards[x][i];
        }
        update[i] = x;
        i = (i - int64_t(1));
    }
    x = node_forwards[x][int64_t(0)];
    if (((x == NIL) || (node_keys[x] != key))) {
        return;
    }
    i = int64_t(0);
    while ((i < level)) {
        if ((node_forwards[update[i]][i] == x)) {
            node_forwards[update[i]][i] = node_forwards[x][i];
        }
        i = (i + int64_t(1));
    }
    while (((level > int64_t(1)) && (node_forwards[int64_t(0)][(level - int64_t(1))] == NIL))) {
        level = (level - int64_t(1));
    }
}

std::string to_string() {
    std::string s = std::string("");
    int64_t x = node_forwards[int64_t(0)][int64_t(0)];
    while ((x != NIL)) {
        if ((s != std::string(""))) {
            s = (s + std::string(" -> "));
        }
        s = (((s + ([&]{ std::ostringstream ss; ss << std::boolalpha << node_keys[x]; return ss.str(); }())) + std::string(":")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << node_vals[x]; return ss.str(); }()));
        x = node_forwards[x][int64_t(0)];
    }
    return s;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        init();
        insert(int64_t(2), int64_t(2));
        insert(int64_t(4), int64_t(4));
        insert(int64_t(6), int64_t(4));
        insert(int64_t(4), int64_t(5));
        insert(int64_t(8), int64_t(4));
        insert(int64_t(9), int64_t(4));
        _delete(int64_t(4));
        std::cout << to_string();
        std::cout << std::endl;
    }
    return 0;
}
