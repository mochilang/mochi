// Generated by Mochi transpiler v0.10.60 on 2025-08-07 15:22:31 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _concat(const std::vector<T>& a, const std::vector<T>& b) {
    std::vector<T> out = a;
    out.insert(out.end(), b.begin(), b.end());
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Node;
struct BuildResult;
struct SearchResult;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const BuildResult&);
std::ostream& operator<<(std::ostream&, const SearchResult&);


struct Node {
    std::vector<double> point;
    int64_t left;
    int64_t right;
    auto operator<=>(const Node&) const = default;
};

struct BuildResult {
    int64_t index;
    std::vector<Node> nodes;
    auto operator<=>(const BuildResult&) const = default;
};

struct SearchResult {
    std::vector<double> point;
    double dist;
    int64_t visited;
    auto operator<=>(const SearchResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'point': "<< "["; for(size_t i=0;i<v.point.size();++i){ if(i>0) os << ", "; os << v.point[i]; } os << "]"
 << ", " << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BuildResult& v) {
    os << '{' << "'index': "<< v.index
 << ", " << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const SearchResult& v) {
    os << '{' << "'point': "<< "["; for(size_t i=0;i<v.point.size();++i){ if(i>0) os << ", "; os << v.point[i]; } os << "]"
 << ", " << "'dist': "<< std::fixed << std::setprecision(1) << v.dist
 << ", " << "'visited': "<< v.visited
 << '}';
    return os;
}

int64_t _rand();
double _random();
std::vector<std::vector<double>> hypercube_points(int64_t num_points, double cube_size, int64_t num_dimensions);
std::vector<std::vector<double>> sort_points(std::vector<std::vector<double>>& points, int64_t axis);
std::vector<std::vector<double>> sublist(const std::vector<std::vector<double>>& arr, int64_t start, int64_t end);
std::vector<Node> shift_nodes(std::vector<Node>& nodes, int64_t offset);
BuildResult build_kdtree(std::vector<std::vector<double>>& points, int64_t depth);
double square_distance(const std::vector<double>& a, const std::vector<double>& b);
SearchResult nearest_neighbour_search(const std::vector<Node>& tree, int64_t root, const std::vector<double>& query_point);
std::string list_to_string(const std::vector<double>& arr);
int main();

int64_t seed = 0;

int64_t _rand() {
    seed = (((seed * int64_t(1103515245)) + int64_t(12345)) % int64_t(2147483648));
    return seed;
}

double _random() {
    return ((double)((1.0 * _rand())) / (2147483648.0));
}

std::vector<std::vector<double>> hypercube_points(int64_t num_points, double cube_size, int64_t num_dimensions) {
    std::vector<std::vector<double>> pts = {};
    int64_t i = int64_t(0);
    while ((i < num_points)) {
        std::vector<double> p = {};
        int64_t j = int64_t(0);
        while ((j < num_dimensions)) {
            p = ([&]{ auto __tmp = p; __tmp.push_back((cube_size * _random())); return __tmp; }());
            j = (j + int64_t(1));
        }
        pts = ([&]{ auto __tmp = pts; __tmp.push_back(p); return __tmp; }());
        i = (i + int64_t(1));
    }
    return pts;
}

std::vector<std::vector<double>> sort_points(std::vector<std::vector<double>>& points, int64_t axis) {
    int n = points.size();
    int64_t i = int64_t(1);
    while ((i < n)) {
        std::vector<double> key = points[i];
        int64_t j = (i - int64_t(1));
        while (((j >= int64_t(0)) && (points[j][axis] > key[axis]))) {
            points[(j + int64_t(1))] = points[j];
            j = (j - int64_t(1));
        }
        points[(j + int64_t(1))] = key;
        i = (i + int64_t(1));
    }
    return points;
}

std::vector<std::vector<double>> sublist(const std::vector<std::vector<double>>& arr, int64_t start, int64_t end) {
    std::vector<std::vector<double>> res = {};
    int64_t i = start;
    while ((i < end)) {
        res = ([&]{ auto __tmp = res; __tmp.push_back(arr[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    return res;
}

std::vector<Node> shift_nodes(std::vector<Node>& nodes, int64_t offset) {
    int64_t i = int64_t(0);
    while ((i < nodes.size())) {
        if ((nodes[i].left != (int64_t(0) - int64_t(1)))) {
            nodes[i].left = (nodes[i].left + offset);
        }
        if ((nodes[i].right != (int64_t(0) - int64_t(1)))) {
            nodes[i].right = (nodes[i].right + offset);
        }
        i = (i + int64_t(1));
    }
    return nodes;
}

BuildResult build_kdtree(std::vector<std::vector<double>>& points, int64_t depth) {
    if ((points.size() == int64_t(0))) {
        return BuildResult{.index = (int64_t(0) - int64_t(1)), .nodes = std::vector<Node>{}};
    }
    int k = points[int64_t(0)].size();
    int64_t axis = (depth % k);
    points = sort_points(points, axis);
    int64_t median = (points.size() / int64_t(2));
    std::vector<std::vector<double>> left_points = sublist(points, int64_t(0), median);
    std::vector<std::vector<double>> right_points = sublist(points, (median + int64_t(1)), (int64_t)(points.size()));
    BuildResult left_res = build_kdtree(left_points, (depth + int64_t(1)));
    BuildResult right_res = build_kdtree(right_points, (depth + int64_t(1)));
    int64_t offset = (left_res.nodes.size() + int64_t(1));
    std::vector<Node> shifted_right = shift_nodes(right_res.nodes, offset);
    std::vector<Node> nodes = left_res.nodes;
    int64_t left_index = left_res.index;
    int64_t right_index = ((right_res.index == (int64_t(0) - int64_t(1))) ? (int64_t(0) - int64_t(1)) : (right_res.index + offset));
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(Node{.point = points[median], .left = left_index, .right = right_index}); return __tmp; }());
    nodes = _concat(nodes, shifted_right);
    int root_index = left_res.nodes.size();
    return BuildResult{.index = root_index, .nodes = nodes};
}

double square_distance(const std::vector<double>& a, const std::vector<double>& b) {
    double sum = 0.0;
    int64_t i = int64_t(0);
    while ((i < a.size())) {
        double diff = (a[i] - b[i]);
        sum = (sum + (diff * diff));
        i = (i + int64_t(1));
    }
    return sum;
}

SearchResult nearest_neighbour_search(const std::vector<Node>& tree, int64_t root, const std::vector<double>& query_point) {
    std::vector<double> nearest_point = {};
    double nearest_dist = 0.0;
    int64_t visited = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < tree.size())) {
        Node node = tree[i];
        double dist = square_distance(query_point, node.point);
        visited = (visited + int64_t(1));
        if (((visited == int64_t(1)) || (dist < nearest_dist))) {
            nearest_point = node.point;
            nearest_dist = dist;
        }
        i = (i + int64_t(1));
    }
    return SearchResult{.point = nearest_point, .dist = nearest_dist, .visited = visited};
}

std::string list_to_string(const std::vector<double>& arr) {
    std::string s = std::string("[");
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << arr[i]; return ss.str(); }()));
        if ((i < (arr.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        i = (i + int64_t(1));
    }
    return (s + std::string("]"));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t num_points = int64_t(5000);
        double cube_size = 10.0;
        int64_t num_dimensions = int64_t(10);
        std::vector<std::vector<double>> pts = hypercube_points(num_points, cube_size, num_dimensions);
        BuildResult build = build_kdtree(pts, int64_t(0));
        int64_t root = build.index;
        std::vector<Node> tree = build.nodes;
        std::vector<double> query = {};
        int64_t i = int64_t(0);
        while ((i < num_dimensions)) {
            query = ([&]{ auto __tmp = query; __tmp.push_back((double)_random()); return __tmp; }());
            i = (i + int64_t(1));
        }
        SearchResult res = nearest_neighbour_search(tree, root, query);
        std::cout << (std::string("Query point: ") + list_to_string(query));
        std::cout << std::endl;
        std::cout << (std::string("Nearest point: ") + list_to_string(res.point));
        std::cout << std::endl;
        std::cout << (std::string("Distance: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.dist; return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("Nodes visited: ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.visited; return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
