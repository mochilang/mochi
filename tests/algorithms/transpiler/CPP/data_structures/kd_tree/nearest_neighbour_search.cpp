// Generated by Mochi transpiler v0.10.60 on 2025-08-07 15:22:51 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct KDNode;
struct SearchResult;

std::ostream& operator<<(std::ostream&, const KDNode&);
std::ostream& operator<<(std::ostream&, const SearchResult&);


struct KDNode {
    std::vector<double> point;
    int64_t left;
    int64_t right;
    auto operator<=>(const KDNode&) const = default;
};

struct SearchResult {
    std::vector<double> point;
    double distance;
    int64_t nodes_visited;
    auto operator<=>(const SearchResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const KDNode& v) {
    os << '{' << "'point': "<< "["; for(size_t i=0;i<v.point.size();++i){ if(i>0) os << ", "; os << v.point[i]; } os << "]"
 << ", " << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const SearchResult& v) {
    os << '{' << "'point': "<< "["; for(size_t i=0;i<v.point.size();++i){ if(i>0) os << ", "; os << v.point[i]; } os << "]"
 << ", " << "'distance': "<< std::fixed << std::setprecision(1) << v.distance
 << ", " << "'nodes_visited': "<< v.nodes_visited
 << '}';
    return os;
}

double square_distance(const std::vector<double>& a, const std::vector<double>& b);
SearchResult search(const std::vector<KDNode>& nodes, int64_t index, const std::vector<double>& query_point, int64_t depth, const SearchResult& best);
SearchResult nearest_neighbour_search(const std::vector<KDNode>& nodes, int64_t root, const std::vector<double>& query_point);
int main();

std::vector<KDNode> nodes = std::vector<KDNode>{};
std::vector<std::vector<double>> queries = std::vector<std::vector<double>>{};
int64_t q = 0;

double square_distance(const std::vector<double>& a, const std::vector<double>& b) {
    int64_t i = int64_t(0);
    double total = 0.0;
    while ((i < a.size())) {
        double diff = (a[i] - b[i]);
        total = (total + (diff * diff));
        i = (i + int64_t(1));
    }
    return total;
}

SearchResult search(const std::vector<KDNode>& nodes, int64_t index, const std::vector<double>& query_point, int64_t depth, const SearchResult& best) {
    if ((index == -int64_t(1))) {
        return best;
    }
    SearchResult result = best;
    result.nodes_visited = (result.nodes_visited + int64_t(1));
    KDNode node = nodes[index];
    std::vector<double> current_point = node.point;
    double current_dist = square_distance(query_point, current_point);
    if (((result.point.size() == int64_t(0)) || (current_dist < result.distance))) {
        result.point = current_point;
        result.distance = current_dist;
    }
    int k = query_point.size();
    int64_t axis = (depth % k);
    int64_t nearer = node.left;
    int64_t further = node.right;
    if ((query_point[axis] > current_point[axis])) {
        nearer = node.right;
        further = node.left;
    }
    result = search(nodes, nearer, query_point, (depth + int64_t(1)), result);
    double diff = (query_point[axis] - current_point[axis]);
    if (((diff * diff) < result.distance)) {
        result = search(nodes, further, query_point, (depth + int64_t(1)), result);
    }
    return result;
}

SearchResult nearest_neighbour_search(const std::vector<KDNode>& nodes, int64_t root, const std::vector<double>& query_point) {
    SearchResult initial = SearchResult{.point = std::vector<double>{}, .distance = 1e+30, .nodes_visited = int64_t(0)};
    return search(nodes, root, query_point, int64_t(0), initial);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        nodes = std::vector<KDNode>{KDNode{.point = std::vector<double>{9.0, 1.0}, .left = int64_t(1), .right = int64_t(4)}, KDNode{.point = std::vector<double>{2.0, 7.0}, .left = int64_t(2), .right = int64_t(3)}, KDNode{.point = std::vector<double>{3.0, 6.0}, .left = -int64_t(1), .right = -int64_t(1)}, KDNode{.point = std::vector<double>{6.0, 12.0}, .left = -int64_t(1), .right = -int64_t(1)}, KDNode{.point = std::vector<double>{17.0, 15.0}, .left = int64_t(5), .right = int64_t(6)}, KDNode{.point = std::vector<double>{13.0, 15.0}, .left = -int64_t(1), .right = -int64_t(1)}, KDNode{.point = std::vector<double>{10.0, 19.0}, .left = -int64_t(1), .right = -int64_t(1)}};
        queries = std::vector<std::vector<double>>{std::vector<double>{9.0, 2.0}, std::vector<double>{12.0, 15.0}, std::vector<double>{1.0, 3.0}};
        q = int64_t(0);
        while ((q < queries.size())) {
            SearchResult res = nearest_neighbour_search(nodes, int64_t(0), queries[q]);
            std::cout << (((((([&]{ std::ostringstream ss; { auto __tmp = res.point; ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }()) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.distance; return ss.str(); }())) + std::string(" ")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << res.nodes_visited; return ss.str(); }())) + std::string("\n"));
            std::cout << std::endl;
            q = (q + int64_t(1));
        }
    }
    return 0;
}
