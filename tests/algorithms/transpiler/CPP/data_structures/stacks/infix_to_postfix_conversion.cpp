// Generated by Mochi transpiler v0.10.59 on 2025-08-07 09:05:41 GMT+7
#include <iostream>
#include <string>
#include <map>
#include <algorithm>
#include <type_traits>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename T> std::vector<T> _slice(const std::vector<T>& s, int64_t start, int64_t end) {
    if(start < 0) start = 0;
    if(end > (int64_t)s.size()) end = s.size();
    if(start > (int64_t)s.size()) start = s.size();
    if(end < start) end = start;
    return std::vector<T>(s.begin()+start, s.begin()+end);
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t precedence(std::string ch);
std::string associativity(std::string ch);
bool balanced_parentheses(std::string expr);
bool is_letter(std::string ch);
bool is_digit(std::string ch);
bool is_alnum(std::string ch);
std::string infix_to_postfix(std::string expression);
int main();

std::map<std::string, int64_t> PRECEDENCES = std::map<std::string, int64_t>{{"+", int64_t(1)}, {"-", int64_t(1)}, {"*", int64_t(2)}, {"/", int64_t(2)}, {"^", int64_t(3)}};
std::map<std::string, std::string> ASSOCIATIVITIES = std::map<std::string, std::string>{{"+", std::string("LR")}, {"-", std::string("LR")}, {"*", std::string("LR")}, {"/", std::string("LR")}, {"^", std::string("RL")}};

int64_t precedence(std::string ch) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(PRECEDENCES, ch)) {
        return ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : 0; })(PRECEDENCES);
    }
    return -int64_t(1);
}

std::string associativity(std::string ch) {
    if (([&](const auto& __c, const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__c)>, std::string>) { return __c.find(__v) != std::string::npos; } else if constexpr(requires { __c.find(__v); }) { return __c.find(__v) != __c.end(); } else { return std::find(__c.begin(), __c.end(), __v) != __c.end(); } })(ASSOCIATIVITIES, ch)) {
        return ([&](const auto& __m){ auto __it = __m.find(ch); return __it != __m.end() ? __it->second : ""; })(ASSOCIATIVITIES);
    }
    return std::string("");
}

bool balanced_parentheses(std::string expr) {
    int64_t count = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < expr.size())) {
        std::string ch = expr.substr(i, (i + int64_t(1)) - i);
        if ((ch == std::string("("))) {
            count = (count + int64_t(1));
        }
        if ((ch == std::string(")"))) {
            count = (count - int64_t(1));
            if ((count < int64_t(0))) {
                return false;
            }
        }
        i = (i + int64_t(1));
    }
    return (count == int64_t(0));
}

bool is_letter(std::string ch) {
    return (((std::string("a") <= ch) && (ch <= std::string("z"))) || ((std::string("A") <= ch) && (ch <= std::string("Z"))));
}

bool is_digit(std::string ch) {
    return ((std::string("0") <= ch) && (ch <= std::string("9")));
}

bool is_alnum(std::string ch) {
    return (is_letter(ch) || is_digit(ch));
}

std::string infix_to_postfix(std::string expression) {
    if ((balanced_parentheses(expression) == false)) {
        throw std::runtime_error(std::string("Mismatched parentheses"));
    }
    std::vector<std::string> stack = {};
    std::vector<std::string> postfix = {};
    int64_t i = int64_t(0);
    while ((i < expression.size())) {
        std::string ch = expression.substr(i, (i + int64_t(1)) - i);
        if (is_alnum(ch)) {
            postfix = ([&]{ auto __tmp = postfix; __tmp.push_back(ch); return __tmp; }());
        } else         if ((ch == std::string("("))) {
            stack = ([&]{ auto __tmp = stack; __tmp.push_back(ch); return __tmp; }());
        } else         if ((ch == std::string(")"))) {
            while (((stack.size() > int64_t(0)) && (stack[static_cast<size_t>((stack.size() - int64_t(1)))] != std::string("(")))) {
                postfix = ([&]{ auto __tmp = postfix; __tmp.push_back(stack[static_cast<size_t>((stack.size() - int64_t(1)))]); return __tmp; }());
                stack = _slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            }
            if ((stack.size() > int64_t(0))) {
                stack = _slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            }
        } else         if ((ch == std::string(" "))) {
        } else {
            while (true) {
                if ((stack.size() == int64_t(0))) {
                    stack = ([&]{ auto __tmp = stack; __tmp.push_back(ch); return __tmp; }());
                    break;
                }
                int64_t cp = precedence(ch);
                int64_t tp = precedence(stack[static_cast<size_t>((stack.size() - int64_t(1)))]);
                if ((cp > tp)) {
                    stack = ([&]{ auto __tmp = stack; __tmp.push_back(ch); return __tmp; }());
                    break;
                }
                if ((cp < tp)) {
                    postfix = ([&]{ auto __tmp = postfix; __tmp.push_back(stack[static_cast<size_t>((stack.size() - int64_t(1)))]); return __tmp; }());
                    stack = _slice(stack, int64_t(0), (stack.size() - int64_t(1)));
                    continue;
                }
                if ((associativity(ch) == std::string("RL"))) {
                    stack = ([&]{ auto __tmp = stack; __tmp.push_back(ch); return __tmp; }());
                    break;
                }
                postfix = ([&]{ auto __tmp = postfix; __tmp.push_back(stack[static_cast<size_t>((stack.size() - int64_t(1)))]); return __tmp; }());
                stack = _slice(stack, int64_t(0), (stack.size() - int64_t(1)));
            }
        }



        i = (i + int64_t(1));
    }
    while ((stack.size() > int64_t(0))) {
        postfix = ([&]{ auto __tmp = postfix; __tmp.push_back(stack[static_cast<size_t>((stack.size() - int64_t(1)))]); return __tmp; }());
        stack = _slice(stack, int64_t(0), (stack.size() - int64_t(1)));
    }
    std::string res = std::string("");
    int64_t j = int64_t(0);
    while ((j < postfix.size())) {
        if ((j > int64_t(0))) {
            res = (res + std::string(" "));
        }
        res = (res + postfix[j]);
        j = (j + int64_t(1));
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::string expression = std::string("a+b*(c^d-e)^(f+g*h)-i");
        std::cout << expression;
        std::cout << std::endl;
        std::cout << infix_to_postfix(expression);
        std::cout << std::endl;
    }
    return 0;
}
