// Generated by Mochi transpiler v0.10.60 on 2025-08-07 23:24:04 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> split_custom(std::string s, std::string sep);
std::vector<std::string> tokenize(std::string s);
bool is_digit(std::string ch);
bool is_operand(std::string token);
int64_t to_int(std::string token);
double apply_op(std::string op, double a, double b);
double evaluate(std::string expression);
std::vector<double> eval_rec(std::vector<std::string>& tokens, int64_t pos);
double evaluate_recursive(std::string expression);
int main();

std::string test_expression = std::string("+ 9 * 2 6");
std::string test_expression2 = std::string("/ * 10 2 + 4 1 ");
std::string test_expression3 = std::string("+ * 2 3 / 8 4");

std::vector<std::string> split_custom(std::string s, std::string sep) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if ((ch == sep)) {
            res = ([&]{ auto& __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto& __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

std::vector<std::string> tokenize(std::string s) {
    std::vector<std::string> parts = split_custom(s, std::string(" "));
    std::vector<std::string> res = {};
    int64_t i = int64_t(0);
    while ((i < parts.size())) {
        std::string p = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(parts);
        if ((p != std::string(""))) {
            res = ([&]{ auto& __tmp = res; __tmp.push_back(p); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    return res;
}

bool is_digit(std::string ch) {
    return ((ch >= std::string("0")) && (ch <= std::string("9")));
}

bool is_operand(std::string token) {
    if ((token == std::string(""))) {
        return false;
    }
    int64_t i = int64_t(0);
    while ((i < token.size())) {
        std::string ch = token.substr(i, (i + int64_t(1)) - i);
        if (!is_digit(ch)) {
            return false;
        }
        i = (i + int64_t(1));
    }
    return true;
}

int64_t to_int(std::string token) {
    int64_t res = int64_t(0);
    int64_t i = int64_t(0);
    while ((i < token.size())) {
        res = ((res * int64_t(10)) + std::stoll(token.substr(i, (i + int64_t(1)) - i)));
        i = (i + int64_t(1));
    }
    return res;
}

double apply_op(std::string op, double a, double b) {
    if ((op == std::string("+"))) {
        return (a + b);
    }
    if ((op == std::string("-"))) {
        return (a - b);
    }
    if ((op == std::string("*"))) {
        return (a * b);
    }
    if ((op == std::string("/"))) {
        return ((double)(a) / (b));
    }
    return 0.0;
}

double evaluate(std::string expression) {
    std::vector<std::string> tokens = tokenize(expression);
    std::vector<double> stack = {};
    int64_t i = (tokens.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        std::string token = ([&](const auto& __v){ auto __i = i; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(tokens);
        if ((token != std::string(""))) {
            if (is_operand(token)) {
                stack = ([&]{ auto& __tmp = stack; __tmp.push_back((double)(to_int(token))); return __tmp; }());
            } else {
                double o1 = stack[static_cast<size_t>((stack.size() - int64_t(1)))];
                double o2 = stack[static_cast<size_t>((stack.size() - int64_t(2)))];
                stack = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(0), (stack.size() - int64_t(2)) - int64_t(0)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(0), __v.begin()+(stack.size() - int64_t(2))); })(stack);
                double res = apply_op(token, o1, o2);
                stack = ([&]{ auto& __tmp = stack; __tmp.push_back(res); return __tmp; }());
            }
        }
        i = (i - int64_t(1));
    }
    return ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(stack);
}

std::vector<double> eval_rec(std::vector<std::string>& tokens, int64_t pos) {
    std::string token = ([&](const auto& __v){ auto __i = pos; if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(tokens);
    int64_t next = (pos + int64_t(1));
    if (is_operand(token)) {
        return std::vector<double>{(double)(to_int(token)), (double)(next)};
    }
    std::vector<double> left = eval_rec(tokens, next);
    double a = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(left);
    int64_t p1 = (int64_t)(([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(left));
    std::vector<double> right = eval_rec(tokens, p1);
    double b = ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(right);
    double p2 = ([&](const auto& __v){ auto __i = int64_t(1); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(right);
    return std::vector<double>{apply_op(token, a, b), p2};
}

double evaluate_recursive(std::string expression) {
    std::vector<std::string> tokens = tokenize(expression);
    std::vector<double> res = eval_rec(tokens, int64_t(0));
    return ([&](const auto& __v){ auto __i = int64_t(0); if (__i < 0) __i += __v.size(); return __v[static_cast<size_t>(__i)]; })(res);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << evaluate(test_expression); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << evaluate(test_expression2); return ss.str(); }());
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << evaluate_recursive(test_expression3); return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
