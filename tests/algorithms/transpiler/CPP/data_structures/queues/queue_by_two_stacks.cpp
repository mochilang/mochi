// Generated by Mochi transpiler v0.10.72 on 2025-08-24 22:21:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <stdexcept>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << std::any_cast<double>(v);
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
        return s + exp;
    }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(17) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Queue;
struct GetResult;

std::ostream& operator<<(std::ostream&, const Queue&);
std::ostream& operator<<(std::ostream&, const GetResult&);


struct Queue {
    std::vector<int64_t> stack1;
    std::vector<int64_t> stack2;
    auto operator<=>(const Queue&) const = default;
};

struct GetResult {
    Queue queue;
    int64_t value;
    auto operator<=>(const GetResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Queue& v) {
    os << '{' << "'stack1': "<< "["; for(size_t i=0;i<v.stack1.size();++i){ if(i>0) os << ", "; os << v.stack1[i]; } os << "]"
 << ", " << "'stack2': "<< "["; for(size_t i=0;i<v.stack2.size();++i){ if(i>0) os << ", "; os << v.stack2[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GetResult& v) {
    os << '{' << "'queue': "<< v.queue
 << ", " << "'value': "<< v.value
 << '}';
    return os;
}

Queue new_queue(const std::vector<int64_t>& items);
int64_t len_queue(const Queue& q);
std::string str_queue(const Queue& q);
Queue put(const Queue& q, int64_t item);
GetResult get(const Queue& q);
int main();

Queue q = Queue{};
GetResult r1 = GetResult{};
GetResult r2 = GetResult{};
GetResult r3 = GetResult{};
GetResult r4 = GetResult{};

Queue new_queue(const std::vector<int64_t>& items) {
    return Queue{items, std::vector<int64_t>{}};
}

int64_t len_queue(const Queue& q) {
    return (q.stack1.size() + q.stack2.size());
}

std::string str_queue(const Queue& q) {
    std::vector<int64_t> items = {};
    int64_t i = (q.stack2.size() - int64_t(1));
    while ((i >= int64_t(0))) {
        items = ([&]{ auto __tmp = items; __tmp.push_back(_index(q.stack2, i)); return __tmp; }());
        i = (i - int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < q.stack1.size())) {
        items = ([&]{ auto __tmp = items; __tmp.push_back(_index(q.stack1, j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    std::string s = std::string("Queue((");
    int64_t k = int64_t(0);
    while ((k < items.size())) {
        s = (s + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(items, k); return ss.str(); }()));
        if ((k < (items.size() - int64_t(1)))) {
            s = (s + std::string(", "));
        }
        k = (k + int64_t(1));
    }
    s = (s + std::string("))"));
    return s;
}

Queue put(const Queue& q, int64_t item) {
    std::vector<int64_t> s1 = q.stack1;
    s1 = ([&]{ auto __tmp = s1; __tmp.push_back(item); return __tmp; }());
    return Queue{s1, q.stack2};
}

GetResult get(const Queue& q) {
    std::vector<int64_t> s1 = q.stack1;
    std::vector<int64_t> s2 = q.stack2;
    if ((s2.size() == int64_t(0))) {
        while ((s1.size() > int64_t(0))) {
            int64_t idx = (s1.size() - int64_t(1));
            int64_t v = _index(s1, idx);
            std::vector<int64_t> new_s1 = {};
            int64_t i = int64_t(0);
            while ((i < idx)) {
                new_s1 = ([&]{ auto __tmp = new_s1; __tmp.push_back(_index(s1, i)); return __tmp; }());
                i = (i + int64_t(1));
            }
            s1 = new_s1;
            s2 = ([&]{ auto __tmp = s2; __tmp.push_back(v); return __tmp; }());
        }
    }
    if ((s2.size() == int64_t(0))) {
        throw std::runtime_error(std::string("Queue is empty"));
    }
    int64_t idx2 = (s2.size() - int64_t(1));
    int64_t value = _index(s2, idx2);
    std::vector<int64_t> new_s2 = {};
    int64_t j = int64_t(0);
    while ((j < idx2)) {
        new_s2 = ([&]{ auto __tmp = new_s2; __tmp.push_back(_index(s2, j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    s2 = new_s2;
    return GetResult{Queue{s1, s2}, value};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        q = new_queue(std::vector<int64_t>{int64_t(10), int64_t(20), int64_t(30)});
        r1 = get(q);
        q = r1.queue;
        std::cout << r1.value;
        std::cout << std::endl;
        q = put(q, int64_t(40));
        r2 = get(q);
        q = r2.queue;
        std::cout << r2.value;
        std::cout << std::endl;
        r3 = get(q);
        q = r3.queue;
        std::cout << r3.value;
        std::cout << std::endl;
        std::cout << len_queue(q);
        std::cout << std::endl;
        r4 = get(q);
        q = r4.queue;
        std::cout << r4.value;
        std::cout << std::endl;
    }
    return 0;
}
