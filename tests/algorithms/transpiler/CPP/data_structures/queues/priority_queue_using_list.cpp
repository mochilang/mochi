// Generated by Mochi transpiler v0.10.72 on 2025-08-24 23:18:55 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <optional>
#include <cstdint>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(V& v, int64_t i) -> decltype(v[static_cast<size_t>(0)]) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) { static std::remove_reference_t<decltype(v[0])> dummy{}; return dummy; }
    return v[static_cast<size_t>(i)];
}
template<typename V> auto _index(const V& v, int64_t i) -> std::remove_reference_t<decltype(v[static_cast<size_t>(0)])> {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return std::remove_reference_t<decltype(v[0])>{};
    return v[static_cast<size_t>(i)];
}
static std::string _format_double(double v) {
    std::ostringstream ss;
    ss << std::defaultfloat << std::setprecision(6) << v;
    auto s = ss.str();
    auto epos = s.find('e');
    if(epos == std::string::npos) epos = s.find('E');
    std::string exp;
    if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
    auto pos = s.find('.');
    if(pos != std::string::npos){ while(!s.empty() && s.back() == '0') s.pop_back(); if(!s.empty() && s.back() == '.') s.pop_back(); }
    return s + exp;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << _format_double(std::any_cast<double>(val));
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(int64_t)) return (double)std::any_cast<int64_t>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) return _format_double(std::any_cast<double>(v));
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        return _format_double(v);
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct FixedPriorityQueue;
struct FPQDequeueResult;
struct ElementPriorityQueue;
struct EPQDequeueResult;

std::ostream& operator<<(std::ostream&, const FixedPriorityQueue&);
std::ostream& operator<<(std::ostream&, const FPQDequeueResult&);
std::ostream& operator<<(std::ostream&, const ElementPriorityQueue&);
std::ostream& operator<<(std::ostream&, const EPQDequeueResult&);


struct FixedPriorityQueue {
    std::vector<std::vector<int64_t>> queues;
    auto operator<=>(const FixedPriorityQueue&) const = default;
};

struct FPQDequeueResult {
    FixedPriorityQueue queue;
    int64_t value;
    auto operator<=>(const FPQDequeueResult&) const = default;
};

struct ElementPriorityQueue {
    std::vector<int64_t> queue;
    auto operator<=>(const ElementPriorityQueue&) const = default;
};

struct EPQDequeueResult {
    ElementPriorityQueue queue;
    int64_t value;
    auto operator<=>(const EPQDequeueResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const FixedPriorityQueue& v) {
    os << '{' << "'queues': "<< "["; for(size_t i=0;i<v.queues.size();++i){ if(i>0) os << ", "; os << v.queues[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const FPQDequeueResult& v) {
    os << '{' << "'queue': "<< v.queue
 << ", " << "'value': "<< v.value
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const ElementPriorityQueue& v) {
    os << '{' << "'queue': "<< "["; for(size_t i=0;i<v.queue.size();++i){ if(i>0) os << ", "; os << v.queue[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const EPQDequeueResult& v) {
    os << '{' << "'queue': "<< v.queue
 << ", " << "'value': "<< v.value
 << '}';
    return os;
}

void panic(std::string msg);
FixedPriorityQueue fpq_new();
FixedPriorityQueue fpq_enqueue(FixedPriorityQueue fpq, int64_t priority, int64_t data);
FPQDequeueResult fpq_dequeue(FixedPriorityQueue fpq);
std::string fpq_to_string(const FixedPriorityQueue& fpq);
ElementPriorityQueue epq_new();
ElementPriorityQueue epq_enqueue(ElementPriorityQueue epq, int64_t data);
EPQDequeueResult epq_dequeue(ElementPriorityQueue epq);
std::string epq_to_string(const ElementPriorityQueue& epq);
void fixed_priority_queue();
void element_priority_queue();
int main();

void panic(std::string msg) {
    std::cout << msg;
    std::cout << std::endl;
}

FixedPriorityQueue fpq_new() {
    return FixedPriorityQueue{std::vector<std::vector<int64_t>>{std::vector<int64_t>{}, std::vector<int64_t>{}, std::vector<int64_t>{}}};
}

FixedPriorityQueue fpq_enqueue(FixedPriorityQueue fpq, int64_t priority, int64_t data) {
    if (((priority < int64_t(0)) || (priority >= fpq.queues.size()))) {
        panic(std::string("Valid priorities are 0, 1, and 2"));
        return fpq;
    }
    if ((_index(fpq.queues, priority).size() >= int64_t(100))) {
        panic(std::string("Maximum queue size is 100"));
        return fpq;
    }
    std::vector<std::vector<int64_t>> qs = fpq.queues;
    _index(qs, priority) = ([&]{ auto __tmp = _index(qs, priority); __tmp.push_back(data); return __tmp; }());
    fpq.queues = qs;
    return fpq;
}

FPQDequeueResult fpq_dequeue(FixedPriorityQueue fpq) {
    std::vector<std::vector<int64_t>> qs = fpq.queues;
    int64_t i = int64_t(0);
    while ((i < qs.size())) {
        std::vector<int64_t> q = _index(qs, i);
        if ((q.size() > int64_t(0))) {
            int64_t val = _index(q, int64_t(0));
            std::vector<int64_t> new_q = {};
            int64_t j = int64_t(1);
            while ((j < q.size())) {
                new_q = ([&]{ auto __tmp = new_q; __tmp.push_back(_index(q, j)); return __tmp; }());
                j = (j + int64_t(1));
            }
            _index(qs, i) = new_q;
            fpq.queues = qs;
            return FPQDequeueResult{fpq, val};
        }
        i = (i + int64_t(1));
    }
    panic(std::string("All queues are empty"));
    return FPQDequeueResult{fpq, int64_t(0)};
}

std::string fpq_to_string(const FixedPriorityQueue& fpq) {
    std::vector<std::string> lines = {};
    int64_t i = int64_t(0);
    while ((i < fpq.queues.size())) {
        std::string q_str = std::string("[");
        std::vector<int64_t> q = _index(fpq.queues, i);
        int64_t j = int64_t(0);
        while ((j < q.size())) {
            if ((j > int64_t(0))) {
                q_str = (q_str + std::string(", "));
            }
            q_str = (q_str + ([&]{ std::ostringstream ss; ss << std::boolalpha << _index(q, j); return ss.str(); }()));
            j = (j + int64_t(1));
        }
        q_str = (q_str + std::string("]"));
        lines = ([&]{ auto __tmp = lines; __tmp.push_back((((std::string("Priority ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << i; return ss.str(); }())) + std::string(": ")) + q_str)); return __tmp; }());
        i = (i + int64_t(1));
    }
    std::string res = std::string("");
    i = int64_t(0);
    while ((i < lines.size())) {
        if ((i > int64_t(0))) {
            res = (res + std::string("\n"));
        }
        res = (res + _index(lines, i));
        i = (i + int64_t(1));
    }
    return res;
}

ElementPriorityQueue epq_new() {
    return ElementPriorityQueue{std::vector<int64_t>{}};
}

ElementPriorityQueue epq_enqueue(ElementPriorityQueue epq, int64_t data) {
    if ((epq.queue.size() >= int64_t(100))) {
        panic(std::string("Maximum queue size is 100"));
        return epq;
    }
    epq.queue = ([&]{ auto __tmp = epq.queue; __tmp.push_back(data); return __tmp; }());
    return epq;
}

EPQDequeueResult epq_dequeue(ElementPriorityQueue epq) {
    if ((epq.queue.size() == int64_t(0))) {
        panic(std::string("The queue is empty"));
        return EPQDequeueResult{epq, int64_t(0)};
    }
    int64_t min_val = _index(epq.queue, int64_t(0));
    int64_t idx = int64_t(0);
    int64_t i = int64_t(1);
    while ((i < epq.queue.size())) {
        int64_t v = _index(epq.queue, i);
        if ((v < min_val)) {
            min_val = v;
            idx = i;
        }
        i = (i + int64_t(1));
    }
    std::vector<int64_t> new_q = {};
    i = int64_t(0);
    while ((i < epq.queue.size())) {
        if ((i != idx)) {
            new_q = ([&]{ auto __tmp = new_q; __tmp.push_back(_index(epq.queue, i)); return __tmp; }());
        }
        i = (i + int64_t(1));
    }
    epq.queue = new_q;
    return EPQDequeueResult{epq, min_val};
}

std::string epq_to_string(const ElementPriorityQueue& epq) {
    return ([&]{ std::ostringstream ss; { auto __tmp1 = epq.queue; ss << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) ss << ' '; ss << __tmp1[i]; } ss << "]"; }
 return ss.str(); }());
}

void fixed_priority_queue() {
    FixedPriorityQueue fpq = fpq_new();
    fpq = fpq_enqueue(fpq, int64_t(0), int64_t(10));
    fpq = fpq_enqueue(fpq, int64_t(1), int64_t(70));
    fpq = fpq_enqueue(fpq, int64_t(0), int64_t(100));
    fpq = fpq_enqueue(fpq, int64_t(2), int64_t(1));
    fpq = fpq_enqueue(fpq, int64_t(2), int64_t(5));
    fpq = fpq_enqueue(fpq, int64_t(1), int64_t(7));
    fpq = fpq_enqueue(fpq, int64_t(2), int64_t(4));
    fpq = fpq_enqueue(fpq, int64_t(1), int64_t(64));
    fpq = fpq_enqueue(fpq, int64_t(0), int64_t(128));
    std::cout << fpq_to_string(fpq);
    std::cout << std::endl;
    FPQDequeueResult res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    std::cout << fpq_to_string(fpq);
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = fpq_dequeue(fpq);
    fpq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
}

void element_priority_queue() {
    ElementPriorityQueue epq = epq_new();
    epq = epq_enqueue(epq, int64_t(10));
    epq = epq_enqueue(epq, int64_t(70));
    epq = epq_enqueue(epq, int64_t(100));
    epq = epq_enqueue(epq, int64_t(1));
    epq = epq_enqueue(epq, int64_t(5));
    epq = epq_enqueue(epq, int64_t(7));
    epq = epq_enqueue(epq, int64_t(4));
    epq = epq_enqueue(epq, int64_t(64));
    epq = epq_enqueue(epq, int64_t(128));
    std::cout << epq_to_string(epq);
    std::cout << std::endl;
    EPQDequeueResult res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    std::cout << epq_to_string(epq);
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
    res = epq_dequeue(epq);
    epq = res.queue;
    std::cout << res.value;
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        fixed_priority_queue();
        element_priority_queue();
    }
    return 0;
}
