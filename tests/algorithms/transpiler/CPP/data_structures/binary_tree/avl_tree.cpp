// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:18:59 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t new_node(int64_t value);
int64_t get_height(int64_t i);
int64_t my_max(int64_t a, int64_t b);
void update_height(int64_t i);
int64_t right_rotation(int64_t i);
int64_t left_rotation(int64_t i);
int64_t lr_rotation(int64_t i);
int64_t rl_rotation(int64_t i);
int64_t insert_node(int64_t i, int64_t value);
int64_t get_left_most(int64_t i);
int64_t del_node(int64_t i, int64_t value);
std::string inorder(int64_t i);
int main();

int64_t NIL = (int64_t(0) - int64_t(1));
std::vector<std::map<std::string, int64_t>> nodes = {};

int64_t new_node(int64_t value) {
    std::map<std::string, int64_t> node = std::map<std::string, int64_t>{{"data", value}, {"left", NIL}, {"right", NIL}, {"height", int64_t(1)}};
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(node); return __tmp; }());
    return (nodes.size() - int64_t(1));
}

int64_t get_height(int64_t i) {
    if ((i == NIL)) {
        return int64_t(0);
    }
    return ([&](const auto& __m){ auto __it = __m.find(std::string("height")); return __it != __m.end() ? __it->second : 0; })(nodes[i]);
}

int64_t my_max(int64_t a, int64_t b) {
    if ((a > b)) {
        return a;
    }
    return b;
}

void update_height(int64_t i) {
    nodes[i][std::string("height")] = (my_max(get_height(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i])), get_height(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]))) + int64_t(1));
}

int64_t right_rotation(int64_t i) {
    int64_t left = ([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]);
    nodes[i][std::string("left")] = ([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[left]);
    nodes[left][std::string("right")] = i;
    update_height(i);
    update_height(left);
    return left;
}

int64_t left_rotation(int64_t i) {
    int64_t right = ([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]);
    nodes[i][std::string("right")] = ([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[right]);
    nodes[right][std::string("left")] = i;
    update_height(i);
    update_height(right);
    return right;
}

int64_t lr_rotation(int64_t i) {
    nodes[i][std::string("left")] = left_rotation(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
    return right_rotation(i);
}

int64_t rl_rotation(int64_t i) {
    nodes[i][std::string("right")] = right_rotation(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
    return left_rotation(i);
}

int64_t insert_node(int64_t i, int64_t value) {
    if ((i == NIL)) {
        return new_node(value);
    }
    if ((value < ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[i]))) {
        nodes[i][std::string("left")] = insert_node(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]), value);
        if (((get_height(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i])) - get_height(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]))) == int64_t(2))) {
            if ((value < ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i])]))) {
                i = right_rotation(i);
            } else {
                i = lr_rotation(i);
            }
        }
    } else {
        nodes[i][std::string("right")] = insert_node(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]), value);
        if (((get_height(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i])) - get_height(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]))) == int64_t(2))) {
            if ((value < ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i])]))) {
                i = rl_rotation(i);
            } else {
                i = left_rotation(i);
            }
        }
    }
    update_height(i);
    return i;
}

int64_t get_left_most(int64_t i) {
    int64_t cur = i;
    while ((([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[cur]) != NIL)) {
        cur = ([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[cur]);
    }
    return ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[cur]);
}

int64_t del_node(int64_t i, int64_t value) {
    if ((i == NIL)) {
        return NIL;
    }
    if ((value < ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[i]))) {
        nodes[i][std::string("left")] = del_node(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]), value);
    } else     if ((value > ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[i]))) {
        nodes[i][std::string("right")] = del_node(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]), value);
    } else {
        if (((([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]) != NIL) && (([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]) != NIL))) {
            int64_t temp = get_left_most(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
            nodes[i][std::string("data")] = temp;
            nodes[i][std::string("right")] = del_node(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]), temp);
        } else         if ((([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]) != NIL)) {
            i = ([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]);
        } else {
            i = ([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]);
        }

    }

    if ((i == NIL)) {
        return NIL;
    }
    int64_t lh = get_height(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
    int64_t rh = get_height(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
    if (((rh - lh) == int64_t(2))) {
        if ((get_height(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i])])) > get_height(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i])])))) {
            i = left_rotation(i);
        } else {
            i = rl_rotation(i);
        }
    } else     if (((lh - rh) == int64_t(2))) {
        if ((get_height(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i])])) > get_height(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i])])))) {
            i = right_rotation(i);
        } else {
            i = lr_rotation(i);
        }
    }

    update_height(i);
    return i;
}

std::string inorder(int64_t i) {
    if ((i == NIL)) {
        return std::string("");
    }
    std::string left = inorder(([&](const auto& __m){ auto __it = __m.find(std::string("left")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
    std::string right = inorder(([&](const auto& __m){ auto __it = __m.find(std::string("right")); return __it != __m.end() ? __it->second : 0; })(nodes[i]));
    std::string res = ([&]{ std::ostringstream ss; ss << std::boolalpha << ([&](const auto& __m){ auto __it = __m.find(std::string("data")); return __it != __m.end() ? __it->second : 0; })(nodes[i]); return ss.str(); }());
    if ((left != std::string(""))) {
        res = ((left + std::string(" ")) + res);
    }
    if ((right != std::string(""))) {
        res = ((res + std::string(" ")) + right);
    }
    return res;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        nodes = {};
        int64_t root = NIL;
        root = insert_node(root, int64_t(4));
        root = insert_node(root, int64_t(2));
        root = insert_node(root, int64_t(3));
        std::cout << inorder(root);
        std::cout << std::endl;
        std::cout << ([&]{ std::ostringstream ss; ss << std::boolalpha << get_height(root); return ss.str(); }());
        std::cout << std::endl;
        root = del_node(root, int64_t(3));
        std::cout << inorder(root);
        std::cout << std::endl;
    }
    return 0;
}
