// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

int64_t left_child(int64_t idx);
int64_t right_child(int64_t idx);
void build(int64_t idx, int64_t left, int64_t right);
bool update_recursive(int64_t idx, int64_t left, int64_t right, int64_t a, int64_t b, int64_t val);
bool update(int64_t a, int64_t b, int64_t val);
int64_t query_recursive(int64_t idx, int64_t left, int64_t right, int64_t a, int64_t b);
int64_t query(int64_t a, int64_t b);
void show_data();
int main();

std::vector<int64_t> A = {};
int64_t N = int64_t(0);
std::vector<int64_t> st = {};
int64_t NEG_INF = -int64_t(1000000000);

int64_t left_child(int64_t idx) {
    return (idx * int64_t(2));
}

int64_t right_child(int64_t idx) {
    return ((idx * int64_t(2)) + int64_t(1));
}

void build(int64_t idx, int64_t left, int64_t right) {
    if ((left == right)) {
        st[idx] = A[left];
    } else {
        int64_t mid = ((left + right) / int64_t(2));
        build(left_child(idx), left, mid);
        build(right_child(idx), (mid + int64_t(1)), right);
        int64_t left_val = st[left_child(idx)];
        int64_t right_val = st[right_child(idx)];
        st[idx] = ((left_val > right_val) ? left_val : right_val);
    }
}

bool update_recursive(int64_t idx, int64_t left, int64_t right, int64_t a, int64_t b, int64_t val) {
    if (((right < a) || (left > b))) {
        return true;
    }
    if ((left == right)) {
        st[idx] = val;
        return true;
    }
    int64_t mid = ((left + right) / int64_t(2));
    update_recursive(left_child(idx), left, mid, a, b, val);
    update_recursive(right_child(idx), (mid + int64_t(1)), right, a, b, val);
    int64_t left_val = st[left_child(idx)];
    int64_t right_val = st[right_child(idx)];
    st[idx] = ((left_val > right_val) ? left_val : right_val);
    return true;
}

bool update(int64_t a, int64_t b, int64_t val) {
    return update_recursive(int64_t(1), int64_t(0), (N - int64_t(1)), (a - int64_t(1)), (b - int64_t(1)), val);
}

int64_t query_recursive(int64_t idx, int64_t left, int64_t right, int64_t a, int64_t b) {
    if (((right < a) || (left > b))) {
        return NEG_INF;
    }
    if (((left >= a) && (right <= b))) {
        return st[idx];
    }
    int64_t mid = ((left + right) / int64_t(2));
    int64_t q1 = query_recursive(left_child(idx), left, mid, a, b);
    int64_t q2 = query_recursive(right_child(idx), (mid + int64_t(1)), right, a, b);
    return ((q1 > q2) ? q1 : q2);
}

int64_t query(int64_t a, int64_t b) {
    return query_recursive(int64_t(1), int64_t(0), (N - int64_t(1)), (a - int64_t(1)), (b - int64_t(1)));
}

void show_data() {
    int64_t i = int64_t(0);
    std::vector<int64_t> show_list = {};
    while ((i < N)) {
        show_list = ([&]{ auto __tmp = show_list; __tmp.push_back(query((i + int64_t(1)), (i + int64_t(1)))); return __tmp; }());
        i = (i + int64_t(1));
    }
    { auto __tmp = show_list; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        A = std::vector<int64_t>{int64_t(1), int64_t(2), -int64_t(4), int64_t(7), int64_t(3), -int64_t(5), int64_t(6), int64_t(11), -int64_t(20), int64_t(9), int64_t(14), int64_t(15), int64_t(5), int64_t(2), -int64_t(8)};
        N = A.size();
        int64_t i = int64_t(0);
        while ((i < (int64_t(4) * N))) {
            st = ([&]{ auto __tmp = st; __tmp.push_back(int64_t(0)); return __tmp; }());
            i = (i + int64_t(1));
        }
        if ((N > int64_t(0))) {
            build(int64_t(1), int64_t(0), (N - int64_t(1)));
        }
        std::cout << query(int64_t(4), int64_t(6));
        std::cout << std::endl;
        std::cout << query(int64_t(7), int64_t(11));
        std::cout << std::endl;
        std::cout << query(int64_t(7), int64_t(12));
        std::cout << std::endl;
        update(int64_t(1), int64_t(3), int64_t(111));
        std::cout << query(int64_t(1), int64_t(15));
        std::cout << std::endl;
        update(int64_t(7), int64_t(8), int64_t(235));
        show_data();
    }
    return 0;
}
