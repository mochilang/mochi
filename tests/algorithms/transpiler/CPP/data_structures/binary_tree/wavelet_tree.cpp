// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:59 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Node;

std::ostream& operator<<(std::ostream&, const Node&);


struct Node {
    int64_t minn;
    int64_t maxx;
    std::vector<int64_t> map_left;
    int64_t left;
    int64_t right;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'minn': "<< v.minn
 << ", " << "'maxx': "<< v.maxx
 << ", " << "'map_left': "<< "["; for(size_t i=0;i<v.map_left.size();++i){ if(i>0) os << ", "; os << v.map_left[i]; } os << "]"
 << ", " << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

std::vector<int64_t> make_list(int64_t length, int64_t value);
int64_t min_list(const std::vector<int64_t>& arr);
int64_t max_list(const std::vector<int64_t>& arr);
int64_t build_tree(const std::vector<int64_t>& arr);
int64_t rank_till_index(int64_t node_idx, int64_t num, int64_t index);
int64_t rank(int64_t node_idx, int64_t num, int64_t start, int64_t end);
int64_t quantile(int64_t node_idx, int64_t index, int64_t start, int64_t end);
int64_t range_counting(int64_t node_idx, int64_t start, int64_t end, int64_t start_num, int64_t end_num);
int main();

std::vector<Node> nodes = {};
std::vector<int64_t> test_array = std::vector<int64_t>{int64_t(2), int64_t(1), int64_t(4), int64_t(5), int64_t(6), int64_t(0), int64_t(8), int64_t(9), int64_t(1), int64_t(2), int64_t(0), int64_t(6), int64_t(4), int64_t(2), int64_t(0), int64_t(6), int64_t(5), int64_t(3), int64_t(2), int64_t(7)};
int64_t root = build_tree(test_array);

std::vector<int64_t> make_list(int64_t length, int64_t value) {
    std::vector<int64_t> lst = {};
    int64_t i = int64_t(0);
    while ((i < length)) {
        lst = ([&]{ auto __tmp = lst; __tmp.push_back(value); return __tmp; }());
        i = (i + int64_t(1));
    }
    return lst;
}

int64_t min_list(const std::vector<int64_t>& arr) {
    int64_t m = arr[int64_t(0)];
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        if ((arr[i] < m)) {
            m = arr[i];
        }
        i = (i + int64_t(1));
    }
    return m;
}

int64_t max_list(const std::vector<int64_t>& arr) {
    int64_t m = arr[int64_t(0)];
    int64_t i = int64_t(1);
    while ((i < arr.size())) {
        if ((arr[i] > m)) {
            m = arr[i];
        }
        i = (i + int64_t(1));
    }
    return m;
}

int64_t build_tree(const std::vector<int64_t>& arr) {
    Node n = Node{.minn = min_list(arr), .maxx = max_list(arr), .map_left = make_list((int64_t)(arr.size()), int64_t(0)), .left = -int64_t(1), .right = -int64_t(1)};
    if ((n.minn == n.maxx)) {
        nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(n); return __tmp; }());
        return (nodes.size() - int64_t(1));
    }
    int64_t pivot = ((n.minn + n.maxx) / int64_t(2));
    std::vector<int64_t> left_arr = {};
    std::vector<int64_t> right_arr = {};
    int64_t i = int64_t(0);
    while ((i < arr.size())) {
        int64_t num = arr[i];
        if ((num <= pivot)) {
            left_arr = ([&]{ auto __tmp = left_arr; __tmp.push_back(num); return __tmp; }());
        } else {
            right_arr = ([&]{ auto __tmp = right_arr; __tmp.push_back(num); return __tmp; }());
        }
        std::vector<int64_t> ml = n.map_left;
        ml[i] = left_arr.size();
        n.map_left = ml;
        i = (i + int64_t(1));
    }
    if ((left_arr.size() > int64_t(0))) {
        n.left = build_tree(left_arr);
    }
    if ((right_arr.size() > int64_t(0))) {
        n.right = build_tree(right_arr);
    }
    nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(n); return __tmp; }());
    return (nodes.size() - int64_t(1));
}

int64_t rank_till_index(int64_t node_idx, int64_t num, int64_t index) {
    if (((index < int64_t(0)) || (node_idx < int64_t(0)))) {
        return int64_t(0);
    }
    Node node = nodes[node_idx];
    if ((node.minn == node.maxx)) {
        if ((node.minn == num)) {
            return (index + int64_t(1));
        } else {
            return int64_t(0);
        }
    }
    int64_t pivot = ((node.minn + node.maxx) / int64_t(2));
    if ((num <= pivot)) {
        return rank_till_index(node.left, num, (node.map_left[index] - int64_t(1)));
    } else {
        return rank_till_index(node.right, num, (index - node.map_left[index]));
    }
}

int64_t rank(int64_t node_idx, int64_t num, int64_t start, int64_t end) {
    if ((start > end)) {
        return int64_t(0);
    }
    int64_t rank_till_end = rank_till_index(node_idx, num, end);
    int64_t rank_before_start = rank_till_index(node_idx, num, (start - int64_t(1)));
    return (rank_till_end - rank_before_start);
}

int64_t quantile(int64_t node_idx, int64_t index, int64_t start, int64_t end) {
    if ((((index > (end - start)) || (start > end)) || (node_idx < int64_t(0)))) {
        return -int64_t(1);
    }
    Node node = nodes[node_idx];
    if ((node.minn == node.maxx)) {
        return node.minn;
    }
    int64_t left_start = ((start == int64_t(0)) ? int64_t(0) : node.map_left[(start - int64_t(1))]);
    int64_t num_left = (node.map_left[end] - left_start);
    if ((num_left > index)) {
        return quantile(node.left, index, left_start, (node.map_left[end] - int64_t(1)));
    } else {
        return quantile(node.right, (index - num_left), (start - left_start), (end - node.map_left[end]));
    }
}

int64_t range_counting(int64_t node_idx, int64_t start, int64_t end, int64_t start_num, int64_t end_num) {
    if ((((start > end) || (node_idx < int64_t(0))) || (start_num > end_num))) {
        return int64_t(0);
    }
    Node node = nodes[node_idx];
    if (((node.minn > end_num) || (node.maxx < start_num))) {
        return int64_t(0);
    }
    if (((start_num <= node.minn) && (node.maxx <= end_num))) {
        return ((end - start) + int64_t(1));
    }
    int64_t left = range_counting(node.left, ((start == int64_t(0)) ? int64_t(0) : node.map_left[(start - int64_t(1))]), (node.map_left[end] - int64_t(1)), start_num, end_num);
    int64_t right = range_counting(node.right, (start - ((start == int64_t(0)) ? int64_t(0) : node.map_left[(start - int64_t(1))])), (end - node.map_left[end]), start_num, end_num);
    return (left + right);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << (std::string("rank_till_index 6 at 6 -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << rank_till_index(root, int64_t(6), int64_t(6)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("rank 6 in [3,13] -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << rank(root, int64_t(6), int64_t(3), int64_t(13)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("quantile index 2 in [2,5] -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << quantile(root, int64_t(2), int64_t(2), int64_t(5)); return ss.str(); }()));
        std::cout << std::endl;
        std::cout << (std::string("range_counting [3,7] in [1,10] -> ") + ([&]{ std::ostringstream ss; ss << std::boolalpha << range_counting(root, int64_t(1), int64_t(10), int64_t(3), int64_t(7)); return ss.str(); }()));
        std::cout << std::endl;
    }
    return 0;
}
