// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:49 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Node;
struct BuildResult;
struct SegmentTree;

std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const BuildResult&);
std::ostream& operator<<(std::ostream&, const SegmentTree&);


struct Node {
    int64_t start;
    int64_t end;
    int64_t val;
    int64_t mid;
    int64_t left;
    int64_t right;
    auto operator<=>(const Node&) const = default;
};

struct BuildResult {
    std::vector<Node> nodes;
    int64_t idx;
    auto operator<=>(const BuildResult&) const = default;
};

struct SegmentTree {
    std::vector<int64_t> arr;
    int64_t op;
    auto operator<=>(const SegmentTree&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'start': "<< v.start
 << ", " << "'end': "<< v.end
 << ", " << "'val': "<< v.val
 << ", " << "'mid': "<< v.mid
 << ", " << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BuildResult& v) {
    os << '{' << "'nodes': "<< "["; for(size_t i=0;i<v.nodes.size();++i){ if(i>0) os << ", "; os << v.nodes[i]; } os << "]"
 << ", " << "'idx': "<< v.idx
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const SegmentTree& v) {
    os << '{' << "'arr': "<< "["; for(size_t i=0;i<v.arr.size();++i){ if(i>0) os << ", "; os << v.arr[i]; } os << "]"
 << ", " << "'op': "<< v.op
 << '}';
    return os;
}

int64_t combine(int64_t a, int64_t b, int64_t op);
BuildResult build_tree(const std::vector<Node>& nodes, const std::vector<int64_t>& arr, int64_t start, int64_t end, int64_t op);
SegmentTree new_segment_tree(const std::vector<int64_t>& collection, int64_t op);
SegmentTree update(const SegmentTree& tree, int64_t i, int64_t val);
int64_t query_range(const SegmentTree& tree, int64_t i, int64_t j);
std::vector<Node> traverse(const SegmentTree& tree);
std::string node_to_string(const Node& node);
void print_traverse(const SegmentTree& tree);
int main();

std::vector<int64_t> arr = std::vector<int64_t>{int64_t(2), int64_t(1), int64_t(5), int64_t(3), int64_t(4)};

int64_t combine(int64_t a, int64_t b, int64_t op) {
    if ((op == int64_t(0))) {
        return (a + b);
    }
    if ((op == int64_t(1))) {
        if ((a > b)) {
            return a;
        }
        return b;
    }
    if ((a < b)) {
        return a;
    }
    return b;
}

BuildResult build_tree(const std::vector<Node>& nodes, const std::vector<int64_t>& arr, int64_t start, int64_t end, int64_t op) {
    if ((start == end)) {
        Node node = Node{.start = start, .end = end, .val = arr[start], .mid = start, .left = -int64_t(1), .right = -int64_t(1)};
        auto new_nodes = ([&]{ auto __tmp = nodes; __tmp.push_back(node); return __tmp; }());
        return BuildResult{.nodes = new_nodes, .idx = (new_nodes.size() - int64_t(1))};
    }
    int64_t mid = ((start + end) / int64_t(2));
    BuildResult left_res = build_tree(nodes, arr, start, mid, op);
    BuildResult right_res = build_tree(left_res.nodes, arr, (mid + int64_t(1)), end, op);
    Node left_node = right_res.nodes[left_res.idx];
    Node right_node = right_res.nodes[right_res.idx];
    int64_t val = combine(left_node.val, right_node.val, op);
    Node parent = Node{.start = start, .end = end, .val = val, .mid = mid, .left = left_res.idx, .right = right_res.idx};
    auto new_nodes = ([&]{ auto __tmp = right_res.nodes; __tmp.push_back(parent); return __tmp; }());
    return BuildResult{.nodes = new_nodes, .idx = (new_nodes.size() - int64_t(1))};
}

SegmentTree new_segment_tree(const std::vector<int64_t>& collection, int64_t op) {
    return SegmentTree{.arr = collection, .op = op};
}

SegmentTree update(const SegmentTree& tree, int64_t i, int64_t val) {
    std::vector<int64_t> new_arr = {};
    int64_t idx = int64_t(0);
    while ((idx < tree.arr.size())) {
        if ((idx == i)) {
            new_arr = ([&]{ auto __tmp = new_arr; __tmp.push_back(val); return __tmp; }());
        } else {
            new_arr = ([&]{ auto __tmp = new_arr; __tmp.push_back(tree.arr[idx]); return __tmp; }());
        }
        idx = (idx + int64_t(1));
    }
    return SegmentTree{.arr = new_arr, .op = tree.op};
}

int64_t query_range(const SegmentTree& tree, int64_t i, int64_t j) {
    int64_t result = tree.arr[i];
    int64_t idx = (i + int64_t(1));
    while ((idx <= j)) {
        result = combine(result, tree.arr[idx], tree.op);
        idx = (idx + int64_t(1));
    }
    return result;
}

std::vector<Node> traverse(const SegmentTree& tree) {
    if ((tree.arr.size() == int64_t(0))) {
        return std::vector<Node>{};
    }
    BuildResult res = build_tree(std::vector<Node>{}, tree.arr, int64_t(0), (int64_t)((tree.arr.size() - int64_t(1))), tree.op);
    return res.nodes;
}

std::string node_to_string(const Node& node) {
    return ((((((std::string("SegmentTreeNode(start=") + ([&]{ std::ostringstream ss; ss << std::boolalpha << node.start; return ss.str(); }())) + std::string(", end=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << node.end; return ss.str(); }())) + std::string(", val=")) + ([&]{ std::ostringstream ss; ss << std::boolalpha << node.val; return ss.str(); }())) + std::string(")"));
}

void print_traverse(const SegmentTree& tree) {
    std::vector<Node> nodes = traverse(tree);
    int64_t i = int64_t(0);
    while ((i < nodes.size())) {
        std::cout << node_to_string(nodes[i]);
        std::cout << std::endl;
        i = (i + int64_t(1));
    }
    std::cout << std::string("");
    std::cout << std::endl;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        for (int64_t op : std::vector<int64_t>{int64_t(0), int64_t(1), int64_t(2)}) {
            std::cout << std::string("**************************************************");
            std::cout << std::endl;
            SegmentTree tree = new_segment_tree(arr, op);
            print_traverse(tree);
            tree = update(tree, int64_t(1), int64_t(5));
            print_traverse(tree);
            std::cout << query_range(tree, int64_t(3), int64_t(4));
            std::cout << std::endl;
            std::cout << query_range(tree, int64_t(2), int64_t(2));
            std::cout << std::endl;
            std::cout << query_range(tree, int64_t(1), int64_t(3));
            std::cout << std::endl;
            std::cout << std::string("");
            std::cout << std::endl;
        }
    }
    return 0;
}
