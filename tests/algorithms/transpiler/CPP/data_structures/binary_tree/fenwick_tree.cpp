// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:07 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct FenwickTree;

std::ostream& operator<<(std::ostream&, const FenwickTree&);


struct FenwickTree {
    int64_t size;
    std::vector<int64_t> tree;
    auto operator<=>(const FenwickTree&) const = default;
};

std::ostream& operator<<(std::ostream& os, const FenwickTree& v) {
    os << '{' << "'size': "<< v.size
 << ", " << "'tree': "<< "["; for(size_t i=0;i<v.tree.size();++i){ if(i>0) os << ", "; os << v.tree[i]; } os << "]"
 << '}';
    return os;
}

FenwickTree fenwick_from_list(const std::vector<int64_t>& arr);
FenwickTree fenwick_empty(int64_t size);
std::vector<int64_t> fenwick_get_array(const FenwickTree& f);
int64_t bit_and(int64_t a, int64_t b);
int64_t low_bit(int64_t x);
int64_t fenwick_next(int64_t index);
int64_t fenwick_prev(int64_t index);
FenwickTree fenwick_add(const FenwickTree& f, int64_t index, int64_t value);
FenwickTree fenwick_update(const FenwickTree& f, int64_t index, int64_t value);
int64_t fenwick_prefix(const FenwickTree& f, int64_t right);
int64_t fenwick_query(const FenwickTree& f, int64_t left, int64_t right);
int64_t fenwick_get(const FenwickTree& f, int64_t index);
int64_t fenwick_rank_query(const FenwickTree& f, int64_t value);
int main();

FenwickTree f_base = fenwick_from_list(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(4), int64_t(5)});
FenwickTree f = fenwick_from_list(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(4), int64_t(5)});
FenwickTree f2 = fenwick_from_list(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(3), int64_t(4), int64_t(5)});
FenwickTree f3 = fenwick_from_list(std::vector<int64_t>{int64_t(1), int64_t(2), int64_t(0), int64_t(3), int64_t(0), int64_t(5)});

FenwickTree fenwick_from_list(const std::vector<int64_t>& arr) {
    int size = arr.size();
    std::vector<int64_t> tree = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        tree = ([&]{ auto __tmp = tree; __tmp.push_back(arr[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = int64_t(1);
    while ((i < size)) {
        int64_t j = fenwick_next(i);
        if ((j < size)) {
            tree[j] = (tree[j] + tree[i]);
        }
        i = (i + int64_t(1));
    }
    return FenwickTree{.size = size, .tree = tree};
}

FenwickTree fenwick_empty(int64_t size) {
    std::vector<int64_t> tree = {};
    int64_t i = int64_t(0);
    while ((i < size)) {
        tree = ([&]{ auto __tmp = tree; __tmp.push_back(int64_t(0)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return FenwickTree{.size = size, .tree = tree};
}

std::vector<int64_t> fenwick_get_array(const FenwickTree& f) {
    std::vector<int64_t> arr = {};
    int64_t i = int64_t(0);
    while ((i < f.size)) {
        arr = ([&]{ auto __tmp = arr; __tmp.push_back(f.tree[i]); return __tmp; }());
        i = (i + int64_t(1));
    }
    i = (f.size - int64_t(1));
    while ((i > int64_t(0))) {
        int64_t j = fenwick_next(i);
        if ((j < f.size)) {
            arr[j] = (arr[j] - arr[i]);
        }
        i = (i - int64_t(1));
    }
    return arr;
}

int64_t bit_and(int64_t a, int64_t b) {
    int64_t ua = a;
    int64_t ub = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    while (((ua != int64_t(0)) || (ub != int64_t(0)))) {
        if ((((ua % int64_t(2)) == int64_t(1)) && ((ub % int64_t(2)) == int64_t(1)))) {
            res = (res + bit);
        }
        ua = (int64_t)((ua / int64_t(2)));
        ub = (int64_t)((ub / int64_t(2)));
        bit = (bit * int64_t(2));
    }
    return res;
}

int64_t low_bit(int64_t x) {
    if ((x == int64_t(0))) {
        return int64_t(0);
    }
    return (x - bit_and(x, (x - int64_t(1))));
}

int64_t fenwick_next(int64_t index) {
    return (index + low_bit(index));
}

int64_t fenwick_prev(int64_t index) {
    return (index - low_bit(index));
}

FenwickTree fenwick_add(const FenwickTree& f, int64_t index, int64_t value) {
    std::vector<int64_t> tree = f.tree;
    if ((index == int64_t(0))) {
        tree[int64_t(0)] = (tree[int64_t(0)] + value);
        return FenwickTree{.size = f.size, .tree = tree};
    }
    int64_t i = index;
    while ((i < f.size)) {
        tree[i] = (tree[i] + value);
        i = fenwick_next(i);
    }
    return FenwickTree{.size = f.size, .tree = tree};
}

FenwickTree fenwick_update(const FenwickTree& f, int64_t index, int64_t value) {
    int64_t current = fenwick_get(f, index);
    return fenwick_add(f, index, (value - current));
}

int64_t fenwick_prefix(const FenwickTree& f, int64_t right) {
    if ((right == int64_t(0))) {
        return int64_t(0);
    }
    int64_t result = f.tree[int64_t(0)];
    int64_t r = (right - int64_t(1));
    while ((r > int64_t(0))) {
        result = (result + f.tree[r]);
        r = fenwick_prev(r);
    }
    return result;
}

int64_t fenwick_query(const FenwickTree& f, int64_t left, int64_t right) {
    return (fenwick_prefix(f, right) - fenwick_prefix(f, left));
}

int64_t fenwick_get(const FenwickTree& f, int64_t index) {
    return fenwick_query(f, index, (index + int64_t(1)));
}

int64_t fenwick_rank_query(const FenwickTree& f, int64_t value) {
    int64_t v = (value - f.tree[int64_t(0)]);
    if ((v < int64_t(0))) {
        return -int64_t(1);
    }
    int64_t j = int64_t(1);
    while (((j * int64_t(2)) < f.size)) {
        j = (j * int64_t(2));
    }
    int64_t i = int64_t(0);
    int64_t jj = j;
    while ((jj > int64_t(0))) {
        if ((((i + jj) < f.size) && (f.tree[(i + jj)] <= v))) {
            v = (v - f.tree[(i + jj)]);
            i = (i + jj);
        }
        jj = (jj / int64_t(2));
    }
    return i;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        { auto __tmp = fenwick_get_array(f_base); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        f = fenwick_add(f, int64_t(0), int64_t(1));
        f = fenwick_add(f, int64_t(1), int64_t(2));
        f = fenwick_add(f, int64_t(2), int64_t(3));
        f = fenwick_add(f, int64_t(3), int64_t(4));
        f = fenwick_add(f, int64_t(4), int64_t(5));
        { auto __tmp = fenwick_get_array(f); std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp[i]; } std::cout << "]"; }
        std::cout << std::endl;
        std::cout << fenwick_prefix(f2, int64_t(3));
        std::cout << std::endl;
        std::cout << fenwick_query(f2, int64_t(1), int64_t(4));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(0));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(2));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(1));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(3));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(5));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(6));
        std::cout << std::endl;
        std::cout << fenwick_rank_query(f3, int64_t(11));
        std::cout << std::endl;
    }
    return 0;
}
