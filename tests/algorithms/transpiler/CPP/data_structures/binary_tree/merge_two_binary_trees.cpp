// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:34 GMT+7
#include <iostream>
#include <string>
#include <memory>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <vector>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct Tree;
struct Leaf;
struct Node;

std::ostream& operator<<(std::ostream&, const Tree&);
std::ostream& operator<<(std::ostream&, const Leaf&);
std::ostream& operator<<(std::ostream&, const Node&);


struct Tree {
    virtual ~Tree() = default;
};

struct Leaf : Tree {
    auto operator<=>(const Leaf&) const = default;
};

struct Node : Tree {
    std::shared_ptr<Tree> left;
    int64_t value;
    std::shared_ptr<Tree> right;
    Node(std::shared_ptr<Tree> left_, int64_t value_, std::shared_ptr<Tree> right_) : left(std::move(left_)), value(value_), right(std::move(right_)) {}
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Leaf& v) {
    os << '{' << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'left': "<< v.left
 << ", " << "'value': "<< v.value
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

std::shared_ptr<Tree> merge_two_binary_trees(Tree* t1, Tree* t2);
bool is_leaf(Tree* t);
std::shared_ptr<Tree> get_left(Tree* t);
std::shared_ptr<Tree> get_right(Tree* t);
int64_t get_value(Tree* t);
auto print_preorder(Tree* t);
int main();

std::shared_ptr<Tree> tree1 = std::make_shared<Node>(Node{.left = Node{.left = Leaf{}, .value = int64_t(4), .right = Leaf{}}, .value = int64_t(2), .right = Leaf{}}, int64_t(1), Node{.left = Leaf{}, .value = int64_t(3), .right = Leaf{}});
std::shared_ptr<Tree> tree2 = std::make_shared<Node>(Node{.left = Leaf{}, .value = int64_t(4), .right = Node{.left = Leaf{}, .value = int64_t(9), .right = Leaf{}}}, int64_t(2), Node{.left = Leaf{}, .value = int64_t(6), .right = Node{.left = Leaf{}, .value = int64_t(5), .right = Leaf{}}});
std::shared_ptr<Tree> merged_tree = merge_two_binary_trees(tree1.get(), tree2.get());

std::shared_ptr<Tree> merge_two_binary_trees(Tree* t1, Tree* t2) {
    return ([=]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(t1);
    if (__leaf) {
        return t2;
    }
    const Node* __node = dynamic_cast<const Node*>(t1);
    if (__node) {
        Tree* l1 = __node->left.get();
        int64_t v1 = __node->value;
        Tree* r1 = __node->right.get();
        return ([=]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(t2);
    if (__leaf) {
        return t1;
    }
    const Node* __node = dynamic_cast<const Node*>(t2);
    if (__node) {
        Tree* l2 = __node->left.get();
        int64_t v2 = __node->value;
        Tree* r2 = __node->right.get();
        return std::make_shared<Node>(merge_two_binary_trees(l1, l2), (v1 + v2), merge_two_binary_trees(r1, r2));
    }
    return nullptr;
}());
    }
    return nullptr;
}());
}

bool is_leaf(Tree* t) {
    return ([=]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(t);
    if (__leaf) {
        return true;
    }
    return false;
    return false;
}());
}

std::shared_ptr<Tree> get_left(Tree* t) {
    return ([=]{
    const Node* __node = dynamic_cast<const Node*>(t);
    if (__node) {
        Tree* l = __node->left.get();
        return l;
    }
    return std::make_shared<Leaf>();
    return nullptr;
}());
}

std::shared_ptr<Tree> get_right(Tree* t) {
    return ([=]{
    const Node* __node = dynamic_cast<const Node*>(t);
    if (__node) {
        Tree* r = __node->right.get();
        return r;
    }
    return std::make_shared<Leaf>();
    return nullptr;
}());
}

int64_t get_value(Tree* t) {
    return ([=]{
    const Node* __node = dynamic_cast<const Node*>(t);
    if (__node) {
        int64_t v = __node->value;
        return v;
    }
    return int64_t(0);
    return int64_t(0);
}());
}

auto print_preorder(Tree* t) {
    if (!is_leaf((Tree*)(t))) {
        int64_t v = get_value((Tree*)(t));
        std::shared_ptr<Tree> l = get_left((Tree*)(t));
        std::shared_ptr<Tree> r = get_right((Tree*)(t));
        std::cout << v;
        std::cout << std::endl;
        print_preorder(l.get());
        print_preorder(r.get());
    }
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << std::string("Tree1 is:");
        std::cout << std::endl;
        print_preorder(tree1.get());
        std::cout << std::string("Tree2 is:");
        std::cout << std::endl;
        print_preorder(tree2.get());
        std::cout << std::string("Merged Tree is:");
        std::cout << std::endl;
        print_preorder(merged_tree.get());
    }
    return 0;
}
