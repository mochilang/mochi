// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct SplitResult;

std::ostream& operator<<(std::ostream&, const SplitResult&);


struct SplitResult {
    int64_t left;
    int64_t right;
    auto operator<=>(const SplitResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const SplitResult& v) {
    os << '{' << "'left': "<< v.left
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

double _random();
int64_t new_node(int64_t value);
SplitResult split(int64_t root, int64_t value);
int64_t merge(int64_t left, int64_t right);
int64_t insert(int64_t root, int64_t value);
int64_t erase(int64_t root, int64_t value);
std::vector<int64_t> inorder(int64_t i, const std::vector<int64_t>& acc);
int main();

int64_t NIL = (int64_t(0) - int64_t(1));
std::vector<int64_t> node_values = {};
std::vector<double> node_priors = {};
std::vector<int64_t> node_lefts = {};
std::vector<int64_t> node_rights = {};
int64_t seed = int64_t(1);

double _random() {
    seed = (((seed * int64_t(13)) + int64_t(7)) % int64_t(100));
    return ((double)((double)(seed)) / (100.0));
}

int64_t new_node(int64_t value) {
    node_values = ([&]{ auto __tmp = node_values; __tmp.push_back(value); return __tmp; }());
    node_priors = ([&]{ auto __tmp = node_priors; __tmp.push_back((double)_random()); return __tmp; }());
    node_lefts = ([&]{ auto __tmp = node_lefts; __tmp.push_back(NIL); return __tmp; }());
    node_rights = ([&]{ auto __tmp = node_rights; __tmp.push_back(NIL); return __tmp; }());
    return (node_values.size() - int64_t(1));
}

SplitResult split(int64_t root, int64_t value) {
    if ((root == NIL)) {
        return SplitResult{.left = NIL, .right = NIL};
    }
    if ((value < node_values[root])) {
        SplitResult res = _split(node_lefts[root], value);
        node_lefts[root] = res.right;
        return SplitResult{.left = res.left, .right = root};
    }
    SplitResult res = _split(node_rights[root], value);
    node_rights[root] = res.left;
    return SplitResult{.left = root, .right = res.right};
}

int64_t merge(int64_t left, int64_t right) {
    if ((left == NIL)) {
        return right;
    }
    if ((right == NIL)) {
        return left;
    }
    if ((node_priors[left] < node_priors[right])) {
        node_rights[left] = merge(node_rights[left], right);
        return left;
    }
    node_lefts[right] = merge(left, node_lefts[right]);
    return right;
}

int64_t insert(int64_t root, int64_t value) {
    int64_t node = new_node(value);
    SplitResult res = _split(root, value);
    return merge(merge(res.left, node), res.right);
}

int64_t erase(int64_t root, int64_t value) {
    SplitResult res1 = _split(root, (value - int64_t(1)));
    SplitResult res2 = _split(res1.right, value);
    return merge(res1.left, res2.right);
}

std::vector<int64_t> inorder(int64_t i, const std::vector<int64_t>& acc) {
    if ((i == NIL)) {
        return acc;
    }
    std::vector<int64_t> left_acc = inorder(node_lefts[i], acc);
    auto with_node = ([&]{ auto __tmp = left_acc; __tmp.push_back(node_values[i]); return __tmp; }());
    return inorder(node_rights[i], (std::vector<int64_t>)(with_node));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        int64_t root = NIL;
        root = insert(root, int64_t(1));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = inorder(root, std::vector<int64_t>{}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        root = insert(root, int64_t(3));
        root = insert(root, int64_t(5));
        root = insert(root, int64_t(17));
        root = insert(root, int64_t(19));
        root = insert(root, int64_t(2));
        root = insert(root, int64_t(16));
        root = insert(root, int64_t(4));
        root = insert(root, int64_t(0));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = inorder(root, std::vector<int64_t>{}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        root = insert(root, int64_t(4));
        root = insert(root, int64_t(4));
        root = insert(root, int64_t(4));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = inorder(root, std::vector<int64_t>{}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        root = erase(root, int64_t(0));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = inorder(root, std::vector<int64_t>{}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
        root = erase(root, int64_t(4));
        std::cout << ([&]{ std::ostringstream ss; { auto __tmp = inorder(root, std::vector<int64_t>{}); ss << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) ss << ' '; ss << __tmp[i]; } ss << "]"; }
 return ss.str(); }());
        std::cout << std::endl;
    }
    return 0;
}
