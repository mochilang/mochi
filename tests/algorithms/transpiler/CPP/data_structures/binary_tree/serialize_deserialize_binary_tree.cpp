// Generated by Mochi transpiler v0.10.59 on 2025-08-07 00:23:52 GMT+7
#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
static std::vector<std::string> _split(const std::string& s, const std::string& sep) {
    std::vector<std::string> out; size_t pos = 0, prev = 0;
    while((pos = s.find(sep, prev)) != std::string::npos){ out.push_back(s.substr(prev, pos - prev)); prev = pos + sep.size(); }
    out.push_back(s.substr(prev));
    return out;
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}
struct TreeNode;
struct Empty;
struct Node;
struct BuildResult;

std::ostream& operator<<(std::ostream&, const TreeNode&);
std::ostream& operator<<(std::ostream&, const Empty&);
std::ostream& operator<<(std::ostream&, const Node&);
std::ostream& operator<<(std::ostream&, const BuildResult&);


struct TreeNode {
    virtual ~TreeNode() = default;
};

struct Empty : TreeNode {
    auto operator<=>(const Empty&) const = default;
};

struct Node : TreeNode {
    std::shared_ptr<TreeNode> left;
    int64_t value;
    std::shared_ptr<TreeNode> right;
    Node(std::shared_ptr<TreeNode> left_, int64_t value_, std::shared_ptr<TreeNode> right_) : left(std::move(left_)), value(value_), right(std::move(right_)) {}
    auto operator<=>(const Node&) const = default;
};

struct BuildResult {
    std::shared_ptr<TreeNode> node;
    int64_t next;
    auto operator<=>(const BuildResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Empty& v) {
    os << '{' << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'left': "<< v.left
 << ", " << "'value': "<< v.value
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const BuildResult& v) {
    os << '{' << "'node': "<< v.node
 << ", " << "'next': "<< v.next
 << '}';
    return os;
}

int64_t digit(std::string ch);
int64_t to_int(std::string s);
std::vector<std::string> split(std::string s, std::string sep);
std::string serialize(TreeNode* node);
BuildResult build(const std::vector<std::string>& nodes, int64_t idx);
std::shared_ptr<TreeNode> deserialize(std::string data);
std::shared_ptr<TreeNode> five_tree();
int main();

int64_t digit(std::string ch) {
    std::string digits = std::string("0123456789");
    int64_t i = int64_t(0);
    while ((i < digits.size())) {
        if ((digits.substr(i, (i + int64_t(1)) - i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

int64_t to_int(std::string s) {
    int64_t i = int64_t(0);
    int64_t sign = int64_t(1);
    if (((s.size() > int64_t(0)) && (s.substr(int64_t(0), int64_t(1) - int64_t(0)) == std::string("-")))) {
        sign = -int64_t(1);
        i = int64_t(1);
    }
    int64_t num = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        num = ((num * int64_t(10)) + digit(ch));
        i = (i + int64_t(1));
    }
    return (sign * num);
}

std::vector<std::string> split(std::string s, std::string sep) {
    std::vector<std::string> res = {};
    std::string current = std::string("");
    int64_t i = int64_t(0);
    while ((i < s.size())) {
        std::string ch = s.substr(i, (i + int64_t(1)) - i);
        if ((ch == sep)) {
            res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
            current = std::string("");
        } else {
            current = (current + ch);
        }
        i = (i + int64_t(1));
    }
    res = ([&]{ auto __tmp = res; __tmp.push_back(current); return __tmp; }());
    return res;
}

std::string serialize(TreeNode* node) {
    return ([=]{
    const Empty* __empty = dynamic_cast<const Empty*>(node);
    if (__empty) {
        return std::string("null");
    }
    const Node* __node = dynamic_cast<const Node*>(node);
    if (__node) {
        TreeNode* l = __node->left.get();
        int64_t v = __node->value;
        TreeNode* r = __node->right.get();
        return ((((([&]{ std::ostringstream ss; ss << std::boolalpha << v; return ss.str(); }()) + std::string(",")) + serialize(l)) + std::string(",")) + serialize(r));
    }
    return std::string{};
}());
}

BuildResult build(const std::vector<std::string>& nodes, int64_t idx) {
    std::string value = nodes[idx];
    if ((value == std::string("null"))) {
        return BuildResult{.node = Empty{}, .next = (idx + int64_t(1))};
    }
    BuildResult left_res = build(nodes, (idx + int64_t(1)));
    BuildResult right_res = build(nodes, left_res.next);
    std::shared_ptr<TreeNode> node = std::make_shared<Node>(left_res.node, to_int(value), right_res.node);
    return BuildResult{.node = node, .next = right_res.next};
}

std::shared_ptr<TreeNode> deserialize(std::string data) {
    std::vector<std::string> nodes = _split(data, std::string(","));
    BuildResult res = build(nodes, int64_t(0));
    return res.node;
}

std::shared_ptr<TreeNode> five_tree() {
    std::shared_ptr<TreeNode> left_child = std::make_shared<Node>(int64_t(2), Empty{}, Empty{});
    std::shared_ptr<TreeNode> right_left = std::make_shared<Node>(int64_t(4), Empty{}, Empty{});
    std::shared_ptr<TreeNode> right_right = std::make_shared<Node>(int64_t(5), Empty{}, Empty{});
    std::shared_ptr<TreeNode> right_child = std::make_shared<Node>(int64_t(3), right_left, right_right);
    return std::make_shared<Node>(int64_t(1), left_child, right_child);
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::shared_ptr<TreeNode> root = five_tree();
        std::string serial = serialize(root.get());
        std::cout << serial;
        std::cout << std::endl;
        std::shared_ptr<TreeNode> rebuilt = deserialize(serial);
        std::string serial2 = serialize(rebuilt.get());
        std::cout << serial2;
        std::cout << std::endl;
        std::cout << ((serial == serial2) ? "true" : "false");
        std::cout << std::endl;
    }
    return 0;
}
