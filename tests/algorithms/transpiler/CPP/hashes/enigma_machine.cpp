// Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:02:00 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <functional>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> decltype(auto) _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << ': '; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    std::ostringstream ss;
    ss << std::boolalpha << v;
    return ss.str();
}

std::vector<std::string> build_alphabet();
std::vector<int64_t> range_list(int64_t n);
std::vector<int64_t> reversed_range_list(int64_t n);
int64_t index_of_char(const std::vector<std::string>& lst, std::string ch);
int64_t index_of_int(const std::vector<int64_t>& lst, int64_t value);
std::string enigma_encrypt(std::string message, int64_t token);
int main();

std::string ASCII = std::string(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}");
std::string message = std::string("HELLO WORLD");
int64_t token = int64_t(123);
std::string encoded = "";

std::vector<std::string> build_alphabet() {
    std::vector<std::string> result = {};
    int64_t i = int64_t(0);
    while ((i < ASCII.size())) {
        result = ([&]{ auto& __tmp = result; __tmp.push_back(([&](const auto& __s){ auto __i = i; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(ASCII)); return __tmp; }());
        i = (i + int64_t(1));
    }
    return result;
}

std::vector<int64_t> range_list(int64_t n) {
    std::vector<int64_t> lst = {};
    int64_t i = int64_t(0);
    while ((i < n)) {
        lst = ([&]{ auto& __tmp = lst; __tmp.push_back(i); return __tmp; }());
        i = (i + int64_t(1));
    }
    return lst;
}

std::vector<int64_t> reversed_range_list(int64_t n) {
    std::vector<int64_t> lst = {};
    int64_t i = (n - int64_t(1));
    while ((i >= int64_t(0))) {
        lst = ([&]{ auto& __tmp = lst; __tmp.push_back(i); return __tmp; }());
        i = (i - int64_t(1));
    }
    return lst;
}

int64_t index_of_char(const std::vector<std::string>& lst, std::string ch) {
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if ((_index(lst, i) == ch)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

int64_t index_of_int(const std::vector<int64_t>& lst, int64_t value) {
    int64_t i = int64_t(0);
    while ((i < lst.size())) {
        if ((_index(lst, i) == value)) {
            return i;
        }
        i = (i + int64_t(1));
    }
    return -int64_t(1);
}

std::string enigma_encrypt(std::string message, int64_t token) {
    std::vector<std::string> alphabets = build_alphabet();
    int n = alphabets.size();
    std::vector<int64_t> gear_one = range_list((int64_t)(n));
    std::vector<int64_t> gear_two = range_list((int64_t)(n));
    std::vector<int64_t> gear_three = range_list((int64_t)(n));
    std::vector<int64_t> reflector = reversed_range_list((int64_t)(n));
    int64_t gear_one_pos = int64_t(0);
    int64_t gear_two_pos = int64_t(0);
    int64_t gear_three_pos = int64_t(0);
    std::function<std::any()> rotator;
    rotator = [=, &rotator]() mutable {
        int64_t i = _index(gear_one, int64_t(0));
        gear_one = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), gear_one.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+gear_one.size()); })(gear_one);
        gear_one = ([&]{ auto& __tmp = gear_one; __tmp.push_back(i); return __tmp; }());
        gear_one_pos = (gear_one_pos + int64_t(1));
        if (((gear_one_pos % n) == int64_t(0))) {
            i = _index(gear_two, int64_t(0));
            gear_two = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), gear_two.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+gear_two.size()); })(gear_two);
            gear_two = ([&]{ auto& __tmp = gear_two; __tmp.push_back(i); return __tmp; }());
            gear_two_pos = (gear_two_pos + int64_t(1));
            if (((gear_two_pos % n) == int64_t(0))) {
                i = _index(gear_three, int64_t(0));
                gear_three = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(int64_t(1), gear_three.size() - int64_t(1)); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+int64_t(1), __v.begin()+gear_three.size()); })(gear_three);
                gear_three = ([&]{ auto& __tmp = gear_three; __tmp.push_back(i); return __tmp; }());
                gear_three_pos = (gear_three_pos + int64_t(1));
            }
        }
        return std::any();
    };
    std::function<std::string(std::string)> engine;
    engine = [=, &engine](std::string ch) mutable {
        int64_t target = index_of_char(alphabets, ch);
        target = _index(gear_one, target);
        target = _index(gear_two, target);
        target = _index(gear_three, target);
        target = _index(reflector, target);
        target = index_of_int(gear_three, target);
        target = index_of_int(gear_two, target);
        target = index_of_int(gear_one, target);
        rotator();
        return _index(alphabets, target);
    };
    int64_t t = int64_t(0);
    while ((t < token)) {
        rotator();
        t = (t + int64_t(1));
    }
    std::string result = std::string("");
    int64_t idx = int64_t(0);
    while ((idx < message.size())) {
        result = (result + engine(([&](const auto& __s){ auto __i = idx; if (__i < 0) __i += __s.size(); return std::string(1, __s[static_cast<size_t>(__i)]); })(message)));
        idx = (idx + int64_t(1));
    }
    return result;
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        encoded = enigma_encrypt(message, token);
        std::cout << encoded;
        std::cout << std::endl;
    }
    return 0;
}
