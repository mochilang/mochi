// Generated by Mochi transpiler v0.10.66 on 2025-08-15 15:23:15 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}

int64_t ord(std::string ch);
int64_t pow2(int64_t n);
int64_t bit_and(int64_t a, int64_t b);
int64_t bit_or(int64_t a, int64_t b);
int64_t bit_xor(int64_t a, int64_t b);
int64_t bit_not(int64_t a);
int64_t rotate_left(int64_t n, int64_t b);
std::string to_hex32(int64_t n);
std::string sha1(std::string message);
int main();

int64_t MOD = int64_t(4294967296);
std::string ASCII = std::string(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

int64_t ord(std::string ch) {
    int64_t i = int64_t(0);
    while ((i < ASCII.size())) {
        if ((([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(ASCII) == ch)) {
            return (int64_t(32) + i);
        }
        i = (i + int64_t(1));
    }
    return int64_t(0);
}

int64_t pow2(int64_t n) {
    int64_t res = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < n)) {
        res = (res * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t bit_and(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < int64_t(32))) {
        if ((((x % int64_t(2)) == int64_t(1)) && ((y % int64_t(2)) == int64_t(1)))) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t bit_or(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < int64_t(32))) {
        int64_t abit = (x % int64_t(2));
        int64_t bbit = (y % int64_t(2));
        if (((abit == int64_t(1)) || (bbit == int64_t(1)))) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t bit_xor(int64_t a, int64_t b) {
    int64_t x = a;
    int64_t y = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    int64_t i = int64_t(0);
    while ((i < int64_t(32))) {
        int64_t abit = (x % int64_t(2));
        int64_t bbit = (y % int64_t(2));
        if ((((abit == int64_t(1)) && (bbit == int64_t(0))) || ((abit == int64_t(0)) && (bbit == int64_t(1))))) {
            res = (res + bit);
        }
        x = (x / int64_t(2));
        y = (y / int64_t(2));
        bit = (bit * int64_t(2));
        i = (i + int64_t(1));
    }
    return res;
}

int64_t bit_not(int64_t a) {
    return ((MOD - int64_t(1)) - a);
}

int64_t rotate_left(int64_t n, int64_t b) {
    int64_t left = ((n * pow2(b)) % MOD);
    int64_t right = (n / pow2((int64_t(32) - b)));
    return ((left + right) % MOD);
}

std::string to_hex32(int64_t n) {
    std::string digits = std::string("0123456789abcdef");
    int64_t num = n;
    std::string s = std::string("");
    if ((num == int64_t(0))) {
        s = std::string("0");
    }
    while ((num > int64_t(0))) {
        int64_t d = (num % int64_t(16));
        s = (([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(d, (d + int64_t(1)) - d); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+d, __v.begin()+(d + int64_t(1))); })(digits) + s);
        num = (num / int64_t(16));
    }
    while ((s.size() < int64_t(8))) {
        s = (std::string("0") + s);
    }
    if ((s.size() > int64_t(8))) {
        s = ([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr((s.size() - int64_t(8)), s.size() - (s.size() - int64_t(8))); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+(s.size() - int64_t(8)), __v.begin()+s.size()); })(s);
    }
    return s;
}

std::string sha1(std::string message) {
    std::vector<int64_t> bytes = {};
    int64_t i = int64_t(0);
    while ((i < message.size())) {
        bytes = ([&]{ auto __tmp = bytes; __tmp.push_back(ord(([&](const auto& __v){ if constexpr(std::is_same_v<std::decay_t<decltype(__v)>, std::string>) return __v.substr(i, (i + int64_t(1)) - i); else return std::vector<typename std::decay_t<decltype(__v)>::value_type>(__v.begin()+i, __v.begin()+(i + int64_t(1))); })(message))); return __tmp; }());
        i = (i + int64_t(1));
    }
    bytes = ([&]{ auto __tmp = bytes; __tmp.push_back(int64_t(128)); return __tmp; }());
    while ((((bytes.size() + int64_t(8)) % int64_t(64)) != int64_t(0))) {
        bytes = ([&]{ auto __tmp = bytes; __tmp.push_back(int64_t(0)); return __tmp; }());
    }
    int64_t bit_len = (message.size() * int64_t(8));
    std::vector<int64_t> len_bytes = std::vector<int64_t>{int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0), int64_t(0)};
    int64_t bl = bit_len;
    int64_t k = int64_t(7);
    while ((k >= int64_t(0))) {
        len_bytes[static_cast<size_t>(k)] = (bl % int64_t(256));
        bl = (bl / int64_t(256));
        k = (k - int64_t(1));
    }
    int64_t j = int64_t(0);
    while ((j < int64_t(8))) {
        bytes = ([&]{ auto __tmp = bytes; __tmp.push_back(_index(len_bytes, j)); return __tmp; }());
        j = (j + int64_t(1));
    }
    std::vector<std::vector<int64_t>> blocks = {};
    int64_t pos = int64_t(0);
    while ((pos < bytes.size())) {
        std::vector<int64_t> block = {};
        int64_t j2 = int64_t(0);
        while ((j2 < int64_t(64))) {
            block = ([&]{ auto __tmp = block; __tmp.push_back(_index(bytes, (pos + j2))); return __tmp; }());
            j2 = (j2 + int64_t(1));
        }
        blocks = ([&]{ auto __tmp = blocks; __tmp.push_back(block); return __tmp; }());
        pos = (pos + int64_t(64));
    }
    int64_t h0 = int64_t(1732584193);
    int64_t h1 = int64_t(4023233417);
    int64_t h2 = int64_t(2562383102);
    int64_t h3 = int64_t(271733878);
    int64_t h4 = int64_t(3285377520);
    int64_t bindex = int64_t(0);
    while ((bindex < blocks.size())) {
        std::vector<int64_t> block = _index(blocks, bindex);
        std::vector<int64_t> w = {};
        int64_t t = int64_t(0);
        while ((t < int64_t(16))) {
            int64_t j3 = (t * int64_t(4));
            int64_t word = ((((((_index(block, j3) * int64_t(256)) + _index(block, (j3 + int64_t(1)))) * int64_t(256)) + _index(block, (j3 + int64_t(2)))) * int64_t(256)) + _index(block, (j3 + int64_t(3))));
            w = ([&]{ auto __tmp = w; __tmp.push_back(word); return __tmp; }());
            t = (t + int64_t(1));
        }
        while ((t < int64_t(80))) {
            int64_t tmp = bit_xor(bit_xor(bit_xor(_index(w, (t - int64_t(3))), _index(w, (t - int64_t(8)))), _index(w, (t - int64_t(14)))), _index(w, (t - int64_t(16))));
            w = ([&]{ auto __tmp = w; __tmp.push_back(rotate_left(tmp, int64_t(1))); return __tmp; }());
            t = (t + int64_t(1));
        }
        int64_t a = h0;
        int64_t b = h1;
        int64_t c = h2;
        int64_t d = h3;
        int64_t e = h4;
        int64_t i2 = int64_t(0);
        while ((i2 < int64_t(80))) {
            int64_t f = int64_t(0);
            int64_t kconst = int64_t(0);
            if ((i2 < int64_t(20))) {
                f = bit_or(bit_and(b, c), bit_and(bit_not(b), d));
                kconst = int64_t(1518500249);
            } else             if ((i2 < int64_t(40))) {
                f = bit_xor(bit_xor(b, c), d);
                kconst = int64_t(1859775393);
            } else             if ((i2 < int64_t(60))) {
                f = bit_or(bit_or(bit_and(b, c), bit_and(b, d)), bit_and(c, d));
                kconst = int64_t(2400959708);
            } else {
                f = bit_xor(bit_xor(b, c), d);
                kconst = int64_t(3395469782);
            }


            int64_t temp = (((((rotate_left(a, int64_t(5)) + f) + e) + kconst) + _index(w, i2)) % MOD);
            e = d;
            d = c;
            c = rotate_left(b, int64_t(30));
            b = a;
            a = temp;
            i2 = (i2 + int64_t(1));
        }
        h0 = ((h0 + a) % MOD);
        h1 = ((h1 + b) % MOD);
        h2 = ((h2 + c) % MOD);
        h3 = ((h3 + d) % MOD);
        h4 = ((h4 + e) % MOD);
        bindex = (bindex + int64_t(1));
    }
    return ((((to_hex32(h0) + to_hex32(h1)) + to_hex32(h2)) + to_hex32(h3)) + to_hex32(h4));
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        std::cout << sha1(std::string("Test String"));
        std::cout << std::endl;
    }
    return 0;
}
