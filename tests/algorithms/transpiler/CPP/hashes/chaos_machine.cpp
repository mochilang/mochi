// Generated by Mochi transpiler v0.10.66 on 2025-08-16 10:09:21 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <optional>
#include <any>
#include <type_traits>
#include <limits>
#include <cstdlib>
#include <chrono>
#include <sys/resource.h>
#include <unistd.h>
#include <cstdio>
#include <map>


static int _now() {
    static long long seed = 0;
    static bool seeded = false;
    if (!seeded) {
        const char* s = std::getenv("MOCHI_NOW_SEED");
        if (s && *s) { seed = std::atoll(s); seeded = true; }
    }
    if (seeded) {
        seed = (seed * 1664525 + 1013904223) % 2147483647;
        return static_cast<int>(seed);
    }
    return (int)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);
}
static long long _mem() {
#if defined(__linux__)
    long long rss = 0;
    FILE* f = std::fopen("/proc/self/statm", "r");
    if (f) { long long pages; if (std::fscanf(f, "%*s %lld", &pages) == 1) rss = pages * sysconf(_SC_PAGESIZE); std::fclose(f); }
    if (rss == 0) {
        f = std::fopen("/proc/self/status", "r");
        if (f) {
            char buf[256];
            while (std::fgets(buf, sizeof buf, f)) {
                long long val;
                if (std::sscanf(buf, "VmRSS: %lld", &val) == 1 || std::sscanf(buf, "VmHWM: %lld", &val) == 1) {
                    rss = val * 1024;
                    break;
                }
            }
            std::fclose(f);
        }
    }
    if (rss == 0) {
        struct rusage usage{};
        getrusage(RUSAGE_SELF, &usage);
        rss = (long long)usage.ru_maxrss * 1024;
    }
    return rss;
#elif defined(__APPLE__)
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss;
#else
    struct rusage usage{};
    getrusage(RUSAGE_SELF, &usage);
    return (long long)usage.ru_maxrss * 1024;
#endif
}
static long long _bench_now() {
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}
template<typename V> auto _index(const V& v, int64_t i) {
    if (i < 0) i += v.size();
    if (i < 0 || i >= (int64_t)v.size()) return typename V::value_type{};
    return v[static_cast<size_t>(i)];
}
static void any_to_stream(std::ostream& os, const std::any& val) {
    if(val.type() == typeid(int)) os << std::any_cast<int>(val);
    else if(val.type() == typeid(int64_t)) os << std::any_cast<int64_t>(val);
    else if(val.type() == typeid(double)) os << std::any_cast<double>(val);
    else if(val.type() == typeid(bool)) os << (std::any_cast<bool>(val) ? "true" : "false");
    else if(val.type() == typeid(std::string)) os << std::any_cast<std::string>(val);
    else if(val.type() == typeid(std::vector<int64_t>)) { const auto& v = std::any_cast<const std::vector<int64_t>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::vector<int64_t>>)) { const auto& vv = std::any_cast<const std::vector<std::vector<int64_t>>&>(val); os << '['; for(size_t i=0;i<vv.size();++i){ if(i>0) os << ' '; const auto& v = vv[i]; os << '['; for(size_t j=0;j<v.size();++j){ if(j>0) os << ' '; os << v[j]; } os << ']'; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::string>)) { const auto& v = std::any_cast<const std::vector<std::string>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; os << v[i]; } os << ']'; }
    else if(val.type() == typeid(std::vector<std::any>)) { const auto& v = std::any_cast<const std::vector<std::any>&>(val); os << '['; for(size_t i=0;i<v.size();++i){ if(i>0) os << ' '; any_to_stream(os, v[i]); } os << ']'; }
    else if(val.type() == typeid(std::map<std::string, std::any>)) { const auto& m = std::any_cast<const std::map<std::string, std::any>&>(val); os << '{'; bool first=true; for(const auto& p : m){ if(!first) os << ', '; first=false; os << p.first << " : "; any_to_stream(os, p.second); } os << '}'; }
    else os << "<any>";
}
static double any_to_double(const std::any& v) {
    if(v.type() == typeid(int)) return (double)std::any_cast<int>(v);
    if(v.type() == typeid(double)) return std::any_cast<double>(v);
    return 0;
}
static std::string any_to_string(const std::any& v) {
    if(v.type() == typeid(std::string)) return std::any_cast<std::string>(v);
    if(v.type() == typeid(int)) return std::to_string(std::any_cast<int>(v));
    if(v.type() == typeid(int64_t)) return std::to_string(std::any_cast<int64_t>(v));
    if(v.type() == typeid(double)) { std::ostringstream ss; ss << std::any_cast<double>(v); return ss.str(); }
    if(v.type() == typeid(bool)) return std::any_cast<bool>(v) ? "true" : "false";
    return std::string();
}
template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "[";
    for(size_t i=0;i<vec.size();++i){ if(i>0) os << ' '; if constexpr(std::is_same_v<T, std::any>) any_to_stream(os, vec[i]); else os << vec[i]; }
    os << "]";
    return os;
}


template<typename T> std::string _to_string(const T& v) {
    if constexpr(std::is_same_v<T, double>) {
        std::ostringstream ss;
        ss << std::defaultfloat << std::setprecision(15) << v;
        auto s = ss.str();
        auto epos = s.find('e');
        if(epos == std::string::npos) epos = s.find('E');
        std::string exp;
        if(epos != std::string::npos){ exp = s.substr(epos); s = s.substr(0, epos); }
        auto pos = s.find('.');
        if(pos != std::string::npos){
            while(!s.empty() && s.back() == '0') s.pop_back();
            if(!s.empty() && s.back() == '.') s.pop_back();
        }
        return s + exp;
    } else {
        std::ostringstream ss;
        ss << std::boolalpha << v;
        return ss.str();
    }
}
struct Machine;
struct PullResult;

std::ostream& operator<<(std::ostream&, const Machine&);
std::ostream& operator<<(std::ostream&, const PullResult&);


struct Machine {
    std::vector<double> buffer;
    std::vector<double> params;
    int64_t _time;
    auto operator<=>(const Machine&) const = default;
};

struct PullResult {
    int64_t value;
    Machine machine;
    auto operator<=>(const PullResult&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Machine& v) {
    os << '{' << "'buffer': "<< "["; for(size_t i=0;i<v.buffer.size();++i){ if(i>0) os << ", "; os << v.buffer[i]; } os << "]"
 << ", " << "'params': "<< "["; for(size_t i=0;i<v.params.size();++i){ if(i>0) os << ", "; os << v.params[i]; } os << "]"
 << ", " << "'_time': "<< v._time
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const PullResult& v) {
    os << '{' << "'value': "<< v.value
 << ", " << "'machine': "<< v.machine
 << '}';
    return os;
}

double round_dec(double x, int64_t n);
Machine reset();
Machine push(const Machine& m, int64_t seed);
int64_t _xor(int64_t a, int64_t b);
int64_t xorshift(int64_t x, int64_t y);
PullResult pull(const Machine& m);
int main();

std::vector<double> K = std::vector<double>{0.33, 0.44, 0.55, 0.44, 0.33};
int64_t t = int64_t(3);
int64_t size = int64_t(5);
Machine machine = Machine{};
int64_t i = int64_t(0);
PullResult res = PullResult{};

double round_dec(double x, int64_t n) {
    double m10 = 1.0;
    int64_t i = int64_t(0);
    while ((i < n)) {
        m10 = (m10 * 10.0);
        i = (i + int64_t(1));
    }
    double y = ((x * m10) + 0.5);
    return ((double)((1.0 * (int64_t)(y))) / (m10));
}

Machine reset() {
    return Machine{.buffer = K, .params = std::vector<double>{0.0, 0.0, 0.0, 0.0, 0.0}, ._time = int64_t(0)};
}

Machine push(const Machine& m, int64_t seed) {
    std::vector<double> buf = m.buffer;
    std::vector<double> par = m.params;
    int64_t i = int64_t(0);
    while ((i < buf.size())) {
        double value = _index(buf, i);
        double e = ((double)((1.0 * seed)) / (value));
        double next_value = (_index(buf, ((i + int64_t(1)) % size)) + e);
        next_value = (next_value - (1.0 * (int64_t)(next_value)));
        double r = (_index(par, i) + e);
        r = (r - (1.0 * (int64_t)(r)));
        r = (r + 3.0);
        buf[static_cast<size_t>(i)] = round_dec(((r * next_value) * (1.0 - next_value)), int64_t(10));
        par[static_cast<size_t>(i)] = r;
        i = (i + int64_t(1));
    }
    return Machine{.buffer = buf, .params = par, ._time = (m._time + int64_t(1))};
}

int64_t _xor(int64_t a, int64_t b) {
    int64_t aa = a;
    int64_t bb = b;
    int64_t res = int64_t(0);
    int64_t bit = int64_t(1);
    while (((aa > int64_t(0)) || (bb > int64_t(0)))) {
        int64_t abit = (aa % int64_t(2));
        int64_t bbit = (bb % int64_t(2));
        if ((abit != bbit)) {
            res = (res + bit);
        }
        aa = (aa / int64_t(2));
        bb = (bb / int64_t(2));
        bit = (bit * int64_t(2));
    }
    return res;
}

int64_t xorshift(int64_t x, int64_t y) {
    int64_t xv = x;
    int64_t yv = y;
    xv = _xor(xv, (yv / int64_t(8192)));
    yv = _xor(yv, (xv * int64_t(131072)));
    xv = _xor(xv, (yv / int64_t(32)));
    return xv;
}

PullResult pull(const Machine& m) {
    std::vector<double> buf = m.buffer;
    std::vector<double> par = m.params;
    int64_t key = (m._time % size);
    int64_t i = int64_t(0);
    while ((i < t)) {
        double r = _index(par, key);
        double value = _index(buf, key);
        buf[static_cast<size_t>(key)] = round_dec(((r * value) * (1.0 - value)), int64_t(10));
        double new_r = (((1.0 * m._time) * 0.01) + (r * 1.01));
        new_r = (new_r - (1.0 * (int64_t)(new_r)));
        par[static_cast<size_t>(key)] = (new_r + 3.0);
        i = (i + int64_t(1));
    }
    int64_t x = (int64_t)((_index(buf, ((key + int64_t(2)) % size)) * 10000000000.0));
    int64_t y = (int64_t)((_index(buf, (((key + size) - int64_t(2)) % size)) * 10000000000.0));
    Machine new_machine = Machine{.buffer = buf, .params = par, ._time = (m._time + int64_t(1))};
    int64_t value = (xorshift(x, y) % int64_t(4294967295));
    return PullResult{.value = value, .machine = new_machine};
}

int main() {
    {
        struct __BenchGuard {
            long long start;
            __BenchGuard() : start(_bench_now()) {}
            ~__BenchGuard() {
                    auto __bench_end = _bench_now();
                    auto __bench_mem = _mem();
                    auto __bench_dur = __bench_end - start;
                    std::cout << "{\n  \"duration_us\": " << __bench_dur << ",\n  \"memory_bytes\": " << __bench_mem << ",\n  \"name\": \"main\"\n}" << std::endl;
            }
        } __bench_guard;
        machine = reset();
        while ((i < int64_t(100))) {
            machine = push(machine, i);
            i = (i + int64_t(1));
        }
        res = pull(machine);
        std::cout << res.value;
        std::cout << std::endl;
        { auto __tmp1 = res.machine.buffer; std::cout << "["; for(size_t i=0;i<__tmp1.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp1[i]; } std::cout << "]"; }
        std::cout << std::endl;
        { auto __tmp2 = res.machine.params; std::cout << "["; for(size_t i=0;i<__tmp2.size();++i){ if(i>0) std::cout << ' '; std::cout << __tmp2[i]; } std::cout << "]"; }
        std::cout << std::endl;
    }
    return 0;
}
